{"total_count": 24, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/108", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/108/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/108/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/108", "id": 553643298, "node_id": "MDU6SXNzdWU1NTM2NDMyOTg=", "number": 108, "title": "Refactor traced_function to work both as a decorator and as a context manager?", "user": {"login": "wyattanderson", "id": 492216, "node_id": "MDQ6VXNlcjQ5MjIxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/492216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wyattanderson", "html_url": "https://github.com/wyattanderson", "followers_url": "https://api.github.com/users/wyattanderson/followers", "following_url": "https://api.github.com/users/wyattanderson/following{/other_user}", "gists_url": "https://api.github.com/users/wyattanderson/gists{/gist_id}", "starred_url": "https://api.github.com/users/wyattanderson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wyattanderson/subscriptions", "organizations_url": "https://api.github.com/users/wyattanderson/orgs", "repos_url": "https://api.github.com/users/wyattanderson/repos", "events_url": "https://api.github.com/users/wyattanderson/events{/privacy}", "received_events_url": "https://api.github.com/users/wyattanderson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-22T16:11:44Z", "updated_at": "2020-01-22T21:25:05Z", "closed_at": "2020-01-22T21:25:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We have internally a context manager that lets us quickly throw a trace span around a block of code, e.g.\r\n\r\n```\r\nwith trace_span(name='some_hot_path'):\r\n    do_expensive_things()\r\n```\r\n\r\nI'd love to dump our internal implementation in favor of `traced_function`, ideally without having to move the body of the context manager into a function solely for the purpose of being able to decorate said function with `traced_function`.\r\n\r\nI'm imagining something like `mock.patch` etc. that are flexible enough to use either as a decorator or as a context manager:\r\n\r\n```\r\n@mock.patch(...)\r\ndef test_thing():\r\n    ...\r\n\r\n# or\r\n\r\nwith mock.patch(...):\r\n    do_thing()\r\n```\r\n\r\nhttps://github.com/python/cpython/blob/f84f65be5602e561fef04b66bb487fbc4e560db5/Lib/unittest/mock.py#L1231\r\n\r\nI think the basic idea is refactoring `traced_function` into a class that has `__call__`/`__enter__`/`__exit__`. I'm happy to put up a PR, but I wanted to gauge maintainer interest before starting the work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/92", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/92/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/92/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/92", "id": 456662604, "node_id": "MDU6SXNzdWU0NTY2NjI2MDQ=", "number": 92, "title": "Release process does not work", "user": {"login": "yurishkuro", "id": 3523016, "node_id": "MDQ6VXNlcjM1MjMwMTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3523016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurishkuro", "html_url": "https://github.com/yurishkuro", "followers_url": "https://api.github.com/users/yurishkuro/followers", "following_url": "https://api.github.com/users/yurishkuro/following{/other_user}", "gists_url": "https://api.github.com/users/yurishkuro/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurishkuro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurishkuro/subscriptions", "organizations_url": "https://api.github.com/users/yurishkuro/orgs", "repos_url": "https://api.github.com/users/yurishkuro/repos", "events_url": "https://api.github.com/users/yurishkuro/events{/privacy}", "received_events_url": "https://api.github.com/users/yurishkuro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-16T17:16:26Z", "updated_at": "2019-07-05T03:57:14Z", "closed_at": "2019-07-05T03:57:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```shell\r\n$ python setup.py sdist upload -r pypi\r\n\r\nrunning sdist\r\nrunning egg_info\r\nwriting requirements to opentracing_instrumentation.egg-info/requires.txt\r\nwriting opentracing_instrumentation.egg-info/PKG-INFO\r\nwriting top-level names to opentracing_instrumentation.egg-info/top_level.txt\r\nwriting dependency_links to opentracing_instrumentation.egg-info/dependency_links.txt\r\nreading manifest file 'opentracing_instrumentation.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwriting manifest file 'opentracing_instrumentation.egg-info/SOURCES.txt'\r\nrunning check\r\ncreating opentracing_instrumentation-3.1.0\r\ncreating opentracing_instrumentation-3.1.0/opentracing_instrumentation\r\ncreating opentracing_instrumentation-3.1.0/opentracing_instrumentation.egg-info\r\ncreating opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying files to opentracing_instrumentation-3.1.0...\r\ncopying LICENSE -> opentracing_instrumentation-3.1.0\r\ncopying MANIFEST.in -> opentracing_instrumentation-3.1.0\r\ncopying README.md -> opentracing_instrumentation-3.1.0\r\ncopying setup.cfg -> opentracing_instrumentation-3.1.0\r\ncopying setup.py -> opentracing_instrumentation-3.1.0\r\ncopying opentracing_instrumentation/__init__.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation\r\ncopying opentracing_instrumentation/config.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation\r\ncopying opentracing_instrumentation/http_client.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation\r\ncopying opentracing_instrumentation/http_server.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation\r\ncopying opentracing_instrumentation/interceptors.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation\r\ncopying opentracing_instrumentation/local_span.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation\r\ncopying opentracing_instrumentation/request_context.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation\r\ncopying opentracing_instrumentation/utils.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation\r\ncopying opentracing_instrumentation.egg-info/PKG-INFO -> opentracing_instrumentation-3.1.0/opentracing_instrumentation.egg-info\r\ncopying opentracing_instrumentation.egg-info/SOURCES.txt -> opentracing_instrumentation-3.1.0/opentracing_instrumentation.egg-info\r\ncopying opentracing_instrumentation.egg-info/dependency_links.txt -> opentracing_instrumentation-3.1.0/opentracing_instrumentation.egg-info\r\ncopying opentracing_instrumentation.egg-info/not-zip-safe -> opentracing_instrumentation-3.1.0/opentracing_instrumentation.egg-info\r\ncopying opentracing_instrumentation.egg-info/requires.txt -> opentracing_instrumentation-3.1.0/opentracing_instrumentation.egg-info\r\ncopying opentracing_instrumentation.egg-info/top_level.txt -> opentracing_instrumentation-3.1.0/opentracing_instrumentation.egg-info\r\ncopying opentracing_instrumentation/client_hooks/__init__.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/_current_span.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/_dbapi2.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/_patcher.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/_singleton.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/boto3.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/celery.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/mysqldb.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/psycopg2.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/requests.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/sqlalchemy.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/strict_redis.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/tornado_http.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/urllib.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\ncopying opentracing_instrumentation/client_hooks/urllib2.py -> opentracing_instrumentation-3.1.0/opentracing_instrumentation/client_hooks\r\nWriting opentracing_instrumentation-3.1.0/setup.cfg\r\nCreating tar archive\r\nremoving 'opentracing_instrumentation-3.1.0' (and everything under it)\r\nrunning upload\r\nWARNING: Uploading via this command is deprecated, use twine to upload instead (https://pypi.org/p/twine/)\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 67, in <module>\r\n    'sphinx_rtd_theme',\r\n  File \"/Users/yurishkuro/Uber/opentracing-python-instrumentation/env/lib/python2.7/site-packages/setuptools/__init__.py\", line 145, in setup\r\n    return distutils.core.setup(**attrs)\r\n  File \"/usr/local/Cellar/python@2/2.7.15_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py\", line 151, in setup\r\n    dist.run_commands()\r\n  File \"/usr/local/Cellar/python@2/2.7.15_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py\", line 953, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/local/Cellar/python@2/2.7.15_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py\", line 972, in run_command\r\n    cmd_obj.run()\r\n  File \"/Users/yurishkuro/Uber/opentracing-python-instrumentation/env/lib/python2.7/site-packages/setuptools/command/upload.py\", line 26, in run\r\n    orig.upload.run(self)\r\n  File \"/usr/local/Cellar/python@2/2.7.15_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/command/upload.py\", line 62, in run\r\n    self.upload_file(command, pyversion, filename)\r\n  File \"/Users/yurishkuro/Uber/opentracing-python-instrumentation/env/lib/python2.7/site-packages/setuptools/command/upload.py\", line 133, in upload_file\r\n    value = str(value).encode('utf-8')\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 664: ordinal not in range(128)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/91", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/91/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/91/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/91", "id": 456661901, "node_id": "MDU6SXNzdWU0NTY2NjE5MDE=", "number": 91, "title": "Error during `make bootstrap` (installing deps)", "user": {"login": "yurishkuro", "id": 3523016, "node_id": "MDQ6VXNlcjM1MjMwMTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3523016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurishkuro", "html_url": "https://github.com/yurishkuro", "followers_url": "https://api.github.com/users/yurishkuro/followers", "following_url": "https://api.github.com/users/yurishkuro/following{/other_user}", "gists_url": "https://api.github.com/users/yurishkuro/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurishkuro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurishkuro/subscriptions", "organizations_url": "https://api.github.com/users/yurishkuro/orgs", "repos_url": "https://api.github.com/users/yurishkuro/repos", "events_url": "https://api.github.com/users/yurishkuro/events{/privacy}", "received_events_url": "https://api.github.com/users/yurishkuro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 311757761, "node_id": "MDU6TGFiZWwzMTE3NTc3NjE=", "url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-16T17:08:02Z", "updated_at": "2019-06-16T23:09:02Z", "closed_at": "2019-06-16T23:09:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nERROR: coveralls 1.8.1 has requirement urllib3[secure]<1.25,>=1.21.1; python_version < \"3\", but you'll have urllib3 1.25.3 which is incompatible.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/90", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/90/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/90/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/90", "id": 456384731, "node_id": "MDU6SXNzdWU0NTYzODQ3MzE=", "number": 90, "title": "SQL Alchemy tracing questions", "user": {"login": "r0fls", "id": 1858004, "node_id": "MDQ6VXNlcjE4NTgwMDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1858004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r0fls", "html_url": "https://github.com/r0fls", "followers_url": "https://api.github.com/users/r0fls/followers", "following_url": "https://api.github.com/users/r0fls/following{/other_user}", "gists_url": "https://api.github.com/users/r0fls/gists{/gist_id}", "starred_url": "https://api.github.com/users/r0fls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r0fls/subscriptions", "organizations_url": "https://api.github.com/users/r0fls/orgs", "repos_url": "https://api.github.com/users/r0fls/repos", "events_url": "https://api.github.com/users/r0fls/events{/privacy}", "received_events_url": "https://api.github.com/users/r0fls/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-14T18:44:15Z", "updated_at": "2019-06-17T18:19:27Z", "closed_at": "2019-06-17T18:19:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Should it be required to manually instrument the SQL Alchemy calls? This is what I'm doing:\r\n\r\n\r\n```python\r\n# We need to delay this until after uwsgi forks\r\n@postfork\r\ndef configure_jaeger():\r\n    config = jaeger_client.Config(config={'sampler': {'type': 'const', 'param': 1}, \r\n                                'logging': True,\r\n                                'local_agent':\r\n                                {'reporting_host': JAEGER_HOST}},\r\n                        service_name=\"jaeger_opentracing_example\")\r\n    jaeger_config = config.initialize_tracer()\r\n    # This will trace all requests; routes can also be chosen individually instead\r\n    # Traced attributes lists additional request attributes we want to capture\r\n    tracing = FlaskTracing(jaeger_config, True, app, traced_attributes=['remote_addr', 'headers'])\r\n    opentracing.tracer = tracing.tracer\r\n    install_all_patches()\r\n\r\n@app.route(\"/sql\", methods=['GET'])\r\ndef get_sql():\r\n    '''Perform a simple SQL query for tracing'''\r\n    select_st = select([table]).where(or_(\r\n                  table.c.l_name == 'Hello',\r\n                  table.c.l_name == 'Hi')).order_by(table.c.f_name)\r\n   # Should this line be required?\r\n    with opentracing.tracer.start_span('sql-query', tags={'query': select_st}) as span:\r\n        with engine.begin() as conn:\r\n            result = conn.execute(select_st)\r\n            data = result.fetchall()\r\n    return str(data), 200\r\n\r\n```\r\n\r\nThe traces are great and include a good amount of detail, but if I remove the ` with opentracing.tracer.start_span('sql-query', tags={'query': select_st}) as span` line before doing the sqlalchemy call, I get no tracing detail. Should that be required?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/89", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/89/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/89/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/89", "id": 456339528, "node_id": "MDU6SXNzdWU0NTYzMzk1Mjg=", "number": 89, "title": "New release", "user": {"login": "Jamim", "id": 5607572, "node_id": "MDQ6VXNlcjU2MDc1NzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5607572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jamim", "html_url": "https://github.com/Jamim", "followers_url": "https://api.github.com/users/Jamim/followers", "following_url": "https://api.github.com/users/Jamim/following{/other_user}", "gists_url": "https://api.github.com/users/Jamim/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jamim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jamim/subscriptions", "organizations_url": "https://api.github.com/users/Jamim/orgs", "repos_url": "https://api.github.com/users/Jamim/repos", "events_url": "https://api.github.com/users/Jamim/events{/privacy}", "received_events_url": "https://api.github.com/users/Jamim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-14T16:40:28Z", "updated_at": "2019-07-07T15:27:33Z", "closed_at": "2019-07-07T15:27:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello @yurishkuro,\r\n\r\nCould you please release a new version of this library or create some [milestone](https://github.com/uber-common/opentracing-python-instrumentation/milestones) in order to increase the transparency of when it can be released?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/88", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/88/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/88/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/88", "id": 456070943, "node_id": "MDU6SXNzdWU0NTYwNzA5NDM=", "number": 88, "title": "boto3 and sqlalchemy tracing questions", "user": {"login": "r0fls", "id": 1858004, "node_id": "MDQ6VXNlcjE4NTgwMDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1858004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r0fls", "html_url": "https://github.com/r0fls", "followers_url": "https://api.github.com/users/r0fls/followers", "following_url": "https://api.github.com/users/r0fls/following{/other_user}", "gists_url": "https://api.github.com/users/r0fls/gists{/gist_id}", "starred_url": "https://api.github.com/users/r0fls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r0fls/subscriptions", "organizations_url": "https://api.github.com/users/r0fls/orgs", "repos_url": "https://api.github.com/users/r0fls/repos", "events_url": "https://api.github.com/users/r0fls/events{/privacy}", "received_events_url": "https://api.github.com/users/r0fls/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-14T05:46:45Z", "updated_at": "2019-06-14T17:01:39Z", "closed_at": "2019-06-14T17:01:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to trace boto3 and sql alchemy calls within a flask app, and I have a few observations:\r\n\r\n1. They seem to require manually instrumenting the span. For example, this generates a boto trace:\r\n\r\n```python\r\n        with opentracing.tracer.start_span('boto-call') as span:\r\n            response = ec2client.describe_instances()\r\n            reservations = response.get(\"Reservations\", []) \r\n```\r\n\r\nBut simply doing this does not:\r\n\r\n```python\r\n            response = ec2client.describe_instances()\r\n            reservations = response.get(\"Reservations\", []) \r\n```\r\n\r\nI face the same issue with the sqlalchemy route. Is this expected? I'm initiating the Jaeger client as follows:\r\n\r\n```python\r\n# We need to delay this until after uwsgi forks\r\n@postfork\r\ndef configure_jaeger():\r\n    global JAEGER_HOST\r\n    JAEGER_HOST = environ.get('JAEGER_HOST', '')\r\n    config = jaeger_client.Config(config={'sampler': {'type': 'const', 'param': 1},\r\n                                'logging': True,\r\n                                'local_agent':\r\n                                {'reporting_host': JAEGER_HOST}},\r\n                        service_name=\"jaeger_opentracing_example\")\r\n    jaeger_config = config.initialize_tracer()\r\n    tracing = FlaskTracing(jaeger_config, True, app, traced_attributes=['remote_addr', 'headers'])\r\n    opentracing.tracer = tracing.tracer\r\n    install_all_patches()\r\n```\r\n\r\n2. The boto3 request doesn't include very much detail. For instance below, I would expect this to capture the type of AWS request being made at the least (in this case `DescribeInstance`):\r\n\r\n![Screenshot from 2019-06-13 22-39-22](https://user-images.githubusercontent.com/1858004/59486012-c1a48280-8e2c-11e9-85e7-a06bee741c10.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/87", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/87/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/87/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/87", "id": 454410080, "node_id": "MDU6SXNzdWU0NTQ0MTAwODA=", "number": 87, "title": "Upgrade Travis CI to support testing with varying dependency versions", "user": {"login": "yurishkuro", "id": 3523016, "node_id": "MDQ6VXNlcjM1MjMwMTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3523016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurishkuro", "html_url": "https://github.com/yurishkuro", "followers_url": "https://api.github.com/users/yurishkuro/followers", "following_url": "https://api.github.com/users/yurishkuro/following{/other_user}", "gists_url": "https://api.github.com/users/yurishkuro/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurishkuro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurishkuro/subscriptions", "organizations_url": "https://api.github.com/users/yurishkuro/orgs", "repos_url": "https://api.github.com/users/yurishkuro/repos", "events_url": "https://api.github.com/users/yurishkuro/events{/privacy}", "received_events_url": "https://api.github.com/users/yurishkuro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 311757760, "node_id": "MDU6TGFiZWwzMTE3NTc3NjA=", "url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 311757761, "node_id": "MDU6TGFiZWwzMTE3NTc3NjE=", "url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-10T23:04:14Z", "updated_at": "2019-07-07T15:58:43Z", "closed_at": "2019-07-07T15:58:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A number of PRs going in that require testing with different versions of major dependency versions, like Tornado 4 - 5, Celery 3 - 4 (#85).\r\n\r\nUsing `tox` was suggested somewhere as an alternative to Travis matrix.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/81", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/81/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/81/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/81", "id": 445438556, "node_id": "MDU6SXNzdWU0NDU0Mzg1NTY=", "number": 81, "title": "Psycopg2 cursor wrapper doesn't support Composable as sql statement", "user": {"login": "condorcet", "id": 2952010, "node_id": "MDQ6VXNlcjI5NTIwMTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2952010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/condorcet", "html_url": "https://github.com/condorcet", "followers_url": "https://api.github.com/users/condorcet/followers", "following_url": "https://api.github.com/users/condorcet/following{/other_user}", "gists_url": "https://api.github.com/users/condorcet/gists{/gist_id}", "starred_url": "https://api.github.com/users/condorcet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/condorcet/subscriptions", "organizations_url": "https://api.github.com/users/condorcet/orgs", "repos_url": "https://api.github.com/users/condorcet/repos", "events_url": "https://api.github.com/users/condorcet/events{/privacy}", "received_events_url": "https://api.github.com/users/condorcet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-17T13:19:00Z", "updated_at": "2019-06-02T20:38:41Z", "closed_at": "2019-06-02T20:38:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In Psycopg2 documentation mentioned that `execute` method allows `Composable` object as well as a string (http://initd.org/psycopg/docs/sql.html):\r\n\r\n> The objects exposed by the sql module can be used to compose a query as a Python string (using the as_string() method) or passed directly to cursor methods such as execute(), executemany(), copy_expert().\r\n\r\nCurrent psycopg2 wrapper based on `_dbapi2` that provide common implementation of wrappers for connections / cursors, that's why it doesn't (and maybe shouldn't) supporting something different from the string sql statement.\r\n\r\nI made one test to illustrate the problem:\r\nhttps://github.com/condorcet/opentracing-python-instrumentation/blob/psycopg2-sql-as-composable-error/tests/opentracing_instrumentation/test_postgres.py#L149\r\nAnd you can see results on CI:\r\nhttps://www.travis-ci.org/condorcet/opentracing-python-instrumentation/jobs/533795695#L525\r\n\r\n```\r\n____________________________ test_execute_sql[SQL] _____________________________\r\ntests/opentracing_instrumentation/test_postgres.py:161: in test_execute_sql\r\n    cur.execute(query, (trace_id, ))\r\nopentracing_instrumentation/client_hooks/_dbapi2.py:204: in execute\r\n    cursor_params=self._cursor_params):\r\nopentracing_instrumentation/client_hooks/_dbapi2.py:56: in db_span\r\n    statement = sql_statement.strip()\r\nE   AttributeError: 'SQL' object has no attribute 'strip'\r\n--------------------------- Captured stdout teardown ---------------------------\r\nF\r\n__________________________ test_execute_sql[Composed] __________________________\r\ntests/opentracing_instrumentation/test_postgres.py:161: in test_execute_sql\r\n    cur.execute(query, (trace_id, ))\r\nopentracing_instrumentation/client_hooks/_dbapi2.py:204: in execute\r\n    cursor_params=self._cursor_params):\r\nopentracing_instrumentation/client_hooks/_dbapi2.py:56: in db_span\r\n    statement = sql_statement.strip()\r\nE   AttributeError: 'Composed' object has no attribute 'strip'\r\n--------------------------- Captured stdout teardown ---------------------------\r\nF\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/80", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/80/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/80/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/80", "id": 445435239, "node_id": "MDU6SXNzdWU0NDU0MzUyMzk=", "number": 80, "title": "traced_function complains about wrong scopemanager when using no-op tracer", "user": {"login": "nicholasamorim", "id": 2200260, "node_id": "MDQ6VXNlcjIyMDAyNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicholasamorim", "html_url": "https://github.com/nicholasamorim", "followers_url": "https://api.github.com/users/nicholasamorim/followers", "following_url": "https://api.github.com/users/nicholasamorim/following{/other_user}", "gists_url": "https://api.github.com/users/nicholasamorim/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicholasamorim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicholasamorim/subscriptions", "organizations_url": "https://api.github.com/users/nicholasamorim/orgs", "repos_url": "https://api.github.com/users/nicholasamorim/repos", "events_url": "https://api.github.com/users/nicholasamorim/events{/privacy}", "received_events_url": "https://api.github.com/users/nicholasamorim/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 311757760, "node_id": "MDU6TGFiZWwzMTE3NTc3NjA=", "url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 311757761, "node_id": "MDU6TGFiZWwzMTE3NTc3NjE=", "url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-17T13:11:22Z", "updated_at": "2019-06-16T17:03:05Z", "closed_at": "2019-06-16T17:03:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a Tornado application and as expected, I initialize the jaeger-client passing `opentracing.scope_managers.tornado.TornadoScopeManager` as `scope_manager`.\r\n\r\nIf tracing is off, our app simply uses the no-op tracer in `opentracing.tracer`.\r\n\r\nThat's when the problems start. If we're using the no-op tracer, `traced_function` fails.\r\n\r\n`RuntimeError: scope_manager is not TornadoScopeManager`\r\n\r\nIs this intentional or is this a bug?\r\n\r\nThe same problem happens when calling `request_context.span_in_stack_context` while using the no-op tracer.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/75", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/75/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/75/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/75", "id": 430014211, "node_id": "MDU6SXNzdWU0MzAwMTQyMTE=", "number": 75, "title": "Publish a new release?", "user": {"login": "trondhindenes", "id": 1747120, "node_id": "MDQ6VXNlcjE3NDcxMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1747120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trondhindenes", "html_url": "https://github.com/trondhindenes", "followers_url": "https://api.github.com/users/trondhindenes/followers", "following_url": "https://api.github.com/users/trondhindenes/following{/other_user}", "gists_url": "https://api.github.com/users/trondhindenes/gists{/gist_id}", "starred_url": "https://api.github.com/users/trondhindenes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trondhindenes/subscriptions", "organizations_url": "https://api.github.com/users/trondhindenes/orgs", "repos_url": "https://api.github.com/users/trondhindenes/repos", "events_url": "https://api.github.com/users/trondhindenes/events{/privacy}", "received_events_url": "https://api.github.com/users/trondhindenes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-06T09:04:04Z", "updated_at": "2019-04-27T19:46:53Z", "closed_at": "2019-04-27T19:46:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm noticing that the code (and readme) in master has some diffs from the current latest released version in pypi, especially the `set_current_span_func` which makes the module easier to integrate with other projects. For now we're pip-installing it directly from git, but it would be awesome to have a new version published to pypi containing current master.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/74", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/74/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/74/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/74", "id": 420956430, "node_id": "MDU6SXNzdWU0MjA5NTY0MzA=", "number": 74, "title": "Context manager API for patches", "user": {"login": "StasEvseev", "id": 7660198, "node_id": "MDQ6VXNlcjc2NjAxOTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7660198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StasEvseev", "html_url": "https://github.com/StasEvseev", "followers_url": "https://api.github.com/users/StasEvseev/followers", "following_url": "https://api.github.com/users/StasEvseev/following{/other_user}", "gists_url": "https://api.github.com/users/StasEvseev/gists{/gist_id}", "starred_url": "https://api.github.com/users/StasEvseev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StasEvseev/subscriptions", "organizations_url": "https://api.github.com/users/StasEvseev/orgs", "repos_url": "https://api.github.com/users/StasEvseev/repos", "events_url": "https://api.github.com/users/StasEvseev/events{/privacy}", "received_events_url": "https://api.github.com/users/StasEvseev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-14T11:06:49Z", "updated_at": "2019-04-12T07:53:45Z", "closed_at": "2019-04-12T07:53:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys! it is amazing work you did! \r\nI am trying to integrate it in my projects. But I am facing problem I can't undo patching `install_all_patches()`. \r\n\r\nWhy I need this? \r\nI want to do next. I want to control collecting spans by using simple logic. If application have some flag meaning to collect spans (it can be settings or etcd) OR getting `trace_id` in headers then our application start collecting spans within not only application itself, but also sending headers to other application. And application below use the same logic (it would be middleware).\r\n\r\nAnd do want to use patching your API provide (`install_all_patches()`), but it is sending headers always. I could add applying patch in the middleware if conditions mentions above was meet, and undo patch in the exit of middleware.\r\n\r\nCould anybody help me with that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/53", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/53/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/53/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/53", "id": 330514893, "node_id": "MDU6SXNzdWUzMzA1MTQ4OTM=", "number": 53, "title": "Is there a possibility to have a example for SQLALCHEMY in FLASK for Database and request traces", "user": {"login": "kgrvamsi", "id": 1199031, "node_id": "MDQ6VXNlcjExOTkwMzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1199031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kgrvamsi", "html_url": "https://github.com/kgrvamsi", "followers_url": "https://api.github.com/users/kgrvamsi/followers", "following_url": "https://api.github.com/users/kgrvamsi/following{/other_user}", "gists_url": "https://api.github.com/users/kgrvamsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kgrvamsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kgrvamsi/subscriptions", "organizations_url": "https://api.github.com/users/kgrvamsi/orgs", "repos_url": "https://api.github.com/users/kgrvamsi/repos", "events_url": "https://api.github.com/users/kgrvamsi/events{/privacy}", "received_events_url": "https://api.github.com/users/kgrvamsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 311757763, "node_id": "MDU6TGFiZWwzMTE3NTc3NjM=", "url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-08T04:23:39Z", "updated_at": "2018-12-30T20:55:47Z", "closed_at": "2018-12-30T20:55:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm confused a bit on how to use the client hooks for a database calls using SQLALCHEMY in Flask app and also the requests either with @traced_function or with before_request and after_request functions.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/52", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/52/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/52/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/52", "id": 322546527, "node_id": "MDU6SXNzdWUzMjI1NDY1Mjc=", "number": 52, "title": "client patcher doesn't continue existing span in flask app", "user": {"login": "trondhindenes", "id": 1747120, "node_id": "MDQ6VXNlcjE3NDcxMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1747120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trondhindenes", "html_url": "https://github.com/trondhindenes", "followers_url": "https://api.github.com/users/trondhindenes/followers", "following_url": "https://api.github.com/users/trondhindenes/following{/other_user}", "gists_url": "https://api.github.com/users/trondhindenes/gists{/gist_id}", "starred_url": "https://api.github.com/users/trondhindenes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trondhindenes/subscriptions", "organizations_url": "https://api.github.com/users/trondhindenes/orgs", "repos_url": "https://api.github.com/users/trondhindenes/repos", "events_url": "https://api.github.com/users/trondhindenes/events{/privacy}", "received_events_url": "https://api.github.com/users/trondhindenes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 311757763, "node_id": "MDU6TGFiZWwzMTE3NTc3NjM=", "url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-12T22:08:48Z", "updated_at": "2018-05-13T16:50:50Z", "closed_at": "2018-05-13T06:23:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is 99% due to me not understanding opentracing completely, but I still would appreciate some help in figuring out the following:\r\n\r\nIn my test app I'm using the flask_opentracing library to instrument my flask app:\r\n\r\n```\r\ndef init_tracer(service):\r\n    logging.getLogger('').handlers = []\r\n    logging.basicConfig(format='%(message)s', level=logging.DEBUG)\r\n\r\n    config = Config(\r\n        config={ # usually read from some yaml config\r\n            'sampler': {'type': 'const', 'param': 1, },\r\n            'logging': True,\r\n            'reporter_batch_size': 1,\r\n        },\r\n        service_name=service,\r\n    )\r\n    return config.initialize_tracer()\r\n\r\napp = Flask(__name__)\r\ntracer = init_tracer('stuff') \r\nflask_tracer = FlaskTracer(tracer, True, app)\r\n\r\n@app.route(\"/stuff\")\r\ndef stuff():\r\n    res = requests.get('http://localhost:8083/stiff')\r\n    return 'hello'\r\n\r\ninstall_all_patches()\r\nif __name__ == \"__main__\":\r\n    app.run(port=8082)\r\n```\r\n\r\nI have a very similar app listening on the `http://localhost:8083/stiff` endpoint.\r\n\r\nWhat I can't figure out, is that the requests.get operation does not continue the root span from the app route, but rather starts a new one. This means that my Jaeger dashboard shows 3 spans:\r\nstuff: 1 span\r\nGET (inside stuff) 1 span, with stiff as a child span. \r\n\r\nI would expect to have all 3 spans wired up inside the same root. Is there anything I need to inject into the app besides the call to `install_all_patches` to make this behave as expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/49", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/49/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/49/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/49", "id": 315645336, "node_id": "MDU6SXNzdWUzMTU2NDUzMzY=", "number": 49, "title": "Upgrade to OpenTracing 2.0 API (ScopeManager for in-process context propagation)", "user": {"login": "yurishkuro", "id": 3523016, "node_id": "MDQ6VXNlcjM1MjMwMTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3523016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurishkuro", "html_url": "https://github.com/yurishkuro", "followers_url": "https://api.github.com/users/yurishkuro/followers", "following_url": "https://api.github.com/users/yurishkuro/following{/other_user}", "gists_url": "https://api.github.com/users/yurishkuro/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurishkuro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurishkuro/subscriptions", "organizations_url": "https://api.github.com/users/yurishkuro/orgs", "repos_url": "https://api.github.com/users/yurishkuro/repos", "events_url": "https://api.github.com/users/yurishkuro/events{/privacy}", "received_events_url": "https://api.github.com/users/yurishkuro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-18T21:16:00Z", "updated_at": "2019-04-27T19:47:41Z", "closed_at": "2019-04-27T19:47:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Once opentracing-python 2.0 is released (https://github.com/opentracing/opentracing-python/issues/65, https://github.com/opentracing/opentracing-python/tree/v2.0.0), it would make sense to replace the internal context propagation mechanism provided by this library, which will make instrumentations from this library more compatible with other OpenTracing instrumentations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/45", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/45/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/45/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/45", "id": 291385179, "node_id": "MDU6SXNzdWUyOTEzODUxNzk=", "number": 45, "title": "Example for python requests client", "user": {"login": "falu2010", "id": 3520037, "node_id": "MDQ6VXNlcjM1MjAwMzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3520037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/falu2010", "html_url": "https://github.com/falu2010", "followers_url": "https://api.github.com/users/falu2010/followers", "following_url": "https://api.github.com/users/falu2010/following{/other_user}", "gists_url": "https://api.github.com/users/falu2010/gists{/gist_id}", "starred_url": "https://api.github.com/users/falu2010/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/falu2010/subscriptions", "organizations_url": "https://api.github.com/users/falu2010/orgs", "repos_url": "https://api.github.com/users/falu2010/repos", "events_url": "https://api.github.com/users/falu2010/events{/privacy}", "received_events_url": "https://api.github.com/users/falu2010/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 311757763, "node_id": "MDU6TGFiZWwzMTE3NTc3NjM=", "url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-24T22:35:11Z", "updated_at": "2019-07-05T05:56:05Z", "closed_at": "2019-07-05T05:56:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can someone share an example how do I integrate this with client using requests module?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/44", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/44/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/44/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/44", "id": 287916469, "node_id": "MDU6SXNzdWUyODc5MTY0Njk=", "number": 44, "title": "psycopg2 throws an exception in sqlalchemy when updating to 2.4.0", "user": {"login": "nikolavp", "id": 288612, "node_id": "MDQ6VXNlcjI4ODYxMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/288612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikolavp", "html_url": "https://github.com/nikolavp", "followers_url": "https://api.github.com/users/nikolavp/followers", "following_url": "https://api.github.com/users/nikolavp/following{/other_user}", "gists_url": "https://api.github.com/users/nikolavp/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikolavp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikolavp/subscriptions", "organizations_url": "https://api.github.com/users/nikolavp/orgs", "repos_url": "https://api.github.com/users/nikolavp/repos", "events_url": "https://api.github.com/users/nikolavp/events{/privacy}", "received_events_url": "https://api.github.com/users/nikolavp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-11T20:38:01Z", "updated_at": "2018-08-02T20:16:32Z", "closed_at": "2018-08-02T20:16:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "After the version in our project was bumped from 2.3.0 to 2.4.0 we started getting the following error for all methods that were touching the orm layer\r\n```\r\nTypeError: argument 2 must be a connection, cursor or None\r\n....\r\n  File \"sqlalchemy/orm/query.py\", line 2469, in first\r\n    ret = list(self[0:1])\r\n  File \"sqlalchemy/orm/query.py\", line 2292, in __getitem__\r\n    return list(res)\r\n  File \"flask_sqlalchemy_cache/core.py\", line 50, in __iter__\r\n    return BaseQuery.__iter__(self)\r\n  File \"sqlalchemy/orm/query.py\", line 2571, in __iter__\r\n    return self._execute_and_instances(context)\r\n  File \"sqlalchemy/orm/query.py\", line 2584, in _execute_and_instances\r\n    close_with_result=True)\r\n  File \"sqlalchemy/orm/query.py\", line 2575, in _connection_from_session\r\n    **kw)\r\n  File \"sqlalchemy/orm/session.py\", line 893, in connection\r\n    execution_options=execution_options)\r\n  File \"sqlalchemy/orm/session.py\", line 898, in _connection_for_bind\r\n    engine, execution_options)\r\n  File \"sqlalchemy/orm/session.py\", line 334, in _connection_for_bind\r\n    conn = bind.contextual_connect()\r\n  File \"sqlalchemy/engine/base.py\", line 2039, in contextual_connect\r\n    self._wrap_pool_connect(self.pool.connect, None),\r\n  File \"sqlalchemy/engine/base.py\", line 2074, in _wrap_pool_connect\r\n    return fn()\r\n  File \"sqlalchemy/pool.py\", line 376, in connect\r\n    return _ConnectionFairy._checkout(self)\r\n  File \"sqlalchemy/pool.py\", line 713, in _checkout\r\n    fairy = _ConnectionRecord.checkout(pool)\r\n  File \"sqlalchemy/pool.py\", line 480, in checkout\r\n    rec = pool._do_get()\r\n  File \"sqlalchemy/pool.py\", line 1060, in _do_get\r\n    self._dec_overflow()\r\n  File \"sqlalchemy/util/langhelpers.py\", line 60, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \"sqlalchemy/pool.py\", line 1057, in _do_get\r\n    return self._create_connection()\r\n  File \"sqlalchemy/pool.py\", line 323, in _create_connection\r\n    return _ConnectionRecord(self)\r\n  File \"sqlalchemy/pool.py\", line 455, in __init__\r\n    pool.dispatch.connect(self.connection, self)\r\n  File \"sqlalchemy/event/attr.py\", line 256, in __call__\r\n    fn(*args, **kw)\r\n  File \"sqlalchemy/engine/strategies.py\", line 156, in on_connect\r\n    do_on_connect(conn)\r\n  File \"sqlalchemy/dialects/postgresql/psycopg2.py\", line 668, in on_connect\r\n    fn(conn)\r\n  File \"sqlalchemy/dialects/postgresql/psycopg2.py\", line 632, in on_connect\r\n    extras.register_uuid(None, conn)\r\n  File \"psycopg2/extras.py\", line 487, in register_uuid\r\n    _ext.register_type(_ext.UUID, conn_or_curs)\r\n\r\n```\r\n\r\nI guess after the client hooks that were added to in this change https://github.com/uber-common/opentracing-python-instrumentation/commit/fa35a88aa27501656455fb57fef3a3911273c561 it broke a contract somewhere in sqlalchemy/psycopg2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/42", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/42/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/42/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/42", "id": 273570575, "node_id": "MDU6SXNzdWUyNzM1NzA1NzU=", "number": 42, "title": "LICENSE missing in pypi tarball", "user": {"login": "nehaljwani", "id": 1779189, "node_id": "MDQ6VXNlcjE3NzkxODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1779189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nehaljwani", "html_url": "https://github.com/nehaljwani", "followers_url": "https://api.github.com/users/nehaljwani/followers", "following_url": "https://api.github.com/users/nehaljwani/following{/other_user}", "gists_url": "https://api.github.com/users/nehaljwani/gists{/gist_id}", "starred_url": "https://api.github.com/users/nehaljwani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nehaljwani/subscriptions", "organizations_url": "https://api.github.com/users/nehaljwani/orgs", "repos_url": "https://api.github.com/users/nehaljwani/repos", "events_url": "https://api.github.com/users/nehaljwani/events{/privacy}", "received_events_url": "https://api.github.com/users/nehaljwani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 311757761, "node_id": "MDU6TGFiZWwzMTE3NTc3NjE=", "url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-13T20:41:41Z", "updated_at": "2018-04-19T23:39:01Z", "closed_at": "2018-04-19T23:39:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://pypi.io/packages/source/o/opentracing_instrumentation/opentracing_instrumentation-2.2.0.tar.gz has the necessary LICENSE file, but https://pypi.io/packages/source/o/opentracing_instrumentation/opentracing_instrumentation-2.3.0.tar.gz doesn't. Please add it to the manifest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/40", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/40/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/40/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/40", "id": 271528099, "node_id": "MDU6SXNzdWUyNzE1MjgwOTk=", "number": 40, "title": "requests?", "user": {"login": "ror6ax", "id": 2385157, "node_id": "MDQ6VXNlcjIzODUxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2385157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ror6ax", "html_url": "https://github.com/ror6ax", "followers_url": "https://api.github.com/users/ror6ax/followers", "following_url": "https://api.github.com/users/ror6ax/following{/other_user}", "gists_url": "https://api.github.com/users/ror6ax/gists{/gist_id}", "starred_url": "https://api.github.com/users/ror6ax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ror6ax/subscriptions", "organizations_url": "https://api.github.com/users/ror6ax/orgs", "repos_url": "https://api.github.com/users/ror6ax/repos", "events_url": "https://api.github.com/users/ror6ax/events{/privacy}", "received_events_url": "https://api.github.com/users/ror6ax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-06T16:05:43Z", "updated_at": "2017-11-06T21:04:36Z", "closed_at": "2017-11-06T21:04:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys, thanks for this awesome instrumentation!\r\n\r\nI was wondering if I understood correctly, requests library has pre-made ways of inserting the tracing context into the calls? I see some urllib examples, but no requests...\r\n\r\nAlso, as a sepatane minor question - how do I get the current span inside of @traced_function? I'm using jaeger_client.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/33", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/33/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/33/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/33", "id": 266145482, "node_id": "MDU6SXNzdWUyNjYxNDU0ODI=", "number": 33, "title": "Tests are failing in Python 3", "user": {"login": "yurishkuro", "id": 3523016, "node_id": "MDQ6VXNlcjM1MjMwMTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3523016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurishkuro", "html_url": "https://github.com/yurishkuro", "followers_url": "https://api.github.com/users/yurishkuro/followers", "following_url": "https://api.github.com/users/yurishkuro/following{/other_user}", "gists_url": "https://api.github.com/users/yurishkuro/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurishkuro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurishkuro/subscriptions", "organizations_url": "https://api.github.com/users/yurishkuro/orgs", "repos_url": "https://api.github.com/users/yurishkuro/repos", "events_url": "https://api.github.com/users/yurishkuro/events{/privacy}", "received_events_url": "https://api.github.com/users/yurishkuro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-17T14:24:15Z", "updated_at": "2017-10-21T17:24:58Z", "closed_at": "2017-10-21T17:24:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://travis-ci.org/uber-common/opentracing-python-instrumentation/jobs/278301797\r\n\r\n```\r\n==================================== ERRORS ====================================\r\n______________ ERROR at setup of test_urllib2[urllib2-http-True] _______________\r\ntests/opentracing_instrumentation/test_sync_client_hooks.py:44: in install_hooks\r\n    urllibver = request.getfixturevalue('urllibver')\r\nE   AttributeError: 'SubRequest' object has no attribute 'getfixturevalue'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/32", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/32/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/32/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/32", "id": 265994906, "node_id": "MDU6SXNzdWUyNjU5OTQ5MDY=", "number": 32, "title": "Restrict futures in setup.py to py27", "user": {"login": "nehaljwani", "id": 1779189, "node_id": "MDQ6VXNlcjE3NzkxODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1779189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nehaljwani", "html_url": "https://github.com/nehaljwani", "followers_url": "https://api.github.com/users/nehaljwani/followers", "following_url": "https://api.github.com/users/nehaljwani/following{/other_user}", "gists_url": "https://api.github.com/users/nehaljwani/gists{/gist_id}", "starred_url": "https://api.github.com/users/nehaljwani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nehaljwani/subscriptions", "organizations_url": "https://api.github.com/users/nehaljwani/orgs", "repos_url": "https://api.github.com/users/nehaljwani/repos", "events_url": "https://api.github.com/users/nehaljwani/events{/privacy}", "received_events_url": "https://api.github.com/users/nehaljwani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-17T05:10:30Z", "updated_at": "2017-11-13T02:51:56Z", "closed_at": "2017-11-13T02:51:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "futures is a py27 only package. Please update setup.py to reflect that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/29", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/29/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/29/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/29", "id": 257178380, "node_id": "MDU6SXNzdWUyNTcxNzgzODA=", "number": 29, "title": "Consider supporting postgres for tracing", "user": {"login": "SEJeff", "id": 4603, "node_id": "MDQ6VXNlcjQ2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SEJeff", "html_url": "https://github.com/SEJeff", "followers_url": "https://api.github.com/users/SEJeff/followers", "following_url": "https://api.github.com/users/SEJeff/following{/other_user}", "gists_url": "https://api.github.com/users/SEJeff/gists{/gist_id}", "starred_url": "https://api.github.com/users/SEJeff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SEJeff/subscriptions", "organizations_url": "https://api.github.com/users/SEJeff/orgs", "repos_url": "https://api.github.com/users/SEJeff/repos", "events_url": "https://api.github.com/users/SEJeff/events{/privacy}", "received_events_url": "https://api.github.com/users/SEJeff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-12T20:53:32Z", "updated_at": "2017-10-17T14:22:31Z", "closed_at": "2017-10-17T14:22:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In addition to mysql.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/27", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/27/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/27/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/27", "id": 202157403, "node_id": "MDU6SXNzdWUyMDIxNTc0MDM=", "number": 27, "title": "Better documentation for Tornado implementation", "user": {"login": "zackkitzmiller", "id": 111536, "node_id": "MDQ6VXNlcjExMTUzNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/111536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackkitzmiller", "html_url": "https://github.com/zackkitzmiller", "followers_url": "https://api.github.com/users/zackkitzmiller/followers", "following_url": "https://api.github.com/users/zackkitzmiller/following{/other_user}", "gists_url": "https://api.github.com/users/zackkitzmiller/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackkitzmiller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackkitzmiller/subscriptions", "organizations_url": "https://api.github.com/users/zackkitzmiller/orgs", "repos_url": "https://api.github.com/users/zackkitzmiller/repos", "events_url": "https://api.github.com/users/zackkitzmiller/events{/privacy}", "received_events_url": "https://api.github.com/users/zackkitzmiller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-01-20T14:46:06Z", "updated_at": "2017-01-20T14:48:02Z", "closed_at": "2017-01-20T14:48:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to get more specific documentation or a working example of a simple Tornado HTTPClient making a request that is traceable? It's a little discern from the existing docs in the README", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/23", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/23/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/23/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/23", "id": 170767441, "node_id": "MDU6SXNzdWUxNzA3Njc0NDE=", "number": 23, "title": "Redis hook interface should exactly match StrictRedis", "user": {"login": "abeinstein", "id": 774374, "node_id": "MDQ6VXNlcjc3NDM3NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/774374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abeinstein", "html_url": "https://github.com/abeinstein", "followers_url": "https://api.github.com/users/abeinstein/followers", "following_url": "https://api.github.com/users/abeinstein/following{/other_user}", "gists_url": "https://api.github.com/users/abeinstein/gists{/gist_id}", "starred_url": "https://api.github.com/users/abeinstein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abeinstein/subscriptions", "organizations_url": "https://api.github.com/users/abeinstein/orgs", "repos_url": "https://api.github.com/users/abeinstein/repos", "events_url": "https://api.github.com/users/abeinstein/events{/privacy}", "received_events_url": "https://api.github.com/users/abeinstein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-11T23:06:02Z", "updated_at": "2016-08-12T00:11:21Z", "closed_at": "2016-08-12T00:11:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "The StrictRedis client's [interface](https://github.com/andymccurdy/redis-py/blob/master/redis/client.py#L1130) for `set` is:\n`set(self, name, value, ex=None, px=None, nx=False, xx=False)`\n\nWe should match that in the client hook to support the case when clients don't specify the keyword argument. There was a nasty bug in production since we was invoking the Redis client like so:\n`set('foo', 'bar', 10)` instead of `set('foo', 'bar', ex=10)`. While it may be good practice to always specify the kwarg, we should still support the ability to only use positional args. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/11", "repository_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation", "labels_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/11/comments", "events_url": "https://api.github.com/repos/uber-common/opentracing-python-instrumentation/issues/11/events", "html_url": "https://github.com/uber-common/opentracing-python-instrumentation/issues/11", "id": 166378921, "node_id": "MDU6SXNzdWUxNjYzNzg5MjE=", "number": 11, "title": "Try to use basictracer without installing protobuf", "user": {"login": "yurishkuro", "id": 3523016, "node_id": "MDQ6VXNlcjM1MjMwMTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3523016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurishkuro", "html_url": "https://github.com/yurishkuro", "followers_url": "https://api.github.com/users/yurishkuro/followers", "following_url": "https://api.github.com/users/yurishkuro/following{/other_user}", "gists_url": "https://api.github.com/users/yurishkuro/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurishkuro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurishkuro/subscriptions", "organizations_url": "https://api.github.com/users/yurishkuro/orgs", "repos_url": "https://api.github.com/users/yurishkuro/repos", "events_url": "https://api.github.com/users/yurishkuro/events{/privacy}", "received_events_url": "https://api.github.com/users/yurishkuro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-07-19T16:45:08Z", "updated_at": "2016-08-11T02:14:06Z", "closed_at": "2016-08-11T02:14:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Protobuf is only needed for binary encoding, basictracer can be configured not to use binary codecs\n", "performed_via_github_app": null, "score": 1.0}]}