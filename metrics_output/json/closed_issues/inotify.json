{"total_count": 27, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/75", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/75/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/75/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/75", "id": 477453346, "node_id": "MDU6SXNzdWU0Nzc0NTMzNDY=", "number": 75, "title": "Certain TestInotifyTree tests consistently failing", "user": {"login": "dwvisser", "id": 490575, "node_id": "MDQ6VXNlcjQ5MDU3NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/490575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwvisser", "html_url": "https://github.com/dwvisser", "followers_url": "https://api.github.com/users/dwvisser/followers", "following_url": "https://api.github.com/users/dwvisser/following{/other_user}", "gists_url": "https://api.github.com/users/dwvisser/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwvisser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwvisser/subscriptions", "organizations_url": "https://api.github.com/users/dwvisser/orgs", "repos_url": "https://api.github.com/users/dwvisser/repos", "events_url": "https://api.github.com/users/dwvisser/events{/privacy}", "received_events_url": "https://api.github.com/users/dwvisser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-06T15:36:49Z", "updated_at": "2019-08-07T21:49:00Z", "closed_at": "2019-08-07T21:48:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see the following failures on my Ubuntu 18.04 VM, running in a virtualenv (either Py2 or Py3):\r\n\r\n```\r\nFAIL: test__cycle (tests.test_inotify.TestInotifyTree)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/dale/Git/PyInotify/tests/test_inotify.py\", line 213, in test__cycle\r\n    self.assertEquals(events, expected)\r\nAssertionError: Lists differ: [(_IN[325 chars]T(wd=3, mask=256, cookie=0, len=16), ['IN_CREA[1517 chars]bb')] != [(_IN[325 chars]T(wd=2, mask=256, cookie=0, len=16), ['IN_CREA[1517 chars]bb')]\r\n\r\nFirst differing element 3:\r\n(_INOTIFY_EVENT(wd=3, mask=256, cookie=0, len=16), ['IN_CREA[41 chars]le2')\r\n(_INOTIFY_EVENT(wd=2, mask=256, cookie=0, len=16), ['IN_CREA[41 chars]le2')\r\n\r\n  [(_INOTIFY_EVENT(wd=1, mask=256, cookie=0, len=16),\r\n    ['IN_CREATE'],\r\n    '/tmp/tmprcjv466m',\r\n    'seen_new_file1'),\r\n   (_INOTIFY_EVENT(wd=1, mask=32, cookie=0, len=16),\r\n    ['IN_OPEN'],\r\n    '/tmp/tmprcjv466m',\r\n    'seen_new_file1'),\r\n   (_INOTIFY_EVENT(wd=1, mask=8, cookie=0, len=16),\r\n    ['IN_CLOSE_WRITE'],\r\n    '/tmp/tmprcjv466m',\r\n    'seen_new_file1'),\r\n-  (_INOTIFY_EVENT(wd=3, mask=256, cookie=0, len=16),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=2, mask=256, cookie=0, len=16),\r\n?                     ^\r\n\r\n    ['IN_CREATE'],\r\n    '/tmp/tmprcjv466m/aa',\r\n    'seen_new_file2'),\r\n-  (_INOTIFY_EVENT(wd=3, mask=32, cookie=0, len=16),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=2, mask=32, cookie=0, len=16),\r\n?                     ^\r\n\r\n    ['IN_OPEN'],\r\n    '/tmp/tmprcjv466m/aa',\r\n    'seen_new_file2'),\r\n-  (_INOTIFY_EVENT(wd=3, mask=8, cookie=0, len=16),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=2, mask=8, cookie=0, len=16),\r\n?                     ^\r\n\r\n    ['IN_CLOSE_WRITE'],\r\n    '/tmp/tmprcjv466m/aa',\r\n    'seen_new_file2'),\r\n-  (_INOTIFY_EVENT(wd=2, mask=256, cookie=0, len=16),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=3, mask=256, cookie=0, len=16),\r\n?                     ^\r\n\r\n    ['IN_CREATE'],\r\n    '/tmp/tmprcjv466m/bb',\r\n    'seen_new_file3'),\r\n-  (_INOTIFY_EVENT(wd=2, mask=32, cookie=0, len=16),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=3, mask=32, cookie=0, len=16),\r\n?                     ^\r\n\r\n    ['IN_OPEN'],\r\n    '/tmp/tmprcjv466m/bb',\r\n    'seen_new_file3'),\r\n-  (_INOTIFY_EVENT(wd=2, mask=8, cookie=0, len=16),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=3, mask=8, cookie=0, len=16),\r\n?                     ^\r\n\r\n    ['IN_CLOSE_WRITE'],\r\n    '/tmp/tmprcjv466m/bb',\r\n    'seen_new_file3'),\r\n   (_INOTIFY_EVENT(wd=1, mask=512, cookie=0, len=16),\r\n    ['IN_DELETE'],\r\n    '/tmp/tmprcjv466m',\r\n    'seen_new_file1'),\r\n-  (_INOTIFY_EVENT(wd=3, mask=512, cookie=0, len=16),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=2, mask=512, cookie=0, len=16),\r\n?                     ^\r\n\r\n    ['IN_DELETE'],\r\n    '/tmp/tmprcjv466m/aa',\r\n    'seen_new_file2'),\r\n-  (_INOTIFY_EVENT(wd=2, mask=512, cookie=0, len=16),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=3, mask=512, cookie=0, len=16),\r\n?                     ^\r\n\r\n    ['IN_DELETE'],\r\n    '/tmp/tmprcjv466m/bb',\r\n    'seen_new_file3'),\r\n-  (_INOTIFY_EVENT(wd=3, mask=1024, cookie=0, len=0),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=2, mask=1024, cookie=0, len=0),\r\n?                     ^\r\n\r\n    ['IN_DELETE_SELF'],\r\n    '/tmp/tmprcjv466m/aa',\r\n    ''),\r\n-  (_INOTIFY_EVENT(wd=3, mask=32768, cookie=0, len=0),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=2, mask=32768, cookie=0, len=0),\r\n?                     ^\r\n\r\n    ['IN_IGNORED'],\r\n    '/tmp/tmprcjv466m/aa',\r\n    ''),\r\n   (_INOTIFY_EVENT(wd=1, mask=1073742336, cookie=0, len=16),\r\n-   ['IN_DELETE', 'IN_ISDIR'],\r\n+   ['IN_ISDIR', 'IN_DELETE'],\r\n    '/tmp/tmprcjv466m',\r\n    'aa'),\r\n-  (_INOTIFY_EVENT(wd=2, mask=1024, cookie=0, len=0),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=3, mask=1024, cookie=0, len=0),\r\n?                     ^\r\n\r\n    ['IN_DELETE_SELF'],\r\n    '/tmp/tmprcjv466m/bb',\r\n    ''),\r\n-  (_INOTIFY_EVENT(wd=2, mask=32768, cookie=0, len=0),\r\n?                     ^\r\n\r\n+  (_INOTIFY_EVENT(wd=3, mask=32768, cookie=0, len=0),\r\n?                     ^\r\n\r\n    ['IN_IGNORED'],\r\n    '/tmp/tmprcjv466m/bb',\r\n    ''),\r\n   (_INOTIFY_EVENT(wd=1, mask=1073742336, cookie=0, len=16),\r\n-   ['IN_DELETE', 'IN_ISDIR'],\r\n+   ['IN_ISDIR', 'IN_DELETE'],\r\n    '/tmp/tmprcjv466m',\r\n    'bb')]\r\n-------------------- >> begin captured logging << --------------------\r\ninotify.adapters: DEBUG: Inotify handle is (3).\r\ninotify.adapters: DEBUG: Adding initial watches on tree: [/tmp/tmprcjv466m]\r\ninotify.adapters: DEBUG: Adding watch: [/tmp/tmprcjv466m]\r\ninotify.adapters: DEBUG: Added watch (1): [/tmp/tmprcjv466m]\r\ninotify.adapters: DEBUG: Adding watch: [/tmp/tmprcjv466m/bb]\r\ninotify.adapters: DEBUG: Added watch (2): [/tmp/tmprcjv466m/bb]\r\ninotify.adapters: DEBUG: Adding watch: [/tmp/tmprcjv466m/aa]\r\ninotify.adapters: DEBUG: Added watch (3): [/tmp/tmprcjv466m/aa]\r\ninotify.adapters: DEBUG: Events received from epoll: ['IN_ACCESS']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_CREATE']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_OPEN']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_CLOSE_WRITE']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_CREATE']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_OPEN']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_CLOSE_WRITE']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_CREATE']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_OPEN']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_CLOSE_WRITE']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_DELETE']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_DELETE']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_DELETE']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_DELETE_SELF']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_IGNORED']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_DELETE', 'IN_ISDIR']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_DELETE_SELF']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_IGNORED']\r\ninotify.adapters: DEBUG: Events received in stream: ['IN_DELETE', 'IN_ISDIR']\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n======================================================================\r\nFAIL: test__renames (tests.test_inotify.TestInotifyTree)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/dale/Git/PyInotify/tests/test_inotify.py\", line 235, in test__renames\r\n    self.assertEquals(events1, expected)\r\nAssertionError: Lists differ: [(_IN[52 chars], ['IN_CREATE', 'IN_ISDIR'], '/tmp/tmp6orzx4kp', 'old_folder')] != [(_IN[52 chars], ['IN_ISDIR', 'IN_CREATE'], '/tmp/tmp6orzx4kp', 'old_folder')]\r\n\r\nFirst differing element 0:\r\n(_INO[50 chars]), ['IN_CREATE', 'IN_ISDIR'], '/tmp/tmp6orzx4kp', 'old_folder')\r\n(_INO[50 chars]), ['IN_ISDIR', 'IN_CREATE'], '/tmp/tmp6orzx4kp', 'old_folder')\r\n\r\n  [(_INOTIFY_EVENT(wd=1, mask=1073742080, cookie=0, len=16),\r\n-   ['IN_CREATE', 'IN_ISDIR'],\r\n+   ['IN_ISDIR', 'IN_CREATE'],\r\n    '/tmp/tmp6orzx4kp',\r\n    'old_folder')]\r\n-------------------- >> begin captured logging << --------------------\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/73", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/73/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/73/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/73", "id": 460866951, "node_id": "MDU6SXNzdWU0NjA4NjY5NTE=", "number": 73, "title": "symbol not found on Python 3.7.3 OSX 10.14.2", "user": {"login": "saritaegon", "id": 51146663, "node_id": "MDQ6VXNlcjUxMTQ2NjYz", "avatar_url": "https://avatars2.githubusercontent.com/u/51146663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saritaegon", "html_url": "https://github.com/saritaegon", "followers_url": "https://api.github.com/users/saritaegon/followers", "following_url": "https://api.github.com/users/saritaegon/following{/other_user}", "gists_url": "https://api.github.com/users/saritaegon/gists{/gist_id}", "starred_url": "https://api.github.com/users/saritaegon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saritaegon/subscriptions", "organizations_url": "https://api.github.com/users/saritaegon/orgs", "repos_url": "https://api.github.com/users/saritaegon/repos", "events_url": "https://api.github.com/users/saritaegon/events{/privacy}", "received_events_url": "https://api.github.com/users/saritaegon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-26T09:41:08Z", "updated_at": "2020-08-17T07:59:12Z", "closed_at": "2019-07-01T02:44:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport inotify.adapters\r\n\r\n\r\ndef _main():\r\n    i = inotify.adapters.Inotify()\r\n\r\n    i.add_watch('/tmp')\r\n\r\n    with open('/tmp/test_file', 'w'):\r\n        pass\r\n\r\n    events = i.event_gen(yield_nones=False, timeout_s=1)\r\n    events = list(events)\r\n\r\n    print(events)\r\n\r\n\r\nif __name__ == '__main__':\r\n    _main()\r\n\r\n```\r\n\r\n```bash\r\n$ python file-watcher.py\r\nTraceback (most recent call last):\r\n  File \"file-watcher.py\", line 1, in <module>\r\n    import inotify.adapters\r\n  File \"/Users/sarit/.pyenv/versions/life/lib/python3.7/site-packages/inotify/adapters.py\", line 11, in <module>\r\n    import inotify.calls\r\n  File \"/Users/sarit/.pyenv/versions/life/lib/python3.7/site-packages/inotify/calls.py\", line 39, in <module>\r\n    inotify_init = _LIB.inotify_init\r\n  File \"/Users/sarit/.pyenv/versions/3.7.3/lib/python3.7/ctypes/__init__.py\", line 369, in __getattr__\r\n    func = self.__getitem__(name)\r\n  File \"/Users/sarit/.pyenv/versions/3.7.3/lib/python3.7/ctypes/__init__.py\", line 374, in __getitem__\r\n    func = self._FuncPtr((name_or_ordinal, self))\r\nAttributeError: dlsym(0x11816fe90, inotify_init): symbol not found\r\n```\r\n\r\nOSX: 1014.2\r\nPython: 3.7.3\r\ninotify==0.2.10\r\n\r\nAny idea?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/72", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/72/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/72/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/72", "id": 434498261, "node_id": "MDU6SXNzdWU0MzQ0OTgyNjE=", "number": 72, "title": "how is filter_predicate intended to be used?", "user": {"login": "erpadmin", "id": 2635831, "node_id": "MDQ6VXNlcjI2MzU4MzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2635831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erpadmin", "html_url": "https://github.com/erpadmin", "followers_url": "https://api.github.com/users/erpadmin/followers", "following_url": "https://api.github.com/users/erpadmin/following{/other_user}", "gists_url": "https://api.github.com/users/erpadmin/gists{/gist_id}", "starred_url": "https://api.github.com/users/erpadmin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erpadmin/subscriptions", "organizations_url": "https://api.github.com/users/erpadmin/orgs", "repos_url": "https://api.github.com/users/erpadmin/repos", "events_url": "https://api.github.com/users/erpadmin/events{/privacy}", "received_events_url": "https://api.github.com/users/erpadmin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-17T21:40:05Z", "updated_at": "2019-08-06T15:13:45Z", "closed_at": "2019-07-01T02:52:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Inotify class function event_gen excerpt:\r\n```\r\n                    for type_name in type_names:\r\n                        if filter_predicate is not None and \\\r\n                           filter_predicate(type_name, e) is False:\r\nself.__last_success_return = (type_name, e)\r\n```\r\n\r\nits expecting it to be callable?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/71", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/71/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/71/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/71", "id": 433298781, "node_id": "MDU6SXNzdWU0MzMyOTg3ODE=", "number": 71, "title": "Crashed in calls.py(32): _check_nonnegative", "user": {"login": "renatosamperio", "id": 1346485, "node_id": "MDQ6VXNlcjEzNDY0ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1346485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/renatosamperio", "html_url": "https://github.com/renatosamperio", "followers_url": "https://api.github.com/users/renatosamperio/followers", "following_url": "https://api.github.com/users/renatosamperio/following{/other_user}", "gists_url": "https://api.github.com/users/renatosamperio/gists{/gist_id}", "starred_url": "https://api.github.com/users/renatosamperio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/renatosamperio/subscriptions", "organizations_url": "https://api.github.com/users/renatosamperio/orgs", "repos_url": "https://api.github.com/users/renatosamperio/repos", "events_url": "https://api.github.com/users/renatosamperio/events{/privacy}", "received_events_url": "https://api.github.com/users/renatosamperio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-15T13:59:54Z", "updated_at": "2019-07-01T02:50:50Z", "closed_at": "2019-07-01T02:50:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I made a simple program to monitor my home path:\r\n\r\n```\r\nimport inotify.adapters\r\n\r\ndef _main():\r\n    i = inotify.adapters.InotifyTree('/opt/test_user/')\r\n    try:\r\n        for event in i.event_gen():\r\n            if event is None:\r\n                continue\r\n            (header, types, path, filename) = event\r\n            if 'IN_ISDIR' not in types:\r\n               print(\"PATH=[{}] FILENAME=[{}] EVENT_TYPES={}\".format(\r\n                 path, filename, types))\r\nif __name__ == '__main__':\r\n    _main()\r\n```\r\n\r\nI am getting the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"sample2.py\", line 26, in <module>\r\n    _main()\r\n  File \"sample2.py\", line 4, in _main\r\n    i = inotify.adapters.InotifyTree('/opt/test_user/')\r\n  File \"/usr/local/lib/python2.7/dist-packages/inotify/adapters.py\", line 340, in __init__\r\n    self.__load_tree(path)\r\n  File \"/usr/local/lib/python2.7/dist-packages/inotify/adapters.py\", line 354, in __load_tree\r\n    for filename in os.listdir(current_path):\r\n```\r\n\r\nI had to run the program with SUDO though. But whenver I remove the following exception, all works fine:\r\n```\r\ndef _check_nonnegative(result):\r\n    if result == -1:\r\n        raise InotifyError(\"Call failed (should not be -1): (%d)\" % \r\n                           (result,))\r\n```\r\n\r\nWhy was this check required? Is it good idea to remove it?\r\n\r\nRegards,\r\n\r\nRenato.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/69", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/69/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/69/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/69", "id": 422745100, "node_id": "MDU6SXNzdWU0MjI3NDUxMDA=", "number": 69, "title": "Events not firing for os created directories", "user": {"login": "floki2019", "id": 48722577, "node_id": "MDQ6VXNlcjQ4NzIyNTc3", "avatar_url": "https://avatars3.githubusercontent.com/u/48722577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/floki2019", "html_url": "https://github.com/floki2019", "followers_url": "https://api.github.com/users/floki2019/followers", "following_url": "https://api.github.com/users/floki2019/following{/other_user}", "gists_url": "https://api.github.com/users/floki2019/gists{/gist_id}", "starred_url": "https://api.github.com/users/floki2019/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/floki2019/subscriptions", "organizations_url": "https://api.github.com/users/floki2019/orgs", "repos_url": "https://api.github.com/users/floki2019/repos", "events_url": "https://api.github.com/users/floki2019/events{/privacy}", "received_events_url": "https://api.github.com/users/floki2019/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-19T13:54:12Z", "updated_at": "2019-03-19T16:31:35Z", "closed_at": "2019-03-19T16:31:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I modified the test script to monitor network connection file creation and deletion and the events aren't firing. I tested with a different user directory and it worked. This leads me to believe it is a permissions issue. Any thoughts on how to make this work?\r\n\r\n`#!/usr/bin/env python3\r\nimport time\r\nimport os\r\nfrom watchdog.observers import Observer\r\nfrom watchdog.events import FileSystemEventHandler\r\n\r\nclass Watcher:\r\n    DIRECTORY_TO_WATCH = '/proc/sys/net/ipv4/conf/'\r\n\r\n    def __init__(self):\r\n        self.observer = Observer()\r\n\r\n    def run(self):\r\n        event_handler = Handler()\r\n        self.observer.schedule(event_handler, self.DIRECTORY_TO_WATCH, recursive=True)\r\n        self.observer.start()\r\n        try:\r\n            while True:\r\n                time.sleep(1)\r\n                print('Checking...')\r\n        except Exception as e:\r\n            self.observer.stop()\r\n            print(\"Error\" + str(e))\r\n\r\n        self.observer.join()\r\n\r\n\r\nclass Handler(FileSystemEventHandler):\r\n\r\n    @staticmethod\r\n    def on_any_event(event):\r\n        print('Event triggered')\r\n        if event.event_type == 'created':\r\n            print(path + ' created')\r\n        elif event.event_type == 'deleted':\r\n            print(path + ' deleted')\r\n\r\nif __name__ == '__main__':\r\n    w = Watcher()\r\n    w.run()`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/55", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/55/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/55/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/55", "id": 343120319, "node_id": "MDU6SXNzdWUzNDMxMjAzMTk=", "number": 55, "title": "InotifyError should have more information about what happened", "user": {"login": "ehud-swiftstack", "id": 33640279, "node_id": "MDQ6VXNlcjMzNjQwMjc5", "avatar_url": "https://avatars2.githubusercontent.com/u/33640279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehud-swiftstack", "html_url": "https://github.com/ehud-swiftstack", "followers_url": "https://api.github.com/users/ehud-swiftstack/followers", "following_url": "https://api.github.com/users/ehud-swiftstack/following{/other_user}", "gists_url": "https://api.github.com/users/ehud-swiftstack/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehud-swiftstack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehud-swiftstack/subscriptions", "organizations_url": "https://api.github.com/users/ehud-swiftstack/orgs", "repos_url": "https://api.github.com/users/ehud-swiftstack/repos", "events_url": "https://api.github.com/users/ehud-swiftstack/events{/privacy}", "received_events_url": "https://api.github.com/users/ehud-swiftstack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-20T14:04:29Z", "updated_at": "2018-07-20T14:05:27Z", "closed_at": "2018-07-20T14:05:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example, add_watch raises InotifyError if the given file does not exist. It would be useful to get some more information as to what happened (file path, type of error - does not exists, cannot read, etc).\r\n\r\nexample (in this case the file does not exist):\r\n`\r\nDEBUG:inotify.adapters:Adding watch: [/tmp/leases.db]\r\nError: unable to open file: ('Call failed (should not be -1): (-1) ERRNO=(0)',)\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/49", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/49/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/49/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/49", "id": 317654175, "node_id": "MDU6SXNzdWUzMTc2NTQxNzU=", "number": 49, "title": "Examples fail with errors", "user": {"login": "mzpqnxow", "id": 8016228, "node_id": "MDQ6VXNlcjgwMTYyMjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8016228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzpqnxow", "html_url": "https://github.com/mzpqnxow", "followers_url": "https://api.github.com/users/mzpqnxow/followers", "following_url": "https://api.github.com/users/mzpqnxow/following{/other_user}", "gists_url": "https://api.github.com/users/mzpqnxow/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzpqnxow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzpqnxow/subscriptions", "organizations_url": "https://api.github.com/users/mzpqnxow/orgs", "repos_url": "https://api.github.com/users/mzpqnxow/repos", "events_url": "https://api.github.com/users/mzpqnxow/events{/privacy}", "received_events_url": "https://api.github.com/users/mzpqnxow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-25T14:29:55Z", "updated_at": "2018-07-07T06:51:39Z", "closed_at": "2018-07-07T06:51:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n(venv) user@host:~/venv$ cat test_inotify.py \r\n#!/usr/bin/env python2\r\n# -*- coding: utf-8 -*-\r\nimport inotify.adapters\r\n\r\n\r\ndef _main():\r\n    i = inotify.adapters.Inotify()\r\n\r\n    i.add_watch('/tmp')\r\n\r\n    with open('/tmp/test_file', 'w'):\r\n        pass\r\n\r\n    events = i.event_gen(yield_nones=False, timeout_s=1)\r\n    events = list(events)\r\n\r\n    print(events)\r\n\r\n\r\nif __name__ == '__main__':\r\n    _main()\r\n\r\n(venv) user@host:~/prod-export/pybuild23$ ./test_inotify.py \r\nTraceback (most recent call last):\r\n  File \"./test_inotify.py\", line 21, in <module>\r\n    _main()\r\n  File \"./test_inotify.py\", line 14, in _main\r\n    events = i.event_gen(yield_nones=False, timeout_s=1)\r\nTypeError: event_gen() got an unexpected keyword argument 'yield_nones'\r\n(venv) user@host:~/venv$ \r\n```\r\n\r\nRemoving the `yield_nones=False` results in another error.\r\n\r\nIs this expected? Just a matter of documentation being out of date? I can read the source but I think most users will want to have very basic examples in the README working.\r\n\r\nIf I look through the source and make a simple example I will PR it, unless I am (somehow) doing this wrong...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/47", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/47/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/47/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/47", "id": 302079084, "node_id": "MDU6SXNzdWUzMDIwNzkwODQ=", "number": 47, "title": "question: how to watch for a specific event (IN_CLOSE_WRITE)", "user": {"login": "nskalis", "id": 8971544, "node_id": "MDQ6VXNlcjg5NzE1NDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8971544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nskalis", "html_url": "https://github.com/nskalis", "followers_url": "https://api.github.com/users/nskalis/followers", "following_url": "https://api.github.com/users/nskalis/following{/other_user}", "gists_url": "https://api.github.com/users/nskalis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nskalis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nskalis/subscriptions", "organizations_url": "https://api.github.com/users/nskalis/orgs", "repos_url": "https://api.github.com/users/nskalis/repos", "events_url": "https://api.github.com/users/nskalis/events{/privacy}", "received_events_url": "https://api.github.com/users/nskalis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-04T11:47:03Z", "updated_at": "2018-03-20T18:15:06Z", "closed_at": "2018-03-20T18:15:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi,\r\n\r\nand thanks a lot for this library, so useful :) may I ask you the following;\r\nhow the original snippet that watches a directory (non-recursively) can be changed in order to \r\nwatch for a specific event only, for example,\r\n\r\n```\r\nfor event in i.event_gen(yield_nones=False):\r\n        (_, type_names, path, filename) = event\r\n```\r\n\r\nI do not wish to loop through `type_names` but I would like to get an `event` if and only if there is a `IN_CLOSE_WRITE` file event\r\n\r\nif I am interested only in **IN_CLOSE_WRITE** file events, how can I I specify that ? \r\nso that I can take action after that event takes place ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/45", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/45/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/45/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/45", "id": 296175106, "node_id": "MDU6SXNzdWUyOTYxNzUxMDY=", "number": 45, "title": "[opt] use scandir to shorten initialization time of Inotify", "user": {"login": "NoneGG", "id": 22073484, "node_id": "MDQ6VXNlcjIyMDczNDg0", "avatar_url": "https://avatars2.githubusercontent.com/u/22073484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NoneGG", "html_url": "https://github.com/NoneGG", "followers_url": "https://api.github.com/users/NoneGG/followers", "following_url": "https://api.github.com/users/NoneGG/following{/other_user}", "gists_url": "https://api.github.com/users/NoneGG/gists{/gist_id}", "starred_url": "https://api.github.com/users/NoneGG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NoneGG/subscriptions", "organizations_url": "https://api.github.com/users/NoneGG/orgs", "repos_url": "https://api.github.com/users/NoneGG/repos", "events_url": "https://api.github.com/users/NoneGG/events{/privacy}", "received_events_url": "https://api.github.com/users/NoneGG/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-11T09:20:39Z", "updated_at": "2018-03-09T03:19:53Z", "closed_at": "2018-03-09T03:19:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use inotify to monitor video files on cdn server, and it takes too long time to initialize the InotifyTrees when i run the demo script (about 1061070 files)\r\nI notice that `os.listdir` is used in the code, is there any possibility that we can use `scandir.listdir` (it is said that scandir will be merged to Python3 official in next release) to optimize the initialization speed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/43", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/43/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/43/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/43", "id": 290347765, "node_id": "MDU6SXNzdWUyOTAzNDc3NjU=", "number": 43, "title": "Seemingly getting code from 0.2.8 when 0.2.9 is the installed version", "user": {"login": "audiodude", "id": 57832, "node_id": "MDQ6VXNlcjU3ODMy", "avatar_url": "https://avatars1.githubusercontent.com/u/57832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/audiodude", "html_url": "https://github.com/audiodude", "followers_url": "https://api.github.com/users/audiodude/followers", "following_url": "https://api.github.com/users/audiodude/following{/other_user}", "gists_url": "https://api.github.com/users/audiodude/gists{/gist_id}", "starred_url": "https://api.github.com/users/audiodude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/audiodude/subscriptions", "organizations_url": "https://api.github.com/users/audiodude/orgs", "repos_url": "https://api.github.com/users/audiodude/repos", "events_url": "https://api.github.com/users/audiodude/events{/privacy}", "received_events_url": "https://api.github.com/users/audiodude/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-22T04:27:35Z", "updated_at": "2018-07-07T06:50:38Z", "closed_at": "2018-07-07T06:50:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following:\r\n```\r\n$ pip freeze\r\ninotify==0.2.9\r\n$ python\r\nPython 2.7.14 (default, Jan 18 2018, 19:27:07) \r\n[GCC 7.2.0] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import inotify.adapters\r\n>>> import inspect\r\n>>> print inspect.getsource(inotify.adapters.Inotify.event_gen)\r\n    def event_gen(self):\r\n        while True:\r\n            block_duration_s = self.__get_block_duration()\r\n\r\n            # Poll, but manage signal-related errors.\r\n\r\n            try:\r\n                events = self.__epoll.poll(block_duration_s)\r\n            except IOError as e:\r\n                if e.errno != EINTR:\r\n                    raise\r\n\r\n                continue\r\n\r\n            # Process events.\r\n\r\n            for fd, event_type in events:\r\n                # (fd) looks to always match the inotify FD.\r\n\r\n                for (header, type_names, path, filename) \\\r\n                        in self.__handle_inotify_event(fd, event_type):\r\n                    yield (header, type_names, path, filename)\r\n\r\n            yield None\r\n\r\n>>> \r\n```\r\n\r\nI originally noticed I was getting \"unknown keyword argument\" when trying to pass yield_nones=False to event_gen, which made me try to look up the source like this. It looks like the code that's being run is from version 0.2.8 on github: https://github.com/dsoprea/PyInotify/blob/0.2.8/inotify/adapters.py#L160", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/38", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/38/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/38/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/38", "id": 284125410, "node_id": "MDU6SXNzdWUyODQxMjU0MTA=", "number": 38, "title": "New release?", "user": {"login": "peci1", "id": 182533, "node_id": "MDQ6VXNlcjE4MjUzMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/182533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peci1", "html_url": "https://github.com/peci1", "followers_url": "https://api.github.com/users/peci1/followers", "following_url": "https://api.github.com/users/peci1/following{/other_user}", "gists_url": "https://api.github.com/users/peci1/gists{/gist_id}", "starred_url": "https://api.github.com/users/peci1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peci1/subscriptions", "organizations_url": "https://api.github.com/users/peci1/orgs", "repos_url": "https://api.github.com/users/peci1/repos", "events_url": "https://api.github.com/users/peci1/events{/privacy}", "received_events_url": "https://api.github.com/users/peci1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-22T10:17:00Z", "updated_at": "2017-12-22T11:52:15Z", "closed_at": "2017-12-22T10:26:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's been a long time since last release. In the meantime, some bugs got fixed, so I'd be happy to see a new release. Could we get one, please? :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/29", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/29/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/29/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/29", "id": 210024294, "node_id": "MDU6SXNzdWUyMTAwMjQyOTQ=", "number": 29, "title": " parallelization of events notification", "user": {"login": "MourIdri", "id": 19348103, "node_id": "MDQ6VXNlcjE5MzQ4MTAz", "avatar_url": "https://avatars0.githubusercontent.com/u/19348103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MourIdri", "html_url": "https://github.com/MourIdri", "followers_url": "https://api.github.com/users/MourIdri/followers", "following_url": "https://api.github.com/users/MourIdri/following{/other_user}", "gists_url": "https://api.github.com/users/MourIdri/gists{/gist_id}", "starred_url": "https://api.github.com/users/MourIdri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MourIdri/subscriptions", "organizations_url": "https://api.github.com/users/MourIdri/orgs", "repos_url": "https://api.github.com/users/MourIdri/repos", "events_url": "https://api.github.com/users/MourIdri/events{/privacy}", "received_events_url": "https://api.github.com/users/MourIdri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-24T11:24:27Z", "updated_at": "2017-02-24T14:07:12Z", "closed_at": "2017-02-24T14:07:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nThe Example provided works great to get notifications in a serial manner. However, it is not good for large images. \r\nFor example, I am uploading a set of pictures. Pictures that are 20MB each and it takes 2 seconds each time to finish the notifications for each files. Then it goes to next file and so on, till all the of the upload. \r\nI tried to add parallelization of events notification without success : \r\nhere is my code : \r\n\r\n`\r\n           import logging\r\n     import threading\r\n     import inotify.adapters\r\n     \r\n     _DEFAULT_LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\r\n     \r\n     _LOGGER = logging.getLogger(__name__)\r\n     \r\n     def _configure_logging():\r\n         _LOGGER.setLevel(logging.DEBUG)\r\n     \r\n         ch = logging.StreamHandler()\r\n     \r\n         formatter = logging.Formatter(_DEFAULT_LOG_FORMAT)\r\n         ch.setFormatter(formatter)\r\n     \r\n         _LOGGER.addHandler(ch)\r\n     \r\n     \r\n     #def PopUpMessage (event):\r\n     #    (header, type_names, watch_path, filename) = event\r\n     #    _LOGGER.info(\"WD=(%d) MASK=(%d) COOKIE=(%d) LEN=(%d) MASK->NAMES=%s \"\r\n     #        \"WATCH-PATH=[%s] FILENAME=[%s]\",\r\n     #        header.wd, header.mask, header.cookie, header.len, type_names,\r\n     #        watch_path.decode('utf-8'), filename.decode('utf-8'))\r\n     \r\n     def PopUpMessage (event):\r\n         if event is not None:\r\n             (header, type_names, watch_path, filename) = event\r\n             _LOGGER.info(\"WD=(%d) MASK=(%d) COOKIE=(%d) LEN=(%d) MASK->NAMES=%s \"\r\n                 \"WATCH-PATH=[%s] FILENAME=[%s]\",\r\n                 header.wd, header.mask, header.cookie, header.len, type_names,\r\n                 watch_path.decode('utf-8'), filename.decode('utf-8'))\r\n     \r\n     \r\n     def _main():\r\n         i = inotify.adapters.Inotify()\r\n     \r\n         i.add_watch(b'/PARA')\r\n     \r\n         try:\r\n             threads = []\r\n             while True: \r\n                 for event in i.event_gen():\r\n     \r\n                     #if event is not None:\r\n                     #(header, type_names, watch_path, filename) = event\r\n                     #thread = threading.Thread\r\n                     ti= threading.Thread(target=PopUpMessage(event))\r\n                     threads += [ti]\r\n                     ti.start()\r\n                 for x in threads:\r\n                     x.join()\r\n     \r\n         finally:\r\n             i.remove_watch(b'/PARA')\r\n     \r\n     if __name__ == '__main__':\r\n         _configure_logging()\r\n         _main()`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/28", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/28/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/28/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/28", "id": 206740327, "node_id": "MDU6SXNzdWUyMDY3NDAzMjc=", "number": 28, "title": "Exception if file path contains UTF-8 (EX:Chinese word)", "user": {"login": "marcusting", "id": 16345095, "node_id": "MDQ6VXNlcjE2MzQ1MDk1", "avatar_url": "https://avatars3.githubusercontent.com/u/16345095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusting", "html_url": "https://github.com/marcusting", "followers_url": "https://api.github.com/users/marcusting/followers", "following_url": "https://api.github.com/users/marcusting/following{/other_user}", "gists_url": "https://api.github.com/users/marcusting/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusting/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusting/subscriptions", "organizations_url": "https://api.github.com/users/marcusting/orgs", "repos_url": "https://api.github.com/users/marcusting/repos", "events_url": "https://api.github.com/users/marcusting/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusting/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-10T08:54:03Z", "updated_at": "2017-12-01T07:13:04Z", "closed_at": "2017-12-01T07:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Create folder with Chinese name. Then exception during file path encode then inotify watch stop. \r\n\r\n[Exception Message]\r\nadapters add_watch Adding watch: [/share/Music/\u65b0\u589e\u8cc7\u6599\u593e]\r\nException : argument 2: <type 'exceptions.UnicodeEncodeError'>: 'ascii' codec can't encode characters in position 13-17: ordinal not in range(128)\r\nadapters __del__ Cleaning-up inotify.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/25", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/25/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/25/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/25", "id": 195153132, "node_id": "MDU6SXNzdWUxOTUxNTMxMzI=", "number": 25, "title": "InotifyTrees raises exception in log call for bytes argument (expecting str)", "user": {"login": "44yles", "id": 1308306, "node_id": "MDQ6VXNlcjEzMDgzMDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1308306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/44yles", "html_url": "https://github.com/44yles", "followers_url": "https://api.github.com/users/44yles/followers", "following_url": "https://api.github.com/users/44yles/following{/other_user}", "gists_url": "https://api.github.com/users/44yles/gists{/gist_id}", "starred_url": "https://api.github.com/users/44yles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/44yles/subscriptions", "organizations_url": "https://api.github.com/users/44yles/orgs", "repos_url": "https://api.github.com/users/44yles/repos", "events_url": "https://api.github.com/users/44yles/events{/privacy}", "received_events_url": "https://api.github.com/users/44yles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-13T03:40:39Z", "updated_at": "2017-08-29T06:38:43Z", "closed_at": "2016-12-15T04:27:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Reproduce:\r\n\r\n```py\r\nfrom inotify.adapters import InotifyTrees\r\n\r\ninots = InotifyTrees([\r\n    b\"something/\",\r\n    b\"else/\"\r\n])\r\n```\r\n\r\nResults in:\r\n```sh\r\nTraceback (most recent call last):\r\n  File \"demo.py\", line 4, in <module>\r\n    b\"output_files\"\r\n  File \"/home/myles/software/conda/envs/dev35/lib/python3.5/site-packages/inotify/adapters.py\", line 261, in __init__\r\n    self.__load_trees(paths)\r\n  File \"/home/myles/software/conda/envs/dev35/lib/python3.5/site-packages/inotify/adapters.py\", line 264, in __load_trees\r\n    _LOGGER.debug(\"Adding initial watches on trees: [%s]\", \",\".join(paths))\r\nTypeError: sequence item 0: expected str instance, bytes found\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/23", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/23/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/23/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/23", "id": 184248441, "node_id": "MDU6SXNzdWUxODQyNDg0NDE=", "number": 23, "title": "Ignores IN_Q_OVERFLOW events", "user": {"login": "kimyx", "id": 8986361, "node_id": "MDQ6VXNlcjg5ODYzNjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8986361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimyx", "html_url": "https://github.com/kimyx", "followers_url": "https://api.github.com/users/kimyx/followers", "following_url": "https://api.github.com/users/kimyx/following{/other_user}", "gists_url": "https://api.github.com/users/kimyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimyx/subscriptions", "organizations_url": "https://api.github.com/users/kimyx/orgs", "repos_url": "https://api.github.com/users/kimyx/repos", "events_url": "https://api.github.com/users/kimyx/events{/privacy}", "received_events_url": "https://api.github.com/users/kimyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-10-20T14:40:05Z", "updated_at": "2017-12-01T07:13:04Z", "closed_at": "2017-12-01T07:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using this PyInotify on large directory trees holding millions of files with the possibility of large batches of file additions or deletions at any time. By keeping the kernel-level queue size large enough we generally avoid IN_Q_OVERFLOW events from the kernel. However, we've been surprised a few times and in those cases we lose file events with no warning.\n\nIt would be good to add explicit handling of the IN_Q_OVERFLOW event. In 0.2.7 if the kernel generates IN_Q_OVERFLOW, I believe that __handle_inotify_event immediately returns, event_gen's loop terminates, and then yields a final None event without explanation.\n\nI haven't tried 0.2.8 yet, but it appears that the IN_Q_OVERFLOW event is simply ignored and operation continues. Assuming this is the case, this is a step backward from the standpoint of IN_Q_OVERFLOW.\n\nI can work on this, but would like to get advice on what to do when it occurs. Options:\n- yield an event with no path, wd=-1, and the IN_Q_OVERFLOW mask\n- raise an exception\n\nWhat do you think?\n\nThanks, Kim\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/22", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/22/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/22/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/22", "id": 175179457, "node_id": "MDU6SXNzdWUxNzUxNzk0NTc=", "number": 22, "title": "InotifyTree doesn't handle mkdir()+rmdir()", "user": {"login": "EdSchouten", "id": 736085, "node_id": "MDQ6VXNlcjczNjA4NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/736085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdSchouten", "html_url": "https://github.com/EdSchouten", "followers_url": "https://api.github.com/users/EdSchouten/followers", "following_url": "https://api.github.com/users/EdSchouten/following{/other_user}", "gists_url": "https://api.github.com/users/EdSchouten/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdSchouten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdSchouten/subscriptions", "organizations_url": "https://api.github.com/users/EdSchouten/orgs", "repos_url": "https://api.github.com/users/EdSchouten/repos", "events_url": "https://api.github.com/users/EdSchouten/events{/privacy}", "received_events_url": "https://api.github.com/users/EdSchouten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-09-06T07:36:04Z", "updated_at": "2017-12-01T07:13:04Z", "closed_at": "2017-12-01T07:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "While using InotifyTree, I noticed that if you create and remove a directory very quickly, `event_gen()` fails. The reason for this is obvious: it sees the `CREATE` event and tries to install a new probe, which fails, as the target no longer exists.\n\nInotifyTree should simply ignore such errors.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/19", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/19/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/19/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/19", "id": 173001440, "node_id": "MDU6SXNzdWUxNzMwMDE0NDA=", "number": 19, "title": "inotify.adapters.InotifyTree doesn't update watch on rename folder", "user": {"login": "vaniatoperich", "id": 14992862, "node_id": "MDQ6VXNlcjE0OTkyODYy", "avatar_url": "https://avatars3.githubusercontent.com/u/14992862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaniatoperich", "html_url": "https://github.com/vaniatoperich", "followers_url": "https://api.github.com/users/vaniatoperich/followers", "following_url": "https://api.github.com/users/vaniatoperich/following{/other_user}", "gists_url": "https://api.github.com/users/vaniatoperich/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaniatoperich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaniatoperich/subscriptions", "organizations_url": "https://api.github.com/users/vaniatoperich/orgs", "repos_url": "https://api.github.com/users/vaniatoperich/repos", "events_url": "https://api.github.com/users/vaniatoperich/events{/privacy}", "received_events_url": "https://api.github.com/users/vaniatoperich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-08-24T16:37:57Z", "updated_at": "2017-12-01T07:13:04Z", "closed_at": "2017-12-01T07:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you watch a folder and you rename the folder within that folder, event will not update the watch, if will keep on using old watch_path and filenames changed in that watch path will use old watch path:\n\nHere is Renaming of the folder:\nDEBUG 2016-08-24 16:35:13,717 (_INOTIFY_EVENT(wd=1, mask=1073741888, cookie=174440, len=16), ['IN_MOVED_FROM', 'IN_ISDIR'], b'/shared/media/content/Movies', b'VBH Demo')\nDEBUG 2016-08-24 16:35:13,717 (_INOTIFY_EVENT(wd=1, mask=1073741952, cookie=174440, len=32), ['IN_MOVED_TO', 'IN_ISDIR'], b'/shared/media/content/Movies', b'VBH Demo Renamed')\nDEBUG 2016-08-24 16:35:13,717 (_INOTIFY_EVENT(wd=2, mask=2048, cookie=0, len=0), ['IN_MOVE_SELF'], b'/shared/media/content/Movies/VBH Demo', b'')\n\nAnd here is toucing the file in that new folder:\nDEBUG 2016-08-24 16:36:55,914 (_INOTIFY_EVENT(wd=2, mask=256, cookie=0, len=16), ['IN_CREATE'], b'/shared/media/content/Movies/VBH Demo', b'TESTFILE')\nDEBUG 2016-08-24 16:36:55,915 (_INOTIFY_EVENT(wd=2, mask=32, cookie=0, len=16), ['IN_OPEN'], b'/shared/media/content/Movies/VBH Demo', b'TESTFILE')\nDEBUG 2016-08-24 16:36:55,915 (_INOTIFY_EVENT(wd=2, mask=4, cookie=0, len=16), ['IN_ATTRIB'], b'/shared/media/content/Movies/VBH Demo', b'TESTFILE')\nDEBUG 2016-08-24 16:36:55,915 (_INOTIFY_EVENT(wd=2, mask=8, cookie=0, len=16), ['IN_CLOSE_WRITE'], b'/shared/media/content/Movies/VBH Demo', b'TESTFILE')\n\nAs you can see, watch path is not changed to VBH Demo Renamed, it stayed in VBH Demo.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/16", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/16/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/16/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/16", "id": 170007104, "node_id": "MDU6SXNzdWUxNzAwMDcxMDQ=", "number": 16, "title": "Use of pathname instead of watch descriptor is problematic", "user": {"login": "foogod", "id": 3247763, "node_id": "MDQ6VXNlcjMyNDc3NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3247763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foogod", "html_url": "https://github.com/foogod", "followers_url": "https://api.github.com/users/foogod/followers", "following_url": "https://api.github.com/users/foogod/following{/other_user}", "gists_url": "https://api.github.com/users/foogod/gists{/gist_id}", "starred_url": "https://api.github.com/users/foogod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foogod/subscriptions", "organizations_url": "https://api.github.com/users/foogod/orgs", "repos_url": "https://api.github.com/users/foogod/repos", "events_url": "https://api.github.com/users/foogod/events{/privacy}", "received_events_url": "https://api.github.com/users/foogod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-08T19:41:57Z", "updated_at": "2017-12-01T07:13:04Z", "closed_at": "2017-12-01T07:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the `path` as the handle to refer to watches causes issues in some situations, because the pathname the watch was created against is not guaranteed to be unique/distinct for the life of the watch.\n\nFor example, take the following scenario:\n1. Create a watch against `/dir/foo`\n2. Somebody does `mv /dir/foo /dir/bar` (at this point, the watch created in step 1 is still active, still valid, and still watching the file which used to be `/dir/foo`, even though it's name has now changed)\n3. Somebody creates a new `/dir/foo` file.\n4. The application wants to keep watching the old file, but also open a new watch on the new `/dir/foo` file.\n\nIn this situation, the `inotify` library gets hopelessly confused (and even if it didn't, it doesn't return adequate information from watch events for the app to be able to figure out which watch is indicating what).\n\nThis is actually causing problems for me as I'm trying to write an application to monitor log files (which regularly get rotated in this way).\n\nMy recommendation would be that `Inotify.add_watch` should create a unique \"Watch object\" for each active watch, which it returns to the caller, and would then be provided as part of watch events (and could be supplied as an argument to `remove_watch`, etc.) to be able to uniquely distinguish between watches, even if multiple ones have the same associated path.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/15", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/15/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/15/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/15", "id": 170003867, "node_id": "MDU6SXNzdWUxNzAwMDM4Njc=", "number": 15, "title": "Documentation has unnecessary/misleading warning", "user": {"login": "foogod", "id": 3247763, "node_id": "MDQ6VXNlcjMyNDc3NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3247763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foogod", "html_url": "https://github.com/foogod", "followers_url": "https://api.github.com/users/foogod/followers", "following_url": "https://api.github.com/users/foogod/following{/other_user}", "gists_url": "https://api.github.com/users/foogod/gists{/gist_id}", "starred_url": "https://api.github.com/users/foogod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foogod/subscriptions", "organizations_url": "https://api.github.com/users/foogod/orgs", "repos_url": "https://api.github.com/users/foogod/repos", "events_url": "https://api.github.com/users/foogod/events{/privacy}", "received_events_url": "https://api.github.com/users/foogod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-08-08T19:25:56Z", "updated_at": "2017-12-01T07:13:04Z", "closed_at": "2017-12-01T07:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "At the end of the readme, it says:\n\n> Python's VM will remain locked and all other threads in your application will cease to function until something raises an event in the directories that are being watched.\n\nThis is actually completely untrue.  You are using Python's `select.epoll` interface to wait for events, which already handles releasing the GIL internally, so it will not block other threads while it is waiting.  I have tested and confirmed that using this `inotify` library with other threads running works just fine, and does not block other threads or \"lock the VM\" in any way..\n\n(Given this, the whole recommendation about using multiprocessing instead of threads is really unnecessary.  If somebody doesn't already have other reasons to use multiprocessing, it would just add needless extra overhead in this case.)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/14", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/14/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/14/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/14", "id": 169508622, "node_id": "MDU6SXNzdWUxNjk1MDg2MjI=", "number": 14, "title": "errno is always 0", "user": {"login": "flolf", "id": 20312167, "node_id": "MDQ6VXNlcjIwMzEyMTY3", "avatar_url": "https://avatars3.githubusercontent.com/u/20312167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flolf", "html_url": "https://github.com/flolf", "followers_url": "https://api.github.com/users/flolf/followers", "following_url": "https://api.github.com/users/flolf/following{/other_user}", "gists_url": "https://api.github.com/users/flolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/flolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flolf/subscriptions", "organizations_url": "https://api.github.com/users/flolf/orgs", "repos_url": "https://api.github.com/users/flolf/repos", "events_url": "https://api.github.com/users/flolf/events{/privacy}", "received_events_url": "https://api.github.com/users/flolf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-05T01:14:45Z", "updated_at": "2017-12-01T05:51:11Z", "closed_at": "2017-12-01T05:51:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there,\n\nWhile using PyInotify I've noticed that the ERRNO value returned by InotifyError is always equal to zero:\n\n```\nIn [1]: import os\n\nIn [2]: path = \"/foo\"\n\nIn [3]: os.path.exists(path)\nOut[3]: False\n\nIn [4]: import inotify.adapters\n\nIn [5]: i = inotify.adapters.Inotify()\n\nIn [6]: i.add_watch(path)\n---------------------------------------------------------------------------\nInotifyError                              Traceback (most recent call last)\n<ipython-input-6-5bee764f928e> in <module>()\n----> 1 i.add_watch(path)\n\n/home/florent/.local/lib/python2.7/site-packages/inotify/adapters.pyc in add_watch(self, path, mask)\n     65         _LOGGER.debug(\"Adding watch: [%s]\", path)\n     66\n---> 67         wd = inotify.calls.inotify_add_watch(self.__inotify_fd, path, mask)\n     68         _LOGGER.debug(\"Added watch (%d): [%s]\", wd, path)\n     69\n\n/home/florent/.local/lib/python2.7/site-packages/inotify/calls.pyc in _check_nonnegative(result)\n     33     if result == -1:\n     34         raise InotifyError(\"Call failed (should not be -1): (%d)\" %\n---> 35                            (result,))\n     36\n     37     return result\n\nInotifyError: Call failed (should not be -1): (-1) ERRNO=(0)    \n```\n\nIn this specific case I would expect ERRNO to be equal to ENOENT.\n\nI am using python 2.7 and Jessie:\n\n```\n[21:11:00 :~]$ python --version\nPython 2.7.9\n[21:11:02 :~]$  cat /etc/debian_version\n8.2\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/13", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/13/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/13/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/13", "id": 165926298, "node_id": "MDU6SXNzdWUxNjU5MjYyOTg=", "number": 13, "title": "pip3 install inotify is not getting the version in master", "user": {"login": "olymk2", "id": 1034950, "node_id": "MDQ6VXNlcjEwMzQ5NTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1034950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olymk2", "html_url": "https://github.com/olymk2", "followers_url": "https://api.github.com/users/olymk2/followers", "following_url": "https://api.github.com/users/olymk2/following{/other_user}", "gists_url": "https://api.github.com/users/olymk2/gists{/gist_id}", "starred_url": "https://api.github.com/users/olymk2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olymk2/subscriptions", "organizations_url": "https://api.github.com/users/olymk2/orgs", "repos_url": "https://api.github.com/users/olymk2/repos", "events_url": "https://api.github.com/users/olymk2/events{/privacy}", "received_events_url": "https://api.github.com/users/olymk2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-16T11:57:32Z", "updated_at": "2016-07-16T15:06:05Z", "closed_at": "2016-07-16T15:06:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "trying to use this nad been hitting loads of issues with python 3, seems a lot have been fixed but there not in the version pip is giving me :/\n\ncan this be updated ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/9", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/9/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/9/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/9", "id": 159080369, "node_id": "MDU6SXNzdWUxNTkwODAzNjk=", "number": 9, "title": "TypeError: __init__() got an unexpected keyword argument 'block_duration_s'", "user": {"login": "larvanitis", "id": 1144686, "node_id": "MDQ6VXNlcjExNDQ2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1144686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larvanitis", "html_url": "https://github.com/larvanitis", "followers_url": "https://api.github.com/users/larvanitis/followers", "following_url": "https://api.github.com/users/larvanitis/following{/other_user}", "gists_url": "https://api.github.com/users/larvanitis/gists{/gist_id}", "starred_url": "https://api.github.com/users/larvanitis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larvanitis/subscriptions", "organizations_url": "https://api.github.com/users/larvanitis/orgs", "repos_url": "https://api.github.com/users/larvanitis/repos", "events_url": "https://api.github.com/users/larvanitis/events{/privacy}", "received_events_url": "https://api.github.com/users/larvanitis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-08T05:09:48Z", "updated_at": "2016-06-30T01:27:40Z", "closed_at": "2016-06-30T01:27:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "A regression was introduced in 0.2.5 in [adapters.py#L33](https://github.com/dsoprea/PyInotify/blame/0.2.5/inotify/adapters.py#L33) and now `adapters.InotifyTree` is broken because it tries to pass `block_duration_s` instead of the _now_ expected `block_duration`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/7", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/7/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/7/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/7", "id": 157571752, "node_id": "MDU6SXNzdWUxNTc1NzE3NTI=", "number": 7, "title": "Inotify.__handle_inotify_event raises another TypeError when attempting to handle an event in python3.", "user": {"login": "declaresub", "id": 31868, "node_id": "MDQ6VXNlcjMxODY4", "avatar_url": "https://avatars2.githubusercontent.com/u/31868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/declaresub", "html_url": "https://github.com/declaresub", "followers_url": "https://api.github.com/users/declaresub/followers", "following_url": "https://api.github.com/users/declaresub/following{/other_user}", "gists_url": "https://api.github.com/users/declaresub/gists{/gist_id}", "starred_url": "https://api.github.com/users/declaresub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/declaresub/subscriptions", "organizations_url": "https://api.github.com/users/declaresub/orgs", "repos_url": "https://api.github.com/users/declaresub/repos", "events_url": "https://api.github.com/users/declaresub/events{/privacy}", "received_events_url": "https://api.github.com/users/declaresub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-05-31T01:01:10Z", "updated_at": "2017-09-02T06:52:21Z", "closed_at": "2017-09-02T06:52:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having fixed the two problems recently reported, another TypeError is raised while handling an event.\n\nTraceback (most recent call last):\n  File \"/inotify/dev/test.py\", line 50, in <module>\n    _main()\n  File \"/inotify/dev/test.py\", line 38, in _main\n    for event in i.event_gen():\n  File \"/inotify/inotify/adapters.py\", line 162, in event_gen\n    in self.__handle_inotify_event(fd, event_type):\n  File \"/inotify/inotify/adapters.py\", line 141, in __handle_inotify_event\n    filename = filename.rstrip('\\0')\nTypeError: 'str' does not support the buffer interface\n\nHere, the problem is that filename is a 'bytes' object in python 3, so needs to be decoded before stripping.  My fix was this:\n\n```\nfilename = filename.encode(sys.getdefaultencoding()).rstrip('\\0')\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/6", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/6/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/6/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/6", "id": 157571309, "node_id": "MDU6SXNzdWUxNTc1NzEzMDk=", "number": 6, "title": "Inotify.__handle_inotify_event raises TypeError when attempting to handle an event in python3.", "user": {"login": "declaresub", "id": 31868, "node_id": "MDQ6VXNlcjMxODY4", "avatar_url": "https://avatars2.githubusercontent.com/u/31868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/declaresub", "html_url": "https://github.com/declaresub", "followers_url": "https://api.github.com/users/declaresub/followers", "following_url": "https://api.github.com/users/declaresub/following{/other_user}", "gists_url": "https://api.github.com/users/declaresub/gists{/gist_id}", "starred_url": "https://api.github.com/users/declaresub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/declaresub/subscriptions", "organizations_url": "https://api.github.com/users/declaresub/orgs", "repos_url": "https://api.github.com/users/declaresub/repos", "events_url": "https://api.github.com/users/declaresub/events{/privacy}", "received_events_url": "https://api.github.com/users/declaresub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-31T00:52:59Z", "updated_at": "2017-12-01T05:45:23Z", "closed_at": "2017-12-01T05:45:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Stack trace:\n\nTraceback (most recent call last):\n  File \"/inotify/dev/test.py\", line 50, in <module>\n    _main()\n  File \"/inotify/dev/test.py\", line 38, in _main\n    for event in i.event_gen():\n  File \"/inotify/inotify/adapters.py\", line 162, in event_gen\n    in self.__handle_inotify_event(fd, event_type):\n  File \"/inotify/inotify/adapters.py\", line 114, in __handle_inotify_event\n    self.__buffer += b\nTypeError: Can't convert 'bytes' object to str implicitly\n\nThe problem is that self.__buffer is initialized to '', which in python 3 is a unicode string.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/5", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/5/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/5/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/5", "id": 157570890, "node_id": "MDU6SXNzdWUxNTc1NzA4OTA=", "number": 5, "title": "Inotify. add_watch raises an exception when passed a str path in python3.", "user": {"login": "declaresub", "id": 31868, "node_id": "MDQ6VXNlcjMxODY4", "avatar_url": "https://avatars2.githubusercontent.com/u/31868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/declaresub", "html_url": "https://github.com/declaresub", "followers_url": "https://api.github.com/users/declaresub/followers", "following_url": "https://api.github.com/users/declaresub/following{/other_user}", "gists_url": "https://api.github.com/users/declaresub/gists{/gist_id}", "starred_url": "https://api.github.com/users/declaresub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/declaresub/subscriptions", "organizations_url": "https://api.github.com/users/declaresub/orgs", "repos_url": "https://api.github.com/users/declaresub/repos", "events_url": "https://api.github.com/users/declaresub/events{/privacy}", "received_events_url": "https://api.github.com/users/declaresub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-31T00:45:38Z", "updated_at": "2017-12-01T07:13:04Z", "closed_at": "2017-12-01T07:13:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is a stack trace:\n\nTraceback (most recent call last):\n  File \"/inotify/dev/test.py\", line 50, in <module>\n    _main()\n  File \"/inotify/dev/test.py\", line 35, in _main\n    i.add_watch('/tmp')\n  File \"/inotify/inotify/adapters.py\", line 65, in add_watch\n    wd = inotify.calls.inotify_add_watch(self.__inotify_fd, path, mask)\nctypes.ArgumentError: argument 2: <class 'TypeError'>: wrong type\n\ninotify.calls.inotify_add_watch expects a byte-string for the path argument.  \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/3", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/3/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/3/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/3", "id": 109057758, "node_id": "MDU6SXNzdWUxMDkwNTc3NTg=", "number": 3, "title": "Under python 3.4 constants.py gives an error at import", "user": {"login": "dickkniep", "id": 409767, "node_id": "MDQ6VXNlcjQwOTc2Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/409767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dickkniep", "html_url": "https://github.com/dickkniep", "followers_url": "https://api.github.com/users/dickkniep/followers", "following_url": "https://api.github.com/users/dickkniep/following{/other_user}", "gists_url": "https://api.github.com/users/dickkniep/gists{/gist_id}", "starred_url": "https://api.github.com/users/dickkniep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dickkniep/subscriptions", "organizations_url": "https://api.github.com/users/dickkniep/orgs", "repos_url": "https://api.github.com/users/dickkniep/repos", "events_url": "https://api.github.com/users/dickkniep/events{/privacy}", "received_events_url": "https://api.github.com/users/dickkniep/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-09-30T10:25:00Z", "updated_at": "2016-06-07T12:26:58Z", "closed_at": "2016-05-19T03:01:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "The way octal is used in python3.4 has changed. Now a prefix of 0o needs to be added. \n\nPython 3.4.0 (default, Jun 19 2015, 14:20:21) \n[GCC 4.8.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n> > > import inotify.adapters\n> > > Traceback (most recent call last):\n> > >   File \"<stdin>\", line 1, in <module>\n> > >   File \"/home/dick/.virtualenvs/cctools/lib/python3.4/site-packages/inotify/adapters.py\", line 7, in <module>\n> > >     import inotify.constants\n> > >   File \"/home/dick/.virtualenvs/cctools/lib/python3.4/site-packages/inotify/constants.py\", line 3\n> > >     IN_CLOEXEC  = 02000000\n> > >                          ^\n> > > SyntaxError: invalid token\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dsoprea/PyInotify/issues/1", "repository_url": "https://api.github.com/repos/dsoprea/PyInotify", "labels_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/1/comments", "events_url": "https://api.github.com/repos/dsoprea/PyInotify/issues/1/events", "html_url": "https://github.com/dsoprea/PyInotify/issues/1", "id": 87969629, "node_id": "MDU6SXNzdWU4Nzk2OTYyOQ==", "number": 1, "title": "KeyError in __handle_inotify_event", "user": {"login": "backbord", "id": 6814946, "node_id": "MDQ6VXNlcjY4MTQ5NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6814946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/backbord", "html_url": "https://github.com/backbord", "followers_url": "https://api.github.com/users/backbord/followers", "following_url": "https://api.github.com/users/backbord/following{/other_user}", "gists_url": "https://api.github.com/users/backbord/gists{/gist_id}", "starred_url": "https://api.github.com/users/backbord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/backbord/subscriptions", "organizations_url": "https://api.github.com/users/backbord/orgs", "repos_url": "https://api.github.com/users/backbord/repos", "events_url": "https://api.github.com/users/backbord/events{/privacy}", "received_events_url": "https://api.github.com/users/backbord/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-06-13T09:24:59Z", "updated_at": "2015-06-22T03:37:59Z", "closed_at": "2015-06-22T03:28:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I've recently started to use your nice little project in version 0.2.3 (I used pyinotify before).\nHowever, I stumbled across the following error and hope that you can help me.\n\n```\nTraceback (most recent call last):\n  File \\\"test.py\\\", line 88, in <module>\n    sys.exit(main())\n  File \\\"test.py\\\", line 82, in main\n    handle_events(path)\n  File \\\"test.py\\\", line 49, in handle_events\n    for event in notifier.event_gen():\n  File \\\"/foo/bar/lib/python2.7/site-packages/inotify/adapters.py\\\", line 193, in event_gen\n    for event in self.__i.event_gen():\n  File \\\"/foo/bar/lib/python2.7/site-packages/inotify/adapters.py\\\", line 148, in event_gen\n    in self.__handle_inotify_event(fd, event_type):\n  File \\\"/foo/bar/lib/python2.7/site-packages/inotify/adapters.py\\\", line 134, in __handle_inotify_event\n    path = self.__watches_r[header.wd]\nKeyError: 226\n```\n\nThe number varies. I've seen all from 9 to 10 and from 220 to 229.\nHave you seen this error before and can advice?\n\nThe function `handle_events(path)` is intended to announce all files under a path whenever they are closed after writing. It is defined as follows.\n\n``` python\ndef handle_events(path):\n\n    # we intend to react on files being closed after writing and directories being created\n    mask = inotify.constants.IN_CLOSE_WRITE | inotify.constants.IN_CREATE\n\n    # block_duration_s is the pause [s] between calls to the kernel\n    # cycle: (poll for events, yield events sequentially, yield None, sleep for block_duration_s, loop)\n    notifier = inotify.adapters.InotifyTree(path=path, mask=mask, block_duration_s=1)\n\n    for event in notifier.event_gen():\n        if event is None:\n            continue\n\n        (header, _type_names, watch_path, filename) = event\n\n        # InotifyTree gives IN_ISDIR, IN_CREATE, IN_DELETE regardless of the actual mask for technical reasons\n        # we ignore everything not in our mask\n        if not header.mask & mask:\n            continue\n\n        # a file has been closed after writing. something to announce.\n        if header.mask & inotify.constants.IN_CLOSE_WRITE:\n            fpath = os.path.join(watch_path, filename)\n            announce_file(fpath)\n\n        # inotify adds a watch for the newly created path automatically (and removes it if the path is deleted)\n        # but there might already be some files in the folder before the watch is active. let's make sure to announce them\n        if header.mask & inotify.constants.IN_CREATE & inotify.constants.IN_ISDIR:\n            announce_all(watch_path)\n```\n\nBest regards,\nTim\n", "performed_via_github_app": null, "score": 1.0}]}