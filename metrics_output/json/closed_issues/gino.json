{"total_count": 238, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/python-gino/gino/issues/718", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/718/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/718/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/718/events", "html_url": "https://github.com/python-gino/gino/issues/718", "id": 683863540, "node_id": "MDU6SXNzdWU2ODM4NjM1NDA=", "number": 718, "title": "Gino models in jupyter notebook?", "user": {"login": "bubthegreat", "id": 12198817, "node_id": "MDQ6VXNlcjEyMTk4ODE3", "avatar_url": "https://avatars0.githubusercontent.com/u/12198817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bubthegreat", "html_url": "https://github.com/bubthegreat", "followers_url": "https://api.github.com/users/bubthegreat/followers", "following_url": "https://api.github.com/users/bubthegreat/following{/other_user}", "gists_url": "https://api.github.com/users/bubthegreat/gists{/gist_id}", "starred_url": "https://api.github.com/users/bubthegreat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bubthegreat/subscriptions", "organizations_url": "https://api.github.com/users/bubthegreat/orgs", "repos_url": "https://api.github.com/users/bubthegreat/repos", "events_url": "https://api.github.com/users/bubthegreat/events{/privacy}", "received_events_url": "https://api.github.com/users/bubthegreat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-21T22:45:33Z", "updated_at": "2020-08-22T18:59:35Z", "closed_at": "2020-08-22T18:59:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version:\r\n* Python version:\r\n* asyncpg version:\r\n* aiocontextvars version:\r\n* PostgreSQL version:\r\n\r\n### Description\r\n\r\nI've been trying to find a good way to use the GINO models (initialized in a fastapi app) in a jupyter notebook, but with existing model definitions - every way I've tried so far yield the same error:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nUninitializedError                        Traceback (most recent call last)\r\n<ipython-input-4-b34795366216> in async-def-wrapper()\r\n\r\nc:\\users\\bubth\\appdata\\local\\pypoetry\\cache\\virtualenvs\\gino-fastapi-qiepcby0-py3.7\\lib\\site-packages\\gino\\crud.py in _create_without_instance(cls, bind, timeout, **values)\r\n    442     @classmethod\r\n    443     async def _create_without_instance(cls, bind=None, timeout=DEFAULT, **values):\r\n--> 444         return await cls(**values)._create(bind=bind, timeout=timeout)\r\n    445 \r\n    446     async def _create(self, bind=None, timeout=DEFAULT):\r\n\r\nc:\\users\\bubth\\appdata\\local\\pypoetry\\cache\\virtualenvs\\gino-fastapi-qiepcby0-py3.7\\lib\\site-packages\\gino\\crud.py in _create(self, bind, timeout)\r\n    475         if bind is None:\r\n    476             bind = cls.__metadata__.bind\r\n--> 477         row = await bind.first(q)\r\n    478         for k, v in row.items():\r\n    479             self.__values__[self._column_name_map.invert_get(k)] = v\r\n\r\nc:\\users\\bubth\\appdata\\local\\pypoetry\\cache\\virtualenvs\\gino-fastapi-qiepcby0-py3.7\\lib\\site-packages\\gino\\api.py in __getattribute__(self, item)\r\n    542         if item == \"_exception\":\r\n    543             return super().__getattribute__(item)\r\n--> 544         raise self._exception\r\n    545 \r\n    546     def __setattr__(self, key, value):\r\n\r\nUninitializedError: Gino engine is not initialized.\r\n```\r\n\r\nIs there a good way to use a model without being within an application, or to initialize it with existing models that have already been created in an application?  I've been trying to look at the bind params, but there's not a super clear way to do it. \r\n\r\n### What I Did\r\n\r\n```\r\nfrom gino_fastapi.models.metrics import Metric\r\nawait Metric.create(key='test')\r\n---------------------------------------------------------------------------\r\nUninitializedError                        Traceback (most recent call last)\r\n<ipython-input-4-b34795366216> in async-def-wrapper()\r\n\r\nc:\\users\\bubth\\appdata\\local\\pypoetry\\cache\\virtualenvs\\gino-fastapi-qiepcby0-py3.7\\lib\\site-packages\\gino\\crud.py in _create_without_instance(cls, bind, timeout, **values)\r\n    442     @classmethod\r\n    443     async def _create_without_instance(cls, bind=None, timeout=DEFAULT, **values):\r\n--> 444         return await cls(**values)._create(bind=bind, timeout=timeout)\r\n    445 \r\n    446     async def _create(self, bind=None, timeout=DEFAULT):\r\n\r\nc:\\users\\bubth\\appdata\\local\\pypoetry\\cache\\virtualenvs\\gino-fastapi-qiepcby0-py3.7\\lib\\site-packages\\gino\\crud.py in _create(self, bind, timeout)\r\n    475         if bind is None:\r\n    476             bind = cls.__metadata__.bind\r\n--> 477         row = await bind.first(q)\r\n    478         for k, v in row.items():\r\n    479             self.__values__[self._column_name_map.invert_get(k)] = v\r\n\r\nc:\\users\\bubth\\appdata\\local\\pypoetry\\cache\\virtualenvs\\gino-fastapi-qiepcby0-py3.7\\lib\\site-packages\\gino\\api.py in __getattribute__(self, item)\r\n    542         if item == \"_exception\":\r\n    543             return super().__getattribute__(item)\r\n--> 544         raise self._exception\r\n    545 \r\n    546     def __setattr__(self, key, value):\r\n\r\nUninitializedError: Gino engine is not initialized.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/708", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/708/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/708/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/708/events", "html_url": "https://github.com/python-gino/gino/issues/708", "id": 657095603, "node_id": "MDU6SXNzdWU2NTcwOTU2MDM=", "number": 708, "title": "\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u652f\u6301mssql", "user": {"login": "jhhuang2000", "id": 30142853, "node_id": "MDQ6VXNlcjMwMTQyODUz", "avatar_url": "https://avatars3.githubusercontent.com/u/30142853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhhuang2000", "html_url": "https://github.com/jhhuang2000", "followers_url": "https://api.github.com/users/jhhuang2000/followers", "following_url": "https://api.github.com/users/jhhuang2000/following{/other_user}", "gists_url": "https://api.github.com/users/jhhuang2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhhuang2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhhuang2000/subscriptions", "organizations_url": "https://api.github.com/users/jhhuang2000/orgs", "repos_url": "https://api.github.com/users/jhhuang2000/repos", "events_url": "https://api.github.com/users/jhhuang2000/events{/privacy}", "received_events_url": "https://api.github.com/users/jhhuang2000/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779916, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTY=", "url": "https://api.github.com/repos/python-gino/gino/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-15T06:26:31Z", "updated_at": "2020-07-15T12:11:13Z", "closed_at": "2020-07-15T12:11:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version:\r\n* Python version:\r\n* asyncpg version:\r\n* aiocontextvars version:\r\n* PostgreSQL version:\r\n\r\n### Description\r\n\r\nDescribe what you were trying to get done.\r\nTell us what happened, what went wrong, and what you expected to happen.\r\n\r\n### What I Did\r\n\r\n```\r\nPaste the command(s) you ran and the output.\r\nIf there was a crash, please include the traceback here.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/707", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/707/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/707/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/707/events", "html_url": "https://github.com/python-gino/gino/issues/707", "id": 656364017, "node_id": "MDU6SXNzdWU2NTYzNjQwMTc=", "number": 707, "title": "GINO use mysql", "user": {"login": "mylot-python", "id": 52000990, "node_id": "MDQ6VXNlcjUyMDAwOTkw", "avatar_url": "https://avatars2.githubusercontent.com/u/52000990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mylot-python", "html_url": "https://github.com/mylot-python", "followers_url": "https://api.github.com/users/mylot-python/followers", "following_url": "https://api.github.com/users/mylot-python/following{/other_user}", "gists_url": "https://api.github.com/users/mylot-python/gists{/gist_id}", "starred_url": "https://api.github.com/users/mylot-python/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mylot-python/subscriptions", "organizations_url": "https://api.github.com/users/mylot-python/orgs", "repos_url": "https://api.github.com/users/mylot-python/repos", "events_url": "https://api.github.com/users/mylot-python/events{/privacy}", "received_events_url": "https://api.github.com/users/mylot-python/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779916, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTY=", "url": "https://api.github.com/repos/python-gino/gino/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-14T06:29:32Z", "updated_at": "2020-07-14T17:56:27Z", "closed_at": "2020-07-14T17:56:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version:1\r\n* Python version:3.8\r\n\r\ncode:\r\ndb.set_bind('mysql+aiomysql://root:123456@192.168.101.43:3306/future')\r\n\r\nrasie exc - sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:mysql.aiomysql\r\n\r\ngino not Support for mysql? If mysql is supported, How to fill in parameters?\r\n\r\n\u8bf7\u95eegino\u4e0d\u652f\u6301mysql\u5417? \u5982\u679c\u652f\u6301, \u5982\u4f55\u586b\u5199\u9a71\u52a8?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/701", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/701/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/701/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/701/events", "html_url": "https://github.com/python-gino/gino/issues/701", "id": 638341408, "node_id": "MDU6SXNzdWU2MzgzNDE0MDg=", "number": 701, "title": "Gino Object doesn't expose Bakery", "user": {"login": "Chaostheorie", "id": 42151227, "node_id": "MDQ6VXNlcjQyMTUxMjI3", "avatar_url": "https://avatars3.githubusercontent.com/u/42151227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chaostheorie", "html_url": "https://github.com/Chaostheorie", "followers_url": "https://api.github.com/users/Chaostheorie/followers", "following_url": "https://api.github.com/users/Chaostheorie/following{/other_user}", "gists_url": "https://api.github.com/users/Chaostheorie/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chaostheorie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chaostheorie/subscriptions", "organizations_url": "https://api.github.com/users/Chaostheorie/orgs", "repos_url": "https://api.github.com/users/Chaostheorie/repos", "events_url": "https://api.github.com/users/Chaostheorie/events{/privacy}", "received_events_url": "https://api.github.com/users/Chaostheorie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-06-14T12:20:00Z", "updated_at": "2020-06-14T19:55:41Z", "closed_at": "2020-06-14T18:15:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 1.0.0 and 1.0.1\r\n* GINO-Starlette: 0.1.1\r\n* Python version: 3.8.2\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: PostgreSQL 11.8 (Ubuntu 11.8-1.pgdg20.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.3.0-10ubuntu2) 9.3.0, 64-bit\r\n\r\n### Description\r\n\r\nThe bake attribute/ the bakery is missing from the `gino.ext.starlette.Gino` object. This raises an error if an query should be baked with `db.bake (db = Gino(app, dsn=Config.DATABASE_URL) and db is connected). Schema declaration and normal queries/ updates/ create are fully functional.\r\n\r\n### What I Did\r\n\r\nThis block is executed after the init of app and db on startup.\r\n\r\n```python\r\nasync def connect():\r\n    from app import app, db\r\n    from app.models import (Game, PlayerGames, Player, Role,\r\n                            PlayerRoles, State, GameStates)\r\n    app.engine = await db.set_bind(Config.DATABASE_URL)\r\n    app.baked = Ctx()\r\n    await db.gino.create_all()\r\n    app.logger.info(\"Database created and connected\")\r\n   # At this point 'bake' is also not in dir(db)\r\n```\r\n\r\n```python\r\nasync def QueryBake():\r\n    from app import app, db\r\n    from app.models import Player, PlayerGames, Role, PlayerRoles, Game\r\n\r\n    # User.get_roles() query\r\n    query = Role.outerjoin(PlayerRoles).outerjoin(Player)\r\n    query = query.select().where(\r\n        PlayerRoles.player_id == db.bindparam(\"uid\")\r\n        )\r\n    loader = Role.distinct(Role.id).load(\r\n        add_parent=Player.distinct(Player.id)\r\n        )\r\n\r\n    app.baked.role_query = db.bake(\r\n        query.execution_options(loader=loader)\r\n    )\r\n\r\n```\r\n\r\nTraceback:\r\n\r\n``\u00b4bash\r\nERROR:    Traceback (most recent call last):\r\n  File \"/home/username/P/boardgame-backend/venv/lib/python3.8/site-packages/starlette/routing.py\", line 517, in lifespan\r\n    await self.startup()\r\n  File \"/home/username/P/boardgame-backend/venv/lib/python3.8/site-packages/starlette/routing.py\", line 494, in startup\r\n    await handler()\r\n  File \"/home/username/P/boardgame-backend/app/config.py\", line 73, in QueryBake\r\n    app.baked.role_query = db.bake(\r\nAttributeError: 'Gino' object has no attribute 'bake'\r\n``\u00b4\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/699", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/699/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/699/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/699/events", "html_url": "https://github.com/python-gino/gino/issues/699", "id": 636396087, "node_id": "MDU6SXNzdWU2MzYzOTYwODc=", "number": 699, "title": "Alter in create_all", "user": {"login": "nikhilpatil02", "id": 12011687, "node_id": "MDQ6VXNlcjEyMDExNjg3", "avatar_url": "https://avatars0.githubusercontent.com/u/12011687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikhilpatil02", "html_url": "https://github.com/nikhilpatil02", "followers_url": "https://api.github.com/users/nikhilpatil02/followers", "following_url": "https://api.github.com/users/nikhilpatil02/following{/other_user}", "gists_url": "https://api.github.com/users/nikhilpatil02/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikhilpatil02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikhilpatil02/subscriptions", "organizations_url": "https://api.github.com/users/nikhilpatil02/orgs", "repos_url": "https://api.github.com/users/nikhilpatil02/repos", "events_url": "https://api.github.com/users/nikhilpatil02/events{/privacy}", "received_events_url": "https://api.github.com/users/nikhilpatil02/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-10T16:40:33Z", "updated_at": "2020-06-21T03:40:18Z", "closed_at": "2020-06-21T03:40:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 1.0.0\r\n* Python version: 3.8\r\n* asyncpg version:0.20.1\r\n* PostgreSQL version:10\r\n\r\nWe are using db.gino.create_all() for creation of database from models.py file.\r\nHowever when we make some changes to any specific table (class) of model file, we need to drop that table and then the changes are getting reflected. Is there any way where the alteration of the tables can happen while create_all()\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/698", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/698/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/698/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/698/events", "html_url": "https://github.com/python-gino/gino/issues/698", "id": 633653151, "node_id": "MDU6SXNzdWU2MzM2NTMxNTE=", "number": 698, "title": "Gino ORM query not working using Geoalchemy2 functions", "user": {"login": "KoustavCode", "id": 30053913, "node_id": "MDQ6VXNlcjMwMDUzOTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/30053913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KoustavCode", "html_url": "https://github.com/KoustavCode", "followers_url": "https://api.github.com/users/KoustavCode/followers", "following_url": "https://api.github.com/users/KoustavCode/following{/other_user}", "gists_url": "https://api.github.com/users/KoustavCode/gists{/gist_id}", "starred_url": "https://api.github.com/users/KoustavCode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KoustavCode/subscriptions", "organizations_url": "https://api.github.com/users/KoustavCode/orgs", "repos_url": "https://api.github.com/users/KoustavCode/repos", "events_url": "https://api.github.com/users/KoustavCode/events{/privacy}", "received_events_url": "https://api.github.com/users/KoustavCode/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-07T18:39:34Z", "updated_at": "2020-06-09T02:28:39Z", "closed_at": "2020-06-09T02:28:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 1.0.0\r\n* Python version: 3.8.2\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version:\r\n* PostgreSQL version: 12.2\r\n\r\n### Description\r\nThe ORM query in SANIC written with Geoalchemy2 is not working\r\n\r\n### What I Did\r\nI have this table in a `postgreSQL` database with `postGIS` extension installed and enabled.\r\n```\r\n                                         Table \"public.crime_data\"\r\n\r\n\r\n   Column    |            Type             | Collation | Nullable |                Default                 \r\n-------------|-----------------------------|-----------|----------|----------------------------------------\r\n id          | integer                     |           | not null | nextval('crime_data_id_seq'::regclass)\r\n state       | character varying           |           |          | \r\n district    | character varying           |           |          | \r\n location    | character varying           |           |          | \r\n sub_type_id | integer                     |           |          | \r\n date_time   | timestamp without time zone |           |          | \r\n latitude    | double precision            |           |          | \r\n longitude   | double precision            |           |          | \r\n geom_point  | geography(Point,4326)       |           |          | \r\n\r\n\r\nIndexes:\r\n    \"crime_data_pkey\" PRIMARY KEY, btree (id)\r\n    \"idx_crime_data_geom_point\" gist (geom_point)\r\nForeign-key constraints:\r\n    \"crime_data_sub_type_id_fkey\" FOREIGN KEY (sub_type_id) REFERENCES sub_type(id)\r\n```\r\n\r\nI am using `Sanic` web framework and along with it `Gino ORM` since it's asynchronous.\r\n\r\nI am able to write and run raw SQL queries in the command line and also using `Gino`. I just want to know if it's possible to convert a certain query to ORM syntax.\r\n\r\nThis is the raw query that is _working_. This code snippet is inside an async view function and this is returning the expected result.\r\n```python\r\ndata_points = await db.status(db.text('''\r\n    SELECT \r\n        location, \r\n        sub_type_id, \r\n        latitude, \r\n        longitude, \r\n        date_time\r\n    FROM \r\n        crime_data\r\n    WHERE \r\n        ST_Distance(\r\n        geom_point,\r\n        ST_SetSRID(ST_MakePoint(:lng, :lat), 4326)\r\n    ) <= 5 * 1609.34;\r\n'''), {\r\n    'lat': lat,\r\n    'lng': lng,\r\n})\r\n```\r\n\r\nThis is my attempt to convert it to an ORM query, which _**isn't** working_.\r\n```\r\ndata_points = await CrimeData.query.where(\r\n    geo_func.ST_Distance(\r\n        'geom_point',\r\n        geo_func.ST_SetSRID(\r\n            geo_func.ST_MakePoint(lng, lat),\r\n            4326\r\n        )\r\n    ) <= (5 * 1609.34)\r\n).gino.all()\r\n```\r\n\r\nWhile trying to run this query and return the response as `text`, I'm getting this error.\r\n```\r\n\u26a0\ufe0f 500 \u2014 Internal Server Error\r\nparse error - invalid geometry HINT: \"ge\" <-- parse error at position 2 within geometry\r\n\r\nTraceback of __main__ (most recent call last):\r\nInternalServerError: parse error - invalid geometry HINT: \"ge\" <-- parse error at position 2 within geometry\r\nFile /home/disciple/Documents/Code/MyProject-All/MyProject-Sanic/venv/lib/python3.8/site-packages/sanic/app.py, line 973, in handle_request\r\n\r\nresponse = await response\r\n\r\nFile /home/disciple/Documents/Code/MyProject-All/MyProject-Sanic/backend/services/crime_plot.py, line 30, in test\r\n\r\ndata_points = await CrimeData.query.where(\r\n\r\nFile /home/disciple/Documents/Code/MyProject-All/MyProject-Sanic/venv/lib/python3.8/site-packages/gino/api.py, line 127, in all\r\n\r\nreturn await self._query.bind.all(self._query, *multiparams, **params)\r\n\r\nFile /home/disciple/Documents/Code/MyProject-All/MyProject-Sanic/venv/lib/python3.8/site-packages/gino/engine.py, line 740, in all\r\n\r\nreturn await conn.all(clause, *multiparams, **params)\r\n\r\nFile /home/disciple/Documents/Code/MyProject-All/MyProject-Sanic/venv/lib/python3.8/site-packages/gino/engine.py, line 316, in all\r\n\r\nreturn await result.execute()\r\n\r\nFile /home/disciple/Documents/Code/MyProject-All/MyProject-Sanic/venv/lib/python3.8/site-packages/gino/dialects/base.py, line 214, in execute\r\n\r\nrows = await cursor.async_execute(\r\n\r\nFile /home/disciple/Documents/Code/MyProject-All/MyProject-Sanic/venv/lib/python3.8/site-packages/gino/dialects/asyncpg.py, line 184, in async_execute\r\n\r\nresult, stmt = await getattr(conn, \"_do_execute\")(query, executor, timeout)\r\n\r\nFile /home/disciple/Documents/Code/MyProject-All/MyProject-Sanic/venv/lib/python3.8/site-packages/asyncpg/connection.py, line 1433, in _do_execute\r\n\r\nresult = await executor(stmt, None)\r\n\r\nFile asyncpg/protocol/protocol.pyx, line 196, in bind_execute\r\n\r\n\r\nInternalServerError: parse error - invalid geometry HINT: \"ge\" <-- parse error at position 2 within geometry while handling path /crime-plot/test1\r\n```\r\n\r\nI understand the ORM query is a `SELECT *` and that is fine as long as I actually get results. I don't understand what I'm doing wrong. I'm getting the work done but I just want to make sure that it's possible with the ORM too.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/693", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/693/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/693/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/693/events", "html_url": "https://github.com/python-gino/gino/issues/693", "id": 630029421, "node_id": "MDU6SXNzdWU2MzAwMjk0MjE=", "number": 693, "title": "JSONProperties don't work correctly for multiple JSON profiles", "user": {"login": "aragentum", "id": 48254535, "node_id": "MDQ6VXNlcjQ4MjU0NTM1", "avatar_url": "https://avatars3.githubusercontent.com/u/48254535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aragentum", "html_url": "https://github.com/aragentum", "followers_url": "https://api.github.com/users/aragentum/followers", "following_url": "https://api.github.com/users/aragentum/following{/other_user}", "gists_url": "https://api.github.com/users/aragentum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aragentum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aragentum/subscriptions", "organizations_url": "https://api.github.com/users/aragentum/orgs", "repos_url": "https://api.github.com/users/aragentum/repos", "events_url": "https://api.github.com/users/aragentum/events{/privacy}", "received_events_url": "https://api.github.com/users/aragentum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779915, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTU=", "url": "https://api.github.com/repos/python-gino/gino/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": "Describes a bug in the system."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-gino/gino/milestones/5", "html_url": "https://github.com/python-gino/gino/milestone/5", "labels_url": "https://api.github.com/repos/python-gino/gino/milestones/5/labels", "id": 2741127, "node_id": "MDk6TWlsZXN0b25lMjc0MTEyNw==", "number": 5, "title": "GINO 1.0", "description": "GINO 1.0 was initially released in Apr 2020, now it is open for bug fixes and security updates.", "creator": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 7, "state": "open", "created_at": "2017-09-03T04:24:23Z", "updated_at": "2020-06-06T20:19:48Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-06-03T14:10:28Z", "updated_at": "2020-06-06T20:19:49Z", "closed_at": "2020-06-06T20:19:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* GINO version: 1.0.0\r\n* Python version: 3.8.1\r\n* asyncpg version: 0.20.1\r\n* PostgreSQL version: 10.7\r\n\r\n### Description\r\n\r\nHello, I have a problem with JSONProperties when my model has two JSON profiles. JSONProperties from one of these profiles do not work.\r\n\r\n### What I Did\r\n\r\nCode:\r\n```python\r\nimport asyncio\r\n\r\nfrom gino import Gino\r\nfrom app import settings\r\nfrom sqlalchemy.dialects.postgresql import JSONB\r\nfrom gino.json_support import IntegerProperty, StringProperty\r\n\r\n\r\ndb = Gino()\r\n\r\n\r\nclass User(db.Model):\r\n    __tablename__ = \"users\"\r\n\r\n    id = db.Column(db.BigInteger(), autoincrement=True, primary_key=True, index=True, unique=True)\r\n    first_name = db.Column(db.Unicode(200))\r\n    last_name = db.Column(db.Unicode(200))\r\n    username = db.Column(db.Unicode(200))\r\n    language_code = db.Column(db.Unicode(10))\r\n    created_at = db.Column(db.DateTime(), server_default=db.func.now())\r\n\r\n    config = db.Column(JSONB, server_default=\"{}\")\r\n    config_param1 = IntegerProperty(default=0, prop_name='config')\r\n    config_param2 = IntegerProperty(default=1, prop_name='config')\r\n\r\n    data = db.Column(JSONB, server_default=\"{}\")\r\n    data_param1 = IntegerProperty(default=-1, prop_name='data')\r\n    data_param2 = StringProperty(default=\"\", prop_name='data')\r\n\r\n    def __str__(self) -> str:\r\n        return (f\"id = {self.id}\\n\" +\r\n                f\"first_name = {self.first_name}\\n\" +\r\n                f\"last_name = {self.last_name}\\n\" +\r\n                f\"username = {self.username}\\n\" +\r\n                f\"language_code = {self.language_code}\\n\" +\r\n                f\"created_at = {self.created_at}\\n\" +\r\n                f\"config = {self.config}\\n\" +\r\n                f\"config_param1 = {self.config_param1}\\n\" +\r\n                f\"config_param2 = {self.config_param2}\\n\" +\r\n                f\"data = {self.data}\\n\" +\r\n                f\"data_param1 = {self.data_param1}\\n\" +\r\n                f\"data_param2 = {self.data_param2}\\n\")\r\n\r\n\r\nasync def main():\r\n    await db.set_bind(settings.PG_URL)\r\n\r\n    # Create tables\r\n    await db.gino.create_all()\r\n\r\n    user = await User.create(username='username',\r\n                             last_name='last_name',\r\n                             first_name='first_name',\r\n                             language_code='en-ru',\r\n                             config_param1=95,\r\n                             config_param2=64,\r\n                             data_param1=18,\r\n                             data_param2=\"test\")\r\n    print(f\"Created user: \\n{user}\\n\")\r\n\r\n    selected_user = await User.query.where(User.id == user.id).gino.first()\r\n    print(f\"Selected user: \\n{selected_user}\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio.get_event_loop().run_until_complete(main())\r\n\r\n```\r\n\r\nResult:\r\n```\r\nCreated user: \r\nid = 1\r\nfirst_name = first_name\r\nlast_name = last_name\r\nusername = username\r\nlanguage_code = en-ru\r\ncreated_at = 2020-06-03 11:36:42.693057\r\nconfig = {'config_param1': 95, 'config_param2': 64}\r\nconfig_param1 = 95\r\nconfig_param2 = 64\r\ndata = {'data_param1': 18, 'data_param2': 'test'}\r\ndata_param1 = -1\r\ndata_param2 = \r\n\r\nSelected user: \r\nid = 1\r\nfirst_name = first_name\r\nlast_name = last_name\r\nusername = username\r\nlanguage_code = en-ru\r\ncreated_at = 2020-06-03 11:36:42.693057\r\nconfig = {'config_param1': 95, 'config_param2': 64}\r\nconfig_param1 = 95\r\nconfig_param2 = 64\r\ndata = {'data_param1': 18, 'data_param2': 'test'}\r\ndata_param1 = -1\r\ndata_param2 = \r\n```\r\n\r\nAs a result, I have default values for `data_param1` and `data_param1` instead of actual values.\r\n\r\nThank you for your job.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/692", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/692/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/692/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/692/events", "html_url": "https://github.com/python-gino/gino/issues/692", "id": 629812292, "node_id": "MDU6SXNzdWU2Mjk4MTIyOTI=", "number": 692, "title": "Continually Getting TypeError: 'GinoExecutor' object is not callable", "user": {"login": "austincollinpena", "id": 43731610, "node_id": "MDQ6VXNlcjQzNzMxNjEw", "avatar_url": "https://avatars3.githubusercontent.com/u/43731610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austincollinpena", "html_url": "https://github.com/austincollinpena", "followers_url": "https://api.github.com/users/austincollinpena/followers", "following_url": "https://api.github.com/users/austincollinpena/following{/other_user}", "gists_url": "https://api.github.com/users/austincollinpena/gists{/gist_id}", "starred_url": "https://api.github.com/users/austincollinpena/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austincollinpena/subscriptions", "organizations_url": "https://api.github.com/users/austincollinpena/orgs", "repos_url": "https://api.github.com/users/austincollinpena/repos", "events_url": "https://api.github.com/users/austincollinpena/events{/privacy}", "received_events_url": "https://api.github.com/users/austincollinpena/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-03T08:46:19Z", "updated_at": "2020-06-03T15:06:26Z", "closed_at": "2020-06-03T15:06:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* GINO version: 1.0.0\r\n* Python version: 3.7 \r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version: Not installed\r\n* PostgreSQL version: 12.1\r\n\r\n### Description\r\n\r\nAttempting to make a simple query but am unable to. \r\n\r\n\r\n### What I Did\r\n\r\nWhile running:\r\n```\r\ndomain = await Domain.get(Domain.domain == 'http://domain.com').gino().first()\r\n```\r\nI get:\r\n```\r\nTypeError: 'GinoExecutor' object is not callable\r\n```\r\nIn context, here's some more code:\r\n\r\n```python\r\n./db/__init__.py\r\nfrom gino import Gino\r\nfrom scraper import config\r\n\r\nprint(config.DB_DSN)\r\n\r\nimport asyncio\r\n\r\ngino_db = Gino()\r\n\r\nasync def main():\r\n    await gino_db.set_bind(config.DB_DSN)\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n\r\n# Import your models here so Alembic will pick them up\r\nfrom db.models import *\r\n```\r\n\r\nMy main.py:\r\n\r\n```python\r\n...\r\n    loop.run_until_complete(init_db())\r\n...\r\n```\r\n\r\nAnd finally the init_db() function\r\n```python\r\nasync def init_db():\r\n    engine = await gino_db.set_bind(config.DB_DSN, echo=True)\r\n    domain = await Domain.query.where(Domain.domain == 'http://equipomedia.com').gino().first()\r\n```\r\n\r\nWhat's going wrong? In the same code I'm able to call ```domains = await Domain.query.gino.all()``` and get a valid response.\r\n\r\n[Github Repo](https://github.com/austincollinpena/spell-check-scraper)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/691", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/691/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/691/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/691/events", "html_url": "https://github.com/python-gino/gino/issues/691", "id": 629361907, "node_id": "MDU6SXNzdWU2MjkzNjE5MDc=", "number": 691, "title": "Does this work with postgis version 3?", "user": {"login": "nikhilpatil02", "id": 12011687, "node_id": "MDQ6VXNlcjEyMDExNjg3", "avatar_url": "https://avatars0.githubusercontent.com/u/12011687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikhilpatil02", "html_url": "https://github.com/nikhilpatil02", "followers_url": "https://api.github.com/users/nikhilpatil02/followers", "following_url": "https://api.github.com/users/nikhilpatil02/following{/other_user}", "gists_url": "https://api.github.com/users/nikhilpatil02/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikhilpatil02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikhilpatil02/subscriptions", "organizations_url": "https://api.github.com/users/nikhilpatil02/orgs", "repos_url": "https://api.github.com/users/nikhilpatil02/repos", "events_url": "https://api.github.com/users/nikhilpatil02/events{/privacy}", "received_events_url": "https://api.github.com/users/nikhilpatil02/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779915, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTU=", "url": "https://api.github.com/repos/python-gino/gino/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": "Describes a bug in the system."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-06-02T16:57:54Z", "updated_at": "2020-06-28T12:00:50Z", "closed_at": "2020-06-28T12:00:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does this work with postgis version 3? \r\n\r\n`db.gino.create_all()` created the tables but skipped the column `geom_point = db.Column(Geometry('POINT'), nullable=True)`.\r\n\r\nI tried again, after dropping and re-creating the database.\r\nHere is the stacktrace:\r\n```\r\n[2020-06-02 01:51:26 +0530] [111467] [INFO] Goin' Fast @ http://0.0.0.0:4500\r\nExecuting <Task pending name='Task-1' coro=<init_db() running at app.py:16> wait_for=<Future pending cb=[<TaskWakeupMethWrapper object at 0x7f374d006160>()] created at /usr/lib/python3.8/asyncio/tasks.py:466> cb=[run_until_complete.<locals>.<lambda>()] created at /home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/sanic/server.py:648> took 0.272 seconds\r\n[2020-06-02 01:51:27 +0530] [111471] [ERROR] Experienced exception while trying to serve\r\nTraceback (most recent call last):\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/sanic/app.py\", line 1170, in run\r\n    serve(**server_settings)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/sanic/server.py\", line 832, in serve\r\n    trigger_events(before_start, loop)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/sanic/server.py\", line 648, in trigger_events\r\n    loop.run_until_complete(result)\r\n  File \"uvloop/loop.pyx\", line 1456, in uvloop.loop.Loop.run_until_complete\r\n  File \"app.py\", line 17, in init_db\r\n    await db.gino.create_all()\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 347, in create_all\r\n    await self.create(bind=bind, tables=tables, checkfirst=checkfirst)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 334, in create\r\n    await getattr(bind, \"_run_visitor\")(\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/engine.py\", line 859, in _run_visitor\r\n    await getattr(conn, \"_run_visitor\")(*args, **kwargs)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/engine.py\", line 530, in _run_visitor\r\n    await visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 30, in traverse_single\r\n    return await meth(obj, **kw)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 91, in visit_metadata\r\n    await self.traverse_single(\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 30, in traverse_single\r\n    return await meth(obj, **kw)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 119, in visit_table\r\n    await _Async(table.dispatch.before_create)(\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 416, in call\r\n    await _call_portable_instancemethod(fn, args, kw)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 402, in _call_portable_instancemethod\r\n    m = getattr(fn.target, fn.name + \"_async\", None)\r\nAttributeError: 'function' object has no attribute 'target'\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 27, in <module>\r\n    app.run(host='0.0.0.0', port=4500, debug=True)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/sanic/app.py\", line 1170, in run\r\n    serve(**server_settings)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/sanic/server.py\", line 832, in serve\r\n    trigger_events(before_start, loop)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/sanic/server.py\", line 648, in trigger_events\r\n    loop.run_until_complete(result)\r\n  File \"uvloop/loop.pyx\", line 1456, in uvloop.loop.Loop.run_until_complete\r\n  File \"app.py\", line 17, in init_db\r\n    await db.gino.create_all()\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 347, in create_all\r\n    await self.create(bind=bind, tables=tables, checkfirst=checkfirst)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 334, in create\r\n    await getattr(bind, \"_run_visitor\")(\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/engine.py\", line 859, in _run_visitor\r\n    await getattr(conn, \"_run_visitor\")(*args, **kwargs)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/engine.py\", line 530, in _run_visitor\r\n    await visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 30, in traverse_single\r\n    return await meth(obj, **kw)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 91, in visit_metadata\r\n    await self.traverse_single(\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 30, in traverse_single\r\n    return await meth(obj, **kw)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 119, in visit_table\r\n    await _Async(table.dispatch.before_create)(\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 416, in call\r\n    await _call_portable_instancemethod(fn, args, kw)\r\n  File \"/home/disciple/Documents/Code/All/Sanic/venv/lib/python3.8/site-packages/gino/schema.py\", line 402, in _call_portable_instancemethod\r\n    m = getattr(fn.target, fn.name + \"_async\", None)\r\nAttributeError: 'function' object has no attribute 'target'\r\nsys:1: RuntimeWarning: coroutine 'Loop.create_server' was never awaited\r\n```\r\n\r\n_Originally posted by @diptangsu in https://github.com/python-gino/gino/issues/627#issuecomment-637080601_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/689", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/689/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/689/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/689/events", "html_url": "https://github.com/python-gino/gino/issues/689", "id": 628594156, "node_id": "MDU6SXNzdWU2Mjg1OTQxNTY=", "number": 689, "title": "Create PSQL onupdate trigger", "user": {"login": "flapili", "id": 29481952, "node_id": "MDQ6VXNlcjI5NDgxOTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/29481952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flapili", "html_url": "https://github.com/flapili", "followers_url": "https://api.github.com/users/flapili/followers", "following_url": "https://api.github.com/users/flapili/following{/other_user}", "gists_url": "https://api.github.com/users/flapili/gists{/gist_id}", "starred_url": "https://api.github.com/users/flapili/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flapili/subscriptions", "organizations_url": "https://api.github.com/users/flapili/orgs", "repos_url": "https://api.github.com/users/flapili/repos", "events_url": "https://api.github.com/users/flapili/events{/privacy}", "received_events_url": "https://api.github.com/users/flapili/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-01T17:08:24Z", "updated_at": "2020-06-21T03:40:32Z", "closed_at": "2020-06-21T03:40:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI have some difficulty with datetime default values and update's trigger\r\n\r\nfrom what I understand I can handle default value with `server_default=now` but how handle update?\r\n\r\nas example in this schema\r\n```py\r\nclass User(db.Model):\r\n    __tablename__ = \"users\"\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    created_at = db.Column(db.DateTime, nullable=False, server_default=\"now\")\r\n    updated_at = db.Column(db.DateTime, nullable=False, server_default=\"now\", onupdate=datetime.datetime.now)\r\n```\r\nbut the problem is the onupdate is manager by python and not by postgress, so is it possible with Gino to define the onupdate trigger ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/686", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/686/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/686/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/686/events", "html_url": "https://github.com/python-gino/gino/issues/686", "id": 625943239, "node_id": "MDU6SXNzdWU2MjU5NDMyMzk=", "number": 686, "title": "Does Gino support prived params?", "user": {"login": "semenovsd", "id": 63068536, "node_id": "MDQ6VXNlcjYzMDY4NTM2", "avatar_url": "https://avatars3.githubusercontent.com/u/63068536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semenovsd", "html_url": "https://github.com/semenovsd", "followers_url": "https://api.github.com/users/semenovsd/followers", "following_url": "https://api.github.com/users/semenovsd/following{/other_user}", "gists_url": "https://api.github.com/users/semenovsd/gists{/gist_id}", "starred_url": "https://api.github.com/users/semenovsd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semenovsd/subscriptions", "organizations_url": "https://api.github.com/users/semenovsd/orgs", "repos_url": "https://api.github.com/users/semenovsd/repos", "events_url": "https://api.github.com/users/semenovsd/events{/privacy}", "received_events_url": "https://api.github.com/users/semenovsd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-27T18:49:56Z", "updated_at": "2020-05-31T01:03:42Z", "closed_at": "2020-05-31T01:03:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 1.0\r\n* Python version: 3.8.2\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version:\r\n* PostgreSQL version: 12.3\r\n\r\n### Description\r\n\r\nTrying apply to db ririved param:\r\n\r\n```python\r\nclass User(db.Model):\r\n    __tablename__ = 'users'\r\n    query: sql.Select\r\n\r\n    id = Column(Integer, Sequence('user_id_seq'), primary_key=True)\r\n    __withdraw_details = Column(JSON, nullable=False, server_default=\"{}\")\r\n```\r\n\r\n### What I Did\r\n\r\n```python\r\n    async def save_withdraw_data(self, data):\r\n        data = {'fullname': str(data['fullname']).lower(),\r\n                'phone_number': int(data['phone_number']),\r\n                'email': str(data['email']).lower(),\r\n                'passport_number': int(data['passport_number'])\r\n                }\r\n        await self.update(__withdraw_details=json.dumps(data)).apply()\r\n```\r\n\r\nError:\r\ntgbot      | web_protocol.py [LINE:355] #ERROR    [2020-05-27 18:48:48,881]  Error handling request\r\ntgbot      | Traceback (most recent call last):\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/aiohttp/web_protocol.py\", line 418, in start\r\ntgbot      |     resp = await task\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/aiohttp/web_app.py\", line 458, in _handle\r\ntgbot      |     resp = await handler(request)\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/aiohttp/web_urldispatcher.py\", line 892, in _it\r\ner\r\ntgbot      |     resp = await method()\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/aiogram/dispatcher/webhook.py\", line 140, in po\r\nst\r\ntgbot      |     results = await self.process_update(update)\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/aiogram/dispatcher/webhook.py\", line 191, in pr\r\nocess_update\r\ntgbot      |     return fut.result()\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/aiogram/dispatcher/handler.py\", line 117, in no\r\ntify\r\ntgbot      |     response = await handler_obj.handler(*args, **partial_data)\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/aiogram/dispatcher/dispatcher.py\", line 229, in\r\n process_update\r\ntgbot      |     return await self.callback_query_handlers.notify(update.callback_query)\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/aiogram/dispatcher/handler.py\", line 117, in no\r\ntify\r\ntgbot      |     response = await handler_obj.handler(*args, **partial_data)\r\ntgbot      |   File \"/APP_BASE_DIR/handlers_subscriber_.py\", line 223, in approve_edit_withdraw\r\ntgbot      |     await user.save_withdraw_data(data)\r\ntgbot      |   File \"/APP_BASE_DIR/database.py\", line 51, in save_withdraw_data\r\ntgbot      |     await self.update(__withdraw_details=json.dumps(data)).apply()\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/gino/crud.py\", line 596, in _update\r\ntgbot      |     return self._update_request_cls(self).update(**values)\r\ntgbot      |   File \"/usr/local/lib/python3.8/site-packages/gino/crud.py\", line 225, in update\r\ntgbot      |     value = getattr(self._instance, value_from)[key]\r\ntgbot      | KeyError: '__withdraw_details'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/684", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/684/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/684/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/684/events", "html_url": "https://github.com/python-gino/gino/issues/684", "id": 624367518, "node_id": "MDU6SXNzdWU2MjQzNjc1MTg=", "number": 684, "title": "What Column Types Are Available?", "user": {"login": "austincollinpena", "id": 43731610, "node_id": "MDQ6VXNlcjQzNzMxNjEw", "avatar_url": "https://avatars3.githubusercontent.com/u/43731610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austincollinpena", "html_url": "https://github.com/austincollinpena", "followers_url": "https://api.github.com/users/austincollinpena/followers", "following_url": "https://api.github.com/users/austincollinpena/following{/other_user}", "gists_url": "https://api.github.com/users/austincollinpena/gists{/gist_id}", "starred_url": "https://api.github.com/users/austincollinpena/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austincollinpena/subscriptions", "organizations_url": "https://api.github.com/users/austincollinpena/orgs", "repos_url": "https://api.github.com/users/austincollinpena/repos", "events_url": "https://api.github.com/users/austincollinpena/events{/privacy}", "received_events_url": "https://api.github.com/users/austincollinpena/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-25T15:31:44Z", "updated_at": "2020-05-25T18:13:59Z", "closed_at": "2020-05-25T18:13:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For example I see [here](https://github.com/python-gino/gino/issues/160) talks about enum, and [on this issue](https://github.com/python-gino/gino/issues/287) I see a Datetime() field.\r\n\r\nIs it all of the columns from [SQLAlchemy's core](https://docs.sqlalchemy.org/en/13/core/type_basics.html)? \r\n\r\nIf so, when do I call the column like db.String vs db.DateTime()?\r\n\r\nSome clarification here or in the docs would be appreciated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/677", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/677/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/677/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/677/events", "html_url": "https://github.com/python-gino/gino/issues/677", "id": 623668656, "node_id": "MDU6SXNzdWU2MjM2Njg2NTY=", "number": 677, "title": "password type", "user": {"login": "flapili", "id": 29481952, "node_id": "MDQ6VXNlcjI5NDgxOTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/29481952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flapili", "html_url": "https://github.com/flapili", "followers_url": "https://api.github.com/users/flapili/followers", "following_url": "https://api.github.com/users/flapili/following{/other_user}", "gists_url": "https://api.github.com/users/flapili/gists{/gist_id}", "starred_url": "https://api.github.com/users/flapili/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flapili/subscriptions", "organizations_url": "https://api.github.com/users/flapili/orgs", "repos_url": "https://api.github.com/users/flapili/repos", "events_url": "https://api.github.com/users/flapili/events{/privacy}", "received_events_url": "https://api.github.com/users/flapili/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-23T14:12:02Z", "updated_at": "2020-05-23T18:14:31Z", "closed_at": "2020-05-23T18:14:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nto hash a password in a database collumn what would you recommand ?\r\ndoes [sqlalchemy_utils.types.password](https://sqlalchemy-utils.readthedocs.io/en/latest/_modules/sqlalchemy_utils/types/password.html) is fine ?\r\nshould I hash by myself ?\r\n\r\n```\r\nclass MyTable(db.Model):\r\n    _pwd = db.Column(\"pwd\", db.String)\r\n\r\n    @property\r\n    def pwd(self):\r\n        return _pwd\r\n\r\n    @pwd.setter\r\n    def pwd(self, val):\r\n        self._pwd = some_hash_fonction(_pwd)\r\n```\r\n?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/675", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/675/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/675/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/675/events", "html_url": "https://github.com/python-gino/gino/issues/675", "id": 622228247, "node_id": "MDU6SXNzdWU2MjIyMjgyNDc=", "number": 675, "title": "Test is failing on SQLAlchemy 1.3.17", "user": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779915, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTU=", "url": "https://api.github.com/repos/python-gino/gino/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": "Describes a bug in the system."}], "state": "closed", "locked": false, "assignee": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/python-gino/gino/milestones/5", "html_url": "https://github.com/python-gino/gino/milestone/5", "labels_url": "https://api.github.com/repos/python-gino/gino/milestones/5/labels", "id": 2741127, "node_id": "MDk6TWlsZXN0b25lMjc0MTEyNw==", "number": 5, "title": "GINO 1.0", "description": "GINO 1.0 was initially released in Apr 2020, now it is open for bug fixes and security updates.", "creator": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 7, "state": "open", "created_at": "2017-09-03T04:24:23Z", "updated_at": "2020-06-06T20:19:48Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-05-21T03:55:10Z", "updated_at": "2020-05-21T05:44:53Z", "closed_at": "2020-05-21T05:44:53Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "* GINO version: 1.0, 1.1.x\r\n* Python version: *\r\n* asyncpg version: *\r\n* aiocontextvars version: *\r\n* PostgreSQL version: *\r\n\r\n### Description\r\n\r\nhttps://github.com/python-gino/gino/runs/695012657\r\n\r\nmaybe a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/673", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/673/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/673/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/673/events", "html_url": "https://github.com/python-gino/gino/issues/673", "id": 620712596, "node_id": "MDU6SXNzdWU2MjA3MTI1OTY=", "number": 673, "title": "import error", "user": {"login": "begyy", "id": 44405438, "node_id": "MDQ6VXNlcjQ0NDA1NDM4", "avatar_url": "https://avatars3.githubusercontent.com/u/44405438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/begyy", "html_url": "https://github.com/begyy", "followers_url": "https://api.github.com/users/begyy/followers", "following_url": "https://api.github.com/users/begyy/following{/other_user}", "gists_url": "https://api.github.com/users/begyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/begyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/begyy/subscriptions", "organizations_url": "https://api.github.com/users/begyy/orgs", "repos_url": "https://api.github.com/users/begyy/repos", "events_url": "https://api.github.com/users/begyy/events{/privacy}", "received_events_url": "https://api.github.com/users/begyy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779917, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTc=", "url": "https://api.github.com/repos/python-gino/gino/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-19T06:25:46Z", "updated_at": "2020-05-20T20:33:25Z", "closed_at": "2020-05-20T18:52:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 1\r\n* Python version: 3.6\r\n* asyncpg version:\r\n* aiocontextvars version:\r\n* PostgreSQL version:\r\n\r\n![image](https://user-images.githubusercontent.com/44405438/82291996-6aefe300-99c3-11ea-9ade-c3ce3f13f1a0.png)\r\n![image](https://user-images.githubusercontent.com/44405438/82292383-3f212d00-99c4-11ea-947c-61bcb6f6daef.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/671", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/671/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/671/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/671/events", "html_url": "https://github.com/python-gino/gino/issues/671", "id": 618553912, "node_id": "MDU6SXNzdWU2MTg1NTM5MTI=", "number": 671, "title": "Is singular naming convention allowed for `__tablename__`?", "user": {"login": "danieljfarrell", "id": 112847, "node_id": "MDQ6VXNlcjExMjg0Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/112847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieljfarrell", "html_url": "https://github.com/danieljfarrell", "followers_url": "https://api.github.com/users/danieljfarrell/followers", "following_url": "https://api.github.com/users/danieljfarrell/following{/other_user}", "gists_url": "https://api.github.com/users/danieljfarrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieljfarrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieljfarrell/subscriptions", "organizations_url": "https://api.github.com/users/danieljfarrell/orgs", "repos_url": "https://api.github.com/users/danieljfarrell/repos", "events_url": "https://api.github.com/users/danieljfarrell/events{/privacy}", "received_events_url": "https://api.github.com/users/danieljfarrell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2001526820, "node_id": "MDU6TGFiZWwyMDAxNTI2ODIw", "url": "https://api.github.com/repos/python-gino/gino/labels/discussion", "name": "discussion", "color": "abf282", "default": false, "description": "A community discussion managed by the topic starter."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T21:43:34Z", "updated_at": "2020-05-15T06:06:56Z", "closed_at": "2020-05-15T06:06:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Description\r\n\r\nI'm trying to implement models with GINO and I came across the comment in the [documentation](https://python-gino.org/docs/en/master/tutorials/tutorial.html)\r\n\r\n> Note that the fixed __tablename__ property is required. GINO suggests singular for model names, and plural for table names. \r\n\r\nI am wondering why GINO suggests using this convention? Is it possible to use another convention without any side effects? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/670", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/670/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/670/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/670/events", "html_url": "https://github.com/python-gino/gino/issues/670", "id": 616528092, "node_id": "MDU6SXNzdWU2MTY1MjgwOTI=", "number": 670, "title": "Load balancer with Gino's create_engine", "user": {"login": "ThanVij29", "id": 65223950, "node_id": "MDQ6VXNlcjY1MjIzOTUw", "avatar_url": "https://avatars2.githubusercontent.com/u/65223950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThanVij29", "html_url": "https://github.com/ThanVij29", "followers_url": "https://api.github.com/users/ThanVij29/followers", "following_url": "https://api.github.com/users/ThanVij29/following{/other_user}", "gists_url": "https://api.github.com/users/ThanVij29/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThanVij29/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThanVij29/subscriptions", "organizations_url": "https://api.github.com/users/ThanVij29/orgs", "repos_url": "https://api.github.com/users/ThanVij29/repos", "events_url": "https://api.github.com/users/ThanVij29/events{/privacy}", "received_events_url": "https://api.github.com/users/ThanVij29/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-12T10:03:44Z", "updated_at": "2020-06-11T12:07:20Z", "closed_at": "2020-06-11T12:07:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\n* GINO version: 1.0.0\r\n* Gino-Starlette version: 0.1.1\r\n* FastAPI version: 0.54.1\r\n* Python version: 3.8.1\r\n* asyncpg version: 0.20.1\r\n* PostgreSQL version: PostgreSQL 12.1 \r\n\r\n### Description\r\n\r\nI want to use two different engines, depending on the Request method. If the request method is Get, it will use the engine which is connected with read only and for Put/Post/Patch/Delete, it will use the engine which is connected with admin user. My intention is to have a load balancer. I tried Fantix's suggestion here: https://github.com/python-gino/gino/issues/209#issuecomment-614862013.\r\nBut, once the first request is Get, we are not able to write anything for other Put/Post/Patch/Delete Request.\r\n\r\n### What I Did\r\nI tried different methods while using Fantix\u2019s suggestion:\r\n**1) First one with Gino\u2019s create_engine and acquire:**\r\n\r\nI initialized two engines on app startup:\r\n```\r\n engine_adm = await create_engine(DATABASE_URL, max_size=1, min_size=1)\r\n engine_ro = await create_engine(DATABASE_URL_RO, max_size=1, min_size=1)\r\n```\r\n\r\nThen edited the set_db_mode:\r\n\r\n```\r\n@app.middleware(\"http\")\r\nasync def set_db_mode(request: Request, call_next):\r\n    global e,engine_adm,engine_ro\r\n    engine = None\r\n    e = Future()\r\n    if request.method != 'GET':\r\n        engine = await engine_adm.acquire()\r\n    else:\r\n        engine = await engine_ro.acquire()\r\n    if e:    \r\n        e.set_result(engine)\r\n    try:\r\n        await e\r\n    finally:\r\n        current_connection = await engine.release()\r\n        e = current_connection\r\n    return await call_next(request)\r\n```\r\n\r\nI tested the api with Jmeter with the following configuration:\r\nRunned for : 20 min, Number of Threads (User) : 300, Ramp-up period (seconds) : 600\r\n\r\nI got this result:\r\n\r\n<img width=\"1141\" alt=\"Capture d\u2019e\u0301cran 2020-05-11 a\u0300 14 16 24\" src=\"https://user-images.githubusercontent.com/65223950/81670198-8f8a0f00-9447-11ea-85b3-3f0c0b5ed08b.png\">\r\n\r\n\r\n**2) Then I tried with SQLAlchemy\u2019s create_engine and connect (which is still used with Gino\u2019s db instance):**\r\n\r\nI initialized two engines on app startup:\r\n```\r\nengine_adm =  create_engine(DATABASE_URL,pool_size=1,max_overflow=0,poolclass=QueuePool)\r\nengine_ro =  create_engine(DATABASE_URL_RO,pool_size=1,max_overflow=0,poolclass=QueuePool)\r\n```\r\n\r\n\r\nThen I edited the set_db_mode:\r\n\r\n```\r\n@app.middleware(\"http\")\r\nasync def set_db_mode(request: Request, call_next):\r\n    global e,engine_adm,engine_ro\r\n    engine = None\r\n    if e is None:\r\n        e = Future()\r\n        if request.method != 'GET':\r\n            engine =  engine_adm.connect()\r\n        else:\r\n            engine =  engine_ro.connect()\r\n        e.set_result(engine)\r\n    try:\r\n        await e\r\n    finally:\r\n        current_connection = engine.close() if engine else None\r\n        e = current_connection\r\n    return await call_next(request)\r\n```\r\nI tested the api with Jmeter exactly with the same configuration:\r\n\r\n<img width=\"1028\" alt=\"Capture d\u2019e\u0301cran 2020-05-12 a\u0300 09 13 46\" src=\"https://user-images.githubusercontent.com/65223950/81670554-15a65580-9448-11ea-9e41-1575bac43b03.png\">\r\n\r\nAs we can see there is a huge difference. \r\n\r\nHave you got any suggestion to improve with Gino's create_engine?\r\nIf not, do you think its ok to use SQLAlchemy\u2019s create_engine? And will it have any impact on the asynchronism?\r\nOr is there any other way to do?\r\n\r\n\r\n\r\n\r\n \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/669", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/669/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/669/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/669/events", "html_url": "https://github.com/python-gino/gino/issues/669", "id": 616330225, "node_id": "MDU6SXNzdWU2MTYzMzAyMjU=", "number": 669, "title": "UniqueConstraint not added to table with alembic migration", "user": {"login": "makupi", "id": 11558177, "node_id": "MDQ6VXNlcjExNTU4MTc3", "avatar_url": "https://avatars1.githubusercontent.com/u/11558177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/makupi", "html_url": "https://github.com/makupi", "followers_url": "https://api.github.com/users/makupi/followers", "following_url": "https://api.github.com/users/makupi/following{/other_user}", "gists_url": "https://api.github.com/users/makupi/gists{/gist_id}", "starred_url": "https://api.github.com/users/makupi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/makupi/subscriptions", "organizations_url": "https://api.github.com/users/makupi/orgs", "repos_url": "https://api.github.com/users/makupi/repos", "events_url": "https://api.github.com/users/makupi/events{/privacy}", "received_events_url": "https://api.github.com/users/makupi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-12T03:27:33Z", "updated_at": "2020-05-13T00:38:39Z", "closed_at": "2020-05-13T00:38:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 1.0.0\r\n* Python version: 3.8.2\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 12.2\r\n\r\n### Description\r\n\r\nI tried to add a UniqueConstraint to my Model, when trying to migrate the database with alembic the UniqueConstraint was **not** added to postgreSQL.\r\n\r\n### What I Did\r\n\r\n```python\r\nclass User(db.Model):\r\n    __tablename__ = \"users\"\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.BIGINT)\r\n    guild_id = db.Column(db.BIGINT)\r\n    birthday = db.Column(db.Date)\r\n\r\n    db.UniqueConstraint(\"user_id\", \"guild_id\", name=\"guild_user\")\r\n```\r\n\r\n```\r\nadded UniqueConstraint to model\r\nalembic revision --autogenerate\r\nalembic upgrade head\r\n```\r\n\r\nAfter that I checked pgAdmin table properties > constraints > unique and it was empty.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/668", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/668/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/668/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/668/events", "html_url": "https://github.com/python-gino/gino/issues/668", "id": 615434613, "node_id": "MDU6SXNzdWU2MTU0MzQ2MTM=", "number": 668, "title": "[question] Tornado fork mode with Gino", "user": {"login": "flapili", "id": 29481952, "node_id": "MDQ6VXNlcjI5NDgxOTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/29481952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flapili", "html_url": "https://github.com/flapili", "followers_url": "https://api.github.com/users/flapili/followers", "following_url": "https://api.github.com/users/flapili/following{/other_user}", "gists_url": "https://api.github.com/users/flapili/gists{/gist_id}", "starred_url": "https://api.github.com/users/flapili/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flapili/subscriptions", "organizations_url": "https://api.github.com/users/flapili/orgs", "repos_url": "https://api.github.com/users/flapili/repos", "events_url": "https://api.github.com/users/flapili/events{/privacy}", "received_events_url": "https://api.github.com/users/flapili/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-10T17:09:48Z", "updated_at": "2020-05-17T05:22:52Z", "closed_at": "2020-05-17T05:22:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I am trying to create a REST API template based on Tornado and Gino and I would  like your opinion/expertise on the fork mode.\r\n\r\nis that likely to pose any problem?\r\nwhen should I fork ? after import models ? before the set_bind ? no matter ?\r\nwhat could be the side effect on the event loop ?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/666", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/666/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/666/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/666/events", "html_url": "https://github.com/python-gino/gino/issues/666", "id": 615074736, "node_id": "MDU6SXNzdWU2MTUwNzQ3MzY=", "number": 666, "title": "Do you have any plans to support SQL Server", "user": {"login": "xiaohuazi123", "id": 45115671, "node_id": "MDQ6VXNlcjQ1MTE1Njcx", "avatar_url": "https://avatars2.githubusercontent.com/u/45115671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaohuazi123", "html_url": "https://github.com/xiaohuazi123", "followers_url": "https://api.github.com/users/xiaohuazi123/followers", "following_url": "https://api.github.com/users/xiaohuazi123/following{/other_user}", "gists_url": "https://api.github.com/users/xiaohuazi123/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaohuazi123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaohuazi123/subscriptions", "organizations_url": "https://api.github.com/users/xiaohuazi123/orgs", "repos_url": "https://api.github.com/users/xiaohuazi123/repos", "events_url": "https://api.github.com/users/xiaohuazi123/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaohuazi123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-09T02:48:16Z", "updated_at": "2020-05-09T03:52:30Z", "closed_at": "2020-05-09T03:26:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version:\r\n* Python version:\r\n* asyncpg version:\r\n* aiocontextvars version:\r\n* PostgreSQL version:\r\n\r\n### Description\r\n\r\nDo you have any plans to support SQL Server  \r\nBecause our production environment database is Microsoft SQL Server, and we are now using sqlalchemy to develop database applications.\r\nThanks.\r\n### What I Did\r\n\r\n```\r\nPaste the command(s) you ran and the output.\r\nIf there was a crash, please include the traceback here.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/665", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/665/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/665/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/665/events", "html_url": "https://github.com/python-gino/gino/issues/665", "id": 614445788, "node_id": "MDU6SXNzdWU2MTQ0NDU3ODg=", "number": 665, "title": "module 'json' has no attribute 'JSONPathType'", "user": {"login": "beruhan", "id": 7598892, "node_id": "MDQ6VXNlcjc1OTg4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7598892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beruhan", "html_url": "https://github.com/beruhan", "followers_url": "https://api.github.com/users/beruhan/followers", "following_url": "https://api.github.com/users/beruhan/following{/other_user}", "gists_url": "https://api.github.com/users/beruhan/gists{/gist_id}", "starred_url": "https://api.github.com/users/beruhan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beruhan/subscriptions", "organizations_url": "https://api.github.com/users/beruhan/orgs", "repos_url": "https://api.github.com/users/beruhan/repos", "events_url": "https://api.github.com/users/beruhan/events{/privacy}", "received_events_url": "https://api.github.com/users/beruhan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779915, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTU=", "url": "https://api.github.com/repos/python-gino/gino/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": "Describes a bug in the system."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-gino/gino/milestones/5", "html_url": "https://github.com/python-gino/gino/milestone/5", "labels_url": "https://api.github.com/repos/python-gino/gino/milestones/5/labels", "id": 2741127, "node_id": "MDk6TWlsZXN0b25lMjc0MTEyNw==", "number": 5, "title": "GINO 1.0", "description": "GINO 1.0 was initially released in Apr 2020, now it is open for bug fixes and security updates.", "creator": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 7, "state": "open", "created_at": "2017-09-03T04:24:23Z", "updated_at": "2020-06-06T20:19:48Z", "due_on": null, "closed_at": null}, "comments": 5, "created_at": "2020-05-08T01:43:46Z", "updated_at": "2020-05-09T17:44:03Z", "closed_at": "2020-05-09T17:44:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 1.0.0\r\n* Python version: 3.6.4\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version:0.2.0\r\n* PostgreSQL version: 10.12\r\n\r\n### Description\r\n\r\nafter upgrading gnio to 1.0.0,the server can't start,and throwing the following execption:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Python36\\lib\\site-packages\\sanic\\app.py\", line 1167, in run\r\n    serve(**server_settings)\r\n  File \"C:\\Python36\\lib\\site-packages\\sanic\\server.py\", line 900, in serve\r\n    trigger_events(after_start, loop)\r\n  File \"C:\\Python36\\lib\\site-packages\\sanic\\server.py\", line 668, in trigger_events\r\n    loop.run_until_complete(result)\r\n  File \"C:\\Python36\\lib\\asyncio\\base_events.py\", line 467, in run_until_complete\r\n    return future.result()\r\n  File \"C:\\Python36\\lib\\site-packages\\gino_sanic.py\", line 123, in before_server_start\r\n    **app.config.setdefault(\"DB_KWARGS\", dict()),\r\n  File \"C:\\Python36\\lib\\site-packages\\gino_sanic.py\", line 138, in set_bind\r\n    return await super().set_bind(bind, loop=loop, **kwargs)\r\n  File \"C:\\Python36\\lib\\site-packages\\gino\\api.py\", line 417, in set_bind\r\n    bind = await create_engine(bind, loop=loop, **kwargs)\r\n  File \"C:\\Python36\\lib\\site-packages\\gino\\strategies.py\", line 33, in create\r\n    dialect_cls = u.get_dialect()\r\n  File \"C:\\Python36\\lib\\site-packages\\sqlalchemy\\engine\\url.py\", line 171, in get_dialect\r\n    entrypoint = self._get_entrypoint()\r\n  File \"C:\\Python36\\lib\\site-packages\\sqlalchemy\\engine\\url.py\", line 156, in _get_entrypoint\r\n    cls = registry.load(name)\r\n  File \"C:\\Python36\\lib\\site-packages\\sqlalchemy\\util\\langhelpers.py\", line 217, in load\r\n    return impl.load()\r\n  File \"C:\\Python36\\lib\\site-packages\\pkg_resources\\__init__.py\", line 2434, in load\r\n    return self.resolve()\r\n  File \"C:\\Python36\\lib\\site-packages\\pkg_resources\\__init__.py\", line 2440, in resolve\r\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\r\n  File \"C:\\Python36\\lib\\site-packages\\gino\\dialects\\asyncpg.py\", line 413, in <module>\r\n    class AsyncpgJSONPathType(json.JSONPathType):\r\nAttributeError: module 'json' has no attribute 'JSONPathType'\r\nTraceback (most recent call last):\r\n  File \"D:/work/project/vulsearch/app.py\", line 20, in <module>\r\n    app.run(host=\"0.0.0.0\", workers=workers, access_log=False, port=8000)\r\n  File \"C:\\Python36\\lib\\site-packages\\sanic\\app.py\", line 1167, in run\r\n    serve(**server_settings)\r\n  File \"C:\\Python36\\lib\\site-packages\\sanic\\server.py\", line 900, in serve\r\n    trigger_events(after_start, loop)\r\n  File \"C:\\Python36\\lib\\site-packages\\sanic\\server.py\", line 668, in trigger_events\r\n    loop.run_until_complete(result)\r\n  File \"C:\\Python36\\lib\\asyncio\\base_events.py\", line 467, in run_until_complete\r\n    return future.result()\r\n  File \"C:\\Python36\\lib\\site-packages\\gino_sanic.py\", line 123, in before_server_start\r\n    **app.config.setdefault(\"DB_KWARGS\", dict()),\r\n  File \"C:\\Python36\\lib\\site-packages\\gino_sanic.py\", line 138, in set_bind\r\n    return await super().set_bind(bind, loop=loop, **kwargs)\r\n  File \"C:\\Python36\\lib\\site-packages\\gino\\api.py\", line 417, in set_bind\r\n    bind = await create_engine(bind, loop=loop, **kwargs)\r\n  File \"C:\\Python36\\lib\\site-packages\\gino\\strategies.py\", line 33, in create\r\n    dialect_cls = u.get_dialect()\r\n  File \"C:\\Python36\\lib\\site-packages\\sqlalchemy\\engine\\url.py\", line 171, in get_dialect\r\n    entrypoint = self._get_entrypoint()\r\n  File \"C:\\Python36\\lib\\site-packages\\sqlalchemy\\engine\\url.py\", line 156, in _get_entrypoint\r\n    cls = registry.load(name)\r\n  File \"C:\\Python36\\lib\\site-packages\\sqlalchemy\\util\\langhelpers.py\", line 217, in load\r\n    return impl.load()\r\n  File \"C:\\Python36\\lib\\site-packages\\pkg_resources\\__init__.py\", line 2434, in load\r\n    return self.resolve()\r\n  File \"C:\\Python36\\lib\\site-packages\\pkg_resources\\__init__.py\", line 2440, in resolve\r\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\r\n  File \"C:\\Python36\\lib\\site-packages\\gino\\dialects\\asyncpg.py\", line 413, in <module>\r\n    class AsyncpgJSONPathType(json.JSONPathType):\r\nAttributeError: module 'json' has no attribute 'JSONPathType'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/664", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/664/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/664/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/664/events", "html_url": "https://github.com/python-gino/gino/issues/664", "id": 611438209, "node_id": "MDU6SXNzdWU2MTE0MzgyMDk=", "number": 664, "title": "Website is severely broken", "user": {"login": "retnikt", "id": 24581770, "node_id": "MDQ6VXNlcjI0NTgxNzcw", "avatar_url": "https://avatars1.githubusercontent.com/u/24581770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retnikt", "html_url": "https://github.com/retnikt", "followers_url": "https://api.github.com/users/retnikt/followers", "following_url": "https://api.github.com/users/retnikt/following{/other_user}", "gists_url": "https://api.github.com/users/retnikt/gists{/gist_id}", "starred_url": "https://api.github.com/users/retnikt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retnikt/subscriptions", "organizations_url": "https://api.github.com/users/retnikt/orgs", "repos_url": "https://api.github.com/users/retnikt/repos", "events_url": "https://api.github.com/users/retnikt/events{/privacy}", "received_events_url": "https://api.github.com/users/retnikt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 652419910, "node_id": "MDU6TGFiZWw2NTI0MTk5MTA=", "url": "https://api.github.com/repos/python-gino/gino/labels/task", "name": "task", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-03T15:25:52Z", "updated_at": "2020-05-19T04:22:39Z", "closed_at": "2020-05-19T04:22:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Description\r\n\r\nThe python-gino.org website is severely broken when you resize the browser window. I thought you might like to know. Happens in both latest Firefox and Chrome. See screenshot.\r\n\r\n![Screenshot_2020-05-03 python-gino org](https://user-images.githubusercontent.com/24581770/80918003-8966a500-8d5a-11ea-9bba-349269f62da8.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/663", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/663/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/663/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/663/events", "html_url": "https://github.com/python-gino/gino/issues/663", "id": 611373912, "node_id": "MDU6SXNzdWU2MTEzNzM5MTI=", "number": 663, "title": "Using Gino with CockroachDB", "user": {"login": "snguyenthanh", "id": 35214933, "node_id": "MDQ6VXNlcjM1MjE0OTMz", "avatar_url": "https://avatars3.githubusercontent.com/u/35214933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snguyenthanh", "html_url": "https://github.com/snguyenthanh", "followers_url": "https://api.github.com/users/snguyenthanh/followers", "following_url": "https://api.github.com/users/snguyenthanh/following{/other_user}", "gists_url": "https://api.github.com/users/snguyenthanh/gists{/gist_id}", "starred_url": "https://api.github.com/users/snguyenthanh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snguyenthanh/subscriptions", "organizations_url": "https://api.github.com/users/snguyenthanh/orgs", "repos_url": "https://api.github.com/users/snguyenthanh/repos", "events_url": "https://api.github.com/users/snguyenthanh/events{/privacy}", "received_events_url": "https://api.github.com/users/snguyenthanh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-03T09:50:08Z", "updated_at": "2020-05-04T15:06:36Z", "closed_at": "2020-05-04T14:56:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 1.0.0\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version: 0.2.2\r\n* CockroachDB version: 19.2.6\r\n\r\n### Description\r\n\r\nI'm using `Gino` as a PostgreSQL driver for `CockroachDB`. It works well for `GET` queries but fail for `INSERT`. According to the [docs](https://python-gino.org/docs/en/master/tutorials/tutorial.html#create), calling the function `<model>.create()` will execute a SQL query of `INSERT INTO ... `. However, it seems some other SQL queries are also executed. A `PostgreSQL` query seems to not be supported in `CockroachDB` yet, raising an error.\r\n\r\nMay I ask how I could resolve this ?\r\n\r\n### What I Did\r\n\r\nOn creating a new row, there is an error raised regarding a non-implemented feature of `CockroachDB` in `asyncpg`:\r\n\r\n```\r\nINFO:     INSERT INTO image (id, s3_bucket, s3_key, formats, sizes, created_at) VALUES ($1, $2, $3, $4, $5, $6) RETURNING image.id, image.s3_bucket, image.s3_key, image.formats, image.sizes, image.created_at\r\nINFO:     ('2941f3a0-e2ea-4d9d-8e23-2ce7b793bcac', 'testbucket', 'iqEb1mDimiUpRsmG', ['jpeg'], [], 1588471074)\r\nINFO:     COMMIT\r\nERROR:    Exception in ASGI application\r\nTraceback (most recent call last):\r\n...\r\n    created_obj = await cls(**kwargs).create()\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/gino/crud.py\", line 485, in _create\r\n    row = await bind.first(q)\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/gino/engine.py\", line 748, in first\r\n    return await conn.first(clause, *multiparams, **params)\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/gino/engine.py\", line 328, in first\r\n    return await result.execute(one=True)\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/gino/dialects/base.py\", line 215, in execute\r\n    context.statement, context.timeout, args, 1 if one else 0\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py\", line 184, in async_execute\r\n    result, stmt = await getattr(conn, \"_do_execute\")(query, executor, timeout)\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 1423, in _do_execute\r\n    stmt = await self._get_statement(query, None)\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 338, in _get_statement\r\n    types_with_missing_codecs, timeout)\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 378, in _introspect_types\r\n    self._intro_query, (list(typeoids),), 0, timeout)\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 1411, in __execute\r\n    return await self._do_execute(query, executor, timeout)\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 1423, in _do_execute\r\n    stmt = await self._get_statement(query, None)\r\n  File \"/Users/son/Library/Caches/pypoetry/virtualenvs/project-rain-7LNSaARJ-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 328, in _get_statement\r\n    statement = await self._protocol.prepare(stmt_name, query, timeout)\r\n  File \"asyncpg/protocol/protocol.pyx\", line 163, in prepare\r\nasyncpg.exceptions.FeatureNotSupportedError: at or near \"select\": syntax error: unimplemented: this syntax\r\nDETAIL:  source SQL:\r\nWITH RECURSIVE typeinfo_tree(\r\n    oid, ns, name, kind, basetype, has_bin_io, elemtype, elemdelim,\r\n    range_subtype, elem_has_bin_io, attrtypoids, attrnames, depth)\r\nAS (\r\n    SELECT\r\n        ti.oid, ti.ns, ti.name, ti.kind, ti.basetype, ti.has_bin_io,\r\n        ti.elemtype, ti.elemdelim, ti.range_subtype, ti.elem_has_bin_io,\r\n        ti.attrtypoids, ti.attrnames, 0\r\n    FROM\r\n            (\r\n        SELECT\r\n            t.oid                           AS oid,\r\n            ns.nspname                      AS ns,\r\n            t.typname                       AS name,\r\n            t.typtype                       AS kind,\r\n            (CASE WHEN t.typtype = 'd' THEN\r\n                (WITH RECURSIVE typebases(oid, depth) AS (\r\n                    SELECT\r\n                        t2.typbasetype      AS oid,\r\n                        0                   AS depth\r\n                    FROM\r\n                        pg_type t2\r\n                    WHERE\r\n                        t2.oid = t.oid\r\n\r\n                    UNION ALL\r\n\r\n                    SELECT\r\n                        t2.typbasetype      AS oid,\r\n                        tb.depth + 1        AS depth\r\n                    FROM\r\n                        pg_type t2,\r\n                        typebases tb\r\n                    WHERE\r\n                       tb.oid = t2.oid\r\n                       AND t2.typbasetype != 0\r\n               ) SELECT oid FROM typebases ORDER BY depth DESC LIMIT 1)\r\n                 ^\r\nHINT:  You have attempted to use a feature that is not yet implemented.\r\nSee: https://github.com/cockroachdb/cockroach/issues/21085\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/661", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/661/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/661/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/661/events", "html_url": "https://github.com/python-gino/gino/issues/661", "id": 611111709, "node_id": "MDU6SXNzdWU2MTExMTE3MDk=", "number": 661, "title": "Better error message when \"prop_name\" is not specified for a JSON column", "user": {"login": "zain", "id": 4229, "node_id": "MDQ6VXNlcjQyMjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zain", "html_url": "https://github.com/zain", "followers_url": "https://api.github.com/users/zain/followers", "following_url": "https://api.github.com/users/zain/following{/other_user}", "gists_url": "https://api.github.com/users/zain/gists{/gist_id}", "starred_url": "https://api.github.com/users/zain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zain/subscriptions", "organizations_url": "https://api.github.com/users/zain/orgs", "repos_url": "https://api.github.com/users/zain/repos", "events_url": "https://api.github.com/users/zain/events{/privacy}", "received_events_url": "https://api.github.com/users/zain/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779917, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTc=", "url": "https://api.github.com/repos/python-gino/gino/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-gino/gino/milestones/5", "html_url": "https://github.com/python-gino/gino/milestone/5", "labels_url": "https://api.github.com/repos/python-gino/gino/milestones/5/labels", "id": 2741127, "node_id": "MDk6TWlsZXN0b25lMjc0MTEyNw==", "number": 5, "title": "GINO 1.0", "description": "GINO 1.0 was initially released in Apr 2020, now it is open for bug fixes and security updates.", "creator": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 7, "state": "open", "created_at": "2017-09-03T04:24:23Z", "updated_at": "2020-06-06T20:19:48Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2020-05-02T05:27:36Z", "updated_at": "2020-05-06T19:42:55Z", "closed_at": "2020-05-04T16:08:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom gino.dialects.asyncpg import JSONB\r\nfrom myproject.main import db\r\n\r\nclass MyModel(db.Model):\r\n    __tablename__ = \"models\"\r\n\r\n    id = db.Column(db.BigInteger(), primary_key=True)\r\n    profile_json = db.Column(JSONB(), nullable=False, server_default=\"{}\")\r\n\r\n    profile = db.JSONProperty()\r\n```\r\n\r\nThis causes the error:\r\n\r\n```\r\n...\r\n    exp = self.make_expression(getattr(owner, self.prop_name)[self.name])\r\n  [Previous line repeated 312 more times]\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n```\r\n\r\nThe fix is to add `prop_name='profile_json'` to the `JSONProperty()` declaration, but without docs and an error message, it is hard to know that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/648", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/648/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/648/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/648/events", "html_url": "https://github.com/python-gino/gino/issues/648", "id": 594309688, "node_id": "MDU6SXNzdWU1OTQzMDk2ODg=", "number": 648, "title": "sssssssssssssssssssssssssss", "user": {"login": "reinoldus", "id": 2091290, "node_id": "MDQ6VXNlcjIwOTEyOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2091290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reinoldus", "html_url": "https://github.com/reinoldus", "followers_url": "https://api.github.com/users/reinoldus/followers", "following_url": "https://api.github.com/users/reinoldus/following{/other_user}", "gists_url": "https://api.github.com/users/reinoldus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reinoldus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reinoldus/subscriptions", "organizations_url": "https://api.github.com/users/reinoldus/orgs", "repos_url": "https://api.github.com/users/reinoldus/repos", "events_url": "https://api.github.com/users/reinoldus/events{/privacy}", "received_events_url": "https://api.github.com/users/reinoldus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-05T07:33:51Z", "updated_at": "2020-04-05T15:52:15Z", "closed_at": "2020-04-05T07:34:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version:\r\n* Python version:\r\n* asyncpg version:\r\n* aiocontextvars version:\r\n* PostgreSQL version:\r\n\r\n### Description\r\n\r\nDescribe what you were trying to get done.\r\nTell us what happened, what went wrong, and what you expected to happen.\r\n\r\n### What I Did\r\n\r\n```\r\nPaste the command(s) you ran and the output.\r\nIf there was a crash, please include the traceback here.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/637", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/637/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/637/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/637/events", "html_url": "https://github.com/python-gino/gino/issues/637", "id": 584872723, "node_id": "MDU6SXNzdWU1ODQ4NzI3MjM=", "number": 637, "title": "Clarify JsonProperty unknown field exception", "user": {"login": "Reskov", "id": 4832451, "node_id": "MDQ6VXNlcjQ4MzI0NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4832451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Reskov", "html_url": "https://github.com/Reskov", "followers_url": "https://api.github.com/users/Reskov/followers", "following_url": "https://api.github.com/users/Reskov/following{/other_user}", "gists_url": "https://api.github.com/users/Reskov/gists{/gist_id}", "starred_url": "https://api.github.com/users/Reskov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Reskov/subscriptions", "organizations_url": "https://api.github.com/users/Reskov/orgs", "repos_url": "https://api.github.com/users/Reskov/repos", "events_url": "https://api.github.com/users/Reskov/events{/privacy}", "received_events_url": "https://api.github.com/users/Reskov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779917, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTc=", "url": "https://api.github.com/repos/python-gino/gino/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-20T06:39:29Z", "updated_at": "2020-03-28T20:22:09Z", "closed_at": "2020-03-28T20:20:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 1.0.0rc2\r\n* Python version: 3.8.1\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version:\r\n* PostgreSQL version: 11.6\r\n\r\n### Description\r\n `JsonProperty.get_profile` method raises unclear `AttributeError` exception when models attribute name collides with JsonProperty\r\n```\r\n  instance.__profile__[key] = prop.decode(value)\r\nE               AttributeError: 'ColumnAttribute' object has no attribute 'decode'\r\n```\r\n\r\n\r\n\r\n### What I Did\r\n\r\n```python\r\n\r\nclass PropsTest2(db.Model):\r\n    __tablename__ = \"props_test2\"\r\n    profile = db.Column(JSONB(), nullable=False, server_default=\"{}\")\r\n    bool_profile = db.BooleanProperty()\r\n    bool_attr = db.Column(db.Boolean)\r\n   \r\nawait PropsTest2.create(\r\n    profile={\"bool_attr\": False, \"bool_profile\": True}, bool_attr=True\r\n)\r\n# bool_attr is defined in the model\r\n# bool_profile is defined as json property\r\nt2 = await PropsTest2.query.gino.first()\r\n\r\nassert t2.bool_attr is True\r\n# raises attribute error described above about `bool_attr`\r\nassert t2.bool_profile is True\r\n\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/636", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/636/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/636/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/636/events", "html_url": "https://github.com/python-gino/gino/issues/636", "id": 578655657, "node_id": "MDU6SXNzdWU1Nzg2NTU2NTc=", "number": 636, "title": "Query Filters, Pagination and Sorting", "user": {"login": "Psykepro", "id": 10800144, "node_id": "MDQ6VXNlcjEwODAwMTQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/10800144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Psykepro", "html_url": "https://github.com/Psykepro", "followers_url": "https://api.github.com/users/Psykepro/followers", "following_url": "https://api.github.com/users/Psykepro/following{/other_user}", "gists_url": "https://api.github.com/users/Psykepro/gists{/gist_id}", "starred_url": "https://api.github.com/users/Psykepro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Psykepro/subscriptions", "organizations_url": "https://api.github.com/users/Psykepro/orgs", "repos_url": "https://api.github.com/users/Psykepro/repos", "events_url": "https://api.github.com/users/Psykepro/events{/privacy}", "received_events_url": "https://api.github.com/users/Psykepro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-10T15:15:23Z", "updated_at": "2020-03-11T12:30:41Z", "closed_at": "2020-03-11T12:30:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.6\r\n* Python version: 3.7.0\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11\r\n\r\n### Description\r\n\r\nI'm trying to find solution in **Gino** for **filtering**, **pagination**, and **sorting**. Like this one which is for **SQL Alchemy**:\r\n[sqlalchemy-filters](https://pypi.org/project/sqlalchemy-filters/) \r\n\r\nI know that **GINO** isn't working with the **sqlalchemy.orm** part. But I wanna ask if there is some way to adapt it to work with **GINO** or is there any similar solution for it?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/635", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/635/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/635/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/635/events", "html_url": "https://github.com/python-gino/gino/issues/635", "id": 576890326, "node_id": "MDU6SXNzdWU1NzY4OTAzMjY=", "number": 635, "title": "Database Connection per Schema", "user": {"login": "shsimeonova", "id": 19411274, "node_id": "MDQ6VXNlcjE5NDExMjc0", "avatar_url": "https://avatars0.githubusercontent.com/u/19411274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shsimeonova", "html_url": "https://github.com/shsimeonova", "followers_url": "https://api.github.com/users/shsimeonova/followers", "following_url": "https://api.github.com/users/shsimeonova/following{/other_user}", "gists_url": "https://api.github.com/users/shsimeonova/gists{/gist_id}", "starred_url": "https://api.github.com/users/shsimeonova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shsimeonova/subscriptions", "organizations_url": "https://api.github.com/users/shsimeonova/orgs", "repos_url": "https://api.github.com/users/shsimeonova/repos", "events_url": "https://api.github.com/users/shsimeonova/events{/privacy}", "received_events_url": "https://api.github.com/users/shsimeonova/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-06T12:06:33Z", "updated_at": "2020-04-20T23:07:00Z", "closed_at": "2020-04-20T23:06:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.6\r\n* Python version: 3.7.0\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11 \r\n\r\n### Description\r\n\r\nWe're trying to implement our database logic to be a single connection to a schema in a database, meaning that we use schemas as databases themselves to maintain our connection pool. We need this since we don't want to connect to different databases as this affects our performance, but we still need to separate the information between different schemas as its client specific.\r\n\r\nCurrently we are doing this for each new request (because each request could be related to a different client and we need to set a new client schema):\r\n```\r\nasync def adjust_schemas(self):\r\n        \"\"\"Adjust schemas on all model tables.\"\"\"\r\n\r\n        for table_name, table_dict in self.__db.tables.items():\r\n            table_dict.schema = self.__schema\r\n```\r\nbut most probably you can already guess that this messes up with requests that have still not finished giving a response, since the schema could change from a different request and data would go into the wrong client schema.\r\n\r\nWe can't find any straightforward solution for this. Do you think we can achieve this with Gino?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/634", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/634/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/634/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/634/events", "html_url": "https://github.com/python-gino/gino/issues/634", "id": 576055847, "node_id": "MDU6SXNzdWU1NzYwNTU4NDc=", "number": 634, "title": "Crashes while performing asyncio.gather tasks", "user": {"login": "myraygunbarrel", "id": 37983952, "node_id": "MDQ6VXNlcjM3OTgzOTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/37983952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myraygunbarrel", "html_url": "https://github.com/myraygunbarrel", "followers_url": "https://api.github.com/users/myraygunbarrel/followers", "following_url": "https://api.github.com/users/myraygunbarrel/following{/other_user}", "gists_url": "https://api.github.com/users/myraygunbarrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/myraygunbarrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myraygunbarrel/subscriptions", "organizations_url": "https://api.github.com/users/myraygunbarrel/orgs", "repos_url": "https://api.github.com/users/myraygunbarrel/repos", "events_url": "https://api.github.com/users/myraygunbarrel/events{/privacy}", "received_events_url": "https://api.github.com/users/myraygunbarrel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-05T07:47:17Z", "updated_at": "2020-03-06T16:09:59Z", "closed_at": "2020-03-06T15:09:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.6\r\n* Python version: 3.8\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 12.2\r\n\r\n### Description\r\nHere is a minimal FastApi+gino service:\r\n\r\n```python\r\nimport asyncio\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI\r\nfrom gino.ext.starlette import Gino\r\n\r\nDATABASE_CONFIG = {\r\n    'user': 'django',\r\n    'database': 'django',\r\n    'host': 'localhost',\r\n    'port': 6432,\r\n    'password': 'django'\r\n}\r\n\r\ndb = Gino(None, **DATABASE_CONFIG)\r\napp = FastAPI()\r\ndb.init_app(app)\r\n\r\n\r\n@app.get(\"/\")\r\nasync def root():\r\n    tasks = [db.scalar('SELECT now()') for i in range(5)]\r\n    result = await asyncio.gather(*tasks)\r\n    print(result)\r\n    return {\"message\": 'OK'}\r\n\r\n\r\nif __name__ == '__main__':\r\n    uvicorn.run(\r\n        'snippet:app',\r\n        host='localhost',\r\n        port=9090,\r\n        reload=True,\r\n        debug=True\r\n    )\r\n```\r\n\r\n### What I Did\r\n\r\nI try to run several queries concurrently, but get this error:  \r\n```\r\nINFO:     SELECT now()\r\nINFO:     ()\r\nINFO:     SELECT now()\r\nINFO:     ()\r\nINFO:     SELECT now()\r\nINFO:     ()\r\nINFO:     SELECT now()\r\nINFO:     ()\r\nINFO:     SELECT now()\r\nINFO:     ()\r\nERROR:    Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/uvicorn/middleware/debug.py\", line 81, in __call__\r\n    raise exc from None\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/uvicorn/middleware/debug.py\", line 78, in __call__\r\n    await self.app(scope, receive, inner_send)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/fastapi/applications.py\", line 140, in __call__\r\n    await super().__call__(scope, receive, send)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/starlette/applications.py\", line 134, in __call__\r\n    await self.error_middleware(scope, receive, send)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 178, in __call__\r\n    raise exc from None\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 156, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/gino/ext/starlette.py\", line 80, in __call__\r\n    await conn.release()\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/gino/engine.py\", line 276, in release\r\n    await dbapi_conn.release(True)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/gino/engine.py\", line 44, in release\r\n    return await self._release()\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/gino/engine.py\", line 80, in _release\r\n    await self._pool.release(conn)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/gino/dialects/asyncpg.py\", line 227, in release\r\n    await self._pool.release(conn)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/asyncpg/pool.py\", line 654, in release\r\n    return await asyncio.shield(ch.release(timeout))\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/asyncpg/pool.py\", line 216, in release\r\n    raise ex\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/asyncpg/pool.py\", line 206, in release\r\n    await self._con.reset(timeout=budget)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/asyncpg/connection.py\", line 1114, in reset\r\n    await self.execute(reset_query, timeout=timeout)\r\n  File \"/Users/ruslan/telemetry/venv/lib/python3.8/site-packages/asyncpg/connection.py\", line 272, in execute\r\n    return await self._protocol.query(query, timeout)\r\n  File \"asyncpg/protocol/protocol.pyx\", line 301, in query\r\n  File \"asyncpg/protocol/protocol.pyx\", line 664, in asyncpg.protocol.protocol.BaseProtocol._check_state\r\nasyncpg.exceptions._base.InterfaceError: cannot perform operation: another operation is in progress\r\n```\r\n\r\nAre there any tricks to perform such operations in a proper way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/633", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/633/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/633/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/633/events", "html_url": "https://github.com/python-gino/gino/issues/633", "id": 572212842, "node_id": "MDU6SXNzdWU1NzIyMTI4NDI=", "number": 633, "title": "Transaction questions", "user": {"login": "xmrdsc", "id": 1478325, "node_id": "MDQ6VXNlcjE0NzgzMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1478325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xmrdsc", "html_url": "https://github.com/xmrdsc", "followers_url": "https://api.github.com/users/xmrdsc/followers", "following_url": "https://api.github.com/users/xmrdsc/following{/other_user}", "gists_url": "https://api.github.com/users/xmrdsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/xmrdsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xmrdsc/subscriptions", "organizations_url": "https://api.github.com/users/xmrdsc/orgs", "repos_url": "https://api.github.com/users/xmrdsc/repos", "events_url": "https://api.github.com/users/xmrdsc/events{/privacy}", "received_events_url": "https://api.github.com/users/xmrdsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-27T16:49:04Z", "updated_at": "2020-02-27T17:18:42Z", "closed_at": "2020-02-27T17:08:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "First question is; does Gino's CRUD operations work within transactions?\r\n\r\nSay I have this:\r\n\r\n```python3\r\nimport asyncio\r\nfrom gino import Gino\r\n\r\ndb = Gino()\r\n\r\nclass Test(db.Model):\r\n    __tablename__ = 'test'\r\n    id = db.Column(db.String, primary_key=True)\r\n\r\n\r\nasync def test():\r\n    await db.set_bind('postgresql://test:test@localhost:5432/gino')\r\n    foo = await Test.create(id='before')\r\n    async with db.transaction():\r\n        status = await (\r\n            foo.update\r\n            .where(Test.id == \"before\")\r\n            .values(id=\"after\")\r\n            .gino.status()\r\n        )\r\n\r\nif __name__ == '__main__':\r\n    asyncio.ensure_future(test())\r\n    asyncio.get_event_loop().run_until_complete(test())\r\n```\r\n\r\nI read [somewhere else](https://github.com/python-gino/gino/issues/228#issuecomment-391581219) on this issue tracker that `apply()` needs to be given a `bind=tx.connection` parameter, [even though in the testing suite](https://github.com/python-gino/gino/blob/ef1d9826f29540ef4a2756dfa05d046386a96689/tests/test_transaction.py#L27) it does not use this parameter.\r\n\r\nShould I be using `apply()` on my `.update()` queries? If so, should I pass it the connection?\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/632", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/632/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/632/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/632/events", "html_url": "https://github.com/python-gino/gino/issues/632", "id": 566219056, "node_id": "MDU6SXNzdWU1NjYyMTkwNTY=", "number": 632, "title": "[question] how manage alter with Gino", "user": {"login": "flapili", "id": 29481952, "node_id": "MDQ6VXNlcjI5NDgxOTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/29481952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flapili", "html_url": "https://github.com/flapili", "followers_url": "https://api.github.com/users/flapili/followers", "following_url": "https://api.github.com/users/flapili/following{/other_user}", "gists_url": "https://api.github.com/users/flapili/gists{/gist_id}", "starred_url": "https://api.github.com/users/flapili/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flapili/subscriptions", "organizations_url": "https://api.github.com/users/flapili/orgs", "repos_url": "https://api.github.com/users/flapili/repos", "events_url": "https://api.github.com/users/flapili/events{/privacy}", "received_events_url": "https://api.github.com/users/flapili/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-17T10:56:03Z", "updated_at": "2020-04-20T23:04:32Z", "closed_at": "2020-04-20T23:04:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.5\r\n* Python version: 3.8.1\r\n* asyncpg version: 0.20.1\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11\r\n\r\n### Description\r\nI created a table `test` to see if alter are manager by Gino,\r\n```\r\nclass Test(db.Model):\r\n\t__tablename__ = \"test\"\r\n\r\n\tid = db.Column(db.Integer(), primary_key=True)\r\n\tfoo = db.Column(db.Integer())\r\n\r\nasync def main():\r\n\tawait db.set_bind(\"postgresql://test:test@localhost/test\")\r\n\tawait db.gino.create_all()\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(main())\r\n```\r\nthe table is created successfully but I'm thinking about if it's possible to avoid \"migration/upgrade script\" or at least avoid an alter part, like \r\n```\r\nclass Test(db.Model):\r\n\t__tablename__ = \"test\"\r\n\r\n\tid = db.Column(db.Integer(), primary_key=True)\r\n\tfoo = db.Column(db.Integer())\r\n\tbar = db.Column(db.Integer())\r\n```\r\n\r\nwill automatically altert the table (btw in this case it should raise exception because there is no default value or nullable=True)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/628", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/628/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/628/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/628/events", "html_url": "https://github.com/python-gino/gino/issues/628", "id": 548660021, "node_id": "MDU6SXNzdWU1NDg2NjAwMjE=", "number": 628, "title": "How to get QA query with gino loaders?", "user": {"login": "dulex123", "id": 2333381, "node_id": "MDQ6VXNlcjIzMzMzODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2333381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dulex123", "html_url": "https://github.com/dulex123", "followers_url": "https://api.github.com/users/dulex123/followers", "following_url": "https://api.github.com/users/dulex123/following{/other_user}", "gists_url": "https://api.github.com/users/dulex123/gists{/gist_id}", "starred_url": "https://api.github.com/users/dulex123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dulex123/subscriptions", "organizations_url": "https://api.github.com/users/dulex123/orgs", "repos_url": "https://api.github.com/users/dulex123/repos", "events_url": "https://api.github.com/users/dulex123/events{/privacy}", "received_events_url": "https://api.github.com/users/dulex123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-13T01:18:29Z", "updated_at": "2020-02-05T20:46:29Z", "closed_at": "2020-02-05T20:46:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello I am trying to create a query and loader scheme that will return list of Questions with their respective comments for a QA website.\r\n\r\nI have three classes:\r\nclass Question, class Comment, class Author\r\n\r\nBoth question and comment can have author from the same table. I am having trouble of coming up with a query on how to get all questions with authors and their respective comments with authors with loader system?( and outerjoins for query I guess)\r\n\r\nSuch that I have Question with property Author and children Comments (and comments have their own author property).\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/627", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/627/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/627/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/627/events", "html_url": "https://github.com/python-gino/gino/issues/627", "id": 548533504, "node_id": "MDU6SXNzdWU1NDg1MzM1MDQ=", "number": 627, "title": "Does it have postgis support?", "user": {"login": "marcojulioarg", "id": 11341835, "node_id": "MDQ6VXNlcjExMzQxODM1", "avatar_url": "https://avatars3.githubusercontent.com/u/11341835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcojulioarg", "html_url": "https://github.com/marcojulioarg", "followers_url": "https://api.github.com/users/marcojulioarg/followers", "following_url": "https://api.github.com/users/marcojulioarg/following{/other_user}", "gists_url": "https://api.github.com/users/marcojulioarg/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcojulioarg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcojulioarg/subscriptions", "organizations_url": "https://api.github.com/users/marcojulioarg/orgs", "repos_url": "https://api.github.com/users/marcojulioarg/repos", "events_url": "https://api.github.com/users/marcojulioarg/events{/privacy}", "received_events_url": "https://api.github.com/users/marcojulioarg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-12T07:29:05Z", "updated_at": "2020-06-08T10:43:40Z", "closed_at": "2020-04-19T02:53:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nI want to build an async GIS application, is postgis or geospatial supported?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/626", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/626/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/626/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/626/events", "html_url": "https://github.com/python-gino/gino/issues/626", "id": 547828881, "node_id": "MDU6SXNzdWU1NDc4Mjg4ODE=", "number": 626, "title": "can't query data under Sanic service", "user": {"login": "sunshineinwater", "id": 15187861, "node_id": "MDQ6VXNlcjE1MTg3ODYx", "avatar_url": "https://avatars0.githubusercontent.com/u/15187861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunshineinwater", "html_url": "https://github.com/sunshineinwater", "followers_url": "https://api.github.com/users/sunshineinwater/followers", "following_url": "https://api.github.com/users/sunshineinwater/following{/other_user}", "gists_url": "https://api.github.com/users/sunshineinwater/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunshineinwater/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunshineinwater/subscriptions", "organizations_url": "https://api.github.com/users/sunshineinwater/orgs", "repos_url": "https://api.github.com/users/sunshineinwater/repos", "events_url": "https://api.github.com/users/sunshineinwater/events{/privacy}", "received_events_url": "https://api.github.com/users/sunshineinwater/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-10T02:27:34Z", "updated_at": "2020-01-11T01:41:08Z", "closed_at": "2020-01-10T07:16:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry for disturb again.\r\n\r\n### Description\r\n\r\n- situation:\r\nIt works well in clean environment . But It have problem under Sanic service.\r\n\r\n- error information:\r\n\r\nasyncpg.exceptions._base.InterfaceError: cannot perform operation: another operation is in progress\r\n\r\n### Full Code demo\r\n\r\n```python\r\nfrom gino import Gino\r\nfrom sanic import response, Sanic\r\nfrom asyncio import get_event_loop\r\n\r\n'''\r\n#\r\n#   Gino\r\n#\r\n'''\r\nurl = \"postgresql://postgres:postgres@localhost:5432/postgresql\"\r\ndb = Gino()\r\nget_event_loop().run_until_complete(db.set_bind(bind=url))\r\n\r\n\r\n# define Model\r\nclass userTable(db.Model):\r\n    # \r\n    __tablename__ = 'userTable'\r\n    #\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    account_id = db.Column(db.String(40), unique=True, index=True)\r\n    phone = db.Column(db.String(20))\r\n    password_hash = db.Column(db.String(128))\r\n\r\n\r\n# test Query data\r\ndata = get_event_loop().run_until_complete(userTable.get(9))\r\nprint(data.account_id)  # It works well\r\n\r\n'''\r\n#\r\n#   sanic + gino\r\n#\r\n'''\r\n\r\napp = Sanic(name=__name__)\r\n\r\n\r\n@app.route(\"/\", methods=[\"GET\"])\r\nasync def test(request):\r\n    data = await userTable.get(9)\r\n    print(data)\r\n    return response.text(\"ok\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True, port=80, host='0.0.0.0', workers=1)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/625", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/625/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/625/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/625/events", "html_url": "https://github.com/python-gino/gino/issues/625", "id": 547815507, "node_id": "MDU6SXNzdWU1NDc4MTU1MDc=", "number": 625, "title": "query data failure", "user": {"login": "sunshineinwater", "id": 15187861, "node_id": "MDQ6VXNlcjE1MTg3ODYx", "avatar_url": "https://avatars0.githubusercontent.com/u/15187861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunshineinwater", "html_url": "https://github.com/sunshineinwater", "followers_url": "https://api.github.com/users/sunshineinwater/followers", "following_url": "https://api.github.com/users/sunshineinwater/following{/other_user}", "gists_url": "https://api.github.com/users/sunshineinwater/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunshineinwater/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunshineinwater/subscriptions", "organizations_url": "https://api.github.com/users/sunshineinwater/orgs", "repos_url": "https://api.github.com/users/sunshineinwater/repos", "events_url": "https://api.github.com/users/sunshineinwater/events{/privacy}", "received_events_url": "https://api.github.com/users/sunshineinwater/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-10T01:34:17Z", "updated_at": "2020-01-10T01:47:45Z", "closed_at": "2020-01-10T01:38:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version:0.8.5\r\n* Python version:3.7\r\n* asyncpg version:0.20.0\r\n* aiocontextvars version:0.2.2\r\n* PostgreSQL version:\r\n\r\n### Description\r\nshows:\r\n.......\r\n........\r\n  File \"/Users/......./venv/lib/python3.7/site-packages/gino/api.py\", line 136, in first\r\n    return await self._query.bind.first(self._query, *multiparams, \"AttributeError: 'str' object has no attribute 'first'\"\r\n\r\n### Code demo\r\n\r\n- define Model\r\n```\r\nclass user(db.Model):\r\n    __bind_key__ = 'adminsss'\r\n    __tablename__ = 'user'\r\n    #\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    account_id = db.Column(db.String(40), unique=True, index=True)\r\n    phone = db.Column(db.String(20))\r\n    password_hash = db.Column(db.String(128))\r\n\r\n    #\r\n    @staticmethod\r\n    def set_password(password):\r\n        password_hash = generate_password_hash(password)\r\n        return password_hash\r\n\r\n    @staticmethod\r\n    def validate_password(password_hash, password):\r\n        return check_password_hash(password_hash, password)\r\n```\r\n\r\n- query data\r\n```\r\ndb = Gino(bind=\"postgresql://postgres:postgres@localhost:5432/adminsss\")\r\n\r\n@app.route('/testDB', methods=['GET'])\r\nasync def test(request):\r\n    data = await user.query.where(user.id == \"9\").gino.first()\r\n    print(data)\r\n    return response.text(\"ok\")\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True, port=8000, host='0.0.0.0', workers=4)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/624", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/624/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/624/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/624/events", "html_url": "https://github.com/python-gino/gino/issues/624", "id": 546236311, "node_id": "MDU6SXNzdWU1NDYyMzYzMTE=", "number": 624, "title": "how to use multi-engine in one project", "user": {"login": "sunshineinwater", "id": 15187861, "node_id": "MDQ6VXNlcjE1MTg3ODYx", "avatar_url": "https://avatars0.githubusercontent.com/u/15187861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunshineinwater", "html_url": "https://github.com/sunshineinwater", "followers_url": "https://api.github.com/users/sunshineinwater/followers", "following_url": "https://api.github.com/users/sunshineinwater/following{/other_user}", "gists_url": "https://api.github.com/users/sunshineinwater/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunshineinwater/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunshineinwater/subscriptions", "organizations_url": "https://api.github.com/users/sunshineinwater/orgs", "repos_url": "https://api.github.com/users/sunshineinwater/repos", "events_url": "https://api.github.com/users/sunshineinwater/events{/privacy}", "received_events_url": "https://api.github.com/users/sunshineinwater/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-07T11:38:31Z", "updated_at": "2020-04-20T23:06:01Z", "closed_at": "2020-04-20T23:06:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to ask how to bind multiple engine in one web project using Sanic.\r\nsuch as set keyword in conf.py using Flask-SQLAlchemy:\r\n     SQLALCHEMY_BINDS = {\r\n         'engine1': 'mysql+pymysql://id:password@url/engine1',\r\n         'engine2': 'sqlite:///' + os.path.join('', 'data.sqlite')\r\n     }\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/616", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/616/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/616/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/616/events", "html_url": "https://github.com/python-gino/gino/issues/616", "id": 540829907, "node_id": "MDU6SXNzdWU1NDA4Mjk5MDc=", "number": 616, "title": "Moving from aiopg to gino", "user": {"login": "konstunn", "id": 17176546, "node_id": "MDQ6VXNlcjE3MTc2NTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/17176546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konstunn", "html_url": "https://github.com/konstunn", "followers_url": "https://api.github.com/users/konstunn/followers", "following_url": "https://api.github.com/users/konstunn/following{/other_user}", "gists_url": "https://api.github.com/users/konstunn/gists{/gist_id}", "starred_url": "https://api.github.com/users/konstunn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konstunn/subscriptions", "organizations_url": "https://api.github.com/users/konstunn/orgs", "repos_url": "https://api.github.com/users/konstunn/repos", "events_url": "https://api.github.com/users/konstunn/events{/privacy}", "received_events_url": "https://api.github.com/users/konstunn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-20T07:42:37Z", "updated_at": "2020-03-31T16:57:53Z", "closed_at": "2020-02-06T17:15:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\n\r\nWe use sqlalchemy, alembic, aiopg\r\n\r\nIs it possible to move from aiopg to gino and is it reasonable at all to do this?\r\nIs it possible to use them simultaneously for some time to provide smooth tech stack migration?\r\n\r\nIf so, how can we do this?\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/615", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/615/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/615/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/615/events", "html_url": "https://github.com/python-gino/gino/issues/615", "id": 540140574, "node_id": "MDU6SXNzdWU1NDAxNDA1NzQ=", "number": 615, "title": "Please add a couple of words in README about how to migrate from pure sqlalchemy to GINO", "user": {"login": "konstunn", "id": 17176546, "node_id": "MDQ6VXNlcjE3MTc2NTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/17176546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konstunn", "html_url": "https://github.com/konstunn", "followers_url": "https://api.github.com/users/konstunn/followers", "following_url": "https://api.github.com/users/konstunn/following{/other_user}", "gists_url": "https://api.github.com/users/konstunn/gists{/gist_id}", "starred_url": "https://api.github.com/users/konstunn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konstunn/subscriptions", "organizations_url": "https://api.github.com/users/konstunn/orgs", "repos_url": "https://api.github.com/users/konstunn/repos", "events_url": "https://api.github.com/users/konstunn/events{/privacy}", "received_events_url": "https://api.github.com/users/konstunn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679726980, "node_id": "MDU6TGFiZWw2Nzk3MjY5ODA=", "url": "https://api.github.com/repos/python-gino/gino/labels/feature%20request", "name": "feature request", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-19T07:49:50Z", "updated_at": "2019-12-21T19:28:55Z", "closed_at": "2019-12-21T19:28:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please add a couple of words in README about how to migrate from pure sqlalchemy to GINO", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/610", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/610/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/610/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/610/events", "html_url": "https://github.com/python-gino/gino/issues/610", "id": 536939577, "node_id": "MDU6SXNzdWU1MzY5Mzk1Nzc=", "number": 610, "title": "Shortcut for bulk update", "user": {"login": "CompadreP", "id": 10211749, "node_id": "MDQ6VXNlcjEwMjExNzQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/10211749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CompadreP", "html_url": "https://github.com/CompadreP", "followers_url": "https://api.github.com/users/CompadreP/followers", "following_url": "https://api.github.com/users/CompadreP/following{/other_user}", "gists_url": "https://api.github.com/users/CompadreP/gists{/gist_id}", "starred_url": "https://api.github.com/users/CompadreP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CompadreP/subscriptions", "organizations_url": "https://api.github.com/users/CompadreP/orgs", "repos_url": "https://api.github.com/users/CompadreP/repos", "events_url": "https://api.github.com/users/CompadreP/events{/privacy}", "received_events_url": "https://api.github.com/users/CompadreP/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-12T12:09:22Z", "updated_at": "2020-02-06T17:14:33Z", "closed_at": "2020-02-06T17:14:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.5\r\n* Python version: 3.6\r\n* asyncpg version: 0.20.0\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.4\r\n\r\n### Description\r\n\r\nIs there any shortcut for bulk updates? Something like `bulk_update_mappings` in alchemy's ORM\r\n\r\n### What I Did\r\n\r\nThere are not-so-elegant solution as pointed here [https://stackoverflow.com/questions/25694234/bulk-update-in-sqlalchemy-core-using-where](url), but it is not as short and convenient as `bulk_update_mappings`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/608", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/608/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/608/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/608/events", "html_url": "https://github.com/python-gino/gino/issues/608", "id": 534345209, "node_id": "MDU6SXNzdWU1MzQzNDUyMDk=", "number": 608, "title": "[question] Any advice on factory_boy usage/replacement?", "user": {"login": "remarkov", "id": 10799770, "node_id": "MDQ6VXNlcjEwNzk5Nzcw", "avatar_url": "https://avatars0.githubusercontent.com/u/10799770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/remarkov", "html_url": "https://github.com/remarkov", "followers_url": "https://api.github.com/users/remarkov/followers", "following_url": "https://api.github.com/users/remarkov/following{/other_user}", "gists_url": "https://api.github.com/users/remarkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/remarkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/remarkov/subscriptions", "organizations_url": "https://api.github.com/users/remarkov/orgs", "repos_url": "https://api.github.com/users/remarkov/repos", "events_url": "https://api.github.com/users/remarkov/events{/privacy}", "received_events_url": "https://api.github.com/users/remarkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-07T03:08:21Z", "updated_at": "2019-12-07T18:04:56Z", "closed_at": "2019-12-07T18:04:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does anyone have a clue how we can utilize [factory_boy](https://github.com/FactoryBoy/factory_boy) with GINO? Coming from Django I got very used to using factories in pytest tests.\r\nI guess I should override the `_create()` function in the factory model class, but since it is a synchronous function I am having troubles awaiting GINO model `create()` there. Tried to experiment a bit with `asyncio._get_running_loop()` etc. but with no luck. As I said, coming from Django background I have lack of experience in async. Any help is much appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/603", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/603/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/603/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/603/events", "html_url": "https://github.com/python-gino/gino/issues/603", "id": 528097716, "node_id": "MDU6SXNzdWU1MjgwOTc3MTY=", "number": 603, "title": "Distinct loader on MTM select", "user": {"login": "vQuadX", "id": 3253480, "node_id": "MDQ6VXNlcjMyNTM0ODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3253480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vQuadX", "html_url": "https://github.com/vQuadX", "followers_url": "https://api.github.com/users/vQuadX/followers", "following_url": "https://api.github.com/users/vQuadX/following{/other_user}", "gists_url": "https://api.github.com/users/vQuadX/gists{/gist_id}", "starred_url": "https://api.github.com/users/vQuadX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vQuadX/subscriptions", "organizations_url": "https://api.github.com/users/vQuadX/orgs", "repos_url": "https://api.github.com/users/vQuadX/repos", "events_url": "https://api.github.com/users/vQuadX/events{/privacy}", "received_events_url": "https://api.github.com/users/vQuadX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-25T13:46:04Z", "updated_at": "2020-02-06T17:12:06Z", "closed_at": "2020-02-06T17:12:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.4\r\n* Python version: 3.8\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: - \r\n* PostgreSQL version: 10.5\r\n\r\n### Description\r\n\r\nMy Airdrop models:\r\n```\r\nclass Airdrop(db.Model):\r\n    __tablename__ = 'airdrops'\r\n\r\n    def __init__(self, **kw):\r\n        super().__init__(**kw)\r\n        self._platform = None\r\n        self._requirements = []\r\n        self._instruction = []\r\n\r\n    id = db.Column(db.Integer, primary_key=True)    \r\n    platform_id = db.Column(None, db.ForeignKey(Platform.id), nullable=False)\r\n    some fields description...\r\n\r\n    @property\r\n    def platform(self):\r\n        return self._platform\r\n\r\n    @platform.setter\r\n    def platform(self, value):\r\n        self._platform = value\r\n\r\n    @property\r\n    def requirements(self):\r\n        return self._requirements\r\n\r\n    @requirements.setter\r\n    def requirements(self, value):\r\n        self._requirements.append(value)\r\n\r\n    @property\r\n    def instruction(self):\r\n        return self._instruction\r\n\r\n    @instruction.setter\r\n    def instruction(self, value):\r\n        self._instruction.append(value)\r\n```\r\n```\r\nclass AirdropRequirement(db.Model):\r\n    __tablename__ = 'airdrops_airdrop_requirements'\r\n\r\n    airdrop_id = db.Column(None, db.ForeignKey(Airdrop.id), primary_key=True)\r\n    requirement_id = db.Column(None, db.ForeignKey(Requirement.id), primary_key=True)\r\n```\r\n```\r\nclass Requirement(db.Model):\r\n    __tablename__ = 'airdrops_requirements'\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String(64), nullable=False, unique=True)\r\n```\r\n\r\n```\r\nclass AirdropInstructionStep(db.Model):\r\n    __tablename__ = 'airdrops_instruction_steps'\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    airdrop_id = db.Column(None, db.ForeignKey(Airdrop.id), nullable=False)\r\n    description = db.Column(db.Text, nullable=False)\r\n```\r\n\r\n### What I Did\r\nMy query:\r\n```\r\n    Airdrop.outerjoin(\r\n        Platform\r\n    ).outerjoin(\r\n        AirdropInstructionStep\r\n    ).outerjoin(\r\n        AirdropRequirement\r\n    ).outerjoin(\r\n        Requirement\r\n    ).select().where(Airdrop.slug == slug)\r\n    airdrop = await query.gino.load(\r\n        Airdrop.distinct(Airdrop.id).load(\r\n            platform=Platform,\r\n            requirements=Requirement.distinct(Requirement.id),\r\n            instruction=AirdropInstructionStep.distinct(AirdropInstructionStep.id)\r\n        )\r\n    ).all()\r\n```\r\nThis query return Airdrop with not unique requirements and instruction items.\r\nI need save items order in requirements and instruction lists.\r\nHow to load this query to get only unique values?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/602", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/602/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/602/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/602/events", "html_url": "https://github.com/python-gino/gino/issues/602", "id": 527225840, "node_id": "MDU6SXNzdWU1MjcyMjU4NDA=", "number": 602, "title": "AttributeError: __enter__", "user": {"login": "atipi", "id": 14929066, "node_id": "MDQ6VXNlcjE0OTI5MDY2", "avatar_url": "https://avatars3.githubusercontent.com/u/14929066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atipi", "html_url": "https://github.com/atipi", "followers_url": "https://api.github.com/users/atipi/followers", "following_url": "https://api.github.com/users/atipi/following{/other_user}", "gists_url": "https://api.github.com/users/atipi/gists{/gist_id}", "starred_url": "https://api.github.com/users/atipi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atipi/subscriptions", "organizations_url": "https://api.github.com/users/atipi/orgs", "repos_url": "https://api.github.com/users/atipi/repos", "events_url": "https://api.github.com/users/atipi/events{/privacy}", "received_events_url": "https://api.github.com/users/atipi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-22T14:22:42Z", "updated_at": "2019-12-01T04:37:05Z", "closed_at": "2019-12-01T04:37:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.4\r\n\r\n### Description\r\n\r\nI am trying to follow your example about async fixtures from tests/ folder and unable to get test case pass.\r\n\r\n### What I Did\r\nIn conftest.py I defined:\r\n```\r\nDB_CON_URL = get_db_con_url()\r\n\r\n\r\n@pytest.fixture(scope='module')\r\ndef sa_engine():\r\n    rv = sqlalchemy.create_engine(DB_CON_URL, echo=True)\r\n    db.create_all(rv)\r\n    yield rv\r\n    db.drop_all(rv)\r\n    rv.dispose()\r\n\r\n\r\n@pytest.fixture\r\n@async_generator\r\nasync def bind(sa_engine):\r\n    with db.with_bind(DB_CON_URL, echo=True) as engine:\r\n        await yield_(engine)\r\n```\r\n\r\nWhen I run pytest I got this error:\r\n```\r\nargs = ()\r\n\r\nkwargs = {'sa_engine': Engine(postgresql://xxx:***@test-database:5432/xxx)}\r\n\r\nrequest = <SubRequest 'bind' for <Function test_creation>>\r\n\r\nsetup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f12704a2560>\r\n\r\ninalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f12704a25f0>\r\n\r\n\r\n\r\ndef wrapper(*args, **kwargs):\r\n\r\n         loop = kwargs['event_loop']\r\n\r\n         request = kwargs['request']\r\n\r\n         if strip_event_loop:\r\n\r\n           del kwargs['event_loop']\r\n\r\n         if strip_request:\r\n\r\n            del kwargs['request']\r\n\r\n    \r\n\r\n        gen_obj = f(*args, **kwargs)\r\n\r\n     \r\n\r\n        async def setup():\r\n\r\n             res = await gen_obj.__anext__()\r\n\r\n            return res\r\n\r\n    \r\n\r\n        def finalizer():\r\n\r\n             \"\"\"Yield again, to finalize.\"\"\"\r\n\r\n             async def async_finalizer():\r\n\r\n                 try:\r\n\r\n                     await gen_obj.__anext__()\r\n\r\n                except StopAsyncIteration:\r\n\r\n                     pass\r\n\r\n                 else:\r\n\r\n                     msg = \"Async generator fixture didn't stop.\"\r\n\r\n                     msg += \"Yield only once.\"\r\n\r\n                    raise ValueError(msg)\r\n\r\n     \r\n\r\n             loop.run_until_complete(async_finalizer())\r\n\r\n    \r\n\r\n         request.addfinalizer(finalizer)\r\n\r\n     \r\n\r\n>       return loop.run_until_complete(setup())\r\n\r\n\r\n\r\n /usr/local/lib/python3.7/site-packages/pytest_asyncio/plugin.py:97: \r\n\r\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n /usr/local/lib/python3.7/asyncio/base_events.py:579: in run_until_complete\r\n\r\n     return future.result()\r\n\r\n /usr/local/lib/python3.7/site-packages/pytest_asyncio/plugin.py:78: in setup\r\n\r\n     res = await gen_obj.__anext__()\r\n\r\n/usr/local/lib/python3.7/site-packages/async_generator/_impl.py:366: in step\r\n\r\n     return await ANextIter(self._it, start_fn, *args)\r\n\r\n /usr/local/lib/python3.7/site-packages/async_generator/_impl.py:197: in __next__\r\n\r\n     return self._invoke(first_fn, *first_args)\r\n\r\n/usr/local/lib/python3.7/site-packages/async_generator/_impl.py:209: in _invoke\r\n\r\n     result = fn(*args)\r\n\r\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n\r\n\r\nsa_engine = Engine(postgresql://xxx:***@test-database:5432/xxx)\r\n\r\n\r\n\r\n     @pytest.fixture\r\n\r\n     @async_generator\r\n\r\n     async def bind(sa_engine):\r\n\r\n >       with db.with_bind(DB_CON_URL, echo=True) as engine:\r\n\r\nE       AttributeError: __enter__\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/599", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/599/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/599/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/599/events", "html_url": "https://github.com/python-gino/gino/issues/599", "id": 525815822, "node_id": "MDU6SXNzdWU1MjU4MTU4MjI=", "number": 599, "title": "Primary Key Columns with differing database names", "user": {"login": "tr11", "id": 1305065, "node_id": "MDQ6VXNlcjEzMDUwNjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1305065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tr11", "html_url": "https://github.com/tr11", "followers_url": "https://api.github.com/users/tr11/followers", "following_url": "https://api.github.com/users/tr11/following{/other_user}", "gists_url": "https://api.github.com/users/tr11/gists{/gist_id}", "starred_url": "https://api.github.com/users/tr11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tr11/subscriptions", "organizations_url": "https://api.github.com/users/tr11/orgs", "repos_url": "https://api.github.com/users/tr11/repos", "events_url": "https://api.github.com/users/tr11/events{/privacy}", "received_events_url": "https://api.github.com/users/tr11/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679726980, "node_id": "MDU6TGFiZWw2Nzk3MjY5ODA=", "url": "https://api.github.com/repos/python-gino/gino/labels/feature%20request", "name": "feature request", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-20T13:50:04Z", "updated_at": "2019-12-26T23:52:15Z", "closed_at": "2019-12-26T23:52:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* GINO version: 0.8.5\r\n* Python version: 3.8\r\n\r\n### Description\r\n\r\nThe current logic assumes that every primary key is named exactly the same way as the corresponding database column. \r\n\r\nThis seems to be because of the logic on the lines https://github.com/fantix/gino/blob/3109577271e59ab9cde169b5884403d8f41caa8b/gino/crud.py#L573-L574\r\nwhich use the database column name `c.name` as an attribute.\r\n\r\nThis causes lookup failures for models such as \r\n```\r\n    class ModelWithCustomColumnNames(db.Model):\r\n        __tablename__ = '...'\r\n\r\n        id = db.Column('other', db.Integer(), primary_key=True)\r\n        field = db.Column(db.Text())\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/596", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/596/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/596/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/596/events", "html_url": "https://github.com/python-gino/gino/issues/596", "id": 524830374, "node_id": "MDU6SXNzdWU1MjQ4MzAzNzQ=", "number": 596, "title": "Publish another minor version", "user": {"login": "RmStorm", "id": 13096654, "node_id": "MDQ6VXNlcjEzMDk2NjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/13096654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RmStorm", "html_url": "https://github.com/RmStorm", "followers_url": "https://api.github.com/users/RmStorm/followers", "following_url": "https://api.github.com/users/RmStorm/following{/other_user}", "gists_url": "https://api.github.com/users/RmStorm/gists{/gist_id}", "starred_url": "https://api.github.com/users/RmStorm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RmStorm/subscriptions", "organizations_url": "https://api.github.com/users/RmStorm/orgs", "repos_url": "https://api.github.com/users/RmStorm/repos", "events_url": "https://api.github.com/users/RmStorm/events{/privacy}", "received_events_url": "https://api.github.com/users/RmStorm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-19T07:39:41Z", "updated_at": "2019-11-19T15:45:21Z", "closed_at": "2019-11-19T15:45:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is it possible to publish another minor version on pypi? Maybe configure automatic updating on pypi when a new version is tagged in the repo? Something like [this](https://docs.travis-ci.com/user/deployment/pypi/#deploying-tags).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/595", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/595/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/595/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/595/events", "html_url": "https://github.com/python-gino/gino/issues/595", "id": 524481691, "node_id": "MDU6SXNzdWU1MjQ0ODE2OTE=", "number": 595, "title": "How to use Enum type in GINO for Alembic", "user": {"login": "kexirong", "id": 31177595, "node_id": "MDQ6VXNlcjMxMTc3NTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/31177595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kexirong", "html_url": "https://github.com/kexirong", "followers_url": "https://api.github.com/users/kexirong/followers", "following_url": "https://api.github.com/users/kexirong/following{/other_user}", "gists_url": "https://api.github.com/users/kexirong/gists{/gist_id}", "starred_url": "https://api.github.com/users/kexirong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kexirong/subscriptions", "organizations_url": "https://api.github.com/users/kexirong/orgs", "repos_url": "https://api.github.com/users/kexirong/repos", "events_url": "https://api.github.com/users/kexirong/events{/privacy}", "received_events_url": "https://api.github.com/users/kexirong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-11-18T16:37:00Z", "updated_at": "2020-07-15T11:41:34Z", "closed_at": "2019-11-24T05:16:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n #### Python version:3.6.8\r\n```\r\naiocontextvars==0.2.2\r\naiofiles==0.4.0\r\nalembic==1.3.1\r\nasn1crypto==0.24.0\r\nasyncpg==0.19.0\r\nbcrypt==3.1.7\r\ncertifi==2019.9.11\r\ncffi==1.11.5\r\nchardet==3.0.4\r\nconfigobj==5.0.6\r\ncontextvars==2.4\r\ncryptography==2.8\r\ndecorator==4.2.1\r\ngino==0.8.4\r\ngpg==1.10.0\r\nh11==0.8.1\r\nh2==3.1.1\r\nhpack==3.0.0\r\nhttpcore==0.3.0\r\nhttptools==0.0.13\r\nhyperframe==5.2.0\r\nidna==2.5\r\nimmutables==0.11\r\niniparse==0.4\r\nMako==1.1.0\r\nMarkupSafe==1.1.1\r\nmultidict==4.5.2\r\nnetifaces==0.10.6\r\nparamiko==2.6.0\r\npciutils==2.3.6\r\nperf==0.1\r\nply==3.9\r\npsycopg2==2.8.4\r\npyasn1==0.4.7\r\npyasn1-modules==0.2.7\r\npycparser==2.14\r\npygobject==3.28.3\r\nPyJWT==1.7.1\r\nPyNaCl==1.3.0\r\npyOpenSSL==18.0.0\r\npython-dateutil==2.6.1\r\npython-dmidecode==3.12.2\r\npython-editor==1.0.4\r\npython-ldap==3.2.0\r\npython-linux-procfs==0.6\r\npyudev==0.21.0\r\nrequests==2.22.0\r\nrequests-async==0.5.0\r\nrfc3986==1.3.2\r\nrhnlib==2.8.6\r\nrpm==4.14.2\r\nsanic==19.9.0\r\nsanic-jwt==1.3.2\r\nschedutils==0.6\r\nsix==1.11.0\r\nslip==0.6.4\r\nslip.dbus==0.6.4\r\nSQLAlchemy==1.3.11\r\nsyspurpose==1.23.8\r\nujson==1.35\r\nurllib3==1.25.7\r\nuvloop==0.14.0\r\nwebsockets==8.1\r\n```\r\n\r\n\r\n### Description\r\n\r\nThe Enum type can't woruk in  Alembic.\r\n\r\n\r\n### What I Did\r\n\r\n```\r\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\r\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\r\nINFO  [alembic.runtime.migration] Running upgrade 1954d3e07c17 -> f33a93033354, in\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/alembic\", line 11, in <module>\r\n    load_entry_point('alembic==1.3.1', 'console_scripts', 'alembic')()\r\n  File \"/usr/local/lib/python3.6/site-packages/alembic/config.py\", line 575, in main\r\n    CommandLine(prog=prog).main(argv=argv)\r\n  File \"/usr/local/lib/python3.6/site-packages/alembic/config.py\", line 569, in main\r\n    self.run_cmd(cfg, options)\r\n  File \"/usr/local/lib/python3.6/site-packages/alembic/config.py\", line 549, in run_cmd\r\n    **dict((k, getattr(options, k, None)) for k in kwarg)\r\n  File \"/usr/local/lib/python3.6/site-packages/alembic/command.py\", line 298, in upgrade\r\n    script.run_env()\r\n  File \"/usr/local/lib/python3.6/site-packages/alembic/script/base.py\", line 489, in run_env\r\n    util.load_python_file(self.dir, \"env.py\")\r\n  File \"/usr/local/lib/python3.6/site-packages/alembic/util/pyfiles.py\", line 98, in load_python_file\r\n    module = load_module_py(module_id, path)\r\n  File \"/usr/local/lib/python3.6/site-packages/alembic/util/compat.py\", line 173, in load_module_py\r\n    spec.loader.exec_module(module)\r\n  File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"alembic/env.py\", line 83, in <module>\r\n    run_migrations_online()\r\n  File \"alembic/env.py\", line 77, in run_migrations_online\r\n    context.run_migrations()\r\n  File \"<string>\", line 8, in run_migrations\r\n  File \"/usr/local/lib/python3.6/site-packages/alembic/runtime/environment.py\", line 846, in run_migrations\r\n    self.get_context().run_migrations(**kw)\r\n  File \"/usr/local/lib/python3.6/site-packages/alembic/runtime/migration.py\", line 518, in run_migrations\r\n    step.migration_fn(**kw)\r\n  File \"/home/kexirong/qkacmdb-sanic/alembic/versions/f33a93033354_in.py\", line 29, in upgrade\r\n    sa.Column('roles', gino.schema.Enum('staff', 'admin', 'superuser'), nullable=True, comment='\u7528\u6237\u7c7b\u522b'),\r\nNameError: name 'gino' is not defined\r\n```\r\n#### My code\r\n```\r\n roles = db.Column(db.Enum('staff', 'admin', 'superuser', name='role'), default='staff', comment='\u7528\u6237\u7c7b\u522b')\r\n```\r\n#### Alembic generate code\r\n```\r\nsa.Column('roles', gino.schema.Enum('staff', 'admin', 'superuser', name='role'), nullable=True, comment='\u7528\u6237\u7c7b\u522b'),\r\n```\r\nneed modified `gino.schema.Enum` to `sa.Enum`\r\nI need help ,\r\n thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/593", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/593/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/593/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/593/events", "html_url": "https://github.com/python-gino/gino/issues/593", "id": 522230458, "node_id": "MDU6SXNzdWU1MjIyMzA0NTg=", "number": 593, "title": "[Question] Is it possible to call update() on a class?", "user": {"login": "atipi", "id": 14929066, "node_id": "MDQ6VXNlcjE0OTI5MDY2", "avatar_url": "https://avatars3.githubusercontent.com/u/14929066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atipi", "html_url": "https://github.com/atipi", "followers_url": "https://api.github.com/users/atipi/followers", "following_url": "https://api.github.com/users/atipi/following{/other_user}", "gists_url": "https://api.github.com/users/atipi/gists{/gist_id}", "starred_url": "https://api.github.com/users/atipi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atipi/subscriptions", "organizations_url": "https://api.github.com/users/atipi/orgs", "repos_url": "https://api.github.com/users/atipi/repos", "events_url": "https://api.github.com/users/atipi/events{/privacy}", "received_events_url": "https://api.github.com/users/atipi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-13T13:40:25Z", "updated_at": "2019-12-10T00:31:34Z", "closed_at": "2019-12-10T00:31:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.4\r\n\r\n### Description\r\n\r\nI would like to update a row without using SQLAlchemy syntax. If I have a model defined like this:\r\n```\r\nclass Item(db.Model):\r\n    __tablename__ = 'items'\r\n    access_key = db.Column(db.String(length=36), nullable=False)\r\n    user_approved_ts = db.Column(db.TIMESTAMP(timezone=True))\r\n    status = db.Column(db.String(length=20), nullable=False)\r\n```\r\n\r\n### What I Did\r\n\r\nI did try this syntax but it produce an error:\r\n```\r\n        await Item.update \\\r\n            .values(status=status,\r\n                    user_approved_ts=func.current_timestamp()) \\\r\n            .where(access_key='test') \\\r\n            .apply()\r\n```\r\n\r\nI got this error:\r\n`AttributeError: 'UpdateRequest' object has no attribute 'where'`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/591", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/591/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/591/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/591/events", "html_url": "https://github.com/python-gino/gino/issues/591", "id": 520810592, "node_id": "MDU6SXNzdWU1MjA4MTA1OTI=", "number": 591, "title": "Select some func values in one query", "user": {"login": "vQuadX", "id": 3253480, "node_id": "MDQ6VXNlcjMyNTM0ODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3253480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vQuadX", "html_url": "https://github.com/vQuadX", "followers_url": "https://api.github.com/users/vQuadX/followers", "following_url": "https://api.github.com/users/vQuadX/following{/other_user}", "gists_url": "https://api.github.com/users/vQuadX/gists{/gist_id}", "starred_url": "https://api.github.com/users/vQuadX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vQuadX/subscriptions", "organizations_url": "https://api.github.com/users/vQuadX/orgs", "repos_url": "https://api.github.com/users/vQuadX/repos", "events_url": "https://api.github.com/users/vQuadX/events{/privacy}", "received_events_url": "https://api.github.com/users/vQuadX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779916, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTY=", "url": "https://api.github.com/repos/python-gino/gino/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}, {"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-11T08:34:18Z", "updated_at": "2019-11-19T12:16:34Z", "closed_at": "2019-11-19T12:16:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.4\r\n* Python version: 3.8\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: -\r\n* PostgreSQL version: 10.5\r\n\r\n### Description\r\n\r\nI need select two EXISTS values in db.select\r\n\r\n### What I Did\r\n\r\n```\r\nusername_exists, email_exists = await db.select([\r\n            db.exists().where(User.username == user.username),\r\n            db.exists().where(User.email == user.email)\r\n        ]).gino.first()\r\n```\r\nThis generate valid SQL:\r\n```\r\nSELECT EXISTS(SELECT *\r\n              FROM users\r\n              WHERE users.username = :username_1) AS anon_1,\r\n       EXISTS(SELECT *\r\n              FROM users\r\n              WHERE users.email = :email_1)       AS anon_2\r\n```\r\nAnd i got an error:\r\n`AttributeError: 'NoneType' object has no attribute 'first'`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/589", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/589/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/589/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/589/events", "html_url": "https://github.com/python-gino/gino/issues/589", "id": 519952747, "node_id": "MDU6SXNzdWU1MTk5NTI3NDc=", "number": 589, "title": "Publish new version on pypi", "user": {"login": "RmStorm", "id": 13096654, "node_id": "MDQ6VXNlcjEzMDk2NjU0", "avatar_url": "https://avatars3.githubusercontent.com/u/13096654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RmStorm", "html_url": "https://github.com/RmStorm", "followers_url": "https://api.github.com/users/RmStorm/followers", "following_url": "https://api.github.com/users/RmStorm/following{/other_user}", "gists_url": "https://api.github.com/users/RmStorm/gists{/gist_id}", "starred_url": "https://api.github.com/users/RmStorm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RmStorm/subscriptions", "organizations_url": "https://api.github.com/users/RmStorm/orgs", "repos_url": "https://api.github.com/users/RmStorm/repos", "events_url": "https://api.github.com/users/RmStorm/events{/privacy}", "received_events_url": "https://api.github.com/users/RmStorm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-08T11:04:21Z", "updated_at": "2019-11-11T05:26:43Z", "closed_at": "2019-11-09T05:22:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi I just ran into and made a fix for #579. Then I thought I would try to push it upstream and found that it is already fixed in the repo! Is it possible to push more often to pypi?\r\n\r\nAlso actually running the tests was a lot harder than expected. I upgraded the docs a little to clarify how to run a postgres database with ssl in a docker container so that all tests succeed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/588", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/588/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/588/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/588/events", "html_url": "https://github.com/python-gino/gino/issues/588", "id": 519217045, "node_id": "MDU6SXNzdWU1MTkyMTcwNDU=", "number": 588, "title": "[Question] How to map this SQL query to Gino's syntax?", "user": {"login": "atipi", "id": 14929066, "node_id": "MDQ6VXNlcjE0OTI5MDY2", "avatar_url": "https://avatars3.githubusercontent.com/u/14929066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atipi", "html_url": "https://github.com/atipi", "followers_url": "https://api.github.com/users/atipi/followers", "following_url": "https://api.github.com/users/atipi/following{/other_user}", "gists_url": "https://api.github.com/users/atipi/gists{/gist_id}", "starred_url": "https://api.github.com/users/atipi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atipi/subscriptions", "organizations_url": "https://api.github.com/users/atipi/orgs", "repos_url": "https://api.github.com/users/atipi/repos", "events_url": "https://api.github.com/users/atipi/events{/privacy}", "received_events_url": "https://api.github.com/users/atipi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-07T11:47:18Z", "updated_at": "2019-12-21T18:32:19Z", "closed_at": "2019-12-21T18:32:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.4\r\n\r\n### Description\r\n\r\nI am trying to find right syntax for using SQL query and map the result to objects via Gino\r\n\r\n### What I Did\r\n\r\nI have defined these models:\r\nclass Target(db.Model):\r\n    __tablename__ = \u2019targets'\r\n\r\n    id = db.Column(db.Integer(), primary_key=True, autoincrement=True)\r\n    target_uuid = db.Column(db.String(length=36), nullable=False, unique=True)\r\n\r\nclass User(db.Model):\r\n    __tablename__ = \u2018users'\r\n\r\n    id = db.Column(db.Integer(), primary_key=True, autoincrement=True)\r\n    user_uuid = db.Column(db.String(length=36), nullable=False, unique=True)\r\n\r\nclass Content(db.Model):\r\n    __tablename__ = 'contents'\r\n\r\n    id = db.Column(db.Integer(), primary_key=True, autoincrement=True)\r\n    details = db.Column(db.String(length=36), nullable=False, unique=True)\r\n    reg_user_id = db.Column(db.String(length=1000))\r\n    status = db.Column(db.String(length=20), nullable=False)\r\n    target_id = db.Column(None, db.ForeignKey(\u2019targets.id'))\r\n    user_id = db.Column(None, db.ForeignKey(\u2018users.id\u2019))\r\n\r\nAnd I would like to execute this SQL syntax by using Gino's syntax. How can I do it?\r\n```\r\nSELECT\r\n  c.details,\r\n  c.status\r\nFROM contents c\r\nINNER JOIN target t ON t.id = c.source_id\r\nINNER JOIN user u on u.id = c.consumer_id\r\nWHERE t.target_uuid = %s\r\nAND c.reg_user_id = %s\r\nAND u.user_uuid = %s\r\nAND c.status IN (%s, %s)\r\n```\r\n\r\nNote: I will pass parameter values to %s variables", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/587", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/587/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/587/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/587/events", "html_url": "https://github.com/python-gino/gino/issues/587", "id": 517324701, "node_id": "MDU6SXNzdWU1MTczMjQ3MDE=", "number": 587, "title": "[Question] How to use sslmode=True with Sanic", "user": {"login": "snguyenthanh", "id": 35214933, "node_id": "MDQ6VXNlcjM1MjE0OTMz", "avatar_url": "https://avatars3.githubusercontent.com/u/35214933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snguyenthanh", "html_url": "https://github.com/snguyenthanh", "followers_url": "https://api.github.com/users/snguyenthanh/followers", "following_url": "https://api.github.com/users/snguyenthanh/following{/other_user}", "gists_url": "https://api.github.com/users/snguyenthanh/gists{/gist_id}", "starred_url": "https://api.github.com/users/snguyenthanh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snguyenthanh/subscriptions", "organizations_url": "https://api.github.com/users/snguyenthanh/orgs", "repos_url": "https://api.github.com/users/snguyenthanh/repos", "events_url": "https://api.github.com/users/snguyenthanh/events{/privacy}", "received_events_url": "https://api.github.com/users/snguyenthanh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-04T18:25:42Z", "updated_at": "2019-11-11T13:58:37Z", "closed_at": "2019-11-11T13:58:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.3\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11\r\n* Sanic version: 19.6.3\r\n\r\nHow can I set `sslmode=True` for `Gino` using with `Sanic` ?\r\n\r\nUsing raw `Gino` - `db.set_bind(<url>, ssl=True)` seems to be the answer, but I don't know how to config it when it is used with `Sanic`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/586", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/586/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/586/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/586/events", "html_url": "https://github.com/python-gino/gino/issues/586", "id": 517035766, "node_id": "MDU6SXNzdWU1MTcwMzU3NjY=", "number": 586, "title": "How to define model classes in multiple files?", "user": {"login": "atipi", "id": 14929066, "node_id": "MDQ6VXNlcjE0OTI5MDY2", "avatar_url": "https://avatars3.githubusercontent.com/u/14929066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atipi", "html_url": "https://github.com/atipi", "followers_url": "https://api.github.com/users/atipi/followers", "following_url": "https://api.github.com/users/atipi/following{/other_user}", "gists_url": "https://api.github.com/users/atipi/gists{/gist_id}", "starred_url": "https://api.github.com/users/atipi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atipi/subscriptions", "organizations_url": "https://api.github.com/users/atipi/orgs", "repos_url": "https://api.github.com/users/atipi/repos", "events_url": "https://api.github.com/users/atipi/events{/privacy}", "received_events_url": "https://api.github.com/users/atipi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-04T09:32:14Z", "updated_at": "2019-11-06T15:51:00Z", "closed_at": "2019-11-06T15:50:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.4\r\n\r\n### Description\r\n\r\nI would like to create multiple files for each model classes. For example:\r\n- models/user.py -> Keep User model class\r\n- models/area.py -> Keep Area model class\r\n- database.py -> Central place to manage database.\r\n- app.py -> Main file to start database and create tables etc.\r\n\r\nIs it possible to do without putting all models in one file? And how? \r\n\r\n### What I Did\r\n\r\nI have defined this code in database.py\r\n```\r\nfrom gino import Gino\r\n\r\n\r\nclass Database:\r\n    def __init__(self, database=None):\r\n        if database:\r\n            self.db = database\r\n        else:\r\n            self.db = Gino()\r\n\r\n    def get_db(self):\r\n        return self.db\r\n\r\n    def connect_db(self):\r\n        return self.db.set_bind('postgresql://localhost/gino')\r\n\r\n    def close_db(self):\r\n        return self.db.pop_bind().close()\r\n\r\n```\r\n\r\nThen in for example user.py\r\n```\r\nfrom app import db\r\n\r\n\r\nclass User(db.Model):\r\n    __tablename__ = 'users'\r\n\r\n    id = db.Column(db.Integer(), primary_key=True)\r\n    name_en = db.Column(db.Unicode())\r\n```\r\n\r\nFinally in app.py\r\n```\r\nimport asyncio\r\nfrom gino import Gino\r\n\r\nfrom database import Database\r\n\r\ndatabase = Database(database=Gino())\r\ndb = database.get_db()\r\n\r\n\r\nasync def main():\r\n    await database.connect_db()\r\n    print('Connect to DB')\r\n\r\n    await db.gino.create_all()\r\n    print('Create tables')\r\n\r\n    # further code goes here\r\n\r\n    await database.close_db()\r\n    print('Close DB')\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/581", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/581/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/581/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/581/events", "html_url": "https://github.com/python-gino/gino/issues/581", "id": 512640708, "node_id": "MDU6SXNzdWU1MTI2NDA3MDg=", "number": 581, "title": "Sanic extension using deprecated request.pop() method", "user": {"login": "sjsadowski", "id": 857480, "node_id": "MDQ6VXNlcjg1NzQ4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/857480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjsadowski", "html_url": "https://github.com/sjsadowski", "followers_url": "https://api.github.com/users/sjsadowski/followers", "following_url": "https://api.github.com/users/sjsadowski/following{/other_user}", "gists_url": "https://api.github.com/users/sjsadowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjsadowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjsadowski/subscriptions", "organizations_url": "https://api.github.com/users/sjsadowski/orgs", "repos_url": "https://api.github.com/users/sjsadowski/repos", "events_url": "https://api.github.com/users/sjsadowski/events{/privacy}", "received_events_url": "https://api.github.com/users/sjsadowski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779916, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTY=", "url": "https://api.github.com/repos/python-gino/gino/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-25T17:50:13Z", "updated_at": "2019-10-26T07:39:28Z", "closed_at": "2019-10-26T07:39:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "One of our users reported this issue here: https://github.com/huge-success/sanic/issues/1711\r\n\r\nIssue is found here:\r\nhttps://github.com/fantix/gino/blob/2c233e9fcf80637ef24f9d16d8652d27d14bddf7/gino/ext/sanic.py#L91", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/579", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/579/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/579/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/579/events", "html_url": "https://github.com/python-gino/gino/issues/579", "id": 512013012, "node_id": "MDU6SXNzdWU1MTIwMTMwMTI=", "number": 579, "title": "Database autogenerate migrations", "user": {"login": "nsiregar", "id": 18432852, "node_id": "MDQ6VXNlcjE4NDMyODUy", "avatar_url": "https://avatars0.githubusercontent.com/u/18432852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsiregar", "html_url": "https://github.com/nsiregar", "followers_url": "https://api.github.com/users/nsiregar/followers", "following_url": "https://api.github.com/users/nsiregar/following{/other_user}", "gists_url": "https://api.github.com/users/nsiregar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsiregar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsiregar/subscriptions", "organizations_url": "https://api.github.com/users/nsiregar/orgs", "repos_url": "https://api.github.com/users/nsiregar/repos", "events_url": "https://api.github.com/users/nsiregar/events{/privacy}", "received_events_url": "https://api.github.com/users/nsiregar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-24T15:16:24Z", "updated_at": "2019-10-28T04:35:56Z", "closed_at": "2019-10-28T04:35:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.5\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 10.10\r\n\r\n### Description\r\nHow to make model's `__tablename__` is autogenerated? \r\nI've tried to using `gino.declarative.declared_attr` to automatically generate `__tablename__` attribute for model, but got error\r\n\r\n`KeyError: '<function BaseModel.__tablename__ at 0x7f21defb7950>'`\r\n\r\n### What I Did\r\nI tried to structuring applications with `starlette` here https://github.com/nsiregar/letsgo but unable to autogenerate `__tablename__`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/575", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/575/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/575/events", "html_url": "https://github.com/python-gino/gino/issues/575", "id": 508816298, "node_id": "MDU6SXNzdWU1MDg4MTYyOTg=", "number": 575, "title": "How do I Batch Update", "user": {"login": "nimwijetunga", "id": 22552967, "node_id": "MDQ6VXNlcjIyNTUyOTY3", "avatar_url": "https://avatars2.githubusercontent.com/u/22552967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nimwijetunga", "html_url": "https://github.com/nimwijetunga", "followers_url": "https://api.github.com/users/nimwijetunga/followers", "following_url": "https://api.github.com/users/nimwijetunga/following{/other_user}", "gists_url": "https://api.github.com/users/nimwijetunga/gists{/gist_id}", "starred_url": "https://api.github.com/users/nimwijetunga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nimwijetunga/subscriptions", "organizations_url": "https://api.github.com/users/nimwijetunga/orgs", "repos_url": "https://api.github.com/users/nimwijetunga/repos", "events_url": "https://api.github.com/users/nimwijetunga/events{/privacy}", "received_events_url": "https://api.github.com/users/nimwijetunga/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-10-18T02:24:44Z", "updated_at": "2019-10-20T05:12:54Z", "closed_at": "2019-10-20T05:12:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.6.6\r\n* asyncpg version: 0.19.0\r\n* PostgreSQL version: 11.5\r\n\r\nI have the following model:\r\n```\r\nclass ProviderHotel(db.Model):\r\n  __bind_key__ = 'hotels'\r\n  __tablename__ = 'provider_hotels'\r\n\r\n  id = db.Column(db.Integer, primary_key=True)\r\n  provider = db.Column(db.String)\r\n  travolutionary_id = db.Column(db.String)\r\n  hotel_id = db.Column(db.Integer)\r\n  provider_hotel_id = db.Column(db.String)\r\n...\r\n```\r\n\r\nI have the following python object:\r\n\r\n```\r\nobj = {\r\n  '1': {\r\n    'provider_hotel_id': 1,\r\n   ...\r\n },\r\n'2': {\r\n    'provider_hotel_id': 2,\r\n   ...\r\n },\r\n'3': {\r\n    'provider_hotel_id': 3,\r\n   ...\r\n },\r\n}\r\n```\r\n\r\nI would like to filter all the entries in the db which have `provider_hotel_id = obj.keys()` then update them by unpacking their respective `obj.value()`. I know this can be accomplished by first querying the db then updating each entry and then using `.apply()` command, but I am wondering if there is any way I can do a batch update as it is expensive to commit for each row updated (for large number of rows). \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/573", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/573/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/573/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/573/events", "html_url": "https://github.com/python-gino/gino/issues/573", "id": 508376463, "node_id": "MDU6SXNzdWU1MDgzNzY0NjM=", "number": 573, "title": "How to use loaders with subqueries", "user": {"login": "michaelkrukov", "id": 13236694, "node_id": "MDQ6VXNlcjEzMjM2Njk0", "avatar_url": "https://avatars3.githubusercontent.com/u/13236694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelkrukov", "html_url": "https://github.com/michaelkrukov", "followers_url": "https://api.github.com/users/michaelkrukov/followers", "following_url": "https://api.github.com/users/michaelkrukov/following{/other_user}", "gists_url": "https://api.github.com/users/michaelkrukov/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelkrukov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelkrukov/subscriptions", "organizations_url": "https://api.github.com/users/michaelkrukov/orgs", "repos_url": "https://api.github.com/users/michaelkrukov/repos", "events_url": "https://api.github.com/users/michaelkrukov/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelkrukov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679726980, "node_id": "MDU6TGFiZWw2Nzk3MjY5ODA=", "url": "https://api.github.com/repos/python-gino/gino/labels/feature%20request", "name": "feature request", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-17T10:15:27Z", "updated_at": "2019-11-06T02:47:04Z", "closed_at": "2019-11-06T02:47:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to load User models from subquery (in order to use 'where', 'limit' and 'offset'). But I can't load User models from rows, because loader can't find model's columns.\r\n\r\n```py\r\nclass User(db.Model):\r\n    __tablename__ = 'users'\r\n    id = db.Column(db.Integer(), primary_key=True)\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self._tags = set()\r\n\r\n    @property\r\n    def tags(self):\r\n        return self._tags\r\n\r\n    @tags.setter\r\n    def add_tag(self, tag):\r\n        self._tags.add(tag)\r\n\r\nclass Tag(db.Model):\r\n    __tablename__ = 'tags'\r\n    id = db.Column(db.Integer(), primary_key=True)\r\n\r\nclass UserXTag(db.Model):\r\n    __tablename__ = 'users_x_tags'\r\n    user_id = db.Column(db.Integer(), db.ForeignKey('users.id'))\r\n    tag_id = db.Column(db.Integer(), db.ForeignKey('tags.id'))\r\n\r\nasync def main():\r\n    await db.set_bind('postgresql://...')\r\n\r\n    sub_joined = User.outerjoin(UserXTag).outerjoin(Tag)\r\n    sub_select = Select([User], None, from_obj=sub_joined)\r\n    sub_grouped = sub_select.group_by(*User)\r\n    sub_filtered = sub_grouped.having(func.count(Tag.id) > 0)\r\n    \r\n    # I forced to do this by Postgresql (?)\r\n    # 'subquery in FROM must have an alias'\r\n    sub_query = sub_filtered.alias('users')\r\n    \r\n    # I can do this to force expected columns, but I really don't need it (?)\r\n    # sub_query = User.join(sub_query, User.id == SubUser.id)\r\n\r\n    query = sub_query.outerjoin(UserXTag).outerjoin(Tag).select()\r\n\r\n    print(query)\r\n\r\n    loader = (User.distinct(User.id).load(add_tag=Tag.distinct(Tag.id)))\r\n\r\n    users = await query.gino.load(loader).all()\r\n    # sqlalchemy.exc.NoSuchColumnError: \"Could not locate column in row for column 'users.id'\"\r\n```\r\n\r\nThe resulting SQL query is correct, but the loader `ModelLoader` can't use subquery's columns as no column has correct table (because a subquery is considered an entirely separate table, I guess).\r\n\r\n```sql\r\nSELECT users.id, users_x_tags.user_id, users_x_tags.tag_id, tags.id FROM (SELECT users.id AS id FROM users LEFT OUTER JOIN users_x_tags ON users.id = users_x_tags.user_id LEFT OUTER JOIN tags ON tags.id = users_x_tags.tag_id GROUP BY users.id HAVING count(tags.id) > $1) AS users LEFT OUTER JOIN users_x_tags ON id = users_x_tags.user_id LEFT OUTER JOIN tags ON tags.id = users_x_tags.tag_id\r\n```\r\n\r\n> \"users\" (as in model User) is a different table from \"users\" created throught \"alias\"\r\n\r\nI used this code to check how row accessed (added in ModelLoader's `do_load` method):\r\n\r\n```py\r\n_id = self._distinct[0]\r\nfor k, v in row._keymap.items():\r\n    print(k, '==', _id, k is _id)\r\n    if isinstance(k, str):\r\n        continue\r\n    print(k.table == _id.table)\r\n    print('---')\r\n\r\n# Output:\r\n# users.id == users.id False\r\n# False\r\n# ---\r\n```\r\n\r\nSo, how do I change my code to use loaders to parse rows, received from subquery from the \"users\" table? Or should I be using an entirely different approach? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/572", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/572/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/572/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/572/events", "html_url": "https://github.com/python-gino/gino/issues/572", "id": 507859826, "node_id": "MDU6SXNzdWU1MDc4NTk4MjY=", "number": 572, "title": "Reusing connections and asyncio tasks", "user": {"login": "briskweb", "id": 29868797, "node_id": "MDQ6VXNlcjI5ODY4Nzk3", "avatar_url": "https://avatars3.githubusercontent.com/u/29868797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briskweb", "html_url": "https://github.com/briskweb", "followers_url": "https://api.github.com/users/briskweb/followers", "following_url": "https://api.github.com/users/briskweb/following{/other_user}", "gists_url": "https://api.github.com/users/briskweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/briskweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briskweb/subscriptions", "organizations_url": "https://api.github.com/users/briskweb/orgs", "repos_url": "https://api.github.com/users/briskweb/repos", "events_url": "https://api.github.com/users/briskweb/events{/privacy}", "received_events_url": "https://api.github.com/users/briskweb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-16T13:40:34Z", "updated_at": "2019-11-09T05:23:04Z", "closed_at": "2019-11-09T05:23:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.2\r\n* Python version: 3.7.3\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n\r\n### Description\r\n\r\nWhen I have a reusing connection and create new tasks, the tasks inherit the same reusing connection, which may result in a conflict.\r\n\r\nI would expect that you can only reuse connections from the same task and new tasks have no reusing connection on their stacks in the beginning. Is it possible to have this behavior?\r\n\r\n### What I Did\r\nHere is a small example showing the problem. It throws\r\n**asyncpg.exceptions._base.InterfaceError: cannot perform operation: another operation is in progress.**\r\n\r\n```\r\nfrom gino import Gino\r\nimport asyncio\r\n\r\ndb = Gino()\r\n\r\n\r\nasync def main():\r\n    await db.set_bind('postgresql+asyncpg://...')\r\n    async with db.acquire(reuse=True) as con:\r\n        t1 = asyncio.create_task(test())\r\n        t2 = asyncio.create_task(test2())\r\n        await asyncio.gather(t1, t2)\r\n\r\n\r\nasync def test():\r\n    print(await db.scalar(\"SELECT pg_sleep(10)\"))\r\n\r\n\r\nasync def test2():\r\n    print(await db.scalar(\"SELECT pg_backend_pid()\"))\r\n\r\nasyncio.run(main())\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/571", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/571/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/571/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/571/events", "html_url": "https://github.com/python-gino/gino/issues/571", "id": 507402766, "node_id": "MDU6SXNzdWU1MDc0MDI3NjY=", "number": 571, "title": "[RFC] Move extensions to examples", "user": {"login": "wwwjfy", "id": 126527, "node_id": "MDQ6VXNlcjEyNjUyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/126527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwjfy", "html_url": "https://github.com/wwwjfy", "followers_url": "https://api.github.com/users/wwwjfy/followers", "following_url": "https://api.github.com/users/wwwjfy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwjfy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwjfy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwjfy/subscriptions", "organizations_url": "https://api.github.com/users/wwwjfy/orgs", "repos_url": "https://api.github.com/users/wwwjfy/repos", "events_url": "https://api.github.com/users/wwwjfy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwjfy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 652419910, "node_id": "MDU6TGFiZWw2NTI0MTk5MTA=", "url": "https://api.github.com/repos/python-gino/gino/labels/task", "name": "task", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-gino/gino/milestones/5", "html_url": "https://github.com/python-gino/gino/milestone/5", "labels_url": "https://api.github.com/repos/python-gino/gino/milestones/5/labels", "id": 2741127, "node_id": "MDk6TWlsZXN0b25lMjc0MTEyNw==", "number": 5, "title": "GINO 1.0", "description": "GINO 1.0 was initially released in Apr 2020, now it is open for bug fixes and security updates.", "creator": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 7, "state": "open", "created_at": "2017-09-03T04:24:23Z", "updated_at": "2020-06-06T20:19:48Z", "due_on": null, "closed_at": null}, "comments": 7, "created_at": "2019-10-15T18:13:13Z", "updated_at": "2020-04-20T22:51:53Z", "closed_at": "2020-04-20T22:51:52Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "There have been some issues before about extensions of web framework. Most of them are caused by backward incompatible. Here comes the latest one #569.\r\n\r\nIt's unreasonable to have compatibility code to be adaptable to different versions of a given framework. Because when the users import it, the version is definite.\r\n\r\nAnd for users need later version of Gino and earlier version of Sanic for example, or the opposite way, it's currently impossible.\r\n\r\nI can think of 2 options:\r\n1) Another package (can be in the same repo though) to contain extensions.\r\n2) Putting the extensions in example (or something else) folder. Users can copy and make changes accordingly, and maybe they can also create PR to make it up to date.\r\n\r\nPersonally I prefer 2, and we can reduce maintenance cost from our side, so I don't need to know how to use each one and follow up all the updates.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/569", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/569/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/569/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/569/events", "html_url": "https://github.com/python-gino/gino/issues/569", "id": 506574955, "node_id": "MDU6SXNzdWU1MDY1NzQ5NTU=", "number": 569, "title": "Sanic v19.9.0 compatibility ", "user": {"login": "nebularazer", "id": 10167277, "node_id": "MDQ6VXNlcjEwMTY3Mjc3", "avatar_url": "https://avatars3.githubusercontent.com/u/10167277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nebularazer", "html_url": "https://github.com/nebularazer", "followers_url": "https://api.github.com/users/nebularazer/followers", "following_url": "https://api.github.com/users/nebularazer/following{/other_user}", "gists_url": "https://api.github.com/users/nebularazer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nebularazer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nebularazer/subscriptions", "organizations_url": "https://api.github.com/users/nebularazer/orgs", "repos_url": "https://api.github.com/users/nebularazer/repos", "events_url": "https://api.github.com/users/nebularazer/events{/privacy}", "received_events_url": "https://api.github.com/users/nebularazer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-14T10:43:42Z", "updated_at": "2019-10-26T07:47:20Z", "closed_at": "2019-10-26T07:47:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: PostgreSQL 11.2 (Debian 11.2-1.pgdg90+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516, 64-bit\r\n\r\n### Description\r\n\r\nSanic 19.9.0 moved custom request context to `request.ctx.*`. Wich breaks Gino sanic middleware -> [sanic.py#L87](https://github.com/fantix/gino/blob/master/gino/ext/sanic.py#L87)\r\n\r\n### What I Did\r\n\r\n```\r\n2019-10-14 12:23:23 +0200 ERROR [app.py:991] Exception occurred in one of response middleware handlers\r\nTraceback (most recent call last):\r\n  File \"/.venv/lib/python3.7/site-packages/sanic/app.py\", line 983, in handle_request\r\n    request, response\r\n  File \"/.venv/lib/python3.7/site-packages/sanic/app.py\", line 1271, in _run_response_middleware\r\n    _response = await _response\r\n  File \"/.venv/lib/python3.7/site-packages/gino/ext/sanic.py\", line 91, in on_response\r\n    conn = request.pop('connection', None)\r\nAttributeError: 'Request' object has no attribute 'pop'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/568", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/568/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/568/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/568/events", "html_url": "https://github.com/python-gino/gino/issues/568", "id": 506351716, "node_id": "MDU6SXNzdWU1MDYzNTE3MTY=", "number": 568, "title": "Ability to load from subquery", "user": {"login": "michaelkrukov", "id": 13236694, "node_id": "MDQ6VXNlcjEzMjM2Njk0", "avatar_url": "https://avatars3.githubusercontent.com/u/13236694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelkrukov", "html_url": "https://github.com/michaelkrukov", "followers_url": "https://api.github.com/users/michaelkrukov/followers", "following_url": "https://api.github.com/users/michaelkrukov/following{/other_user}", "gists_url": "https://api.github.com/users/michaelkrukov/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelkrukov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelkrukov/subscriptions", "organizations_url": "https://api.github.com/users/michaelkrukov/orgs", "repos_url": "https://api.github.com/users/michaelkrukov/repos", "events_url": "https://api.github.com/users/michaelkrukov/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelkrukov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-13T17:07:28Z", "updated_at": "2019-10-13T18:45:32Z", "closed_at": "2019-10-13T18:40:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Description\r\n\r\nI am trying to query for model and it's related models with limit and offset (for primary model) using a subquery. But the loader can't find columns. When I write\r\n\r\n```py\r\nAliasedOfferModel = Alias(OfferModel, 'limited_offers')\r\n\r\nquery = await (\r\n    OfferModel\r\n    .query\r\n    .order_by(OfferModel.created.desc())\r\n    .limit(pagination.limit)\r\n    .offset(pagination.offset)\r\n    .alias('limited_offers')\r\n    .outerjoin(OfferXTag)\r\n    # ...\r\n    .select()\r\n    .gino.load(\r\n        AliasedOfferModel.distinct(AliasedOfferModel.id).load(\r\n            add_tag=TagModel.distinct(TagModel.id),\r\n            # ...\r\n        )\r\n    )\r\n    .all()\r\n)\r\n```\r\n\r\nI receive an error: `sqlalchemy.exc.NoSuchColumnError: \"Could not locate column in row for column 'limited_offers.id'\"`, but I can see that the query is pretty much correct: `SELECT limited_offers.id, limited_offers.title, ...`. How can I load `OfferModel` from aliased subquery? Or is there other proper way to limit/offset query with join? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/566", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/566/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/566/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/566/events", "html_url": "https://github.com/python-gino/gino/issues/566", "id": 505933125, "node_id": "MDU6SXNzdWU1MDU5MzMxMjU=", "number": 566, "title": "How to set up quart and Gino", "user": {"login": "horlahlekhon", "id": 25941640, "node_id": "MDQ6VXNlcjI1OTQxNjQw", "avatar_url": "https://avatars1.githubusercontent.com/u/25941640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/horlahlekhon", "html_url": "https://github.com/horlahlekhon", "followers_url": "https://api.github.com/users/horlahlekhon/followers", "following_url": "https://api.github.com/users/horlahlekhon/following{/other_user}", "gists_url": "https://api.github.com/users/horlahlekhon/gists{/gist_id}", "starred_url": "https://api.github.com/users/horlahlekhon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/horlahlekhon/subscriptions", "organizations_url": "https://api.github.com/users/horlahlekhon/orgs", "repos_url": "https://api.github.com/users/horlahlekhon/repos", "events_url": "https://api.github.com/users/horlahlekhon/events{/privacy}", "received_events_url": "https://api.github.com/users/horlahlekhon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2019-10-11T15:57:19Z", "updated_at": "2019-10-19T06:09:14Z", "closed_at": "2019-10-19T06:09:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7\r\n* asyncpg version: 0.19.0\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11\r\n\r\n### Description\r\n\r\nI want to use gino as an orm with quart, but i cant get it to connect together....\r\nmost of the time i get : Gino engine is not initialized. when i try to acess the db api when the server is running.\r\n\r\nThe database tables were created but when i try to insert , i get this. and nothing seem to work.\r\n\r\n### What I Did\r\nbelow is how i try to connect it\r\n```python\r\nfrom config import DevelopmentConfig\r\nfrom quart import Quart\r\nimport asyncio\r\nfrom gino import Gino\r\n\r\napp = Quart(__name__)\r\n\r\napp.config.from_object(DevelopmentConfig)\r\ndb = Gino()\r\nfrom app.views import deep, neutral\r\n\r\napp.register_blueprint(deep)\r\napp.register_blueprint(neutral)\r\n\r\nasync def main():\r\n    await db.set_bind(DevelopmentConfig.DATABASE_URI)\r\n    await db.gino.create_all()\r\n\r\nif __name__ == '__main__':\r\n    app.run()\r\nasyncio.get_event_loop().run_until_complete(main())\r\n\r\n\r\n```\r\n\r\nThis is the error\r\n```\r\nRunning on http://127.0.0.1:5000 (CTRL + C to quit)\r\n[2019-10-11 16:52:12,978] Running on 127.0.0.1:5000 over http (CTRL + C to quit)\r\n[2019-10-11 16:52:20,575] ERROR in app: Exception on request GET /telegram/messages/fetch\r\nTraceback (most recent call last):\r\n  File \"/home/lekan/Documents/workspace/telegram-flask/lib/python3.7/site-packages/quart/app.py\", line 1524, in handle_request\r\n    return await self.full_dispatch_request(request_context)\r\n  File \"/home/lekan/Documents/workspace/telegram-flask/lib/python3.7/site-packages/quart/app.py\", line 1546, in full_dispatch_request\r\n    result = await self.handle_user_exception(error)\r\n  File \"/home/lekan/Documents/workspace/telegram-flask/lib/python3.7/site-packages/quart/app.py\", line 957, in handle_user_exception\r\n    raise error\r\n  File \"/home/lekan/Documents/workspace/telegram-flask/lib/python3.7/site-packages/quart/app.py\", line 1544, in full_dispatch_request\r\n    result = await self.dispatch_request(request_context)\r\n  File \"/home/lekan/Documents/workspace/telegram-flask/lib/python3.7/site-packages/quart/app.py\", line 1592, in dispatch_request\r\n    return await handler(**request_.view_args)\r\n  File \"/home/lekan/Documents/workspace/telegram-flask/deepview-telegram/app/views.py\", line 72, in fetch\r\n    msgs = await client.messages(limit=500)\r\n  File \"/home/lekan/Documents/workspace/telegram-flask/deepview-telegram/app/request.py\", line 50, in messages\r\n    msg = await DbMessage.get_messages(message_id=message.id)\r\n  File \"/home/lekan/Documents/workspace/telegram-flask/lib/python3.7/site-packages/gino/api.py\", line 135, in first\r\n    return await self._query.bind.first(self._query, *multiparams,\r\n  File \"/home/lekan/Documents/workspace/telegram-flask/lib/python3.7/site-packages/gino/api.py\", line 501, in __getattribute__\r\n    raise self._exception\r\ngino.exceptions.UninitializedError: Gino engine is not initialized.\r\n```\r\n\r\n\r\nI also tried to do this  in my views: \r\n\r\n```python\r\n@app.before_serving\r\nasync def main():\r\n    await db.set_bind(DevelopmentConfig.DATABASE_URI)\r\n    await db.gino.create_all()\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n\r\n```\r\n\r\nbut i get the same error.\r\n\r\n\r\nPlease i'd appreciate if you could help on how to connect and do db operations successfuly.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/565", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/565/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/565/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/565/events", "html_url": "https://github.com/python-gino/gino/issues/565", "id": 505163359, "node_id": "MDU6SXNzdWU1MDUxNjMzNTk=", "number": 565, "title": "Clarification on prepared statements", "user": {"login": "mikmatko", "id": 20861891, "node_id": "MDQ6VXNlcjIwODYxODkx", "avatar_url": "https://avatars0.githubusercontent.com/u/20861891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikmatko", "html_url": "https://github.com/mikmatko", "followers_url": "https://api.github.com/users/mikmatko/followers", "following_url": "https://api.github.com/users/mikmatko/following{/other_user}", "gists_url": "https://api.github.com/users/mikmatko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikmatko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikmatko/subscriptions", "organizations_url": "https://api.github.com/users/mikmatko/orgs", "repos_url": "https://api.github.com/users/mikmatko/repos", "events_url": "https://api.github.com/users/mikmatko/events{/privacy}", "received_events_url": "https://api.github.com/users/mikmatko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-10T09:55:59Z", "updated_at": "2019-10-15T08:08:13Z", "closed_at": "2019-10-15T08:08:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Gino seems to support prepared statements to some extent. As there is no documentation yet, could you please clarify how the prepared statements currently work.\r\n\r\nWhat is the relationship between Gino prepared statements, Sqlalchemy and asyncpg? As far as I understand,\r\n* Sqlalchemy does not support prepared statements\r\n* Asyncpg supports prepared statements\r\n\r\nBut as per https://github.com/MagicStack/asyncpg/issues/51#issuecomment-408605335\r\n* Asyncpg caches queries internally and discourages the use of prepared statements in most cases\r\n* Prepared statements are per-connection\r\n\r\nSo,\r\n* Does Gino utilize the LRU cache used internally by asyncpg? Does connection pooling affect this? Or is Gino simply unaware of any of the asyncpg internals regarding these?\r\n* => should prepared statements generally be utilized for repeated queries?\r\n* =>  what would be the way to approach repeated queries, e.g. we have an insert statement that is repeated thousands of times (with different values of course)\r\n\r\nThank you for your time!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/564", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/564/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/564/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/564/events", "html_url": "https://github.com/python-gino/gino/issues/564", "id": 503976366, "node_id": "MDU6SXNzdWU1MDM5NzYzNjY=", "number": 564, "title": "How to chain e.g. on_conflict_do_nothing() to Model.create()?", "user": {"login": "mikmatko", "id": 20861891, "node_id": "MDQ6VXNlcjIwODYxODkx", "avatar_url": "https://avatars0.githubusercontent.com/u/20861891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikmatko", "html_url": "https://github.com/mikmatko", "followers_url": "https://api.github.com/users/mikmatko/followers", "following_url": "https://api.github.com/users/mikmatko/following{/other_user}", "gists_url": "https://api.github.com/users/mikmatko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikmatko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikmatko/subscriptions", "organizations_url": "https://api.github.com/users/mikmatko/orgs", "repos_url": "https://api.github.com/users/mikmatko/repos", "events_url": "https://api.github.com/users/mikmatko/events{/privacy}", "received_events_url": "https://api.github.com/users/mikmatko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-08T11:03:14Z", "updated_at": "2019-10-10T08:06:40Z", "closed_at": "2019-10-10T08:06:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.3\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.5\r\n\r\n### Description\r\n\r\nFirst of all, Gino seems awesome. Thanks for your hard work :)\r\n\r\nI'm trying to understand how can I use things like `on_conflict_do_nothing()` (https://docs.sqlalchemy.org/en/13/dialects/postgresql.html#insert-on-conflict-upsert)\r\nwhen using Gino ORM. Full example below, but basically this is what I'm trying to achieve:\r\n\r\n```python\r\nawait User.create(id='1', name='jack', fullname='Jack Jones')  # succeeds\r\nawait User.create(id='1', name='jack', fullname='Jack Jones').on_conflict_do_nothing()  # raises exception\r\n```\r\n\r\nHow should things like these be approached when using Gino? \r\nThank you for your time!\r\n\r\n### What I Did\r\n\r\n```python\r\nfrom gino import Gino\r\n\r\ndb = Gino()\r\n\r\n\r\nclass User(db.Model):\r\n    __tablename__ = 'users'\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String)\r\n    fullname = db.Column(db.String)\r\n\r\n\r\nasync def main():\r\n    async with db.with_bind('postgresql://localhost/gino'):\r\n        await db.gino.create_all()\r\n        await User.create(id='1', name='jack', fullname='Jack Jones')\r\n\r\n        # how to do something similar to this:\r\n        await User.create(id='1', name='jack', fullname='Jack Jones').on_conflict_do_nothing()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/563", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/563/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/563/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/563/events", "html_url": "https://github.com/python-gino/gino/issues/563", "id": 503872263, "node_id": "MDU6SXNzdWU1MDM4NzIyNjM=", "number": 563, "title": "I want to know the gino equivalent for this particular sql query :- ", "user": {"login": "vasu343", "id": 10799969, "node_id": "MDQ6VXNlcjEwNzk5OTY5", "avatar_url": "https://avatars1.githubusercontent.com/u/10799969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vasu343", "html_url": "https://github.com/vasu343", "followers_url": "https://api.github.com/users/vasu343/followers", "following_url": "https://api.github.com/users/vasu343/following{/other_user}", "gists_url": "https://api.github.com/users/vasu343/gists{/gist_id}", "starred_url": "https://api.github.com/users/vasu343/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vasu343/subscriptions", "organizations_url": "https://api.github.com/users/vasu343/orgs", "repos_url": "https://api.github.com/users/vasu343/repos", "events_url": "https://api.github.com/users/vasu343/events{/privacy}", "received_events_url": "https://api.github.com/users/vasu343/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779919, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTk=", "url": "https://api.github.com/repos/python-gino/gino/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-08T07:19:38Z", "updated_at": "2019-10-09T02:08:56Z", "closed_at": "2019-10-08T16:28:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sql query :- SELECT * from calvents c, json_array_elements(c.invitees) as emails where CAST(emails ->> 'email' as TEXT) = 'abc@gmail.com'\r\n\r\ninvitees is an array of json objects :- [{\"name\":\"val1\", \"email\":\"val2\"}, .....]\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/559", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/559/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/559/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/559/events", "html_url": "https://github.com/python-gino/gino/issues/559", "id": 503183617, "node_id": "MDU6SXNzdWU1MDMxODM2MTc=", "number": 559, "title": "Inserting millions of rows.  Much much slower than SQLite.  Am I doing it wrong? How can I improve throughput?", "user": {"login": "brizzbane", "id": 4657471, "node_id": "MDQ6VXNlcjQ2NTc0NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/4657471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brizzbane", "html_url": "https://github.com/brizzbane", "followers_url": "https://api.github.com/users/brizzbane/followers", "following_url": "https://api.github.com/users/brizzbane/following{/other_user}", "gists_url": "https://api.github.com/users/brizzbane/gists{/gist_id}", "starred_url": "https://api.github.com/users/brizzbane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brizzbane/subscriptions", "organizations_url": "https://api.github.com/users/brizzbane/orgs", "repos_url": "https://api.github.com/users/brizzbane/repos", "events_url": "https://api.github.com/users/brizzbane/events{/privacy}", "received_events_url": "https://api.github.com/users/brizzbane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-07T00:29:48Z", "updated_at": "2019-10-12T11:47:59Z", "closed_at": "2019-10-12T11:47:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.3\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 9.6\r\n\r\n### Description\r\nI am building something similar/based on: https://github.com/p3pperp0tts/leaks_parser.\r\n\r\nParsing GB of text files, and inputting to database.  The difference between what I am doing, and p3pperp0tts/leaks_parser, is that I am only inserting emails/passwords, and I have a constraint for unique email/password combo (**could that be what is causing such a slow down?**).\r\n\r\np3pperp0tts/leaks_parser parser goes *much* *much* faster, parsing files very quickly.  i.e. to parse a 500mb compressed .tar.gz archive of txt files, to a 7.9 GB SQLite databse.. ..maybe a few minutes.  \r\n\r\n### What I Did\r\n\r\n```\r\n for line in read_file.read().splitlines():\r\n     email, password = parseline(line)\r\n     if email:\r\n          save_credentials = await Credentials.create(id_data_archive_file=data_archive_file.id, email=email, password=password)\r\n```\r\n\r\nWhereas a single text file in an archive inserting into postgresql... doing the above does maybe 10k rows in ...20-30 seconds (guess-timating).  It's a really large difference though when I am trying to go through millions of rows.\r\n\r\n_Just wondering why SQLite is so much faster_.. **is there something I am doing wrong?  Is there another way I should be trying to accomplish this?**\r\n\r\nI was expecting PostgreSQL to be on par with SQLite ... but I'm pretty newb to working with databases.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/558", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/558/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/558/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/558/events", "html_url": "https://github.com/python-gino/gino/issues/558", "id": 501732363, "node_id": "MDU6SXNzdWU1MDE3MzIzNjM=", "number": 558, "title": "How to get a number of updated rows?", "user": {"login": "vemikhaylov", "id": 38596482, "node_id": "MDQ6VXNlcjM4NTk2NDgy", "avatar_url": "https://avatars3.githubusercontent.com/u/38596482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemikhaylov", "html_url": "https://github.com/vemikhaylov", "followers_url": "https://api.github.com/users/vemikhaylov/followers", "following_url": "https://api.github.com/users/vemikhaylov/following{/other_user}", "gists_url": "https://api.github.com/users/vemikhaylov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemikhaylov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemikhaylov/subscriptions", "organizations_url": "https://api.github.com/users/vemikhaylov/orgs", "repos_url": "https://api.github.com/users/vemikhaylov/repos", "events_url": "https://api.github.com/users/vemikhaylov/events{/privacy}", "received_events_url": "https://api.github.com/users/vemikhaylov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-02T21:19:10Z", "updated_at": "2019-10-02T23:16:49Z", "closed_at": "2019-10-02T23:16:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.3\r\n* asyncpg version: 0.18.3\r\n* PostgreSQL version: 11.3\r\n\r\n### Description\r\n\r\nIs there any in-built interface to get number of matched and updated rows for update request?  \r\n\r\n### What I Did\r\n\r\nI can see that gino.status() for it returns tuple, which first element is a status from a database (\"UPDATE ...\").\r\n \r\nAs in documentation:\r\n```python\r\n    status, result = await User.update.values(\r\n        nickname='No.' + db.cast(User.id, db.Unicode),\r\n    ).where(\r\n        User.id > 10,\r\n    ).gino.status()\r\n    print(status)  # UPDATE 8\r\n```\r\n\r\nCertainly, I can parse this status to answer my question, however, is there more smooth way? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/557", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/557/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/557/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/557/events", "html_url": "https://github.com/python-gino/gino/issues/557", "id": 501131545, "node_id": "MDU6SXNzdWU1MDExMzE1NDU=", "number": 557, "title": "gino.exceptions.UninitializedError: Gino engine is not initialized.", "user": {"login": "dark0ghost", "id": 40036029, "node_id": "MDQ6VXNlcjQwMDM2MDI5", "avatar_url": "https://avatars3.githubusercontent.com/u/40036029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dark0ghost", "html_url": "https://github.com/dark0ghost", "followers_url": "https://api.github.com/users/dark0ghost/followers", "following_url": "https://api.github.com/users/dark0ghost/following{/other_user}", "gists_url": "https://api.github.com/users/dark0ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/dark0ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dark0ghost/subscriptions", "organizations_url": "https://api.github.com/users/dark0ghost/orgs", "repos_url": "https://api.github.com/users/dark0ghost/repos", "events_url": "https://api.github.com/users/dark0ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/dark0ghost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-10-01T20:35:58Z", "updated_at": "2019-10-02T21:56:07Z", "closed_at": "2019-10-02T21:56:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "this code https://pastebin.com/4KBtqG0h\r\ntraceback gino.exceptions.UninitializedError: Gino engine is not initialized.\r\nhow fix?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/554", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/554/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/554/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/554/events", "html_url": "https://github.com/python-gino/gino/issues/554", "id": 498467757, "node_id": "MDU6SXNzdWU0OTg0Njc3NTc=", "number": 554, "title": "can you suggest me the gino equivalent for this sql query?", "user": {"login": "vasu343", "id": 10799969, "node_id": "MDQ6VXNlcjEwNzk5OTY5", "avatar_url": "https://avatars1.githubusercontent.com/u/10799969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vasu343", "html_url": "https://github.com/vasu343", "followers_url": "https://api.github.com/users/vasu343/followers", "following_url": "https://api.github.com/users/vasu343/following{/other_user}", "gists_url": "https://api.github.com/users/vasu343/gists{/gist_id}", "starred_url": "https://api.github.com/users/vasu343/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vasu343/subscriptions", "organizations_url": "https://api.github.com/users/vasu343/orgs", "repos_url": "https://api.github.com/users/vasu343/repos", "events_url": "https://api.github.com/users/vasu343/events{/privacy}", "received_events_url": "https://api.github.com/users/vasu343/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-25T19:04:02Z", "updated_at": "2019-10-12T11:47:42Z", "closed_at": "2019-10-12T11:47:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "what would be the equivalent gino query for this :- \r\nselect distinct on (c.external_id) * from calvents c inner join calvents_rp crp on c.external_id=crp.external_id and crp.rp is True", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/540", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/540/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/540/events", "html_url": "https://github.com/python-gino/gino/issues/540", "id": 490263330, "node_id": "MDU6SXNzdWU0OTAyNjMzMzA=", "number": 540, "title": "Partial index", "user": {"login": "Pentusha", "id": 1904496, "node_id": "MDQ6VXNlcjE5MDQ0OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1904496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pentusha", "html_url": "https://github.com/Pentusha", "followers_url": "https://api.github.com/users/Pentusha/followers", "following_url": "https://api.github.com/users/Pentusha/following{/other_user}", "gists_url": "https://api.github.com/users/Pentusha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pentusha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pentusha/subscriptions", "organizations_url": "https://api.github.com/users/Pentusha/orgs", "repos_url": "https://api.github.com/users/Pentusha/repos", "events_url": "https://api.github.com/users/Pentusha/events{/privacy}", "received_events_url": "https://api.github.com/users/Pentusha/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679726980, "node_id": "MDU6TGFiZWw2Nzk3MjY5ODA=", "url": "https://api.github.com/repos/python-gino/gino/labels/feature%20request", "name": "feature request", "color": "fbca04", "default": false, "description": null}, {"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-09-06T10:53:56Z", "updated_at": "2019-09-08T19:09:21Z", "closed_at": "2019-09-08T19:09:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: Python 3.7.0\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 10.6\r\n\r\n### Description\r\n\r\nI want to create partial index for gino model with alembic.\r\n\r\n### What I Did\r\nModel:\r\n```python\r\nclass TestModel(db.Model):\r\n    my_column = db.Column(db.Unicode)\r\n    deleted_at = db.Column(db.DateTime)\r\n\r\n    _test_index = db.Index(\r\n        'test_index',\r\n        'my_column',\r\n        postgresql_where=deleted_at.is_(None),\r\n    )\r\n```\r\n\r\nGenerate migration\r\n```sh\r\nalembic revision -m \"test_index\" --autogenerate\r\n```\r\n\r\nTraceback\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/home/pentusha/.venvs/gino-test/bin/alembic\", line 11, in <module>\r\n    load_entry_point('alembic==1.0.10', 'console_scripts', 'alembic')()\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/config.py\", line 540, in main\r\n    CommandLine(prog=prog).main(argv=argv)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/config.py\", line 534, in main\r\n    self.run_cmd(cfg, options)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/config.py\", line 514, in run_cmd\r\n    **dict((k, getattr(options, k, None)) for k in kwarg)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/command.py\", line 199, in revision\r\n    scripts = [script for script in revision_context.generate_scripts()]\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/command.py\", line 199, in <listcomp>\r\n    scripts = [script for script in revision_context.generate_scripts()]\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/api.py\", line 504, in generate_scripts\r\n    yield self._to_script(generated_revision)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/api.py\", line 417, in _to_script\r\n    autogen_context, migration_script, template_args\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/render.py\", line 49, in _render_python_into_templatevars\r\n    _render_cmd_body(upgrade_ops, autogen_context)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/render.py\", line 73, in _render_cmd_body\r\n    lines = render_op(autogen_context, op)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/render.py\", line 85, in render_op\r\n    lines = util.to_list(renderer(autogen_context, op))\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/render.py\", line 112, in _render_modify_table\r\n    t_lines = render_op(autogen_context, t_op)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/render.py\", line 85, in render_op\r\n    lines = util.to_list(renderer(autogen_context, op))\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/render.py\", line 257, in _add_index\r\n    if len(index.kwargs)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/render.py\", line 253, in <listcomp>\r\n    for key, val in index.kwargs.items()\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/alembic/autogenerate/render.py\", line 509, in _render_potential_expr\r\n    value.compile(dialect=autogen_context.dialect, **compile_kw)\r\n  File \"<string>\", line 1, in <lambda>\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/elements.py\", line 462, in compile\r\n    return self._compiler(dialect, bind=bind, **kw)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/elements.py\", line 468, in _compiler\r\n    return dialect.statement_compiler(dialect, self, **kw)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 562, in __init__\r\n    Compiled.__init__(self, dialect, statement, **kwargs)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 319, in __init__\r\n    self.string = self.process(self.statement, **compile_kwargs)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 350, in process\r\n    return obj._compiler_dispatch(self, **kwargs)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/visitors.py\", line 91, in _compiler_dispatch\r\n    return meth(self, **kw)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 972, in visit_clauselist\r\n    c._compiler_dispatch(self, **kw) for c in clauselist.clauses\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 970, in <genexpr>\r\n    s\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 972, in <genexpr>\r\n    c._compiler_dispatch(self, **kw) for c in clauselist.clauses\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/visitors.py\", line 91, in _compiler_dispatch\r\n    return meth(self, **kw)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 1285, in visit_binary\r\n    return self._generate_generic_binary(binary, opstring, **kw)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 1332, in _generate_generic_binary\r\n    + binary.right._compiler_dispatch(\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/visitors.py\", line 91, in _compiler_dispatch\r\n    return meth(self, **kw)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 841, in visit_column\r\n    name = self._fallback_column_name(column)\r\n  File \"/home/pentusha/.venvs/gino-test/lib/python3.7/site-packages/sqlalchemy/sql/compiler.py\", line 832, in _fallback_column_name\r\n    \"Cannot compile Column object until \" \r\nsqlalchemy.exc.CompileError: Cannot compile Column object until its 'name' is assigned.\r\n```\r\n\r\nI found two workarounds, but I want to know the less hacky way to do this. Is it possible for `gino` to specify columns name immediately using python's descriptors?\r\n```python\r\ndeleted_at = db.Column(db.DateTime, name='deleted_at')\r\n```\r\nand \r\n```\r\n_test_index = db.Index(\r\n    'test_index',\r\n    'my_column',\r\n    postgresql_where=sa.text('deleted_at is null'),\r\n)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/539", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/539/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/539/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/539/events", "html_url": "https://github.com/python-gino/gino/issues/539", "id": 489840333, "node_id": "MDU6SXNzdWU0ODk4NDAzMzM=", "number": 539, "title": "Working with Multiple Event Loops", "user": {"login": "nilir", "id": 42519443, "node_id": "MDQ6VXNlcjQyNTE5NDQz", "avatar_url": "https://avatars3.githubusercontent.com/u/42519443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nilir", "html_url": "https://github.com/nilir", "followers_url": "https://api.github.com/users/nilir/followers", "following_url": "https://api.github.com/users/nilir/following{/other_user}", "gists_url": "https://api.github.com/users/nilir/gists{/gist_id}", "starred_url": "https://api.github.com/users/nilir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nilir/subscriptions", "organizations_url": "https://api.github.com/users/nilir/orgs", "repos_url": "https://api.github.com/users/nilir/repos", "events_url": "https://api.github.com/users/nilir/events{/privacy}", "received_events_url": "https://api.github.com/users/nilir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-05T15:32:20Z", "updated_at": "2020-02-11T00:31:04Z", "closed_at": "2020-02-06T17:10:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.7.0\r\n* Python version: 3.5.4\r\n\r\nWe have a service with two event loops on different threads (one for REST API, the other for background processing). Is there a way to use Gino with ORM classes that are accessed by both the event loops?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/536", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/536/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/536/events", "html_url": "https://github.com/python-gino/gino/issues/536", "id": 488693660, "node_id": "MDU6SXNzdWU0ODg2OTM2NjA=", "number": 536, "title": "Transaction rollback .. rough", "user": {"login": "mikepc", "id": 878739, "node_id": "MDQ6VXNlcjg3ODczOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/878739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikepc", "html_url": "https://github.com/mikepc", "followers_url": "https://api.github.com/users/mikepc/followers", "following_url": "https://api.github.com/users/mikepc/following{/other_user}", "gists_url": "https://api.github.com/users/mikepc/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikepc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikepc/subscriptions", "organizations_url": "https://api.github.com/users/mikepc/orgs", "repos_url": "https://api.github.com/users/mikepc/repos", "events_url": "https://api.github.com/users/mikepc/events{/privacy}", "received_events_url": "https://api.github.com/users/mikepc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-03T16:03:31Z", "updated_at": "2019-09-08T05:50:38Z", "closed_at": "2019-09-03T16:24:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n\r\n* PostgreSQL version: 11\r\n\r\n### Description\r\n\r\nI have no way to capture an exception *and* rollback. I don't know what the intent was with raise_rollback() but it makes error handling a bit baffling.  I've never had to roll back a transaction with an exception before, so it's throwing me for a loop.\r\n\r\n### What I Did\r\n\r\n```python\r\nasync def create_gathering_from_dict(gj):\r\n    try:\r\n       async with db.transaction() as tx:\r\n           try:\r\n               gm = Gathering(**gj)\r\n               g = await gm.create()\r\n               if g != None:\r\n                   # h = await get_first(g)\r\n                   hdata = generate_next_happening(g)\r\n                   gh = get_scoped_gathering_json(g, Scope.CREATOR)\r\n                   gh.happening = hdata\r\n                   await tx.raise_commit()\r\n               return gh\r\n           except Exception as e:\r\n               raise e # This is the error I want to pass to the caller\r\n           finally:\r\n               await tx.raise_rollback()\r\n    except Exception as e:\r\n       logger.error(e) # This line is never reached.\r\n       raise e\r\n\r\n\r\n\r\n\r\nasync def create_gathering(gathering_json, user_id):\r\n    gathering_json['public_id'] = generate(size=23)\r\n    gathering_json['posted_by'] = \"sir_greybeard\"\r\n    gathering_json['created_at'] = time.time()\r\n    gathering_json['created_by_id'] = user_id\r\n    try:\r\n        g = await create_gathering_from_dict(gathering_json)\r\n        if g != None:\r\n            return g.to_struct()\r\n    except Exception as e:\r\n        logger.error(e) # This is never reached\r\n        raise e\r\n\r\n```\r\nThe return value of the function is None, but I want the function to exit with the error the database threw, and defer a rollback.\r\n\r\nDepending on the error, it could be a user error or a system error, for instance a duplicate key exception. I can log the exception in the inner function, no problem, but the problem is the calling function never sees a raised exception. I've tried several things \r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/535", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/535/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/535/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/535/events", "html_url": "https://github.com/python-gino/gino/issues/535", "id": 487820223, "node_id": "MDU6SXNzdWU0ODc4MjAyMjM=", "number": 535, "title": "Another problem with \"Gino engine is not initialized.\"", "user": {"login": "ShagonRU", "id": 28485306, "node_id": "MDQ6VXNlcjI4NDg1MzA2", "avatar_url": "https://avatars1.githubusercontent.com/u/28485306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShagonRU", "html_url": "https://github.com/ShagonRU", "followers_url": "https://api.github.com/users/ShagonRU/followers", "following_url": "https://api.github.com/users/ShagonRU/following{/other_user}", "gists_url": "https://api.github.com/users/ShagonRU/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShagonRU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShagonRU/subscriptions", "organizations_url": "https://api.github.com/users/ShagonRU/orgs", "repos_url": "https://api.github.com/users/ShagonRU/repos", "events_url": "https://api.github.com/users/ShagonRU/events{/privacy}", "received_events_url": "https://api.github.com/users/ShagonRU/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-31T23:14:58Z", "updated_at": "2019-09-01T14:36:55Z", "closed_at": "2019-09-01T14:36:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.4\r\n\r\n### Description\r\n\r\nI've tried to use GINO in aiohttp through gino.ext.aiohttp. For ~5 hours i've tried to fix problems by myself, but i failed. Every time i get \"gino.exceptions.UninitializedError: Gino engine is not initialized.\"\r\nSo i tried to use examples from https://github.com/fantix/gino/blob/master/tests/test_aiohttp.py (so i've copied this test and models and it crashes with async_generator related errors), but they are did not work too, i used different combinations of methods from this file, docs and other issues\r\n\r\n### What I Did\r\nThere are a clear code version without random moves which i does while trying to solve problem, it is as close as possible to examples from documentation and tests.\r\n\r\n__main__.py (using it to launch application from docker)\r\n```python\r\ndef main() -> None:\r\n    app = init_app()\r\n    app_settings = app['config']['app']\r\n    aiohttp_swagger.setup_swagger(app)\r\n\r\n\r\n    web.run_app(\r\n        app,\r\n        host=app_settings['host'],\r\n        port=app_settings['port'],\r\n    )\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\napp.py\r\n```python\r\nfrom gino.ext.aiohttp import Gino\r\n\r\ndef init_app(config: Optional[List[str]] = None) -> web.Application:\r\n    db = Gino()\r\n    app = web.Application(middlewares=[error_middleware, db])\r\n\r\n    init_config(app, config=config)\r\n    init_routes(app)\r\n\r\n    app['config']['gino'] = {\r\n        'dsn': 'postgresql://{user}:{password}@{host}:{port}/{database}'.format(**app['config']['postgres'])\r\n    }\r\n    db.init_app(app)\r\n\r\n    return app\r\n```\r\n\r\nviews.py\r\n```python\r\n@auth_routes.get('/root/')\r\nasync def root(request: web.Request) -> web.Response:\r\n    from user_repo import setup_root_user\r\n    await setup_root_user(request)\r\n```\r\n\r\nuser_repo.py\r\n```python\r\nasync def setup_root_user(request):\r\n    await UserIdentity.create(id=uuid.uuid4(), login='root', password_hash=pbkdf2_sha256.hash('root'))\r\n```\r\n\r\nmodels.py\r\n```python\r\nfrom gino.ext.aiohttp import Gino\r\n\r\ndb = Gino()\r\n\r\nclass UserIdentity(db.Model):\r\n    __tablename__ = 'user_identity'\r\n\r\n    id = db.Column(db.Unicode(), primary_key=True)\r\n    login = db.Column(db.Unicode(), unique=True)\r\n    password_hash = db.Column(db.Unicode())\r\n```\r\n\r\nAnd i trying to use \"request['connection'].first_or_404(user_reate_query.query)\", but i just get following exception before any request, i do not even have time to use request['connection'] which is stored in app.\r\nI even tried to place \"await db.gino.create_all()\", bind, create engine in views.py, in user_repo, but every time get UninitializedError while tried to do a request to db. I evet get got a funny situation when I saw \"<gino.ext.aiohttp.GinoEngine object at 0x0000012CE265D388>\" from print and \"gino.exceptions.UninitializedError: Gino engine is not initialized\" from next line query.\r\nI've set a debug point inside of a \"after_server_stop\" method, and I have never visited this method, so I can decide that I do not call init_app more than 1 time and connection can't be closed.\r\n\r\nI have no idea what i should do.\r\n\r\nExample of traceback:\r\n```python\r\n======== Running on http://0.0.0.0:8080 ========\r\n(Press CTRL+C to quit)\r\nprint inside user_repo <gino.ext.aiohttp.GinoConnection object at 0x00000136D02699C8>\r\nprint inside user_repo <class 'gino.ext.aiohttp.GinoConnection'>\r\nError handling request\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Shagon\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\aiohttp\\web_protocol.py\", line 418, in start\r\n    resp = await task\r\n  File \"C:\\Users\\Shagon\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\aiohttp\\web_app.py\", line 458, in _handle\r\n    resp = await handler(request)\r\n  File \"C:\\Users\\Shagon\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\aiohttp\\web_middlewares.py\", line 119, in impl\r\n    return await handler(request)\r\n  File \"C:\\Users\\Shagon\\PycharmProjects\\nwwh\\newwheel_backend\\middlewares.py\", line 7, in error_middleware\r\n    response = await handler(request)\r\n  File \"C:\\Users\\Shagon\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\gino\\ext\\aiohttp.py\", line 113, in _middleware\r\n    return await handler(request)\r\n  File \"C:\\Users\\Shagon\\PycharmProjects\\nwwh\\newwheel_backend\\auth\\views.py\", line 104, in root\r\n    await setup_root_user(request)\r\n  File \"C:\\Users\\Shagon\\PycharmProjects\\nwwh\\newwheel_backend\\repository\\user_repo.py\", line 27, in setup_root_user\r\n    await UserIdentity.create(id=uuid.uuid4(),login='root', password_hash=pbkdf2_sha256.hash('root'))\r\n  File \"C:\\Users\\Shagon\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\gino\\crud.py\", line 441, in _create_without_instance\r\n    return await cls(**values)._create(bind=bind, timeout=timeout)\r\n  File \"C:\\Users\\Shagon\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\gino\\crud.py\", line 473, in _create\r\n    row = await bind.first(q)\r\n  File \"C:\\Users\\Shagon\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\gino\\api.py\", line 501, in __getattribute__\r\n    raise self._exception\r\ngino.exceptions.UninitializedError: Gino engine is not initialized.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/532", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/532/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/532/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/532/events", "html_url": "https://github.com/python-gino/gino/issues/532", "id": 486053368, "node_id": "MDU6SXNzdWU0ODYwNTMzNjg=", "number": 532, "title": "GINO don't released the connection after exception in Starlette extension", "user": {"login": "qulaz", "id": 32022811, "node_id": "MDQ6VXNlcjMyMDIyODEx", "avatar_url": "https://avatars0.githubusercontent.com/u/32022811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qulaz", "html_url": "https://github.com/qulaz", "followers_url": "https://api.github.com/users/qulaz/followers", "following_url": "https://api.github.com/users/qulaz/following{/other_user}", "gists_url": "https://api.github.com/users/qulaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/qulaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qulaz/subscriptions", "organizations_url": "https://api.github.com/users/qulaz/orgs", "repos_url": "https://api.github.com/users/qulaz/repos", "events_url": "https://api.github.com/users/qulaz/events{/privacy}", "received_events_url": "https://api.github.com/users/qulaz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779915, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTU=", "url": "https://api.github.com/repos/python-gino/gino/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": "Describes a bug in the system."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-gino/gino/milestones/9", "html_url": "https://github.com/python-gino/gino/milestone/9", "labels_url": "https://api.github.com/repos/python-gino/gino/milestones/9/labels", "id": 3283240, "node_id": "MDk6TWlsZXN0b25lMzI4MzI0MA==", "number": 9, "title": "GINO 0.8", "description": "GINO 0.8 was initially released in Oct 2018, now it is only open for security updates until Oct 2020. Everyone is recommended to move onto GINO 1.0. GINO 0.8 is considered as the fourth beta release before GINO 1.0.", "creator": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 16, "state": "open", "created_at": "2018-04-20T06:46:49Z", "updated_at": "2020-05-04T15:48:46Z", "due_on": null, "closed_at": null}, "comments": 5, "created_at": "2019-08-27T21:54:27Z", "updated_at": "2019-08-28T13:33:17Z", "closed_at": "2019-08-28T13:33:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.3\r\n* FastAPI version: 0.36.0\r\n* Starlette version: 0.12.7\r\n* uvicorn version: 0.8.6\r\n* uvloop version: 0.12.2\r\n\r\n\r\n### Description\r\n\r\nI'm use GINO with FastAPI + uvicorn. In development mode i use autoreload by uvicorn, it's works well, but if in my endpoint, where i use GINO, raising exception, GINO interferes stopping application.\r\n\r\n### What I Did\r\n\r\nFor example i have endpoint like this:\r\n```python\r\n@router.get('users/{user_id}', tags=['Users'], response_model=UserSchema)\r\nasync def retrieve_user(user_id: int):\r\n    user: User = await User.get(user_id)\r\n    return UserSchema.from_orm(user)\r\n```\r\nNow going to our server and try to get user with nonexistent ID (http://localhost:8000/users/1818456489489456). Oh no, we got \"Internal Server Error\". Well, let's fix it:\r\n```python\r\n@router.get('users/{user_id}', tags=['Users'], response_model=UserSchema)\r\nasync def retrieve_user(user_id: int):\r\n    user: User = await User.get(user_id)\r\n    if user:\r\n        return UserSchema.from_orm(user)\r\n    else:\r\n        raise HTTPException(status_code=404, detail=\"User with this ID not found\")\r\n```\r\nLet's test it again. But wait, server don't responding. Ok, let's see the logs:\r\n```\r\nWARNING: Detected file change in 'api/v1/users.py'. Reloading...\r\nINFO: Shutting down\r\nINFO: Waiting for application shutdown.\r\n*** minute wait ***\r\nWARNING: Pool.close() is taking over 60 seconds to complete. Check if you have any unreleased connections left. Use asyncio.wait_for() to set a timeout for Pool.close().\r\n```\r\nOnly manual \"hard\" reset of the server helps.\r\n\r\n### What i suggest\r\n\r\nAfter small research i think i found bug (?). After raising exception in endpoint, Starlette Strategy (i don't checked realizations for anothers frameworks) of GINO don't release the connection. I'm added try-finnaly block in class `_Middleware` in `gino.ext.starlette` (inspired by [this](https://python-gino.readthedocs.io/en/latest/gino.engine.html#gino.engine.GinoEngine.acquire))\r\n\r\nthis code\r\n```python\r\nasync def __call__(self, scope: Scope, receive: Receive,\r\n                   send: Send) -> None:\r\n    if (scope['type'] == 'http' and\r\n            self.db.config['use_connection_for_request']):\r\n        scope['connection'] = await self.db.acquire(lazy=True)\r\n        await self.app(scope, receive, send)\r\n        conn = scope.pop('connection', None)\r\n        if conn is not None:\r\n            await conn.release()\r\n        return\r\n```\r\ni edited like this:\r\n```python\r\nasync def __call__(self, scope: Scope, receive: Receive,\r\n                   send: Send) -> None:\r\n    if (scope['type'] == 'http' and\r\n            self.db.config['use_connection_for_request']):\r\n        scope['connection'] = await self.db.acquire(lazy=True)\r\n        try:\r\n            await self.app(scope, receive, send)\r\n        finally:\r\n            conn = scope.pop('connection', None)\r\n            if conn is not None:\r\n                await conn.release()\r\n        return\r\n```\r\nand after that everything works great.\r\n\r\nI am just starting to dive into the world of asynchronous python, so I'm not sure if this is a bug and i'm not sure if this that it completely fixes it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/531", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/531/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/531/events", "html_url": "https://github.com/python-gino/gino/issues/531", "id": 486041950, "node_id": "MDU6SXNzdWU0ODYwNDE5NTA=", "number": 531, "title": "How to get grandchildren and children along with a parent?", "user": {"login": "dulex123", "id": 2333381, "node_id": "MDQ6VXNlcjIzMzMzODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2333381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dulex123", "html_url": "https://github.com/dulex123", "followers_url": "https://api.github.com/users/dulex123/followers", "following_url": "https://api.github.com/users/dulex123/following{/other_user}", "gists_url": "https://api.github.com/users/dulex123/gists{/gist_id}", "starred_url": "https://api.github.com/users/dulex123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dulex123/subscriptions", "organizations_url": "https://api.github.com/users/dulex123/orgs", "repos_url": "https://api.github.com/users/dulex123/repos", "events_url": "https://api.github.com/users/dulex123/events{/privacy}", "received_events_url": "https://api.github.com/users/dulex123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-27T21:24:51Z", "updated_at": "2019-10-12T11:47:03Z", "closed_at": "2019-10-12T11:47:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to take a Parent with id=1 and get all its \"descendands\" with it? (children that have parent_id = 1, and grandchildren that have parent_id of those children)  Also how many queries will actually be executed?\r\n\r\nFrom what I see on docs it is possible to get bottom-up children with their parents, but is there top-down way?\r\n\r\nI have tried with the one below but it doesnt work\r\n```python\r\n    query = Parent.query.where(Parent.id==38)\r\n    ld = Parent.load(child=Child.on(Child.parent_id == Parent.id))\r\n    a = await query.gino.load(ld).all()\r\n```\r\n\r\nThanks!``", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/530", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/530/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/530/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/530/events", "html_url": "https://github.com/python-gino/gino/issues/530", "id": 484730319, "node_id": "MDU6SXNzdWU0ODQ3MzAzMTk=", "number": 530, "title": "Error while using with aiohttp", "user": {"login": "dyvol777", "id": 18194732, "node_id": "MDQ6VXNlcjE4MTk0NzMy", "avatar_url": "https://avatars1.githubusercontent.com/u/18194732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dyvol777", "html_url": "https://github.com/dyvol777", "followers_url": "https://api.github.com/users/dyvol777/followers", "following_url": "https://api.github.com/users/dyvol777/following{/other_user}", "gists_url": "https://api.github.com/users/dyvol777/gists{/gist_id}", "starred_url": "https://api.github.com/users/dyvol777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dyvol777/subscriptions", "organizations_url": "https://api.github.com/users/dyvol777/orgs", "repos_url": "https://api.github.com/users/dyvol777/repos", "events_url": "https://api.github.com/users/dyvol777/events{/privacy}", "received_events_url": "https://api.github.com/users/dyvol777/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-23T22:08:10Z", "updated_at": "2019-08-23T22:17:57Z", "closed_at": "2019-08-23T22:17:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "aiohttp==3.5.4\r\nasyncpg==0.18.3\r\nSQLAlchemy==1.3.7\r\ngino==0.8.3\r\n* Python version: 3.7.2\r\nPostgreSQL version: 11.5\r\n\r\n### Description\r\n\r\ni want to use gino with aiohttp, but i couldn't connect to database.\r\n\r\n### What I Did\r\n```\r\nfrom gino.ext.aiohttp import Gino\r\n    db = Gino()\r\n    app = web.Application(middlewares=[db])\r\n    app['config'] = {'dsn': postgre_url}\r\n    db.init_app(app)\r\n    app.add_routes(routes)\r\n    web.run_app(app)\r\n```\r\nand i get this log:\r\nTraceback (most recent call last):\r\n  File \r\n\r\n> \"C:\\Users\\Sergey\\AppData\\Local\\Programs\\Python\\Python37\\lib\\asyncio\\selector_events.py\", line 801, in _read_ready__data_received\r\n>     data = self._sock.recv(self.max_size)\r\n> ConnectionResetError: [WinError 10054] \u0423\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0439 \u0445\u043e\u0441\u0442 \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043e\u0440\u0432\u0430\u043b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\r\n> ...\r\n> asyncpg.exceptions.ConnectionDoesNotExistError: connection was closed in the middle of operation\r\n\r\nin Postgres log:\r\n\r\n> 2019-08-24 00:52:21.586 MSK [12164] \u0412\u0410\u0416\u041d\u041e:  \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \"postgres\" \u043d\u0435 \u043f\u0440\u043e\u0448\u0451\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043f\u043e\u0434\u043b\u0438\u043d\u043d\u043e\u0441\u0442\u0438 (\u043f\u043e \u043f\u0430\u0440\u043e\u043b\u044e)\r\n> 2019-08-24 00:52:21.586 MSK [12164] \u041f\u041e\u0414\u0420\u041e\u0411\u041d\u041e\u0421\u0422\u0418:  \u041f\u0430\u0440\u043e\u043b\u044c \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \"postgres\".\r\n> \t\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0435 82 \u0432 pg_hba.conf: \"host    all             all             ::1/128                 md5\"\r\n\r\nBut in models all ok:\r\n```\r\nfrom gino.ext.aiohttp import Gino\r\ndb = Gino()\r\n\r\nasync def main():\r\n    await db.set_bind(postgre_url)\r\n    await db.gino.create_all()\r\n    await db.pop_bind().close()\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio.get_event_loop().run_until_complete(main())\r\n```\r\n\r\n> postgre_url = 'postgresql://postgres:postgres@localhost:5432/shop'\r\n\r\nWhat i am doing wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/528", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/528/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/528/events", "html_url": "https://github.com/python-gino/gino/issues/528", "id": 483896104, "node_id": "MDU6SXNzdWU0ODM4OTYxMDQ=", "number": 528, "title": "question about transactions and reusing connections", "user": {"login": "pellekoster", "id": 32572805, "node_id": "MDQ6VXNlcjMyNTcyODA1", "avatar_url": "https://avatars2.githubusercontent.com/u/32572805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pellekoster", "html_url": "https://github.com/pellekoster", "followers_url": "https://api.github.com/users/pellekoster/followers", "following_url": "https://api.github.com/users/pellekoster/following{/other_user}", "gists_url": "https://api.github.com/users/pellekoster/gists{/gist_id}", "starred_url": "https://api.github.com/users/pellekoster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pellekoster/subscriptions", "organizations_url": "https://api.github.com/users/pellekoster/orgs", "repos_url": "https://api.github.com/users/pellekoster/repos", "events_url": "https://api.github.com/users/pellekoster/events{/privacy}", "received_events_url": "https://api.github.com/users/pellekoster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-22T10:06:52Z", "updated_at": "2019-10-12T11:46:45Z", "closed_at": "2019-10-12T11:46:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.5\r\n\r\n### Description\r\nI am planning to use GINO within a tornado app, and I have a question regarding transactions. When I start a transaction within a request, how does GINO keep the transaction/connections from leaking to other, concurrent, requests? How does for example User.create() know which connection to use? My guess is it has to do something with `GinoEngine._ctx` but I can't quite figure out how. Also, am I required to use the tornado extension for this to work?\r\n\r\nI'm trying to achieve something like this:\r\n```python\r\nclass AddSomeData(tornado.web.RequestHandler):\r\n    async def post(self):\r\n        some_nested_data = json.loads(request.body)\r\n        await add_nested_data(some_nested_data)\r\n\r\nasync def add_nested_data(data):\r\n    db: GinoEngine\r\n    async with db.transaction() as tx:\r\n        # do a bunch of Model.create() and Model.select()\r\n        ...\r\n        # do some custom query\r\n        tx.connection.scalar(\"custom query\")\r\n        db.scalar(\"custom query 2\")\r\n\r\n```\r\n\r\n- Do i need to set `reuse=False`? If so, how can i propagate the connection to the CRUD operations?\r\n- do I need to call `tx.connection.scalar` or can i use db.scalar directly?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/524", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/524/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/524/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/524/events", "html_url": "https://github.com/python-gino/gino/issues/524", "id": 481292966, "node_id": "MDU6SXNzdWU0ODEyOTI5NjY=", "number": 524, "title": "GINO and GeoAlchemy2, create_all() failed", "user": {"login": "symstu", "id": 19371604, "node_id": "MDQ6VXNlcjE5MzcxNjA0", "avatar_url": "https://avatars0.githubusercontent.com/u/19371604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/symstu", "html_url": "https://github.com/symstu", "followers_url": "https://api.github.com/users/symstu/followers", "following_url": "https://api.github.com/users/symstu/following{/other_user}", "gists_url": "https://api.github.com/users/symstu/gists{/gist_id}", "starred_url": "https://api.github.com/users/symstu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/symstu/subscriptions", "organizations_url": "https://api.github.com/users/symstu/orgs", "repos_url": "https://api.github.com/users/symstu/repos", "events_url": "https://api.github.com/users/symstu/events{/privacy}", "received_events_url": "https://api.github.com/users/symstu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-15T19:06:03Z", "updated_at": "2019-09-01T13:15:34Z", "closed_at": "2019-09-01T13:15:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.3\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11\r\n\r\n### Description\r\n\r\nSo, this is a problem with GeoAlchemy2 and create_all() method. As i understood it is not possible to use it now. Maybe there is easy way to mount it together?\r\n\r\n### What I Did\r\n```python\r\n# Model\r\nfrom geoalchemy2 import Geometry\r\n\r\nclass Organization(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.TEXT)\r\n    location = db.Column(Geometry('POINT'))\r\n\r\n\r\n# From my tests\r\n@pytest.fixture(scope='session', autouse=True)\r\nasync def prepare_db(loop):\r\n    async with db.with_bind(f'{url}/postgres') as engine:\r\n        await engine.status(db.text('CREATE DATABASE test_db'))\r\n\r\n    await db.set_bind(f'{url}/test_db')\r\n    await engine.status(db.text('CREATE EXTENSION postgis'))\r\n    await db.gino.create_all()\r\n\r\n    yield\r\n    await db.bind.close()\r\n\r\n    async with db.with_bind(f'{url}/postgres') as engine:\r\n        await engine.status(db.text('DROP DATABASE test_db'))\r\n```\r\n\r\nAnd after run this code crashes with \r\n```\r\nloop = <_UnixSelectorEventLoop running=False closed=False debug=False>\r\n\r\n    @pytest.fixture(scope='session', autouse=True)\r\n    async def prepare_db(loop):\r\n        async with db.with_bind(f'{url}/postgres') as engine:\r\n            await engine.status(db.text('CREATE DATABASE test_db;'))\r\n    \r\n        await db.set_bind(f'{url}/test_db')\r\n        await db.status(db.text('CREATE EXTENSION postgis;'))\r\n>       await db.gino.create_all(checkfirst=False)\r\n\r\ncomponents/restaurants/tests.py:25: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nlib64/python3.7/site-packages/gino/schema.py:324: in create_all\r\n    await self.create(bind=bind, tables=tables, checkfirst=checkfirst)\r\nlib64/python3.7/site-packages/gino/schema.py:314: in create\r\n    self._item, *args, **kwargs)\r\nlib64/python3.7/site-packages/gino/engine.py:792: in _run_visitor\r\n    await getattr(conn, '_run_visitor')(*args, **kwargs)\r\nlib64/python3.7/site-packages/gino/engine.py:484: in _run_visitor\r\n    **kwargs).traverse_single(element)\r\nlib64/python3.7/site-packages/gino/schema.py:29: in traverse_single\r\n    return await meth(obj, **kw)\r\nlib64/python3.7/site-packages/gino/schema.py:94: in visit_metadata\r\n    _is_metadata_operation=True)\r\nlib64/python3.7/site-packages/gino/schema.py:29: in traverse_single\r\n    return await meth(obj, **kw)\r\nlib64/python3.7/site-packages/gino/schema.py:116: in visit_table\r\n    _is_metadata_operation=_is_metadata_operation)\r\nlib64/python3.7/site-packages/gino/schema.py:401: in call\r\n    await _call_portable_instancemethod(fn, args, kw)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nfn = <function _setup_ddl_event_listeners.<locals>.before_create at 0x7f1072fe1378>\r\nargs = (Table('users', MetaData(bind=<gino.engine.GinoEngine object at 0x7f1071e7ba20>), Column('id', Integer(), table=<users...s.now at 0x7f107307e5f8; now>, for_update=False)), schema=None), <gino.engine.GinoConnection object at 0x7f1070617e80>)\r\nkw = {'_ddl_runner': <gino.schema.AsyncSchemaGenerator object at 0x7f1070617f60>, '_is_metadata_operation': True, 'checkfirst': False}\r\n\r\n    async def _call_portable_instancemethod(fn, args, kw):\r\n    \r\n        # target = getattr(fn, 'target', None)\r\n        # name = getattr(fn, 'name', None)\r\n        #\r\n        # if not target or not name:\r\n        #     return fn(*args, **kw)\r\n    \r\n>       m = getattr(fn.target, fn.name + '_async', None)\r\nE       AttributeError: 'function' object has no attribute 'target'\r\n\r\nlib64/python3.7/site-packages/gino/schema.py:386: AttributeError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /home/symstu/projects/eat_me_drink_me/lib64/python3.7/site-packages/gino/schema.py(386)_call_portable_instancemethod()\r\n-> m = getattr(fn.target, fn.name + '_async', None)\r\n(Pdb) fn\r\n<function _setup_ddl_event_listeners.<locals>.before_create at 0x7f1072fe1378>\r\n(Pdb) fn.__code__\r\n<code object before_create at 0x7f107308f030, file \"/home/symstu/projects/eat_me_drink_me/lib64/python3.7/site-packages/geoalchemy2/__init__.py\", line 23>\r\n```\r\nNot a problem. \r\nChange function *_call_portable_instancemethod* in *gino/schema.py* to this\r\n```python\r\nasync def _call_portable_instancemethod(fn, args, kw):\r\n    target = getattr(fn, 'target', None)\r\n    name = getattr(fn, 'name', None)\r\n\r\n    if not target or not name:\r\n        return fn(*args, **kw)\r\n\r\n    m = getattr(target, name + '_async', None)\r\n\r\n    if m is None:\r\n        return fn(*args, **kw)\r\n    else:\r\n        kw.update(fn.kwargs)\r\n        return await m(*args, **kw)\r\n```\r\nBut it's not a finish\r\n```\r\n        elif event == 'after-create':\r\n            # Restore original column list including managed Geometry columns\r\n            table.columns = table.info.pop('_saved_columns')\r\n    \r\n            for c in table.c:\r\n                # Add the managed Geometry columns with AddGeometryColumn()\r\n                if isinstance(c.type, Geometry) and c.type.management is True:\r\n                    args = [table.schema] if table.schema else []\r\n                    args.extend([\r\n                        table.name,\r\n                        c.name,\r\n                        c.type.srid,\r\n                        c.type.geometry_type,\r\n                        c.type.dimension\r\n                    ])\r\n                    if c.type.use_typmod is not None:\r\n                        args.append(c.type.use_typmod)\r\n    \r\n                    stmt = select([func.AddGeometryColumn(*args)])\r\n                    stmt = stmt.execution_options(autocommit=True)\r\n                    bind.execute(stmt)\r\n    \r\n                # Add spatial indices for the Geometry and Geography columns\r\n                if isinstance(c.type, (Geometry, Geography)) and \\\r\n                        c.type.spatial_index is True:\r\n                    if bind.dialect.name == 'sqlite':\r\n                        stmt = select([func.CreateSpatialIndex(table.name, c.name)])\r\n                        stmt = stmt.execution_options(autocommit=True)\r\n                        bind.execute(stmt)\r\n                    elif bind.dialect.name == 'postgresql':\r\n                        if table.schema:\r\n                            bind.execute('CREATE INDEX \"idx_%s_%s\" ON \"%s\".\"%s\" '\r\n                                         'USING GIST (\"%s\")' %\r\n                                         (table.name, c.name, table.schema,\r\n                                          table.name, c.name))\r\n                        else:\r\n>                           bind.execute('CREATE INDEX \"idx_%s_%s\" ON \"%s\" '\r\n                                         'USING GIST (\"%s\")' %\r\n                                         (table.name, c.name, table.name, c.name))\r\nE                           AttributeError: 'GinoConnection' object has no attribute 'execute'\r\n\r\nlib64/python3.7/site-packages/geoalchemy2/__init__.py:112: AttributeError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /home/symstu/projects/eat_me_drink_me/lib64/python3.7/site-packages/geoalchemy2/__init__.py(112)dispatch()\r\n-> bind.execute('CREATE INDEX \"idx_%s_%s\" ON \"%s\" '\r\n\r\n```\r\nSo, *bind.execute*. Unfortunately i don't know what to do in this case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/523", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/523/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/523/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/523/events", "html_url": "https://github.com/python-gino/gino/issues/523", "id": 481285510, "node_id": "MDU6SXNzdWU0ODEyODU1MTA=", "number": 523, "title": "Using gino in Sanic when db server isn't up shouldn't crash", "user": {"login": "igozali", "id": 1359333, "node_id": "MDQ6VXNlcjEzNTkzMzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1359333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/igozali", "html_url": "https://github.com/igozali", "followers_url": "https://api.github.com/users/igozali/followers", "following_url": "https://api.github.com/users/igozali/following{/other_user}", "gists_url": "https://api.github.com/users/igozali/gists{/gist_id}", "starred_url": "https://api.github.com/users/igozali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/igozali/subscriptions", "organizations_url": "https://api.github.com/users/igozali/orgs", "repos_url": "https://api.github.com/users/igozali/repos", "events_url": "https://api.github.com/users/igozali/events{/privacy}", "received_events_url": "https://api.github.com/users/igozali/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-15T18:48:26Z", "updated_at": "2019-08-19T21:34:28Z", "closed_at": "2019-08-19T21:34:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.5\r\n\r\n### Description\r\n\r\n**Expected:**\r\nIf I have a Sanic server with Gino initialized lazily (example below), I expect to at least still be able to start up my server without issues. Even if later API calls that access the database would fail, I can still return a 503 back to the user. Phrased another way, outages in external services (`postgresql` in this case) should not affect my ability to start up my server.\r\n\r\nFor reference, `Flask-SQLAlchemy` has this behavior where I can still start up my Flask server even if I don't have any databases running.\r\n\r\nWould it be possible to initialize the connection lazily (e.g. when calling `db.query.all()`) and not during the `db.init_app(app)` call? \r\n\r\nPossibly related: https://github.com/fantix/gino/issues/426\r\n\r\n**Actual:**\r\nSanic server crashes during start up.\r\n\r\n### What I Did\r\n\r\nMinimal, reproducible example follows.\r\n\r\nExample `main.py.`\r\n```py\r\nfrom sanic import Sanic\r\nfrom gino.ext.sanic import Gino\r\n\r\napp = Sanic()\r\napp.config[\"DB_DSN\"] = \"postgresql://postgres@localhost/postgres\"\r\n\r\ndb = Gino()\r\ndb.init_app(app)\r\n\r\napp.run()\r\n```\r\n\r\nIf I run without postgresql turned on, server start up crashes with the following traceback:\r\n```\r\n$ python3 main.py$ python3 main.py\r\n[2019-08-15 11:34:03 -0700] [7278] [INFO] Goin' Fast @ http://127.0.0.1:8000\r\n[2019-08-15 11:34:03 -0700] [7278] [ERROR] Experienced exception while trying to serve\r\nTraceback (most recent call last):\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/sanic/app.py\", line 1133, in run\r\n    serve(**server_settings)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/sanic/server.py\", line 775, in serve\r\n    trigger_events(before_start, loop)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/sanic/server.py\", line 633, in trigger_events\r\n    loop.run_until_complete(result)\r\n  File \"uvloop/loop.pyx\", line 1417, in uvloop.loop.Loop.run_until_complete\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/ext/sanic.py\", line 116, in before_server_start\r\n    **app.config.setdefault('DB_KWARGS', dict()),\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/ext/sanic.py\", line 131, in set_bind\r\n    return await super().set_bind(bind, loop=loop, **kwargs)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/api.py\", line 390, in set_bind\r\n    bind = await create_engine(bind, loop=loop, **kwargs)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/strategies.py\", line 43, in create\r\n    pool = await dialect.init_pool(u, loop, pool_class=pool_class)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/dialects/asyncpg.py\", line 368, in init_pool\r\n    **self._pool_kwargs)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/dialects/asyncpg.py\", line 213, in _init\r\n    self._pool = await asyncpg.create_pool(**args)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/pool.py\", line 400, in _async__init__\r\n    await self._initialize()\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/pool.py\", line 417, in _initialize\r\n    await first_ch.connect()\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/pool.py\", line 125, in connect\r\n    self._con = await self._pool._get_new_connection()\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/pool.py\", line 463, in _get_new_connection\r\n    **self._connect_kwargs)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/connection.py\", line 1688, in connect\r\n    max_cacheable_statement_size=max_cacheable_statement_size)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 551, in _connect\r\n    raise last_error\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 543, in _connect\r\n    connection_class=connection_class)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 513, in _connect_addr\r\n    connector, timeout=timeout, loop=loop)\r\n  File \"/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/asyncio/tasks.py\", line 442, in wait_for\r\n    return fut.result()\r\n  File \"uvloop/loop.pyx\", line 1927, in create_connection\r\n  File \"uvloop/loop.pyx\", line 1906, in uvloop.loop.Loop.create_connection\r\nConnectionRefusedError: [Errno 61] Connection refused\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 9, in <module>\r\n    app.run()\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/sanic/app.py\", line 1133, in run\r\n    serve(**server_settings)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/sanic/server.py\", line 775, in serve\r\n    trigger_events(before_start, loop)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/sanic/server.py\", line 633, in trigger_events\r\n    loop.run_until_complete(result)\r\n  File \"uvloop/loop.pyx\", line 1417, in uvloop.loop.Loop.run_until_complete\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/ext/sanic.py\", line 116, in before_server_start\r\n    **app.config.setdefault('DB_KWARGS', dict()),\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/ext/sanic.py\", line 131, in set_bind\r\n    return await super().set_bind(bind, loop=loop, **kwargs)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/api.py\", line 390, in set_bind\r\n    bind = await create_engine(bind, loop=loop, **kwargs)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/strategies.py\", line 43, in create\r\n    pool = await dialect.init_pool(u, loop, pool_class=pool_class)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/dialects/asyncpg.py\", line 368, in init_pool\r\n    **self._pool_kwargs)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/gino/dialects/asyncpg.py\", line 213, in _init\r\n    self._pool = await asyncpg.create_pool(**args)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/pool.py\", line 400, in _async__init__\r\n    await self._initialize()\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/pool.py\", line 417, in _initialize\r\n    await first_ch.connect()\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/pool.py\", line 125, in connect\r\n    self._con = await self._pool._get_new_connection()\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/pool.py\", line 463, in _get_new_connection\r\n    **self._connect_kwargs)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/connection.py\", line 1688, in connect\r\n    max_cacheable_statement_size=max_cacheable_statement_size)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 551, in _connect\r\n    raise last_error\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 543, in _connect\r\n    connection_class=connection_class)\r\n  File \"/Users/**redacted**/.local/share/virtualenvs/api-IivKMfqw/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 513, in _connect_addr\r\n    connector, timeout=timeout, loop=loop)\r\n  File \"/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/lib/python3.7/asyncio/tasks.py\", line 442, in wait_for\r\n    return fut.result()\r\n  File \"uvloop/loop.pyx\", line 1927, in create_connection\r\n  File \"uvloop/loop.pyx\", line 1906, in uvloop.loop.Loop.create_connection\r\nConnectionRefusedError: [Errno 61] Connection refused\r\nsys:1: RuntimeWarning: coroutine 'Loop.create_server' was never awaited\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/522", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/522/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/522/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/522/events", "html_url": "https://github.com/python-gino/gino/issues/522", "id": 479746397, "node_id": "MDU6SXNzdWU0Nzk3NDYzOTc=", "number": 522, "title": "Retrieve query with filter based on a dictionary", "user": {"login": "snguyenthanh", "id": 35214933, "node_id": "MDQ6VXNlcjM1MjE0OTMz", "avatar_url": "https://avatars3.githubusercontent.com/u/35214933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snguyenthanh", "html_url": "https://github.com/snguyenthanh", "followers_url": "https://api.github.com/users/snguyenthanh/followers", "following_url": "https://api.github.com/users/snguyenthanh/following{/other_user}", "gists_url": "https://api.github.com/users/snguyenthanh/gists{/gist_id}", "starred_url": "https://api.github.com/users/snguyenthanh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snguyenthanh/subscriptions", "organizations_url": "https://api.github.com/users/snguyenthanh/orgs", "repos_url": "https://api.github.com/users/snguyenthanh/repos", "events_url": "https://api.github.com/users/snguyenthanh/events{/privacy}", "received_events_url": "https://api.github.com/users/snguyenthanh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-12T16:48:18Z", "updated_at": "2019-08-14T03:13:10Z", "closed_at": "2019-08-13T07:14:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.3\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.4\r\n\r\n### Description\r\n\r\nI'm using Sanic with Gino. The `request.args` returned from Sanic is in `dictionary` format, and I would love to pass it to a Gino model to retrieve the rows that satisfies the key-values in `request.args`.\r\n\r\nFor example:\r\n```\r\nrequest.args = {\r\n    'gender': 'male',\r\n    'job': 'teacher',\r\n}\r\n\r\nusers = User.query.where(**request.args).gino.all()\r\n```\r\n\r\nIn Gino, are there any ways to achieve the above thing ?\r\n\r\nOr using something similiar to [Query.filter_by](https://docs.sqlalchemy.org/en/13/orm/query.html) in `SQLAlchemy`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/519", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/519/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/519/events", "html_url": "https://github.com/python-gino/gino/issues/519", "id": 478484049, "node_id": "MDU6SXNzdWU0Nzg0ODQwNDk=", "number": 519, "title": "Compatibility with Sanic 19.6.2", "user": {"login": "tng10", "id": 1923216, "node_id": "MDQ6VXNlcjE5MjMyMTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1923216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tng10", "html_url": "https://github.com/tng10", "followers_url": "https://api.github.com/users/tng10/followers", "following_url": "https://api.github.com/users/tng10/following{/other_user}", "gists_url": "https://api.github.com/users/tng10/gists{/gist_id}", "starred_url": "https://api.github.com/users/tng10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tng10/subscriptions", "organizations_url": "https://api.github.com/users/tng10/orgs", "repos_url": "https://api.github.com/users/tng10/repos", "events_url": "https://api.github.com/users/tng10/events{/privacy}", "received_events_url": "https://api.github.com/users/tng10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-08T13:49:50Z", "updated_at": "2019-08-08T14:00:20Z", "closed_at": "2019-08-08T14:00:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.6.8\r\n* asyncpg version: 0.18.2\r\n* aiocontextvars version: 0.2.1\r\n* PostgreSQL version: 11.3\r\n\r\n### Description\r\n\r\nRegarding the newest version of Sanic (19.6.2), an ASGI interface was introduced and since ASGI lifespan protocol has support for only two server events, we no longer can make usage of ```before_server_start``` and ```after_server_stop``` server events.\r\n\r\nAs a suggestion the file `ext/sanic.py` will need to have its server events replaced in order to be compatible with ASGI interface.\r\n\r\nDecorator of the method `before_server_start`\r\n\r\n**from**\r\n```\r\n@app.listener('before_server_start')\r\n```\r\n\r\n**to**\r\n```\r\n@app.listener('after_server_start')\r\n```\r\n\r\nDecorator of the method `after_server_stop`\r\n\r\n**from**\r\n```\r\n@app.listener('after_server_stop')\r\n```\r\n\r\n**to**\r\n```\r\n@app.listener('before_server_stop')\r\n```\r\n\r\nWhat do you guys think about it?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/518", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/518/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/518/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/518/events", "html_url": "https://github.com/python-gino/gino/issues/518", "id": 474500975, "node_id": "MDU6SXNzdWU0NzQ1MDA5NzU=", "number": 518, "title": "Aiohttp and with_bind method not working together", "user": {"login": "Reskov", "id": 4832451, "node_id": "MDQ6VXNlcjQ4MzI0NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4832451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Reskov", "html_url": "https://github.com/Reskov", "followers_url": "https://api.github.com/users/Reskov/followers", "following_url": "https://api.github.com/users/Reskov/following{/other_user}", "gists_url": "https://api.github.com/users/Reskov/gists{/gist_id}", "starred_url": "https://api.github.com/users/Reskov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Reskov/subscriptions", "organizations_url": "https://api.github.com/users/Reskov/orgs", "repos_url": "https://api.github.com/users/Reskov/repos", "events_url": "https://api.github.com/users/Reskov/events{/privacy}", "received_events_url": "https://api.github.com/users/Reskov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-07-30T10:21:45Z", "updated_at": "2020-04-16T16:50:59Z", "closed_at": "2020-04-16T16:50:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.4\r\n* asyncpg version:\r\n* aiocontextvars version:\r\n* PostgreSQL version:\r\n\r\n### Description\r\n\r\n`with_bind` does not work anymore with `aiohttp` extension after commit 5e5eabb7fc76ac1893a18f8bae54fe9691115807\r\n\r\n`with_bind` are passing loop as an positional argument, but positional argument was removed in gino 0.8.3, and only for `aiohttp` engine:(\r\n\r\nIs this expected?\r\n\r\n### What I Did\r\n\r\n\r\n```\r\nasync def a():\r\n    from gino.ext.aiohttp import Gino\r\n    gino = Gino()\r\n    async with gino.with_bind(\"postgresql://user:pass@localhost:5432/test\"):\r\n        pass\r\n\r\nawait a()\r\n```\r\n\r\n```\r\n  File \"<ipython-input-2-78a668b1753a>\", line 4, in a\r\n    async with gino.with_bind(\"postgresql://user:pass@localhost:5432/test\"):\r\n  File \"/venv/lib/python3.7/site-packages/gino/api.py\", line 181, in __aenter__\r\n    return await api.set_bind(bind, loop, **kwargs)\r\nTypeError: set_bind() takes 2 positional arguments but 3 were given\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/514", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/514/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/514/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/514/events", "html_url": "https://github.com/python-gino/gino/issues/514", "id": 470623834, "node_id": "MDU6SXNzdWU0NzA2MjM4MzQ=", "number": 514, "title": "column", "user": {"login": "aarlo", "id": 177769, "node_id": "MDQ6VXNlcjE3Nzc2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/177769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aarlo", "html_url": "https://github.com/aarlo", "followers_url": "https://api.github.com/users/aarlo/followers", "following_url": "https://api.github.com/users/aarlo/following{/other_user}", "gists_url": "https://api.github.com/users/aarlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/aarlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aarlo/subscriptions", "organizations_url": "https://api.github.com/users/aarlo/orgs", "repos_url": "https://api.github.com/users/aarlo/repos", "events_url": "https://api.github.com/users/aarlo/events{/privacy}", "received_events_url": "https://api.github.com/users/aarlo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-20T02:12:17Z", "updated_at": "2019-07-20T02:12:50Z", "closed_at": "2019-07-20T02:12:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version:\r\n* Python version:\r\n* asyncpg version:\r\n* aiocontextvars version:\r\n* PostgreSQL version:\r\n\r\n### Description\r\n\r\nDescribe what you were trying to get done.\r\nTell us what happened, what went wrong, and what you expected to happen.\r\n\r\n### What I Did\r\n\r\n```\r\nPaste the command(s) you ran and the output.\r\nIf there was a crash, please include the traceback here.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/513", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/513/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/513/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/513/events", "html_url": "https://github.com/python-gino/gino/issues/513", "id": 467099119, "node_id": "MDU6SXNzdWU0NjcwOTkxMTk=", "number": 513, "title": "Add Column in Models' query", "user": {"login": "thepabloaguilar", "id": 25423500, "node_id": "MDQ6VXNlcjI1NDIzNTAw", "avatar_url": "https://avatars1.githubusercontent.com/u/25423500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thepabloaguilar", "html_url": "https://github.com/thepabloaguilar", "followers_url": "https://api.github.com/users/thepabloaguilar/followers", "following_url": "https://api.github.com/users/thepabloaguilar/following{/other_user}", "gists_url": "https://api.github.com/users/thepabloaguilar/gists{/gist_id}", "starred_url": "https://api.github.com/users/thepabloaguilar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thepabloaguilar/subscriptions", "organizations_url": "https://api.github.com/users/thepabloaguilar/orgs", "repos_url": "https://api.github.com/users/thepabloaguilar/repos", "events_url": "https://api.github.com/users/thepabloaguilar/events{/privacy}", "received_events_url": "https://api.github.com/users/thepabloaguilar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-11T20:47:47Z", "updated_at": "2019-09-01T13:01:20Z", "closed_at": "2019-09-01T13:01:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.3\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 9.*\r\n\r\nI need to compute a new column and don't want to use this syntaxe, `db.select([Model, NewColumn]).gino.all()`. Exist some way to use the model to perform this, like `Model.add_column(NewColumn)`?\r\n\r\nI want to add a column with haversine distance:\r\n```python3\r\n(2 * 6371\r\n        *\r\n        db.func.asin(\r\n            db.func.sqrt(\r\n                db.func.pow(\r\n                    db.func.sin(\r\n                        db.func.radians((latitude - target_latitude) / 2)\r\n                    ), 2)\r\n                +\r\n                db.func.cos(\r\n                    db.func.radians(target_latitude)\r\n                )\r\n                *\r\n                db.func.cos(\r\n                    db.func.radians(latitude)\r\n                )\r\n                *\r\n                db.func.pow(\r\n                    db.func.sin(\r\n                        db.func.radians((longitude - target_longitude) / 2)\r\n                    ), 2)\r\n            )\r\n        )\r\n    )\r\n```\r\n\r\nI tried these options:\r\n* `Model.query.add_column(haversine_distance)`\r\n* `Model.load(haversine=haversine_distance)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/512", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/512/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/512/events", "html_url": "https://github.com/python-gino/gino/issues/512", "id": 464956174, "node_id": "MDU6SXNzdWU0NjQ5NTYxNzQ=", "number": 512, "title": "Question about the transactions", "user": {"login": "mister-vio", "id": 4400162, "node_id": "MDQ6VXNlcjQ0MDAxNjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4400162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mister-vio", "html_url": "https://github.com/mister-vio", "followers_url": "https://api.github.com/users/mister-vio/followers", "following_url": "https://api.github.com/users/mister-vio/following{/other_user}", "gists_url": "https://api.github.com/users/mister-vio/gists{/gist_id}", "starred_url": "https://api.github.com/users/mister-vio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mister-vio/subscriptions", "organizations_url": "https://api.github.com/users/mister-vio/orgs", "repos_url": "https://api.github.com/users/mister-vio/repos", "events_url": "https://api.github.com/users/mister-vio/events{/privacy}", "received_events_url": "https://api.github.com/users/mister-vio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-07-07T14:04:53Z", "updated_at": "2019-12-27T14:48:29Z", "closed_at": "2019-10-12T11:46:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.2\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.4\r\n\r\n### Description\r\n\r\nI'm trying to do a fixture which will wrap all tests with transactions and call rollback after test been done. And it looks like the fixture and test has a different connection because of all test works directly without a transaction. \r\n\r\nIf it is expected behaviour, can you please tell me how can I solve my issue?\r\n\r\n### My fixture\r\n\r\n```\r\n@pytest.yield_fixture(autouse=True)\r\nasync def rollback_db(loop):\r\n    from proj.models import db\r\n    async with db.transaction() as tx:\r\n        try:\r\n            yield None\r\n        finally:\r\n            tx.raise_rollback()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/511", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/511/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/511/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/511/events", "html_url": "https://github.com/python-gino/gino/issues/511", "id": 464941319, "node_id": "MDU6SXNzdWU0NjQ5NDEzMTk=", "number": 511, "title": "Manual transaction control broken", "user": {"login": "mister-vio", "id": 4400162, "node_id": "MDQ6VXNlcjQ0MDAxNjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4400162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mister-vio", "html_url": "https://github.com/mister-vio", "followers_url": "https://api.github.com/users/mister-vio/followers", "following_url": "https://api.github.com/users/mister-vio/following{/other_user}", "gists_url": "https://api.github.com/users/mister-vio/gists{/gist_id}", "starred_url": "https://api.github.com/users/mister-vio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mister-vio/subscriptions", "organizations_url": "https://api.github.com/users/mister-vio/orgs", "repos_url": "https://api.github.com/users/mister-vio/repos", "events_url": "https://api.github.com/users/mister-vio/events{/privacy}", "received_events_url": "https://api.github.com/users/mister-vio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-07T11:12:19Z", "updated_at": "2019-07-07T16:39:57Z", "closed_at": "2019-07-07T16:39:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7.2\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 11.4\r\n\r\n### Description\r\n\r\nThe [Manual transaction control](http://gino.fantix.pro/en/latest/transaction.html#manual-control) usage is broken, I'm trying to use transactions with manual control, but I'm getting an exception below, I found a workaround, with awaiting `__aenter__`, which is not described in the documentation, can you please fix the code if you are going to support the approach described in documentation or change the documentation, if you don't.\r\n\r\n### Exception\r\n\r\n```\r\ntx = await db.transaction()\r\nE       TypeError: object _TransactionContext can't be used in 'await' expression\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/509", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/509/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/509/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/509/events", "html_url": "https://github.com/python-gino/gino/issues/509", "id": 463042750, "node_id": "MDU6SXNzdWU0NjMwNDI3NTA=", "number": 509, "title": "tutorial using aiohttp+gino+alembic?", "user": {"login": "SultanNasyrovDeveloper", "id": 46191469, "node_id": "MDQ6VXNlcjQ2MTkxNDY5", "avatar_url": "https://avatars0.githubusercontent.com/u/46191469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SultanNasyrovDeveloper", "html_url": "https://github.com/SultanNasyrovDeveloper", "followers_url": "https://api.github.com/users/SultanNasyrovDeveloper/followers", "following_url": "https://api.github.com/users/SultanNasyrovDeveloper/following{/other_user}", "gists_url": "https://api.github.com/users/SultanNasyrovDeveloper/gists{/gist_id}", "starred_url": "https://api.github.com/users/SultanNasyrovDeveloper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SultanNasyrovDeveloper/subscriptions", "organizations_url": "https://api.github.com/users/SultanNasyrovDeveloper/orgs", "repos_url": "https://api.github.com/users/SultanNasyrovDeveloper/repos", "events_url": "https://api.github.com/users/SultanNasyrovDeveloper/events{/privacy}", "received_events_url": "https://api.github.com/users/SultanNasyrovDeveloper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-02T06:22:57Z", "updated_at": "2019-09-01T12:59:53Z", "closed_at": "2019-09-01T12:59:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I trying to write app using aiohttp + gino + alembic. But didn't find any information about how to properly use it. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/507", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/507/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/507/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/507/events", "html_url": "https://github.com/python-gino/gino/issues/507", "id": 461010051, "node_id": "MDU6SXNzdWU0NjEwMTAwNTE=", "number": 507, "title": "\"No connection in context\" error when running many-to-one relationship example", "user": {"login": "phoolish-philomath", "id": 45830329, "node_id": "MDQ6VXNlcjQ1ODMwMzI5", "avatar_url": "https://avatars3.githubusercontent.com/u/45830329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phoolish-philomath", "html_url": "https://github.com/phoolish-philomath", "followers_url": "https://api.github.com/users/phoolish-philomath/followers", "following_url": "https://api.github.com/users/phoolish-philomath/following{/other_user}", "gists_url": "https://api.github.com/users/phoolish-philomath/gists{/gist_id}", "starred_url": "https://api.github.com/users/phoolish-philomath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phoolish-philomath/subscriptions", "organizations_url": "https://api.github.com/users/phoolish-philomath/orgs", "repos_url": "https://api.github.com/users/phoolish-philomath/repos", "events_url": "https://api.github.com/users/phoolish-philomath/events{/privacy}", "received_events_url": "https://api.github.com/users/phoolish-philomath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-26T14:35:53Z", "updated_at": "2019-06-27T12:53:54Z", "closed_at": "2019-06-27T12:53:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Environment details\r\n* GINO version: 0.8.3\r\n* Python version: 3.7.3\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 10.8\r\n* OS: Ubuntu 18.04.1\r\n\r\n### Description\r\nI am having trouble replicating the example provided in the docs here: https://python-gino.readthedocs.io/en/latest/loaders.html#many-to-one-relationship\r\n\r\nHere is the script I am running:\r\n\r\n```\r\nimport asyncio\r\nfrom gino import Gino\r\n\r\nCONN_STRING = ...\r\n\r\ndb = Gino()\r\n\r\nclass Parent(db.Model):\r\n    __tablename__ = 'parents'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n\r\n\r\nclass Child(db.Model):\r\n    __tablename__ = 'children'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    parent_id = db.Column(db.Integer, db.ForeignKey('parents.id'))\r\n\r\nasync def main():\r\n   \r\n    await db.set_bind(CONN_STRING)\r\n    await db.gino.create_all()\r\n\r\n    await Parent.create(id=1)\r\n    await Parent.create(id=2)\r\n    await Parent.create(id=3)\r\n\r\n    await Child.create(id=1, parent_id=1)\r\n    await Child.create(id=2, parent_id=1)\r\n    await Child.create(id=3, parent_id=2)\r\n    await Child.create(id=4, parent_id=3)\r\n    await Child.create(id=5, parent_id=3)\r\n\r\n    # everything runs fine till it reaches this part \r\n    async for child in Child.load(parent=Parent).query.gino.iterate():\r\n        print(f'Parent of {child.id} is {child.parent.id}')\r\n\r\n    await db.pop_bind().close()\r\n\r\nif __name__ == '__main__':\r\n    asyncio.get_event_loop().run_until_complete(main())\r\n```\r\n\r\nThis is the error and a partial stack trace:\r\n`ValueError: No Connection in context, please provide one`\r\n```\r\nFile \"main.py\", line 56, in main\r\n    async for child in Child.load(parent=Parent).query.gino.iterate():\r\n  File \".../lib/python3.7/site-packages/gino/api.py\", line 171, in iterate\r\n    'No Connection in context, please provide one')\r\n```\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/501", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/501/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/501/events", "html_url": "https://github.com/python-gino/gino/issues/501", "id": 457739901, "node_id": "MDU6SXNzdWU0NTc3Mzk5MDE=", "number": 501, "title": "Gino engine is not initialized.", "user": {"login": "hdgone", "id": 40408449, "node_id": "MDQ6VXNlcjQwNDA4NDQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/40408449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdgone", "html_url": "https://github.com/hdgone", "followers_url": "https://api.github.com/users/hdgone/followers", "following_url": "https://api.github.com/users/hdgone/following{/other_user}", "gists_url": "https://api.github.com/users/hdgone/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdgone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdgone/subscriptions", "organizations_url": "https://api.github.com/users/hdgone/orgs", "repos_url": "https://api.github.com/users/hdgone/repos", "events_url": "https://api.github.com/users/hdgone/events{/privacy}", "received_events_url": "https://api.github.com/users/hdgone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-18T23:29:47Z", "updated_at": "2019-07-19T10:14:09Z", "closed_at": "2019-07-19T10:14:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.3\r\n* Python version: 3.7\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.2\r\n* PostgreSQL version: 9.4\r\n\r\n### Description\r\n\r\nI'm trying to create a simple API using aiohttp and Gino. The point is to make abstract generic views where I can only pass the model and it'll create views for it.\r\n\r\n### What I Did\r\n\r\nI created models and ran migrations using db.gino.create_all() . It worked fine but when I pass the model to my Endpoint class where I need to make a query, it fails with:\r\n\r\n> gino.exceptions.UninitializedError: Gino engine is not initialized.\r\n\r\nMy Endpoint class:\r\n\r\n```python\r\n\r\nclass ListEndpoint(Endpoint):\r\n    def __init__(self, model):\r\n        super().__init__()\r\n        self.model = model\r\n\r\n    async def get(self) -> Response:\r\n        obj_list = await self.model.query.gino.all()\r\n\r\n        if not obj_list:\r\n            return Response(\r\n                status=404,\r\n                body=json.dumps({'Not found': 404}),\r\n                content_type='application/json'\r\n            )\r\n\r\n        data = await ModelSerializer(obj_list).to_json()\r\n\r\n        return Response(\r\n            status=200, body=data, content_type='application/json'\r\n        )\r\n```\r\n\r\nlooks like it fails on:\r\n\r\n```python\r\nobj_list = await self.model.query.gino.all()\r\n```\r\n\r\nI thought it was enough for engine config. DB_ADDRESS looks like this:\r\n\r\n> postgresql://admin:pass@localhost:5432/library\r\n\r\n\r\nBut I also added config with 'dsn' on init_app.\r\nMy code from main.py:\r\n\r\n```python\r\nfrom aiohttp.web import Application, run_app\r\n\r\nfrom models import Country\r\nfrom resource import GenericResource\r\nfrom settings import DB_ADDRESS\r\n\r\nfrom gino.ext.aiohttp import Gino\r\n\r\n\r\napp = Application()\r\ndb = Gino()\r\n\r\ndb.init_app(\r\n    app,\r\n    config={\r\n        'dsn': DB_ADDRESS\r\n    }\r\n)\r\ncountries = GenericResource('countries', Country)\r\ncountries.register(app.router)\r\n\r\n\r\nif __name__ == '__main__':\r\n    run_app(app)\r\n```\r\n\r\nWhat's wrong? And I've also got a question, is this fine using async with db.with_bind every time I need to hit database? Thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/486", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/486/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/486/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/486/events", "html_url": "https://github.com/python-gino/gino/issues/486", "id": 445890888, "node_id": "MDU6SXNzdWU0NDU4OTA4ODg=", "number": 486, "title": "Clarification of Get Connected example", "user": {"login": "ajmcateer", "id": 7401629, "node_id": "MDQ6VXNlcjc0MDE2Mjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7401629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajmcateer", "html_url": "https://github.com/ajmcateer", "followers_url": "https://api.github.com/users/ajmcateer/followers", "following_url": "https://api.github.com/users/ajmcateer/following{/other_user}", "gists_url": "https://api.github.com/users/ajmcateer/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajmcateer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajmcateer/subscriptions", "organizations_url": "https://api.github.com/users/ajmcateer/orgs", "repos_url": "https://api.github.com/users/ajmcateer/repos", "events_url": "https://api.github.com/users/ajmcateer/events{/privacy}", "received_events_url": "https://api.github.com/users/ajmcateer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679726980, "node_id": "MDU6TGFiZWw2Nzk3MjY5ODA=", "url": "https://api.github.com/repos/python-gino/gino/labels/feature%20request", "name": "feature request", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "wwwjfy", "id": 126527, "node_id": "MDQ6VXNlcjEyNjUyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/126527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwjfy", "html_url": "https://github.com/wwwjfy", "followers_url": "https://api.github.com/users/wwwjfy/followers", "following_url": "https://api.github.com/users/wwwjfy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwjfy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwjfy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwjfy/subscriptions", "organizations_url": "https://api.github.com/users/wwwjfy/orgs", "repos_url": "https://api.github.com/users/wwwjfy/repos", "events_url": "https://api.github.com/users/wwwjfy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwjfy/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wwwjfy", "id": 126527, "node_id": "MDQ6VXNlcjEyNjUyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/126527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwjfy", "html_url": "https://github.com/wwwjfy", "followers_url": "https://api.github.com/users/wwwjfy/followers", "following_url": "https://api.github.com/users/wwwjfy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwjfy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwjfy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwjfy/subscriptions", "organizations_url": "https://api.github.com/users/wwwjfy/orgs", "repos_url": "https://api.github.com/users/wwwjfy/repos", "events_url": "https://api.github.com/users/wwwjfy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwjfy/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2019-05-20T01:38:08Z", "updated_at": "2019-06-06T14:47:43Z", "closed_at": "2019-06-06T14:47:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.82\r\n* Python version: 3.7.2\r\n* sqlite\r\n\r\n\r\n### Description\r\nI was looking at the examples and saw the following setup.\r\n```\r\nimport asyncio\r\n\r\nasync def main():\r\n    await db.set_bind('postgresql://localhost/gino')\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n```\r\nI am trying to use gino with starlette, I am converting over from flask and I am trying to translate this setup below from flask-sqlalchemy to gino\r\n\r\n```\r\nclass Channel(db.Model):\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String(120), unique=True, nullable=False)\r\n```\r\n\r\n```\r\n@bp.route('/create', methods=['POST'])\r\ndef register():\r\n    name = request.form.get('name')\r\n    icon = request.form.get('icon')\r\n\r\n    channel = Channel(name=name, icon=icon)\r\n    db.session.add(channel)\r\n    db.session.commit()\r\n    return jsonify(channel.dict(True))\r\n```\r\n\r\nHow would I handle that if everything has to go in the main method.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/480", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/480/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/480/events", "html_url": "https://github.com/python-gino/gino/issues/480", "id": 442956552, "node_id": "MDU6SXNzdWU0NDI5NTY1NTI=", "number": 480, "title": "Loader appears to be loading last instance of model for all in query", "user": {"login": "Ovyerus", "id": 18654005, "node_id": "MDQ6VXNlcjE4NjU0MDA1", "avatar_url": "https://avatars0.githubusercontent.com/u/18654005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ovyerus", "html_url": "https://github.com/Ovyerus", "followers_url": "https://api.github.com/users/Ovyerus/followers", "following_url": "https://api.github.com/users/Ovyerus/following{/other_user}", "gists_url": "https://api.github.com/users/Ovyerus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ovyerus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ovyerus/subscriptions", "organizations_url": "https://api.github.com/users/Ovyerus/orgs", "repos_url": "https://api.github.com/users/Ovyerus/repos", "events_url": "https://api.github.com/users/Ovyerus/events{/privacy}", "received_events_url": "https://api.github.com/users/Ovyerus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779919, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTk=", "url": "https://api.github.com/repos/python-gino/gino/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/python-gino/gino/milestones/9", "html_url": "https://github.com/python-gino/gino/milestone/9", "labels_url": "https://api.github.com/repos/python-gino/gino/milestones/9/labels", "id": 3283240, "node_id": "MDk6TWlsZXN0b25lMzI4MzI0MA==", "number": 9, "title": "GINO 0.8", "description": "GINO 0.8 was initially released in Oct 2018, now it is only open for security updates until Oct 2020. Everyone is recommended to move onto GINO 1.0. GINO 0.8 is considered as the fourth beta release before GINO 1.0.", "creator": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 16, "state": "open", "created_at": "2018-04-20T06:46:49Z", "updated_at": "2020-05-04T15:48:46Z", "due_on": null, "closed_at": null}, "comments": 6, "created_at": "2019-05-11T05:35:38Z", "updated_at": "2019-05-18T02:22:36Z", "closed_at": "2019-05-18T02:22:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.2\r\n* Python version: 3.7.2\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.1\r\n* PostgreSQL version: 9.5.16\r\n\r\n### Description\r\n\r\nI'm attempting to load rows with corresponding users and their roles relating to the row. However it appears as if Gino is replacing previous rows with later rows loaded values, resulting in all rows sharing the same loaded values as the last row.\r\n\r\n### What I Did\r\n(simplified)\r\n\r\n```py\r\nimport enum\r\nimport pprint\r\n\r\nfrom gino import Gino\r\n\r\ndb = Gino()\r\n\r\n\r\nclass AuthorRole(enum.Enum):\r\n    owner = 1\r\n    unassigned = 2\r\n\r\n\r\nclass Base:\r\n    id = db.Column(db.Integer(), primary_key=True)\r\n\r\n\r\nclass Mod(db.Model, Base):\r\n    __tablename__ = \"mod\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n        self._authors = []\r\n        self._owner = None\r\n\r\n    @property\r\n    def authors(self):\r\n        return self._authors\r\n\r\n    @authors.setter\r\n    def authors(self, value: \"User\"):\r\n        if hasattr(value, \"role\"):\r\n            if value.role.role == AuthorRole.owner:\r\n                self._owner = value\r\n\r\n        self._authors.append(value)\r\n\r\n    @property\r\n    def owner(self):\r\n        return self._owner\r\n\r\n    def to_dict(self):\r\n        return {\r\n            \"id\": self.id,\r\n            \"authors\": [a.to_dict() for a in self._authors],\r\n            \"owner\": self._owner.to_dict(),\r\n        }\r\n\r\n\r\nclass User(db.Model, Base):\r\n    __tablename__ = \"user\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n        self._role = None\r\n        self._role_name = None\r\n\r\n    @property\r\n    def role(self):\r\n        return self._role\r\n\r\n    @role.setter\r\n    def role(self, value: \"ModAuthor\"):\r\n        self._role = value\r\n        self._role_name = value.role.name\r\n\r\n    def to_dict(self):\r\n        return {\r\n            \"id\": self.id,\r\n            \"role\": self._role_name,\r\n            \"__\": self._role.to_dict(),  # for testing\r\n        }\r\n\r\n\r\nclass ModAuthor(db.Model, Base):\r\n    __tablename__ = \"user_mod\"\r\n\r\n    role = db.Column(db.Enum(AuthorRole), default=AuthorRole.unassigned)\r\n    user_id = db.Column(None, db.ForeignKey(\"user.id\", ondelete=\"CASCADE\"))\r\n    mod_id = db.Column(None, db.ForeignKey(\"mod.id\", ondelete=\"CASCADE\"))\r\n\r\n\r\nasync def route():\r\n    async with db.with_bind(\"postgresql://localhost/gino\"):\r\n        await db.gino.create_all()\r\n\r\n        u1 = await User.create()\r\n        u2 = await User.create()\r\n        u3 = await User.create()\r\n        u4 = await User.create()\r\n        m1 = await Mod.create()\r\n        m2 = await Mod.create()\r\n        await ModAuthor.create(mod_id=m1.id, user_id=u1.id, role=AuthorRole.owner)\r\n        await ModAuthor.create(mod_id=m1.id, user_id=u2.id)\r\n        await ModAuthor.create(mod_id=m2.id, user_id=u3.id, role=AuthorRole.owner)\r\n        await ModAuthor.create(mod_id=m2.id, user_id=u4.id)\r\n\r\n        query = Mod.outerjoin(ModAuthor).outerjoin(User).select()\r\n\r\n        loader = Mod.distinct(Mod.id).load(\r\n            authors=User.distinct(User.id).load(role=ModAuthor.distinct(ModAuthor.id))\r\n        )\r\n        results = await query.gino.load(loader).all()\r\n        pprint.pprint([m.to_dict() for m in results])\r\n\r\n        await db.gino.drop_all()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import asyncio\r\n\r\n    asyncio.run(route())\r\n```\r\n\r\n### What I Expect to Happen\r\n\r\n(`to_json`ed output)\r\n\r\n```jsonc\r\n[\r\n    {\r\n        \"authors\": [\r\n            {\r\n                \"__\": {\r\n                    // ...\r\n                    \"id\": \"1\",\r\n                    \"mod_id\": \"1\", // Same ID as the mod it should be a part of\r\n                },\r\n                // ...\r\n            },\r\n            {\r\n                \"__\": {\r\n                    // ...\r\n                    \"id\": \"2\",\r\n                    \"mod_id\": \"1\",\r\n                },\r\n                // ...\r\n            },\r\n        ],\r\n        \"id\": \"1\",\r\n        // ...\r\n    },\r\n    {\r\n        \"authors\": [\r\n            {\r\n                \"__\": {\r\n                    // ...\r\n                    \"id\": \"3\",\r\n                    \"mod_id\": \"2\", // Different mod ID, as it should\r\n                },\r\n                // ...\r\n            },\r\n            {\r\n                \"__\": {\r\n                    // ...\r\n                    \"id\": \"4\",\r\n                    \"mod_id\": \"2\",\r\n                },\r\n                // ...\r\n            },\r\n        ],\r\n        \"id\": \"2\",\r\n        // ...\r\n    },\r\n]\r\n```\r\n\r\n### What Actually Happens\r\n\r\n(`to_json`ed output)\r\n\r\n```jsonc\r\n[\r\n    {\r\n        \"authors\": [\r\n            {\r\n                \"__\": {\r\n                    // ...\r\n                    \"id\": \"1\",\r\n                    \"mod_id\": \"2\", // Different mod's ID!!\r\n                },\r\n                // ...\r\n            },\r\n            {\r\n                \"__\": {\r\n                    // ...\r\n                    \"id\": \"2\",\r\n                    \"mod_id\": \"2\",\r\n                },\r\n                // ...\r\n            },\r\n        ],\r\n        \"id\": \"1\",\r\n        // ...\r\n    },\r\n    {\r\n        \"authors\": [\r\n            {\r\n                \"__\": {\r\n                    // ...\r\n                    \"id\": \"1\", // Same ID as previous mod's authors\r\n                    \"mod_id\": \"2\", // Correct ID, because it belongs to this mod.\r\n                },\r\n                // ...\r\n            },\r\n            {\r\n                \"__\": {\r\n                    // ...\r\n                    \"id\": \"2\",\r\n                    \"mod_id\": \"2\",\r\n                },\r\n                // ...\r\n            },\r\n        ],\r\n        \"id\": \"2\",\r\n        // ...\r\n    },\r\n]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/478", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/478/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/478/events", "html_url": "https://github.com/python-gino/gino/issues/478", "id": 441213464, "node_id": "MDU6SXNzdWU0NDEyMTM0NjQ=", "number": 478, "title": "Session and Query", "user": {"login": "SantjagoCorkez", "id": 9654644, "node_id": "MDQ6VXNlcjk2NTQ2NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9654644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SantjagoCorkez", "html_url": "https://github.com/SantjagoCorkez", "followers_url": "https://api.github.com/users/SantjagoCorkez/followers", "following_url": "https://api.github.com/users/SantjagoCorkez/following{/other_user}", "gists_url": "https://api.github.com/users/SantjagoCorkez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SantjagoCorkez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SantjagoCorkez/subscriptions", "organizations_url": "https://api.github.com/users/SantjagoCorkez/orgs", "repos_url": "https://api.github.com/users/SantjagoCorkez/repos", "events_url": "https://api.github.com/users/SantjagoCorkez/events{/privacy}", "received_events_url": "https://api.github.com/users/SantjagoCorkez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679726980, "node_id": "MDU6TGFiZWw2Nzk3MjY5ODA=", "url": "https://api.github.com/repos/python-gino/gino/labels/feature%20request", "name": "feature request", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-gino/gino/milestones/6", "html_url": "https://github.com/python-gino/gino/milestone/6", "labels_url": "https://api.github.com/repos/python-gino/gino/milestones/6/labels", "id": 2741128, "node_id": "MDk6TWlsZXN0b25lMjc0MTEyOA==", "number": 6, "title": "GINO 1.1", "description": "GINO 1.1 is the next release with baked query and MySQL support.", "creator": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "open_issues": 6, "closed_issues": 2, "state": "open", "created_at": "2017-09-03T04:25:27Z", "updated_at": "2020-05-23T18:44:10Z", "due_on": null, "closed_at": null}, "comments": 4, "created_at": "2019-05-07T12:47:05Z", "updated_at": "2020-05-05T17:07:37Z", "closed_at": "2020-05-05T17:07:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to use SA's baked queries with Gino? According to documentation, baked queries require to use `sa.orm.Session` interface as Query object provider and that object as bakery accumulator. But Gino's Model.query provides `Executable` instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/476", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/476/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/476/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/476/events", "html_url": "https://github.com/python-gino/gino/issues/476", "id": 439150736, "node_id": "MDU6SXNzdWU0MzkxNTA3MzY=", "number": 476, "title": "Cascade delete?", "user": {"login": "Ovyerus", "id": 18654005, "node_id": "MDQ6VXNlcjE4NjU0MDA1", "avatar_url": "https://avatars0.githubusercontent.com/u/18654005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ovyerus", "html_url": "https://github.com/Ovyerus", "followers_url": "https://api.github.com/users/Ovyerus/followers", "following_url": "https://api.github.com/users/Ovyerus/following{/other_user}", "gists_url": "https://api.github.com/users/Ovyerus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ovyerus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ovyerus/subscriptions", "organizations_url": "https://api.github.com/users/Ovyerus/orgs", "repos_url": "https://api.github.com/users/Ovyerus/repos", "events_url": "https://api.github.com/users/Ovyerus/events{/privacy}", "received_events_url": "https://api.github.com/users/Ovyerus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-01T12:36:49Z", "updated_at": "2019-05-11T03:28:37Z", "closed_at": "2019-05-11T03:28:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Description\r\nSuppose you have a set of models like the following\r\n```py\r\ndb = Gino()\r\n\r\nclass User(db.Model):\r\n    __tablename__ = \"user\"\r\n\r\n    id = db.Column(db.Numeric(), primary_key=True)\r\n    username = db.Column(db.Unicode())\r\n\r\n\r\nclass Mod(db.Model):\r\n    __tablename__ = \"mod\"\r\n\r\n    id = db.Column(db.Numeric(), primary_key=True)\r\n    title = db.Column(db.Unicode())\r\n\r\nclass UserMod(db.Model):\r\n    __tablename__ = \"user_mod\"\r\n\r\n    user_id = db.Column(None, db.ForeignKey(\"user.id\"))\r\n    mod_id = db.Column(None, db.ForeignKey(\"mod.id\"))\r\n```\r\n\r\nTrying to delete a user that has a relation in `UserMod` like\r\n```py\r\nawait User.delete.where(User.id == user_id).gino.status()\r\n# or \r\nuser = await User.get(user_id)\r\nawait user.delete()\r\n```\r\nresults in an error message similar to this\r\n![error](https://erisa.is-a-good-waifu.com/2kmguTk.png)\r\n\r\nIs there anyway to do a cascade delete (deleting other rows linked via keys)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/475", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/475/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/475/events", "html_url": "https://github.com/python-gino/gino/issues/475", "id": 438073449, "node_id": "MDU6SXNzdWU0MzgwNzM0NDk=", "number": 475, "title": "Two engines with the same model", "user": {"login": "paulin-mipt", "id": 5514401, "node_id": "MDQ6VXNlcjU1MTQ0MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5514401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulin-mipt", "html_url": "https://github.com/paulin-mipt", "followers_url": "https://api.github.com/users/paulin-mipt/followers", "following_url": "https://api.github.com/users/paulin-mipt/following{/other_user}", "gists_url": "https://api.github.com/users/paulin-mipt/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulin-mipt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulin-mipt/subscriptions", "organizations_url": "https://api.github.com/users/paulin-mipt/orgs", "repos_url": "https://api.github.com/users/paulin-mipt/repos", "events_url": "https://api.github.com/users/paulin-mipt/events{/privacy}", "received_events_url": "https://api.github.com/users/paulin-mipt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-28T16:18:56Z", "updated_at": "2019-05-27T22:42:44Z", "closed_at": "2019-05-27T22:42:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Description\r\nHi again, fantix and the team!\r\n\r\nI'm thinking of the best way of having two engines with the same models (e.g. one engine for a rw- and one for ro- database replica). It seems to me, that if I create two Gino objects, I'll have to fully redeclare models, like this:\r\n```\r\ndb = Gino()\r\ndb_ro = Gino()\r\n\r\nclass MyModel(db.Model):\r\n  attr = db.Column(...)\r\n\r\nclass MyModelRo(db_ro.Model):\r\n  attr = db_ro.Column(...)\r\n```\r\n\r\nIs there a more elegant way to do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/473", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/473/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/473/events", "html_url": "https://github.com/python-gino/gino/issues/473", "id": 434887583, "node_id": "MDU6SXNzdWU0MzQ4ODc1ODM=", "number": 473, "title": "Specify schema for a table", "user": {"login": "paulin-mipt", "id": 5514401, "node_id": "MDQ6VXNlcjU1MTQ0MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5514401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulin-mipt", "html_url": "https://github.com/paulin-mipt", "followers_url": "https://api.github.com/users/paulin-mipt/followers", "following_url": "https://api.github.com/users/paulin-mipt/following{/other_user}", "gists_url": "https://api.github.com/users/paulin-mipt/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulin-mipt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulin-mipt/subscriptions", "organizations_url": "https://api.github.com/users/paulin-mipt/orgs", "repos_url": "https://api.github.com/users/paulin-mipt/repos", "events_url": "https://api.github.com/users/paulin-mipt/events{/privacy}", "received_events_url": "https://api.github.com/users/paulin-mipt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-18T17:54:23Z", "updated_at": "2019-04-19T20:01:23Z", "closed_at": "2019-04-19T10:25:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.2\r\n* Python version: 3.6.7\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.1\r\n* PostgreSQL version: 10.7\r\n\r\n### Description\r\nI want to specify a schema for my table (I mean the one you create with `CREATE SCHEMA schema_name;`). \r\n\r\nIt doesn't work out when I'm doing just `__tablename__ = schema_name.mytable` saying the relation does not exist, so I wonder if it's possible to do it in any other way. Tried to read the sources but no success yet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/468", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/468/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/468/events", "html_url": "https://github.com/python-gino/gino/issues/468", "id": 428881997, "node_id": "MDU6SXNzdWU0Mjg4ODE5OTc=", "number": 468, "title": "Query intersection and checking for IS NULL", "user": {"login": "paulin-mipt", "id": 5514401, "node_id": "MDQ6VXNlcjU1MTQ0MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5514401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulin-mipt", "html_url": "https://github.com/paulin-mipt", "followers_url": "https://api.github.com/users/paulin-mipt/followers", "following_url": "https://api.github.com/users/paulin-mipt/following{/other_user}", "gists_url": "https://api.github.com/users/paulin-mipt/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulin-mipt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulin-mipt/subscriptions", "organizations_url": "https://api.github.com/users/paulin-mipt/orgs", "repos_url": "https://api.github.com/users/paulin-mipt/repos", "events_url": "https://api.github.com/users/paulin-mipt/events{/privacy}", "received_events_url": "https://api.github.com/users/paulin-mipt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-03T17:14:55Z", "updated_at": "2020-08-20T11:02:24Z", "closed_at": "2019-04-18T17:47:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.2\r\n* Python version: 3.6.7\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.1\r\n* PostgreSQL version: 10.7\r\n\r\n### Description\r\n\r\nI was trying to express in Gino syntax query like `SELECT * FROM dbname WHERE key1=value AND key2 IS NULL`\r\n\r\n### What I Did\r\nIntuitively I wrote this:\r\n```\r\nresult = await MyModel.query.where(\r\n        MyModel.key1 == value and\r\n        MyModel.key2 is None\r\n    ).gino.all()\r\n```\r\nI figured out I did both things wrong -- query intersection and IS NULL checking. \r\n\r\n1. Is it true that multiple WHERE conditions has to be chained, like query.where(...).where(...)? Are there two actual queries (speaking about performance)?\r\n2. Maybe you could consider supporting also `is None` / `is not None`? There's nothing wrong with `== None` but it's just more pythonic way to go :)\r\n\r\nP.S. Thank you, you're doing a really great job!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/458", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/458/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/458/events", "html_url": "https://github.com/python-gino/gino/issues/458", "id": 421466236, "node_id": "MDU6SXNzdWU0MjE0NjYyMzY=", "number": 458, "title": "Foreign Key having multiple columns mapping. How to do it in Gino syntax?", "user": {"login": "neeraj-mindtickle", "id": 22593645, "node_id": "MDQ6VXNlcjIyNTkzNjQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/22593645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neeraj-mindtickle", "html_url": "https://github.com/neeraj-mindtickle", "followers_url": "https://api.github.com/users/neeraj-mindtickle/followers", "following_url": "https://api.github.com/users/neeraj-mindtickle/following{/other_user}", "gists_url": "https://api.github.com/users/neeraj-mindtickle/gists{/gist_id}", "starred_url": "https://api.github.com/users/neeraj-mindtickle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neeraj-mindtickle/subscriptions", "organizations_url": "https://api.github.com/users/neeraj-mindtickle/orgs", "repos_url": "https://api.github.com/users/neeraj-mindtickle/repos", "events_url": "https://api.github.com/users/neeraj-mindtickle/events{/privacy}", "received_events_url": "https://api.github.com/users/neeraj-mindtickle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-15T11:07:26Z", "updated_at": "2020-03-30T12:31:13Z", "closed_at": "2019-03-22T17:17:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.2\r\n* Python version: 3.7.2\r\n* asyncpg version:\r\n* aiocontextvars version:\r\n* PostgreSQL version:\r\n\r\n### Description\r\nI have 2 base tables and One table having a foreign key relationship with those two tables. \r\nraw sql query for creation of these tables:\r\n\r\n```sql\r\nCREATE TABLE 'theme_info' (\r\n\t'tenant_id' int8 NOT NULL,\r\n\t'theme_id' int8 NOT NULL,\r\n\t'theme_name' VARCHAR(255) NOT NULL,\r\n\t'description' text,\r\n\t'created_by' int8 NOT NULL DEFAULT 0,\r\n\t'updated_by' int8 NOT NULL DEFAULT 0,\r\n\t'created_at' TIMESTAMP NOT NULL DEFAULT now(),\r\n\t'updated_at' TIMESTAMP NOT NULL DEFAULT now(),\r\n\tPRIMARY KEY('tenant_id', 'theme_id')\r\n);\r\n\r\nCREATE TABLE 'keyword_info' (\r\n\t'tenant_id' int8 NOT NULL,\r\n\t'keyword_id' int8 NOT NULL,\r\n\t'keyword_text' VARCHAR(255),\r\n\t'created_at' TIMESTAMP NOT NULL DEFAULT now(),\r\n\t'updated_at' TIMESTAMP NOT NULL DEFAULT now(),\r\n\tPRIMARY KEY('tenant_id', 'keyword_id')\r\n);\r\n```\r\n\r\nTable having dependency on these two tables:\r\n\r\n```sql\r\nCREATE table 'theme_keyword_map' (\r\n\t'tenant_id' int8 NOT NULL,\r\n\t'theme_id' int8 NOT NULL,\r\n\t'keyword_id' int8 NOT NULL,\r\n\t'created_at' TIMESTAMP NOT NULL DEFAULT now(),\r\n\t'updated_at' TIMESTAMP NOT NULL DEFAULT now(),\r\n\tPRIMARY KEY(tenant_id, theme_id, keyword_id),\r\n\tFOREIGN Key (tenant_id, theme_id) REFERENCES theme_info (tenant_id, theme_id),\r\n\tFOREIGN KEY (tenant_id, keyword_id) REFERENCES keyword_info (tenant_id, keyword_id)\r\n);\r\n```\r\n\r\nI need to create these tables using Gino:\r\n\r\nI am currently doing this to achieve this:\r\n\r\n```python\r\nclass Themes(BaseModel):\r\n    __tablename__ = 'theme_info'\r\n    tenant_id = db.Column(db.BigInteger(), nullable=False, primary_key=True)\r\n    theme_id = db.Column(db.BigInteger(), nullable=False, primary_key=True)\r\n    theme_name = db.Column(db.VARCHAR(255), nullable=False)\r\n    description = db.Column(db.TEXT(), nullable=True)\r\n    created_by = db.Column(db.BigInteger(), nullable=False)\r\n    updated_by = db.Column(db.BigInteger(), nullable=False)\r\n    created_at = db.Column(db.DateTime(), nullable=False)\r\n    updated_at = db.Column(db.DateTime(), nullable=False)\r\n\r\nclass Keywords(BaseModel):\r\n    __tablename__ = 'keyword_info'\r\n    tenant_id = db.Column(db.BigInteger(), nullable=False, primary_key=True)\r\n    keyword_id = db.Column(db.BigInteger(), nullable=False, primary_key=True)\r\n    keyword_text = db.Column(db.VARCHAR(255), nullable=False)\r\n    created_at = db.Column(db.DateTime(), nullable=False)\r\n\r\nclass ThemeKeywordMap(BaseModel):\r\n    __tablename__ = 'theme_keyword_map_1'\r\n    tenant_id = db.Column(db.BigInteger(), db.ForeignKey('theme_info.tenant_id', 'keyword_info.tenant_id'), nullable=False, primary_key=True)\r\n    theme_id = db.Column(db.BigInteger(), db.ForeignKey('theme_info.theme_id'), nullable=False, primary_key=True)\r\n    keyword_id = db.Column(db.BigInteger(), db.ForeignKey('keyword_info.keyword_id'), nullable=False, primary_key=True)\r\n    created_at = db.Column(db.DateTime(), nullable=False)\r\n    updated_at = db.Column(db.DateTime(), nullable=False)\r\n```\r\n\r\nBut this is providing this error: \r\n\r\n```\r\nasyncpg.exceptions.InvalidForeignKeyError: there is no unique constraint matching given keys for referenced table \"theme_info\"\r\n```\r\n\r\nHow to create this 3rd table with Gino?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/457", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/457/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/457/events", "html_url": "https://github.com/python-gino/gino/issues/457", "id": 420071892, "node_id": "MDU6SXNzdWU0MjAwNzE4OTI=", "number": 457, "title": "attribute 'db' in aiohttp.py", "user": {"login": "EvgenyUsov", "id": 14868573, "node_id": "MDQ6VXNlcjE0ODY4NTcz", "avatar_url": "https://avatars1.githubusercontent.com/u/14868573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EvgenyUsov", "html_url": "https://github.com/EvgenyUsov", "followers_url": "https://api.github.com/users/EvgenyUsov/followers", "following_url": "https://api.github.com/users/EvgenyUsov/following{/other_user}", "gists_url": "https://api.github.com/users/EvgenyUsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/EvgenyUsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EvgenyUsov/subscriptions", "organizations_url": "https://api.github.com/users/EvgenyUsov/orgs", "repos_url": "https://api.github.com/users/EvgenyUsov/repos", "events_url": "https://api.github.com/users/EvgenyUsov/events{/privacy}", "received_events_url": "https://api.github.com/users/EvgenyUsov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 679726980, "node_id": "MDU6TGFiZWw2Nzk3MjY5ODA=", "url": "https://api.github.com/repos/python-gino/gino/labels/feature%20request", "name": "feature request", "color": "fbca04", "default": false, "description": null}, {"id": 651779918, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTg=", "url": "https://api.github.com/repos/python-gino/gino/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-12T16:06:14Z", "updated_at": "2019-03-21T02:01:47Z", "closed_at": "2019-03-21T02:01:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n### Description\r\nHi! I am using gino and aiohttp extension and in my application there is already a db attribute. Can send attribute name in arguments?\r\n\r\n### For example:\r\n\r\n```\r\ndef init_app(self, app, config = None, attr = 'db'):\r\n    app[attr] = self\r\n```\r\n\r\nhttps://github.com/fantix/gino/blob/d50fb882fbf3adf38b04f70da0f7d71574768081/gino/ext/aiohttp.py#L118\r\n\r\n\r\nWhat do you think?\r\n\r\nThank", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/456", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/456/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/456/events", "html_url": "https://github.com/python-gino/gino/issues/456", "id": 419934006, "node_id": "MDU6SXNzdWU0MTk5MzQwMDY=", "number": 456, "title": "Math operations in select", "user": {"login": "filantus", "id": 13046849, "node_id": "MDQ6VXNlcjEzMDQ2ODQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/13046849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/filantus", "html_url": "https://github.com/filantus", "followers_url": "https://api.github.com/users/filantus/followers", "following_url": "https://api.github.com/users/filantus/following{/other_user}", "gists_url": "https://api.github.com/users/filantus/gists{/gist_id}", "starred_url": "https://api.github.com/users/filantus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/filantus/subscriptions", "organizations_url": "https://api.github.com/users/filantus/orgs", "repos_url": "https://api.github.com/users/filantus/repos", "events_url": "https://api.github.com/users/filantus/events{/privacy}", "received_events_url": "https://api.github.com/users/filantus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-12T11:24:44Z", "updated_at": "2019-03-12T15:54:14Z", "closed_at": "2019-03-12T15:37:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.2\r\n* Python version: 3.7.2\r\n* asyncpg version: 0.18.3\r\n* aiocontextvars version: 0.2.1\r\n* PostgreSQL version: 11.1\r\n\r\n### Description\r\n\r\nHi!\r\n\r\nCan you please tell how possible to use math operations in models querying?\r\n\r\nI want reach with GINO orm same result like in raw sql, for example:\r\n```SQL\r\nSELECT t1.col_a * t2.col_b * 1.5 as value\r\nFROM t1\r\nJOIN t2 ON t2.some_key = t1.some_key;\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/455", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/455/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/455/events", "html_url": "https://github.com/python-gino/gino/issues/455", "id": 418634034, "node_id": "MDU6SXNzdWU0MTg2MzQwMzQ=", "number": 455, "title": "How to do selection of few columns with joining 2 tables", "user": {"login": "neeraj-mindtickle", "id": 22593645, "node_id": "MDQ6VXNlcjIyNTkzNjQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/22593645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neeraj-mindtickle", "html_url": "https://github.com/neeraj-mindtickle", "followers_url": "https://api.github.com/users/neeraj-mindtickle/followers", "following_url": "https://api.github.com/users/neeraj-mindtickle/following{/other_user}", "gists_url": "https://api.github.com/users/neeraj-mindtickle/gists{/gist_id}", "starred_url": "https://api.github.com/users/neeraj-mindtickle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neeraj-mindtickle/subscriptions", "organizations_url": "https://api.github.com/users/neeraj-mindtickle/orgs", "repos_url": "https://api.github.com/users/neeraj-mindtickle/repos", "events_url": "https://api.github.com/users/neeraj-mindtickle/events{/privacy}", "received_events_url": "https://api.github.com/users/neeraj-mindtickle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779920, "node_id": "MDU6TGFiZWw2NTE3Nzk5MjA=", "url": "https://api.github.com/repos/python-gino/gino/labels/question", "name": "question", "color": "cc317c", "default": true, "description": "A community question, closed when inactive."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-08T05:09:11Z", "updated_at": "2019-03-12T15:21:12Z", "closed_at": "2019-03-12T15:21:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.1\r\n* Python version: 3.7\r\n* asyncpg version:\r\n* aiocontextvars version:\r\n* PostgreSQL version:\r\n\r\n### Description\r\n\r\nDescribe what you were trying to get done.\r\nTell us what happened, what went wrong, and what you expected to happen.\r\n\r\nHi, \r\n\r\nI have 2 tables which I want to join and want to do selection of few columns with operations like array_agg on a column.\r\n\r\n### What I Did\r\n\r\nCurrently, my query looks like this:\r\n`\r\nMeetingThemes.__table__.join(Themes.__table__).\r\n                  select([MeetingThemes.meeting_id,\r\n                        db.func.array_agg(db.func.distinct(Themes.theme_name),\r\n                                            type_=db.ARRAY(db.VARCHAR)),\r\n                        db.func.count(db.func.distinct(Themes.theme_name))]).\r\n                  where(MeetingThemes.tenant_id == tenant_id).\r\n                  group_by(MeetingThemes.meeting_id).\r\n                  gino.\r\n                  all()\r\n`\r\n              \r\nThe error I am receiving:\r\nsqlalchemy.exc.ArgumentError: SQL expression object expected, got object of type <class 'list'> instead.\r\n\r\nOne possible reason is I am using distinct method on a column and then using array_agg on those distinct value. SQL raw query for my requirement looks like this and working fine:\r\n\r\n`\r\nSELECT mt.meeting_id as meeting_id, ARRAY_AGG(distinct themes.theme_name) as all_themes, count(DISTINCT(themes.theme_name)) as count FROM meeting_themes mt INNER JOIN theme_info themes on themes.theme_id = mt.theme_id WHERE mt.tenant_id = 123 GROUP by mt.meeting_id;\r\n`\r\n\r\nHow can I write this query in Gino? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/453", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/453/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/453/events", "html_url": "https://github.com/python-gino/gino/issues/453", "id": 418347913, "node_id": "MDU6SXNzdWU0MTgzNDc5MTM=", "number": 453, "title": "Setting timeout for all connections", "user": {"login": "Tiagoantunes52", "id": 14806230, "node_id": "MDQ6VXNlcjE0ODA2MjMw", "avatar_url": "https://avatars1.githubusercontent.com/u/14806230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tiagoantunes52", "html_url": "https://github.com/Tiagoantunes52", "followers_url": "https://api.github.com/users/Tiagoantunes52/followers", "following_url": "https://api.github.com/users/Tiagoantunes52/following{/other_user}", "gists_url": "https://api.github.com/users/Tiagoantunes52/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tiagoantunes52/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tiagoantunes52/subscriptions", "organizations_url": "https://api.github.com/users/Tiagoantunes52/orgs", "repos_url": "https://api.github.com/users/Tiagoantunes52/repos", "events_url": "https://api.github.com/users/Tiagoantunes52/events{/privacy}", "received_events_url": "https://api.github.com/users/Tiagoantunes52/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-07T14:46:07Z", "updated_at": "2019-03-22T17:16:45Z", "closed_at": "2019-03-22T17:16:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "* GINO version: 0.8.1\r\n* Python version: 3.6.6\r\n* asyncpg version: 0.18.2\r\n* aiocontextvars version: 0.2.1\r\n* PostgreSQL version: 10.6\r\n\r\n### Description\r\n\r\nHi,\r\nI am using gino and sanic extension and I am trying to figure out how to set a timeout for all connections.\r\n\r\n### What I Did\r\nI modified the set_bind method in api.py and it seemed to work. Just updated the execution options with the timeout.\r\n \r\n```python\r\n    async def set_bind(self, bind, loop=None, **kwargs):\r\n        \"\"\"\r\n        Bind self to the given :class:`~.engine.GinoEngine` and return it.\r\n\r\n        If the given ``bind`` is a string or\r\n        :class:`~sqlalchemy.engine.url.URL`, all arguments will be sent to\r\n        :func:`~gino.create_engine` to create a new engine, and return it.\r\n\r\n        :return: :class:`~.engine.GinoEngine`\r\n\r\n        \"\"\"\r\n        if isinstance(bind, str):\r\n            bind = make_url(bind)\r\n        if isinstance(bind, URL):\r\n            from . import create_engine\r\n            bind = await create_engine(bind, loop=loop, **kwargs)\r\n            bind.update_execution_options(timeout=1)\r\n        self.bind = bind\r\n        return bind\r\n```\r\n\r\nYet the best way would be to set this timeout as a config variable and then pass it as a kwarg to the set_bind method in api.py.\r\n\r\nWhat do you think?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-gino/gino/issues/452", "repository_url": "https://api.github.com/repos/python-gino/gino", "labels_url": "https://api.github.com/repos/python-gino/gino/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/python-gino/gino/issues/452/comments", "events_url": "https://api.github.com/repos/python-gino/gino/issues/452/events", "html_url": "https://github.com/python-gino/gino/issues/452", "id": 417109348, "node_id": "MDU6SXNzdWU0MTcxMDkzNDg=", "number": 452, "title": "Avoid using deprecated APIs", "user": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 651779917, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTc=", "url": "https://api.github.com/repos/python-gino/gino/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 651779918, "node_id": "MDU6TGFiZWw2NTE3Nzk5MTg=", "url": "https://api.github.com/repos/python-gino/gino/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/python-gino/gino/milestones/9", "html_url": "https://github.com/python-gino/gino/milestone/9", "labels_url": "https://api.github.com/repos/python-gino/gino/milestones/9/labels", "id": 3283240, "node_id": "MDk6TWlsZXN0b25lMzI4MzI0MA==", "number": 9, "title": "GINO 0.8", "description": "GINO 0.8 was initially released in Oct 2018, now it is only open for security updates until Oct 2020. Everyone is recommended to move onto GINO 1.0. GINO 0.8 is considered as the fourth beta release before GINO 1.0.", "creator": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 16, "state": "open", "created_at": "2018-04-20T06:46:49Z", "updated_at": "2020-05-04T15:48:46Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2019-03-05T04:18:36Z", "updated_at": "2019-06-07T02:12:31Z", "closed_at": "2019-03-19T16:57:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Running tests, these warning messages are seen:\r\n\r\nSQLAlchemy:\r\n\r\n```\r\n  <string>:2: SADeprecationWarning: The text.bindparams parameter is deprecated and will be removed in a future release.  Please refer to the TextClause.bindparams() method.\r\n```\r\n\r\naiohttp:\r\n\r\n```\r\n  /Volumes/Home/fantix/PycharmProjects/gino/gino/ext/aiohttp.py:144: DeprecationWarning: loop property is deprecated\r\n    loop=app_.loop,\r\n```\r\n\r\nWe should move away from the deprecated API.", "performed_via_github_app": null, "score": 1.0}]}