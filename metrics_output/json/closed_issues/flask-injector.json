{"total_count": 31, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/54", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/54/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/54/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/54", "id": 579447502, "node_id": "MDU6SXNzdWU1Nzk0NDc1MDI=", "number": 54, "title": "Running In Serverless Lambda Using serverless-wsgi", "user": {"login": "AhmedNourJamalElDin", "id": 18269514, "node_id": "MDQ6VXNlcjE4MjY5NTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/18269514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AhmedNourJamalElDin", "html_url": "https://github.com/AhmedNourJamalElDin", "followers_url": "https://api.github.com/users/AhmedNourJamalElDin/followers", "following_url": "https://api.github.com/users/AhmedNourJamalElDin/following{/other_user}", "gists_url": "https://api.github.com/users/AhmedNourJamalElDin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AhmedNourJamalElDin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AhmedNourJamalElDin/subscriptions", "organizations_url": "https://api.github.com/users/AhmedNourJamalElDin/orgs", "repos_url": "https://api.github.com/users/AhmedNourJamalElDin/repos", "events_url": "https://api.github.com/users/AhmedNourJamalElDin/events{/privacy}", "received_events_url": "https://api.github.com/users/AhmedNourJamalElDin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-11T18:00:22Z", "updated_at": "2020-03-12T16:44:12Z", "closed_at": "2020-03-12T12:30:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nIs there a way to use this package without `app.run()` where serverless doesnt require running the app using the aforementioned command?\r\n\r\nWhen using this package, for some reason I can't use \"contructor injection\", nor `injector.get(INTERFACE)` but this works:\r\n```python\r\nflask_injector = FlaskInjector(app, modules=modules)\r\n\r\n# some code\r\n# some other code\r\n# also some other code\r\n\r\nflask_injector.get(INTERFACE)\r\n```\r\n\r\nThanks :D ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/52", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/52/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/52/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/52", "id": 570797027, "node_id": "MDU6SXNzdWU1NzA3OTcwMjc=", "number": 52, "title": "Enhancement: Make underlying injector accessible from library", "user": {"login": "Chratho", "id": 619109, "node_id": "MDQ6VXNlcjYxOTEwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/619109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chratho", "html_url": "https://github.com/Chratho", "followers_url": "https://api.github.com/users/Chratho/followers", "following_url": "https://api.github.com/users/Chratho/following{/other_user}", "gists_url": "https://api.github.com/users/Chratho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chratho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chratho/subscriptions", "organizations_url": "https://api.github.com/users/Chratho/orgs", "repos_url": "https://api.github.com/users/Chratho/repos", "events_url": "https://api.github.com/users/Chratho/events{/privacy}", "received_events_url": "https://api.github.com/users/Chratho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-25T19:57:10Z", "updated_at": "2020-02-25T20:13:12Z", "closed_at": "2020-02-25T20:12:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "While integrating `Flask-Injector` I stumbled among a few cases where retrieving my injector-managed instances using dependency injection is not feasible. For example, I might have code like the following\r\n\r\n```\r\n@app.route(\"/foo\")\r\n@cost_center\r\ndef foo(db: sqlite3.Connection):\r\n    users = db.execute('SELECT * FROM users').all()\r\n    return render(\"foo.html\")\r\n``` \r\n\r\nwhere `cost_center` is some function-based decorator that measures runtime stats about the respective route and uses a `request`-scoped Stats-Collector to solve this task.\r\n\r\nSo far I think the best way to implement this is to give access to the underlying `injector` used by `Flask-Injector` itself, i.e. `injector.get(StatsCollector, scope=request)`. Since this requires the developer to manage separate access to the injector, it would be nice if `Flask-Injector` could support this use-case directly instead.\r\n\r\nGiven the current architecture, I am not sure whether there is a clean approach to this. At least I wanted to document this might be a valid use-case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/49", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/49/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/49/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/49", "id": 567172701, "node_id": "MDU6SXNzdWU1NjcxNzI3MDE=", "number": 49, "title": "before_request", "user": {"login": "davidrosenstark", "id": 5966369, "node_id": "MDQ6VXNlcjU5NjYzNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5966369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidrosenstark", "html_url": "https://github.com/davidrosenstark", "followers_url": "https://api.github.com/users/davidrosenstark/followers", "following_url": "https://api.github.com/users/davidrosenstark/following{/other_user}", "gists_url": "https://api.github.com/users/davidrosenstark/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidrosenstark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidrosenstark/subscriptions", "organizations_url": "https://api.github.com/users/davidrosenstark/orgs", "repos_url": "https://api.github.com/users/davidrosenstark/repos", "events_url": "https://api.github.com/users/davidrosenstark/events{/privacy}", "received_events_url": "https://api.github.com/users/davidrosenstark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-18T21:35:09Z", "updated_at": "2020-02-19T07:20:13Z", "closed_at": "2020-02-19T04:03:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you provide example of before_request? I have a fully working example with injection working on the routes but in the before request the injection is not using the singletons i have created in my AppModule configure function?\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/47", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/47/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/47/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/47", "id": 563797016, "node_id": "MDU6SXNzdWU1NjM3OTcwMTY=", "number": 47, "title": "Add support for Flask-restx", "user": {"login": "michaelbukachi", "id": 10145850, "node_id": "MDQ6VXNlcjEwMTQ1ODUw", "avatar_url": "https://avatars1.githubusercontent.com/u/10145850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelbukachi", "html_url": "https://github.com/michaelbukachi", "followers_url": "https://api.github.com/users/michaelbukachi/followers", "following_url": "https://api.github.com/users/michaelbukachi/following{/other_user}", "gists_url": "https://api.github.com/users/michaelbukachi/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelbukachi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelbukachi/subscriptions", "organizations_url": "https://api.github.com/users/michaelbukachi/orgs", "repos_url": "https://api.github.com/users/michaelbukachi/repos", "events_url": "https://api.github.com/users/michaelbukachi/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelbukachi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-12T07:06:42Z", "updated_at": "2020-02-19T07:17:32Z", "closed_at": "2020-02-19T07:17:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`Flask-restplus` has been forked and is now actively maintained at [flask-restx](https://github.com/python-restx/flask-restx). Any plans to add support? I could do a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/42", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/42/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/42/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/42", "id": 545244599, "node_id": "MDU6SXNzdWU1NDUyNDQ1OTk=", "number": 42, "title": "Cannot inject into teardown_request handler while using request scope", "user": {"login": "ollien", "id": 977151, "node_id": "MDQ6VXNlcjk3NzE1MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/977151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollien", "html_url": "https://github.com/ollien", "followers_url": "https://api.github.com/users/ollien/followers", "following_url": "https://api.github.com/users/ollien/following{/other_user}", "gists_url": "https://api.github.com/users/ollien/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollien/subscriptions", "organizations_url": "https://api.github.com/users/ollien/orgs", "repos_url": "https://api.github.com/users/ollien/repos", "events_url": "https://api.github.com/users/ollien/events{/privacy}", "received_events_url": "https://api.github.com/users/ollien/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-01-04T05:36:25Z", "updated_at": "2020-02-22T18:38:48Z", "closed_at": "2020-01-07T18:03:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have a request scoped variable, I cannot inject it into a `teardown_request` handler. If I do, I get the following exception.\r\n\r\n```\r\nError on request:\r\nTraceback (most recent call last):\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/werkzeug/local.py\", line 72, in __getattr__\r\n    return self.__storage__[self.__ident_func__()][name]\r\nKeyError: 139781434668800\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/werkzeug/serving.py\", line 304, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/werkzeug/serving.py\", line 292, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/flask/app.py\", line 2463, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/flask/app.py\", line 2457, in wsgi_app\r\n    ctx.auto_pop(error)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/flask/ctx.py\", line 452, in auto_pop\r\n    self.pop(exc)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/flask/ctx.py\", line 415, in pop\r\n    self.app.do_teardown_request(exc)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/flask/app.py\", line 2299, in do_teardown_request\r\n    func(exc)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/flask_injector.py\", line 89, in wrapper\r\n    return injector.call_with_injection(callable=fun, args=args, kwargs=kwargs)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/injector/__init__.py\", line 972, in call_with_injection\r\n    owner_key=self_.__class__ if self_ is not None else callable.__module__,\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/injector/__init__.py\", line 96, in wrapper\r\n    return function(*args, **kwargs)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/injector/__init__.py\", line 1017, in args_to_inject\r\n    instance = self.get(interface)  # type: Any\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/injector/__init__.py\", line 915, in get\r\n    result = scope_instance.get(interface, binding.provider).get(self)\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/flask_injector.py\", line 265, in get\r\n    return self._locals.scope[key]\r\n  File \"/home/nick/.local/share/virtualenvs/flask_injector_poc-sJYA9nHW/lib/python3.7/site-packages/werkzeug/local.py\", line 74, in __getattr__\r\n    raise AttributeError(name)\r\nAttributeError: scope\r\n```\r\n\r\nAfter some digging, it seems that this is because Flask executes teardown handlers in the reverse order that they are inserted ([see relevant source](https://github.com/pallets/flask/blob/master/src/flask/app.py#L2278)). Because [flask_injector inserts the request scope clean up as a teardown handler](https://github.com/alecthomas/flask_injector/blob/b4570a3069c0fbd740feaa6523f8489772a1b1d4/flask_injector.py#L333), after all others are inserted, flask_injector's handler is run before mine.\r\n\r\nI was able to hack around this by, after setting up my `FlaskInjector` running `app.teardown_request_funcs[None].reverse()`. This is not a great solution, IMO. I'm hesitant to submit a PR that just inserts this teardown handler as the first one, as the Flask docs don't seem to guarantee that the handlers are called in reverse order; it seems like an implementation detail.\r\n\r\nWhat follows is an (admittedly silly) proof of concept that produces the above exception on request.\r\n```py\r\nimport datetime\r\nimport flask\r\nimport flask_injector\r\nimport injector\r\n\r\napp = flask.Flask(__name__)\r\n\r\n\r\n@app.route('/')\r\ndef index(time: datetime.datetime):\r\n    return f'The time is {time.isoformat()}'\r\n\r\n\r\n@app.teardown_request\r\ndef teardown_handler(err: Exception, time: datetime.datetime):\r\n    print(f'Tearing down the request from {time.isoformat()}')\r\n\r\n\r\nflask_injector.FlaskInjector(app=app, modules=[\r\n    lambda binder: binder.bind(datetime.datetime, to=datetime.datetime.now(), scope=flask_injector.request)\r\n])\r\n\r\nif __name__ == '__main__':\r\n    # HACK: works around the bug.\r\n    # app.teardown_request_funcs[None].reverse()\r\n    app.run()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/36", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/36/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/36/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/36", "id": 430599171, "node_id": "MDU6SXNzdWU0MzA1OTkxNzE=", "number": 36, "title": "Error with error handler and typing", "user": {"login": "Sytten", "id": 2366731, "node_id": "MDQ6VXNlcjIzNjY3MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2366731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sytten", "html_url": "https://github.com/Sytten", "followers_url": "https://api.github.com/users/Sytten/followers", "following_url": "https://api.github.com/users/Sytten/following{/other_user}", "gists_url": "https://api.github.com/users/Sytten/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sytten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sytten/subscriptions", "organizations_url": "https://api.github.com/users/Sytten/orgs", "repos_url": "https://api.github.com/users/Sytten/repos", "events_url": "https://api.github.com/users/Sytten/events{/privacy}", "received_events_url": "https://api.github.com/users/Sytten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-08T18:38:41Z", "updated_at": "2019-04-27T19:16:29Z", "closed_at": "2019-04-27T11:36:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\nI seem to have a found a bug with the error handler and typing. Consider this code:\r\n```python\r\ndef init_error_handlers(app: Flask) -> None:\r\n    app.register_error_handler(SQLAlchemyError, handle_sqlalchemy_error)\r\n\r\n\r\ndef handle_sqlalchemy_error(error: SQLAlchemyError) -> Response:\r\n    logger.error(\"SQLAlchemy error: %s\", error)\r\n    return _create_json_error_response(\r\n        errors.BadRequest.default_message, errors.BadRequest.http_status_code\r\n    )\r\n```\r\n\r\nIf I remove the type on the error it works fine, but with the type:\r\n```\r\ninjector.CallError: Call to handle_sqlalchemy_error(DataError('(psycopg2.DataError) invalid input syntax for type uuid: \"61dc1bb7-ed81-448b-88ac-04996a0cff8\"\\nLINE 3: WHERE organisations.id = \\'61dc1bb7-ed81-448b-88ac-04996a0cff...\\n                                 ^\\n'), error=SQLAlchemyError()) failed: handle_sqlalchemy_error() got multiple values for argument 'error' (injection stack: [])\r\n```\r\n\r\nFull Call stack:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/******/Core/venv/lib/python3.7/site-packages/flask/app.py\", line 2292, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/******/venv/lib/python3.7/site-packages/flask/app.py\", line 1815, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/******/venv/lib/python3.7/site-packages/flask_cors/extension.py\", line 161, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/Users/******/venv/lib/python3.7/site-packages/flask/app.py\", line 1719, in handle_user_exception\r\n    return handler(e)\r\n  File \"/Users/******/venv/lib/python3.7/site-packages/flask_injector.py\", line 76, in wrapper\r\n    return injector.call_with_injection(callable=fun, args=args, kwargs=kwargs)\r\n  File \"/Users/******/venv/lib/python3.7/site-packages/injector/__init__.py\", line 868, in call_with_injection\r\n    reraise(e, CallError(self_, callable, args, dependencies, e, self._stack))\r\n  File \"/Users/******/venv/lib/python3.7/site-packages/injector/__init__.py\", line 67, in reraise\r\n    raise exception.with_traceback(tb)\r\n  File \"/Users/******/venv/lib/python3.7/site-packages/injector/__init__.py\", line 866, in call_with_injection\r\n    **dependencies)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/34", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/34/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/34/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/34", "id": 428971396, "node_id": "MDU6SXNzdWU0Mjg5NzEzOTY=", "number": 34, "title": "Use instance method for url rules", "user": {"login": "ReneHollander", "id": 5379596, "node_id": "MDQ6VXNlcjUzNzk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5379596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ReneHollander", "html_url": "https://github.com/ReneHollander", "followers_url": "https://api.github.com/users/ReneHollander/followers", "following_url": "https://api.github.com/users/ReneHollander/following{/other_user}", "gists_url": "https://api.github.com/users/ReneHollander/gists{/gist_id}", "starred_url": "https://api.github.com/users/ReneHollander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ReneHollander/subscriptions", "organizations_url": "https://api.github.com/users/ReneHollander/orgs", "repos_url": "https://api.github.com/users/ReneHollander/repos", "events_url": "https://api.github.com/users/ReneHollander/events{/privacy}", "received_events_url": "https://api.github.com/users/ReneHollander/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-03T20:57:05Z", "updated_at": "2019-04-05T07:48:59Z", "closed_at": "2019-04-05T07:48:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am trying to add instance methods to handle different endpoints. The instance of the class itself is created by injector and will add the routes to the flask app.\r\nBecause FlaskInjector needs to be run after adding all endpoints, I also bind the Flask app during the initialization step of the app.\r\n```python\r\nfrom flask import Flask\r\nfrom flask_injector import request, FlaskInjector\r\nfrom injector import inject, Module, singleton, Injector\r\n\r\n\r\nclass HelloWorldServiceModule(Module):\r\n    def configure(self, binder):\r\n        binder.bind(HelloWorldService, scope=request)\r\n\r\n\r\nclass HelloWorldService:\r\n    def hello_world(self, str):\r\n        return \"Hello \" + str\r\n\r\n\r\nclass HelloWorldEndpointModule(Module):\r\n    def configure(self, binder):\r\n        binder.install(HelloWorldServiceModule)\r\n        binder.bind(HelloWorldEndpoint, scope=singleton)\r\n\r\n\r\nclass HelloWorldEndpoint:\r\n    @inject\r\n    def __init__(self, app: Flask):\r\n        self.app = app\r\n        self.app.add_url_rule('/hello/<name>', 'hello', self.say_hello)\r\n\r\n    def say_hello(self, name, hello_world_service: HelloWorldService):\r\n        return hello_world_service.hello_world(name)\r\n\r\n\r\ndef start_app(clazz, modules):\r\n    flask_app = Flask(__name__)\r\n\r\n    def configure_flask(binder):\r\n        binder.bind(Flask, to=flask_app, scope=singleton)\r\n\r\n    modules.insert(0, configure_flask)\r\n    injector = Injector(modules=modules, auto_bind=False)\r\n    injector.get(clazz)\r\n    FlaskInjector(app=flask_app, injector=injector)\r\n\r\n    flask_app.run('0.0.0.0')\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    start_app(HelloWorldEndpoint, [HelloWorldEndpointModule])\r\n```\r\n\r\nRunning the app causes the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/mnt/c/Users/Rene Hollander/repositories/rep0st/flask_injector_magic.py\", line 47, in <module>\r\n    start_app(HelloWorldEndpoint, [HelloWorldEndpointModule])\r\n  File \"/mnt/c/Users/Rene Hollander/repositories/rep0st/flask_injector_magic.py\", line 41, in start_app\r\n    FlaskInjector(app=flask_app, injector=injector)\r\n  File \"/mnt/c/Users/Rene Hollander/repositories/rep0st/venv/lib/python3.6/site-packages/flask_injector.py\", line 309, in __init__\r\n    process_dict(container, injector)\r\n  File \"/mnt/c/Users/Rene Hollander/repositories/rep0st/venv/lib/python3.6/site-packages/flask_injector.py\", line 337, in process_dict\r\n    d[key] = wrap_fun(value, injector)\r\n  File \"/mnt/c/Users/Rene Hollander/repositories/rep0st/venv/lib/python3.6/site-packages/flask_injector.py\", line 65, in wrap_fun\r\n    return wrap_fun(inject(fun), injector)\r\n  File \"/mnt/c/Users/Rene Hollander/repositories/rep0st/venv/lib/python3.6/site-packages/injector/__init__.py\", line 1055, in inject\r\n    return method_wrapper(function, bindings)\r\n  File \"/mnt/c/Users/Rene Hollander/repositories/rep0st/venv/lib/python3.6/site-packages/injector/__init__.py\", line 1132, in method_wrapper\r\n    read_and_store_bindings(bindings)\r\n  File \"/mnt/c/Users/Rene Hollander/repositories/rep0st/venv/lib/python3.6/site-packages/injector/__init__.py\", line 1128, in read_and_store_bindings\r\n    f.__bindings__ = merged_bindings\r\nAttributeError: 'method' object has no attribute '__bindings__'\r\n```\r\nI guess FlaskInjector just does not support instance methods at this point.\r\n\r\nI will further investigate the issue tomorrow and maybe try to get a fix for it, hoping there is nothing obvious I am missing in regards to the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/33", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/33/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/33/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/33", "id": 426155536, "node_id": "MDU6SXNzdWU0MjYxNTU1MzY=", "number": 33, "title": "Support for flask rebar", "user": {"login": "Sytten", "id": 2366731, "node_id": "MDQ6VXNlcjIzNjY3MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2366731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sytten", "html_url": "https://github.com/Sytten", "followers_url": "https://api.github.com/users/Sytten/followers", "following_url": "https://api.github.com/users/Sytten/following{/other_user}", "gists_url": "https://api.github.com/users/Sytten/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sytten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sytten/subscriptions", "organizations_url": "https://api.github.com/users/Sytten/orgs", "repos_url": "https://api.github.com/users/Sytten/repos", "events_url": "https://api.github.com/users/Sytten/events{/privacy}", "received_events_url": "https://api.github.com/users/Sytten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-27T19:56:00Z", "updated_at": "2019-03-28T00:01:50Z", "closed_at": "2019-03-27T23:57:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was wondering if it would be complex to support flask-rebar (https://github.com/plangrid/flask-rebar). Basically:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users//****//Projects//****//Core/venv/lib/python3.7/site-packages/flask/app.py\", line 1813, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/Users//****//Projects//****//Core/venv/lib/python3.7/site-packages/flask/app.py\", line 1799, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/Users/****/Projects/****/Core/venv/lib/python3.7/site-packages/flask_rebar/rebar.py\", line 127, in wrapped\r\n    rv = f(*args, **kwargs)\r\nTypeError: auth_callback() missing 1 required positional argument: 'service'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/32", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/32/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/32/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/32", "id": 423547656, "node_id": "MDU6SXNzdWU0MjM1NDc2NTY=", "number": 32, "title": "Memory leaks when exceptions thrown", "user": {"login": "mvarga6", "id": 8801545, "node_id": "MDQ6VXNlcjg4MDE1NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8801545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvarga6", "html_url": "https://github.com/mvarga6", "followers_url": "https://api.github.com/users/mvarga6/followers", "following_url": "https://api.github.com/users/mvarga6/following{/other_user}", "gists_url": "https://api.github.com/users/mvarga6/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvarga6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvarga6/subscriptions", "organizations_url": "https://api.github.com/users/mvarga6/orgs", "repos_url": "https://api.github.com/users/mvarga6/repos", "events_url": "https://api.github.com/users/mvarga6/events{/privacy}", "received_events_url": "https://api.github.com/users/mvarga6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-21T02:17:21Z", "updated_at": "2020-02-23T18:37:16Z", "closed_at": "2020-02-23T18:37:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've injected some objects into a route that I found is commonly throwing exception.  When this occurs, the app memory usage starts to climb every time another exception is thrown.  I'm using the `@injector` decorator on the function.  I'm thinking that the objects are injected \"per request\" and are not being cleaned up.  Does this seem possible or expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/30", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/30/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/30/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/30", "id": 395901280, "node_id": "MDU6SXNzdWUzOTU5MDEyODA=", "number": 30, "title": "handling requirements of the flask app itself (not a bug, looking for suggestions)", "user": {"login": "trondhindenes", "id": 1747120, "node_id": "MDQ6VXNlcjE3NDcxMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1747120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trondhindenes", "html_url": "https://github.com/trondhindenes", "followers_url": "https://api.github.com/users/trondhindenes/followers", "following_url": "https://api.github.com/users/trondhindenes/following{/other_user}", "gists_url": "https://api.github.com/users/trondhindenes/gists{/gist_id}", "starred_url": "https://api.github.com/users/trondhindenes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trondhindenes/subscriptions", "organizations_url": "https://api.github.com/users/trondhindenes/orgs", "repos_url": "https://api.github.com/users/trondhindenes/repos", "events_url": "https://api.github.com/users/trondhindenes/events{/privacy}", "received_events_url": "https://api.github.com/users/trondhindenes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-04T11:55:59Z", "updated_at": "2019-05-31T14:47:26Z", "closed_at": "2019-05-31T14:47:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to refactor some existing flask apps, and have stumbled into this problem that I can't seem to figure out:\r\nGiven this app (relevant parts of the \"main\" flask app file):\r\n```\r\nconfiguration = ConfigGetter.get_config()\r\nlogger = log.setup_custom_logger(configuration.logging_level)\r\n\r\nfrom awsinventory.api_inventory import ApiInventory\r\nfrom awsinventory.healthz import HealthEndpoint\r\n\r\ndef configure_dependency_injection(binder):\r\n    binder.bind(Configuration, to=configuration, scope=singleton)\r\n    binder.bind(AwsInventory, scope=singleton)\r\n    if configuration.consul_enabled:\r\n        binder.bind(ConsulHelper, scope=singleton)\r\n\r\nFlaskInjector(app=app, modules=[configure_dependency_injection])\r\n```\r\nWe're using a configuration object with other classes can depend on, and it works great. However, I also need the same configuration object when instantiating the flask app itself (loglevel, flask host/port, etc are all in the configuration object).\r\n\r\nIn an ideal world I would have injected the configuration class into the flask app in the same way as for AwsInventory/ConsulHelper, but since the binder takes the flask app as a parameter, that's not possible - as far as I can see the flask app needs to be instantiated before the FlaskInjector can execute. \r\n\r\nThe result of these problems is that I'm unable to set up testing the way I want, because the flask app is still dependent on a \"manually\" instantiated configuration object, which means I can't just inject it during test as was my plan.\r\n\r\nAgain, this is not a bug and I totally understand it if you (maintainer) is unwilling to provide \"support\" like this (in that case I'll just close it). \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/29", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/29/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/29/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/29", "id": 394708831, "node_id": "MDU6SXNzdWUzOTQ3MDg4MzE=", "number": 29, "title": "How to inject types which requires instantiation", "user": {"login": "trondhindenes", "id": 1747120, "node_id": "MDQ6VXNlcjE3NDcxMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1747120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trondhindenes", "html_url": "https://github.com/trondhindenes", "followers_url": "https://api.github.com/users/trondhindenes/followers", "following_url": "https://api.github.com/users/trondhindenes/following{/other_user}", "gists_url": "https://api.github.com/users/trondhindenes/gists{/gist_id}", "starred_url": "https://api.github.com/users/trondhindenes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trondhindenes/subscriptions", "organizations_url": "https://api.github.com/users/trondhindenes/orgs", "repos_url": "https://api.github.com/users/trondhindenes/repos", "events_url": "https://api.github.com/users/trondhindenes/events{/privacy}", "received_events_url": "https://api.github.com/users/trondhindenes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-28T19:59:06Z", "updated_at": "2018-12-30T15:47:35Z", "closed_at": "2018-12-30T15:47:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting aquainted with flask_injector, and find myself stuck with this problem:\r\nGiven a \"Db\" class which takes some instantiation code which can be quite slow (notice that this class gets injected a configuration object):\r\n```python\r\nclass DbContext:\r\n    @inject\r\n    def __init__(self, configuration: Configuration):\r\n        self.configuration = configuration\r\n        self.engine = patched_local_bloop_engine(\r\n            table_name_template=self.configuration.table_prefix,\r\n            endpoint=self.configuration.dynamodb_url,\r\n        )\r\n        self.engine.bind(User)\r\n        # This is just to generate some boilerplace data in dynamodb and to slow down instantiation a bit\r\n        record = User()\r\n        record.name = get_random_user_name()\r\n        self.engine.save(record)\r\n```\r\n\r\nmy injector right now looks like this:\r\n```python\r\ndef configure(binder):\r\n    binder.bind(Configuration)\r\n    binder.bind(DbContext, scope=singleton)\r\n```\r\n\r\nand my flask resource (using flask-restful):\r\n```python\r\nclass ApiHome(Resource):\r\n    @inject\r\n    def __init__(self, configuration: Configuration, db_context: DbContext):\r\n        self.db_context = db_context\r\n        self.configuration = configuration\r\n\r\n    def get(self):\r\n        all_users = self.db_context.engine.scan(User).all()\r\n        all_users_ret = []\r\n        for usr in all_users:\r\n            all_users_ret.append(usr.to_json())\r\n        return {\r\n            \"url\": self.configuration.url,\r\n            \"username\": self.configuration.username,\r\n            \"all_users\": all_users_ret,\r\n        }\r\n```\r\n\r\nAll of this works nicely, except for the fact that the DbContext's init isn't called until the first request requires it, leading the initial request to be quite slow. Since the DbContext requires a Configuration object injected, what would be the best way to ensure it's eagerly loaded?\r\n\r\nAny pointers appreciated - full example code here:\r\nhttps://gist.github.com/trondhindenes/3752f055c074cf4f5e2804194a62f4b6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/28", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/28/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/28/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/28", "id": 378683935, "node_id": "MDU6SXNzdWUzNzg2ODM5MzU=", "number": 28, "title": "Module as singleton?", "user": {"login": "comtihon", "id": 1421547, "node_id": "MDQ6VXNlcjE0MjE1NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1421547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comtihon", "html_url": "https://github.com/comtihon", "followers_url": "https://api.github.com/users/comtihon/followers", "following_url": "https://api.github.com/users/comtihon/following{/other_user}", "gists_url": "https://api.github.com/users/comtihon/gists{/gist_id}", "starred_url": "https://api.github.com/users/comtihon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comtihon/subscriptions", "organizations_url": "https://api.github.com/users/comtihon/orgs", "repos_url": "https://api.github.com/users/comtihon/repos", "events_url": "https://api.github.com/users/comtihon/events{/privacy}", "received_events_url": "https://api.github.com/users/comtihon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-08T11:09:41Z", "updated_at": "2018-11-09T13:36:21Z", "closed_at": "2018-11-09T13:36:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi again!\r\nAs a workaround for https://github.com/alecthomas/flask_injector/issues/27 I've decided to have some kind of factory:\r\n\r\n```python\r\n@singleton\r\nclass AProvider(Module):\r\n  override = None\r\n  def set_override(self, override: A):\r\n     self.override = override\r\n\r\n  @provides\r\n  @request\r\n  def get(self) -> A:\r\n     if self.override is None:\r\n        return A()\r\n     else:\r\n        return_me = self.override\r\n        self.override = None\r\n        return return_me\r\n```\r\nThe problem is - AProvider is not always a singleton. It is singleton for all manuall requests to injector, but it uses another copy of AProvider when calling `provide` method. Thus this intent is now working.\r\nWorkaround for me is to use class.override instead on instance override. But I still expect singleton to be singleton...\r\n\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/27", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/27/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/27/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/27", "id": 378378655, "node_id": "MDU6SXNzdWUzNzgzNzg2NTU=", "number": 27, "title": "how request scope works with overrides? (it doesn't)", "user": {"login": "comtihon", "id": 1421547, "node_id": "MDQ6VXNlcjE0MjE1NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1421547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comtihon", "html_url": "https://github.com/comtihon", "followers_url": "https://api.github.com/users/comtihon/followers", "following_url": "https://api.github.com/users/comtihon/following{/other_user}", "gists_url": "https://api.github.com/users/comtihon/gists{/gist_id}", "starred_url": "https://api.github.com/users/comtihon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comtihon/subscriptions", "organizations_url": "https://api.github.com/users/comtihon/orgs", "repos_url": "https://api.github.com/users/comtihon/repos", "events_url": "https://api.github.com/users/comtihon/events{/privacy}", "received_events_url": "https://api.github.com/users/comtihon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-07T16:55:49Z", "updated_at": "2018-11-08T08:48:41Z", "closed_at": "2018-11-08T08:48:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI have:\r\n\r\n```\r\n@request\r\nclass A:\r\n```\r\nand \r\n\r\n```\r\nclass OverrideA(A):\r\n```\r\n\r\nat some point (during one request) I do:\r\n```\r\noverride = OverrideA(some_data)\r\napp.injector.binder.bind(A, override, scope=RequestScope)\r\n```\r\nI expect all other pieces of code to recieve my override instance during this request.\r\nBut `A` is still recieved.\r\n\r\nHow can I get the desired behaviour (or where should I dig to fix it)?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/26", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/26/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/26/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/26", "id": 372080674, "node_id": "MDU6SXNzdWUzNzIwODA2NzQ=", "number": 26, "title": "the injector working with @app.before_request but not @app.before_first_request", "user": {"login": "yan130", "id": 4979985, "node_id": "MDQ6VXNlcjQ5Nzk5ODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/4979985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yan130", "html_url": "https://github.com/yan130", "followers_url": "https://api.github.com/users/yan130/followers", "following_url": "https://api.github.com/users/yan130/following{/other_user}", "gists_url": "https://api.github.com/users/yan130/gists{/gist_id}", "starred_url": "https://api.github.com/users/yan130/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yan130/subscriptions", "organizations_url": "https://api.github.com/users/yan130/orgs", "repos_url": "https://api.github.com/users/yan130/repos", "events_url": "https://api.github.com/users/yan130/events{/privacy}", "received_events_url": "https://api.github.com/users/yan130/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-19T19:07:58Z", "updated_at": "2018-11-12T16:19:36Z", "closed_at": "2018-11-12T16:11:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n```\r\n@app.before_request\r\ndef get_token(a: MyClass):\r\n     # we can get a\r\n\r\n@app.before_first_request\r\ndef get_token(a: MyClass):\r\n     # we cannot get a. \r\n     #error message: get_token missing 1 required positional argument\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/25", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/25/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/25/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/25", "id": 346106744, "node_id": "MDU6SXNzdWUzNDYxMDY3NDQ=", "number": 25, "title": "Cannot inject dependency when using decorators with view functions.", "user": {"login": "sherubthakur", "id": 10345612, "node_id": "MDQ6VXNlcjEwMzQ1NjEy", "avatar_url": "https://avatars3.githubusercontent.com/u/10345612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sherubthakur", "html_url": "https://github.com/sherubthakur", "followers_url": "https://api.github.com/users/sherubthakur/followers", "following_url": "https://api.github.com/users/sherubthakur/following{/other_user}", "gists_url": "https://api.github.com/users/sherubthakur/gists{/gist_id}", "starred_url": "https://api.github.com/users/sherubthakur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sherubthakur/subscriptions", "organizations_url": "https://api.github.com/users/sherubthakur/orgs", "repos_url": "https://api.github.com/users/sherubthakur/repos", "events_url": "https://api.github.com/users/sherubthakur/events{/privacy}", "received_events_url": "https://api.github.com/users/sherubthakur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-31T09:28:56Z", "updated_at": "2018-07-31T11:18:25Z", "closed_at": "2018-07-31T11:18:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to use a decorator in my view function but seems like Flask-Injector cannot inject dependencies when we use a decorator.\r\n\r\nHere is the diff of the test case:\r\n```\r\ndiff --git i/flask_injector_tests.py w/flask_injector_tests.py\r\nindex a038b38..8593841 100644\r\n--- i/flask_injector_tests.py\r\n+++ w/flask_injector_tests.py\r\n@@ -28,7 +28,16 @@ def test_injections():\r\n\r\n     app = Flask(__name__)\r\n\r\n+    # create a decorator\r\n+    def appender(append = ' says'):\r\n+        def decorator(func):\r\n+            def wrapper(*args, **kwargs):\r\n+                return func(*args, **kwargs) + append\r\n+            return wrapper\r\n+        return decorator\r\n+\r\n     @app.route('/view1')\r\n+    @appender()\r\n     def view1(content: str):\r\n         inc()\r\n         return render_template_string(content)\r\n@@ -71,7 +80,7 @@ def test_injections():\r\n\r\n     with app.test_client() as c:\r\n         response = c.get('/view1')\r\n-        eq_(response.get_data(as_text=True), \"something\")\r\n+        eq_(response.get_data(as_text=True), \"something says\")\r\n\r\n     with app.test_client() as c:\r\n         response = c.get('/view2')\r\n```\r\n\r\nWhich then fails with the following error.\r\n\r\n```\r\nF............\r\n======================================================================\r\nFAIL: flask_injector_tests.test_injections\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/sherub/Documents/shuttl/experiments/flask_injector/venv/lib/python3.6/site-packages/nose/case.py\", line 198, in runTest\r\n    self.test(*self.arg)\r\n  File \"/Users/sherub/Documents/shuttl/experiments/flask_injector/flask_injector_tests.py\", line 83, in test_injections\r\n    eq_(response.get_data(as_text=True), \"something says\")\r\nAssertionError: '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\\n<title>500 Internal Server Error</title>\\n<h1>Internal Server Error</h1>\\n<p>The server encountered an internal error and was unable to complete your request.  Either the server is overloaded or there is an error in the application.</p>\\n' != 'something says'\r\n-------------------- >> begin captured logging << --------------------\r\nflask.app: ERROR: Exception on /view1 [GET]\r\nTraceback (most recent call last):\r\n  File \"/Users/sherub/Documents/shuttl/experiments/flask_injector/venv/lib/python3.6/site-packages/Flask-1.0.2-py3.6.egg/flask/app.py\", line 2292, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/sherub/Documents/shuttl/experiments/flask_injector/venv/lib/python3.6/site-packages/Flask-1.0.2-py3.6.egg/flask/app.py\", line 1815, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/sherub/Documents/shuttl/experiments/flask_injector/venv/lib/python3.6/site-packages/Flask-1.0.2-py3.6.egg/flask/app.py\", line 1718, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/Users/sherub/Documents/shuttl/experiments/flask_injector/venv/lib/python3.6/site-packages/Flask-1.0.2-py3.6.egg/flask/_compat.py\", line 35, in reraise\r\n    raise value\r\n  File \"/Users/sherub/Documents/shuttl/experiments/flask_injector/venv/lib/python3.6/site-packages/Flask-1.0.2-py3.6.egg/flask/app.py\", line 1813, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/Users/sherub/Documents/shuttl/experiments/flask_injector/venv/lib/python3.6/site-packages/Flask-1.0.2-py3.6.egg/flask/app.py\", line 1799, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/Users/sherub/Documents/shuttl/experiments/flask_injector/flask_injector_tests.py\", line 35, in wrapper\r\n    return func(*args, **kwargs) + append\r\nTypeError: view1() missing 1 required positional argument: 'content'\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n----------------------------------------------------------------------\r\nRan 13 tests in 0.541s\r\n\r\nFAILED (failures=1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/24", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/24/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/24/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/24", "id": 314809550, "node_id": "MDU6SXNzdWUzMTQ4MDk1NTA=", "number": 24, "title": "flask-restful is a hard dependency", "user": {"login": "yoanisgil", "id": 918271, "node_id": "MDQ6VXNlcjkxODI3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/918271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoanisgil", "html_url": "https://github.com/yoanisgil", "followers_url": "https://api.github.com/users/yoanisgil/followers", "following_url": "https://api.github.com/users/yoanisgil/following{/other_user}", "gists_url": "https://api.github.com/users/yoanisgil/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoanisgil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoanisgil/subscriptions", "organizations_url": "https://api.github.com/users/yoanisgil/orgs", "repos_url": "https://api.github.com/users/yoanisgil/repos", "events_url": "https://api.github.com/users/yoanisgil/events{/privacy}", "received_events_url": "https://api.github.com/users/yoanisgil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-04-16T20:39:30Z", "updated_at": "2018-11-12T16:20:08Z", "closed_at": "2018-11-12T15:56:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using flask-injector==0.10.1  alone with Flask-Restplus However Flask-Restful is a hard dependecy because otherwise the following error will be thrown:\r\n\r\n```bash\r\napi_next_1              |   File \"/usr/local/lib/python3.6/site-packages/flask_injector.py\", line 65, in wrap_fun\r\napi_next_1              |     return wrap_class_based_view(fun, injector)\r\napi_next_1              |   File \"/usr/local/lib/python3.6/site-packages/flask_injector.py\", line 156, in wrap_class_based_view\r\napi_next_1              |     return wrap_flask_restful_resource(fun, flask_restful_api, injector)\r\napi_next_1              |   File \"/usr/local/lib/python3.6/site-packages/flask_injector.py\", line 171, in wrap_flask_restful_resource\r\napi_next_1              |     from flask_restful.utils import unpack\r\napi_next_1              | ModuleNotFoundError: No module named 'flask_restful'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/23", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/23/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/23/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/23", "id": 295843637, "node_id": "MDU6SXNzdWUyOTU4NDM2Mzc=", "number": 23, "title": "Route Injection doesn't work if flask application are run behind gunicorn", "user": {"login": "ahayamb", "id": 4668525, "node_id": "MDQ6VXNlcjQ2Njg1MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4668525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahayamb", "html_url": "https://github.com/ahayamb", "followers_url": "https://api.github.com/users/ahayamb/followers", "following_url": "https://api.github.com/users/ahayamb/following{/other_user}", "gists_url": "https://api.github.com/users/ahayamb/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahayamb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahayamb/subscriptions", "organizations_url": "https://api.github.com/users/ahayamb/orgs", "repos_url": "https://api.github.com/users/ahayamb/repos", "events_url": "https://api.github.com/users/ahayamb/events{/privacy}", "received_events_url": "https://api.github.com/users/ahayamb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-09T11:44:07Z", "updated_at": "2018-02-10T01:17:58Z", "closed_at": "2018-02-10T01:17:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Somehow, injector fail to inject route param when flask application are run behind gunicorn", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/22", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/22/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/22/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/22", "id": 290164143, "node_id": "MDU6SXNzdWUyOTAxNjQxNDM=", "number": 22, "title": "Rebind to a mock instance fail", "user": {"login": "mario-fuentes", "id": 1197815, "node_id": "MDQ6VXNlcjExOTc4MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1197815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mario-fuentes", "html_url": "https://github.com/mario-fuentes", "followers_url": "https://api.github.com/users/mario-fuentes/followers", "following_url": "https://api.github.com/users/mario-fuentes/following{/other_user}", "gists_url": "https://api.github.com/users/mario-fuentes/gists{/gist_id}", "starred_url": "https://api.github.com/users/mario-fuentes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mario-fuentes/subscriptions", "organizations_url": "https://api.github.com/users/mario-fuentes/orgs", "repos_url": "https://api.github.com/users/mario-fuentes/repos", "events_url": "https://api.github.com/users/mario-fuentes/events{/privacy}", "received_events_url": "https://api.github.com/users/mario-fuentes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-20T04:31:26Z", "updated_at": "2018-01-21T23:20:27Z", "closed_at": "2018-01-21T23:20:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI'm trying to (re)bind an abstract class (who inherits from abc.ABC) to a mock instance created with MagicMock with the aim of test a class who inherits from MethodView, I'm doing to rebind calling FlaskInjector into the setUp() method:\r\n\r\n```\r\nfrom abc import ABC, abstractmethod\r\nfrom unittest import TestCase\r\nfrom unittest.mock import MagicMock\r\n\r\nfrom flask import Flask\r\nfrom flask.json import jsonify\r\nfrom flask.views import MethodView\r\nfrom flask_injector import FlaskInjector\r\nfrom injector import inject\r\n\r\nclass ServiceInterface(ABC):\r\n    @abstractmethod\r\n    def do_action(self) -> str:\r\n        pass\r\n\r\nclass Endpoints(MethodView):\r\n    @inject\r\n    def __init__(self, service: ServiceInterface):\r\n        self.service = service\r\n\r\n    def get(self):\r\n        return jsonify(self.service.do_action())\r\n\r\nclass Test(TestCase):\r\n    def conf(self, binder):\r\n        self.srv_mock = MagicMock(autospec=ServiceInterface)\r\n        binder.bind(ServiceInterface, self.srv_mock)\r\n\r\n    def setUp(self):\r\n        FlaskInjector(app=app, modules=[self.conf])\r\n        app.testing = True\r\n        self.client = app.test_client()\r\n\r\n    def test_mock(self):\r\n        self.srv_mock.do_action.return_value = 'test'\r\n        r = self.client.get('/endpoint/')\r\n        self.assertEqual(r.status_code, 200)\r\n\r\ndef configure_bindings(binder):\r\n    pass\r\n\r\napp = Flask('app')\r\napp.add_url_rule('/endpoint/', view_func=Endpoints.as_view('ep'), methods=['GET',])\r\nFlaskInjector(app=app, modules=[configure_bindings])\r\n```\r\n\r\nAnd fail with an error:\r\n\r\n```\r\n[...]\r\n  File \".env/lib/python3.6/site-packages/injector.py\", line 731, in create_object\r\n    instance = cls.__new__(cls)\r\ninjector.CallError: Call to ABCMeta.__new__() failed: Can't instantiate abstract class ServiceInterface with abstract methods do_action (injection stack: [<class 'flask-injector-mock.Endpoints'>])\r\n```\r\n\r\nI'm probably doing the rebind wrong.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/21", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/21/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/21/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/21", "id": 236884821, "node_id": "MDU6SXNzdWUyMzY4ODQ4MjE=", "number": 21, "title": "flask_injector 0.9 doesn't work with injector 0.13.1", "user": {"login": "sxamit", "id": 12122696, "node_id": "MDQ6VXNlcjEyMTIyNjk2", "avatar_url": "https://avatars1.githubusercontent.com/u/12122696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sxamit", "html_url": "https://github.com/sxamit", "followers_url": "https://api.github.com/users/sxamit/followers", "following_url": "https://api.github.com/users/sxamit/following{/other_user}", "gists_url": "https://api.github.com/users/sxamit/gists{/gist_id}", "starred_url": "https://api.github.com/users/sxamit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sxamit/subscriptions", "organizations_url": "https://api.github.com/users/sxamit/orgs", "repos_url": "https://api.github.com/users/sxamit/repos", "events_url": "https://api.github.com/users/sxamit/events{/privacy}", "received_events_url": "https://api.github.com/users/sxamit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-19T13:07:27Z", "updated_at": "2017-06-21T10:31:37Z", "closed_at": "2017-06-21T10:31:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "injector dropped [use_annotation](https://github.com/alecthomas/injector/commit/fca50418a113e5036951a693f3becee9a8edbd1d) but flask injector still uses it.\r\n\r\nflask injector automatically install injector 0.13.1 which causes errors", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/20", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/20/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/20/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/20", "id": 220314978, "node_id": "MDU6SXNzdWUyMjAzMTQ5Nzg=", "number": 20, "title": "Attributes set into initial bind seems to disappear", "user": {"login": "pdonorio", "id": 9340175, "node_id": "MDQ6VXNlcjkzNDAxNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9340175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pdonorio", "html_url": "https://github.com/pdonorio", "followers_url": "https://api.github.com/users/pdonorio/followers", "following_url": "https://api.github.com/users/pdonorio/following{/other_user}", "gists_url": "https://api.github.com/users/pdonorio/gists{/gist_id}", "starred_url": "https://api.github.com/users/pdonorio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pdonorio/subscriptions", "organizations_url": "https://api.github.com/users/pdonorio/orgs", "repos_url": "https://api.github.com/users/pdonorio/repos", "events_url": "https://api.github.com/users/pdonorio/events{/privacy}", "received_events_url": "https://api.github.com/users/pdonorio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-07T20:05:21Z", "updated_at": "2017-04-10T07:06:16Z", "closed_at": "2017-04-10T07:06:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm using injector, flask and flask-restful classes.\r\n\r\nWhen I bind my object `obj` I set some models with meta syntax like:\r\n```\r\nsetattr(obj, 'ModelName', MyModelClass)\r\n# then\r\nbinder.bind(ObjClass, to=obj, scope=self.singleton)\r\n```\r\n\r\nIf I check for this `obj.ModelName` before requests, they are there and fine.\r\nWhen I recover with the injector inside the Flask-Restful init function the object, the model is not there anymore. \r\n\r\nUnluckily my case is more complicated than this, but I wanted to ask first if this is a possible normal behaviour and why. If not I may build a small app to replicate.\r\n\r\nThank you a lot for this cool project!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/17", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/17/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/17/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/17", "id": 157231494, "node_id": "MDU6SXNzdWUxNTcyMzE0OTQ=", "number": 17, "title": "Flask extension support relies on pattern deprecated by Injector", "user": {"login": "gavinmh", "id": 1227260, "node_id": "MDQ6VXNlcjEyMjcyNjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1227260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavinmh", "html_url": "https://github.com/gavinmh", "followers_url": "https://api.github.com/users/gavinmh/followers", "following_url": "https://api.github.com/users/gavinmh/following{/other_user}", "gists_url": "https://api.github.com/users/gavinmh/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavinmh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavinmh/subscriptions", "organizations_url": "https://api.github.com/users/gavinmh/orgs", "repos_url": "https://api.github.com/users/gavinmh/repos", "events_url": "https://api.github.com/users/gavinmh/events{/privacy}", "received_events_url": "https://api.github.com/users/gavinmh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-27T15:25:30Z", "updated_at": "2017-03-14T17:39:02Z", "closed_at": "2016-05-27T15:52:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\n\nInjector has deprecated support for injecting into `Module.configure()` (https://github.com/alecthomas/injector/issues/31). This was the recommended pattern for working with Flask extensions (https://github.com/alecthomas/flask_injector#supporting-flask-extensions). Do you have any other recommendations for working with Flask extensions?\n\nThanks,\nGavin\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/16", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/16/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/16/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/16", "id": 138591148, "node_id": "MDU6SXNzdWUxMzg1OTExNDg=", "number": 16, "title": "Support implicit injections via annotations", "user": {"login": "roganov", "id": 1858503, "node_id": "MDQ6VXNlcjE4NTg1MDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1858503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roganov", "html_url": "https://github.com/roganov", "followers_url": "https://api.github.com/users/roganov/followers", "following_url": "https://api.github.com/users/roganov/following{/other_user}", "gists_url": "https://api.github.com/users/roganov/gists{/gist_id}", "starred_url": "https://api.github.com/users/roganov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roganov/subscriptions", "organizations_url": "https://api.github.com/users/roganov/orgs", "repos_url": "https://api.github.com/users/roganov/repos", "events_url": "https://api.github.com/users/roganov/events{/privacy}", "received_events_url": "https://api.github.com/users/roganov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-04T21:29:02Z", "updated_at": "2016-03-24T19:39:52Z", "closed_at": "2016-03-24T19:39:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Injector supports implicit via annotations using `use_annotations=True` flag (see https://github.com/alecthomas/injector/blob/master/injector_test_py3.py), would be nice to have this in flask_injector.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/14", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/14/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/14/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/14", "id": 122099499, "node_id": "MDU6SXNzdWUxMjIwOTk0OTk=", "number": 14, "title": "KeyError: 'class_args' when testing with class-based views", "user": {"login": "stevenhair", "id": 5742331, "node_id": "MDQ6VXNlcjU3NDIzMzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5742331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenhair", "html_url": "https://github.com/stevenhair", "followers_url": "https://api.github.com/users/stevenhair/followers", "following_url": "https://api.github.com/users/stevenhair/following{/other_user}", "gists_url": "https://api.github.com/users/stevenhair/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenhair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenhair/subscriptions", "organizations_url": "https://api.github.com/users/stevenhair/orgs", "repos_url": "https://api.github.com/users/stevenhair/repos", "events_url": "https://api.github.com/users/stevenhair/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenhair/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-12-14T18:17:09Z", "updated_at": "2016-03-31T16:30:53Z", "closed_at": "2016-03-07T03:55:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running unittest with class-based views under Python 3.5 with flask_injector 0.6.2, I get the following error:\n\n```\nError\nTraceback (most recent call last):\n  File \"/Users/shair/repos/flask-injection-bug/tests.py\", line 14, in setUp\n    FlaskInjector(app=app, modules=[configure])\n  File \"/Users/shair/.virtualenvs/flask-injection-bug/lib/python3.5/site-packages/flask_injector.py\", line 221, in __init__\n    process_dict(container, injector)\n  File \"/Users/shair/.virtualenvs/flask-injection-bug/lib/python3.5/site-packages/flask_injector.py\", line 244, in process_dict\n    d[key] = wrap_fun(value, injector)\n  File \"/Users/shair/.virtualenvs/flask-injection-bug/lib/python3.5/site-packages/flask_injector.py\", line 63, in wrap_fun\n    class_args = fun_closure['class_args']\nKeyError: 'class_args'\n```\n\nHere is code to reproduce the error:\n\napp.py:\n\n``` python\nfrom flask import Flask\nfrom flask.views import View\nfrom flask_injector import FlaskInjector\nfrom injector import inject\n\napp = Flask(__name__)\n\nclass Message(object):\n    def __init__(self, message):\n        self.message = message\n    def __str__(self):\n        return self.message\n\nclass IndexView(View):\n    @inject(message=Message)\n    def __init__(self, message):\n        super(IndexView, self).__init__()\n        self.message = message\n\n    def dispatch_request(self):\n        return str(self.message)\n\n\nclass ConfigureBinder(object):\n    def __init__(self, message):\n        self.message = message\n\n    def configure_injector(self, binder):\n        binder.bind(Message, to=Message(self.message))\n\napp.add_url_rule('/', view_func=IndexView.as_view('index'))\n\nconfigure = ConfigureBinder('hello').configure_injector\nFlaskInjector(app=app, modules=[configure])\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\ntests.py:\n\n``` python\nfrom unittest import TestCase\nfrom flask_injector import FlaskInjector\nfrom app import app, ConfigureBinder\n\nclass TestApp(TestCase):\n\n    def setUp(self):\n        app.testing = True\n        configure = ConfigureBinder('testing').configure_injector\n        FlaskInjector(app=app, modules=[configure])\n\n    def test_message(self):\n        response = app.test_client().get('/')\n        self.assertIn('testing', str(response.data))\n```\n\nThe problem seems to lie in injecting multiple times. Possibly related to https://github.com/alecthomas/flask_injector/issues/6?\n\nUpdate: The offending line was indeed introduced in the fix for https://github.com/alecthomas/flask_injector/issues/6: https://github.com/alecthomas/flask_injector/commit/57fddc270020ab4c046b2e559ee8b122d71a7dca#diff-76d5d260b4726f4ecf4f78cba40a6597R50\n\nUpdate 2: [Here is root offending line](https://github.com/alecthomas/flask_injector/blob/master/flask_injector.py#L115). The problem is that class_args is not passed into `injector.create_object`, so [we don't get a `class_args` property from `fun.__closure__`  in `wrap_class_based_view`](https://github.com/alecthomas/flask_injector/blob/master/flask_injector.py#L63).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/13", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/13/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/13/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/13", "id": 114592942, "node_id": "MDU6SXNzdWUxMTQ1OTI5NDI=", "number": 13, "title": "flask_restplus and flask_injector do not work together :(", "user": {"login": "mtrofimm", "id": 10633617, "node_id": "MDQ6VXNlcjEwNjMzNjE3", "avatar_url": "https://avatars1.githubusercontent.com/u/10633617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtrofimm", "html_url": "https://github.com/mtrofimm", "followers_url": "https://api.github.com/users/mtrofimm/followers", "following_url": "https://api.github.com/users/mtrofimm/following{/other_user}", "gists_url": "https://api.github.com/users/mtrofimm/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtrofimm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtrofimm/subscriptions", "organizations_url": "https://api.github.com/users/mtrofimm/orgs", "repos_url": "https://api.github.com/users/mtrofimm/repos", "events_url": "https://api.github.com/users/mtrofimm/events{/privacy}", "received_events_url": "https://api.github.com/users/mtrofimm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-02T13:24:29Z", "updated_at": "2016-03-07T03:22:13Z", "closed_at": "2016-03-07T03:22:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to use your library in my project together with flask_restplus.\nThere is an issue with handling swagger console.\nGiven the simple code:\n\n``` python\nfrom flask import Flask\nfrom flask_restplus import Api, Resource\nfrom flask_injector import FlaskInjector\nimport injector\n\napp = Flask(__name__)\napi = Api(app)\n\nclass ToInject(object):\n    def __init__(self, name):\n        self.name=name\n\n@api.route('/hello')\nclass Hello(Resource):\n    @injector.inject(name=ToInject('Tom'))\n    def __init__(self, name):\n        self.name = name\n\n    def get(self):\n        return 'Hello {}'.format(self.name);\n\n\nFlaskInjector(app)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nif u get http://localhost:5000/swagger.json you receive::\ninjector.CallError: Call to SwaggerView.**init**() failed: **init**() missing 1 required positional argument: 'api' (injection stack: [])\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/12", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/12/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/12/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/12", "id": 108744531, "node_id": "MDU6SXNzdWUxMDg3NDQ1MzE=", "number": 12, "title": "Better error handling.", "user": {"login": "richburdon", "id": 3523355, "node_id": "MDQ6VXNlcjM1MjMzNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3523355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richburdon", "html_url": "https://github.com/richburdon", "followers_url": "https://api.github.com/users/richburdon/followers", "following_url": "https://api.github.com/users/richburdon/following{/other_user}", "gists_url": "https://api.github.com/users/richburdon/gists{/gist_id}", "starred_url": "https://api.github.com/users/richburdon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richburdon/subscriptions", "organizations_url": "https://api.github.com/users/richburdon/orgs", "repos_url": "https://api.github.com/users/richburdon/repos", "events_url": "https://api.github.com/users/richburdon/events{/privacy}", "received_events_url": "https://api.github.com/users/richburdon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-28T20:53:55Z", "updated_at": "2016-03-07T03:55:25Z", "closed_at": "2016-03-07T03:55:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "When something isn't bound the error message doesn't help you find what it is. E.g., below.\n\nTypeError: **init**() takes exactly 2 arguments (1 given)\n\nIt would be really useful if the KEY or type that is not bound is somewhere in the error. It would also be useful to have a mechanism to list all of the bindings.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/9", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/9/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/9/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/9", "id": 95637014, "node_id": "MDU6SXNzdWU5NTYzNzAxNA==", "number": 9, "title": "Memory leak with eventlet enabled", "user": {"login": "plumzl", "id": 760065, "node_id": "MDQ6VXNlcjc2MDA2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/760065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plumzl", "html_url": "https://github.com/plumzl", "followers_url": "https://api.github.com/users/plumzl/followers", "following_url": "https://api.github.com/users/plumzl/following{/other_user}", "gists_url": "https://api.github.com/users/plumzl/gists{/gist_id}", "starred_url": "https://api.github.com/users/plumzl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plumzl/subscriptions", "organizations_url": "https://api.github.com/users/plumzl/orgs", "repos_url": "https://api.github.com/users/plumzl/repos", "events_url": "https://api.github.com/users/plumzl/events{/privacy}", "received_events_url": "https://api.github.com/users/plumzl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-07-17T11:08:17Z", "updated_at": "2015-08-03T06:02:17Z", "closed_at": "2015-08-03T06:02:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm experiencing memory leaks when using gunicorn eventlet workers.\n\nSome digging shows me the leak comes from GreenThread objects not being released by RequestScope.\n\n``` python\ndef reset(self):\n    self._local_manager.cleanup()\n    self._locals.scope = {}\n```\n\nHere, the `self._local_manager.cleanup()`  pops the reference to the GreenThread object but `self._locals.scope = {}` adds the reference back to the `__storage__` dictionary held by `self._locals`, so GreenThread object is not dereferenced and causing the application memory usage increase.\n\nThe problem disappears when switching the order of the two lines. Any thought?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/8", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/8/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/8/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/8", "id": 74452963, "node_id": "MDU6SXNzdWU3NDQ1Mjk2Mw==", "number": 8, "title": "Class instance provider error", "user": {"login": "richburdon", "id": 3523355, "node_id": "MDQ6VXNlcjM1MjMzNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3523355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richburdon", "html_url": "https://github.com/richburdon", "followers_url": "https://api.github.com/users/richburdon/followers", "following_url": "https://api.github.com/users/richburdon/following{/other_user}", "gists_url": "https://api.github.com/users/richburdon/gists{/gist_id}", "starred_url": "https://api.github.com/users/richburdon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richburdon/subscriptions", "organizations_url": "https://api.github.com/users/richburdon/orgs", "repos_url": "https://api.github.com/users/richburdon/repos", "events_url": "https://api.github.com/users/richburdon/events{/privacy}", "received_events_url": "https://api.github.com/users/richburdon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-08T18:31:22Z", "updated_at": "2015-05-09T01:58:43Z", "closed_at": "2015-05-09T01:58:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following fails with: injector.UnknownProvider: couldn't determine provider for <class __main__.Foo at 0x10952aa10> to <**main**.Foo instance at 0x10955b320>\n\nclass Foo:\n    def **init**(self):\n        pass\n\nclass TestModule(Module):\n    def configure(self, binder):\n        binder.bind(Foo, to=Foo())\n\napp = flask.Flask(**name**)\nFlaskInjector(app=app, modules=[\n    TestModule\n])\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/6", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/6/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/6/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/6", "id": 39601860, "node_id": "MDU6SXNzdWUzOTYwMTg2MA==", "number": 6, "title": "Doing multiple requests on a flask test client on an injected route fails for all but the first request.", "user": {"login": "niax", "id": 275397, "node_id": "MDQ6VXNlcjI3NTM5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/275397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niax", "html_url": "https://github.com/niax", "followers_url": "https://api.github.com/users/niax/followers", "following_url": "https://api.github.com/users/niax/following{/other_user}", "gists_url": "https://api.github.com/users/niax/gists{/gist_id}", "starred_url": "https://api.github.com/users/niax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niax/subscriptions", "organizations_url": "https://api.github.com/users/niax/orgs", "repos_url": "https://api.github.com/users/niax/repos", "events_url": "https://api.github.com/users/niax/events{/privacy}", "received_events_url": "https://api.github.com/users/niax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-08-06T08:58:09Z", "updated_at": "2015-11-02T23:32:13Z", "closed_at": "2015-11-02T23:32:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "All but the first call to the test client results in:\n\n```\n    Traceback (most recent call last):\n      File \"/home/nickh/env/local/lib/python2.7/site-packages/flask/app.py\", line 1817, in wsgi_app\n            response = self.full_dispatch_request()\n      File \"/home/nickh/env/local/lib/python2.7/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n            rv = self.handle_user_exception(e)\n      File \"/home/nickh/env/local/lib/python2.7/site-packages/flask/app.py\", line 1381, in handle_user_exception\n            reraise(exc_type, exc_value, tb)\n      File \"/home/nickh/env/local/lib/python2.7/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n            rv = self.dispatch_request()\n      File \"/home/nickh/env/local/lib/python2.7/site-packages/flask/app.py\", line 1461, in dispatch_request\n            return self.view_functions[rule.endpoint](**req.view_args)\n      File \"/home/nickh/env/local/lib/python2.7/site-packages/flask/views.py\", line 83, in view\n            self = view.view_class(*class_args, **class_kwargs)\n      File \"/home/nickh/env/local/lib/python2.7/site-packages/flask_injector.py\", line 48, in cls\n            current_class, additional_kwargs=kwargs)\n      File \"/home/nickh/env/local/lib/python2.7/site-packages/injector.py\", line 692, in create_object\n            instance = cls.__new__(cls)\n    TypeError: function.__new__(X): X is not a type object (function)\n```\n\nThis looks to be because the flask injector double-wraps the object being made.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/5", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/5/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/5/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/5", "id": 21553833, "node_id": "MDU6SXNzdWUyMTU1MzgzMw==", "number": 5, "title": "What is the best solution using flask-injector for dependent extensions of each other", "user": {"login": "klinkin", "id": 461927, "node_id": "MDQ6VXNlcjQ2MTkyNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/461927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klinkin", "html_url": "https://github.com/klinkin", "followers_url": "https://api.github.com/users/klinkin/followers", "following_url": "https://api.github.com/users/klinkin/following{/other_user}", "gists_url": "https://api.github.com/users/klinkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/klinkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klinkin/subscriptions", "organizations_url": "https://api.github.com/users/klinkin/orgs", "repos_url": "https://api.github.com/users/klinkin/repos", "events_url": "https://api.github.com/users/klinkin/events{/privacy}", "received_events_url": "https://api.github.com/users/klinkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-10-24T21:35:55Z", "updated_at": "2015-11-02T23:33:09Z", "closed_at": "2015-11-02T23:33:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the best solution using flask-injector for dependent extensions of each other, for example flask-sqlalchemy and flask-security?\n\nOrdinary simple code:\n\n``` python\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom flask.ext.security import Security, SQLAlchemyUserDatastore\nfrom models import User, Role\n\napp = Flask(\"super_app\")\ndb = SQLAlchemy(app)\nsecurity = Security(app=app, datastore=SQLAlchemyUserDatastore(db, User, Role))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/4", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/4/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/4/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/4", "id": 17318565, "node_id": "MDU6SXNzdWUxNzMxODU2NQ==", "number": 4, "title": "Travis builds", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alecthomas", "id": 41767, "node_id": "MDQ6VXNlcjQxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/41767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecthomas", "html_url": "https://github.com/alecthomas", "followers_url": "https://api.github.com/users/alecthomas/followers", "following_url": "https://api.github.com/users/alecthomas/following{/other_user}", "gists_url": "https://api.github.com/users/alecthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecthomas/subscriptions", "organizations_url": "https://api.github.com/users/alecthomas/orgs", "repos_url": "https://api.github.com/users/alecthomas/repos", "events_url": "https://api.github.com/users/alecthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/alecthomas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2013-07-28T22:58:19Z", "updated_at": "2013-07-28T23:01:52Z", "closed_at": "2013-07-28T23:01:26Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hey, can you enable Travis for this repository? I don't seem to be able to do that.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/alecthomas/flask_injector/issues/1", "repository_url": "https://api.github.com/repos/alecthomas/flask_injector", "labels_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/1/comments", "events_url": "https://api.github.com/repos/alecthomas/flask_injector/issues/1/events", "html_url": "https://github.com/alecthomas/flask_injector/issues/1", "id": 9227905, "node_id": "MDU6SXNzdWU5MjI3OTA1", "number": 1, "title": "Lack of recent version in repository", "user": {"login": "jstasiak", "id": 36209, "node_id": "MDQ6VXNlcjM2MjA5", "avatar_url": "https://avatars0.githubusercontent.com/u/36209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstasiak", "html_url": "https://github.com/jstasiak", "followers_url": "https://api.github.com/users/jstasiak/followers", "following_url": "https://api.github.com/users/jstasiak/following{/other_user}", "gists_url": "https://api.github.com/users/jstasiak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstasiak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstasiak/subscriptions", "organizations_url": "https://api.github.com/users/jstasiak/orgs", "repos_url": "https://api.github.com/users/jstasiak/repos", "events_url": "https://api.github.com/users/jstasiak/events{/privacy}", "received_events_url": "https://api.github.com/users/jstasiak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-12-12T19:09:00Z", "updated_at": "2012-12-13T04:50:56Z", "closed_at": "2012-12-13T04:50:56Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Apparently the version on http://pypi.python.org/pypi/Flask-Injector is more recent the the code that's in the repository (0.2.0 on PyPI vs 0.1.1 on Github)\n", "performed_via_github_app": null, "score": 1.0}]}