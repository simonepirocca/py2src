{"total_count": 115, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/185", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/185/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/185/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/185", "id": 663049403, "node_id": "MDU6SXNzdWU2NjMwNDk0MDM=", "number": 185, "title": "py2.py3 wheel created with 1.0.0 version", "user": {"login": "AdarShaked", "id": 59121240, "node_id": "MDQ6VXNlcjU5MTIxMjQw", "avatar_url": "https://avatars0.githubusercontent.com/u/59121240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdarShaked", "html_url": "https://github.com/AdarShaked", "followers_url": "https://api.github.com/users/AdarShaked/followers", "following_url": "https://api.github.com/users/AdarShaked/following{/other_user}", "gists_url": "https://api.github.com/users/AdarShaked/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdarShaked/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdarShaked/subscriptions", "organizations_url": "https://api.github.com/users/AdarShaked/orgs", "repos_url": "https://api.github.com/users/AdarShaked/repos", "events_url": "https://api.github.com/users/AdarShaked/events{/privacy}", "received_events_url": "https://api.github.com/users/AdarShaked/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2220437289, "node_id": "MDU6TGFiZWwyMjIwNDM3Mjg5", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/1.0%20release%20screwups", "name": "1.0 release screwups", "color": "73c93e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-21T14:14:39Z", "updated_at": "2020-07-21T18:47:48Z", "closed_at": "2020-07-21T18:47:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi \r\nSeems that 1.0.0 version is not py2 compatible but this flag:\r\n\r\nhttps://github.com/sqlalchemy/dogpile.cache/blob/master/setup.cfg#L45\r\n\r\nCause pip wheel generate py2py3 wheel.\r\nMaybe this is not the problem but pip wheel generation py2.py3 wheel and its wrong  :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/184", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/184/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/184/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/184", "id": 661484910, "node_id": "MDU6SXNzdWU2NjE0ODQ5MTA=", "number": 184, "title": "dogpile.cache 1.0.0 cannot be installed on Python 3.5 because stevedore requires 3.6+", "user": {"login": "RazerM", "id": 1337586, "node_id": "MDQ6VXNlcjEzMzc1ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1337586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RazerM", "html_url": "https://github.com/RazerM", "followers_url": "https://api.github.com/users/RazerM/followers", "following_url": "https://api.github.com/users/RazerM/following{/other_user}", "gists_url": "https://api.github.com/users/RazerM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RazerM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RazerM/subscriptions", "organizations_url": "https://api.github.com/users/RazerM/orgs", "repos_url": "https://api.github.com/users/RazerM/repos", "events_url": "https://api.github.com/users/RazerM/events{/privacy}", "received_events_url": "https://api.github.com/users/RazerM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2220437289, "node_id": "MDU6TGFiZWwyMjIwNDM3Mjg5", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/1.0%20release%20screwups", "name": "1.0 release screwups", "color": "73c93e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-20T07:36:17Z", "updated_at": "2020-07-21T19:07:28Z", "closed_at": "2020-07-21T18:54:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to install dogpile.cache in a `python:3.5` docker image yields the following error:\r\n\r\n```\r\nroot@3b09b5b38442:/# pip install dogpile.cache\r\nCollecting dogpile.cache\r\n  Using cached dogpile.cache-1.0.0.tar.gz (339 kB)\r\nCollecting decorator>=4.0.0\r\n  Using cached decorator-4.4.2-py2.py3-none-any.whl (9.2 kB)\r\nERROR: Could not find a version that satisfies the requirement stevedore>=3.0.0 (from dogpile.cache) (from versions: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7.1, 0.7.2, 0.8, 0.9, 0.9.1, 0.10, 0.11, 0.12, 0.13, 0.14, 0.14.1, 0.15, 1.0.0.0a2, 1.0.0, 1.1.0, 1.2.0, 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0, 1.9.0, 1.10.0, 1.11.0, 1.12.0, 1.13.0, 1.14.0, 1.15.0, 1.16.0, 1.17.0, 1.17.1, 1.18.0, 1.19.0, 1.19.1, 1.20.0, 1.20.1, 1.21.0, 1.22.0, 1.23.0, 1.24.0, 1.25.0, 1.25.1, 1.25.2, 1.26.0, 1.27.0, 1.27.1, 1.28.0, 1.29.0, 1.30.0, 1.30.1, 1.31.0, 1.32.0)\r\nERROR: No matching distribution found for stevedore>=3.0.0 (from dogpile.cache)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/178", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/178/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/178/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/178", "id": 610007816, "node_id": "MDU6SXNzdWU2MTAwMDc4MTY=", "number": 178, "title": "dogpile.cache 0.9.1 introduced pep517 regression", "user": {"login": "ssbarnea", "id": 102495, "node_id": "MDQ6VXNlcjEwMjQ5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/102495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssbarnea", "html_url": "https://github.com/ssbarnea", "followers_url": "https://api.github.com/users/ssbarnea/followers", "following_url": "https://api.github.com/users/ssbarnea/following{/other_user}", "gists_url": "https://api.github.com/users/ssbarnea/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssbarnea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssbarnea/subscriptions", "organizations_url": "https://api.github.com/users/ssbarnea/orgs", "repos_url": "https://api.github.com/users/ssbarnea/repos", "events_url": "https://api.github.com/users/ssbarnea/events{/privacy}", "received_events_url": "https://api.github.com/users/ssbarnea/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888276, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc2", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2020-04-30T13:42:45Z", "updated_at": "2020-05-05T04:53:04Z", "closed_at": "2020-05-04T20:18:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "dogpile.cache 0.9.1 introduced pep517 regression which prevented its installation on some setups:\r\n```\r\nCollecting dogpile.cache>=0.6.5\r\n  Downloading http://mirror.gra1.ovh.openstack.org/pypifiles/packages/e6/65/fa4a947926034cb4af5f469c376a21728b7fd8de4668fed757c3586f0eef/dogpile.cache-0.9.1.tar.gz (329 kB)\r\n  Installing build dependencies: started\r\n  Installing build dependencies: finished with status 'done'\r\n  Getting requirements to build wheel: started\r\n  Getting requirements to build wheel: finished with status 'error'\r\n\r\n:stderr:   ERROR: Command errored out with exit status 1:\r\n   command: /home/zuul/test-python/bin/python /home/zuul/test-python/lib/python3.6/site-packages/pip/_vendor/pep517/_in_process.py get_requires_for_build_wheel /tmp/tmpx9zntfdw\r\n       cwd: /tmp/pip-install-9ep3va87/dogpile.cache\r\n  Complete output (10 lines):\r\n  Traceback (most recent call last):\r\n    File \"/home/zuul/test-python/lib/python3.6/site-packages/pip/_vendor/pep517/_in_process.py\", line 257, in <module>\r\n      main()\r\n    File \"/home/zuul/test-python/lib/python3.6/site-packages/pip/_vendor/pep517/_in_process.py\", line 240, in main\r\n      json_out['return_val'] = hook(**hook_input['kwargs'])\r\n    File \"/home/zuul/test-python/lib/python3.6/site-packages/pip/_vendor/pep517/_in_process.py\", line 85, in get_requires_for_build_wheel\r\n      backend = _build_backend()\r\n    File \"/home/zuul/test-python/lib/python3.6/site-packages/pip/_vendor/pep517/_in_process.py\", line 76, in _build_backend\r\n      obj = getattr(obj, path_part)\r\n  AttributeError: module 'setuptools.build_meta' has no attribute '__legacy__'\r\n  ----------------------------------------\r\nERROR: Command errored out with exit status 1: /home/zuul/test-python/bin/python /home/zuul/test-python/lib/python3.6/site-packages/pip/_vendor/pep517/_in_process.py get_requires_for_build_wheel /tmp/tmpx9zntfdw Check the logs for full command output.\r\nWARNING: You are using pip version 20.0.2; however, version 20.1 is available.\r\n```\r\n\r\nFull report at https://zuul.opendev.org/t/openstack/build/0a2a5ca6414f4e56b9508322cf01c9f4", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/177", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/177/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/177/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/177", "id": 609015582, "node_id": "MDU6SXNzdWU2MDkwMTU1ODI=", "number": 177, "title": "License mixup", "user": {"login": "AbdealiJK", "id": 2200743, "node_id": "MDQ6VXNlcjIyMDA3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdealiJK", "html_url": "https://github.com/AbdealiJK", "followers_url": "https://api.github.com/users/AbdealiJK/followers", "following_url": "https://api.github.com/users/AbdealiJK/following{/other_user}", "gists_url": "https://api.github.com/users/AbdealiJK/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdealiJK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdealiJK/subscriptions", "organizations_url": "https://api.github.com/users/AbdealiJK/orgs", "repos_url": "https://api.github.com/users/AbdealiJK/repos", "events_url": "https://api.github.com/users/AbdealiJK/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdealiJK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-29T12:25:02Z", "updated_at": "2020-04-29T14:31:45Z", "closed_at": "2020-04-29T14:31:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I saw that the license in the current repository is MIT\r\nAlso, I found a older commit: https://github.com/sqlalchemy/dogpile.cache/commit/00d912c5892ba9cdce354493cf57595c8ac5833c\r\nwhich changes the pypi classifiers to MIT\r\n\r\nBut the license being reported to pypi is still BSD:\r\nhttps://github.com/sqlalchemy/dogpile.cache/blob/1ef1b7b3b29556f0fee987736cb8428fb333e39c/setup.py#L51\r\n\r\nI assume that needs to be changed to MIT too ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/173", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/173/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/173/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/173", "id": 562657899, "node_id": "MDU6SXNzdWU1NjI2NTc4OTk=", "number": 173, "title": "Add support to TLS", "user": {"login": "moisesguimaraes", "id": 2158939, "node_id": "MDQ6VXNlcjIxNTg5Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2158939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moisesguimaraes", "html_url": "https://github.com/moisesguimaraes", "followers_url": "https://api.github.com/users/moisesguimaraes/followers", "following_url": "https://api.github.com/users/moisesguimaraes/following{/other_user}", "gists_url": "https://api.github.com/users/moisesguimaraes/gists{/gist_id}", "starred_url": "https://api.github.com/users/moisesguimaraes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moisesguimaraes/subscriptions", "organizations_url": "https://api.github.com/users/moisesguimaraes/orgs", "repos_url": "https://api.github.com/users/moisesguimaraes/repos", "events_url": "https://api.github.com/users/moisesguimaraes/events{/privacy}", "received_events_url": "https://api.github.com/users/moisesguimaraes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-10T15:58:39Z", "updated_at": "2020-08-07T03:08:45Z", "closed_at": "2020-08-07T03:08:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since version 1.5.13, Memcached [supports TLS][1].\r\n\r\n### Motivation\r\n\r\nAt [OpenStack][2], we use dogpile.cache as one of our [oslo.cache][3] Memcache backend drivers. To accommodate some cloud security requirements, we will need to enable TLS in Memcached as data must be encrypted in the wire in some scenarios.\r\n\r\nI would like to help with the implementation of this if needed. I already got TLS support to [python-binary-memcached][4], so now I'm trying to get this all the way up to oslo.cache so we can use it.\r\n\r\n[1]: https://github.com/memcached/memcached/wiki/TLS\r\n[2]: https://www.openstack.org/\r\n[3]: https://opendev.org/openstack/oslo.cache\r\n[4]: https://github.com/jaysonsantos/python-binary-memcached/issues/207", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/171", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/171/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/171/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/171", "id": 559470548, "node_id": "MDU6SXNzdWU1NTk0NzA1NDg=", "number": 171, "title": "Default Redis Locking (thread locals) Incompatible with Async Creators", "user": {"login": "goodspark", "id": 29210237, "node_id": "MDQ6VXNlcjI5MjEwMjM3", "avatar_url": "https://avatars3.githubusercontent.com/u/29210237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodspark", "html_url": "https://github.com/goodspark", "followers_url": "https://api.github.com/users/goodspark/followers", "following_url": "https://api.github.com/users/goodspark/following{/other_user}", "gists_url": "https://api.github.com/users/goodspark/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodspark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodspark/subscriptions", "organizations_url": "https://api.github.com/users/goodspark/orgs", "repos_url": "https://api.github.com/users/goodspark/repos", "events_url": "https://api.github.com/users/goodspark/events{/privacy}", "received_events_url": "https://api.github.com/users/goodspark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1139089905, "node_id": "MDU6TGFiZWwxMTM5MDg5OTA1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/redis", "name": "redis", "color": "3161bc", "default": false, "description": ""}, {"id": 1826635087, "node_id": "MDU6TGFiZWwxODI2NjM1MDg3", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/usecase", "name": "usecase", "color": "dd7825", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-02-04T03:47:32Z", "updated_at": "2020-03-13T20:08:38Z", "closed_at": "2020-03-13T20:08:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Python 3.7\r\ndogpile 0.9.0\r\nredis 3.4.1\r\n\r\nThe redis backend [ends up using the redis Lock object](https://github.com/andymccurdy/redis-py/blob/3.4.1/redis/client.py#L789-L838) to [create distributed locks](https://github.com/sqlalchemy/dogpile.cache/blob/rel_0_9_0/dogpile/cache/backends/redis.py#L143-L146).\r\n\r\nNote that by default Redis' Lock objects use [thread locals to store locking tokens](https://github.com/andymccurdy/redis-py/blob/3.4.1/redis/lock.py#L125-L126).\r\n\r\nBut if a region is configured to use async creation runners, then the lock that's passed to the background thread will not be able to release the lock because the thread local token doesn't exist.\r\n\r\nPerhaps lock creation should pass an additional param to signify the lock will be shared across threads? Or a custom Redis lock that wraps the main one to handle this. Yet another option is to have dogpile itself deal with the lock code (thus within the same thread as the lock's creation).\r\n\r\nMinimal example:\r\n\r\n```python\r\n#!/usr/bin/env python3\r\nfrom concurrent.futures import ThreadPoolExecutor\r\nfrom dogpile.cache import make_region\r\nimport logging\r\nimport time\r\n\r\nlogging.basicConfig()\r\nlogging.getLogger().setLevel(logging.DEBUG)\r\nlog = logging.getLogger(__name__)\r\npool = ThreadPoolExecutor(max_workers=1)\r\n\r\ndef asyncer(cache, key, creator, mutex):\r\n    def _call():\r\n        log.info(\"async creator\")\r\n        try:\r\n            value = creator()\r\n            cache.set(key, value)\r\n        finally:\r\n            try:\r\n                mutex.release()\r\n            except Exception:\r\n                log.exception(\"uhoh\")\r\n    return pool.submit(_call)\r\n\r\ncache = make_region(async_creation_runner=asyncer)\r\ncache.configure(\r\n    \"dogpile.cache.redis\",\r\n    expiration_time=2,\r\n    arguments={\r\n        # Local redis instance in Docker\r\n        \"url\": \"redis://redis:6379\",\r\n        \"distributed_lock\": True,\r\n        \"lock_timeout\": 0.1,\r\n    },\r\n)\r\n\r\n@cache.cache_on_arguments()\r\ndef doubler(x):\r\n    log.info(\"recompute: %s\", x)\r\n    return 2 * x\r\n\r\nlog.info(doubler(4))\r\ntime.sleep(3)\r\nlog.info(doubler(4))\r\n```\r\n\r\n```\r\nDEBUG:dogpile.cache.region:No value present for key: '__main__:doubler|4'\r\nDEBUG:dogpile.lock:NeedRegenerationException\r\nDEBUG:dogpile.lock:no value, waiting for create lock\r\nDEBUG:dogpile.lock:value creation lock <redis.lock.Lock object at 0x7f857abc4c18> acquired\r\nDEBUG:dogpile.cache.region:No value present for key: '__main__:doubler|4'\r\nDEBUG:dogpile.lock:Calling creation function for not-yet-present value\r\nINFO:__main__:recompute: 4\r\nDEBUG:dogpile.cache.region:Cache value generated in 0.000 seconds for key(s): '__main__:doubler|4'\r\nDEBUG:dogpile.lock:Released creation lock\r\nINFO:__main__:8\r\nDEBUG:dogpile.lock:value creation lock <redis.lock.Lock object at 0x7f857abc4c18> acquired\r\nDEBUG:dogpile.lock:Passing creation lock to async runner\r\nINFO:__main__:async creator\r\nINFO:__main__:recompute: 4\r\nINFO:__main__:8\r\nERROR:__main__:uhoh\r\nTraceback (most recent call last):\r\n  File \"./code.py\", line 20, in _call\r\n    mutex.release()\r\n  File \"/home/sam/tmp/py37/.tox/python/lib/python3.7/site-packages/redis/lock.py\", line 222, in release\r\n    expected_token = self.local.token\r\nAttributeError: '_thread._local' object has no attribute 'token'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/166", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/166/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/166/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/166", "id": 526204512, "node_id": "MDU6SXNzdWU1MjYyMDQ1MTI=", "number": 166, "title": "Small typo in dogpile/cache/region.py", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-20T20:53:54Z", "updated_at": "2019-12-03T18:55:22Z", "closed_at": "2019-12-03T18:55:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Should read override instead of overide.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/164", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/164/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/164/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/164", "id": 496696918, "node_id": "MDU6SXNzdWU0OTY2OTY5MTg=", "number": 164, "title": "dogpile.cache 0.8.0 release broke setup.py", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-21T20:16:20Z", "updated_at": "2019-09-21T20:23:44Z", "closed_at": "2019-09-21T20:23:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "it looks like black reformating somehow took place where it hadn't before and broke the version regexp, not sure how none of the test suites etc. picked up on this, need a new release ASAP", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/163", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/163/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/163/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/163", "id": 496438643, "node_id": "MDU6SXNzdWU0OTY0Mzg2NDM=", "number": 163, "title": "dogpile.cache 0.7.2 build", "user": {"login": "vk-gthb", "id": 55271065, "node_id": "MDQ6VXNlcjU1MjcxMDY1", "avatar_url": "https://avatars1.githubusercontent.com/u/55271065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vk-gthb", "html_url": "https://github.com/vk-gthb", "followers_url": "https://api.github.com/users/vk-gthb/followers", "following_url": "https://api.github.com/users/vk-gthb/following{/other_user}", "gists_url": "https://api.github.com/users/vk-gthb/gists{/gist_id}", "starred_url": "https://api.github.com/users/vk-gthb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vk-gthb/subscriptions", "organizations_url": "https://api.github.com/users/vk-gthb/orgs", "repos_url": "https://api.github.com/users/vk-gthb/repos", "events_url": "https://api.github.com/users/vk-gthb/events{/privacy}", "received_events_url": "https://api.github.com/users/vk-gthb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-20T16:18:43Z", "updated_at": "2019-09-20T19:17:21Z", "closed_at": "2019-09-20T19:17:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\nI was looking at the dogpilecache.sqlalchemy.org changelog, it has 0.7.2 (py3 compatible) release mentioned, without a release date provided. The github repo (https://github.com/sqlalchemy/dogpile.cache/releases) has a release download available till 0.7.1. Any chances 0.7.2 build would also be made available for download officially? Thanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/160", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/160/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/160/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/160", "id": 480609693, "node_id": "MDU6SXNzdWU0ODA2MDk2OTM=", "number": 160, "title": "dogpile.cache is not compatible with decorator<4.0.0", "user": {"login": "vashirov", "id": 1745018, "node_id": "MDQ6VXNlcjE3NDUwMTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1745018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vashirov", "html_url": "https://github.com/vashirov", "followers_url": "https://api.github.com/users/vashirov/followers", "following_url": "https://api.github.com/users/vashirov/following{/other_user}", "gists_url": "https://api.github.com/users/vashirov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vashirov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vashirov/subscriptions", "organizations_url": "https://api.github.com/users/vashirov/orgs", "repos_url": "https://api.github.com/users/vashirov/repos", "events_url": "https://api.github.com/users/vashirov/events{/privacy}", "received_events_url": "https://api.github.com/users/vashirov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-14T10:47:09Z", "updated_at": "2019-08-14T12:56:30Z", "closed_at": "2019-08-14T12:56:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "`decorator` module has `decorate` function, which doesn't exist in versions <4.0.0 (see release notes https://github.com/micheles/decorator/blob/4.0.0/documentation.rst#what-s-new)\r\n\r\nBut dogpile.cache doesn't explicitly specify the version of `decorator` module in `setup.py`:\r\nhttps://github.com/sqlalchemy/dogpile.cache/blob/43469815859f2536404329cf2a3a2df95dc74c92/setup.py#L59\r\n\r\nSo if `decorator-3.4.0` is installed on the system, it satisfies the dependency chain, but `dogpile.cache` is not functional with it:\r\n\r\n```\r\n    sdk = importlib.import_module('openstack')                                                                                                                                \r\n  File \"/usr/lib64/python2.7/importlib/__init__.py\", line 37, in import_module                                                                                                \r\n    __import__(name)                                                                                                                                                          \r\n  File \"/usr/lib/python2.7/site-packages/openstack/__init__.py\", line 17, in <module>                                                                                         \r\n    import openstack.connection                                                                                                                                               \r\n  File \"/usr/lib/python2.7/site-packages/openstack/connection.py\", line 187, in <module>                                                                                      \r\n    from openstack.cloud import openstackcloud as _cloud                                                                                                                      \r\n  File \"/usr/lib/python2.7/site-packages/openstack/cloud/openstackcloud.py\", line 21, in <module>                                                                             \r\n    import dogpile.cache                                                                                                                                                      \r\n  File \"/usr/lib/python2.7/site-packages/dogpile/cache/__init__.py\", line 1, in <module>                                                                                      \r\n    from .region import CacheRegion, register_backend, make_region  # noqa                                                                                                    \r\n  File \"/usr/lib/python2.7/site-packages/dogpile/cache/region.py\", line 15, in <module>                                                                                       \r\n    from decorator import decorate     \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/159", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/159/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/159/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/159", "id": 479180829, "node_id": "MDU6SXNzdWU0NzkxODA4Mjk=", "number": 159, "title": "In Python 3, dogpile's own key mangler can't mangle the output of its default key generators", "user": {"login": "AdamWill", "id": 916551, "node_id": "MDQ6VXNlcjkxNjU1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/916551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdamWill", "html_url": "https://github.com/AdamWill", "followers_url": "https://api.github.com/users/AdamWill/followers", "following_url": "https://api.github.com/users/AdamWill/following{/other_user}", "gists_url": "https://api.github.com/users/AdamWill/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdamWill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdamWill/subscriptions", "organizations_url": "https://api.github.com/users/AdamWill/orgs", "repos_url": "https://api.github.com/users/AdamWill/repos", "events_url": "https://api.github.com/users/AdamWill/events{/privacy}", "received_events_url": "https://api.github.com/users/AdamWill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-09T21:54:58Z", "updated_at": "2019-08-10T21:42:52Z", "closed_at": "2019-08-10T21:42:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I only just ran into this and I may be getting the wrong end of a stick, but I don't *think* so. It seems to me that, in Python 3, dogpile's `sha1_mangle_key` cannot mangle the keys produced by dogpile's `function_key_generator` and other key generators - the ones that are used by default for new cache regions.\r\n\r\nThe output format of `function_key_generator` and `function_multi_key_generator` are defined by a kwarg (`to_str`) whose default value is `dogpile.util.compat.string_type`...which on Python 3, is `str`. Which is the unicode string type, like `unicode` on Python 2.\r\n\r\n`sha1_mangle_key` basically just calls `hashlib.sha1()` on whatever it's fed...and `hashlib.sha1()` will not accept \"Unicode-objects\", which in Python 3 means `str` instances. It requires them to be encoded to `bytes`:\r\n\r\n    Python 3.7.4 (default, Jul 27 2019, 01:48:07) \r\n    [GCC 9.1.1 20190605 (Red Hat 9.1.1-2)] on linux\r\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n    >>> from hashlib import sha1\r\n    >>> sha1('foo')\r\n    Traceback (most recent call last):\r\n      File \"<stdin>\", line 1, in <module>\r\n    TypeError: Unicode-objects must be encoded before hashing\r\n    >>> sha1('foo'.encode('utf-8'))\r\n    <sha1 HASH object @ 0x7fd436d720c0>\r\n    >>> \r\n\r\nwhat this means is that if you have Python 3 code that uses a dogpile cache region with default key generators, and sets the key mangler as the dogpile-provided `sha1_mangle_key`, it just doesn't work right. Here's a minimal reproducer:\r\n\r\n    import dogpile.cache\r\n    import dogpile.cache.util\r\n\r\n    def make_cached_method(cache):\r\n\r\n        @cache.cache_on_arguments()\r\n        def cached_method(key):\r\n            print(key)\r\n\r\n        return cached_method\r\n\r\n    ourcache = dogpile.cache.make_region(key_mangler=dogpile.cache.util.sha1_mangle_key)\r\n    ourcache.configure(\r\n        \"dogpile.cache.dbm\",\r\n        expiration_time=300,\r\n        arguments={\r\n            \"filename\":\"file.dbm\"\r\n        }\r\n    )\r\n    ourmethod = make_cached_method(ourcache)\r\n    ourmethod('foo')\r\n\r\nOn Python 2 this works fine. On Python 3 it blows up:\r\n\r\n    Traceback (most recent call last):\r\n      File \"/tmp/test.py\", line 21, in <module>\r\n        ourmethod('foo')\r\n      File \"</home/adamw/local/tahrir/tahrir-venv/lib/python3.7/site-packages/decorator.py:decorator-gen-1>\", line 2, in cached_method\r\n      File \"/home/adamw/local/tahrir/tahrir-venv/lib/python3.7/site-packages/dogpile/cache/region.py\", line 1272, in get_or_create_for_user_func\r\n        should_cache_fn, (arg, kw))\r\n      File \"/home/adamw/local/tahrir/tahrir-venv/lib/python3.7/site-packages/dogpile/cache/region.py\", line 823, in get_or_create\r\n        key = self.key_mangler(key)\r\n      File \"/home/adamw/local/tahrir/tahrir-venv/lib/python3.7/site-packages/dogpile/cache/util.py\", line 123, in sha1_mangle_key\r\n        return sha1(key).hexdigest()\r\n    TypeError: Unicode-objects must be encoded before hashing\r\n\r\nsurely the stock mangler should work with the stock and default key generators?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/158", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/158/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/158/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/158", "id": 478919150, "node_id": "MDU6SXNzdWU0Nzg5MTkxNTA=", "number": 158, "title": "How cached values update to databases", "user": {"login": "tmacjx", "id": 11555807, "node_id": "MDQ6VXNlcjExNTU1ODA3", "avatar_url": "https://avatars3.githubusercontent.com/u/11555807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmacjx", "html_url": "https://github.com/tmacjx", "followers_url": "https://api.github.com/users/tmacjx/followers", "following_url": "https://api.github.com/users/tmacjx/following{/other_user}", "gists_url": "https://api.github.com/users/tmacjx/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmacjx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmacjx/subscriptions", "organizations_url": "https://api.github.com/users/tmacjx/orgs", "repos_url": "https://api.github.com/users/tmacjx/repos", "events_url": "https://api.github.com/users/tmacjx/events{/privacy}", "received_events_url": "https://api.github.com/users/tmacjx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888276, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc2", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-09T10:34:51Z", "updated_at": "2019-08-10T02:41:26Z", "closed_at": "2019-08-10T02:41:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I recent use redis to cache sqlchemy query result.\r\n\r\n\r\n\tclass BaseModel(db.Model):\r\n    \t@classmethod\r\n    \tdef from_dict(cls, data):\r\n                 if not isinstance(data, dict):\r\n                    data = dict(data)\r\n                 return cls(**data)\r\n\t\t\r\nwhen I get data from cache  I will use BaseModel.from_dict method to \r\ncovert dict type data to Model instance, and then do some update operating.\r\n\t \r\n\t \tcache_data =  {'id': 1, 'name': 'abc'}\r\n\t \tinstance = Model(cache_data)\r\n\t \tinstance.name = 'efg'\r\n\t \tdb.session.commit()\r\n\t\t\r\n\t\r\nIt will raise Duplicate PRIMARY key?\r\n\t\t\r\nAny Advice to me?\r\nSo sorry, Google and stackoverflow not see any advice.\r\nTHK A LOT!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/157", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/157/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/157/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/157", "id": 475202630, "node_id": "MDU6SXNzdWU0NzUyMDI2MzA=", "number": 157, "title": "remove python setup.py test", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-31T15:10:24Z", "updated_at": "2019-09-20T19:02:06Z", "closed_at": "2019-09-20T19:02:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "references:\r\n\r\nhttps://github.com/sqlalchemy/sqlalchemy/issues/4789\r\n\r\npypa/setuptools#1684\r\n\r\npytest-dev/pytest#5546", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/156", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/156/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/156/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/156", "id": 472302736, "node_id": "MDU6SXNzdWU0NzIzMDI3MzY=", "number": 156, "title": "dogpile.cache keeps data after invalidation", "user": {"login": "Rogalek", "id": 24922834, "node_id": "MDQ6VXNlcjI0OTIyODM0", "avatar_url": "https://avatars1.githubusercontent.com/u/24922834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rogalek", "html_url": "https://github.com/Rogalek", "followers_url": "https://api.github.com/users/Rogalek/followers", "following_url": "https://api.github.com/users/Rogalek/following{/other_user}", "gists_url": "https://api.github.com/users/Rogalek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rogalek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rogalek/subscriptions", "organizations_url": "https://api.github.com/users/Rogalek/orgs", "repos_url": "https://api.github.com/users/Rogalek/repos", "events_url": "https://api.github.com/users/Rogalek/events{/privacy}", "received_events_url": "https://api.github.com/users/Rogalek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888276, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc2", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-24T14:03:42Z", "updated_at": "2019-07-26T01:51:40Z", "closed_at": "2019-07-26T01:51:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, I am building web application and had some problems with functional tests. During my test I am changing value of my setting which I am keeping in cache. I am using redis and Postgres as my databases.\r\n\r\n    class SettingService(object):\r\n\r\n    def __init__(self, request):\r\n        self.request = request\r\n        self.session = request.session\r\n\r\n    @region_1month.cache_on_arguments()\r\n    def get_setting(self, key):\r\n        return self.session.query(Setting)\\\r\n            .filter(Setting.key == key)\\\r\n            .first()\r\n\r\n    def add_setting(self, key, value):\r\n        setting_object = Setting(\r\n            key=key,\r\n            value=value\r\n        )\r\n        self.session.add(setting_object)\r\n        self.session.flush()\r\n        return setting_object\r\n\r\n    def update_setting(self, setting_obj, value):\r\n        setting_obj.value = value\r\n        self.dbsession.add(setting_obj)\r\n        self.dbsession.flush()\r\n        self.get_setting.invalidate(None, setting_obj.key)\r\n        return setting_obj\r\n\r\nAs you can see after updating setting cache should be invalidated and new value should occur. So when I am doing my test I am updating setting value, making request for my application and before it goes to the view it checks validation, setting still has old value and my tests fail.\r\n\r\nCan you help me? If more code necessary I can provide it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/154", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/154/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/154/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/154", "id": 445100422, "node_id": "MDU6SXNzdWU0NDUxMDA0MjI=", "number": 154, "title": "inspect.getfullargspec() is deprecated in python 3.8", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1153921288, "node_id": "MDU6TGFiZWwxMTUzOTIxMjg4", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/py3k", "name": "py3k", "color": "edd6a6", "default": false, "description": "things to do with python 3 changes"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-05-16T18:33:11Z", "updated_at": "2019-05-30T17:09:31Z", "closed_at": "2019-05-30T17:09:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "see https://github.com/sqlalchemy/sqlalchemy/issues/4674 as well as mako, alembic.  basically everything", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/149", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/149/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/149/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/149", "id": 419084186, "node_id": "MDU6SXNzdWU0MTkwODQxODY=", "number": 149, "title": "cache.cache_on_arguments() stopped working", "user": {"login": "millerthegorilla", "id": 3696921, "node_id": "MDQ6VXNlcjM2OTY5MjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3696921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/millerthegorilla", "html_url": "https://github.com/millerthegorilla", "followers_url": "https://api.github.com/users/millerthegorilla/followers", "following_url": "https://api.github.com/users/millerthegorilla/following{/other_user}", "gists_url": "https://api.github.com/users/millerthegorilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/millerthegorilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/millerthegorilla/subscriptions", "organizations_url": "https://api.github.com/users/millerthegorilla/orgs", "repos_url": "https://api.github.com/users/millerthegorilla/repos", "events_url": "https://api.github.com/users/millerthegorilla/events{/privacy}", "received_events_url": "https://api.github.com/users/millerthegorilla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888276, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc2", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-09T15:39:51Z", "updated_at": "2019-03-11T16:15:45Z", "closed_at": "2019-03-11T16:15:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been using dogpile.cache for a project which uses a rest api to populate a list based on a dropdown selection, using pyqt.\r\nRecently, I was forced to reinstall, and when I had finished doing so, the cache_on_arguments decorator had stopped working.  I've tried everything that I can think of and it still won't work.  When I use the decorator the method is not entered.\r\nI noticed that there had been some recent changes to the code, so I changed my code to create the cache region in the file listing the class.  I am decorating a method of a class, but have tried moving the method to the file level, ie outside of the class, to no avail.\r\nI am using the dbm backend, and have tried using a set of different permission sets on the file.\r\nEverything was working fine, and I had made no changes to that section of code, so I am now tearing my hair out.  Perhaps I am missing a dependency on reinstalling?  I wouldn't have thought so, since I am using pycharm, and installed dogpile.cache into the venv using the settings.  Dependencies should have been called in when installing.  I tried a different backend and the same issue.\r\nAny helpful suggestions much appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/144", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/144/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/144/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/144", "id": 414739055, "node_id": "MDU6SXNzdWU0MTQ3MzkwNTU=", "number": 144, "title": "behavioral change since decorator switch", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-02-26T17:50:03Z", "updated_at": "2019-02-28T15:13:16Z", "closed_at": "2019-02-28T15:13:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This test case raises ValueError prior to 0.7.0's switch to [decorator](https://gerrit.sqlalchemy.org/#/c/sqlalchemy/dogpile.cache/+/996/):\r\n\r\n```\r\nfrom dogpile.cache import make_region\r\n\r\nregion = make_region().configure(\r\n    'dogpile.cache.memory',\r\n)\r\n\r\n@region.cache_on_arguments()\r\ndef load_user_info(value=0):\r\n    return \"hi\"\r\n\r\n# passes now, used to raise \r\n# ValueError: dogpile.cache's default key creation function does not accept keyword arguments.\r\nprint(load_user_info(value=5))\r\n```\r\n\r\nAdditionally, it raises TypeError instead of ValueError when an invalid kw is passed.    \r\n\r\nI think we need to restore the old behavior here (edit: I think it's fine) because the key generation function should be seeing the args passed in the same way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/143", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/143/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/143/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/143", "id": 412043984, "node_id": "MDU6SXNzdWU0MTIwNDM5ODQ=", "number": 143, "title": "region.get does not respect object cache", "user": {"login": "jasonkuhrt", "id": 284476, "node_id": "MDQ6VXNlcjI4NDQ3Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/284476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonkuhrt", "html_url": "https://github.com/jasonkuhrt", "followers_url": "https://api.github.com/users/jasonkuhrt/followers", "following_url": "https://api.github.com/users/jasonkuhrt/following{/other_user}", "gists_url": "https://api.github.com/users/jasonkuhrt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonkuhrt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonkuhrt/subscriptions", "organizations_url": "https://api.github.com/users/jasonkuhrt/orgs", "repos_url": "https://api.github.com/users/jasonkuhrt/repos", "events_url": "https://api.github.com/users/jasonkuhrt/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonkuhrt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-19T17:38:10Z", "updated_at": "2019-02-21T14:53:25Z", "closed_at": "2019-02-19T18:03:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\nimport time\r\nfrom pprint import pprint\r\n\r\nfrom dogpile.cache.region import make_region\r\n\r\nregion = make_region().configure(\"dogpile.cache.memory\")\r\n\r\nregion.get_or_create(\"foo-key\", lambda: \"foo-value\", expiration_time=2)\r\n\r\ntime.sleep(1)\r\n\r\nresult_1 = region.get(\"foo-key\")\r\n\r\n# should be hit, ok\r\npprint(dict(result_1=result_1))\r\n\r\ntime.sleep(2)\r\n\r\nresult_2 = region.get(\"foo-key\")\r\n\r\n# should be miss, fail\r\npprint(dict(result_2=result_2))\r\n```\r\n\r\n```\r\n\u276f python yolo.py\r\n{'result_1': 'foo-value'}\r\n{'result_2': 'foo-value'}\r\n```\r\n\r\nI expected something like\r\n\r\n```\r\n\u276f python yolo.py\r\n{'result_1': 'foo-value'}\r\nNO_VALIUE\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/140", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/140/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/140/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/140", "id": 390948849, "node_id": "MDU6SXNzdWUzOTA5NDg4NDk=", "number": 140, "title": "Passing a bound function fails with 0.7.0+", "user": {"login": "ianw", "id": 108448, "node_id": "MDQ6VXNlcjEwODQ0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/108448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianw", "html_url": "https://github.com/ianw", "followers_url": "https://api.github.com/users/ianw/followers", "following_url": "https://api.github.com/users/ianw/following{/other_user}", "gists_url": "https://api.github.com/users/ianw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianw/subscriptions", "organizations_url": "https://api.github.com/users/ianw/orgs", "repos_url": "https://api.github.com/users/ianw/repos", "events_url": "https://api.github.com/users/ianw/events{/privacy}", "received_events_url": "https://api.github.com/users/ianw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1149215135, "node_id": "MDU6TGFiZWwxMTQ5MjE1MTM1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/decorators", "name": "decorators", "color": "eaf47c", "default": false, "description": ""}, {"id": 1161068547, "node_id": "MDU6TGFiZWwxMTYxMDY4NTQ3", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/regression", "name": "regression", "color": "0ac966", "default": false, "description": "i broke something and released it"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-12-14T03:13:39Z", "updated_at": "2018-12-18T19:46:26Z", "closed_at": "2018-12-18T19:46:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have started having a problem with 0.7.0+ due to changes in [1] where the input function is no longer wrapped.\r\n\r\nThe shortest replication of what's going on I can make is the following\r\n\r\n```python\r\nfrom dogpile.cache import make_region\r\n\r\nregion = make_region().configure('dogpile.cache.memory', expiration_time = 3600)\r\n\r\ndef _cache_on_arguments(*cache_on_args, **cache_on_kwargs):\r\n    def _inner_cache_on_arguments(func):\r\n        def _cache_decorator(obj, *args, **kwargs):\r\n            dogpile_decorator = region.cache_on_arguments(\r\n                *cache_on_args, **cache_on_kwargs)\r\n            self_method = func.__get__(obj, type(obj))\r\n            wrapped_func = dogpile_decorator(self_method)\r\n            return wrapped_func(*args, **kwargs)\r\n        return _cache_decorator\r\n    return _inner_cache_on_arguments\r\n\r\nclass MainClass(object):\r\n    @_cache_on_arguments()\r\n    def function(self):\r\n        print(\"A function\")\r\n\r\ncls = MainClass()\r\ncls.function()\r\n```\r\nWhen you run this under 0.7.0 onwards you get\r\n\r\n```\r\n$ ./env/bin/python3 ./test-dp.py \r\nTraceback (most recent call last):\r\n  File \"./test-dp.py\", line 30, in <module>\r\n    cls.function()\r\n  File \"./test-dp.py\", line 15, in _cache_decorator\r\n    wrapped_func = dogpile_decorator(self_method)\r\n  File \"/home/iwienand/tmp/dogpile/env/lib64/python3.7/site-packages/dogpile/cache/region.py\", line 1304, in cache_decorator\r\n    user_func.set = set_\r\nAttributeError: 'method' object has no attribute 'set'\r\n```\r\n\r\nWhen you run it on 0.6.8 you see \"A function\" printed.\r\n\r\nThe old ```cache_on_arguments``` would take the input callable, and then wrap it in it's ```decorate``` function which then actually called out to ```get_or_create(key, creator, ...)```.  It would then set the various helpers ```set, invalidate, refresh, get, original``` on the internal  ```decorate``` function.  \r\n\r\nThis changed with [1] where ```set,invalidate,get,refresh``` etc are being directly set on ```user_func```.  This is a problem when ```user_func``` is actually a bound method (what we found from ```func.__get__(obj, type(obj))```) and not a function ... we can't set arbitrary things on it.\r\n\r\nI'm a bit stumped on all this at the moment.  Our use is certainly \"interesting\" (and yes, I'm reminded of [2] :).  We are tracking this in [3].  The point of [1] appears to be to get rid of the wrapping to avoid signature changes, so I'm not sure about adding it back in, but I'm also not sure how to fix what we have :/\r\n\r\nThoughts on this are very welcome\r\n\r\n[1] https://gerrit.sqlalchemy.org/#/c/sqlalchemy/dogpile.cache/+/996/4/dogpile/cache/region.py\r\n[2] https://xkcd.com/1172/\r\n[3] https://storyboard.openstack.org/#!/story/2004605", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/139", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/139/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/139/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/139", "id": 389995724, "node_id": "MDU6SXNzdWUzODk5OTU3MjQ=", "number": 139, "title": "async_creation_runners broken by v0.7.0", "user": {"login": "goodspark", "id": 29210237, "node_id": "MDQ6VXNlcjI5MjEwMjM3", "avatar_url": "https://avatars3.githubusercontent.com/u/29210237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodspark", "html_url": "https://github.com/goodspark", "followers_url": "https://api.github.com/users/goodspark/followers", "following_url": "https://api.github.com/users/goodspark/following{/other_user}", "gists_url": "https://api.github.com/users/goodspark/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodspark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodspark/subscriptions", "organizations_url": "https://api.github.com/users/goodspark/orgs", "repos_url": "https://api.github.com/users/goodspark/repos", "events_url": "https://api.github.com/users/goodspark/events{/privacy}", "received_events_url": "https://api.github.com/users/goodspark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-11T23:15:52Z", "updated_at": "2018-12-12T02:30:58Z", "closed_at": "2018-12-12T02:30:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Specifically, the changes to pull out `creator_args` from the `creator` function.\r\n\r\nHere's a minimal test expanded from the [current documentation](https://dogpilecache.sqlalchemy.org/en/latest/usage.html#dogpile.cache.region.CacheRegion.params.async_creation_runner):\r\n\r\n```python\r\nfrom dogpile.cache import *\r\nimport threading\r\nimport time\r\n\r\ndef async_creation_runner(cache, somekey, creator, mutex):\r\n    ''' Used by dogpile.core:Lock when appropriate  '''\r\n    def runner():\r\n        try:\r\n            value = creator()\r\n            cache.set(somekey, value)\r\n        finally:\r\n            mutex.release()\r\n\r\n    thread = threading.Thread(target=runner)\r\n    thread.start()\r\n\r\nregion = make_region(\r\n    async_creation_runner=async_creation_runner,\r\n).configure(\r\n    'dogpile.cache.memcached',\r\n    expiration_time=1,\r\n    arguments={\r\n        'url': '127.0.0.1:11211',\r\n        'distributed_lock': True,\r\n    }\r\n)\r\n\r\n@region.cache_on_arguments()\r\ndef something(x):\r\n    return 2 * x\r\n\r\nassert something(1) == 2\r\ntime.sleep(2)\r\n# This call will fail\r\nassert something(1) == 2\r\n```\r\n\r\nThe last call fails with:\r\n\r\n```\r\n<decorator-gen-114> in something(x)\r\n\r\n/home/test/.tox/py27/lib/python2.7/site-packages/dogpile/cache/region.pyc in get_or_create_for_user_func(key_generator, user_func, *arg, **kw)\r\n   1270                 else expiration_time\r\n   1271             return self.get_or_create(key, user_func, timeout,\r\n-> 1272                                       should_cache_fn, (arg, kw))\r\n   1273 \r\n   1274         def cache_decorator(user_func):\r\n\r\n/home/test/.tox/py27/lib/python2.7/site-packages/dogpile/cache/region.pyc in get_or_create(self, key, creator, expiration_time, should_cache_fn, creator_args)\r\n    877                 get_value,\r\n    878                 expiration_time,\r\n--> 879                 async_creator) as value:\r\n    880             return value\r\n    881 \r\n\r\n/home/test/.tox/py27/lib/python2.7/site-packages/dogpile/lock.pyc in __enter__(self)\r\n    184 \r\n    185     def __enter__(self):\r\n--> 186         return self._enter()\r\n    187 \r\n    188     def __exit__(self, type, value, traceback):\r\n\r\n/home/test/.tox/py27/lib/python2.7/site-packages/dogpile/lock.pyc in _enter(self)\r\n     91             createdtime = -1\r\n     92 \r\n---> 93         generated = self._enter_create(value, createdtime)\r\n     94 \r\n     95         if generated is not NOT_REGENERATED:\r\n\r\n/home/test/.tox/py27/lib/python2.7/site-packages/dogpile/lock.pyc in _enter_create(self, value, createdtime)\r\n    164 \r\n    165                 # so...run it!\r\n--> 166                 self.async_creator(self.mutex)\r\n    167                 _async = True\r\n    168 \r\n\r\n/home/test/.tox/py27/lib/python2.7/site-packages/dogpile/cache/region.pyc in async_creator(mutex)\r\n    865                     return self.async_creation_runner(\r\n    866                         self, orig_key, creator, mutex,\r\n--> 867                         creator_args=creator_args)\r\n    868                 else:\r\n    869                     return self.async_creation_runner(\r\n\r\nTypeError: async_creation_runner() got an unexpected keyword argument 'creator_args\r\n```\r\n\r\nBasically #136 broke backwards compatibility. I'm not sure if dogpile uses semver, but if so, then it should probably have a major version increment now.\r\n\r\nThe fix is trivial, but the documentation should also be updated:\r\n\r\n```python\r\ndef async_creation_runner(cache, somekey, creator, mutex, creator_args=None):\r\n    ''' Used by dogpile.core:Lock when appropriate  '''\r\n    def runner():\r\n        try:\r\n            if creator_args:\r\n                value = creator(*creator_args[0], **creator_args[1])\r\n            else:\r\n                value = creator()\r\n            cache.set(somekey, value)\r\n        finally:\r\n            mutex.release()\r\n\r\n    thread = threading.Thread(target=runner)\r\n    thread.start()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/138", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/138/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/138/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/138", "id": 387743299, "node_id": "MDU6SXNzdWUzODc3NDMyOTk=", "number": 138, "title": " CacheRegion: invalidation from another process", "user": {"login": "keipaglows", "id": 8931309, "node_id": "MDQ6VXNlcjg5MzEzMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8931309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keipaglows", "html_url": "https://github.com/keipaglows", "followers_url": "https://api.github.com/users/keipaglows/followers", "following_url": "https://api.github.com/users/keipaglows/following{/other_user}", "gists_url": "https://api.github.com/users/keipaglows/gists{/gist_id}", "starred_url": "https://api.github.com/users/keipaglows/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keipaglows/subscriptions", "organizations_url": "https://api.github.com/users/keipaglows/orgs", "repos_url": "https://api.github.com/users/keipaglows/repos", "events_url": "https://api.github.com/users/keipaglows/events{/privacy}", "received_events_url": "https://api.github.com/users/keipaglows/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1152717492, "node_id": "MDU6TGFiZWwxMTUyNzE3NDky", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/invalidation", "name": "invalidation", "color": "7a8407", "default": false, "description": "things to do with invalidating / removing data from caches"}, {"id": 1138888276, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc2", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-05T12:52:50Z", "updated_at": "2018-12-06T15:23:10Z", "closed_at": "2018-12-06T09:53:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I apologize for discussing a question in the issues section, but I didn't find a better place to ask about it.\r\n\r\nI'm trying to achieve cache region invalidation outside of the main project via console script. As documentation states: ```It (invalidate method) does not impact other Python processes or regions as the timestamp is only stored locally in memory```, so it doesn't suppose to work like this at all. \r\n\r\nThere is a hint in documentation as well: ```To implement invalidation where the timestamp is stored in the cache or similar so that all Python processes can be affected by an invalidation timestamp, implement a custom RegionInvalidationStrategy```\r\n\r\nIt feels weird to me storing timestamp in a cache for purpose of getting another piece of cache to invalidate. Are there any other possible directions to achieve such effect of invalidating region through another process?\r\n\r\nAnother question I have is - how to keep cached data intact after application restart? I would assume answer for both of my questions comes from the same problem.\r\n\r\nOnce again, sorry if this is not a proper place to ask.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/137", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/137/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/137/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/137", "id": 387020163, "node_id": "MDU6SXNzdWUzODcwMjAxNjM=", "number": 137, "title": "function decorators should use decorator to preserve signatures ", "user": {"login": "zzzeek", "id": 128223, "node_id": "MDQ6VXNlcjEyODIyMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/128223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zzzeek", "html_url": "https://github.com/zzzeek", "followers_url": "https://api.github.com/users/zzzeek/followers", "following_url": "https://api.github.com/users/zzzeek/following{/other_user}", "gists_url": "https://api.github.com/users/zzzeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/zzzeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zzzeek/subscriptions", "organizations_url": "https://api.github.com/users/zzzeek/orgs", "repos_url": "https://api.github.com/users/zzzeek/repos", "events_url": "https://api.github.com/users/zzzeek/events{/privacy}", "received_events_url": "https://api.github.com/users/zzzeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1149215135, "node_id": "MDU6TGFiZWwxMTQ5MjE1MTM1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/decorators", "name": "decorators", "color": "eaf47c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-03T21:47:44Z", "updated_at": "2018-12-08T14:13:08Z", "closed_at": "2018-12-08T14:13:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "example from #136:\r\n```\r\n\r\nIn [1]: from dogpile.cache import make_region\r\n\r\nIn [2]: region = make_region().configure(\r\n   ...:     'dogpile.cache.memory'\r\n   ...: )\r\n\r\nIn [3]: import inspect\r\n\r\nIn [4]: def func(a, b, c=True, *args, **kwargs):\r\n   ...:     return None\r\n\r\nIn [5]: inspect.getargspec(func)\r\nOut[5]: ArgSpec(args=['a', 'b', 'c'], varargs='args', keywords='kwargs', defaults=(True,))\r\n\r\nIn [6]: cached_func = region.cache_on_arguments()(func)\r\n\r\nIn [7]: inspect.getargspec(cached_func)\r\nOut[7]: ArgSpec(args=[], varargs='arg', keywords='kw', defaults=None)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/133", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/133/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/133/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/133", "id": 384028938, "node_id": "MDU6SXNzdWUzODQwMjg5Mzg=", "number": 133, "title": "cache_multi_on_arguments broken by @classmethod", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138888271, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcx", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-15T23:25:36Z", "updated_at": "2018-11-16T01:01:57Z", "closed_at": "2018-11-16T01:01:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Krishna Vudata ([kvudata](https://github.com/kvudata))**\n\nSpecifically this is when using the default function_multi_key_generator.\nAt [this line in region.py](https://bitbucket.org/zzzeek/dogpile.cache/src/1f8a47862709a734ae8ae169ddde677e03e7fa1c/dogpile/cache/region.py?at=master#lines-1434) in the cache_multi_on_arguments decorator we zip up the args together with the generated keys but the default `function_multi_key_generator` will [drop the first arg](https://bitbucket.org/zzzeek/dogpile.cache/src/1f8a47862709a734ae8ae169ddde677e03e7fa1c/dogpile/cache/util.py?at=master#lines-62) and return n-1 when the first arg is `cls`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/131", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/131/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/131/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/131", "id": 384028935, "node_id": "MDU6SXNzdWUzODQwMjg5MzU=", "number": 131, "title": "Make dbm module configurable", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-07T14:08:51Z", "updated_at": "2018-11-25T02:54:00Z", "closed_at": "2018-11-25T02:54:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nI'm looking at making the file backend, use configurable options for using semidbm and petitedb as alternatives. Yes I know, both have seriously downsides. But I'd rather know 100% sure which libs i'm using on different distributions and different python versions.\n\nIs it okay if I do a pull request?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/129", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/129/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/129/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/129", "id": 384028928, "node_id": "MDU6SXNzdWUzODQwMjg5Mjg=", "number": 129, "title": "DeprecationWarning: inspect.getargspec() is deprecated", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1149215135, "node_id": "MDU6TGFiZWwxMTQ5MjE1MTM1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/decorators", "name": "decorators", "color": "eaf47c", "default": false, "description": ""}, {"id": 1153921288, "node_id": "MDU6TGFiZWwxMTUzOTIxMjg4", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/py3k", "name": "py3k", "color": "edd6a6", "default": false, "description": "things to do with python 3 changes"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-24T17:35:05Z", "updated_at": "2018-12-08T00:07:42Z", "closed_at": "2018-12-08T00:07:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Randy Barlow ([bowlofeggs](https://github.com/bowlofeggs))**\n\nGreetings!\n\nIn Python 3.6, I see a few warnings like this:\n\n```\n  /usr/local/lib/python3.6/site-packages/dogpile/cache/util.py:31: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() or inspect.getfullargspec()\n    args = inspect.getargspec(fn)\n```\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/128", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/128/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/128/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/128", "id": 384028923, "node_id": "MDU6SXNzdWUzODQwMjg5MjM=", "number": 128, "title": "@cache_multi_on_arguments does not respect cache expiration time", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-07-26T20:15:53Z", "updated_at": "2018-07-27T02:43:01Z", "closed_at": "2018-07-27T02:31:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Steven James ()**\n\nAny function decorated with @cache_multi_on_arguments calls its refresh function on every call, even if the expiration time is set very long.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/127", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/127/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/127/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/127", "id": 384028921, "node_id": "MDU6SXNzdWUzODQwMjg5MjE=", "number": 127, "title": "update cache asyncly after region invalidation", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888276, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc2", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-09T08:04:58Z", "updated_at": "2018-11-25T05:05:02Z", "closed_at": "2018-11-25T05:05:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Mustafa Sencer ([mustafasencer](https://github.com/mustafasencer))**\n\n\u0131'm not quite sure if the answer to this issue has been given but i couldn't manage to find it by myself. \nHow can i asyncronously update my cache after a region invalidation. I was planning on using celery in order to manage that. But i couldn't figure out the usage of async_creation_runner parameter in order to use it for my purpose.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/123", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/123/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/123/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/123", "id": 384028909, "node_id": "MDU6SXNzdWUzODQwMjg5MDk=", "number": 123, "title": "extending proxies with the actual backend?", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-06-15T18:47:49Z", "updated_at": "2018-06-27T18:39:36Z", "closed_at": "2018-06-27T18:39:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nIn several situations, I must access the actual backend of a dogpile region which has multiple proxies applied by `wraps`.\n\ni've usually been handling it during setup by caching the value onto the topmost object after configuring the region. I derive the actual backend via...\n\n    _backend = region.backend\n    while hasattr(_backend, 'proxied'):\n        _backend = _backend.proxied\n\ni think accessing this is useful to enough people, so I propose extending wraps/ProxyBackend to track the final proxy/actual backend on the object within dogpile itself.\n\nI am willing to generate a PR, but if there are objections to this I won't bother.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/122", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/122/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/122/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/122", "id": 384028903, "node_id": "MDU6SXNzdWUzODQwMjg5MDM=", "number": 122, "title": "`get_or_create` makes two GETs on a cache fail because of an oddity in `Lock`", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-05-05T06:08:16Z", "updated_at": "2018-06-25T13:55:27Z", "closed_at": "2018-06-25T13:55:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nI originally thought this was a documentation issue (#89) and desired, but now I think this is just an artifact of code changing over time.  I started looking at this deeper when an app was slamming Redis when it's cache wasn't prime.\n\nlooking at `lock.py`  lines 86-94\n\nhttps://bitbucket.org/zzzeek/dogpile.cache/src/e0c1f63907e63ed1678f44ec2443314808ada1c3/dogpile/lock.py#lines-86:94\n\nin line 87, dogpile calls `value_fn()` which is really `self.value_and_created_fn` to set the `generated` and `createdtime` values.\n\nin line 94, dogpile calls `._enter_create(createdtime)`\n\nin that method, it looks like dogpile immediately tries to create a mutex, then calls `self.value_and_created_fn` again (line 131).\n\nthe two calls to `get` happen immediately after each other, within a microsecond or two.\n\ni don't know all the scenarios that are needed in this area, but one 'fix' that works on tests is the following:\n\n1. _enter_create is modified to accept `(value, createdtime)` instead of just `createdtime`\n2. the second call is conditionally called.\n\n\n```\n#!python\n\n-         generated = self._enter_create(createdtime)\n+         generated = self._enter_create(value, createdtime)\n\n-    def _enter_create(self, createdtime):\n+    def _enter_create(self, value, createdtime):\n\n            # see if someone created the value already\n            try:\n-                value, createdtime = self.value_and_created_fn()\n\n            # see if someone created the value already\n            try:\n+                if not self._has_value(createdtime):\n+                    value, createdtime = self.value_and_created_fn()\n\n```\n\ni'm not sure how that would affect the async model, or the call to value_fn in line 101 either.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/120", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/120/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/120/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/120", "id": 384028900, "node_id": "MDU6SXNzdWUzODQwMjg5MDA=", "number": 120, "title": "Can MemcachedBackend cache data shared by multi gunicorn threads?", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-28T07:56:10Z", "updated_at": "2018-03-28T14:25:40Z", "closed_at": "2018-03-28T14:25:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\n\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/119", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/119/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/119/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/119", "id": 384028898, "node_id": "MDU6SXNzdWUzODQwMjg4OTg=", "number": 119, "title": "Importing dogpile on python 3.7 beta 2 fails with syntax error.", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-05T00:11:05Z", "updated_at": "2018-03-05T17:44:50Z", "closed_at": "2018-03-05T17:44:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Brian Sheldon ()**\n\nImporting dogpile on python 3.7 beta 2 fails with syntax error.\n\n```python\nPython 3.7.0b2 (v3.7.0b2:b0ef5c979b, Feb 28 2018, 02:24:20) [MSC v.1912 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import dogpile\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python\\3.7.0\\lib\\site-packages\\dogpile\\__init__.py\", line 3, in <module>\n    from .lock import Lock  # noqa\n  File \"C:\\Python\\3.7.0\\lib\\site-packages\\dogpile\\lock.py\", line 115\n    async = False\n          ^\nSyntaxError: invalid syntax\n```\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/117", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/117/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/117/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/117", "id": 384028894, "node_id": "MDU6SXNzdWUzODQwMjg4OTQ=", "number": 117, "title": "Question: Can I cache a class object?", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-13T13:09:13Z", "updated_at": "2018-11-16T00:55:25Z", "closed_at": "2018-11-16T00:55:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by fernando-vg ()**\n\nI have this \"Episode\" object from a \"Video\" class.\n\nIs it possible to me to cache it or i need to cache something else like the \"name\" attribute?\n\nI did some tests and its not caching\n\nhttps://user-images.githubusercontent.com/2620870/28167100-bdee980a-67b0-11e7-9796-dcfd19d6ce6c.png\n\nBear with me as I'm not a pro programmer and don't know dogpile in deep\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/116", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/116/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/116/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/116", "id": 384028890, "node_id": "MDU6SXNzdWUzODQwMjg4OTA=", "number": 116, "title": "Test failure: LocalThreadTest.test_client_cleanup_10  and LocalThreadTest.test_client_cleanup_3", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-04T07:35:59Z", "updated_at": "2017-07-04T14:22:25Z", "closed_at": "2017-07-04T14:22:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\n```\n=========================== short test summary info ============================\nFAIL tests/cache/test_memcached_backend.py::LocalThreadTest::test_client_cleanup_10\nFAIL tests/cache/test_memcached_backend.py::LocalThreadTest::test_client_cleanup_3\n\n=================================== FAILURES ===================================\n____________________ LocalThreadTest.test_client_cleanup_10 ____________________\nTraceback (most recent call last):\n  File \"/build/dogpile.cache-0.6.4/tests/cache/test_memcached_backend.py\", line 283, in test_client_cleanup_10\n    self._test_client_cleanup(10)\n  File \"/build/dogpile.cache-0.6.4/tests/cache/test_memcached_backend.py\", line 299, in _test_client_cleanup\n    eq_(canary, [i + 1 for i in range(count)])\n  File \"/build/dogpile.cache-0.6.4/tests/cache/__init__.py\", line 11, in eq_\n    assert a == b, msg or \"%r != %r\" % (a, b)\nAssertionError: [1, 2, 3, 3, 3, 4, 4, 5, 6, 7] != [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n____________________ LocalThreadTest.test_client_cleanup_3 _____________________\nTraceback (most recent call last):\n  File \"/build/dogpile.cache-0.6.4/tests/cache/test_memcached_backend.py\", line 280, in test_client_cleanup_3\n    self._test_client_cleanup(3)\n  File \"/build/dogpile.cache-0.6.4/tests/cache/test_memcached_backend.py\", line 299, in _test_client_cleanup\n    eq_(canary, [i + 1 for i in range(count)])\n  File \"/build/dogpile.cache-0.6.4/tests/cache/__init__.py\", line 11, in eq_\n    assert a == b, msg or \"%r != %r\" % (a, b)\nAssertionError: [1, 2, 2] != [1, 2, 3]\n============================ pytest-warning summary ============================\nWC1 None [pytest] section in setup.cfg files is deprecated, use [tool:pytest] instead.\n==== 2 failed, 294 passed, 214 skipped, 1 pytest-warnings in 78.44 seconds =====\n```\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/114", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/114/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/114/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/114", "id": 384028882, "node_id": "MDU6SXNzdWUzODQwMjg4ODI=", "number": 114, "title": "Question: a region with empty dict as cached value show as NO_VALUE in region.get", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-23T18:43:24Z", "updated_at": "2017-06-28T15:28:46Z", "closed_at": "2017-06-28T15:28:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by fernando-vg ()**\n\nI added a decorator to a function like this:\n\n\n@region.cache_on_arguments\ndef search(query)\n....return result\n\n\nthat function will return an empty dict or not\n\nIn my tests when I pass query= \"abc\" it returns an empty dict (all good), dogpile caches it and next time i call it I get a NO_VALUE in region.get(***)\n\nI debugged and in the second run, IDE don't enter the function so I'm using a cached value.\nQuestion is: shouldn't the region.get() show I cached an empty dict instead of NO_VALUE?\n\n\nHow to NOT cache empty dict/lists?\nthanks\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/113", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/113/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/113/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/113", "id": 384028877, "node_id": "MDU6SXNzdWUzODQwMjg4Nzc=", "number": 113, "title": "Memcached backend fails with kwarg_function_key_generator and function_key_generator", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-13T20:17:27Z", "updated_at": "2017-05-15T03:02:40Z", "closed_at": "2017-05-15T03:02:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Arpit Goel ()**\n\nI'm unable to use Memcached backend with both these functions due to string join on space.\n\n\n```\n#!python\nMemcachedKeyCharacterError: Control/space characters not allowed (key='utils.helpers:get_app_info|SQL_APP|None None')\n```\n\nCode responsible:-\n\n\n```\n#!python\n\ndef generate_key(*args, **kw):\n        if kw:\n            raise ValueError(\n                \"dogpile.cache's default key creation \"\n                \"function does not accept keyword arguments.\")\n        if has_self:\n            args = args[1:]\n\n        return namespace + \"|\" + \" \".join(map(to_str, args))\n    return generate_key\n```\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/112", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/112/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/112/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/112", "id": 384028875, "node_id": "MDU6SXNzdWUzODQwMjg4NzU=", "number": 112, "title": "No way to specify replace_existing_backend from Region.configure_from_config()", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-12T12:16:23Z", "updated_at": "2017-05-18T13:58:23Z", "closed_at": "2017-05-18T13:58:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nWhile writing some tests for our initialization logic of dogpile, I didn't find a way to trigger `configure_from_config()` in unittests while specifying `replace_existing_backend`.\n\nMy workaround was to `del region.backend` but that looks quite brittle, so I'd like to replace this with a way to specify that option.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/111", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/111/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/111/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/111", "id": 384028872, "node_id": "MDU6SXNzdWUzODQwMjg4NzI=", "number": 111, "title": "Add support for custom StrictRedis instantiation", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-04-13T21:47:13Z", "updated_at": "2017-04-13T22:34:59Z", "closed_at": "2017-04-13T22:34:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Omar Al-Hayderi ([oahayder](https://github.com/oahayder))**\n\nI have a Redis connection that requires SSL. Can we just inject our own StrictRedis instance into RedisBackend and/or expose the client attribute of RedisBackend via some setter?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/110", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/110/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/110/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/110", "id": 384028870, "node_id": "MDU6SXNzdWUzODQwMjg4NzA=", "number": 110, "title": "decorator chains", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1139097144, "node_id": "MDU6TGFiZWwxMTM5MDk3MTQ0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/cant%20reproduce", "name": "cant reproduce", "color": "c61f76", "default": false, "description": ""}, {"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-11T19:12:47Z", "updated_at": "2018-11-25T05:31:31Z", "closed_at": "2018-11-25T05:31:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Tudor Aursulesei ([thestick](https://github.com/thestick))**\n\nhow does dogpile.cache's cache_on_arguments handle a decorated class method? What if the second decorator contains some fixed args and kwargs? Which of these is put in the key? I've had to deal with this and the second decorator doesn't have the functools.wrap magic attached so it confuses dogpile.cache - i received wrong cache data.\n\nI've added a namespace and everything seems to work. Is this expected? How can i prevent this in the future in a safer way?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/109", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/109/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/109/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/109", "id": 384028867, "node_id": "MDU6SXNzdWUzODQwMjg4Njc=", "number": 109, "title": "Add a Riak backend", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-12T23:38:20Z", "updated_at": "2018-11-16T00:56:20Z", "closed_at": "2018-11-16T00:56:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nHi,\n\nIt'd be nice to have a Riak backend. It's even mentioned in the docs as one of the popular key/values datastorage. If one is already available, then maybe merge it into current dogpile.cache? Thanks.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/108", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/108/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/108/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/108", "id": 384028866, "node_id": "MDU6SXNzdWUzODQwMjg4NjY=", "number": 108, "title": "Test failures with latest binary-memcached 0.25.0", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-12-25T03:26:11Z", "updated_at": "2017-01-13T20:34:23Z", "closed_at": "2017-01-13T20:34:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Felix Yan ([felixonmars](https://github.com/felixonmars))**\n\n```\n=========================== short test summary info ============================\nFAIL tests/cache/test_memcached_backend.py::BMemcachedTest::test_decorated_fn_functionality\nFAIL tests/cache/test_memcached_backend.py::BMemcachedTest::test_region_delete_multiple\nFAIL tests/cache/test_memcached_backend.py::BMemcachedTest::test_region_expire\nFAIL tests/cache/test_memcached_backend.py::BMemcachedTest::test_region_get_multiple_values\nFAIL tests/cache/test_memcached_backend.py::BMemcachedTest::test_region_get_nothing_multiple\nFAIL tests/cache/test_memcached_backend.py::BMemcachedTest::test_region_set_get_value\nFAIL tests/cache/test_memcached_backend.py::BMemcachedTest::test_region_set_multiple_values\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedWithTimeoutTest::test_decorated_fn_functionality\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedWithTimeoutTest::test_region_delete_multiple\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedWithTimeoutTest::test_region_expire\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedWithTimeoutTest::test_region_get_multiple_values\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedWithTimeoutTest::test_region_get_nothing_multiple\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedWithTimeoutTest::test_region_set_get_value\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedWithTimeoutTest::test_region_set_multiple_values\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedTest::test_decorated_fn_functionality\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedTest::test_region_delete_multiple\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedTest::test_region_expire\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedTest::test_region_get_multiple_values\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedTest::test_region_get_nothing_multiple\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedTest::test_region_set_get_value\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedTest::test_region_set_multiple_values\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedMutexTest::test_reentrant_dogpile\nFAIL tests/cache/test_memcached_backend.py::BMemcachedDistributedMutexWithTimeoutTest::test_reentrant_dogpile\n\n=================================== FAILURES ===================================\n________________ BMemcachedTest.test_decorated_fn_functionality ________________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 290, in test_decorated_fn_functionality\n    eq_(my_function(3, 4), 8)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 1220, in decorate\n    should_cache_fn)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 825, in get_or_create\n    async_creator) as value:\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 154, in __enter__\n    return self._enter()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 87, in _enter\n    value = value_fn()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 781, in get_value\n    if (value is NO_VALUE or value.metadata['v'] != value_version or\nAttributeError: 'list' object has no attribute 'metadata'\n__________________ BMemcachedTest.test_region_delete_multiple __________________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 158, in test_region_delete_multiple\n    eq_(values['key1'], reg.get('key1'))\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 628, in get\n    expiration_time, ignore_expiration)(value)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n______________________ BMemcachedTest.test_region_expire _______________________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 267, in test_region_expire\n    eq_(reg.get(\"some key\", ignore_expiration=True), \"some value 1\")\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 630, in get\n    return value.payload\nAttributeError: 'list' object has no attribute 'payload'\n________________ BMemcachedTest.test_region_get_multiple_values ________________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 129, in test_region_get_multiple_values\n    values = reg.get_multi(['key1', 'key2', 'key3'])\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 702, in get_multi\n    backend_values\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 698, in <listcomp>\n    value.payload if value is not NO_VALUE else value\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 701, in <genexpr>\n    _unexpired_value_fn(value) for value in\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n_______________ BMemcachedTest.test_region_get_nothing_multiple ________________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 140, in test_region_get_nothing_multiple\n    ['key1', 'key2', 'key3', 'key4', 'key5', 'key6'])\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 702, in get_multi\n    backend_values\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 698, in <listcomp>\n    value.payload if value is not NO_VALUE else value\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 701, in <genexpr>\n    _unexpired_value_fn(value) for value in\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n___________________ BMemcachedTest.test_region_set_get_value ___________________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 98, in test_region_set_get_value\n    eq_(reg.get(\"some key\"), \"some value\")\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 628, in get\n    expiration_time, ignore_expiration)(value)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n________________ BMemcachedTest.test_region_set_multiple_values ________________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 104, in test_region_set_multiple_values\n    eq_(values['key1'], reg.get('key1'))\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 628, in get\n    expiration_time, ignore_expiration)(value)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n_____ BMemcachedDistributedWithTimeoutTest.test_decorated_fn_functionality _____\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 290, in test_decorated_fn_functionality\n    eq_(my_function(3, 4), 8)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 1220, in decorate\n    should_cache_fn)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 825, in get_or_create\n    async_creator) as value:\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 154, in __enter__\n    return self._enter()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 87, in _enter\n    value = value_fn()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 781, in get_value\n    if (value is NO_VALUE or value.metadata['v'] != value_version or\nAttributeError: 'list' object has no attribute 'metadata'\n_______ BMemcachedDistributedWithTimeoutTest.test_region_delete_multiple _______\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 158, in test_region_delete_multiple\n    eq_(values['key1'], reg.get('key1'))\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 628, in get\n    expiration_time, ignore_expiration)(value)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n___________ BMemcachedDistributedWithTimeoutTest.test_region_expire ____________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 267, in test_region_expire\n    eq_(reg.get(\"some key\", ignore_expiration=True), \"some value 1\")\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 630, in get\n    return value.payload\nAttributeError: 'list' object has no attribute 'payload'\n_____ BMemcachedDistributedWithTimeoutTest.test_region_get_multiple_values _____\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 129, in test_region_get_multiple_values\n    values = reg.get_multi(['key1', 'key2', 'key3'])\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 702, in get_multi\n    backend_values\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 698, in <listcomp>\n    value.payload if value is not NO_VALUE else value\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 701, in <genexpr>\n    _unexpired_value_fn(value) for value in\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n____ BMemcachedDistributedWithTimeoutTest.test_region_get_nothing_multiple _____\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 140, in test_region_get_nothing_multiple\n    ['key1', 'key2', 'key3', 'key4', 'key5', 'key6'])\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 702, in get_multi\n    backend_values\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 698, in <listcomp>\n    value.payload if value is not NO_VALUE else value\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 701, in <genexpr>\n    _unexpired_value_fn(value) for value in\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n________ BMemcachedDistributedWithTimeoutTest.test_region_set_get_value ________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 98, in test_region_set_get_value\n    eq_(reg.get(\"some key\"), \"some value\")\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 628, in get\n    expiration_time, ignore_expiration)(value)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n_____ BMemcachedDistributedWithTimeoutTest.test_region_set_multiple_values _____\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 104, in test_region_set_multiple_values\n    eq_(values['key1'], reg.get('key1'))\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 628, in get\n    expiration_time, ignore_expiration)(value)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n__________ BMemcachedDistributedTest.test_decorated_fn_functionality ___________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 290, in test_decorated_fn_functionality\n    eq_(my_function(3, 4), 8)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 1220, in decorate\n    should_cache_fn)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 825, in get_or_create\n    async_creator) as value:\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 154, in __enter__\n    return self._enter()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 87, in _enter\n    value = value_fn()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 781, in get_value\n    if (value is NO_VALUE or value.metadata['v'] != value_version or\nAttributeError: 'list' object has no attribute 'metadata'\n____________ BMemcachedDistributedTest.test_region_delete_multiple _____________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 158, in test_region_delete_multiple\n    eq_(values['key1'], reg.get('key1'))\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 628, in get\n    expiration_time, ignore_expiration)(value)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n_________________ BMemcachedDistributedTest.test_region_expire _________________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 267, in test_region_expire\n    eq_(reg.get(\"some key\", ignore_expiration=True), \"some value 1\")\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 630, in get\n    return value.payload\nAttributeError: 'list' object has no attribute 'payload'\n__________ BMemcachedDistributedTest.test_region_get_multiple_values ___________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 129, in test_region_get_multiple_values\n    values = reg.get_multi(['key1', 'key2', 'key3'])\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 702, in get_multi\n    backend_values\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 698, in <listcomp>\n    value.payload if value is not NO_VALUE else value\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 701, in <genexpr>\n    _unexpired_value_fn(value) for value in\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n__________ BMemcachedDistributedTest.test_region_get_nothing_multiple __________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 140, in test_region_get_nothing_multiple\n    ['key1', 'key2', 'key3', 'key4', 'key5', 'key6'])\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 702, in get_multi\n    backend_values\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 698, in <listcomp>\n    value.payload if value is not NO_VALUE else value\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 701, in <genexpr>\n    _unexpired_value_fn(value) for value in\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n_____________ BMemcachedDistributedTest.test_region_set_get_value ______________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 98, in test_region_set_get_value\n    eq_(reg.get(\"some key\"), \"some value\")\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 628, in get\n    expiration_time, ignore_expiration)(value)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n__________ BMemcachedDistributedTest.test_region_set_multiple_values ___________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 104, in test_region_set_multiple_values\n    eq_(values['key1'], reg.get('key1'))\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 628, in get\n    expiration_time, ignore_expiration)(value)\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 648, in value_fn\n    value.metadata[\"ct\"]):\nAttributeError: 'list' object has no attribute 'metadata'\n____________ BMemcachedDistributedMutexTest.test_reentrant_dogpile _____________\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 382, in test_reentrant_dogpile\n    reg.get_or_create(\"foo\", create_foo),\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 825, in get_or_create\n    async_creator) as value:\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 154, in __enter__\n    return self._enter()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 87, in _enter\n    value = value_fn()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 781, in get_value\n    if (value is NO_VALUE or value.metadata['v'] != value_version or\nAttributeError: 'list' object has no attribute 'metadata'\n_______ BMemcachedDistributedMutexWithTimeoutTest.test_reentrant_dogpile _______\nTraceback (most recent call last):\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/tests/cache/_fixtures.py\", line 382, in test_reentrant_dogpile\n    reg.get_or_create(\"foo\", create_foo),\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 825, in get_or_create\n    async_creator) as value:\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 154, in __enter__\n    return self._enter()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/lock.py\", line 87, in _enter\n    value = value_fn()\n  File \"/build/python-dogpile.cache/src/dogpile.cache-0.6.2/dogpile/cache/region.py\", line 781, in get_value\n    if (value is NO_VALUE or value.metadata['v'] != value_version or\nAttributeError: 'list' object has no attribute 'metadata'\n============================ pytest-warning summary ============================\nWC1 None [pytest] section in setup.cfg files is deprecated, use [tool:pytest] instead.\n===== 23 failed, 98 passed, 66 skipped, 1 pytest-warnings in 37.30 seconds =====\n```\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/106", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/106/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/106/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/106", "id": 384028858, "node_id": "MDU6SXNzdWUzODQwMjg4NTg=", "number": 106, "title": "Can't build with python 3.5", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-18T08:12:28Z", "updated_at": "2016-12-19T19:06:31Z", "closed_at": "2016-12-19T15:17:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Luigi Baldoni ([luigino](https://github.com/luigino))**\n\n```\n> python3 setup.py build\nTraceback (most recent call last):\n  File \"setup.py\", line 5, in <module>\n    from setuptools import setup, find_packages\n  File \"/usr/lib/python3.5/site-packages/setuptools/__init__.py\", line 10, in <module>\n    from setuptools.extern.six.moves import filter, filterfalse, map\n  File \"/usr/lib/python3.5/site-packages/setuptools/extern/__init__.py\", line 1, in <module>\n    from pkg_resources.extern import VendorImporter\n  File \"/usr/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 3015, in <module>\n    @_call_aside\n  File \"/usr/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2999, in _call_aside\n    f(*args, **kwargs)\n  File \"/usr/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 3043, in _initialize_master_working_set\n    for dist in working_set\n  File \"/usr/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 3043, in <genexpr>\n    for dist in working_set\n  File \"/usr/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2573, in activate\n    declare_namespace(pkg)\n  File \"/usr/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2147, in declare_namespace\n    _handle_ns(packageName, path_item)\n  File \"/usr/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2087, in _handle_ns\n    _rebuild_mod_path(path, packageName, module)\n  File \"/usr/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2116, in _rebuild_mod_path\n    orig_path.sort(key=position_in_sys_path)\nAttributeError: '_NamespacePath' object has no attribute 'sort'\n```\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/105", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/105/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/105/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/105", "id": 384028857, "node_id": "MDU6SXNzdWUzODQwMjg4NTc=", "number": 105, "title": "to_str should have default as repr?", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-02T04:49:22Z", "updated_at": "2016-09-02T14:25:18Z", "closed_at": "2016-09-02T14:25:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nShould the default conversion from argument to key string be `repr` rather than `str`?\n\nFrom the [docs](https://docs.python.org/2/tutorial/inputoutput.html):\n\n>The str() function is meant to return representations of values which are fairly human-readable, while *repr() is meant to generate representations which can be read by the interpreter* (or will force a SyntaxError if there is no equivalent syntax). For objects which don\u2019t have a particular representation for human consumption, str() will return the same value as repr(). Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function. Strings and floating point numbers, in particular, have two distinct representations.\n\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/103", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/103/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/103/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/103", "id": 384028850, "node_id": "MDU6SXNzdWUzODQwMjg4NTA=", "number": 103, "title": "Using Pickle For Serialization Causes Memory Usage To Grow Indefinitely", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-07-18T15:45:52Z", "updated_at": "2016-07-29T16:09:58Z", "closed_at": "2016-07-18T18:27:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Paul Brown ([pawl-rs](https://github.com/pawl-rs))**\n\nI am caching a large list of unique objects using the RedisBackend and I am seeing memory usage increase each time the cache expires.\n\nThis issue appears to be the intended behavior of pickle:\n> The Pickler instance keeps a memory of each of the lists\n> dumped alive, so that if you later pickle a reference to the\n> same list (or other mutable object) again, it can pickle a\n> reference rather than a copy of the value. This is a\n> feature.\n> \n> By using the same Pickler instance to dump 10,000 unrelated\n> lists, you simply grow the memo data structure beyond\n> reason. So just don't do this!\"\n- Guido van Rossum http://bugs.python.org/issue229810\n\nSo, we saw our memory usage grow because pickle.dumps is storing the new list in its memo each time cache expires. \n\nWhat would be the best way to solve this?\n\nSince custom serialization is not possible yet (\nhttps://bitbucket.org/zzzeek/dogpile.cache/issues/18/get-serialization-to-be-configurable-with), I was thinking about overriding the RedisBackend and adding pickle.Pickler.clear_memo to the set method.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/102", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/102/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/102/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/102", "id": 384028846, "node_id": "MDU6SXNzdWUzODQwMjg4NDY=", "number": 102, "title": "Upload dogpile.cache 0.6.2 to pypi", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925120, "node_id": "MDU6TGFiZWwxMTM4OTI1MTIw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/task", "name": "task", "color": "8e9ca0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-06T19:31:13Z", "updated_at": "2016-07-06T19:57:56Z", "closed_at": "2016-07-06T19:57:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nThe latest version of dogpile.cache on pypi is 0.6.1. When will 0.6.2 be uploaded?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/100", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/100/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/100/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/100", "id": 384028839, "node_id": "MDU6SXNzdWUzODQwMjg4Mzk=", "number": 100, "title": "proposal - `region.key_mangled` or make key_mangler an API method", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-06-20T18:33:01Z", "updated_at": "2018-06-28T17:39:57Z", "closed_at": "2018-06-28T17:39:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nI recently realized that there is no documented way to get a mangled key out of a region.\n\ndogpile will conditionally mangle a given key using an internally defined 'self.key_mangler' (which could be from a user or backend)\n\nin order find out what key dogpile is eventually caching to, one would need to do something like this:\n\n    key_mangled = region.key_mangler(key) if region.key_mangler else key\n\nthe problem with this, is that `key_mangler` is only documented as a configuration parameter -- not an API method -- so it is possible to break in future releases (not likely, but possible).  \n\nso my proposal is to either:\n\n1. document/lock `key_mangler` as an API method of the region class\nor\n2. add a key_mangled() function that just runs a key through a mangler if defined.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/99", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/99/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/99/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/99", "id": 384028837, "node_id": "MDU6SXNzdWUzODQwMjg4Mzc=", "number": 99, "title": "ReadWriteMutex is not provided anymore by dogpile.core in 0.6.0", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-06T19:33:04Z", "updated_at": "2016-06-06T22:45:08Z", "closed_at": "2016-06-06T22:45:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nAs the title says. It makes the 0.6.0 not backward compatible for my app.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/98", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/98/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/98/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/98", "id": 384028834, "node_id": "MDU6SXNzdWUzODQwMjg4MzQ=", "number": 98, "title": "Multiple servers in backend URL causes unnecessary DNS lookup", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-06-06T15:47:40Z", "updated_at": "2016-06-07T20:13:43Z", "closed_at": "2016-06-07T20:13:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Bjoern Teipel ()**\n\nHi folks,\n\nI'm using dogpile.cache.memcached in a OpenStack/Keystone scope and noticed when we do configure a backend URL including multiple hosts, for example:\n\nurl:172.29.237.236,172.29.238.219,172.29.239.40:11211\n\nI do see quite a lot of failed DNS lookups for the invalid DNS name:\n\n172.29.237.236,172.29.238.219,172.29.239.40.\n\nwhich I have captured with the pcap dump:\n10:06:27.923726 IP keystone_container-db00cc3b.43267 > 10.0.3.1.domain: 61056+ A? 172.29.237.236,172.29.238.219,172.29.239.40. (61)\n10:06:27.923803 IP 10.0.3.1.domain > keystone_container-db00cc3b.43267: 61056 NXDomain 0/0/0 (61)\n\nOnce I do configure real host names, resolvable by DNS, I do not see even attempts to resolve those names and the dogpile memcache backend is not functioning at all.\nAt this point I can not tell if the problem is with dogpile or python-memcache. Personally I think the issue seems to be inside the memcache library since that one is actually making the sockets.\n\nWhat do you think?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/97", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/97/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/97/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/97", "id": 384028830, "node_id": "MDU6SXNzdWUzODQwMjg4MzA=", "number": 97, "title": "NullLock.acquire takes exactly 1 argument (2 given)", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-26T07:54:05Z", "updated_at": "2016-05-26T22:47:26Z", "closed_at": "2016-05-26T22:47:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Jamie  Lennox ([jamielennox](https://github.com/jamielennox))**\n\nSo this is a transient bug in a keystone deployment i'm working on that i haven't figured out the source of yet, however the fix i think is reasonably clear. \n\nThe Null cache backed's NullLock.acquire does not accept any arguments [1] however it's called with wait=True [2] and so gives a ValueError. I'm not sure how this went unnoticed for so long or why I'm only seeing it on some runs, but the acquire function should definitely be accepting the wait parameter like other lock implementations. \n\n\n\n[1] https://bitbucket.org/zzzeek/dogpile.cache/src/87965ada186f9b3a4eb7ff033a2e31437d5e9bc6/dogpile/cache/backends/null.py?at=master&fileviewer=file-view-default#null.py-20\n\n[2] https://bitbucket.org/zzzeek/dogpile.core/src/e9011d84952fda433b45bd4e0ef7a11bd764f582/dogpile/core/dogpile.py?at=master&fileviewer=file-view-default#dogpile.py-122\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/93", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/93/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/93/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/93", "id": 384028816, "node_id": "MDU6SXNzdWUzODQwMjg4MTY=", "number": 93, "title": "Auto-select an available backend", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-02-04T22:29:43Z", "updated_at": "2016-02-25T14:39:38Z", "closed_at": "2016-02-05T14:23:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Mark V ([mverleg](https://github.com/mverleg))**\n\nSorry if this is somehow obvious but I can't find it. Does dogpile.cache have any way to choose a backend automatically (e.g. by trying them from fast to slow until one works)?\n\nI want to use it in some code that many people can use and customize and would like to minimize the setup that is strictly necessary for them.\n\nOf course then the code should only use the shared functionality like get, set, delete and cache_on_arguments but that seems useful enough.\n\nIf it doesn't exist, would that be something you'd want to include if someone made it? (I'm not promising). And do you have any pointer on where to implement it? Make a special backend for it that just proxies all requests to the first working other backend it finds?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/92", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/92/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/92/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/92", "id": 384028814, "node_id": "MDU6SXNzdWUzODQwMjg4MTQ=", "number": 92, "title": "Benchmarks?", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138888277, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc3", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": "This will not be worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-02-03T22:45:14Z", "updated_at": "2016-05-04T19:59:46Z", "closed_at": "2016-05-04T19:59:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Grant Jenks ([grantjenks](https://github.com/grantjenks))**\n\nDoes this project have any benchmarks? I took a quick look at the tests directory but didn't see anything.\n\nI'm creating yet another Python Cache library and I wanted to compare the performance with this popular project.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/91", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/91/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/91/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/91", "id": 384028811, "node_id": "MDU6SXNzdWUzODQwMjg4MTE=", "number": 91, "title": "Merge Dogpile.Core into Dogpile.Cache package", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925120, "node_id": "MDU6TGFiZWwxMTM4OTI1MTIw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/task", "name": "task", "color": "8e9ca0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-02-01T19:29:30Z", "updated_at": "2016-06-03T14:55:33Z", "closed_at": "2016-06-03T14:55:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Morgan Fainberg ()**\n\nDue to wierdness with python package namespaces (this is a long discussion that invloves pip, system packages, etc) when you have two separate packages providing into the same namespace, there ends up being odd mis-matches.\n\nThe plan here is to move dogpile.core into dogpile.cache, and EOL dogpile.core package.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/89", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/89/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/89/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/89", "id": 384028804, "node_id": "MDU6SXNzdWUzODQwMjg4MDQ=", "number": 89, "title": "`get_or_create` gets twice (docs deficiency?)", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925145, "node_id": "MDU6TGFiZWwxMTM4OTI1MTQ1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/easy", "name": "easy", "color": "9dff5b", "default": false, "description": ""}, {"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-04T18:04:55Z", "updated_at": "2018-05-05T05:27:18Z", "closed_at": "2018-05-05T05:27:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nLooking at some performance logs during an audit, it appeared that our dogpile implementation was broken -- there would often be two identical cache misses in a row.\n\nAfter stacktracing and looking through source, the issue was simple enough and a non-issue  -- `dogpile.core.dogpile.Lock` is implemented in such a way that the logic flows\u00a0on a get/create like this:\n\n\u2022 get\n\u2022 create\n\u2022 get again (protect against race conditions)\n\u2022 set\n\nI think it would be helpful to just add a line to the API docs about this, as I couldn't find anything in dogpile.cache addressing it -- and it sure looks like I broke something, even when everything is working exactly as it should.\n\n    Note: `get_or_create` utilizes the `Lock` mechanism from `dogpile.core`. In order to protect against race conditions, a secondary call to 'get' is made before the call to `set`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/88", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/88/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/88/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/88", "id": 384028799, "node_id": "MDU6SXNzdWUzODQwMjg3OTk=", "number": 88, "title": "Issue with DBMBackend", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-03T10:11:30Z", "updated_at": "2015-11-04T17:52:11Z", "closed_at": "2015-11-03T22:34:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by wong2 NA ([wong2](https://github.com/wong2))**\n\nHi, this is my config:\n\n\n```\n#!python\n\nfrom dogpile.cache import make_region\n\ncache_config = {\n    'backend': 'dogpile.cache.dbm',\n    'arguments': {\n        'filename': 'offline_data/bus_offline_data.dbm'\n    }\n}\n\ncache = make_region().configure(**cache_config)\n```\n\nthe problem is, if I transfer the cache file `bus_offline_data.dbm` to another machine ( Mac to Windows ), and run the same code, I got this error:\n\n![QQ20151103-1.png](https://bitbucket.org/repo/b5L85g/images/2538647765-QQ20151103-1.png)\n\nso, isn't the cache file portable? and if not, is there a backend to provide portable file cache?\n\nthanks\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/87", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/87/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/87/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/87", "id": 384028795, "node_id": "MDU6SXNzdWUzODQwMjg3OTU=", "number": 87, "title": "redis tests flawed because backend uses `pop` instead of `get` on construction", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-10-20T19:38:05Z", "updated_at": "2016-08-02T19:41:44Z", "closed_at": "2016-08-02T19:41:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nThe Redis test setup was wiping out backend configuration on first pass.  This took 2 hours to pinpoint how(!).  backend config arguments kept getting wiped out, resulting in unpredictable test results.\n\nThe problem is that the redis backend uses `arguments.pop` to set up the configuration, while the test suite uses a class attribute to store the configuration.  The first run test on the redis backend will clear out the config options for every subsequent test -- forcing them to run on the defaults.\n\nA proper fix is to replace `pop` with `get` in the backend.  \n\nThe only other backend to use `pop` is memory, which uses it for managing a cache_dict.  I'm not sure if that should be converted to `get` as well.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/86", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/86/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/86/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/86", "id": 384028792, "node_id": "MDU6SXNzdWUzODQwMjg3OTI=", "number": 86, "title": "redis tests are implemented \"not great\"", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-20T18:09:05Z", "updated_at": "2016-08-03T16:24:44Z", "closed_at": "2016-08-03T16:24:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nworking on a fix, but ticketing for tracking.\n\n* all redis tests hit the same db (0)\n* keys are simple (\"0\"-\"10\"), so they can conflict with existing user keys\n* tearDown doesn't actually delete created keys\n\nfixes:\n* use a default key_mangler for redis (prefix with \"dogpile.test._TestRedisConn:\")\n* use a custom key_mangler for each test (\"dogpile.test.%(test)s\")\n* set a `redis_expiration_time` argument on the config_args.  update the backend test to respect `redis_expiration_time`\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/84", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/84/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/84/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/84", "id": 384028780, "node_id": "MDU6SXNzdWUzODQwMjg3ODA=", "number": 84, "title": "tests broken?  (redis, others?)", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-20T17:07:13Z", "updated_at": "2015-10-20T17:26:16Z", "closed_at": "2015-10-20T17:26:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nI kept generating an exception when running tests in my fork\n\n\t================================================================= FAILURES =================================================================\n\t____________________________________________________ RedisTest.test_threaded_get_multi _____________________________________________________\n\ttests/cache/_fixtures.py:237: in test_threaded_get_multi\n\t\tf()\n\ttests/cache/_fixtures.py:235: in f\n\t\tcreator)\n\tdogpile/cache/region.py:762: in get_or_create_multi\n\t\tasync_creator=lambda mutex: async_creator(orig_key, mutex)\n\t../../webserver/environments/cliquedin-2.7.5/lib/python2.7/site-packages/dogpile.core-0.4.1-py2.7.egg/dogpile/core/dogpile.py:162: in __enter__\n\t\treturn self._enter()\n\t../../webserver/environments/cliquedin-2.7.5/lib/python2.7/site-packages/dogpile.core-0.4.1-py2.7.egg/dogpile/core/dogpile.py:91: in _enter\n\t\tvalue = value_fn()\n\tdogpile/cache/region.py:760: in <lambda>\n\t\tlambda: get_value(mangled_key),\n\tdogpile/cache/region.py:711: in get_value\n\t\tvalue.metadata['v'] != value_version or \\\n\tE   AttributeError: 'str' object has no attribute 'metadata'\n\nThis could have been from me (my fork makes that value pluggable)  I set up a clean install of the original source, and ran the test alone (i edited setup.py to have the following:\n\n          import pytest\n        + self.pytest_args = ['tests/cache/test_redis_backend.py::RedisTest::test_threaded_get_multi']\n          errno = pytest.main(self.pytest_args)\n\nThe same issue popped up.\n\nIt seems that the test constantly fails, but isn't reported or run as part of the normal routine.  Can someone confirm?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/83", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/83/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/83/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/83", "id": 384028777, "node_id": "MDU6SXNzdWUzODQwMjg3Nzc=", "number": 83, "title": "oddity from `region.get_or_create_multi`, and I created a docs bug.", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138925145, "node_id": "MDU6TGFiZWwxMTM4OTI1MTQ1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/easy", "name": "easy", "color": "9dff5b", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-17T03:43:41Z", "updated_at": "2015-10-19T20:29:47Z", "closed_at": "2015-10-19T20:29:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nI've been working on raw data all day, and kept running into an edge-case with my unit tests regarding region's `get_or_create_multi`.\n\nif a backend proxy modifies the values in the `mapping` dictionary it gets via an upstream call from `get_or_create_multi`, it will break your application.  this is because the dict known as `values_w_created` (lines 789-797) is the same dict that is used to compute a value for for the 'get' and Python modifies that in-place.  \n\n    def set_multi(self, mapping):\n        \"\"\"this will break if the mapping[k] is no longer a CachedValue object\"\"\"\n        for (k, v) in mapping.iteritems():\n            mapping[k] = self.value_encode(v)\n        return self.proxied.set_multi(mapping)\n        \n    def set_multi(self, mapping):\n        \"\"\"this will work as we encode a different dict.\"\"\"\n        mapping2 = {}\n        for (k, v) in mapping.iteritems():\n            mapping2[k] = self.value_encode(v)\n        return self.proxied.set_multi(mapping2)\n\ni'll have a pull request for the docs on ProxyBackend next week.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/82", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/82/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/82/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/82", "id": 384028776, "node_id": "MDU6SXNzdWUzODQwMjg3NzY=", "number": 82, "title": "idea: split `wraps` in to pre_ and post_ hooks.  or something.", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925145, "node_id": "MDU6TGFiZWwxMTM4OTI1MTQ1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/easy", "name": "easy", "color": "9dff5b", "default": false, "description": ""}, {"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-17T00:25:09Z", "updated_at": "2015-11-12T00:20:05Z", "closed_at": "2015-11-12T00:20:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nI noticed this behavior on `ProxyBackend` while trying to extend `Region` to support raw data...\n\n* self.proxy.set* is passed a CachedValue instance\n* self.proxy.get* must return a CachedValue instance\n\nThis is basically a post `CachedValue` hook.  \n\nIt would be useful to have a hook before objects are blessed into CachedValue.\n\nThere's no way this can happen in the current architecture, but it would be nice in some future.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/81", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/81/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/81/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/81", "id": 384028773, "node_id": "MDU6SXNzdWUzODQwMjg3NzM=", "number": 81, "title": "support Redis via HGET", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925145, "node_id": "MDU6TGFiZWwxMTM4OTI1MTQ1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/easy", "name": "easy", "color": "9dff5b", "default": false, "description": ""}, {"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-10-02T20:44:49Z", "updated_at": "2018-05-05T05:25:20Z", "closed_at": "2018-05-05T05:25:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nBrainstorming as an idea for feedback on how to best pull off -- it would be great to support Redis HGET [http://redis.io/commands/hget]\n\nHGET allows one to shard keys into hashes.  If you have a large amount of numeric keys, this can significantly drop the memory imprint of the redis database by partitioning into buckets ( here's an example blogpost http://instagram-engineering.tumblr.com/post/12202313862/storing-hundreds-of-millions-of-simple-key-value )\n\nSome initial thoughts:\n\n\u2022 RedisBackend could just handle hget/hset operations if the `key` were a tuple (not string)\n\u2022 A key_manger itself could be used to generate the hget/hset tuples\n\u2022 A variant of key_mangler assigned to the region could be used to generate a hset/hget tuple\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/79", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/79/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/79/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/79", "id": 384028769, "node_id": "MDU6SXNzdWUzODQwMjg3Njk=", "number": 79, "title": "expiration_time for get_or_create function doesn't work for redis", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-08-04T05:32:07Z", "updated_at": "2018-07-10T06:33:00Z", "closed_at": "2015-08-04T10:25:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Yuan Hong ([hongyuan](https://github.com/hongyuan))**\n\nWith redis backend, it seems that one can only configure a timeout for a cache region, and not individually by passing expiration_time into cache_region.get_or_create.\n\nIf one creates a redis cache region without redis_expiration_time,  and then calls get_or_create with an expiration_time, no expiration time is set on the key in the redis database.\n\nIn dogpile.cache.backends.redis, the set method uses only redis_expiration_time for the cache region:\n\n```\n#!python\n\n    def set(self, key, value):\n        if self.redis_expiration_time:\n            self.client.setex(key, self.redis_expiration_time,\n                              pickle.dumps(value, pickle.HIGHEST_PROTOCOL))\n        else:\n            self.client.set(key, pickle.dumps(value, pickle.HIGHEST_PROTOCOL))\n```\n\nThe argument expiration_time passed to get_or_create is used in the function for creating a lock :\n\n```\n#!python\n\n        with Lock(\n                self._mutex(key),\n                gen_value,\n                get_value,\n                expiration_time,\n                async_creator) as value:\n            return value\n```\n\nFor redis backend which supports per key expiration_time, the lock timeout doesn't seem to  have anything to do with key expiration.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/78", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/78/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/78/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/78", "id": 384028767, "node_id": "MDU6SXNzdWUzODQwMjg3Njc=", "number": 78, "title": "Is the memory backend thread safe?", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-20T02:46:30Z", "updated_at": "2015-07-20T13:25:25Z", "closed_at": "2015-07-20T13:25:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by krey ()**\n\n\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/77", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/77/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/77/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/77", "id": 384028762, "node_id": "MDU6SXNzdWUzODQwMjg3NjI=", "number": 77, "title": "handling redis lock timeouts", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2015-05-29T23:46:34Z", "updated_at": "2018-05-05T05:24:51Z", "closed_at": "2018-05-05T05:24:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nI've run into a situation with the `distributed_lock` in the redis backend (ie, locks that redis manages).\n\nI realized through a few Keys which are backed by `create` functions that take too long or fail, that a `lock_timeout` basically must be set \u2013 otherwise you can jam your application by setting an eternal lock for a key that is never set.\n\nSo i set the lock_timeout, and that solves one problem, but creates another \u2013 if the process ends up completing after the lock_timeout, a LockError is raised in the redis package's lock.py `Lock.do_release` method.\n\n    raise LockError(\"Cannot release a lock that's no longer owned\")\n\nFor context, this is happening in a webapp and there can be a variable time on the lock_timeout as it can be caused due to a slow-connection, dropped connection, process killed by a long-process monitor or something else. Since this is only being used for caching, I opted to expire the redis lock using the shortest possible time. \n\nA hopeful fix would have been to configure the dogpile redis backend to ignore this particular lock error.  However, looking at the traceback and source, this looks to be really tricky.\n\n\tdogpile/cache/region.py\", line 651, in `get_or_create`\n\tdogpile/core/dogpile.py\", line 158, in `__enter__`\n\tdogpile/core/dogpile.py\", line 98, in `_enter`\n\tdogpile/core/dogpile.py\", line 153, in `_enter_create`\n\tredis/lock.py\", line 135, in `release` (raised on line 264)\n\t\nIn order to keep the value AND suppress the timeout, the config data in dogpile.cache would need to be used in dogpile.core.  that is a lot of updating.\n\nanother approach might be catching this particular lock error in region, and then immediately getting the value again (which should not have an error).  that too looks tricky though.\n\ndoes anyone have suggestions for an elegant fix?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/74", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/74/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/74/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/74", "id": 384028752, "node_id": "MDU6SXNzdWUzODQwMjg3NTI=", "number": 74, "title": "Redis: get_or_create_multi fails on empty list", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-24T14:01:55Z", "updated_at": "2015-02-24T18:35:01Z", "closed_at": "2015-02-24T18:35:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Noam Kushinsky ([noamk](https://github.com/noamk))**\n\nSimilarly to #58, `get_or_create_multi` fails when it gets an empty list:\n```\nregion.get_or_create_multi([], lambda: 0)\n```\nResults in:\n```\nResponseError: wrong number of arguments for 'mget' command\n```\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/72", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/72/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/72/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/72", "id": 384028746, "node_id": "MDU6SXNzdWUzODQwMjg3NDY=", "number": 72, "title": "Option to ignore exceptions (e.g. ConnectionError)", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1139087459, "node_id": "MDU6TGFiZWwxMTM5MDg3NDU5", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/no%20activity", "name": "no activity", "color": "d65e26", "default": false, "description": "an issue that was expecting a response or contribution of some kind never got answered."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-02-04T15:12:52Z", "updated_at": "2018-11-25T05:08:46Z", "closed_at": "2018-11-25T05:07:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Mihnea Dobrescu-Balaur ([mihneadb](https://github.com/mihneadb))**\n\nIt would be useful to have a parameter for when configuring a region such that exceptions are silenced. Since we are talking about a cache, the application should still run even if the cache dies - putting try except everywhere in the code where one uses caching is too much.\nA global flag that decides to silence the exceptions or not would do this job.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/71", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/71/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/71/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/71", "id": 384028745, "node_id": "MDU6SXNzdWUzODQwMjg3NDU=", "number": 71, "title": "region.get_or_create calls creator function when expiration_time = -1", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-21T08:57:33Z", "updated_at": "2015-01-22T09:01:25Z", "closed_at": "2015-01-21T23:06:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Fabian Neumann ([hellp](https://github.com/hellp))**\n\nI have a redis backend region that per default has no expiration_time set. Instead I manually set it on each call to `region.get_or_create` -- depending on some business logic.\n\nIn some cases I don't want the cached value to expire at all, so I pass the keyword argument `expiration_time=-1`. `get_or_create` still calls the creator function in these cases, which, if I understand it correctly, should not be the case, right? The value *is* already in the Redis db.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/70", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/70/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/70/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/70", "id": 384028738, "node_id": "MDU6SXNzdWUzODQwMjg3Mzg=", "number": 70, "title": "Globally prefix all redis keys", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-01-07T16:49:41Z", "updated_at": "2018-11-25T05:10:50Z", "closed_at": "2018-11-25T05:10:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Gustavo Carneiro ([gjcarneiro](https://github.com/gjcarneiro))**\n\nHi, I would like dogpile to prefix all keys it puts into redis with a string given by me.  For instance, it now creates keys like\n\n\"api.db:get_customer_balance|2933\"\n\nI want to prefix everything with a string, like \"mymodule:dogpile:\".\n\nI found a way to do this, using the key_mangler, but it I'm not sure if it's the appropriate use for it.  If it is appropriate, could you add some words in the documentation explaining this use case?  Thanks.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/66", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/66/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/66/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/66", "id": 384028723, "node_id": "MDU6SXNzdWUzODQwMjg3MjM=", "number": 66, "title": "Exception from backend", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138888275, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/invalid", "name": "invalid", "color": "96182f", "default": true, "description": "This doesn't seem right"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-08-15T08:21:20Z", "updated_at": "2014-08-15T19:29:30Z", "closed_at": "2014-08-15T19:29:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nHi guy,\n\nI'm using redis cache backend and I have a problem.. My redis raise Exception for some reason.. it makes my app error too..\n\nhow solution for my app still running even though Exception???\n\nTks \n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/65", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/65/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/65/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/65", "id": 384028720, "node_id": "MDU6SXNzdWUzODQwMjg3MjA=", "number": 65, "title": "Default behavior if the region hasn't been configured", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-07-18T13:21:53Z", "updated_at": "2015-09-12T18:29:18Z", "closed_at": "2015-09-12T18:29:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Shayne Miel ([FragLegs](https://github.com/FragLegs))**\n\nI'm trying to set up my code so that functions decorated with ```@region.cache_on_arguments``` will simply call the decorated function if the region has not yet been configured. I am aware of the null backend, but if I set that as the default backend, I cannot later set a real backend. I suspect that I may be using the library incorrectly.\n\nHere is what I would like to be able to do:\n\n    import dogpile.cache\n    region = dogpile.cache.make_region()\n    \n    @region.cache_on_arguments()\n    def foo(x):\n        return x * 2\n    \n    bar = foo(21)\n    region = region.configure('dogpile.cache.memory')\n    baz = foo(21)\n\nBut I get an AttributeError: 'CacheRegion' object has no attribute 'expiration_time'\n\nIf I try to use the null backend as a default configuration, like this:\n\n    import dogpile.cache\n    region = dogpile.cache.make_region().configure('dogpile.cache.null')\n    \n    @region.cache_on_arguments()\n    def foo(x):\n        return x * 2\n    \n    bar = foo(21)\n    region = region.configure('dogpile.cache.memory')\n    baz = foo(21)\n\nI get a dogpile.cache.exception.RegionAlreadyConfigured error.\n\nThis could probably be solved by putting a check for whether the backend is configured in get_or_create(), but I'm not sure where the best place to put it would be. Am I just missing a way to achieve what I'm trying to do?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/60", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/60/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/60/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/60", "id": 384028709, "node_id": "MDU6SXNzdWUzODQwMjg3MDk=", "number": 60, "title": "expiration_time & should_cache by key", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-03-06T11:22:20Z", "updated_at": "2014-06-09T09:27:59Z", "closed_at": "2014-06-09T09:27:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by lxyu ([lxyu](https://github.com/lxyu))**\n\nIn a use case, some of the data is hot data(recent and changes a lot) and some is cold data(almost never change).\n\nSo it would be great if I can use a a function to dynamic set expiration time by key. For cold data use a very long expiration time while hot data less.\n\nAnd the same goes for should_cache_fn, I don't want cache for the real time hot data, while cold data can be cached for a long time.\n\nHow do you think about it?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/58", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/58/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/58/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/58", "id": 384028706, "node_id": "MDU6SXNzdWUzODQwMjg3MDY=", "number": 58, "title": "Redis backend raises exception when calling get/set_multi with empty iterable/mapping", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-01-12T23:25:13Z", "updated_at": "2014-06-13T17:50:29Z", "closed_at": "2014-06-13T17:50:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by greggg ([greggg](https://github.com/greggg))**\n\nCalling `get_multi` with an empty iterable:\n```\n#!python\n\nfrom dogpile.cache import make_region\n\nregion = make_region().configure(\n    'dogpile.cache.redis',\n    arguments={\n        'host': 'localhost',\n        'port': 6379,\n        'db': 0,\n        'distributed_lock': True\n    }\n)\nregion.get_multi([])\n```\nResults in:\n```\n  File \"/home/gg/dev/sandbox/dogpile.cache/dogpile/cache/region.py\", line 509, in get_multi\n    backend_values = self.backend.get_multi(keys)\n  File \"/home/gg/dev/sandbox/dogpile.cache/dogpile/cache/backends/redis.py\", line 122, in get_multi\n    values = self.client.mget(keys)\n  File \"/home/gg/.virtualenvs/dogpile/lib/python2.7/site-packages/redis/client.py\", line 768, in mget\n    return self.execute_command('MGET', *args)\n  File \"/home/gg/.virtualenvs/dogpile/lib/python2.7/site-packages/redis/client.py\", line 461, in execute_command\n    return self.parse_response(connection, command_name, **options)\n  File \"/home/gg/.virtualenvs/dogpile/lib/python2.7/site-packages/redis/client.py\", line 471, in parse_response\n    response = connection.read_response()\n  File \"/home/gg/.virtualenvs/dogpile/lib/python2.7/site-packages/redis/connection.py\", line 339, in read_response\n    raise response\nResponseError: wrong number of arguments for 'mget' command\n```\n\nCalling `set_multi` with an empty mapping:\n```\n#!python\n\nfrom dogpile.cache import make_region\n\nregion = make_region().configure(\n    'dogpile.cache.redis',\n    arguments={\n        'host': 'localhost',\n        'port': 6379,\n        'db': 0,\n        'distributed_lock': True\n    }\n)\nregion.set_multi({})\n```\nResults in:\n```\n  File \"/home/gg/dev/sandbox/dogpile.cache/dogpile/cache/region.py\", line 790, in set_multi\n    self.backend.set_multi(mapping)\n  File \"/home/gg/dev/sandbox/dogpile.cache/dogpile/cache/backends/redis.py\", line 142, in set_multi\n    self.client.mset(mapping)\n  File \"/home/gg/.virtualenvs/dogpile/lib/python2.7/site-packages/redis/client.py\", line 782, in mset\n    return self.execute_command('MSET', *items)\n  File \"/home/gg/.virtualenvs/dogpile/lib/python2.7/site-packages/redis/client.py\", line 461, in execute_command\n    return self.parse_response(connection, command_name, **options)\n  File \"/home/gg/.virtualenvs/dogpile/lib/python2.7/site-packages/redis/client.py\", line 471, in parse_response\n    response = connection.read_response()\n  File \"/home/gg/.virtualenvs/dogpile/lib/python2.7/site-packages/redis/connection.py\", line 339, in read_response\n    raise response\nredis.exceptions.ResponseError: wrong number of arguments for 'mset' command\n```\n\nThe other backends do not raise an exception in these cases, so for consistency, the Redis backend should not either.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/57", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/57/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/57/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/57", "id": 384028702, "node_id": "MDU6SXNzdWUzODQwMjg3MDI=", "number": 57, "title": "util.coerce_string_conf should coerce floats?", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-01-09T20:54:25Z", "updated_at": "2014-01-16T17:38:24Z", "closed_at": "2014-01-16T17:38:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Jeff Dairiki ([dairiki](https://github.com/dairiki))**\n\nNow that #9 has made it into release, I\u2019m trying to use `distributed_lock` with the redis backend.  I\u2019ve discovered that one can not pleasantly configure `lock_sleep` to anything other than an integer or `None` when using `configure_from_config` (with a string-valued config dict, such as comes from a `.ini` settings file.)  (Generally one wants to set `lock_sleep` to a value less than 1 second \u2014 e.g. the default is 0.1.)\n\nMy guess is that the simplest solution is to fix `dogpile.cache.util.coerce_string_conf` so that it coerces strings that look like floats to floats.  I\u2019m not quite sure whether that might screw something else up, however.\n\nI'd be happy to produce a pull request if this is deemed the right way to proceed.\n\n----\nE.g.\n```\nfrom dogpile.cache import make_region\n\nmyregion = make_region()\n\nmyconfig = {\n    \"cache.backend\":\"dogpile.cache.redis\",\n    \"cache.arguments.distributed_lock\":\"true\",\n    \"cache.arguments.lock_timeout\":\"10\",\n    \"cache.arguments.lock_sleep\":\"0.1\",\n}\n\nmyregion.configure_from_config(myconfig, \"cache.\")\n\nprint \"lock_timeout = %r\" % myregion.backend.lock_timeout\nprint \"lock_sleep = %r\" % myregion.backend.lock_sleep\n\nmyregion.get_or_create('somekey', lambda: 42)\n```\n\nwhich produces\n\n```\nlock_timeout = 10\nlock_sleep = '0.1'\n\n[traceback elided]\nLockError: 'sleep' must be less than 'timeout'\n```\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/56", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/56/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/56/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/56", "id": 384028699, "node_id": "MDU6SXNzdWUzODQwMjg2OTk=", "number": 56, "title": "0.5.3 release", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-01-08T10:09:01Z", "updated_at": "2014-01-09T02:50:00Z", "closed_at": "2014-01-09T02:50:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by lxyu ([lxyu](https://github.com/lxyu))**\n\nHi zzzeek,\n\nCan you release the latest 0.5.3 version to pypi please? Just need the memory_pickle backend while current version is still 0.5.2.\n\nThanks.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/55", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/55/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/55/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/55", "id": 384028694, "node_id": "MDU6SXNzdWUzODQwMjg2OTQ=", "number": 55, "title": "Feature suggestion: allow direct access to values cached by cache_on_arguments", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-01-06T18:15:30Z", "updated_at": "2014-01-09T02:24:55Z", "closed_at": "2014-01-09T02:24:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Eric Hanchrow ()**\n\nI wanted to retrieve the cached value for a function that I'd decorated, but I didn't want to invoke the function in case there was no value.  So I wound up doing this:\n\n\n```\n#!python\n\ndef cached_value(region, namespace, fn, *args):\n    key = region.function_key_generator(namespace, fn)(*args)\n    value = region.get(key)\n    if value == NO_VALUE:\n        return None\n    return value\n\n```\n\n(I realize that conflating \"there is no value\" with \"the value is 'None'\" is bad in general, but it was OK in my case.)\n\nAnyway, the above works for me -- but it took me a while to figure out how to write that.  Given that you're already providing convenient attributes like \"invalidate\" and \"refresh\", perhaps something like this would be useful as another attribute.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/54", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/54/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/54/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/54", "id": 384028690, "node_id": "MDU6SXNzdWUzODQwMjg2OTA=", "number": 54, "title": "Implement Timeout for MemcacheLock", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2013-12-16T23:16:58Z", "updated_at": "2015-10-19T20:26:57Z", "closed_at": "2015-10-19T20:26:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nSimilar to the REDIS backend, the Memcache backend supports distributed locking.  It looks like there is no lock_timeout configurable for the distributed lock in Memcached:\n\nhttps://bitbucket.org/zzzeek/dogpile.cache/src/4c19440ad41a8f36ddf6ae41618a7f3b7fb8dd32/dogpile/cache/backends/memcached.py?at=master#cl-34\n\nCompared to redis: https://bitbucket.org/zzzeek/dogpile.cache/src/4c19440ad41a8f36ddf6ae41618a7f3b7fb8dd32/dogpile/cache/backends/redis.py?at=master#cl-106\n\nThis means that in some cases you could achieve a state with bad locking that could cause a (near) endless loop.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/53", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/53/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/53/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/53", "id": 384028687, "node_id": "MDU6SXNzdWUzODQwMjg2ODc=", "number": 53, "title": "indentation issue", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-12-16T08:59:08Z", "updated_at": "2013-12-16T15:12:21Z", "closed_at": "2013-12-16T15:12:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Melvii Ts ([layzerar](https://github.com/layzerar))**\n\nI found there is an addtion space in line 34 of file dogpile/cache/util.py.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/52", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/52/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/52/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/52", "id": 384028683, "node_id": "MDU6SXNzdWUzODQwMjg2ODM=", "number": 52, "title": "cache_on_arguments invalidate in case of classmethod", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888271, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcx", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}, {"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-12-02T15:28:58Z", "updated_at": "2013-12-02T15:40:17Z", "closed_at": "2013-12-02T15:34:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Andrey ([asyschikov](https://github.com/asyschikov))**\n\nI have following declaration:\n\n```\n#!python\nclass Takeover(db.Model, ModelMixin):\n    @classmethod\n    @default_cache_region.cache_on_arguments(expiration_time=600)\n    def get_by_category_id(cls, category_id):\n```\n\nAnd I use it like this Takeover.get_by_category_id(5). Now I decided to invalidate it. It would be natural to invalidate it based on actual parameters, like this Takeover.get_by_category_id.invalidate(5), but it doesn't work, because key_generator assumes that it \"has_self\" (cls in this case) and drops out the first param. I think this should work differently, because it is counterintuitive and your own doc adds to confusion: \"Pass to invalidate() the same arguments you\u2019d pass to the function itself to represent a particular value\".\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/51", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/51/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/51/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/51", "id": 384028682, "node_id": "MDU6SXNzdWUzODQwMjg2ODI=", "number": 51, "title": "memory backend objects persist unwanted data", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-11-26T00:36:32Z", "updated_at": "2014-01-09T02:00:28Z", "closed_at": "2014-01-09T02:00:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nI ran into an issue while troubleshooting my read-through cache.\n\nin Production, we use `pylibmc` ; in Development we usually use `dbm` , but sometimes switch to `memory` as it is much faster.  our cached data has quite a bit of processing applied to it, and on a recent test run -- unwanted 'per-request' data was somehow persisting.    i spent a few hours upgrading logging, and trying to track down phantom cache \"sets\". \n\nthen i realized what was going on -- we weren't calling a set, but the data was persisting because of the memory backend.  we weren't pulling something out of a cache, it was the same object each time.  \n\nin order to get our tests to pass and ensure some amount of parity between dev and production, i put together a quick \"MemoryPickle\" backend.  I couldn't think of a better way to handle this; it's the memory backend , with get/set wrapped in pickle loads/gets.  \n\nthis does nothing but ensure that you get an item out of the cache that only has \"set\" data.  there are probably better ways to handle this , which is why I'm just proposing this with a gist, and not doing a pull request.\n\nthis sort of thing could be handled with a wrapper or custom backend.  i think something like this is very useful and belongs in core, only because it allows users the ability to leverage the speed of a memory backend with the same behavior of external backends ( dbm , pylibmc , redis , etc )...  and it would only require a 1 line config change.\n\nhere's the working copy.\n\nhttps://gist.github.com/jvanasco/7651368\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/49", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/49/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/49/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/49", "id": 384028675, "node_id": "MDU6SXNzdWUzODQwMjg2NzU=", "number": 49, "title": "Install bug in readthedocs", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-11-22T21:27:34Z", "updated_at": "2013-11-22T21:49:41Z", "closed_at": "2013-11-22T21:34:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Antoine Bertin ([diaoul](https://github.com/diaoul))**\n\nThis fails and I have no idea why: https://readthedocs.org/builds/subliminal/976819/\nI cannot reproduce this.\n\nAny idea?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/48", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/48/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/48/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/48", "id": 384028674, "node_id": "MDU6SXNzdWUzODQwMjg2NzQ=", "number": 48, "title": "Disable dogpile.cache - e.g. \"NullBackend\"", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-11-21T23:39:32Z", "updated_at": "2015-02-17T16:01:54Z", "closed_at": "2015-02-17T16:01:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Antoine Bertin ([diaoul](https://github.com/diaoul))**\n\nI have a region created with make_region, some calls of\n```\n#!python\n\n@region.cache_on_arguments()\n```\nHow can I disable caching (NeedRegeneration being raised on each call)?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/47", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/47/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/47/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/47", "id": 384028669, "node_id": "MDU6SXNzdWUzODQwMjg2Njk=", "number": 47, "title": "Delete all expired keys", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-11-20T22:15:41Z", "updated_at": "2013-11-21T04:18:00Z", "closed_at": "2013-11-21T04:18:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Antoine Bertin ([diaoul](https://github.com/diaoul))**\n\nI could find the answer in the docs: is there a way to delete all values for which the keys are expired? I know redis can handle that itself but on other rudimentary backends (file, memory)?\n\nI'd like not to have my cache growing for ever and keeping expired keys.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/46", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/46/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/46/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/46", "id": 384028667, "node_id": "MDU6SXNzdWUzODQwMjg2Njc=", "number": 46, "title": "Error while running subliminal on QNAP", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138888275, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/invalid", "name": "invalid", "color": "96182f", "default": true, "description": "This doesn't seem right"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-11-06T20:21:05Z", "updated_at": "2013-11-12T11:06:14Z", "closed_at": "2013-11-08T02:01:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nI;m trying to run Subliminal on QNAP TS-212, and i get following error:\n /opt/local/bin/subliminal -l en -p addic7ed -c /opt/temp/periscope /share/MD0_DATA/RSS/\nINFO: Listing subtitles with provider 'addic7ed' for video <Episode [u'Person of Interest', 3x7]> with languages set([<Language [eng]>])\nERROR: Unexpected error in provider 'addic7ed'\nTraceback (most recent call last):\n  File \"build/bdist.linux-armv5tel/egg/subliminal/api.py\", line 216, in download_best_subtitles\n    provider_subtitles = provider.list_subtitles(video, provider_video_languages)\n  File \"build/bdist.linux-armv5tel/egg/subliminal/providers/addic7ed.py\", line 175, in list_subtitles\n    return [s for s in self.query(video.series, video.season)\n  File \"build/bdist.linux-armv5tel/egg/subliminal/providers/addic7ed.py\", line 152, in query\n    show_ids = self.get_show_ids()\n  File \"/opt/local/lib/python2.7/site-packages/dogpile.cache-0.5.1-py2.7.egg/dogpile/cache/region.py\", line 998, in decorate\n    should_cache_fn)\n  File \"/opt/local/lib/python2.7/site-packages/dogpile.cache-0.5.1-py2.7.egg/dogpile/cache/region.py\", line 636, in get_or_create\n    async_creator) as value:\n  File \"/opt/local/lib/python2.7/site-packages/dogpile.core-0.4.1-py2.7.egg/dogpile/core/dogpile.py\", line 158, in __enter__\n    return self._enter()\n  File \"/opt/local/lib/python2.7/site-packages/dogpile.core-0.4.1-py2.7.egg/dogpile/core/dogpile.py\", line 91, in _enter\n    value = value_fn()\n  File \"/opt/local/lib/python2.7/site-packages/dogpile.cache-0.5.1-py2.7.egg/dogpile/cache/region.py\", line 594, in get_value\n    value = self.backend.get(key)\n  File \"/opt/local/lib/python2.7/site-packages/dogpile.cache-0.5.1-py2.7.egg/dogpile/cache/backends/file.py\", line 167, in get\n    with self._dbm_file(False) as dbm:\n  File \"/opt/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/opt/local/lib/python2.7/site-packages/dogpile.cache-0.5.1-py2.7.egg/dogpile/cache/backends/file.py\", line 162, in _dbm_file\n    \"w\" if write else \"r\")\n  File \"/opt/lib/python2.7/anydbm.py\", line 79, in open\n    raise error, \"need 'c' or 'n' flag to open new db\"\nerror: need 'c' or 'n' flag to open new db\n\nOn Subliminal source site i was suggested to ask here. Any help will be appreciated\n \n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/44", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/44/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/44/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/44", "id": 384028658, "node_id": "MDU6SXNzdWUzODQwMjg2NTg=", "number": 44, "title": "Cross platform file caching", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2013-11-04T10:02:38Z", "updated_at": "2017-11-29T15:26:00Z", "closed_at": "2013-11-12T19:32:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nI'm looking for a cross platform file caching backend as the dogpile.cache.backends.file requires fcntl which is Unix.\nIn my case I'll have a single thread doing rw operations so I don't mind not having a rw lock.\n\n* It should be mentioned in the docs that the file backend is not compatible with Windows in a more explicit way\n* The file backend should be cross platform\n* The file backend should have an optional rw lock\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/43", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/43/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/43/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/43", "id": 384028656, "node_id": "MDU6SXNzdWUzODQwMjg2NTY=", "number": 43, "title": "kw support in function_key_generator", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2013-10-04T20:25:33Z", "updated_at": "2016-06-21T17:13:20Z", "closed_at": "2016-06-21T17:13:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Andrey Petrov ([shazow](https://github.com/shazow))**\n\nAny interest in adding kw support to function_key_generator using something like this? http://stackoverflow.com/questions/10920180/is-there-a-pythonic-way-to-support-keyword-arguments-for-a-memoize-decorator-in/10921408#10921408\n\nCan send a PR if interested.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/42", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/42/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/42/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/42", "id": 384028654, "node_id": "MDU6SXNzdWUzODQwMjg2NTQ=", "number": 42, "title": "Test Tools (tox, testr, flake8)", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-09-12T03:24:53Z", "updated_at": "2016-02-01T07:23:42Z", "closed_at": "2016-02-01T07:23:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Morgan Fainberg ()**\n\nWould it be beneficial to support tox (venv based tester), testr, and flake8 (similar to how openstack works) instead (or inconjunction with) the current testing frame works?  If that kind of test environment would be beneficial, I would be happy to help set it up for both dogpile.cache and dogpile.core.\n\nThis could also allow for pep8/pylint testing.\n\nCoupled with this, I would also be happy to do some of the pep8 restructuring (if that would be desired).\n\nPersonally I like the ability to run ``tox -epep8`` or ``tox -epy27`` to run the tests and see how long it takes for each test to run.  It never hurts to ask.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/41", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/41/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/41/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/41", "id": 384028653, "node_id": "MDU6SXNzdWUzODQwMjg2NTM=", "number": 41, "title": "`wrap` argument (ProxyBackend) does not work on cache_from_config", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-09-11T16:40:15Z", "updated_at": "2014-12-05T22:14:17Z", "closed_at": "2014-12-05T22:14:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\n It appears that the settings in ( file = `dogpile.cache.region.py` `CacheRegion.configure()` are not synched with `CacheRegion.configure_from_config()`\n\nediting line 344 to reflect the following makes it work:\n\n        -   _config_prefix=\"%sarguments.\" % prefix\n        +   _config_prefix=\"%sarguments.\" % prefix ,\n        +    wrap = config_dict.get(\n        +                        \"%swrap\" % prefix, None),\n\nThis wouldn't come up if you were building the regions entirely off a config file, but if you're using a dict to track multiple regions, this creates an issue.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/40", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/40/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/40/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/40", "id": 384028652, "node_id": "MDU6SXNzdWUzODQwMjg2NTI=", "number": 40, "title": "Provide more specific exceptions if the CacheRegion is already configured", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-08-17T08:19:45Z", "updated_at": "2013-09-12T17:32:05Z", "closed_at": "2013-09-12T17:32:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nIdeally, CacheRegion should raise a dogpile.cache specific exception that can be handled if the region is already configured (and similarly if .backend is attempted to be accessed without the region being configured).\n\nThere should also be a method to determine if a Region is already configured (in a friendly manner).\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/39", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/39/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/39/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/39", "id": 384028648, "node_id": "MDU6SXNzdWUzODQwMjg2NDg=", "number": 39, "title": "SyntaxError when using the Redis backend in Python 3.2", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-08-14T20:27:43Z", "updated_at": "2013-08-17T04:04:04Z", "closed_at": "2013-08-17T04:04:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Jimmy Mabey ([jmabey](https://github.com/jmabey))**\n\nThe `RedisBackend` uses the `u\"\"` syntax for Unicode strings, which was reintroduced in Python 3.3, so a `SyntaxError` is raised when used in Python 3.2 (and probably older 3.x versions as well).\n\nIt's on this line: https://bitbucket.org/zzzeek/dogpile.cache/src/d3c7df59a0f695a13a213e0503c66878233561a6/dogpile/cache/backends/redis.py?at=master#cl-108\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/38", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/38/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/38/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/38", "id": 384028635, "node_id": "MDU6SXNzdWUzODQwMjg2MzU=", "number": 38, "title": "invalidate entire cache", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 33, "created_at": "2013-07-12T18:41:30Z", "updated_at": "2016-07-05T22:26:39Z", "closed_at": "2016-07-05T22:26:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nthere's no good way to invalidate an entire cache / region.  \n\nit would be nice if there were.\n\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/35", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/35/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/35/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/35", "id": 384028627, "node_id": "MDU6SXNzdWUzODQwMjg2Mjc=", "number": 35, "title": "about the region get_multi / get_or_create_multi return type", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-06-15T06:45:55Z", "updated_at": "2013-06-15T20:06:06Z", "closed_at": "2013-06-15T20:06:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by lxyu ([lxyu](https://github.com/lxyu))**\n\nCurrently the get multi apis returns list, while I think the dict is a better choice.\n\nTake this code for example:\n\nIf return list, I have to make sure all order_ids exist, also must I sort the result based on the keys. If any key misses or the order of result mixed, it can lead to incorrect cache, which is severe error.\n\n```\n#!python\n@region.cache_multi_on_arguments()\ndef get(*order_ids):\n    orders = DBSession().query(Order).filter(Order.id.in_(order_ids)).all()\n    assert(len(orders) == len(order_ids))\n    return sorted(orders, key=lambda o: order_ids.index(o.id))\n```\n\nIf return dict, it'll be much simpler:\n```\n#!python\n@region.cache_multi_on_arguments()\ndef get(*order_ids):\n    orders = DBSession().query(Order).filter(Order.id.in_(order_ids))\n    return {order.id: order for order in orders}\n```\n\nSo if the return type is dict, it can be more fault tolerant without lose in function.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/34", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/34/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/34/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/34", "id": 384028622, "node_id": "MDU6SXNzdWUzODQwMjg2MjI=", "number": 34, "title": "About the redis mget", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-06-13T15:17:57Z", "updated_at": "2013-06-15T08:14:40Z", "closed_at": "2013-06-15T08:14:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by lxyu ([lxyu](https://github.com/lxyu))**\n\nany reason for choosing to use a `pipeline` instead of `redis.mget` / `redis.mset` in `get_multi`/`set_multi`?\n\nthe `mget` seems more natural to me. \n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/33", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/33/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/33/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/33", "id": 384028616, "node_id": "MDU6SXNzdWUzODQwMjg2MTY=", "number": 33, "title": "About get_or_create_multi feature", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2013-05-31T07:59:31Z", "updated_at": "2013-06-13T15:08:18Z", "closed_at": "2013-06-10T23:23:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by lxyu ([lxyu](https://github.com/lxyu))**\n\nI need a feature to get/create multi in one call.\n\nTake this code for example\n\n\n```\n#!python\n\ndef get_order(order_id):\n    return DBSession().query(Order).get(order_id)\n\n\ndef mget_order(order_ids):\n    orders = DBSession().query(Order).filter(Order.id.in_(order_ids))\n    return {order.id: order for order in orders}\n```\n\nThe `cache_on_arguments` works great for the fist `get_order` function. But for the later one, if I mget `[1, 2, 3]` and `[1, 2]`, they'll generate 2 cached value, and if a single element in the ids expired, the whole cache expired.\n\nSo I want to let the later one make use of the first function's cache. Then mget `[1, 2, 3, 4, 5]` will directly make use of cache generated in 'get', and if say `[2, 3]` expired, we only need to regenerate `[2, 3]`. It'll be much more fast and efficient when ids list grow larger.\n\nWhile I go through the source code, the `cache_on_arguments` use a `Lock` from `dogpile.core` with this code, which seems not very suitable to do the multiple way in my situation.\n\n```\n#!python\nwith Lock(\n        self._mutex(key),\n        gen_value,\n        get_value,\n        expiration_time,\n        async_creator) as value:\n    return value\n```\n\nSo do you have any suggestions on how to accomplish this goal?\n\n----------------------------------------\nAttachments: [33.patch](../wiki/imported_issue_attachments/33/33.patch)\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/32", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/32/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/32/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/32", "id": 384028611, "node_id": "MDU6SXNzdWUzODQwMjg2MTE=", "number": 32, "title": "Add support for incremement", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138888277, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc3", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": "This will not be worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-05-23T22:12:33Z", "updated_at": "2013-07-01T15:59:29Z", "closed_at": "2013-07-01T15:59:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by s ([sontek](https://github.com/sontek))**\n\nhttp://docs.libmemcached.org/memcached_auto.html#description\nhttp://redis.io/commands/incr\n\nBoth redis and memcached support the ability to increment a value and I think that exposing that in dogpile.cache could be beneficial\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/30", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/30/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/30/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/30", "id": 384028606, "node_id": "MDU6SXNzdWUzODQwMjg2MDY=", "number": 30, "title": "Generating cache key components", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-04-18T07:27:16Z", "updated_at": "2013-12-02T23:48:58Z", "closed_at": "2013-12-02T23:48:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Wichert Akkerman ([wichert](https://github.com/wichert))**\n\nPlease note that this is intended as a discussion topic, not a bugreport.\n\nA common issue I run into is that I have expensive functions which take objects as parameters. The default function key generator will call str() on those to build a cache key which is not useful for objects that lack a __str__(): the default __str__ from python will include the memory address which will always change, making the generated key useless. To improve the situation I can see three different approaches:\n\n### Use a wrapper function to fake a simpler API ###\n\nThis is perhaps a slightly insane approach, but it was taken from production code:\n\n    :::python\n    @cache_region.cache_on_arguments()\n    def _expensive_function(self, object_id)\n        request = self\n        obj = Session().query(klass).get(object_id)\n        ....\n\n    def expensive_function(request, obj):\n        return _expensive_function(request, obj.id)\n\n### Add a __str__ everywhere ###\n\nThis is a simple solution but has two downsides: it would require changes in many places and may conflict with other users of __str__; you may need to be able to do str(obj) to produce a string for a template toolkit or logging but which would not be suitable as a cache key. Perhaps dogpile.cache should have used repr() instead of str() to build the cache key?\n\n### A object-to-key-component hook ###\n\nThis is my current approach. I use a special method to build a cache key component for an object. Here is a version suitable for use in applications that use WebOb requests and SQLAlchemy:\n\n    :::python\n    def my_converter(param):\n        if isinstance(param, BaseObject):\n            klass = param.__class__\n            keys = (key.name for key in class_mapper(klass).primary_key)\n            key = ' '.join('%s=%s' % (key, getattr(param, key, None)) for key in keys)\n            return '<%s %s>' % (klass.__name__, key)\n        elif isinstance(param, BaseRequest):\n            return '<Request app=%s>' % param.application_url\n        else:\n            return compat.string_type(param)\n\nI can image other implementations using zope.component based adapters to do this as well. The downside to this approach is that you have to make a copy of the standard function_key_generator to use this. It would be nice if I there was a way to pass that in. Something like this:\n\n    :::python\n    def function_key_generator(namespace, fn, convertor=str):\n        ...\n\n    region = make_region(function_key_generator=\n            functools.partial(function_key_generator, convertor=my_converter)\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/29", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/29/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/29/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/29", "id": 384028602, "node_id": "MDU6SXNzdWUzODQwMjg2MDI=", "number": 29, "title": "Additions to included backends?", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-04-17T03:53:43Z", "updated_at": "2013-04-18T15:00:03Z", "closed_at": "2013-04-18T15:00:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Tim Hanus ([timhanus](https://github.com/timhanus))**\n\nHello,  \n\nI've created 2 new cache backends for a project I'm working on.  \n\nThe first is basically the memory backend, but limited in size to a certain number of records.  The idea being that for a long running process you don't want a dict to grow completely unbounded.  Expirations are least recently used is the  first out.\n\nThe second is a wrapper that allows you to chain 2+ backends together.  My use case is running it in combination with the above class to provide local memory lookup for  many different processes running across many different hosts that all share the same memcache + mysql backend.  In other words when we pull a value we check:\nlocal process memory -> shared memcache cluster -> finally expensive db query.\n\nAnother use case may be to bridge two memcache regions (1 local + 1 over wan for instance).  Although admittedly, that idea is half baked.  :)\n\nI wanted to gauge if there was any interest in either or both of these things.  If so, is it better as a pull request into dogpile.cache proper, or a separate project?  \n\n  \n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/27", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/27/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/27/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/27", "id": 384028595, "node_id": "MDU6SXNzdWUzODQwMjg1OTU=", "number": 27, "title": "name not set for CacheRegion", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-04-14T11:05:20Z", "updated_at": "2013-06-21T23:41:50Z", "closed_at": "2013-04-19T16:50:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Wichert Akkerman ([wichert](https://github.com/wichert))**\n\nThe documentation for CacheRegion states that the name parameter is set on the caching region. The constructor forgets to do that though, leaving the region without a cache attribute.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/26", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/26/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/26/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/26", "id": 384028592, "node_id": "MDU6SXNzdWUzODQwMjg1OTI=", "number": 26, "title": "restarting memcached server and pylibmc backend", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888270, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcw", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2013-04-12T21:28:21Z", "updated_at": "2013-04-27T23:31:31Z", "closed_at": "2013-04-27T23:31:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\ni've experienced an issue where restarting the memcached server can cause an issue with the pylibmc backend\n\nthe wonderful error reporting is this:\n\n\t  File \"/var/www/sites/MyApp.In-virtualenv/local/lib/python2.7/site-packages/dogpile.cache-0.4.0-py2.7.egg/dogpile/cache/region.py\", line 393, in delete\n\t\tself.backend.delete(key)\n\t  File \"/var/www/sites/MyApp.In-virtualenv/local/lib/python2.7/site-packages/dogpile.cache-0.4.0-py2.7.egg/dogpile/cache/backends/memcached.py\", line 159, in delete\n\t\tself.client.delete(key)\n\t_pylibmc.UnknownReadFailure: error 7 from memcached_delete(group:id:56): UNKNOWN READ FAILURE\n\nThis is totally an issue with pylibmc : they've raised the error and have some meager reporting\n\n\nI just wanted to put this on the radar that errors like this happen -- as they will cause a webpage to error- out.  I'm wondering if there should be a config option to catch and suppress errors like this.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/25", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/25/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/25/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/25", "id": 384028590, "node_id": "MDU6SXNzdWUzODQwMjg1OTA=", "number": 25, "title": "A way to \"tag\" cache objects", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-03-29T23:44:16Z", "updated_at": "2013-04-01T18:03:04Z", "closed_at": "2013-04-01T18:03:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by Anonymous**\n\nI would like a way to tag a set of methods that I cache on arguments in the same identifier so that I can bulk invalidate them.\n\nFor example, I have a User who has a bunch of documents.    If the user object changes, I want to invalidate the cache of all his documents.    I don't want to be aware of all methods and their arguments they are cached at, I just want to say \"invalidate bulk cache for user id 23\" or something like that.\n\nIs this possible?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/22", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/22/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/22/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/22", "id": 384028583, "node_id": "MDU6SXNzdWUzODQwMjg1ODM=", "number": 22, "title": "size management and auto-removal for the memory backend", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925145, "node_id": "MDU6TGFiZWwxMTM4OTI1MTQ1", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/easy", "name": "easy", "color": "9dff5b", "default": false, "description": ""}, {"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138888277, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjc3", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": "This will not be worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-02-20T21:31:33Z", "updated_at": "2013-02-20T23:05:26Z", "closed_at": "2013-02-20T23:05:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nwas this left out for a philosophical/practical reason or just a lack of necessity ?\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/21", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/21/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/21/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/21", "id": 384028576, "node_id": "MDU6SXNzdWUzODQwMjg1NzY=", "number": 21, "title": "Custom Serializer ?", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138888271, "node_id": "MDU6TGFiZWwxMTM4ODg4Mjcx", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}, {"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}, {"id": 1138925094, "node_id": "MDU6TGFiZWwxMTM4OTI1MDk0", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/low%20priority", "name": "low priority", "color": "6d5272", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-02-12T17:57:53Z", "updated_at": "2019-06-28T13:54:11Z", "closed_at": "2013-02-12T18:14:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by jvanasco ([jvanasco](https://github.com/jvanasco))**\n\nAs I look at expanding a project with increasing components ( Pyramid Web + Twisted Daemons + (sadly) PHP ), interoperability is becoming a bit of a concern.\n\nLooking through the backends:\n\nfile.py\n\n* serializes - util.pickle.dumps(value)\n* deserialze - util.pickle.loads(value)\n* [ util.pickle is cPickle or pickle ]\n \nmemcached.py\n\n* serializes & deserialize are handled within the various 3rd party modules ( largely pickle )\n\nmemory\n\n* native storage\n\nredis.py\n\n* serializes - pickle.dumps(value)\n* deserialze - pickle.loads(value)\n* [ pickle is dogpile.cache.util's pickle ]\n\n\nWould you consider a patch that does the following:\n\n* CacheRegion accepts a 'SerializationAPI' object\n* the SerializationApi has two methods - `serialize` and `deserialize`\n* the 'SerializationApi' defaults to the current behavior ( pickle )\n* one could create a custom scheme and pass it in ( ie, json or something else )\n\nWhile I don't think this would do much for the memcached libraries ( though some are looking at the same custom serialization options ), it would allow the file-backed dbm/ndbm and redis backends to be more interoperable.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/20", "repository_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache", "labels_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/20/comments", "events_url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/issues/20/events", "html_url": "https://github.com/sqlalchemy/dogpile.cache/issues/20", "id": 384028574, "node_id": "MDU6SXNzdWUzODQwMjg1NzQ=", "number": 20, "title": "Allow expiration_time to be a callable", "user": {"login": "sqlalchemy-bot", "id": 36047385, "node_id": "MDQ6VXNlcjM2MDQ3Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/36047385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqlalchemy-bot", "html_url": "https://github.com/sqlalchemy-bot", "followers_url": "https://api.github.com/users/sqlalchemy-bot/followers", "following_url": "https://api.github.com/users/sqlalchemy-bot/following{/other_user}", "gists_url": "https://api.github.com/users/sqlalchemy-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqlalchemy-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqlalchemy-bot/subscriptions", "organizations_url": "https://api.github.com/users/sqlalchemy-bot/orgs", "repos_url": "https://api.github.com/users/sqlalchemy-bot/repos", "events_url": "https://api.github.com/users/sqlalchemy-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/sqlalchemy-bot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1138925093, "node_id": "MDU6TGFiZWwxMTM4OTI1MDkz", "url": "https://api.github.com/repos/sqlalchemy/dogpile.cache/labels/feature", "name": "feature", "color": "f2e89d", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-02-06T06:14:22Z", "updated_at": "2013-04-29T19:18:55Z", "closed_at": "2013-04-29T19:18:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Migrated issue, originally created by David Beitey ([davidjb](https://github.com/davidjb))**\n\nMy current use-case is to cache a set of values for a relative amount of time -- in one case, until the end of the current day, in another, until the end of the given week, and finally, until a certain date/time.  \n\nCurrently, dogpile.cache accepts an expiration_time as an integer, which represents a fixed number seconds from now (eg in 24 hours time), and not a relative or otherwise dynamic value.  In order to obtain a relative ``expiration_time`` for use, you could use ``get_or_create`` directly and calculate the necessary value when run, but for the ``cache_on_arguments`` decorator, this isn't possible given its nature as a decorator.\n\nSo, my suggestion is to allow ``expiration_time`` to be specified as callable that returns a integer and call this whenever expiration_time is used (eg in the CacheRegion.get and get_or_create functions).  Thus, the expiration time is dynamic and since a function, the resulting relative time could be based upon anything (not just relative times as I mention above).\n\nFor example:\n\n```\n#!python\n \nclass CacheRegion(object):\n    ...\n    def get_or_create(self, key, creator, expiration_time=None):\n        if hasattr(expiration_time, '__call__'):\n            expiration_time = expiration_time()\n        ...\n\ndef seconds_til_tomorrow():\n    #or something else like a database call or whatever\n    tomorrow = date.today() + timedelta(days=1)\n    til_tomorrow = datetime.combine(tomorrow, time(0)) - datetime.now()\n    return math.ceil(til_tomorrow.total_seconds())\n\n\nregion = make_region().configure('memory', expiration_time=seconds_til_tomorrow)\nconfig.rest_of_day.get_or_create('1', lambda: datetime.date.today()) #Caches value of today's date til tomorrow\n```\n\n", "performed_via_github_app": null, "score": 1.0}]}