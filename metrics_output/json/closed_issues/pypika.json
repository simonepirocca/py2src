{"total_count": 193, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/kayak/pypika/issues/469", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/469/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/469/events", "html_url": "https://github.com/kayak/pypika/issues/469", "id": 671778508, "node_id": "MDU6SXNzdWU2NzE3Nzg1MDg=", "number": 469, "title": "How to declare Table all columns?", "user": {"login": "jet10000", "id": 2258120, "node_id": "MDQ6VXNlcjIyNTgxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2258120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jet10000", "html_url": "https://github.com/jet10000", "followers_url": "https://api.github.com/users/jet10000/followers", "following_url": "https://api.github.com/users/jet10000/following{/other_user}", "gists_url": "https://api.github.com/users/jet10000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jet10000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jet10000/subscriptions", "organizations_url": "https://api.github.com/users/jet10000/orgs", "repos_url": "https://api.github.com/users/jet10000/repos", "events_url": "https://api.github.com/users/jet10000/events{/privacy}", "received_events_url": "https://api.github.com/users/jet10000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-03T04:06:48Z", "updated_at": "2020-08-03T07:07:17Z", "closed_at": "2020-08-03T07:06:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nuser = Table('user')\r\n\r\nQuery.from_(user).select(user.*)\r\n```\r\n\r\nHow to declare table all columns? I know `'user.*'`, but how to use it with Table?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/463", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/463/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/463/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/463/events", "html_url": "https://github.com/kayak/pypika/issues/463", "id": 653502426, "node_id": "MDU6SXNzdWU2NTM1MDI0MjY=", "number": 463, "title": "Column alias support", "user": {"login": "kme1018", "id": 16246873, "node_id": "MDQ6VXNlcjE2MjQ2ODcz", "avatar_url": "https://avatars1.githubusercontent.com/u/16246873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kme1018", "html_url": "https://github.com/kme1018", "followers_url": "https://api.github.com/users/kme1018/followers", "following_url": "https://api.github.com/users/kme1018/following{/other_user}", "gists_url": "https://api.github.com/users/kme1018/gists{/gist_id}", "starred_url": "https://api.github.com/users/kme1018/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kme1018/subscriptions", "organizations_url": "https://api.github.com/users/kme1018/orgs", "repos_url": "https://api.github.com/users/kme1018/repos", "events_url": "https://api.github.com/users/kme1018/events{/privacy}", "received_events_url": "https://api.github.com/users/kme1018/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-08T18:20:10Z", "updated_at": "2020-07-08T18:28:36Z", "closed_at": "2020-07-08T18:28:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have not seen anything in the docs about giving an alias to a selected field.\r\nExample\r\nselect e.id as employee_id, c.id as customer_id from employee e, customer c;\r\n\r\nMy current workaround has been using the functions.cast(e.id, 'string').as_('employee_id'). Is there a way to do this without casting?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/460", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/460/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/460/events", "html_url": "https://github.com/kayak/pypika/issues/460", "id": 648238009, "node_id": "MDU6SXNzdWU2NDgyMzgwMDk=", "number": 460, "title": "SQL injection", "user": {"login": "Divyashivakumar10", "id": 64250511, "node_id": "MDQ6VXNlcjY0MjUwNTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/64250511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Divyashivakumar10", "html_url": "https://github.com/Divyashivakumar10", "followers_url": "https://api.github.com/users/Divyashivakumar10/followers", "following_url": "https://api.github.com/users/Divyashivakumar10/following{/other_user}", "gists_url": "https://api.github.com/users/Divyashivakumar10/gists{/gist_id}", "starred_url": "https://api.github.com/users/Divyashivakumar10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Divyashivakumar10/subscriptions", "organizations_url": "https://api.github.com/users/Divyashivakumar10/orgs", "repos_url": "https://api.github.com/users/Divyashivakumar10/repos", "events_url": "https://api.github.com/users/Divyashivakumar10/events{/privacy}", "received_events_url": "https://api.github.com/users/Divyashivakumar10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-30T14:45:51Z", "updated_at": "2020-07-02T22:55:21Z", "closed_at": "2020-07-02T22:55:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey i am kinda new to this , how do i generate  sql injections ? can you give me an example \r\nany help much appreciated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/456", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/456/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/456/events", "html_url": "https://github.com/kayak/pypika/issues/456", "id": 646018010, "node_id": "MDU6SXNzdWU2NDYwMTgwMTA=", "number": 456, "title": "Double quotes bug?", "user": {"login": "jet10000", "id": 2258120, "node_id": "MDQ6VXNlcjIyNTgxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2258120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jet10000", "html_url": "https://github.com/jet10000", "followers_url": "https://api.github.com/users/jet10000/followers", "following_url": "https://api.github.com/users/jet10000/following{/other_user}", "gists_url": "https://api.github.com/users/jet10000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jet10000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jet10000/subscriptions", "organizations_url": "https://api.github.com/users/jet10000/orgs", "repos_url": "https://api.github.com/users/jet10000/repos", "events_url": "https://api.github.com/users/jet10000/events{/privacy}", "received_events_url": "https://api.github.com/users/jet10000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-26T05:28:28Z", "updated_at": "2020-08-02T07:57:04Z", "closed_at": "2020-08-02T07:57:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nclass JsonAgg(Function):\r\n    def __init__(self, term, alias=None):\r\n        super(JsonAgg, self).__init__('json_agg', term, alias=alias)\r\n\r\nqq = Query.from_(Query.from_(fangs).select('id', 'name')).select(JsonAgg(\"sq0\"))\r\nprint(qq.get_sql())\r\nvalues2 = await conn.fetch(qq.get_sql())\r\n print(values2)\r\n```\r\nqq.get_sql()\r\n```\r\nSELECT json_agg('sq0') FROM (SELECT \"id\",\"name\" FROM \"fangs\") \"sq0\"\r\n```\r\n\r\nif change to \r\n```\r\nSELECT json_agg(\"sq0\") FROM (SELECT \"id\",\"name\" FROM \"fangs\") \"sq0\"\r\n```\r\neverything is normal\r\n\r\n\r\n```\r\nasyncpg.exceptions.DatatypeMismatchError: could not determine polymorphic type because input has type unknown\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/450", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/450/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/450/events", "html_url": "https://github.com/kayak/pypika/issues/450", "id": 643385642, "node_id": "MDU6SXNzdWU2NDMzODU2NDI=", "number": 450, "title": "Dynamic where complex clauses", "user": {"login": "cstrzelc", "id": 191205, "node_id": "MDQ6VXNlcjE5MTIwNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/191205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cstrzelc", "html_url": "https://github.com/cstrzelc", "followers_url": "https://api.github.com/users/cstrzelc/followers", "following_url": "https://api.github.com/users/cstrzelc/following{/other_user}", "gists_url": "https://api.github.com/users/cstrzelc/gists{/gist_id}", "starred_url": "https://api.github.com/users/cstrzelc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cstrzelc/subscriptions", "organizations_url": "https://api.github.com/users/cstrzelc/orgs", "repos_url": "https://api.github.com/users/cstrzelc/repos", "events_url": "https://api.github.com/users/cstrzelc/events{/privacy}", "received_events_url": "https://api.github.com/users/cstrzelc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-22T21:57:03Z", "updated_at": "2020-07-03T07:11:06Z", "closed_at": "2020-07-03T07:11:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to dynamically add OR clause depending on the input from an external list.   I don't see any documentation on how to do this or if it is possible.  \r\n\r\nExample:\r\n```\r\naccount_list = [ '23456', '49375', '03948' ]\r\n\r\n\r\nQuery.from_(my_table).select(my_table.product_code, my_table.account, ) \\\r\n                .where( ( my_table.product_code.like('product_1%') | \\\r\n                 my_table.product_code.like('product_2%') ) )  \\\r\n                .where( Criterion.any([my_table.account == '23456', \\\r\n                 my_table.account == '49375', my_table.account == '03948']) )\r\n```\r\n\r\nIs it possible to make the Criterion values from account_list no matter how many values there are in the list?\r\n\r\nThank you very much in advance.\r\n-cs \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/446", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/446/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/446/events", "html_url": "https://github.com/kayak/pypika/issues/446", "id": 635135932, "node_id": "MDU6SXNzdWU2MzUxMzU5MzI=", "number": 446, "title": "Snowflake ALIAS Quote chars on joins", "user": {"login": "Shawe82", "id": 4948043, "node_id": "MDQ6VXNlcjQ5NDgwNDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4948043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shawe82", "html_url": "https://github.com/Shawe82", "followers_url": "https://api.github.com/users/Shawe82/followers", "following_url": "https://api.github.com/users/Shawe82/following{/other_user}", "gists_url": "https://api.github.com/users/Shawe82/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shawe82/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shawe82/subscriptions", "organizations_url": "https://api.github.com/users/Shawe82/orgs", "repos_url": "https://api.github.com/users/Shawe82/repos", "events_url": "https://api.github.com/users/Shawe82/events{/privacy}", "received_events_url": "https://api.github.com/users/Shawe82/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-09T06:00:43Z", "updated_at": "2020-07-09T16:12:00Z", "closed_at": "2020-07-09T16:12:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "@mikeengland Thanks for letting me know that you have reverted the original fix https://github.com/kayak/pypika/pull/439. I now digged a bit deeper into the quote char issues, and it is not in general and issues but only on table joins. To see what I mean, here the following simple example\r\n\r\n```python\r\nfrom pypika import Table\r\nfrom pypika.dialects import SnowflakeQuery\r\nt1 = Table(\"data1\")\r\nt2 = Table(\"data2\")\r\nq1 = SnowflakeQuery.from_(t1).select(t1.b).as_(\"q1\")\r\nq2 = SnowflakeQuery.from_(t2).select(t2.b).as_(\"q2\")\r\nq3=SnowflakeQuery.from_(q1).join(q2).on(q1.b==q2.b).select(\"*\")\r\n```\r\nwould result in\r\n`SELECT * FROM (SELECT b FROM data1) \"q1\" JOIN (SELECT b FROM data2) \"q2\" ON q1.b=q2.b ` which doesn't work. What would work is either\r\n`SELECT * FROM (SELECT b FROM data1) q1 JOIN (SELECT b FROM data2) q2 ON q1.b=q2.b` so no quote chars around query aliases, or\r\n`SELECT * FROM (SELECT b FROM data1) \"q1\" JOIN (SELECT b FROM data2) \"q2\" ON \"q1\".b=\"q2\".b` so using the quote chars when referring to the aliases.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/438", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/438/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/438/events", "html_url": "https://github.com/kayak/pypika/issues/438", "id": 622218059, "node_id": "MDU6SXNzdWU2MjIyMTgwNTk=", "number": 438, "title": "Lag", "user": {"login": "zkurtz", "id": 4934167, "node_id": "MDQ6VXNlcjQ5MzQxNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4934167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkurtz", "html_url": "https://github.com/zkurtz", "followers_url": "https://api.github.com/users/zkurtz/followers", "following_url": "https://api.github.com/users/zkurtz/following{/other_user}", "gists_url": "https://api.github.com/users/zkurtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkurtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkurtz/subscriptions", "organizations_url": "https://api.github.com/users/zkurtz/orgs", "repos_url": "https://api.github.com/users/zkurtz/repos", "events_url": "https://api.github.com/users/zkurtz/events{/privacy}", "received_events_url": "https://api.github.com/users/zkurtz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-21T03:20:47Z", "updated_at": "2020-08-03T07:40:34Z", "closed_at": "2020-08-03T07:40:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't see any mention of [Lag](https://www.sqlshack.com/sql-lag-function-overview-and-examples/) in pypika. Do you plan to add support for it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/437", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/437/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/437/events", "html_url": "https://github.com/kayak/pypika/issues/437", "id": 621792373, "node_id": "MDU6SXNzdWU2MjE3OTIzNzM=", "number": 437, "title": "Field' object has no attribute 'is_'", "user": {"login": "cheunhong", "id": 24665277, "node_id": "MDQ6VXNlcjI0NjY1Mjc3", "avatar_url": "https://avatars1.githubusercontent.com/u/24665277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cheunhong", "html_url": "https://github.com/cheunhong", "followers_url": "https://api.github.com/users/cheunhong/followers", "following_url": "https://api.github.com/users/cheunhong/following{/other_user}", "gists_url": "https://api.github.com/users/cheunhong/gists{/gist_id}", "starred_url": "https://api.github.com/users/cheunhong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cheunhong/subscriptions", "organizations_url": "https://api.github.com/users/cheunhong/orgs", "repos_url": "https://api.github.com/users/cheunhong/repos", "events_url": "https://api.github.com/users/cheunhong/events{/privacy}", "received_events_url": "https://api.github.com/users/cheunhong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-20T14:07:36Z", "updated_at": "2020-06-04T09:31:40Z", "closed_at": "2020-06-04T09:31:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "`.is_` method does not seems to be supported now", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/430", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/430/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/430/events", "html_url": "https://github.com/kayak/pypika/issues/430", "id": 612539633, "node_id": "MDU6SXNzdWU2MTI1Mzk2MzM=", "number": 430, "title": "Error with empty argument columns", "user": {"login": "lntuition", "id": 34061042, "node_id": "MDQ6VXNlcjM0MDYxMDQy", "avatar_url": "https://avatars0.githubusercontent.com/u/34061042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lntuition", "html_url": "https://github.com/lntuition", "followers_url": "https://api.github.com/users/lntuition/followers", "following_url": "https://api.github.com/users/lntuition/following{/other_user}", "gists_url": "https://api.github.com/users/lntuition/gists{/gist_id}", "starred_url": "https://api.github.com/users/lntuition/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lntuition/subscriptions", "organizations_url": "https://api.github.com/users/lntuition/orgs", "repos_url": "https://api.github.com/users/lntuition/repos", "events_url": "https://api.github.com/users/lntuition/events{/privacy}", "received_events_url": "https://api.github.com/users/lntuition/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-05T11:44:33Z", "updated_at": "2020-05-05T16:30:51Z", "closed_at": "2020-05-05T16:30:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With support iterable params to columns(issue #372, PR #373). I didn't catch that empty `columns` can be pass to arg of `columns`. Sadly, there is no Testcase that test below cases.\r\n\r\nSo passing empty argument to `columns` generate errors. Below are simple test code and result.\r\n\r\n``` python\r\nfrom pypika import Query, Table\r\n\r\ntable = Table(\"abc\")\r\nquery = (\r\n    Query.into(table)\r\n    .columns()\r\n    .insert(1, \"a\", True)\r\n)\r\n\r\nprint(str(query))\r\n```\r\n\r\nResult at 0.35.21\r\n``` SQL\r\nINSERT INTO \"abc\" VALUES (1,'a',true)\r\n```\r\n\r\nResult at 0.37.4\r\n``` bash\r\n  File \"a.py\", line 5, in <module>\r\n    Query.into(table)\r\n  File \"/root/.pyenv/versions/py37/lib/python3.7/site-packages/pypika/utils.py\", line 50, in _copy\r\n    result = func(self_copy, *args, **kwargs)\r\n  File \"/root/.pyenv/versions/py37/lib/python3.7/site-packages/pypika/queries.py\", line 775, in columns\r\n    if isinstance(terms[0], (list, tuple)):\r\nIndexError: tuple index out of range\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/428", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/428/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/428/events", "html_url": "https://github.com/kayak/pypika/issues/428", "id": 611790562, "node_id": "MDU6SXNzdWU2MTE3OTA1NjI=", "number": 428, "title": "Postgres: error when RETURNING inside WITH subquery", "user": {"login": "Dandi91", "id": 7431712, "node_id": "MDQ6VXNlcjc0MzE3MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/7431712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dandi91", "html_url": "https://github.com/Dandi91", "followers_url": "https://api.github.com/users/Dandi91/followers", "following_url": "https://api.github.com/users/Dandi91/following{/other_user}", "gists_url": "https://api.github.com/users/Dandi91/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dandi91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dandi91/subscriptions", "organizations_url": "https://api.github.com/users/Dandi91/orgs", "repos_url": "https://api.github.com/users/Dandi91/repos", "events_url": "https://api.github.com/users/Dandi91/events{/privacy}", "received_events_url": "https://api.github.com/users/Dandi91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-04T11:09:59Z", "updated_at": "2020-06-30T19:14:58Z", "closed_at": "2020-06-30T19:14:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi. I'm trying to execute the following code\r\n\r\n```python\r\nfrom pypika import Table, AliasedQuery, PostgreSQLQuery as Query\r\n\r\ncustomers = Table('customers')\r\nother_table = Table('other')\r\n\r\nsub_query = Query.into(customers).columns('a', 'b').insert(1, 2).returning('*')\r\naliased = AliasedQuery('an_alias')\r\n\r\nquery = Query.with_(sub_query, 'an_alias').from_(aliased).select(aliased.star)\r\nquery = query.left_join(other_table).on(aliased.a == other_table.id)\r\n\r\nprint(query)\r\n```\r\n\r\nand getting an error\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/alex/venv/lib/python3.8/site-packages/pypika/queries.py\", line 1080, in __str__\r\n    return self.get_sql(dialect=self.dialect)\r\n  File \"/home/alex/venv/lib/python3.8/site-packages/pypika/dialects.py\", line 527, in get_sql\r\n    querystring = super(PostgreQueryBuilder, self).get_sql(\r\n  File \"/home/alex/venv/lib/python3.8/site-packages/pypika/queries.py\", line 1189, in get_sql\r\n    querystring = self._with_sql(**kwargs)\r\n  File \"/home/alex/venv/lib/python3.8/site-packages/pypika/queries.py\", line 1241, in _with_sql\r\n    return \"WITH \" + \",\".join(\r\n  File \"/home/alex/venv/lib/python3.8/site-packages/pypika/queries.py\", line 1244, in <genexpr>\r\n    + clause.get_sql(subquery=False, with_alias=False, **kwargs)\r\n  File \"/home/alex/venv/lib/python3.8/site-packages/pypika/queries.py\", line 79, in get_sql\r\n    return self.query.get_sql(**kwargs)\r\n  File \"/home/alex/venv/lib/python3.8/site-packages/pypika/dialects.py\", line 538, in get_sql\r\n    querystring += self._returning_sql(with_namespace=with_namespace, **kwargs)\r\nTypeError: _returning_sql() got multiple values for keyword argument 'with_namespace'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/426", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/426/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/426/events", "html_url": "https://github.com/kayak/pypika/issues/426", "id": 610562561, "node_id": "MDU6SXNzdWU2MTA1NjI1NjE=", "number": 426, "title": "Extract Function not wotking with joins ", "user": {"login": "abhijo89", "id": 1256648, "node_id": "MDQ6VXNlcjEyNTY2NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhijo89", "html_url": "https://github.com/abhijo89", "followers_url": "https://api.github.com/users/abhijo89/followers", "following_url": "https://api.github.com/users/abhijo89/following{/other_user}", "gists_url": "https://api.github.com/users/abhijo89/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhijo89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhijo89/subscriptions", "organizations_url": "https://api.github.com/users/abhijo89/orgs", "repos_url": "https://api.github.com/users/abhijo89/repos", "events_url": "https://api.github.com/users/abhijo89/events{/privacy}", "received_events_url": "https://api.github.com/users/abhijo89/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-01T04:55:42Z", "updated_at": "2020-06-29T11:59:56Z", "closed_at": "2020-06-29T11:59:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom pypika import Query, Table, DatePart\r\nfrom pypika.functions import Extract\r\n\r\ntable1 = Table('table1')\r\ntable2 = Table('table2')\r\n\r\nquery = Query.select(\r\n    table1.id, table2.id, Extract(DatePart.year, table1.created_date)\r\n).from_(table1).join(table2).on(\r\ntable1.id == table2.table1_id\r\n)\r\n\r\nprint(str(query))\r\n```\r\nThe query shuld be\r\n```sql\r\nSELECT \"table1\".\"id\",\"table2\".\"id\",EXTRACT(YEAR FROM \"table1.created_date\") FROM \"table1\" JOIN \"table2\" ON \"table1\".\"id\"=\"table2\".\"table1_id\"\r\n``` \r\nBut we get \r\n```sql\r\nSELECT \"table1\".\"id\",\"table2\".\"id\",EXTRACT(YEAR FROM \"created_date\") FROM \"table1\" JOIN \"table2\" ON \"table1\".\"id\"=\"table2\".\"table1_id\"\r\n``` \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/424", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/424/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/424/events", "html_url": "https://github.com/kayak/pypika/issues/424", "id": 608438412, "node_id": "MDU6SXNzdWU2MDg0Mzg0MTI=", "number": 424, "title": "Snowflake ALIAS_QUOTE_CHAR seem to be wrong", "user": {"login": "Shawe82", "id": 4948043, "node_id": "MDQ6VXNlcjQ5NDgwNDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4948043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shawe82", "html_url": "https://github.com/Shawe82", "followers_url": "https://api.github.com/users/Shawe82/followers", "following_url": "https://api.github.com/users/Shawe82/following{/other_user}", "gists_url": "https://api.github.com/users/Shawe82/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shawe82/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shawe82/subscriptions", "organizations_url": "https://api.github.com/users/Shawe82/orgs", "repos_url": "https://api.github.com/users/Shawe82/repos", "events_url": "https://api.github.com/users/Shawe82/events{/privacy}", "received_events_url": "https://api.github.com/users/Shawe82/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-28T16:08:40Z", "updated_at": "2020-06-01T16:58:33Z", "closed_at": "2020-04-30T15:10:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nwe at Joyn have recently started using pypika and we love it. There is only one issue, the SnowFlakeQueryBuilder alias quote char seem to be wrong as it leads to queries that snowflake does not accept. As an example\r\n```python\r\nfrom pypika.dialects import SnowflakeQuery\r\nfrom pypika import Table\r\nt = Table(\"tbl\")\r\nq = SnowflakeQuery().from_(t).select(t.name.as_(\"aliased_name\"))\r\nprint(q)\r\n### outputs\r\nSELECT name \"aliased_name\" FROM tbl\r\n```\r\nExpected output would be\r\n```python\r\nSELECT name aliased_name FROM tbl\r\n```\r\nTo fix that, we have to set\r\nSnowFlakeQueryBuilder.ALIAS_QUOTE_CHAR = None in every file and project. Not sure if this is something that could be fixed directly in the lib", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/423", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/423/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/423/events", "html_url": "https://github.com/kayak/pypika/issues/423", "id": 607071939, "node_id": "MDU6SXNzdWU2MDcwNzE5Mzk=", "number": 423, "title": "How to use on_duplicate_ignore with subselect?", "user": {"login": "ivanvenosdel", "id": 2583486, "node_id": "MDQ6VXNlcjI1ODM0ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2583486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanvenosdel", "html_url": "https://github.com/ivanvenosdel", "followers_url": "https://api.github.com/users/ivanvenosdel/followers", "following_url": "https://api.github.com/users/ivanvenosdel/following{/other_user}", "gists_url": "https://api.github.com/users/ivanvenosdel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanvenosdel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanvenosdel/subscriptions", "organizations_url": "https://api.github.com/users/ivanvenosdel/orgs", "repos_url": "https://api.github.com/users/ivanvenosdel/repos", "events_url": "https://api.github.com/users/ivanvenosdel/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanvenosdel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-26T17:52:36Z", "updated_at": "2020-05-05T20:21:45Z", "closed_at": "2020-05-05T20:21:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "In PostgreSQL, when attempting to do something like the following:\r\n\r\n```\r\ncustomers, customers_backup = Tables('customers', 'customers_backup')\r\n\r\nq = Query.into(customers_backup).columns('id', 'fname', 'lname')\r\n    .from_(customers).select(customers.id, customers.fname, customers.lname).on_duplicate_ignore()\r\n```\r\n\r\nI get the error `TypeError: 'Field' object is not callable`. Am I doing something wrong or is this not yet supported?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/422", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/422/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/422/events", "html_url": "https://github.com/kayak/pypika/issues/422", "id": 606523290, "node_id": "MDU6SXNzdWU2MDY1MjMyOTA=", "number": 422, "title": "how to use ts_vector and plaints_query using Pypika?", "user": {"login": "ralima", "id": 397020, "node_id": "MDQ6VXNlcjM5NzAyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/397020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ralima", "html_url": "https://github.com/ralima", "followers_url": "https://api.github.com/users/ralima/followers", "following_url": "https://api.github.com/users/ralima/following{/other_user}", "gists_url": "https://api.github.com/users/ralima/gists{/gist_id}", "starred_url": "https://api.github.com/users/ralima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ralima/subscriptions", "organizations_url": "https://api.github.com/users/ralima/orgs", "repos_url": "https://api.github.com/users/ralima/repos", "events_url": "https://api.github.com/users/ralima/events{/privacy}", "received_events_url": "https://api.github.com/users/ralima/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-24T19:08:05Z", "updated_at": "2020-04-30T14:15:03Z", "closed_at": "2020-04-30T14:15:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to run an query that in regular sql would look like this:\r\n\r\n`SELECT field FROM table WHERE to_tsvector('english', COALESCE(field, '')) @@ plainto_tsquery('english', 'some-term-to-search:*')`\r\n\r\nI'd like to know how to achieve the same result using pypika.\r\n\r\nI don't see how the custom function would work, and I also tried adding the expression as a string on the where clause, which didn't work.\r\n\r\nAny ideas?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/420", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/420/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/420/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/420/events", "html_url": "https://github.com/kayak/pypika/issues/420", "id": 604915377, "node_id": "MDU6SXNzdWU2MDQ5MTUzNzc=", "number": 420, "title": "join on x between y and z", "user": {"login": "zkurtz", "id": 4934167, "node_id": "MDQ6VXNlcjQ5MzQxNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4934167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkurtz", "html_url": "https://github.com/zkurtz", "followers_url": "https://api.github.com/users/zkurtz/followers", "following_url": "https://api.github.com/users/zkurtz/following{/other_user}", "gists_url": "https://api.github.com/users/zkurtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkurtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkurtz/subscriptions", "organizations_url": "https://api.github.com/users/zkurtz/orgs", "repos_url": "https://api.github.com/users/zkurtz/repos", "events_url": "https://api.github.com/users/zkurtz/events{/privacy}", "received_events_url": "https://api.github.com/users/zkurtz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-22T16:59:57Z", "updated_at": "2020-04-23T10:55:43Z", "closed_at": "2020-04-23T10:55:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to take advantage of `between` inside an `on` clause to produce a query like \r\n`SELECT a.*, b.* FROM a JOIN b ON a.x BETWEEN b.y AND b.z`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/417", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/417/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/417/events", "html_url": "https://github.com/kayak/pypika/issues/417", "id": 603988796, "node_id": "MDU6SXNzdWU2MDM5ODg3OTY=", "number": 417, "title": "`at time zone`", "user": {"login": "zkurtz", "id": 4934167, "node_id": "MDQ6VXNlcjQ5MzQxNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4934167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkurtz", "html_url": "https://github.com/zkurtz", "followers_url": "https://api.github.com/users/zkurtz/followers", "following_url": "https://api.github.com/users/zkurtz/following{/other_user}", "gists_url": "https://api.github.com/users/zkurtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkurtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkurtz/subscriptions", "organizations_url": "https://api.github.com/users/zkurtz/orgs", "repos_url": "https://api.github.com/users/zkurtz/repos", "events_url": "https://api.github.com/users/zkurtz/events{/privacy}", "received_events_url": "https://api.github.com/users/zkurtz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-21T13:15:00Z", "updated_at": "2020-05-04T23:07:06Z", "closed_at": "2020-05-04T23:07:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I produce a query like `SELECT date AT TIME ZONE 'GMT' FROM mytable`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/416", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/416/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/416/events", "html_url": "https://github.com/kayak/pypika/issues/416", "id": 603808861, "node_id": "MDU6SXNzdWU2MDM4MDg4NjE=", "number": 416, "title": "Release engineering: Use git tags", "user": {"login": "PromyLOPh", "id": 13182, "node_id": "MDQ6VXNlcjEzMTgy", "avatar_url": "https://avatars3.githubusercontent.com/u/13182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PromyLOPh", "html_url": "https://github.com/PromyLOPh", "followers_url": "https://api.github.com/users/PromyLOPh/followers", "following_url": "https://api.github.com/users/PromyLOPh/following{/other_user}", "gists_url": "https://api.github.com/users/PromyLOPh/gists{/gist_id}", "starred_url": "https://api.github.com/users/PromyLOPh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PromyLOPh/subscriptions", "organizations_url": "https://api.github.com/users/PromyLOPh/orgs", "repos_url": "https://api.github.com/users/PromyLOPh/repos", "events_url": "https://api.github.com/users/PromyLOPh/events{/privacy}", "received_events_url": "https://api.github.com/users/PromyLOPh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-21T08:27:12Z", "updated_at": "2020-04-21T11:12:58Z", "closed_at": "2020-04-21T11:12:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I\u2019m maintaining the guix package for pypika and having tagged releases in git would help. We generally run the test suite of packages (if available and feasible). pypika\u2019s PyPi source package lacks the folder pypika/tests, so I\u2019m falling back to specific git commits right now.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/412", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/412/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/412/events", "html_url": "https://github.com/kayak/pypika/issues/412", "id": 603066522, "node_id": "MDU6SXNzdWU2MDMwNjY1MjI=", "number": 412, "title": "limit query can lead wrong SQL generation", "user": {"login": "lntuition", "id": 34061042, "node_id": "MDQ6VXNlcjM0MDYxMDQy", "avatar_url": "https://avatars0.githubusercontent.com/u/34061042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lntuition", "html_url": "https://github.com/lntuition", "followers_url": "https://api.github.com/users/lntuition/followers", "following_url": "https://api.github.com/users/lntuition/following{/other_user}", "gists_url": "https://api.github.com/users/lntuition/gists{/gist_id}", "starred_url": "https://api.github.com/users/lntuition/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lntuition/subscriptions", "organizations_url": "https://api.github.com/users/lntuition/orgs", "repos_url": "https://api.github.com/users/lntuition/repos", "events_url": "https://api.github.com/users/lntuition/events{/privacy}", "received_events_url": "https://api.github.com/users/lntuition/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-20T09:00:52Z", "updated_at": "2020-04-20T12:36:40Z", "closed_at": "2020-04-20T12:36:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I found current `limit` does not check any constraint. So it can leads wrong SQL generation.\r\n\r\nfor example, like this :\r\n``` python3\r\nfrom pypika import Query\r\n\r\nq = Query.from_('foo').select(\"bar\")\r\nwrong1 = q.limit(-1) # negative value with int\r\nwrong2 = q.limit(\"-1\") # negative value with string\r\nwrong3 = q.limit(\"wrong\") # non integer value\r\n\r\nprint(wrong1)\r\nprint(wrong2)\r\nprint(wrong3)\r\n``` \r\n\r\nThe result will be:\r\n``` SQL\r\nSELECT \"bar\" FROM \"foo\" LIMIT -1\r\nSELECT \"bar\" FROM \"foo\" LIMIT -1\r\nSELECT \"bar\" FROM \"foo\" LIMIT wrong\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/408", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/408/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/408/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/408/events", "html_url": "https://github.com/kayak/pypika/issues/408", "id": 602084552, "node_id": "MDU6SXNzdWU2MDIwODQ1NTI=", "number": 408, "title": "PostgreSQL dialect does not escape \"name\" field alias anymore", "user": {"login": "Dandi91", "id": 7431712, "node_id": "MDQ6VXNlcjc0MzE3MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/7431712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dandi91", "html_url": "https://github.com/Dandi91", "followers_url": "https://api.github.com/users/Dandi91/followers", "following_url": "https://api.github.com/users/Dandi91/following{/other_user}", "gists_url": "https://api.github.com/users/Dandi91/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dandi91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dandi91/subscriptions", "organizations_url": "https://api.github.com/users/Dandi91/orgs", "repos_url": "https://api.github.com/users/Dandi91/repos", "events_url": "https://api.github.com/users/Dandi91/events{/privacy}", "received_events_url": "https://api.github.com/users/Dandi91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-17T16:11:34Z", "updated_at": "2020-04-20T09:05:30Z", "closed_at": "2020-04-20T09:05:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When updating from 0.36.4 to 0.36.5 we discovered the following:\r\n\r\n0.36.4 generates this sql:\r\n```sql\r\nselect \"value\"->>'source_name' \"name\" from \"jsonb_table\"\r\n```\r\n0.36.5 does not escape `name` alias anymore:\r\n```sql\r\nselect \"value\"->>'source_name' name from \"jsonb_table\"\r\n```\r\nwhich generates \"SQL Error [42601]: ERROR: syntax error at or near \"name\"\" in PostgreSQL 11.7\r\n\r\nCode to reproduce:\r\n```python\r\nfrom pypika import PostgreSQLQuery as Query, Table\r\ntable = Table('jsonb_table')\r\nq = Query.from_(table).select(table.value.get_text_value('source_name').as_('name'))\r\nq.get_sql()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/395", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/395/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/395/events", "html_url": "https://github.com/kayak/pypika/issues/395", "id": 597705648, "node_id": "MDU6SXNzdWU1OTc3MDU2NDg=", "number": 395, "title": "Pypika Criterion issue ", "user": {"login": "nikkitha92", "id": 21189296, "node_id": "MDQ6VXNlcjIxMTg5Mjk2", "avatar_url": "https://avatars3.githubusercontent.com/u/21189296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikkitha92", "html_url": "https://github.com/nikkitha92", "followers_url": "https://api.github.com/users/nikkitha92/followers", "following_url": "https://api.github.com/users/nikkitha92/following{/other_user}", "gists_url": "https://api.github.com/users/nikkitha92/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikkitha92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikkitha92/subscriptions", "organizations_url": "https://api.github.com/users/nikkitha92/orgs", "repos_url": "https://api.github.com/users/nikkitha92/repos", "events_url": "https://api.github.com/users/nikkitha92/events{/privacy}", "received_events_url": "https://api.github.com/users/nikkitha92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T05:34:34Z", "updated_at": "2020-04-17T12:17:58Z", "closed_at": "2020-04-17T12:17:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nWhen i try to add dynamic variables to criterion in the following way : \r\n\r\nfilters = {'brand_name':'budweiser','Age_group':'30-35','gender':'Male'}\r\n\r\ncriterion = Criterion.any(customers.key == value for key,value in filters.items())\r\n\r\ncustomers = Table('final_table_vr')\r\nq = Query.from_(customers).select(\r\n    customers.user_id,customers.name,customers.age\r\n).where(criterion)\r\n\r\nOutput : \r\n\r\nSELECT \"user_id\",\"name\",\"age\" FROM \"final_table_vr\" WHERE \"key\"='budweiser' OR \"key\"='30-35' OR \"key\"='Male'\r\n\r\nHowever i should get the actual key values. Could someone please help ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/393", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/393/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/393/events", "html_url": "https://github.com/kayak/pypika/issues/393", "id": 593808890, "node_id": "MDU6SXNzdWU1OTM4MDg4OTA=", "number": 393, "title": "Oracle concatenate fields", "user": {"login": "steelunicorn", "id": 20414473, "node_id": "MDQ6VXNlcjIwNDE0NDcz", "avatar_url": "https://avatars3.githubusercontent.com/u/20414473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steelunicorn", "html_url": "https://github.com/steelunicorn", "followers_url": "https://api.github.com/users/steelunicorn/followers", "following_url": "https://api.github.com/users/steelunicorn/following{/other_user}", "gists_url": "https://api.github.com/users/steelunicorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steelunicorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steelunicorn/subscriptions", "organizations_url": "https://api.github.com/users/steelunicorn/orgs", "repos_url": "https://api.github.com/users/steelunicorn/repos", "events_url": "https://api.github.com/users/steelunicorn/events{/privacy}", "received_events_url": "https://api.github.com/users/steelunicorn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-04T11:43:20Z", "updated_at": "2020-04-09T13:06:51Z", "closed_at": "2020-04-09T13:06:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI'm trying to use ORA_HASH function on all table fields. Is there any way to do it with pypika? \r\nAs a result I want to get something like:\r\n`SELECT ORA_HASH(\"FIELD_A\"||\"FIELD_B\"||\"FIELD_C\") AS \"HASH\", \"FIELD_A\", \"FIELD_B\", \"FIELD_C\" FROM \"TABLE1\"`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/390", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/390/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/390/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/390/events", "html_url": "https://github.com/kayak/pypika/issues/390", "id": 589672787, "node_id": "MDU6SXNzdWU1ODk2NzI3ODc=", "number": 390, "title": "\"AS\" alias in SQL", "user": {"login": "woochan-cho", "id": 56270084, "node_id": "MDQ6VXNlcjU2MjcwMDg0", "avatar_url": "https://avatars2.githubusercontent.com/u/56270084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woochan-cho", "html_url": "https://github.com/woochan-cho", "followers_url": "https://api.github.com/users/woochan-cho/followers", "following_url": "https://api.github.com/users/woochan-cho/following{/other_user}", "gists_url": "https://api.github.com/users/woochan-cho/gists{/gist_id}", "starred_url": "https://api.github.com/users/woochan-cho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woochan-cho/subscriptions", "organizations_url": "https://api.github.com/users/woochan-cho/orgs", "repos_url": "https://api.github.com/users/woochan-cho/repos", "events_url": "https://api.github.com/users/woochan-cho/events{/privacy}", "received_events_url": "https://api.github.com/users/woochan-cho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-28T22:33:30Z", "updated_at": "2020-04-17T12:15:45Z", "closed_at": "2020-04-17T12:15:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I am not sure if I can ask you a question. However please give me a favor.\r\nWhen I see the previous sample code, there is \"AS\" when use column alias.\r\n\r\nq = Query.from_(accounts).select(\r\n    (accounts.revenue - accounts.cost).as_('profit')\r\n)\r\n_SELECT revenue-cost **AS** 'profit' profit FROM accounts_\r\n\r\nBut, now I can't find it and also I can't find \"AS\" any more when I run the code. \r\n\r\n_SELECT revenue-cost  'profit' profit FROM accounts_\r\n\r\nHow I can make it show in the resulting query please?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/389", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/389/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/389/events", "html_url": "https://github.com/kayak/pypika/issues/389", "id": 588449935, "node_id": "MDU6SXNzdWU1ODg0NDk5MzU=", "number": 389, "title": "Interval produces invalid sql for units with 0 values", "user": {"login": "Kamforka", "id": 16663089, "node_id": "MDQ6VXNlcjE2NjYzMDg5", "avatar_url": "https://avatars2.githubusercontent.com/u/16663089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kamforka", "html_url": "https://github.com/Kamforka", "followers_url": "https://api.github.com/users/Kamforka/followers", "following_url": "https://api.github.com/users/Kamforka/following{/other_user}", "gists_url": "https://api.github.com/users/Kamforka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kamforka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kamforka/subscriptions", "organizations_url": "https://api.github.com/users/Kamforka/orgs", "repos_url": "https://api.github.com/users/Kamforka/repos", "events_url": "https://api.github.com/users/Kamforka/events{/privacy}", "received_events_url": "https://api.github.com/users/Kamforka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-26T14:09:47Z", "updated_at": "2020-03-31T16:06:31Z", "closed_at": "2020-03-31T16:06:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "# System environment\r\n\r\nOS : Ubuntu 16.04 LTS\r\nPyPika : 0.36.0\r\n\r\n# Overview\r\n\r\nInstantiating an `Interval` object with default 0 values or with empty argument list makes it to output invalid sql.\r\n\r\n\r\n# Steps to reproduce\r\n\r\n```python3\r\nfrom pypika import Interval\r\nInterval(days=0).get_sql()\r\n```\r\n\r\n# Expected behavior\r\n\r\n```python\r\n>>> Interval(days=0).get_sql()\r\n\"INTERVAL '0 DAY'\"\r\n```\r\n\r\n# Actual behavior\r\n\r\n```python\r\n>>> Interval(days=0).get_sql()  # same happens with Interval().get_sql()\r\n\"INTERVAL '0 None'\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/384", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/384/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/384/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/384/events", "html_url": "https://github.com/kayak/pypika/issues/384", "id": 580217617, "node_id": "MDU6SXNzdWU1ODAyMTc2MTc=", "number": 384, "title": "MSSQL DATEDIFF wraps datepart in single quotes", "user": {"login": "jaymegordo", "id": 29611875, "node_id": "MDQ6VXNlcjI5NjExODc1", "avatar_url": "https://avatars3.githubusercontent.com/u/29611875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaymegordo", "html_url": "https://github.com/jaymegordo", "followers_url": "https://api.github.com/users/jaymegordo/followers", "following_url": "https://api.github.com/users/jaymegordo/following{/other_user}", "gists_url": "https://api.github.com/users/jaymegordo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaymegordo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaymegordo/subscriptions", "organizations_url": "https://api.github.com/users/jaymegordo/orgs", "repos_url": "https://api.github.com/users/jaymegordo/repos", "events_url": "https://api.github.com/users/jaymegordo/events{/privacy}", "received_events_url": "https://api.github.com/users/jaymegordo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-12T21:04:09Z", "updated_at": "2020-03-24T13:43:43Z", "closed_at": "2020-03-24T13:43:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "The DateDiff function always returns the raw sql in the format:\r\n`DATEDIFF('d','2019-01-01','2019-12-01')`\r\n\r\nwhere MSSQL (T SQL at least) only accepts:\r\n`DATEDIFF(d,'2019-01-01','2019-12-01')`\r\n\r\nwithout the single quotes on the datepart.\r\n\r\nIs there any way to allow pypika to return either a non-quoted datepart, or even a double-quoted one?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/383", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/383/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/383/events", "html_url": "https://github.com/kayak/pypika/issues/383", "id": 579762455, "node_id": "MDU6SXNzdWU1Nzk3NjI0NTU=", "number": 383, "title": "Alias is ignored with Array and Tuple terms", "user": {"login": "benzolium", "id": 13656217, "node_id": "MDQ6VXNlcjEzNjU2MjE3", "avatar_url": "https://avatars1.githubusercontent.com/u/13656217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benzolium", "html_url": "https://github.com/benzolium", "followers_url": "https://api.github.com/users/benzolium/followers", "following_url": "https://api.github.com/users/benzolium/following{/other_user}", "gists_url": "https://api.github.com/users/benzolium/gists{/gist_id}", "starred_url": "https://api.github.com/users/benzolium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benzolium/subscriptions", "organizations_url": "https://api.github.com/users/benzolium/orgs", "repos_url": "https://api.github.com/users/benzolium/repos", "events_url": "https://api.github.com/users/benzolium/events{/privacy}", "received_events_url": "https://api.github.com/users/benzolium/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-12T08:07:46Z", "updated_at": "2020-04-09T13:22:41Z", "closed_at": "2020-04-09T13:22:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to use Array (or Tuple) with alias function `as_` I'm getting following:\r\n\r\n```\r\nIn [3]: from pypika import Table, PostgreSQLQuery as Query\r\nIn [2]: from pypika.terms import Array, Tuple\r\nIn [4]: tb=Table(\"tb\")\r\n\r\nIn [6]: Query.from_(tb).select(Array(tb.col).as_(\"different_name\"))\r\nOut[6]: SELECT ARRAY[\"col\"] FROM \"tb\"\r\n\r\nIn [8]: Query.from_(tb).select(Tuple(tb.col).as_(\"different_name\"))\r\nOut[8]: SELECT (\"col\") FROM \"tb\"\r\n```\r\n\r\nExpected behavior:\r\n```\r\nIn [6]: Query.from_(tb).select(Array(tb.col).as_(\"different_name\"))\r\nOut[6]: SELECT ARRAY[\"col\"] \"different_name\" FROM \"tb\"\r\n\r\nIn [8]: Query.from_(tb).select(Tuple(tb.col).as_(\"different_name\"))\r\nOut[8]: SELECT (\"col\") \"different_name\" FROM \"tb\"\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/382", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/382/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/382/events", "html_url": "https://github.com/kayak/pypika/issues/382", "id": 579401292, "node_id": "MDU6SXNzdWU1Nzk0MDEyOTI=", "number": 382, "title": "control over tablename prefix in `with_` then `select`", "user": {"login": "zkurtz", "id": 4934167, "node_id": "MDQ6VXNlcjQ5MzQxNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4934167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkurtz", "html_url": "https://github.com/zkurtz", "followers_url": "https://api.github.com/users/zkurtz/followers", "following_url": "https://api.github.com/users/zkurtz/following{/other_user}", "gists_url": "https://api.github.com/users/zkurtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkurtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkurtz/subscriptions", "organizations_url": "https://api.github.com/users/zkurtz/orgs", "repos_url": "https://api.github.com/users/zkurtz/repos", "events_url": "https://api.github.com/users/zkurtz/events{/privacy}", "received_events_url": "https://api.github.com/users/zkurtz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-11T16:42:34Z", "updated_at": "2020-03-12T18:07:25Z", "closed_at": "2020-03-12T11:36:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "This kind of thing would throw an ambiguous column exception for column `key`:\r\n```\r\nfrom pypika import AliasedQuery, Query, Table\r\n\r\na_table = Table('a')\r\na_query = Query.from_(a_table).select('acol, key, sharedcolumn')\r\n\r\nb_table = Table('b')\r\nb_query = Query.from_(b_table).select('bcol, key, sharedcolumn')\r\n\r\nwithed_a = AliasedQuery('a')\r\nwithed_b = AliasedQuery('b')\r\nqx = (Query.\r\n    with_(a_query, 'a').\r\n    with_(b_query, 'b').\r\n    from_(withed_a).\r\n    select('acol, key').\r\n    join(withed_b).\r\n    on_field('sharedcolumn')\r\n)\r\n\r\n################\r\n## Result:\r\nWITH a AS\r\n  (SELECT acol,\r\n          key,\r\n          sharedcolumn\r\n   FROM a),\r\n     b AS\r\n  (SELECT bcol,\r\n          key,\r\n          sharedcolumn\r\n   FROM b)\r\nSELECT a.acol,\r\n       key\r\nFROM a\r\nJOIN b ON a.sharedcolumn=b.sharedcolumn\r\n```\r\n\r\nThe hack I have to get around this is extremely ugly. Is there a graceful way to specify the result 'key' vs 'a.key' vs 'b.key' in the select statement?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/381", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/381/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/381/events", "html_url": "https://github.com/kayak/pypika/issues/381", "id": 578831418, "node_id": "MDU6SXNzdWU1Nzg4MzE0MTg=", "number": 381, "title": "Inconsistent table qualifiers", "user": {"login": "benjaminsanborn", "id": 665789, "node_id": "MDQ6VXNlcjY2NTc4OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/665789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benjaminsanborn", "html_url": "https://github.com/benjaminsanborn", "followers_url": "https://api.github.com/users/benjaminsanborn/followers", "following_url": "https://api.github.com/users/benjaminsanborn/following{/other_user}", "gists_url": "https://api.github.com/users/benjaminsanborn/gists{/gist_id}", "starred_url": "https://api.github.com/users/benjaminsanborn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benjaminsanborn/subscriptions", "organizations_url": "https://api.github.com/users/benjaminsanborn/orgs", "repos_url": "https://api.github.com/users/benjaminsanborn/repos", "events_url": "https://api.github.com/users/benjaminsanborn/events{/privacy}", "received_events_url": "https://api.github.com/users/benjaminsanborn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-10T20:08:38Z", "updated_at": "2020-03-24T13:44:02Z", "closed_at": "2020-03-24T13:44:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey all; thanks for the library! I'm doing a lot of composition work and I've discovered that when I compose a query as below:\r\n\r\n```\r\n>>> from pypika import Query, Table, Field, BasicCriterion\r\n>>> from pypika.terms import BasicCriterion, ValueWrapper, Equality\r\n>>> Query().from_(Table(\"amtrak\")).select(Field(\"id\", table=Table(\"amtrak\"))).where(BasicCriterion(Equality.eq, Field(\"id\", table=Table(\"amtrak\")), ValueWrapper(1))).limit(5).offset(18)\r\n```\r\nit prepares:\r\n```\r\nSELECT \"id\" FROM \"amtrak\" WHERE \"id\"=1 LIMIT 5 OFFSET 18\r\n```\r\n\r\nHowever, when I re-order the application,\r\n```\r\n>>> Query().select(Field(\"id\", table=Table(\"amtrak\"))).where(BasicCriterion(Equality.eq, Field(\"id\", table=Table(\"amtrak\")), ValueWrapper(1))).from_(Table(\"amtrak\")).limit(5).offset(18)\r\n```\r\nit produces:\r\n```\r\nSELECT \"amtrak\".\"id\" FROM \"amtrak\" WHERE \"amtrak\".\"id\"=1 LIMIT 5 OFFSET 18\r\n```\r\n\r\nI'm going to use the fully-validated second case, but I'm wondering, is the former behavior a bug or trying to eliminate the table name calls?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/380", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/380/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/380/events", "html_url": "https://github.com/kayak/pypika/issues/380", "id": 578415938, "node_id": "MDU6SXNzdWU1Nzg0MTU5Mzg=", "number": 380, "title": "created sql could not be executed on mysql", "user": {"login": "jufei", "id": 8425377, "node_id": "MDQ6VXNlcjg0MjUzNzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8425377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jufei", "html_url": "https://github.com/jufei", "followers_url": "https://api.github.com/users/jufei/followers", "following_url": "https://api.github.com/users/jufei/following{/other_user}", "gists_url": "https://api.github.com/users/jufei/gists{/gist_id}", "starred_url": "https://api.github.com/users/jufei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jufei/subscriptions", "organizations_url": "https://api.github.com/users/jufei/orgs", "repos_url": "https://api.github.com/users/jufei/repos", "events_url": "https://api.github.com/users/jufei/events{/privacy}", "received_events_url": "https://api.github.com/users/jufei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-10T08:34:34Z", "updated_at": "2020-03-24T13:45:40Z", "closed_at": "2020-03-24T13:45:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi:\r\n\r\nfrom pypika import Query, Table, Field\r\ntest = Table('tbltest')\r\nq = Query.into(test).columns('name').insert('abc')\r\n>>> q.get_sql()\r\n'INSERT INTO \"tbltest\" (\"name\") VALUES (\\'abc\\')'\r\n\r\n\r\nmysql> INSERT INTO \"tbltest\" (\"name\") VALUES (\\'abc\\');\r\nERROR: \r\nUnknown command '\\''.\r\nERROR: \r\nUnknown command '\\''.\r\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"tbltest\" (\"name\") VALUES (\\'abc\\')' at line 1\r\n\r\nmysql> INSERT INTO \"tbltest\" (\"name\") VALUES ('abc');\r\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"tbltest\" (\"name\") VALUES ('abc')' at line 1\r\nmysql> \r\n\r\nmy own sql statement:\r\nmysql> insert into tbltest(name) values('abc');\r\nQuery OK, 1 row affected (0.00 sec)\r\n\r\n\r\nThanks.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/377", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/377/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/377/events", "html_url": "https://github.com/kayak/pypika/issues/377", "id": 577383595, "node_id": "MDU6SXNzdWU1NzczODM1OTU=", "number": 377, "title": "Fails to install on py39-dev", "user": {"login": "grigi", "id": 1309160, "node_id": "MDQ6VXNlcjEzMDkxNjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1309160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grigi", "html_url": "https://github.com/grigi", "followers_url": "https://api.github.com/users/grigi/followers", "following_url": "https://api.github.com/users/grigi/following{/other_user}", "gists_url": "https://api.github.com/users/grigi/gists{/gist_id}", "starred_url": "https://api.github.com/users/grigi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grigi/subscriptions", "organizations_url": "https://api.github.com/users/grigi/orgs", "repos_url": "https://api.github.com/users/grigi/repos", "events_url": "https://api.github.com/users/grigi/events{/privacy}", "received_events_url": "https://api.github.com/users/grigi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-07T18:49:36Z", "updated_at": "2020-04-16T09:28:07Z", "closed_at": "2020-04-16T09:28:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I tried to install pypika on Python3.9 alpha, and it failed with the following error:\r\n```\r\nCollecting pypika==0.35.21\r\n  Downloading PyPika-0.35.21.tar.gz (84 kB)\r\n    ERROR: Command errored out with exit status 1:\r\n     command: /home/travis/virtualenv/python3.9-dev/bin/python -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-wotkbnjo/pypika/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-wotkbnjo/pypika/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base /tmp/pip-install-wotkbnjo/pypika/pip-egg-info\r\n         cwd: /tmp/pip-install-wotkbnjo/pypika/\r\n    Complete output (7 lines):\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-wotkbnjo/pypika/setup.py\", line 39, in <module>\r\n        version=version(),\r\n      File \"/tmp/pip-install-wotkbnjo/pypika/setup.py\", line 13, in version\r\n        with open(path, 'rU') as file:\r\n    ValueError: invalid mode: 'rU'\r\n```\r\n\r\nThis was in a Travis build job using version `3.9-dev`\r\nThe issue is the `U` (universal newlines) have been deprecated since Python3.4: https://docs.python.org/3.4/library/functions.html#open\r\nIt may be fine to just drop that option from `open()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/375", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/375/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/375/events", "html_url": "https://github.com/kayak/pypika/issues/375", "id": 564921293, "node_id": "MDU6SXNzdWU1NjQ5MjEyOTM=", "number": 375, "title": "Boolean comparison filter", "user": {"login": "heronfonsaca", "id": 7663854, "node_id": "MDQ6VXNlcjc2NjM4NTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7663854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heronfonsaca", "html_url": "https://github.com/heronfonsaca", "followers_url": "https://api.github.com/users/heronfonsaca/followers", "following_url": "https://api.github.com/users/heronfonsaca/following{/other_user}", "gists_url": "https://api.github.com/users/heronfonsaca/gists{/gist_id}", "starred_url": "https://api.github.com/users/heronfonsaca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heronfonsaca/subscriptions", "organizations_url": "https://api.github.com/users/heronfonsaca/orgs", "repos_url": "https://api.github.com/users/heronfonsaca/repos", "events_url": "https://api.github.com/users/heronfonsaca/events{/privacy}", "received_events_url": "https://api.github.com/users/heronfonsaca/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-13T20:07:05Z", "updated_at": "2020-02-18T09:41:53Z", "closed_at": "2020-02-18T09:41:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have noticed that there is no mention to bool comparisons in the docs.\r\nI was trying to achieve a filter close to:\r\n```sql\r\nSELECT .. FROM .. WHERE column_name IS TRUE\r\n```\r\nAnd thought that this could be achieved by PyPika using something like:\r\n```python\r\nq.where(table.column is True)\r\n```\r\n\r\nI managed to fake it in order to work on PostgreSQL with:\r\n```python\r\nq.where(table.column == Cast(1, 'BOOLEAN'))\r\n``` \r\nIs this a possible feature to be worked on?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/372", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/372/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/372/events", "html_url": "https://github.com/kayak/pypika/issues/372", "id": 561148190, "node_id": "MDU6SXNzdWU1NjExNDgxOTA=", "number": 372, "title": "Support list, tuple or set with Querybuilder columns method", "user": {"login": "lntuition", "id": 34061042, "node_id": "MDQ6VXNlcjM0MDYxMDQy", "avatar_url": "https://avatars0.githubusercontent.com/u/34061042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lntuition", "html_url": "https://github.com/lntuition", "followers_url": "https://api.github.com/users/lntuition/followers", "following_url": "https://api.github.com/users/lntuition/following{/other_user}", "gists_url": "https://api.github.com/users/lntuition/gists{/gist_id}", "starred_url": "https://api.github.com/users/lntuition/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lntuition/subscriptions", "organizations_url": "https://api.github.com/users/lntuition/orgs", "repos_url": "https://api.github.com/users/lntuition/repos", "events_url": "https://api.github.com/users/lntuition/events{/privacy}", "received_events_url": "https://api.github.com/users/lntuition/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-06T17:05:31Z", "updated_at": "2020-02-14T12:51:33Z", "closed_at": "2020-02-14T12:51:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello :) I found that Querybuilder columns only get `*args`\r\nI think allowing iterable params can be useful to user. \r\n\r\nAS-IS\r\n``` python\r\nQuery.into(\"table\").columns(\"name1\", \"name2\", \"name3\")\r\n```\r\n\r\nTO-BE\r\n```\r\nQuery.into(\"table\").columns([\"name1\", \"name2\", \"name3\"])\r\n```\r\n\r\nHow about support this feature?\r\nIf you agree, i will make patch with some testcases.\r\nPlz check this and have a nice day :+1: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/370", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/370/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/370/events", "html_url": "https://github.com/kayak/pypika/issues/370", "id": 554086109, "node_id": "MDU6SXNzdWU1NTQwODYxMDk=", "number": 370, "title": "error in where construct when using db-definition", "user": {"login": "popokatapepel", "id": 19632978, "node_id": "MDQ6VXNlcjE5NjMyOTc4", "avatar_url": "https://avatars3.githubusercontent.com/u/19632978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popokatapepel", "html_url": "https://github.com/popokatapepel", "followers_url": "https://api.github.com/users/popokatapepel/followers", "following_url": "https://api.github.com/users/popokatapepel/following{/other_user}", "gists_url": "https://api.github.com/users/popokatapepel/gists{/gist_id}", "starred_url": "https://api.github.com/users/popokatapepel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popokatapepel/subscriptions", "organizations_url": "https://api.github.com/users/popokatapepel/orgs", "repos_url": "https://api.github.com/users/popokatapepel/repos", "events_url": "https://api.github.com/users/popokatapepel/events{/privacy}", "received_events_url": "https://api.github.com/users/popokatapepel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-23T11:01:12Z", "updated_at": "2020-01-23T11:41:53Z", "closed_at": "2020-01-23T11:41:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "When i use the following code to generate a simple query with a where clause, the output is correct and everythin is working fine:\r\n\r\n```\r\ncustomers = Table('customers')\r\nq = Query.from_(customers).select(\r\n    customers.id, customers.fname, customers.lname, customers.phone\r\n).where(\r\n    customers.lname == 'Mustermann'\r\n)\r\n```\r\n\r\nHowever, when i define the db first and the table inside the db, i get an Attribute error `AttributeError: 'bool' object has no attribute 'fields_'`\r\n\r\n```\r\ndb = Database('some_db')\r\ncustomers = db.customers \r\nq = Query.from_(customers).select(\r\n    customers.id, customers.fname, customers.lname, customers.phone\r\n).where(\r\n    customers.lname == 'Mustermann'\r\n)\r\n```\r\n\r\nwith the following exception stack:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\...\\test.py\", line 10, in <module>\r\n    customers.lname == 'Mustermann'\r\n  File \"C:\\...\\venv\\lib\\site-packages\\pypika\\utils.py\", line 48, in _copy\r\n    result = func(self_copy, *args, **kwargs)\r\n  File \"C:\\...\\venv\\lib\\site-packages\\pypika\\queries.py\", line 772, in where\r\n    if not self._validate_table(criterion):\r\n  File \"C:\\...\\venv\\lib\\site-packages\\pypika\\queries.py\", line 982, in _validate_table\r\n    for field in term.fields_():\r\nAttributeError: 'bool' object has no attribute 'fields_'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/368", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/368/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/368/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/368/events", "html_url": "https://github.com/kayak/pypika/issues/368", "id": 551945091, "node_id": "MDU6SXNzdWU1NTE5NDUwOTE=", "number": 368, "title": "limit zero not supported when argument is int", "user": {"login": "StephenCarboni", "id": 2601682, "node_id": "MDQ6VXNlcjI2MDE2ODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2601682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StephenCarboni", "html_url": "https://github.com/StephenCarboni", "followers_url": "https://api.github.com/users/StephenCarboni/followers", "following_url": "https://api.github.com/users/StephenCarboni/following{/other_user}", "gists_url": "https://api.github.com/users/StephenCarboni/gists{/gist_id}", "starred_url": "https://api.github.com/users/StephenCarboni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StephenCarboni/subscriptions", "organizations_url": "https://api.github.com/users/StephenCarboni/orgs", "repos_url": "https://api.github.com/users/StephenCarboni/repos", "events_url": "https://api.github.com/users/StephenCarboni/events{/privacy}", "received_events_url": "https://api.github.com/users/StephenCarboni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "twheys", "id": 2015509, "node_id": "MDQ6VXNlcjIwMTU1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2015509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twheys", "html_url": "https://github.com/twheys", "followers_url": "https://api.github.com/users/twheys/followers", "following_url": "https://api.github.com/users/twheys/following{/other_user}", "gists_url": "https://api.github.com/users/twheys/gists{/gist_id}", "starred_url": "https://api.github.com/users/twheys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twheys/subscriptions", "organizations_url": "https://api.github.com/users/twheys/orgs", "repos_url": "https://api.github.com/users/twheys/repos", "events_url": "https://api.github.com/users/twheys/events{/privacy}", "received_events_url": "https://api.github.com/users/twheys/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "twheys", "id": 2015509, "node_id": "MDQ6VXNlcjIwMTU1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2015509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twheys", "html_url": "https://github.com/twheys", "followers_url": "https://api.github.com/users/twheys/followers", "following_url": "https://api.github.com/users/twheys/following{/other_user}", "gists_url": "https://api.github.com/users/twheys/gists{/gist_id}", "starred_url": "https://api.github.com/users/twheys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twheys/subscriptions", "organizations_url": "https://api.github.com/users/twheys/orgs", "repos_url": "https://api.github.com/users/twheys/repos", "events_url": "https://api.github.com/users/twheys/events{/privacy}", "received_events_url": "https://api.github.com/users/twheys/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-01-19T16:11:35Z", "updated_at": "2020-04-21T08:37:04Z", "closed_at": "2020-04-21T08:37:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom pypika import Query\r\n\r\nq = Query.from_('foo').select(\"bar\")\r\nq2 = q.limit(0)\r\nq3 = q.limit('0')\r\n\r\nprint(q, q2, q3, sep='\\n')\r\n\r\n```\r\n\r\n```\r\nSELECT \"bar\" FROM \"foo\"\r\nSELECT \"bar\" FROM \"foo\"\r\nSELECT \"bar\" FROM \"foo\" LIMIT 0\r\n```\r\n\r\nq2 is missing it's LIMIT 0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/367", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/367/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/367/events", "html_url": "https://github.com/kayak/pypika/issues/367", "id": 547418319, "node_id": "MDU6SXNzdWU1NDc0MTgzMTk=", "number": 367, "title": "Escape columns according if using database specific Query classes", "user": {"login": "khalyomede", "id": 15908747, "node_id": "MDQ6VXNlcjE1OTA4NzQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/15908747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khalyomede", "html_url": "https://github.com/khalyomede", "followers_url": "https://api.github.com/users/khalyomede/followers", "following_url": "https://api.github.com/users/khalyomede/following{/other_user}", "gists_url": "https://api.github.com/users/khalyomede/gists{/gist_id}", "starred_url": "https://api.github.com/users/khalyomede/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khalyomede/subscriptions", "organizations_url": "https://api.github.com/users/khalyomede/orgs", "repos_url": "https://api.github.com/users/khalyomede/repos", "events_url": "https://api.github.com/users/khalyomede/events{/privacy}", "received_events_url": "https://api.github.com/users/khalyomede/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-09T11:23:43Z", "updated_at": "2020-01-09T14:24:39Z", "closed_at": "2020-01-09T14:23:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description**\r\n\r\nI did not saw in the documentation how to escape the columns, and I expected this library to do it in a way or another. In my case I expected it to automatically escape the columns.\r\n\r\n**Reproduce**\r\n\r\nSave the following code in a file `test.py`\r\n\r\n```python\r\nfrom pypika import MySQLQuery, MSSQLQuery, PostgreSQLQuery, Table\r\n\r\ntable = Table(\"user\")\r\nmysql_query = MySQLQuery.from_(table).select(\"id\", \"external_id\", \"name\", \"from\", \"user\")\r\nmssql_query = MSSQLQuery.from_(table).select(\"id\", \"external_id\", \"name\", \"from\", \"user\")\r\npostgresql_query = PostgreSQLQuery.from_(table).select(\"id\", \"external_id\", \"name\", \"from\", \"user\")\r\nmysql_query_string = mysql_query.get_sql()\r\nmssql_query_string = mssql_query.get_sql()\r\npostgresql_query_string = postgresql_query.get_sql()\r\n\r\nprint(\"**** MySQL QUERY ****\")\r\nprint(mysql_query_string)\r\nprint(\"**** MSSQL QUERY *****\")\r\nprint(mssql_query_string)\r\nprint(\"**** PostgreSQL QUERY *****\")\r\nprint(postgresql_query_string)\r\n```\r\n\r\nSee the output in console.\r\n\r\n```bash\r\npython test.py\r\n```\r\n\r\n```\r\n**** MySQL QUERY ****\r\nSELECT id,external_id,name,from,user FROM user\r\n**** MSSQL QUERY *****\r\nSELECT id,external_id,name,from,user FROM user\r\n**** PostgreSQL QUERY *****\r\nSELECT id,external_id,name,from,user FROM user\r\n```\r\n\r\n**Expected result**\r\n\r\nTo see in console the escaped columns.\r\n\r\n```\r\n**** MySQL QUERY ****\r\nSELECT `id`,`external_id`,`name`,`from`,`user` FROM user\r\n**** MSSQL QUERY *****\r\nSELECT [id],[external_id],[name],[from],[user] FROM user\r\n**** PostgreSQL QUERY *****\r\nSELECT \"id\",\"external_id\",\"name\",\"from\",\"user\" FROM user\r\n```\r\n\r\n**Notes**\r\n\r\n1. Maybe the `pypika.Field` should be updated to produce the same output in case we are calling this class only with a column like `Field(\"user\")`?\r\n2. Maybe this could be opt-in in a way or another, meaning if you decide to resolve this issue, \r\n    - to make the library to automatically escape the columns, with an option in a defined location (on the class level?) to let the developer to disable this behavior (like `.select(\"id\", \"user\", escape=False)`)\r\n    - to make the library not to do anything without the developer to specify wether he want to escape columns or not (like `.select(\"id\", \"user\", escape=True)`)\r\n3. This goes beyond the scope of this issue (for the moment?), but maybe extend this escape feature to table names also?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/365", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/365/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/365/events", "html_url": "https://github.com/kayak/pypika/issues/365", "id": 544927533, "node_id": "MDU6SXNzdWU1NDQ5Mjc1MzM=", "number": 365, "title": "Is there a way to dynamically create WHERE clauses?", "user": {"login": "Kulu-M", "id": 9268124, "node_id": "MDQ6VXNlcjkyNjgxMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/9268124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kulu-M", "html_url": "https://github.com/Kulu-M", "followers_url": "https://api.github.com/users/Kulu-M/followers", "following_url": "https://api.github.com/users/Kulu-M/following{/other_user}", "gists_url": "https://api.github.com/users/Kulu-M/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kulu-M/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kulu-M/subscriptions", "organizations_url": "https://api.github.com/users/Kulu-M/orgs", "repos_url": "https://api.github.com/users/Kulu-M/repos", "events_url": "https://api.github.com/users/Kulu-M/events{/privacy}", "received_events_url": "https://api.github.com/users/Kulu-M/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-03T10:04:38Z", "updated_at": "2020-01-09T14:26:37Z", "closed_at": "2020-01-09T14:26:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using WHERE with OR, in the example it says the following:\r\n\r\n```\r\ncustomers = Table('customers')\r\nq = Query.from_(customers).select(\r\n    customers.id, customers.fname, customers.lname, customers.phone\r\n).where(\r\n    (customers.age >= 18) | (customers.lname == 'Mustermann')\r\n)\r\n```\r\n\r\nIf I have some kind of collection with desired filters, is there any way to create this dynamically? For example:\r\n```\r\nfilters = [\r\n\t\t{'field': 'customers.age', 'operator': '>=', 'value': '18'},\r\n\t\t{'field': 'customers.lname', 'operator': '==', 'value': 'Mustermann'}\r\n]\r\n```\r\n\r\nSomething like\r\n\r\n```\r\nquery = query.where([for f in filters])\r\n```\r\nIf not, what would be the best way to react on unknown filter amounts and fields/values/operators? \r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/362", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/362/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/362/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/362/events", "html_url": "https://github.com/kayak/pypika/issues/362", "id": 542250840, "node_id": "MDU6SXNzdWU1NDIyNTA4NDA=", "number": 362, "title": "Correlated subquery of the same table?", "user": {"login": "sinaso", "id": 476279, "node_id": "MDQ6VXNlcjQ3NjI3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/476279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinaso", "html_url": "https://github.com/sinaso", "followers_url": "https://api.github.com/users/sinaso/followers", "following_url": "https://api.github.com/users/sinaso/following{/other_user}", "gists_url": "https://api.github.com/users/sinaso/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinaso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinaso/subscriptions", "organizations_url": "https://api.github.com/users/sinaso/orgs", "repos_url": "https://api.github.com/users/sinaso/repos", "events_url": "https://api.github.com/users/sinaso/events{/privacy}", "received_events_url": "https://api.github.com/users/sinaso/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-25T04:24:03Z", "updated_at": "2019-12-25T06:42:28Z", "closed_at": "2019-12-25T06:40:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to create correlated subqueries of a table with itself:\r\n~~~\r\n    products_inner = Table('product', 'A0')\r\n    products_outer = Table('product', 'A1')\r\n\r\n    subquery = Query.from_(products_inner)\\\r\n        .select(products_inner.id)\\\r\n        .where(products_inner.brand_id == products_outer.brand_id)\\\r\n        .limit(4)\r\n\r\n    products_query = Query.from_(products_outer)\\\r\n        .select(products_outer.id, products_outer.brand_id, products_outer.name)\\\r\n        .where(products_outer.id.isin(subquery))\r\n~~~\r\n\r\nUsing aliases is the only way I could force Pypika to distinguish the tables, yet the generated SQL, is not working:\r\n\r\n~~~\r\nSELECT \"id\",\"brand_id\",\"name\" \r\nFROM \"A1\".\"product\" \r\nWHERE \"id\" IN (\r\n    SELECT \"product\".\"id\" \r\n    FROM \"A0\".\"product\" \r\n    WHERE \"product\".\"brand_id\"=\"product\".\"brand_id\" \r\n    LIMIT 4\r\n)\r\n~~~\r\n\r\nAm I missing anything?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/360", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/360/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/360/events", "html_url": "https://github.com/kayak/pypika/issues/360", "id": 537558648, "node_id": "MDU6SXNzdWU1Mzc1NTg2NDg=", "number": 360, "title": ".orderby($list) does not accept list of strings as Input", "user": {"login": "Kulu-M", "id": 9268124, "node_id": "MDQ6VXNlcjkyNjgxMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/9268124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kulu-M", "html_url": "https://github.com/Kulu-M", "followers_url": "https://api.github.com/users/Kulu-M/followers", "following_url": "https://api.github.com/users/Kulu-M/following{/other_user}", "gists_url": "https://api.github.com/users/Kulu-M/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kulu-M/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kulu-M/subscriptions", "organizations_url": "https://api.github.com/users/Kulu-M/orgs", "repos_url": "https://api.github.com/users/Kulu-M/repos", "events_url": "https://api.github.com/users/Kulu-M/events{/privacy}", "received_events_url": "https://api.github.com/users/Kulu-M/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-13T13:46:17Z", "updated_at": "2019-12-13T14:03:16Z", "closed_at": "2019-12-13T14:03:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\tquery = query.orderby([\"ID\", \"SID\"])\r\n\r\nwill result in \r\n\r\n\tORDER BY ['ID','SID']\r\n\r\nWhich is invalid SQL syntax.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/359", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/359/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/359/events", "html_url": "https://github.com/kayak/pypika/issues/359", "id": 535950398, "node_id": "MDU6SXNzdWU1MzU5NTAzOTg=", "number": 359, "title": "No possibility to use Union and aliased query (with ... as ..)", "user": {"login": "mvbrn", "id": 21321875, "node_id": "MDQ6VXNlcjIxMzIxODc1", "avatar_url": "https://avatars3.githubusercontent.com/u/21321875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvbrn", "html_url": "https://github.com/mvbrn", "followers_url": "https://api.github.com/users/mvbrn/followers", "following_url": "https://api.github.com/users/mvbrn/following{/other_user}", "gists_url": "https://api.github.com/users/mvbrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvbrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvbrn/subscriptions", "organizations_url": "https://api.github.com/users/mvbrn/orgs", "repos_url": "https://api.github.com/users/mvbrn/repos", "events_url": "https://api.github.com/users/mvbrn/events{/privacy}", "received_events_url": "https://api.github.com/users/mvbrn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-10T19:45:01Z", "updated_at": "2020-07-23T13:42:30Z", "closed_at": "2020-07-23T13:42:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to create query like\r\n```\r\nWITH filtered AS (SELECT * FROM .. WHERE ...)\r\nSELECT COUNT(*) FROM filtered\r\nUNION\r\nSELECT COUNT(*) FROM filtered WHERE ...\r\n```\r\nwith \r\n`Query.from_(AliasedQuery(\"filtered\")).select(Count(\"*\")).union(Query.from_(AliasedQuery(\"filtered\")).select(Count(\"*\")).where(...)).with(Query.from(...).select(\"*\").where(...), \"filtered\")` - but it is not working (TypeError: 'Field' object is not callable)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/358", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/358/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/358/events", "html_url": "https://github.com/kayak/pypika/issues/358", "id": 530595476, "node_id": "MDU6SXNzdWU1MzA1OTU0NzY=", "number": 358, "title": "MSSQLQuery \"top\"", "user": {"login": "sivabudh", "id": 618729, "node_id": "MDQ6VXNlcjYxODcyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/618729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sivabudh", "html_url": "https://github.com/sivabudh", "followers_url": "https://api.github.com/users/sivabudh/followers", "following_url": "https://api.github.com/users/sivabudh/following{/other_user}", "gists_url": "https://api.github.com/users/sivabudh/gists{/gist_id}", "starred_url": "https://api.github.com/users/sivabudh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sivabudh/subscriptions", "organizations_url": "https://api.github.com/users/sivabudh/orgs", "repos_url": "https://api.github.com/users/sivabudh/repos", "events_url": "https://api.github.com/users/sivabudh/events{/privacy}", "received_events_url": "https://api.github.com/users/sivabudh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-30T15:52:37Z", "updated_at": "2019-12-02T10:53:04Z", "closed_at": "2019-12-02T10:53:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "With a Microsoft SQL Server database, we cannot use `.limit(N)` but we need to use \r\n\r\n```\r\nSELECT TOP N\r\n```\r\nRef: https://www.w3schools.com/sql/sql_top.asp\r\n\r\nDoes Pypika support `TOP`? I've already tried:\r\n\r\n```\r\nfrom pypika import MSSQLQuery\r\nqry = MSSQLQuery.from_(table).select(...).limit(100)\r\n```\r\nBut when I execute the query, I get:\r\n\r\n```\r\nExecution failed on sql 'SELECT <field names> FROM \"<table name>\" LIMIT 100': <class 'pyodbc.Error'> returned a result with an error set\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/357", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/357/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/357/events", "html_url": "https://github.com/kayak/pypika/issues/357", "id": 529485218, "node_id": "MDU6SXNzdWU1Mjk0ODUyMTg=", "number": 357, "title": "Is is possible to join on multiple casted fields?", "user": {"login": "axmccx", "id": 3931007, "node_id": "MDQ6VXNlcjM5MzEwMDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3931007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axmccx", "html_url": "https://github.com/axmccx", "followers_url": "https://api.github.com/users/axmccx/followers", "following_url": "https://api.github.com/users/axmccx/following{/other_user}", "gists_url": "https://api.github.com/users/axmccx/gists{/gist_id}", "starred_url": "https://api.github.com/users/axmccx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axmccx/subscriptions", "organizations_url": "https://api.github.com/users/axmccx/orgs", "repos_url": "https://api.github.com/users/axmccx/repos", "events_url": "https://api.github.com/users/axmccx/events{/privacy}", "received_events_url": "https://api.github.com/users/axmccx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-27T17:27:41Z", "updated_at": "2019-11-27T18:26:48Z", "closed_at": "2019-11-27T18:26:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example:\r\n\r\n```  \r\n  SELECT\r\n    p.date::TEXT AS date,\r\n    p.sku::TEXT AS sku,\r\n    p.customer_id::TEXT AS customer_id\r\n  FROM table_pre p RIGHT JOIN diff_rows df ON\r\n    p.date::TEXT = df.date::TEXT\r\n    AND p.sku::TEXT = df.sku::TEXT\r\n    AND p.customer_id::TEXT = df.customer_id::TEXT\r\n```\r\nOR...\r\n```\r\n  SELECT\r\n    CAST(p.date AS TEXT) AS date,\r\n    CAST(p.sku AS TEXT) AS sku,\r\n    CAST(p.customer_id AS TEXT) AS customer_id\r\n  FROM table_pre p RIGHT JOIN diff_rows df ON\r\n    CAST(p.date AS TEXT) = CAST(df.date AS TEXT)\r\n    AND CAST(p.sku AS TEXT) = CAST(df.sku AS TEXT)\r\n    AND CAST(p.customer_id AS TEXT) = CAST(df.customer_id AS TEXT)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/356", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/356/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/356/events", "html_url": "https://github.com/kayak/pypika/issues/356", "id": 529329503, "node_id": "MDU6SXNzdWU1MjkzMjk1MDM=", "number": 356, "title": "Postgresql DISTINCT ON (fields)", "user": {"login": "Dandi91", "id": 7431712, "node_id": "MDQ6VXNlcjc0MzE3MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/7431712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dandi91", "html_url": "https://github.com/Dandi91", "followers_url": "https://api.github.com/users/Dandi91/followers", "following_url": "https://api.github.com/users/Dandi91/following{/other_user}", "gists_url": "https://api.github.com/users/Dandi91/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dandi91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dandi91/subscriptions", "organizations_url": "https://api.github.com/users/Dandi91/orgs", "repos_url": "https://api.github.com/users/Dandi91/repos", "events_url": "https://api.github.com/users/Dandi91/events{/privacy}", "received_events_url": "https://api.github.com/users/Dandi91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-27T12:55:59Z", "updated_at": "2020-04-23T13:08:00Z", "closed_at": "2020-04-23T13:08:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In Postgres, it is possible to specify set of fields in DISTINCT ON clause. Does pypika support it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/355", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/355/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/355/events", "html_url": "https://github.com/kayak/pypika/issues/355", "id": 528923321, "node_id": "MDU6SXNzdWU1Mjg5MjMzMjE=", "number": 355, "title": "Using a String for 'on' when joining tables", "user": {"login": "axmccx", "id": 3931007, "node_id": "MDQ6VXNlcjM5MzEwMDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3931007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axmccx", "html_url": "https://github.com/axmccx", "followers_url": "https://api.github.com/users/axmccx/followers", "following_url": "https://api.github.com/users/axmccx/following{/other_user}", "gists_url": "https://api.github.com/users/axmccx/gists{/gist_id}", "starred_url": "https://api.github.com/users/axmccx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axmccx/subscriptions", "organizations_url": "https://api.github.com/users/axmccx/orgs", "repos_url": "https://api.github.com/users/axmccx/repos", "events_url": "https://api.github.com/users/axmccx/events{/privacy}", "received_events_url": "https://api.github.com/users/axmccx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-26T19:19:28Z", "updated_at": "2019-11-26T19:41:59Z", "closed_at": "2019-11-26T19:41:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to define a Criterion for 'on' when used with join, using a string?\r\nSometimes, I need to join two tables using columns with different names. e.g., .on(\"history.customer_id == customers.id\")\r\n\r\nI'd like the choice of columns to be determined from predefined settings, depending on the tables being joined. I know there's 'on_field' and 'using', but these are only seem useful when the column names in both tables do match. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/354", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/354/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/354/events", "html_url": "https://github.com/kayak/pypika/issues/354", "id": 528587432, "node_id": "MDU6SXNzdWU1Mjg1ODc0MzI=", "number": 354, "title": "How to do Sample in pl/sql", "user": {"login": "HYChou0515", "id": 23552703, "node_id": "MDQ6VXNlcjIzNTUyNzAz", "avatar_url": "https://avatars2.githubusercontent.com/u/23552703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HYChou0515", "html_url": "https://github.com/HYChou0515", "followers_url": "https://api.github.com/users/HYChou0515/followers", "following_url": "https://api.github.com/users/HYChou0515/following{/other_user}", "gists_url": "https://api.github.com/users/HYChou0515/gists{/gist_id}", "starred_url": "https://api.github.com/users/HYChou0515/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HYChou0515/subscriptions", "organizations_url": "https://api.github.com/users/HYChou0515/orgs", "repos_url": "https://api.github.com/users/HYChou0515/repos", "events_url": "https://api.github.com/users/HYChou0515/events{/privacy}", "received_events_url": "https://api.github.com/users/HYChou0515/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-26T09:13:54Z", "updated_at": "2020-04-05T07:40:17Z", "closed_at": "2019-11-26T11:12:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "PL/SQL support [Sample](https://docs.oracle.com/cd/B28359_01/server.111/b28286/statements_10002.htm#i2105143) to select a random portion of a table. \r\n\r\nTo select 10% from `my_table`\r\n\r\n```\r\nSELECT * FROM my_table SAMPLE(10);\r\n```\r\n\r\nTo combine with `JOIN`\r\n\r\n```\r\nSELECT A.x, B.y\r\nFROM A SAMPLE(10) JOIN B SAMPLE(5) ON A.z=B.z\r\n```\r\n\r\nSometimes `SEED`  may be needed after `SAMPLE` to assign the random seed for the sample function.\r\n\r\n```\r\nSELECT A.x, B.y\r\nFROM A SAMPLE(10) SEED(1) JOIN B SAMPLE(5) SEED(2) ON A.z=B.z\r\n```\r\n\r\nIn Pypika, how to do the similar task, i.e., how to insert some custom sql clauses after the table clause.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/353", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/353/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/353/events", "html_url": "https://github.com/kayak/pypika/issues/353", "id": 527714149, "node_id": "MDU6SXNzdWU1Mjc3MTQxNDk=", "number": 353, "title": "pypika release on PyPI missing join convenience methods", "user": {"login": "sighduck1", "id": 29053920, "node_id": "MDQ6VXNlcjI5MDUzOTIw", "avatar_url": "https://avatars2.githubusercontent.com/u/29053920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sighduck1", "html_url": "https://github.com/sighduck1", "followers_url": "https://api.github.com/users/sighduck1/followers", "following_url": "https://api.github.com/users/sighduck1/following{/other_user}", "gists_url": "https://api.github.com/users/sighduck1/gists{/gist_id}", "starred_url": "https://api.github.com/users/sighduck1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sighduck1/subscriptions", "organizations_url": "https://api.github.com/users/sighduck1/orgs", "repos_url": "https://api.github.com/users/sighduck1/repos", "events_url": "https://api.github.com/users/sighduck1/events{/privacy}", "received_events_url": "https://api.github.com/users/sighduck1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-24T15:27:29Z", "updated_at": "2019-11-26T11:32:43Z", "closed_at": "2019-11-26T11:32:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I installed `pypika` with `pip install pypika`, which installs version `PyPika==0.35.15`. I tried to use the `left_join` method mentioned in the README with the example query in the tests:\r\n\r\n```python\r\n>>> from pypika import JoinType, Query, Tables\r\n>>> table0, table1, hij = Tables('abc', 'efg', 'hij')\r\n>>> Query.from_(table0).join(table1, how=JoinType.left).on(table0.foo == table1.bar).select(\"*\")\r\nSELECT * FROM \"abc\" LEFT JOIN \"efg\" ON \"abc\".\"foo\"=\"efg\".\"bar\"\r\n\r\n>>> Query.from_(table0).left_join(table1).on(table0.foo == table1.bar).select(\"*\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: 'Field' object is not callable\r\n\r\n```\r\n\r\nThe latest version of `pypika` on PyPI (https://pypi.org/project/PyPika/0.35.15/) does not contain the join convenience methods. Would it be possible to update the version of `pypika` on PyPI?\r\n\r\nThank you for creating the library!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/351", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/351/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/351/events", "html_url": "https://github.com/kayak/pypika/issues/351", "id": 520611594, "node_id": "MDU6SXNzdWU1MjA2MTE1OTQ=", "number": 351, "title": "Using \"alias\" as a field name", "user": {"login": "RafRaf", "id": 1181522, "node_id": "MDQ6VXNlcjExODE1MjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1181522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RafRaf", "html_url": "https://github.com/RafRaf", "followers_url": "https://api.github.com/users/RafRaf/followers", "following_url": "https://api.github.com/users/RafRaf/following{/other_user}", "gists_url": "https://api.github.com/users/RafRaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/RafRaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RafRaf/subscriptions", "organizations_url": "https://api.github.com/users/RafRaf/orgs", "repos_url": "https://api.github.com/users/RafRaf/repos", "events_url": "https://api.github.com/users/RafRaf/events{/privacy}", "received_events_url": "https://api.github.com/users/RafRaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-10T14:54:00Z", "updated_at": "2019-11-11T10:52:46Z", "closed_at": "2019-11-11T10:52:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, community. We've found some strange behavior of `Query`'s select. It seems like `alias` is a reserved word. We can't use it as a field name.\r\n\r\nExample:\r\n```python\r\nmy_table = Table('my_table')\r\nq = Query.from_(my_table).select(my_table.id, my_table.name, my_table.alias)\r\n```\r\nResult:\r\n```\r\nSELECT \"id\",\"name\",NULL FROM \"my_table\"\r\n```\r\nBut let's replace `alias` to `alias2`:\r\n```\r\nmy_table = Table('my_table')\r\nq = Query.from_(my_table).select(my_table.id, my_table.name, my_table.alias2)\r\n```\r\nAnd now it works as expected:\r\n```\r\nSELECT \"id\",\"name\",\"alias2\" FROM \"my_table\"\r\n```\r\n\ud83d\ude14\r\nPS: pypika==0.35.15", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/350", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/350/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/350/events", "html_url": "https://github.com/kayak/pypika/issues/350", "id": 519383110, "node_id": "MDU6SXNzdWU1MTkzODMxMTA=", "number": 350, "title": "Cast function surrounds term with single quotes instead of double quotes", "user": {"login": "axmccx", "id": 3931007, "node_id": "MDQ6VXNlcjM5MzEwMDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3931007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axmccx", "html_url": "https://github.com/axmccx", "followers_url": "https://api.github.com/users/axmccx/followers", "following_url": "https://api.github.com/users/axmccx/following{/other_user}", "gists_url": "https://api.github.com/users/axmccx/gists{/gist_id}", "starred_url": "https://api.github.com/users/axmccx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axmccx/subscriptions", "organizations_url": "https://api.github.com/users/axmccx/orgs", "repos_url": "https://api.github.com/users/axmccx/repos", "events_url": "https://api.github.com/users/axmccx/events{/privacy}", "received_events_url": "https://api.github.com/users/axmccx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-07T16:42:10Z", "updated_at": "2019-11-07T17:13:45Z", "closed_at": "2019-11-07T17:05:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The postgres table I'm working with has periods in the column names. I cannot change this. I need to cast some columns as TEXT, but the cast function is wrapping the term/column name in single quotes instead of double quotes. \r\n\r\nPostgres appears to be treating this as a string, instead of a column name. In the example below, product.type should be wrapped with double quotes. Is there a way to do this?\r\n\r\n```\r\ncustomers = Table(\"customers\", schema=\"results_a\")\r\nq = Query.from_(customers).select(\r\n    \"id\", \r\n    \"customers.fname\", \r\n    \"customers.lname\", \r\n    fn.Cast(\"product.type\", \"text\")\r\n)\r\n\r\nSELECT \"id\",\"customers.fname\",\"customers.lname\",CAST('product.type' AS TEXT) FROM \"results_a\".\"customers\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/349", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/349/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/349/events", "html_url": "https://github.com/kayak/pypika/issues/349", "id": 516050811, "node_id": "MDU6SXNzdWU1MTYwNTA4MTE=", "number": 349, "title": "Full Text Search Postgres", "user": {"login": "tabiodun", "id": 1372010, "node_id": "MDQ6VXNlcjEzNzIwMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1372010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tabiodun", "html_url": "https://github.com/tabiodun", "followers_url": "https://api.github.com/users/tabiodun/followers", "following_url": "https://api.github.com/users/tabiodun/following{/other_user}", "gists_url": "https://api.github.com/users/tabiodun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tabiodun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tabiodun/subscriptions", "organizations_url": "https://api.github.com/users/tabiodun/orgs", "repos_url": "https://api.github.com/users/tabiodun/repos", "events_url": "https://api.github.com/users/tabiodun/events{/privacy}", "received_events_url": "https://api.github.com/users/tabiodun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-01T11:09:42Z", "updated_at": "2020-07-03T08:02:55Z", "closed_at": "2020-07-03T08:02:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to constuct a query like\r\n```\r\nSELECT to_tsvector('The quick brown fox jumped over the lazy dog')  \r\n    @@ to_tsquery('fox');\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/339", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/339/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/339/events", "html_url": "https://github.com/kayak/pypika/issues/339", "id": 509862004, "node_id": "MDU6SXNzdWU1MDk4NjIwMDQ=", "number": 339, "title": "Can I build a query like \"select '1' as age, `name`  from  test_table;\"?", "user": {"login": "songkang1993", "id": 38366752, "node_id": "MDQ6VXNlcjM4MzY2NzUy", "avatar_url": "https://avatars2.githubusercontent.com/u/38366752?v=4", "gravatar_id": "", "url": "https://api.github.com/users/songkang1993", "html_url": "https://github.com/songkang1993", "followers_url": "https://api.github.com/users/songkang1993/followers", "following_url": "https://api.github.com/users/songkang1993/following{/other_user}", "gists_url": "https://api.github.com/users/songkang1993/gists{/gist_id}", "starred_url": "https://api.github.com/users/songkang1993/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/songkang1993/subscriptions", "organizations_url": "https://api.github.com/users/songkang1993/orgs", "repos_url": "https://api.github.com/users/songkang1993/repos", "events_url": "https://api.github.com/users/songkang1993/events{/privacy}", "received_events_url": "https://api.github.com/users/songkang1993/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-21T10:05:21Z", "updated_at": "2019-10-21T11:40:24Z", "closed_at": "2019-10-21T11:40:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "like this:\r\nfrom sqlalchemy import literal\r\nselect([literal('1').label('test'), User.c.username])", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/337", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/337/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/337/events", "html_url": "https://github.com/kayak/pypika/issues/337", "id": 509108229, "node_id": "MDU6SXNzdWU1MDkxMDgyMjk=", "number": 337, "title": "Compensate missing functions or dialects with raw sql", "user": {"login": "airtonzanon", "id": 6540546, "node_id": "MDQ6VXNlcjY1NDA1NDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6540546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airtonzanon", "html_url": "https://github.com/airtonzanon", "followers_url": "https://api.github.com/users/airtonzanon/followers", "following_url": "https://api.github.com/users/airtonzanon/following{/other_user}", "gists_url": "https://api.github.com/users/airtonzanon/gists{/gist_id}", "starred_url": "https://api.github.com/users/airtonzanon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airtonzanon/subscriptions", "organizations_url": "https://api.github.com/users/airtonzanon/orgs", "repos_url": "https://api.github.com/users/airtonzanon/repos", "events_url": "https://api.github.com/users/airtonzanon/events{/privacy}", "received_events_url": "https://api.github.com/users/airtonzanon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-18T14:13:22Z", "updated_at": "2019-10-23T14:33:20Z", "closed_at": "2019-10-23T14:33:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We're starting to use PyPika with Redshift in my work, and we're facing some troubles as I already saw some people facing here.\r\n\r\nThe problem is that as PyPika tries to be a generic query builder (as it should be), but as we're using it with Redshift, we're facing some differences in function-wise. \r\n\r\nE.g.:\r\n\r\n```\r\nQuery.from_('table').select(CurDate())\r\n```\r\nwill return\r\n```\r\nSELECT CURRENT_DATE() FROM table\r\n```\r\n\r\nRedshift doesn't understand this CURRENT_DATE(). The solution that we're using now extends `Function` and create the `RawFunction`, a function that we can do something like this:\r\n\r\n```\r\nQuery.from_('table').select(RawFunction('current_date'))\r\n```\r\nand will return\r\n```\r\nSELECT current_date FROM table\r\n```\r\n\r\nI understand that with it we can open margin for errors, but also we can give to the user more flexibility to the reserved functions for each type of database.\r\n\r\nI'm opening a PR with my solution. I hope that we can discuss it to get into an agreement.\r\n\r\nAlso, I'm trying to implement a way to use the same function for different dialects, respecting its syntax. But I think it's a faster way to solve some problems.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/335", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/335/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/335/events", "html_url": "https://github.com/kayak/pypika/issues/335", "id": 509024183, "node_id": "MDU6SXNzdWU1MDkwMjQxODM=", "number": 335, "title": "SELECT with subquery doesn't wrap with parantheses", "user": {"login": "Kulu-M", "id": 9268124, "node_id": "MDQ6VXNlcjkyNjgxMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/9268124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kulu-M", "html_url": "https://github.com/Kulu-M", "followers_url": "https://api.github.com/users/Kulu-M/followers", "following_url": "https://api.github.com/users/Kulu-M/following{/other_user}", "gists_url": "https://api.github.com/users/Kulu-M/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kulu-M/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kulu-M/subscriptions", "organizations_url": "https://api.github.com/users/Kulu-M/orgs", "repos_url": "https://api.github.com/users/Kulu-M/repos", "events_url": "https://api.github.com/users/Kulu-M/events{/privacy}", "received_events_url": "https://api.github.com/users/Kulu-M/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-18T11:33:57Z", "updated_at": "2019-10-22T08:19:59Z", "closed_at": "2019-10-22T08:19:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This errror sound really similar to [this one](https://github.com/kayak/pypika/issues/220).\r\n\r\nThis pypika:\r\n```python\r\nuniques = Query.from_(table).select(*)\r\nquery = Query.from_(table).select(table.ID, table.DB_SIZE).where(table.ID).isin(uniques)\r\n```\r\n\r\nGenerates this SQL\r\n\r\n```SQL\r\nSELECT \"ID\",\"DB_SIZE\" FROM \"xxx\" \r\nWHERE \"ID\" IN\r\nSELECT * FROM yyy\r\n```\r\n\r\nAccording to the documentation, this should work but\r\n--> The parantheses around the inner SELECT are missing and therefore the SQL is invalid.\r\n\r\nIt should be \r\n\r\n```SQL\r\nSELECT \"ID\",\"DB_SIZE\" FROM \"xxx\" \r\nWHERE \"ID\" IN\r\n(SELECT * FROM yyy)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/333", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/333/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/333/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/333/events", "html_url": "https://github.com/kayak/pypika/issues/333", "id": 508404449, "node_id": "MDU6SXNzdWU1MDg0MDQ0NDk=", "number": 333, "title": "Query error in Documentaion on PyPi", "user": {"login": "shadab-entrepreneur", "id": 10863620, "node_id": "MDQ6VXNlcjEwODYzNjIw", "avatar_url": "https://avatars3.githubusercontent.com/u/10863620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shadab-entrepreneur", "html_url": "https://github.com/shadab-entrepreneur", "followers_url": "https://api.github.com/users/shadab-entrepreneur/followers", "following_url": "https://api.github.com/users/shadab-entrepreneur/following{/other_user}", "gists_url": "https://api.github.com/users/shadab-entrepreneur/gists{/gist_id}", "starred_url": "https://api.github.com/users/shadab-entrepreneur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shadab-entrepreneur/subscriptions", "organizations_url": "https://api.github.com/users/shadab-entrepreneur/orgs", "repos_url": "https://api.github.com/users/shadab-entrepreneur/repos", "events_url": "https://api.github.com/users/shadab-entrepreneur/events{/privacy}", "received_events_url": "https://api.github.com/users/shadab-entrepreneur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-17T11:13:08Z", "updated_at": "2019-10-22T06:42:10Z", "closed_at": "2019-10-21T11:47:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "While going through the documentation and installation page of PyPika on PyPi, for a given sample code, the query which gets generated is shown wrong.\r\nFor reference find the below pic:\r\n\r\n<img width=\"597\" alt=\"doc_error\" src=\"https://user-images.githubusercontent.com/10863620/67003965-d6579680-f0fc-11e9-8dba-16eeac9f0c39.png\">\r\n\r\nLink: [PyPika PyPi](https://pypi.org/project/PyPika/) \r\n\r\nThe actual query should be:\r\nSELECT \"id\",SUM(\"revenue\") FROM \"customers\" WHERE \"age\">=18 GROUP BY \"id\"\r\n\r\nCan someone get it fixed or let me know how to get fixed?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/332", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/332/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/332/events", "html_url": "https://github.com/kayak/pypika/issues/332", "id": 507442428, "node_id": "MDU6SXNzdWU1MDc0NDI0Mjg=", "number": 332, "title": "on_conflict() in PostgresqlQuery only accepts a single field", "user": {"login": "taybin", "id": 58964, "node_id": "MDQ6VXNlcjU4OTY0", "avatar_url": "https://avatars2.githubusercontent.com/u/58964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taybin", "html_url": "https://github.com/taybin", "followers_url": "https://api.github.com/users/taybin/followers", "following_url": "https://api.github.com/users/taybin/following{/other_user}", "gists_url": "https://api.github.com/users/taybin/gists{/gist_id}", "starred_url": "https://api.github.com/users/taybin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taybin/subscriptions", "organizations_url": "https://api.github.com/users/taybin/orgs", "repos_url": "https://api.github.com/users/taybin/repos", "events_url": "https://api.github.com/users/taybin/events{/privacy}", "received_events_url": "https://api.github.com/users/taybin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-15T19:38:55Z", "updated_at": "2020-05-29T17:01:46Z", "closed_at": "2020-05-29T17:01:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "In postgresql, `ON CONFLICT` supports conflicting on multiple fields, which is useful if you have multiple column primary keys.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/328", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/328/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/328/events", "html_url": "https://github.com/kayak/pypika/issues/328", "id": 501998793, "node_id": "MDU6SXNzdWU1MDE5OTg3OTM=", "number": 328, "title": "Cannot create empty OVER()", "user": {"login": "peter-wimsey", "id": 33061469, "node_id": "MDQ6VXNlcjMzMDYxNDY5", "avatar_url": "https://avatars2.githubusercontent.com/u/33061469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-wimsey", "html_url": "https://github.com/peter-wimsey", "followers_url": "https://api.github.com/users/peter-wimsey/followers", "following_url": "https://api.github.com/users/peter-wimsey/following{/other_user}", "gists_url": "https://api.github.com/users/peter-wimsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-wimsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-wimsey/subscriptions", "organizations_url": "https://api.github.com/users/peter-wimsey/orgs", "repos_url": "https://api.github.com/users/peter-wimsey/repos", "events_url": "https://api.github.com/users/peter-wimsey/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-wimsey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-03T11:06:35Z", "updated_at": "2019-11-01T16:04:43Z", "closed_at": "2019-10-21T11:47:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looking to generate something like\r\n\r\n```sql\r\nCAST(\"count\" AS FLOAT) / SUM(\"count\") OVER()\r\n```\r\nCould not find an example in the tests at https://github.com/kayak/pypika/blob/master/pypika/tests/test_analytic_queries.py and doing\r\n\r\n```python\r\nan.Sum(Field('count')).over()\r\n```\r\ndoes not produce an `OVER()` at all. Is there a way to do this?\r\n\r\nFull example below\r\n\r\n```python\r\nfrom pypika.terms import Field, Star\r\nfrom pypika.queries import Query\r\nimport pypika.analytics as an\r\nimport pypika.functions as fn\r\n\r\nfield = Field('field')\r\nstar = Star()\r\n\r\nsub_query = Query.from_('table').select(field, fn.Count(star).as_('count')).groupby(field)\r\nquery = Query.from_(sub_query)\r\nquery = query.select(star, fn.Cast(Field('count'), 'float') / an.Sum(Field('count')).over())\r\nquery.get_sql()\r\n```\r\n\r\n```sql\r\n--- SQL produced\r\nSELECT *,CAST(\"count\" AS FLOAT)/SUM(\"count\") -- should be SUM(\"count\") OVER()\r\nFROM (\r\n    SELECT \"field\",COUNT(*) \"count\"\r\n    FROM \"table\"\r\n    GROUP BY \"field\"\r\n) \"sq0\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/325", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/325/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/325/events", "html_url": "https://github.com/kayak/pypika/issues/325", "id": 498338060, "node_id": "MDU6SXNzdWU0OTgzMzgwNjA=", "number": 325, "title": "Convert SQL string to pypika.Query", "user": {"login": "ranamihir", "id": 8270471, "node_id": "MDQ6VXNlcjgyNzA0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8270471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranamihir", "html_url": "https://github.com/ranamihir", "followers_url": "https://api.github.com/users/ranamihir/followers", "following_url": "https://api.github.com/users/ranamihir/following{/other_user}", "gists_url": "https://api.github.com/users/ranamihir/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranamihir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranamihir/subscriptions", "organizations_url": "https://api.github.com/users/ranamihir/orgs", "repos_url": "https://api.github.com/users/ranamihir/repos", "events_url": "https://api.github.com/users/ranamihir/events{/privacy}", "received_events_url": "https://api.github.com/users/ranamihir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-25T14:50:42Z", "updated_at": "2020-05-07T19:17:28Z", "closed_at": "2019-12-02T10:50:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm wondering if there's any function for converting a given SQL string to a `pypika.Query` object? If not, I think it'd be a very helpful feature. People who are more comfortable (or prefer) writing SQL, but also need programmatic flexibility in certain cases would really benefit a lot.\r\n\r\nE.g. something like:\r\n\r\n```python\r\nsql = \"select * from student # ... potentially some very big query\"\r\nquery = pypika.convert_string_to_Query(sql)\r\nnew_query = query.where(student.name == \"John\")\r\nnew_query.get_sql()\r\n```\r\nreturns:\r\n```sql\r\nselect * from students # ... potentially some very big query\r\nwhere student.name == \"John\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/323", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/323/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/323/events", "html_url": "https://github.com/kayak/pypika/issues/323", "id": 497380702, "node_id": "MDU6SXNzdWU0OTczODA3MDI=", "number": 323, "title": "Type-hinting ", "user": {"login": "Rested", "id": 2003608, "node_id": "MDQ6VXNlcjIwMDM2MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2003608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rested", "html_url": "https://github.com/Rested", "followers_url": "https://api.github.com/users/Rested/followers", "following_url": "https://api.github.com/users/Rested/following{/other_user}", "gists_url": "https://api.github.com/users/Rested/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rested/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rested/subscriptions", "organizations_url": "https://api.github.com/users/Rested/orgs", "repos_url": "https://api.github.com/users/Rested/repos", "events_url": "https://api.github.com/users/Rested/events{/privacy}", "received_events_url": "https://api.github.com/users/Rested/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-23T23:45:44Z", "updated_at": "2020-07-03T08:03:38Z", "closed_at": "2020-07-03T08:03:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Type hinting would be really awesome on this project. If you think it's a good idea @twheys  I would be happy to work on adding it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/320", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/320/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/320/events", "html_url": "https://github.com/kayak/pypika/issues/320", "id": 492814987, "node_id": "MDU6SXNzdWU0OTI4MTQ5ODc=", "number": 320, "title": "ClickHouse AttributeError: 'ToFixedString' object has no attribute 'args'", "user": {"login": "d-ganchar", "id": 14810698, "node_id": "MDQ6VXNlcjE0ODEwNjk4", "avatar_url": "https://avatars1.githubusercontent.com/u/14810698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-ganchar", "html_url": "https://github.com/d-ganchar", "followers_url": "https://api.github.com/users/d-ganchar/followers", "following_url": "https://api.github.com/users/d-ganchar/following{/other_user}", "gists_url": "https://api.github.com/users/d-ganchar/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-ganchar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-ganchar/subscriptions", "organizations_url": "https://api.github.com/users/d-ganchar/orgs", "repos_url": "https://api.github.com/users/d-ganchar/repos", "events_url": "https://api.github.com/users/d-ganchar/events{/privacy}", "received_events_url": "https://api.github.com/users/d-ganchar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-12T13:42:59Z", "updated_at": "2019-09-23T14:36:27Z", "closed_at": "2019-09-23T14:36:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "@twheys I said that it is necessary `self.args = ()` )))\r\n\r\n```\r\ntable = Table('example')\r\nquery = ClickHouseQuery.from_(table).select(\r\n    table.name,\r\n ).where(\r\n    table.name == ToFixedString('name', 50),\r\n)\r\n```\r\n\r\nError:\r\n```\r\n....\r\npypika/terms.py\", line 1082, in fields\r\n    for param in self.args\r\nAttributeError: 'ToFixedString' object has no attribute 'args'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/316", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/316/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/316/events", "html_url": "https://github.com/kayak/pypika/issues/316", "id": 489100924, "node_id": "MDU6SXNzdWU0ODkxMDA5MjQ=", "number": 316, "title": "Including Typing in requirements messes up python 3.7", "user": {"login": "joelhess", "id": 9028374, "node_id": "MDQ6VXNlcjkwMjgzNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9028374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joelhess", "html_url": "https://github.com/joelhess", "followers_url": "https://api.github.com/users/joelhess/followers", "following_url": "https://api.github.com/users/joelhess/following{/other_user}", "gists_url": "https://api.github.com/users/joelhess/gists{/gist_id}", "starred_url": "https://api.github.com/users/joelhess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joelhess/subscriptions", "organizations_url": "https://api.github.com/users/joelhess/orgs", "repos_url": "https://api.github.com/users/joelhess/repos", "events_url": "https://api.github.com/users/joelhess/events{/privacy}", "received_events_url": "https://api.github.com/users/joelhess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mikeengland", "id": 8333737, "node_id": "MDQ6VXNlcjgzMzM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8333737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeengland", "html_url": "https://github.com/mikeengland", "followers_url": "https://api.github.com/users/mikeengland/followers", "following_url": "https://api.github.com/users/mikeengland/following{/other_user}", "gists_url": "https://api.github.com/users/mikeengland/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeengland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeengland/subscriptions", "organizations_url": "https://api.github.com/users/mikeengland/orgs", "repos_url": "https://api.github.com/users/mikeengland/repos", "events_url": "https://api.github.com/users/mikeengland/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeengland/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mikeengland", "id": 8333737, "node_id": "MDQ6VXNlcjgzMzM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8333737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeengland", "html_url": "https://github.com/mikeengland", "followers_url": "https://api.github.com/users/mikeengland/followers", "following_url": "https://api.github.com/users/mikeengland/following{/other_user}", "gists_url": "https://api.github.com/users/mikeengland/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeengland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeengland/subscriptions", "organizations_url": "https://api.github.com/users/mikeengland/orgs", "repos_url": "https://api.github.com/users/mikeengland/repos", "events_url": "https://api.github.com/users/mikeengland/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeengland/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-09-04T11:24:35Z", "updated_at": "2019-09-04T11:46:48Z", "closed_at": "2019-09-04T11:44:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "In v0.35.x the addition of the typing library to the requirements conflicts with the builtin typing module on Python  3.7. \r\n\r\nI get the following error:\r\n```\r\n[ERROR] AttributeError: type object 'Callable' has no attribute '_abc_registry'\r\nTraceback (most recent call last):\r\n  File \"/var/lang/lib/python3.7/imp.py\", line 234, in load_module\r\n    return load_source(name, filename, file)\r\n  File \"/var/lang/lib/python3.7/imp.py\", line 171, in load_source\r\n    module = _load(spec)\r\n  File \"<frozen importlib._bootstrap>\", line 696, in _load\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/var/task/extraction/load_extractor_config.py\", line 4, in <module>\r\n    from typing import List\r\n  File \"/var/task/typing.py\", line 1373, in <module>\r\n    class Callable(extra=collections_abc.Callable, metaclass=CallableMeta):\r\n  File \"/var/task/typing.py\", line 1024, in __new__\r\n    self._abc_registry = extra._abc_registry\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/304", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/304/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/304/events", "html_url": "https://github.com/kayak/pypika/issues/304", "id": 483542235, "node_id": "MDU6SXNzdWU0ODM1NDIyMzU=", "number": 304, "title": "Semantically different queries generated in some cases depending on usage of comparison functions vs. operators in complex criteria", "user": {"login": "paul-ko", "id": 8765283, "node_id": "MDQ6VXNlcjg3NjUyODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8765283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paul-ko", "html_url": "https://github.com/paul-ko", "followers_url": "https://api.github.com/users/paul-ko/followers", "following_url": "https://api.github.com/users/paul-ko/following{/other_user}", "gists_url": "https://api.github.com/users/paul-ko/gists{/gist_id}", "starred_url": "https://api.github.com/users/paul-ko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paul-ko/subscriptions", "organizations_url": "https://api.github.com/users/paul-ko/orgs", "repos_url": "https://api.github.com/users/paul-ko/repos", "events_url": "https://api.github.com/users/paul-ko/events{/privacy}", "received_events_url": "https://api.github.com/users/paul-ko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-21T17:06:00Z", "updated_at": "2019-08-22T13:41:32Z", "closed_at": "2019-08-22T07:02:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I ran into an issue in which the where clause in one of my queries didn't include parentheses to group an ORed criterion that then ANDed with another criterion.  In other words, I wanted `(A | B) & C`, but I got `A | B & C`\r\n\r\nThis resulted in a query that returned unexpected results, because the lack of parentheses meant it was interpreted as meaning `A | (B & C)` instead of the desired `(A | B) & C`, due to AND having higher precedence than OR.\r\n\r\nThe lack of parentheses seemed inconsistent with my experience with pypika so far, and when I investigated further I found that the generated SQL actually varies depending on whether the second criterion in the ORed complex criterion uses an operator (`<`, `==`) or a function (`lt()`, `eq()`).\r\n\r\nHere is some ugly demo code:\r\n\r\n```\r\nfrom datetime import datetime\r\n\r\nfrom pypika import Query, Table\r\nfrom pypika.functions import DateDiff\r\nfrom pypika.enums import DatePart\r\n\r\n\r\ndef generate_queries():\r\n    def print_queries():\r\n        print('with == operator:', q_with_op)\r\n        print('with eq function:', q_with_func)\r\n\r\n    tbl = Table('query_tbl', schema='scm')\r\n    base_q = Query.select(tbl.a).from_(tbl)\r\n    date_diff = DateDiff(DatePart.minute, tbl.a, datetime.now())\r\n\r\n    q_with_op = base_q.where(tbl.a.isnull() | date_diff == 0)\r\n    q_with_func = base_q.where(tbl.a.isnull() | date_diff.eq(0))\r\n    print_queries()\r\n\r\n    q_with_op = q_with_op.where(tbl.d.isnull())\r\n    q_with_func = q_with_func.where(tbl.d.isnull())\r\n    print_queries()\r\n\r\n\r\ngenerate_queries()\r\n```\r\n\r\nHere is the output:\r\n\r\n```\r\nwith == operator: SELECT \"a\" FROM \"scm\".\"query_tbl\" WHERE \"a\" IS NULL OR DATEDIFF(MINUTE,\"a\",'2019-08-21T09:54:27.399709')=0\r\nwith eq function: SELECT \"a\" FROM \"scm\".\"query_tbl\" WHERE \"a\" IS NULL OR DATEDIFF(MINUTE,\"a\",'2019-08-21T09:54:27.399709')=0\r\nwith == operator: SELECT \"a\" FROM \"scm\".\"query_tbl\" WHERE \"a\" IS NULL OR DATEDIFF(MINUTE,\"a\",'2019-08-21T09:54:27.399709')=0 AND \"d\" IS NULL\r\nwith eq function: SELECT \"a\" FROM \"scm\".\"query_tbl\" WHERE (\"a\" IS NULL OR DATEDIFF(MINUTE,\"a\",'2019-08-21T09:54:27.399709')=0) AND \"d\" IS NULL\r\n```\r\n\r\nYou can see that when I only add the two ORed criteria, the generated SQL is identical regardless of whether I use `== 0` or `.eq(0)`.  However, after I call `where()` again to add a new criterion, the initial complex criterion is enclosed in parentheses if it ended with a `.eq()` call, but not if it ended with a usage of `==`.\r\n\r\nI've reproed this with `.lt()` vs `<` as well.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/302", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/302/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/302/events", "html_url": "https://github.com/kayak/pypika/issues/302", "id": 483402855, "node_id": "MDU6SXNzdWU0ODM0MDI4NTU=", "number": 302, "title": "AND / OR operators?", "user": {"login": "d-ganchar", "id": 14810698, "node_id": "MDQ6VXNlcjE0ODEwNjk4", "avatar_url": "https://avatars1.githubusercontent.com/u/14810698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-ganchar", "html_url": "https://github.com/d-ganchar", "followers_url": "https://api.github.com/users/d-ganchar/followers", "following_url": "https://api.github.com/users/d-ganchar/following{/other_user}", "gists_url": "https://api.github.com/users/d-ganchar/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-ganchar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-ganchar/subscriptions", "organizations_url": "https://api.github.com/users/d-ganchar/orgs", "repos_url": "https://api.github.com/users/d-ganchar/repos", "events_url": "https://api.github.com/users/d-ganchar/events{/privacy}", "received_events_url": "https://api.github.com/users/d-ganchar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-21T12:52:48Z", "updated_at": "2019-08-21T14:29:36Z", "closed_at": "2019-08-21T14:29:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I looked at the [filter documentation](https://pypika.readthedocs.io/en/latest/2_tutorial.html#filtering). \r\n\r\n- I have _list_ of teams(`teams = ['team1', 'team2']`)\r\n- I have _list_ of statuses(`statuses = ['open', 'in progress']`)\r\n\r\nHow can I make the following query?\r\n\r\n```\r\nWHERE created = '2019-01-01' \r\n     AND (  team = 'team1' OR team = 'team2' )\r\n     AND ( status = 'open' OR status = 'in progress' )\r\n```\r\n\r\nDo you have any expressions(_or_()_ / _and_()_ / _where_or()_ etc.) (for example like in [sqlalchemy](https://docs.sqlalchemy.org/en/13/core/sqlelement.html#sqlalchemy.sql.expression.or_) )?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/299", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/299/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/299/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/299/events", "html_url": "https://github.com/kayak/pypika/issues/299", "id": 482585996, "node_id": "MDU6SXNzdWU0ODI1ODU5OTY=", "number": 299, "title": "Unclear support for cross-DB joins/queries", "user": {"login": "paul-ko", "id": 8765283, "node_id": "MDQ6VXNlcjg3NjUyODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8765283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paul-ko", "html_url": "https://github.com/paul-ko", "followers_url": "https://api.github.com/users/paul-ko/followers", "following_url": "https://api.github.com/users/paul-ko/following{/other_user}", "gists_url": "https://api.github.com/users/paul-ko/gists{/gist_id}", "starred_url": "https://api.github.com/users/paul-ko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paul-ko/subscriptions", "organizations_url": "https://api.github.com/users/paul-ko/orgs", "repos_url": "https://api.github.com/users/paul-ko/repos", "events_url": "https://api.github.com/users/paul-ko/events{/privacy}", "received_events_url": "https://api.github.com/users/paul-ko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-20T00:20:19Z", "updated_at": "2019-08-21T16:02:49Z", "closed_at": "2019-08-21T16:02:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have use cases where I need to write queries that join across databases, such as\r\n\r\n```\r\nselect count(*)\r\nfrom DB1.Schema1.Table1 t1\r\nleft join DB2.Schema2.Table2 t2 on t2.col = t1.col\r\n```\r\n\r\nI couldn't find anything in the documentation, but digging in the code I noticed that `Schema` objects have a `parent` property, and if I create a schema whose parent is a \"schema\" with the database name, I can generate the SQL I'd like. For example:\r\n\r\n```\r\nt1 = Table('Table1', schema=Schema('Schema1', parent=Schema('DB1')))\r\nt2 = Table('Table2', schema=Schema('Schema2', parent=Schema('DB2')))\r\nQuery.from_(t1).join(t2, JoinType.left).on_field('col').select(functions.Count(functions.Star()))\r\n```\r\nI'm curious about a couple of things:\r\n\r\n1.  Is this the correct way to do this sort of query? It feels weird to create a `Schema` to represent a database, but I haven't found a better approach.\r\n2.  If the answer to that is yes, would you be interested in a pull request adding documentation on it to your docs somewhere?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/297", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/297/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/297/events", "html_url": "https://github.com/kayak/pypika/issues/297", "id": 481772295, "node_id": "MDU6SXNzdWU0ODE3NzIyOTU=", "number": 297, "title": "Using version 0.33.1 or newer with Python 2.7", "user": {"login": "awolfes", "id": 30168489, "node_id": "MDQ6VXNlcjMwMTY4NDg5", "avatar_url": "https://avatars2.githubusercontent.com/u/30168489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awolfes", "html_url": "https://github.com/awolfes", "followers_url": "https://api.github.com/users/awolfes/followers", "following_url": "https://api.github.com/users/awolfes/following{/other_user}", "gists_url": "https://api.github.com/users/awolfes/gists{/gist_id}", "starred_url": "https://api.github.com/users/awolfes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awolfes/subscriptions", "organizations_url": "https://api.github.com/users/awolfes/orgs", "repos_url": "https://api.github.com/users/awolfes/repos", "events_url": "https://api.github.com/users/awolfes/events{/privacy}", "received_events_url": "https://api.github.com/users/awolfes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-16T20:25:31Z", "updated_at": "2019-08-18T20:38:07Z", "closed_at": "2019-08-18T20:38:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version 0.33.0 imports fine.\r\n\r\nTrying to run version 0.33.1 or newer complains about line 341 in queries.py, with regards to how Python 2.7 does not support starred expressions in dictionaries.\r\n\r\n```python\r\nkwargs = {\r\n            'dialect': self.base_query.dialect,\r\n            # This initializes the quote char based on the base query, which could be a dialect specific query class\r\n            # This might be overridden if quote_char is set explicitly in kwargs\r\n            'quote_char': self.base_query.quote_char,\r\n            **kwargs,\r\n        }\r\n```\r\n\r\nAdditionally, any version after 0.28.1 complains about line 108 in queries.py when running the Table function:\r\n\r\n```python\r\nTypeError: super() argument 1 must be type, not classobj\r\n```\r\n\r\nThe section in question:\r\n\r\n```python\r\n    def __init__(self, name, schema=None, alias=None):\r\n        super(Table, self).__init__(alias)\r\n        self._table_name = name\r\n        self._schema = self._init_schema(schema)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/293", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/293/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/293/events", "html_url": "https://github.com/kayak/pypika/issues/293", "id": 480193026, "node_id": "MDU6SXNzdWU0ODAxOTMwMjY=", "number": 293, "title": "Clickhouse support?", "user": {"login": "d-ganchar", "id": 14810698, "node_id": "MDQ6VXNlcjE0ODEwNjk4", "avatar_url": "https://avatars1.githubusercontent.com/u/14810698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-ganchar", "html_url": "https://github.com/d-ganchar", "followers_url": "https://api.github.com/users/d-ganchar/followers", "following_url": "https://api.github.com/users/d-ganchar/following{/other_user}", "gists_url": "https://api.github.com/users/d-ganchar/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-ganchar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-ganchar/subscriptions", "organizations_url": "https://api.github.com/users/d-ganchar/orgs", "repos_url": "https://api.github.com/users/d-ganchar/repos", "events_url": "https://api.github.com/users/d-ganchar/events{/privacy}", "received_events_url": "https://api.github.com/users/d-ganchar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-13T14:34:53Z", "updated_at": "2019-08-14T07:49:30Z", "closed_at": "2019-08-14T07:49:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. Thanks for repository.\r\n\r\nDo you have full _Clickhouse_ support? I didn't found _Clickhouse_ in _database platforms_, but I found [ClickHouseQuery](https://github.com/kayak/pypika/blob/master/pypika/__init__.py#L35)\r\n\r\nI checked basic(**SELECT**, **GROUP**, **DISTINCT**) queries and all works fine. But what about specific _clickhouse syntax_? Example:\r\n\r\n```\r\n     WHERE match(toString(name), 'twheys') \r\n       AND hasAny(components, [...])\r\n       AND toString(category) IN (...)\r\n```\r\n\r\nAlso I saw [issue / 67](https://github.com/kayak/pypika/issues/67) but it was a few years ago. What is the current state of _Clickhouse adaptation_?\r\n\r\nThank you.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/291", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/291/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/291/events", "html_url": "https://github.com/kayak/pypika/issues/291", "id": 478216597, "node_id": "MDU6SXNzdWU0NzgyMTY1OTc=", "number": 291, "title": "Dialect for Blazingdb", "user": {"login": "argenisleon", "id": 37144, "node_id": "MDQ6VXNlcjM3MTQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/37144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/argenisleon", "html_url": "https://github.com/argenisleon", "followers_url": "https://api.github.com/users/argenisleon/followers", "following_url": "https://api.github.com/users/argenisleon/following{/other_user}", "gists_url": "https://api.github.com/users/argenisleon/gists{/gist_id}", "starred_url": "https://api.github.com/users/argenisleon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/argenisleon/subscriptions", "organizations_url": "https://api.github.com/users/argenisleon/orgs", "repos_url": "https://api.github.com/users/argenisleon/repos", "events_url": "https://api.github.com/users/argenisleon/events{/privacy}", "received_events_url": "https://api.github.com/users/argenisleon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-08T02:16:24Z", "updated_at": "2019-08-13T07:12:05Z", "closed_at": "2019-08-08T07:20:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI would like to contribute to writing a dialect for blazingdb.\r\n\r\nI need to output\r\n```\"SELECT MIN(`RATING`) FROM `main.music`\"``` or ```\"SELECT MIN(RATING) FROM `main.music`\"``` but all the dialect return ```\"SELECT MIN('RATING') FROM `main.music`\"```.\r\n\r\nIt seems easy to extend the dialect but I can not figure out where surrounding chars are attached to the column aggregation. \r\n\r\nAny help?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/284", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/284/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/284/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/284/events", "html_url": "https://github.com/kayak/pypika/issues/284", "id": 476346877, "node_id": "MDU6SXNzdWU0NzYzNDY4Nzc=", "number": 284, "title": "Support for bitwise operators", "user": {"login": "AbdulhamidZoubi", "id": 22858957, "node_id": "MDQ6VXNlcjIyODU4OTU3", "avatar_url": "https://avatars0.githubusercontent.com/u/22858957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdulhamidZoubi", "html_url": "https://github.com/AbdulhamidZoubi", "followers_url": "https://api.github.com/users/AbdulhamidZoubi/followers", "following_url": "https://api.github.com/users/AbdulhamidZoubi/following{/other_user}", "gists_url": "https://api.github.com/users/AbdulhamidZoubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdulhamidZoubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdulhamidZoubi/subscriptions", "organizations_url": "https://api.github.com/users/AbdulhamidZoubi/orgs", "repos_url": "https://api.github.com/users/AbdulhamidZoubi/repos", "events_url": "https://api.github.com/users/AbdulhamidZoubi/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdulhamidZoubi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-02T20:37:00Z", "updated_at": "2019-08-13T07:12:40Z", "closed_at": "2019-08-13T07:12:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to add support for bitwise operators in `WHERE` clause.?\r\nfor example if I had the `messages` table with the field `status`  of type INT and the bits of the value of this field represent a specific status i.e _delivered_, _seen_, ..etc. Instead of having a separate BOOL field for each status.\r\n\r\nsupposing that the first bit is for the _delivered_ status and the second one is for the _seen_ status\r\n\r\nIf i want to retrieve only delivered messages that are not seen yet, the query would be something like:\r\n**```SELECT `status` FROM `messages` WHERE (`status` & 1 = 1) ```**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/282", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/282/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/282/events", "html_url": "https://github.com/kayak/pypika/issues/282", "id": 475498714, "node_id": "MDU6SXNzdWU0NzU0OTg3MTQ=", "number": 282, "title": "MySQL TimeDiff function", "user": {"login": "kashifali-m398", "id": 45649385, "node_id": "MDQ6VXNlcjQ1NjQ5Mzg1", "avatar_url": "https://avatars1.githubusercontent.com/u/45649385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kashifali-m398", "html_url": "https://github.com/kashifali-m398", "followers_url": "https://api.github.com/users/kashifali-m398/followers", "following_url": "https://api.github.com/users/kashifali-m398/following{/other_user}", "gists_url": "https://api.github.com/users/kashifali-m398/gists{/gist_id}", "starred_url": "https://api.github.com/users/kashifali-m398/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kashifali-m398/subscriptions", "organizations_url": "https://api.github.com/users/kashifali-m398/orgs", "repos_url": "https://api.github.com/users/kashifali-m398/repos", "events_url": "https://api.github.com/users/kashifali-m398/events{/privacy}", "received_events_url": "https://api.github.com/users/kashifali-m398/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-01T06:34:28Z", "updated_at": "2019-08-01T07:40:45Z", "closed_at": "2019-08-01T07:40:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a function that can translate to code to MySQL TIMEDIFF or TIMESTAMPDIFF function, when we have only time type columns in database not datetime and timestamp.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/280", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/280/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/280/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/280/events", "html_url": "https://github.com/kayak/pypika/issues/280", "id": 474536485, "node_id": "MDU6SXNzdWU0NzQ1MzY0ODU=", "number": 280, "title": "quote_char None doesn't work with union ", "user": {"login": "gcostantino91", "id": 53476397, "node_id": "MDQ6VXNlcjUzNDc2Mzk3", "avatar_url": "https://avatars0.githubusercontent.com/u/53476397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gcostantino91", "html_url": "https://github.com/gcostantino91", "followers_url": "https://api.github.com/users/gcostantino91/followers", "following_url": "https://api.github.com/users/gcostantino91/following{/other_user}", "gists_url": "https://api.github.com/users/gcostantino91/gists{/gist_id}", "starred_url": "https://api.github.com/users/gcostantino91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gcostantino91/subscriptions", "organizations_url": "https://api.github.com/users/gcostantino91/orgs", "repos_url": "https://api.github.com/users/gcostantino91/repos", "events_url": "https://api.github.com/users/gcostantino91/events{/privacy}", "received_events_url": "https://api.github.com/users/gcostantino91/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1501958381, "node_id": "MDU6TGFiZWwxNTAxOTU4Mzgx", "url": "https://api.github.com/repos/kayak/pypika/labels/0.33.1", "name": "0.33.1", "color": "081a6b", "default": false, "description": "Release"}], "state": "closed", "locked": false, "assignee": {"login": "twheys", "id": 2015509, "node_id": "MDQ6VXNlcjIwMTU1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2015509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twheys", "html_url": "https://github.com/twheys", "followers_url": "https://api.github.com/users/twheys/followers", "following_url": "https://api.github.com/users/twheys/following{/other_user}", "gists_url": "https://api.github.com/users/twheys/gists{/gist_id}", "starred_url": "https://api.github.com/users/twheys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twheys/subscriptions", "organizations_url": "https://api.github.com/users/twheys/orgs", "repos_url": "https://api.github.com/users/twheys/repos", "events_url": "https://api.github.com/users/twheys/events{/privacy}", "received_events_url": "https://api.github.com/users/twheys/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "twheys", "id": 2015509, "node_id": "MDQ6VXNlcjIwMTU1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2015509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twheys", "html_url": "https://github.com/twheys", "followers_url": "https://api.github.com/users/twheys/followers", "following_url": "https://api.github.com/users/twheys/following{/other_user}", "gists_url": "https://api.github.com/users/twheys/gists{/gist_id}", "starred_url": "https://api.github.com/users/twheys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twheys/subscriptions", "organizations_url": "https://api.github.com/users/twheys/orgs", "repos_url": "https://api.github.com/users/twheys/repos", "events_url": "https://api.github.com/users/twheys/events{/privacy}", "received_events_url": "https://api.github.com/users/twheys/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-07-30T11:44:37Z", "updated_at": "2019-08-15T08:40:49Z", "closed_at": "2019-08-15T08:40:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all, \r\nI noticed a bug into get_sql function. The **quote_char=None** option doesn't work if the query involved is a union query ( obtained through \"+\" operator ). I had to do it by myself with the replace instruction. \r\n\r\nThanks a lot :)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/279", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/279/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/279/events", "html_url": "https://github.com/kayak/pypika/issues/279", "id": 473655399, "node_id": "MDU6SXNzdWU0NzM2NTUzOTk=", "number": 279, "title": "Double quotes when joining with USING", "user": {"login": "liadmat", "id": 9061839, "node_id": "MDQ6VXNlcjkwNjE4Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/9061839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liadmat", "html_url": "https://github.com/liadmat", "followers_url": "https://api.github.com/users/liadmat/followers", "following_url": "https://api.github.com/users/liadmat/following{/other_user}", "gists_url": "https://api.github.com/users/liadmat/gists{/gist_id}", "starred_url": "https://api.github.com/users/liadmat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liadmat/subscriptions", "organizations_url": "https://api.github.com/users/liadmat/orgs", "repos_url": "https://api.github.com/users/liadmat/repos", "events_url": "https://api.github.com/users/liadmat/events{/privacy}", "received_events_url": "https://api.github.com/users/liadmat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-27T16:37:28Z", "updated_at": "2019-08-21T15:54:35Z", "closed_at": "2019-08-21T15:54:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python3\r\nq = Query.from_(Table('t1')).join(Table('t2')).using(Field('f')).select(Field('f'))\r\n\r\nstr(q)\r\n```\r\nReturns:\r\n```sql\r\nSELECT \"f\" FROM \"t1\" JOIN \"t2\" USING (\"\"f\"\")\r\n```\r\nSimilarly,\r\n```python3\r\nq.get_sql(quote_char=None)\r\n```\r\nReturns:\r\n```sql\r\nSELECT f FROM t1 JOIN t2 USING (\"\"f\"\")\r\n```\r\n\r\nI'm trying to get `USING (f)` instead of `USING (\"\"f\"\")` (obviously, I can remove the double quotes myself).\r\n\r\nAm I doing something wrong, or is this a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/277", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/277/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/277/events", "html_url": "https://github.com/kayak/pypika/issues/277", "id": 471871978, "node_id": "MDU6SXNzdWU0NzE4NzE5Nzg=", "number": 277, "title": "JSONField doesn't respect table kwargs", "user": {"login": "jnguyen32", "id": 15060953, "node_id": "MDQ6VXNlcjE1MDYwOTUz", "avatar_url": "https://avatars3.githubusercontent.com/u/15060953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnguyen32", "html_url": "https://github.com/jnguyen32", "followers_url": "https://api.github.com/users/jnguyen32/followers", "following_url": "https://api.github.com/users/jnguyen32/following{/other_user}", "gists_url": "https://api.github.com/users/jnguyen32/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnguyen32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnguyen32/subscriptions", "organizations_url": "https://api.github.com/users/jnguyen32/orgs", "repos_url": "https://api.github.com/users/jnguyen32/repos", "events_url": "https://api.github.com/users/jnguyen32/events{/privacy}", "received_events_url": "https://api.github.com/users/jnguyen32/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-23T18:53:28Z", "updated_at": "2019-08-29T09:17:58Z", "closed_at": "2019-08-29T09:17:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\njson_field = JSONField(val=\"test_column\", table=\"test_table\", alias=None)\r\nprint(json_field.get_sql(dialect=\"postgressql\"))\r\n```\r\n\r\nYields:\r\n`\"test_column\"`\r\n\r\nIt doesn't seem to follow the same approach `Field`.`get_sql()` takes.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/274", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/274/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/274/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/274/events", "html_url": "https://github.com/kayak/pypika/issues/274", "id": 467112338, "node_id": "MDU6SXNzdWU0NjcxMTIzMzg=", "number": 274, "title": "Insert and return the Last_insert_id", "user": {"login": "jcchuks", "id": 5838922, "node_id": "MDQ6VXNlcjU4Mzg5MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5838922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcchuks", "html_url": "https://github.com/jcchuks", "followers_url": "https://api.github.com/users/jcchuks/followers", "following_url": "https://api.github.com/users/jcchuks/following{/other_user}", "gists_url": "https://api.github.com/users/jcchuks/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcchuks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcchuks/subscriptions", "organizations_url": "https://api.github.com/users/jcchuks/orgs", "repos_url": "https://api.github.com/users/jcchuks/repos", "events_url": "https://api.github.com/users/jcchuks/events{/privacy}", "received_events_url": "https://api.github.com/users/jcchuks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-11T21:20:03Z", "updated_at": "2019-07-23T19:02:29Z", "closed_at": "2019-07-23T19:02:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Am looking to return an id after inserting a record in the db., it has to be in the same connection session.\r\nexample; How do you write the statement below  \r\n INSERT INTO table1  value (value1, value2); SELECT LAST_INSERT_ID()", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/272", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/272/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/272/events", "html_url": "https://github.com/kayak/pypika/issues/272", "id": 466989679, "node_id": "MDU6SXNzdWU0NjY5ODk2Nzk=", "number": 272, "title": "Dialect not used in QueryBuilder.get_sql but is in __str__", "user": {"login": "aaliddell", "id": 9061354, "node_id": "MDQ6VXNlcjkwNjEzNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9061354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaliddell", "html_url": "https://github.com/aaliddell", "followers_url": "https://api.github.com/users/aaliddell/followers", "following_url": "https://api.github.com/users/aaliddell/following{/other_user}", "gists_url": "https://api.github.com/users/aaliddell/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaliddell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaliddell/subscriptions", "organizations_url": "https://api.github.com/users/aaliddell/orgs", "repos_url": "https://api.github.com/users/aaliddell/repos", "events_url": "https://api.github.com/users/aaliddell/events{/privacy}", "received_events_url": "https://api.github.com/users/aaliddell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-11T16:21:24Z", "updated_at": "2019-07-23T15:53:57Z", "closed_at": "2019-07-23T15:53:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the base `QueryBuilder.__str__` the default dialect is correctly passed to `get_sql`:\r\n\r\nhttps://github.com/kayak/pypika/blob/259dc054297bd43a4b1ccf76e4b8008ae3d53fda/pypika/queries.py#L738\r\n\r\nHowever, in `QueryBuilder.get_sql` and and any language specific overloads (e.g. `PostgreSQLQuery.get_sql`), the dialect is not used as the default:\r\n\r\nhttps://github.com/kayak/pypika/blob/259dc054297bd43a4b1ccf76e4b8008ae3d53fda/pypika/queries.py#L758-L759\r\n\r\nThis leads to a difference in behaviour between `str(query)` and `query.get_sql()`, which is not mentioned in the docs. For example:\r\n\r\n```\r\nPostgreSQLQuery().from_('blah').select(Array('a')).get_sql()\r\nkwargs = {'with_alias': True, 'subquery': True, 'quote_char': '\"', 'with_namespace': False}\r\n\r\nstr(PostgreSQLQuery().from_('blah').select(Array('a')))\r\nkwargs = {'with_alias': True, 'subquery': True, 'quote_char': '\"', 'dialect': <Dialects.POSTGRESQL: 'postgressql'>, 'with_namespace': False}\r\n```\r\n\r\nNote: due to #271 this gives the same output query for both, but the kwargs are different as shown. If #271 is fixed, the resulting query would be different.\r\n\r\nAt [line 759 of queries.py](https://github.com/kayak/pypika/blob/259dc054297bd43a4b1ccf76e4b8008ae3d53fda/pypika/queries.py#L759), there should be a `kwargs.setdefault('dialect', self.dialect)` to use the known dialect as the default.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/271", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/271/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/271/events", "html_url": "https://github.com/kayak/pypika/issues/271", "id": 466980034, "node_id": "MDU6SXNzdWU0NjY5ODAwMzQ=", "number": 271, "title": "Dialect argument not usable externally due to relative imports", "user": {"login": "aaliddell", "id": 9061354, "node_id": "MDQ6VXNlcjkwNjEzNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9061354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaliddell", "html_url": "https://github.com/aaliddell", "followers_url": "https://api.github.com/users/aaliddell/followers", "following_url": "https://api.github.com/users/aaliddell/following{/other_user}", "gists_url": "https://api.github.com/users/aaliddell/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaliddell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaliddell/subscriptions", "organizations_url": "https://api.github.com/users/aaliddell/orgs", "repos_url": "https://api.github.com/users/aaliddell/repos", "events_url": "https://api.github.com/users/aaliddell/events{/privacy}", "received_events_url": "https://api.github.com/users/aaliddell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-11T16:01:09Z", "updated_at": "2019-07-23T15:53:57Z", "closed_at": "2019-07-23T15:53:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Due to the way you import your files internally (relative), it is not possible to reference the exact Dialects enum externally. Using relative imports causes the enums to get declared once for the relative import and again for the fully qualified import.\r\n\r\nSee https://stackoverflow.com/questions/40371360/imported-enum-class-is-not-comparing-equal-to-itself\r\n\r\nFor example:\r\n\r\n```\r\nfrom pypika import Array, Dialects\r\nprint(Array('a').get_sql(dialect=Dialects.POSTGRESQL)) -> ['a']\r\n```\r\n\r\nIn `Array.get_sql` you check `if kwargs['dialect'] == Dialects.POSTGRESQL` so we should get `ARRAY['a']`, but this check fails because the `Dialects.POSTGRESQL` instance I am passing externally is not the same definition as the `Dialects.POSTGRESQL` you use internally and hence fails the enum identity test.\r\n\r\nTo fix this, either:\r\n- Use full imports rather than relative: `from pypika.enums ...` not `from .enums ...`\r\n- Compare the enums by value: `kwargs['dialect'].value == Dialects.POSTGRESQL.value`\r\n\r\nGenerally the first is preferred in libraries, as relative imports have these gotchas with regards to multiple definitions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/270", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/270/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/270/events", "html_url": "https://github.com/kayak/pypika/issues/270", "id": 466972940, "node_id": "MDU6SXNzdWU0NjY5NzI5NDA=", "number": 270, "title": "Dialect not passed to Function arguments", "user": {"login": "aaliddell", "id": 9061354, "node_id": "MDQ6VXNlcjkwNjEzNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9061354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaliddell", "html_url": "https://github.com/aaliddell", "followers_url": "https://api.github.com/users/aaliddell/followers", "following_url": "https://api.github.com/users/aaliddell/following{/other_user}", "gists_url": "https://api.github.com/users/aaliddell/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaliddell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaliddell/subscriptions", "organizations_url": "https://api.github.com/users/aaliddell/orgs", "repos_url": "https://api.github.com/users/aaliddell/repos", "events_url": "https://api.github.com/users/aaliddell/events{/privacy}", "received_events_url": "https://api.github.com/users/aaliddell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-11T15:47:40Z", "updated_at": "2019-07-23T15:53:57Z", "closed_at": "2019-07-23T15:53:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/kayak/pypika/blob/259dc054297bd43a4b1ccf76e4b8008ae3d53fda/pypika/terms.py#L860 \r\n\r\nAt the line above the `kwargs` are not passed on to the call to `get_function_sql`. This leads to the `dialect` parameter being lost for calls to `get_sql` for the function arguments. As a result, if using Postgres and one of the arguments is an `Array` instance, the generated SQL will not have the `ARRAY` prefix.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/268", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/268/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/268/events", "html_url": "https://github.com/kayak/pypika/issues/268", "id": 466290031, "node_id": "MDU6SXNzdWU0NjYyOTAwMzE=", "number": 268, "title": "How to access PostgreSQL JSON fields?", "user": {"login": "Dandi91", "id": 7431712, "node_id": "MDQ6VXNlcjc0MzE3MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/7431712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dandi91", "html_url": "https://github.com/Dandi91", "followers_url": "https://api.github.com/users/Dandi91/followers", "following_url": "https://api.github.com/users/Dandi91/following{/other_user}", "gists_url": "https://api.github.com/users/Dandi91/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dandi91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dandi91/subscriptions", "organizations_url": "https://api.github.com/users/Dandi91/orgs", "repos_url": "https://api.github.com/users/Dandi91/repos", "events_url": "https://api.github.com/users/Dandi91/events{/privacy}", "received_events_url": "https://api.github.com/users/Dandi91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-10T12:49:15Z", "updated_at": "2019-08-20T07:05:42Z", "closed_at": "2019-08-20T07:05:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "How do I construct a query like\r\n```sql\r\nSELECT value->'key'->>'subkey' FROM json_table\r\n```\r\nusing PyPika?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/265", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/265/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/265/events", "html_url": "https://github.com/kayak/pypika/issues/265", "id": 461988912, "node_id": "MDU6SXNzdWU0NjE5ODg5MTI=", "number": 265, "title": "test_sqllite failure", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-28T11:26:08Z", "updated_at": "2019-07-09T15:27:21Z", "closed_at": "2019-07-09T15:24:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "On running the project against Python 3.8 using pytest. On using `python setup.py test` the tests inside the dialect folder seem to be not executed. I ran the test under 3.5 and can still reproduce the test failure so it seems the tests were not executed in CI too catching this. \r\n\r\n```\r\n pytest\r\n======================================== test session starts ========================================\r\nplatform linux -- Python 3.5.2, pytest-4.6.3, py-1.8.0, pluggy-0.12.0\r\nrootdir: /home/karthi/pypika\r\ncollected 625 items\r\n\r\npypika/tests/test_aggregate.py ..................                                             [  2%]\r\npypika/tests/test_analytic_queries.py ...........................................             [  9%]\r\npypika/tests/test_criterions.py ............................................................. [ 19%]\r\n....................................                                                          [ 25%]\r\npypika/tests/test_data_types.py .                                                             [ 25%]\r\npypika/tests/test_date_math.py ............................                                   [ 29%]\r\npypika/tests/test_deletes.py .....                                                            [ 30%]\r\npypika/tests/test_formats.py ..                                                               [ 31%]\r\npypika/tests/test_functions.py .............................................................. [ 40%]\r\n........................................                                                      [ 47%]\r\npypika/tests/test_groupby_modifiers.py .............                                          [ 49%]\r\npypika/tests/test_immutability.py ..                                                          [ 49%]\r\npypika/tests/test_inserts.py ..............................................................   [ 59%]\r\npypika/tests/test_internals.py ....                                                           [ 60%]\r\npypika/tests/test_joins.py .....................................................              [ 68%]\r\npypika/tests/test_negation.py ....                                                            [ 69%]\r\npypika/tests/test_parameter.py ....                                                           [ 70%]\r\npypika/tests/test_pseudocolumns.py ........                                                   [ 71%]\r\npypika/tests/test_selects.py ................................................................ [ 81%]\r\n.........................................................................                     [ 93%]\r\npypika/tests/test_tables.py ..........                                                        [ 94%]\r\npypika/tests/test_tuples.py .........                                                         [ 96%]\r\npypika/tests/test_updates.py ........                                                         [ 97%]\r\npypika/tests/test_utils.py ....                                                               [ 98%]\r\npypika/tests/test_vertica_queries.py ....                                                     [ 98%]\r\npypika/tests/dialects/test_mysql.py ....                                                      [ 99%]\r\npypika/tests/dialects/test_postgresql.py .                                                    [ 99%]\r\npypika/tests/dialects/test_sqllite.py FF                                                      [100%]\r\n\r\n============================================= FAILURES ==============================================\r\n________________________________ SelectTests.test_bool_false_as_zero ________________________________\r\n\r\nself = <test_sqllite.SelectTests testMethod=test_bool_false_as_zero>\r\n\r\n    def test_bool_false_as_zero(self):\r\n        q = SQLLiteQuery.from_('abc').select(False)\r\n\r\n>       self.assertEqual('SELECT 0 FROM \"abc\"', str(q))\r\nE       AssertionError: 'SELECT 0 FROM \"abc\"' != 'SELECT false FROM \"abc\"'\r\nE       - SELECT 0 FROM \"abc\"\r\nE       ?        ^\r\nE       + SELECT false FROM \"abc\"\r\nE       ?        ^^^^^\r\n\r\npypika/tests/dialects/test_sqllite.py:18: AssertionError\r\n_________________________________ SelectTests.test_bool_true_as_one _________________________________\r\nimport unittest\r\n\r\n\r\nself = <test_sqllite.SelectTests testMethod=test_bool_true_as_one>\r\n\r\n    def test_bool_true_as_one(self):\r\n        q = SQLLiteQuery.from_('abc').select(True)\r\n\r\n>       self.assertEqual('SELECT 1 FROM \"abc\"', str(q))\r\nE       AssertionError: 'SELECT 1 FROM \"abc\"' != 'SELECT true FROM \"abc\"'\r\nE       - SELECT 1 FROM \"abc\"\r\nE       ?        ^\r\nE       + SELECT true FROM \"abc\"\r\nE       ?        ^^^^\r\n\r\npypika/tests/dialects/test_sqllite.py:13: AssertionError\r\n```\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/264", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/264/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/264/events", "html_url": "https://github.com/kayak/pypika/issues/264", "id": 461175759, "node_id": "MDU6SXNzdWU0NjExNzU3NTk=", "number": 264, "title": "add Table.select?", "user": {"login": "jstrong-tios", "id": 47326678, "node_id": "MDQ6VXNlcjQ3MzI2Njc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47326678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstrong-tios", "html_url": "https://github.com/jstrong-tios", "followers_url": "https://api.github.com/users/jstrong-tios/followers", "following_url": "https://api.github.com/users/jstrong-tios/following{/other_user}", "gists_url": "https://api.github.com/users/jstrong-tios/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstrong-tios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstrong-tios/subscriptions", "organizations_url": "https://api.github.com/users/jstrong-tios/orgs", "repos_url": "https://api.github.com/users/jstrong-tios/repos", "events_url": "https://api.github.com/users/jstrong-tios/events{/privacy}", "received_events_url": "https://api.github.com/users/jstrong-tios/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-26T20:52:04Z", "updated_at": "2019-08-01T14:16:39Z", "closed_at": "2019-08-01T14:16:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Has allowing `Table` to `select`, eliminating the name to re-specify a table name with `from_` been considered? e.g.\r\n\r\n```python\r\nfrom pypika import Table, Query\r\nt = Table('my_table')\r\nt.select(t.x, t.y) == Query.from_('my_table').select(t.x, t.y) # -> True\r\n```\r\n\r\nJust an idea. Seems like it would add convenience when using from console/jupyter.\r\n\r\nThanks for your hard work on a great library!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/263", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/263/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/263/events", "html_url": "https://github.com/kayak/pypika/issues/263", "id": 459419401, "node_id": "MDU6SXNzdWU0NTk0MTk0MDE=", "number": 263, "title": "Reverse IN operator?", "user": {"login": "rossjrw", "id": 29130152, "node_id": "MDQ6VXNlcjI5MTMwMTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/29130152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossjrw", "html_url": "https://github.com/rossjrw", "followers_url": "https://api.github.com/users/rossjrw/followers", "following_url": "https://api.github.com/users/rossjrw/following{/other_user}", "gists_url": "https://api.github.com/users/rossjrw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossjrw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossjrw/subscriptions", "organizations_url": "https://api.github.com/users/rossjrw/orgs", "repos_url": "https://api.github.com/users/rossjrw/repos", "events_url": "https://api.github.com/users/rossjrw/events{/privacy}", "received_events_url": "https://api.github.com/users/rossjrw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-22T01:38:24Z", "updated_at": "2019-06-22T19:25:47Z", "closed_at": "2019-06-22T14:24:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say I have a selection query and want to add the following condition to it:\r\n\r\n```sql\r\nWHERE 'John Doe' IN (\r\n    SELECT author FROM art_au\r\n    WHERE article_id=art.id\r\n)\r\n```\r\n\r\nNote that I'm looking for a static value in the result of a subquery (rather than looking for a value from another selection).\r\n\r\nExisting syntax would suggest that this is the correct option:\r\n\r\n```python\r\nsubq = Query.from_(art_au).select(art_au.author).where(\r\n    art_au.article_id == art.id\r\n)\r\nquery = query.where('John Doe'.isin(subq))\r\n```\r\n\r\nBut of course, `str` has no `isin` method. Swapping `'John Doe'` for `Query.select('John Doe')` errors with 'no FROM table specified'.\r\n\r\nDoes PyPika provide a syntax to go about this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/260", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/260/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/260/events", "html_url": "https://github.com/kayak/pypika/issues/260", "id": 457333955, "node_id": "MDU6SXNzdWU0NTczMzM5NTU=", "number": 260, "title": "Why do some methods end with an underscore?", "user": {"login": "rossjrw", "id": 29130152, "node_id": "MDQ6VXNlcjI5MTMwMTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/29130152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossjrw", "html_url": "https://github.com/rossjrw", "followers_url": "https://api.github.com/users/rossjrw/followers", "following_url": "https://api.github.com/users/rossjrw/following{/other_user}", "gists_url": "https://api.github.com/users/rossjrw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossjrw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossjrw/subscriptions", "organizations_url": "https://api.github.com/users/rossjrw/orgs", "repos_url": "https://api.github.com/users/rossjrw/repos", "events_url": "https://api.github.com/users/rossjrw/events{/privacy}", "received_events_url": "https://api.github.com/users/rossjrw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-18T08:34:19Z", "updated_at": "2019-06-18T13:53:18Z", "closed_at": "2019-06-18T13:53:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "e.g. Query.from_, .with_, .as_\r\n\r\nIt seems to be fairly random?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/259", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/259/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/259/events", "html_url": "https://github.com/kayak/pypika/issues/259", "id": 457081380, "node_id": "MDU6SXNzdWU0NTcwODEzODA=", "number": 259, "title": "cannot place limit on update query mySQL", "user": {"login": "maciek-d", "id": 46060393, "node_id": "MDQ6VXNlcjQ2MDYwMzkz", "avatar_url": "https://avatars3.githubusercontent.com/u/46060393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciek-d", "html_url": "https://github.com/maciek-d", "followers_url": "https://api.github.com/users/maciek-d/followers", "following_url": "https://api.github.com/users/maciek-d/following{/other_user}", "gists_url": "https://api.github.com/users/maciek-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciek-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciek-d/subscriptions", "organizations_url": "https://api.github.com/users/maciek-d/orgs", "repos_url": "https://api.github.com/users/maciek-d/repos", "events_url": "https://api.github.com/users/maciek-d/events{/privacy}", "received_events_url": "https://api.github.com/users/maciek-d/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-17T18:16:43Z", "updated_at": "2019-08-20T07:07:41Z", "closed_at": "2019-08-20T07:07:41Z", "author_association": "NONE", "active_lock_reason": null, "body": " am trying to place a limit on an update query in pypika.\r\n\r\n```\r\nMySQLQuery.update(conversations).set(\r\n            conversations.text, text).limit(1)\r\n```\r\nWhen I print the query I get\r\n```\r\nUPDATE `TEST_conversations` SET `text`=245\r\n```\r\nIs there any way I can set a limit on an update query in pypika??", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/255", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/255/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/255/events", "html_url": "https://github.com/kayak/pypika/issues/255", "id": 452042154, "node_id": "MDU6SXNzdWU0NTIwNDIxNTQ=", "number": 255, "title": "Create Table", "user": {"login": "kfk", "id": 937922, "node_id": "MDQ6VXNlcjkzNzkyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/937922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kfk", "html_url": "https://github.com/kfk", "followers_url": "https://api.github.com/users/kfk/followers", "following_url": "https://api.github.com/users/kfk/following{/other_user}", "gists_url": "https://api.github.com/users/kfk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kfk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kfk/subscriptions", "organizations_url": "https://api.github.com/users/kfk/orgs", "repos_url": "https://api.github.com/users/kfk/repos", "events_url": "https://api.github.com/users/kfk/events{/privacy}", "received_events_url": "https://api.github.com/users/kfk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-04T14:49:35Z", "updated_at": "2020-07-03T08:06:47Z", "closed_at": "2020-07-03T08:06:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am looking into Pypika to replace our alteryx in-db workflows, so far it's working very well. It seems, however, that Pypika does not support create table? Normally, after transforming the data inside the database (group by, filters, joins, etc.), we save it back inside a db table.\r\n\r\nI would also be ok to roll out my own create table solution, but could you give me some directions? The main issue is going to be column types. We need to create a table with the same column types as the final selected columns.\r\n\r\nEDIT. I see that I can extend pypika extending the Function class inside .terms, any docs on this? Or could you give me a couple of tips? I am guessing I could create a pypika function to do this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/254", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/254/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/254/events", "html_url": "https://github.com/kayak/pypika/issues/254", "id": 447936947, "node_id": "MDU6SXNzdWU0NDc5MzY5NDc=", "number": 254, "title": "how do I add a DISTINCT clause?", "user": {"login": "bpourkazemi", "id": 1800902, "node_id": "MDQ6VXNlcjE4MDA5MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1800902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpourkazemi", "html_url": "https://github.com/bpourkazemi", "followers_url": "https://api.github.com/users/bpourkazemi/followers", "following_url": "https://api.github.com/users/bpourkazemi/following{/other_user}", "gists_url": "https://api.github.com/users/bpourkazemi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpourkazemi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpourkazemi/subscriptions", "organizations_url": "https://api.github.com/users/bpourkazemi/orgs", "repos_url": "https://api.github.com/users/bpourkazemi/repos", "events_url": "https://api.github.com/users/bpourkazemi/events{/privacy}", "received_events_url": "https://api.github.com/users/bpourkazemi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-24T01:17:31Z", "updated_at": "2019-05-24T07:24:10Z", "closed_at": "2019-05-24T07:24:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "very simple q but was unable to answer from the docs\r\n```sql\r\nSELECT DISTINCT col FROM table;\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/253", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/253/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/253/events", "html_url": "https://github.com/kayak/pypika/issues/253", "id": 446234207, "node_id": "MDU6SXNzdWU0NDYyMzQyMDc=", "number": 253, "title": "pypika.functions.NullIf creates SQL with syntax error", "user": {"login": "akmiller01", "id": 2836840, "node_id": "MDQ6VXNlcjI4MzY4NDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2836840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akmiller01", "html_url": "https://github.com/akmiller01", "followers_url": "https://api.github.com/users/akmiller01/followers", "following_url": "https://api.github.com/users/akmiller01/following{/other_user}", "gists_url": "https://api.github.com/users/akmiller01/gists{/gist_id}", "starred_url": "https://api.github.com/users/akmiller01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akmiller01/subscriptions", "organizations_url": "https://api.github.com/users/akmiller01/orgs", "repos_url": "https://api.github.com/users/akmiller01/repos", "events_url": "https://api.github.com/users/akmiller01/events{/privacy}", "received_events_url": "https://api.github.com/users/akmiller01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-20T17:41:38Z", "updated_at": "2019-05-20T19:50:16Z", "closed_at": "2019-05-20T19:50:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From your tests, the Null If function returns `SELECT NULLIF(\"foo\"=0) FROM \"abc\"` which throws a syntax error when you put it into PostgreSQL:\r\n\r\n```\r\npostgres=# SELECT NULLIF(\"foo\"=0) from \"abc\";\r\nERROR:  syntax error at or near \")\"\r\nLINE 1: SELECT NULLIF(\"foo\"=0) from \"abc\";\r\n```\r\n\r\nHaven't tested across all SQL platforms, but it needs a comma instead of an equal sign.\r\n\r\nSuggested fix PR here: https://github.com/kayak/pypika/pull/252", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/250", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/250/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/250/events", "html_url": "https://github.com/kayak/pypika/issues/250", "id": 445080131, "node_id": "MDU6SXNzdWU0NDUwODAxMzE=", "number": 250, "title": "Set difference, set intersection support?", "user": {"login": "roger-rojas", "id": 15255462, "node_id": "MDQ6VXNlcjE1MjU1NDYy", "avatar_url": "https://avatars1.githubusercontent.com/u/15255462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roger-rojas", "html_url": "https://github.com/roger-rojas", "followers_url": "https://api.github.com/users/roger-rojas/followers", "following_url": "https://api.github.com/users/roger-rojas/following{/other_user}", "gists_url": "https://api.github.com/users/roger-rojas/gists{/gist_id}", "starred_url": "https://api.github.com/users/roger-rojas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roger-rojas/subscriptions", "organizations_url": "https://api.github.com/users/roger-rojas/orgs", "repos_url": "https://api.github.com/users/roger-rojas/repos", "events_url": "https://api.github.com/users/roger-rojas/events{/privacy}", "received_events_url": "https://api.github.com/users/roger-rojas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-16T17:42:27Z", "updated_at": "2020-06-30T09:08:04Z", "closed_at": "2020-06-30T09:08:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there existing/planned support for set difference or set intersection operators?\r\n\r\ne.g. in table \"Likes\" with columns \"Person\" and \"Pizza\":\r\n1) To find people who like _both_ mushroom and onion pizza\r\nSELECT person FROM likes WHERE pizza=\"mushrooms\"\r\nINTERSECT\r\nSELECT person FROM likes WHERE pizza=\"onions\"\r\n\r\n2) To find people who like onions _but not_ ham on their pizzas\r\nSELECT person FROM likes WHERE pizza=\"onions\"\r\nMINUS\r\nSELECT person FROM likes WHERE pizza=\"ham\"\r\n\r\nI am new to SQL, so maybe there is a similarly simple way to do this, but set operations make these clear.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/249", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/249/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/249/events", "html_url": "https://github.com/kayak/pypika/issues/249", "id": 443052936, "node_id": "MDU6SXNzdWU0NDMwNTI5MzY=", "number": 249, "title": "Possible incorrect parenthesization of scalar subqueries.", "user": {"login": "alfredr", "id": 616413, "node_id": "MDQ6VXNlcjYxNjQxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/616413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alfredr", "html_url": "https://github.com/alfredr", "followers_url": "https://api.github.com/users/alfredr/followers", "following_url": "https://api.github.com/users/alfredr/following{/other_user}", "gists_url": "https://api.github.com/users/alfredr/gists{/gist_id}", "starred_url": "https://api.github.com/users/alfredr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alfredr/subscriptions", "organizations_url": "https://api.github.com/users/alfredr/orgs", "repos_url": "https://api.github.com/users/alfredr/repos", "events_url": "https://api.github.com/users/alfredr/events{/privacy}", "received_events_url": "https://api.github.com/users/alfredr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-12T01:25:07Z", "updated_at": "2019-07-03T12:50:01Z", "closed_at": "2019-07-03T12:50:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be some issue using scalar sub-queries as arguments. For example:\r\n\r\n```python\r\nfrom pypika import Query, terms as ts\r\nQuery.select(ts.Mod(5, Query.select(4)))\r\n```\r\noutputs\r\n```sql\r\nSELECT MOD(5,SELECT 4)\r\n```\r\n\r\nWhich, at a minimum, gives Postgres heartburn.\r\n```\r\n> SELECT MOD(5,SELECT 4);\r\nERROR:  syntax error at or near \"SELECT\"\r\nLINE 1: SELECT MOD(5,SELECT 4);\r\n```\r\n\r\nHowever the following query is valid:\r\n```\r\n> SELECT MOD(5,(SELECT 4));\r\n mod\r\n-----\r\n   1\r\n(1 row)\r\n```\r\n\r\nI am unsure if such queries are standard, but I suspect that adding the extra parentheses won't hurt anything that already works, and more queries will work on Postgres.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/248", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/248/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/248/events", "html_url": "https://github.com/kayak/pypika/issues/248", "id": 442772057, "node_id": "MDU6SXNzdWU0NDI3NzIwNTc=", "number": 248, "title": "Join the same table twice. Documentation needed?", "user": {"login": "bikeshedder", "id": 1112569, "node_id": "MDQ6VXNlcjExMTI1Njk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1112569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bikeshedder", "html_url": "https://github.com/bikeshedder", "followers_url": "https://api.github.com/users/bikeshedder/followers", "following_url": "https://api.github.com/users/bikeshedder/following{/other_user}", "gists_url": "https://api.github.com/users/bikeshedder/gists{/gist_id}", "starred_url": "https://api.github.com/users/bikeshedder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bikeshedder/subscriptions", "organizations_url": "https://api.github.com/users/bikeshedder/orgs", "repos_url": "https://api.github.com/users/bikeshedder/repos", "events_url": "https://api.github.com/users/bikeshedder/events{/privacy}", "received_events_url": "https://api.github.com/users/bikeshedder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-10T15:20:51Z", "updated_at": "2019-07-03T12:53:57Z", "closed_at": "2019-07-03T12:53:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's assume I have two tables `Person` and `Friendship`. Now I want to fetch all friendships including the person data. I figured an alias will do the trick and found the following code to work exactly like I needed it:\r\n\r\n```python\r\nperson_a = Table('person', alias='person_a')\r\nperson_b = Table('person', alias='person_b')\r\nfriendship = Table('friendship')\r\nquery = (Query\r\n    .from_(friendship)\r\n    .join(person_a).on(friendship.person_a_id == person_a.id)\r\n    .join(person_b).on(friendship.person_b_id == person_b.id)\r\n    .select(friendship.id, person_a.id, person_a.name, person_b.id, person_b.name)\r\n)\r\n```\r\n\r\nThis produces the query I'm expecting:\r\n\r\n```sql\r\nSELECT\r\n    \"friendship\".\"id\",\r\n    \"person_a\".\"id\", \"person_a\".\"name\",\r\n    \"person_b\".\"id\", \"person_b\".\"name\"\r\nFROM \"friendship\"\r\nJOIN \"person\" \"person_a\" ON \"friendship\".\"person_a_id\"=\"person_a\".\"id\"\r\nJOIN \"person\" \"person_b\" ON \"friendship\".\"person_b_id\"=\"person_b\".\"id\"\r\n```\r\n\r\nI wonder if this is the correct (and only?) way of doing it. Big kudos on the API design. If this really is the way to go it is very intuitive. It just needs a small example in the documentation, I think.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/246", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/246/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/246/events", "html_url": "https://github.com/kayak/pypika/issues/246", "id": 442584367, "node_id": "MDU6SXNzdWU0NDI1ODQzNjc=", "number": 246, "title": "Support for Big Quqery syntax", "user": {"login": "ralbertazzi", "id": 8771599, "node_id": "MDQ6VXNlcjg3NzE1OTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/8771599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ralbertazzi", "html_url": "https://github.com/ralbertazzi", "followers_url": "https://api.github.com/users/ralbertazzi/followers", "following_url": "https://api.github.com/users/ralbertazzi/following{/other_user}", "gists_url": "https://api.github.com/users/ralbertazzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ralbertazzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ralbertazzi/subscriptions", "organizations_url": "https://api.github.com/users/ralbertazzi/orgs", "repos_url": "https://api.github.com/users/ralbertazzi/repos", "events_url": "https://api.github.com/users/ralbertazzi/events{/privacy}", "received_events_url": "https://api.github.com/users/ralbertazzi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-10T07:48:21Z", "updated_at": "2020-07-03T08:06:03Z", "closed_at": "2020-07-03T08:06:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any support for the nested schema structure `table.field.sub_field` used in Google BigQuery?\r\n\r\nThis obviously doesn't work:\r\n```\r\ncustomers = Table('customers')\r\nq = Query.from_(customers).select(customers.field.sub_field)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/245", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/245/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/245/events", "html_url": "https://github.com/kayak/pypika/issues/245", "id": 442253396, "node_id": "MDU6SXNzdWU0NDIyNTMzOTY=", "number": 245, "title": "Extract is quoting `date_part`", "user": {"login": "nihil0", "id": 2157667, "node_id": "MDQ6VXNlcjIxNTc2Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2157667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nihil0", "html_url": "https://github.com/nihil0", "followers_url": "https://api.github.com/users/nihil0/followers", "following_url": "https://api.github.com/users/nihil0/following{/other_user}", "gists_url": "https://api.github.com/users/nihil0/gists{/gist_id}", "starred_url": "https://api.github.com/users/nihil0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nihil0/subscriptions", "organizations_url": "https://api.github.com/users/nihil0/orgs", "repos_url": "https://api.github.com/users/nihil0/repos", "events_url": "https://api.github.com/users/nihil0/events{/privacy}", "received_events_url": "https://api.github.com/users/nihil0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-09T14:01:29Z", "updated_at": "2019-05-09T14:46:39Z", "closed_at": "2019-05-09T14:46:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to generate SQL where I extract the week from the date. The python code looks like this:\r\n```\r\nimport pypika.functions as fn\r\nfrom pypika import MySQLquery\r\n\r\nq = MySQLQuery.select(fn.Extract(\"WEEK\", \"date\"))).as_(\"week\").from_(\"foo\")\r\nprint(q)\r\n```\r\n\r\nI expect to get \r\n```\r\nSELECT EXTRACT(WEEK FROM date) `week` FROM `foo`\r\n```\r\ninstead, I get \r\n```\r\nSELECT EXTRACT('WEEK' FROM date) `week` FROM `foo`\r\n```\r\nwhich is invalid SQL. Is this a known issue? How do I get around this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/244", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/244/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/244/events", "html_url": "https://github.com/kayak/pypika/issues/244", "id": 436839081, "node_id": "MDU6SXNzdWU0MzY4MzkwODE=", "number": 244, "title": "Support for Raw statements", "user": {"login": "blitzd", "id": 1502984, "node_id": "MDQ6VXNlcjE1MDI5ODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1502984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzd", "html_url": "https://github.com/blitzd", "followers_url": "https://api.github.com/users/blitzd/followers", "following_url": "https://api.github.com/users/blitzd/following{/other_user}", "gists_url": "https://api.github.com/users/blitzd/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzd/subscriptions", "organizations_url": "https://api.github.com/users/blitzd/orgs", "repos_url": "https://api.github.com/users/blitzd/repos", "events_url": "https://api.github.com/users/blitzd/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-24T18:15:32Z", "updated_at": "2019-04-26T21:09:08Z", "closed_at": "2019-04-26T21:08:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking to find if PyPika can somehow support raw SQL statements, something similar to how Knex.js has their `raw` support here:\r\n\r\nhttps://knexjs.org/#Builder-whereRaw\r\n\r\nMy specific issue is that I have a query on PostgreSQL where I need to specify the timezone for a datetime comparison, and I don't see any way to do that within the existing functionality.\r\n\r\nSQL Syntax would be similar to this:\r\n\r\n```\r\nWHERE UPPER(billing_detail_city) IN %s\r\n                    AND time AT TIME ZONE 'America/Toronto' >= %s\r\n                    AND time AT TIME ZONE 'America/Toronto' <= %s\r\n                    AND sku LIKE 'MM%%';\r\n```\r\nI've tried implementing it as a Criterion, but I don't know if that is the proper way, and I'm also finding that my version doesn't work within a `where` with the `&` syntax.\r\n\r\n```Python\r\nclass Timezone(Criterion):\r\n    def __init__(self, term, timezone, alias=None, *args, **kwargs):\r\n        super().__init__(alias)\r\n        self.term = term\r\n        self.timezone = timezone\r\n        self.alias = alias\r\n\r\n    def fields(self):\r\n        return []\r\n\r\n    def get_sql(self, **kwargs):\r\n        if self.alias:\r\n            return f'{self.term} AT TIME ZONE \\'{self.timezone}\\' AS {self.alias}'\r\n        else:\r\n            return f'{self.term} AT TIME ZONE \\'{self.timezone}\\' '\r\n```\r\nThis works:\r\n\r\n```Python\r\n                q = detail_query.where(\r\n                    (Upper(order.billing_detail_city)).isin(cities) &\r\n                    order_item.sku.like('MM%') &\r\n                    Timezone(order.time, timezone='America/Toronto') >= dateutil.parser.parse(args.date)\r\n                )\r\n\r\n                q = q.where(\r\n                    Timezone(order.time, timezone='America/Toronto') < dateutil.parser.parse(args.cutoff_date)\r\n                )\r\n```\r\n\r\n... But this:\r\n\r\n```Python\r\n                q = detail_query.where(\r\n                    (Upper(order.billing_detail_city)).isin(cities) &\r\n                    order_item.sku.like('MM%') &\r\n                    Timezone(order.time, timezone='America/Toronto') >= dateutil.parser.parse(args.date) &\r\n                    Timezone(order.time, timezone='America/Toronto') < dateutil.parser.parse(args.cutoff_date)\r\n                )\r\n```\r\n\r\nProduces:\r\n\r\n`TypeError: unsupported operand type(s) for &: 'datetime.datetime' and 'Timezone'`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/241", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/241/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/241/events", "html_url": "https://github.com/kayak/pypika/issues/241", "id": 428829421, "node_id": "MDU6SXNzdWU0Mjg4Mjk0MjE=", "number": 241, "title": "MySQL > PseudoColumns > 'PseudoColumn' object has no attribute 'alias'", "user": {"login": "wildtron", "id": 2577734, "node_id": "MDQ6VXNlcjI1Nzc3MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2577734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wildtron", "html_url": "https://github.com/wildtron", "followers_url": "https://api.github.com/users/wildtron/followers", "following_url": "https://api.github.com/users/wildtron/following{/other_user}", "gists_url": "https://api.github.com/users/wildtron/gists{/gist_id}", "starred_url": "https://api.github.com/users/wildtron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wildtron/subscriptions", "organizations_url": "https://api.github.com/users/wildtron/orgs", "repos_url": "https://api.github.com/users/wildtron/repos", "events_url": "https://api.github.com/users/wildtron/events{/privacy}", "received_events_url": "https://api.github.com/users/wildtron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-03T15:20:33Z", "updated_at": "2019-04-05T21:17:34Z", "closed_at": "2019-04-03T17:31:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue:\r\n1.  `PseudoColumn` used in conjunction with `orderby` raises an AttributeError\r\n\r\nTo reproduce:\r\n```python\r\n>>> from pypika import JoinType, Table, functions as fn\r\n>>> from pypika.dialects import MySQLQuery as Query\r\n>>> from pypika.terms import PseudoColumn\r\n>>> from datetime import date\r\n\r\n>>> p = Table('sample', alias='p')\r\n>>> q = Table('sample_2', alias='q')\r\n\r\n>>> Query.from_(p).join(q).on(p.id == q.id).select(p.id, p.foo, q.bar).get_sql()\r\n'SELECT `p`.`id`,`p`.`foo`,`q`.`bar` FROM `sample` `p` JOIN `sample_2` `q` ON `p`.`id`=`q`.`id`'\r\n\r\n# orderby works fine here\r\n>>> Query.from_(p).join(q).on(p.id == q.id).select(p.id, p.foo, q.bar).orderby(p.id).get_sql()\r\n'SELECT `p`.`id`,`p`.`foo`,`q`.`bar` FROM `sample` `p` JOIN `sample_2` `q` ON `p`.`id`=`q`.`id` ORDER BY `p`.`id`'\r\n\r\n# PseudoColumn and orderby used in conjunction\r\n>>> Query.from_(p).join(q).on(p.id == q.id).select(PseudoColumn(\"'{}'\".format(date(2019, 1, 1))),p.id, p.foo, q.bar).orderby(p.id).get_sql()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.7/site-packages/pypika/dialects.py\", line 42, in get_sql\r\n    querystring = super(MySQLQueryBuilder, self).get_sql(with_alias, subquery, **kwargs)\r\n  File \"/usr/lib/python3.7/site-packages/pypika/queries.py\", line 825, in get_sql\r\n    querystring += self._orderby_sql(**kwargs)\r\n  File \"/usr/lib/python3.7/site-packages/pypika/queries.py\", line 947, in _orderby_sql\r\n    selected_aliases = {s.alias for s in self._selects}\r\n  File \"/usr/lib/python3.7/site-packages/pypika/queries.py\", line 947, in <setcomp>\r\n    selected_aliases = {s.alias for s in self._selects}\r\nAttributeError: 'PseudoColumn' object has no attribute 'alias'\r\n>>> \r\n```\r\n\r\nOther considerations:\r\n1. dialect used is MySQL", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/239", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/239/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/239/events", "html_url": "https://github.com/kayak/pypika/issues/239", "id": 427529264, "node_id": "MDU6SXNzdWU0Mjc1MjkyNjQ=", "number": 239, "title": "How is the key of isin turned into a variable", "user": {"login": "qianxuanyon", "id": 29041881, "node_id": "MDQ6VXNlcjI5MDQxODgx", "avatar_url": "https://avatars2.githubusercontent.com/u/29041881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qianxuanyon", "html_url": "https://github.com/qianxuanyon", "followers_url": "https://api.github.com/users/qianxuanyon/followers", "following_url": "https://api.github.com/users/qianxuanyon/following{/other_user}", "gists_url": "https://api.github.com/users/qianxuanyon/gists{/gist_id}", "starred_url": "https://api.github.com/users/qianxuanyon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qianxuanyon/subscriptions", "organizations_url": "https://api.github.com/users/qianxuanyon/orgs", "repos_url": "https://api.github.com/users/qianxuanyon/repos", "events_url": "https://api.github.com/users/qianxuanyon/events{/privacy}", "received_events_url": "https://api.github.com/users/qianxuanyon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-01T06:15:27Z", "updated_at": "2019-04-01T07:29:25Z", "closed_at": "2019-04-01T07:29:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/29041881/55306911-651a0400-5488-11e9-8853-3f24e7b78d9c.png)\r\nHow to achieve", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/234", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/234/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/234/events", "html_url": "https://github.com/kayak/pypika/issues/234", "id": 425026059, "node_id": "MDU6SXNzdWU0MjUwMjYwNTk=", "number": 234, "title": "safely implementing to_timestamp in SQL", "user": {"login": "timbarkerSE", "id": 17298271, "node_id": "MDQ6VXNlcjE3Mjk4Mjcx", "avatar_url": "https://avatars2.githubusercontent.com/u/17298271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timbarkerSE", "html_url": "https://github.com/timbarkerSE", "followers_url": "https://api.github.com/users/timbarkerSE/followers", "following_url": "https://api.github.com/users/timbarkerSE/following{/other_user}", "gists_url": "https://api.github.com/users/timbarkerSE/gists{/gist_id}", "starred_url": "https://api.github.com/users/timbarkerSE/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timbarkerSE/subscriptions", "organizations_url": "https://api.github.com/users/timbarkerSE/orgs", "repos_url": "https://api.github.com/users/timbarkerSE/repos", "events_url": "https://api.github.com/users/timbarkerSE/events{/privacy}", "received_events_url": "https://api.github.com/users/timbarkerSE/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-25T17:27:15Z", "updated_at": "2019-03-26T16:50:16Z", "closed_at": "2019-03-26T16:50:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to select a unix timestamp integer field that gets converted to timestamp and cast to a date then grouped by.\r\nI've tried: \r\n`self.query = self.query.select(\r\n                'to_timestamp(base_image.created)::date as dayofyear'\r\n            ).groupby(\r\n                'dayofyear'\r\n            )\r\n`\r\nwhich results in to_timestamp being prefixed with a table name.\r\nI'm also trying:\r\n`my_field = fn.Cast('to_timestamp(base_image.created)', 'date').as_('dayofyear')\r\n            self.query = self.query.select(\r\n                my_field\r\n            ).groupby(\r\n                my_field\r\n            )\r\n`\r\nbut then it outputs the to_timestamp function as a string in quotes.\r\n\r\nam I missing an easy way to get this to output correctly? Thanks a lot.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/233", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/233/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/233/events", "html_url": "https://github.com/kayak/pypika/issues/233", "id": 425004280, "node_id": "MDU6SXNzdWU0MjUwMDQyODA=", "number": 233, "title": "Is it possible to find not NULL column?", "user": {"login": "Yankee-by", "id": 16991016, "node_id": "MDQ6VXNlcjE2OTkxMDE2", "avatar_url": "https://avatars2.githubusercontent.com/u/16991016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yankee-by", "html_url": "https://github.com/Yankee-by", "followers_url": "https://api.github.com/users/Yankee-by/followers", "following_url": "https://api.github.com/users/Yankee-by/following{/other_user}", "gists_url": "https://api.github.com/users/Yankee-by/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yankee-by/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yankee-by/subscriptions", "organizations_url": "https://api.github.com/users/Yankee-by/orgs", "repos_url": "https://api.github.com/users/Yankee-by/repos", "events_url": "https://api.github.com/users/Yankee-by/events{/privacy}", "received_events_url": "https://api.github.com/users/Yankee-by/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-25T16:41:25Z", "updated_at": "2020-06-20T15:31:35Z", "closed_at": "2019-03-26T16:53:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am going to realize something like that: \r\n`SELECT * FROM country WHERE \"housing\" is not NULL`\r\n\r\nCan you help with it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/232", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/232/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/232/events", "html_url": "https://github.com/kayak/pypika/issues/232", "id": 424844879, "node_id": "MDU6SXNzdWU0MjQ4NDQ4Nzk=", "number": 232, "title": "Group by alias from SQL Extract", "user": {"login": "timbarkerSE", "id": 17298271, "node_id": "MDQ6VXNlcjE3Mjk4Mjcx", "avatar_url": "https://avatars2.githubusercontent.com/u/17298271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timbarkerSE", "html_url": "https://github.com/timbarkerSE", "followers_url": "https://api.github.com/users/timbarkerSE/followers", "following_url": "https://api.github.com/users/timbarkerSE/following{/other_user}", "gists_url": "https://api.github.com/users/timbarkerSE/gists{/gist_id}", "starred_url": "https://api.github.com/users/timbarkerSE/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timbarkerSE/subscriptions", "organizations_url": "https://api.github.com/users/timbarkerSE/orgs", "repos_url": "https://api.github.com/users/timbarkerSE/repos", "events_url": "https://api.github.com/users/timbarkerSE/events{/privacy}", "received_events_url": "https://api.github.com/users/timbarkerSE/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-25T11:11:50Z", "updated_at": "2019-03-25T12:32:28Z", "closed_at": "2019-03-25T11:18:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to select some data using the extract function as follows:\r\n\r\n`.select(\r\n            fn.Extract('ISODOW', 'to_timestamp(base_image.created)::date', 'dayofweek')\r\n        ).groupby(\r\n            'dayofweek'\r\n        )`\r\n\r\nIn some cases I need to join this query to another table and when that happens the group by clause outputs SQL as \r\n\r\n `GROUP BY base_image.dayofweek`\r\n\r\n(where base_image is the base table in the query). \r\nHowever, 'dayofweek' is an alias and should remain unprefixed. Is there some way to stop it prefixing the group by term?\r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/229", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/229/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/229/events", "html_url": "https://github.com/kayak/pypika/issues/229", "id": 423030114, "node_id": "MDU6SXNzdWU0MjMwMzAxMTQ=", "number": 229, "title": "Document goal to avoid validation inside PyPika", "user": {"login": "jtrain", "id": 706148, "node_id": "MDQ6VXNlcjcwNjE0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/706148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrain", "html_url": "https://github.com/jtrain", "followers_url": "https://api.github.com/users/jtrain/followers", "following_url": "https://api.github.com/users/jtrain/following{/other_user}", "gists_url": "https://api.github.com/users/jtrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrain/subscriptions", "organizations_url": "https://api.github.com/users/jtrain/orgs", "repos_url": "https://api.github.com/users/jtrain/repos", "events_url": "https://api.github.com/users/jtrain/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-20T01:56:07Z", "updated_at": "2019-03-26T17:06:12Z", "closed_at": "2019-03-26T17:06:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It is useful to know when picking up the library, and would save on questions being asked for such validation features being added.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/227", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/227/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/227/events", "html_url": "https://github.com/kayak/pypika/issues/227", "id": 422713790, "node_id": "MDU6SXNzdWU0MjI3MTM3OTA=", "number": 227, "title": "Allow filtering by non existant table", "user": {"login": "jtrain", "id": 706148, "node_id": "MDQ6VXNlcjcwNjE0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/706148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrain", "html_url": "https://github.com/jtrain", "followers_url": "https://api.github.com/users/jtrain/followers", "following_url": "https://api.github.com/users/jtrain/following{/other_user}", "gists_url": "https://api.github.com/users/jtrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrain/subscriptions", "organizations_url": "https://api.github.com/users/jtrain/orgs", "repos_url": "https://api.github.com/users/jtrain/repos", "events_url": "https://api.github.com/users/jtrain/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-19T12:50:35Z", "updated_at": "2019-04-12T12:24:45Z", "closed_at": "2019-04-12T12:24:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When creating a subquery, often I'd like to reference the parent table id.\r\nHowever this validation code https://github.com/kayak/pypika/blob/master/pypika/queries.py#L718 prevents that.\r\n\r\nFor a contrived example\r\n\r\n```\r\nTeacher, School = Tables(\"teacher\", \"school\")\r\nQuery.from_(School).select(\r\n Query.from_(Teacher).select(Teacher.name).where(\r\n  Teacher.current_school_id==School.id\r\n  ).limit(1).as_('a_teacher')\r\n)\r\n```\r\n\r\nHere Teacher is referencing the parent 'School' table and the validation would fail.\r\n\r\nMy use case is generally including a JSONB array of tags or similar from the result of a subquery in the parent.\r\n\r\nI have worked around this by adding the table, filtering the subquery, then removing the table. Kind of like a decorate / action / undecorate pattern.\r\n\r\nOptions I can think of for solving this:\r\n1. A flag that would disable this particular validation check (but still allow others);\r\n2. An API for a validations framework where validations can be added and removed;\r\n3. A way of telling a subquery about a known table, that would pass this validation and have no effect on output SQL otherwise; and\r\n4. Continue the decorate / action /undecorate pattern in our code.\r\n\r\nI'm happy to develop a PR if any of these, or another option excites you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/226", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/226/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/226/events", "html_url": "https://github.com/kayak/pypika/issues/226", "id": 422707060, "node_id": "MDU6SXNzdWU0MjI3MDcwNjA=", "number": 226, "title": "Support for empty `isin` value", "user": {"login": "jtrain", "id": 706148, "node_id": "MDQ6VXNlcjcwNjE0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/706148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrain", "html_url": "https://github.com/jtrain", "followers_url": "https://api.github.com/users/jtrain/followers", "following_url": "https://api.github.com/users/jtrain/following{/other_user}", "gists_url": "https://api.github.com/users/jtrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrain/subscriptions", "organizations_url": "https://api.github.com/users/jtrain/orgs", "repos_url": "https://api.github.com/users/jtrain/repos", "events_url": "https://api.github.com/users/jtrain/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-19T12:34:21Z", "updated_at": "2019-03-19T20:58:56Z", "closed_at": "2019-03-19T13:12:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When building a query like\r\n\r\n`MyTable = Table('demo'); Query.from_(MyTable).where(MyTable.id.isin(value)).select(MyTable.id)`\r\n\r\nand `value = []` the sql is generated:\r\n\r\n`SELECT \"demo\".\"id\" FROM \"demo\" WHERE \"demo\".\"id\" IN ()`\r\n\r\nof which the `IN ()` is invalid for a Postgres database.\r\n\r\nIt would be nice if somehow we could prevent emitting the IN filter in cases where the `value` was empty.\r\n\r\nThe reason I'd like that, is it would behave similarly to django's queryset which won't generate the invalid SQL, and the code I have managing the differences could be removed.\r\n\r\nFor options to solve this I see two:\r\n\r\n1. We could check `values` before putting them into pypika queries in our own code; or\r\n2. pypika could do additional validation on inputs to prevent this particular user mistake.\r\n\r\nThe downsides to 2) would be that all pika code now carries the burden of this extra validation, and perhaps other similar validations down the line.\r\n\r\nI'm happy to generate a PR if there is interest\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/220", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/220/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/220/events", "html_url": "https://github.com/kayak/pypika/issues/220", "id": 413142360, "node_id": "MDU6SXNzdWU0MTMxNDIzNjA=", "number": 220, "title": "INSERT with subquery doesn't wrap with parentheses", "user": {"login": "stickystyle", "id": 858414, "node_id": "MDQ6VXNlcjg1ODQxNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/858414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stickystyle", "html_url": "https://github.com/stickystyle", "followers_url": "https://api.github.com/users/stickystyle/followers", "following_url": "https://api.github.com/users/stickystyle/following{/other_user}", "gists_url": "https://api.github.com/users/stickystyle/gists{/gist_id}", "starred_url": "https://api.github.com/users/stickystyle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stickystyle/subscriptions", "organizations_url": "https://api.github.com/users/stickystyle/orgs", "repos_url": "https://api.github.com/users/stickystyle/repos", "events_url": "https://api.github.com/users/stickystyle/events{/privacy}", "received_events_url": "https://api.github.com/users/stickystyle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "twheys", "id": 2015509, "node_id": "MDQ6VXNlcjIwMTU1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2015509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twheys", "html_url": "https://github.com/twheys", "followers_url": "https://api.github.com/users/twheys/followers", "following_url": "https://api.github.com/users/twheys/following{/other_user}", "gists_url": "https://api.github.com/users/twheys/gists{/gist_id}", "starred_url": "https://api.github.com/users/twheys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twheys/subscriptions", "organizations_url": "https://api.github.com/users/twheys/orgs", "repos_url": "https://api.github.com/users/twheys/repos", "events_url": "https://api.github.com/users/twheys/events{/privacy}", "received_events_url": "https://api.github.com/users/twheys/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "twheys", "id": 2015509, "node_id": "MDQ6VXNlcjIwMTU1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2015509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twheys", "html_url": "https://github.com/twheys", "followers_url": "https://api.github.com/users/twheys/followers", "following_url": "https://api.github.com/users/twheys/following{/other_user}", "gists_url": "https://api.github.com/users/twheys/gists{/gist_id}", "starred_url": "https://api.github.com/users/twheys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twheys/subscriptions", "organizations_url": "https://api.github.com/users/twheys/orgs", "repos_url": "https://api.github.com/users/twheys/repos", "events_url": "https://api.github.com/users/twheys/events{/privacy}", "received_events_url": "https://api.github.com/users/twheys/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-02-21T21:57:21Z", "updated_at": "2019-04-06T09:18:02Z", "closed_at": "2019-04-06T09:18:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using v0.25.1, if I try to do an insert where one of the values is a subquery, pypika doesn't wrap the subquery in parentheses within the `VALUES` section.\r\n\r\n```python\r\npurchase_order_item = pypika.Table(\"purchase_order_item\")\r\npart = pypika.Table(\"part\")\r\n\r\nsubquery = (\r\n            pypika.MySQLQuery.from_(part)\r\n            .select(part.part_id)\r\n            .where(part.part_number == \"FOOBAR\")\r\n        )\r\n\r\npypika.MySQLQuery.into(purchase_order_item).columns(purchase_order_item.id_part, purchase_order_item.id_customer).insert(subquery, 12345)\r\n```\r\n\r\nThe above code generates this invalid query...\r\n```sql\r\nINSERT INTO `purchase_order_item` \r\n(`id_part`,`id_customer`) \r\nVALUES \r\n(SELECT `part_id` FROM `part` WHERE `part_number`='FOOBAR',12345)\r\n```\r\n\r\nWhen it should be...\r\n```sql\r\nINSERT INTO `purchase_order_item` \r\n(`id_part`,`id_customer`) \r\nVALUES \r\n((SELECT `part_id` FROM `part` WHERE `part_number`='FOOBAR'),12345)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/217", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/217/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/217/events", "html_url": "https://github.com/kayak/pypika/issues/217", "id": 408160456, "node_id": "MDU6SXNzdWU0MDgxNjA0NTY=", "number": 217, "title": "Bracket Term should be formatted with an alias when specified", "user": {"login": "vladaspasic", "id": 2663300, "node_id": "MDQ6VXNlcjI2NjMzMDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2663300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vladaspasic", "html_url": "https://github.com/vladaspasic", "followers_url": "https://api.github.com/users/vladaspasic/followers", "following_url": "https://api.github.com/users/vladaspasic/following{/other_user}", "gists_url": "https://api.github.com/users/vladaspasic/gists{/gist_id}", "starred_url": "https://api.github.com/users/vladaspasic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vladaspasic/subscriptions", "organizations_url": "https://api.github.com/users/vladaspasic/orgs", "repos_url": "https://api.github.com/users/vladaspasic/repos", "events_url": "https://api.github.com/users/vladaspasic/events{/privacy}", "received_events_url": "https://api.github.com/users/vladaspasic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-08T13:50:03Z", "updated_at": "2019-02-11T10:08:48Z", "closed_at": "2019-02-11T10:08:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/214", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/214/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/214/events", "html_url": "https://github.com/kayak/pypika/issues/214", "id": 407052932, "node_id": "MDU6SXNzdWU0MDcwNTI5MzI=", "number": 214, "title": "Add support for int reference of selects on groupby", "user": {"login": "gonzalezzfelipe", "id": 35146819, "node_id": "MDQ6VXNlcjM1MTQ2ODE5", "avatar_url": "https://avatars0.githubusercontent.com/u/35146819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gonzalezzfelipe", "html_url": "https://github.com/gonzalezzfelipe", "followers_url": "https://api.github.com/users/gonzalezzfelipe/followers", "following_url": "https://api.github.com/users/gonzalezzfelipe/following{/other_user}", "gists_url": "https://api.github.com/users/gonzalezzfelipe/gists{/gist_id}", "starred_url": "https://api.github.com/users/gonzalezzfelipe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gonzalezzfelipe/subscriptions", "organizations_url": "https://api.github.com/users/gonzalezzfelipe/orgs", "repos_url": "https://api.github.com/users/gonzalezzfelipe/repos", "events_url": "https://api.github.com/users/gonzalezzfelipe/events{/privacy}", "received_events_url": "https://api.github.com/users/gonzalezzfelipe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "twheys", "id": 2015509, "node_id": "MDQ6VXNlcjIwMTU1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2015509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twheys", "html_url": "https://github.com/twheys", "followers_url": "https://api.github.com/users/twheys/followers", "following_url": "https://api.github.com/users/twheys/following{/other_user}", "gists_url": "https://api.github.com/users/twheys/gists{/gist_id}", "starred_url": "https://api.github.com/users/twheys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twheys/subscriptions", "organizations_url": "https://api.github.com/users/twheys/orgs", "repos_url": "https://api.github.com/users/twheys/repos", "events_url": "https://api.github.com/users/twheys/events{/privacy}", "received_events_url": "https://api.github.com/users/twheys/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "twheys", "id": 2015509, "node_id": "MDQ6VXNlcjIwMTU1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2015509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twheys", "html_url": "https://github.com/twheys", "followers_url": "https://api.github.com/users/twheys/followers", "following_url": "https://api.github.com/users/twheys/following{/other_user}", "gists_url": "https://api.github.com/users/twheys/gists{/gist_id}", "starred_url": "https://api.github.com/users/twheys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twheys/subscriptions", "organizations_url": "https://api.github.com/users/twheys/orgs", "repos_url": "https://api.github.com/users/twheys/repos", "events_url": "https://api.github.com/users/twheys/events{/privacy}", "received_events_url": "https://api.github.com/users/twheys/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-02-06T02:02:31Z", "updated_at": "2019-03-26T17:15:45Z", "closed_at": "2019-03-26T17:15:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using Presto, a query with this syntax is completely valid:\r\n```\r\nSELECT column_1, COUNT()\r\nFROM table\r\nGROUP BY 1\r\nORDER BY 2\r\n```\r\nand is equivalent to:\r\n```\r\nSELECT column_1, COUNT()\r\nFROM table\r\nGROUP BY column_1\r\nORDER BY COUNT()\r\n```\r\nA small change could be done to the `groupby` method that adds this support, as to be able to do:\r\n```\r\nfrom pypika import Query, Table\r\n\r\ntable = Table('table')\r\nquery = Query.from_(table).select(table.column_1, table.column_2).groupby(1)\r\nprint(query)\r\n```\r\nresulting in:\r\n`SELECT \"table\".\"column_1\", \"table\".\"column_2\" FROM \"table:\" GROUP BY 1`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/212", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/212/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/212/events", "html_url": "https://github.com/kayak/pypika/issues/212", "id": 406476822, "node_id": "MDU6SXNzdWU0MDY0NzY4MjI=", "number": 212, "title": "How to include SQL_CALC_FOUND_ROWS option?", "user": {"login": "stickystyle", "id": 858414, "node_id": "MDQ6VXNlcjg1ODQxNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/858414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stickystyle", "html_url": "https://github.com/stickystyle", "followers_url": "https://api.github.com/users/stickystyle/followers", "following_url": "https://api.github.com/users/stickystyle/following{/other_user}", "gists_url": "https://api.github.com/users/stickystyle/gists{/gist_id}", "starred_url": "https://api.github.com/users/stickystyle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stickystyle/subscriptions", "organizations_url": "https://api.github.com/users/stickystyle/orgs", "repos_url": "https://api.github.com/users/stickystyle/repos", "events_url": "https://api.github.com/users/stickystyle/events{/privacy}", "received_events_url": "https://api.github.com/users/stickystyle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-02-04T19:14:25Z", "updated_at": "2019-02-06T10:35:12Z", "closed_at": "2019-02-06T10:35:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a query that I'm trying to replicate in pypika that uses the `SQL_CALC_FOUND_ROWS` [1] option, but cannot figure out a way to get the option in the query. If I add it as a column, pypika wants to select it, but the option shouldn't be quoted in any way and there shouldn't be a comma to separate the option from the columns.\r\n\r\n```python\r\npurchase_order = pypika.Table(\"purchase_order\")\r\nquery = (\r\n        pypika.MySQLQuery.from_(purchase_order)\r\n        .where(purchase_order.is_active == 1)\r\n        .select(\"SQL_CALC_FOUND_ROWS\")\r\n        .select(purchase_order.purchase_order_id.as_(\"_id\"))\r\n        .limit(pypika.Parameter(\"%(limit)s\"))\r\n    )\r\n```\r\n\r\nwill result in \r\n\r\n```sql\r\nSELECT \r\n  `SQL_CALC_FOUND_ROWS`,\r\n  `purchase_order_id` `_id`\r\nFROM `purchase_order` \r\nWHERE `is_active`=1 \r\nLIMIT %(limit)s\r\n```\r\n\r\nhowever the correct syntax for this option is...\r\n\r\n```sql\r\nSELECT \r\n  SQL_CALC_FOUND_ROWS\r\n  `purchase_order_id` `_id`\r\nFROM `purchase_order` \r\nWHERE `is_active`=1 \r\nLIMIT %(limit)s\r\n```\r\n\r\nIs there a way I can insert this option? I saw a `Psuedocolumn` class that _seems_ like the right area, but if I try defining a new `Psuedocolumn` and passing it in, I get an exception raised.\r\n\r\n```python\r\npurchase_order = pypika.Table(\"purchase_order\")\r\nCalcFoundRows = pypika.terms.Psuedocolumn('SQL_CALC_FOUND_ROWS')\r\nquery = (\r\n        pypika.MySQLQuery.from_(purchase_order)\r\n        .where(purchase_order.is_active == 1)\r\n        .select(CalcFoundRows)\r\n        .select(purchase_order.purchase_order_id.as_(\"_id\"))\r\n        .limit(pypika.Parameter(\"%(limit)s\"))\r\n    )\r\n```\r\n\r\nraises...\r\n```\r\nAttributeError\r\n'Psuedocolumn' object has no attribute 'table'\r\n```\r\n\r\nAny pointers on how I could get this to work? This is a fantastic lib by the way, I needed a way to programmatically define queries and *really* didn't want to throw an ORM into the mix. Thanks.\r\n\r\n[1] https://dev.mysql.com/doc/refman/5.7/en/information-functions.html#function_found-rows", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kayak/pypika/issues/211", "repository_url": "https://api.github.com/repos/kayak/pypika", "labels_url": "https://api.github.com/repos/kayak/pypika/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/kayak/pypika/issues/211/comments", "events_url": "https://api.github.com/repos/kayak/pypika/issues/211/events", "html_url": "https://github.com/kayak/pypika/issues/211", "id": 405729946, "node_id": "MDU6SXNzdWU0MDU3Mjk5NDY=", "number": 211, "title": "Oracle SQL limit syntax is wrong", "user": {"login": "Spenhouet", "id": 7819068, "node_id": "MDQ6VXNlcjc4MTkwNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7819068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Spenhouet", "html_url": "https://github.com/Spenhouet", "followers_url": "https://api.github.com/users/Spenhouet/followers", "following_url": "https://api.github.com/users/Spenhouet/following{/other_user}", "gists_url": "https://api.github.com/users/Spenhouet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Spenhouet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Spenhouet/subscriptions", "organizations_url": "https://api.github.com/users/Spenhouet/orgs", "repos_url": "https://api.github.com/users/Spenhouet/repos", "events_url": "https://api.github.com/users/Spenhouet/events{/privacy}", "received_events_url": "https://api.github.com/users/Spenhouet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-01T14:42:47Z", "updated_at": "2020-04-09T12:58:51Z", "closed_at": "2020-04-09T12:58:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I want that only x entries will be returned then I could use `.limit(x)` but for Oracle the syntax isn't correct.\r\n\r\nUsing `OracleQuery` and `.limit(2)` results in\r\n\r\n`'SELECT * FROM \"table\" LIMIT 2'`\r\n\r\nbut that doesn't work in Oracle DB.\r\n\r\nCorrect would be:\r\n\r\n`'SELECT * FROM \"table\" WHERE ROWNUM <= 2'`\r\n", "performed_via_github_app": null, "score": 1.0}]}