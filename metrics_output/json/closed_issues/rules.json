{"total_count": 72, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/dfunckt/django-rules/issues/122", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/122/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/122/events", "html_url": "https://github.com/dfunckt/django-rules/issues/122", "id": 640240781, "node_id": "MDU6SXNzdWU2NDAyNDA3ODE=", "number": 122, "title": "Method to list all predicates/rules?", "user": {"login": "benwhalley", "id": 524696, "node_id": "MDQ6VXNlcjUyNDY5Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/524696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benwhalley", "html_url": "https://github.com/benwhalley", "followers_url": "https://api.github.com/users/benwhalley/followers", "following_url": "https://api.github.com/users/benwhalley/following{/other_user}", "gists_url": "https://api.github.com/users/benwhalley/gists{/gist_id}", "starred_url": "https://api.github.com/users/benwhalley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benwhalley/subscriptions", "organizations_url": "https://api.github.com/users/benwhalley/orgs", "repos_url": "https://api.github.com/users/benwhalley/repos", "events_url": "https://api.github.com/users/benwhalley/events{/privacy}", "received_events_url": "https://api.github.com/users/benwhalley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-17T08:18:55Z", "updated_at": "2020-06-17T10:52:04Z", "closed_at": "2020-06-17T10:52:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there way to list all registered predicates/rules, e.g. for the purposes of documenting permissions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/121", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/121/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/121/events", "html_url": "https://github.com/dfunckt/django-rules/issues/121", "id": 618262142, "node_id": "MDU6SXNzdWU2MTgyNjIxNDI=", "number": 121, "title": "Are there any suggested best practices for 'add' permisisons and parent-child relationships?", "user": {"login": "KyeRussell", "id": 488182, "node_id": "MDQ6VXNlcjQ4ODE4Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/488182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KyeRussell", "html_url": "https://github.com/KyeRussell", "followers_url": "https://api.github.com/users/KyeRussell/followers", "following_url": "https://api.github.com/users/KyeRussell/following{/other_user}", "gists_url": "https://api.github.com/users/KyeRussell/gists{/gist_id}", "starred_url": "https://api.github.com/users/KyeRussell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KyeRussell/subscriptions", "organizations_url": "https://api.github.com/users/KyeRussell/orgs", "repos_url": "https://api.github.com/users/KyeRussell/repos", "events_url": "https://api.github.com/users/KyeRussell/events{/privacy}", "received_events_url": "https://api.github.com/users/KyeRussell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T14:08:33Z", "updated_at": "2020-05-18T16:37:55Z", "closed_at": "2020-05-18T16:37:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nConsider a standard parent-chid relationship (e.g. a `House` has many `Room`s). It is common to want to base `Room`'s `create`/`add` permission on the 'context' of the parent `House` (e.g. the user should only be able to add a new `Room` to a `House` that they own).\r\n\r\nThe only way that I can tell that this would be addressed in this project is if the permission `add` instead existed on the `House` model (e.g. `House.add_room`), as the `House` instance context would be available to the predicate. This feels _largely_ within the spirit of the project however I don't believe that it's explicitly addressed.\r\n\r\nIs this a valid pattern? Are there any best practices to overcome this?\r\n\r\nPlease consider this either a documentation update suggestion, a functionality suggestion, or (at worst) a support request in the form of a GitHub issue. I don't **believe** that this has been addressed in the README, but please let me know if I am wrong as it's about time for bed!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/119", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/119/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/119/events", "html_url": "https://github.com/dfunckt/django-rules/issues/119", "id": 590995950, "node_id": "MDU6SXNzdWU1OTA5OTU5NTA=", "number": 119, "title": "can I set a rule that only cares abt the attribtues of the object but not the user?", "user": {"login": "simkimsia", "id": 245021, "node_id": "MDQ6VXNlcjI0NTAyMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/245021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simkimsia", "html_url": "https://github.com/simkimsia", "followers_url": "https://api.github.com/users/simkimsia/followers", "following_url": "https://api.github.com/users/simkimsia/following{/other_user}", "gists_url": "https://api.github.com/users/simkimsia/gists{/gist_id}", "starred_url": "https://api.github.com/users/simkimsia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simkimsia/subscriptions", "organizations_url": "https://api.github.com/users/simkimsia/orgs", "repos_url": "https://api.github.com/users/simkimsia/repos", "events_url": "https://api.github.com/users/simkimsia/events{/privacy}", "received_events_url": "https://api.github.com/users/simkimsia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-31T10:43:24Z", "updated_at": "2020-04-07T02:30:07Z", "closed_at": "2020-04-07T02:30:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "let's say I have a rule taht is the below\r\n\r\n```python\r\n\r\n@rules.predicate\r\ndef is_assignable(user, instance):\r\n    return instance.status == \"gr_incomplete\"\r\n```\r\nCan I simply have a rule that ignores the user? ANd do I still have to mock up a request and user in order to run unit tests for this?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/118", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/118/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/118/events", "html_url": "https://github.com/dfunckt/django-rules/issues/118", "id": 589617541, "node_id": "MDU6SXNzdWU1ODk2MTc1NDE=", "number": 118, "title": "How do I access the post object in a predicate?", "user": {"login": "Routhinator", "id": 727535, "node_id": "MDQ6VXNlcjcyNzUzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/727535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Routhinator", "html_url": "https://github.com/Routhinator", "followers_url": "https://api.github.com/users/Routhinator/followers", "following_url": "https://api.github.com/users/Routhinator/following{/other_user}", "gists_url": "https://api.github.com/users/Routhinator/gists{/gist_id}", "starred_url": "https://api.github.com/users/Routhinator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Routhinator/subscriptions", "organizations_url": "https://api.github.com/users/Routhinator/orgs", "repos_url": "https://api.github.com/users/Routhinator/repos", "events_url": "https://api.github.com/users/Routhinator/events{/privacy}", "received_events_url": "https://api.github.com/users/Routhinator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-28T17:06:48Z", "updated_at": "2020-05-18T16:47:57Z", "closed_at": "2020-05-18T16:47:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to check if a user posting a discussion has access to the topic they are trying to associate the discussion with. However when the user posts, the second argument in the predicate, `object` is always `None` - I need to access the post body to check the `topic` attribute and compare to the users groups. \r\n\r\nHow do I access the post object? Is it available in the predicate context somewhere if I bind the predicate?\r\n\r\nThis is the logic I have so far which works for reading discussion objects, but it looks like I need different logic for POST requests due to the object being null:\r\n\r\n```python\r\n@rules.predicate\r\ndef is_allowed(user, content):\r\n    \"\"\"\r\n    | Accepts a user and content object and checks if the user is allowed to view it.\r\n    :param user:\r\n    :param content:\r\n    :return:\r\n    \"\"\"\r\n    if content is None or not (hasattr(content, 'topic') or not hasattr(content, 'group')):\r\n        LOGGER.debug('Content was null or did not have topic')\r\n        LOGGER.debug('Content: %s', repr(content))\r\n        LOGGER.debug('User: %s', repr(user))\r\n        return False\r\n    if hasattr(content, 'group'):\r\n        if content.group is None or not hasattr(content.group, 'name'):\r\n            LOGGER.debug('Topic group was none or did not have name')\r\n            return True\r\n        LOGGER.debug('Checking if member is in group %s', content.group.name)\r\n        if content.group.name in user.groups.all():\r\n            return True\r\n    if hasattr(content, 'topic'):\r\n        if content.topic.group is None or not hasattr(content.topic.group, 'name'):\r\n            LOGGER.debug('Topic group was none or did not have name')\r\n            return True\r\n        LOGGER.debug('Checking if member is in group %s', content.topic.group.name)\r\n        if content.topic.group.name in user.groups.all():\r\n            return True\r\n    return False\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/117", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/117/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/117/events", "html_url": "https://github.com/dfunckt/django-rules/issues/117", "id": 575129630, "node_id": "MDU6SXNzdWU1NzUxMjk2MzA=", "number": 117, "title": "Is it possible to have DRF list view only return objects for which the user has permission?", "user": {"login": "Routhinator", "id": 727535, "node_id": "MDQ6VXNlcjcyNzUzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/727535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Routhinator", "html_url": "https://github.com/Routhinator", "followers_url": "https://api.github.com/users/Routhinator/followers", "following_url": "https://api.github.com/users/Routhinator/following{/other_user}", "gists_url": "https://api.github.com/users/Routhinator/gists{/gist_id}", "starred_url": "https://api.github.com/users/Routhinator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Routhinator/subscriptions", "organizations_url": "https://api.github.com/users/Routhinator/orgs", "repos_url": "https://api.github.com/users/Routhinator/repos", "events_url": "https://api.github.com/users/Routhinator/events{/privacy}", "received_events_url": "https://api.github.com/users/Routhinator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-04T04:30:07Z", "updated_at": "2020-03-04T21:13:36Z", "closed_at": "2020-03-04T21:13:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see the docs say that the default permission mixin does nothing for list, however can I see an example or is it possible to have the list view only return objects that the user has permissions to see based on the view permission?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/116", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/116/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/116/events", "html_url": "https://github.com/dfunckt/django-rules/issues/116", "id": 570872551, "node_id": "MDU6SXNzdWU1NzA4NzI1NTE=", "number": 116, "title": "Using rules with querysets", "user": {"login": "iSteal", "id": 45405755, "node_id": "MDQ6VXNlcjQ1NDA1NzU1", "avatar_url": "https://avatars2.githubusercontent.com/u/45405755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iSteal", "html_url": "https://github.com/iSteal", "followers_url": "https://api.github.com/users/iSteal/followers", "following_url": "https://api.github.com/users/iSteal/following{/other_user}", "gists_url": "https://api.github.com/users/iSteal/gists{/gist_id}", "starred_url": "https://api.github.com/users/iSteal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iSteal/subscriptions", "organizations_url": "https://api.github.com/users/iSteal/orgs", "repos_url": "https://api.github.com/users/iSteal/repos", "events_url": "https://api.github.com/users/iSteal/events{/privacy}", "received_events_url": "https://api.github.com/users/iSteal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T22:18:41Z", "updated_at": "2020-02-25T22:48:30Z", "closed_at": "2020-02-25T22:48:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to apply rules to queries, such as `models.Test.objects.all()`? I know that I can run rules on the object and then recreate the query with those objects but that would be slow, especially for large lists. I thought about a custom manager, but I run into the same problem. What would be the best way to do this? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/115", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/115/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/115/events", "html_url": "https://github.com/dfunckt/django-rules/issues/115", "id": 570776417, "node_id": "MDU6SXNzdWU1NzA3NzY0MTc=", "number": 115, "title": "Where does rules.py get executed in the test app?", "user": {"login": "iSteal", "id": 45405755, "node_id": "MDQ6VXNlcjQ1NDA1NzU1", "avatar_url": "https://avatars2.githubusercontent.com/u/45405755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iSteal", "html_url": "https://github.com/iSteal", "followers_url": "https://api.github.com/users/iSteal/followers", "following_url": "https://api.github.com/users/iSteal/following{/other_user}", "gists_url": "https://api.github.com/users/iSteal/gists{/gist_id}", "starred_url": "https://api.github.com/users/iSteal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iSteal/subscriptions", "organizations_url": "https://api.github.com/users/iSteal/orgs", "repos_url": "https://api.github.com/users/iSteal/repos", "events_url": "https://api.github.com/users/iSteal/events{/privacy}", "received_events_url": "https://api.github.com/users/iSteal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T19:18:31Z", "updated_at": "2020-02-25T22:03:42Z", "closed_at": "2020-02-25T22:03:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Rules.py is created but I don't see where it is executed. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/114", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/114/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/114/events", "html_url": "https://github.com/dfunckt/django-rules/issues/114", "id": 569395971, "node_id": "MDU6SXNzdWU1NjkzOTU5NzE=", "number": 114, "title": "Using group permissions and rules", "user": {"login": "felipeacunago", "id": 44075111, "node_id": "MDQ6VXNlcjQ0MDc1MTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/44075111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felipeacunago", "html_url": "https://github.com/felipeacunago", "followers_url": "https://api.github.com/users/felipeacunago/followers", "following_url": "https://api.github.com/users/felipeacunago/following{/other_user}", "gists_url": "https://api.github.com/users/felipeacunago/gists{/gist_id}", "starred_url": "https://api.github.com/users/felipeacunago/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felipeacunago/subscriptions", "organizations_url": "https://api.github.com/users/felipeacunago/orgs", "repos_url": "https://api.github.com/users/felipeacunago/repos", "events_url": "https://api.github.com/users/felipeacunago/events{/privacy}", "received_events_url": "https://api.github.com/users/felipeacunago/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-22T21:29:56Z", "updated_at": "2020-03-02T00:55:53Z", "closed_at": "2020-03-02T00:55:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys, how can I create a rule that works like the default group permission system?, as the rules library overrides the default permissions backend I don't know how to access Permissions object because of course the has_perm method doesn't consider the Permissions.\r\n\r\nI don't want to use is_group_member, as I don't want to explicitly tell the app the name of the group.\r\n\r\nWhat I'm trying to achieve is recreating a rule that works like the old has_perm for groups permissions.\r\nThis because I want to use a custom rule in addition to the default system.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/113", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/113/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/113/events", "html_url": "https://github.com/dfunckt/django-rules/issues/113", "id": 564253873, "node_id": "MDU6SXNzdWU1NjQyNTM4NzM=", "number": 113, "title": "Rule chain for if A: return B", "user": {"login": "BoPeng", "id": 9889312, "node_id": "MDQ6VXNlcjk4ODkzMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9889312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoPeng", "html_url": "https://github.com/BoPeng", "followers_url": "https://api.github.com/users/BoPeng/followers", "following_url": "https://api.github.com/users/BoPeng/following{/other_user}", "gists_url": "https://api.github.com/users/BoPeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoPeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoPeng/subscriptions", "organizations_url": "https://api.github.com/users/BoPeng/orgs", "repos_url": "https://api.github.com/users/BoPeng/repos", "events_url": "https://api.github.com/users/BoPeng/events{/privacy}", "received_events_url": "https://api.github.com/users/BoPeng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-02-12T20:33:41Z", "updated_at": "2020-03-24T14:04:56Z", "closed_at": "2020-03-24T13:55:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some rules like\r\n\r\n```\r\n@rules.predicate\r\ndef can_do_something(user, target):\r\n    if user.is_anonymous:\r\n        return test_A(user, target)\r\n    elif user.is_admin:\r\n        return test_B(user, target)\r\n    else:\r\n        return test_C(user, target)\r\n```\r\nwhich I would like to translate to \r\n\r\n```\r\ncan_do_something = (rules.is_anonymous & test_A) | (rules.is_admin & test_B) | (rules.is_authenticated & test_C)\r\n```\r\nThe problem is that in the original implementation if `user.is_anonymous` is `True`, the checker will return immediately with `test_A`, but in the new implementation the checker will go through all cases  if `is_anonymous & test_A` is `False`. How do I avoid evaluating all three cases? It looks like I am missing something obvious here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/111", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/111/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/111/events", "html_url": "https://github.com/dfunckt/django-rules/issues/111", "id": 537591705, "node_id": "MDU6SXNzdWU1Mzc1OTE3MDU=", "number": 111, "title": "Django 3.0 compatibility", "user": {"login": "rixx", "id": 2657547, "node_id": "MDQ6VXNlcjI2NTc1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2657547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rixx", "html_url": "https://github.com/rixx", "followers_url": "https://api.github.com/users/rixx/followers", "following_url": "https://api.github.com/users/rixx/following{/other_user}", "gists_url": "https://api.github.com/users/rixx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rixx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rixx/subscriptions", "organizations_url": "https://api.github.com/users/rixx/orgs", "repos_url": "https://api.github.com/users/rixx/repos", "events_url": "https://api.github.com/users/rixx/events{/privacy}", "received_events_url": "https://api.github.com/users/rixx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-13T14:52:26Z", "updated_at": "2020-04-30T18:38:20Z", "closed_at": "2020-01-17T10:24:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Django 3.0 does not include `available_attrs` anymore, which is currently imported, but unused. (A derp on my part, apologies.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/109", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/109/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/109/events", "html_url": "https://github.com/dfunckt/django-rules/issues/109", "id": 529384159, "node_id": "MDU6SXNzdWU1MjkzODQxNTk=", "number": 109, "title": "Autodiscover and model meta", "user": {"login": "hrbonz", "id": 99708, "node_id": "MDQ6VXNlcjk5NzA4", "avatar_url": "https://avatars1.githubusercontent.com/u/99708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrbonz", "html_url": "https://github.com/hrbonz", "followers_url": "https://api.github.com/users/hrbonz/followers", "following_url": "https://api.github.com/users/hrbonz/following{/other_user}", "gists_url": "https://api.github.com/users/hrbonz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrbonz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrbonz/subscriptions", "organizations_url": "https://api.github.com/users/hrbonz/orgs", "repos_url": "https://api.github.com/users/hrbonz/repos", "events_url": "https://api.github.com/users/hrbonz/events{/privacy}", "received_events_url": "https://api.github.com/users/hrbonz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-27T14:33:21Z", "updated_at": "2019-11-27T15:14:22Z", "closed_at": "2019-11-27T15:14:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been wrestling with this a bit thinking that I was doing something wrong. What I've been trying to do is use the rules auto discover function combined with defining model permissions in the `Meta` class.\r\nI kept getting errors about my rules not being defined from the model and, indeed, if I got the \r\nAfter trying a few things (change order of installed apps,  redefine rules, etc), I decided to go heavy handed and trace the code using `pdb`. That's where I realized the [auto discover code](https://github.com/dfunckt/django-rules/blob/master/rules/apps.py#L8) is [called](https://github.com/django/django/blob/2.2.7/django/apps/registry.py#L121) in \"phase 3\" **after** the models have been initialized (in phase 2).\r\n\r\nI might be completely wrong but that would signal the fact that you can't indeed use both at the same time with the current mechanisms. Let me know if I misread the docs or am missing something obvious. If not, I think it would be possible to load the predicate through a lazy loader to get it to work properly without too much impact.\r\n\r\n\r\nI'm using Django 2.2.7 and rules 2.1 with Python 3.7.3 on a Debian buster system.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/103", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/103/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/103/events", "html_url": "https://github.com/dfunckt/django-rules/issues/103", "id": 482689698, "node_id": "MDU6SXNzdWU0ODI2ODk2OTg=", "number": 103, "title": "django-rules not working for Django Admin", "user": {"login": "zainab-amir", "id": 40633976, "node_id": "MDQ6VXNlcjQwNjMzOTc2", "avatar_url": "https://avatars1.githubusercontent.com/u/40633976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zainab-amir", "html_url": "https://github.com/zainab-amir", "followers_url": "https://api.github.com/users/zainab-amir/followers", "following_url": "https://api.github.com/users/zainab-amir/following{/other_user}", "gists_url": "https://api.github.com/users/zainab-amir/gists{/gist_id}", "starred_url": "https://api.github.com/users/zainab-amir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zainab-amir/subscriptions", "organizations_url": "https://api.github.com/users/zainab-amir/orgs", "repos_url": "https://api.github.com/users/zainab-amir/repos", "events_url": "https://api.github.com/users/zainab-amir/events{/privacy}", "received_events_url": "https://api.github.com/users/zainab-amir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-08-20T07:24:58Z", "updated_at": "2019-08-26T11:09:57Z", "closed_at": "2019-08-26T10:23:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am trying to use `django-rules` to restrict access to parts of Admin based on some predicates.\r\nHere is what I am doing according to the documentation\r\n```python\r\n# python version: 2.7.12\r\n# django version: 1.11.22\r\n\r\n# ---------------\r\nINSTALLED_APPS = [\r\n    'rules.apps.AutodiscoverRulesConfig'\r\n]\r\n\r\nAUTHENTICATION_BACKENDS = (\r\n    'rules.permissions.ObjectPermissionBackend',\r\n)\r\n\r\n# ---------------\r\n# allapps/restore/admin.py\r\nclass RestoreAdmin(ObjectPermissionsModelAdmin):\r\n     # Code for Admin goes here\r\n\r\n# ---------------\r\n#  allapps/restore/rules.py\r\n\r\n@rules.predicate\r\ndef request_user_has_restore_access(user=None):\r\n    # for the purpose of testing I am returning False\r\n    return False\r\n\r\nrules.add_perm('restore', rules.always_deny) # Using even this doesn't work\r\nrules.add_perm('restore.view_restore', request_user_has_restore_access)\r\nrules.add_perm('restore.add_restore', request_user_has_restore_access)\r\nrules.add_perm('restore.change_restore', request_user_has_restore_access)\r\nrules.add_perm('restore.delete_restore', request_user_has_restore_access)\r\n\r\n```\r\nThis doesn't work. I can still see the Restore app in django admin", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/101", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/101/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/101/events", "html_url": "https://github.com/dfunckt/django-rules/issues/101", "id": 479429532, "node_id": "MDU6SXNzdWU0Nzk0Mjk1MzI=", "number": 101, "title": "Missing files on pip package?", "user": {"login": "daniloandrademendes", "id": 41581777, "node_id": "MDQ6VXNlcjQxNTgxNzc3", "avatar_url": "https://avatars3.githubusercontent.com/u/41581777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniloandrademendes", "html_url": "https://github.com/daniloandrademendes", "followers_url": "https://api.github.com/users/daniloandrademendes/followers", "following_url": "https://api.github.com/users/daniloandrademendes/following{/other_user}", "gists_url": "https://api.github.com/users/daniloandrademendes/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniloandrademendes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniloandrademendes/subscriptions", "organizations_url": "https://api.github.com/users/daniloandrademendes/orgs", "repos_url": "https://api.github.com/users/daniloandrademendes/repos", "events_url": "https://api.github.com/users/daniloandrademendes/events{/privacy}", "received_events_url": "https://api.github.com/users/daniloandrademendes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-12T00:04:07Z", "updated_at": "2019-08-12T13:21:16Z", "closed_at": "2019-08-12T13:19:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI tried to get started from using django-rules on my project, and, for that, I've installed it using the `pip install rules` command, as specified in README. When I tried to import RulesModel, I realised that rules.contrib.models is missing.\r\n\r\nIs the package that I've installed wrong? Do I have to install another package to have RulesModel feature? Is this a bug?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/98", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/98/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/98/events", "html_url": "https://github.com/dfunckt/django-rules/issues/98", "id": 464799219, "node_id": "MDU6SXNzdWU0NjQ3OTkyMTk=", "number": 98, "title": "Django will drop django.utils.decorators.available_attrs", "user": {"login": "rixx", "id": 2657547, "node_id": "MDQ6VXNlcjI2NTc1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2657547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rixx", "html_url": "https://github.com/rixx", "followers_url": "https://api.github.com/users/rixx/followers", "following_url": "https://api.github.com/users/rixx/following{/other_user}", "gists_url": "https://api.github.com/users/rixx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rixx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rixx/subscriptions", "organizations_url": "https://api.github.com/users/rixx/orgs", "repos_url": "https://api.github.com/users/rixx/repos", "events_url": "https://api.github.com/users/rixx/events{/privacy}", "received_events_url": "https://api.github.com/users/rixx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-06T00:07:39Z", "updated_at": "2019-08-11T12:30:37Z", "closed_at": "2019-08-11T12:30:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Apparently django.utils.decorators.available_attrs was only a shim for Python 2 support, and since Python 2 has been dropped, here we are.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/96", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/96/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/96/events", "html_url": "https://github.com/dfunckt/django-rules/issues/96", "id": 464798601, "node_id": "MDU6SXNzdWU0NjQ3OTg2MDE=", "number": 96, "title": "Django will drop `django.utils.six` in upcoming release", "user": {"login": "rixx", "id": 2657547, "node_id": "MDQ6VXNlcjI2NTc1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2657547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rixx", "html_url": "https://github.com/rixx", "followers_url": "https://api.github.com/users/rixx/followers", "following_url": "https://api.github.com/users/rixx/following{/other_user}", "gists_url": "https://api.github.com/users/rixx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rixx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rixx/subscriptions", "organizations_url": "https://api.github.com/users/rixx/orgs", "repos_url": "https://api.github.com/users/rixx/repos", "events_url": "https://api.github.com/users/rixx/events{/privacy}", "received_events_url": "https://api.github.com/users/rixx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-06T00:01:49Z", "updated_at": "2019-08-11T12:30:36Z", "closed_at": "2019-08-11T12:30:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Django 3.0 will drop their vendored version of `six` ([see here](https://github.com/django/django/blob/53209f78302a639032afabf5326d28d4ddd9d03c/docs/releases/3.0.txt#L413). `django-rules` uses six only in one place for string type comparison.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/94", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/94/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/94/events", "html_url": "https://github.com/dfunckt/django-rules/issues/94", "id": 425057090, "node_id": "MDU6SXNzdWU0MjUwNTcwOTA=", "number": 94, "title": "How to identify the rule or permission name with in predicator?", "user": {"login": "ramana-kk", "id": 36444532, "node_id": "MDQ6VXNlcjM2NDQ0NTMy", "avatar_url": "https://avatars2.githubusercontent.com/u/36444532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramana-kk", "html_url": "https://github.com/ramana-kk", "followers_url": "https://api.github.com/users/ramana-kk/followers", "following_url": "https://api.github.com/users/ramana-kk/following{/other_user}", "gists_url": "https://api.github.com/users/ramana-kk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramana-kk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramana-kk/subscriptions", "organizations_url": "https://api.github.com/users/ramana-kk/orgs", "repos_url": "https://api.github.com/users/ramana-kk/repos", "events_url": "https://api.github.com/users/ramana-kk/events{/privacy}", "received_events_url": "https://api.github.com/users/ramana-kk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-25T18:38:50Z", "updated_at": "2019-03-27T05:48:30Z", "closed_at": "2019-03-25T18:46:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, Is it possible to get rule or permission name within predicator function? Becuase, I have written a generic function which checks and provides True or False. However, it needs the permission name.\r\n\r\nIs there any solution?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/92", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/92/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/92/events", "html_url": "https://github.com/dfunckt/django-rules/issues/92", "id": 394695928, "node_id": "MDU6SXNzdWUzOTQ2OTU5Mjg=", "number": 92, "title": "current build is failing", "user": {"login": "guyjacks", "id": 6286429, "node_id": "MDQ6VXNlcjYyODY0Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6286429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guyjacks", "html_url": "https://github.com/guyjacks", "followers_url": "https://api.github.com/users/guyjacks/followers", "following_url": "https://api.github.com/users/guyjacks/following{/other_user}", "gists_url": "https://api.github.com/users/guyjacks/gists{/gist_id}", "starred_url": "https://api.github.com/users/guyjacks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guyjacks/subscriptions", "organizations_url": "https://api.github.com/users/guyjacks/orgs", "repos_url": "https://api.github.com/users/guyjacks/repos", "events_url": "https://api.github.com/users/guyjacks/events{/privacy}", "received_events_url": "https://api.github.com/users/guyjacks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-28T18:38:42Z", "updated_at": "2019-08-11T12:15:00Z", "closed_at": "2019-08-11T12:14:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is this project still actively maintained?  I'm asking because the current build is failing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/91", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/91/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/91/events", "html_url": "https://github.com/dfunckt/django-rules/issues/91", "id": 369912191, "node_id": "MDU6SXNzdWUzNjk5MTIxOTE=", "number": 91, "title": "Consider joining project to jazzband", "user": {"login": "bpereto", "id": 1131885, "node_id": "MDQ6VXNlcjExMzE4ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1131885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpereto", "html_url": "https://github.com/bpereto", "followers_url": "https://api.github.com/users/bpereto/followers", "following_url": "https://api.github.com/users/bpereto/following{/other_user}", "gists_url": "https://api.github.com/users/bpereto/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpereto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpereto/subscriptions", "organizations_url": "https://api.github.com/users/bpereto/orgs", "repos_url": "https://api.github.com/users/bpereto/repos", "events_url": "https://api.github.com/users/bpereto/events{/privacy}", "received_events_url": "https://api.github.com/users/bpereto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-14T15:18:23Z", "updated_at": "2018-12-07T11:43:37Z", "closed_at": "2018-12-07T10:58:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are you open for more contributiors?\r\nmight join [jazzband](https://jazzband.co)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/89", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/89/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/89/events", "html_url": "https://github.com/dfunckt/django-rules/issues/89", "id": 369186206, "node_id": "MDU6SXNzdWUzNjkxODYyMDY=", "number": 89, "title": "Adding Django-Rules to django app breaks logout endpoint, even though it doesn't use Django-rules permissions", "user": {"login": "Routhinator", "id": 727535, "node_id": "MDQ6VXNlcjcyNzUzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/727535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Routhinator", "html_url": "https://github.com/Routhinator", "followers_url": "https://api.github.com/users/Routhinator/followers", "following_url": "https://api.github.com/users/Routhinator/following{/other_user}", "gists_url": "https://api.github.com/users/Routhinator/gists{/gist_id}", "starred_url": "https://api.github.com/users/Routhinator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Routhinator/subscriptions", "organizations_url": "https://api.github.com/users/Routhinator/orgs", "repos_url": "https://api.github.com/users/Routhinator/repos", "events_url": "https://api.github.com/users/Routhinator/events{/privacy}", "received_events_url": "https://api.github.com/users/Routhinator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-11T15:46:39Z", "updated_at": "2018-10-20T15:59:38Z", "closed_at": "2018-10-12T15:00:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a bit weird, and after debugging for a while, I can say that django-rules is causing this, but I am not sure how or why.\r\n\r\nI have the following ModelViewSet in DRF that does not implement any django-rules. All endpoints work as expected with django-rules installed EXCEPT logout. Django rules is used in other apps in my django site, like writings and comments for object permissions, but the members app does not use it at all.\r\n\r\nWhen someone (anyone) tries to logout, they are rejected with a 403, stating \"You do not have permission to perform this action\" - which is a message from the DRF permission system, however the same user is able to retrieve their user object from the /data/ endpoint, which uses the same settings for DRF permissions.\r\n\r\n```python\r\n\r\nclass UserViewSet(ModelViewSet):\r\n    \"\"\"\r\n    The User endpoint for settings, authentication and anything else.\r\n    \"\"\"\r\n    authentication_classes = DEFAULT_AUTH\r\n    permission_classes = (IsAdminUser,)\r\n    serializer_class = UserSerializer\r\n    queryset = Member.objects.all()\r\n\r\n    @action(methods=['get', 'post'], detail=False, permission_classes=[IsAuthenticated],\r\n            serializer_class=UserSerializer, authentication_classes=[TokenAuthentication],\r\n            url_path='data', url_name='data')\r\n    def data(self, request):\r\n        \"\"\"\r\n        Logged in users data retrieval + token refresh and user update endpoint.\r\n        :param request: DRF request object\r\n        :return: DRF Response object\r\n        \"\"\"\r\n        if request.method == 'GET':\r\n            data = UserSerializer(self.request.user, context=self.get_serializer_context()).data\r\n            return Response({\r\n                \"user\": data,\r\n            }, status=HTTP_200_OK)\r\n\r\n        if request.method == 'POST':\r\n            serializer = self.get_serializer(request.user, data=request.data, partial=True)\r\n            serializer.is_valid(raise_exception=True)\r\n            user = serializer.save()\r\n            data = UserSerializer(user, context=self.get_serializer_context()).data\r\n            data['token'] = AuthToken.objects.create(user)\r\n            return Response({\r\n                \"user\": data,\r\n            }, status=HTTP_200_OK)\r\n\r\n        return Response({\"message\": \"Unsupported action\"}, status=HTTP_404_NOT_FOUND)\r\n\r\n    @action(methods=['post'], detail=False, permission_classes=[CSRFPermission],\r\n            serializer_class=UserRegistrationSerializer, authentication_classes=[SessionAuthentication],\r\n            url_path='register', url_name='register')\r\n    def register(self, request):\r\n        \"\"\"\r\n        Accept and verify userdata, save and return user with AuthToken if valid.\r\n\r\n        :param request: DRF request object\r\n        :return: DRF Response object\r\n        \"\"\"\r\n        serializer = self.get_serializer(data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        user = serializer.create(serializer.validated_data)\r\n        data = UserSerializer(user, context=self.get_serializer_context()).data\r\n        data['token'] = AuthToken.objects.create(user)\r\n        return Response({\r\n            \"user\": data,\r\n        }, status=HTTP_200_OK)\r\n\r\n    @action(methods=['post'], detail=False, permission_classes=[CSRFPermission],\r\n            serializer_class=UserLoginSerializer, authentication_classes=[SessionAuthentication],\r\n            url_path='login', url_name='login')\r\n    def login(self, request):\r\n        \"\"\"\r\n        Verify the login request and return a user object and a token if valid.\r\n\r\n        :param request: Request object generated by Django REST Framework\r\n        :return: user info and token when successful\r\n        \"\"\"\r\n        serializer = self.get_serializer(data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        user = serializer.validated_data\r\n        data = UserSerializer(user, context=self.get_serializer_context()).data\r\n        data['token'] = AuthToken.objects.create(user)\r\n        return Response({\r\n            \"user\": data,\r\n        }, status=HTTP_200_OK)\r\n\r\n    @staticmethod\r\n    @action(methods=['post'], detail=True, permission_classes=[IsAuthenticated],\r\n            authentication_classes=[TokenAuthentication], url_path='logout', url_name='logout')\r\n    def logout(request):\r\n        # pylint: disable=W0212\r\n        \"\"\"\r\n        Accept token and expire related session if valid.\r\n        :param request: DRF request object\r\n        :return: DRF response object\r\n        \"\"\"\r\n        request._auth.delete()\r\n        return Response(None, status=HTTP_204_NO_CONTENT)\r\n\r\n```\r\n\r\nIf I strip rules from the other apps, this works as expected again. Put rules back in, and it breaks.\r\n\r\nRelevant settings:\r\n\r\n```\r\n\r\nAUTHENTICATION_BACKENDS = (\r\n    'rules.permissions.ObjectPermissionBackend',\r\n    'django.contrib.auth.backends.ModelBackend',\r\n)\r\n\r\nREST_FRAMEWORK = {\r\n    'EXCEPTION_HANDLER': 'theden_django.apps.core.exceptions.core_exception_handler',\r\n    'NON_FIELD_ERRORS_KEY': 'error',\r\n    'DEFAULT_PERMISSION_CLASSES': (),\r\n    'DEFAULT_PAGINATION_CLASS': 'theden_django.apps.core.serializers.EnhancedPageNumberPagination',\r\n    'DEFAULT_RENDERER_CLASSES': DEFAULT_RENDERER_CLASSES,\r\n    'DEFAULT_AUTHENTICATION_CLASSES': (\r\n        'rest_framework.authentication.SessionAuthentication',\r\n    ),\r\n    'PAGE_SIZE': 10,\r\n    'DEFAULT_PARSER_CLASSES': (\r\n        'rest_framework.parsers.JSONParser',\r\n        'rest_framework.parsers.FormParser',\r\n        'rest_framework.parsers.MultiPartParser',\r\n    ),\r\n    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),\r\n}\r\n\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/87", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/87/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/87/events", "html_url": "https://github.com/dfunckt/django-rules/issues/87", "id": 362853383, "node_id": "MDU6SXNzdWUzNjI4NTMzODM=", "number": 87, "title": "Predicate never gets called with object from django", "user": {"login": "Bluejanis", "id": 10140165, "node_id": "MDQ6VXNlcjEwMTQwMTY1", "avatar_url": "https://avatars0.githubusercontent.com/u/10140165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bluejanis", "html_url": "https://github.com/Bluejanis", "followers_url": "https://api.github.com/users/Bluejanis/followers", "following_url": "https://api.github.com/users/Bluejanis/following{/other_user}", "gists_url": "https://api.github.com/users/Bluejanis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bluejanis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bluejanis/subscriptions", "organizations_url": "https://api.github.com/users/Bluejanis/orgs", "repos_url": "https://api.github.com/users/Bluejanis/repos", "events_url": "https://api.github.com/users/Bluejanis/events{/privacy}", "received_events_url": "https://api.github.com/users/Bluejanis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-22T12:28:08Z", "updated_at": "2018-12-07T10:59:11Z", "closed_at": "2018-12-07T10:59:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try to use rules within django to enable object permissions, but the django admin interface always calls those predicates without any object. As far as I know there is no control to tell django what kind of object to pass. So it passes None. This seems broken.\r\n\r\nFor reference I have also created a stackoverflow question [here.](https://stackoverflow.com/q/52455488)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/86", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/86/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/86/events", "html_url": "https://github.com/dfunckt/django-rules/issues/86", "id": 349029647, "node_id": "MDU6SXNzdWUzNDkwMjk2NDc=", "number": 86, "title": "How to use rule in crontab", "user": {"login": "ajit2688", "id": 10633176, "node_id": "MDQ6VXNlcjEwNjMzMTc2", "avatar_url": "https://avatars2.githubusercontent.com/u/10633176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajit2688", "html_url": "https://github.com/ajit2688", "followers_url": "https://api.github.com/users/ajit2688/followers", "following_url": "https://api.github.com/users/ajit2688/following{/other_user}", "gists_url": "https://api.github.com/users/ajit2688/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajit2688/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajit2688/subscriptions", "organizations_url": "https://api.github.com/users/ajit2688/orgs", "repos_url": "https://api.github.com/users/ajit2688/repos", "events_url": "https://api.github.com/users/ajit2688/events{/privacy}", "received_events_url": "https://api.github.com/users/ajit2688/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-09T08:33:47Z", "updated_at": "2018-12-07T11:00:46Z", "closed_at": "2018-12-07T11:00:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Its not an Issue but need help in my use case\r\n\r\nI want to execute sample rule in crontab using django-cron\r\n\r\n\r\n# corn.py\r\n\r\nfrom django_cron import CronJobBase, Schedule\r\nimport rules\r\n\r\nclass MyCronJob(CronJobBase):\r\n    RUN_EVERY_MINS = 1 # every 2 hours\r\n\r\n    schedule = Schedule(run_every_mins=RUN_EVERY_MINS)\r\n    code = 'my_app.my_cron_job'    # a unique code\r\n\r\n    def do(self):\r\n        print(rules.test_rule('some_rule'))\r\n\r\n# rule.py\r\nimport rules\r\n\r\n@rules.predicate\r\ndef some_rule():\r\n    print(\"HI\")\r\n    return True\r\n\r\nrules.add_rule('some_rule',some_rule)\r\n\r\ninstead of getting True I am getting False.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/85", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/85/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/85/events", "html_url": "https://github.com/dfunckt/django-rules/issues/85", "id": 343500833, "node_id": "MDU6SXNzdWUzNDM1MDA4MzM=", "number": 85, "title": "Error with rules on CreateView introduced in 1.4", "user": {"login": "dyve", "id": 82315, "node_id": "MDQ6VXNlcjgyMzE1", "avatar_url": "https://avatars3.githubusercontent.com/u/82315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dyve", "html_url": "https://github.com/dyve", "followers_url": "https://api.github.com/users/dyve/followers", "following_url": "https://api.github.com/users/dyve/following{/other_user}", "gists_url": "https://api.github.com/users/dyve/gists{/gist_id}", "starred_url": "https://api.github.com/users/dyve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dyve/subscriptions", "organizations_url": "https://api.github.com/users/dyve/orgs", "repos_url": "https://api.github.com/users/dyve/repos", "events_url": "https://api.github.com/users/dyve/events{/privacy}", "received_events_url": "https://api.github.com/users/dyve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-23T06:15:36Z", "updated_at": "2018-12-07T10:54:18Z", "closed_at": "2018-12-07T10:54:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/dfunckt/django-rules/blob/master/rules/contrib/views.py#L37\r\n\r\nUsing `self.get_object` will introduce an error when using `rules` on a view that inherits from `CreateView`. This is because `CreateView` does inherit `SingleObjectMixin` and does have a `get_object` callable, but it will throw an exception when its `get_object` is called:\r\n\r\n`AttributeError: Generic detail view {InheritsFromCreateView} must be called with either an object pk or a slug.`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/84", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/84/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/84/events", "html_url": "https://github.com/dfunckt/django-rules/issues/84", "id": 340446029, "node_id": "MDU6SXNzdWUzNDA0NDYwMjk=", "number": 84, "title": "predicate does not get called on 'user.has_perm(...)'", "user": {"login": "Paul-Kijtapart", "id": 6366281, "node_id": "MDQ6VXNlcjYzNjYyODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6366281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Paul-Kijtapart", "html_url": "https://github.com/Paul-Kijtapart", "followers_url": "https://api.github.com/users/Paul-Kijtapart/followers", "following_url": "https://api.github.com/users/Paul-Kijtapart/following{/other_user}", "gists_url": "https://api.github.com/users/Paul-Kijtapart/gists{/gist_id}", "starred_url": "https://api.github.com/users/Paul-Kijtapart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Paul-Kijtapart/subscriptions", "organizations_url": "https://api.github.com/users/Paul-Kijtapart/orgs", "repos_url": "https://api.github.com/users/Paul-Kijtapart/repos", "events_url": "https://api.github.com/users/Paul-Kijtapart/events{/privacy}", "received_events_url": "https://api.github.com/users/Paul-Kijtapart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-12T00:05:31Z", "updated_at": "2020-03-23T01:46:26Z", "closed_at": "2018-07-12T01:05:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Set up**\r\nDjango Version: 1.11\r\nDjango-rules: v1.3.0 - 2017/12/13\r\n\r\nsettings.py\r\n```python\r\nAUTHENTICATION_BACKENDS = (\r\n    'rules.permissions.ObjectPermissionBackend',\r\n    'django.contrib.auth.backends.ModelBackend',\r\n)\r\n```\r\n\r\n**What should happens:**\r\nAfter initializing rule set with corresponding predicates, Calling 'has_perm' function on a user should trigger corresponding predicate.\r\n\r\n\r\n**What actually happens:**\r\n Calling 'has_perm' function on a user does NOT trigger corresponding predicate, and always return True.\r\n\r\n```python\r\n\r\n@rules.predicate\r\ndef can_view_blog(user):\r\n    print('Calling this rule for user ', user)\r\n    return False\r\n\r\n# with initial\r\nrules.add_perm('myapp.view_blogs', can_view_blog)\r\n\r\n# this will not trigger can_view_blog, thus returning True instead of False\r\ncurrent_user.has_perm('myapp.view_blogs') \r\n\r\n# However, calling 'has_perm' on rules will find matching permission name and trigger corresponding predicate as expected.\r\nrules.has_perm('myapp.view_blogs')\r\n\r\n```\r\n\r\n**What I tried:**\r\nI tried both functional and class-based views. However, i cannot seem to trigger the linked predicate on user.has_perm(...)\r\n\r\n\r\n```python\r\n\r\n# import\r\nfrom rules.contrib.views import permission_required\r\n\r\n@rules.predicate\r\ndef can_view_blog(user):\r\n    print('Calling this rule for user ', user)\r\n    return False\r\n\r\n# link permission with predicate\r\nrules.add_perm('myapp.view_blogs', can_view_blog)\r\n\r\n@permission_required('myapp.view_blogs')\r\ndef home(request):\r\n    return render(\r\n        request,\r\n        'ems/index.html',\r\n        {\r\n            'title': _('Welcome'),\r\n            'year': timezone.now().year,\r\n        }\r\n    )\r\n```\r\n\r\nFrom the above code,\r\n`rules.has_perm('myapp.view_blogs')` would trigger correct predicate, but `request.user.has_perm('myapp.view_blogs')` will always return True.\r\n\r\n\r\n**What I think cause this issue:**\r\n1. I thought that this could be a permission name conflict as django-rules use the same name convention as django.contrib.auth.\r\n- Actually this should not be the case as 'rules.permissions.ObjectPermissionBackend' is ordered before contrib.auth, so it will be searched first. Thus, the predicate should gets called in this case.\r\n\r\n2. I did not link user to permission system properly, since user.has_perm(any_random_name) will return True.\r\n\r\nAny help is appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/83", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/83/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/83/events", "html_url": "https://github.com/dfunckt/django-rules/issues/83", "id": 338625764, "node_id": "MDU6SXNzdWUzMzg2MjU3NjQ=", "number": 83, "title": "Error from TestCase - AttributeError: 'ObjectPermissionBackend' object has no attribute 'get_user'", "user": {"login": "hale01", "id": 6126244, "node_id": "MDQ6VXNlcjYxMjYyNDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6126244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hale01", "html_url": "https://github.com/hale01", "followers_url": "https://api.github.com/users/hale01/followers", "following_url": "https://api.github.com/users/hale01/following{/other_user}", "gists_url": "https://api.github.com/users/hale01/gists{/gist_id}", "starred_url": "https://api.github.com/users/hale01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hale01/subscriptions", "organizations_url": "https://api.github.com/users/hale01/orgs", "repos_url": "https://api.github.com/users/hale01/repos", "events_url": "https://api.github.com/users/hale01/events{/privacy}", "received_events_url": "https://api.github.com/users/hale01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-05T15:35:46Z", "updated_at": "2018-07-22T13:59:03Z", "closed_at": "2018-07-22T13:59:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\n\r\ndjango == 1.9 but perhaps relevant for 2.0\r\n\r\nIf write in TestCase `self.client.force_login(user)` and `self.client.get(url)` we receive error\r\n\r\n```\r\n...\r\nFile \"/usr/local/lib/python2.7/site-packages/django/contrib/auth/middleware.py\", line 22, in <lambda>\r\n    request.user = SimpleLazyObject(lambda: get_user(request))\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/auth/middleware.py\", line 10, in get_user\r\n    request._cached_user = auth.get_user(request)\r\n  File \"/usr/local/lib/python2.7/site-packages/django/contrib/auth/__init__.py\", line 174, in get_user\r\n    user = backend.get_user(user_id)\r\nAttributeError: 'ObjectPermissionBackend' object has no attribute 'get_user'\r\n```\r\n\r\n`ObjectPermissionBackend`  has no attribute 'get_user', but this attribute called in `django.contrib.auth.__init__.get_user`\r\n\r\n```\r\ndef get_user(request):\r\n    \"\"\"\r\n    Return the user model instance associated with the given request session.\r\n    If no user is retrieved, return an instance of `AnonymousUser`.\r\n    \"\"\"\r\n    from .models import AnonymousUser\r\n    user = None\r\n    try:\r\n        user_id = _get_user_session_key(request)\r\n        backend_path = request.session[BACKEND_SESSION_KEY]\r\n    except KeyError:\r\n        pass\r\n    else:\r\n        if backend_path in settings.AUTHENTICATION_BACKENDS:\r\n            backend = load_backend(backend_path)\r\n            user = backend.get_user(user_id)\r\n            # Verify the session\r\n            if hasattr(user, 'get_session_auth_hash'):\r\n                session_hash = request.session.get(HASH_SESSION_KEY)\r\n                session_hash_verified = session_hash and constant_time_compare(\r\n                    session_hash,\r\n                    user.get_session_auth_hash()\r\n                )\r\n                if not session_hash_verified:\r\n                    request.session.flush()\r\n                    user = None\r\n\r\n    return user or AnonymousUser()\r\n```\r\n\r\nThis code actual for 1.9 and 2.0\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/80", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/80/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/80/events", "html_url": "https://github.com/dfunckt/django-rules/issues/80", "id": 330248763, "node_id": "MDU6SXNzdWUzMzAyNDg3NjM=", "number": 80, "title": "Creating a queryset from rules", "user": {"login": "guettli", "id": 414336, "node_id": "MDQ6VXNlcjQxNDMzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/414336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guettli", "html_url": "https://github.com/guettli", "followers_url": "https://api.github.com/users/guettli/followers", "following_url": "https://api.github.com/users/guettli/following{/other_user}", "gists_url": "https://api.github.com/users/guettli/gists{/gist_id}", "starred_url": "https://api.github.com/users/guettli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guettli/subscriptions", "organizations_url": "https://api.github.com/users/guettli/orgs", "repos_url": "https://api.github.com/users/guettli/repos", "events_url": "https://api.github.com/users/guettli/events{/privacy}", "received_events_url": "https://api.github.com/users/guettli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-07T12:24:23Z", "updated_at": "2019-04-19T08:33:53Z", "closed_at": "2019-04-13T19:16:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I create queryset which filters according to rules?\r\n\r\nUse case: I have a issue tracking system each issue is an instance of Issue (which inherits from models.Model).\r\n\r\nI have rules which allow access to the issues.\r\n\r\nNow I want a queryset of all issues which are allowed to be seen by user X.\r\n\r\nCan you follow my use case?\r\n\r\nDo you have a clue how to get this done?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/77", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/77/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/77/events", "html_url": "https://github.com/dfunckt/django-rules/issues/77", "id": 317365975, "node_id": "MDU6SXNzdWUzMTczNjU5NzU=", "number": 77, "title": "Fix rules/predicates.py:70: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() or inspect.getfullargspec()", "user": {"login": "lorddaedra", "id": 26400787, "node_id": "MDQ6VXNlcjI2NDAwNzg3", "avatar_url": "https://avatars1.githubusercontent.com/u/26400787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorddaedra", "html_url": "https://github.com/lorddaedra", "followers_url": "https://api.github.com/users/lorddaedra/followers", "following_url": "https://api.github.com/users/lorddaedra/following{/other_user}", "gists_url": "https://api.github.com/users/lorddaedra/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorddaedra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorddaedra/subscriptions", "organizations_url": "https://api.github.com/users/lorddaedra/orgs", "repos_url": "https://api.github.com/users/lorddaedra/repos", "events_url": "https://api.github.com/users/lorddaedra/events{/privacy}", "received_events_url": "https://api.github.com/users/lorddaedra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-24T19:36:11Z", "updated_at": "2018-04-24T19:45:15Z", "closed_at": "2018-04-24T19:45:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/76", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/76/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/76/events", "html_url": "https://github.com/dfunckt/django-rules/issues/76", "id": 310701702, "node_id": "MDU6SXNzdWUzMTA3MDE3MDI=", "number": 76, "title": "Cleanup", "user": {"login": "dyve", "id": 82315, "node_id": "MDQ6VXNlcjgyMzE1", "avatar_url": "https://avatars3.githubusercontent.com/u/82315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dyve", "html_url": "https://github.com/dyve", "followers_url": "https://api.github.com/users/dyve/followers", "following_url": "https://api.github.com/users/dyve/following{/other_user}", "gists_url": "https://api.github.com/users/dyve/gists{/gist_id}", "starred_url": "https://api.github.com/users/dyve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dyve/subscriptions", "organizations_url": "https://api.github.com/users/dyve/orgs", "repos_url": "https://api.github.com/users/dyve/repos", "events_url": "https://api.github.com/users/dyve/events{/privacy}", "received_events_url": "https://api.github.com/users/dyve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-03T05:46:11Z", "updated_at": "2018-07-23T05:31:24Z", "closed_at": "2018-07-22T13:56:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We use this package @zostera, thanks for making this. Would a PR that does a little cleanup be welcome. I'd suggest:\r\n\r\n- get rid of nose (last release was over 2 years ago)\r\n- drop unsupported Python and Django combinations\r\n- fix deprecation warning where possible\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/75", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/75/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/75/events", "html_url": "https://github.com/dfunckt/django-rules/issues/75", "id": 309485265, "node_id": "MDU6SXNzdWUzMDk0ODUyNjU=", "number": 75, "title": "Drop support for Django < 1.11", "user": {"login": "lorddaedra", "id": 26400787, "node_id": "MDQ6VXNlcjI2NDAwNzg3", "avatar_url": "https://avatars1.githubusercontent.com/u/26400787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorddaedra", "html_url": "https://github.com/lorddaedra", "followers_url": "https://api.github.com/users/lorddaedra/followers", "following_url": "https://api.github.com/users/lorddaedra/following{/other_user}", "gists_url": "https://api.github.com/users/lorddaedra/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorddaedra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorddaedra/subscriptions", "organizations_url": "https://api.github.com/users/lorddaedra/orgs", "repos_url": "https://api.github.com/users/lorddaedra/repos", "events_url": "https://api.github.com/users/lorddaedra/events{/privacy}", "received_events_url": "https://api.github.com/users/lorddaedra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 728080211, "node_id": "MDU6TGFiZWw3MjgwODAyMTE=", "url": "https://api.github.com/repos/dfunckt/django-rules/labels/breaking", "name": "breaking", "color": "9be567", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-28T18:44:34Z", "updated_at": "2018-07-22T13:54:46Z", "closed_at": "2018-07-22T13:54:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "![](https://www.djangoproject.com/s/img/release-roadmap.e844db08610e.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/74", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/74/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/74/events", "html_url": "https://github.com/dfunckt/django-rules/issues/74", "id": 309481859, "node_id": "MDU6SXNzdWUzMDk0ODE4NTk=", "number": 74, "title": "Fix RemovedInDjango21Warning: Update rules.permissions.ObjectPermissionBackend.authenticate() to accept a positional `request` argument.", "user": {"login": "lorddaedra", "id": 26400787, "node_id": "MDQ6VXNlcjI2NDAwNzg3", "avatar_url": "https://avatars1.githubusercontent.com/u/26400787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorddaedra", "html_url": "https://github.com/lorddaedra", "followers_url": "https://api.github.com/users/lorddaedra/followers", "following_url": "https://api.github.com/users/lorddaedra/following{/other_user}", "gists_url": "https://api.github.com/users/lorddaedra/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorddaedra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorddaedra/subscriptions", "organizations_url": "https://api.github.com/users/lorddaedra/orgs", "repos_url": "https://api.github.com/users/lorddaedra/repos", "events_url": "https://api.github.com/users/lorddaedra/events{/privacy}", "received_events_url": "https://api.github.com/users/lorddaedra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-28T18:34:18Z", "updated_at": "2018-07-22T13:55:30Z", "closed_at": "2018-07-22T13:55:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/73", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/73/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/73/events", "html_url": "https://github.com/dfunckt/django-rules/issues/73", "id": 293893586, "node_id": "MDU6SXNzdWUyOTM4OTM1ODY=", "number": 73, "title": "rules.contrib.views.PermissionRequiredMixin hides coding errors from the developer", "user": {"login": "delroth", "id": 202798, "node_id": "MDQ6VXNlcjIwMjc5OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/202798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/delroth", "html_url": "https://github.com/delroth", "followers_url": "https://api.github.com/users/delroth/followers", "following_url": "https://api.github.com/users/delroth/following{/other_user}", "gists_url": "https://api.github.com/users/delroth/gists{/gist_id}", "starred_url": "https://api.github.com/users/delroth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/delroth/subscriptions", "organizations_url": "https://api.github.com/users/delroth/orgs", "repos_url": "https://api.github.com/users/delroth/repos", "events_url": "https://api.github.com/users/delroth/events{/privacy}", "received_events_url": "https://api.github.com/users/delroth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-02T13:47:31Z", "updated_at": "2018-07-21T16:13:48Z", "closed_at": "2018-07-21T16:13:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n        try:\r\n            # Requires SingleObjectMixin or equivalent ``get_object`` method\r\n            return self.get_object()\r\n        except AttributeError:  # pragma: no cover\r\n            return None\r\n```\r\n\r\nIf the `get_object()` implementation has a bug that ends up causing AttributeError, the mixin gobbles it, which can lead to a very confusing result and debugging experience :)\r\n\r\nInstead of looking at side effects of calling a missing method, what about using `hasattr`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/72", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/72/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/72/events", "html_url": "https://github.com/dfunckt/django-rules/issues/72", "id": 284072272, "node_id": "MDU6SXNzdWUyODQwNzIyNzI=", "number": 72, "title": "Updating permissions does not work", "user": {"login": "RonilRufo", "id": 2069360, "node_id": "MDQ6VXNlcjIwNjkzNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2069360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RonilRufo", "html_url": "https://github.com/RonilRufo", "followers_url": "https://api.github.com/users/RonilRufo/followers", "following_url": "https://api.github.com/users/RonilRufo/following{/other_user}", "gists_url": "https://api.github.com/users/RonilRufo/gists{/gist_id}", "starred_url": "https://api.github.com/users/RonilRufo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RonilRufo/subscriptions", "organizations_url": "https://api.github.com/users/RonilRufo/orgs", "repos_url": "https://api.github.com/users/RonilRufo/repos", "events_url": "https://api.github.com/users/RonilRufo/events{/privacy}", "received_events_url": "https://api.github.com/users/RonilRufo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-22T04:57:05Z", "updated_at": "2018-04-03T12:15:44Z", "closed_at": "2018-04-03T12:15:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I couldn't find any solution online to this issue so I'm hoping you could help me out. So here's the scenario. I first created the permission below weeks ago. Back then, I wanted to display the list of companies only to admin users:\r\n`add_perm('mining.list_company', is_admin_level)`\r\n\r\nThe above code worked perfectly. However, couple of days ago, we have made some changes and we want the list of companies to be available to all users. So I have this now:\r\n`add_perm('mining.list_company', is_authenticated)`\r\n\r\nHowever, when I go to the company list page using a regular user, I still get a permission denied error even though I have already changed the permission. I went into a little bit of digging and it looks like the `add_perm` method gets executed only **ONCE**, that's why the `is_authenticated` does not get recognized. I was able to confirm this because when I tried adding `pdb debugging` inside the `predicate` itself, it does not get executed and just proceeds to permission denied error. \r\n\r\nAm I missing anything here? It seems I'm the only one having this issue. Below are the necessary codes:\r\n\r\n**_predicates.py_**\r\n```\r\nfrom __future__ import unicode_literals, absolute_import\r\n\r\nfrom rules import predicate\r\n\r\n\r\n@predicate()\r\ndef is_authenticated(user):\r\n    return user.is_authenticated()\r\n\r\n@predicate()\r\ndef is_admin_level(user):\r\n    return user.is_admin_level\r\n```\r\n\r\n**_rules.py_**\r\n```\r\nfrom __future__ import unicode_literals, absolute_import\r\nfrom rules import add_perm\r\nfrom .predicates import is_authenticated\r\n\r\nadd_perm('mining.list_company', is_authenticated)\r\n```\r\n\r\n**_views.py_**\r\n```\r\nclass CompanyList(LoginRequiredMixin, PermissionMixin, ListView):\r\n    logger = logging.getLogger(__name__)\r\n    context_object_name = 'companies'\r\n    permission_required = 'mining.list_company'\r\n    template_name = 'mining/company/list.html'\r\n    paginate_by = 10\r\n```\r\n\r\nAgain, everything is working perfectly fine before. The error appeared when I changed `is_admin_level` to `is_authenticated`. I would really appreciate it if you could point me to the right direction here. Thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/69", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/69/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/69/events", "html_url": "https://github.com/dfunckt/django-rules/issues/69", "id": 278720560, "node_id": "MDU6SXNzdWUyNzg3MjA1NjA=", "number": 69, "title": "assignment_tag is removed in django-2.0", "user": {"login": "rixx", "id": 2657547, "node_id": "MDQ6VXNlcjI2NTc1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2657547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rixx", "html_url": "https://github.com/rixx", "followers_url": "https://api.github.com/users/rixx/followers", "following_url": "https://api.github.com/users/rixx/following{/other_user}", "gists_url": "https://api.github.com/users/rixx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rixx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rixx/subscriptions", "organizations_url": "https://api.github.com/users/rixx/orgs", "repos_url": "https://api.github.com/users/rixx/repos", "events_url": "https://api.github.com/users/rixx/events{/privacy}", "received_events_url": "https://api.github.com/users/rixx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-02T21:47:32Z", "updated_at": "2017-12-12T22:48:07Z", "closed_at": "2017-12-12T22:48:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Quoting the [release docs](https://docs.djangoproject.com/en/2.0/releases/1.9/#deprecated-features-1-9):\r\n\r\n> Django 1.4 added the assignment_tag helper to ease the creation of template tags that store results in a template variable. The simple_tag() helper has gained this same ability, making the assignment_tag obsolete. Tags that use assignment_tag should be updated to use simple_tag.\r\n\r\nAs this prevents a timely upgrade to Django 2.0 for me, I'd ask you to consider merging a PR and releasing a new version soon-ish.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/66", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/66/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/66/events", "html_url": "https://github.com/dfunckt/django-rules/issues/66", "id": 267990284, "node_id": "MDU6SXNzdWUyNjc5OTAyODQ=", "number": 66, "title": "autodiscovery", "user": {"login": "highpost", "id": 5192798, "node_id": "MDQ6VXNlcjUxOTI3OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/highpost", "html_url": "https://github.com/highpost", "followers_url": "https://api.github.com/users/highpost/followers", "following_url": "https://api.github.com/users/highpost/following{/other_user}", "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}", "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/highpost/subscriptions", "organizations_url": "https://api.github.com/users/highpost/orgs", "repos_url": "https://api.github.com/users/highpost/repos", "events_url": "https://api.github.com/users/highpost/events{/privacy}", "received_events_url": "https://api.github.com/users/highpost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-24T11:09:49Z", "updated_at": "2017-10-24T15:19:52Z", "closed_at": "2017-10-24T15:19:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I thought I understood autodiscovery (see #35), but I don't. So I've built [a very simple Django project](https://github.com/highpost/rulesproj) with a set of permissions stored in perms.py and loaded and used in views.py. The relevant line is probably\r\n\r\nmodule = import_module('myapp.perms')\r\n\r\nin myapp/views.py. This project app completely works: I can run it with app-setup.sh and (importantly) I can run the related tests with pytest. But if I try to move this app to another environment, say something built with Cookiecutter Django, then I have problems. Modifying import_module() to give it a relative path (.perms) also fails. In addition, note that my permissions file is named perms.py. If I rename it to rules.py and change the above line, it fails.\r\n\r\nSo can you show me an explicit way of loading a permissions file?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/64", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/64/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/64/events", "html_url": "https://github.com/dfunckt/django-rules/issues/64", "id": 265561068, "node_id": "MDU6SXNzdWUyNjU1NjEwNjg=", "number": 64, "title": "Rules don't seem to work on CBVs", "user": {"login": "Brachamul", "id": 4298921, "node_id": "MDQ6VXNlcjQyOTg5MjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4298921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Brachamul", "html_url": "https://github.com/Brachamul", "followers_url": "https://api.github.com/users/Brachamul/followers", "following_url": "https://api.github.com/users/Brachamul/following{/other_user}", "gists_url": "https://api.github.com/users/Brachamul/gists{/gist_id}", "starred_url": "https://api.github.com/users/Brachamul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Brachamul/subscriptions", "organizations_url": "https://api.github.com/users/Brachamul/orgs", "repos_url": "https://api.github.com/users/Brachamul/repos", "events_url": "https://api.github.com/users/Brachamul/events{/privacy}", "received_events_url": "https://api.github.com/users/Brachamul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-15T10:19:40Z", "updated_at": "2017-10-23T09:32:04Z", "closed_at": "2017-10-23T09:32:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've posted a question a few days ago with all my code.\r\n\r\nMy user is redirected even if they have the proper permissions.\r\n\r\nhttps://stackoverflow.com/questions/46672950/using-django-rules-with-cbvs-doesnt-seem-to-work\r\n\r\nIt's probable that something is wrong with my code, but maybe it's a bug instead?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/62", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/62/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/62/events", "html_url": "https://github.com/dfunckt/django-rules/issues/62", "id": 251801555, "node_id": "MDU6SXNzdWUyNTE4MDE1NTU=", "number": 62, "title": "Global superuser override?", "user": {"login": "shacker", "id": 102694, "node_id": "MDQ6VXNlcjEwMjY5NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/102694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacker", "html_url": "https://github.com/shacker", "followers_url": "https://api.github.com/users/shacker/followers", "following_url": "https://api.github.com/users/shacker/following{/other_user}", "gists_url": "https://api.github.com/users/shacker/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacker/subscriptions", "organizations_url": "https://api.github.com/users/shacker/orgs", "repos_url": "https://api.github.com/users/shacker/repos", "events_url": "https://api.github.com/users/shacker/events{/privacy}", "received_events_url": "https://api.github.com/users/shacker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-08-21T23:59:59Z", "updated_at": "2019-08-08T19:45:23Z", "closed_at": "2017-09-12T08:20:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to create a lot of rulesets in a lot of models, and it appears that I will need to add an is_superuser predicate to every single one, which is not very DRY. Is there a way (or a best practice) to grant full access to superusers on everything touched by rules? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/60", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/60/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/60/events", "html_url": "https://github.com/dfunckt/django-rules/issues/60", "id": 250273855, "node_id": "MDU6SXNzdWUyNTAyNzM4NTU=", "number": 60, "title": "Django 1.11 missing in tests", "user": {"login": "dyve", "id": 82315, "node_id": "MDQ6VXNlcjgyMzE1", "avatar_url": "https://avatars3.githubusercontent.com/u/82315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dyve", "html_url": "https://github.com/dyve", "followers_url": "https://api.github.com/users/dyve/followers", "following_url": "https://api.github.com/users/dyve/following{/other_user}", "gists_url": "https://api.github.com/users/dyve/gists{/gist_id}", "starred_url": "https://api.github.com/users/dyve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dyve/subscriptions", "organizations_url": "https://api.github.com/users/dyve/orgs", "repos_url": "https://api.github.com/users/dyve/repos", "events_url": "https://api.github.com/users/dyve/events{/privacy}", "received_events_url": "https://api.github.com/users/dyve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-08-15T10:06:38Z", "updated_at": "2017-12-13T07:01:47Z", "closed_at": "2017-12-12T22:48:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is no Django 1.11 in the test matrix. Is this project still alive and being kept up to date with new Django releases?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/58", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/58/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/58/events", "html_url": "https://github.com/dfunckt/django-rules/issues/58", "id": 240915799, "node_id": "MDU6SXNzdWUyNDA5MTU3OTk=", "number": 58, "title": "django-rules does not work with DjangoObjectPermissions from django rest framework", "user": {"login": "apirobot", "id": 9641784, "node_id": "MDQ6VXNlcjk2NDE3ODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9641784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apirobot", "html_url": "https://github.com/apirobot", "followers_url": "https://api.github.com/users/apirobot/followers", "following_url": "https://api.github.com/users/apirobot/following{/other_user}", "gists_url": "https://api.github.com/users/apirobot/gists{/gist_id}", "starred_url": "https://api.github.com/users/apirobot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apirobot/subscriptions", "organizations_url": "https://api.github.com/users/apirobot/orgs", "repos_url": "https://api.github.com/users/apirobot/repos", "events_url": "https://api.github.com/users/apirobot/events{/privacy}", "received_events_url": "https://api.github.com/users/apirobot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-06T10:41:45Z", "updated_at": "2017-07-06T10:54:03Z", "closed_at": "2017-07-06T10:54:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "My problem is accurately described by the comment I found here https://groups.google.com/forum/#!topic/django-rest-framework/M5q6pI8vcZQ:\r\n\r\n> I have been using DjangoObjectPermissions which inherits from DjangoModelPermissions. DjangoModelPermissions has a method has_permission which checks for Model level permissions. However, if you are working with object level permissions, usually the model level permissions evaluate to false. Consequently DjangoObjectPermissions raises a permission denied. \r\n\r\n> I have easily fixed that issue be overwriting the has_permission method of DjangoObjectPermissions, but again I am wondering, have I missed anything or should that not be the default behavior of DjangoObjectPermissions.\r\n\r\nI have a code like this:\r\n```python\r\n# rules.py\r\n\r\nimport rules\r\n\r\n\r\n############################\r\n# Predicates\r\n############################\r\n\r\n@rules.predicate\r\ndef is_tweet_owner(user, tweet):\r\n    if not tweet:\r\n        return False\r\n    return tweet.owner == user\r\n\r\n\r\n############################\r\n# Permissions\r\n############################\r\n\r\nrules.add_perm('tweets.add_tweet', rules.is_authenticated)\r\nrules.add_perm('tweets.change_tweet', is_tweet_owner)\r\nrules.add_perm('tweets.delete_tweet', is_tweet_owner)\r\n\r\n\r\n# views.py\r\n\r\n\r\nfrom rest_framework import viewsets, mixins\r\n\r\nfrom .models import Tweet\r\nfrom .permissions import TweetPermission\r\nfrom .serializers import TweetSerializer\r\n\r\n\r\nclass TweetViewSet(mixins.CreateModelMixin,\r\n                   mixins.DestroyModelMixin,\r\n                   mixins.RetrieveModelMixin,\r\n                   mixins.UpdateModelMixin,\r\n                   viewsets.GenericViewSet):\r\n    queryset = Tweet.objects.all()\r\n    serializer_class = TweetSerializer\r\n    permission_classes = (TweetPermission, )\r\n\r\n    def perform_create(self, serializer):\r\n        serializer.save(owner=self.request.user)\r\n\r\n\r\n# permissions.py\r\n\r\n\r\nfrom rest_framework import permissions\r\n\r\n\r\nclass TweetPermission(permissions.DjangoObjectPermissions):\r\n    authenticated_users_only = False\r\n\r\n    def has_permission(self, request, view):\r\n        \"\"\"\r\n        WTF?!\r\n        \"\"\"\r\n        return True\r\n```\r\n\r\nI want the tweet can be updated or deleted only by the user that owns this tweet. But user.has_perms method will always return false, because django calls _has_permission method before has_object_permission_.\r\n\r\nSo, django will call this:\r\n```bash\r\n>>> user.has_perms(['tweets.change_tweet'])\r\nFalse\r\n```\r\n\r\nBut I want this:\r\n```bash\r\n>>> user.has_perms(['tweets.change_tweet'], tweet)\r\nTrue\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/57", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/57/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/57/events", "html_url": "https://github.com/dfunckt/django-rules/issues/57", "id": 240401830, "node_id": "MDU6SXNzdWUyNDA0MDE4MzA=", "number": 57, "title": "in python 3.6 the `inspect.getargspec()` used in the Predicate class is removed", "user": {"login": "jberends", "id": 1391724, "node_id": "MDQ6VXNlcjEzOTE3MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1391724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jberends", "html_url": "https://github.com/jberends", "followers_url": "https://api.github.com/users/jberends/followers", "following_url": "https://api.github.com/users/jberends/following{/other_user}", "gists_url": "https://api.github.com/users/jberends/gists{/gist_id}", "starred_url": "https://api.github.com/users/jberends/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jberends/subscriptions", "organizations_url": "https://api.github.com/users/jberends/orgs", "repos_url": "https://api.github.com/users/jberends/repos", "events_url": "https://api.github.com/users/jberends/events{/privacy}", "received_events_url": "https://api.github.com/users/jberends/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 728080211, "node_id": "MDU6TGFiZWw3MjgwODAyMTE=", "url": "https://api.github.com/repos/dfunckt/django-rules/labels/breaking", "name": "breaking", "color": "9be567", "default": false, "description": ""}, {"id": 733859740, "node_id": "MDU6TGFiZWw3MzM4NTk3NDA=", "url": "https://api.github.com/repos/dfunckt/django-rules/labels/help%20wanted", "name": "help wanted", "color": "91f2f7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-04T12:08:35Z", "updated_at": "2018-07-21T16:14:16Z", "closed_at": "2018-07-21T16:14:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "In python 3.6 the getargspec is to be removed.\r\n\r\nDjango already provides some implementations to overcome this deprecation: see https://github.com/django/django/pull/4846/files  (especially in here: https://github.com/django/django/pull/4846/files#diff-661c241427e347ab93c204317d4f68dc)\r\n```\r\n....\r\n  File \".../_venv35/lib/python3.5/site-packages/rules/rulesets.py\", line 1, in <module>\r\n    from .predicates import predicate\r\n  File \".../_venv35/lib/python3.5/site-packages/rules/predicates.py\", line 260, in <module>\r\n    always_true = predicate(lambda: True, name='always_true')\r\n  File \".../_venv35/lib/python3.5/site-packages/rules/predicates.py\", line 253, in predicate\r\n    return inner(fn)\r\n  File \".../_venv35/lib/python3.5/site-packages/rules/predicates.py\", line 248, in inner\r\n    p = Predicate(fn, name, **options)\r\n  File \".../_venv35/lib/python3.5/site-packages/rules/predicates.py\", line 70, in __init__\r\n    argspec = inspect.getargspec(fn)\r\n  File \"/usr/lib/python3.5/inspect.py\", line 1040, in getargspec\r\n    stacklevel=2)\r\nDeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/56", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/56/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/56/events", "html_url": "https://github.com/dfunckt/django-rules/issues/56", "id": 236848114, "node_id": "MDU6SXNzdWUyMzY4NDgxMTQ=", "number": 56, "title": "Does django-rules work with django rest framework viewsets?", "user": {"login": "limbera", "id": 2503457, "node_id": "MDQ6VXNlcjI1MDM0NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2503457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/limbera", "html_url": "https://github.com/limbera", "followers_url": "https://api.github.com/users/limbera/followers", "following_url": "https://api.github.com/users/limbera/following{/other_user}", "gists_url": "https://api.github.com/users/limbera/gists{/gist_id}", "starred_url": "https://api.github.com/users/limbera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/limbera/subscriptions", "organizations_url": "https://api.github.com/users/limbera/orgs", "repos_url": "https://api.github.com/users/limbera/repos", "events_url": "https://api.github.com/users/limbera/events{/privacy}", "received_events_url": "https://api.github.com/users/limbera/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 777114753, "node_id": "MDU6TGFiZWw3NzcxMTQ3NTM=", "url": "https://api.github.com/repos/dfunckt/django-rules/labels/docs", "name": "docs", "color": "bfdadc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-06-19T10:35:37Z", "updated_at": "2019-08-11T12:54:09Z", "closed_at": "2019-08-11T12:54:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI am trying to integrate rules with DRF's viewsets but I keep getting an `AttributeError: 'OrgViewSet' object has no attribute 'request'`\r\n\r\nHere is my viewset code:\r\n\r\n```python\r\nclass OrgViewSet(PermissionRequiredMixin,\r\n                 mixins.ListModelMixin,\r\n                 viewsets.GenericViewSet):\r\n    permission_required = CHANGE_ORG\r\n    queryset = Org.objects.all()\r\n    serializer_class = OrgSerializer\r\n\r\n```\r\n\r\nHere is the stack trace\r\n```python\r\nInternal Server Error: /orgs/\r\nTraceback (most recent call last):\r\n  File \"/Users/dre/code/treebeard/venv/lib/python3.6/site-packages/django/core/handlers/exception.py\", line 41, in inner\r\n    response = get_response(request)\r\n  File \"/Users/dre/code/treebeard/venv/lib/python3.6/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Users/dre/code/treebeard/venv/lib/python3.6/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/Users/dre/code/treebeard/venv/lib/python3.6/site-packages/django/views/decorators/csrf.py\", line 58, in wrapped_view\r\n    return view_func(*args, **kwargs)\r\n  File \"/Users/dre/code/treebeard/venv/lib/python3.6/site-packages/rest_framework/viewsets.py\", line 86, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/Users/dre/code/treebeard/venv/lib/python3.6/site-packages/django/contrib/auth/mixins.py\", line 90, in dispatch\r\n    if not self.has_permission():\r\n  File \"/Users/dre/code/treebeard/venv/lib/python3.6/site-packages/rules/contrib/views.py\", line 51, in has_permission\r\n    return self.request.user.has_perms(perms, obj)\r\nAttributeError: 'OrgViewSet' object has no attribute 'request'\r\n```\r\n\r\nAny help would be greatly appreciated.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/55", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/55/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/55/events", "html_url": "https://github.com/dfunckt/django-rules/issues/55", "id": 228707438, "node_id": "MDU6SXNzdWUyMjg3MDc0Mzg=", "number": 55, "title": "Admin page: model instance is None", "user": {"login": "David-OConnor", "id": 4590796, "node_id": "MDQ6VXNlcjQ1OTA3OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4590796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/David-OConnor", "html_url": "https://github.com/David-OConnor", "followers_url": "https://api.github.com/users/David-OConnor/followers", "following_url": "https://api.github.com/users/David-OConnor/following{/other_user}", "gists_url": "https://api.github.com/users/David-OConnor/gists{/gist_id}", "starred_url": "https://api.github.com/users/David-OConnor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/David-OConnor/subscriptions", "organizations_url": "https://api.github.com/users/David-OConnor/orgs", "repos_url": "https://api.github.com/users/David-OConnor/repos", "events_url": "https://api.github.com/users/David-OConnor/events{/privacy}", "received_events_url": "https://api.github.com/users/David-OConnor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-15T13:02:42Z", "updated_at": "2018-09-11T21:54:11Z", "closed_at": "2017-05-20T12:52:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've gotten the Django permission tests to work as per the docs, but when attempting admin integration, I'm unable to get the model instance to be accepted by the predicate. The user is passed appropriately, but the model instance (book) in the example) is always None. I'm following the tutorials exactly, and am on Django 1.11. What could cause this?\r\n\r\n    @rules.predicate\r\n    def in_section(user, person_instance):\r\n        #This always produces an exception, because person_instance is always None.\r\n        return user.person.section == person_instance.section\r\n\r\n    rules.add_perm('myapp', rules.always_allow)\r\n    rules.add_perm('myapp.add_person', in_section) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/54", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/54/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/54/events", "html_url": "https://github.com/dfunckt/django-rules/issues/54", "id": 228470372, "node_id": "MDU6SXNzdWUyMjg0NzAzNzI=", "number": 54, "title": "Rules 2.0", "user": {"login": "dfunckt", "id": 130359, "node_id": "MDQ6VXNlcjEzMDM1OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/130359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfunckt", "html_url": "https://github.com/dfunckt", "followers_url": "https://api.github.com/users/dfunckt/followers", "following_url": "https://api.github.com/users/dfunckt/following{/other_user}", "gists_url": "https://api.github.com/users/dfunckt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfunckt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfunckt/subscriptions", "organizations_url": "https://api.github.com/users/dfunckt/orgs", "repos_url": "https://api.github.com/users/dfunckt/repos", "events_url": "https://api.github.com/users/dfunckt/events{/privacy}", "received_events_url": "https://api.github.com/users/dfunckt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 728080211, "node_id": "MDU6TGFiZWw3MjgwODAyMTE=", "url": "https://api.github.com/repos/dfunckt/django-rules/labels/breaking", "name": "breaking", "color": "9be567", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-05-13T12:31:05Z", "updated_at": "2019-04-13T19:37:02Z", "closed_at": "2019-04-13T19:37:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Hey all, I'm thinking of releasing Rules 2.0 soon and was wondering if there are ideas for things that can be implemented now but couldn't due to having to keep backwards compatibility. I intend to include (breaking) changes related to #44  and #52. It would also be nice if we tackled #32 too (I remember there were some compatibility issues when I looked at it back when it was reported).\r\n\r\n1.2.X will still be supported for some time, back-porting fixes for bugs that are severe enough to warrant it but no new features will be implemented.\r\n\r\nWhat do you all think? I'll go ahead and release 2.0 in a couple of weeks if nothing comes up.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/53", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/53/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/53/events", "html_url": "https://github.com/dfunckt/django-rules/issues/53", "id": 228463506, "node_id": "MDU6SXNzdWUyMjg0NjM1MDY=", "number": 53, "title": "ImportError on python 2.7.10", "user": {"login": "jab3z", "id": 4821049, "node_id": "MDQ6VXNlcjQ4MjEwNDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4821049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jab3z", "html_url": "https://github.com/jab3z", "followers_url": "https://api.github.com/users/jab3z/followers", "following_url": "https://api.github.com/users/jab3z/following{/other_user}", "gists_url": "https://api.github.com/users/jab3z/gists{/gist_id}", "starred_url": "https://api.github.com/users/jab3z/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jab3z/subscriptions", "organizations_url": "https://api.github.com/users/jab3z/orgs", "repos_url": "https://api.github.com/users/jab3z/repos", "events_url": "https://api.github.com/users/jab3z/events{/privacy}", "received_events_url": "https://api.github.com/users/jab3z/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-05-13T10:09:49Z", "updated_at": "2017-05-13T12:37:01Z", "closed_at": "2017-05-13T12:37:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm getting the following error (I didn't install the other package, django-rules, \ud83e\udd10 ) on Django 1.9.\r\n\r\n```\r\nUnhandled exception in thread started by <function wrapper at 0x104001758>\r\nTraceback (most recent call last):\r\n  File \"/Users/dacian/.virtualenvs/venv/lib/python2.7/site-packages/django/utils/autoreload.py\", line 226, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/Users/dacian/.virtualenvs/venv/lib/python2.7/site-packages/django/core/management/commands/runserver.py\", line 109, in inner_run\r\n    autoreload.raise_last_exception()\r\n  File \"/Users/dacian/.virtualenvs/venv/lib/python2.7/site-packages/django/utils/autoreload.py\", line 249, in raise_last_exception\r\n    six.reraise(*_exception)\r\n  File \"/Users/dacian/.virtualenvs/venv/lib/python2.7/site-packages/django/utils/autoreload.py\", line 226, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/Users/dacian/.virtualenvs/venv/lib/python2.7/site-packages/django/__init__.py\", line 18, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"/Users/dacian/.virtualenvs/venv/lib/python2.7/site-packages/django/apps/registry.py\", line 85, in populate\r\n    app_config = AppConfig.create(entry)\r\n  File \"/Users/dacian/.virtualenvs/venv/lib/python2.7/site-packages/django/apps/config.py\", line 116, in create\r\n    mod = import_module(mod_path)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py\", line 37, in import_module\r\n    __import__(name)\r\n  File \"/Users/dacian/Desktop/dev/project_name/extras/dashboard/rules.py\", line 6, in <module>\r\n    from rules import predicate\r\nImportError: cannot import name predicate\r\n```\r\n\r\n```\r\nINSTALLED_APPS = [\r\n    'modeltranslation',\r\n    'django.contrib.sites',\r\n    'jet',\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'polymorphic',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'django.contrib.humanize',\r\n    # 'rules',\r\n    'rules.apps.AutodiscoverRulesConfig',\r\n    'django_extensions',\r\n    'rest_framework',\r\n]\r\n```\r\n**extras/dashboard/rules.py** \r\n```\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom __future__ import absolute_import\r\nfrom __future__ import unicode_literals\r\n\r\nfrom rules import predicate\r\n\r\n\r\n@predicate(name='has_menu_perm')\r\ndef has_menu_perm(user, menu_item):\r\n    return any([user.has_perm(perm) for perm in menu_item.perms])\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/51", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/51/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/51/events", "html_url": "https://github.com/dfunckt/django-rules/issues/51", "id": 206985180, "node_id": "MDU6SXNzdWUyMDY5ODUxODA=", "number": 51, "title": "Release confusion", "user": {"login": "beruic", "id": 724716, "node_id": "MDQ6VXNlcjcyNDcxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/724716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beruic", "html_url": "https://github.com/beruic", "followers_url": "https://api.github.com/users/beruic/followers", "following_url": "https://api.github.com/users/beruic/following{/other_user}", "gists_url": "https://api.github.com/users/beruic/gists{/gist_id}", "starred_url": "https://api.github.com/users/beruic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beruic/subscriptions", "organizations_url": "https://api.github.com/users/beruic/orgs", "repos_url": "https://api.github.com/users/beruic/repos", "events_url": "https://api.github.com/users/beruic/events{/privacy}", "received_events_url": "https://api.github.com/users/beruic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-11T15:04:23Z", "updated_at": "2017-02-11T16:08:14Z", "closed_at": "2017-02-11T16:08:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Visiting https://github.com/dfunckt/django-rules/releases it seems like `v1.1.1` is the latest release, but there is also a `v1.2.0`, which also seems available on PyPI. What is the latest official (stable?) release, and what changed in `v1.2.0`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/50", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/50/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/50/events", "html_url": "https://github.com/dfunckt/django-rules/issues/50", "id": 202516352, "node_id": "MDU6SXNzdWUyMDI1MTYzNTI=", "number": 50, "title": "Please consider using user._group_names_cache again", "user": {"login": "afinsterb", "id": 7073715, "node_id": "MDQ6VXNlcjcwNzM3MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7073715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afinsterb", "html_url": "https://github.com/afinsterb", "followers_url": "https://api.github.com/users/afinsterb/followers", "following_url": "https://api.github.com/users/afinsterb/following{/other_user}", "gists_url": "https://api.github.com/users/afinsterb/gists{/gist_id}", "starred_url": "https://api.github.com/users/afinsterb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afinsterb/subscriptions", "organizations_url": "https://api.github.com/users/afinsterb/orgs", "repos_url": "https://api.github.com/users/afinsterb/repos", "events_url": "https://api.github.com/users/afinsterb/events{/privacy}", "received_events_url": "https://api.github.com/users/afinsterb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-01-23T12:04:00Z", "updated_at": "2017-05-13T12:24:20Z", "closed_at": "2017-05-13T12:24:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nYou've removed using the group_names_cache [here](https://github.com/dfunckt/django-rules/commit/240b0d7d45005a3faaf701e9095172888dc48ce4) because of #43.\r\n\r\nAs far as I can tell, that cache was only valid for the lifetime of one request and saves _many_ duplicate DB queries. It wasn't 'undesired', in fact it was very desirable, imo. I have multiple `{% has_perm %}` on most pages, all based on group membership. Another example: I have a list of objects which many groups can view, but one part of determining whether an 'edit' link should be displayed for an object from that list is based on group membership.\r\nWhat used to be 9 queries for this page is now over 60, all of them are fetching the group names for the same user again and again.\r\n\r\nI'm not exactly sure what ljsjl's use case was, but I think that changing group membership and then checking it again for that same user _within_ one single request is not the typical use case. Even the Django docs regarding [Permission Caching](https://docs.djangoproject.com/en/1.10/topics/auth/default/#permission-caching) say that it's fine to cache them by default.\r\n\r\nIf you decide against using the cache by default again, what would be the best way forward for people who want to use it? Right now I've basically copied the predefined `is_group_member` predicate and modified it. Is that the best solution? Or would you be willing to add another predicate to your package, something like `cached_is_group_member`? Or change the signature to \r\n```\r\ndef is_group_member(*groups, cache=False):\r\n    ...\r\n    @predicate(name)\r\n    def fn(user):\r\n        if cache:\r\n            # Use cache.\r\n        else:\r\n            # Refetch them every time.\r\n```\r\n and use it like this `is_admin = is_group_member('admin', cache=True)`? Not a big fan of the last one, but it would work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/49", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/49/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/49/events", "html_url": "https://github.com/dfunckt/django-rules/issues/49", "id": 195745914, "node_id": "MDU6SXNzdWUxOTU3NDU5MTQ=", "number": 49, "title": "Django 1.10.4 autodiscover for rules.py modules failed", "user": {"login": "pyzenberg", "id": 5817191, "node_id": "MDQ6VXNlcjU4MTcxOTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5817191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyzenberg", "html_url": "https://github.com/pyzenberg", "followers_url": "https://api.github.com/users/pyzenberg/followers", "following_url": "https://api.github.com/users/pyzenberg/following{/other_user}", "gists_url": "https://api.github.com/users/pyzenberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyzenberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyzenberg/subscriptions", "organizations_url": "https://api.github.com/users/pyzenberg/orgs", "repos_url": "https://api.github.com/users/pyzenberg/repos", "events_url": "https://api.github.com/users/pyzenberg/events{/privacy}", "received_events_url": "https://api.github.com/users/pyzenberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-15T08:36:10Z", "updated_at": "2017-02-02T01:04:28Z", "closed_at": "2017-02-02T01:04:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Replaced `'rules',` with `'rules.apps.AutodiscoverRulesConfig',` on `INSTALLED_APPS` settings to enable auto discover mode of `rules.py` modules as docs said and got this error:\r\n\r\n`ImportError: No module named 'rules.apps.AutodiscoverRulesConfig'; 'rules.apps' is not a package`\r\n\r\nP.S: I'm using Python 3.5.2 inside venv\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/46", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/46/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/46/events", "html_url": "https://github.com/dfunckt/django-rules/issues/46", "id": 189757574, "node_id": "MDU6SXNzdWUxODk3NTc1NzQ=", "number": 46, "title": "AttributeError: 'ObjectPermissionBackend' object has no attribute 'get_user'", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-11-16T16:24:27Z", "updated_at": "2016-12-02T23:34:55Z", "closed_at": "2016-12-02T23:34:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use Django's `Client.force_login` during tests, which appears to trigger an `AttributeError` when using `ObjectPermissionBackend` in `settings.AUTHENTICATION_BACKENDS`:\r\n\r\n    [25]   \u2026/app/tests/test_middleware.py(23)test_ddt_middleware_normal()\r\n    -> response = client.get('/api/', HTTP_ACCEPT='text/html')\r\n    [26]   \u2026/Vcs/django/django/test/client.py(531)get()\r\n    -> **extra)\r\n    [27]   \u2026/Vcs/django/django/test/client.py(333)get()\r\n    -> return self.generic('GET', path, secure=secure, **r)\r\n    [28]   \u2026/Vcs/django/django/test/client.py(409)generic()\r\n    -> return self.request(**r)\r\n    [29]   \u2026/Vcs/django/django/test/client.py(478)request()\r\n    -> response = self.handler(environ)\r\n    [30]   \u2026/Vcs/django/django/utils/six.py(686)reraise()\r\n    -> raise value\r\n    [31]   \u2026/Vcs/django/django/core/handlers/exception.py(39)inner()\r\n    -> response = get_response(request)\r\n    [32]   \u2026/app/middleware.py(37)__call__()\r\n    -> if not (request.user and\r\n    [33]   \u2026/Vcs/django/django/utils/functional.py(234)inner()\r\n    -> self._setup()\r\n    [34]   \u2026/Vcs/django/django/utils/functional.py(380)_setup()\r\n    -> self._wrapped = self._setupfunc()\r\n    [35]   \u2026/Vcs/django/django/contrib/auth/middleware.py(24)<lambda>()\r\n    -> request.user = SimpleLazyObject(lambda: get_user(request))\r\n    [36]   \u2026/Vcs/django/django/contrib/auth/middleware.py(12)get_user()\r\n    -> request._cached_user = auth.get_user(request)\r\n    [37] > \u2026/Vcs/django/django/contrib/auth/__init__.py(187)get_user()\r\n    -> user = backend.get_user(user_id)\r\n\r\n\r\nThe pytest test looks like this:\r\n\r\n```python\r\ndef test_foobar(db, client, some_user, some_group):\r\n    some_user.groups.add(some_group)\r\n    some_user.save()\r\n    client.force_login(some_user)\r\n\r\n```\r\n\r\nSetting a password and using `login` works:\r\n\r\n```python\r\ndef test_foobar(db, client, some_user, some_group):\r\n    some_user.groups.add(some_group)\r\n    some_user.set_password('password')\r\n    some_user.save()\r\n    assert client.login(username=some_user.username,\r\n                        password='password')\r\n```\r\n\r\n\r\nAccording to the documentation the `get_user` method is required:\r\nhttps://docs.djangoproject.com/en/1.10/topics/auth/customizing/#writing-an-authentication-backend.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/43", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/43/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/43/events", "html_url": "https://github.com/dfunckt/django-rules/issues/43", "id": 188412333, "node_id": "MDU6SXNzdWUxODg0MTIzMzM=", "number": 43, "title": "is_group_member() factory has undesirable caching side effect", "user": {"login": "ljsjl", "id": 14173710, "node_id": "MDQ6VXNlcjE0MTczNzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/14173710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljsjl", "html_url": "https://github.com/ljsjl", "followers_url": "https://api.github.com/users/ljsjl/followers", "following_url": "https://api.github.com/users/ljsjl/following{/other_user}", "gists_url": "https://api.github.com/users/ljsjl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljsjl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljsjl/subscriptions", "organizations_url": "https://api.github.com/users/ljsjl/orgs", "repos_url": "https://api.github.com/users/ljsjl/repos", "events_url": "https://api.github.com/users/ljsjl/events{/privacy}", "received_events_url": "https://api.github.com/users/ljsjl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-10T03:31:33Z", "updated_at": "2016-12-19T03:13:33Z", "closed_at": "2016-12-02T15:25:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey. Rules is proving quite useful, so thanks!, but a head scratcher in a test suite for a django app I am building led me to this issue.\r\n\r\nIn your built in factory is_group_member() you have the following code just before returning:\r\n```python\r\nif not hasattr(user, '_group_names_cache'):  # pragma: no cover\r\n    user._group_names_cache = set(user.groups.values_list('name', flat=True))\r\n```\r\nI'm not sure why you are caching the user's groups other than to save possible DB look ups in the future? A side effect is that if a user is removed from a group while your _group_names_cache attribute is in existence rules based on group membership will miss that change, as you've replaced a callable with a cached attribute. This results in unexpected rule failure. I'd suggest removing the attribute creation but you may other reasons for its existence?\r\n\r\nTo confirm:\r\n1. give a user membership in a group\r\n2. use is_group_member() to create a predicate for membership in that group\r\n3. test the new predicate - it returns True\r\n4. remove the user from the group\r\n5. test the predicate again - it still returns True, but should return False\r\n6. verify inconsistency by comparing user.groups.all() with user._group_names_cache", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/42", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/42/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/42/events", "html_url": "https://github.com/dfunckt/django-rules/issues/42", "id": 184197033, "node_id": "MDU6SXNzdWUxODQxOTcwMzM=", "number": 42, "title": "Can't import rules", "user": {"login": "sdawodu", "id": 12610953, "node_id": "MDQ6VXNlcjEyNjEwOTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/12610953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdawodu", "html_url": "https://github.com/sdawodu", "followers_url": "https://api.github.com/users/sdawodu/followers", "following_url": "https://api.github.com/users/sdawodu/following{/other_user}", "gists_url": "https://api.github.com/users/sdawodu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdawodu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdawodu/subscriptions", "organizations_url": "https://api.github.com/users/sdawodu/orgs", "repos_url": "https://api.github.com/users/sdawodu/repos", "events_url": "https://api.github.com/users/sdawodu/events{/privacy}", "received_events_url": "https://api.github.com/users/sdawodu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-20T10:54:03Z", "updated_at": "2016-10-20T10:58:28Z", "closed_at": "2016-10-20T10:58:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "with django-rules imported from pip:\n\n```\n....\nDjango==1.8.5\ndjango-rules==0.2\ndjango-social-auth==0.7.28\ndjango-wysiwyg-redactor==0.4.9.1\ndjangorestframework==3.4.7\nhttplib2==0.9.2\n...\n```\n\nand rules included in my INSTALLED_APPS\n\n```\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rules.apps.AutodiscoverRulesConfig',\n    'rest_framework.authtoken',\n    'rest_framework',\n    'accounts',\n    'bms',\n    'cms',\n    'socialmedia',\n    # 'v1_api',\n)\n```\n\nAttempting to start the django shell, I get the following error\n\n```\nTraceback (most recent call last):\n  File \"manage.py\", line 10, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/core/management/__init__.py\", line 351, in execute_from_command_line\n    utility.execute()\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/core/management/__init__.py\", line 325, in execute\n    django.setup()\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/__init__.py\", line 18, in setup\n    apps.populate(settings.INSTALLED_APPS)\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/apps/registry.py\", line 85, in populate\n    app_config = AppConfig.create(entry)\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/django/apps/config.py\", line 112, in create\n    mod = import_module(mod_path)\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\n    __import__(name)\nImportError: No module named rules.apps\n\n```\n\nI can't think of what might be wrong..\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/41", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/41/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/41/events", "html_url": "https://github.com/dfunckt/django-rules/issues/41", "id": 183261180, "node_id": "MDU6SXNzdWUxODMyNjExODA=", "number": 41, "title": "Redirection loop with CBV", "user": {"login": "slyapustin", "id": 370774, "node_id": "MDQ6VXNlcjM3MDc3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/370774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyapustin", "html_url": "https://github.com/slyapustin", "followers_url": "https://api.github.com/users/slyapustin/followers", "following_url": "https://api.github.com/users/slyapustin/following{/other_user}", "gists_url": "https://api.github.com/users/slyapustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyapustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyapustin/subscriptions", "organizations_url": "https://api.github.com/users/slyapustin/orgs", "repos_url": "https://api.github.com/users/slyapustin/repos", "events_url": "https://api.github.com/users/slyapustin/events{/privacy}", "received_events_url": "https://api.github.com/users/slyapustin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-16T11:04:41Z", "updated_at": "2016-10-24T19:39:09Z", "closed_at": "2016-10-24T19:39:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "If user already logged in, and have no specific permission for accessing View - redirect loop happen, [here](https://github.com/dfunckt/django-rules/blob/master/rules/contrib/views.py#L136):\n\n``` python\n            # Check for permissions and return a response\n            if not user.has_perms(perms, obj):\n                # User does not have a required permission\n                if raise_exception:\n                    raise PermissionDenied()\n                else:\n                    return _redirect_to_login(request, view_func.__name__,\n                                              login_url, redirect_field_name)\n```\n\nsince `raise_exception` is always set to False (default value) with CBV.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/40", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/40/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/40/events", "html_url": "https://github.com/dfunckt/django-rules/issues/40", "id": 176753122, "node_id": "MDU6SXNzdWUxNzY3NTMxMjI=", "number": 40, "title": "Support permission-based queryset filters", "user": {"login": "jmbowman", "id": 1005375, "node_id": "MDQ6VXNlcjEwMDUzNzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1005375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmbowman", "html_url": "https://github.com/jmbowman", "followers_url": "https://api.github.com/users/jmbowman/followers", "following_url": "https://api.github.com/users/jmbowman/following{/other_user}", "gists_url": "https://api.github.com/users/jmbowman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmbowman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmbowman/subscriptions", "organizations_url": "https://api.github.com/users/jmbowman/orgs", "repos_url": "https://api.github.com/users/jmbowman/repos", "events_url": "https://api.github.com/users/jmbowman/events{/privacy}", "received_events_url": "https://api.github.com/users/jmbowman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-09-13T21:21:10Z", "updated_at": "2019-12-27T22:38:44Z", "closed_at": "2016-09-14T13:51:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I really like how `rules` works for individual object permissions, but it doesn't really cover permission-based queryset filtering (which comes naturally for database-centric permission systems like `django-guardian`).  While thinking about how to compensate for that, I thought of an extension to the API that could help fill that gap.  Rather than rushing off to write a pull request, I figured I'd outline it here for feedback first.  I'm envisioning something like this:\n\n``` python\nfrom django.db.models import Q\n\n@rules.filter\ndef is_book_author(user):\n    return Q(author=user)\n\nis_book_author_or_superuser = is_book_author | rules.predicates.is_superuser\n\nrules.add_filter('books.view_book', is_book_author_or_superuser)\n\nBook.objects.filter(rules.q(user, 'books.view_book')\n```\n\nFilters would have to be defined separately from the object permission predicates, but would work very similarly; Q objects can be combined in ways that are pretty compatible with the predicate combinations already supported in `rules`.  Existing predicates which only depend on properties of the user could be combined with Q-based filters, with predicate outcomes being represented as always-True (like `Q(pk__isnull=False)`) or always-False (like `Q(pk__isnull=True)`) Q objects.\n\nThis would also make it pretty straightforward to create a Django REST Framework filter that would use the filter associated with the correct permission:\n\n``` python\nfrom rest_framework.compat import get_model_name\n\nclass DjangoPermissionRulesFilter(BaseFilterBackend):\n\n    perm_format = '%(app_label)s.view_%(model_name)s'\n\n    def filter_queryset(self, request, queryset, view):\n        user = request.user\n        model_cls = queryset.model\n        kwargs = {\n            'app_label': model_cls._meta.app_label,\n            'model_name': get_model_name(model_cls)\n        }\n        permission = self.perm_format % kwargs\n        return queryset.filter(rules.q(user, permission))\n```\n\nSome of the things I like about this design:\n- Keeps implementation of the permissions out of the models and model managers, so they can be grouped together with the predicate definitions\n- Allows reuse of some basic filtering operations (at least within permissions on the same model or other ones with the same lookup path for the fields to compare)\n- Consistency with implementing predicates for the object-based permissions\n- Ability to reuse predicates that don't depend on the object in filters (this part just occurred to me and hasn't been as carefully thought through as the rest, but it seems like it should work)\n- Very simple to support in Django REST Framework with only one custom filter class that can be reused for many views\n\nSome downsides that I don't see good ways to work around yet:\n- One permission can have 2 different implementations: a predicate function for a single object, or a Q object for a queryset.  I really don't see any way around this without really limiting and complicating the case where you don't even need a filter for the permission (which is pretty common).\n- Models with different lookup paths to the user (or related models) generally can't share filter functions; one may need `Q(author=user)` while another has `Q(owner=user)`, `Q(status__user=user)`, or even `Q(creator__organization=user.organization)`.\n- I'd kind of prefer a query filtering syntax like `Book.objects.has_perm(user, 'books.view_book')`, but it doesn't seem worth the effort to create a model manager mixin for it that would need to be explicitly included in all relevant models.\n\nThoughts?  Do you think something like this would fit in `rules` or should go into a separate app which depends on it?  And can you think of any good improvements on the API?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/39", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/39/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/39/events", "html_url": "https://github.com/dfunckt/django-rules/issues/39", "id": 176474405, "node_id": "MDU6SXNzdWUxNzY0NzQ0MDU=", "number": 39, "title": "Making rules work with CreateView", "user": {"login": "bcoover", "id": 1980315, "node_id": "MDQ6VXNlcjE5ODAzMTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1980315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcoover", "html_url": "https://github.com/bcoover", "followers_url": "https://api.github.com/users/bcoover/followers", "following_url": "https://api.github.com/users/bcoover/following{/other_user}", "gists_url": "https://api.github.com/users/bcoover/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcoover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcoover/subscriptions", "organizations_url": "https://api.github.com/users/bcoover/orgs", "repos_url": "https://api.github.com/users/bcoover/repos", "events_url": "https://api.github.com/users/bcoover/events{/privacy}", "received_events_url": "https://api.github.com/users/bcoover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-09-12T20:22:06Z", "updated_at": "2016-09-22T20:14:09Z", "closed_at": "2016-09-22T19:58:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure this is really an issue, but good for your documentation:\nBy default I have found rules don't work with CreateView because there is no object instance yet, so it throws a PK error. However, I have defined rules as such that will accept just the user object and will return the appropriate True/False. I really needed some security rules on the CreateView, so I started messing with the get_object function (unused for CreateView) and I made this work by adding the following function '**get_object**' to the CreateView class:\n\n`\nclass CustomCreateView(PermissionRequiredMixin, CreateView):\n    \"\"\" other stuff \"\"\"\n    def get_object(self):\n        pass\n`\n\nNow I'm trying to get this working with ListView, which is proving to be a bit more difficult...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/38", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/38/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/38/events", "html_url": "https://github.com/dfunckt/django-rules/issues/38", "id": 175631118, "node_id": "MDU6SXNzdWUxNzU2MzExMTg=", "number": 38, "title": "Not possible to pass a GET/POST request parameter to objectgetter()", "user": {"login": "chinniehendrix", "id": 19696296, "node_id": "MDQ6VXNlcjE5Njk2Mjk2", "avatar_url": "https://avatars0.githubusercontent.com/u/19696296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chinniehendrix", "html_url": "https://github.com/chinniehendrix", "followers_url": "https://api.github.com/users/chinniehendrix/followers", "following_url": "https://api.github.com/users/chinniehendrix/following{/other_user}", "gists_url": "https://api.github.com/users/chinniehendrix/gists{/gist_id}", "starred_url": "https://api.github.com/users/chinniehendrix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chinniehendrix/subscriptions", "organizations_url": "https://api.github.com/users/chinniehendrix/orgs", "repos_url": "https://api.github.com/users/chinniehendrix/repos", "events_url": "https://api.github.com/users/chinniehendrix/events{/privacy}", "received_events_url": "https://api.github.com/users/chinniehendrix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-07T23:33:01Z", "updated_at": "2016-09-08T13:42:59Z", "closed_at": "2016-09-08T13:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems like there is no way to pass a request parameter to the rules.contrib.views.objectgetter() function in order to retrieve the object to perform the permission check on.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/37", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/37/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/37/events", "html_url": "https://github.com/dfunckt/django-rules/issues/37", "id": 175630711, "node_id": "MDU6SXNzdWUxNzU2MzA3MTE=", "number": 37, "title": "rules.contrib.views.objectgetter() does not work with default view argument values", "user": {"login": "chinniehendrix", "id": 19696296, "node_id": "MDQ6VXNlcjE5Njk2Mjk2", "avatar_url": "https://avatars0.githubusercontent.com/u/19696296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chinniehendrix", "html_url": "https://github.com/chinniehendrix", "followers_url": "https://api.github.com/users/chinniehendrix/followers", "following_url": "https://api.github.com/users/chinniehendrix/following{/other_user}", "gists_url": "https://api.github.com/users/chinniehendrix/gists{/gist_id}", "starred_url": "https://api.github.com/users/chinniehendrix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chinniehendrix/subscriptions", "organizations_url": "https://api.github.com/users/chinniehendrix/orgs", "repos_url": "https://api.github.com/users/chinniehendrix/repos", "events_url": "https://api.github.com/users/chinniehendrix/events{/privacy}", "received_events_url": "https://api.github.com/users/chinniehendrix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-07T23:29:57Z", "updated_at": "2018-03-07T01:32:49Z", "closed_at": "2016-09-08T13:56:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using the permission_required decorator as follows:\n@permission_required('perm_name', fn=objectgetter(model_name, view_arg)),\nit is not possible to leverage default argument values as specified in the view declaration.\n\nIf for example, I declare my view as follows:\ndef edit_circle(request, cid=0):\n    ...\n\nWhen the view is called without the 'cid' argument, the following exception is raised:\nImproperlyConfigured: Argument cid is not available. Given arguments: []\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/36", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/36/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/36/events", "html_url": "https://github.com/dfunckt/django-rules/issues/36", "id": 171678488, "node_id": "MDU6SXNzdWUxNzE2Nzg0ODg=", "number": 36, "title": "Permission Required Decorator always return True", "user": {"login": "edwin972", "id": 21083727, "node_id": "MDQ6VXNlcjIxMDgzNzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/21083727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin972", "html_url": "https://github.com/edwin972", "followers_url": "https://api.github.com/users/edwin972/followers", "following_url": "https://api.github.com/users/edwin972/following{/other_user}", "gists_url": "https://api.github.com/users/edwin972/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin972/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin972/subscriptions", "organizations_url": "https://api.github.com/users/edwin972/orgs", "repos_url": "https://api.github.com/users/edwin972/repos", "events_url": "https://api.github.com/users/edwin972/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin972/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-17T14:52:54Z", "updated_at": "2016-09-02T13:14:23Z", "closed_at": "2016-09-02T13:14:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "(sorry for my english)\n\nInformation:\nDjango 1.9\n\nSettings:\nAUTHENTICATION_BACKENDS = (\n\n```\n'django.contrib.auth.backends.ModelBackend',\n'rules.permissions.ObjectPermissionBackend',\n```\n\n)\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rules.apps.AutodiscoverRulesConfig',\n    'debug_toolbar',\n\n```\n Autre\n```\n\n]\n\nrules.py files with the predicate and permission(add_perm)\n\nviews.py with import rules.py\n\nwhen I use permission_required, it always return True, when I test the function(predicate) in the views for see the result with print, it's good but permission_required don't work.\n\nex:\n\nIf I have    rules.py:\n@rules.predicate \ndef is_author(user, book):\n    return book.author == user\n\nrules.add_perm('edit_book', is_author)\n\nif I used @permission_required('edit_book', fn=objectgetter(Book, 'id') it doesn't work but if I use in the views: is_author(object_user, object_book) it's work.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/35", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/35/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/35/events", "html_url": "https://github.com/dfunckt/django-rules/issues/35", "id": 148476694, "node_id": "MDU6SXNzdWUxNDg0NzY2OTQ=", "number": 35, "title": "help w/ example for docs", "user": {"login": "highpost", "id": 5192798, "node_id": "MDQ6VXNlcjUxOTI3OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/highpost", "html_url": "https://github.com/highpost", "followers_url": "https://api.github.com/users/highpost/followers", "following_url": "https://api.github.com/users/highpost/following{/other_user}", "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}", "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/highpost/subscriptions", "organizations_url": "https://api.github.com/users/highpost/orgs", "repos_url": "https://api.github.com/users/highpost/repos", "events_url": "https://api.github.com/users/highpost/events{/privacy}", "received_events_url": "https://api.github.com/users/highpost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-04-14T20:42:32Z", "updated_at": "2016-10-23T17:59:45Z", "closed_at": "2016-05-11T05:22:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @dfunckt, I've been building a test application w/ rules that I ultimately want to submit as a pull request. You can look at it in https://github.com/highpost/rules-testapp. It's a simple blog app with a number of users with different privilege levels.\n\nI'm also writing an article that you can either use in your documentation or we can find another home. The first chunk (in explore.txt) is an overview of basic Django permissions. I'll get to rules after that.\n\nMy problem now is that my app works ... except with rules. If you look at views.py, you'll see that I'm using CBVs. If you remove PermissionRequiredMixin from each view, you can use the various test URLs in the README.txt file without any problem. But if you include them, then the buttons that access the views will fail with \"127.0.0.1 redirected you too many times.\" I haven't had any luck tracking this down. I will note that the CreateView seems to work, and DetailView, UpdateView and DeleteView (with all take pk arguments) fail.\n\nThanks for your help.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/34", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/34/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/34/events", "html_url": "https://github.com/dfunckt/django-rules/issues/34", "id": 145781027, "node_id": "MDU6SXNzdWUxNDU3ODEwMjc=", "number": 34, "title": "persistence", "user": {"login": "highpost", "id": 5192798, "node_id": "MDQ6VXNlcjUxOTI3OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/highpost", "html_url": "https://github.com/highpost", "followers_url": "https://api.github.com/users/highpost/followers", "following_url": "https://api.github.com/users/highpost/following{/other_user}", "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}", "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/highpost/subscriptions", "organizations_url": "https://api.github.com/users/highpost/orgs", "repos_url": "https://api.github.com/users/highpost/repos", "events_url": "https://api.github.com/users/highpost/events{/privacy}", "received_events_url": "https://api.github.com/users/highpost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-04T19:27:43Z", "updated_at": "2016-05-12T07:22:28Z", "closed_at": "2016-05-12T07:22:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm new to django-rules. I like its simplicity and it's always helpful when there's more documentation than code. But I'm wondering how I should handle an app where I spin up a bunch of objects, each with its own set of permissions (and these are added to by users as time goes by) and, well, my server goes down. How do I rebuild that permission structure?\n\nI (really) like that django-rules doesn't require a database hit each time I make a permission check, but its also important to record those permissions.\n\nThanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/33", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/33/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/33/events", "html_url": "https://github.com/dfunckt/django-rules/issues/33", "id": 141313842, "node_id": "MDU6SXNzdWUxNDEzMTM4NDI=", "number": 33, "title": "Add the possibility to specify the view to which the user is redirected ", "user": {"login": "cormier", "id": 988906, "node_id": "MDQ6VXNlcjk4ODkwNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/988906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormier", "html_url": "https://github.com/cormier", "followers_url": "https://api.github.com/users/cormier/followers", "following_url": "https://api.github.com/users/cormier/following{/other_user}", "gists_url": "https://api.github.com/users/cormier/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormier/subscriptions", "organizations_url": "https://api.github.com/users/cormier/orgs", "repos_url": "https://api.github.com/users/cormier/repos", "events_url": "https://api.github.com/users/cormier/events{/privacy}", "received_events_url": "https://api.github.com/users/cormier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-16T15:43:50Z", "updated_at": "2016-03-17T18:25:35Z", "closed_at": "2016-03-17T18:25:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the user is redirected to the login page regardless of whether she is logged or not.\n- https://github.com/dfunckt/django-rules/blob/master/rules/compat/access_mixins.py#L80\n\nI believe that instead of always redirecting to login, it would be helpful to let users specify a redirection view that is more useful for them.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/32", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/32/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/32/events", "html_url": "https://github.com/dfunckt/django-rules/issues/32", "id": 137596481, "node_id": "MDU6SXNzdWUxMzc1OTY0ODE=", "number": 32, "title": "Support for PEP 484 annotations", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 728080211, "node_id": "MDU6TGFiZWw3MjgwODAyMTE=", "url": "https://api.github.com/repos/dfunckt/django-rules/labels/breaking", "name": "breaking", "color": "9be567", "default": false, "description": ""}, {"id": 733859740, "node_id": "MDU6TGFiZWw3MzM4NTk3NDA=", "url": "https://api.github.com/repos/dfunckt/django-rules/labels/help%20wanted", "name": "help wanted", "color": "91f2f7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-03-01T14:59:07Z", "updated_at": "2018-07-21T16:14:34Z", "closed_at": "2018-07-21T16:14:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using function annotations in rules will cause this error (Python 3.5):\n\n```\nValueError: Function has keyword-only arguments or annotations, use getfullargspec() API which can support them\n\nFile \"\u2026/app/rules.py\", line 3, in <module>\n  from .predicates import (\nFile \"\u2026/app/predicates.py\", line 13, in <module>\n  def is_superuser(user: User):\nFile \"\u2026/django-rules/rules/predicates.py\", line 246, in predicate\n  return inner(fn)\nFile \"\u2026/django-rules/rules/predicates.py\", line 241, in inner\n  p = Predicate(fn, name, **options)\nFile \"\u2026/django-rules/rules/predicates.py\", line 67, in __init__\n  argspec = inspect.getargspec(fn)\nFile \"/usr/lib64/python3.5/inspect.py\", line 1045, in getargspec\n  raise ValueError(\"Function has keyword-only arguments or annotations\"\n```\n\nRef: https://docs.python.org/3/library/inspect.html#inspect.getfullargspec\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/29", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/29/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/29/events", "html_url": "https://github.com/dfunckt/django-rules/issues/29", "id": 122722146, "node_id": "MDU6SXNzdWUxMjI3MjIxNDY=", "number": 29, "title": "Correct usage of rules py in module", "user": {"login": "Chasvortex", "id": 9006285, "node_id": "MDQ6VXNlcjkwMDYyODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9006285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chasvortex", "html_url": "https://github.com/Chasvortex", "followers_url": "https://api.github.com/users/Chasvortex/followers", "following_url": "https://api.github.com/users/Chasvortex/following{/other_user}", "gists_url": "https://api.github.com/users/Chasvortex/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chasvortex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chasvortex/subscriptions", "organizations_url": "https://api.github.com/users/Chasvortex/orgs", "repos_url": "https://api.github.com/users/Chasvortex/repos", "events_url": "https://api.github.com/users/Chasvortex/events{/privacy}", "received_events_url": "https://api.github.com/users/Chasvortex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-12-17T12:02:46Z", "updated_at": "2015-12-17T12:08:57Z", "closed_at": "2015-12-17T12:08:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Assuming I have a django project directory like so:\n\nAppA:\n-#views\n-#models\n**-#rules.py**\netc\n\nAppB\n-#settings\n-#wsgi\netc\n\nRules\n-compat\n-contrib\n-templatetags\n-#apps\netc\n\nIn App A I am defining predicates in the rules.py file, which has the absolute import from future at the top. I want to use these predicates in the App A views file, so I go from 'rules.contrib.views import permission_required'. This however tries to import contrib.views from AppA/rules.py, rather than from the Rules package. What am I doing wrong?\n\nThe documentation isn't super clear about this I don't think! I have 'rules.apps.AutodiscoverRulesConfig' in my installed apps.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/28", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/28/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/28/events", "html_url": "https://github.com/dfunckt/django-rules/issues/28", "id": 120495029, "node_id": "MDU6SXNzdWUxMjA0OTUwMjk=", "number": 28, "title": "Optimize rule evaluation", "user": {"login": "danielnaab", "id": 136512, "node_id": "MDQ6VXNlcjEzNjUxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/136512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielnaab", "html_url": "https://github.com/danielnaab", "followers_url": "https://api.github.com/users/danielnaab/followers", "following_url": "https://api.github.com/users/danielnaab/following{/other_user}", "gists_url": "https://api.github.com/users/danielnaab/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielnaab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielnaab/subscriptions", "organizations_url": "https://api.github.com/users/danielnaab/orgs", "repos_url": "https://api.github.com/users/danielnaab/repos", "events_url": "https://api.github.com/users/danielnaab/events{/privacy}", "received_events_url": "https://api.github.com/users/danielnaab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-12-04T21:59:52Z", "updated_at": "2015-12-08T01:16:03Z", "closed_at": "2015-12-07T09:53:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Assume a rule such as:\n\n```\nmy_rule = first_condition | second_condition\n```\n\nI would assume that `second_condition` would not be evaluated if `first_condition` evaluated to `True`. It appears that `django-rules` doesn't doesn't apply this optimization.\n\nIs there a way to handle this with the library? If not, what would be involved in adding it? (This is particularly valuable for my use-case, as I am abusing the predicates to mutate data when the predicates are called.)\n\nThanks for a great library!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/26", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/26/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/26/events", "html_url": "https://github.com/dfunckt/django-rules/issues/26", "id": 103044260, "node_id": "MDU6SXNzdWUxMDMwNDQyNjA=", "number": 26, "title": "Missing documentation for permission_required decorator", "user": {"login": "smcoll", "id": 321438, "node_id": "MDQ6VXNlcjMyMTQzOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/321438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smcoll", "html_url": "https://github.com/smcoll", "followers_url": "https://api.github.com/users/smcoll/followers", "following_url": "https://api.github.com/users/smcoll/following{/other_user}", "gists_url": "https://api.github.com/users/smcoll/gists{/gist_id}", "starred_url": "https://api.github.com/users/smcoll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smcoll/subscriptions", "organizations_url": "https://api.github.com/users/smcoll/orgs", "repos_url": "https://api.github.com/users/smcoll/repos", "events_url": "https://api.github.com/users/smcoll/events{/privacy}", "received_events_url": "https://api.github.com/users/smcoll/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-25T15:11:52Z", "updated_at": "2015-10-06T19:27:54Z", "closed_at": "2015-10-06T19:27:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A decorator was introduced to resolve #12, but it isn't explicitly mentioned in the README.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/25", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/25/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/25/events", "html_url": "https://github.com/dfunckt/django-rules/issues/25", "id": 102559551, "node_id": "MDU6SXNzdWUxMDI1NTk1NTE=", "number": 25, "title": "rules.compat not in the setup packages", "user": {"login": "aleg", "id": 2202367, "node_id": "MDQ6VXNlcjIyMDIzNjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2202367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleg", "html_url": "https://github.com/aleg", "followers_url": "https://api.github.com/users/aleg/followers", "following_url": "https://api.github.com/users/aleg/following{/other_user}", "gists_url": "https://api.github.com/users/aleg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleg/subscriptions", "organizations_url": "https://api.github.com/users/aleg/orgs", "repos_url": "https://api.github.com/users/aleg/repos", "events_url": "https://api.github.com/users/aleg/events{/privacy}", "received_events_url": "https://api.github.com/users/aleg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-22T19:06:48Z", "updated_at": "2015-10-06T19:28:46Z", "closed_at": "2015-10-06T19:20:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "`pip install git+https://github.com/dfunckt/django-rules.git@master` won't install the `compat` package.\nAs a result, doing something like `from rules.contrib.views import LoginRequiredMixin` will fail.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/23", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/23/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/23/events", "html_url": "https://github.com/dfunckt/django-rules/issues/23", "id": 84470472, "node_id": "MDU6SXNzdWU4NDQ3MDQ3Mg==", "number": 23, "title": "Problem using  template tags", "user": {"login": "IrishGussy", "id": 619006, "node_id": "MDQ6VXNlcjYxOTAwNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/619006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IrishGussy", "html_url": "https://github.com/IrishGussy", "followers_url": "https://api.github.com/users/IrishGussy/followers", "following_url": "https://api.github.com/users/IrishGussy/following{/other_user}", "gists_url": "https://api.github.com/users/IrishGussy/gists{/gist_id}", "starred_url": "https://api.github.com/users/IrishGussy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IrishGussy/subscriptions", "organizations_url": "https://api.github.com/users/IrishGussy/orgs", "repos_url": "https://api.github.com/users/IrishGussy/repos", "events_url": "https://api.github.com/users/IrishGussy/events{/privacy}", "received_events_url": "https://api.github.com/users/IrishGussy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2015-06-03T09:52:22Z", "updated_at": "2020-03-29T19:20:52Z", "closed_at": "2015-06-03T11:13:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having difficulty using template tags in my templates. For example this works\n\nIn the view:\n\n``` python\nfrom __future__                 import absolute_import\nimport rules\n...\ndef detail(request, slug):\n    obj = get_object_or_404(NewsStory, slug=slug)\n    return render(request, 'news/detail.html', {\n        'story': obj,\n        'can_publish_newsstory': rules.has_perm('can_publish_newsstory', request.user)\n        })\n```\n\nIn the template\n\n``` html\n       {% if can_publish_newsstory %}\n        <li><a href=\"{% url 'news:edit' story.slug %}\" class=\"button expand secondary\">Edit Story</a></li>\n        <li><a href=\"{% url 'news:delete' story.slug %}\" class=\"button expand secondary\">Delete Story</a></li>\n        {% endif %}\n```\n\nIf I change this to remove  'can_publish_newsstory' from the view and include it in the template, nothing shows.\n\nRevised Template\n\n``` html\n{% load rules %}\n{% has_perm 'can_publish_newsstory' user as can_publish_newsstory %}\n       {% if can_publish_newsstory %}\n        <li><a href=\"{% url 'news:edit' story.slug %}\" class=\"button expand secondary\">Edit Story</a></li>\n        <li><a href=\"{% url 'news:delete' story.slug %}\" class=\"button expand secondary\">Delete Story</a></li>\n        {% endif %}\n```\n\nI am using Python 2.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/22", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/22/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/22/events", "html_url": "https://github.com/dfunckt/django-rules/issues/22", "id": 75911912, "node_id": "MDU6SXNzdWU3NTkxMTkxMg==", "number": 22, "title": "Is it time for a new release ?", "user": {"login": "ticosax", "id": 1174343, "node_id": "MDQ6VXNlcjExNzQzNDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1174343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ticosax", "html_url": "https://github.com/ticosax", "followers_url": "https://api.github.com/users/ticosax/followers", "following_url": "https://api.github.com/users/ticosax/following{/other_user}", "gists_url": "https://api.github.com/users/ticosax/gists{/gist_id}", "starred_url": "https://api.github.com/users/ticosax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ticosax/subscriptions", "organizations_url": "https://api.github.com/users/ticosax/orgs", "repos_url": "https://api.github.com/users/ticosax/repos", "events_url": "https://api.github.com/users/ticosax/events{/privacy}", "received_events_url": "https://api.github.com/users/ticosax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-13T09:15:38Z", "updated_at": "2015-05-13T09:55:14Z", "closed_at": "2015-05-13T09:55:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi @dfunckt,\nI'm a happy user of the master branch for several month now. \nI think `django-rules` is stable and mature feature wised to be released and pushed to pypi.\n\nLet me know if you need help.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/21", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/21/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/21/events", "html_url": "https://github.com/dfunckt/django-rules/issues/21", "id": 60875965, "node_id": "MDU6SXNzdWU2MDg3NTk2NQ==", "number": 21, "title": "How to use PermissionRequiredMixin", "user": {"login": "meleksomai", "id": 1846037, "node_id": "MDQ6VXNlcjE4NDYwMzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1846037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meleksomai", "html_url": "https://github.com/meleksomai", "followers_url": "https://api.github.com/users/meleksomai/followers", "following_url": "https://api.github.com/users/meleksomai/following{/other_user}", "gists_url": "https://api.github.com/users/meleksomai/gists{/gist_id}", "starred_url": "https://api.github.com/users/meleksomai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meleksomai/subscriptions", "organizations_url": "https://api.github.com/users/meleksomai/orgs", "repos_url": "https://api.github.com/users/meleksomai/repos", "events_url": "https://api.github.com/users/meleksomai/events{/privacy}", "received_events_url": "https://api.github.com/users/meleksomai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-12T18:54:33Z", "updated_at": "2015-06-03T11:17:44Z", "closed_at": "2015-06-03T11:17:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have start implementing django-rules to my application and I would like to know how can I integrate the permission backend with CBVs in django.\n\nMy settings are:\n\n```\nAUTHENTICATION_BACKENDS = ( 'account.auth_backends.EmailAuthenticationBackend',\n                            'rules.permissions.ObjectPermissionBackend',\n                            'django.contrib.auth.backends.ModelBackend')\nINSTALLED_APPS = (\n    ....,\n    'rules.apps.AutodiscoverRulesConfig',\n    ...,)\n```\n\n**views.py**\n\n```\nclass BookEditView(SuccessMessageMixin, PermissionRequiredMixin, UpdateView):\n    model = Book\n    template_name = 'book.html'\n    form_class = BookFormSettings\n\n    success_message = \"%(title)s was created successfully\"\n\n    ### PermissionRequiredMixin settings\n    permission_required = 'books.change_course'\n```\n\n**rules.py**\n\n```\n@predicate\ndef is_author(user, course):\n    return book.author == user\n\nadd_perm('books.change_book', is_author)\n```\n\nIf this does not work, what are the best practices to integrate django-rules through views.\n\nThanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/20", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/20/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/20/events", "html_url": "https://github.com/dfunckt/django-rules/issues/20", "id": 60849336, "node_id": "MDU6SXNzdWU2MDg0OTMzNg==", "number": 20, "title": "'rules.apps' is not a package", "user": {"login": "meleksomai", "id": 1846037, "node_id": "MDQ6VXNlcjE4NDYwMzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1846037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meleksomai", "html_url": "https://github.com/meleksomai", "followers_url": "https://api.github.com/users/meleksomai/followers", "following_url": "https://api.github.com/users/meleksomai/following{/other_user}", "gists_url": "https://api.github.com/users/meleksomai/gists{/gist_id}", "starred_url": "https://api.github.com/users/meleksomai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meleksomai/subscriptions", "organizations_url": "https://api.github.com/users/meleksomai/orgs", "repos_url": "https://api.github.com/users/meleksomai/repos", "events_url": "https://api.github.com/users/meleksomai/events{/privacy}", "received_events_url": "https://api.github.com/users/meleksomai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-03-12T16:38:26Z", "updated_at": "2015-03-12T17:36:34Z", "closed_at": "2015-03-12T17:36:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not able to get django-rules working. I know that there is other issues that are similar #10 , #8 , and #16 ; but I don't have django-authority installed and I'm using python 3.4 and Django 1.7.6 \n\nThis is the error I'm receiving:\n\n```\nImportError at /\nNo module named 'rules.apps.AutodiscoverRulesConfig'; 'rules.apps' is not a package\nRequest Method: GET\nRequest URL:    http://localhost:8080/\nDjango Version: 1.7.6\nException Type: ImportError\nException Value:    \nNo module named 'rules.apps.AutodiscoverRulesConfig'; 'rules.apps' is not a package\nException Location: /usr/lib/python3.4/importlib/__init__.py in import_module, line 109\nPython Executable:  /usr/bin/python3.4\nPython Version: 3.4.1\n```\n\nThanks for the help.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/16", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/16/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/16/events", "html_url": "https://github.com/dfunckt/django-rules/issues/16", "id": 46026797, "node_id": "MDU6SXNzdWU0NjAyNjc5Nw==", "number": 16, "title": "Autodiscover, how?", "user": {"login": "shoooe", "id": 733227, "node_id": "MDQ6VXNlcjczMzIyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoooe", "html_url": "https://github.com/shoooe", "followers_url": "https://api.github.com/users/shoooe/followers", "following_url": "https://api.github.com/users/shoooe/following{/other_user}", "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions", "organizations_url": "https://api.github.com/users/shoooe/orgs", "repos_url": "https://api.github.com/users/shoooe/repos", "events_url": "https://api.github.com/users/shoooe/events{/privacy}", "received_events_url": "https://api.github.com/users/shoooe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-10-16T19:43:46Z", "updated_at": "2014-10-16T20:00:31Z", "closed_at": "2014-10-16T19:59:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I've read in the documentation that you can have rules autodiscover rule.py files in your applications. That is great, but the documentation doesn't clarify is both `rules` and `rules.apps.AutodiscoverRulesConfig` should be in `INSTALLED_APPS`.\n- If I add only `rules`, then `rules.py` files are not discovered\n- If I add both, then I get \"ImproperlyConfigured: Application labels aren't unique, duplicates: rules\"\n- If I only add `rules.apps.AutodiscoverRulesConfig` then it says that it cannot import `predicate` from `rules` in `from rules import predicate`.\n\nIs this intended behavior?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/12", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/12/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/12/events", "html_url": "https://github.com/dfunckt/django-rules/issues/12", "id": 45117177, "node_id": "MDU6SXNzdWU0NTExNzE3Nw==", "number": 12, "title": "Missing decorator for views?", "user": {"login": "shoooe", "id": 733227, "node_id": "MDQ6VXNlcjczMzIyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/733227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoooe", "html_url": "https://github.com/shoooe", "followers_url": "https://api.github.com/users/shoooe/followers", "following_url": "https://api.github.com/users/shoooe/following{/other_user}", "gists_url": "https://api.github.com/users/shoooe/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoooe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoooe/subscriptions", "organizations_url": "https://api.github.com/users/shoooe/orgs", "repos_url": "https://api.github.com/users/shoooe/repos", "events_url": "https://api.github.com/users/shoooe/events{/privacy}", "received_events_url": "https://api.github.com/users/shoooe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "dfunckt", "id": 130359, "node_id": "MDQ6VXNlcjEzMDM1OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/130359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfunckt", "html_url": "https://github.com/dfunckt", "followers_url": "https://api.github.com/users/dfunckt/followers", "following_url": "https://api.github.com/users/dfunckt/following{/other_user}", "gists_url": "https://api.github.com/users/dfunckt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfunckt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfunckt/subscriptions", "organizations_url": "https://api.github.com/users/dfunckt/orgs", "repos_url": "https://api.github.com/users/dfunckt/repos", "events_url": "https://api.github.com/users/dfunckt/events{/privacy}", "received_events_url": "https://api.github.com/users/dfunckt/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dfunckt", "id": 130359, "node_id": "MDQ6VXNlcjEzMDM1OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/130359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfunckt", "html_url": "https://github.com/dfunckt", "followers_url": "https://api.github.com/users/dfunckt/followers", "following_url": "https://api.github.com/users/dfunckt/following{/other_user}", "gists_url": "https://api.github.com/users/dfunckt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfunckt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfunckt/subscriptions", "organizations_url": "https://api.github.com/users/dfunckt/orgs", "repos_url": "https://api.github.com/users/dfunckt/repos", "events_url": "https://api.github.com/users/dfunckt/events{/privacy}", "received_events_url": "https://api.github.com/users/dfunckt/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2014-10-07T14:55:42Z", "updated_at": "2015-07-26T08:48:15Z", "closed_at": "2015-07-26T08:48:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the documentation it's not specified how to limit a view to users that have object based permissions. Just like normally we can do:\n\n```\n@permission_required('app.action_object')\ndef my_view(request, ...):\n    pass\n```\n\nI think that we should be able to somehow take incoming object IDs arguments and automatically block the request if the user does not meet the requirements.\n\nFor example, something along the lines of:\n\n```\n@permission_required('app.view_posts', 'post_id')\ndef view_post(request, post_id):\n    pass\n```\n\nWhat do you think?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/10", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/10/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/10/events", "html_url": "https://github.com/dfunckt/django-rules/issues/10", "id": 42761737, "node_id": "MDU6SXNzdWU0Mjc2MTczNw==", "number": 10, "title": "Autodiscovering does not work", "user": {"login": "gagarski", "id": 6356608, "node_id": "MDQ6VXNlcjYzNTY2MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6356608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gagarski", "html_url": "https://github.com/gagarski", "followers_url": "https://api.github.com/users/gagarski/followers", "following_url": "https://api.github.com/users/gagarski/following{/other_user}", "gists_url": "https://api.github.com/users/gagarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/gagarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gagarski/subscriptions", "organizations_url": "https://api.github.com/users/gagarski/orgs", "repos_url": "https://api.github.com/users/gagarski/repos", "events_url": "https://api.github.com/users/gagarski/events{/privacy}", "received_events_url": "https://api.github.com/users/gagarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-15T11:11:45Z", "updated_at": "2014-09-15T11:47:33Z", "closed_at": "2014-09-15T11:46:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\nI am using `django 1.7` and trying to enable autodiscovering of `rules.py` files as it shown in the README file:\n\n``` python\nINSTALLED_APPS = (\n    # ...\n    'rules',\n    'rules.apps.AutodiscoverRulesConfig',\n)\n```\n\n But I am getting the following error:\n\n```\nTraceback (most recent call last):\n  File \"./manage.py\", line 10, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/usr/lib/python3.4/site-packages/django/core/management/__init__.py\", line 385, in execute_from_command_line\n    utility.execute()\n  File \"/usr/lib/python3.4/site-packages/django/core/management/__init__.py\", line 354, in execute\n    django.setup()\n  File \"/usr/lib/python3.4/site-packages/django/__init__.py\", line 21, in setup\n    apps.populate(settings.INSTALLED_APPS)\n  File \"/usr/lib/python3.4/site-packages/django/apps/registry.py\", line 89, in populate\n    \"duplicates: %s\" % app_config.label)\ndjango.core.exceptions.ImproperlyConfigured: Application labels aren't unique, duplicates: rules\n```\n\nWhen I am disabling `rules` application:\n\n``` python\nINSTALLED_APPS = (\n    # ...\n    #'rules',\n    'rules.apps.AutodiscoverRulesConfig',\n)\n```\n\n I am getting another error (when I am trying to load any page):\n\n```\nImportError at /\nNo module named 'rules.apps.AutodiscoverRulesConfig'; 'rules.apps' is not a package\nRequest Method: GET\nRequest URL:    http://localhost:8000/\nDjango Version: 1.7\nException Type: ImportError\nException Value:    \nNo module named 'rules.apps.AutodiscoverRulesConfig'; 'rules.apps' is not a package\nException Location: /usr/lib/python3.4/site-packages/authority/__init__.py in autodiscover, line 21\nPython Executable:  /usr/bin/python\nPython Version: 3.4.1\n```\n\nWhat is the correct way of using autodiscover?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/8", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/8/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/8/events", "html_url": "https://github.com/dfunckt/django-rules/issues/8", "id": 41933219, "node_id": "MDU6SXNzdWU0MTkzMzIxOQ==", "number": 8, "title": "Can't import django-rules from my app's rules.py.", "user": {"login": "bmihelac", "id": 13813, "node_id": "MDQ6VXNlcjEzODEz", "avatar_url": "https://avatars0.githubusercontent.com/u/13813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmihelac", "html_url": "https://github.com/bmihelac", "followers_url": "https://api.github.com/users/bmihelac/followers", "following_url": "https://api.github.com/users/bmihelac/following{/other_user}", "gists_url": "https://api.github.com/users/bmihelac/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmihelac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmihelac/subscriptions", "organizations_url": "https://api.github.com/users/bmihelac/orgs", "repos_url": "https://api.github.com/users/bmihelac/repos", "events_url": "https://api.github.com/users/bmihelac/events{/privacy}", "received_events_url": "https://api.github.com/users/bmihelac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-09-04T13:02:40Z", "updated_at": "2014-09-04T13:43:48Z", "closed_at": "2014-09-04T13:37:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Shouldn't it be something else then `rules`, to avoid importing itself instead of `rules` app:\n\n```\n#myapp/rules.py\nimport rules\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/6", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/6/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/6/events", "html_url": "https://github.com/dfunckt/django-rules/issues/6", "id": 41631974, "node_id": "MDU6SXNzdWU0MTYzMTk3NA==", "number": 6, "title": "Is predicates invocation too magic ?", "user": {"login": "ticosax", "id": 1174343, "node_id": "MDQ6VXNlcjExNzQzNDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1174343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ticosax", "html_url": "https://github.com/ticosax", "followers_url": "https://api.github.com/users/ticosax/followers", "following_url": "https://api.github.com/users/ticosax/following{/other_user}", "gists_url": "https://api.github.com/users/ticosax/gists{/gist_id}", "starred_url": "https://api.github.com/users/ticosax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ticosax/subscriptions", "organizations_url": "https://api.github.com/users/ticosax/orgs", "repos_url": "https://api.github.com/users/ticosax/repos", "events_url": "https://api.github.com/users/ticosax/events{/privacy}", "received_events_url": "https://api.github.com/users/ticosax/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 84526086, "node_id": "MDU6TGFiZWw4NDUyNjA4Ng==", "url": "https://api.github.com/repos/dfunckt/django-rules/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2014-09-01T12:08:11Z", "updated_at": "2015-01-25T13:39:31Z", "closed_at": "2015-01-25T13:36:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\nI'm raising a question here before submitting any pull request.\nI think there is a design issue with Predicate.test(), because if I defined my predicate to accept only\ntwo positional arguments and the caller gives only one argument, my predicate will be called with None for the second argument.\n\n``` python\n@rules.predicate\ndef are_equal(a, b):\n  return a == b\n\nrules.add_rule('test_this', are_equal)\nrules.test_rule('test_this', 'a', 'a') # OK there is two positional argument\nrules.test_rule('test_this', 'a')  # why b is None in this case ??\n```\n\nThis behaviour troubles me, I do not know yet how it should behave, but I would like, first, to hear from you.\nDo you think there is room for improvement ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dfunckt/django-rules/issues/1", "repository_url": "https://api.github.com/repos/dfunckt/django-rules", "labels_url": "https://api.github.com/repos/dfunckt/django-rules/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/dfunckt/django-rules/issues/1/comments", "events_url": "https://api.github.com/repos/dfunckt/django-rules/issues/1/events", "html_url": "https://github.com/dfunckt/django-rules/issues/1", "id": 30730312, "node_id": "MDU6SXNzdWUzMDczMDMxMg==", "number": 1, "title": "Admin Integration", "user": {"login": "raratiru", "id": 6132160, "node_id": "MDQ6VXNlcjYxMzIxNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/6132160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raratiru", "html_url": "https://github.com/raratiru", "followers_url": "https://api.github.com/users/raratiru/followers", "following_url": "https://api.github.com/users/raratiru/following{/other_user}", "gists_url": "https://api.github.com/users/raratiru/gists{/gist_id}", "starred_url": "https://api.github.com/users/raratiru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raratiru/subscriptions", "organizations_url": "https://api.github.com/users/raratiru/orgs", "repos_url": "https://api.github.com/users/raratiru/repos", "events_url": "https://api.github.com/users/raratiru/events{/privacy}", "received_events_url": "https://api.github.com/users/raratiru/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-04-02T22:10:33Z", "updated_at": "2014-04-16T17:04:08Z", "closed_at": "2014-04-03T13:22:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Very noob in Python/Django:\n\nReading the docs, I get the basic idea of applying django-rules in a django template.\n\nHowever, I feel completely overwhelmed when it comes to applying it in django-admin.\n\nCould you please provide a hint?\n", "performed_via_github_app": null, "score": 1.0}]}