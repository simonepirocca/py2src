{"total_count": 16, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/kaste/mockito-python/issues/33", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/33/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/33/events", "html_url": "https://github.com/kaste/mockito-python/issues/33", "id": 565937573, "node_id": "MDU6SXNzdWU1NjU5Mzc1NzM=", "number": 33, "title": "Invocation of mocked @classmethod defined in super classes fails. ", "user": {"login": "nielsvaneck", "id": 11406, "node_id": "MDQ6VXNlcjExNDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/11406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nielsvaneck", "html_url": "https://github.com/nielsvaneck", "followers_url": "https://api.github.com/users/nielsvaneck/followers", "following_url": "https://api.github.com/users/nielsvaneck/following{/other_user}", "gists_url": "https://api.github.com/users/nielsvaneck/gists{/gist_id}", "starred_url": "https://api.github.com/users/nielsvaneck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nielsvaneck/subscriptions", "organizations_url": "https://api.github.com/users/nielsvaneck/orgs", "repos_url": "https://api.github.com/users/nielsvaneck/repos", "events_url": "https://api.github.com/users/nielsvaneck/events{/privacy}", "received_events_url": "https://api.github.com/users/nielsvaneck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-16T17:14:43Z", "updated_at": "2020-02-19T11:16:39Z", "closed_at": "2020-02-19T11:16:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I recently tried mocking a class method and saw my test failing with a cryptic message\r\n`Fail: TypeError: missing a required argument: 'id'` and an exception somewhere in the python library code. \r\n\r\nI grabbed the mockito-python code, did some digging and found that the only thing that set my case apart from what mockito-python supports (and has tests for \ud83d\udc4d) is that in my case, the class method I tried mocking, was defined on a super class of the object in `when()`. \r\n\r\nHere's a little example that replicates the issue: \r\n\r\n```python\r\nclass LoudBarker:\r\n    @classmethod\r\n    def loud_bark(cls, bark):\r\n        return bark\r\n\r\nclass Dog(LoudBarker):\r\n    @classmethod\r\n    def bark(cls):\r\n        return \"woof!\"\r\n\r\nclass LoudBarkerTest(TestBase):\r\n    def test_loud_dog(self):\r\n        when(Dog).loud_bark(\"woof!\").thenReturn(\"WOOOOF!\")\r\n        self.assertEqual(Dog.loud_bark(\"woof!\"), \"WOOOOF!\") #fails with TypeError\r\n```\r\n\r\nHere, `Dog.loud_bark(\"woof!\")` will fail with `Fail: TypeError: missing a required argument: 'bark'`. \r\n\r\nIf we write the mocking statement based on the class where the class method is defined, everything works as expected: \r\n\r\n```python\r\n    def test_loud_bark__in_loud_barker(self):\r\n        when(LoudBarker).loud_bark(\"woof!\").thenReturn(\"WOOOOF!\")\r\n        self.assertEqual(Dog.loud_bark(\"woof!\"), \"WOOOOF!\") #passes\r\n```\r\n\r\nIn practice, this way of defining `when()` may be difficult because libraries do not always exactly expose in what class a class method is defined and source code may not always be available to find the answer.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/32", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/32/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/32/events", "html_url": "https://github.com/kaste/mockito-python/issues/32", "id": 542127639, "node_id": "MDU6SXNzdWU1NDIxMjc2Mzk=", "number": 32, "title": "mock function docstring typo", "user": {"login": "chrisheaththomas", "id": 6882165, "node_id": "MDQ6VXNlcjY4ODIxNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6882165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisheaththomas", "html_url": "https://github.com/chrisheaththomas", "followers_url": "https://api.github.com/users/chrisheaththomas/followers", "following_url": "https://api.github.com/users/chrisheaththomas/following{/other_user}", "gists_url": "https://api.github.com/users/chrisheaththomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisheaththomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisheaththomas/subscriptions", "organizations_url": "https://api.github.com/users/chrisheaththomas/orgs", "repos_url": "https://api.github.com/users/chrisheaththomas/repos", "events_url": "https://api.github.com/users/chrisheaththomas/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisheaththomas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-24T13:21:08Z", "updated_at": "2020-01-03T14:17:10Z", "closed_at": "2020-01-03T14:17:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "`mock` function docstring typo:\r\n\r\n`when(dummy).__call_(1).thenReturn(2)`\r\n\r\nmissing underscore in method __call__ i.e. \r\n\r\n`__call_` should be `__call__`\r\n\r\nCaught me out! Still, I learned about __call__ in the process :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/29", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/29/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/29/events", "html_url": "https://github.com/kaste/mockito-python/issues/29", "id": 520548205, "node_id": "MDU6SXNzdWU1MjA1NDgyMDU=", "number": 29, "title": "Test failures with Python 3.8", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-10T03:34:13Z", "updated_at": "2019-11-25T12:04:53Z", "closed_at": "2019-11-25T12:04:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n=================================== FAILURES ===================================\r\n_________________ TestFancyObjResolver.testWhenSplitOnNextLine _________________\r\n\r\nself = <mockito.tests.when2_test.TestFancyObjResolver object at 0x7f45e8ee8ac0>\r\n\r\n    def testWhenSplitOnNextLine(self):\r\n        # fmt: off\r\n>       when2(\r\n            os.path.commonprefix, '/Foo').thenReturn(True)\r\n\r\nbuild/lib/mockito/tests/when2_test.py:77: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nbuild/lib/mockito/mockito.py:243: in when2\r\n    obj, name = get_obj_attr_tuple(fn)\r\nbuild/lib/mockito/utils.py:159: in get_obj_attr_tuple\r\n    return get_function_host(path)\r\nbuild/lib/mockito/utils.py:59: in get_function_host\r\n    obj, name = find_invoking_frame_and_try_parse()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n    def find_invoking_frame_and_try_parse():\r\n        # Actually we just want the first frame in user land; we're open for\r\n        # refactorings here and don't yet decide on which frame exactly we hit\r\n        # that user land.\r\n        stack = inspect.stack(2)[2:10]\r\n        for frame_info in stack:\r\n            # Within `patch` and `spy2` we delegate to `when2` but that's not\r\n            # user land code\r\n            if frame_info[3] in ('patch', 'spy2'):\r\n                continue\r\n    \r\n            source = ''.join(frame_info[4])\r\n            m = FIND_ID.match(source)\r\n            if m:\r\n                # id should be something like `os.path.exists` etc.\r\n                id = m.group(1)\r\n                parts = id.split('.')\r\n                if len(parts) < 2:\r\n                    raise TypeError(\"can't guess origin of '%s'\" % id)\r\n    \r\n                frame = frame_info[0]\r\n                vars = frame.f_globals.copy()\r\n                vars.update(frame.f_locals)\r\n    \r\n                # Now that's a simple reduce; we get the initial value from the\r\n                # locally available `vars`, and then reduce the middle parts via\r\n                # `getattr`. The last path component gets not resolved, but is\r\n                # returned as plain string value.\r\n                obj = vars.get(parts[0])\r\n                for part in parts[1:-1]:\r\n                    obj = getattr(obj, part)\r\n                return obj, parts[-1]\r\n    \r\n>       raise TypeError('could not destructure first argument')\r\nE       TypeError: could not destructure first argument\r\n\r\nbuild/lib/mockito/utils.py:103: TypeError\r\n______________ TestFancyObjResolver.testEnsureWithWhen2SplitLine _______________\r\n\r\nself = <mockito.tests.when2_test.TestFancyObjResolver object at 0x7f45e8fc6160>\r\n\r\n    def testEnsureWithWhen2SplitLine(self):\r\n        # fmt: off\r\n>       with when2(\r\n                os.path.commonprefix, '/Foo'):\r\n\r\nbuild/lib/mockito/tests/when2_test.py:88: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nbuild/lib/mockito/mockito.py:243: in when2\r\n    obj, name = get_obj_attr_tuple(fn)\r\nbuild/lib/mockito/utils.py:159: in get_obj_attr_tuple\r\n    return get_function_host(path)\r\nbuild/lib/mockito/utils.py:59: in get_function_host\r\n    obj, name = find_invoking_frame_and_try_parse()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n    def find_invoking_frame_and_try_parse():\r\n        # Actually we just want the first frame in user land; we're open for\r\n        # refactorings here and don't yet decide on which frame exactly we hit\r\n        # that user land.\r\n        stack = inspect.stack(2)[2:10]\r\n        for frame_info in stack:\r\n            # Within `patch` and `spy2` we delegate to `when2` but that's not\r\n            # user land code\r\n            if frame_info[3] in ('patch', 'spy2'):\r\n                continue\r\n    \r\n            source = ''.join(frame_info[4])\r\n            m = FIND_ID.match(source)\r\n            if m:\r\n                # id should be something like `os.path.exists` etc.\r\n                id = m.group(1)\r\n                parts = id.split('.')\r\n                if len(parts) < 2:\r\n                    raise TypeError(\"can't guess origin of '%s'\" % id)\r\n    \r\n                frame = frame_info[0]\r\n                vars = frame.f_globals.copy()\r\n                vars.update(frame.f_locals)\r\n    \r\n                # Now that's a simple reduce; we get the initial value from the\r\n                # locally available `vars`, and then reduce the middle parts via\r\n                # `getattr`. The last path component gets not resolved, but is\r\n                # returned as plain string value.\r\n                obj = vars.get(parts[0])\r\n                for part in parts[1:-1]:\r\n                    obj = getattr(obj, part)\r\n                return obj, parts[-1]\r\n    \r\n>       raise TypeError('could not destructure first argument')\r\nE       TypeError: could not destructure first argument\r\n\r\nbuild/lib/mockito/utils.py:103: TypeError\r\n================== 2 failed, 1125 passed, 1 xfailed in 2.29s ===================\r\n```\r\n\r\nLooks like the frame info doesn't contain needed info anymore with Python 3.8:\r\n```\r\nFrameInfo(frame=<frame at 0x7f59767aea40, file '/build/python-mockito/src/mockito-python-1.1.1/build/lib/mockito/tests/when2_test.py', line 88, code testEnsureWithWhen2SplitLine>, filename='/build/python-mockito/src/mockito-python-1.1.1/build/lib/mockito/tests/when2_test.py', lineno=88, function='testEnsureWithWhen2SplitLine', code_context=['        # fmt: off\\n', '        with when2(\\n'], index=1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/26", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/26/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/26/events", "html_url": "https://github.com/kaste/mockito-python/issues/26", "id": 393711258, "node_id": "MDU6SXNzdWUzOTM3MTEyNTg=", "number": 26, "title": "Moking property with execption", "user": {"login": "aaltat", "id": 2665023, "node_id": "MDQ6VXNlcjI2NjUwMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2665023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaltat", "html_url": "https://github.com/aaltat", "followers_url": "https://api.github.com/users/aaltat/followers", "following_url": "https://api.github.com/users/aaltat/following{/other_user}", "gists_url": "https://api.github.com/users/aaltat/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaltat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaltat/subscriptions", "organizations_url": "https://api.github.com/users/aaltat/orgs", "repos_url": "https://api.github.com/users/aaltat/repos", "events_url": "https://api.github.com/users/aaltat/events{/privacy}", "received_events_url": "https://api.github.com/users/aaltat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-12-22T23:55:50Z", "updated_at": "2019-11-25T14:31:53Z", "closed_at": "2019-11-25T14:31:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to mock and object attribute and when the attribute is called I would like to raise an exception. I would like to do something like this:\r\n```\r\ndef test(self):\r\n    element = mock()\r\n    when(element).text.thenRaise(ValueError('foo'))\r\n```\r\nBut because when can only mock method, the above does not quite work. I also tried several other ways, but could not get it working. Is there a way to make the mock attribute to raise and exception?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/25", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/25/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/25/events", "html_url": "https://github.com/kaste/mockito-python/issues/25", "id": 381206776, "node_id": "MDU6SXNzdWUzODEyMDY3NzY=", "number": 25, "title": "Error while installing mockito==0.5.2", "user": {"login": "spafe", "id": 45071722, "node_id": "MDQ6VXNlcjQ1MDcxNzIy", "avatar_url": "https://avatars3.githubusercontent.com/u/45071722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spafe", "html_url": "https://github.com/spafe", "followers_url": "https://api.github.com/users/spafe/followers", "following_url": "https://api.github.com/users/spafe/following{/other_user}", "gists_url": "https://api.github.com/users/spafe/gists{/gist_id}", "starred_url": "https://api.github.com/users/spafe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spafe/subscriptions", "organizations_url": "https://api.github.com/users/spafe/orgs", "repos_url": "https://api.github.com/users/spafe/repos", "events_url": "https://api.github.com/users/spafe/events{/privacy}", "received_events_url": "https://api.github.com/users/spafe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-15T15:16:31Z", "updated_at": "2018-11-16T09:52:53Z", "closed_at": "2018-11-16T09:52:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi There,\r\nI was trying to install mockito 0.5.2 version with below setup\r\nCentos - 6.6 \r\npython - 2.6.6\r\npip - 1.5.6\r\n\r\nBut I was getting error messages even though I had nose (1.3.7) is installed on the box.\r\nIt would be great help if you can shed some light on this.\r\n\r\n```\r\n$pip install mockito==0.5.2\r\nDownloading/unpacking mockito==0.5.2\r\n  Downloading mockito-0.5.2.tar.gz\r\n  Running setup.py (path:/tmp/pip_build_root/mockito/setup.py) egg_info for package mockito\r\n    Couldn't find index page for 'nose' (maybe misspelled?)\r\n    No local packages or download links found for nose\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 17, in <module>\r\n      File \"/tmp/pip_build_root/mockito/setup.py\", line 36, in <module>\r\n        **extra)\r\n      File \"/usr/lib64/python2.6/distutils/core.py\", line 113, in setup\r\n        _setup_distribution = dist = klass(attrs)\r\n      File \"/usr/lib/python2.6/site-packages/setuptools/dist.py\", line 221, in __init__\r\n        self.fetch_build_eggs(attrs.pop('setup_requires'))\r\n      File \"/usr/lib/python2.6/site-packages/setuptools/dist.py\", line 245, in fetch_build_eggs\r\n        parse_requirements(requires), installer=self.fetch_build_egg\r\n      File \"/usr/lib/python2.6/site-packages/pkg_resources.py\", line 538, in resolve\r\n        dist = best[req.key] = env.best_match(req, self, installer)\r\n      File \"/usr/lib/python2.6/site-packages/pkg_resources.py\", line 780, in best_match\r\n        return self.obtain(req, installer) # try and download/install\r\n      File \"/usr/lib/python2.6/site-packages/pkg_resources.py\", line 792, in obtain\r\n        return installer(requirement)\r\n      File \"/usr/lib/python2.6/site-packages/setuptools/dist.py\", line 293, in fetch_build_egg\r\n        return cmd.easy_install(req)\r\n      File \"/usr/lib/python2.6/site-packages/setuptools/command/easy_install.py\", line 466, in easy_install\r\n        raise DistutilsError(msg)\r\n    distutils.errors.DistutilsError: Could not find suitable distribution for Requirement.parse('nose')\r\n    Complete output from command python setup.py egg_info:\r\n    Couldn't find index page for 'nose' (maybe misspelled?)\r\n\r\nNo local packages or download links found for nose\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"<string>\", line 17, in <module>\r\n\r\n  File \"/tmp/pip_build_root/mockito/setup.py\", line 36, in <module>\r\n\r\n    **extra)\r\n\r\n  File \"/usr/lib64/python2.6/distutils/core.py\", line 113, in setup\r\n\r\n    _setup_distribution = dist = klass(attrs)\r\n\r\n  File \"/usr/lib/python2.6/site-packages/setuptools/dist.py\", line 221, in __init__\r\n\r\n    self.fetch_build_eggs(attrs.pop('setup_requires'))\r\n\r\n  File \"/usr/lib/python2.6/site-packages/setuptools/dist.py\", line 245, in fetch_build_eggs\r\n\r\n    parse_requirements(requires), installer=self.fetch_build_egg\r\n\r\n  File \"/usr/lib/python2.6/site-packages/pkg_resources.py\", line 538, in resolve\r\n\r\n    dist = best[req.key] = env.best_match(req, self, installer)\r\n\r\n  File \"/usr/lib/python2.6/site-packages/pkg_resources.py\", line 780, in best_match\r\n\r\n    return self.obtain(req, installer) # try and download/install\r\n\r\n  File \"/usr/lib/python2.6/site-packages/pkg_resources.py\", line 792, in obtain\r\n\r\n    return installer(requirement)\r\n\r\n  File \"/usr/lib/python2.6/site-packages/setuptools/dist.py\", line 293, in fetch_build_egg\r\n\r\n    return cmd.easy_install(req)\r\n\r\n  File \"/usr/lib/python2.6/site-packages/setuptools/command/easy_install.py\", line 466, in easy_install\r\n\r\n    raise DistutilsError(msg)\r\n\r\ndistutils.errors.DistutilsError: Could not find suitable distribution for Requirement.parse('nose')\r\n\r\n----------------------------------------\r\nCleaning up...\r\nCommand python setup.py egg_info failed with error code 1 in /tmp/pip_build_root/mockito\r\nStoring debug log for failure in /root/.pip/pip.log\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/19", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/19/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/19/events", "html_url": "https://github.com/kaste/mockito-python/issues/19", "id": 353549639, "node_id": "MDU6SXNzdWUzNTM1NDk2Mzk=", "number": 19, "title": "Ellipsis in arg raises ValueError", "user": {"login": "mazmrini", "id": 15892091, "node_id": "MDQ6VXNlcjE1ODkyMDkx", "avatar_url": "https://avatars3.githubusercontent.com/u/15892091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mazmrini", "html_url": "https://github.com/mazmrini", "followers_url": "https://api.github.com/users/mazmrini/followers", "following_url": "https://api.github.com/users/mazmrini/following{/other_user}", "gists_url": "https://api.github.com/users/mazmrini/gists{/gist_id}", "starred_url": "https://api.github.com/users/mazmrini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mazmrini/subscriptions", "organizations_url": "https://api.github.com/users/mazmrini/orgs", "repos_url": "https://api.github.com/users/mazmrini/repos", "events_url": "https://api.github.com/users/mazmrini/events{/privacy}", "received_events_url": "https://api.github.com/users/mazmrini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-23T20:54:55Z", "updated_at": "2018-08-28T19:20:23Z", "closed_at": "2018-08-28T19:14:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm on mockito 1.1.0\r\n\r\n```\r\nFile \"mockito/signature.py\" line 45 in match_signature\r\n    if Ellipsis in args:\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```\r\n\r\nHere's some code that reproduces the bug:\r\n\r\n```\r\nimport numpy as np\r\nimport unittest\r\n\r\nfrom mockito import when, arg_that\r\n\r\n\r\nclass MakeMeFail:\r\n    def run(self, array: np.ndarray) -> int:\r\n        return 0\r\n\r\n\r\nclass TestMakeMeFail(unittest.TestCase):\r\n    def setUp(self) -> None:\r\n        self.__a_np_array = np.array([1, 2, 3])\r\n        self.__make_me_fail = MakeMeFail()\r\n\r\n    def test_this_one_fails(self) -> None:\r\n        expected_value = -1029\r\n        when(self.__make_me_fail)\\\r\n            .run(arg_that(lambda arg: np.array_equal(arg, self.__a_np_array)))\\\r\n            .thenReturn(expected_value)\r\n\r\n        result = self.__make_me_fail.run(self.__a_np_array)\r\n\r\n        self.assertEqual(expected_value, result)\r\n\r\n    def test_it_is_caused_by_this(self) -> None:\r\n        with self.assertRaises(ValueError):\r\n            result = None in (self.__a_np_array, 1, 2)\r\n\r\n    def test_this_one_works_because_kwargs_are_not_getting_the_Ellipsis_in_kwargs_check(self) -> None:\r\n        expected_value = -1029\r\n        when(self.__make_me_fail)\\\r\n            .run(array=arg_that(lambda arg: np.array_equal(arg, self.__a_np_array)))\\\r\n            .thenReturn(expected_value)\r\n\r\n        result = self.__make_me_fail.run(array=self.__a_np_array)\r\n\r\n        self.assertEqual(expected_value, result)\r\n```\r\n\r\n\r\nLove the module btw\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/16", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/16/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/16/events", "html_url": "https://github.com/kaste/mockito-python/issues/16", "id": 303675860, "node_id": "MDU6SXNzdWUzMDM2NzU4NjA=", "number": 16, "title": "Add method to clear all invocations for a mock", "user": {"login": "maximkulkin", "id": 10785, "node_id": "MDQ6VXNlcjEwNzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/10785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maximkulkin", "html_url": "https://github.com/maximkulkin", "followers_url": "https://api.github.com/users/maximkulkin/followers", "following_url": "https://api.github.com/users/maximkulkin/following{/other_user}", "gists_url": "https://api.github.com/users/maximkulkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/maximkulkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maximkulkin/subscriptions", "organizations_url": "https://api.github.com/users/maximkulkin/orgs", "repos_url": "https://api.github.com/users/maximkulkin/repos", "events_url": "https://api.github.com/users/maximkulkin/events{/privacy}", "received_events_url": "https://api.github.com/users/maximkulkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-08T23:54:31Z", "updated_at": "2018-05-02T09:36:30Z", "closed_at": "2018-05-02T09:36:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sometimes setting up test environment is hard and might involve some invocations on a mock object. But at the end we want to check only invocations that were made after particular action without need to take into account previous invocations. It would be nice to have a method to clear all invocations once setup is done so that test can check only invocations that happened afterwards.\r\n\r\nExample:\r\n\r\n```python\r\nimport mockito\r\n\r\nmock_obj = mockito.mock( ... )\r\nobj_under_test = MyObject(mock_obj)   # this makes some invocations on mock_obj\r\n\r\nmockito.clear(mock_obj)\r\n\r\nobj_under_test.do_stuff()  # triggers more invocations on mock_obj that we want to test\r\n\r\nmockito.verify(mock_obj).do_foo()\r\n```\r\n\r\nThis feature was [merged into Java Mockito](https://github.com/mockito/mockito/pull/286).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/15", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/15/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/15/events", "html_url": "https://github.com/kaste/mockito-python/issues/15", "id": 282809387, "node_id": "MDU6SXNzdWUyODI4MDkzODc=", "number": 15, "title": "How to mock @property ", "user": {"login": "aaltat", "id": 2665023, "node_id": "MDQ6VXNlcjI2NjUwMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2665023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaltat", "html_url": "https://github.com/aaltat", "followers_url": "https://api.github.com/users/aaltat/followers", "following_url": "https://api.github.com/users/aaltat/following{/other_user}", "gists_url": "https://api.github.com/users/aaltat/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaltat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaltat/subscriptions", "organizations_url": "https://api.github.com/users/aaltat/orgs", "repos_url": "https://api.github.com/users/aaltat/repos", "events_url": "https://api.github.com/users/aaltat/events{/privacy}", "received_events_url": "https://api.github.com/users/aaltat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-18T09:13:43Z", "updated_at": "2017-12-18T10:54:33Z", "closed_at": "2017-12-18T10:54:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I have this: \r\n```\r\nimport unittest\r\n\r\nfrom mockito import unstub\r\n\r\n\r\nclass ClassName(object):\r\n\r\n    @property\r\n    def value(self):\r\n        return 42\r\n\r\n    def is_value(self):\r\n        if self.value == 42:\r\n            return 'is 42'\r\n        raise ValueError()\r\n\r\n\r\nclass TestClassName(unittest.TestCase):\r\n\r\n    def test_foo(self):\r\n        x = ClassName()\r\n        with self.assertRaises(ValueError):\r\n            x.is_value()\r\n        unstub()\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n```\r\nIs there an easy to way to mock what `value` property returns? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/14", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/14/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/14/events", "html_url": "https://github.com/kaste/mockito-python/issues/14", "id": 268001011, "node_id": "MDU6SXNzdWUyNjgwMDEwMTE=", "number": 14, "title": "Support installation using Conda?", "user": {"login": "hans-permana", "id": 7643370, "node_id": "MDQ6VXNlcjc2NDMzNzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7643370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hans-permana", "html_url": "https://github.com/hans-permana", "followers_url": "https://api.github.com/users/hans-permana/followers", "following_url": "https://api.github.com/users/hans-permana/following{/other_user}", "gists_url": "https://api.github.com/users/hans-permana/gists{/gist_id}", "starred_url": "https://api.github.com/users/hans-permana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hans-permana/subscriptions", "organizations_url": "https://api.github.com/users/hans-permana/orgs", "repos_url": "https://api.github.com/users/hans-permana/repos", "events_url": "https://api.github.com/users/hans-permana/events{/privacy}", "received_events_url": "https://api.github.com/users/hans-permana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-24T11:49:46Z", "updated_at": "2017-12-22T09:55:44Z", "closed_at": "2017-12-22T09:55:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, I am really excited to use this library in Python. I have used it plenty of time in Java. Just one question, would installing through Conda environment be supported at some point? It would really simplify my Travis/Appveyor build. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/13", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/13/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/13/events", "html_url": "https://github.com/kaste/mockito-python/issues/13", "id": 259423105, "node_id": "MDU6SXNzdWUyNTk0MjMxMDU=", "number": 13, "title": "Mocking attributes which initially value None", "user": {"login": "aaltat", "id": 2665023, "node_id": "MDQ6VXNlcjI2NjUwMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2665023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaltat", "html_url": "https://github.com/aaltat", "followers_url": "https://api.github.com/users/aaltat/followers", "following_url": "https://api.github.com/users/aaltat/following{/other_user}", "gists_url": "https://api.github.com/users/aaltat/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaltat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaltat/subscriptions", "organizations_url": "https://api.github.com/users/aaltat/orgs", "repos_url": "https://api.github.com/users/aaltat/repos", "events_url": "https://api.github.com/users/aaltat/events{/privacy}", "received_events_url": "https://api.github.com/users/aaltat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 362888006, "node_id": "MDU6TGFiZWwzNjI4ODgwMDY=", "url": "https://api.github.com/repos/kaste/mockito-python/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-21T08:56:04Z", "updated_at": "2017-09-21T09:42:15Z", "closed_at": "2017-09-21T09:42:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have this code: \r\n```\r\nfrom selenium import webdriver\r\n\r\nfrom mockito import mock, when\r\n\r\n\r\nclass ClassName(object):\r\n\r\n    driver = None\r\n\r\n    def create_driver(self, browser):\r\n        if browser == 'chrome':\r\n            self.driver = webdriver.Chrome()\r\n        else:\r\n            self.driver = webdriver.Firefox()\r\n\r\n    def find_element(self, selector):\r\n        element = self.driver.find_element_by_xpath(selector)\r\n        if element:\r\n            print 'Do something complex which I want to test'\r\n\r\n\r\nx = ClassName()\r\nwhen(x.driver).find_element_by_xpath('//dvi').thenReturn(mock())\r\n\r\n```\r\nThen I could not figure out an easy way to mock the  `element = self.driver.find_element_by_xpath(selector)` line.  I did try several ways with `when` or other ways to define the `driver`, but all of them ended with different type of errors. Usually with `AttributeError: 'NoneType' object has no attribute 'find_element_by_xpath'` How the code should be changed that the mocking would work? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/12", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/12/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/12/events", "html_url": "https://github.com/kaste/mockito-python/issues/12", "id": 249575419, "node_id": "MDU6SXNzdWUyNDk1NzU0MTk=", "number": 12, "title": "Mocking inherited methods from super class", "user": {"login": "lennartblom", "id": 4670057, "node_id": "MDQ6VXNlcjQ2NzAwNTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4670057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lennartblom", "html_url": "https://github.com/lennartblom", "followers_url": "https://api.github.com/users/lennartblom/followers", "following_url": "https://api.github.com/users/lennartblom/following{/other_user}", "gists_url": "https://api.github.com/users/lennartblom/gists{/gist_id}", "starred_url": "https://api.github.com/users/lennartblom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lennartblom/subscriptions", "organizations_url": "https://api.github.com/users/lennartblom/orgs", "repos_url": "https://api.github.com/users/lennartblom/repos", "events_url": "https://api.github.com/users/lennartblom/events{/privacy}", "received_events_url": "https://api.github.com/users/lennartblom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 362888006, "node_id": "MDU6TGFiZWwzNjI4ODgwMDY=", "url": "https://api.github.com/repos/kaste/mockito-python/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-11T08:59:16Z", "updated_at": "2017-09-21T09:40:09Z", "closed_at": "2017-08-15T09:01:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I currently get weird error messages while testing my business logic in my controller classes.\r\n\r\nMy project/controller looks like this:\r\n\r\n```python\r\nclass ControllerBase:\r\n    pass\r\n\r\nclass RequestControllerBase(ControllerBase):\r\n    # I already have tests for this... \r\n    def _request_data_validation(...):\r\n        \"\"\" request data validation. Returns request data \"\"\"\r\n\r\nclass UserSessionRequestControllerBase(RequestControllerBase):\r\n    # I already have tests for this... \r\n    def _user_session_validation(...):\r\n        \"\"\" user session validation. Returns of user id \"\"\"\r\n\r\nclass SpecificControllerImplemention(UserSessionRequestControllerBase):\r\n    # I want to write tests for this and mock out the existing methods in super classes\r\n    def business_login(request: Request):\r\n        user_id = self._user_session_validation(request)\r\n        request_data = self._request_data_validation(request)\r\n        # now the business logic follows\r\n        # ....\r\n```\r\n\r\nWhen trying to mock self._request_data_validation(request) with *when()* I get the following error:\r\n\r\n```\r\nE           You called\r\nE           \r\nE                   _validate_request_data(request=<DummyRequest id=4402099424>, validation_schema=<UpdateDataSchema(many=False, strict=False)>),\r\nE           \r\nE           which is not expected. Stubbed invocations are:\r\nE           \r\nE                   _validate_request_data(request=<DummyRequest id=4402099424>, validation_schema=<UpdateDataSchema(many=False, strict=False)>)\r\nE      \r\n\r\n```\r\n\r\n\r\nWhat am I doing wrong? Or is it an issue on the side of mockito's when fixture?\r\nI am using Python 3.6 and pytest.\r\n\r\nThanks it advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/9", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/9/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/9/events", "html_url": "https://github.com/kaste/mockito-python/issues/9", "id": 217064986, "node_id": "MDU6SXNzdWUyMTcwNjQ5ODY=", "number": 9, "title": "Patching built-in/extension types", "user": {"login": "betabandido", "id": 5481662, "node_id": "MDQ6VXNlcjU0ODE2NjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5481662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/betabandido", "html_url": "https://github.com/betabandido", "followers_url": "https://api.github.com/users/betabandido/followers", "following_url": "https://api.github.com/users/betabandido/following{/other_user}", "gists_url": "https://api.github.com/users/betabandido/gists{/gist_id}", "starred_url": "https://api.github.com/users/betabandido/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/betabandido/subscriptions", "organizations_url": "https://api.github.com/users/betabandido/orgs", "repos_url": "https://api.github.com/users/betabandido/repos", "events_url": "https://api.github.com/users/betabandido/events{/privacy}", "received_events_url": "https://api.github.com/users/betabandido/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 362888006, "node_id": "MDU6TGFiZWwzNjI4ODgwMDY=", "url": "https://api.github.com/repos/kaste/mockito-python/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-26T16:46:08Z", "updated_at": "2017-09-21T09:39:13Z", "closed_at": "2017-05-01T13:08:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having problems patching `io.BytesIO`. When doing:\r\n\r\n        bytesIO_mock = mock(strict=True)\r\n        when(bytesIO_mock).getvalue().thenReturn('data')\r\n        patch(BytesIO.__new__, lambda: bytesIO_mock)\r\n\r\nI am getting the following error:\r\n\r\n    def set_method(self, method_name, new_method):\r\n    >       setattr(self.mocked_obj, method_name, new_method)\r\n    E       TypeError: can't set attributes of built-in/extension type '_io.BytesIO'\r\n        \r\n    /venv/lib/python3.6/site-packages/mockito/mocking.py:74: TypeError`\r\n\r\nAm I doing anything wrong, or is this a current limitation?\r\n\r\nThe following link contains a more detailed description of the issue:\r\nhttp://stackoverflow.com/questions/43031393/how-to-patch-built-in-extension-types-in-python-using-mockito", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/8", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/8/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/8/events", "html_url": "https://github.com/kaste/mockito-python/issues/8", "id": 205090460, "node_id": "MDU6SXNzdWUyMDUwOTA0NjA=", "number": 8, "title": "Error in 1.0.8 and 1.0.9: TypeError: 'staticmethod' object is not callable", "user": {"login": "aaltat", "id": 2665023, "node_id": "MDQ6VXNlcjI2NjUwMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2665023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaltat", "html_url": "https://github.com/aaltat", "followers_url": "https://api.github.com/users/aaltat/followers", "following_url": "https://api.github.com/users/aaltat/following{/other_user}", "gists_url": "https://api.github.com/users/aaltat/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaltat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaltat/subscriptions", "organizations_url": "https://api.github.com/users/aaltat/orgs", "repos_url": "https://api.github.com/users/aaltat/repos", "events_url": "https://api.github.com/users/aaltat/events{/privacy}", "received_events_url": "https://api.github.com/users/aaltat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-03T07:36:09Z", "updated_at": "2017-02-03T16:00:50Z", "closed_at": "2017-02-03T11:11:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I have this code: \r\n```\r\nfrom mockito import mock, when\r\nfrom appium import webdriver\r\n\r\nurl = 'localhost'\r\ndesired_capabilites = {'key1': 'value1'}\r\nmock_driver = mock()\r\nwhen(webdriver).Remote(url, desired_capabilites).thenReturn(mock_driver)\r\ndriver = webdriver.Remote(url, desired_capabilites)\r\n```\r\nThen in mockito 1.0.7 it works fine, but in 1.0.8 and 1.0,9 it fails with error: \r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\tmp\\foo.py\", line 8, in <module>\r\n    driver = webdriver.Remote(url, desired_capabilites)\r\nTypeError: 'staticmethod' object is not callable\r\n```\r\nIf needed [appium](https://github.com/appium/python-client) can be installed with: `pip install Appium-Python-Client==0.24`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/7", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/7/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/7/events", "html_url": "https://github.com/kaste/mockito-python/issues/7", "id": 202952217, "node_id": "MDU6SXNzdWUyMDI5NTIyMTc=", "number": 7, "title": "Backwards incompatable change between version 0.7.1 and 1.0.0", "user": {"login": "aaltat", "id": 2665023, "node_id": "MDQ6VXNlcjI2NjUwMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2665023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaltat", "html_url": "https://github.com/aaltat", "followers_url": "https://api.github.com/users/aaltat/followers", "following_url": "https://api.github.com/users/aaltat/following{/other_user}", "gists_url": "https://api.github.com/users/aaltat/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaltat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaltat/subscriptions", "organizations_url": "https://api.github.com/users/aaltat/orgs", "repos_url": "https://api.github.com/users/aaltat/repos", "events_url": "https://api.github.com/users/aaltat/events{/privacy}", "received_events_url": "https://api.github.com/users/aaltat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-01-24T21:58:21Z", "updated_at": "2017-01-29T15:07:10Z", "closed_at": "2017-01-25T13:24:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "In version 0.7.1 this used to work:\r\n```\r\nfrom mockito import mock\r\n\r\nclass ClassName(mock):\r\n```\r\nBut in version 1.0.1 it says:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/path/to/test/test_something.py\", line 108, in test_create_something\r\n    class ClassName(mock):\r\nTypeError: Error when calling the metaclass bases\r\n    function() argument 1 must be code, not str\r\n```\r\nIs this expected and I should change how my unit test work, or is this bug in mockito which could be fixed in some time frame?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/4", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/4/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/4/events", "html_url": "https://github.com/kaste/mockito-python/issues/4", "id": 163273082, "node_id": "MDU6SXNzdWUxNjMyNzMwODI=", "number": 4, "title": "Documentation: Mocking instances, not just classes", "user": {"login": "lsloan", "id": 20786, "node_id": "MDQ6VXNlcjIwNzg2", "avatar_url": "https://avatars3.githubusercontent.com/u/20786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsloan", "html_url": "https://github.com/lsloan", "followers_url": "https://api.github.com/users/lsloan/followers", "following_url": "https://api.github.com/users/lsloan/following{/other_user}", "gists_url": "https://api.github.com/users/lsloan/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsloan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsloan/subscriptions", "organizations_url": "https://api.github.com/users/lsloan/orgs", "repos_url": "https://api.github.com/users/lsloan/repos", "events_url": "https://api.github.com/users/lsloan/events{/privacy}", "received_events_url": "https://api.github.com/users/lsloan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-30T21:39:21Z", "updated_at": "2017-02-02T10:19:43Z", "closed_at": "2017-02-02T10:19:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the walkthrough, you show how to mock the Dog class, which affects all instances of Dog until `unstub()` is used.  I think it's also important to show that a single instance of a class can be mocked.  Add to the documentation examples from https://code.google.com/archive/p/mockito-python/ that show mocking a single instance (rex) of Dog.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kaste/mockito-python/issues/2", "repository_url": "https://api.github.com/repos/kaste/mockito-python", "labels_url": "https://api.github.com/repos/kaste/mockito-python/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/kaste/mockito-python/issues/2/comments", "events_url": "https://api.github.com/repos/kaste/mockito-python/issues/2/events", "html_url": "https://github.com/kaste/mockito-python/issues/2", "id": 156025492, "node_id": "MDU6SXNzdWUxNTYwMjU0OTI=", "number": 2, "title": "Teach travis to lint the code", "user": {"login": "kaste", "id": 8558, "node_id": "MDQ6VXNlcjg1NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaste", "html_url": "https://github.com/kaste", "followers_url": "https://api.github.com/users/kaste/followers", "following_url": "https://api.github.com/users/kaste/following{/other_user}", "gists_url": "https://api.github.com/users/kaste/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaste/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaste/subscriptions", "organizations_url": "https://api.github.com/users/kaste/orgs", "repos_url": "https://api.github.com/users/kaste/repos", "events_url": "https://api.github.com/users/kaste/events{/privacy}", "received_events_url": "https://api.github.com/users/kaste/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 379862100, "node_id": "MDU6TGFiZWwzNzk4NjIxMDA=", "url": "https://api.github.com/repos/kaste/mockito-python/labels/Open%20for%20PR", "name": "Open for PR", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-05-20T18:38:42Z", "updated_at": "2017-02-02T10:17:14Z", "closed_at": "2017-02-02T10:17:14Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}]}