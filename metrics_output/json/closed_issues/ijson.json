{"total_count": 23, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ICRAR/ijson/issues/32", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/32/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/32/events", "html_url": "https://github.com/ICRAR/ijson/issues/32", "id": 670721020, "node_id": "MDU6SXNzdWU2NzA3MjEwMjA=", "number": 32, "title": "(yajl2_c) TypeError when reading from an aiofiles file", "user": {"login": "MKuranowski", "id": 16469272, "node_id": "MDQ6VXNlcjE2NDY5Mjcy", "avatar_url": "https://avatars2.githubusercontent.com/u/16469272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MKuranowski", "html_url": "https://github.com/MKuranowski", "followers_url": "https://api.github.com/users/MKuranowski/followers", "following_url": "https://api.github.com/users/MKuranowski/following{/other_user}", "gists_url": "https://api.github.com/users/MKuranowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/MKuranowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MKuranowski/subscriptions", "organizations_url": "https://api.github.com/users/MKuranowski/orgs", "repos_url": "https://api.github.com/users/MKuranowski/repos", "events_url": "https://api.github.com/users/MKuranowski/events{/privacy}", "received_events_url": "https://api.github.com/users/MKuranowski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457700, "node_id": "MDU6TGFiZWwxNDAwNDU3NzAw", "url": "https://api.github.com/repos/ICRAR/ijson/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-01T09:59:02Z", "updated_at": "2020-08-04T10:32:18Z", "closed_at": "2020-08-02T10:10:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running Python 3.8.2 (on Linux), ijson 3.1.post0, backend `yajl2_c`, aiofiles 0.5.0.\r\n\r\nWhen trying to asynchronously get items from a simple json file, a `TypeError: _get_read() missing 1 required positional argument: 'f'` is raised.\r\n\r\nCode:\r\n```python\r\nimport aiofiles\r\nimport asyncio\r\nimport ijson\r\n\r\nijson_backend = ijson.get_backend(\"yajl2_c\")\r\n\r\nasync def main():\r\n    async with aiofiles.open(\"test.json\", \"r\", encoding=\"utf-8\") as buff:\r\n        async for i in ijson_backend.items_async(buff, \"item\"):\r\n            print(i)\r\n\r\nasyncio.run(main())\r\n```\r\n\r\ntest.json:\r\n```\r\n[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\r\n```\r\n\r\nOutput:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test_ijson.py\", line 12, in <module>\r\n    asyncio.run(main())\r\n  File \"/usr/lib/python3.8/asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"/usr/lib/python3.8/asyncio/base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"ignore_test_ijson.py\", line 9, in main\r\n    async for t in ijson_backend.items_async(buff, \"item\"):\r\nTypeError: _get_read() missing 1 required positional argument: 'f'\r\n```\r\n\r\nI would expect normal operation that would print all items from the test.json file.\r\n\r\n----\r\n\r\nSynchronous code works correctly:\r\n```python\r\nimport ijson\r\n\r\nijson_backend = ijson.get_backend(\"yajl2_c\")\r\n\r\n\r\ndef noasync_main():\r\n    with open(\"test.json\", \"r\", encoding=\"utf-8\") as buff:\r\n        for i in ijson_backend.items(buff, \"item\"):\r\n            print(i)\r\n\r\n\r\nnoasync_main()\r\n```\r\n\r\nOutput:\r\n```\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n```\r\n\r\n---\r\nUpdate: the `yajl2_cffi` backend works correctly:\r\n\r\nCode:\r\n```python\r\nimport aiofiles\r\nimport asyncio\r\nimport ijson\r\n\r\nijson_backend = ijson.get_backend(\"yajl2_cffi\")\r\n\r\nasync def main():\r\n    async with aiofiles.open(\"test.json\", \"r\", encoding=\"utf-8\") as buff:\r\n        async for i in ijson_backend.items_async(buff, \"item\"):\r\n            print(i)\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nOutput:\r\n```\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/30", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/30/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/30/events", "html_url": "https://github.com/ICRAR/ijson/issues/30", "id": 625896743, "node_id": "MDU6SXNzdWU2MjU4OTY3NDM=", "number": 30, "title": "Memory leak in asyncio interface", "user": {"login": "dizballanze", "id": 952028, "node_id": "MDQ6VXNlcjk1MjAyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/952028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dizballanze", "html_url": "https://github.com/dizballanze", "followers_url": "https://api.github.com/users/dizballanze/followers", "following_url": "https://api.github.com/users/dizballanze/following{/other_user}", "gists_url": "https://api.github.com/users/dizballanze/gists{/gist_id}", "starred_url": "https://api.github.com/users/dizballanze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dizballanze/subscriptions", "organizations_url": "https://api.github.com/users/dizballanze/orgs", "repos_url": "https://api.github.com/users/dizballanze/repos", "events_url": "https://api.github.com/users/dizballanze/events{/privacy}", "received_events_url": "https://api.github.com/users/dizballanze/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457713, "node_id": "MDU6TGFiZWwxNDAwNDU3NzEz", "url": "https://api.github.com/repos/ICRAR/ijson/labels/invalid", "name": "invalid", "color": "e4e669", "default": true, "description": "This doesn't seem right"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-27T17:41:48Z", "updated_at": "2020-05-28T00:42:21Z", "closed_at": "2020-05-27T17:55:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\nI think I've found a memory leak in asyncio interface.\r\nI'm using latest `ijson==3.0.4` with python3.7 on macos mojave.\r\n\r\nHere's an example of the leak:\r\n\r\n```python\r\nimport asyncio\r\nimport ijson.backends.yajl2_c as ijson\r\n\r\n\r\nclass AsyncReaderWrapper:\r\n    def __init__(self, stream):\r\n        self._stream = stream\r\n\r\n    async def read(self, value: int):\r\n        if value == 0:\r\n            return b\"\"\r\n        return self._stream.read()\r\n\r\n\r\nasync def parse_json_async(json_fp):\r\n    async for objects in ijson.parse_async(AsyncReaderWrapper(json_fp)):\r\n        yield objects\r\n\r\n\r\nasync def amain():\r\n    events = 0\r\n    with open(\"100mb.json\", \"rb\") as json_fp:\r\n        async for prefix, event, value in parse_json_async(json_fp):\r\n            events += 1\r\n\r\n    print(f\"Got {events}\")\r\n    print(\"Press any key...\")\r\n    input()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(amain())\r\n\r\n```\r\n\r\nAnd a sync version for comparison:\r\n\r\n```python\r\nimport ijson.backends.yajl2_c as ijson\r\n\r\n\r\ndef main():\r\n    events = 0\r\n    with open(\"100mb.json\", \"rb\") as json_fp:\r\n        for prefix, event, value in ijson.parse(json_fp):\r\n            events += 1\r\n\r\n    print(f\"Got {events}\")\r\n    print(\"Press any key...\")\r\n    input()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nI've used memory_profiler on both and got following results:\r\n\r\nAsync version\r\n\r\n![image](https://user-images.githubusercontent.com/952028/83053759-e69ffe80-a059-11ea-9646-a6829fff1db8.png)\r\n\r\nSync version:\r\n![image](https://user-images.githubusercontent.com/952028/83053812-fe778280-a059-11ea-9ec4-8f9ff4f69d9c.png)\r\n\r\nLooks like when I'm using async interface, memory released only after the whole file was processed.\r\nI tried all backends and all have comparable results.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/29", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/29/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/29/events", "html_url": "https://github.com/ICRAR/ijson/issues/29", "id": 604816577, "node_id": "MDU6SXNzdWU2MDQ4MTY1Nzc=", "number": 29, "title": "Segmentation fault in @3.0.2", "user": {"login": "roll", "id": 557395, "node_id": "MDQ6VXNlcjU1NzM5NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/557395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roll", "html_url": "https://github.com/roll", "followers_url": "https://api.github.com/users/roll/followers", "following_url": "https://api.github.com/users/roll/following{/other_user}", "gists_url": "https://api.github.com/users/roll/gists{/gist_id}", "starred_url": "https://api.github.com/users/roll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roll/subscriptions", "organizations_url": "https://api.github.com/users/roll/orgs", "repos_url": "https://api.github.com/users/roll/repos", "events_url": "https://api.github.com/users/roll/events{/privacy}", "received_events_url": "https://api.github.com/users/roll/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457700, "node_id": "MDU6TGFiZWwxNDAwNDU3NzAw", "url": "https://api.github.com/repos/ICRAR/ijson/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-22T14:45:31Z", "updated_at": "2020-04-23T06:35:07Z", "closed_at": "2020-04-23T06:22:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWe've run into https://travis-ci.org/github/frictionlessdata/tabulator-py/jobs/678168760 on\r\n\r\n```\r\nitems = ijson.items(self.__bytes, path)\r\nfor row_number, item in enumerate(items, start=1):\r\n```\r\n\r\nwhich happened on @3.0.2 but works with @3.0.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/28", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/28/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/28/events", "html_url": "https://github.com/ICRAR/ijson/issues/28", "id": 604174616, "node_id": "MDU6SXNzdWU2MDQxNzQ2MTY=", "number": 28, "title": "Memory leak in yajl2_c backend", "user": {"login": "tomplex", "id": 8109856, "node_id": "MDQ6VXNlcjgxMDk4NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8109856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomplex", "html_url": "https://github.com/tomplex", "followers_url": "https://api.github.com/users/tomplex/followers", "following_url": "https://api.github.com/users/tomplex/following{/other_user}", "gists_url": "https://api.github.com/users/tomplex/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomplex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomplex/subscriptions", "organizations_url": "https://api.github.com/users/tomplex/orgs", "repos_url": "https://api.github.com/users/tomplex/repos", "events_url": "https://api.github.com/users/tomplex/events{/privacy}", "received_events_url": "https://api.github.com/users/tomplex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457700, "node_id": "MDU6TGFiZWwxNDAwNDU3NzAw", "url": "https://api.github.com/repos/ICRAR/ijson/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-04-21T17:57:12Z", "updated_at": "2020-04-25T00:29:02Z", "closed_at": "2020-04-22T04:16:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Opening a 1GB JSON file and iterating over it using `ijson.items` takes up a large amount of memory which can not be reclaimed by running the garbage collector.\r\n\r\nSoftware & Environment version:\r\nijson==3.0.1, Python3.8, Debian buster.\r\n\r\nIncluded are a Dockerfile and Python file which fully demonstrate the issue.\r\n\r\n----\r\n```Dockerfile\r\n# Dockerfile\r\nFROM python:3.8-buster\r\n\r\nRUN wget https://usbuildingdata.blob.core.windows.net/usbuildings-v1-1/NewYork.zip\r\n\r\nRUN unzip NewYork.zip -d /data\r\nRUN rm NewYork.zip\r\n\r\nRUN apt update && apt install -y \\\r\n    libyajl2\r\n\r\nRUN pip3 install ijson==3.0.1 cffi\r\n\r\nCOPY main.py /\r\n\r\nENTRYPOINT [\"python\", \"/main.py\"]\r\n```\r\n----\r\n```python\r\n# main.py\r\nimport resource\r\nimport gc\r\n\r\nimport ijson.backends.yajl2_c as ijson\r\n# import ijson.backends.python as ijson\r\n# import ijson.backends.yajl2_cffi as ijson\r\n\r\n\r\ndef memusage():\r\n    \"\"\"memory usage in GB. getrusage defaults to KB on Linux.\"\"\"\r\n    return str(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1e6)\r\n\r\n\r\ndef iter_features(filename):\r\n    with open(filename, 'rb') as f:\r\n        yield from ijson.items(f, \"features.item\")\r\n\r\n\r\ndef main():\r\n    print(\"using backend\", ijson.backend)\r\n    print(\"starting memory usage:\", memusage(), 'GB')\r\n\r\n    for feature in iter_features('/data/NewYork.geojson'):\r\n        pass\r\n\r\n    print(\"memory usage after reading file:\", memusage(), 'GB')\r\n    gc.collect()\r\n    print(\"memory usage after garbage collection:\", memusage(), 'GB')\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n----\r\nCreate a new directory with the Dockerfile and main.py and then run:\r\n\r\n```bash\r\n$ docker build -t test-ijson .\r\n$ docker run -it test-ijson\r\nusing backend yajl2_c\r\nstarting memory usage: 0.010604 GB\r\nmemory after reading file: 5.824332 GB\r\nmemory usage after garbage collection: 5.824332 GB\r\n```\r\n\r\nif you change `main.py` to use the `python` backend, there is no issue:\r\n\r\n```bash\r\nusing backend python\r\nstarting memory usage: 0.01056 GB\r\nmemory after reading file: 0.01582 GB\r\nmemory usage after garbage collection: 0.01582 GB\r\n```\r\n\r\nSame with `yajl2_cffi`:\r\n\r\n```bash\r\nusing backend yajl2_cffi\r\nstarting memory usage: 0.015032 GB\r\nmemory after reading file: 0.016292 GB\r\nmemory usage after garbage collection: 0.016292 GB\r\n```\r\n\r\nThough they are, of course, much slower to test than `yajl_c`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/27", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/27/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/27/events", "html_url": "https://github.com/ICRAR/ijson/issues/27", "id": 600233312, "node_id": "MDU6SXNzdWU2MDAyMzMzMTI=", "number": 27, "title": "ijson.common.items removed in 3.0 [was: Unable to use items with event generator]", "user": {"login": "akaIDIOT", "id": 144798, "node_id": "MDQ6VXNlcjE0NDc5OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/144798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akaIDIOT", "html_url": "https://github.com/akaIDIOT", "followers_url": "https://api.github.com/users/akaIDIOT/followers", "following_url": "https://api.github.com/users/akaIDIOT/following{/other_user}", "gists_url": "https://api.github.com/users/akaIDIOT/gists{/gist_id}", "starred_url": "https://api.github.com/users/akaIDIOT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akaIDIOT/subscriptions", "organizations_url": "https://api.github.com/users/akaIDIOT/orgs", "repos_url": "https://api.github.com/users/akaIDIOT/repos", "events_url": "https://api.github.com/users/akaIDIOT/events{/privacy}", "received_events_url": "https://api.github.com/users/akaIDIOT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1988038618, "node_id": "MDU6TGFiZWwxOTg4MDM4NjE4", "url": "https://api.github.com/repos/ICRAR/ijson/labels/backwards%20incompatibility", "name": "backwards incompatibility", "color": "d64450", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-04-15T11:40:29Z", "updated_at": "2020-06-26T08:28:55Z", "closed_at": "2020-04-15T15:02:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Reading data that is formatted as sort of preamble followed by a stream similar items in an array, I am currently using a combination of `ijson.parse` and `ijson.items`, reading the preamble as prefixed events, followed by processing the array items. Something like\r\n\r\n~~~~ json\r\n{\"interesting\": \"preamble\",\r\n \"another\": \"key\",\r\n \"actual_results\": [{\"object\": 1}, {\"object\": 2}]}\r\n~~~~\r\n\r\n~~~~ python\r\ndef read_preamble(events):\r\n    preamble = None\r\n    for prefix, etype, value in events:\r\n        if prefix == 'preamble':\r\n            preamble = value\r\n        if prefix == 'actual_results':\r\n            return preamble\r\n\r\nevents = ijson.parse(data)\r\npreamble = read_preamble(events)\r\nfor result in ijson.items(events, 'actual_results.item'):\r\n    process_result(result)\r\n~~~~\r\n\r\nAs of ijson 3.0, `items` no longer accepts an event generator and requires a raw input, which I can't recreate (actual use case is a sizable HTTP response that I wouldn't want to request twice). \r\n\r\nI guess it's possible to use just `ijson.parse` and mimic the old `ijson.items` with an `ObjectBuilder`, but that seems a step back in usability to me. Is there a better way to accomplish this / can we get an `items`-like API that enables this?\r\n~~~~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/25", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/25/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/25/events", "html_url": "https://github.com/ICRAR/ijson/issues/25", "id": 595165543, "node_id": "MDU6SXNzdWU1OTUxNjU1NDM=", "number": 25, "title": "Handle processing errors?", "user": {"login": "tatobi", "id": 3641118, "node_id": "MDQ6VXNlcjM2NDExMTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3641118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatobi", "html_url": "https://github.com/tatobi", "followers_url": "https://api.github.com/users/tatobi/followers", "following_url": "https://api.github.com/users/tatobi/following{/other_user}", "gists_url": "https://api.github.com/users/tatobi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatobi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatobi/subscriptions", "organizations_url": "https://api.github.com/users/tatobi/orgs", "repos_url": "https://api.github.com/users/tatobi/repos", "events_url": "https://api.github.com/users/tatobi/events{/privacy}", "received_events_url": "https://api.github.com/users/tatobi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457715, "node_id": "MDU6TGFiZWwxNDAwNDU3NzE1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-06T14:29:46Z", "updated_at": "2020-04-07T08:17:44Z", "closed_at": "2020-04-07T07:04:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a huge stream (if saved: 3.5GB json file - usually received from unix pipe), which processed with ijson (python 3.7, conda):\r\n\r\n`\r\nijson.version.__version__\r\n'3.0'\r\n`\r\n\r\n`\r\ncat file.json | ./process.py\r\n`\r\n\r\nsimple code sample (sure I process source object, but it is enough to trigger the problem):\r\n\r\n```\r\n#!/usr/bin/env python3\r\n#process.py\r\n\r\nimport ijson\r\nimport sys\r\n\r\njson_objects = ijson.items(sys.stdin,'item._source')\r\nfor source in json_objects:\r\n    continue\r\n\r\n```\r\n\r\nException (around 360k's object):\r\n```\r\ncat x.json | ./process.py \r\nTraceback (most recent call last):\r\n  File \"./process.py\", line 8, in <module>\r\n    for source in json_objects:\r\n  File \"/home/tobi/miniconda3/lib/python3.7/site-packages/ijson/compat.py\", line 31, in read\r\n    return self.str_reader.read(n).encode('utf-8')\r\n  File \"/home/tobi/miniconda3/lib/python3.7/codecs.py\", line 322, in decode\r\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xa8 in position 47886: invalid start byte\r\n\r\n```\r\nMy question is: how to handle correctly this type of stream \"byte\" and/or encoding errors with ijson? Because 99% of stream is OK, but sometimes there is a problem, how to handle stream encoding and formatting errors?\r\nI couldn't find any solution to put into a try...except, because it is iterating over the objects what ijson generated, so it could be handled there...\r\n\r\nThank you.  \r\nTamas\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/24", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/24/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/24/events", "html_url": "https://github.com/ICRAR/ijson/issues/24", "id": 577230516, "node_id": "MDU6SXNzdWU1NzcyMzA1MTY=", "number": 24, "title": "This is very very slow on my computer", "user": {"login": "vongohren", "id": 1012055, "node_id": "MDQ6VXNlcjEwMTIwNTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1012055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vongohren", "html_url": "https://github.com/vongohren", "followers_url": "https://api.github.com/users/vongohren/followers", "following_url": "https://api.github.com/users/vongohren/following{/other_user}", "gists_url": "https://api.github.com/users/vongohren/gists{/gist_id}", "starred_url": "https://api.github.com/users/vongohren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vongohren/subscriptions", "organizations_url": "https://api.github.com/users/vongohren/orgs", "repos_url": "https://api.github.com/users/vongohren/repos", "events_url": "https://api.github.com/users/vongohren/events{/privacy}", "received_events_url": "https://api.github.com/users/vongohren/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457715, "node_id": "MDU6TGFiZWwxNDAwNDU3NzE1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-03-06T23:39:21Z", "updated_at": "2020-03-15T11:47:00Z", "closed_at": "2020-03-15T09:15:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I have a json file, 330 ish MB.\r\nThe content is like this\r\n```\r\n{\r\n  \"locations\" : [ {\r\n    \"timestampMs\" : \"1231313131313\",\r\n    \"latitudeE7\" : 111111111,\r\n    \"longitudeE7\" : 123123131,\r\n    \"accuracy\" : 36,\r\n    \"activity\" : [ {\r\n      \"timestampMs\" : \"1211211121121\",\r\n      \"activity\" : [ {\r\n        \"type\" : \"STILL\",\r\n        \"confidence\" : 75\r\n      }, {\r\n        \"type\" : \"ON_FOOT\",\r\n        \"confidence\" : 10\r\n      }, {\r\n        \"type\" : \"IN_VEHICLE\",\r\n        \"confidence\" : 5\r\n      }, {\r\n        \"type\" : \"ON_BICYCLE\",\r\n        \"confidence\" : 5\r\n      }, {\r\n        \"type\" : \"UNKNOWN\",\r\n        \"confidence\" : 5\r\n      }, {\r\n        \"type\" : \"WALKING\",\r\n        \"confidence\" : 5\r\n      }, {\r\n        \"type\" : \"RUNNING\",\r\n        \"confidence\" : 5\r\n      } ]\r\n    } ]\r\n  }, {........\r\n```\r\n\r\nMeaning an array of locations.\r\nIf I run this through json_load, then iterate over the file, pull out the two map_keys I want. It takes about 20 seconds. It is doable.\r\n\r\nBut I cannot load the whole thing in memory anymore, it is to big for mye infrastructure, so I found this lib. But when I run fex\r\n\r\n```\r\n    locations = ijson.kvitems(json_file, 'locations.item')\r\n    timestampMsObjects = (v for k, v in locations if k == 'timestampMs')\r\n    timestampMs = list(timestampMsObjects)\r\n```\r\n\r\nIt takes many many minutes. I dont know how long acctually becaus i quit it everytime  it goes to far.\r\n\r\nWhy is this? Im just trying to get the length of that list.\r\nSee how many points im working with.\r\n\r\nAfterwards I want to pull out 3 map_keys, and combine them into a smaller object. But just need ti naje sure this software is fast enough.\r\n\r\nAnyone with some insight on this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/22", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/22/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/22/events", "html_url": "https://github.com/ICRAR/ijson/issues/22", "id": 558485705, "node_id": "MDU6SXNzdWU1NTg0ODU3MDU=", "number": 22, "title": "Expose push / sax-like interface", "user": {"login": "ntninja", "id": 246386, "node_id": "MDQ6VXNlcjI0NjM4Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/246386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ntninja", "html_url": "https://github.com/ntninja", "followers_url": "https://api.github.com/users/ntninja/followers", "following_url": "https://api.github.com/users/ntninja/following{/other_user}", "gists_url": "https://api.github.com/users/ntninja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ntninja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ntninja/subscriptions", "organizations_url": "https://api.github.com/users/ntninja/orgs", "repos_url": "https://api.github.com/users/ntninja/repos", "events_url": "https://api.github.com/users/ntninja/events{/privacy}", "received_events_url": "https://api.github.com/users/ntninja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457705, "node_id": "MDU6TGFiZWwxNDAwNDU3NzA1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-02-01T05:24:10Z", "updated_at": "2020-02-14T02:36:37Z", "closed_at": "2020-02-10T07:28:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dealing with asyncio streams I was wondering how realistic it would be to make this awesome library into something that accepts a push pattern.\r\n\r\nThinking about something like:\r\n\r\n```py\r\nimport ijson\r\n\r\ndef on_event(event, value):\r\n    ...  # Do something\r\n\r\nasync def collect_json(source):\r\n    parser = ijson.Parser(on_event)\r\n    async for chunk in source:\r\n        parser.feed(chunk)\r\n    parser.feed_eof()\r\n```\r\n\r\nThe current system only supports blocking I/O and there is no way to emulate the above without using threads and pipes/queues unfortunately.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/21", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/21/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/21/events", "html_url": "https://github.com/ICRAR/ijson/issues/21", "id": 552209561, "node_id": "MDU6SXNzdWU1NTIyMDk1NjE=", "number": 21, "title": "Implement kvitems in the C extension for increased performance.", "user": {"login": "rtobar", "id": 620848, "node_id": "MDQ6VXNlcjYyMDg0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/620848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtobar", "html_url": "https://github.com/rtobar", "followers_url": "https://api.github.com/users/rtobar/followers", "following_url": "https://api.github.com/users/rtobar/following{/other_user}", "gists_url": "https://api.github.com/users/rtobar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtobar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtobar/subscriptions", "organizations_url": "https://api.github.com/users/rtobar/orgs", "repos_url": "https://api.github.com/users/rtobar/repos", "events_url": "https://api.github.com/users/rtobar/events{/privacy}", "received_events_url": "https://api.github.com/users/rtobar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457705, "node_id": "MDU6TGFiZWwxNDAwNDU3NzA1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-20T10:29:55Z", "updated_at": "2020-01-22T02:47:59Z", "closed_at": "2020-01-22T02:47:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the new `kvitems` method is implemented in python, which is what all backends use. The C backend however should see performance benefits by seeing this method implemented in C, with an expected increase of something around ~3x, 4x, depending on the use case.\r\n\r\nSee https://github.com/ICRAR/ijson/issues/18#issuecomment-576184311 and https://github.com/ICRAR/ijson/issues/18#issuecomment-576208819 for reference.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/18", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/18/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/18/events", "html_url": "https://github.com/ICRAR/ijson/issues/18", "id": 550385958, "node_id": "MDU6SXNzdWU1NTAzODU5NTg=", "number": 18, "title": "add support for iterating over key/value pairs?", "user": {"login": "ltalirz", "id": 1053245, "node_id": "MDQ6VXNlcjEwNTMyNDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1053245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltalirz", "html_url": "https://github.com/ltalirz", "followers_url": "https://api.github.com/users/ltalirz/followers", "following_url": "https://api.github.com/users/ltalirz/following{/other_user}", "gists_url": "https://api.github.com/users/ltalirz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltalirz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltalirz/subscriptions", "organizations_url": "https://api.github.com/users/ltalirz/orgs", "repos_url": "https://api.github.com/users/ltalirz/repos", "events_url": "https://api.github.com/users/ltalirz/events{/privacy}", "received_events_url": "https://api.github.com/users/ltalirz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457705, "node_id": "MDU6TGFiZWwxNDAwNDU3NzA1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-01-15T19:33:11Z", "updated_at": "2020-01-28T14:19:13Z", "closed_at": "2020-01-20T14:55:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I understand correctly, there is the built-in `items` wrapper for iterating over items in a list, but there isn't one for iterating over keys in a dictionary.\r\n\r\nI've seen the solution for the special case when the keys are at the top level of the JSON https://github.com/isagalaev/ijson/issues/62#issuecomment-289972061 but what if the large list of keys is not at the top level? E.g.\r\n\r\n```json\r\n{\r\n \"my_big_data\":\r\n  { \r\n    \"1\": 1,\r\n    \"2\": 2\r\n  }\r\n}\r\n```\r\nWould it be difficult to do an analogous function to `items` where one can specify the prefix of the dictionary to iterate over and returns the keys and values?\r\n\r\nI guess besides the implementation, there is also the question what to call it.\r\nIt is perhaps a bit unfortunate that in python 3 the natural name for the dictionary iterator returning keys and values would actually be `items` but I guess that is already taken ;-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/15", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/15/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/15/events", "html_url": "https://github.com/ICRAR/ijson/issues/15", "id": 525638391, "node_id": "MDU6SXNzdWU1MjU2MzgzOTE=", "number": 15, "title": "Python Lexer Is Excessively Greedy", "user": {"login": "pydsigner", "id": 532749, "node_id": "MDQ6VXNlcjUzMjc0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/532749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydsigner", "html_url": "https://github.com/pydsigner", "followers_url": "https://api.github.com/users/pydsigner/followers", "following_url": "https://api.github.com/users/pydsigner/following{/other_user}", "gists_url": "https://api.github.com/users/pydsigner/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydsigner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydsigner/subscriptions", "organizations_url": "https://api.github.com/users/pydsigner/orgs", "repos_url": "https://api.github.com/users/pydsigner/repos", "events_url": "https://api.github.com/users/pydsigner/events{/privacy}", "received_events_url": "https://api.github.com/users/pydsigner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457705, "node_id": "MDU6TGFiZWwxNDAwNDU3NzA1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-20T08:02:52Z", "updated_at": "2019-11-26T08:08:15Z", "closed_at": "2019-11-26T08:08:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "`ijson.backends.python.Lexer()` has a main loop which looks for a number or a single-character lexeme and enters a simple decision tree. If the lexeme starts a string, the rest of the string is read in, with buffer updates as necessary, and then yielded out. If it does not start a string, the Lexer always attempts to extend the lexeme. In general, this isn't an issue, but if the file stream is wrapped around a socket, this can lead to significant parser lag and handshake stalemates as both parties wait for the other to transmit another chunk of data.\r\n\r\nhttps://github.com/ICRAR/ijson/blob/d754f9e7ae022f2280077fbf52622d59cae5f7aa/ijson/backends/python.py#L34-L63\r\n\r\nMy guess is that the yajl backends do not share this issue, but I've not pulled up my Linux machine to check.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/13", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/13/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/13/events", "html_url": "https://github.com/ICRAR/ijson/issues/13", "id": 496368527, "node_id": "MDU6SXNzdWU0OTYzNjg1Mjc=", "number": 13, "title": "Breaking change in version 2.5", "user": {"login": "roll", "id": 557395, "node_id": "MDQ6VXNlcjU1NzM5NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/557395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roll", "html_url": "https://github.com/roll", "followers_url": "https://api.github.com/users/roll/followers", "following_url": "https://api.github.com/users/roll/following{/other_user}", "gists_url": "https://api.github.com/users/roll/gists{/gist_id}", "starred_url": "https://api.github.com/users/roll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roll/subscriptions", "organizations_url": "https://api.github.com/users/roll/orgs", "repos_url": "https://api.github.com/users/roll/repos", "events_url": "https://api.github.com/users/roll/events{/privacy}", "received_events_url": "https://api.github.com/users/roll/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-20T13:58:00Z", "updated_at": "2019-10-01T03:55:46Z", "closed_at": "2019-10-01T03:55:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Overview\r\n\r\nHi, it seems there is a breaking change in version 2.5 which should not be breaking according to SemVer:\r\n\r\n```\r\nitems = ijson.items(self.__chars, path)\r\nE       TypeError: expected bytes, str found\r\n```\r\n\r\nIt breaks all out stack https://github.com/frictionlessdata for all new installations (because of the `tabulator-py` dependency)\r\n\r\nIs it possible to handle this change differently? For example, deprecating the previous behavior while supporting it until the next major version or something like this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/12", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/12/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/12/events", "html_url": "https://github.com/ICRAR/ijson/issues/12", "id": 495998412, "node_id": "MDU6SXNzdWU0OTU5OTg0MTI=", "number": 12, "title": "Error with 2.5", "user": {"login": "caduvieira", "id": 3831408, "node_id": "MDQ6VXNlcjM4MzE0MDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3831408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caduvieira", "html_url": "https://github.com/caduvieira", "followers_url": "https://api.github.com/users/caduvieira/followers", "following_url": "https://api.github.com/users/caduvieira/following{/other_user}", "gists_url": "https://api.github.com/users/caduvieira/gists{/gist_id}", "starred_url": "https://api.github.com/users/caduvieira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caduvieira/subscriptions", "organizations_url": "https://api.github.com/users/caduvieira/orgs", "repos_url": "https://api.github.com/users/caduvieira/repos", "events_url": "https://api.github.com/users/caduvieira/events{/privacy}", "received_events_url": "https://api.github.com/users/caduvieira/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457713, "node_id": "MDU6TGFiZWwxNDAwNDU3NzEz", "url": "https://api.github.com/repos/ICRAR/ijson/labels/invalid", "name": "invalid", "color": "e4e669", "default": true, "description": "This doesn't seem right"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-19T19:59:16Z", "updated_at": "2019-09-20T19:17:51Z", "closed_at": "2019-09-20T02:36:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Code Example:\r\n\r\ntest_ijson.py\r\n\r\n    import json\r\n    import ijson\r\n    import codecs\r\n\r\n    with codecs.open('test.json', encoding=\"utf-8\") as json_file:\r\n        form = ijson.items(json_file, 'menu.test_items.item')\r\n        print(form)\r\n        forms = (o for o in form)\r\n        print(forms)\r\n        for objects in forms:\r\n            pass\r\n\r\ntest.json\r\n\r\n    {\"menu\": {\"header\": \"SVG Viewer\",\"test_items\": [{\"id\": \"Open\"},{\"id\": \"OpenNew\", \"label\": \"Open New\"},{\"id\": \"ZoomIn\", \"label\": \"Zoom In\"},{\"id\": \"ZoomOut\", \"label\": \"Zoom Out\"},{\"id\": \"OriginalView\", \"label\": \"Original View\"},{\"id\": \"Quality\"},{\"id\": \"Pause\"},{\"id\": \"Mute\"},{\"id\": \"Find\", \"label\": \"Find...\"}]}}\r\n\r\nResult:\r\n\r\n<_yajl2.items object at 0x7fb21010f650>\r\n<generator object <genexpr> at 0x7fb2100e0c00>\r\nTraceback (most recent call last):\r\n  File \"test_ijson.py\", line 11, in <module>\r\n    for objects in forms:\r\n  File \"test_ijson.py\", line 9, in <genexpr>\r\n    forms = (o for o in form)\r\nTypeError: expected bytes, str found\r\n\r\nIf I import the python backend as ijson everthing went fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/11", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/11/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/11/events", "html_url": "https://github.com/ICRAR/ijson/issues/11", "id": 494953918, "node_id": "MDU6SXNzdWU0OTQ5NTM5MTg=", "number": 11, "title": "Should _default_backend also catch YAJLImportError?", "user": {"login": "jpmckinney", "id": 26463, "node_id": "MDQ6VXNlcjI2NDYz", "avatar_url": "https://avatars1.githubusercontent.com/u/26463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpmckinney", "html_url": "https://github.com/jpmckinney", "followers_url": "https://api.github.com/users/jpmckinney/followers", "following_url": "https://api.github.com/users/jpmckinney/following{/other_user}", "gists_url": "https://api.github.com/users/jpmckinney/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpmckinney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpmckinney/subscriptions", "organizations_url": "https://api.github.com/users/jpmckinney/orgs", "repos_url": "https://api.github.com/users/jpmckinney/repos", "events_url": "https://api.github.com/users/jpmckinney/events{/privacy}", "received_events_url": "https://api.github.com/users/jpmckinney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457715, "node_id": "MDU6TGFiZWwxNDAwNDU3NzE1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-18T02:43:00Z", "updated_at": "2019-09-18T02:59:43Z", "closed_at": "2019-09-18T02:59:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a user doesn't have YAJL installed, I think YAJLImportError is raised instead of ImportError.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/10", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/10/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/10/events", "html_url": "https://github.com/ICRAR/ijson/issues/10", "id": 493737519, "node_id": "MDU6SXNzdWU0OTM3Mzc1MTk=", "number": 10, "title": "Pass kwargs in items() through to parse()", "user": {"login": "jpmckinney", "id": 26463, "node_id": "MDQ6VXNlcjI2NDYz", "avatar_url": "https://avatars1.githubusercontent.com/u/26463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpmckinney", "html_url": "https://github.com/jpmckinney", "followers_url": "https://api.github.com/users/jpmckinney/followers", "following_url": "https://api.github.com/users/jpmckinney/following{/other_user}", "gists_url": "https://api.github.com/users/jpmckinney/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpmckinney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpmckinney/subscriptions", "organizations_url": "https://api.github.com/users/jpmckinney/orgs", "repos_url": "https://api.github.com/users/jpmckinney/repos", "events_url": "https://api.github.com/users/jpmckinney/events{/privacy}", "received_events_url": "https://api.github.com/users/jpmckinney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457705, "node_id": "MDU6TGFiZWwxNDAwNDU3NzA1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-15T13:27:37Z", "updated_at": "2019-09-15T19:35:38Z", "closed_at": "2019-09-15T19:35:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "The recent commit to the Python backend does this; it'd be useful to do the same in the other backends.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/9", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/9/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/9/events", "html_url": "https://github.com/ICRAR/ijson/issues/9", "id": 493617591, "node_id": "MDU6SXNzdWU0OTM2MTc1OTE=", "number": 9, "title": "Add multiple_values support to Python backend", "user": {"login": "jpmckinney", "id": 26463, "node_id": "MDQ6VXNlcjI2NDYz", "avatar_url": "https://avatars1.githubusercontent.com/u/26463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpmckinney", "html_url": "https://github.com/jpmckinney", "followers_url": "https://api.github.com/users/jpmckinney/followers", "following_url": "https://api.github.com/users/jpmckinney/following{/other_user}", "gists_url": "https://api.github.com/users/jpmckinney/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpmckinney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpmckinney/subscriptions", "organizations_url": "https://api.github.com/users/jpmckinney/orgs", "repos_url": "https://api.github.com/users/jpmckinney/repos", "events_url": "https://api.github.com/users/jpmckinney/events{/privacy}", "received_events_url": "https://api.github.com/users/jpmckinney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457705, "node_id": "MDU6TGFiZWwxNDAwNDU3NzA1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-14T12:20:52Z", "updated_at": "2019-09-15T19:45:49Z", "closed_at": "2019-09-15T19:45:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/8", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/8/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/8/events", "html_url": "https://github.com/ICRAR/ijson/issues/8", "id": 493116856, "node_id": "MDU6SXNzdWU0OTMxMTY4NTY=", "number": 8, "title": "multiple_value not respected by C backend", "user": {"login": "rtobar", "id": 620848, "node_id": "MDQ6VXNlcjYyMDg0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/620848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtobar", "html_url": "https://github.com/rtobar", "followers_url": "https://api.github.com/users/rtobar/followers", "following_url": "https://api.github.com/users/rtobar/following{/other_user}", "gists_url": "https://api.github.com/users/rtobar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtobar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtobar/subscriptions", "organizations_url": "https://api.github.com/users/rtobar/orgs", "repos_url": "https://api.github.com/users/rtobar/repos", "events_url": "https://api.github.com/users/rtobar/events{/privacy}", "received_events_url": "https://api.github.com/users/rtobar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457700, "node_id": "MDU6TGFiZWwxNDAwNDU3NzAw", "url": "https://api.github.com/repos/ICRAR/ijson/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-13T03:13:24Z", "updated_at": "2019-09-13T03:13:59Z", "closed_at": "2019-09-13T03:13:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "The C backend doesn't respect the `multiple_value` flag; it always considers it as switched on.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/7", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/7/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/7/events", "html_url": "https://github.com/ICRAR/ijson/issues/7", "id": 492198746, "node_id": "MDU6SXNzdWU0OTIxOTg3NDY=", "number": 7, "title": "Add support for user-specified mapping type [was: Parsing into OrderedDict]", "user": {"login": "jpmckinney", "id": 26463, "node_id": "MDQ6VXNlcjI2NDYz", "avatar_url": "https://avatars1.githubusercontent.com/u/26463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpmckinney", "html_url": "https://github.com/jpmckinney", "followers_url": "https://api.github.com/users/jpmckinney/followers", "following_url": "https://api.github.com/users/jpmckinney/following{/other_user}", "gists_url": "https://api.github.com/users/jpmckinney/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpmckinney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpmckinney/subscriptions", "organizations_url": "https://api.github.com/users/jpmckinney/orgs", "repos_url": "https://api.github.com/users/jpmckinney/repos", "events_url": "https://api.github.com/users/jpmckinney/events{/privacy}", "received_events_url": "https://api.github.com/users/jpmckinney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457705, "node_id": "MDU6TGFiZWwxNDAwNDU3NzA1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-09-11T12:11:24Z", "updated_at": "2019-09-18T03:00:57Z", "closed_at": "2019-09-18T03:00:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have code that re-orders JSON keys into a standardized order using `OrderedDict.move_to_end`. I want to use ijson to read the input iteratively. Presently, I think I would need to convert the `dict` that ijson returns into an `OrderedDict`, but my data has deep JSON objects, so this would be a fairly expensive operation. It would be faster to parse the data into an `OrderedDict` directly.\r\n\r\nIs there an interest in adding this feature?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/6", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/6/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/6/events", "html_url": "https://github.com/ICRAR/ijson/issues/6", "id": 492197188, "node_id": "MDU6SXNzdWU0OTIxOTcxODg=", "number": 6, "title": "Parsing non-UTF-8 data", "user": {"login": "jpmckinney", "id": 26463, "node_id": "MDQ6VXNlcjI2NDYz", "avatar_url": "https://avatars1.githubusercontent.com/u/26463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpmckinney", "html_url": "https://github.com/jpmckinney", "followers_url": "https://api.github.com/users/jpmckinney/followers", "following_url": "https://api.github.com/users/jpmckinney/following{/other_user}", "gists_url": "https://api.github.com/users/jpmckinney/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpmckinney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpmckinney/subscriptions", "organizations_url": "https://api.github.com/users/jpmckinney/orgs", "repos_url": "https://api.github.com/users/jpmckinney/repos", "events_url": "https://api.github.com/users/jpmckinney/events{/privacy}", "received_events_url": "https://api.github.com/users/jpmckinney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457715, "node_id": "MDU6TGFiZWwxNDAwNDU3NzE1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-11T12:08:09Z", "updated_at": "2019-09-13T03:15:39Z", "closed_at": "2019-09-12T21:07:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "[RFC 8259](https://tools.ietf.org/html/rfc8259#section-8.1) allows non-UTF-8 data in \"a closed ecosystem\".\r\n\r\nI am using ijson to iteratively read JSON from stdin, and I don't presently know a way to change its encoding, without either causing an error in ijson or having to buffer the entire input. Among other attempts, I tried monkey-patching `b2s` in `ijson.compat` to use a different encoding, but it led to a different error than UnicodeDecodeError.\r\n\r\nIs there a way (or a desire) to parse non-UTF-8 data?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/5", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/5/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/5/events", "html_url": "https://github.com/ICRAR/ijson/issues/5", "id": 490835423, "node_id": "MDU6SXNzdWU0OTA4MzU0MjM=", "number": 5, "title": "Better default backend", "user": {"login": "rtobar", "id": 620848, "node_id": "MDQ6VXNlcjYyMDg0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/620848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtobar", "html_url": "https://github.com/rtobar", "followers_url": "https://api.github.com/users/rtobar/followers", "following_url": "https://api.github.com/users/rtobar/following{/other_user}", "gists_url": "https://api.github.com/users/rtobar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtobar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtobar/subscriptions", "organizations_url": "https://api.github.com/users/rtobar/orgs", "repos_url": "https://api.github.com/users/rtobar/repos", "events_url": "https://api.github.com/users/rtobar/events{/privacy}", "received_events_url": "https://api.github.com/users/rtobar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457705, "node_id": "MDU6TGFiZWwxNDAwNDU3NzA1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-09T01:17:51Z", "updated_at": "2019-09-10T13:40:18Z", "closed_at": "2019-09-10T13:40:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current default backend users get when importing `ijson` is the pure python one. On the plus side this will always import correctly, but it was the downside that it's the one exhibiting worse performance. On a typical installation importing other backends wouldn't be an issue though, so we can probably try to offer a better backend by default by iterating over the alternatives, importing them, and returning the one that imports first.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/4", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/4/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/4/events", "html_url": "https://github.com/ICRAR/ijson/issues/4", "id": 490834105, "node_id": "MDU6SXNzdWU0OTA4MzQxMDU=", "number": 4, "title": "Document items' prefix specification", "user": {"login": "rtobar", "id": 620848, "node_id": "MDQ6VXNlcjYyMDg0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/620848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtobar", "html_url": "https://github.com/rtobar", "followers_url": "https://api.github.com/users/rtobar/followers", "following_url": "https://api.github.com/users/rtobar/following{/other_user}", "gists_url": "https://api.github.com/users/rtobar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtobar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtobar/subscriptions", "organizations_url": "https://api.github.com/users/rtobar/orgs", "repos_url": "https://api.github.com/users/rtobar/repos", "events_url": "https://api.github.com/users/rtobar/events{/privacy}", "received_events_url": "https://api.github.com/users/rtobar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457703, "node_id": "MDU6TGFiZWwxNDAwNDU3NzAz", "url": "https://api.github.com/repos/ICRAR/ijson/labels/documentation", "name": "documentation", "color": "0075ca", "default": true, "description": "Improvements or additions to documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-09T01:08:27Z", "updated_at": "2019-09-10T07:50:28Z", "closed_at": "2019-09-10T07:50:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Many people online seem lost on how to use the prefix to select objects from an `ijson.items` call. Documenting the `prefix` syntax would clear things up.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/3", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/3/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/3/events", "html_url": "https://github.com/ICRAR/ijson/issues/3", "id": 490808961, "node_id": "MDU6SXNzdWU0OTA4MDg5NjE=", "number": 3, "title": "Which repo does current pypi release originate from?", "user": {"login": "underchemist", "id": 5283998, "node_id": "MDQ6VXNlcjUyODM5OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5283998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/underchemist", "html_url": "https://github.com/underchemist", "followers_url": "https://api.github.com/users/underchemist/followers", "following_url": "https://api.github.com/users/underchemist/following{/other_user}", "gists_url": "https://api.github.com/users/underchemist/gists{/gist_id}", "starred_url": "https://api.github.com/users/underchemist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/underchemist/subscriptions", "organizations_url": "https://api.github.com/users/underchemist/orgs", "repos_url": "https://api.github.com/users/underchemist/repos", "events_url": "https://api.github.com/users/underchemist/events{/privacy}", "received_events_url": "https://api.github.com/users/underchemist/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457715, "node_id": "MDU6TGFiZWwxNDAwNDU3NzE1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-08T21:32:13Z", "updated_at": "2019-09-09T01:05:45Z", "closed_at": "2019-09-09T01:05:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thanks for maintaining this package. I'm just curious since the pypi package links to this repo but links from the original repo points to the pypi package. Have you started publishing the package now? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ICRAR/ijson/issues/2", "repository_url": "https://api.github.com/repos/ICRAR/ijson", "labels_url": "https://api.github.com/repos/ICRAR/ijson/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/ICRAR/ijson/issues/2/comments", "events_url": "https://api.github.com/repos/ICRAR/ijson/issues/2/events", "html_url": "https://github.com/ICRAR/ijson/issues/2", "id": 485088441, "node_id": "MDU6SXNzdWU0ODUwODg0NDE=", "number": 2, "title": "Get items iterator from root", "user": {"login": "DarioDaF", "id": 10617344, "node_id": "MDQ6VXNlcjEwNjE3MzQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/10617344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarioDaF", "html_url": "https://github.com/DarioDaF", "followers_url": "https://api.github.com/users/DarioDaF/followers", "following_url": "https://api.github.com/users/DarioDaF/following{/other_user}", "gists_url": "https://api.github.com/users/DarioDaF/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarioDaF/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarioDaF/subscriptions", "organizations_url": "https://api.github.com/users/DarioDaF/orgs", "repos_url": "https://api.github.com/users/DarioDaF/repos", "events_url": "https://api.github.com/users/DarioDaF/events{/privacy}", "received_events_url": "https://api.github.com/users/DarioDaF/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1400457715, "node_id": "MDU6TGFiZWwxNDAwNDU3NzE1", "url": "https://api.github.com/repos/ICRAR/ijson/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-26T07:27:17Z", "updated_at": "2019-09-13T03:16:01Z", "closed_at": "2019-08-27T03:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have a json array as file root using `items(f, '')` returns a generator with 1 item (the array itself), instead of the generator with its items.\r\n\r\nExample:\r\n```\r\nimport io, ijson\r\nit = ijson.items(io.BytesIO(b'[1, 2, 3]'), '')\r\nfor el in it:\r\n  print(it)\r\n# Prints [1, 2, 3] instead of the items 1, 2, and 3\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}]}