{"total_count": 1836, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/coleifer/peewee/issues/2250", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2250/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2250/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2250/events", "html_url": "https://github.com/coleifer/peewee/issues/2250", "id": 680594385, "node_id": "MDU6SXNzdWU2ODA1OTQzODU=", "number": 2250, "title": "TypeError: <lambda>() takes 1 positional argument but 2 were given", "user": {"login": "feelingnothing", "id": 47575622, "node_id": "MDQ6VXNlcjQ3NTc1NjIy", "avatar_url": "https://avatars0.githubusercontent.com/u/47575622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feelingnothing", "html_url": "https://github.com/feelingnothing", "followers_url": "https://api.github.com/users/feelingnothing/followers", "following_url": "https://api.github.com/users/feelingnothing/following{/other_user}", "gists_url": "https://api.github.com/users/feelingnothing/gists{/gist_id}", "starred_url": "https://api.github.com/users/feelingnothing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feelingnothing/subscriptions", "organizations_url": "https://api.github.com/users/feelingnothing/orgs", "repos_url": "https://api.github.com/users/feelingnothing/repos", "events_url": "https://api.github.com/users/feelingnothing/events{/privacy}", "received_events_url": "https://api.github.com/users/feelingnothing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-17T23:59:45Z", "updated_at": "2020-08-18T12:46:10Z", "closed_at": "2020-08-18T12:46:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "My model:\r\n```python\r\nclass Notification(BaseModel):\r\n    id = CharField(default=uuid4, max_length=36)\r\n    created_at = DateTimeField(default=datetime.now)\r\n    channel = BigIntField()\r\n    time = TimeField()\r\n    title = CharField(max_length=256, null=True)\r\n    description = CharField(max_length=2048, null=True)\r\n    color = CharField(max_length=6, default='2f3136')\r\n    image = CharField(null=True)\r\n```\r\nHow im trying to save data:\r\n```python\r\nfor h, m in self.data['intervals']:\r\n    data = {k: v for k, v in deepcopy(self.data).items() if v is not None and k != 'intervals'}\r\n    # data = {'channel': 742158931408846859, 'title': 'title'}\r\n    # time is datetime.time\r\n    # time = time(hour=2, minute=31)\r\n    Notification.create(**data, time=time(hour=h, minute=m)).save()\r\n```\r\nError I got\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\discord\\ext\\menus\\__init__.py\", line 638, in update\r\n    await button(self, payload)\r\n  File \"c:\\Users\\dolabaeb\\Desktop\\paid projects\\notifications\\menus\\notification.py\", line 145, in end\r\n    Notification.create(**data, time=time(hour=h, minute=m)).save()\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 6292, in create\r\n    inst.save(force_insert=True)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 6499, in save\r\n    pk = self.insert(**field_dict).execute()\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 1886, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 1957, in execute\r\n    return self._execute(database)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 2707, in _execute\r\n    return super(Insert, self)._execute(database)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 2442, in _execute\r\n    cursor = database.execute(self)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 3111, in execute\r\n    sql, params = ctx.sql(query).query()\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 606, in sql\r\n    return obj.__sql__(self)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 2684, in __sql__\r\n    self._simple_insert(ctx)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 2544, in _simple_insert\r\n    return self._generate_insert((self._insert,), ctx)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 2656, in _generate_insert\r\n    return ctx.sql(CommaNodeList(all_values))\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 606, in sql\r\n    return obj.__sql__(self)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 1752, in __sql__\r\n    ctx.sql(self.nodes[n_nodes - 1])\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 606, in sql\r\n    return obj.__sql__(self)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 1750, in __sql__\r\n    ctx.sql(self.nodes[i])\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 606, in sql\r\n    return obj.__sql__(self)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 1364, in __sql__\r\n    return ctx.value(self.value, self.converter)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 618, in value\r\n    value = converter(value)\r\nTypeError: <lambda>() takes 1 positional argument but 2 were given\r\n```\r\n\r\nAnd my `BigIntField` and `BaseModel`\r\n```python\r\nclass BigIntField(TextField):\r\n    python_value = lambda v: int(v)\r\n    db_value = lambda v: str(v)\r\n\r\nclass BaseModel(Model):\r\n    class Meta:\r\n        database = db\r\n```\r\n(Just to clear some questions)\r\n\r\n- [x] I tried to google it\r\n- [x] I tried to sort out None's \r\n\r\nAlso, I tried to find an example of using 'TimeField`, but didn't find it\r\n\r\nversion: peewee==3.13.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2249", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2249/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2249/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2249/events", "html_url": "https://github.com/coleifer/peewee/issues/2249", "id": 679468473, "node_id": "MDU6SXNzdWU2Nzk0Njg0NzM=", "number": 2249, "title": "OverflowError: Python int too large to convert to SQLite INTEGER", "user": {"login": "feelingnothing", "id": 47575622, "node_id": "MDQ6VXNlcjQ3NTc1NjIy", "avatar_url": "https://avatars0.githubusercontent.com/u/47575622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feelingnothing", "html_url": "https://github.com/feelingnothing", "followers_url": "https://api.github.com/users/feelingnothing/followers", "following_url": "https://api.github.com/users/feelingnothing/following{/other_user}", "gists_url": "https://api.github.com/users/feelingnothing/gists{/gist_id}", "starred_url": "https://api.github.com/users/feelingnothing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feelingnothing/subscriptions", "organizations_url": "https://api.github.com/users/feelingnothing/orgs", "repos_url": "https://api.github.com/users/feelingnothing/repos", "events_url": "https://api.github.com/users/feelingnothing/events{/privacy}", "received_events_url": "https://api.github.com/users/feelingnothing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-15T00:53:08Z", "updated_at": "2020-08-15T16:03:15Z", "closed_at": "2020-08-15T16:02:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Error:\r\n```\r\n{'name': 'VIP1', 'description': 'TEST1', 'price': 1.0, 'currency': 'rub', 'role_id': '735095020402769941'}\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\discord\\ext\\menus\\__init__.py\", line 638, in update\r\n    await button(self, payload)\r\n  File \"c:\\Users\\dolabaeb\\Desktop\\paid projects\\platezka-sample\\menus\\products.py\", line 259, in select\r\n    await self.pages[self.current_page - 1]['func']()\r\n  File \"c:\\Users\\dolabaeb\\Desktop\\paid projects\\platezka-sample\\menus\\products.py\", line 238, in role\r\n    await self._complete_check()\r\n  File \"c:\\Users\\dolabaeb\\Desktop\\paid projects\\platezka-sample\\menus\\products.py\", line 162, in _complete_check\r\n    Product(\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 6497, in save\r\n    rows = self.update(**field_dict).where(self._pk_expr()).execute()\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 1886, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 1957, in execute\r\n    return self._execute(database)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 2442, in _execute\r\n    cursor = database.execute(self)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 3112, in execute\r\n    return self.execute_sql(sql, params, commit=commit)\r\n  File \"C:\\Users\\dolabaeb\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\peewee.py\", line 3099, in execute_sql\r\n    cursor.execute(sql, params or ())\r\nOverflowError: Python int too large to convert to SQLite INTEGER\r\n```\r\n\r\nI tried to insert into `IntegerField` value `735095020402769941`, but got Python int too large to convert to SQLite INTEGER\r\nAfter stackoverflow session I did create a ReallyBigIntegerField\r\n```python\r\nclass ReallyBigIntegerField(Field):\r\n    field_type = 'text'\r\n\r\n    def db_value(self, value):\r\n        return str(value)\r\n\r\n    def python_value(self, value):\r\n        return int(value)\r\n``` \r\nbut got the same error\r\n\r\nAfter that I set up CharField instead of my custom one and got SAME error\r\n\r\n*Every time I made changes, I deleted the database for migration\r\n\r\nForgot about my model\r\n```python\r\nclass Product(BaseModel):\r\n    id = CharField(default=uuid4)\r\n    type = CharField(default=ROLE, choices=[ROLE])\r\n    created_at = DateTimeField(default=datetime.now)\r\n    name = CharField(max_length=256)\r\n    description = CharField(max_length=2048)\r\n    price = FloatField()\r\n    currency = CharField(default=USD, choices=CURRENCY_TYPES)\r\n    role_id = CharField(max_length=18)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2248", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2248/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2248/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2248/events", "html_url": "https://github.com/coleifer/peewee/issues/2248", "id": 679211665, "node_id": "MDU6SXNzdWU2NzkyMTE2NjU=", "number": 2248, "title": "Lost type of aliased column from subquery", "user": {"login": "Nurbel", "id": 7353807, "node_id": "MDQ6VXNlcjczNTM4MDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/7353807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurbel", "html_url": "https://github.com/Nurbel", "followers_url": "https://api.github.com/users/Nurbel/followers", "following_url": "https://api.github.com/users/Nurbel/following{/other_user}", "gists_url": "https://api.github.com/users/Nurbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurbel/subscriptions", "organizations_url": "https://api.github.com/users/Nurbel/orgs", "repos_url": "https://api.github.com/users/Nurbel/repos", "events_url": "https://api.github.com/users/Nurbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurbel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-14T14:52:40Z", "updated_at": "2020-08-14T19:44:34Z", "closed_at": "2020-08-14T19:42:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nwhen using aliased colums in a subquery, peewee seems to loose the type of the column\r\n\r\nIn the following script, I access a date from a subquery, with and without an alias.\r\nWithout the alias, I get a python date as expected, but with the alias, I get a string\r\n\r\n```python\r\nfrom peewee import *\r\nfrom datetime import date\r\nDB = SqliteDatabase('/tmp/test_subquery.db')\r\n\r\n\r\nclass MyModel(Model):\r\n    date = DateField()\r\n\r\n    class Meta:\r\n        database = DB\r\n\r\n\r\nDB.create_tables([MyModel])\r\nMyModel.replace(date=date(2020, 1, 1)).execute()\r\n\r\nmod2 = MyModel.alias()\r\nsub = mod2.select(mod2.date, mod2.date.alias('aliased'))\r\nq = (MyModel.select(MyModel.date, sub.c.date, sub.c.aliased)\r\n     .join(sub, on=(sub.c.aliased == MyModel.date))\r\n     )\r\n\r\nprint(q.dicts().get())\r\n```\r\n> {'date': datetime.date(2020, 1, 1), 'aliased': '2020-01-01'}\r\n\r\nAm I doing something wrong? From the doc, using aliases seemed to be the recommended way to access the subquery columns\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2247", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2247/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2247/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2247/events", "html_url": "https://github.com/coleifer/peewee/issues/2247", "id": 679163947, "node_id": "MDU6SXNzdWU2NzkxNjM5NDc=", "number": 2247, "title": "Misleading query generated on SQLite", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-14T13:39:01Z", "updated_at": "2020-08-14T14:45:56Z", "closed_at": "2020-08-14T14:39:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I run the following query on SQLite.\r\n\r\n```python\r\nq1 = Table1.select(Table1.colA).objects()\r\nq2  = Table2.select(Table2.colB).order_by(Table2.colB).limit(1).objects()\r\n\r\nq1.union(q2)\r\n```\r\n\r\nthe query generated by `peewee` is misleading, and not equivalent to the initial one\r\n\r\n```sql\r\nSELECT \"t1\".\"colA\" FROM \"table1\" AS \"t1\" UNION SELECT \"t2\".\"colB\" FROM \"table2\" AS \"t2\" ORDER BY \"t2\".\"colB\" LIMIT 1 \r\n```\r\n\r\nIn particular, the `ORDER BY` and `LIMIT` clauses are applied to the combined query produced by the `UNION` clause, and *not* to the second sub-query as intended. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2246", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2246/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2246/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2246/events", "html_url": "https://github.com/coleifer/peewee/issues/2246", "id": 679054792, "node_id": "MDU6SXNzdWU2NzkwNTQ3OTI=", "number": 2246, "title": "Query with Syntax Error on MySQL", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-08-14T10:12:51Z", "updated_at": "2020-08-14T15:56:53Z", "closed_at": "2020-08-14T14:37:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following peewee query (over-simplified for opening the issue).\r\n\r\n```python\r\nq1 = Table1.select(Table1.colA).objects()\r\nq2 = Table2.select(Table2.colB).objects()\r\nq3 = Table3.select(Table3.colC).objects()\r\n\r\ncomb = q1.union(q2).order_by(Table1.colA).limit(10)\r\nq3.union(comb).order_by(Table3.colC)\r\n```\r\n\r\nthis crashes with the following exception on MySQL\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 3119, in execute_sql\r\n    cursor.execute(sql, params or ())\r\n  File \"/home/.env/lib/python3.6/site-packages/MySQLdb/cursors.py\", line 206, in execute\r\n    res = self._query(query)\r\n  File \"/home/.env/lib/python3.6/site-packages/MySQLdb/cursors.py\", line 319, in _query\r\n    db.query(q)\r\n  File \"/home/.env/lib/python3.6/site-packages/MySQLdb/connections.py\", line 259, in query\r\n    _mysql.connection.query(self, query)\r\nMySQLdb._exceptions.ProgrammingError: (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'ORDER BY `col`' at line 1\")\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"tmp.py\", line 31, in <module>\r\n    for r in ret5:\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 6833, in __iter__\r\n    self.execute()\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 1891, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 1962, in execute\r\n    return self._execute(database)\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 2134, in _execute\r\n    cursor = database.execute(self)\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 3132, in execute\r\n    return self.execute_sql(sql, params, commit=commit)\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 3126, in execute_sql\r\n    self.commit()\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 2892, in __exit__\r\n    reraise(new_type, new_type(exc_value, *exc_args), traceback)\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 183, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/home/.env/lib/python3.6/site-packages/peewee-3.13.3-py3.6.egg/peewee.py\", line 3119, in execute_sql\r\n    cursor.execute(sql, params or ())\r\n  File \"/home/.env/lib/python3.6/site-packages/MySQLdb/cursors.py\", line 206, in execute\r\n    res = self._query(query)\r\n  File \"/home/.env/lib/python3.6/site-packages/MySQLdb/cursors.py\", line 319, in _query\r\n    db.query(q)\r\n  File \"/home/.env/lib/python3.6/site-packages/MySQLdb/connections.py\", line 259, in query\r\n    _mysql.connection.query(self, query)\r\npeewee.ProgrammingError: (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'ORDER BY `colC`' at line 1\")\r\n```\r\n\r\nthe generated SQL is\r\n\r\n```sql\r\n(SELECT `t1`.`colC` FROM `table3` AS `t1`) UNION (SELECT `t2`.`colA` FROM `table1` AS `t2`) UNION (SELECT `t3`.`colB` FROM `table2` AS `t3`) ORDER BY `colA` LIMIT 10 ORDER BY `colC`\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2245", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2245/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2245/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2245/events", "html_url": "https://github.com/coleifer/peewee/issues/2245", "id": 677060555, "node_id": "MDU6SXNzdWU2NzcwNjA1NTU=", "number": 2245, "title": "doc website seems to be hacked", "user": {"login": "azs0309", "id": 40914458, "node_id": "MDQ6VXNlcjQwOTE0NDU4", "avatar_url": "https://avatars1.githubusercontent.com/u/40914458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azs0309", "html_url": "https://github.com/azs0309", "followers_url": "https://api.github.com/users/azs0309/followers", "following_url": "https://api.github.com/users/azs0309/following{/other_user}", "gists_url": "https://api.github.com/users/azs0309/gists{/gist_id}", "starred_url": "https://api.github.com/users/azs0309/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azs0309/subscriptions", "organizations_url": "https://api.github.com/users/azs0309/orgs", "repos_url": "https://api.github.com/users/azs0309/repos", "events_url": "https://api.github.com/users/azs0309/events{/privacy}", "received_events_url": "https://api.github.com/users/azs0309/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-11T17:31:31Z", "updated_at": "2020-08-11T18:07:10Z", "closed_at": "2020-08-11T18:07:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "The document website http://docs.peewee-orm.com/en/3.6.0/peewee/quickstart.html seems to be hacked and whenever I click a link pointing me to fryruejoust.cam", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2244", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2244/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2244/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2244/events", "html_url": "https://github.com/coleifer/peewee/issues/2244", "id": 677042818, "node_id": "MDU6SXNzdWU2NzcwNDI4MTg=", "number": 2244, "title": "left_outer_join doesn't works as expected", "user": {"login": "slavkoja", "id": 5506544, "node_id": "MDQ6VXNlcjU1MDY1NDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5506544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slavkoja", "html_url": "https://github.com/slavkoja", "followers_url": "https://api.github.com/users/slavkoja/followers", "following_url": "https://api.github.com/users/slavkoja/following{/other_user}", "gists_url": "https://api.github.com/users/slavkoja/gists{/gist_id}", "starred_url": "https://api.github.com/users/slavkoja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slavkoja/subscriptions", "organizations_url": "https://api.github.com/users/slavkoja/orgs", "repos_url": "https://api.github.com/users/slavkoja/repos", "events_url": "https://api.github.com/users/slavkoja/events{/privacy}", "received_events_url": "https://api.github.com/users/slavkoja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-11T17:03:20Z", "updated_at": "2020-08-11T18:09:35Z", "closed_at": "2020-08-11T18:09:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I do not know, if i am doing something wrong, but query with `left_outer_join()` doesn't work for me. I can reproduce it with this simple example:\r\n```python\r\nimport peewee as pw\r\n\r\nDBFILE = \":memory:\"\r\ndb = pw.SqliteDatabase(DBFILE, pragmas={'foreign_keys': 1,})\r\n\r\nclass BaseModel(pw.Model):\r\n    class Meta:\r\n        database = db\r\n\r\nclass Domains(BaseModel):\r\n    id = pw.PrimaryKeyField(null=True)\r\n    dname = pw.TextField()\r\n\r\nclass DAliases(BaseModel):\r\n    dalias = pw.TextField()\r\n    domain = pw.ForeignKeyField(Domains)\r\n```\r\nSimple `join()` works without problems:\r\n```python\r\nq = (Domains\r\n     .select()\r\n     .join(DAliases, pw.JOIN.LEFT_OUTER)\r\n     .where(Domains.id==1)\r\n    )\r\n```\r\nBut when i replace `join()` with `left_outer_join()`:\r\n```python\r\noq = (Domains\r\n     .select()\r\n     .left_outer_join(DAliases)\r\n     .where(Domains.id==1)\r\n    )\r\n```\r\nIt throws exception:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"pwerr.py\", line 36, in <module>\r\n    oq = (Domains\r\nAttributeError: 'Join' object has no attribute 'where'\r\n```\r\nI am surprised, because in source i see, that `left_outer_join()` returns the same object as `join()`, the difference is only in predefined `join_type`... Am i doing something wrong or problem is elsewhere?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2243", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2243/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2243/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2243/events", "html_url": "https://github.com/coleifer/peewee/issues/2243", "id": 677019062, "node_id": "MDU6SXNzdWU2NzcwMTkwNjI=", "number": 2243, "title": "Fatal Python error: GC object already tracked", "user": {"login": "simpassi", "id": 38055305, "node_id": "MDQ6VXNlcjM4MDU1MzA1", "avatar_url": "https://avatars3.githubusercontent.com/u/38055305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simpassi", "html_url": "https://github.com/simpassi", "followers_url": "https://api.github.com/users/simpassi/followers", "following_url": "https://api.github.com/users/simpassi/following{/other_user}", "gists_url": "https://api.github.com/users/simpassi/gists{/gist_id}", "starred_url": "https://api.github.com/users/simpassi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simpassi/subscriptions", "organizations_url": "https://api.github.com/users/simpassi/orgs", "repos_url": "https://api.github.com/users/simpassi/repos", "events_url": "https://api.github.com/users/simpassi/events{/privacy}", "received_events_url": "https://api.github.com/users/simpassi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-11T16:27:47Z", "updated_at": "2020-08-11T18:02:25Z", "closed_at": "2020-08-11T18:02:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having a weird intermittent error when all of the following conditions are met:\r\n* Using an in-memory sqlite3 database initialized with thread_safe=False, check_same_thread=False\r\n* Running in a different thread than the one that initialized the database\r\n* Accessing an object's _meta.backrefs values\r\n\r\nRunning inside the debugger in vs.code will make this occur much more frequently.\r\n\r\nThe actual Python error is:\r\n```\r\nFatal Python error: GC object already tracked\r\n```\r\n\r\nWhen the crash happens, all the other threads are in wait() and the crashed one is here:\r\n```\r\n  File \"/opt/conda3/lib/python3.7/site-packages/peewee.py\", line 4395 in __get__\r\n```\r\n\r\nI realize these conditions are somewhat obscure - I'm talking through a REST API to a backend that is running with the same data model but with a Postgres database, and using the same model on the client end and updating the responses into the local sqlite3 in-memory database. The data travels over using *playhouse.shortcuts.model_to_dict* and reversed using dict_to_model. Just wondering if this is something easily resolved or if I need to bring all database queries back to the main thread...\r\n\r\nPeewee version: 3.13.2\r\n\r\nPython version: 3.7.6 (Anaconda, MacOS)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2242", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2242/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2242/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2242/events", "html_url": "https://github.com/coleifer/peewee/issues/2242", "id": 676606899, "node_id": "MDU6SXNzdWU2NzY2MDY4OTk=", "number": 2242, "title": "MariaDB/Mysql index type", "user": {"login": "chewvader", "id": 7836093, "node_id": "MDQ6VXNlcjc4MzYwOTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7836093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chewvader", "html_url": "https://github.com/chewvader", "followers_url": "https://api.github.com/users/chewvader/followers", "following_url": "https://api.github.com/users/chewvader/following{/other_user}", "gists_url": "https://api.github.com/users/chewvader/gists{/gist_id}", "starred_url": "https://api.github.com/users/chewvader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chewvader/subscriptions", "organizations_url": "https://api.github.com/users/chewvader/orgs", "repos_url": "https://api.github.com/users/chewvader/repos", "events_url": "https://api.github.com/users/chewvader/events{/privacy}", "received_events_url": "https://api.github.com/users/chewvader/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-11T06:01:54Z", "updated_at": "2020-08-11T18:51:22Z", "closed_at": "2020-08-11T18:51:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe peewee isn't creating the correct \"create index\" syntax for mysql index_types. This was tested with mariadb==10.5.4, peewee==3.13.3.\r\n\r\n```\r\nimport logging\r\nfrom peewee import *\r\n\r\npwlogger = logging.getLogger('peewee')\r\npwlogger.addHandler(logging.StreamHandler())\r\npwlogger.setLevel(logging.DEBUG)\r\n\r\ndb = MySQLDatabase('<db>', user='<user>', password='<password>',\r\n                         host='<host>', port=3306)\r\n\r\n\r\nclass testmodel(Model):\r\n    timestamp = IntegerField(index=True, index_type='BTREE')\r\n\r\n    class Meta:\r\n        database = db\r\n\r\nwith db:\r\n    db.create_tables([testmodel])\r\n```\r\nResults in:\r\n```\r\n('SELECT table_name FROM information_schema.tables WHERE table_schema = DATABASE() AND table_type != %s ORDER BY table_name', ('VIEW',))\r\n('CREATE TABLE IF NOT EXISTS `testmodel` (`id` INTEGER AUTO_INCREMENT NOT NULL PRIMARY KEY, `timestamp` INTEGER NOT NULL)', [])\r\n('CREATE INDEX `testmodel_timestamp` ON `testmodel` USING BTREE (`timestamp`)', [])\r\nTraceback (most recent call last):\r\n  File \"/home/<user>/.pyenv/versions/3.8.3/lib/python3.8/site-packages/peewee.py\", line 3099, in execute_sql\r\n    cursor.execute(sql, params or ())\r\n  File \"/home/<user>/.pyenv/versions/3.8.3/lib/python3.8/site-packages/pymysql/cursors.py\", line 163, in execute\r\n    result = self._query(query)\r\n  File \"/home/<user>/.pyenv/versions/3.8.3/lib/python3.8/site-packages/pymysql/cursors.py\", line 321, in _query\r\n    conn.query(q)\r\n  File \"/home/<user>/.pyenv/versions/3.8.3/lib/python3.8/site-packages/pymysql/connections.py\", line 505, in query\r\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\r\n  File \"/home/<user>/.pyenv/versions/3.8.3/lib/python3.8/site-packages/pymysql/connections.py\", line 724, in _read_query_result\r\n    result.read()\r\n  File \"/home/<user>/.pyenv/versions/3.8.3/lib/python3.8/site-packages/pymysql/connections.py\", line 1069, in read\r\n    first_packet = self.connection._read_packet()\r\n  File \"/home/<user>/.pyenv/versions/3.8.3/lib/python3.8/site-packages/pymysql/connections.py\", line 676, in _read_packet    packet.raise_for_error()\r\n  File \"/home/<user>/.pyenv/versions/3.8.3/lib/python3.8/site-packages/pymysql/protocol.py\", line 223, in raise_for_error    err.raise_mysql_exception(self._data)\r\n  File \"/home/<user>/.pyenv/versions/3.8.3/lib/python3.8/site-packages/pymysql/err.py\", line 107, in raise_mysql_exception\r\n    raise errorclass(errno, errval)\r\npymysql.err.ProgrammingError: (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'USING BTREE (`timestamp`)' at line 1\")\r\n```\r\n\r\nThe documentation for \"CREATE INDEX\" for [mysql ](https://dev.mysql.com/doc/refman/8.0/en/create-index.html) shows \r\n```\r\nCREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name\r\n    [index_type]\r\n    ON tbl_name (key_part,...)\r\n    [index_option]\r\n    [algorithm_option | lock_option]\r\n```\r\nor:\r\n`create index <index name> using <index type> on <table> (<field(s)>)`\r\n\r\nWhile on [postgres](https://www.postgresql.org/docs/current/sql-createindex.html)\r\n```\r\nCREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ [ IF NOT EXISTS ] name ] ON [ ONLY ] table_name [ USING method ]\r\n    ( { column_name | ( expression ) } [ COLLATE collation ] [ opclass ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )\r\n    [ INCLUDE ( column_name [, ...] ) ]\r\n    [ WITH ( storage_parameter = value [, ... ] ) ]\r\n    [ TABLESPACE tablespace_name ]\r\n    [ WHERE predicate ]\r\n```\r\nor:\r\n`create index <index name> on <table> using <index type> (<field(s)>)`\r\n\r\nThe executed statement looks like postgres syntax as opposed to mysql.\r\n```CREATE INDEX `testmodel_timestamp` ON `testmodel` USING BTREE (`timestamp`)```\r\nwhich bombs.\r\n\r\nIf I manually execute:\r\n```\r\nCREATE INDEX `testmodel_timestamp` USING BTREE ON `testmodel` (`timestamp`);\r\n-- or\r\nCREATE INDEX `testmodel_timestamp` ON `testmodel` (`timestamp`) USING BTREE;\r\n```\r\nit succeeds.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2241", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2241/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2241/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2241/events", "html_url": "https://github.com/coleifer/peewee/issues/2241", "id": 675763352, "node_id": "MDU6SXNzdWU2NzU3NjMzNTI=", "number": 2241, "title": "After upgrading from version 2.x to 3.x getting, TypeError: _connect() missing 1 ...", "user": {"login": "wilberh", "id": 6799242, "node_id": "MDQ6VXNlcjY3OTkyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6799242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilberh", "html_url": "https://github.com/wilberh", "followers_url": "https://api.github.com/users/wilberh/followers", "following_url": "https://api.github.com/users/wilberh/following{/other_user}", "gists_url": "https://api.github.com/users/wilberh/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilberh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilberh/subscriptions", "organizations_url": "https://api.github.com/users/wilberh/orgs", "repos_url": "https://api.github.com/users/wilberh/repos", "events_url": "https://api.github.com/users/wilberh/events{/privacy}", "received_events_url": "https://api.github.com/users/wilberh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-09T20:07:58Z", "updated_at": "2020-08-10T14:06:25Z", "closed_at": "2020-08-10T14:06:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgrading from version 2.x to 3.x getting, I'm getting the error below.  It worked fine in version 2.x  \r\n\r\n\r\n```\r\n  File \"/.../lib/python3.6/site-packages/peewee.py\", line 403, in inner\r\n    with self:\r\n  File \"/.../lib/python3.6/site-packages/peewee.py\", line 2936, in __enter__\r\n    self.db.connect()\r\n  File \"/.../lib/python3.6/site-packages/peewee.py\", line 3035, in connect\r\n    self._state.set_connection(self._connect())\r\nTypeError: _connect() missing 1 required positional argument: 'database\r\n```\r\n\r\n\r\n\r\nhttp://docs.peewee-orm.com/en/latest/peewee/database.html?highlight=Adding%20a%20new%20Database%20Driver#adding-a-new-database-driver\r\n\r\n```\r\nfrom peewee import Database\r\nimport foodb  # Our fictional DB-API 2.0 driver.\r\n\r\n\r\nclass FooDatabase(Database):\r\n    def _connect(self, database, **kwargs):\r\n        return foodb.connect(database, **kwargs)\r\n\r\ndef get_database_connection():\r\n    return FooDatabase(database, **db_config)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2240", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2240/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2240/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2240/events", "html_url": "https://github.com/coleifer/peewee/issues/2240", "id": 675551419, "node_id": "MDU6SXNzdWU2NzU1NTE0MTk=", "number": 2240, "title": "SQLite database generates GLOB for %, however GLOB is not LIKE\u2026", "user": {"login": "zx80", "id": 8624205, "node_id": "MDQ6VXNlcjg2MjQyMDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/8624205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zx80", "html_url": "https://github.com/zx80", "followers_url": "https://api.github.com/users/zx80/followers", "following_url": "https://api.github.com/users/zx80/following{/other_user}", "gists_url": "https://api.github.com/users/zx80/gists{/gist_id}", "starred_url": "https://api.github.com/users/zx80/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zx80/subscriptions", "organizations_url": "https://api.github.com/users/zx80/orgs", "repos_url": "https://api.github.com/users/zx80/repos", "events_url": "https://api.github.com/users/zx80/events{/privacy}", "received_events_url": "https://api.github.com/users/zx80/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-08T16:29:33Z", "updated_at": "2020-08-10T17:24:59Z", "closed_at": "2020-08-10T14:05:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation says that `%` stands for `LIKE` in query expressions, but the traces shows a `GLOB` instead with SQLite, hoewever the regexp syntax is not the same between the two operators, eg `LIKE 'h%'` is `GLOB 'h*'`.\r\n\r\nVersion affected: *3.13.3*\r\n\r\nCode:\r\n\r\n```Python\r\n    res = Store.select().where(Store.key % PARAMS['filter']).order_by(Store.key)\r\n```\r\n\r\nTrace:\r\n\r\n    INFO:root:db = <peewee.SqliteDatabase object at 0x7ffac44c0c10>\r\n    DEBUG:peewee:('SELECT \"t1\".\"key\", \"t1\".\"val\" FROM \"store\" AS \"t1\" WHERE (\"t1\".\"key\" GLOB ?) ORDER BY \"t1\".\"key\"', ['%h'])\r\n\r\nIn the [source](https://github.com/coleifer/peewee/blob/master/peewee.py) on line 3347:\r\n\r\n```Python\r\n    operations = { 'LIKE': 'GLOB', 'ILIKE': 'LIKE' }\r\n```\r\n\r\nIndeed, SQLite `LIKE` is case insensitive, however `GLOB` is not `LIKE` at all. ISTM that it would be more helpful to generate a not implemented exception than switching to another operator which breaks the portability. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2239", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2239/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2239/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2239/events", "html_url": "https://github.com/coleifer/peewee/issues/2239", "id": 674076608, "node_id": "MDU6SXNzdWU2NzQwNzY2MDg=", "number": 2239, "title": "Using bitwise (&|~)in a query", "user": {"login": "TaceyWong", "id": 5282810, "node_id": "MDQ6VXNlcjUyODI4MTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5282810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaceyWong", "html_url": "https://github.com/TaceyWong", "followers_url": "https://api.github.com/users/TaceyWong/followers", "following_url": "https://api.github.com/users/TaceyWong/following{/other_user}", "gists_url": "https://api.github.com/users/TaceyWong/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaceyWong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaceyWong/subscriptions", "organizations_url": "https://api.github.com/users/TaceyWong/orgs", "repos_url": "https://api.github.com/users/TaceyWong/repos", "events_url": "https://api.github.com/users/TaceyWong/events{/privacy}", "received_events_url": "https://api.github.com/users/TaceyWong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-06T07:09:00Z", "updated_at": "2020-08-06T12:55:11Z", "closed_at": "2020-08-06T12:55:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "IN http://docs.peewee-orm.com/en/latest/peewee/query_operators.html\r\n\r\n.bin_and(value) -> Binary AND\r\n\r\n.bin_or(value) ->  Binary OR\r\n\r\nbut,I can not find the replace of Binary NOT .How can I write a peewee-style c=a&(~b)?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2238", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2238/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2238/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2238/events", "html_url": "https://github.com/coleifer/peewee/issues/2238", "id": 672162214, "node_id": "MDU6SXNzdWU2NzIxNjIyMTQ=", "number": 2238, "title": "CTE executed multiple times", "user": {"login": "frafra", "id": 4068, "node_id": "MDQ6VXNlcjQwNjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/4068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frafra", "html_url": "https://github.com/frafra", "followers_url": "https://api.github.com/users/frafra/followers", "following_url": "https://api.github.com/users/frafra/following{/other_user}", "gists_url": "https://api.github.com/users/frafra/gists{/gist_id}", "starred_url": "https://api.github.com/users/frafra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frafra/subscriptions", "organizations_url": "https://api.github.com/users/frafra/orgs", "repos_url": "https://api.github.com/users/frafra/repos", "events_url": "https://api.github.com/users/frafra/events{/privacy}", "received_events_url": "https://api.github.com/users/frafra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-03T15:34:32Z", "updated_at": "2020-08-04T08:23:44Z", "closed_at": "2020-08-03T15:53:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nPeewee defines CTE in subqueries, even if that means to compute the same thing twice.\r\n\r\nFor example: `SELECT ... FROM ... JOIN (WITH cte ... SELECT ... FROM cte) JOIN (WITH cte ... SELECT ... FROM cte) ...`\r\n\r\nI have a rather complex example I can show, but it surprises me that the CTE is not placed at the beginning, as that has been defined once.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2237", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2237/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2237/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2237/events", "html_url": "https://github.com/coleifer/peewee/issues/2237", "id": 671566605, "node_id": "MDU6SXNzdWU2NzE1NjY2MDU=", "number": 2237, "title": "Add the auto_now parameter to the TimestampField field", "user": {"login": "daveusa31", "id": 41593484, "node_id": "MDQ6VXNlcjQxNTkzNDg0", "avatar_url": "https://avatars1.githubusercontent.com/u/41593484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daveusa31", "html_url": "https://github.com/daveusa31", "followers_url": "https://api.github.com/users/daveusa31/followers", "following_url": "https://api.github.com/users/daveusa31/following{/other_user}", "gists_url": "https://api.github.com/users/daveusa31/gists{/gist_id}", "starred_url": "https://api.github.com/users/daveusa31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daveusa31/subscriptions", "organizations_url": "https://api.github.com/users/daveusa31/orgs", "repos_url": "https://api.github.com/users/daveusa31/repos", "events_url": "https://api.github.com/users/daveusa31/events{/privacy}", "received_events_url": "https://api.github.com/users/daveusa31/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-02T07:08:14Z", "updated_at": "2020-08-02T14:39:10Z", "closed_at": "2020-08-02T14:39:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to add this parameter, when set to True, the database entry will be updated and changed to the current time", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2235", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2235/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2235/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2235/events", "html_url": "https://github.com/coleifer/peewee/issues/2235", "id": 668759799, "node_id": "MDU6SXNzdWU2Njg3NTk3OTk=", "number": 2235, "title": "What does the `gametight` tag mean?", "user": {"login": "pxeger", "id": 67427173, "node_id": "MDQ6VXNlcjY3NDI3MTcz", "avatar_url": "https://avatars2.githubusercontent.com/u/67427173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pxeger", "html_url": "https://github.com/pxeger", "followers_url": "https://api.github.com/users/pxeger/followers", "following_url": "https://api.github.com/users/pxeger/following{/other_user}", "gists_url": "https://api.github.com/users/pxeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/pxeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pxeger/subscriptions", "organizations_url": "https://api.github.com/users/pxeger/orgs", "repos_url": "https://api.github.com/users/pxeger/repos", "events_url": "https://api.github.com/users/pxeger/events{/privacy}", "received_events_url": "https://api.github.com/users/pxeger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-30T13:59:47Z", "updated_at": "2020-07-30T14:14:00Z", "closed_at": "2020-07-30T14:14:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Random question - the tag `gametight` is used on only two other repos - kt and ukt, both by you (coleifer). What does it mean?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2233", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2233/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2233/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2233/events", "html_url": "https://github.com/coleifer/peewee/issues/2233", "id": 667905729, "node_id": "MDU6SXNzdWU2Njc5MDU3Mjk=", "number": 2233, "title": "Inconsistency in treatment of '\\' character", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-29T14:49:14Z", "updated_at": "2020-07-29T15:19:10Z", "closed_at": "2020-07-29T15:19:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following database schema\r\n\r\n```sql\r\nCREATE TABLE \"table\" (\r\n\"id\" integer,\r\n\"str\" varchar(50),\r\n PRIMARY KEY (id)\r\n);\r\nINSERT INTO \"table\"(\"id\",\"str\") VALUES (1,'bar_foo\\baz');\r\nINSERT INTO \"table\"(\"id\",\"str\") VALUES (2,'bar');\r\nINSERT INTO \"table\"(\"id\",\"str\") VALUES (3,'bar\\foo');\r\n```\r\n\r\nand the following query\r\n\r\n```python\r\nret = Table.select(Table.id).where(Table.str.contains('\\\\'))\r\nfor r in ret:\r\n    print(r.id)\r\n```\r\n\r\nThis prints the following as expected\r\n\r\n```\r\n1\r\n3\r\n```\r\n\r\nHowever, when I have this query\r\n\r\n```python\r\nret = Table.select(Table.id).where(Table.str.contains('_foo\\\\'))\r\nfor r in ret:\r\n    print(r.id)\r\n```\r\n\r\nI expect peewee to dump\r\n\r\n```\r\n1\r\n```\r\nbut, peewee dumps nothing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2231", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2231/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2231/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2231/events", "html_url": "https://github.com/coleifer/peewee/issues/2231", "id": 667420609, "node_id": "MDU6SXNzdWU2Njc0MjA2MDk=", "number": 2231, "title": "Unable to pass database parameter to mysql-connector-python through peewee", "user": {"login": "dshefman1", "id": 25602097, "node_id": "MDQ6VXNlcjI1NjAyMDk3", "avatar_url": "https://avatars3.githubusercontent.com/u/25602097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dshefman1", "html_url": "https://github.com/dshefman1", "followers_url": "https://api.github.com/users/dshefman1/followers", "following_url": "https://api.github.com/users/dshefman1/following{/other_user}", "gists_url": "https://api.github.com/users/dshefman1/gists{/gist_id}", "starred_url": "https://api.github.com/users/dshefman1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dshefman1/subscriptions", "organizations_url": "https://api.github.com/users/dshefman1/orgs", "repos_url": "https://api.github.com/users/dshefman1/repos", "events_url": "https://api.github.com/users/dshefman1/events{/privacy}", "received_events_url": "https://api.github.com/users/dshefman1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-28T22:23:54Z", "updated_at": "2020-07-29T13:33:46Z", "closed_at": "2020-07-29T13:33:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "The database parameter 'tls_versions' does not appear to be getting passed through to mysql-connector-python. The [documentation ](http://docs.peewee-orm.com/en/latest/peewee/database.html#initializing-a-database) says, \"Subsequent keyword arguments are passed to the underlying database driver when establishing the connection, allowing you to pass vendor-specific parameters easily\". This does not appear to be the behavior I am witnessing when I pass the \"tls_versions\" parameter through peewee to mysql-connector-python.\r\n\r\nWhen I connect directly with mysql-connector-python using the code below, I am able to connect successfully:\r\n\r\n```\r\nimport mysql.connector\r\n\r\nconfig = {'database': 'dbname',\r\n 'user': 'username_so',\r\n 'password': 'psswrd',\r\n 'host': 'maria####-##-###-##.###.####.com',\r\n 'port': 3307,\r\n 'tls_versions': ['TLSv1.1', 'TLSv1.2']}\r\n\r\ncnx = mysql.connector.connect(**config)\r\n\r\nprint(cnx.is_connected())\r\ncnx.close()\r\n```\r\nOutput:\r\n> True\r\n\r\nHowever, when I pass in the same configuration to peewee.MySQLDatabase() then I get an error message:\r\n\r\n```\r\ndb = MySQLDatabase(**config)\r\n\r\ndb.get_tables() # This function and any other that connects to the db returns the same error message specified below\r\n```\r\nError Message:\r\n\r\n> ImproperlyConfigured: MySQL driver not installed!\r\n\r\nI am pretty sure that the problem is with specifying the tls versions in peewee because I was getting the same error message with mysql.connector before I added in the additional 'tls_versions' parameter. Also, I get the same error message with peewee if I do not include the 'tls_versions' parameter at all.\r\n\r\nMy Setup:\r\nLinux\r\nPython 3.7\r\npeewee==3.13.3\r\nmysql-connector-python==8.0.21", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2230", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2230/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2230/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2230/events", "html_url": "https://github.com/coleifer/peewee/issues/2230", "id": 665368056, "node_id": "MDU6SXNzdWU2NjUzNjgwNTY=", "number": 2230, "title": "passing custom/additonal metadata", "user": {"login": "wilberh", "id": 6799242, "node_id": "MDQ6VXNlcjY3OTkyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6799242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilberh", "html_url": "https://github.com/wilberh", "followers_url": "https://api.github.com/users/wilberh/followers", "following_url": "https://api.github.com/users/wilberh/following{/other_user}", "gists_url": "https://api.github.com/users/wilberh/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilberh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilberh/subscriptions", "organizations_url": "https://api.github.com/users/wilberh/orgs", "repos_url": "https://api.github.com/users/wilberh/repos", "events_url": "https://api.github.com/users/wilberh/events{/privacy}", "received_events_url": "https://api.github.com/users/wilberh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-24T19:23:35Z", "updated_at": "2020-07-24T19:51:20Z", "closed_at": "2020-07-24T19:51:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to pass additional metada when creating a table (in class Meta or some other way)?  \r\nMeaning, adding additional information after table creation section - see bold section below.\r\n\r\nExample: \r\n\r\nCREATE TABLE testing (\r\nname VARCHAR\r\n)\r\n**COMMENT 'This is an internal table' \r\nROW FORMAT DELIMITED \r\nNULL DEFINED AS '' \r\nSTORED AS AVRO** \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2229", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2229/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2229/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2229/events", "html_url": "https://github.com/coleifer/peewee/issues/2229", "id": 664677651, "node_id": "MDU6SXNzdWU2NjQ2Nzc2NTE=", "number": 2229, "title": "How to handle 'Duplicate entry' warnings when using `on_conflict_ignore()`?", "user": {"login": "SilentGene", "id": 15141939, "node_id": "MDQ6VXNlcjE1MTQxOTM5", "avatar_url": "https://avatars1.githubusercontent.com/u/15141939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SilentGene", "html_url": "https://github.com/SilentGene", "followers_url": "https://api.github.com/users/SilentGene/followers", "following_url": "https://api.github.com/users/SilentGene/following{/other_user}", "gists_url": "https://api.github.com/users/SilentGene/gists{/gist_id}", "starred_url": "https://api.github.com/users/SilentGene/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SilentGene/subscriptions", "organizations_url": "https://api.github.com/users/SilentGene/orgs", "repos_url": "https://api.github.com/users/SilentGene/repos", "events_url": "https://api.github.com/users/SilentGene/events{/privacy}", "received_events_url": "https://api.github.com/users/SilentGene/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-23T18:22:26Z", "updated_at": "2020-07-24T16:47:33Z", "closed_at": "2020-07-23T21:44:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, when using `insert.on_conflict_ignore().execute()` method to insert new entries, there are always warnings shown as below:\r\n```bash\r\nC:\\Users\\...\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pymysql\\cursors.py:170: Warning: (1062, \"Duplicate entry 'http://link.aps.org/doi/10.1103/RevModPhys.90.015006' for key 'IX_link'\")\r\n  result = self._query(query)\r\n```\r\nCould I know how to hide or filter out these warnings?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2228", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2228/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2228/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2228/events", "html_url": "https://github.com/coleifer/peewee/issues/2228", "id": 664307679, "node_id": "MDU6SXNzdWU2NjQzMDc2Nzk=", "number": 2228, "title": "Drop Constraint Syntax Error in MySQL 8.0.18", "user": {"login": "hanxifu", "id": 23117153, "node_id": "MDQ6VXNlcjIzMTE3MTUz", "avatar_url": "https://avatars1.githubusercontent.com/u/23117153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanxifu", "html_url": "https://github.com/hanxifu", "followers_url": "https://api.github.com/users/hanxifu/followers", "following_url": "https://api.github.com/users/hanxifu/following{/other_user}", "gists_url": "https://api.github.com/users/hanxifu/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanxifu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanxifu/subscriptions", "organizations_url": "https://api.github.com/users/hanxifu/orgs", "repos_url": "https://api.github.com/users/hanxifu/repos", "events_url": "https://api.github.com/users/hanxifu/events{/privacy}", "received_events_url": "https://api.github.com/users/hanxifu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-23T08:55:47Z", "updated_at": "2020-07-24T01:12:16Z", "closed_at": "2020-07-23T13:23:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm using `peewee.playhouse.migrate.drop_constraint` to do some migrations on MySQL 8.0.18.\r\nIf failed with error message: \r\n<pre>\r\n`Error in query (1064): Syntax error near 'CONSTRAINT `constraint_name`' at line 1`\r\n</pre>\r\n\r\nI've checked the SQL.\r\nThis will fail: <pre>ALTER TABLE xxx DROP CONSTRAINTS `XXX`</pre>\r\nThis will succeed: <pre>ALTER TABLE xxx DROP FOREIGN KEY `XXX`</pre>\r\n\r\nIs there anything peewee can improve? Or configurations in MySQL I ignored?\r\n\r\nThanks for your help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2227", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2227/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2227/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2227/events", "html_url": "https://github.com/coleifer/peewee/issues/2227", "id": 663189053, "node_id": "MDU6SXNzdWU2NjMxODkwNTM=", "number": 2227, "title": "Is there a way to join across databases?", "user": {"login": "skjbulcher", "id": 16672299, "node_id": "MDQ6VXNlcjE2NjcyMjk5", "avatar_url": "https://avatars3.githubusercontent.com/u/16672299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skjbulcher", "html_url": "https://github.com/skjbulcher", "followers_url": "https://api.github.com/users/skjbulcher/followers", "following_url": "https://api.github.com/users/skjbulcher/following{/other_user}", "gists_url": "https://api.github.com/users/skjbulcher/gists{/gist_id}", "starred_url": "https://api.github.com/users/skjbulcher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skjbulcher/subscriptions", "organizations_url": "https://api.github.com/users/skjbulcher/orgs", "repos_url": "https://api.github.com/users/skjbulcher/repos", "events_url": "https://api.github.com/users/skjbulcher/events{/privacy}", "received_events_url": "https://api.github.com/users/skjbulcher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-21T17:34:40Z", "updated_at": "2020-07-21T19:36:40Z", "closed_at": "2020-07-21T19:36:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a MySQL server with a number of databases, e.g. `customer`, `dba_company_a`, `dba_company_b`. I need to join across databases to execute queries that include customer information from either dba_company database. I haven't been able to figure out how to do that with peewee.\r\n\r\nI've tried using different `Meta` classes indicating it belongs to a different database\r\n\r\n```\r\ndb = MySQLDatabase('customer')\r\nclass Customer(Model):\r\n    id = AutoField()\r\n    ....\r\n    class Meta:\r\n        database = db\r\n```\r\n\r\nas well as binding\r\n\r\n```\r\ndb = MySQLDatabase('customer')\r\nclass Customer(Model):\r\n    id = AutoField()\r\nCustomer.bind(db)\r\n```\r\n\r\nbut in either case when I try to perform a join, _(something like `Orders.select(Orders, Customers).join(Customers).select()`, where Orders is a table on dba_company_a/b)_, I get a message like:\r\n\r\n```\r\npeewee.ProgrammingError: (1146, \"Table 'dba_company_a.customer' doesn't exist\")\r\n```\r\n\r\nIs there anyway to do joins across databases? Am I missing something simple?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2226", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2226/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2226/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2226/events", "html_url": "https://github.com/coleifer/peewee/issues/2226", "id": 663177547, "node_id": "MDU6SXNzdWU2NjMxNzc1NDc=", "number": 2226, "title": ".switch() and .join_from() for CTE's", "user": {"login": "BigPictures", "id": 63026741, "node_id": "MDQ6VXNlcjYzMDI2NzQx", "avatar_url": "https://avatars0.githubusercontent.com/u/63026741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BigPictures", "html_url": "https://github.com/BigPictures", "followers_url": "https://api.github.com/users/BigPictures/followers", "following_url": "https://api.github.com/users/BigPictures/following{/other_user}", "gists_url": "https://api.github.com/users/BigPictures/gists{/gist_id}", "starred_url": "https://api.github.com/users/BigPictures/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BigPictures/subscriptions", "organizations_url": "https://api.github.com/users/BigPictures/orgs", "repos_url": "https://api.github.com/users/BigPictures/repos", "events_url": "https://api.github.com/users/BigPictures/events{/privacy}", "received_events_url": "https://api.github.com/users/BigPictures/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-21T17:14:53Z", "updated_at": "2020-07-22T20:55:44Z", "closed_at": "2020-07-21T19:35:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks to me like the `.switch()` and `.join_from()` methods are only defined on the `ModelSelect` class, meaning it's impossible to join from a CTE to multiple other tables. It might be good to move the join context stuff up the class hierarchy to `Select`, unless there's some reason doing so would be tricky.\r\n\r\nIs there a workaround for this? I could join starting from one of the other tables, but I think that can have bad performance implications. Maybe making a new CTE for each join would work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2225", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2225/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2225/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2225/events", "html_url": "https://github.com/coleifer/peewee/issues/2225", "id": 661603413, "node_id": "MDU6SXNzdWU2NjE2MDM0MTM=", "number": 2225, "title": "Support postgres polygon type?", "user": {"login": "andrewerf", "id": 26378793, "node_id": "MDQ6VXNlcjI2Mzc4Nzkz", "avatar_url": "https://avatars1.githubusercontent.com/u/26378793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewerf", "html_url": "https://github.com/andrewerf", "followers_url": "https://api.github.com/users/andrewerf/followers", "following_url": "https://api.github.com/users/andrewerf/following{/other_user}", "gists_url": "https://api.github.com/users/andrewerf/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewerf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewerf/subscriptions", "organizations_url": "https://api.github.com/users/andrewerf/orgs", "repos_url": "https://api.github.com/users/andrewerf/repos", "events_url": "https://api.github.com/users/andrewerf/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewerf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T09:38:53Z", "updated_at": "2020-07-20T12:58:26Z", "closed_at": "2020-07-20T12:58:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "What about support of postgres point, line, path and polygon types?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2224", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2224/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2224/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2224/events", "html_url": "https://github.com/coleifer/peewee/issues/2224", "id": 658277401, "node_id": "MDU6SXNzdWU2NTgyNzc0MDE=", "number": 2224, "title": "Contains does not work as expected with % and _", "user": {"login": "StefanosChaliasos", "id": 15054312, "node_id": "MDQ6VXNlcjE1MDU0MzEy", "avatar_url": "https://avatars0.githubusercontent.com/u/15054312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StefanosChaliasos", "html_url": "https://github.com/StefanosChaliasos", "followers_url": "https://api.github.com/users/StefanosChaliasos/followers", "following_url": "https://api.github.com/users/StefanosChaliasos/following{/other_user}", "gists_url": "https://api.github.com/users/StefanosChaliasos/gists{/gist_id}", "starred_url": "https://api.github.com/users/StefanosChaliasos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StefanosChaliasos/subscriptions", "organizations_url": "https://api.github.com/users/StefanosChaliasos/orgs", "repos_url": "https://api.github.com/users/StefanosChaliasos/repos", "events_url": "https://api.github.com/users/StefanosChaliasos/events{/privacy}", "received_events_url": "https://api.github.com/users/StefanosChaliasos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-16T14:56:39Z", "updated_at": "2020-07-17T00:22:33Z", "closed_at": "2020-07-17T00:22:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider a table with the following values:\r\n\r\n```\r\nid | name\r\n-- | -------\r\n1 | foo\r\n2 | foo%\r\n3 | foo%bar\r\n4 | foobar\r\n```\r\nWhen I use the contains method with \"%\" as an argument, I expect to return foo% and foo%bar, but peewee returns all the columns of the table.\r\n\r\nExample query:\r\n\r\n```python\r\nTable1.select(Table1.name).where(Table1.name.contains(\"'%\")).objects()\r\n```\r\n\r\nI expected that `contains` abstracts the semantics of SQL and properly handles the special characters.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2223", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2223/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2223/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2223/events", "html_url": "https://github.com/coleifer/peewee/issues/2223", "id": 654479525, "node_id": "MDU6SXNzdWU2NTQ0Nzk1MjU=", "number": 2223, "title": "Removing trailing square-brackets", "user": {"login": "wilberh", "id": 6799242, "node_id": "MDQ6VXNlcjY3OTkyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6799242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilberh", "html_url": "https://github.com/wilberh", "followers_url": "https://api.github.com/users/wilberh/followers", "following_url": "https://api.github.com/users/wilberh/following{/other_user}", "gists_url": "https://api.github.com/users/wilberh/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilberh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilberh/subscriptions", "organizations_url": "https://api.github.com/users/wilberh/orgs", "repos_url": "https://api.github.com/users/wilberh/repos", "events_url": "https://api.github.com/users/wilberh/events{/privacy}", "received_events_url": "https://api.github.com/users/wilberh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-10T03:19:03Z", "updated_at": "2020-07-10T15:42:12Z", "closed_at": "2020-07-10T15:42:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way of removing the square-brackets from getting added into sql queries?  \r\nI'm getting this sql statement - \r\n\r\nSELECT t1.rname, t1.mrole, t1.rmaterial FROM stg.instruments AS t1 []", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2222", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2222/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2222/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2222/events", "html_url": "https://github.com/coleifer/peewee/issues/2222", "id": 652624172, "node_id": "MDU6SXNzdWU2NTI2MjQxNzI=", "number": 2222, "title": "Question: is comma equivalent to & in where clause?", "user": {"login": "dsmurrell", "id": 4035854, "node_id": "MDQ6VXNlcjQwMzU4NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4035854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsmurrell", "html_url": "https://github.com/dsmurrell", "followers_url": "https://api.github.com/users/dsmurrell/followers", "following_url": "https://api.github.com/users/dsmurrell/following{/other_user}", "gists_url": "https://api.github.com/users/dsmurrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsmurrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsmurrell/subscriptions", "organizations_url": "https://api.github.com/users/dsmurrell/orgs", "repos_url": "https://api.github.com/users/dsmurrell/repos", "events_url": "https://api.github.com/users/dsmurrell/events{/privacy}", "received_events_url": "https://api.github.com/users/dsmurrell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-07T20:38:18Z", "updated_at": "2020-07-07T22:03:26Z", "closed_at": "2020-07-07T21:58:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "In this example in the docs: http://docs.peewee-orm.com/en/latest/peewee/querying.html#filtering-records\r\n\r\n`.where(Tweet.user == user, Tweet.is_published == True)`\r\n\r\nIs this the same as `.where((Tweet.user == user) & (Tweet.is_published == True))` ?\r\n\r\nI can't seem to find this comma syntax documented anywhere else.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2221", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2221/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2221/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2221/events", "html_url": "https://github.com/coleifer/peewee/issues/2221", "id": 651762730, "node_id": "MDU6SXNzdWU2NTE3NjI3MzA=", "number": 2221, "title": "Calling db.atomic() for a transaction with a new or existing database fails", "user": {"login": "rmskinsa", "id": 64798846, "node_id": "MDQ6VXNlcjY0Nzk4ODQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/64798846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmskinsa", "html_url": "https://github.com/rmskinsa", "followers_url": "https://api.github.com/users/rmskinsa/followers", "following_url": "https://api.github.com/users/rmskinsa/following{/other_user}", "gists_url": "https://api.github.com/users/rmskinsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmskinsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmskinsa/subscriptions", "organizations_url": "https://api.github.com/users/rmskinsa/orgs", "repos_url": "https://api.github.com/users/rmskinsa/repos", "events_url": "https://api.github.com/users/rmskinsa/events{/privacy}", "received_events_url": "https://api.github.com/users/rmskinsa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-06T19:16:55Z", "updated_at": "2020-07-06T21:01:57Z", "closed_at": "2020-07-06T19:33:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "In `my_models.py`:\r\n```\r\nclass RegionType(db.Model):\r\n    name = CharField(unique=True, null=False)\r\n```\r\n\r\nIn `my_flask_app.py`:\r\n```\r\ndb = MySQLDatabase(\r\n    app.config.get('DATABASE_NAME'),\r\n    user=app.config.get('DATABASE_USER'),\r\n    password=app.config.get('DATABASE_PASSWORD'),\r\n    host=app.config.get('DATABASE_HOST'),\r\n    port=int(app.config.get('DATABASE_PORT'))\r\n)\r\n```\r\n\r\nIn `migrations.py`:\r\n```\r\nfrom my_models import RegionType\r\nfrom my_flask_app import db, app\r\n\r\nwith db.atomic() as transaction:\r\n    try:\r\n        all_region_type = RegionType.create(name='all')\r\n    except Exception as e:\r\n        transaction.rollback()\r\n        app.logger.error(e)\r\n```\r\n\r\nI spin the database up in a Docker container. The docker-compose for that looks like:\r\n```\r\n  local_db:\r\n    container_name: local_db\r\n    image: mysql:5.7\r\n    restart: always\r\n    environment:\r\n        MYSQL_ROOT_PASSWORD: xxxxx\r\n        MYSQL_DATABASE: xxxxx\r\n        MYSQL_USER: xxxxx\r\n        MYSQL_PASSWORD: xxxxx\r\n    ports:\r\n      - '3306:3306'\r\n    expose:\r\n      - '3306'\r\n    volumes:\r\n      - ./local_db_data:/var/lib/mysql\r\n```\r\n\r\nHave confirmed my application can talk to/interact with the database using the config info given above and that the database is running. When I run the migration above I get:\r\n```\r\n  File \"/Users/ryanschuster/envs/DataSvc-jeQi5N6I/lib/python3.6/site-packages/peewee.py\", line 3099, in execute_sql\r\n    cursor.execute(sql, params or ())\r\n  File \"/Users/ryanschuster/envs/DataSvc-jeQi5N6I/lib/python3.6/site-packages/pymysql/cursors.py\", line 170, in execute\r\n    result = self._query(query)\r\n  File \"/Users/ryanschuster/envs/DataSvc-jeQi5N6I/lib/python3.6/site-packages/pymysql/cursors.py\", line 328, in _query\r\n    conn.query(q)\r\n  File \"/Users/ryanschuster/envs/DataSvc-jeQi5N6I/lib/python3.6/site-packages/pymysql/connections.py\", line 517, in query\r\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\r\n  File \"/Users/ryanschuster/envs/DataSvc-jeQi5N6I/lib/python3.6/site-packages/pymysql/connections.py\", line 732, in _read_query_result\r\n    result.read()\r\n  File \"/Users/ryanschuster/envs/DataSvc-jeQi5N6I/lib/python3.6/site-packages/pymysql/connections.py\", line 1075, in read\r\n    first_packet = self.connection._read_packet()\r\n  File \"/Users/ryanschuster/envs/DataSvc-jeQi5N6I/lib/python3.6/site-packages/pymysql/connections.py\", line 684, in _read_packet\r\n    packet.check_error()\r\n  File \"/Users/ryanschuster/envs/DataSvc-jeQi5N6I/lib/python3.6/site-packages/pymysql/protocol.py\", line 220, in check_error\r\n    err.raise_mysql_exception(self._data)\r\n  File \"/Users/ryanschuster/envs/DataSvc-jeQi5N6I/lib/python3.6/site-packages/pymysql/err.py\", line 109, in raise_mysql_exception\r\n    raise errorclass(errno, errval)\r\npymysql.err.InternalError: (1305, 'SAVEPOINT s1d7433f1e863451e99871f44bdaa795c does not exist')\r\n```\r\nI see an unanswered 4-year-old Stack Overflow question about this: https://stackoverflow.com/questions/37870898/peewee-savepoint-does-not-exist\r\n\r\nWhen searching for \"mysql savepoint does not exist\" I'm led to: https://stackoverflow.com/a/19672316\r\n\r\nI also saw [this](https://stackoverflow.com/a/42264410) SO post about another way to do transactions with PeeWee. But `set_autocommit` doesn't appear to be an option on `db` anymore as it gives me an error.\r\n\r\nAny ideas what's causing this? It _seems_ like a bug to me as I'm doing this exactly the way it's stated in the [docs](https://docs.peewee-orm.com/en/3.4.0/peewee/transactions.html#transactions). But I could've borked something somewhere along the line.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2220", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2220/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2220/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2220/events", "html_url": "https://github.com/coleifer/peewee/issues/2220", "id": 651644596, "node_id": "MDU6SXNzdWU2NTE2NDQ1OTY=", "number": 2220, "title": "Peewee crashes when applying distinct to an expression", "user": {"login": "StefanosChaliasos", "id": 15054312, "node_id": "MDQ6VXNlcjE1MDU0MzEy", "avatar_url": "https://avatars0.githubusercontent.com/u/15054312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StefanosChaliasos", "html_url": "https://github.com/StefanosChaliasos", "followers_url": "https://api.github.com/users/StefanosChaliasos/followers", "following_url": "https://api.github.com/users/StefanosChaliasos/following{/other_user}", "gists_url": "https://api.github.com/users/StefanosChaliasos/gists{/gist_id}", "starred_url": "https://api.github.com/users/StefanosChaliasos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StefanosChaliasos/subscriptions", "organizations_url": "https://api.github.com/users/StefanosChaliasos/orgs", "repos_url": "https://api.github.com/users/StefanosChaliasos/repos", "events_url": "https://api.github.com/users/StefanosChaliasos/events{/privacy}", "received_events_url": "https://api.github.com/users/StefanosChaliasos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-06T15:50:58Z", "updated_at": "2020-07-07T13:39:49Z", "closed_at": "2020-07-07T13:39:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen applying `distinct` to an expression peewee crashes with `TypeError`. Beyond a table's column, in postgres distinct gets an [arbitrary expression](https://www.postgresql.org/docs/9.5/sql-select.html)\r\n\r\n**Expected behavior**\r\n```python\r\nexpr = (Model.column_a + Model.column_b).alias('expr')\r\nModel.select(expr).order_by(expr).distinct(expr.alias())\r\n```\r\n\r\nI expect the following query:\r\n\r\n```sql\r\nSELECT DISTINCT ON (\"t1\".\"column_a\" + \"t1\".\"column_b\") \"t1\".\"column_a\" + \"t1\".\"column_b\" AS \"expr\" FROM \"model\" AS \"t1\" ORDER BY \"t1\".\"column_a\" + \"t1\".\"column_b\";\r\n```\r\n\r\nInstead I get the following exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"program.py\", line 22, in <module>\r\n    print(Model.select(expr).order_by(expr).distinct(expr.alias()))\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 1885, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 2143, in first\r\n    return self.peek(database, n=n)\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 1885, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 2134, in peek\r\n    rows = self.execute(database)[:n]\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 1885, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 1956, in execute\r\n    return self._execute(database)\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 2128, in _execute\r\n    cursor = database.execute(self)\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 3118, in execute\r\n    sql, params = ctx.sql(query).query()\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 606, in sql\r\n    return obj.__sql__(self)\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 2383, in __sql__\r\n    .sql(EnclosedNodeList(self._distinct))\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 1760, in EnclosedNodeList\r\n    return NodeList(nodes, ', ', True)\r\n  File \"/home/.env/lib/python3.8/site-packages/peewee-3.13.3-py3.8.egg/peewee.py\", line 1740, in __init__\r\n    self.nodes[0] = self.nodes[0].clone()\r\nTypeError: 'tuple' object does not support item assignment\r\n```\r\nI assume that there is a programing error because peewee tries to assign something to a tuple object, although tuples in Python are immutable\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2219", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2219/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2219/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2219/events", "html_url": "https://github.com/coleifer/peewee/issues/2219", "id": 651251740, "node_id": "MDU6SXNzdWU2NTEyNTE3NDA=", "number": 2219, "title": "Override select()", "user": {"login": "wilberh", "id": 6799242, "node_id": "MDQ6VXNlcjY3OTkyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6799242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilberh", "html_url": "https://github.com/wilberh", "followers_url": "https://api.github.com/users/wilberh/followers", "following_url": "https://api.github.com/users/wilberh/following{/other_user}", "gists_url": "https://api.github.com/users/wilberh/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilberh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilberh/subscriptions", "organizations_url": "https://api.github.com/users/wilberh/orgs", "repos_url": "https://api.github.com/users/wilberh/repos", "events_url": "https://api.github.com/users/wilberh/events{/privacy}", "received_events_url": "https://api.github.com/users/wilberh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-06T05:14:29Z", "updated_at": "2020-07-06T18:01:35Z", "closed_at": "2020-07-06T13:28:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I override the select() method from the Model class?  \r\n\r\nI need to remove remove the double quotes from the sql strings created by peewee so my DBAPI v2.0 compliant driver database can take it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2218", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2218/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2218/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2218/events", "html_url": "https://github.com/coleifer/peewee/issues/2218", "id": 651238790, "node_id": "MDU6SXNzdWU2NTEyMzg3OTA=", "number": 2218, "title": "How to get ridoff double quotes", "user": {"login": "wilberh", "id": 6799242, "node_id": "MDQ6VXNlcjY3OTkyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6799242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilberh", "html_url": "https://github.com/wilberh", "followers_url": "https://api.github.com/users/wilberh/followers", "following_url": "https://api.github.com/users/wilberh/following{/other_user}", "gists_url": "https://api.github.com/users/wilberh/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilberh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilberh/subscriptions", "organizations_url": "https://api.github.com/users/wilberh/orgs", "repos_url": "https://api.github.com/users/wilberh/repos", "events_url": "https://api.github.com/users/wilberh/events{/privacy}", "received_events_url": "https://api.github.com/users/wilberh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-06T04:32:40Z", "updated_at": "2020-07-06T13:27:39Z", "closed_at": "2020-07-06T13:27:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using a database driver that is DB API (PEP-249) v2.0 compliant.  \r\nHow can I tell peewee to not add double quotes on everything?\r\nex:\r\nMy base class is inheriting from the Model class.  Whenever I call ItemModel.select() and noticed peewee is adding double quotes.  How can I configure the class Model to not add double quotes.  \r\n\r\nIs coming out like:\r\nSELECT \"t1\".\"item1\", \"t1\".\"item2\", \"t1\".\"item3\" FROM \"trex_inventory_recipe_material\" AS t1\r\n\r\nI need it like this: \r\nSELECT t1.item1, t1.item2, t1.item3 FROM trex_inventory_recipe_material AS t1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2217", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2217/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2217/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2217/events", "html_url": "https://github.com/coleifer/peewee/issues/2217", "id": 650911828, "node_id": "MDU6SXNzdWU2NTA5MTE4Mjg=", "number": 2217, "title": "Multiple joins on same table produces ambiguous column name", "user": {"login": "Zverik", "id": 766031, "node_id": "MDQ6VXNlcjc2NjAzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/766031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zverik", "html_url": "https://github.com/Zverik", "followers_url": "https://api.github.com/users/Zverik/followers", "following_url": "https://api.github.com/users/Zverik/following{/other_user}", "gists_url": "https://api.github.com/users/Zverik/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zverik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zverik/subscriptions", "organizations_url": "https://api.github.com/users/Zverik/orgs", "repos_url": "https://api.github.com/users/Zverik/repos", "events_url": "https://api.github.com/users/Zverik/events{/privacy}", "received_events_url": "https://api.github.com/users/Zverik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-04T15:40:56Z", "updated_at": "2020-07-04T15:50:51Z", "closed_at": "2020-07-04T15:50:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've got this code that inner joins the same table twice:\r\n\r\n```\r\n   cnt = (                                                                         \r\n          User.select()\r\n          .join_from(User, MailCode, on=MailCode.sent_by)                                         \r\n          .join_from(User, MailCode, on=MailCode.sent_to)                                         \r\n          .where(User.is_active == True).count()                                                  \r\n      )\r\n```\r\n\r\nFor some reason it uses alias \"t2\" twice:\r\n\r\n```\r\nSELECT COUNT(1) FROM (\r\n  SELECT 1 FROM \"user\" AS \"t1\"\r\n  INNER JOIN \"mailcode\" AS \"t2\" ON (\"t2\".\"sent_by_id\" = \"t1\".\"id\")\r\n  INNER JOIN \"mailcode\" AS \"t2\" ON (\"t2\".\"sent_to_id\" = \"t1\".\"id\")\r\n  WHERE (\"t1\".\"is_active\" = True)\r\n) AS \"_wrapped\"\r\n```\r\n\r\nIs this expected behaviour? There is nothing on that in the documentation.\r\n\r\n(I have solved this with `MailCode.alias()`, but it seems a pretty common case not to be processed.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2216", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2216/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2216/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2216/events", "html_url": "https://github.com/coleifer/peewee/issues/2216", "id": 650052367, "node_id": "MDU6SXNzdWU2NTAwNTIzNjc=", "number": 2216, "title": "Any integration with Hadoop (Hive)?", "user": {"login": "wilberh", "id": 6799242, "node_id": "MDQ6VXNlcjY3OTkyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6799242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilberh", "html_url": "https://github.com/wilberh", "followers_url": "https://api.github.com/users/wilberh/followers", "following_url": "https://api.github.com/users/wilberh/following{/other_user}", "gists_url": "https://api.github.com/users/wilberh/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilberh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilberh/subscriptions", "organizations_url": "https://api.github.com/users/wilberh/orgs", "repos_url": "https://api.github.com/users/wilberh/repos", "events_url": "https://api.github.com/users/wilberh/events{/privacy}", "received_events_url": "https://api.github.com/users/wilberh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-02T16:11:48Z", "updated_at": "2020-07-02T16:33:39Z", "closed_at": "2020-07-02T16:33:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does Peewee have support / extension for Hadoop (Hive / Pyhive)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2215", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2215/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2215/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2215/events", "html_url": "https://github.com/coleifer/peewee/issues/2215", "id": 648096937, "node_id": "MDU6SXNzdWU2NDgwOTY5Mzc=", "number": 2215, "title": "peewee + asyncpg", "user": {"login": "jet10000", "id": 2258120, "node_id": "MDQ6VXNlcjIyNTgxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2258120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jet10000", "html_url": "https://github.com/jet10000", "followers_url": "https://api.github.com/users/jet10000/followers", "following_url": "https://api.github.com/users/jet10000/following{/other_user}", "gists_url": "https://api.github.com/users/jet10000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jet10000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jet10000/subscriptions", "organizations_url": "https://api.github.com/users/jet10000/orgs", "repos_url": "https://api.github.com/users/jet10000/repos", "events_url": "https://api.github.com/users/jet10000/events{/privacy}", "received_events_url": "https://api.github.com/users/jet10000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-30T11:29:09Z", "updated_at": "2020-06-30T13:08:18Z", "closed_at": "2020-06-30T13:08:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use peewee to manage tables and queries, use peewee to generate sql queries, and then use asyncpg to execute. How can I do it? I hope there is an example.\r\n\r\n```\r\nimport asyncio\r\nimport asyncpg\r\nfrom devtools import debug\r\nfrom auth.models import User\r\n\r\nasync def main():\r\n    conn = await asyncpg.connect('postgresql://postgres:pass@localhost:5432/testdb')\r\n    # Execute a statement to create a new table.\r\n    q = User.select().sql()\r\n    debug(q)\r\n    res = await conn.fetch(q)\r\n    debug(res)\r\n    await conn.close()\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n\r\n```\r\n\r\n```\r\n    entry = self._entries.get(query)  # type: _StatementCacheEntry\r\nTypeError: unhashable type: 'list'\r\n````", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2214", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2214/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2214/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2214/events", "html_url": "https://github.com/coleifer/peewee/issues/2214", "id": 647989124, "node_id": "MDU6SXNzdWU2NDc5ODkxMjQ=", "number": 2214, "title": "Add UUIDKeyField for postgres", "user": {"login": "jet10000", "id": 2258120, "node_id": "MDQ6VXNlcjIyNTgxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2258120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jet10000", "html_url": "https://github.com/jet10000", "followers_url": "https://api.github.com/users/jet10000/followers", "following_url": "https://api.github.com/users/jet10000/following{/other_user}", "gists_url": "https://api.github.com/users/jet10000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jet10000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jet10000/subscriptions", "organizations_url": "https://api.github.com/users/jet10000/orgs", "repos_url": "https://api.github.com/users/jet10000/repos", "events_url": "https://api.github.com/users/jet10000/events{/privacy}", "received_events_url": "https://api.github.com/users/jet10000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-30T08:46:05Z", "updated_at": "2020-06-30T13:11:35Z", "closed_at": "2020-06-30T13:11:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found a UUIDKeyField in cockroachdb, Please add a UUIDKeyField for PostgreSQL, the default value `gen_random_uuid()`.\r\n\r\n```\r\nCREATE EXTENSION IF NOT EXISTS \"pgcrypto\";\r\n```\r\nhttps://medium.com/@shawnoy/generate-a-uuid-as-postgresql-default-value-fc0ae41a37d2\r\n\r\nif extension not exists, reminder to install this extension.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2212", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2212/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2212/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2212/events", "html_url": "https://github.com/coleifer/peewee/issues/2212", "id": 645963760, "node_id": "MDU6SXNzdWU2NDU5NjM3NjA=", "number": 2212, "title": "Field in query results has \") appended to its name", "user": {"login": "zacc", "id": 966053, "node_id": "MDQ6VXNlcjk2NjA1Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/966053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacc", "html_url": "https://github.com/zacc", "followers_url": "https://api.github.com/users/zacc/followers", "following_url": "https://api.github.com/users/zacc/following{/other_user}", "gists_url": "https://api.github.com/users/zacc/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacc/subscriptions", "organizations_url": "https://api.github.com/users/zacc/orgs", "repos_url": "https://api.github.com/users/zacc/repos", "events_url": "https://api.github.com/users/zacc/events{/privacy}", "received_events_url": "https://api.github.com/users/zacc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-26T02:32:48Z", "updated_at": "2020-06-27T01:56:21Z", "closed_at": "2020-06-26T13:06:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Executing this query in Python\\:\r\n`Comment.select(Comment.submission_id, Comment.id, fn.Max(Comment.score)).group_by(Comment.submission_id)`\r\n\r\nThe `.sql()` output of the query is:\r\n`('SELECT \"t1\".\"submission_id\", \"t1\".\"id\", Max(\"t1\".\"score\") FROM \"comment\" AS \"t1\" GROUP BY \"t1\".\"submission_id\"', [])`\r\n\r\nRunning `print(vars(record))` on the output of the query shows:\r\n`{'__data__': {'submission_id': '7k57rl', 'id': 'drbr3hf'}, '_dirty': set(), '__rel__': {}, 'score\")': 37}`\r\n\r\nThe score field now is labelled `score\")`\r\n\r\nWorking around it with `getattr(record, 'score\\\")'` for the moment!\r\n\r\nThe output appears to be correct, though!\r\n\r\nThe SQL might not be optimum for the case but I thought the bug might be of interest anyway. \r\nThank you for the excellent ORM.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2210", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2210/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2210/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2210/events", "html_url": "https://github.com/coleifer/peewee/issues/2210", "id": 643203713, "node_id": "MDU6SXNzdWU2NDMyMDM3MTM=", "number": 2210, "title": "Use JSONField with database proxy?", "user": {"login": "LucasVerneyDGE", "id": 58298410, "node_id": "MDQ6VXNlcjU4Mjk4NDEw", "avatar_url": "https://avatars0.githubusercontent.com/u/58298410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LucasVerneyDGE", "html_url": "https://github.com/LucasVerneyDGE", "followers_url": "https://api.github.com/users/LucasVerneyDGE/followers", "following_url": "https://api.github.com/users/LucasVerneyDGE/following{/other_user}", "gists_url": "https://api.github.com/users/LucasVerneyDGE/gists{/gist_id}", "starred_url": "https://api.github.com/users/LucasVerneyDGE/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LucasVerneyDGE/subscriptions", "organizations_url": "https://api.github.com/users/LucasVerneyDGE/orgs", "repos_url": "https://api.github.com/users/LucasVerneyDGE/repos", "events_url": "https://api.github.com/users/LucasVerneyDGE/events{/privacy}", "received_events_url": "https://api.github.com/users/LucasVerneyDGE/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-22T16:20:46Z", "updated_at": "2020-06-23T07:52:49Z", "closed_at": "2020-06-22T18:00:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI see that Playhouse extensions have dedicated `JSONField` for each database implementation. However, I did not find an abstract `JSONField` which could be used in a database proxy scenario.\r\n\r\nFor instance, I am using something like:\r\n\r\n```python\r\nimport peewee\r\nfrom playhouse.db_url import connect\r\n\r\ndatabase_proxy = peewee.DatabaseProxy()\r\ndatabase_proxy.initialize(\r\n    connect(os.environ.get('DATABASE', 'sqlite:///data.db'))\r\n)\r\n\r\nclass BaseModel(Model):\r\n    class Meta:\r\n        database = database_proxy\r\n    \r\n    field = JSONField()  # <-- where JSONField is either the JSONField from sqlite_ext, postgres_ext or mysql_ext depending on the `connect` URI.\r\n```\r\n\r\nIs something like this achievable easily?\r\n\r\nThanks!\r\nBest,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2209", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2209/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2209/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2209/events", "html_url": "https://github.com/coleifer/peewee/issues/2209", "id": 642285170, "node_id": "MDU6SXNzdWU2NDIyODUxNzA=", "number": 2209, "title": "peewee.ProgrammingError: missing FROM-clause entry for table \"t1\"", "user": {"login": "jet10000", "id": 2258120, "node_id": "MDQ6VXNlcjIyNTgxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2258120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jet10000", "html_url": "https://github.com/jet10000", "followers_url": "https://api.github.com/users/jet10000/followers", "following_url": "https://api.github.com/users/jet10000/following{/other_user}", "gists_url": "https://api.github.com/users/jet10000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jet10000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jet10000/subscriptions", "organizations_url": "https://api.github.com/users/jet10000/orgs", "repos_url": "https://api.github.com/users/jet10000/repos", "events_url": "https://api.github.com/users/jet10000/events{/privacy}", "received_events_url": "https://api.github.com/users/jet10000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-20T01:46:12Z", "updated_at": "2020-06-22T14:07:53Z", "closed_at": "2020-06-22T14:07:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nquery3 = Bookchapter.select(\r\n    Bookchapter.id,\r\n    Bookchapter.chapter,\r\n)\r\n\r\nBooks.insert_from(query3, fields=[\r\n    Books.id,\r\n    Books.chapter\r\n]).on_conflict(\r\n    conflict_target=[Books.id],\r\n    update={Books.chapter: Bookchapter.chapter}\r\n).execute()\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2207", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2207/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2207/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2207/events", "html_url": "https://github.com/coleifer/peewee/issues/2207", "id": 641850068, "node_id": "MDU6SXNzdWU2NDE4NTAwNjg=", "number": 2207, "title": "AttributeError: module 'Person' has no attribute '_meta'", "user": {"login": "teamcloud-jh", "id": 66046114, "node_id": "MDQ6VXNlcjY2MDQ2MTE0", "avatar_url": "https://avatars1.githubusercontent.com/u/66046114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teamcloud-jh", "html_url": "https://github.com/teamcloud-jh", "followers_url": "https://api.github.com/users/teamcloud-jh/followers", "following_url": "https://api.github.com/users/teamcloud-jh/following{/other_user}", "gists_url": "https://api.github.com/users/teamcloud-jh/gists{/gist_id}", "starred_url": "https://api.github.com/users/teamcloud-jh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teamcloud-jh/subscriptions", "organizations_url": "https://api.github.com/users/teamcloud-jh/orgs", "repos_url": "https://api.github.com/users/teamcloud-jh/repos", "events_url": "https://api.github.com/users/teamcloud-jh/events{/privacy}", "received_events_url": "https://api.github.com/users/teamcloud-jh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-19T09:54:10Z", "updated_at": "2020-06-22T05:19:09Z", "closed_at": "2020-06-19T12:53:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unable to create a table containing foreign keys due to this error. \r\n\r\nCode:\r\n\r\n    import peewee\r\n    import Person\r\n\r\n    db = peewee.MySQLDatabase('database', user='user', passwd='')\r\n    class Activity(peewee.Model):\r\n    id = peewee.CharField(primary_key=True)\r\n    userId = peewee.ForeignKeyField(model=Person)\r\n\r\n    class Meta:\r\n        database = db\r\n        db_table = 'activities'\r\n\r\n    Activity.create_table()\r\n\r\nError:\r\n\r\n      Traceback (most recent call last):\r\n      File \".../Activity.py\", line 7, in <module>\r\n      class Activity(peewee.Model):\r\n      File \"...\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\peewee.py\", line 6128, in __new__\r\n      cls._meta.add_field(name, field)\r\n      File \"...\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\peewee.py\", line 5917, in add_field\r\n      field.bind(self.model, field_name, set_attribute)\r\n      File \"...\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\peewee.py\", line 5180, in bind self.rel_field = self.rel_model._meta.primary_key\r\n      AttributeError: module 'Person' has no attribute '_meta'\r\n\r\nOther tables without foreign key can be created. \r\n\r\nI've checked other sites for solutions but none fit my situation.\r\n\r\nVersions:\r\npeewee - 3.13.3\r\nPython - 3.8.3\r\nOS - Windows 10", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2206", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2206/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2206/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2206/events", "html_url": "https://github.com/coleifer/peewee/issues/2206", "id": 641489194, "node_id": "MDU6SXNzdWU2NDE0ODkxOTQ=", "number": 2206, "title": "Hadaoop (hdfs) extension?", "user": {"login": "wilberh", "id": 6799242, "node_id": "MDQ6VXNlcjY3OTkyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6799242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wilberh", "html_url": "https://github.com/wilberh", "followers_url": "https://api.github.com/users/wilberh/followers", "following_url": "https://api.github.com/users/wilberh/following{/other_user}", "gists_url": "https://api.github.com/users/wilberh/gists{/gist_id}", "starred_url": "https://api.github.com/users/wilberh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wilberh/subscriptions", "organizations_url": "https://api.github.com/users/wilberh/orgs", "repos_url": "https://api.github.com/users/wilberh/repos", "events_url": "https://api.github.com/users/wilberh/events{/privacy}", "received_events_url": "https://api.github.com/users/wilberh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-18T19:16:18Z", "updated_at": "2020-06-18T22:13:03Z", "closed_at": "2020-06-18T22:13:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any Hadoop (hdfs) extension available?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2205", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2205/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2205/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2205/events", "html_url": "https://github.com/coleifer/peewee/issues/2205", "id": 639440781, "node_id": "MDU6SXNzdWU2Mzk0NDA3ODE=", "number": 2205, "title": "LATERAL constant string doesn't have JOIN inside", "user": {"login": "lephuongbg", "id": 1001176, "node_id": "MDQ6VXNlcjEwMDExNzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1001176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lephuongbg", "html_url": "https://github.com/lephuongbg", "followers_url": "https://api.github.com/users/lephuongbg/followers", "following_url": "https://api.github.com/users/lephuongbg/following{/other_user}", "gists_url": "https://api.github.com/users/lephuongbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lephuongbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lephuongbg/subscriptions", "organizations_url": "https://api.github.com/users/lephuongbg/orgs", "repos_url": "https://api.github.com/users/lephuongbg/repos", "events_url": "https://api.github.com/users/lephuongbg/events{/privacy}", "received_events_url": "https://api.github.com/users/lephuongbg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-16T07:34:37Z", "updated_at": "2020-06-17T08:18:23Z", "closed_at": "2020-06-16T15:28:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "`JOIN.LATERAL` constant string currently only contains `'LATERAL'`, which causes syntax error with Postgresql. It should be either `'INNER JOIN LATERAL'` or simply `'JOIN LATERAL'`\r\n\r\n`JOIN.LEFT_LATERAL` is correct though (`'LEFT JOIN LATERAL'`).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2204", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2204/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2204/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2204/events", "html_url": "https://github.com/coleifer/peewee/issues/2204", "id": 639403185, "node_id": "MDU6SXNzdWU2Mzk0MDMxODU=", "number": 2204, "title": "Peewee/psychopg2 always in transaction mode", "user": {"login": "RickMeasham", "id": 79414, "node_id": "MDQ6VXNlcjc5NDE0", "avatar_url": "https://avatars2.githubusercontent.com/u/79414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RickMeasham", "html_url": "https://github.com/RickMeasham", "followers_url": "https://api.github.com/users/RickMeasham/followers", "following_url": "https://api.github.com/users/RickMeasham/following{/other_user}", "gists_url": "https://api.github.com/users/RickMeasham/gists{/gist_id}", "starred_url": "https://api.github.com/users/RickMeasham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RickMeasham/subscriptions", "organizations_url": "https://api.github.com/users/RickMeasham/orgs", "repos_url": "https://api.github.com/users/RickMeasham/repos", "events_url": "https://api.github.com/users/RickMeasham/events{/privacy}", "received_events_url": "https://api.github.com/users/RickMeasham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-16T06:22:38Z", "updated_at": "2020-06-16T13:27:09Z", "closed_at": "2020-06-16T13:27:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "When there's a database error, postgres leaves me in a failed transaction. This appears to be because psycopg2 [defaults to manual commits](https://www.psycopg.org/docs/connection.html#connection.autocommit). So I updated the connection to pass through `autocommit=True` but it appears I'm still stuck in failed transactions when there are errors:\r\n\r\nHere's my connection code:\r\n```\r\ndatabase = PostgresqlExtDatabase(\r\n    config.database('dbname'),\r\n    host=config.database('host'),\r\n    user=config.database('username'),\r\n    password=config.database('password'),\r\n    autocommit=True\r\n)\r\n```\r\nIs that the right way to connect with autocommit?\r\n\r\nHere's the traceback if it helps:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/var/task/handler/trial.py\", line 97, in handler\r\n    return trial_new(event)\r\n  File \"/var/task/handler/trial.py\", line 22, in trial_new\r\n    client = User.get(User.mobile == mobile)\r\n  File \"/var/task/peewee.py\", line 6384, in get\r\n    return sq.get()\r\n  File \"/var/task/peewee.py\", line 6807, in get\r\n    return clone.execute(database)[0]\r\n  File \"/var/task/peewee.py\", line 1886, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"/var/task/peewee.py\", line 1957, in execute\r\n    return self._execute(database)\r\n  File \"/var/task/peewee.py\", line 2129, in _execute\r\n    cursor = database.execute(self)\r\n  File \"/var/task/playhouse/postgres_ext.py\", line 490, in execute\r\n    cursor = self.execute_sql(sql, params, commit=commit)\r\n  File \"/var/task/peewee.py\", line 3106, in execute_sql\r\n    self.commit()\r\n  File \"/var/task/peewee.py\", line 2873, in __exit__\r\n    reraise(new_type, new_type(exc_value, *exc_args), traceback)\r\n  File \"/var/task/peewee.py\", line 183, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/var/task/peewee.py\", line 3099, in execute_sql\r\n    cursor.execute(sql, params or ())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2203", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2203/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2203/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2203/events", "html_url": "https://github.com/coleifer/peewee/issues/2203", "id": 638199563, "node_id": "MDU6SXNzdWU2MzgxOTk1NjM=", "number": 2203, "title": "How to scrape an img src url?", "user": {"login": "xdebbie", "id": 57162213, "node_id": "MDQ6VXNlcjU3MTYyMjEz", "avatar_url": "https://avatars2.githubusercontent.com/u/57162213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xdebbie", "html_url": "https://github.com/xdebbie", "followers_url": "https://api.github.com/users/xdebbie/followers", "following_url": "https://api.github.com/users/xdebbie/following{/other_user}", "gists_url": "https://api.github.com/users/xdebbie/gists{/gist_id}", "starred_url": "https://api.github.com/users/xdebbie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xdebbie/subscriptions", "organizations_url": "https://api.github.com/users/xdebbie/orgs", "repos_url": "https://api.github.com/users/xdebbie/repos", "events_url": "https://api.github.com/users/xdebbie/events{/privacy}", "received_events_url": "https://api.github.com/users/xdebbie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-13T17:25:50Z", "updated_at": "2020-06-13T17:32:20Z", "closed_at": "2020-06-13T17:32:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using peewee to scrape a webpage, and everything is working fine except when I try to get the url of an \"img src=\" tag. Does anyone know what is the correct syntax to get the url?\r\n\r\nMy code goes like this:\r\n``` \r\n    # record label\r\n    label = resp.html.find('.labels-list__item')\r\n    if label:\r\n        data['label'] = label[0].text\r\n\r\n    # genre\r\n    genre = resp.html.find('.genre-list__link')\r\n    if genre:\r\n        data['genre'] = genre[0].text\r\n\r\n    # artwork\r\n    artwork = resp.html.find('.single-album-tombstone__art img')\r\n    if artwork:\r\n        data['artwork'] = artwork[0].text\r\n\r\n```\r\n\r\nThe # record label and # genre tags work fine, but with the #artwork it returns an \"EMPTY\" tag on my database. This is the html:\r\n\r\n![website](https://i.imgur.com/vzorTL6.png)\r\n\r\nHow can I insert the attribute 'src' so it will return the actual url of the image? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2202", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2202/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2202/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2202/events", "html_url": "https://github.com/coleifer/peewee/issues/2202", "id": 637362997, "node_id": "MDU6SXNzdWU2MzczNjI5OTc=", "number": 2202, "title": "model to dict extra_attrs", "user": {"login": "JPilarr", "id": 45560120, "node_id": "MDQ6VXNlcjQ1NTYwMTIw", "avatar_url": "https://avatars0.githubusercontent.com/u/45560120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JPilarr", "html_url": "https://github.com/JPilarr", "followers_url": "https://api.github.com/users/JPilarr/followers", "following_url": "https://api.github.com/users/JPilarr/following{/other_user}", "gists_url": "https://api.github.com/users/JPilarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/JPilarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JPilarr/subscriptions", "organizations_url": "https://api.github.com/users/JPilarr/orgs", "repos_url": "https://api.github.com/users/JPilarr/repos", "events_url": "https://api.github.com/users/JPilarr/events{/privacy}", "received_events_url": "https://api.github.com/users/JPilarr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-11T22:39:15Z", "updated_at": "2020-06-15T00:28:46Z", "closed_at": "2020-06-15T00:28:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\ni have model like.\r\n```\r\nclass Printer(pw.Model, ch.Model):\r\n    # DB fields\r\n    id = pw.AutoField(primary_key=True)\r\n    name = pw.CharField()\r\n\r\n    # cache field stored in redis\r\n    state = ch.CharField(default=State.OFFLINE.name)\r\n```\r\ni have problem serialize redis part of model by model_to_dict. If i use exclude it work's but  if i use only and after use something like result['state'] = self.state. it doesn't work with error `\"TypeError: Object of type CharField is not JSON serializable\"`\r\n```\r\n\r\n        self.cache_get()\r\n        self.fix_state()\r\n\r\n        result = model_to_dict(self, only=[Printer.id, Printer.name,\r\n                                           Printer.location, Printer.state]\r\n                               )\r\n        # from json import load\r\n        result['state'] = self.state\r\n\r\n        if self.printer_type_id:\r\n            result['printer_type_id'] = self.printer_type.id\r\n\r\n        return result\r\n```\r\n\r\ncan you help me whats wrong? I dont' want use huge exclude. Is it way how to do it by extra_attrs parameter for model_to_dict.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2201", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2201/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2201/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2201/events", "html_url": "https://github.com/coleifer/peewee/issues/2201", "id": 636365759, "node_id": "MDU6SXNzdWU2MzYzNjU3NTk=", "number": 2201, "title": "Should AsIs() set converter attribute to False?", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-10T15:56:10Z", "updated_at": "2020-06-10T16:59:45Z", "closed_at": "2020-06-10T16:59:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the documentation of `AsIs`.\r\n\r\n> Represents a Value that is treated as-is, and passed directly back to the database driver. This may be useful if you are using database extensions that accept native Python data-types and you do not wish Peewee to impose any handling of the values.\r\n\r\nHowever, this is not true, as `peewee` impose handling of the value passed in `AsIs`on this line https://github.com/coleifer/peewee/blob/master/peewee.py#L622\r\n\r\nShould `AsIs` initialize a `Value` object as following?\r\n\r\n```python\r\ndef AsIs(value):\r\n    return Value(value, converter=False, unpack=False)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2200", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2200/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2200/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2200/events", "html_url": "https://github.com/coleifer/peewee/issues/2200", "id": 635272169, "node_id": "MDU6SXNzdWU2MzUyNzIxNjk=", "number": 2200, "title": "sub-expressions not wrapped by parentheses", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-09T09:33:53Z", "updated_at": "2020-06-09T14:07:45Z", "closed_at": "2020-06-09T14:07:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following query (simplified for opening issue):\r\n\r\n```python\r\nexpr = (Value(1) + Model.column)\r\nsquared = (expr * expr)\r\nModel.select(fn.sum(expr), fn.avg(squared)).objects()\r\n```\r\n\r\npeewee generates the SQL query below\r\n\r\n```sql\r\nSELECT sum(1 + \"t1\".\"column\"), avg(1 + \"t1\".\"column\" * 1 + \"t1\".\"column\") FROM \"model\" AS \"t1\"\r\n```\r\n\r\nNotably, the sub-expressions in `avg(1 + \"t1\".\"column\" * 1 + \"t1\".\"column\")` are not wrapped by parentheses as expected. That is\r\n\r\n```sql\r\nSELECT sum(1 + \"t1\".\"column\"), avg((1 + \"t1\".\"column\") * (1 + \"t1\".\"column\")) FROM \"model\" AS \"t1\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2199", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2199/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2199/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2199/events", "html_url": "https://github.com/coleifer/peewee/issues/2199", "id": 635062582, "node_id": "MDU6SXNzdWU2MzUwNjI1ODI=", "number": 2199, "title": "Database.bind_ctx preserves the binded database", "user": {"login": "cslanziano", "id": 36748119, "node_id": "MDQ6VXNlcjM2NzQ4MTE5", "avatar_url": "https://avatars3.githubusercontent.com/u/36748119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cslanziano", "html_url": "https://github.com/cslanziano", "followers_url": "https://api.github.com/users/cslanziano/followers", "following_url": "https://api.github.com/users/cslanziano/following{/other_user}", "gists_url": "https://api.github.com/users/cslanziano/gists{/gist_id}", "starred_url": "https://api.github.com/users/cslanziano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cslanziano/subscriptions", "organizations_url": "https://api.github.com/users/cslanziano/orgs", "repos_url": "https://api.github.com/users/cslanziano/repos", "events_url": "https://api.github.com/users/cslanziano/events{/privacy}", "received_events_url": "https://api.github.com/users/cslanziano/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-09T02:35:09Z", "updated_at": "2020-06-09T14:46:19Z", "closed_at": "2020-06-09T14:46:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to set the database at run-time. Then the Models do not have the meta class defined. That means `Model._meta.database` is `None`.  The first code below executes as I expected, after the `with` block the database parameter return to `None`. \r\n```python\r\nfrom peewee import SqliteDatabase, Model\r\n\r\nclass TableA(Model):\r\n    pass\r\nclass TableB(Model):\r\n    pass\r\n\r\ndb = SqliteDatabase(':memory:')\r\n\r\nprint('before', TableA._meta.database)\r\nwith db.bind_ctx([TableA, TableB]):\r\n    print('inside A', TableA._meta.database)\r\n    print('inside B', TableB._meta.database)\r\nprint('after', TableA._meta.database)\r\n```\r\n\r\nThe issue is when a third table has foreign keys to both tables. The `Model._meta.database` is not returned to `None` as I was expecting. \r\n\r\n```python\r\nfrom peewee import SqliteDatabase, ForeignKeyField, Model\r\n\r\nclass TableA(Model):\r\n    pass\r\n\r\nclass TableB(Model):\r\n    pass\r\n\r\nclass TableAB(Model):\r\n    field1 = ForeignKeyField(TableA)\r\n    field2 = ForeignKeyField(TableB)\r\n\r\ndb = SqliteDatabase(':memory:')\r\n\r\nprint('before', TableA._meta.database)\r\nwith db.bind_ctx([TableA, TableB]):\r\n    print('inside A', TableA._meta.database)\r\n    \r\nprint('after', TableA._meta.database)\r\n```\r\n\r\nThe `bind_backrefs` set to `False` solves the issue. But, is this a bug? or is the normal behavior?.  The version of peewee is `3.13.3`.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2198", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2198/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2198/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2198/events", "html_url": "https://github.com/coleifer/peewee/issues/2198", "id": 633598069, "node_id": "MDU6SXNzdWU2MzM1OTgwNjk=", "number": 2198, "title": "Postgresql materialized views not showing", "user": {"login": "albireox", "id": 568775, "node_id": "MDQ6VXNlcjU2ODc3NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/568775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albireox", "html_url": "https://github.com/albireox", "followers_url": "https://api.github.com/users/albireox/followers", "following_url": "https://api.github.com/users/albireox/following{/other_user}", "gists_url": "https://api.github.com/users/albireox/gists{/gist_id}", "starred_url": "https://api.github.com/users/albireox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albireox/subscriptions", "organizations_url": "https://api.github.com/users/albireox/orgs", "repos_url": "https://api.github.com/users/albireox/repos", "events_url": "https://api.github.com/users/albireox/events{/privacy}", "received_events_url": "https://api.github.com/users/albireox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-07T17:26:40Z", "updated_at": "2020-06-08T00:18:05Z", "closed_at": "2020-06-07T21:10:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems Postgresql materialized views are not seen as a table or a view in Peewee. I have a model of a materialized view that works fine otherwise but `Model.table_exists()` returns `False`. If I try to find it in `database.get_tables()` or `database.get_views()` it does not appears anywhere. Is there a way to check if a materialized view model actually exists?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2197", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2197/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2197/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2197/events", "html_url": "https://github.com/coleifer/peewee/issues/2197", "id": 632932114, "node_id": "MDU6SXNzdWU2MzI5MzIxMTQ=", "number": 2197, "title": "BinaryUUIDFields do not seem to work with Mysql/pymysql", "user": {"login": "stevenj", "id": 764829, "node_id": "MDQ6VXNlcjc2NDgyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/764829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenj", "html_url": "https://github.com/stevenj", "followers_url": "https://api.github.com/users/stevenj/followers", "following_url": "https://api.github.com/users/stevenj/following{/other_user}", "gists_url": "https://api.github.com/users/stevenj/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenj/subscriptions", "organizations_url": "https://api.github.com/users/stevenj/orgs", "repos_url": "https://api.github.com/users/stevenj/repos", "events_url": "https://api.github.com/users/stevenj/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-06-07T02:18:51Z", "updated_at": "2020-06-09T14:08:41Z", "closed_at": "2020-06-07T16:06:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using Mysql8 and pymysql.\r\n\r\nI have a field defined thus:\r\n\r\n```\r\nclass Adapter(BaseModel):\r\n    id = BinaryUUIDField(primary_key=True)\r\n\r\n    class Meta:\r\n        \"\"\"Metadata.\"\"\"\r\n        table_name = \"adapter\"\r\n```\r\n\r\nthe matching sql is:\r\n\r\n```\r\nCREATE TABLE `adapter` (\r\n  `id` VARBINARY(16) NOT NULL ,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=INNODB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ;\r\n```\r\n\r\nWhen trying to create records I get:\r\n```\r\n ... lib/python3.8/site-packages/pymysql/cursors.py:170: Warning: (1300, \"Invalid utf8mb4 character string: 'C65E72'\")\r\n    result = self._query(query)\r\n```\r\n\r\nThe `C65E72` is part of the UUID in Hex.\r\n\r\nThe record does not get created, so its fatal to the create, not just a warning.  The bigger issue is, when this happens the create returns with a new object indicating the create succeeded.  But there is actually no record in the database.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2196", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2196/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2196/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2196/events", "html_url": "https://github.com/coleifer/peewee/issues/2196", "id": 631530360, "node_id": "MDU6SXNzdWU2MzE1MzAzNjA=", "number": 2196, "title": "An empty query result if JOIN.CROSS is combined with JOIN.INNER. At the same time, raw() worked properly", "user": {"login": "mehwhatever0", "id": 43314216, "node_id": "MDQ6VXNlcjQzMzE0MjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/43314216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehwhatever0", "html_url": "https://github.com/mehwhatever0", "followers_url": "https://api.github.com/users/mehwhatever0/followers", "following_url": "https://api.github.com/users/mehwhatever0/following{/other_user}", "gists_url": "https://api.github.com/users/mehwhatever0/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehwhatever0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehwhatever0/subscriptions", "organizations_url": "https://api.github.com/users/mehwhatever0/orgs", "repos_url": "https://api.github.com/users/mehwhatever0/repos", "events_url": "https://api.github.com/users/mehwhatever0/events{/privacy}", "received_events_url": "https://api.github.com/users/mehwhatever0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-05T11:46:53Z", "updated_at": "2020-06-08T16:18:41Z", "closed_at": "2020-06-05T20:44:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport logging\r\nimport traceback\r\n\r\nfrom peewee import JOIN, CharField, ForeignKeyField, Model, SqliteDatabase\r\n\r\ndatabase = SqliteDatabase(\":memory:\")\r\n\r\n\r\nclass BaseModel(Model):\r\n    class Meta:\r\n        database = database\r\n\r\n\r\nclass FileGroup(BaseModel):\r\n    descr = CharField()\r\n\r\n\r\nclass FileBasename(BaseModel):\r\n    string = CharField()\r\n    type = CharField()\r\n\r\n\r\nclass BaseFile(BaseModel):\r\n    name_end_part = CharField()\r\n\r\n\r\nclass FileFolder(BaseModel):\r\n    group = ForeignKeyField(model=FileGroup, backref='folders')\r\n    name = CharField()\r\n    type = CharField()\r\n\r\n\r\nclass File(BaseModel):\r\n    group = ForeignKeyField(model=FileGroup, backref='files')\r\n    filename_info = ForeignKeyField(model=FileBasename, backref='files')\r\n    base_file = ForeignKeyField(model=BaseFile, backref='derived_files')\r\n\r\n    @property\r\n    def filename(self):\r\n        return (self.filename_info.string +\r\n                self.base_file.name_end_part)\r\n\r\n    def folder(self):\r\n        query = (\r\n            FileFolder.select()\r\n            .join(File, join_type=JOIN.CROSS)\r\n            .join_from(File, FileBasename)\r\n            .where(\r\n                self._pk_expr() &\r\n                (File.group == FileFolder.group) &\r\n                (FileBasename.type.cast('TEXT') == FileFolder.type.cast('TEXT'))\r\n            )\r\n        )\r\n        result = query.execute()\r\n        return result[0] if result else None\r\n\r\n    def folder_raw(self):\r\n        query = (\r\n            FileFolder.select()\r\n            .join(File, join_type=JOIN.CROSS)\r\n            .join_from(File, FileBasename)\r\n            .where(\r\n                self._pk_expr() &\r\n                (File.group == FileFolder.group) &\r\n                (FileBasename.type.cast('TEXT') == FileFolder.type.cast('TEXT'))\r\n            )\r\n        )\r\n        sql, params = query.sql()\r\n        result = FileFolder.raw(sql, *params).execute()\r\n        return result[0] if result else None\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    database.create_tables(\r\n        models=[FileGroup, FileBasename, BaseFile, File, FileFolder])\r\n    with database.atomic():\r\n        FileGroup.create(descr=\"first group\")\r\n        FileFolder.create(group=1, name=\"first folder\", type=\"first type\")\r\n        FileBasename.create(string=\"some_file_name\", type=\"first type\")\r\n        BaseFile.create(name_end_part=\".end\")\r\n        File.create(group=1, filename_info=1, base_file=1)\r\n\r\n    file = File.get_by_id(1)\r\n\r\n    logger = logging.getLogger('peewee')\r\n    logger.addHandler(logging.StreamHandler())\r\n    logger.setLevel(logging.DEBUG)\r\n\r\n    try:\r\n        print(\"This won't be printed:\", repr(file.folder()))\r\n    except Exception:\r\n        traceback.print_exc()\r\n\r\n    print(\"Let's try with raw():\", repr(file.folder_raw()))\r\n\r\n```\r\n\r\nRun result:\r\n```\r\n(.venv_3.8.3-64) C:\\Projects\\Python>python peewee_cross_join.py\r\n('SELECT \"t1\".\"id\", \"t1\".\"group_id\", \"t1\".\"name\", \"t1\".\"type\" FROM \"filefolder\" AS \"t1\" CROSS JOIN \"file\" AS \"t2\" INNER JOIN \"filebasename\" AS \"t3\" ON (\"t2\".\"filename_info_id\" = \"t3\".\"id\") WHERE (((\"t2\".\"id\" = ?) AND (\"t2\".\"group_id\" = \"t1\".\"group_id\")) AND (CAST(\"t3\".\"type\" AS TEXT) = CAST(\"t1\".\"type\" AS TEXT)))', [1])\r\nTraceback (most recent call last):\r\n  File \"peewee_cross_join.py\", line 90, in <module>\r\n    print(\"This won't be printed:\", repr(file.folder()))\r\n  File \"peewee_cross_join.py\", line 55, in folder\r\n    return result[0] if result else None\r\n  File \"C:\\Projects\\Python\\.venv_3.8.3-64\\lib\\site-packages\\peewee.py\", line 4232, in __len__\r\n    self.fill_cache()\r\n  File \"C:\\Projects\\Python\\.venv_3.8.3-64\\lib\\site-packages\\peewee.py\", line 4273, in fill_cache\r\n    iterator.next()\r\n  File \"C:\\Projects\\Python\\.venv_3.8.3-64\\lib\\site-packages\\peewee.py\", line 4329, in next\r\n    self.cursor_wrapper.iterate()\r\n  File \"C:\\Projects\\Python\\.venv_3.8.3-64\\lib\\site-packages\\peewee.py\", line 4248, in iterate\r\n    result = self.process_row(row)\r\n  File \"C:\\Projects\\Python\\.venv_3.8.3-64\\lib\\site-packages\\peewee.py\", line 7502, in process_row\r\n    instance = objects[src]\r\nKeyError: <Model: File>\r\n('SELECT \"t1\".\"id\", \"t1\".\"group_id\", \"t1\".\"name\", \"t1\".\"type\" FROM \"filefolder\" AS \"t1\" CROSS JOIN \"file\" AS \"t2\" INNER JOIN \"filebasename\" AS \"t3\" ON (\"t2\".\"filename_info_id\" = \"t3\".\"id\") WHERE (((\"t2\".\"id\" = ?) AND (\"t2\".\"group_id\" = \"t1\".\"group_id\")) AND (CAST(\"t3\".\"type\" AS TEXT) = CAST(\"t1\".\"type\" AS TEXT)))', [1])\r\nLet's try with raw(): <FileFolder: 1>\r\n\r\n(.venv_3.8.3-64) C:\\Projects\\Python>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2195", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2195/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2195/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2195/events", "html_url": "https://github.com/coleifer/peewee/issues/2195", "id": 631282269, "node_id": "MDU6SXNzdWU2MzEyODIyNjk=", "number": 2195, "title": "SUM subquery", "user": {"login": "Feijo", "id": 1585710, "node_id": "MDQ6VXNlcjE1ODU3MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1585710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Feijo", "html_url": "https://github.com/Feijo", "followers_url": "https://api.github.com/users/Feijo/followers", "following_url": "https://api.github.com/users/Feijo/following{/other_user}", "gists_url": "https://api.github.com/users/Feijo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Feijo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Feijo/subscriptions", "organizations_url": "https://api.github.com/users/Feijo/orgs", "repos_url": "https://api.github.com/users/Feijo/repos", "events_url": "https://api.github.com/users/Feijo/events{/privacy}", "received_events_url": "https://api.github.com/users/Feijo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-05T03:24:17Z", "updated_at": "2020-06-05T16:50:58Z", "closed_at": "2020-06-05T16:50:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am working on a formula-based application, which each function contructs a piece of the SQL query that will be executed. In other words, each function is a formula, which can call other formulas.\r\n\r\nFor example:\r\n\r\n```\r\nclass Formulas():\r\n    def formula_piece_1(self, i, z):\r\n        return (MyEntity.select(MyEntity.value_1).where((MyEntity.ClientId == i) | (MyEntity.date == z))).alias('subquery')\r\n\r\n    def formula_piece_2(self, i, j):\r\n        return MyEntity.select(fn.MAX(self.formula_piece_1(i, j).select(MyEntity.value_1)))\r\n\r\n    # I'd have thousands of functions like these, that could be combined in any order. \r\n\r\nf = Formulas()\r\nresult = f.formula_piece_2(12, date(2016, 1, 1))\r\n```\r\n\r\nThis is the query I was expecting:\r\n\r\n```\r\nSELECT MAX (subquery.value_1)\r\nFROM (\r\n  SELECT \"t1\".\"value_1\"\r\n           FROM \"my_entity\" AS \"t1\"\r\n           WHERE ((\"t1\".\"client_id\" = 12) OR (\"t1\".\"date\" = '2016-01-01'))\r\n) subquery\r\n```\r\n\r\nInstead I got this:\r\n```\r\nSELECT MAX\r\n       (\r\n         SELECT \"t1\".\"value_1\"\r\n         FROM \"my_entity\" AS \"t1\"\r\n         WHERE ((\"t1\".\"client_id\" = 12) OR\r\n               (\"t1\".\"date\" = '2016-01-01'))\r\n       )\r\nFROM \"my_entity\" AS \"t1\"\r\n```\r\n\r\nWhat would be the correct way of doing it? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2194", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2194/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2194/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2194/events", "html_url": "https://github.com/coleifer/peewee/issues/2194", "id": 628997829, "node_id": "MDU6SXNzdWU2Mjg5OTc4Mjk=", "number": 2194, "title": "Regarding aliased columns of relationships", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T08:14:50Z", "updated_at": "2020-06-02T16:19:20Z", "closed_at": "2020-06-02T16:19:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following models\r\n\r\n```python\r\nclass Author(BaseModel):\r\n    first_name = CharField()\r\n    surname = CharField()\r\n\r\n    class Meta:\r\n        table_name = 'author'\r\n\r\nclass Book(BaseModel):\r\n    author = ForeignKeyField(column_name='author_id', field='id', model=Author)\r\n    isbn = CharField(null=True, unique=True)\r\n    title = CharField()\r\n\r\n    class Meta:\r\n        table_name = 'book'\r\n\r\nclass Review(BaseModel):\r\n    book = ForeignKeyField(column_name='book_id', field='id', model=Book)\r\n    content = CharField(null=True)\r\n    rating = IntegerField(null=True)\r\n    reviewer_name = CharField(null=True)\r\n\r\n    class Meta:\r\n        table_name = 'review'\r\n```\r\n\r\nAnd I perform the following query\r\n\r\n```python\r\nname = Review.book.author.first_name.alias('name')\r\nres = Review.select(name).join(Book).join(Author).where(\r\n    (Review.rating >= 2) & (Author.first_name <= Value('Z')))\r\nfor r in res:\r\n    print(r.name)\r\n```\r\n\r\nthis gives me the following error\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 10, in <module>\r\n    print(r.name)\r\nAttributeError: 'Review' object has no attribute 'name'\r\n```\r\n\r\nTo make the code above to work, I have to print `r.book.author.name`.\r\nWhen I create compound aliased column (e.g., (`Review.book.author.first_name + Review.book.title).alias('name')`), the result set *does* contain the property `name` as expected.\r\n\r\nFor example, this query works\r\n\r\n```python\r\nname = (Review.book.author.first_name + Review.book.title).alias('name')\r\nres = Review.select(name).join(Book).join(Author).where(\r\n    (Review.rating >= 2) & (Author.first_name <= Value('Z')))\r\nfor r in res:\r\n    print(r.name)\r\n```\r\n\r\nI don't know if this is a feature or bug, but I find it counter-intuitive. I would expect peewee to store all aliased columns to the object of the result set, i.e., I would like to make an alias on the namespace of the final result set. Am I missing something here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2193", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2193/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2193/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2193/events", "html_url": "https://github.com/coleifer/peewee/issues/2193", "id": 628993043, "node_id": "MDU6SXNzdWU2Mjg5OTMwNDM=", "number": 2193, "title": "How to define computed fields?", "user": {"login": "bravegag", "id": 4385408, "node_id": "MDQ6VXNlcjQzODU0MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4385408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bravegag", "html_url": "https://github.com/bravegag", "followers_url": "https://api.github.com/users/bravegag/followers", "following_url": "https://api.github.com/users/bravegag/following{/other_user}", "gists_url": "https://api.github.com/users/bravegag/gists{/gist_id}", "starred_url": "https://api.github.com/users/bravegag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bravegag/subscriptions", "organizations_url": "https://api.github.com/users/bravegag/orgs", "repos_url": "https://api.github.com/users/bravegag/repos", "events_url": "https://api.github.com/users/bravegag/events{/privacy}", "received_events_url": "https://api.github.com/users/bravegag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-02T08:07:13Z", "updated_at": "2020-06-02T16:16:28Z", "closed_at": "2020-06-02T16:16:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can anyone please help with this?\r\nhttps://stackoverflow.com/questions/62147440/how-to-define-computed-fields-in-peewee", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2192", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2192/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2192/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2192/events", "html_url": "https://github.com/coleifer/peewee/issues/2192", "id": 628428843, "node_id": "MDU6SXNzdWU2Mjg0Mjg4NDM=", "number": 2192, "title": "According to the MySQL worklog, VALUES function will be deprecated soon", "user": {"login": "ShuFFel", "id": 21026699, "node_id": "MDQ6VXNlcjIxMDI2Njk5", "avatar_url": "https://avatars1.githubusercontent.com/u/21026699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShuFFel", "html_url": "https://github.com/ShuFFel", "followers_url": "https://api.github.com/users/ShuFFel/followers", "following_url": "https://api.github.com/users/ShuFFel/following{/other_user}", "gists_url": "https://api.github.com/users/ShuFFel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShuFFel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShuFFel/subscriptions", "organizations_url": "https://api.github.com/users/ShuFFel/orgs", "repos_url": "https://api.github.com/users/ShuFFel/repos", "events_url": "https://api.github.com/users/ShuFFel/events{/privacy}", "received_events_url": "https://api.github.com/users/ShuFFel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-01T13:14:00Z", "updated_at": "2020-06-01T14:22:14Z", "closed_at": "2020-06-01T14:22:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Found task in MySQL worklog: [https://dev.mysql.com/worklog/task/?id=13325]\r\nRight now it's just a warning about deprecation, but seems that this function will be removed in future", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2189", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2189/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2189/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2189/events", "html_url": "https://github.com/coleifer/peewee/issues/2189", "id": 624032131, "node_id": "MDU6SXNzdWU2MjQwMzIxMzE=", "number": 2189, "title": "any plan to support async/await", "user": {"login": "DieterLi", "id": 9697015, "node_id": "MDQ6VXNlcjk2OTcwMTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9697015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DieterLi", "html_url": "https://github.com/DieterLi", "followers_url": "https://api.github.com/users/DieterLi/followers", "following_url": "https://api.github.com/users/DieterLi/following{/other_user}", "gists_url": "https://api.github.com/users/DieterLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/DieterLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DieterLi/subscriptions", "organizations_url": "https://api.github.com/users/DieterLi/orgs", "repos_url": "https://api.github.com/users/DieterLi/repos", "events_url": "https://api.github.com/users/DieterLi/events{/privacy}", "received_events_url": "https://api.github.com/users/DieterLi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T04:10:46Z", "updated_at": "2020-05-26T00:57:44Z", "closed_at": "2020-05-26T00:57:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "as the title. Thanks, team", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2188", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2188/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2188/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2188/events", "html_url": "https://github.com/coleifer/peewee/issues/2188", "id": 623649933, "node_id": "MDU6SXNzdWU2MjM2NDk5MzM=", "number": 2188, "title": "Request: make table_function to be evaluated during first time Model being instantiated.", "user": {"login": "futursolo", "id": 11693215, "node_id": "MDQ6VXNlcjExNjkzMjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11693215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/futursolo", "html_url": "https://github.com/futursolo", "followers_url": "https://api.github.com/users/futursolo/followers", "following_url": "https://api.github.com/users/futursolo/following{/other_user}", "gists_url": "https://api.github.com/users/futursolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/futursolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/futursolo/subscriptions", "organizations_url": "https://api.github.com/users/futursolo/orgs", "repos_url": "https://api.github.com/users/futursolo/repos", "events_url": "https://api.github.com/users/futursolo/events{/privacy}", "received_events_url": "https://api.github.com/users/futursolo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-23T12:27:01Z", "updated_at": "2020-05-24T01:44:18Z", "closed_at": "2020-05-24T01:44:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Rationale\r\n---------\r\nCurrently, `table_function` is evaluated as soon as a `Model` class is defined.\r\n\r\nHowever, just like`peewee.DatabaseProxy()`, sometimes table prefix is also not known until the config file is parsed.\r\n\r\nCurrent Workaround\r\n--------------------\r\nI carefully checked imports to make sure no database models are loaded until config file is parsed. But it is kind of difficult to keep track of files as the code base grows. And this separates the program into two separate parts `config` and `main[web handlers, database_models]` which is less than ideal.\r\n\r\nPotential Solutions\r\n-------------------\r\n1. make `table_function` to be evaluated during first time `Model` being instantiated.\r\n\r\n2. let `Database` carry a `prefix` attribute and peewee read it every time it tries to generate a SQL statement.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2187", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2187/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2187/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2187/events", "html_url": "https://github.com/coleifer/peewee/issues/2187", "id": 622067095, "node_id": "MDU6SXNzdWU2MjIwNjcwOTU=", "number": 2187, "title": "A little typo makes using select with several models impossible in seldom cases", "user": {"login": "mehwhatever0", "id": 43314216, "node_id": "MDQ6VXNlcjQzMzE0MjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/43314216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehwhatever0", "html_url": "https://github.com/mehwhatever0", "followers_url": "https://api.github.com/users/mehwhatever0/followers", "following_url": "https://api.github.com/users/mehwhatever0/following{/other_user}", "gists_url": "https://api.github.com/users/mehwhatever0/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehwhatever0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehwhatever0/subscriptions", "organizations_url": "https://api.github.com/users/mehwhatever0/orgs", "repos_url": "https://api.github.com/users/mehwhatever0/repos", "events_url": "https://api.github.com/users/mehwhatever0/events{/privacy}", "received_events_url": "https://api.github.com/users/mehwhatever0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-20T20:34:26Z", "updated_at": "2020-05-22T11:50:01Z", "closed_at": "2020-05-20T21:43:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like `instance` must be `src` because `set_keys` is a `dict` that contains models.\r\nhttps://github.com/coleifer/peewee/blob/d6318dce0e5149a61511521a7dcb96600bec9b25/peewee.py#L7521\r\n\r\n\r\nIf we do `select` with several models (`B` and `A`) and `B` is unhashable, we will get an exception.\r\nThe following code is just an example. It will not throw an exception.\r\n\r\n```python\r\nimport traceback\r\n\r\nfrom peewee import CharField, ForeignKeyField, Model, PostgresqlDatabase\r\n\r\ndb_conn_params = {\r\n        \"dbname\": \"peewee_fail_test\",\r\n        \"user\": \"postgres\",\r\n        \"password\": \"***\",\r\n        \"host\": \"localhost\",\r\n        \"port\": \"5433\"\r\n}\r\n\r\ndatabase = PostgresqlDatabase(\r\n    db_conn_params.pop('dbname'), **db_conn_params)\r\n\r\n\r\nclass BaseModel(Model):\r\n    class Meta:\r\n        database = database\r\n\r\n\r\nclass A(BaseModel):\r\n    some_str = CharField()\r\n\r\n\r\nclass B(BaseModel):\r\n    another_str = CharField()\r\n    a = ForeignKeyField(model=A)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    database.create_tables(models=[A, B])\r\n    for i in range(10):\r\n        a = A.create(some_str='s{i}')\r\n        b = B.create(another_str=f'as1_{i}', another_str2=f'as2_{i}', a=a)\r\n    try:\r\n        for b in B.select(B, A).join(A):\r\n            pass\r\n    except:\r\n        traceback.print_exc()\r\n\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"c:\\Projects\\Python\\project\\peewee_models.py\", line 1314, in <module>\r\n        for b in B.select(B, A).join(A):\r\n  File \"c:\\Projects\\Python\\project\\.venv_3.8.2-64\\lib\\site-packages\\peewee.py\", line 4329, in next\r\n    self.cursor_wrapper.iterate()\r\n  File \"c:\\Projects\\Python\\project\\.venv_3.8.2-64\\lib\\site-packages\\peewee.py\", line 4248, in iterate\r\n    result = self.process_row(row)\r\n  File \"c:\\Projects\\Python\\project\\.venv_3.8.2-64\\lib\\site-packages\\peewee.py\", line 7516, in process_row\r\n    if instance not in set_keys and dest not in set_keys \\\r\nTypeError: unhashable type: 'B'\r\n```\r\nUnfortunately, I could not reproduce this on arbitry models because I couldn't find conditions that make model instance unhashable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2186", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2186/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2186/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2186/events", "html_url": "https://github.com/coleifer/peewee/issues/2186", "id": 621504289, "node_id": "MDU6SXNzdWU2MjE1MDQyODk=", "number": 2186, "title": "Postgres TimeFields with timezones", "user": {"login": "BryceBeagle", "id": 5437880, "node_id": "MDQ6VXNlcjU0Mzc4ODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5437880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BryceBeagle", "html_url": "https://github.com/BryceBeagle", "followers_url": "https://api.github.com/users/BryceBeagle/followers", "following_url": "https://api.github.com/users/BryceBeagle/following{/other_user}", "gists_url": "https://api.github.com/users/BryceBeagle/gists{/gist_id}", "starred_url": "https://api.github.com/users/BryceBeagle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BryceBeagle/subscriptions", "organizations_url": "https://api.github.com/users/BryceBeagle/orgs", "repos_url": "https://api.github.com/users/BryceBeagle/repos", "events_url": "https://api.github.com/users/BryceBeagle/events{/privacy}", "received_events_url": "https://api.github.com/users/BryceBeagle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-20T06:46:54Z", "updated_at": "2020-05-21T03:49:28Z", "closed_at": "2020-05-20T13:02:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "`DateTimeField` has a timezone-based subclass in `postgres_ext.DateTimeTZField`. Is there a reason why there's no analog for `TimeField` (i.e. `TimeTZField`)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2185", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2185/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2185/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2185/events", "html_url": "https://github.com/coleifer/peewee/issues/2185", "id": 621179741, "node_id": "MDU6SXNzdWU2MjExNzk3NDE=", "number": 2185, "title": "Can't use Model class as field value", "user": {"login": "mikemill", "id": 1652125, "node_id": "MDQ6VXNlcjE2NTIxMjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1652125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikemill", "html_url": "https://github.com/mikemill", "followers_url": "https://api.github.com/users/mikemill/followers", "following_url": "https://api.github.com/users/mikemill/following{/other_user}", "gists_url": "https://api.github.com/users/mikemill/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikemill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikemill/subscriptions", "organizations_url": "https://api.github.com/users/mikemill/orgs", "repos_url": "https://api.github.com/users/mikemill/repos", "events_url": "https://api.github.com/users/mikemill/events{/privacy}", "received_events_url": "https://api.github.com/users/mikemill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-19T18:04:54Z", "updated_at": "2020-05-19T21:32:35Z", "closed_at": "2020-05-19T20:54:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a custom field that stores the import path to a Python class.  The `db_value` takes the class object and coverts it to the import path string and the `python_value` takes the string and imports the object giving me back the class.  However, as of peewee 3.13.2 this no longer works and instead gives me `peewee.InternalError: (1054, \"Unknown column 't1' in 'field list'\")` when I try to save.\r\n\r\nField:\r\n```python\r\nclass PythonObjectField(CharField):\r\n    \"\"\"\r\n    A custom class for storing a Python object as a reference.\r\n    \"\"\"\r\n\r\n    def db_value(self, value):\r\n        if value is None:\r\n            return None\r\n        elif isinstance(value, str):\r\n            return value\r\n\r\n        return get_object_path(value)\r\n\r\n    def python_value(self, value):\r\n        if value is None:\r\n            return None\r\n\r\n        return import_object(value)\r\n```\r\n\r\nThe usage would be `Model.field = SomeOtherModel`\r\n\r\n[Full example script](https://github.com/coleifer/peewee/files/4652313/peewee_example.txt)\r\n\r\nWhen debugging this I found that this affects my `Model` derived classes but not a simple one that only extends `object`.  Additionally, I found that `db_value` is never called.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2184", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2184/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2184/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2184/events", "html_url": "https://github.com/coleifer/peewee/issues/2184", "id": 620658494, "node_id": "MDU6SXNzdWU2MjA2NTg0OTQ=", "number": 2184, "title": "can't adapt type 'BackrefAccessor'", "user": {"login": "aparcar", "id": 16000931, "node_id": "MDQ6VXNlcjE2MDAwOTMx", "avatar_url": "https://avatars1.githubusercontent.com/u/16000931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aparcar", "html_url": "https://github.com/aparcar", "followers_url": "https://api.github.com/users/aparcar/followers", "following_url": "https://api.github.com/users/aparcar/following{/other_user}", "gists_url": "https://api.github.com/users/aparcar/gists{/gist_id}", "starred_url": "https://api.github.com/users/aparcar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aparcar/subscriptions", "organizations_url": "https://api.github.com/users/aparcar/orgs", "repos_url": "https://api.github.com/users/aparcar/repos", "events_url": "https://api.github.com/users/aparcar/events{/privacy}", "received_events_url": "https://api.github.com/users/aparcar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-19T03:59:54Z", "updated_at": "2020-05-19T13:52:49Z", "closed_at": "2020-05-19T13:52:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying to use `fn.array_agg` on a backref foreign key. However when trying to loop over the returned, model, I get the following error message:\r\n\r\n```\r\nException has occurred: ProgrammingError\r\ncan't adapt type 'BackrefAccessor'\r\n```\r\n\r\nMy code looks something like that:\r\n\r\n```python\r\n    sources = target.sources.select(\r\n        Sources.name,\r\n        Sources.maintainer,\r\n        fn.array_agg(Sources.results).alias(\"results\"),\r\n    ).group_by(Sources.name, Sources.maintainer)\r\n```\r\n\r\nIs it possible to *convert* the BackrefAccessor first to a dict or tuple to get this working? Or is there are different approach?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2183", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2183/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2183/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2183/events", "html_url": "https://github.com/coleifer/peewee/issues/2183", "id": 620048418, "node_id": "MDU6SXNzdWU2MjAwNDg0MTg=", "number": 2183, "title": "Peewee generates an SQL query with syntax errors", "user": {"login": "theosotr", "id": 6434138, "node_id": "MDQ6VXNlcjY0MzQxMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6434138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theosotr", "html_url": "https://github.com/theosotr", "followers_url": "https://api.github.com/users/theosotr/followers", "following_url": "https://api.github.com/users/theosotr/following{/other_user}", "gists_url": "https://api.github.com/users/theosotr/gists{/gist_id}", "starred_url": "https://api.github.com/users/theosotr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theosotr/subscriptions", "organizations_url": "https://api.github.com/users/theosotr/orgs", "repos_url": "https://api.github.com/users/theosotr/repos", "events_url": "https://api.github.com/users/theosotr/events{/privacy}", "received_events_url": "https://api.github.com/users/theosotr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-18T09:20:09Z", "updated_at": "2020-05-18T13:30:55Z", "closed_at": "2020-05-18T13:30:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following query\r\n\r\n```python\r\nmul = ((Listing.sale_price * Listing.yearly_rent)).cast('float').alias('mul')\r\navg = fn.avg(mul).alias('avg')\r\nListing.select(avg, mul).group_by(mul).where(mul > 100)\r\n```\r\nPeewee generates an SQL query with syntax error on `sqlite3`.\r\n\r\n```\r\npeewee.OperationalError: near \"AS\": syntax error\r\n```\r\n\r\n```sql\r\nSELECT avg(CAST((\"t1\".\"sale_price\" * \"t1\".\"yearly_rent\") AS float) AS \"mul\") AS \"avg\", CAST((\"t1\".\"sale_price\" * \"t1\".\"sale_price\") AS float) AS \"mul\"\r\nFROM \"listing\" AS \"t1\"\r\nWHERE (\"mul\" > 100) GROUP BY \"mul\"\r\n```\r\n\r\nI would expect the following correct query. Peewee should ignore the alias of a compound column when used on an aggregate function\r\n\r\n```sql\r\nSELECT avg(CAST((\"t1\".\"sale_price\" * \"t1\".\"yearly_rent\") AS float)) AS \"avg\", CAST((\"t1\".\"sale_price\" * \"t1\".\"sale_price\") AS float) AS \"mul\"\r\nFROM \"listing\" AS \"t1\"\r\nWHERE (\"mul\" > 100) GROUP BY \"mul\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2182", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2182/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2182/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2182/events", "html_url": "https://github.com/coleifer/peewee/issues/2182", "id": 619702121, "node_id": "MDU6SXNzdWU2MTk3MDIxMjE=", "number": 2182, "title": "peewee.OperationalError: no such column: t2.subforum_id", "user": {"login": "LuaFan2", "id": 51294434, "node_id": "MDQ6VXNlcjUxMjk0NDM0", "avatar_url": "https://avatars1.githubusercontent.com/u/51294434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuaFan2", "html_url": "https://github.com/LuaFan2", "followers_url": "https://api.github.com/users/LuaFan2/followers", "following_url": "https://api.github.com/users/LuaFan2/following{/other_user}", "gists_url": "https://api.github.com/users/LuaFan2/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuaFan2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuaFan2/subscriptions", "organizations_url": "https://api.github.com/users/LuaFan2/orgs", "repos_url": "https://api.github.com/users/LuaFan2/repos", "events_url": "https://api.github.com/users/LuaFan2/events{/privacy}", "received_events_url": "https://api.github.com/users/LuaFan2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-17T13:21:54Z", "updated_at": "2020-05-17T17:06:09Z", "closed_at": "2020-05-17T17:06:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have such models. Everything looks good\r\n\r\n```\r\nclass Cats(db.Model):\r\n     name = CharField()\r\n\r\n class Forums(db.Model):\r\n     cat = ForeignKeyField(Cats)\r\n     name = CharField()\r\n \r\n class SubForums(db.Model):\r\n     forum = ForeignKeyField(Forums)\r\n     name = CharField()\r\n     description = CharField(default=\"\")\r\n \r\n     def messages(self):\r\n         print(\"Messages of \" + str(self.id))\r\n         return Messages.select().where(Messages.topic.subforum == self.id).count()\r\n     def topics(self):\r\n         print(\"Topics of \" + str(self.id))\r\n         return Topics.select().where(Topics.subforum == self.id).count()\r\n     #def last(self):\r\n         #last = Messages.select().where(Messages.topic.subforum == self.id).order_by(Messages.created.desc()).first()\r\n \r\n         #return [last.topic.title, last.author.name, last.created.strftime(\"%m.%d.%Y %H:%M:%S\")]\r\n \r\n class Topics(db.Model):\r\n     author = ForeignKeyField(User)\r\n     subforum = ForeignKeyField(SubForums)\r\n \r\n     title = CharField()\r\n     text = CharField()\r\n \r\n class Messages(db.Model):\r\n     topic = ForeignKeyField(Topics)\r\n     author = ForeignKeyField(User)\r\n \r\n     text = CharField()\r\n     created = DateTimeField(default=datetime.datetime.now)\r\n```\r\n\r\nBut when I call messages() function I got \r\n\r\n`peewee.OperationalError: no such column: t2.subforum_id`\r\n\r\nWhy?Is this my fault or peewee?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2181", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2181/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2181/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2181/events", "html_url": "https://github.com/coleifer/peewee/issues/2181", "id": 619472464, "node_id": "MDU6SXNzdWU2MTk0NzI0NjQ=", "number": 2181, "title": "flask_peewee.auth without password", "user": {"login": "LuaFan2", "id": 51294434, "node_id": "MDQ6VXNlcjUxMjk0NDM0", "avatar_url": "https://avatars1.githubusercontent.com/u/51294434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuaFan2", "html_url": "https://github.com/LuaFan2", "followers_url": "https://api.github.com/users/LuaFan2/followers", "following_url": "https://api.github.com/users/LuaFan2/following{/other_user}", "gists_url": "https://api.github.com/users/LuaFan2/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuaFan2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuaFan2/subscriptions", "organizations_url": "https://api.github.com/users/LuaFan2/orgs", "repos_url": "https://api.github.com/users/LuaFan2/repos", "events_url": "https://api.github.com/users/LuaFan2/events{/privacy}", "received_events_url": "https://api.github.com/users/LuaFan2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-16T13:17:23Z", "updated_at": "2020-05-17T13:25:06Z", "closed_at": "2020-05-17T13:25:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to make user auth without a password?I wanna to make possibility to login through Steam OpenID, but peewee-flask auth force me to make such column as password", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2180", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2180/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2180/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2180/events", "html_url": "https://github.com/coleifer/peewee/issues/2180", "id": 618941614, "node_id": "MDU6SXNzdWU2MTg5NDE2MTQ=", "number": 2180, "title": "Question. Migrations maker", "user": {"login": "mrkovalchuk", "id": 18255783, "node_id": "MDQ6VXNlcjE4MjU1Nzgz", "avatar_url": "https://avatars3.githubusercontent.com/u/18255783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrkovalchuk", "html_url": "https://github.com/mrkovalchuk", "followers_url": "https://api.github.com/users/mrkovalchuk/followers", "following_url": "https://api.github.com/users/mrkovalchuk/following{/other_user}", "gists_url": "https://api.github.com/users/mrkovalchuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrkovalchuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrkovalchuk/subscriptions", "organizations_url": "https://api.github.com/users/mrkovalchuk/orgs", "repos_url": "https://api.github.com/users/mrkovalchuk/repos", "events_url": "https://api.github.com/users/mrkovalchuk/events{/privacy}", "received_events_url": "https://api.github.com/users/mrkovalchuk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-15T12:46:07Z", "updated_at": "2020-05-15T13:31:50Z", "closed_at": "2020-05-15T13:31:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Peewee it's enough popular python ORM library. Have the migrations system. But he hasn't instrument for auto make migrations. Like in django, or Alimbic for SQLAlchemy.\r\n\r\nIs any work in this direction? https://pypi.org/project/peewee-migrations/ - like this (but more life full)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2179", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2179/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2179/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2179/events", "html_url": "https://github.com/coleifer/peewee/issues/2179", "id": 618497119, "node_id": "MDU6SXNzdWU2MTg0OTcxMTk=", "number": 2179, "title": "Database.session_start() locking error", "user": {"login": "hfaua", "id": 350335, "node_id": "MDQ6VXNlcjM1MDMzNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/350335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hfaua", "html_url": "https://github.com/hfaua", "followers_url": "https://api.github.com/users/hfaua/followers", "following_url": "https://api.github.com/users/hfaua/following{/other_user}", "gists_url": "https://api.github.com/users/hfaua/gists{/gist_id}", "starred_url": "https://api.github.com/users/hfaua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hfaua/subscriptions", "organizations_url": "https://api.github.com/users/hfaua/orgs", "repos_url": "https://api.github.com/users/hfaua/repos", "events_url": "https://api.github.com/users/hfaua/events{/privacy}", "received_events_url": "https://api.github.com/users/hfaua/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T19:55:55Z", "updated_at": "2020-05-15T01:53:10Z", "closed_at": "2020-05-15T01:53:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Problem:\r\nWhen `Database.session_start()` is called before opening the connection to the database it tries to acquire the lock recursively first time in the `Database.session_start()` and second time in `Database.begin()`.\r\n\r\n```\r\npeewee.py:3195\r\ndef session_start(self):\r\n    with self._lock:\r\n->      return self.transaction().__enter__()\r\n```\r\nWhen entering `self.transaction().__enter__()` the lock is already acquired. Then it goes to:\r\n```\r\npeewee.py:4148\r\ndef __enter__(self):\r\n    if self.db.transaction_depth() == 0:\r\n->      self._begin()\r\n    self.db.push_transaction(self)\r\n    return self\r\n```\r\n```\r\npeewee.py:4134\r\ndef _begin(self):\r\n    args, kwargs = self._begin_args\r\n->  self.db.begin(*args, **kwargs)\r\n```\r\n```\r\npeewee.py:3245\r\ndef begin(self):\r\n    if self.is_closed():\r\n->      self.connect()\r\n```\r\n```\r\npeewee.py:3023\r\ndef connect(self, reuse_if_open=False):\r\n->  with self._lock:\r\n        [...]\r\n```\r\nAnd reaches the point where the lock is acquired for the second time and deadlocks.\r\n\r\nSolutions:\r\n1. Use `threading.RLock` instead of `threading.Lock`. This fix the issue and still provide thread safety.\r\n2. Open the connection if not opened in `Database.session_start()` before acquiring the lock.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2178", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2178/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2178/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2178/events", "html_url": "https://github.com/coleifer/peewee/issues/2178", "id": 618445371, "node_id": "MDU6SXNzdWU2MTg0NDUzNzE=", "number": 2178, "title": "MariaDB 5 ", "user": {"login": "CaffeineLab", "id": 18175452, "node_id": "MDQ6VXNlcjE4MTc1NDUy", "avatar_url": "https://avatars1.githubusercontent.com/u/18175452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaffeineLab", "html_url": "https://github.com/CaffeineLab", "followers_url": "https://api.github.com/users/CaffeineLab/followers", "following_url": "https://api.github.com/users/CaffeineLab/following{/other_user}", "gists_url": "https://api.github.com/users/CaffeineLab/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaffeineLab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaffeineLab/subscriptions", "organizations_url": "https://api.github.com/users/CaffeineLab/orgs", "repos_url": "https://api.github.com/users/CaffeineLab/repos", "events_url": "https://api.github.com/users/CaffeineLab/events{/privacy}", "received_events_url": "https://api.github.com/users/CaffeineLab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T18:25:14Z", "updated_at": "2020-05-14T19:56:42Z", "closed_at": "2020-05-14T19:22:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I'm using MariaDB 5.?.? and every time I run I get a warning that it's unable to determine the MySQL version....  in the function it appears to only want to identify versions starting with a 1.  Not sure if this is an issue or if it's supposed to be a warning that you are using an old version of MariaDB so it's a bit unclear.  The function is def _extract_server_version(self, version) and the line in question is:\r\n\r\n    if 'maria' in version:\r\n        match_obj = re.search(r'(1\\d\\.\\d+\\.\\d+)', version)\r\n\r\nFor now, I've removed the 1 from the re and it no longer gives me the warning.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2177", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2177/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2177/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2177/events", "html_url": "https://github.com/coleifer/peewee/issues/2177", "id": 617510009, "node_id": "MDU6SXNzdWU2MTc1MTAwMDk=", "number": 2177, "title": "how to prevent inserting NULL values and raising exception instead", "user": {"login": "soufelhanafi", "id": 32456103, "node_id": "MDQ6VXNlcjMyNDU2MTAz", "avatar_url": "https://avatars3.githubusercontent.com/u/32456103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soufelhanafi", "html_url": "https://github.com/soufelhanafi", "followers_url": "https://api.github.com/users/soufelhanafi/followers", "following_url": "https://api.github.com/users/soufelhanafi/following{/other_user}", "gists_url": "https://api.github.com/users/soufelhanafi/gists{/gist_id}", "starred_url": "https://api.github.com/users/soufelhanafi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soufelhanafi/subscriptions", "organizations_url": "https://api.github.com/users/soufelhanafi/orgs", "repos_url": "https://api.github.com/users/soufelhanafi/repos", "events_url": "https://api.github.com/users/soufelhanafi/events{/privacy}", "received_events_url": "https://api.github.com/users/soufelhanafi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-13T14:44:43Z", "updated_at": "2020-05-13T15:40:28Z", "closed_at": "2020-05-13T15:40:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "After running this code, the data will be inserted into the database. when I check the database, I find a row added with values: int_field=0 and other=\"\" (empty string)\r\n\r\nMy question is how to throw exception in case of Null/empty insert.\r\n\r\n\r\n\r\nimport peewee as pw\r\nfrom datetime import datetime\r\n\r\ndb = pw.MySQLDatabase('tests', user = 'root', password = 'root', host = 'localhost', port = 3306)\r\n\r\n\r\nclass Model(pw.Model):\r\n    name = pw.CharField()\r\n    created_at = pw.DateTimeField(default = datetime.now())\r\n    other = pw.CharField(null = False)\r\n    int_field = pw.IntegerField(null = False)\r\n\r\n    class Meta:\r\n        database = db\r\n        db_table = 'nmodel'\r\n\r\nModel.create_table()\r\nModel.create(name = \"tests\")\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2176", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2176/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2176/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2176/events", "html_url": "https://github.com/coleifer/peewee/issues/2176", "id": 617472918, "node_id": "MDU6SXNzdWU2MTc0NzI5MTg=", "number": 2176, "title": "Insert data into database even the field are not allowing null values", "user": {"login": "soufelhanafi", "id": 32456103, "node_id": "MDQ6VXNlcjMyNDU2MTAz", "avatar_url": "https://avatars3.githubusercontent.com/u/32456103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soufelhanafi", "html_url": "https://github.com/soufelhanafi", "followers_url": "https://api.github.com/users/soufelhanafi/followers", "following_url": "https://api.github.com/users/soufelhanafi/following{/other_user}", "gists_url": "https://api.github.com/users/soufelhanafi/gists{/gist_id}", "starred_url": "https://api.github.com/users/soufelhanafi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soufelhanafi/subscriptions", "organizations_url": "https://api.github.com/users/soufelhanafi/orgs", "repos_url": "https://api.github.com/users/soufelhanafi/repos", "events_url": "https://api.github.com/users/soufelhanafi/events{/privacy}", "received_events_url": "https://api.github.com/users/soufelhanafi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-13T13:58:20Z", "updated_at": "2020-05-13T14:12:35Z", "closed_at": "2020-05-13T14:12:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an issue with inserting data using peewee Model.create method.\r\n\r\nafter running the code below, the data will be inserted into the database with default values empty string for the **other field** and 0 for the **int_field**.\r\n\r\nMy question is how can I invoque an exception without inserting data into database.\r\n\r\nimport peewee as pw\r\nfrom datetime import datetime\r\n\r\ndb = pw.MySQLDatabase('tests', user = 'root', password = 'root', host = 'localhost', port = 3306)\r\n\r\n\r\nclass Model(pw.Model):\r\n    name = pw.CharField()\r\n    created_at = pw.DateTimeField(default = datetime.now())\r\n    other = pw.CharField(null = False)\r\n    int_field = pw.IntegerField(null = False)\r\n\r\n    class Meta:\r\n        database = db\r\n        db_table = 'nmodel'\r\n\r\nMode.create_table()\r\nModel.create(name = \"tests\")\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2175", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2175/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2175/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2175/events", "html_url": "https://github.com/coleifer/peewee/issues/2175", "id": 617247073, "node_id": "MDU6SXNzdWU2MTcyNDcwNzM=", "number": 2175, "title": "psycopg2.ProgrammingError: invalid dsn: invalid connection option \"autoconnect\"", "user": {"login": "kmakwana", "id": 64768985, "node_id": "MDQ6VXNlcjY0NzY4OTg1", "avatar_url": "https://avatars2.githubusercontent.com/u/64768985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmakwana", "html_url": "https://github.com/kmakwana", "followers_url": "https://api.github.com/users/kmakwana/followers", "following_url": "https://api.github.com/users/kmakwana/following{/other_user}", "gists_url": "https://api.github.com/users/kmakwana/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmakwana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmakwana/subscriptions", "organizations_url": "https://api.github.com/users/kmakwana/orgs", "repos_url": "https://api.github.com/users/kmakwana/repos", "events_url": "https://api.github.com/users/kmakwana/events{/privacy}", "received_events_url": "https://api.github.com/users/kmakwana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-13T08:23:20Z", "updated_at": "2020-05-13T13:33:39Z", "closed_at": "2020-05-13T13:33:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "OS : Ubuntu 20.04\r\nPython version : 3.8.2\r\nPsycopg2 version : 2.8.5\r\nPeewee version : 3.7.0\r\n\r\nI am trying to do database connection but it gives me following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3/dist-packages/peewee.py\", line 2600, in connect\r\n    self._state.set_connection(self._connect())\r\n  File \"/usr/lib/python3/dist-packages/playhouse/pool.py\", line 155, in _connect\r\n    conn = super(PooledDatabase, self)._connect()\r\n  File \"/usr/lib/python3/dist-packages/playhouse/postgres_ext.py\", line 431, in _connect\r\n    conn = super(PostgresqlExtDatabase, self)._connect()\r\n  File \"/usr/lib/python3/dist-packages/peewee.py\", line 3227, in _connect\r\n    conn = psycopg2.connect(database=self.database, **self.connect_params)\r\n  File \"/usr/local/lib/python3.8/dist-packages/psycopg2/__init__.py\", line 126, in connect\r\n    dsn = _ext.make_dsn(dsn, **kwargs)\r\n  File \"/usr/local/lib/python3.8/dist-packages/psycopg2/extensions.py\", line 176, in make_dsn\r\n    parse_dsn(dsn)\r\npsycopg2.ProgrammingError: invalid dsn: invalid connection option \"autoconnect\"\r\n```\r\nBut if I remove `autoconnect=False` then there is no error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2174", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2174/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2174/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2174/events", "html_url": "https://github.com/coleifer/peewee/issues/2174", "id": 617012840, "node_id": "MDU6SXNzdWU2MTcwMTI4NDA=", "number": 2174, "title": "Reflection does not identify primary keys", "user": {"login": "albireox", "id": 568775, "node_id": "MDQ6VXNlcjU2ODc3NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/568775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albireox", "html_url": "https://github.com/albireox", "followers_url": "https://api.github.com/users/albireox/followers", "following_url": "https://api.github.com/users/albireox/following{/other_user}", "gists_url": "https://api.github.com/users/albireox/gists{/gist_id}", "starred_url": "https://api.github.com/users/albireox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albireox/subscriptions", "organizations_url": "https://api.github.com/users/albireox/orgs", "repos_url": "https://api.github.com/users/albireox/repos", "events_url": "https://api.github.com/users/albireox/events{/privacy}", "received_events_url": "https://api.github.com/users/albireox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-12T22:46:35Z", "updated_at": "2020-05-13T00:52:34Z", "closed_at": "2020-05-13T00:04:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that `generate_models` does not identify when a field is the primary key. Instead it creates a composite primary key with all the fields in the model.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2173", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2173/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2173/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2173/events", "html_url": "https://github.com/coleifer/peewee/issues/2173", "id": 616736744, "node_id": "MDU6SXNzdWU2MTY3MzY3NDQ=", "number": 2173, "title": "BitField variable name not accepting any name other than \"flags\"", "user": {"login": "nisanb", "id": 20663443, "node_id": "MDQ6VXNlcjIwNjYzNDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/20663443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nisanb", "html_url": "https://github.com/nisanb", "followers_url": "https://api.github.com/users/nisanb/followers", "following_url": "https://api.github.com/users/nisanb/following{/other_user}", "gists_url": "https://api.github.com/users/nisanb/gists{/gist_id}", "starred_url": "https://api.github.com/users/nisanb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nisanb/subscriptions", "organizations_url": "https://api.github.com/users/nisanb/orgs", "repos_url": "https://api.github.com/users/nisanb/repos", "events_url": "https://api.github.com/users/nisanb/events{/privacy}", "received_events_url": "https://api.github.com/users/nisanb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T15:11:30Z", "updated_at": "2020-05-12T15:25:07Z", "closed_at": "2020-05-12T15:25:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nGiven your example:\r\n```\r\nclass Post(Model):\r\n    content = TextField()\r\n    flags = BitField()\r\n\r\n    is_favorite = flags.flag(1)\r\n    is_sticky = flags.flag(2)\r\n    is_minimized = flags.flag(4)\r\n    is_deleted = flags.flag(8)\r\n\r\n```\r\n\r\nWhen changing \"flags\" variable to any other variable, the fields are effectively not being saved in the database.\r\n\r\nWhen querying to see the data, it always returns 0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2172", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2172/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2172/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2172/events", "html_url": "https://github.com/coleifer/peewee/issues/2172", "id": 615571386, "node_id": "MDU6SXNzdWU2MTU1NzEzODY=", "number": 2172, "title": "pwiz generates non-auto_increment primary key field as AutoField", "user": {"login": "zqch", "id": 40731613, "node_id": "MDQ6VXNlcjQwNzMxNjEz", "avatar_url": "https://avatars2.githubusercontent.com/u/40731613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zqch", "html_url": "https://github.com/zqch", "followers_url": "https://api.github.com/users/zqch/followers", "following_url": "https://api.github.com/users/zqch/following{/other_user}", "gists_url": "https://api.github.com/users/zqch/gists{/gist_id}", "starred_url": "https://api.github.com/users/zqch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zqch/subscriptions", "organizations_url": "https://api.github.com/users/zqch/orgs", "repos_url": "https://api.github.com/users/zqch/repos", "events_url": "https://api.github.com/users/zqch/events{/privacy}", "received_events_url": "https://api.github.com/users/zqch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-11T04:04:11Z", "updated_at": "2020-05-12T03:00:03Z", "closed_at": "2020-05-11T13:26:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use pwiz to generate model codes, and I got `AutoField` rather than `IntegerField(primaty_key=True)` when the primary key field is not auto_increment, this will cause different results.\r\nfor example:\r\n```py\r\n\"\"\"\r\ncreate table user_info (\r\n  user_id int unsigned not null,\r\n  name varchar(20) not null,\r\n  primary key (user_id)\r\n);\r\n\"\"\"\r\n\r\nclass UserInfo(BaseModel):\r\n  user_id = AutoField()\r\n  name = CharField()\r\n\r\ninfo = UserInfo.create(user_id=10, name='xxx')\r\nprint(info.user_id)  # 0\r\n\r\n# result is different while using IntegerField\r\n\r\nclass UserInfo(BaseModel):\r\n  user_id = IntegerField(primary_key=True)\r\n  name = CharField()\r\n\r\ninfo = UserInfo.create(user_id=10, name='xxx')\r\nprint(info.user_id)  # 10\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2171", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2171/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2171/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2171/events", "html_url": "https://github.com/coleifer/peewee/issues/2171", "id": 615203871, "node_id": "MDU6SXNzdWU2MTUyMDM4NzE=", "number": 2171, "title": "Unable to select/update model after migrating ForeignKeyField: RecursionError", "user": {"login": "arel", "id": 153497, "node_id": "MDQ6VXNlcjE1MzQ5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/153497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arel", "html_url": "https://github.com/arel", "followers_url": "https://api.github.com/users/arel/followers", "following_url": "https://api.github.com/users/arel/following{/other_user}", "gists_url": "https://api.github.com/users/arel/gists{/gist_id}", "starred_url": "https://api.github.com/users/arel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arel/subscriptions", "organizations_url": "https://api.github.com/users/arel/orgs", "repos_url": "https://api.github.com/users/arel/repos", "events_url": "https://api.github.com/users/arel/events{/privacy}", "received_events_url": "https://api.github.com/users/arel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-09T15:48:10Z", "updated_at": "2020-05-13T00:26:48Z", "closed_at": "2020-05-13T00:26:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a migration script that first adds a column and then initializes it. I am using MySQL. However, after adding the column, the model's `ForeignKeyField` is changed in a way that results in a recursion error by simply selecting or updating the new field:\r\n\r\n```\r\nRecursionError: maximum recursion depth exceeded\r\n```\r\n\r\nTo reproduce it, imagine we have the two tables below, and I want to add a `ForeignKeyField` column to the `Rice` table:\r\n\r\n```python\r\nfrom peewee import Model, ForeignKeyField, TextField\r\n\r\nclass Bean(Model):\r\n    name = TextField(default=\"Red\")\r\n    class Meta:\r\n        database = db\r\n\r\nclass Rice(Model):\r\n    name = TextField(default=\"Brown\")\r\n    bean = ForeignKeyField(Bean, null=True, backref='rices')  # <-- we want to add this field\r\n    class Meta:\r\n        database = db\r\n```\r\n\r\nNow, let's say I migrate the `Rice` table with something like this:\r\n\r\n```python\r\nmigrator = MySQLMigrator(db)\r\n\r\nmigrate(\r\n    migrator.add_column(\r\n        Rice._meta.table_name,\r\n        Rice.bean.column_name,\r\n        Rice.bean\r\n    ),\r\n)\r\n```\r\n\r\nAs a result of this line: https://github.com/coleifer/peewee/blob/7eb7498018b4265ce7e79c3e2b0b90a93d622d45/playhouse/migrate.py#L237 the value, `Rice.bean.name`, gets changed from `\"bean\"` to `\"bean_id\"`. This causes a `RecursionError` the next time we select that field.\r\n\r\n```python\r\nRice.select().first()  # FAIL\r\n\r\n~/.local/share/virtualenvs/acm-api-UVOmdwT4/lib/python3.7/site-packages/peewee.py in __set__(self, instance, value)\r\n   4380 \r\n   4381     def __set__(self, instance, value):\r\n-> 4382         setattr(instance, self.field.name, value)\r\n   4383 \r\n   4384 \r\n\r\nRecursionError: maximum recursion depth exceeded\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2170", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2170/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2170/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2170/events", "html_url": "https://github.com/coleifer/peewee/issues/2170", "id": 614470419, "node_id": "MDU6SXNzdWU2MTQ0NzA0MTk=", "number": 2170, "title": "TypeError: not enough arguments for format string", "user": {"login": "kelmore5", "id": 9361401, "node_id": "MDQ6VXNlcjkzNjE0MDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9361401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kelmore5", "html_url": "https://github.com/kelmore5", "followers_url": "https://api.github.com/users/kelmore5/followers", "following_url": "https://api.github.com/users/kelmore5/following{/other_user}", "gists_url": "https://api.github.com/users/kelmore5/gists{/gist_id}", "starred_url": "https://api.github.com/users/kelmore5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kelmore5/subscriptions", "organizations_url": "https://api.github.com/users/kelmore5/orgs", "repos_url": "https://api.github.com/users/kelmore5/repos", "events_url": "https://api.github.com/users/kelmore5/events{/privacy}", "received_events_url": "https://api.github.com/users/kelmore5/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-08T03:04:54Z", "updated_at": "2020-05-08T15:09:28Z", "closed_at": "2020-05-08T14:30:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe there's some unexpected behavior that happens when using the `Database.execute_sql` command with an SQL statement but no parameters. The above error occurs in the pymysql project, but it's actually a problem with peewee (in my opinion).\r\n\r\nWhen you run the following code:\r\n\r\n```\r\nsql = \"INSERT INTO some_table (column_a, column_b) VALUES ('hello_my_name_is_inigo', 'odd_%_percent')\r\ndatabase.execute_sql(sql) # or database.execute_sql(sql, params=None)\r\n```\r\n\r\nyou receive an error that looks like this:\r\n\r\n```\r\nTraceback (most recent call last):\r\n    ...\r\n    models.main_database.execute_sql(sql)\r\n  File \"/home/kyle/.local/lib/python3.7/site-packages/peewee.py\", line 3057, in execute_sql\r\n    cursor.execute(sql, params or ())\r\n  File \"/home/kyle/.local/lib/python3.7/site-packages/pymysql/cursors.py\", line 171, in execute\r\n    query = self.mogrify(query, args)\r\n  File \"/home/kyle/.local/lib/python3.7/site-packages/pymysql/cursors.py\", line 150, in mogrify\r\n    query = query % self._escape_args(args, conn)\r\nTypeError: not enough arguments for format string\r\n```\r\n\r\n* Quick note: Anyone reading this can fix the error by 'escaping' the % sign in your SQL statement, from '%' to '%%'\r\n\r\nTechnically, this happens because there's a percent sign in the SQL statement that needs to be escaped so the line `query = query % self._escape_args(args, conn)` in pymysql can run. However, this puts the burden on the user to figure that out.\r\n\r\nI think the real culprit is the params argument in `database.execute_sql` which doesn't seem to be passed correctly into `cursor.execute` at line 3057 in peewee.py. In other words, the line `cursor.execute(sql, params or ())` seems to be the problem. I think we should consider changing the line to this:\r\n\r\n`cursor.execute(sql, args=params or None)`\r\n\r\nwhich is more in line with pymysql's documentation, seen [here](https://pymysql.readthedocs.io/en/latest/modules/cursors.html#pymysql.cursors.Cursor.execute).\r\n\r\n\r\n\r\nTo give some more context, the line failing in pymysql (within `cursor.execute`) looks like this:\r\n\r\n```\r\n# \"pymysql/cursors.py\", lines 149-150\r\n\r\nif args is not None:\r\n    query = query % self._escape_args(args, conn)\r\n```\r\n\r\nSo passing in `params` as an empty tuple really just creates more trouble then it's worth. It should stay as `None`.\r\n\r\nIt would be different if I was passing in an SQL statement with the expectation that it was a string going to be formatted. Then the error `TypeError: not enough arguments for format string` would make sense, and I could debug it easily. However, I believe passing in only an SQL statement should just execute that SQL statement, without needing to think about formatting or `params` from `cursor.execute`.\r\n\r\nMaybe I'm missing something, but is there a reason why `params` is defaulted to an empty tuple in the first place?\r\n\r\nFinally, this issue isn't just prevalent [here](https://github.com/coleifer/peewee/issues/1394), but also [Django](https://code.djangoproject.com/ticket/20115), [SQLAlchemy](https://github.com/PyMySQL/PyMySQL/issues/367), and although correct behavior for the package, [pymysql](https://github.com/PyMySQL/PyMySQL/issues/562) itself. So I think it's definitely something that should be fixed as I'm sure more people are having trouble with it.\r\n\r\nIf anything, we should at least consider updating peewee's documentation for `execute_sql`, seen [here](http://docs.peewee-orm.com/en/latest/peewee/api.html?highlight=execute_sql#Database.execute_sql) to better explain how formatting works, like within pymysql's documentation [here](https://pymysql.readthedocs.io/en/latest/modules/cursors.html#pymysql.cursors.Cursor.execute). Then the error might make more sense after looking it up.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2169", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2169/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2169/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2169/events", "html_url": "https://github.com/coleifer/peewee/issues/2169", "id": 614269594, "node_id": "MDU6SXNzdWU2MTQyNjk1OTQ=", "number": 2169, "title": "Join fails on Python3.8", "user": {"login": "ayyazdaniaryan", "id": 1242841, "node_id": "MDQ6VXNlcjEyNDI4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1242841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayyazdaniaryan", "html_url": "https://github.com/ayyazdaniaryan", "followers_url": "https://api.github.com/users/ayyazdaniaryan/followers", "following_url": "https://api.github.com/users/ayyazdaniaryan/following{/other_user}", "gists_url": "https://api.github.com/users/ayyazdaniaryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayyazdaniaryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayyazdaniaryan/subscriptions", "organizations_url": "https://api.github.com/users/ayyazdaniaryan/orgs", "repos_url": "https://api.github.com/users/ayyazdaniaryan/repos", "events_url": "https://api.github.com/users/ayyazdaniaryan/events{/privacy}", "received_events_url": "https://api.github.com/users/ayyazdaniaryan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-07T18:49:53Z", "updated_at": "2020-05-07T19:03:33Z", "closed_at": "2020-05-07T19:02:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI've recently used `peewee` for a new project, shying away after many years of `SQLAlchemy`. Neat package, works well, is pythonic, and small learning curve. Kudos!\r\n\r\nI wanted to see anyone else though has noticed issues on the latest version of Python, 3.8, and peewee. I cannot seem to be able to do a `join` at all. Here's the error:\r\n\r\n```\r\nTypeError: 'NoneType' object is not callable\r\n```\r\n\r\nHere is how I produced this error:\r\n\r\n**Python**: 3.8.2\r\n**OS**: Mac OS X 10.14.6 \r\n**DB**: Postgres 9.6.17\r\n**Driver**: Psycopg2 2.8.5\r\n\r\nSimple model structures, and a dead-simple join:\r\n\r\n```python\r\nclass AAA:\r\n   a = CharField(unique=True, index=True)\r\n\r\nclass BBB:\r\n   a = CharField(null=False)\r\n   b = ForeignKeyField(AAA, null=False)\r\n\r\nclass CCC:\r\n   a = ForeignKeyField(AAA, null=False)\r\n   b = ForeignKeyField(BBB, null=False)\r\n\r\nentry_a = AAA.create(a=\"python\")\r\nentry_b = BBB.create(a=\"py\", b=entry_a)\r\nentry_c = CCC.create(a=entry_a, b=entry_b)\r\n\r\n...\r\n\r\nCCC.select(). # This works fine\r\nCCC.select().join(BBB). # Throws the error\r\nCCC.select().join(AAA) # Throws the error\r\n```\r\n\r\nMy workaround for this was to downgrade my venv to Python3.7, and it's happy days. But it appears that Py3.8 has breaking changes for this package. Let me know if I'm doing something wrong, or if it's a known issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2168", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2168/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2168/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2168/events", "html_url": "https://github.com/coleifer/peewee/issues/2168", "id": 613926515, "node_id": "MDU6SXNzdWU2MTM5MjY1MTU=", "number": 2168, "title": "update_model_from_dict - ignoring field types", "user": {"login": "OranShuster", "id": 1076161, "node_id": "MDQ6VXNlcjEwNzYxNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1076161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OranShuster", "html_url": "https://github.com/OranShuster", "followers_url": "https://api.github.com/users/OranShuster/followers", "following_url": "https://api.github.com/users/OranShuster/following{/other_user}", "gists_url": "https://api.github.com/users/OranShuster/gists{/gist_id}", "starred_url": "https://api.github.com/users/OranShuster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OranShuster/subscriptions", "organizations_url": "https://api.github.com/users/OranShuster/orgs", "repos_url": "https://api.github.com/users/OranShuster/repos", "events_url": "https://api.github.com/users/OranShuster/events{/privacy}", "received_events_url": "https://api.github.com/users/OranShuster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-07T09:56:05Z", "updated_at": "2020-05-09T14:44:57Z", "closed_at": "2020-05-09T14:44:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example model - \r\n```\r\nclass VmSize(Model):\r\n    class Meta:\r\n      ...\r\n\r\n    id = PrimaryKeyField()\r\n    cost= DecimalField()\r\n```\r\n\r\nif i would use playhous' `model_to_dict` ->`json.dumps` and then `dict_to_model` the value of the decimal field would containt a float (since thats how the json module reads that value when deserializing)\r\n\r\nshouldn't there be some check on the field to type and wrap the float value inside a `Decimal` instance?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2167", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2167/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2167/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2167/events", "html_url": "https://github.com/coleifer/peewee/issues/2167", "id": 612768536, "node_id": "MDU6SXNzdWU2MTI3Njg1MzY=", "number": 2167, "title": "DecimalField wizhout max_digits", "user": {"login": "daeeros", "id": 34482855, "node_id": "MDQ6VXNlcjM0NDgyODU1", "avatar_url": "https://avatars1.githubusercontent.com/u/34482855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daeeros", "html_url": "https://github.com/daeeros", "followers_url": "https://api.github.com/users/daeeros/followers", "following_url": "https://api.github.com/users/daeeros/following{/other_user}", "gists_url": "https://api.github.com/users/daeeros/gists{/gist_id}", "starred_url": "https://api.github.com/users/daeeros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daeeros/subscriptions", "organizations_url": "https://api.github.com/users/daeeros/orgs", "repos_url": "https://api.github.com/users/daeeros/repos", "events_url": "https://api.github.com/users/daeeros/events{/privacy}", "received_events_url": "https://api.github.com/users/daeeros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-05T17:23:07Z", "updated_at": "2020-05-05T19:38:33Z", "closed_at": "2020-05-05T19:38:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why can not you specify max_digits, etc. In ordinary PhpPgadmin, this can be done and the column is simply called numeric without max_digits, etc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2166", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2166/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2166/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2166/events", "html_url": "https://github.com/coleifer/peewee/issues/2166", "id": 610623706, "node_id": "MDU6SXNzdWU2MTA2MjM3MDY=", "number": 2166, "title": "Support for read slaves", "user": {"login": "aniljaiswal", "id": 43805107, "node_id": "MDQ6VXNlcjQzODA1MTA3", "avatar_url": "https://avatars2.githubusercontent.com/u/43805107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aniljaiswal", "html_url": "https://github.com/aniljaiswal", "followers_url": "https://api.github.com/users/aniljaiswal/followers", "following_url": "https://api.github.com/users/aniljaiswal/following{/other_user}", "gists_url": "https://api.github.com/users/aniljaiswal/gists{/gist_id}", "starred_url": "https://api.github.com/users/aniljaiswal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aniljaiswal/subscriptions", "organizations_url": "https://api.github.com/users/aniljaiswal/orgs", "repos_url": "https://api.github.com/users/aniljaiswal/repos", "events_url": "https://api.github.com/users/aniljaiswal/events{/privacy}", "received_events_url": "https://api.github.com/users/aniljaiswal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-01T08:00:48Z", "updated_at": "2020-05-01T14:48:52Z", "closed_at": "2020-05-01T14:47:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @coleifer,\r\n\r\nI'm using a master-slave(read-only) setup for our MySQL RDS. Currently, there's no straightforward way to specify the database connection on the basis of `SELECT` vs other query types. I stumbled upon your `read_slave` module from playhouse extension v2.10.0 release of peewee. \r\n\r\nIs it possible that I can use the same code to do it myself?\r\n\r\n```python\r\nfrom peewee import *\r\n\r\n\r\nclass ReadSlaveModel(Model):\r\n    @classmethod\r\n    def _get_read_database(cls):\r\n        if not getattr(cls._meta, 'read_slaves', None):\r\n            return cls._meta.database\r\n        current_idx = getattr(cls, '_read_slave_idx', -1)\r\n        cls._read_slave_idx = (current_idx + 1) % len(cls._meta.read_slaves)\r\n        return cls._meta.read_slaves[cls._read_slave_idx]\r\n\r\n    @classmethod\r\n    def select(cls, *args, **kwargs):\r\n        query = super(ReadSlaveModel, cls).select(*args, **kwargs)\r\n        query.database = cls._get_read_database()\r\n        return query\r\n\r\n    @classmethod\r\n    def raw(cls, *args, **kwargs):\r\n        query = super(ReadSlaveModel, cls).raw(*args, **kwargs)\r\n        if query._sql.lower().startswith('select'):\r\n            query.database = cls._get_read_database()\r\n        return query\r\n\r\n```\r\n\r\ntaken from `https://github.com/coleifer/peewee/blob/2.10.2/playhouse/read_slave.py`\r\n\r\nAlso, I'd like to know if there are any future plans to bring back the support for read slaves.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2165", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2165/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2165/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2165/events", "html_url": "https://github.com/coleifer/peewee/issues/2165", "id": 609748010, "node_id": "MDU6SXNzdWU2MDk3NDgwMTA=", "number": 2165, "title": "delete_instance is atomic? ", "user": {"login": "theruziev", "id": 32102033, "node_id": "MDQ6VXNlcjMyMTAyMDMz", "avatar_url": "https://avatars0.githubusercontent.com/u/32102033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theruziev", "html_url": "https://github.com/theruziev", "followers_url": "https://api.github.com/users/theruziev/followers", "following_url": "https://api.github.com/users/theruziev/following{/other_user}", "gists_url": "https://api.github.com/users/theruziev/gists{/gist_id}", "starred_url": "https://api.github.com/users/theruziev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theruziev/subscriptions", "organizations_url": "https://api.github.com/users/theruziev/orgs", "repos_url": "https://api.github.com/users/theruziev/repos", "events_url": "https://api.github.com/users/theruziev/events{/privacy}", "received_events_url": "https://api.github.com/users/theruziev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-30T09:18:43Z", "updated_at": "2020-04-30T15:22:05Z", "closed_at": "2020-04-30T13:05:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "is it ok to delete_instance it's not atomic by design or I misunderstood code and documentation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2164", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2164/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2164/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2164/events", "html_url": "https://github.com/coleifer/peewee/issues/2164", "id": 608921380, "node_id": "MDU6SXNzdWU2MDg5MjEzODA=", "number": 2164, "title": "[Question] How to remove element from ArrayField", "user": {"login": "daeeros", "id": 34482855, "node_id": "MDQ6VXNlcjM0NDgyODU1", "avatar_url": "https://avatars1.githubusercontent.com/u/34482855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daeeros", "html_url": "https://github.com/daeeros", "followers_url": "https://api.github.com/users/daeeros/followers", "following_url": "https://api.github.com/users/daeeros/following{/other_user}", "gists_url": "https://api.github.com/users/daeeros/gists{/gist_id}", "starred_url": "https://api.github.com/users/daeeros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daeeros/subscriptions", "organizations_url": "https://api.github.com/users/daeeros/orgs", "repos_url": "https://api.github.com/users/daeeros/repos", "events_url": "https://api.github.com/users/daeeros/events{/privacy}", "received_events_url": "https://api.github.com/users/daeeros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-29T09:49:06Z", "updated_at": "2020-04-29T13:11:42Z", "closed_at": "2020-04-29T13:10:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I apologize for the large number of questions. How can I remove an item from an ArrayField?\r\n\r\nHow to add, I seem to have found the function `from peewee import fn`\r\n`fn.array_append ()`\r\n\r\nBut I did not find how to remove", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2163", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2163/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2163/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2163/events", "html_url": "https://github.com/coleifer/peewee/issues/2163", "id": 608297839, "node_id": "MDU6SXNzdWU2MDgyOTc4Mzk=", "number": 2163, "title": "[Question] How to add new value for ArrayField table", "user": {"login": "daeeros", "id": 34482855, "node_id": "MDQ6VXNlcjM0NDgyODU1", "avatar_url": "https://avatars1.githubusercontent.com/u/34482855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daeeros", "html_url": "https://github.com/daeeros", "followers_url": "https://api.github.com/users/daeeros/followers", "following_url": "https://api.github.com/users/daeeros/following{/other_user}", "gists_url": "https://api.github.com/users/daeeros/gists{/gist_id}", "starred_url": "https://api.github.com/users/daeeros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daeeros/subscriptions", "organizations_url": "https://api.github.com/users/daeeros/orgs", "repos_url": "https://api.github.com/users/daeeros/repos", "events_url": "https://api.github.com/users/daeeros/events{/privacy}", "received_events_url": "https://api.github.com/users/daeeros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-28T12:59:43Z", "updated_at": "2020-04-28T14:43:06Z", "closed_at": "2020-04-28T14:43:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, how i can add new value for arrayfield column? I try thet\r\n\r\n`await db.execute(MarriagePlayer.update({MarriagePlayer.woman_childrens: MarriagePlayer.woman_childrens.append(1)}))`\r\n\r\nBut its not working(, i don't see  in documentation thet funcion", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2162", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2162/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2162/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2162/events", "html_url": "https://github.com/coleifer/peewee/issues/2162", "id": 607850591, "node_id": "MDU6SXNzdWU2MDc4NTA1OTE=", "number": 2162, "title": "Cannot use bulk_create to create multiple entities with a foreign key relationship", "user": {"login": "psahgal", "id": 2686895, "node_id": "MDQ6VXNlcjI2ODY4OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2686895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psahgal", "html_url": "https://github.com/psahgal", "followers_url": "https://api.github.com/users/psahgal/followers", "following_url": "https://api.github.com/users/psahgal/following{/other_user}", "gists_url": "https://api.github.com/users/psahgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/psahgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psahgal/subscriptions", "organizations_url": "https://api.github.com/users/psahgal/orgs", "repos_url": "https://api.github.com/users/psahgal/repos", "events_url": "https://api.github.com/users/psahgal/events{/privacy}", "received_events_url": "https://api.github.com/users/psahgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-27T21:01:16Z", "updated_at": "2020-04-28T14:01:04Z", "closed_at": "2020-04-27T21:27:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "While making some changes to our ETL pipeline, my team and I noticed that some new errors have appeared. It looks like there was an issue that was introduced in version. 3.13.3. It's also possible we were relying on some undocumented behavior. \r\n\r\nWhat we're trying to do is instantiate a set of entities before writing them to the database in a single transaction with the `bulk_create` method. One set of these entities has a foreign key to entities in the second set. On version 3.13.1, we don't see any errors thrown in our code. But on version 3.13.3, there is an error.\r\n\r\nHere's a snippet of the example I put together reproducing the issue. You can find the full example [here](https://github.com/psahgal/peeweeError).\r\n\r\n```\r\nclass Child(Model):\r\n    class Meta:\r\n        database = database\r\n    name = CharField()\r\n\r\n\r\nclass Parent(Model):\r\n    class Meta:\r\n        database = database\r\n    child = ForeignKeyField(Child)\r\n    name = CharField()\r\n\r\n\r\nentities = [Parent, Child]\r\ndatabase.drop_tables([Parent, Child])\r\ndatabase.create_tables([Parent, Child])\r\n\r\n\r\nchild1 = Child(name='Bob')\r\nchild2 = Child(name='Alice')\r\nparent1 = Parent(child=child1, name='Martin')\r\nparent2 = Parent(child=child2, name='Suzy')\r\n\r\nwith database.atomic():\r\n    Child.bulk_create([child1, child2])\r\n    Parent.bulk_create([parent1, parent2])\r\n```\r\n\r\nOn 3.13.1, this works without an error. On 3.13.3, I get the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 3099, in execute_sql\r\n    cursor.execute(sql, params or ())\r\npsycopg2.errors.NotNullViolation: null value in column \"child_id\" violates not-null constraint\r\nDETAIL:  Failing row contains (1, null, Martin).\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 33, in <module>\r\n    Parent.bulk_create([parent1, parent2])\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 6324, in bulk_create\r\n    res = cls.insert_many(accum, fields=fields).execute()\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 1886, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 1957, in execute\r\n    return self._execute(database)\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 2707, in _execute\r\n    return super(Insert, self)._execute(database)\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 2440, in _execute\r\n    cursor = self.execute_returning(database)\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 2447, in execute_returning\r\n    cursor = database.execute(self)\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 3112, in execute\r\n    return self.execute_sql(sql, params, commit=commit)\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 3106, in execute_sql\r\n    self.commit()\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 2873, in __exit__\r\n    reraise(new_type, new_type(exc_value, *exc_args), traceback)\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 183, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/Users/praneetsahgal/.pyenv/versions/3.8.2/lib/python3.8/site-packages/peewee.py\", line 3099, in execute_sql\r\n    cursor.execute(sql, params or ())\r\npeewee.IntegrityError: null value in column \"child_id\" violates not-null constraint\r\nDETAIL:  Failing row contains (1, null, Martin).\r\n```\r\n\r\nCould someone help investigate this error? Our project will be stuck on 3.13.1 until we can find a fix.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2161", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2161/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2161/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2161/events", "html_url": "https://github.com/coleifer/peewee/issues/2161", "id": 607513471, "node_id": "MDU6SXNzdWU2MDc1MTM0NzE=", "number": 2161, "title": "Invalid SQL is generated upon multiple joins of a table", "user": {"login": "intruder777", "id": 1699706, "node_id": "MDQ6VXNlcjE2OTk3MDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1699706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/intruder777", "html_url": "https://github.com/intruder777", "followers_url": "https://api.github.com/users/intruder777/followers", "following_url": "https://api.github.com/users/intruder777/following{/other_user}", "gists_url": "https://api.github.com/users/intruder777/gists{/gist_id}", "starred_url": "https://api.github.com/users/intruder777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/intruder777/subscriptions", "organizations_url": "https://api.github.com/users/intruder777/orgs", "repos_url": "https://api.github.com/users/intruder777/repos", "events_url": "https://api.github.com/users/intruder777/events{/privacy}", "received_events_url": "https://api.github.com/users/intruder777/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-27T12:36:20Z", "updated_at": "2020-04-27T14:16:49Z", "closed_at": "2020-04-27T14:16:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have strange problem with **peewee (v3.13.3)** when joining several tables in **Postgres (v12.2)**.\r\n\r\n- DB structure SQL: https://gist.github.com/intruder777/f36a00b2009a1c9a8236c9f641819556\r\n- DB models (generated by pwiz): https://gist.github.com/intruder777/18b800e3758df471d50fdf52cd05ef87\r\n- Python run file: https://gist.github.com/intruder777/74477ace9d7df218f5f43c7368cd8c2b\r\n- Output with traceback: https://gist.github.com/intruder777/8186e40dcf0a7cec4db4569bc1f63165\r\n\r\nIf I comment out line 27 in `run.py` - it works and generates valid SQL, but if I keep that line it generates invalid SQL.\r\nThose files mentioned above are also attached:\r\n[code_to_replicate_the_issue.zip](https://github.com/coleifer/peewee/files/4539593/code_to_replicate_the_issue.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2160", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2160/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2160/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2160/events", "html_url": "https://github.com/coleifer/peewee/issues/2160", "id": 606765244, "node_id": "MDU6SXNzdWU2MDY3NjUyNDQ=", "number": 2160, "title": "How to set comments for columns", "user": {"login": "pch18", "id": 19822708, "node_id": "MDQ6VXNlcjE5ODIyNzA4", "avatar_url": "https://avatars2.githubusercontent.com/u/19822708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pch18", "html_url": "https://github.com/pch18", "followers_url": "https://api.github.com/users/pch18/followers", "following_url": "https://api.github.com/users/pch18/following{/other_user}", "gists_url": "https://api.github.com/users/pch18/gists{/gist_id}", "starred_url": "https://api.github.com/users/pch18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pch18/subscriptions", "organizations_url": "https://api.github.com/users/pch18/orgs", "repos_url": "https://api.github.com/users/pch18/repos", "events_url": "https://api.github.com/users/pch18/events{/privacy}", "received_events_url": "https://api.github.com/users/pch18/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-25T13:02:01Z", "updated_at": "2020-04-25T14:13:14Z", "closed_at": "2020-04-25T13:25:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to set the help_text field, it didn't seem to work", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2159", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2159/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2159/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2159/events", "html_url": "https://github.com/coleifer/peewee/issues/2159", "id": 605646768, "node_id": "MDU6SXNzdWU2MDU2NDY3Njg=", "number": 2159, "title": "Selecting from a union causes peewee.InterfaceError", "user": {"login": "8BitMate", "id": 14078867, "node_id": "MDQ6VXNlcjE0MDc4ODY3", "avatar_url": "https://avatars3.githubusercontent.com/u/14078867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/8BitMate", "html_url": "https://github.com/8BitMate", "followers_url": "https://api.github.com/users/8BitMate/followers", "following_url": "https://api.github.com/users/8BitMate/following{/other_user}", "gists_url": "https://api.github.com/users/8BitMate/gists{/gist_id}", "starred_url": "https://api.github.com/users/8BitMate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/8BitMate/subscriptions", "organizations_url": "https://api.github.com/users/8BitMate/orgs", "repos_url": "https://api.github.com/users/8BitMate/repos", "events_url": "https://api.github.com/users/8BitMate/events{/privacy}", "received_events_url": "https://api.github.com/users/8BitMate/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-23T15:47:16Z", "updated_at": "2020-04-23T19:34:28Z", "closed_at": "2020-04-23T16:06:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Selecting from a union of two tables causes an InterfaceError.\r\nIf i write this query:\r\n```python\r\nq = (\r\n    Data\r\n    .select()\r\n    .union(\r\n        Data\r\n        .select()\r\n    ).select()\r\n)\r\n```\r\nand call `q.execute()` I get the following error:\r\n```\r\npeewee.InterfaceError: Query must be bound to a database in order to call \"execute\".\r\n```\r\nIf I call execute with a database like this: `q.execute(database)`, then it works fine.\r\nI suspect the issue has something to do with the `select()` method of the `ModelCompoundSelectQuery` class not using the database from the BaseModel, but I don't have enough knowledge about the library to fix it myself. The issue remains for other methods that create a `ModelCompoundSelectQuery` object, like `except_()` and `union_all()` as well.\r\n\r\nA fix for this issue would be greatly appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2158", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2158/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2158/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2158/events", "html_url": "https://github.com/coleifer/peewee/issues/2158", "id": 605438517, "node_id": "MDU6SXNzdWU2MDU0Mzg1MTc=", "number": 2158, "title": "How Update the required array in the database column (Integer)", "user": {"login": "daeeros", "id": 34482855, "node_id": "MDQ6VXNlcjM0NDgyODU1", "avatar_url": "https://avatars1.githubusercontent.com/u/34482855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daeeros", "html_url": "https://github.com/daeeros", "followers_url": "https://api.github.com/users/daeeros/followers", "following_url": "https://api.github.com/users/daeeros/following{/other_user}", "gists_url": "https://api.github.com/users/daeeros/gists{/gist_id}", "starred_url": "https://api.github.com/users/daeeros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daeeros/subscriptions", "organizations_url": "https://api.github.com/users/daeeros/orgs", "repos_url": "https://api.github.com/users/daeeros/repos", "events_url": "https://api.github.com/users/daeeros/events{/privacy}", "received_events_url": "https://api.github.com/users/daeeros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T10:57:27Z", "updated_at": "2020-04-24T00:37:15Z", "closed_at": "2020-04-24T00:28:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nawait db.execute(MarriagePlayer.update({\r\n            MarriagePlayer.statistics[0]: MarriagePlayer.statistics[0] + 1\r\n        }).where(\r\n            MarriagePlayer.chat_id == msg.receiver_id,\r\n            MarriagePlayer.user_id << [msg.sender_id, p.loved]))\r\n```\r\n\r\ni try to update 0 array in column but i get error\r\n\r\n> MarriagePlayer.statistics[0]: MarriagePlayer.statistics[0] + 1\r\n> \r\n> TypeError: unhashable type: 'ObjectSlice'\r\n\r\nhow i can update it witzhou error?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2157", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2157/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2157/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2157/events", "html_url": "https://github.com/coleifer/peewee/issues/2157", "id": 604949428, "node_id": "MDU6SXNzdWU2MDQ5NDk0Mjg=", "number": 2157, "title": "sqlite3 random rows by seed", "user": {"login": "nisanb", "id": 20663443, "node_id": "MDQ6VXNlcjIwNjYzNDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/20663443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nisanb", "html_url": "https://github.com/nisanb", "followers_url": "https://api.github.com/users/nisanb/followers", "following_url": "https://api.github.com/users/nisanb/following{/other_user}", "gists_url": "https://api.github.com/users/nisanb/gists{/gist_id}", "starred_url": "https://api.github.com/users/nisanb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nisanb/subscriptions", "organizations_url": "https://api.github.com/users/nisanb/orgs", "repos_url": "https://api.github.com/users/nisanb/repos", "events_url": "https://api.github.com/users/nisanb/events{/privacy}", "received_events_url": "https://api.github.com/users/nisanb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-22T17:53:35Z", "updated_at": "2020-04-22T18:20:27Z", "closed_at": "2020-04-22T18:20:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "With using Python, my tool has a randomized seed for each run.\r\nUpon placing the same seed, I would like to receive the same randomized results.\r\n\r\nI tried externally-implementing it, but that causes performance degradation for two reasons:\r\n1. I need to build a list out of ModelSelect objects\r\n2. I need to return all rows for a given where() query, even if I know I only need 5 randomized out of them.\r\n\r\nThe overhead is a pain and the performance penalty is high.\r\n\r\nCould peewee provide an interface as such?\r\nOr, is there a better way of doing it, other than what I tried?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2156", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2156/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2156/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2156/events", "html_url": "https://github.com/coleifer/peewee/issues/2156", "id": 604625096, "node_id": "MDU6SXNzdWU2MDQ2MjUwOTY=", "number": 2156, "title": "Slow attribute access in 2.10.2", "user": {"login": "ParthGandhi", "id": 819237, "node_id": "MDQ6VXNlcjgxOTIzNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/819237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ParthGandhi", "html_url": "https://github.com/ParthGandhi", "followers_url": "https://api.github.com/users/ParthGandhi/followers", "following_url": "https://api.github.com/users/ParthGandhi/following{/other_user}", "gists_url": "https://api.github.com/users/ParthGandhi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ParthGandhi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ParthGandhi/subscriptions", "organizations_url": "https://api.github.com/users/ParthGandhi/orgs", "repos_url": "https://api.github.com/users/ParthGandhi/repos", "events_url": "https://api.github.com/users/ParthGandhi/events{/privacy}", "received_events_url": "https://api.github.com/users/ParthGandhi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-22T10:01:26Z", "updated_at": "2020-04-22T13:00:09Z", "closed_at": "2020-04-22T13:00:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "We're on version `2.10.2`, with no plans to upgrade in the short term.\r\n\r\nFrom our profiling we've found that `__get__ peewee.py:915` takes a really long time in some of our hot code paths. Any idea why that `FieldDescriptor` is so slow? It seems to be doing just a `get` on a dict. I tried accessing the underlying `._data` directly and thats about 2x the speed.\r\n\r\nAny idea why its that slow? I know \"python is slow\" answers some of it, but not _all_ of it.\r\n\r\nAny suggestions to improve attribute access? Would upgrading to `3.x` help? I went through the changelog but found nothing specifically about this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2155", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2155/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2155/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2155/events", "html_url": "https://github.com/coleifer/peewee/issues/2155", "id": 603849342, "node_id": "MDU6SXNzdWU2MDM4NDkzNDI=", "number": 2155, "title": "Error with bulk_update and UUID primary keys", "user": {"login": "spl0k", "id": 2974943, "node_id": "MDQ6VXNlcjI5NzQ5NDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2974943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spl0k", "html_url": "https://github.com/spl0k", "followers_url": "https://api.github.com/users/spl0k/followers", "following_url": "https://api.github.com/users/spl0k/following{/other_user}", "gists_url": "https://api.github.com/users/spl0k/gists{/gist_id}", "starred_url": "https://api.github.com/users/spl0k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spl0k/subscriptions", "organizations_url": "https://api.github.com/users/spl0k/orgs", "repos_url": "https://api.github.com/users/spl0k/repos", "events_url": "https://api.github.com/users/spl0k/events{/privacy}", "received_events_url": "https://api.github.com/users/spl0k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-21T09:27:37Z", "updated_at": "2020-04-24T00:37:37Z", "closed_at": "2020-04-21T17:07:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nIt seems peewee doesn't serialize primary keys properly in `bulk_update()` when they're `UUIDField`s.\r\n\r\nThis code\r\n```python\r\nimport logging\r\nimport uuid\r\n\r\nfrom peewee import Model, UUIDField, IntegerField, SqliteDatabase\r\n\r\ndatabase = SqliteDatabase(\":memory:\")\r\n\r\n\r\nclass TestModel(Model):\r\n    pk = UUIDField(primary_key=True, default=uuid.uuid4)\r\n    i = IntegerField()\r\n\r\n    class Meta:\r\n        database = database\r\n\r\n\r\ndatabase.create_tables((TestModel,))\r\n\r\nm1, m2 = [TestModel.create(i=i) for i in (1, 2)]\r\nm1.i = 11\r\nm2.i = 22\r\n\r\nlogger = logging.getLogger(\"peewee\")\r\nlogger.addHandler(logging.StreamHandler())\r\nlogger.setLevel(logging.DEBUG)\r\n\r\nTestModel.bulk_update((m1, m2), (TestModel.i,))\r\n```\r\n\r\nproduces the following\r\n```\r\n('UPDATE \"testmodel\" SET \"i\" = CASE \"testmodel\".\"pk\" WHEN ? THEN ? WHEN ? THEN ? END WHERE (\"testmodel\".\"pk\" IN (?, ?))', [UUID('cec16f95-6bbe-4cb7-a4b7-89373dc7c895'), 11, UUID('046b94f6-154b-4f68-b9e8-4e447fd568a1'), 22, 'cec16f956bbe4cb7a4b789373dc7c895', '046b94f6154b4f68b9e84e447fd568a1'])\r\nTraceback (most recent call last):\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 3090, in execute_sql\r\n    cursor.execute(sql, params or ())\r\nsqlite3.InterfaceError: Error binding parameter 0 - probably unsupported type.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"bulk.py\", line 27, in <module>\r\n    TestModel.bulk_update((m1, m2), (TestModel.i,))\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 6345, in bulk_update\r\n    .where(cls._meta.primary_key.in_(id_list))\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 1877, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 1948, in execute\r\n    return self._execute(database)\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 2433, in _execute\r\n    cursor = database.execute(self)\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 3103, in execute\r\n    return self.execute_sql(sql, params, commit=commit)\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 3097, in execute_sql\r\n    self.commit()\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 2864, in __exit__\r\n    reraise(new_type, new_type(exc_value, *exc_args), traceback)\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 183, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"E:\\projects\\battledawn-server\\env\\lib\\site-packages\\peewee.py\", line 3090, in execute_sql\r\n    cursor.execute(sql, params or ())\r\npeewee.InterfaceError: Error binding parameter 0 - probably unsupported type.\r\n```\r\n\r\nUsing peewee version 3.13.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2154", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2154/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2154/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2154/events", "html_url": "https://github.com/coleifer/peewee/issues/2154", "id": 603565773, "node_id": "MDU6SXNzdWU2MDM1NjU3NzM=", "number": 2154, "title": "Error when issuing bulk_create with FK to non-primary-key rel field", "user": {"login": "coleifer", "id": 119974, "node_id": "MDQ6VXNlcjExOTk3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/119974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coleifer", "html_url": "https://github.com/coleifer", "followers_url": "https://api.github.com/users/coleifer/followers", "following_url": "https://api.github.com/users/coleifer/following{/other_user}", "gists_url": "https://api.github.com/users/coleifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/coleifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coleifer/subscriptions", "organizations_url": "https://api.github.com/users/coleifer/orgs", "repos_url": "https://api.github.com/users/coleifer/repos", "events_url": "https://api.github.com/users/coleifer/events{/privacy}", "received_events_url": "https://api.github.com/users/coleifer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-20T22:04:54Z", "updated_at": "2020-04-20T22:37:39Z", "closed_at": "2020-04-20T22:37:39Z", "author_association": "OWNER", "active_lock_reason": null, "body": "        u1 = BCUser.create(username='u1')\r\n        u2 = BCUser.create(username='u2')\r\n        BCTweet.bulk_create([\r\n            BCTweet(user='u1', content='t%s' % i)\r\n            for i in range(4)])\r\n\r\nThrows a foreign-key mismatch error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2153", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2153/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2153/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2153/events", "html_url": "https://github.com/coleifer/peewee/issues/2153", "id": 601223147, "node_id": "MDU6SXNzdWU2MDEyMjMxNDc=", "number": 2153, "title": "ManyToMany field no longer has .add, .remove, .clear methods", "user": {"login": "PylakeyTeam", "id": 56714344, "node_id": "MDQ6VXNlcjU2NzE0MzQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/56714344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PylakeyTeam", "html_url": "https://github.com/PylakeyTeam", "followers_url": "https://api.github.com/users/PylakeyTeam/followers", "following_url": "https://api.github.com/users/PylakeyTeam/following{/other_user}", "gists_url": "https://api.github.com/users/PylakeyTeam/gists{/gist_id}", "starred_url": "https://api.github.com/users/PylakeyTeam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PylakeyTeam/subscriptions", "organizations_url": "https://api.github.com/users/PylakeyTeam/orgs", "repos_url": "https://api.github.com/users/PylakeyTeam/repos", "events_url": "https://api.github.com/users/PylakeyTeam/events{/privacy}", "received_events_url": "https://api.github.com/users/PylakeyTeam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-16T16:21:36Z", "updated_at": "2020-04-17T08:41:08Z", "closed_at": "2020-04-16T16:47:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I suppose that http://docs.peewee-orm.com/en/latest/peewee/relationships.html#manytomanyfield is outdated. \r\n\r\nExample in docs doesn't work with latest peewee version because of AttributeError\r\n\r\nEDIT: This issue is related to ManyToManyField with through_model set. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2151", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2151/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2151/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2151/events", "html_url": "https://github.com/coleifer/peewee/issues/2151", "id": 597334022, "node_id": "MDU6SXNzdWU1OTczMzQwMjI=", "number": 2151, "title": "Pivot functionality?", "user": {"login": "bravegag", "id": 4385408, "node_id": "MDQ6VXNlcjQzODU0MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4385408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bravegag", "html_url": "https://github.com/bravegag", "followers_url": "https://api.github.com/users/bravegag/followers", "following_url": "https://api.github.com/users/bravegag/following{/other_user}", "gists_url": "https://api.github.com/users/bravegag/gists{/gist_id}", "starred_url": "https://api.github.com/users/bravegag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bravegag/subscriptions", "organizations_url": "https://api.github.com/users/bravegag/orgs", "repos_url": "https://api.github.com/users/bravegag/repos", "events_url": "https://api.github.com/users/bravegag/events{/privacy}", "received_events_url": "https://api.github.com/users/bravegag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-09T14:44:32Z", "updated_at": "2020-04-09T16:28:20Z", "closed_at": "2020-04-09T16:28:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think a really good feature in Peewee would be pivoting data which is supported up to some extent by different database vendors. Having pivot support would be a welcome abstraction to Peewee for a far common problem. Note that pandas implements pivoting see: https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf\r\n\r\nPivoting means to turn data stored in long (or narrow) format, into wide format i.e. closer to a dataframe. Why saving the data in long format in the first place? because it's more extensible requiring less potential schema updates to extend.\r\n\r\nSee a relevant SO question here:\r\n[How to pivot in SQLite or i.e. select in wide format a table stored in long format?](https://stackoverflow.com/questions/1237068/how-to-pivot-in-sqlite-or-i-e-select-in-wide-format-a-table-stored-in-long-form)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2150", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2150/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2150/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2150/events", "html_url": "https://github.com/coleifer/peewee/issues/2150", "id": 597206825, "node_id": "MDU6SXNzdWU1OTcyMDY4MjU=", "number": 2150, "title": "[q] Run-time model schema", "user": {"login": "ak04nv", "id": 73960, "node_id": "MDQ6VXNlcjczOTYw", "avatar_url": "https://avatars2.githubusercontent.com/u/73960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ak04nv", "html_url": "https://github.com/ak04nv", "followers_url": "https://api.github.com/users/ak04nv/followers", "following_url": "https://api.github.com/users/ak04nv/following{/other_user}", "gists_url": "https://api.github.com/users/ak04nv/gists{/gist_id}", "starred_url": "https://api.github.com/users/ak04nv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ak04nv/subscriptions", "organizations_url": "https://api.github.com/users/ak04nv/orgs", "repos_url": "https://api.github.com/users/ak04nv/repos", "events_url": "https://api.github.com/users/ak04nv/events{/privacy}", "received_events_url": "https://api.github.com/users/ak04nv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-09T11:10:51Z", "updated_at": "2020-04-09T13:29:26Z", "closed_at": "2020-04-09T13:28:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\r\nI'm trying to make a multitenancy application (flask+peewee). I think it possible to change the schema for all models in runtime but can't find the way.\r\nAny example, pls (without context managers)\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2149", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2149/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2149/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2149/events", "html_url": "https://github.com/coleifer/peewee/issues/2149", "id": 596803220, "node_id": "MDU6SXNzdWU1OTY4MDMyMjA=", "number": 2149, "title": "OperationalError: PRIMARY KEY missing on table ", "user": {"login": "bravegag", "id": 4385408, "node_id": "MDQ6VXNlcjQzODU0MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4385408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bravegag", "html_url": "https://github.com/bravegag", "followers_url": "https://api.github.com/users/bravegag/followers", "following_url": "https://api.github.com/users/bravegag/following{/other_user}", "gists_url": "https://api.github.com/users/bravegag/gists{/gist_id}", "starred_url": "https://api.github.com/users/bravegag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bravegag/subscriptions", "organizations_url": "https://api.github.com/users/bravegag/orgs", "repos_url": "https://api.github.com/users/bravegag/repos", "events_url": "https://api.github.com/users/bravegag/events{/privacy}", "received_events_url": "https://api.github.com/users/bravegag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-08T19:22:04Z", "updated_at": "2020-04-09T07:10:38Z", "closed_at": "2020-04-08T21:41:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get the OP title error while creating a table and setting the Meta to `primary_key = False` see the following MCVE sample:\r\n\r\n```\r\nfrom peewee import *\r\n\r\ndb = SqliteDatabase('market_data.db')\r\n\r\n\r\nclass BaseModel(Model):\r\n    \"\"\"\r\n    Base reusable model.\r\n    \"\"\"\r\n    class Meta:\r\n        database = db\r\n        legacy_table_names = False\r\n\r\n\r\nclass MarketInstrument(BaseModel):\r\n    \"\"\"\r\n    Market instrument model.\r\n    \"\"\"\r\n    id = BigAutoField(primary_key=True)\r\n    name = CharField(max_length=20, null=False, index=True)\r\n\r\n\r\nclass MarketInstrumentData(BaseModel):\r\n    \"\"\"\r\n    Market instrument time series data.\r\n    \"\"\"\r\n    market_instrument = ForeignKeyField(MarketInstrument, backref='data')\r\n    timestamp = DateTimeField(null=False, index=True)\r\n    value = DecimalField(null=False, decimal_places=10)\r\n\r\n    class Meta:\r\n        \"\"\"\r\n        Doesn't require a PK\r\n        \"\"\"\r\n        primary_key = False\r\n        without_rowid = True\r\n\r\n\r\ndb.create_tables([MarketInstrument, MarketInstrumentData])\r\n```\r\n\r\nThis leads to the error:\r\n```\r\npeewee.OperationalError: PRIMARY KEY missing on table market_instrument_data`\r\n```\r\n\r\nIndeed, I'm explicitly setting the `MarketInstrumentData` table not to have a PK since it isn't only unnecessary but also ER design-wise incorrect. It's a weak entity and it contains a FK to the strong entity `MarketInstrument` and that's all is needed. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2148", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2148/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2148/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2148/events", "html_url": "https://github.com/coleifer/peewee/issues/2148", "id": 596447421, "node_id": "MDU6SXNzdWU1OTY0NDc0MjE=", "number": 2148, "title": "[Question] Return FKs with an _id suffix.", "user": {"login": "dsmurrell", "id": 4035854, "node_id": "MDQ6VXNlcjQwMzU4NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4035854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsmurrell", "html_url": "https://github.com/dsmurrell", "followers_url": "https://api.github.com/users/dsmurrell/followers", "following_url": "https://api.github.com/users/dsmurrell/following{/other_user}", "gists_url": "https://api.github.com/users/dsmurrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsmurrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsmurrell/subscriptions", "organizations_url": "https://api.github.com/users/dsmurrell/orgs", "repos_url": "https://api.github.com/users/dsmurrell/repos", "events_url": "https://api.github.com/users/dsmurrell/events{/privacy}", "received_events_url": "https://api.github.com/users/dsmurrell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-08T09:43:46Z", "updated_at": "2020-04-08T14:34:30Z", "closed_at": "2020-04-08T13:13:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now, even though foreign keys are stored as field names in the database with an `_id` suffix, they are added to the dictionary outputted by `model_to_dict` without the `_id` suffix.\r\n\r\nI was wondering, if I want all foreign keys to appear in the output dict of `model_to_dict` with a `_id` suffix, do I have to write custom code to achieve this, or is there a setting in peewee that can achieve this.\r\n\r\nThe reason I ask is because on the client side, the expectation is to receive the `_id` suffix for FKs and right now I'm adding them on the client side for all keys that match some list of FKs. This is a brittle solution and I'd like to improve it.\r\n\r\nFor example, if a `post` has a `user` FK, then I'd like `model_to_dict(post)` to output something like:\r\n\r\n```\r\n{\r\n  id: \"xyz\",\r\n  title: \"This is a post\",\r\n  user_id: \"abc\"\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2147", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2147/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2147/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2147/events", "html_url": "https://github.com/coleifer/peewee/issues/2147", "id": 596278607, "node_id": "MDU6SXNzdWU1OTYyNzg2MDc=", "number": 2147, "title": "mysql default sql_mode setting", "user": {"login": "amchii", "id": 26922464, "node_id": "MDQ6VXNlcjI2OTIyNDY0", "avatar_url": "https://avatars3.githubusercontent.com/u/26922464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amchii", "html_url": "https://github.com/amchii", "followers_url": "https://api.github.com/users/amchii/followers", "following_url": "https://api.github.com/users/amchii/following{/other_user}", "gists_url": "https://api.github.com/users/amchii/gists{/gist_id}", "starred_url": "https://api.github.com/users/amchii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amchii/subscriptions", "organizations_url": "https://api.github.com/users/amchii/orgs", "repos_url": "https://api.github.com/users/amchii/repos", "events_url": "https://api.github.com/users/amchii/events{/privacy}", "received_events_url": "https://api.github.com/users/amchii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T03:15:12Z", "updated_at": "2020-04-08T13:12:14Z", "closed_at": "2020-04-08T13:12:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\npeewee set the sql_mode to `'PIPES_AS_CONCAT'` when use `MySQLDatabase`, but this will remove the default setted values `'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'`, \r\n\r\n```python\r\nimport peewee\r\n\r\npwdb=peewee.MySQLDatabase('test',user='root',password='password')\r\n\r\nr=pwdb.execute_sql('select @@session.sql_mode')\r\n\r\nr.fetchall()\r\nOut[4]: (('PIPES_AS_CONCAT',),)\r\n\r\nfrom MySQLdb import _mysql\r\n\r\ndb=_mysql.connect(user='root',passwd='password',db='test')\r\n\r\ndb.query('select @@session.sql_mode')\r\n\r\nres=db.use_result()\r\n\r\nres.fetch_row()\r\nOut[9]: ((b'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION',),)\r\n```\r\nand this lead to when insert a `not null` field without value(also no default), no error throw, incorrect insert(for normal) see https://github.com/coleifer/peewee/issues/2031\r\n```python\r\nfrom peewee import *\r\n\r\n\r\ndb = MySQLDatabase(DB_NAME, user=DB_USER, password=DB_PASSWORD)\r\n\r\nclass M(Model):\r\n    value = IntegerField(default=None, null=False)\r\n    class Meta:\r\n        database = db\r\n\r\ndb.create_tables([M])\r\n\r\nm = M.create()\r\nm_db = M[M.id]\r\n\r\nprint(m_db.value)\r\n\r\n# output:\r\n# /home/bukinpk/.local/lib/python3.7/site-packages/pymysql/cursors.py:170: Warning: (1364, \"Field 'value' doesn't have a default value\")\r\n#   result = self._query(query)\r\n# 0\r\n```\r\n\r\ni think the sql_mode setting should append `'PIPES_AS_CONCAT'` to the default setting instead of replace\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2146", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2146/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2146/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2146/events", "html_url": "https://github.com/coleifer/peewee/issues/2146", "id": 595227179, "node_id": "MDU6SXNzdWU1OTUyMjcxNzk=", "number": 2146, "title": "no function fts_bm25", "user": {"login": "Dawoodkhorsandi", "id": 23568714, "node_id": "MDQ6VXNlcjIzNTY4NzE0", "avatar_url": "https://avatars2.githubusercontent.com/u/23568714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dawoodkhorsandi", "html_url": "https://github.com/Dawoodkhorsandi", "followers_url": "https://api.github.com/users/Dawoodkhorsandi/followers", "following_url": "https://api.github.com/users/Dawoodkhorsandi/following{/other_user}", "gists_url": "https://api.github.com/users/Dawoodkhorsandi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dawoodkhorsandi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dawoodkhorsandi/subscriptions", "organizations_url": "https://api.github.com/users/Dawoodkhorsandi/orgs", "repos_url": "https://api.github.com/users/Dawoodkhorsandi/repos", "events_url": "https://api.github.com/users/Dawoodkhorsandi/events{/privacy}", "received_events_url": "https://api.github.com/users/Dawoodkhorsandi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T15:49:04Z", "updated_at": "2020-04-06T15:52:11Z", "closed_at": "2020-04-06T15:52:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI tried to use sqlite3 full-text search with peewee when I run this code \r\n```Python\r\nPoets.select().\r\n            join(PoetsIndex, on=(Poets.id == PoetsIndex.rowid)).\r\n            where(PoetsIndex.match(phrase))\r\n            order_by(PoetsIndex.bm25())\r\n```\r\nit's throws error:\r\n\r\n    cursor.execute(sql, params or ())\r\n    peewee.OperationalError: no such function: fts_bm25\r\n\r\nthe match function works well, I tried raw SQL too, and it was good, so probably my version contains FTS3 and FTS4, why that error occurs?\r\n\r\nThank you for peewee\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2145", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2145/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2145/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2145/events", "html_url": "https://github.com/coleifer/peewee/issues/2145", "id": 595174762, "node_id": "MDU6SXNzdWU1OTUxNzQ3NjI=", "number": 2145, "title": "foreign key exist ", "user": {"login": "JPilarr", "id": 45560120, "node_id": "MDQ6VXNlcjQ1NTYwMTIw", "avatar_url": "https://avatars0.githubusercontent.com/u/45560120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JPilarr", "html_url": "https://github.com/JPilarr", "followers_url": "https://api.github.com/users/JPilarr/followers", "following_url": "https://api.github.com/users/JPilarr/following{/other_user}", "gists_url": "https://api.github.com/users/JPilarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/JPilarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JPilarr/subscriptions", "organizations_url": "https://api.github.com/users/JPilarr/orgs", "repos_url": "https://api.github.com/users/JPilarr/repos", "events_url": "https://api.github.com/users/JPilarr/events{/privacy}", "received_events_url": "https://api.github.com/users/JPilarr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T14:41:47Z", "updated_at": "2020-04-06T14:52:36Z", "closed_at": "2020-04-06T14:52:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi, \r\nwould like check if foreign key exist do something.\r\n```\r\n  if self.printer_type:\r\n        result['type_id'] = self.printer_type.id\r\n        result['type_name'] = self.printer_type.name\r\n```\r\nlike this. I think the example doesn't work", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2144", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2144/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2144/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2144/events", "html_url": "https://github.com/coleifer/peewee/issues/2144", "id": 595052964, "node_id": "MDU6SXNzdWU1OTUwNTI5NjQ=", "number": 2144, "title": "Through model with not AutoField primary key (e.g., UUIDField) with the default value problem", "user": {"login": "Ignisor", "id": 22328453, "node_id": "MDQ6VXNlcjIyMzI4NDUz", "avatar_url": "https://avatars2.githubusercontent.com/u/22328453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ignisor", "html_url": "https://github.com/Ignisor", "followers_url": "https://api.github.com/users/Ignisor/followers", "following_url": "https://api.github.com/users/Ignisor/following{/other_user}", "gists_url": "https://api.github.com/users/Ignisor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ignisor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ignisor/subscriptions", "organizations_url": "https://api.github.com/users/Ignisor/orgs", "repos_url": "https://api.github.com/users/Ignisor/repos", "events_url": "https://api.github.com/users/Ignisor/events{/privacy}", "received_events_url": "https://api.github.com/users/Ignisor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-06T11:57:11Z", "updated_at": "2020-04-07T09:01:07Z", "closed_at": "2020-04-06T14:09:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\n## Problem description\r\n\r\nFor example, I have a schema like that:\r\n```python\r\nclass _BaseModel(pw.Model):\r\n    id = pw.UUIDField(primary_key=True, default=uuid.uuid4)\r\n\r\n    class Meta:\r\n        database = DB\r\n\r\n\r\nclass Cucumber(_BaseModel):\r\n    size = pw.CharField()\r\n\r\n\r\nCucumbersThroughDeferred = pw.DeferredThroughModel()\r\n\r\n\r\nclass Human(_BaseModel):\r\n    name = pw.CharField()\r\n    cucumbers = pw.ManyToManyField(Cucumber, backref='humans', through_model=CucumbersThroughDeferred)\r\n\r\n\r\nclass CucumberHuman(_BaseModel):\r\n    cucumber = pw.ForeignKeyField(Cucumber)\r\n    human = pw.ForeignKeyField(Human)\r\n    \r\n\r\nCucumbersThroughDeferred.set_model(CucumberHuman)\r\n```\r\n\r\nAnd when I add model to M2M field like that, it works okay:\r\n\r\n```python\r\ncucumber = Cucumber.create(\r\n    size='big',\r\n)\r\n\r\nhuman = Human.create(name='coleifer')\r\n\r\nhuman.cucumbers.add(cucumber)\r\n```\r\n\r\nBut if I try to add it using the query:\r\n\r\n```python\r\nhuman = Human.create(name='Ignisor')\r\n\r\nhuman.cucumbers.add(Cucumber.select())\r\n```\r\n\r\nI will get an exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 3057, in execute_sql\r\n    cursor.execute(sql, params or ())\r\npsycopg2.errors.NotNullViolation: null value in column \"id\" violates not-null constraint\r\nDETAIL:  Failing row contains (null, d3a22843-58ff-4d32-9c90-352a53744bdd, 27888182-3305-44ff-b175-919ecace48fb).\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  line 59, in <module>\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 7167, in add\r\n    accessor.through_model.insert_from(\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 1845, in inner\r\n    return method(self, database, *args, **kwargs)\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 1916, in execute\r\n    return self._execute(database)\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 2665, in _execute\r\n    return super(Insert, self)._execute(database)\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 2398, in _execute\r\n    cursor = self.execute_returning(database)\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 2405, in execute_returning\r\n    cursor = database.execute(self)\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 3070, in execute\r\n    return self.execute_sql(sql, params, commit=commit)\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 3064, in execute_sql\r\n    self.commit()\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 2831, in __exit__\r\n    reraise(new_type, new_type(exc_value, *exc_args), traceback)\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 183, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/Users/ignisor/dev/redbud-compliance-entities/.env/lib/python3.8/site-packages/peewee.py\", line 3057, in execute_sql\r\n    cursor.execute(sql, params or ())\r\npeewee.IntegrityError: null value in column \"id\" violates not-null constraint\r\nDETAIL:  Failing row contains (null, d3a22843-58ff-4d32-9c90-352a53744bdd, 27888182-3305-44ff-b175-919ecace48fb).\r\n```\r\n\r\nIt works if I use a model with AutoKey as through-model for the M2M field.\r\n\r\n## Workaround\r\n\r\nUsing a through-model with AutoKey as a primary key.\r\n\r\nIn my case, I came up with Metaclass for that purpose (so I don't need to make different base classes).\r\n\r\n```\r\nclass ThroughModelMeta(pw.ModelBase):\r\n    def __new__(cls, name, bases, attrs):\r\n        new_cls = super().__new__(cls, name, bases, attrs)\r\n        new_cls._meta.set_primary_key('id', pw.AutoField())\r\n\r\n        return new_cls\r\n```\r\n\r\nThanks.\r\n\r\n_P.s. And thanks for such a nice ORM_ \ud83d\ude09\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2143", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2143/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2143/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2143/events", "html_url": "https://github.com/coleifer/peewee/issues/2143", "id": 591917732, "node_id": "MDU6SXNzdWU1OTE5MTc3MzI=", "number": 2143, "title": "Comparison operations for subqueries", "user": {"login": "EugeneRymarev", "id": 6260309, "node_id": "MDQ6VXNlcjYyNjAzMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6260309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EugeneRymarev", "html_url": "https://github.com/EugeneRymarev", "followers_url": "https://api.github.com/users/EugeneRymarev/followers", "following_url": "https://api.github.com/users/EugeneRymarev/following{/other_user}", "gists_url": "https://api.github.com/users/EugeneRymarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/EugeneRymarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EugeneRymarev/subscriptions", "organizations_url": "https://api.github.com/users/EugeneRymarev/orgs", "repos_url": "https://api.github.com/users/EugeneRymarev/repos", "events_url": "https://api.github.com/users/EugeneRymarev/events{/privacy}", "received_events_url": "https://api.github.com/users/EugeneRymarev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-01T13:30:11Z", "updated_at": "2020-04-01T17:52:42Z", "closed_at": "2020-04-01T17:52:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, @coleifer!\r\nAgain with same problem, but not for **EQ** or **NE** operations.\r\nOther operations not work too. Like **LT** or **GT**.\r\nIn _HashableSource class need add more operations from **OP**.\r\n\r\nhttps://github.com/coleifer/peewee/issues/2118#issuecomment-593150353_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/coleifer/peewee/issues/2142", "repository_url": "https://api.github.com/repos/coleifer/peewee", "labels_url": "https://api.github.com/repos/coleifer/peewee/issues/2142/labels{/name}", "comments_url": "https://api.github.com/repos/coleifer/peewee/issues/2142/comments", "events_url": "https://api.github.com/repos/coleifer/peewee/issues/2142/events", "html_url": "https://github.com/coleifer/peewee/issues/2142", "id": 591872814, "node_id": "MDU6SXNzdWU1OTE4NzI4MTQ=", "number": 2142, "title": "SqliteDatabase + DateTimeField not working", "user": {"login": "COM8", "id": 11741404, "node_id": "MDQ6VXNlcjExNzQxNDA0", "avatar_url": "https://avatars3.githubusercontent.com/u/11741404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/COM8", "html_url": "https://github.com/COM8", "followers_url": "https://api.github.com/users/COM8/followers", "following_url": "https://api.github.com/users/COM8/following{/other_user}", "gists_url": "https://api.github.com/users/COM8/gists{/gist_id}", "starred_url": "https://api.github.com/users/COM8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/COM8/subscriptions", "organizations_url": "https://api.github.com/users/COM8/orgs", "repos_url": "https://api.github.com/users/COM8/repos", "events_url": "https://api.github.com/users/COM8/events{/privacy}", "received_events_url": "https://api.github.com/users/COM8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-01T12:20:21Z", "updated_at": "2020-04-01T13:27:30Z", "closed_at": "2020-04-01T13:27:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "When you run the following example, it creates a DB and the `wnstoken` table but without the `expires` field.\r\n```python\r\nfrom peewee import *\r\nfrom datetime import datetime, timezone\r\n\r\nDB_PATH: str = \"peeweeTest.db\"\r\ndb: SqliteDatabase = SqliteDatabase(DB_PATH)\r\n\r\nclass WNSToken(Model):\r\n    token: CharField = CharField(unique=True)\r\n    expires: DateTimeField(default=datetime.now(timezone.utc))\r\n\r\n    class Meta:\r\n        database = db\r\n\r\nprint(\"Initalizing the DB...\")\r\ndb.connect()\r\ndb.create_tables([WNSToken])\r\nprint(\"DB initialized.\")\r\n```\r\n\r\nIt looks like it's ignoring `DateTimeField`s. I tested this with multiple different combinations of fields and tables. As soon as a table includes a `DateTimeField`, it won't be created.\r\n\r\nInserting works, but also completely ignores the `DateTimeField`.\r\n\r\n### Environment\r\n* peewee: `3.13.2`\r\n* Python3: `3.7.6`\r\n\r\n### Resulting DB\r\n![Screenshot from 2020-04-01 14-21-18](https://user-images.githubusercontent.com/11741404/78136556-206ed300-7424-11ea-843a-5fd65116b69f.png)\r\n", "performed_via_github_app": null, "score": 1.0}]}