{"total_count": 56, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/rbw/pysnow/issues/155", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/155/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/155/events", "html_url": "https://github.com/rbw/pysnow/issues/155", "id": 615313913, "node_id": "MDU6SXNzdWU2MTUzMTM5MTM=", "number": 155, "title": "Deprecation warning due to invalid escape sequences", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-10T04:23:58Z", "updated_at": "2020-06-01T21:52:49Z", "closed_at": "2020-06-01T21:52:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Deprecation warnings are raised due to invalid escape sequences. This can be fixed by using raw strings or escaping the literals. pyupgrade also helps in automatic conversion : https://github.com/asottile/pyupgrade/\r\n\r\n```\r\nfind . -iname '*.py' | grep -Ev 'test.py' | xargs -P4 -I{} python3.8 -Wall -m py_compile {}\r\n./pysnow/resource.py:16: DeprecationWarning: invalid escape sequence \\*\r\n  \"\"\"Creates a new :class:`Resource` object\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/154", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/154/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/154/events", "html_url": "https://github.com/rbw/pysnow/issues/154", "id": 612458886, "node_id": "MDU6SXNzdWU2MTI0NTg4ODY=", "number": 154, "title": "AttributeError: object has no attribute 'items'", "user": {"login": "i223t", "id": 11056491, "node_id": "MDQ6VXNlcjExMDU2NDkx", "avatar_url": "https://avatars0.githubusercontent.com/u/11056491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/i223t", "html_url": "https://github.com/i223t", "followers_url": "https://api.github.com/users/i223t/followers", "following_url": "https://api.github.com/users/i223t/following{/other_user}", "gists_url": "https://api.github.com/users/i223t/gists{/gist_id}", "starred_url": "https://api.github.com/users/i223t/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/i223t/subscriptions", "organizations_url": "https://api.github.com/users/i223t/orgs", "repos_url": "https://api.github.com/users/i223t/repos", "events_url": "https://api.github.com/users/i223t/events{/privacy}", "received_events_url": "https://api.github.com/users/i223t/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-05T09:17:49Z", "updated_at": "2020-05-07T15:17:18Z", "closed_at": "2020-05-07T15:17:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nIt looks like examples from the documentation are not working.\r\n\r\nKey-value approach is Ok, but QueryBuilder or SN Pass-through raise the errors:\r\n\r\n```\r\nstart = datetime(1970, 1, 1)\r\nend = datetime.now() - timedelta(days=20)\r\n\r\niterable_content = incident.get(query='numberSTARTSWITHINC0150^sys_created_onBETWEENjavascript:gs.dateGenerate(\"%s\")@javascript:gs.dateGenerate(\"%s\")' % (start, end)).all()\r\n```\r\n\r\ngenerates\r\n\r\n>   File \"/home/izzet/.local/lib/python3.6/site-packages/pysnow/request.py\", line 91, in get\r\n    for key, value in query.items():\r\nAttributeError: 'str' object has no attribute 'items'\r\n\r\n\r\n\r\n```\r\n        start = datetime(1970, 1, 1)\r\n        end = datetime.now() - timedelta(days=20)\r\n\r\n        # Query incident records with number starting with 'INC0123', created between 1970-01-01 and 20 days back in time\r\n        qb = (\r\n            pysnow.QueryBuilder()\r\n            .field('number').starts_with('INC0123')\r\n            .AND()\r\n            .field('sys_created_on').between(start, end)\r\n            .AND()\r\n            .field('sys_updated_on').order_descending()\r\n        )\r\n\r\n        iterable_content = incident.get(query=qb).all()\r\n```\r\n\r\ngenerates:\r\n\r\n> File \"/home/izzet/.local/lib/python3.6/site-packages/pysnow/request.py\", line 91, in get\r\n>     for key, value in query.items():\r\n> AttributeError: 'QueryBuilder' object has no attribute 'items'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/152", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/152/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/152/events", "html_url": "https://github.com/rbw/pysnow/issues/152", "id": 610544405, "node_id": "MDU6SXNzdWU2MTA1NDQ0MDU=", "number": 152, "title": "Not returning information on newly created record", "user": {"login": "perlgoodies", "id": 64626264, "node_id": "MDQ6VXNlcjY0NjI2MjY0", "avatar_url": "https://avatars0.githubusercontent.com/u/64626264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/perlgoodies", "html_url": "https://github.com/perlgoodies", "followers_url": "https://api.github.com/users/perlgoodies/followers", "following_url": "https://api.github.com/users/perlgoodies/following{/other_user}", "gists_url": "https://api.github.com/users/perlgoodies/gists{/gist_id}", "starred_url": "https://api.github.com/users/perlgoodies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/perlgoodies/subscriptions", "organizations_url": "https://api.github.com/users/perlgoodies/orgs", "repos_url": "https://api.github.com/users/perlgoodies/repos", "events_url": "https://api.github.com/users/perlgoodies/events{/privacy}", "received_events_url": "https://api.github.com/users/perlgoodies/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-01T03:55:52Z", "updated_at": "2020-05-02T05:23:12Z", "closed_at": "2020-05-02T05:23:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am new to Python (I come from a Perl background) and can't get the creation of the record to work.\r\n\r\nIn testing, the record IS being created but the return is not helpful. When I print result below, it's showing [Response - 201] instead of the sys_id or object of the record it actually created.\r\n\r\nAm I using it wrong? My end goal is to get the sys_id of the new record.\r\n\r\n`\r\n# Define a resource, here we'll use the incident table API\r\nincident = c.resource(api_path='/table/incident')\r\n\r\n# Set the payload\r\nnew_record = {\r\n    'short_description': 'Pysnow created incident',\r\n    'description': 'This is awesome'\r\n}\r\n\r\n# Create a new incident record\r\nresult = incident.create(payload=new_record)\r\nprint(result)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/151", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/151/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/151/events", "html_url": "https://github.com/rbw/pysnow/issues/151", "id": 595164023, "node_id": "MDU6SXNzdWU1OTUxNjQwMjM=", "number": 151, "title": "Is there a way to use pysnow with a http proxy and oauth?", "user": {"login": "Turegano", "id": 1952109, "node_id": "MDQ6VXNlcjE5NTIxMDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1952109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Turegano", "html_url": "https://github.com/Turegano", "followers_url": "https://api.github.com/users/Turegano/followers", "following_url": "https://api.github.com/users/Turegano/following{/other_user}", "gists_url": "https://api.github.com/users/Turegano/gists{/gist_id}", "starred_url": "https://api.github.com/users/Turegano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Turegano/subscriptions", "organizations_url": "https://api.github.com/users/Turegano/orgs", "repos_url": "https://api.github.com/users/Turegano/repos", "events_url": "https://api.github.com/users/Turegano/events{/privacy}", "received_events_url": "https://api.github.com/users/Turegano/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T14:27:55Z", "updated_at": "2020-04-07T08:55:14Z", "closed_at": "2020-04-07T08:55:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using pysnow for several projects but we can't achieve what we did with proxies in requests:\r\n\r\nrequests.post('https://XXXXXXXXX.service-now.com/oauth_token.do',data={'client_id': 'XXXXXXXX', 'client_secret': 'XXXXXXX','grant_type': 'refresh_token', 'refresh_token': rtoken}, proxies=proxies)\r\n\r\nThank you\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/145", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/145/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/145/events", "html_url": "https://github.com/rbw/pysnow/issues/145", "id": 551799242, "node_id": "MDU6SXNzdWU1NTE3OTkyNDI=", "number": 145, "title": "snow updated fail", "user": {"login": "rochana-atapattu", "id": 31321610, "node_id": "MDQ6VXNlcjMxMzIxNjEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31321610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rochana-atapattu", "html_url": "https://github.com/rochana-atapattu", "followers_url": "https://api.github.com/users/rochana-atapattu/followers", "following_url": "https://api.github.com/users/rochana-atapattu/following{/other_user}", "gists_url": "https://api.github.com/users/rochana-atapattu/gists{/gist_id}", "starred_url": "https://api.github.com/users/rochana-atapattu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rochana-atapattu/subscriptions", "organizations_url": "https://api.github.com/users/rochana-atapattu/orgs", "repos_url": "https://api.github.com/users/rochana-atapattu/repos", "events_url": "https://api.github.com/users/rochana-atapattu/events{/privacy}", "received_events_url": "https://api.github.com/users/rochana-atapattu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1864640529, "node_id": "MDU6TGFiZWwxODY0NjQwNTI5", "url": "https://api.github.com/repos/rbw/pysnow/labels/needs-verification", "name": "needs-verification", "color": "776ed8", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-18T17:34:21Z", "updated_at": "2020-05-02T05:20:41Z", "closed_at": "2020-05-02T05:20:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get an error when I try to use update\r\n\r\n> File \"/home/rochana/service_now/app/.env/lib/python3.6/site-packages/pysnow/request.py\", line 115, in update\r\n>     \"/{0}\".format(record[\"sys_id\"])\r\n>   File \"/home/rochana/service_now/app/.env/lib/python3.6/site-packages/pysnow/url_builder.py\", line 59, in get_appended_custom\r\n>     self.validate_path(path_component)\r\n>   File \"/home/rochana/service_now/app/.env/lib/python3.6/site-packages/pysnow/url_builder.py\", line 33, in validate_path\r\n>     % path\r\n> pysnow.exceptions.InvalidUsage: Path validation failed - Expected: '/<component>[/component], got: /{'display_value': '42afe2a71b92009445f5fc49cd4bcbd7', 'value': '42afe2a71b92009445f5fc49cd4bcbd7'}\r\n\r\ni went ahead and changed \r\n```\r\nself._url = self._url_builder.get_appended_custom(\r\n            \"/{0}\".format(record[\"sys_id\"])\r\n        )\r\n``` \r\nto\r\n```\r\nself._url = self._url_builder.get_appended_custom(\r\n            \"/{0}\".format(record[\"sys_id\"]['value'])\r\n        )\r\n```\r\nIn _request.py_ and it works fine now.\r\nI'm not sure if it is a real issue or just specific to our ServiceNow.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/144", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/144/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/144/events", "html_url": "https://github.com/rbw/pysnow/issues/144", "id": 550191652, "node_id": "MDU6SXNzdWU1NTAxOTE2NTI=", "number": 144, "title": "Question about ServiceNow Form Action Buttons and Menus", "user": {"login": "dfields186", "id": 45521446, "node_id": "MDQ6VXNlcjQ1NTIxNDQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/45521446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfields186", "html_url": "https://github.com/dfields186", "followers_url": "https://api.github.com/users/dfields186/followers", "following_url": "https://api.github.com/users/dfields186/following{/other_user}", "gists_url": "https://api.github.com/users/dfields186/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfields186/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfields186/subscriptions", "organizations_url": "https://api.github.com/users/dfields186/orgs", "repos_url": "https://api.github.com/users/dfields186/repos", "events_url": "https://api.github.com/users/dfields186/events{/privacy}", "received_events_url": "https://api.github.com/users/dfields186/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-15T13:38:33Z", "updated_at": "2020-02-22T20:23:23Z", "closed_at": "2020-02-22T20:23:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "In our company's implementation of servicenow, there are certain incident tickets which have these \"form action buttons\" which when you click on them, you are given a menu of various options or actions that you can select.  Here's the element from such an action button:\r\n\r\n<button class=\"form_action_button header  action_context btn btn-default\" style=\"white-space: nowrap\" type=\"submit\" value=\"f364d246db703300c356196c29961913\" onclick=\"var att_action_menu=window.att_action_menu;openAttActionMenuModal();return false;\" id=\"att_action_menu\" data-action-name=\"att_action_menu\" gsft_id=\"f364d246db703300c356196c29961913\">AT&amp;T Action Menu</button>\r\n\r\nAre these somehow accessible and scriptable using the PySnow APIs or some other API inside of Python?\r\n\r\nThere is a schema associated with this Action Menu - its called an ActionSchema - partial listing of the schema shown below:\r\n\r\n{\r\n\t\"properties\": {\r\n\t\t\"action\": {\r\n\t\t\t\"type\": \"string\",\r\n\t\t\t\"active\": true,\r\n\t\t\t\"label\": \"Action\",\r\n\t\t\t\"help_text\": \"Select an action\",\r\n\t\t\t\"enum\": [{\r\n\t\t\t\t\"label\": \"Request Escalation\",\r\n\t\t\t\t\"value\": \"RequestEscalation\",\r\n\t\t\t\t\"help_text\": \"Request an escalation - Transport tickets ONLY.\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"label\": \"Ticket Contest\",\r\n\t\t\t\t\"value\": \"TicketContest\",\r\n\t\t\t\t\"help_text\": \"Contest a ticket - Transport tickets ONLY.\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"label\": \"Request To Close\",\r\n\t\t\t\t\"value\": \"RequestToClose\",\r\n\t\t\t\t\"help_text\": \"Request ticket closure - Transport tickets ONLY.\"\r\n\t\t\t}]\r\n\t\t},\r\n\t\t\"action_code\": {\r\n\t\t\t\"type\": \"string\",\r\n\t\t\t\"active\": true,\r\n\t\t\t\"label\": \"Action code\",\r\n\t\t\t\"help_text\": \"Select an action code.\",\r\n\t\t\t\"dependent_field\": \"action\",\r\n\t\t\t\"enum\": [{\r\n\t\t\t\t\"label\": \"Service still down\",\r\n\t\t\t\t\"value\": \"TKTE001\",\r\n\t\t\t\t\"help_text\": \"\",\r\n\t\t\t\t\"dependent_value\": \"RequestEscalation\"\r\n\r\nAny help is so much appreciated!!\r\n\r\nThanks in advance!\r\nDavid\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/142", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/142/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/142/events", "html_url": "https://github.com/rbw/pysnow/issues/142", "id": 548241606, "node_id": "MDU6SXNzdWU1NDgyNDE2MDY=", "number": 142, "title": "[RFE] add __bool__ to response object", "user": {"login": "jcpunk", "id": 3534830, "node_id": "MDQ6VXNlcjM1MzQ4MzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3534830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcpunk", "html_url": "https://github.com/jcpunk", "followers_url": "https://api.github.com/users/jcpunk/followers", "following_url": "https://api.github.com/users/jcpunk/following{/other_user}", "gists_url": "https://api.github.com/users/jcpunk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcpunk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcpunk/subscriptions", "organizations_url": "https://api.github.com/users/jcpunk/orgs", "repos_url": "https://api.github.com/users/jcpunk/repos", "events_url": "https://api.github.com/users/jcpunk/events{/privacy}", "received_events_url": "https://api.github.com/users/jcpunk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-10T19:06:24Z", "updated_at": "2020-02-22T20:24:56Z", "closed_at": "2020-02-22T20:24:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In addition to the `_or_none` fetch object, it might be nice to have the response object respond to something like:\r\n\r\n~~~\r\nresponse = incident.get(query={'state': 1}, stream=True)\r\nif response:\r\n  print('I got some responses to process with stream')\r\nresponse = incident.get(query={'state': 1}, stream=False)\r\nif response:\r\n  print('I got some responses to process')\r\n~~~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/141", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/141/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/141/events", "html_url": "https://github.com/rbw/pysnow/issues/141", "id": 546435546, "node_id": "MDU6SXNzdWU1NDY0MzU1NDY=", "number": 141, "title": "[RFE] simple method to convert record_link into data", "user": {"login": "jcpunk", "id": 3534830, "node_id": "MDQ6VXNlcjM1MzQ4MzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3534830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcpunk", "html_url": "https://github.com/jcpunk", "followers_url": "https://api.github.com/users/jcpunk/followers", "following_url": "https://api.github.com/users/jcpunk/following{/other_user}", "gists_url": "https://api.github.com/users/jcpunk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcpunk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcpunk/subscriptions", "organizations_url": "https://api.github.com/users/jcpunk/orgs", "repos_url": "https://api.github.com/users/jcpunk/repos", "events_url": "https://api.github.com/users/jcpunk/events{/privacy}", "received_events_url": "https://api.github.com/users/jcpunk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-07T18:21:45Z", "updated_at": "2020-01-12T18:39:29Z", "closed_at": "2020-01-12T18:37:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Lets say I fetch some data from the `incidents` table that looks like:\r\n\r\n~~~\r\n'assigned_to': {'link': 'https://dev.service-now.com/api/now/table/sys_user/ce178704f045f400075744d68dcc2b25',\r\n                'value': 'ce178704f045f400075744d68dcc2b25'},\r\n'assignment_group': {'link': 'https://dev.service-now.com/api/now/table/sys_user_group/9cbaff540ada3c590033120149044319',\r\n                     'value': '9cbaff540ada3c590033120149044319'},\r\n~~~\r\n\r\nIt would be helpful if there was an easy way I could tell `pysnow` \"go get this resource.\r\n\r\npsudo code:\r\n\r\n~~~\r\nRESPONSE = INC_TABLE.get(query={'assignment_group': '9cbaff540ada3c590033120149044319'})\r\n for ITEM in RESPONSE.all():\r\n   if 'assigned_to' in ITEM:\r\n     print(SNOW_CLIENT.resource(record_link=ITEM['assigned_to']['link']))\r\n~~~\r\n\r\nwhere the `print` there would print out the single record referenced.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/140", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/140/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/140/events", "html_url": "https://github.com/rbw/pysnow/issues/140", "id": 537985726, "node_id": "MDU6SXNzdWU1Mzc5ODU3MjY=", "number": 140, "title": "Date/time comparisons broken for me since #136", "user": {"login": "lingfish", "id": 1295960, "node_id": "MDQ6VXNlcjEyOTU5NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1295960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lingfish", "html_url": "https://github.com/lingfish", "followers_url": "https://api.github.com/users/lingfish/followers", "following_url": "https://api.github.com/users/lingfish/following{/other_user}", "gists_url": "https://api.github.com/users/lingfish/gists{/gist_id}", "starred_url": "https://api.github.com/users/lingfish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lingfish/subscriptions", "organizations_url": "https://api.github.com/users/lingfish/orgs", "repos_url": "https://api.github.com/users/lingfish/repos", "events_url": "https://api.github.com/users/lingfish/events{/privacy}", "received_events_url": "https://api.github.com/users/lingfish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-15T00:59:26Z", "updated_at": "2020-01-12T17:47:32Z", "closed_at": "2020-01-12T17:47:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Robert,\r\n\r\nI just upgraded to the tag that contains the `gs.dateGenerate` changes (#136), and now my lookups are broken.\r\n\r\nI've tested many combinations of `sysparm_display_value`, etc, but what I see is:\r\n\r\n* API account is in Australia/Sydney TZ\r\n* Returned dates/times change accordingly based on `sysparm_display_value`\r\n* Your code converts to UTC if a TZ is detected, assuming then that the query wants it in UTC\r\n* Manually querying with Postman, it seems that the date/time sent using `gs.dateGenerate` always results in SN interpreting that as the accounts' TZ, not UTC\r\n\r\nSo for example, I use a QueryBuilder, using \"local\" time, and `pysnow` converts that to UTC and I get more results than I should.\r\n\r\nI've spent hours scouring SN doco, and haven't found anything definitive around what SN expects in those glide things; even using `sysparm_input_display_value` makes no difference.\r\n\r\nEven the doco on `dateGenerate` is vague-ish:\r\n\r\n> Generates a date and time for the specified date in GMT.\r\n\r\n\r\nYes, so that converts to GMT, but it seems their backend will still search assuming local TZ, or account TZ.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/139", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/139/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/139/events", "html_url": "https://github.com/rbw/pysnow/issues/139", "id": 533651626, "node_id": "MDU6SXNzdWU1MzM2NTE2MjY=", "number": 139, "title": "Criterion documentation", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-12-05T23:11:52Z", "updated_at": "2020-02-22T20:26:22Z", "closed_at": "2020-02-22T20:26:21Z", "author_association": "OWNER", "active_lock_reason": null, "body": "- Brief description\r\n- API docs\r\n- Usage examples\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/136", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/136/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/136/events", "html_url": "https://github.com/rbw/pysnow/issues/136", "id": 531692699, "node_id": "MDU6SXNzdWU1MzE2OTI2OTk=", "number": 136, "title": "datetime comparisons don't work", "user": {"login": "mvanderlee", "id": 918128, "node_id": "MDQ6VXNlcjkxODEyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/918128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvanderlee", "html_url": "https://github.com/mvanderlee", "followers_url": "https://api.github.com/users/mvanderlee/followers", "following_url": "https://api.github.com/users/mvanderlee/following{/other_user}", "gists_url": "https://api.github.com/users/mvanderlee/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvanderlee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvanderlee/subscriptions", "organizations_url": "https://api.github.com/users/mvanderlee/orgs", "repos_url": "https://api.github.com/users/mvanderlee/repos", "events_url": "https://api.github.com/users/mvanderlee/events{/privacy}", "received_events_url": "https://api.github.com/users/mvanderlee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-03T03:35:11Z", "updated_at": "2020-01-12T17:44:11Z", "closed_at": "2020-01-12T17:44:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "The datetime comparisons result in `opened_at>2019-11-11 00:00:00`. This doesn't actually work. No error is thrown, but ServiceNow ignores the query. \r\nIt should be `opened_at>javascript:gs.dateGenerate(\"2019-11-11 00:00:00\")`\r\n\r\nThis is implemented in the Criterion handling in PR #135 but not in the QueryBuilder itself. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/128", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/128/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/128/events", "html_url": "https://github.com/rbw/pysnow/issues/128", "id": 519703652, "node_id": "MDU6SXNzdWU1MTk3MDM2NTI=", "number": 128, "title": "No base exception?", "user": {"login": "lingfish", "id": 1295960, "node_id": "MDQ6VXNlcjEyOTU5NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1295960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lingfish", "html_url": "https://github.com/lingfish", "followers_url": "https://api.github.com/users/lingfish/followers", "following_url": "https://api.github.com/users/lingfish/following{/other_user}", "gists_url": "https://api.github.com/users/lingfish/gists{/gist_id}", "starred_url": "https://api.github.com/users/lingfish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lingfish/subscriptions", "organizations_url": "https://api.github.com/users/lingfish/orgs", "repos_url": "https://api.github.com/users/lingfish/repos", "events_url": "https://api.github.com/users/lingfish/events{/privacy}", "received_events_url": "https://api.github.com/users/lingfish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-08T04:20:55Z", "updated_at": "2019-11-11T00:01:11Z", "closed_at": "2019-11-10T16:53:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, any reason why you don't have a base class exception, that everything else in pysnow inherits from?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/127", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/127/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/127/events", "html_url": "https://github.com/rbw/pysnow/issues/127", "id": 518558886, "node_id": "MDU6SXNzdWU1MTg1NTg4ODY=", "number": 127, "title": "Using ServiceNow Incident Response in an If Statement", "user": {"login": "rtirak", "id": 11429018, "node_id": "MDQ6VXNlcjExNDI5MDE4", "avatar_url": "https://avatars0.githubusercontent.com/u/11429018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtirak", "html_url": "https://github.com/rtirak", "followers_url": "https://api.github.com/users/rtirak/followers", "following_url": "https://api.github.com/users/rtirak/following{/other_user}", "gists_url": "https://api.github.com/users/rtirak/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtirak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtirak/subscriptions", "organizations_url": "https://api.github.com/users/rtirak/orgs", "repos_url": "https://api.github.com/users/rtirak/repos", "events_url": "https://api.github.com/users/rtirak/events{/privacy}", "received_events_url": "https://api.github.com/users/rtirak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-06T15:48:20Z", "updated_at": "2019-11-08T07:13:29Z", "closed_at": "2019-11-08T07:13:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could someone possibly give me an example of use with an if statement specifically using the assignment_group field? For context here is what I am trying to do:\r\n\r\n`incident` = c.resource(api_path='/table/incident')\r\n\r\n'#` Query for incidents with state 1\r\n'response = incident.get(query={'number':'INC0454225'})\r\n\r\n' #Iterate through response\r\n' for record in response.all():\r\n   '  if (record['assignment_group'] == ' ASSIGNMENT GROUP NAME OR VALUE'):\r\n      '  print('Assignment Group matches')\r\n\r\n   ' else:\r\n       ' print('assignment group does not match')\r\n\r\n\r\n\r\nAs you can see above I am trying to just compare the assignmnet_group value which when I print the whole incident to the screen teh specific assignment group value looks  like this:\r\n\r\n'assignment_group': {   'display_value': 'APPS-Apps TEAM - ITAPPS ''- Service Accounts', 'link': 'https://somecompany.service-now.com/api/now/table/sys_user_group/skdhjghs83kd823jsl3802jjf'},\r\n\r\n\r\nCan you give me an example or tell me how this should work properly when using pysnow? So that I can compare the assignment group display value == 'SOME GROUP NAME I TYPE IN' and if its true just print to the screen?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/126", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/126/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/126/events", "html_url": "https://github.com/rbw/pysnow/issues/126", "id": 513892868, "node_id": "MDU6SXNzdWU1MTM4OTI4Njg=", "number": 126, "title": "Querying cmn_location.do", "user": {"login": "dfields186", "id": 45521446, "node_id": "MDQ6VXNlcjQ1NTIxNDQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/45521446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfields186", "html_url": "https://github.com/dfields186", "followers_url": "https://api.github.com/users/dfields186/followers", "following_url": "https://api.github.com/users/dfields186/following{/other_user}", "gists_url": "https://api.github.com/users/dfields186/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfields186/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfields186/subscriptions", "organizations_url": "https://api.github.com/users/dfields186/orgs", "repos_url": "https://api.github.com/users/dfields186/repos", "events_url": "https://api.github.com/users/dfields186/events{/privacy}", "received_events_url": "https://api.github.com/users/dfields186/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-29T12:47:48Z", "updated_at": "2019-11-06T16:27:09Z", "closed_at": "2019-11-06T16:26:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to query a location table in service now - this table is named 'cmn_location.do' \r\n\r\nA normal ServiceNow URL looks like this:\r\nhttps://xxxxxxxxx.service-now.com/cmn_location.do?sysparm_query=streetLIKE36600+VanDyke+Avenue&sysparm_limit=10000&sysparm_offset=0&sysparm_display_value=all&sysparm_suppress_pagination_header=False&sysparm_exclude_reference_link=False&sysparm_view=&sysparm_fields=\r\n\r\nNotice the base path?\r\n\r\nHow do I specify that in this libraries resource setup:\r\n\r\npysnow_cmn_location = pysnow_conn.resource(api_path='cmn_location.do', base_path=None)\r\n\r\nThe above doesnt work\r\n\r\nI get the following error message:\r\n\r\npysnow.exceptions.InvalidUsage: Path validation failed - Expected: '/<component>[/component], got: cmn_location.do\r\n\r\nI've tried several different variations of the base_path but can't seem to get it working - I've different versions by removing base_path altogether like shown below with and without '/' in front of cmn_location.do and nothing works\r\n\r\npysnow_cmn_location = pysnow_conn.resource(api_path='/cmn_location.do')\r\n\r\nAny suggestions or help is much appreciated!  Thank you!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/125", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/125/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/125/events", "html_url": "https://github.com/rbw/pysnow/issues/125", "id": 510498014, "node_id": "MDU6SXNzdWU1MTA0OTgwMTQ=", "number": 125, "title": "Unauthorized Client 401", "user": {"login": "RealisticItem", "id": 43854708, "node_id": "MDQ6VXNlcjQzODU0NzA4", "avatar_url": "https://avatars0.githubusercontent.com/u/43854708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RealisticItem", "html_url": "https://github.com/RealisticItem", "followers_url": "https://api.github.com/users/RealisticItem/followers", "following_url": "https://api.github.com/users/RealisticItem/following{/other_user}", "gists_url": "https://api.github.com/users/RealisticItem/gists{/gist_id}", "starred_url": "https://api.github.com/users/RealisticItem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RealisticItem/subscriptions", "organizations_url": "https://api.github.com/users/RealisticItem/orgs", "repos_url": "https://api.github.com/users/RealisticItem/repos", "events_url": "https://api.github.com/users/RealisticItem/events{/privacy}", "received_events_url": "https://api.github.com/users/RealisticItem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-22T08:16:32Z", "updated_at": "2019-10-23T07:08:40Z", "closed_at": "2019-10-23T07:08:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to run the code given to fetch data:\r\n\r\n\r\n```python\r\nimport pysnow\r\n\r\n# Create client object\r\nc = pysnow.Client(instance='TheBigCompanyInstance', user='MyActiveDirectoryUser', password='MyCoolPassword')\r\n\r\n# Define a resource, here we'll use the incident table API\r\nincident = c.resource(api_path='/table/task')\r\n\r\n# Query for incidents with state 1\r\nresponse = incident.get(query={'state': 1}, stream=True)\r\n\r\n# Iterate over the result and print out `sys_id` of the matching records.\r\nfor record in response.all():\r\n    print(record['sys_id'])\r\n```\r\nI get an Error: \r\n\r\n> HTTPError: 401 Client Error: Unauthorized for url: https://TheBigCompanyInstance.service-now.com/api/now/table/task?sysparm_query=state%3D1&sysparm_limit=10000&sysparm_offset=0&sysparm_display_value=False&sysparm_suppress_pagination_header=False&sysparm_exclude_reference_link=False&sysparm_view=&sysparm_fields=\r\n\r\nWhen I take this particular link in my Browser, I can get the response. But not in my Python code. \r\n\r\nIs using an Active Directory user an issue to connect to ServiceNow with pysnow?\r\nMy company is using an SSO to connect to the multiple intern website, I'm not familiar with this technology, could it be a way to investigate?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/122", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/122/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/122/events", "html_url": "https://github.com/rbw/pysnow/issues/122", "id": 497252239, "node_id": "MDU6SXNzdWU0OTcyNTIyMzk=", "number": 122, "title": "Handling HTTP response 202", "user": {"login": "maxdevyatov", "id": 15642766, "node_id": "MDQ6VXNlcjE1NjQyNzY2", "avatar_url": "https://avatars0.githubusercontent.com/u/15642766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxdevyatov", "html_url": "https://github.com/maxdevyatov", "followers_url": "https://api.github.com/users/maxdevyatov/followers", "following_url": "https://api.github.com/users/maxdevyatov/following{/other_user}", "gists_url": "https://api.github.com/users/maxdevyatov/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxdevyatov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxdevyatov/subscriptions", "organizations_url": "https://api.github.com/users/maxdevyatov/orgs", "repos_url": "https://api.github.com/users/maxdevyatov/repos", "events_url": "https://api.github.com/users/maxdevyatov/events{/privacy}", "received_events_url": "https://api.github.com/users/maxdevyatov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-09-23T18:19:36Z", "updated_at": "2019-11-10T16:53:28Z", "closed_at": "2019-11-10T16:53:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "ServiceNow can reply with empty response with HTTP 202 status code.\r\nSince the response is empty call to  self._response.json() in Response._get_buffered_response raises an exception.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/120", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/120/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/120/events", "html_url": "https://github.com/rbw/pysnow/issues/120", "id": 475686346, "node_id": "MDU6SXNzdWU0NzU2ODYzNDY=", "number": 120, "title": "How to solve pysnow.exceptions.MultipleResults", "user": {"login": "aufbakanleitung", "id": 9026889, "node_id": "MDQ6VXNlcjkwMjY4ODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9026889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aufbakanleitung", "html_url": "https://github.com/aufbakanleitung", "followers_url": "https://api.github.com/users/aufbakanleitung/followers", "following_url": "https://api.github.com/users/aufbakanleitung/following{/other_user}", "gists_url": "https://api.github.com/users/aufbakanleitung/gists{/gist_id}", "starred_url": "https://api.github.com/users/aufbakanleitung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aufbakanleitung/subscriptions", "organizations_url": "https://api.github.com/users/aufbakanleitung/orgs", "repos_url": "https://api.github.com/users/aufbakanleitung/repos", "events_url": "https://api.github.com/users/aufbakanleitung/events{/privacy}", "received_events_url": "https://api.github.com/users/aufbakanleitung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-01T13:33:49Z", "updated_at": "2019-08-06T14:23:32Z", "closed_at": "2019-08-06T14:23:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a PySnow script that searches for users based on their e-mail address:\r\n```python\r\ndef get_caller(email):\r\n    incident = c.resource(api_path='/table/sys_user')\r\n    incidents = incident.get(query={\"email\": email})\r\n    try:\r\n        response = incidents.one()\r\n    except pysnow.exceptions.MultipleResults:\r\n        response = incidents[0]\r\n    except pysnow.exceptions.NoResults:\r\n        response = find_caller_by_old_email(email)\r\n    return response\r\n```\r\n\r\nHowever for some users there are two active records with the same e-mail in the ServiceNow database. \r\n![two active B-id's](https://user-images.githubusercontent.com/9026889/62296067-accc8e80-b46e-11e9-9fa9-3eea0e0fcc7f.png)\r\n\r\nWhile this is something that shouldn't happen, it's nevertheless something I have to deal with. Else I get the following error:\r\n```terminal\r\n(....)\r\n  File \"/Users/hermanvanderveer/anaconda3/lib/python3.6/site-packages/pysnow/response.py\", line 45, in __getitem__\r\n    return self.one().get(key)\r\n  File \"/Users/hermanvanderveer/anaconda3/lib/python3.6/site-packages/pysnow/response.py\", line 213, in one\r\n    raise MultipleResults(\"Expected single-record result, got multiple\")\r\npysnow.exceptions.MultipleResults: Expected single-record result, got multiple\r\n```\r\n\r\nI've tried several options to fix this. `incidents[0]` didn't work, nor did `incidents.first()` which throws an error like `first() only works when stream=true`. \r\n\r\nAlso I would prefer if I could get the user with the highest B-number or latest creation date or something. How can I fix this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/119", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/119/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/119/events", "html_url": "https://github.com/rbw/pysnow/issues/119", "id": 474620202, "node_id": "MDU6SXNzdWU0NzQ2MjAyMDI=", "number": 119, "title": "Images added to tickets not viewable", "user": {"login": "aufbakanleitung", "id": 9026889, "node_id": "MDQ6VXNlcjkwMjY4ODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9026889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aufbakanleitung", "html_url": "https://github.com/aufbakanleitung", "followers_url": "https://api.github.com/users/aufbakanleitung/followers", "following_url": "https://api.github.com/users/aufbakanleitung/following{/other_user}", "gists_url": "https://api.github.com/users/aufbakanleitung/gists{/gist_id}", "starred_url": "https://api.github.com/users/aufbakanleitung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aufbakanleitung/subscriptions", "organizations_url": "https://api.github.com/users/aufbakanleitung/orgs", "repos_url": "https://api.github.com/users/aufbakanleitung/repos", "events_url": "https://api.github.com/users/aufbakanleitung/events{/privacy}", "received_events_url": "https://api.github.com/users/aufbakanleitung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807220, "node_id": "MDU6TGFiZWw0MTM4MDcyMjA=", "url": "https://api.github.com/repos/rbw/pysnow/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 19, "created_at": "2019-07-30T14:30:04Z", "updated_at": "2019-08-07T11:52:04Z", "closed_at": "2019-08-06T12:13:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently I'm adding images to Snow just like any other attachment:\r\n```python\r\ndef post_call(new_record):\r\n    incident = c.resource(api_path='/table/new_call')\r\n    result = incident.create(payload=new_record)\r\n    sys_id = result.one().get('sys_id')\r\n    att_list = new_record['attachment_list']\r\n    for att in att_list:\r\n        incident.attachments.upload(sys_id=sys_id, file_path=att)\r\n```\r\n\r\nHowever when I try to view an image that's added like this it just shows the raw image data:\r\n![view image results](https://user-images.githubusercontent.com/9026889/62137532-66e4be80-b2e6-11e9-89da-eea29dbb45a8.png)\r\nIf I download the image first it works just fine. \r\n\r\nI assume this is because the images are not marked as images by PySnow. I looked through the PySnow documentation and I couldn't find anything regarding a setting, so thought it might be a bug.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/117", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/117/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/117/events", "html_url": "https://github.com/rbw/pysnow/issues/117", "id": 461216808, "node_id": "MDU6SXNzdWU0NjEyMTY4MDg=", "number": 117, "title": "API calls fail after using attachments due to custom request updating header content type", "user": {"login": "andyfeller", "id": 2089743, "node_id": "MDQ6VXNlcjIwODk3NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2089743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andyfeller", "html_url": "https://github.com/andyfeller", "followers_url": "https://api.github.com/users/andyfeller/followers", "following_url": "https://api.github.com/users/andyfeller/following{/other_user}", "gists_url": "https://api.github.com/users/andyfeller/gists{/gist_id}", "starred_url": "https://api.github.com/users/andyfeller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andyfeller/subscriptions", "organizations_url": "https://api.github.com/users/andyfeller/orgs", "repos_url": "https://api.github.com/users/andyfeller/repos", "events_url": "https://api.github.com/users/andyfeller/events{/privacy}", "received_events_url": "https://api.github.com/users/andyfeller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-26T22:56:40Z", "updated_at": "2019-06-28T14:50:09Z", "closed_at": "2019-06-28T14:50:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\n[pysnow.attachment.upload() passes `Content-Type` header](https://github.com/rbw/pysnow/blob/master/pysnow/attachment.py#L58)\r\n```\r\n        if multipart:\r\n            headers[\"Content-Type\"] = \"multipart/form-data\"\r\n            path_append = '/upload'\r\n        else:\r\n            headers[\"Content-Type\"] = \"text/plain\"\r\n            path_append = '/file'\r\n\r\n        return resource.request(method='POST', data=data, headers=headers, path_append=path_append)\r\n```\r\nthat creates a [custom request in pysnow.resource.request()](https://github.com/rbw/pysnow/blob/master/pysnow/resource.py#L139)\r\n```\r\n    def request(self, method, path_append=None, headers=None, **kwargs):\r\n        \"\"\"Create a custom request\r\n        :param method: HTTP method to use\r\n        :param path_append: (optional) relative to :attr:`api_path`\r\n        :param headers: (optional) Dictionary of headers to add or override\r\n        :param kwargs: kwargs to pass along to :class:`requests.Request`\r\n        :return:\r\n            - :class:`Response` object\r\n        \"\"\"\r\n\r\n        return self._request.custom(method, path_append=path_append, headers=headers, **kwargs)\r\n```\r\nwhich [affects headers in all future API calls](https://github.com/rbw/pysnow/blob/master/pysnow/request.py#L116) with the same client\r\n```\r\n        if headers:\r\n            self._session.headers.update(headers)\r\n```\r\nand results in `415` responses due to invalid media type:\r\n```\r\n  File \"/usr/lib/python2.7/site-packages/pysnow/response.py\", line 45, in __getitem__\r\n    return self.one().get(key)\r\n  File \"/usr/lib/python2.7/site-packages/pysnow/response.py\", line 208, in one\r\n    result, count = self._get_buffered_response()\r\n  File \"/usr/lib/python2.7/site-packages/pysnow/response.py\", line 133, in _get_buffered_response\r\n    response = self._get_response()\r\n  File \"/usr/lib/python2.7/site-packages/pysnow/response.py\", line 115, in _get_response\r\n    response.raise_for_status()\r\n  File \"/usr/lib/python2.7/site-packages/requests/models.py\", line 940, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 415 Client Error: Unsupported Media Type for url: XXXXXX\r\n```\r\n\r\n@rbw : would appreciate any thoughts outside of instantiating a wholly new pysnow.Client instance just to clear the attachment headers for making subsequent calls.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/114", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/114/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/114/events", "html_url": "https://github.com/rbw/pysnow/issues/114", "id": 455222520, "node_id": "MDU6SXNzdWU0NTUyMjI1MjA=", "number": 114, "title": "Cannot chain `.field()` in QueryBuilder", "user": {"login": "infrascripting", "id": 28990961, "node_id": "MDQ6VXNlcjI4OTkwOTYx", "avatar_url": "https://avatars1.githubusercontent.com/u/28990961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/infrascripting", "html_url": "https://github.com/infrascripting", "followers_url": "https://api.github.com/users/infrascripting/followers", "following_url": "https://api.github.com/users/infrascripting/following{/other_user}", "gists_url": "https://api.github.com/users/infrascripting/gists{/gist_id}", "starred_url": "https://api.github.com/users/infrascripting/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/infrascripting/subscriptions", "organizations_url": "https://api.github.com/users/infrascripting/orgs", "repos_url": "https://api.github.com/users/infrascripting/repos", "events_url": "https://api.github.com/users/infrascripting/events{/privacy}", "received_events_url": "https://api.github.com/users/infrascripting/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-06-12T13:43:27Z", "updated_at": "2019-06-13T12:06:20Z", "closed_at": "2019-06-13T12:06:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following data structure:\r\n\r\n```json\r\n{\r\n    \"provided_by\": {\r\n        \"link\": \"https://corp.service-now.com/api/now/table/cmdb_ci/3f3db990db3bebc40ecc79bb8c9619f9\",\r\n        \"value\": \"3f3db990db3bebc40ecc79bb8c9619f9\"\r\n    },\r\n}\r\n```\r\n\r\nI'm trying to build a query that finds the object whose `provided_by` has a value for the `value` field. For instance:\r\n\r\n```python\r\nprovider_val = '3f3db990db3bebc40ecc79bb8c9619f9'\r\nqb = (pysnow.QueryBuilder()\r\n      .field('provided_by').field('value').equals(provider_val)\r\n      )\r\n```\r\n\r\nThis returns all of the entries without filtering them. I've also tried the following:\r\n\r\n```python\r\nprovider_val = '3f3db990db3bebc40ecc79bb8c9619f9'\r\nqb = (pysnow.QueryBuilder()\r\n      .field('provided_by').contains(provider_val)\r\n      )\r\n```\r\n\r\nThis actually returns nothing.\r\n\r\nIs there any ways to filter against that `value` key in the `provided_by` field?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/113", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/113/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/113/events", "html_url": "https://github.com/rbw/pysnow/issues/113", "id": 454906218, "node_id": "MDU6SXNzdWU0NTQ5MDYyMTg=", "number": 113, "title": "not_contains needs to use NOT LIKE instead of NOTLIKE", "user": {"login": "cberg2048", "id": 28967702, "node_id": "MDQ6VXNlcjI4OTY3NzAy", "avatar_url": "https://avatars1.githubusercontent.com/u/28967702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cberg2048", "html_url": "https://github.com/cberg2048", "followers_url": "https://api.github.com/users/cberg2048/followers", "following_url": "https://api.github.com/users/cberg2048/following{/other_user}", "gists_url": "https://api.github.com/users/cberg2048/gists{/gist_id}", "starred_url": "https://api.github.com/users/cberg2048/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cberg2048/subscriptions", "organizations_url": "https://api.github.com/users/cberg2048/orgs", "repos_url": "https://api.github.com/users/cberg2048/repos", "events_url": "https://api.github.com/users/cberg2048/events{/privacy}", "received_events_url": "https://api.github.com/users/cberg2048/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-11T21:13:02Z", "updated_at": "2019-06-12T22:46:05Z", "closed_at": "2019-06-12T22:46:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "in query_builder.py the not_contains function needs to NOT LIKE instead of NOTLIKE as the first argument for add_condition. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/112", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/112/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/112/events", "html_url": "https://github.com/rbw/pysnow/issues/112", "id": 452465444, "node_id": "MDU6SXNzdWU0NTI0NjU0NDQ=", "number": 112, "title": "How to Query and Update Journal Tables - WorkNotes", "user": {"login": "dfields186", "id": 45521446, "node_id": "MDQ6VXNlcjQ1NTIxNDQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/45521446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfields186", "html_url": "https://github.com/dfields186", "followers_url": "https://api.github.com/users/dfields186/followers", "following_url": "https://api.github.com/users/dfields186/following{/other_user}", "gists_url": "https://api.github.com/users/dfields186/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfields186/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfields186/subscriptions", "organizations_url": "https://api.github.com/users/dfields186/orgs", "repos_url": "https://api.github.com/users/dfields186/repos", "events_url": "https://api.github.com/users/dfields186/events{/privacy}", "received_events_url": "https://api.github.com/users/dfields186/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-05T12:07:26Z", "updated_at": "2019-06-28T15:20:38Z", "closed_at": "2019-06-28T15:20:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need the ability to query and update the sys journal tables.  I would like the ability to query the journal table to retrieve a list of work notes and/or comments associated with an incident ticket.  I also would like the ability to post an updated work note to an incident ticket.  Perhaps these capabilities are already available - but its not clear to me how to go about doing it.  Any help is greatly appreciated!  \r\n\r\nThanks in advance!\r\nDavid\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/111", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/111/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/111/events", "html_url": "https://github.com/rbw/pysnow/issues/111", "id": 451044286, "node_id": "MDU6SXNzdWU0NTEwNDQyODY=", "number": 111, "title": "SSL issues", "user": {"login": "Jambon1510", "id": 19289018, "node_id": "MDQ6VXNlcjE5Mjg5MDE4", "avatar_url": "https://avatars0.githubusercontent.com/u/19289018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jambon1510", "html_url": "https://github.com/Jambon1510", "followers_url": "https://api.github.com/users/Jambon1510/followers", "following_url": "https://api.github.com/users/Jambon1510/following{/other_user}", "gists_url": "https://api.github.com/users/Jambon1510/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jambon1510/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jambon1510/subscriptions", "organizations_url": "https://api.github.com/users/Jambon1510/orgs", "repos_url": "https://api.github.com/users/Jambon1510/repos", "events_url": "https://api.github.com/users/Jambon1510/events{/privacy}", "received_events_url": "https://api.github.com/users/Jambon1510/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-01T04:45:18Z", "updated_at": "2019-06-28T15:20:44Z", "closed_at": "2019-06-28T15:20:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\n\r\n**current behavior**\r\nWhen I am disabling the SSL it works fine \r\n```\r\ns = requests.Session()\r\ns.proxies.update({'https': 'https://proxy_login:proxy_password@proxy:8080'})\r\ns.auth = requests.auth.HTTPBasicAuth(user, pwd)\r\ns.verify = False\r\n\r\n# Create client object\r\nc = pysnow.Client(instance=instance, session=s)\r\n\r\nresponse = incident.get(query={'number': id_number})\r\n\r\n```\r\n\r\nhowever I want to make sure there is no security breach but when removing \r\n`s.verify = False`\r\nI got the below message:\r\n\r\n> requests.exceptions.SSLError: HTTPSConnectionPool(host='servicesitqualif.service-now.com', port=443): Max retries exceeded with url: /api/now/table/incident?sysparm_query=number%3DICD003279020&sysparm_limit=10000&sysparm_offset=0&sysparm_display_value=False&sysparm_suppress_pagination_header=False&sysparm_exclude_reference_link=False&sysparm_view=&sysparm_fields= (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1056)')))\r\n\r\n\r\n**expected behavior behavior**\r\nBe able to instantiate the client and without disabling SSL\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/110", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/110/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/110/events", "html_url": "https://github.com/rbw/pysnow/issues/110", "id": 445229256, "node_id": "MDU6SXNzdWU0NDUyMjkyNTY=", "number": 110, "title": "update() not recognizing argument?", "user": {"login": "mpieklik", "id": 15162149, "node_id": "MDQ6VXNlcjE1MTYyMTQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/15162149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpieklik", "html_url": "https://github.com/mpieklik", "followers_url": "https://api.github.com/users/mpieklik/followers", "following_url": "https://api.github.com/users/mpieklik/following{/other_user}", "gists_url": "https://api.github.com/users/mpieklik/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpieklik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpieklik/subscriptions", "organizations_url": "https://api.github.com/users/mpieklik/orgs", "repos_url": "https://api.github.com/users/mpieklik/repos", "events_url": "https://api.github.com/users/mpieklik/events{/privacy}", "received_events_url": "https://api.github.com/users/mpieklik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-17T01:54:35Z", "updated_at": "2019-05-17T12:31:01Z", "closed_at": "2019-05-17T12:31:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\ntable.all()\r\n[{'sys_id': '<>', 'u_security_incident': {'link': 'https://<>.service-now.com/api/now/table/sn_si_incident/<>', 'value': '<>'}, 'sys_updated_by': 'mp', 'u_url': 'URL here', 'sys_created_on': '2019-05-16 23:56:28', 'sys_mod_count': '1', 'sys_updated_on': '2019-05-17 00:35:22', 'sys_tags': '', 'u_detection_type': 'ERA', 'sys_created_by': 'admin', 'u_detection_category': 'C2'}]. ***some info redacted\r\n\r\ndet_update = {'u_detection_category': 'C2', 'u_detection_type': 'ERA', 'u_url': 'URL here'}\r\n\r\nupdated_table = table.update(payload=det_update)\r\n\r\nupdated_table.update()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: update() missing 1 required positional argument: 'payload'\r\n\r\nNot sure if I'm doing something incorrect or update() is not recognizing the passed parameter.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/109", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/109/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/109/events", "html_url": "https://github.com/rbw/pysnow/issues/109", "id": 438782102, "node_id": "MDU6SXNzdWU0Mzg3ODIxMDI=", "number": 109, "title": "Paramters - Fields", "user": {"login": "bluedottech", "id": 44413309, "node_id": "MDQ6VXNlcjQ0NDEzMzA5", "avatar_url": "https://avatars3.githubusercontent.com/u/44413309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluedottech", "html_url": "https://github.com/bluedottech", "followers_url": "https://api.github.com/users/bluedottech/followers", "following_url": "https://api.github.com/users/bluedottech/following{/other_user}", "gists_url": "https://api.github.com/users/bluedottech/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluedottech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluedottech/subscriptions", "organizations_url": "https://api.github.com/users/bluedottech/orgs", "repos_url": "https://api.github.com/users/bluedottech/repos", "events_url": "https://api.github.com/users/bluedottech/events{/privacy}", "received_events_url": "https://api.github.com/users/bluedottech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-04-30T13:36:31Z", "updated_at": "2019-06-12T22:40:10Z", "closed_at": "2019-06-12T22:40:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Quick question about sysparm_fields. I'm trying to limit the number of fields in the response with parameters.fields(), but it does not seem to be passing the request properly. I'm still getting back all fields in the custom table. If I submit the same fields using curl, I get only the fields passed back.  \r\n\r\n>>> con.parameters.fields\r\n'short_description,account,number'\r\n\r\nIs there another method to pass the sysparm_fields list?\r\n\r\nEdit: after trying several different things, 2 minutes after posting the question I'm able to run it successfully with .get(query={'query': 'query'}, fields=['short_description', 'number', 'account']).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/108", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/108/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/108/events", "html_url": "https://github.com/rbw/pysnow/issues/108", "id": 436369696, "node_id": "MDU6SXNzdWU0MzYzNjk2OTY=", "number": 108, "title": "Support teamcenter", "user": {"login": "GitBib", "id": 15717621, "node_id": "MDQ6VXNlcjE1NzE3NjIx", "avatar_url": "https://avatars3.githubusercontent.com/u/15717621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GitBib", "html_url": "https://github.com/GitBib", "followers_url": "https://api.github.com/users/GitBib/followers", "following_url": "https://api.github.com/users/GitBib/following{/other_user}", "gists_url": "https://api.github.com/users/GitBib/gists{/gist_id}", "starred_url": "https://api.github.com/users/GitBib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GitBib/subscriptions", "organizations_url": "https://api.github.com/users/GitBib/orgs", "repos_url": "https://api.github.com/users/GitBib/repos", "events_url": "https://api.github.com/users/GitBib/events{/privacy}", "received_events_url": "https://api.github.com/users/GitBib/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-23T20:14:41Z", "updated_at": "2019-05-19T20:14:34Z", "closed_at": "2019-04-30T17:08:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I get the library to work with teamcenter?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/105", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/105/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/105/events", "html_url": "https://github.com/rbw/pysnow/issues/105", "id": 407660289, "node_id": "MDU6SXNzdWU0MDc2NjAyODk=", "number": 105, "title": "ConnectionResetError WinError 10054 with Django 2.1/Python3/Windows server", "user": {"login": "jwshive", "id": 135413, "node_id": "MDQ6VXNlcjEzNTQxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/135413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwshive", "html_url": "https://github.com/jwshive", "followers_url": "https://api.github.com/users/jwshive/followers", "following_url": "https://api.github.com/users/jwshive/following{/other_user}", "gists_url": "https://api.github.com/users/jwshive/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwshive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwshive/subscriptions", "organizations_url": "https://api.github.com/users/jwshive/orgs", "repos_url": "https://api.github.com/users/jwshive/repos", "events_url": "https://api.github.com/users/jwshive/events{/privacy}", "received_events_url": "https://api.github.com/users/jwshive/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-07T11:46:03Z", "updated_at": "2019-02-07T11:56:09Z", "closed_at": "2019-02-07T11:56:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "When attempting the run the following code within PyCharm running on Windows 7 using python 3.6.4 I'm getting the following:\r\n\r\nimport pysnow\r\nimport requests\r\n\r\n\r\ndef get_incidents():\r\n    s = requests.Session()\r\n    s.auth = requests.auth.HTTPBasicAuth('my_sweet_user', 'my_killer_password')\r\n    # Create client object\r\n    c = pysnow.Client(instance='my_epic_instance', session=s)\r\n    incident = c.resource(api_path='/table/incident').get(query={'number': 'INC5069114'})\r\n    return incident.all()\r\n\r\n\r\nprint(get_incidents())\r\n\r\n\r\nThe Error:\r\n\r\nConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\r\n\r\nThis same code runs on the same version of python on linux, but will result in this error with or without the Session. \r\n\r\nAny thoughts?\r\n\r\nFull Trace Attached\r\n[full_python3_django2_pysnow_trace.txt](https://github.com/rbw/pysnow/files/2840604/full_python3_django2_pysnow_trace.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/104", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/104/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/104/events", "html_url": "https://github.com/rbw/pysnow/issues/104", "id": 401868553, "node_id": "MDU6SXNzdWU0MDE4Njg1NTM=", "number": 104, "title": "Using generator method to stream all records not working on large data sets", "user": {"login": "RobinsonCW", "id": 19495375, "node_id": "MDQ6VXNlcjE5NDk1Mzc1", "avatar_url": "https://avatars2.githubusercontent.com/u/19495375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobinsonCW", "html_url": "https://github.com/RobinsonCW", "followers_url": "https://api.github.com/users/RobinsonCW/followers", "following_url": "https://api.github.com/users/RobinsonCW/following{/other_user}", "gists_url": "https://api.github.com/users/RobinsonCW/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobinsonCW/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobinsonCW/subscriptions", "organizations_url": "https://api.github.com/users/RobinsonCW/orgs", "repos_url": "https://api.github.com/users/RobinsonCW/repos", "events_url": "https://api.github.com/users/RobinsonCW/events{/privacy}", "received_events_url": "https://api.github.com/users/RobinsonCW/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-01-22T17:17:06Z", "updated_at": "2020-06-22T22:44:58Z", "closed_at": "2019-01-23T13:36:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I don't think this is an issue with the pysnow package per say but was curious if other had encountered this and what if any their workarounds were.\r\n\r\nI'm trying to grab all rows and columns from the incident table and dump the data to a csv that I can then load into a Postgres database with a copy from command.  \r\n\r\nThe error seems to truncate the data so I'm not getting a complete extract.  I have noticed that if I limit the columns it seems to work a little better.  For example, if I extract half of the columns in one run and the other half in another it works fine leading me to think it's something to do with the amount of data and not necessarily the content itself.  Adding a try except block around the writer.writerows line doesn't seem to help isolate the problem either and still results in an incomplete extract.\r\n\r\nDoes anyone have any ideas around how to correct this ijson issue?\r\n\r\n\r\n\r\nExample Code (1st loop through only)\r\n=========================\r\n        offset = 0\r\n        limit = 10000\r\n\r\n        response = incident.get(offset=offset, limit=limit, stream=True)\r\n\r\n        # Iterate over the result and write out each row to csv\r\n        with open('servicenow_incidents.csv', 'w', newline='', encoding='utf-8') as mycsv:\r\n            writer = csv.DictWriter(mycsv, fieldnames=fields, dialect='excel', quoting=csv.QUOTE_MINIMAL)\r\n            writer.writeheader()\r\n            writer.writerows(record for record in response.all())\r\n\r\nStacktrace\r\n=======\r\nijson.backends.python.UnexpectedSymbol: Unexpected symbol ']' at 19253199\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/103", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/103/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/103/events", "html_url": "https://github.com/rbw/pysnow/issues/103", "id": 391753986, "node_id": "MDU6SXNzdWUzOTE3NTM5ODY=", "number": 103, "title": "DeprecationWarning", "user": {"login": "fopina", "id": 636320, "node_id": "MDQ6VXNlcjYzNjMyMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/636320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fopina", "html_url": "https://github.com/fopina", "followers_url": "https://api.github.com/users/fopina/followers", "following_url": "https://api.github.com/users/fopina/following{/other_user}", "gists_url": "https://api.github.com/users/fopina/gists{/gist_id}", "starred_url": "https://api.github.com/users/fopina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fopina/subscriptions", "organizations_url": "https://api.github.com/users/fopina/orgs", "repos_url": "https://api.github.com/users/fopina/repos", "events_url": "https://api.github.com/users/fopina/events{/privacy}", "received_events_url": "https://api.github.com/users/fopina/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-17T15:08:21Z", "updated_at": "2018-12-17T15:47:44Z", "closed_at": "2018-12-17T15:47:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/rbw/pysnow/blob/master/pysnow/client.py#L17 why?\r\n\r\nThis is an important warning to be able to control and pysnow set it to always whenever we import it makes it required to use some weird logic to restore it to whatever setting it was defined previously (in order to be able to control this outside app scope)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/100", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/100/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/100/events", "html_url": "https://github.com/rbw/pysnow/issues/100", "id": 390670559, "node_id": "MDU6SXNzdWUzOTA2NzA1NTk=", "number": 100, "title": "`sysparm_limit` parameter in version London should be > 0", "user": {"login": "lcmwesterink", "id": 45846168, "node_id": "MDQ6VXNlcjQ1ODQ2MTY4", "avatar_url": "https://avatars2.githubusercontent.com/u/45846168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcmwesterink", "html_url": "https://github.com/lcmwesterink", "followers_url": "https://api.github.com/users/lcmwesterink/followers", "following_url": "https://api.github.com/users/lcmwesterink/following{/other_user}", "gists_url": "https://api.github.com/users/lcmwesterink/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcmwesterink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcmwesterink/subscriptions", "organizations_url": "https://api.github.com/users/lcmwesterink/orgs", "repos_url": "https://api.github.com/users/lcmwesterink/repos", "events_url": "https://api.github.com/users/lcmwesterink/events{/privacy}", "received_events_url": "https://api.github.com/users/lcmwesterink/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-13T13:06:18Z", "updated_at": "2018-12-17T15:28:06Z", "closed_at": "2018-12-17T15:27:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems that the `sysparm_limit` parameter should be >0 in version London. The current default value (0), yields the following error (copied response from browser):\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<response>\r\n    <error>\r\n        <detail>sysparm_limit value must be a positive integer</detail>\r\n        <message>Invalid value given for sysparm_limit</message>\r\n    </error>\r\n    <status>failure</status>\r\n</response>\r\n```\r\nThe returned HTTP status is 400.\r\n\r\nOlder versions (tested with Istanbul) using the same query returns HTTP 200 and if there are any matches for the given query, the results.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/98", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/98/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/98/events", "html_url": "https://github.com/rbw/pysnow/issues/98", "id": 366025998, "node_id": "MDU6SXNzdWUzNjYwMjU5OTg=", "number": 98, "title": "OAuth Client resource calls fail if the token is expired", "user": {"login": "siddweiker", "id": 584014, "node_id": "MDQ6VXNlcjU4NDAxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/584014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddweiker", "html_url": "https://github.com/siddweiker", "followers_url": "https://api.github.com/users/siddweiker/followers", "following_url": "https://api.github.com/users/siddweiker/following{/other_user}", "gists_url": "https://api.github.com/users/siddweiker/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddweiker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddweiker/subscriptions", "organizations_url": "https://api.github.com/users/siddweiker/orgs", "repos_url": "https://api.github.com/users/siddweiker/repos", "events_url": "https://api.github.com/users/siddweiker/events{/privacy}", "received_events_url": "https://api.github.com/users/siddweiker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-10-02T18:34:32Z", "updated_at": "2018-12-02T20:09:24Z", "closed_at": "2018-12-02T20:09:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Re-using a resource will cause the first call on an expired token to fail, instead of refreshing the token.\r\nCreating a new resource for every call will automatically refresh the token as expected so as a workaround, one can simply create the resource for every call.\r\n\r\n### Steps to reproduce:\r\n\r\n1. Create OAuth client\r\n2. Set token access lifetime to 10 seconds in ServiceNOW\r\n3. Create a resource for a table\r\n4. Do a get() call, wait for longer than 10 seconds then do another get call\r\n5. The call will fail with `oauthlib.oauth2.rfc6749.errors.MissingTokenError: (missing_token) Missing access token parameter.`\r\n6. Using:\r\n    ```\r\n    pysnow==0.7.4\r\n    requests==2.19.1\r\n    requests-oauthlib==1.0.0\r\n    ```\r\n\r\n### Code Example\r\nSetup an oauth client per the example in the [docs](https://pysnow.readthedocs.io/en/latest/full_examples/oauth_client.html)\r\n```python\r\nincident_resource = s.resource(api_path='/table/incident')\r\nrecord = incident_resource.get(query={}).first()\r\ntime.sleep(15)\r\n# This will fail because the token is expired\r\nrecord = incident_resource.get(query={}).first()\r\ntime.sleep(15)\r\nrecord = s.resource(api_path='/table/incident').get(query={}).first()\r\ntime.sleep(15)\r\n# This works fine and the token will be refreshed\r\nrecord = s.resource(api_path='/table/incident').get(query={}).first()\r\n```\r\n\r\n### Exception\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\\lib\\site-packages\\pysnow\\resource.py\", line 104, in get\r\n    return self._request.get(query, limit, offset, fields, stream)\r\n  File \"\\lib\\site-packages\\pysnow\\request.py\", line 75, in get\r\n    return self._get_response('GET', stream=stream)\r\n  File \"\\lib\\site-packages\\pysnow\\request.py\", line 44, in _get_response\r\n    response = self._session.request(method, self._url, stream=use_stream, params=params, **kwargs)\r\n  File \"\\lib\\site-packages\\requests_oauthlib\\oauth2_session.py\", line 343, in request\r\n    self.auto_refresh_url, auth=auth, **kwargs\r\n  File \"\\lib\\site-packages\\requests_oauthlib\\oauth2_session.py\", line 309, in refresh_token\r\n    self.token = self._client.parse_request_body_response(r.text, scope=self.scope)\r\n  File \"\\lib\\site-packages\\oauthlib\\oauth2\\rfc6749\\clients\\base.py\", line 411, in parse_request_body_response\r\n    self.token = parse_token_response(body, scope=scope)\r\n  File \"\\lib\\site-packages\\oauthlib\\oauth2\\rfc6749\\parameters.py\", line 379, in parse_token_response\r\n    validate_token_parameters(params)\r\n  File \"\\lib\\site-packages\\oauthlib\\oauth2\\rfc6749\\parameters.py\", line 389, in validate_token_parameters\r\n    raise MissingTokenError(description=\"Missing access token parameter.\")\r\noauthlib.oauth2.rfc6749.errors.MissingTokenError: (missing_token) Missing access token parameter.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/96", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/96/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/96/events", "html_url": "https://github.com/rbw/pysnow/issues/96", "id": 331703225, "node_id": "MDU6SXNzdWUzMzE3MDMyMjU=", "number": 96, "title": "Using a http proxy", "user": {"login": "kpirkle", "id": 32771205, "node_id": "MDQ6VXNlcjMyNzcxMjA1", "avatar_url": "https://avatars2.githubusercontent.com/u/32771205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpirkle", "html_url": "https://github.com/kpirkle", "followers_url": "https://api.github.com/users/kpirkle/followers", "following_url": "https://api.github.com/users/kpirkle/following{/other_user}", "gists_url": "https://api.github.com/users/kpirkle/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpirkle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpirkle/subscriptions", "organizations_url": "https://api.github.com/users/kpirkle/orgs", "repos_url": "https://api.github.com/users/kpirkle/repos", "events_url": "https://api.github.com/users/kpirkle/events{/privacy}", "received_events_url": "https://api.github.com/users/kpirkle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-12T18:31:09Z", "updated_at": "2018-07-08T17:22:49Z", "closed_at": "2018-07-08T17:22:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to use pysnow with a http proxy?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/93", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/93/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/93/events", "html_url": "https://github.com/rbw/pysnow/issues/93", "id": 315718004, "node_id": "MDU6SXNzdWUzMTU3MTgwMDQ=", "number": 93, "title": "Date query using querybuilder not working", "user": {"login": "DenverJ", "id": 5866405, "node_id": "MDQ6VXNlcjU4NjY0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5866405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DenverJ", "html_url": "https://github.com/DenverJ", "followers_url": "https://api.github.com/users/DenverJ/followers", "following_url": "https://api.github.com/users/DenverJ/following{/other_user}", "gists_url": "https://api.github.com/users/DenverJ/gists{/gist_id}", "starred_url": "https://api.github.com/users/DenverJ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DenverJ/subscriptions", "organizations_url": "https://api.github.com/users/DenverJ/orgs", "repos_url": "https://api.github.com/users/DenverJ/repos", "events_url": "https://api.github.com/users/DenverJ/events{/privacy}", "received_events_url": "https://api.github.com/users/DenverJ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-19T03:47:29Z", "updated_at": "2018-04-19T23:19:11Z", "closed_at": "2018-04-19T23:19:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Querying a table using the a string for a date as the querybuilder creates does not seem to be working. The query below copied from the GUI returns 10 records.\r\n\r\n`active=true^start_date>javascript:gs.dateGenerate('2018-04-19','18:59:00')^end_date<javascript:gs.dateGenerate('2018-04-19','20:00:00')`\r\n\r\nThe following identical query as created by the pysnow query builder returns no records at all.\r\n\r\n`active=true^start_date>2018-04-19 18:59:00^end_date<2018-04-19 20:00:00`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/92", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/92/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/92/events", "html_url": "https://github.com/rbw/pysnow/issues/92", "id": 312682047, "node_id": "MDU6SXNzdWUzMTI2ODIwNDc=", "number": 92, "title": "Table API GET pagination support", "user": {"login": "siddweiker", "id": 584014, "node_id": "MDQ6VXNlcjU4NDAxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/584014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddweiker", "html_url": "https://github.com/siddweiker", "followers_url": "https://api.github.com/users/siddweiker/followers", "following_url": "https://api.github.com/users/siddweiker/following{/other_user}", "gists_url": "https://api.github.com/users/siddweiker/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddweiker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddweiker/subscriptions", "organizations_url": "https://api.github.com/users/siddweiker/orgs", "repos_url": "https://api.github.com/users/siddweiker/repos", "events_url": "https://api.github.com/users/siddweiker/events{/privacy}", "received_events_url": "https://api.github.com/users/siddweiker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1664929464, "node_id": "MDU6TGFiZWwxNjY0OTI5NDY0", "url": "https://api.github.com/repos/rbw/pysnow/labels/pysnow-next", "name": "pysnow-next", "color": "e08dca", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-04-09T20:48:47Z", "updated_at": "2020-06-22T16:41:49Z", "closed_at": "2019-11-08T08:18:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Feature Request: Table API GET pagination support**\r\n\r\nWhen working with a large set of data, you eventually want to paginate the responses of the REST calls with a limit and offset. This request is to add some additional functionality to to the library to make this easier.\r\n\r\nServiceNow's Table API GET response headers do include a link to the next set of results, in addition the \"X-Total-Count\" header will contain the amount of rows returned. See https://developer.servicenow.com/app.do#!/rest_api_doc?id=c_TableAPI\r\n\r\nPossible ideas include adding a `link_next()` method to the Response class or a `paginate` flag to the Resource object which would then handle all the pagination for you.\r\n\r\nFor now I am using a generator function (with v0.6.5):\r\n```python\r\ndef paginate_get(resource, limit, *args, **kwargs):\r\n    offset = 0\r\n    kwargs['limit'] = limit\r\n    results = list(resource.get(*args, **kwargs).all())\r\n\r\n    while len(results) > 0:\r\n        for item in results:\r\n            yield item\r\n\r\n        # Increment offset and get the next page\r\n        offset += limit\r\n        results = list(resource.get(*args, **kwargs, offset=offset).all())\r\n```\r\nUsed like so:\r\n```python\r\nfor record in paginate_get(client.resource(api_path='/table/cmdb_ci_server'), limit=10, query={}):\r\n    print(record)\r\n```\r\n\r\nIf there is a better way to do this already, I would not mind seeing it and having an example added to the documentation. Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/87", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/87/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/87/events", "html_url": "https://github.com/rbw/pysnow/issues/87", "id": 301110922, "node_id": "MDU6SXNzdWUzMDExMTA5MjI=", "number": 87, "title": "[Feature] include 'link' attrib?", "user": {"login": "jcpunk", "id": 3534830, "node_id": "MDQ6VXNlcjM1MzQ4MzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3534830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcpunk", "html_url": "https://github.com/jcpunk", "followers_url": "https://api.github.com/users/jcpunk/followers", "following_url": "https://api.github.com/users/jcpunk/following{/other_user}", "gists_url": "https://api.github.com/users/jcpunk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcpunk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcpunk/subscriptions", "organizations_url": "https://api.github.com/users/jcpunk/orgs", "repos_url": "https://api.github.com/users/jcpunk/repos", "events_url": "https://api.github.com/users/jcpunk/events{/privacy}", "received_events_url": "https://api.github.com/users/jcpunk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-02-28T17:20:45Z", "updated_at": "2018-03-11T03:03:45Z", "closed_at": "2018-03-11T03:02:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I use this mostly for CMDB queries.  It would be helpful if, when the returned item has 'sys_id' and 'link' is not defined for the object, the 'link' attrib is populated with a link back to the raw object via the API.\r\n\r\nI'm not familiar with ObjectBuilder, so I'm not sure I could build this...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/80", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/80/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/80/events", "html_url": "https://github.com/rbw/pysnow/issues/80", "id": 296464467, "node_id": "MDU6SXNzdWUyOTY0NjQ0Njc=", "number": 80, "title": "sysparams not passed when making call to a table.", "user": {"login": "jwshive", "id": 135413, "node_id": "MDQ6VXNlcjEzNTQxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/135413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwshive", "html_url": "https://github.com/jwshive", "followers_url": "https://api.github.com/users/jwshive/followers", "following_url": "https://api.github.com/users/jwshive/following{/other_user}", "gists_url": "https://api.github.com/users/jwshive/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwshive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwshive/subscriptions", "organizations_url": "https://api.github.com/users/jwshive/orgs", "repos_url": "https://api.github.com/users/jwshive/repos", "events_url": "https://api.github.com/users/jwshive/events{/privacy}", "received_events_url": "https://api.github.com/users/jwshive/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-12T17:41:58Z", "updated_at": "2018-02-13T14:24:56Z", "closed_at": "2018-02-13T14:24:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a function\r\n`    def connect_to_instance(self, instance_name, username, password):\r\n        c = pysnow.Client(instance=instance_name, user=username, password=password)\r\n        c.parameters.add_custom({'sysparm_display_value': 'True', 'sysparm_exclude_reference_link': 'True'})\r\n        return c\r\n`\r\n\r\nMy querybuilder query:\r\n`\r\n(pysnow.QueryBuilder().field('assignment_group').equals(['https://my_instance.service-now.com/api/now/table/sys_user_group/my_group_value', 'my_group_value']).AND().field('state').not_equals('100'))\r\n`\r\n\r\nI get results back from service now, foreign key relationships are followed and I get the values I expect.\r\n\r\nBut when I try to query with the foreign key values and not the values from the actual change table:\r\n`\r\n(pysnow.QueryBuilder().field('assignment_group').equals('MY-SWEET-GROUP').AND().field('state').equals('Closed'))\r\n`\r\nI get no results back.\r\n\r\nIs there another place I need to set the client parameters?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/78", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/78/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/78/events", "html_url": "https://github.com/rbw/pysnow/issues/78", "id": 286923056, "node_id": "MDU6SXNzdWUyODY5MjMwNTY=", "number": 78, "title": "ModuleNotFoundError: No module named 'session'", "user": {"login": "kglg94", "id": 35241743, "node_id": "MDQ6VXNlcjM1MjQxNzQz", "avatar_url": "https://avatars1.githubusercontent.com/u/35241743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kglg94", "html_url": "https://github.com/kglg94", "followers_url": "https://api.github.com/users/kglg94/followers", "following_url": "https://api.github.com/users/kglg94/following{/other_user}", "gists_url": "https://api.github.com/users/kglg94/gists{/gist_id}", "starred_url": "https://api.github.com/users/kglg94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kglg94/subscriptions", "organizations_url": "https://api.github.com/users/kglg94/orgs", "repos_url": "https://api.github.com/users/kglg94/repos", "events_url": "https://api.github.com/users/kglg94/events{/privacy}", "received_events_url": "https://api.github.com/users/kglg94/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-08T23:31:13Z", "updated_at": "2018-01-10T15:15:45Z", "closed_at": "2018-01-10T15:15:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/35241743/34697662-b76a884c-f499-11e7-8d6c-ee34694a901a.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/74", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/74/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/74/events", "html_url": "https://github.com/rbw/pysnow/issues/74", "id": 283328018, "node_id": "MDU6SXNzdWUyODMzMjgwMTg=", "number": 74, "title": "Response.all() does not return an empty iterator if the table is empty", "user": {"login": "siddweiker", "id": 584014, "node_id": "MDQ6VXNlcjU4NDAxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/584014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddweiker", "html_url": "https://github.com/siddweiker", "followers_url": "https://api.github.com/users/siddweiker/followers", "following_url": "https://api.github.com/users/siddweiker/following{/other_user}", "gists_url": "https://api.github.com/users/siddweiker/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddweiker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddweiker/subscriptions", "organizations_url": "https://api.github.com/users/siddweiker/orgs", "repos_url": "https://api.github.com/users/siddweiker/repos", "events_url": "https://api.github.com/users/siddweiker/events{/privacy}", "received_events_url": "https://api.github.com/users/siddweiker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-12-19T18:32:38Z", "updated_at": "2017-12-21T13:59:57Z", "closed_at": "2017-12-20T15:15:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 3.6.3\r\nQuerying an empty table with all() does not return an empty iterator. You can run this against the free dev instance:\r\n```python\r\n>>> data = client.resource(api_path='/table/cmdb_ci_storage_server').get(query={}).all()\r\n>>> print([d for d in data])\r\n[{}]\r\n```\r\n\r\nIn some cases two empty dictionaries are returned.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/70", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/70/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/70/events", "html_url": "https://github.com/rbw/pysnow/issues/70", "id": 281920108, "node_id": "MDU6SXNzdWUyODE5MjAxMDg=", "number": 70, "title": "ModuleNotFoundError: No module named 'pysnow.legacy'", "user": {"login": "tarkatronic", "id": 37809, "node_id": "MDQ6VXNlcjM3ODA5", "avatar_url": "https://avatars0.githubusercontent.com/u/37809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tarkatronic", "html_url": "https://github.com/tarkatronic", "followers_url": "https://api.github.com/users/tarkatronic/followers", "following_url": "https://api.github.com/users/tarkatronic/following{/other_user}", "gists_url": "https://api.github.com/users/tarkatronic/gists{/gist_id}", "starred_url": "https://api.github.com/users/tarkatronic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tarkatronic/subscriptions", "organizations_url": "https://api.github.com/users/tarkatronic/orgs", "repos_url": "https://api.github.com/users/tarkatronic/repos", "events_url": "https://api.github.com/users/tarkatronic/events{/privacy}", "received_events_url": "https://api.github.com/users/tarkatronic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-13T22:33:14Z", "updated_at": "2017-12-14T00:06:36Z", "closed_at": "2017-12-14T00:03:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "After installing 0.6.0, I am receiving the error:\r\n\r\n```python\r\n>>> import pysnow\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"lib/python3.6/site-packages/pysnow/__init__.py\", line 4, in <module>\r\n    from .client import Client\r\n  File \"lib/python3.6/site-packages/pysnow/client.py\", line 9, in <module>\r\n    from .legacy.request import LegacyRequest\r\nModuleNotFoundError: No module named 'pysnow.legacy'\r\n>>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/68", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/68/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/68/events", "html_url": "https://github.com/rbw/pysnow/issues/68", "id": 280636905, "node_id": "MDU6SXNzdWUyODA2MzY5MDU=", "number": 68, "title": "Updating and deleting records not working", "user": {"login": "benpoliquin", "id": 2567956, "node_id": "MDQ6VXNlcjI1Njc5NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2567956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benpoliquin", "html_url": "https://github.com/benpoliquin", "followers_url": "https://api.github.com/users/benpoliquin/followers", "following_url": "https://api.github.com/users/benpoliquin/following{/other_user}", "gists_url": "https://api.github.com/users/benpoliquin/gists{/gist_id}", "starred_url": "https://api.github.com/users/benpoliquin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benpoliquin/subscriptions", "organizations_url": "https://api.github.com/users/benpoliquin/orgs", "repos_url": "https://api.github.com/users/benpoliquin/repos", "events_url": "https://api.github.com/users/benpoliquin/events{/privacy}", "received_events_url": "https://api.github.com/users/benpoliquin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-08T22:33:15Z", "updated_at": "2017-12-12T03:41:50Z", "closed_at": "2017-12-11T16:46:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using this library to build a quick CRUD app and am unable to update/delete a record. \r\n\r\nI am able to connect and get single/multiple records. When I update/delete it does nothing and then returns the original record. I am using your examples as well.\r\n\r\nExample tables I have tried incident, problem, and cmdb_ci_server. None work. Any Ideas?\r\n\r\nUsing a dev instance from https://developer.servicenow.com/ on version Jakarta. Tried with python2.8 & python3.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/57", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/57/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/57/events", "html_url": "https://github.com/rbw/pysnow/issues/57", "id": 267490547, "node_id": "MDU6SXNzdWUyNjc0OTA1NDc=", "number": 57, "title": "insertMultiple records supported?", "user": {"login": "samrocketman", "id": 875669, "node_id": "MDQ6VXNlcjg3NTY2OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/875669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrocketman", "html_url": "https://github.com/samrocketman", "followers_url": "https://api.github.com/users/samrocketman/followers", "following_url": "https://api.github.com/users/samrocketman/following{/other_user}", "gists_url": "https://api.github.com/users/samrocketman/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrocketman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrocketman/subscriptions", "organizations_url": "https://api.github.com/users/samrocketman/orgs", "repos_url": "https://api.github.com/users/samrocketman/repos", "events_url": "https://api.github.com/users/samrocketman/events{/privacy}", "received_events_url": "https://api.github.com/users/samrocketman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-10-22T19:14:11Z", "updated_at": "2017-10-30T19:43:52Z", "closed_at": "2017-10-30T15:28:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm able to dump many records and store them in a table.  I currently have a Python list of Records (each record having a unique `sys_id`).\r\n\r\nLooking at the [ServiceNow API docs it looks like `insertMultiple`](https://docs.servicenow.com/bundle/helsinki-servicenow-platform/page/integrate/web-services-apis/reference/r_InsertMultiple.html) is supported.\r\n\r\nIs that possible with the current version of this API client?  If not, this is a feature request :+1: .\r\n\r\nEdit:  Looks like the [JSON API also supports `insertMultple`](http://wiki.servicenow.com/index.php?title=JSONv2_Web_Service#insert).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/56", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/56/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/56/events", "html_url": "https://github.com/rbw/pysnow/issues/56", "id": 267456505, "node_id": "MDU6SXNzdWUyNjc0NTY1MDU=", "number": 56, "title": "QB equals() for lists containing integers fails", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807220, "node_id": "MDU6TGFiZWw0MTM4MDcyMjA=", "url": "https://api.github.com/repos/rbw/pysnow/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-22T11:20:30Z", "updated_at": "2017-10-30T15:02:41Z", "closed_at": "2017-10-30T15:02:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "```python\r\n>>> from pysnow import QueryBuilder as qb\r\n>>> qb().field('test').equals([1, 2, 3])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python2.7/dist-packages/pysnow/query.py\", line 70, in equals\r\n    return self._add_condition('IN', \",\".join(value), types=[str])\r\nTypeError: sequence item 0: expected string, int found\r\n```\r\n\r\n- Enable QB equals() `list` to ServiceNow string-type-query conversion to support integers\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/55", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/55/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/55/events", "html_url": "https://github.com/rbw/pysnow/issues/55", "id": 267366282, "node_id": "MDU6SXNzdWUyNjczNjYyODI=", "number": 55, "title": "IN operator in querybuilder causes an exception", "user": {"login": "samrocketman", "id": 875669, "node_id": "MDQ6VXNlcjg3NTY2OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/875669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrocketman", "html_url": "https://github.com/samrocketman", "followers_url": "https://api.github.com/users/samrocketman/followers", "following_url": "https://api.github.com/users/samrocketman/following{/other_user}", "gists_url": "https://api.github.com/users/samrocketman/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrocketman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrocketman/subscriptions", "organizations_url": "https://api.github.com/users/samrocketman/orgs", "repos_url": "https://api.github.com/users/samrocketman/repos", "events_url": "https://api.github.com/users/samrocketman/events{/privacy}", "received_events_url": "https://api.github.com/users/samrocketman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-10-21T09:28:37Z", "updated_at": "2017-10-22T21:20:31Z", "closed_at": "2017-10-22T21:19:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nTraceback (most recent call last):\r\n  File \"exporter.py\", line 169, in <module>\r\n    query = s.query(table='sc_catalog', query=QueryBuilder().field('sys_id').equals(catalogID))\r\n  File \"/home/sam/git/github/servicenow-servicecatalog-exporter/.venv/local/lib/python2.7/site-packages/pysnow/query.py\", line 70, in equals\r\n    return self._add_condition('IN', \",\".join(value), types=[str])\r\n  File \"/home/sam/git/github/servicenow-servicecatalog-exporter/.venv/local/lib/python2.7/site-packages/pysnow/query.py\", line 148, in _add_condition\r\n    raise QueryTypeError(\"Invalid type passed to %s() , expected: %s\" % (caller, types))\r\n```\r\n\r\nHere's the code which raised the exception:\r\nhttps://github.com/samrocketman/servicenow-servicecatalog-exporter/blob/82f1981fc10e6d1a7d872864fb20a6321bca8073/exporter.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/53", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/53/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/53/events", "html_url": "https://github.com/rbw/pysnow/issues/53", "id": 259325512, "node_id": "MDU6SXNzdWUyNTkzMjU1MTI=", "number": 53, "title": "Missing support for IN operator in QueryBuilder", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-20T22:50:56Z", "updated_at": "2017-09-27T20:45:22Z", "closed_at": "2017-09-27T20:45:22Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Used in:\r\n- is one of\r\n- is not one of\r\n\r\nFor integer and string fields\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/51", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/51/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/51/events", "html_url": "https://github.com/rbw/pysnow/issues/51", "id": 255924989, "node_id": "MDU6SXNzdWUyNTU5MjQ5ODk=", "number": 51, "title": "Enable / disable SSL in Client", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-07T12:47:36Z", "updated_at": "2017-09-09T01:56:59Z", "closed_at": "2017-09-09T01:56:59Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In some rare cases you might want to disable the use of SSL.\r\n\r\nAdd `use_ssl`  (default True) in `Client`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/32", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/32/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/32/events", "html_url": "https://github.com/rbw/pysnow/issues/32", "id": 224570116, "node_id": "MDU6SXNzdWUyMjQ1NzAxMTY=", "number": 32, "title": "requests lib verify option not available", "user": {"login": "ryanback", "id": 12394690, "node_id": "MDQ6VXNlcjEyMzk0Njkw", "avatar_url": "https://avatars2.githubusercontent.com/u/12394690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryanback", "html_url": "https://github.com/ryanback", "followers_url": "https://api.github.com/users/ryanback/followers", "following_url": "https://api.github.com/users/ryanback/following{/other_user}", "gists_url": "https://api.github.com/users/ryanback/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryanback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryanback/subscriptions", "organizations_url": "https://api.github.com/users/ryanback/orgs", "repos_url": "https://api.github.com/users/ryanback/repos", "events_url": "https://api.github.com/users/ryanback/events{/privacy}", "received_events_url": "https://api.github.com/users/ryanback/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807225, "node_id": "MDU6TGFiZWw0MTM4MDcyMjU=", "url": "https://api.github.com/repos/rbw/pysnow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-04-26T19:10:18Z", "updated_at": "2017-04-27T14:19:47Z", "closed_at": "2017-04-27T14:19:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "In our development environment, our SSL certs are not valid.  I do not see a way in pysnow to pass along verify=False.  I would recommend passing kwargs through to the requests init.  Any reason why there is no customization around that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/21", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/21/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/21/events", "html_url": "https://github.com/rbw/pysnow/issues/21", "id": 217700889, "node_id": "MDU6SXNzdWUyMTc3MDA4ODk=", "number": 21, "title": "can't get less than all values with sysparm_limit", "user": {"login": "Carles-Figuerola", "id": 13749641, "node_id": "MDQ6VXNlcjEzNzQ5NjQx", "avatar_url": "https://avatars0.githubusercontent.com/u/13749641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Carles-Figuerola", "html_url": "https://github.com/Carles-Figuerola", "followers_url": "https://api.github.com/users/Carles-Figuerola/followers", "following_url": "https://api.github.com/users/Carles-Figuerola/following{/other_user}", "gists_url": "https://api.github.com/users/Carles-Figuerola/gists{/gist_id}", "starred_url": "https://api.github.com/users/Carles-Figuerola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Carles-Figuerola/subscriptions", "organizations_url": "https://api.github.com/users/Carles-Figuerola/orgs", "repos_url": "https://api.github.com/users/Carles-Figuerola/repos", "events_url": "https://api.github.com/users/Carles-Figuerola/events{/privacy}", "received_events_url": "https://api.github.com/users/Carles-Figuerola/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 413807225, "node_id": "MDU6TGFiZWw0MTM4MDcyMjU=", "url": "https://api.github.com/repos/rbw/pysnow/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-03-28T21:40:13Z", "updated_at": "2017-04-05T15:13:34Z", "closed_at": "2017-04-05T15:13:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to get only a subset of a table, I saw that Client() has a default_payload and you can specify a sysparm_limit, but when I set it, when doing:\r\n\r\n```\r\ns = sn.Client('mysn', user, pwd, default_payload={\"sysparm_limit\": \"2\"})\r\nrequest = s.query(table='mytable', query={})\r\nresponse = request.get_all(fields=['sys_id', 'value'])\r\nfor each in response:\r\n  print each\r\n```\r\nI get all the results, but paged through my sysparm_limit. I would prefer (or at least have the option to) to see only N results total.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/12", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/12/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/12/events", "html_url": "https://github.com/rbw/pysnow/issues/12", "id": 198997897, "node_id": "MDU6SXNzdWUxOTg5OTc4OTc=", "number": 12, "title": "more detailed error messages on POST operations", "user": {"login": "sandwormusmc", "id": 3856303, "node_id": "MDQ6VXNlcjM4NTYzMDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3856303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandwormusmc", "html_url": "https://github.com/sandwormusmc", "followers_url": "https://api.github.com/users/sandwormusmc/followers", "following_url": "https://api.github.com/users/sandwormusmc/following{/other_user}", "gists_url": "https://api.github.com/users/sandwormusmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandwormusmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandwormusmc/subscriptions", "organizations_url": "https://api.github.com/users/sandwormusmc/orgs", "repos_url": "https://api.github.com/users/sandwormusmc/repos", "events_url": "https://api.github.com/users/sandwormusmc/events{/privacy}", "received_events_url": "https://api.github.com/users/sandwormusmc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-01-05T16:28:52Z", "updated_at": "2017-02-24T01:05:56Z", "closed_at": "2017-02-24T01:05:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the code seems to perform a POST operation, and only check the HTTP response code.  In Request::_get_content, moving up the content_json retrieval and checking for the existence of error, we can get more detailed errors as well, pointing out data formatting errors and column requirements and so on.\r\n\r\nThese kind of things are probably second nature for others with extensive experience, but for a beginner like me it was not apparent what I was doing wrong, until I checked the API Explorer and realized there were more detailed errors available in the response.\r\n\r\nMaybe some additional error checking is necessary, for existence of content_json['error']['message'] and detail, I'm not sure though...\r\n\r\n```\r\n246a247,248\r\n>         content_json = response.json()\r\n> \r\n255,257c257,262\r\n<             raise UnexpectedResponse(\"Unexpected HTTP response code. Expected: 201, got %d\" % response.status_code)\r\n< \r\n<         content_json = response.json()\r\n\r\n> \t    if 'error' in content_json:\r\n>                 raise UnexpectedResponse(\"Unexpected HTTP response code. Expected: 201, got %d. \\nError: %s\\nDetails: %s\" % (response.status_code,\r\n> \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     content_json['error']['message'],\r\n> \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     content_json['error']['detail']))\r\n> \t    else:\r\n>                 raise UnexpectedResponse(\"Unexpected HTTP response code. Expected: 201, got %d.\" % response.status_code)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/9", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/9/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/9/events", "html_url": "https://github.com/rbw/pysnow/issues/9", "id": 188931333, "node_id": "MDU6SXNzdWUxODg5MzEzMzM=", "number": 9, "title": "Ability to upload attachments using the Attachment API", "user": {"login": "ryancurrah", "id": 6209771, "node_id": "MDQ6VXNlcjYyMDk3NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6209771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryancurrah", "html_url": "https://github.com/ryancurrah", "followers_url": "https://api.github.com/users/ryancurrah/followers", "following_url": "https://api.github.com/users/ryancurrah/following{/other_user}", "gists_url": "https://api.github.com/users/ryancurrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryancurrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryancurrah/subscriptions", "organizations_url": "https://api.github.com/users/ryancurrah/orgs", "repos_url": "https://api.github.com/users/ryancurrah/repos", "events_url": "https://api.github.com/users/ryancurrah/events{/privacy}", "received_events_url": "https://api.github.com/users/ryancurrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-12T19:56:30Z", "updated_at": "2017-01-03T23:39:18Z", "closed_at": "2017-01-03T23:39:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Would you be open to a Pull Request with an additional function in the Client class that uploads attachments? \r\n\r\n```bash\r\ncurl \"https://dev00000.service-now.com/api/now/attachment/file?table_name=change_request&table_sys_id=414d1d584f072200745e3b728110c735&file_name=screenshot.png\" \\\r\n--request POST \\\r\n--header \"Accept:application/json\" \\\r\n--user 'admin':'admin'\r\n--header \"Content-Type: \"\r\n-F \"uploadFile=@screenshot.png\" \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/8", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/8/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/8/events", "html_url": "https://github.com/rbw/pysnow/issues/8", "id": 184975180, "node_id": "MDU6SXNzdWUxODQ5NzUxODA=", "number": 8, "title": "Access to underlaying `requests` object", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-24T22:50:41Z", "updated_at": "2017-01-09T23:55:01Z", "closed_at": "2017-01-09T23:55:01Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Enable easy access to the `requests` object\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/7", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/7/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/7/events", "html_url": "https://github.com/rbw/pysnow/issues/7", "id": 183892599, "node_id": "MDU6SXNzdWUxODM4OTI1OTk=", "number": 7, "title": "update() and insert() returns", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-19T08:03:44Z", "updated_at": "2017-01-09T23:55:07Z", "closed_at": "2017-01-09T23:55:07Z", "author_association": "OWNER", "active_lock_reason": null, "body": "These methods currently returns a dictionary contained in a list, a list always 1 in length, which makes it useless.\nSmall change, but it causes API breakage.\nPerhaps deprecate somehow.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/6", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/6/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/6/events", "html_url": "https://github.com/rbw/pysnow/issues/6", "id": 183804386, "node_id": "MDU6SXNzdWUxODM4MDQzODY=", "number": 6, "title": "Add code coverage (travis-ci -> coveralls)", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-18T21:12:27Z", "updated_at": "2016-10-28T14:50:21Z", "closed_at": "2016-10-28T14:50:21Z", "author_association": "OWNER", "active_lock_reason": null, "body": "```\ninstall:\n  - pip install python-coveralls\n  - pip install coverage\nscript:\n  - nosetests --with-coverage\nafter_success:  \n  - coveralls\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/5", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/5/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/5/events", "html_url": "https://github.com/rbw/pysnow/issues/5", "id": 183798397, "node_id": "MDU6SXNzdWUxODM3OTgzOTc=", "number": 5, "title": "Python 2.6 (some versions) SSL issue", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807220, "node_id": "MDU6TGFiZWw0MTM4MDcyMjA=", "url": "https://api.github.com/repos/rbw/pysnow/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-10-18T20:46:30Z", "updated_at": "2016-11-03T10:39:49Z", "closed_at": "2016-11-03T10:39:49Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Travis build fails for 2.6. However, no issues with Python 2.6 that comes with RHEL6.\n\nInfo:\nhttps://github.com/kennethreitz/requests/issues/2022\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/4", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/4/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/4/events", "html_url": "https://github.com/rbw/pysnow/issues/4", "id": 183797345, "node_id": "MDU6SXNzdWUxODM3OTczNDU=", "number": 4, "title": "test for get_all()", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-10-18T20:41:59Z", "updated_at": "2016-10-24T22:47:07Z", "closed_at": "2016-10-24T22:47:07Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Write test for get_all() with linked results\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/3", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/3/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/3/events", "html_url": "https://github.com/rbw/pysnow/issues/3", "id": 183797068, "node_id": "MDU6SXNzdWUxODM3OTcwNjg=", "number": 3, "title": "test for filtered get_one() / get_all()", "user": {"login": "rbw", "id": 1263192, "node_id": "MDQ6VXNlcjEyNjMxOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1263192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbw", "html_url": "https://github.com/rbw", "followers_url": "https://api.github.com/users/rbw/followers", "following_url": "https://api.github.com/users/rbw/following{/other_user}", "gists_url": "https://api.github.com/users/rbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbw/subscriptions", "organizations_url": "https://api.github.com/users/rbw/orgs", "repos_url": "https://api.github.com/users/rbw/repos", "events_url": "https://api.github.com/users/rbw/events{/privacy}", "received_events_url": "https://api.github.com/users/rbw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413807222, "node_id": "MDU6TGFiZWw0MTM4MDcyMjI=", "url": "https://api.github.com/repos/rbw/pysnow/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-18T20:40:45Z", "updated_at": "2016-11-03T10:36:29Z", "closed_at": "2016-11-03T10:36:28Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Write test for get_one() filter, i.e. get_one(fields=['number', 'sys_id'])\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/rbw/pysnow/issues/1", "repository_url": "https://api.github.com/repos/rbw/pysnow", "labels_url": "https://api.github.com/repos/rbw/pysnow/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/rbw/pysnow/issues/1/comments", "events_url": "https://api.github.com/repos/rbw/pysnow/issues/1/events", "html_url": "https://github.com/rbw/pysnow/issues/1", "id": 180738613, "node_id": "MDU6SXNzdWUxODA3Mzg2MTM=", "number": 1, "title": "setup.py requires `requests` library ", "user": {"login": "dkiser", "id": 5595213, "node_id": "MDQ6VXNlcjU1OTUyMTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5595213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkiser", "html_url": "https://github.com/dkiser", "followers_url": "https://api.github.com/users/dkiser/followers", "following_url": "https://api.github.com/users/dkiser/following{/other_user}", "gists_url": "https://api.github.com/users/dkiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkiser/subscriptions", "organizations_url": "https://api.github.com/users/dkiser/orgs", "repos_url": "https://api.github.com/users/dkiser/repos", "events_url": "https://api.github.com/users/dkiser/events{/privacy}", "received_events_url": "https://api.github.com/users/dkiser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-03T20:29:10Z", "updated_at": "2016-10-04T18:49:18Z", "closed_at": "2016-10-04T18:49:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/rbw0/pysnow/blob/master/setup.py#L69 pulls in `requests` as a pre-req and thus causes a chicken and the egg problem.\n\nPlease break out version into its own module that doesn't rely on an import path for `requests`.  This should allow users to freshly install package.\n", "performed_via_github_app": null, "score": 1.0}]}