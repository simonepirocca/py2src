{"total_count": 8, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ask/mode/issues/53", "repository_url": "https://api.github.com/repos/ask/mode", "labels_url": "https://api.github.com/repos/ask/mode/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/ask/mode/issues/53/comments", "events_url": "https://api.github.com/repos/ask/mode/issues/53/events", "html_url": "https://github.com/ask/mode/issues/53", "id": 540523253, "node_id": "MDU6SXNzdWU1NDA1MjMyNTM=", "number": 53, "title": "Missing import: typing_extensions", "user": {"login": "austinnichols101", "id": 6962379, "node_id": "MDQ6VXNlcjY5NjIzNzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6962379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinnichols101", "html_url": "https://github.com/austinnichols101", "followers_url": "https://api.github.com/users/austinnichols101/followers", "following_url": "https://api.github.com/users/austinnichols101/following{/other_user}", "gists_url": "https://api.github.com/users/austinnichols101/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinnichols101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinnichols101/subscriptions", "organizations_url": "https://api.github.com/users/austinnichols101/orgs", "repos_url": "https://api.github.com/users/austinnichols101/repos", "events_url": "https://api.github.com/users/austinnichols101/events{/privacy}", "received_events_url": "https://api.github.com/users/austinnichols101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-19T19:46:36Z", "updated_at": "2020-01-07T21:24:15Z", "closed_at": "2020-01-07T21:21:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Versions 4.1.4 through 4.1.6 are missing an import statement for `typing_extensions`.  The problem was introduced with commit 3d15d1efcedaf0ea20a185ceae5b97e35ac4bac9.\r\n\r\nHere is an example of a Faust 1.8.1 application running under python 3.7.3 with mode 4.1.6 demonstrating the error:\r\n\r\n```\r\nStart the faust worker...\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/faust\", line 5, in <module>\r\n    from faust.cli.faust import cli\r\n  File \"/usr/local/lib/python3.7/dist-packages/faust/cli/__init__.py\", line 2, in <module>\r\n    from .base import AppCommand, Command, argument, call_command, option\r\n  File \"/usr/local/lib/python3.7/dist-packages/faust/cli/base.py\", line 34, in <module>\r\n    from mode import Service, ServiceT, Worker\r\n  File \"/usr/local/lib/python3.7/dist-packages/mode/__init__.py\", line 127, in __getattr__\r\n    object_origins[name], None, None, [name])\r\n  File \"/usr/local/lib/python3.7/dist-packages/mode/services.py\", line 31, in <module>\r\n    from .timers import timer_intervals\r\n  File \"/usr/local/lib/python3.7/dist-packages/mode/timers.py\", line 5, in <module>\r\n    from .utils.logging import get_logger\r\n  File \"/usr/local/lib/python3.7/dist-packages/mode/utils/logging.py\", line 48, in <module>\r\n    from typing_extensions import Protocol\r\nModuleNotFoundError: No module named 'typing_extensions'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ask/mode/issues/52", "repository_url": "https://api.github.com/repos/ask/mode", "labels_url": "https://api.github.com/repos/ask/mode/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/ask/mode/issues/52/comments", "events_url": "https://api.github.com/repos/ask/mode/issues/52/events", "html_url": "https://github.com/ask/mode/issues/52", "id": 537155319, "node_id": "MDU6SXNzdWU1MzcxNTUzMTk=", "number": 52, "title": "Faust build fails due to import error in utils/logging.py", "user": {"login": "pbhoiwala", "id": 19194612, "node_id": "MDQ6VXNlcjE5MTk0NjEy", "avatar_url": "https://avatars2.githubusercontent.com/u/19194612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pbhoiwala", "html_url": "https://github.com/pbhoiwala", "followers_url": "https://api.github.com/users/pbhoiwala/followers", "following_url": "https://api.github.com/users/pbhoiwala/following{/other_user}", "gists_url": "https://api.github.com/users/pbhoiwala/gists{/gist_id}", "starred_url": "https://api.github.com/users/pbhoiwala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pbhoiwala/subscriptions", "organizations_url": "https://api.github.com/users/pbhoiwala/orgs", "repos_url": "https://api.github.com/users/pbhoiwala/repos", "events_url": "https://api.github.com/users/pbhoiwala/events{/privacy}", "received_events_url": "https://api.github.com/users/pbhoiwala/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-12T18:56:59Z", "updated_at": "2019-12-12T21:35:14Z", "closed_at": "2019-12-12T21:35:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Mode.\r\n\r\n## Steps to reproduce\r\n\r\nI'm using Faust in one of my projects which is using the `mode` module. The new version for mode (4.1.5) seems to have an import issue in `utils/logging.py`. This is causing build issues in faust.\r\n\r\n## Expected behavior\r\n\r\nBuild to not fail due to import error.\r\n\r\n## Actual behavior\r\n\r\nBuild fails due to import error.\r\n\r\n## Full traceback\r\n\r\n```\r\nTraceback (most recent call last):\r\nserver_1          |   File \"/usr/local/bin/faust\", line 5, in <module>\r\nserver_1          |     from faust.cli.faust import cli\r\nserver_1          |   File \"/usr/local/lib/python3.8/site-packages/faust/cli/__init__.py\", line 2, in <module>\r\nserver_1          |     from .base import AppCommand, Command, argument, call_command, option\r\nserver_1          |   File \"/usr/local/lib/python3.8/site-packages/faust/cli/base.py\", line 34, in <module>\r\nserver_1          |     from mode import Service, ServiceT, Worker\r\nserver_1          |   File \"/usr/local/lib/python3.8/site-packages/mode/__init__.py\", line 126, in __getattr__\r\nserver_1          |     module = __import__(\r\nserver_1          |   File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 31, in <module>\r\nserver_1          |     from .timers import timer_intervals\r\nserver_1          |   File \"/usr/local/lib/python3.8/site-packages/mode/timers.py\", line 5, in <module>\r\nserver_1          |     from .utils.logging import get_logger\r\nserver_1          |   File \"/usr/local/lib/python3.8/site-packages/mode/utils/logging.py\", line 47, in <module>\r\nserver_1          |     from typing_extensions import Protocol\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.8\r\n* Mode version: 4.1.5\r\n* Operating system: macOS Catalina 10.15.1\r\n\r\n# Suggestions to fix this\r\nAdd `typing_extensions` in `requirements.txt` file and rebuild.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ask/mode/issues/50", "repository_url": "https://api.github.com/repos/ask/mode", "labels_url": "https://api.github.com/repos/ask/mode/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/ask/mode/issues/50/comments", "events_url": "https://api.github.com/repos/ask/mode/issues/50/events", "html_url": "https://github.com/ask/mode/issues/50", "id": 480230397, "node_id": "MDU6SXNzdWU0ODAyMzAzOTc=", "number": 50, "title": "ServiceProxy and Supervisor doesn't handle _crash_reason", "user": {"login": "jsurloppe", "id": 20650010, "node_id": "MDQ6VXNlcjIwNjUwMDEw", "avatar_url": "https://avatars2.githubusercontent.com/u/20650010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsurloppe", "html_url": "https://github.com/jsurloppe", "followers_url": "https://api.github.com/users/jsurloppe/followers", "following_url": "https://api.github.com/users/jsurloppe/following{/other_user}", "gists_url": "https://api.github.com/users/jsurloppe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsurloppe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsurloppe/subscriptions", "organizations_url": "https://api.github.com/users/jsurloppe/orgs", "repos_url": "https://api.github.com/users/jsurloppe/repos", "events_url": "https://api.github.com/users/jsurloppe/events{/privacy}", "received_events_url": "https://api.github.com/users/jsurloppe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-13T15:43:44Z", "updated_at": "2019-09-04T22:16:02Z", "closed_at": "2019-09-04T22:16:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Firstly, thanks for writing that library, i get more and more fond of it!\r\n\r\n## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Mode.\r\n\r\n## Steps to reproduce\r\n\r\nUsing OneForAllSupervisor with a ServiceProxy, raising an exception in a supervised service.\r\n\r\n## Expected behavior\r\n\r\nThe proxy class should go to the _crash_reason attribute of the Service.\r\n\r\n## Actual behavior\r\n\r\nIt doesn't and raise AttributeError.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[^--OneForAllSupervisor]: Crashed reason=AttributeError(\"'SomeServiceProxy' object has no attribute '_crash_reason'\") \r\nTraceback (most recent call last):\r\n  File \"/venvpath/lib/python3.7/site-packages/mode/services.py\", line 762, in _execute_task\r\n    await task\r\n  File \"/venvpath/lib/python3.7/site-packages/mode/supervisors.py\", line 140, in _supervisor\r\n    await self.restart_services(to_restart)\r\n  File \"/venvpath/lib/python3.7/site-packages/mode/supervisors.py\", line 206, in restart_services\r\n    await self.restart_service(service)\r\n  File \"/venvpath/lib/python3.7/site-packages/mode/supervisors.py\", line 176, in restart_service\r\n    service, cast(Service, service)._crash_reason,\r\nAttributeError: 'SomeServiceProxy' object has no attribute '_crash_reason'\r\n```\r\n\r\n# Versions\r\n\r\n* Python version 3.7\r\n* Mode version 4.0.1\r\n* Operating system Linux", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ask/mode/issues/46", "repository_url": "https://api.github.com/repos/ask/mode", "labels_url": "https://api.github.com/repos/ask/mode/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/ask/mode/issues/46/comments", "events_url": "https://api.github.com/repos/ask/mode/issues/46/events", "html_url": "https://github.com/ask/mode/issues/46", "id": 435229189, "node_id": "MDU6SXNzdWU0MzUyMjkxODk=", "number": 46, "title": "'mode.Worker' overrides logging configuration", "user": {"login": "nickgashkov", "id": 8746283, "node_id": "MDQ6VXNlcjg3NDYyODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/8746283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickgashkov", "html_url": "https://github.com/nickgashkov", "followers_url": "https://api.github.com/users/nickgashkov/followers", "following_url": "https://api.github.com/users/nickgashkov/following{/other_user}", "gists_url": "https://api.github.com/users/nickgashkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickgashkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickgashkov/subscriptions", "organizations_url": "https://api.github.com/users/nickgashkov/orgs", "repos_url": "https://api.github.com/users/nickgashkov/repos", "events_url": "https://api.github.com/users/nickgashkov/events{/privacy}", "received_events_url": "https://api.github.com/users/nickgashkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-19T16:17:15Z", "updated_at": "2019-09-05T08:28:27Z", "closed_at": "2019-09-04T21:49:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Mode.\r\n\r\n## Steps to reproduce\r\n\r\n1. Setup logging by yourself.\r\n2. Call `mode.Worker.execute_from_commandline`.\r\n\r\nRelevant code snippet:\r\n\r\n```python\r\nimport mode\r\nimport logging.config\r\n\r\n\r\nif __name__ == '__main__':\r\n    logging.config.dictConfig(\r\n        ...  # Some kind of setup.\r\n    )\r\n\r\n    service = mode.Service()\r\n    worker = mode.Worker(service)\r\n    worker.execute_from_commandline()\r\n```\r\n## Expected behavior\r\n\r\nLogging behaves as it was configured (e.g. log records are formatted based on `logging.config`).\r\n\r\n## Actual behavior\r\n\r\nLogging configuration is overridden by `mode.Worker#_setup_logging`.\r\n\r\n## Full traceback\r\n\r\n\u2014\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.3\r\n* Mode version: 3.0.7\r\n* Operating system: macOS", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ask/mode/issues/9", "repository_url": "https://api.github.com/repos/ask/mode", "labels_url": "https://api.github.com/repos/ask/mode/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/ask/mode/issues/9/comments", "events_url": "https://api.github.com/repos/ask/mode/issues/9/events", "html_url": "https://github.com/ask/mode/issues/9", "id": 348752455, "node_id": "MDU6SXNzdWUzNDg3NTI0NTU=", "number": 9, "title": "Failed to start example service.py", "user": {"login": "dchimeno", "id": 36852967, "node_id": "MDQ6VXNlcjM2ODUyOTY3", "avatar_url": "https://avatars3.githubusercontent.com/u/36852967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dchimeno", "html_url": "https://github.com/dchimeno", "followers_url": "https://api.github.com/users/dchimeno/followers", "following_url": "https://api.github.com/users/dchimeno/following{/other_user}", "gists_url": "https://api.github.com/users/dchimeno/gists{/gist_id}", "starred_url": "https://api.github.com/users/dchimeno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dchimeno/subscriptions", "organizations_url": "https://api.github.com/users/dchimeno/orgs", "repos_url": "https://api.github.com/users/dchimeno/repos", "events_url": "https://api.github.com/users/dchimeno/events{/privacy}", "received_events_url": "https://api.github.com/users/dchimeno/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-08T14:31:00Z", "updated_at": "2018-10-05T16:12:02Z", "closed_at": "2018-10-05T16:12:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nStarting example/service.py with debug=True\r\n````python\r\nimport mode\r\n\r\nclass MyService(mode.Service):\r\n\r\n    async def on_started(self) -> None:\r\n        self.log.info('Service started (hit ctrl+C to exit).')\r\n\r\n    @mode.Service.task\r\n    async def _background_task(self) -> None:\r\n        print('BACKGROUND TASK STARTING')\r\n        while not self.should_stop:\r\n            await self.sleep(1.0)\r\n            print('BACKGROUND SERVICE WAKING UP')\r\n\r\n\r\nif __name__ == '__main__':\r\n    mode.Worker(\r\n        MyService(),\r\n        debug=True,\r\n        loglevel='INFO',\r\n        logfile=None,  # stderr\r\n).execute_from_commandline()\r\n````\r\n\r\n````\r\npython app.py\r\n`````\r\n\r\n```pytb\r\n[2018-08-08 16:21:05,376: ERROR]: [^Worker]: Error: TypeError('Use `self.add_context(ctx)` for non-async context')\r\nTraceback (most recent call last):\r\n  File \"/path/python3.7/site-packages/mode/worker.py\", line 189, in execute_from_commandline\r\n    self.loop.run_until_complete(self.start())\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/asyncio/base_events.py\", line 568, in run_until_complete\r\n    return future.result()\r\n  File \"/path/python3.7/site-packages/mode/worker.py\", line 241, in start\r\n    await super().start()\r\n  File \"/path/python3.7/site-packages/mode/services.py\", line 657, in start\r\n    await self._default_start()\r\n  File \"/path/python3.7/site-packages/mode/services.py\", line 662, in _default_start\r\n    await self._actually_start()\r\n  File \"/path/python3.7/site-packages/mode/services.py\", line 668, in _actually_start\r\n    await self.on_first_start()\r\n  File \"/path/python3.7/site-packages/mode/worker.py\", line 118, in on_first_start\r\n    await self.default_on_first_start()\r\n  File \"/path/python3.7/site-packages/mode/worker.py\", line 124, in default_on_first_start\r\n    await self._add_monitor()\r\n  File \"/path/python3.7/site-packages/mode/worker.py\", line 254, in _add_monitor\r\n    await self.add_async_context(monitor)\r\n  File \"/path/python3.7/site-packages/mode/services.py\", line 525, in add_async_context\r\n    'Use `self.add_context(ctx)` for non-async context')\r\nTypeError: Use `self.add_context(ctx)` for non-async context\r\n```\r\n\r\n# Versions\r\n\r\n* Python version 3.7.0\r\n* Mode version: 1.15.0\r\n* aiomonitor: aiomonitor             0.3.1\r\n* Operating system: Lastest Macos \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ask/mode/issues/8", "repository_url": "https://api.github.com/repos/ask/mode", "labels_url": "https://api.github.com/repos/ask/mode/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/ask/mode/issues/8/comments", "events_url": "https://api.github.com/repos/ask/mode/issues/8/events", "html_url": "https://github.com/ask/mode/issues/8", "id": 342958834, "node_id": "MDU6SXNzdWUzNDI5NTg4MzQ=", "number": 8, "title": "Q: multiprocessing/fork", "user": {"login": "jaddison", "id": 101148, "node_id": "MDQ6VXNlcjEwMTE0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/101148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaddison", "html_url": "https://github.com/jaddison", "followers_url": "https://api.github.com/users/jaddison/followers", "following_url": "https://api.github.com/users/jaddison/following{/other_user}", "gists_url": "https://api.github.com/users/jaddison/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaddison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaddison/subscriptions", "organizations_url": "https://api.github.com/users/jaddison/orgs", "repos_url": "https://api.github.com/users/jaddison/repos", "events_url": "https://api.github.com/users/jaddison/events{/privacy}", "received_events_url": "https://api.github.com/users/jaddison/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-20T03:16:53Z", "updated_at": "2018-08-10T16:06:53Z", "closed_at": "2018-08-10T16:06:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @ask, hope you don't mind another question. I'm hoping to fork the initial process running my `Services`, to take advantage of multiple cores. What is the best approach given `mode`'s structure?\r\n\r\nI've looked at the source of gunicorn for hints, but I'd like to get some feedback from you as well - specifically in regards to a `mode` compatible approach.\r\n\r\nFor context, I've got an `Application` class derived from `mode.Worker`, and a number of `mode.Service` subclasses as well that are initialized on `Application` instantiation.\r\n\r\nI appreciate any feedback you might have, thank you.\r\n\r\n---\r\n**Edit:** I see use of `concurrent.futures.ProcessPoolExecutor` (https://pymotw.com/3/asyncio/executors.html#processes). For more detail, I actually have two reasons for wanting to run `asyncio`/`mode` process-based work:\r\n\r\n* gunicorn-like handling of incoming requests so they're spread across cores\r\n* running computationally intensive tasks in parallel across cores; I believe `ProcessPoolExecutor` makes sense here\r\n\r\nThose two scenarios would be happening on separate systems (one is a frontend `mode.Service` providing request validation, the other is a backend `mode.Service` performing things like image renders)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ask/mode/issues/7", "repository_url": "https://api.github.com/repos/ask/mode", "labels_url": "https://api.github.com/repos/ask/mode/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/ask/mode/issues/7/comments", "events_url": "https://api.github.com/repos/ask/mode/issues/7/events", "html_url": "https://github.com/ask/mode/issues/7", "id": 338633916, "node_id": "MDU6SXNzdWUzMzg2MzM5MTY=", "number": 7, "title": "Q: root/package logger configuration", "user": {"login": "jaddison", "id": 101148, "node_id": "MDQ6VXNlcjEwMTE0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/101148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaddison", "html_url": "https://github.com/jaddison", "followers_url": "https://api.github.com/users/jaddison/followers", "following_url": "https://api.github.com/users/jaddison/following{/other_user}", "gists_url": "https://api.github.com/users/jaddison/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaddison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaddison/subscriptions", "organizations_url": "https://api.github.com/users/jaddison/orgs", "repos_url": "https://api.github.com/users/jaddison/repos", "events_url": "https://api.github.com/users/jaddison/events{/privacy}", "received_events_url": "https://api.github.com/users/jaddison/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-05T15:57:27Z", "updated_at": "2018-07-09T07:44:28Z", "closed_at": "2018-07-09T03:10:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I hope asking questions via github issues is considered acceptable - not sure how else to do so other than tweeting.\r\n\r\nProject package layout:\r\n```\r\nproj\r\nproj/__init__.py\r\nproj/__main__.py\r\nproj/app.py\r\nproj/services\r\nproj/services/__init__.py\r\nproj/services/discovery.py\r\n```\r\n\r\nI've got a subclass of `Worker` called `Application` in `proj/app.py`. I've got a service `DiscoveryService` located in `proj/services/discovery.py`. if I configure **DEBUG** mode in `Application`, it doesn't apply to the logger in `DiscoveryService`.\r\n\r\nI believe this is simply because of Python's cascading logging - meaning, I need to set the logger in `proj/__init__.py` to address this. A single localized spot for logger configuration is ideal, so with that in mind, should I override `on_setup_root_logger(self, _logger, _loglevel)` in my `Worker`-based `Application` subclass to 'change' the root module logger? Like this maybe:\r\n\r\n```python\r\n# proj/__init__.py\r\nimport logging\r\n\r\nlogger = logging.getLogger(__name__)\r\nlogger.setLevel(logging.INFO)\r\n```\r\n\r\n```python\r\n# proj/app.py\r\nimport mode\r\n\r\nfrom . import logger as module_logger\r\n\r\nclass Application(mode.Worker):\r\n    ...\r\n\r\n    def on_setup_root_logger(self, _logger, _loglevel):\r\n        # what to do here to 'copy' the `_logger` into `module_logger`?\r\n\r\n```\r\nAssuming I'm on the right path, filling in that \"what to do here\" bit is where I'm confused. I'm sure it's simple though. \ud83d\ude44\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ask/mode/issues/2", "repository_url": "https://api.github.com/repos/ask/mode", "labels_url": "https://api.github.com/repos/ask/mode/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/ask/mode/issues/2/comments", "events_url": "https://api.github.com/repos/ask/mode/issues/2/events", "html_url": "https://github.com/ask/mode/issues/2", "id": 269412037, "node_id": "MDU6SXNzdWUyNjk0MTIwMzc=", "number": 2, "title": "Missing documentation at readthedocs.org", "user": {"login": "fridex", "id": 880687, "node_id": "MDQ6VXNlcjg4MDY4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/880687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fridex", "html_url": "https://github.com/fridex", "followers_url": "https://api.github.com/users/fridex/followers", "following_url": "https://api.github.com/users/fridex/following{/other_user}", "gists_url": "https://api.github.com/users/fridex/gists{/gist_id}", "starred_url": "https://api.github.com/users/fridex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fridex/subscriptions", "organizations_url": "https://api.github.com/users/fridex/orgs", "repos_url": "https://api.github.com/users/fridex/repos", "events_url": "https://api.github.com/users/fridex/events{/privacy}", "received_events_url": "https://api.github.com/users/fridex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-29T16:15:07Z", "updated_at": "2018-05-07T22:39:48Z", "closed_at": "2017-11-28T00:18:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Linked [web docs](http://mode.readthedocs.org/) in the README file refer to documentation that does not exist (I get 404). Not set up yet?", "performed_via_github_app": null, "score": 1.0}]}