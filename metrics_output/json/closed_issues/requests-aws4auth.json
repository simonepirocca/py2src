{"total_count": 12, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/40", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/40/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/40/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/40", "id": 596952523, "node_id": "MDU6SXNzdWU1OTY5NTI1MjM=", "number": 40, "title": "is it time to fork this? can anyone contact Sam Washington?", "user": {"login": "tedder", "id": 97914, "node_id": "MDQ6VXNlcjk3OTE0", "avatar_url": "https://avatars2.githubusercontent.com/u/97914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedder", "html_url": "https://github.com/tedder", "followers_url": "https://api.github.com/users/tedder/followers", "following_url": "https://api.github.com/users/tedder/following{/other_user}", "gists_url": "https://api.github.com/users/tedder/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedder/subscriptions", "organizations_url": "https://api.github.com/users/tedder/orgs", "repos_url": "https://api.github.com/users/tedder/repos", "events_url": "https://api.github.com/users/tedder/events{/privacy}", "received_events_url": "https://api.github.com/users/tedder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-09T01:07:32Z", "updated_at": "2020-06-01T20:54:59Z", "closed_at": "2020-06-01T20:54:59Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This is still a useful library, despite its age. There are pending PRs. @sam-washington doesn't have any activity in github, [they have a keybase entry](https://keybase.pub/aethris/) for github and aethris.net, which is a dead site and doesn't exist in the Wayback Machine. The domain is still registered, though.\r\n\r\nPython has a process for doing all of this:\r\n* https://www.python.org/dev/peps/pep-0541/#continue-maintenance\r\n* https://www.python.org/dev/peps/pep-0541/#how-to-request-a-name-transfer\r\n* [there are no requests to transfer in pypi-support](https://github.com/pypa/pypi-support/issues?q=aws4auth)\r\n* https://pypi.org/help/#project-name-claim\r\n\r\nAs soon as I post this I'll send the issue link to codegreen@aethris.net, which is the only email address I've found.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/36", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/36/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/36/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/36", "id": 404821711, "node_id": "MDU6SXNzdWU0MDQ4MjE3MTE=", "number": 36, "title": "AWS authentication failed using HTTPS request", "user": {"login": "khalilmebarkia", "id": 10074159, "node_id": "MDQ6VXNlcjEwMDc0MTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/10074159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khalilmebarkia", "html_url": "https://github.com/khalilmebarkia", "followers_url": "https://api.github.com/users/khalilmebarkia/followers", "following_url": "https://api.github.com/users/khalilmebarkia/following{/other_user}", "gists_url": "https://api.github.com/users/khalilmebarkia/gists{/gist_id}", "starred_url": "https://api.github.com/users/khalilmebarkia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khalilmebarkia/subscriptions", "organizations_url": "https://api.github.com/users/khalilmebarkia/orgs", "repos_url": "https://api.github.com/users/khalilmebarkia/repos", "events_url": "https://api.github.com/users/khalilmebarkia/events{/privacy}", "received_events_url": "https://api.github.com/users/khalilmebarkia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-30T15:22:21Z", "updated_at": "2019-01-31T08:27:31Z", "closed_at": "2019-01-31T08:27:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm deploying CSR 1000v on an EC2 instance in AWS.\r\n\r\nThis is my python code for authentication in order to use *RESTCONF* which is already enabled in the router.\r\n\r\n```\r\nimport requests\r\nfrom requests_aws4auth import AWS4Auth\r\nimport pprint\r\nimport urllib3\r\n\r\n \r\ndef get_json(interface):\r\n    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\r\n\r\n    authaws = AWS4Auth('AWS_ACCESS_KEY',\r\n                       'AWS_SECRET_ACCESS_KEY',\r\n                       'us-west-2',\r\n                       'awis')\r\n \r\n    source = 'https://ec2-xx-xx-xx-xx.us-west-2.compute.amazonaws.com/restconf/data/'\r\n    module = 'ietf-interfaces:'\r\n    container = 'interfaces'\r\n    leaf = '/interface=' + interface\r\n    options = ''\r\n \r\n    url = source + module + container + leaf + options\r\n    headers = {'Content-type': 'application/yang-data+json', 'Accept': 'application/yang-data+json'}\r\n \r\n    r = requests.get(url, auth=authaws, headers=headers, verify=False)\r\n \r\n    return r.json()\r\n \r\nif __name__ == '__main__':\r\n \r\n    interface = 'GigabitEthernet1'\r\n \r\n    pprint.pprint(get_json(interface))\r\n```\r\n\r\nHere what I got after execution.\r\n\r\n    server@zsz:~/shared_files$ python get_one_interface.py \r\n    {u'errors': {u'error': [{u'error-tag': u'access-denied',\r\n                             u'error-type': u'protocol'}]}}\r\n\r\n\r\nObviously, the authentication cannot be done.\r\nFor `aws_access_key` and `aws_secret_access_key`, I got it from IAM console. I even generated new ones, but still does not work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/28", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/28/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/28/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/28", "id": 195763971, "node_id": "MDU6SXNzdWUxOTU3NjM5NzE=", "number": 28, "title": "Is there a urllib3 version of this library?", "user": {"login": "LaundroMat", "id": 42320, "node_id": "MDQ6VXNlcjQyMzIw", "avatar_url": "https://avatars1.githubusercontent.com/u/42320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaundroMat", "html_url": "https://github.com/LaundroMat", "followers_url": "https://api.github.com/users/LaundroMat/followers", "following_url": "https://api.github.com/users/LaundroMat/following{/other_user}", "gists_url": "https://api.github.com/users/LaundroMat/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaundroMat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaundroMat/subscriptions", "organizations_url": "https://api.github.com/users/LaundroMat/orgs", "repos_url": "https://api.github.com/users/LaundroMat/repos", "events_url": "https://api.github.com/users/LaundroMat/events{/privacy}", "received_events_url": "https://api.github.com/users/LaundroMat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-15T10:05:07Z", "updated_at": "2016-12-15T10:48:34Z", "closed_at": "2016-12-15T10:47:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use AWS ElasticSearch together with django-haystack but I'm bumping into problems trying to authenticate. \r\n\r\nHaystack uses urllib3 for its web requests, and I can't find a way of integrating aws4auth easily (see also http://stackoverflow.com/questions/41147724/newconnectionerror-using-django-haystack-with-amazon-elasticsearch-as-backend ).\r\n\r\nIs authenticating with aws4auth (or something similar) doable within this context?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/20", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/20/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/20/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/20", "id": 174004249, "node_id": "MDU6SXNzdWUxNzQwMDQyNDk=", "number": 20, "title": "The request signature we calculated does not match the signature you provided.", "user": {"login": "Puneeth-n", "id": 5619473, "node_id": "MDQ6VXNlcjU2MTk0NzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5619473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Puneeth-n", "html_url": "https://github.com/Puneeth-n", "followers_url": "https://api.github.com/users/Puneeth-n/followers", "following_url": "https://api.github.com/users/Puneeth-n/following{/other_user}", "gists_url": "https://api.github.com/users/Puneeth-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/Puneeth-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Puneeth-n/subscriptions", "organizations_url": "https://api.github.com/users/Puneeth-n/orgs", "repos_url": "https://api.github.com/users/Puneeth-n/repos", "events_url": "https://api.github.com/users/Puneeth-n/events{/privacy}", "received_events_url": "https://api.github.com/users/Puneeth-n/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-30T12:19:35Z", "updated_at": "2016-08-31T07:38:54Z", "closed_at": "2016-08-31T07:38:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "This might seem strange but true. I am able to successfully query the AWS ES API for a simple query like this:\n\n```\n{\n            \"query\": {\n                \"filtered\": {\n                    \"filter\": {\n                        \"range\": {\n                            \"some_item.created_at\": {\n                                \"gte\": 1472473930000,\n                                \"lte\": 1472548129171\n                            }\n                        }\n                    }\n                }\n            },\n            \"size\": 1000000000\n        }\n```\n\nHowever, for complex queries, I get an error asking me to verify my AWS credentials.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/16", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/16/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/16/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/16", "id": 159260757, "node_id": "MDU6SXNzdWUxNTkyNjA3NTc=", "number": 16, "title": "You can add IVONA to 'Supported Services'", "user": {"login": "pawelad", "id": 7062874, "node_id": "MDQ6VXNlcjcwNjI4NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7062874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawelad", "html_url": "https://github.com/pawelad", "followers_url": "https://api.github.com/users/pawelad/followers", "following_url": "https://api.github.com/users/pawelad/following{/other_user}", "gists_url": "https://api.github.com/users/pawelad/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawelad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawelad/subscriptions", "organizations_url": "https://api.github.com/users/pawelad/orgs", "repos_url": "https://api.github.com/users/pawelad/repos", "events_url": "https://api.github.com/users/pawelad/events{/privacy}", "received_events_url": "https://api.github.com/users/pawelad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-08T20:16:20Z", "updated_at": "2017-11-15T18:53:59Z", "closed_at": "2017-11-15T18:53:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nAwesome project, thanks a bunch - you saved me a lot of hassle : )\nI just wanted to let you know that you can add [IVONA Speech Cloud API](https://www.ivona.com/us/for-business/speech-cloud/) to list of supported services in README - I use it [here](https://github.com/Pythonity/python-ivona-api) and it works like a charm.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/15", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/15/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/15/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/15", "id": 152751954, "node_id": "MDU6SXNzdWUxNTI3NTE5NTQ=", "number": 15, "title": "FYI: works with Tornado's HTTPRequest objects", "user": {"login": "jvhellemond", "id": 968908, "node_id": "MDQ6VXNlcjk2ODkwOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/968908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvhellemond", "html_url": "https://github.com/jvhellemond", "followers_url": "https://api.github.com/users/jvhellemond/followers", "following_url": "https://api.github.com/users/jvhellemond/following{/other_user}", "gists_url": "https://api.github.com/users/jvhellemond/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvhellemond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvhellemond/subscriptions", "organizations_url": "https://api.github.com/users/jvhellemond/orgs", "repos_url": "https://api.github.com/users/jvhellemond/repos", "events_url": "https://api.github.com/users/jvhellemond/events{/privacy}", "received_events_url": "https://api.github.com/users/jvhellemond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-03T11:26:56Z", "updated_at": "2016-07-07T19:42:14Z", "closed_at": "2016-07-07T19:42:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Not an issue, just an FYI**\nrequests-aws4auth seems to work fine with [Tornado's](https://github.com/tornadoweb/tornado) [`HTTPRequest` objects](https://github.com/tornadoweb/tornado/blob/master/tornado/httpclient.py#L289). I use it for lightweight AWS requests, like uploading files to S3. This saves a lot of `boto3` or `botocore` dependencies and code and I can use the asynchronous [`AsyncHttpClient`](https://github.com/tornadoweb/tornado/blob/master/tornado/httpclient.py#L106), leveraging Tornado's async/non-blocking/ioloop features.\n\nThe `HTTPRequest` object exposes a `headers` dict and a `body` property, which seems to be all `AWS4Auth` needs.\n\nFor example:\n\n``` python\nauth = requests_aws4auth.AWS4Auth(<key>, <secret>, \"eu-west-1\", \"s3\")\nreq = tornado.httpclient.HTTPRequest(<endpoint>, method=\"PUT\", body=<body>)\nsigned_req = auth(req)\n\ntornado.httpclient.AsyncHTTPClient().fetch(signed_req)\n```\n\nThat is all, thanks ;)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/11", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/11/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/11/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/11", "id": 127480871, "node_id": "MDU6SXNzdWUxMjc0ODA4NzE=", "number": 11, "title": "Support for temporary STS credentials?", "user": {"login": "garnaat", "id": 2056, "node_id": "MDQ6VXNlcjIwNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garnaat", "html_url": "https://github.com/garnaat", "followers_url": "https://api.github.com/users/garnaat/followers", "following_url": "https://api.github.com/users/garnaat/following{/other_user}", "gists_url": "https://api.github.com/users/garnaat/gists{/gist_id}", "starred_url": "https://api.github.com/users/garnaat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garnaat/subscriptions", "organizations_url": "https://api.github.com/users/garnaat/orgs", "repos_url": "https://api.github.com/users/garnaat/repos", "events_url": "https://api.github.com/users/garnaat/events{/privacy}", "received_events_url": "https://api.github.com/users/garnaat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-01-19T16:12:23Z", "updated_at": "2016-02-08T20:18:06Z", "closed_at": "2016-02-08T00:04:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "More of a question than an issue, really.  Does this currently support STS temporary credentials?  If not, any plans for that?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/10", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/10/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/10/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/10", "id": 123568899, "node_id": "MDU6SXNzdWUxMjM1Njg4OTk=", "number": 10, "title": "AWS error response when request date does not match signing key date", "user": {"login": "sam-washington", "id": 11321367, "node_id": "MDQ6VXNlcjExMzIxMzY3", "avatar_url": "https://avatars0.githubusercontent.com/u/11321367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sam-washington", "html_url": "https://github.com/sam-washington", "followers_url": "https://api.github.com/users/sam-washington/followers", "following_url": "https://api.github.com/users/sam-washington/following{/other_user}", "gists_url": "https://api.github.com/users/sam-washington/gists{/gist_id}", "starred_url": "https://api.github.com/users/sam-washington/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sam-washington/subscriptions", "organizations_url": "https://api.github.com/users/sam-washington/orgs", "repos_url": "https://api.github.com/users/sam-washington/repos", "events_url": "https://api.github.com/users/sam-washington/events{/privacy}", "received_events_url": "https://api.github.com/users/sam-washington/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-12-22T22:29:45Z", "updated_at": "2016-07-08T07:44:43Z", "closed_at": "2015-12-31T17:12:11Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "## Description\n\nReported by @ipartola in pull request https://github.com/sam-washington/requests-aws4auth/pull/3.\n\nWhen the date of a request, as given in either the `Date` or the `X-Amz-Date` header, is different from the date in the `AWS4Auth` object's signing key scope, then an invalid signature is generated and AWS sends an authentication error in response to the request.\n\nThis issue affects `request-aws4auth` versions 0.7 and earlier.\n\nAs descibed by @ipartola:\n\n\"The bug is that the timestamp for the signing key is generated when the object is instantiated. Once we cross a date boundary it seems AWS requires that the signing key's scope date match the x-amz-date header. The solution I propose is to continually set the current date for the signing key to match the x-amz-date header.\"\n## Discussion\n\nThe AWS documentation for date handling in signing key scopes is here: http://docs.aws.amazon.com/general/latest/gr/sigv4-date-handling.html\n\nIt could be argued that this isn't a bug in requests-aws4auth, since it should be up to the calling code to ensure that the scope of the signing key is kept up to date by generating a new `AWS4Auth` instance. But it's obvious that this is a common situation and that it would be a very useful feature if requests-aws4auth could handle this automatically.\n\nAllowing the key to automatically regenerate raises problems for sharing an AWS4Auth instance between multiple threads, since if the key can be regenerated automatically at any time then it could be modified by another thread while it is being used to sign a request. \n\nIt also means that the AWS secret key will need to be stored in the signing key, so that the key can be regenerated without having to escape back out to the code generating the request.\n## Proposed Solution\n\nAs suggested by @ipartola, the key needs to be regenerated with a date that matches the date in the request. \n\nAs this is likely to be a common situation, and a bit of a WTF moment when new users hit it, it is proposed that automatic key regeneration is made the **default** behaviour for new instances of `AWS4Auth`. However, the behaviour needs to be made configurable, for situations where people want to share instances between threads, or don't want the key stored in the instance, or don't want automatic regeneration for other reasons. Retaining a way of duplicating the current behaviour (i.e. signing the request with a bad signature) is also desirable for backward compatibility if needed.\n\nThe proposal is to modify the `AWS4Auth` class to check a request's `X-Amz-Date` or `Date` headers against the scope date, and if it is different then automatically regenerate the signing key with a scope that uses the new date. This means when new instances of `AWS4Auth` are created, the AWS secret key will need to be supplied.\n\nA new method will be added to `AWS4Auth`: `regenerate_signing_key()``. Calling this will trigger an immediate regeneration of the instance's signing key. Parameters can be supplied to this method to set new values for the key scope parameters: region, service and date. This method will be used when a automatic key regeneration is needed, but can also be called by other code if a manual regeneration is needed.\n\nTwo new subclasses of `AWS4Auth` will be added: `StrictAWS4Auth` and `PassiveAWS4Auth`. `StrictAWS4Auth` will not regenerate the signing key when a date mismatch is encountered, it will instead raise a new exception, `DateMismatchError`. This will allow the calling code to handle the situation itself if desired.\n\n`PassiveAWS4Auth` will do no date checking, and will sign the request and send it even if the request date does not match the scope date. This mimics the current behaviour of v0.7 `AWS4Auth`. \n\nFurther, a new parameter will be added to `AWS4SigningKey`: `store_secret_key`. If this is set to `True`, which will be the default, the secret key is stored in the instance, not thrown away as it is in v0.7. By creating instances of `AWS4Auth` or its subclasses using `AWS4SigningKey` instances created with `store_secret_key` set to `False`, you can control whether the secret key is stored in an `AWS4Auth` instance or not.\n## Examples\n\nRegular usage, usual case with no date change, `X-Amz-Date` header is automatically added to the request by the AWS4Auth signing process, using today's date, since Requests doesn't automatically add a date header. This is the same usage and behaviour as current 0.7 version when not crossing a date boundary:\n\n``` python\n>>> auth = AWS4Auth('access_id', 'secret_key', 'us-east-1', 's3')\n>>> auth.date\n'20151222'\n>>> response = requests.get('http://s3.amazonaws.com', auth=auth)\n>>> response.text\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ListAllMyBucketsResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01\">\n  <Owner>\n    <ID>bcaf1ffd86f461ca5fb16fd081034f</ID>\n    <DisplayName>webfile</DisplayName>\n>>> response.requests.headers['X-Amz-Date']\n'20151222T212208Z'\n```\n\nNext this shows regular usage, but crossing a date boundary and AWS4Auth automatically regenerating the signing key. This is the main use case for this fix. (In this case the `X-Amz-Date` header is again added automatically by the AWS4Auth authentication using the current date. It is added before the scope/request date check is made, and can be different to the scope date):\n\n``` python\n>>> auth = AWS4Auth('access_id', 'secret_key', 'us-east-1', 's3')\n>>> auth.date\n'20151222'\n>>> id(auth.signing_key)\n11162416\n...wait until tomorrow...\n>>> datetime.utcnow().strftime('%Y-%m-%d')\n'2015-12-23'\n>>> response = requests.get('http://s3.amazonaws.com', auth=auth)\n>>> response.text\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ListAllMyBucketsResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01\">\n  <Owner>\n    <ID>bcaf1ffd86f461ca5fb16fd081034f</ID>\n    <DisplayName>webfile</DisplayName>\n>>> response.request.headers['X-Amz-Date']\n'20151232T000934Z'\n>>> auth.date\n'20151223'\n>>> id(auth.signing_key)\n10947184\n```\n\nNext is an example with `StrictAWS4Auth`. With this subclass the key is not automatically regenerated, instead a `DateMismatchError` is raised when the request date does not match the signing key scope date:\n\n``` python\n>>> auth = StrictAWS4Auth('access_id', 'secret_key', 'us-east-1', 's3')\n>>> auth.date\n'20151222'\n>>> id(auth.signing_key)\n11162416\n...wait until tomorrow...\n>>> datetime.utcnow().strftime('%Y-%m-%d')\n'2015-12-23'\n>>> response = requests.get('http://s3.amazonaws.com', auth=auth)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  ...\nrequests_aws4auth.exceptions.DateMismatchError\n```\n\nThe key can now be manually regenerated to match the new day's date:\n\n``` python\n>>> today = datetime.utcnow().strftime('%y%m%d')\n>>> today\n'20151223'\n>>> auth.regenerate_signing_key(date=today)\n>>> auth.date\n'20151223'\n>>> id(auth.signing_key)\n10947184\n```\n\nExample again using `StrictAWS4Auth`, but also where the secret key is not stored in the auth instance:\n\n``` python\n>>> sig_key = AWS4SigningKey('secret_key', 'us-east-1', 's3', store_secret_key=False)\n>>> auth = AWS4Auth('access_id', sig_key)\n>>> auth.date\n'20151222'\n>>> id(auth.signing_key)\n11162416\n...wait until tomorrow...\n>>> datetime.utcnow().strftime('%Y-%m-%d')\n'2015-12-23'\n>>> response = requests.get('http://s3.amazonaws.com', auth=auth)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  ...\nrequests_awsauth.exceptions.DateMismatchError\n>>> today = datetime.utcnow().strftime('%y%m%d')\n>>> auth.regenerate_signing_key(date=today)\nrequests_aws4auth.exceptions.NoSecretKeyError\n```\n\nHere the manual regeneration fails because there is no stored secret key. To regenerate, the secret key must be passed to `regenerate_signing_key()`:\n\n``` python\n>>> auth.regenerate_signing_key(secret_key='secret_key', date=today)\n>>> auth.date\n'20151223'\n>>> id(auth.signing_key)\n10947184\n```\n\nThe key is not stored in the new key either, because the new key uses the value of `store_secret_key` in the old key, which is`False` in this case. \n\nAny  feedback on these proposed changes gratefully received.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/9", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/9/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/9/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/9", "id": 123305141, "node_id": "MDU6SXNzdWUxMjMzMDUxNDE=", "number": 9, "title": "Problems with requests 2.9.0", "user": {"login": "asmaps", "id": 2535908, "node_id": "MDQ6VXNlcjI1MzU5MDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/2535908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asmaps", "html_url": "https://github.com/asmaps", "followers_url": "https://api.github.com/users/asmaps/followers", "following_url": "https://api.github.com/users/asmaps/following{/other_user}", "gists_url": "https://api.github.com/users/asmaps/gists{/gist_id}", "starred_url": "https://api.github.com/users/asmaps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asmaps/subscriptions", "organizations_url": "https://api.github.com/users/asmaps/orgs", "repos_url": "https://api.github.com/users/asmaps/repos", "events_url": "https://api.github.com/users/asmaps/events{/privacy}", "received_events_url": "https://api.github.com/users/asmaps/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-12-21T16:00:45Z", "updated_at": "2016-01-01T23:37:48Z", "closed_at": "2016-01-01T23:37:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be a problem with requests 2.9.0, with 2.8.1 everything works fine, but with 2.9.0 I get this error:\n\nTransportError(403, '{\"message\":\"The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.\\n\\nThe Canonical String for this request should have been\\n\\'PUT\\n/xxxx\\n\\ncontent-type:text/plain; charset=UTF-8\\nhost:xxxxx\\nx-amz-content-sha256:xxxxx\\nx-amz-date:20151221T154751Z\\n\\ncontent-type;host;x-amz-content-sha256;x-amz-date\\nxxxxx\\'\\n\\nThe String-to-Sign should have been\\n\\'AWS4-HMAC-SHA256\\n20151221T154751Z\\n20151221/eu-west-1/es/aws4_request\\nxxxxxx\\'\\n\"}')\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/7", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/7/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/7/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/7", "id": 118930710, "node_id": "MDU6SXNzdWUxMTg5MzA3MTA=", "number": 7, "title": "Header x-amz-date vs. signing key amz-date", "user": {"login": "USSRLivesOn", "id": 234661, "node_id": "MDQ6VXNlcjIzNDY2MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/234661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/USSRLivesOn", "html_url": "https://github.com/USSRLivesOn", "followers_url": "https://api.github.com/users/USSRLivesOn/followers", "following_url": "https://api.github.com/users/USSRLivesOn/following{/other_user}", "gists_url": "https://api.github.com/users/USSRLivesOn/gists{/gist_id}", "starred_url": "https://api.github.com/users/USSRLivesOn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/USSRLivesOn/subscriptions", "organizations_url": "https://api.github.com/users/USSRLivesOn/orgs", "repos_url": "https://api.github.com/users/USSRLivesOn/repos", "events_url": "https://api.github.com/users/USSRLivesOn/events{/privacy}", "received_events_url": "https://api.github.com/users/USSRLivesOn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-25T21:57:07Z", "updated_at": "2015-12-31T17:48:06Z", "closed_at": "2015-11-25T21:58:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I started using this library yesterday, but was getting this error from AWS earlier today:\n\n```\n{\"message\":\"Date in Credential scope does not match YYYYMMDD from ISO-8601 version of date from HTTP: \\'20151124\\' != \\'20151125\\', from \\'20151125T154140Z\\'.\"}\n```\n\nI believe what's happening is that AWS4Auth has `amz_date` set on AWS4SigningKey at initialization time, but the `x-amz-date` header is set at every request. If the AWS4Auth object is persisted across a change in dates (e.g., if it is a global object), the dates in the signing key and the header will eventually not match, resulting in the error above.\n\nThis may be by design (or maybe I'm misunderstanding the issue entirely), and I've resolved the issue by re-generating the AWS4Auth object for every connection, but I wanted to identify it in case this isn't by design.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/5", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/5/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/5/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/5", "id": 113875859, "node_id": "MDU6SXNzdWUxMTM4NzU4NTk=", "number": 5, "title": "Version bump to 0.7?", "user": {"login": "mathom", "id": 399441, "node_id": "MDQ6VXNlcjM5OTQ0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/399441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathom", "html_url": "https://github.com/mathom", "followers_url": "https://api.github.com/users/mathom/followers", "following_url": "https://api.github.com/users/mathom/following{/other_user}", "gists_url": "https://api.github.com/users/mathom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathom/subscriptions", "organizations_url": "https://api.github.com/users/mathom/orgs", "repos_url": "https://api.github.com/users/mathom/repos", "events_url": "https://api.github.com/users/mathom/events{/privacy}", "received_events_url": "https://api.github.com/users/mathom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-28T17:31:00Z", "updated_at": "2015-11-02T00:56:46Z", "closed_at": "2015-11-02T00:56:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "To install off pypi I think we need a version bump or update for 0.6 to get https://github.com/sam-washington/requests-aws4auth/pull/2 out in the wild. How do you prefer to do that?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/1", "repository_url": "https://api.github.com/repos/tedder/requests-aws4auth", "labels_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/1/comments", "events_url": "https://api.github.com/repos/tedder/requests-aws4auth/issues/1/events", "html_url": "https://github.com/tedder/requests-aws4auth/issues/1", "id": 105123564, "node_id": "MDU6SXNzdWUxMDUxMjM1NjQ=", "number": 1, "title": "pypi package (0.5) will not install", "user": {"login": "Beirdo", "id": 129102, "node_id": "MDQ6VXNlcjEyOTEwMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/129102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Beirdo", "html_url": "https://github.com/Beirdo", "followers_url": "https://api.github.com/users/Beirdo/followers", "following_url": "https://api.github.com/users/Beirdo/following{/other_user}", "gists_url": "https://api.github.com/users/Beirdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Beirdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Beirdo/subscriptions", "organizations_url": "https://api.github.com/users/Beirdo/orgs", "repos_url": "https://api.github.com/users/Beirdo/repos", "events_url": "https://api.github.com/users/Beirdo/events{/privacy}", "received_events_url": "https://api.github.com/users/Beirdo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-09-06T23:46:36Z", "updated_at": "2015-09-09T00:59:09Z", "closed_at": "2015-09-08T20:31:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "The tarball is missing HISTORY.rst, so the package install fails.\n", "performed_via_github_app": null, "score": 1.0}]}