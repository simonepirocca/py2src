{"total_count": 166, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pyserial/pyserial/issues/515", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/515/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/515/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/515/events", "html_url": "https://github.com/pyserial/pyserial/issues/515", "id": 658594163, "node_id": "MDU6SXNzdWU2NTg1OTQxNjM=", "number": 515, "title": "Poor performance on macOS", "user": {"login": "mrbell321", "id": 1039699, "node_id": "MDQ6VXNlcjEwMzk2OTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1039699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrbell321", "html_url": "https://github.com/mrbell321", "followers_url": "https://api.github.com/users/mrbell321/followers", "following_url": "https://api.github.com/users/mrbell321/following{/other_user}", "gists_url": "https://api.github.com/users/mrbell321/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrbell321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrbell321/subscriptions", "organizations_url": "https://api.github.com/users/mrbell321/orgs", "repos_url": "https://api.github.com/users/mrbell321/repos", "events_url": "https://api.github.com/users/mrbell321/events{/privacy}", "received_events_url": "https://api.github.com/users/mrbell321/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-16T21:39:28Z", "updated_at": "2020-07-20T19:41:22Z", "closed_at": "2020-07-20T19:41:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am attempting to communicate w/ a device that speaks ASCII over RS-232. You send commands and it echos back on success. There are several hundred kilobytes of commands that need to be issued.\r\nI was seeing poor performance. I have tracked it, as best I can, do pyserial.\r\n\r\nI have written the following test to illustrate the issue:\r\n```\r\ndef pytest_generate_tests(metafunc):\r\n    if \"baudrate\" in metafunc.fixturenames:\r\n        metafunc.parametrize(\"baudrate\", (baudrate for baudrate in Serial.BAUDRATES if 9600 <= baudrate <= 115200))\r\n    if \"testdata\" in metafunc.fixturenames:\r\n        bs_r = [(bs, 2**r) for r in range(3, 8, 2) for bs in (b\"U\", b\"3\", b\"w\")]\r\n        metafunc.parametrize(\"testdata\", (bs * r for bs, r in bs_r),\r\n                                     ids=(f\"{bs} * {r}\" for bs, r in bs_r))\r\n\r\ndef test_loopback_direct(testdata, baudrate):\r\n    serial = Serial(port='/dev/cu.usbserial-FTCAY8UZ')\r\n    serial.baudrate = baudrate\r\n    serial.flushOutput()\r\n    serial.flushInput()\r\n\r\n    def write(testdata: bytes) -> None:\r\n        serial.write(testdata)\r\n        serial.flushOutput()\r\n\r\n    def read(n: int) -> bytes:\r\n        start_r = time.monotonic()\r\n        result = bytearray()\r\n        while len(result) < n:\r\n            result.extend(serial.read(serial.in_waiting))\r\n        return bytes(result)\r\n\r\n    def timed(func, *args):\r\n        start_mt = time.monotonic()\r\n        result = func(*args)\r\n        end_mt = time.monotonic()\r\n\r\n        return result, end_mt - start_mt\r\n\r\n    _, write_time = timed(write, testdata)\r\n    actual, read_time = timed(read, len(testdata))\r\n\r\n    print(f\"ch: '{chr(testdata[0])}'; sz: {len(testdata)}; baud: {baudrate}; tx: {write_time}; rx: {read_time}\")\r\n    assert actual == testdata\r\n````\r\n\r\nThis will try to send and read 8, 32, and 128 byte strings at every baud rate between 9600 and 115200(other bauds supported by pyserial are not supported by my hardware or project). Strings are comprised of 'U' is 0b01010101, '3' is 0b00110011, and 'w' is 0b01110111, so basically different timings of alternating 1's and 0's.\r\n\r\nIt's expecting to read exactly what it writes because I've wired the RS-232 port(an FTDI USB-RS232 dongle) with a physical loopback(connect TX to RX). I used a physical loopback to remove any concern about turnaround time from a remote device.\r\n\r\nLockups(as in it gets stuck in the read forever, meaning it's missed some data that was physically there) tend to happen above 115200. Luckily for me, my application maxes out at 115200, so I'm not less concerned, but it's an interesting datapoint. I also get lockups below 115200, but much less frequently.\r\n\r\nThe more problematic issue is speed:\r\n```\r\nch: '3'; sz: 8; baud: 9600; tx: 0.00021691100000009733; rx: 0.26131050899999986\r\nch: '3'; sz: 32; baud: 9600; tx: 0.00026775699999981306; rx: 0.28544173500000003\r\nch: '3'; sz: 128; baud: 9600; tx: 0.0003735080000000224; rx: 0.38507877300000004\r\nch: 'U'; sz: 8; baud: 9600; tx: 0.0003041390000000366; rx: 0.261603931\r\nch: 'U'; sz: 32; baud: 9600; tx: 0.00029090999999992206; rx: 0.28551700699999993\r\nch: 'U'; sz: 128; baud: 9600; tx: 0.00041519800000022755; rx: 0.38469731100000004\r\nch: 'w'; sz: 8; baud: 9600; tx: 0.00029173200000021104; rx: 0.260977236\r\nch: 'w'; sz: 32; baud: 9600; tx: 0.0002677659999998916; rx: 0.28654258899999974\r\nch: 'w'; sz: 128; baud: 9600; tx: 0.0003099739999998796; rx: 0.3854876680000001\r\nch: '3'; sz: 8; baud: 19200; tx: 0.000292234999999863; rx: 0.25674410999999964\r\nch: '3'; sz: 32; baud: 19200; tx: 0.000306768999999818; rx: 0.2694930219999998\r\nch: '3'; sz: 128; baud: 19200; tx: 0.00032810600000043877; rx: 0.319217632\r\nch: 'U'; sz: 8; baud: 19200; tx: 0.00034149099999991606; rx: 0.25650378399999996\r\nch: 'U'; sz: 32; baud: 19200; tx: 0.0003206829999999883; rx: 0.2691566559999998\r\nch: 'U'; sz: 128; baud: 19200; tx: 0.00034597099999977843; rx: 0.3192357640000001\r\nch: 'w'; sz: 8; baud: 19200; tx: 0.0002986969999998479; rx: 0.25695754000000015\r\nch: 'w'; sz: 32; baud: 19200; tx: 0.00032339799999991925; rx: 0.26902464800000025\r\nch: 'w'; sz: 128; baud: 19200; tx: 0.00033933599999969033; rx: 0.3189014330000006\r\nch: '3'; sz: 8; baud: 38400; tx: 0.00022700199999992066; rx: 0.25499005100000005\r\nch: '3'; sz: 32; baud: 38400; tx: 0.0002943580000005497; rx: 0.2615028230000007\r\nch: '3'; sz: 128; baud: 38400; tx: 0.0003183870000000866; rx: 0.28616120000000045\r\nch: 'U'; sz: 8; baud: 38400; tx: 0.0003507960000002086; rx: 0.2546732949999999\r\nch: 'U'; sz: 32; baud: 38400; tx: 0.0003138900000001499; rx: 0.2611683600000001\r\nch: 'U'; sz: 128; baud: 38400; tx: 0.0003122150000001156; rx: 0.2860405180000001\r\nch: 'w'; sz: 8; baud: 38400; tx: 0.0002870059999997565; rx: 0.25501268200000027\r\nch: 'w'; sz: 32; baud: 38400; tx: 0.00030984999999983387; rx: 0.26141939100000045\r\nch: 'w'; sz: 128; baud: 38400; tx: 0.000311405999999792; rx: 0.2860767909999993\r\nch: '3'; sz: 8; baud: 57600; tx: 0.00030658100000025; rx: 0.25391349999999946\r\nch: '3'; sz: 32; baud: 57600; tx: 0.0002960700000009808; rx: 0.2584686759999997\r\nch: '3'; sz: 128; baud: 57600; tx: 0.00032355299999942133; rx: 0.27527845299999854\r\nch: 'U'; sz: 8; baud: 57600; tx: 0.00028539300000041123; rx: 0.25441498100000004\r\nch: 'U'; sz: 32; baud: 57600; tx: 0.0003074089999994811; rx: 0.2584645529999996\r\nch: 'U'; sz: 128; baud: 57600; tx: 0.0003821149999989615; rx: 0.2750927839999999\r\nch: 'w'; sz: 8; baud: 57600; tx: 0.000298542000001234; rx: 0.25366186699999993\r\nch: 'w'; sz: 32; baud: 57600; tx: 0.0002962950000000575; rx: 0.25837463300000074\r\nch: 'w'; sz: 128; baud: 57600; tx: 0.0003059309999997595; rx: 0.2749769889999989\r\nch: '3'; sz: 8; baud: 115200; tx: 0.0002932970000000257; rx: 0.2534307789999999\r\nch: '3'; sz: 32; baud: 115200; tx: 0.0002898289999999637; rx: 0.256054969\r\nch: '3'; sz: 128; baud: 115200; tx: 0.00030081699999984224; rx: 0.26350622099999965\r\nch: 'U'; sz: 8; baud: 115200; tx: 0.000226523000000034; rx: 0.25339219700000004\r\nch: 'U'; sz: 32; baud: 115200; tx: 0.00024340499999997434; rx: 0.2553583530000001\r\nch: 'U'; sz: 128; baud: 115200; tx: 0.0003089139999996604; rx: 0.263742664\r\nch: 'w'; sz: 8; baud: 115200; tx: 0.000281980000000015; rx: 0.2536936110000001\r\nch: 'w'; sz: 32; baud: 115200; tx: 0.0003012570000002768; rx: 0.25522577600000007\r\nch: 'w'; sz: 128; baud: 115200; tx: 0.0003105729999997031; rx: 0.26431345100000003\r\n```\r\nNotice that the read times are nearly the same whether you are reading 8bytes at 9600 baud or 128bytes at 115200 baud. 0.25 is a long time to wait for every response when sending several hundred k of ~8-byte commands\r\n\r\nWrite times also have a lower limit, but it's FAR lower and is not my current bottle neck. \r\n\r\nI can use the same same dongle w/ other(non-python) tools and I do not see this delay.\r\n\r\n`Python 3.7.3 (default, Mar 27 2019, 09:23:15) \r\n[Clang 10.0.1 (clang-1001.0.46.3)] on darwin`\r\nand\r\n`pyserial                                3.4`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/508", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/508/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/508/events", "html_url": "https://github.com/pyserial/pyserial/issues/508", "id": 640675161, "node_id": "MDU6SXNzdWU2NDA2NzUxNjE=", "number": 508, "title": "Bogus device or resource busy error", "user": {"login": "hmaarrfk", "id": 90008, "node_id": "MDQ6VXNlcjkwMDA4", "avatar_url": "https://avatars0.githubusercontent.com/u/90008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmaarrfk", "html_url": "https://github.com/hmaarrfk", "followers_url": "https://api.github.com/users/hmaarrfk/followers", "following_url": "https://api.github.com/users/hmaarrfk/following{/other_user}", "gists_url": "https://api.github.com/users/hmaarrfk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmaarrfk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmaarrfk/subscriptions", "organizations_url": "https://api.github.com/users/hmaarrfk/orgs", "repos_url": "https://api.github.com/users/hmaarrfk/repos", "events_url": "https://api.github.com/users/hmaarrfk/events{/privacy}", "received_events_url": "https://api.github.com/users/hmaarrfk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T19:06:48Z", "updated_at": "2020-06-17T19:10:37Z", "closed_at": "2020-06-17T19:10:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to connect to a serial device on linux, but I consistently get:\r\n\r\n```\r\ncould not open port /dev/ttyACM0: [Errno 16] Device or resource busy: '/dev/ttyACM0'\r\n```\r\n\r\n```\r\nIn [1]: from teensytoany import TeensyPower                                                                                                                                                                        \r\n\r\nIn [2]: t = TeensyPower(serial_number=\"4728790\")                                                                                                                                                                   \r\n---------------------------------------------------------------------------\r\nOSError                                   Traceback (most recent call last)\r\n~/miniconda3/envs/mcam_dev/lib/python3.8/site-packages/serial/serialposix.py in open(self)\r\n    264         try:\r\n--> 265             self.fd = os.open(self.portstr, os.O_RDWR | os.O_NOCTTY | os.O_NONBLOCK)\r\n    266         except OSError as msg:\r\n\r\nOSError: [Errno 16] Device or resource busy: '/dev/ttyACM0'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nSerialException                           Traceback (most recent call last)\r\n<ipython-input-2-5f8e9d73affd> in <module>\r\n----> 1 t = TeensyPower(serial_number=\"4728790\")\r\n\r\n~/miniconda3/envs/mcam_dev/lib/python3.8/site-packages/teensytoany/teensypower.py in __init__(self, pin_number, **kwargs)\r\n     24         self.pin_number = pin_number\r\n     25 \r\n---> 26         self._teensy = TeensyToAny(**kwargs)\r\n     27         self._teensy.gpio_pin_mode(self.pin_number, 1)\r\n     28         self.poweroff()\r\n\r\n~/miniconda3/envs/mcam_dev/lib/python3.8/site-packages/teensytoany/teensytoany.py in __init__(self, serial_number, baudrate, timeout, open)\r\n    155         self._serial = None\r\n    156         if open:\r\n--> 157             self._open()\r\n    158 \r\n    159     def _open(self):\r\n\r\n~/miniconda3/envs/mcam_dev/lib/python3.8/site-packages/teensytoany/teensytoany.py in _open(self)\r\n    169             port=None, baudrate=self._baudrate, timeout=self._timeout)\r\n    170         self._serial.port = port\r\n--> 171         self._serial.open()\r\n    172         self.serial_number = found_serial_number\r\n    173 \r\n\r\n~/miniconda3/envs/mcam_dev/lib/python3.8/site-packages/serial/serialposix.py in open(self)\r\n    266         except OSError as msg:\r\n    267             self.fd = None\r\n--> 268             raise SerialException(msg.errno, \"could not open port {}: {}\".format(self._port, msg))\r\n    269         #~ fcntl.fcntl(self.fd, fcntl.F_SETFL, 0)  # set blocking\r\n    270 \r\n\r\nSerialException: [Errno 16] could not open port /dev/ttyACM0: [Errno 16] Device or resource busy: '/dev/ttyACM0'\r\n\r\n```\r\n\r\n```\r\n$ conda list | grep pyserial\r\npyserial                  3.4                      pypi_0    pypi\r\n```\r\n\r\nI tried to install both from pypi and conda-forge.\r\n\r\nAs a note, this only seems to happen upon first plugging in the device in the serial port.\r\n\r\nIt is like linux is trying to communicate with the TTY device, and causing it to hang.\r\n\r\n\r\n```\r\n15:05 $ uname -a\r\nLinux sparrow 4.15.0-106-generic #107-Ubuntu SMP Thu Jun 4 11:27:52 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n```\r\n\r\nUbuntu 18.04, kernel 4.15", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/505", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/505/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/505/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/505/events", "html_url": "https://github.com/pyserial/pyserial/issues/505", "id": 623453471, "node_id": "MDU6SXNzdWU2MjM0NTM0NzE=", "number": 505, "title": "Serial Reader freezes after a while in windows using python3. I have to close it and open it again", "user": {"login": "javieresquivel", "id": 5751306, "node_id": "MDQ6VXNlcjU3NTEzMDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/5751306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javieresquivel", "html_url": "https://github.com/javieresquivel", "followers_url": "https://api.github.com/users/javieresquivel/followers", "following_url": "https://api.github.com/users/javieresquivel/following{/other_user}", "gists_url": "https://api.github.com/users/javieresquivel/gists{/gist_id}", "starred_url": "https://api.github.com/users/javieresquivel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javieresquivel/subscriptions", "organizations_url": "https://api.github.com/users/javieresquivel/orgs", "repos_url": "https://api.github.com/users/javieresquivel/repos", "events_url": "https://api.github.com/users/javieresquivel/events{/privacy}", "received_events_url": "https://api.github.com/users/javieresquivel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-22T20:08:20Z", "updated_at": "2020-07-02T21:20:12Z", "closed_at": "2020-07-02T21:20:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the timeout=0 for non-blocking and the way i get the data is like this:\r\n\r\nwhile True:\r\n        en_espera = ser.in_waiting\r\n        if en_espera > 0:\r\n                lectura = ser.read(21).decode(\"utf-8\")        \r\n        time.sleep(1)\r\n\r\nThe program runs normal for a while but after the time (I don't know how much because always is different) the program freezes and i have to close it and open it again\r\n\r\nThere is something i have to consider to avoid this? \r\nthanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/501", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/501/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/501/events", "html_url": "https://github.com/pyserial/pyserial/issues/501", "id": 609107293, "node_id": "MDU6SXNzdWU2MDkxMDcyOTM=", "number": 501, "title": "can't import the serial module", "user": {"login": "saberbin", "id": 36614526, "node_id": "MDQ6VXNlcjM2NjE0NTI2", "avatar_url": "https://avatars1.githubusercontent.com/u/36614526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saberbin", "html_url": "https://github.com/saberbin", "followers_url": "https://api.github.com/users/saberbin/followers", "following_url": "https://api.github.com/users/saberbin/following{/other_user}", "gists_url": "https://api.github.com/users/saberbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saberbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saberbin/subscriptions", "organizations_url": "https://api.github.com/users/saberbin/orgs", "repos_url": "https://api.github.com/users/saberbin/repos", "events_url": "https://api.github.com/users/saberbin/events{/privacy}", "received_events_url": "https://api.github.com/users/saberbin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-29T14:34:18Z", "updated_at": "2020-05-16T02:29:22Z", "closed_at": "2020-05-16T02:28:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use pip installed the pyserial. And installed successful.\r\n` pip install pyserial\r\nLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple\r\nCollecting pyserial\r\n  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/0d/e4/2a744dd9e3be04a0c0907414e2a01a7c88bb3915cbe3c8cc06e209f59c30/pyserial-3.4-py2.py3-none-any.whl (193 kB)\r\nInstalling collected packages: pyserial\r\nSuccessfully installed pyserial-3.4`\r\nBut I can `import serial`\uff1fI can't get any method to fix it.\r\n`>>> import serial\r\nTraceback (most recent call last):\r\n  File \"<pyshell#0>\", line 1, in <module>\r\n    import serial\r\nModuleNotFoundError: No module named 'serial'\r\n>>> import pyserial\r\nTraceback (most recent call last):\r\n  File \"<pyshell#1>\", line 1, in <module>\r\n    import pyserial\r\nModuleNotFoundError: No module named 'pyserial'`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/458", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/458/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/458/events", "html_url": "https://github.com/pyserial/pyserial/issues/458", "id": 492661481, "node_id": "MDU6SXNzdWU0OTI2NjE0ODE=", "number": 458, "title": "Not able to re-open serial device on COM port, even though it should be closed (Windows)", "user": {"login": "KennethNielsen", "id": 1611076, "node_id": "MDQ6VXNlcjE2MTEwNzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1611076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KennethNielsen", "html_url": "https://github.com/KennethNielsen", "followers_url": "https://api.github.com/users/KennethNielsen/followers", "following_url": "https://api.github.com/users/KennethNielsen/following{/other_user}", "gists_url": "https://api.github.com/users/KennethNielsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/KennethNielsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KennethNielsen/subscriptions", "organizations_url": "https://api.github.com/users/KennethNielsen/orgs", "repos_url": "https://api.github.com/users/KennethNielsen/repos", "events_url": "https://api.github.com/users/KennethNielsen/events{/privacy}", "received_events_url": "https://api.github.com/users/KennethNielsen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-12T08:30:52Z", "updated_at": "2019-09-12T10:43:20Z", "closed_at": "2019-09-12T10:43:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hallo Pyserial-devs and thanks for an awesome tool. I have a problem centered around restart of a program on Windows that uses a serial connection. I can reproduce the issue with this little snippet:\r\n\r\n```python\r\nfrom time import sleep\r\n\r\nfrom serial import Serial, PARITY_NONE\r\n\r\n\r\nwhile True:\r\n\r\n    serial = Serial(\r\n        port=r\"\\\\.\\COM25\",\r\n        baudrate=9600,\r\n        bytesize=8,\r\n        parity=PARITY_NONE,\r\n        stopbits=1,\r\n        xonxoff=False,\r\n    )\r\n\r\n    serial.close()\r\n    print(\"Tick\")\r\n    sleep(1)\r\n```\r\n\r\nThis will quite reproducible give me a few ticks and then this exception:\r\n```python\r\nTick\r\nTick\r\nTick\r\nTraceback (most recent call last):\r\n  File \"test_serial.py\", line 14, in <module>\r\n    xonxoff=False,\r\n  File \"C:\\Anaconda3\\lib\\site-packages\\serial\\serialwin32.py\", line 31, in __init__\r\n    super(Serial, self).__init__(*args, **kwargs)\r\n  File \"C:\\Anaconda3\\lib\\site-packages\\serial\\serialutil.py\", line 240, in __init__\r\n    self.open()\r\n  File \"C:\\Anaconda3\\lib\\site-packages\\serial\\serialwin32.py\", line 62, in open\r\n    raise SerialException(\"could not open port {!r}: {!r}\".format(self.portstr, ctypes.WinError()))\r\nserial.serialutil.SerialException: could not open port '\\\\\\\\.\\\\COM25': PermissionError(13, 'Access is denied.', None, 5)\r\n```\r\n\r\nI'm using pyserial 3.4 on Python 3.6 via Anaconda. I will of course happily provide any extra information that may be needed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/454", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/454/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/454/events", "html_url": "https://github.com/pyserial/pyserial/issues/454", "id": 482912891, "node_id": "MDU6SXNzdWU0ODI5MTI4OTE=", "number": 454, "title": "[Windows] Badly detected Serial Numbers for certain devices", "user": {"login": "hmaarrfk", "id": 90008, "node_id": "MDQ6VXNlcjkwMDA4", "avatar_url": "https://avatars0.githubusercontent.com/u/90008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmaarrfk", "html_url": "https://github.com/hmaarrfk", "followers_url": "https://api.github.com/users/hmaarrfk/followers", "following_url": "https://api.github.com/users/hmaarrfk/following{/other_user}", "gists_url": "https://api.github.com/users/hmaarrfk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmaarrfk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmaarrfk/subscriptions", "organizations_url": "https://api.github.com/users/hmaarrfk/orgs", "repos_url": "https://api.github.com/users/hmaarrfk/repos", "events_url": "https://api.github.com/users/hmaarrfk/events{/privacy}", "received_events_url": "https://api.github.com/users/hmaarrfk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-08-20T14:55:49Z", "updated_at": "2019-08-21T06:57:13Z", "closed_at": "2019-08-20T19:26:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Windows sometimes fails to correctly detect the serial number for certain FTDI devices I have.\r\n\r\nOriginally I thought it was related to an other issue:\r\nhttps://github.com/pyserial/pyserial/issues/283#issuecomment-522336777\r\n\r\nBut it seems unrelated. \r\n\r\nSee https://github.com/pyserial/pyserial/issues/283#issuecomment-522773875 for results of \r\n```\r\nudevadm info --attribute-walk /dev/ttyUSB0 > ttyUSB0_attribute_walk.txt\r\n```\r\n\r\nAs requested by @ryan-summers Here is a screenshot of a the device I **think** it is. Note that I have many of these serial devices (Thorlabs brand motors), and this bug only occurs on some of them. At first glance, they all look the same. I'll have to try:\r\n\r\n1. Deleting all entries.\r\n2. Attaching the problematic motor.\r\n3. Taking screenshots again.\r\n\r\n<details> <summary> Sample, probably useless screenshot</summary>\r\n![image](https://user-images.githubusercontent.com/90008/63358434-05d66680-c339-11e9-9b1a-391608591d30.png)\r\n</details>\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/448", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/448/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/448/events", "html_url": "https://github.com/pyserial/pyserial/issues/448", "id": 474206290, "node_id": "MDU6SXNzdWU0NzQyMDYyOTA=", "number": 448, "title": "Allow Device Symlinks I.E. By-ID To Be Enumerated", "user": {"login": "danieledwardgeorgehitchcock", "id": 19694936, "node_id": "MDQ6VXNlcjE5Njk0OTM2", "avatar_url": "https://avatars1.githubusercontent.com/u/19694936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieledwardgeorgehitchcock", "html_url": "https://github.com/danieledwardgeorgehitchcock", "followers_url": "https://api.github.com/users/danieledwardgeorgehitchcock/followers", "following_url": "https://api.github.com/users/danieledwardgeorgehitchcock/following{/other_user}", "gists_url": "https://api.github.com/users/danieledwardgeorgehitchcock/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieledwardgeorgehitchcock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieledwardgeorgehitchcock/subscriptions", "organizations_url": "https://api.github.com/users/danieledwardgeorgehitchcock/orgs", "repos_url": "https://api.github.com/users/danieledwardgeorgehitchcock/repos", "events_url": "https://api.github.com/users/danieledwardgeorgehitchcock/events{/privacy}", "received_events_url": "https://api.github.com/users/danieledwardgeorgehitchcock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-29T19:01:00Z", "updated_at": "2019-07-29T19:15:10Z", "closed_at": "2019-07-29T19:15:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem/use-case? Please describe.**\r\n<!-- A clear and concise description of what the problem is. -->\r\nAt present, the library only allows for enumeration of non-static device addresses i.e. /dev/TTYUSB0 - it would be useful (especially in a hotplug environment) to be able to map a device by its ID i.e. devices in /dev/serial/by-id.\r\n\r\n**Describe the solution you'd like:**\r\n<!-- A description of what you want to happen. -->\r\nDevice symlinking has been a standard in unix environments for for quite a while and allowing this method of mapping devices can resolve a lot of issues for machines that have multiple devices occupying the serial bus for which, the generic /dev/TTYUSB0 can change on reboot.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/442", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/442/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/442/events", "html_url": "https://github.com/pyserial/pyserial/issues/442", "id": 465176297, "node_id": "MDU6SXNzdWU0NjUxNzYyOTc=", "number": 442, "title": "case else is not aligned with if", "user": {"login": "edbird", "id": 2939755, "node_id": "MDQ6VXNlcjI5Mzk3NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2939755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edbird", "html_url": "https://github.com/edbird", "followers_url": "https://api.github.com/users/edbird/followers", "following_url": "https://api.github.com/users/edbird/following{/other_user}", "gists_url": "https://api.github.com/users/edbird/gists{/gist_id}", "starred_url": "https://api.github.com/users/edbird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edbird/subscriptions", "organizations_url": "https://api.github.com/users/edbird/orgs", "repos_url": "https://api.github.com/users/edbird/repos", "events_url": "https://api.github.com/users/edbird/events{/privacy}", "received_events_url": "https://api.github.com/users/edbird/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-08T10:23:15Z", "updated_at": "2019-07-08T21:09:54Z", "closed_at": "2019-07-08T21:09:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/pyserial/pyserial/blob/2d879b2428dacf30d5c8ba077626236b06c7d77f/serial/urlhandler/protocol_loop.py#L156\r\n\r\nLine 156 `else:` not aligned with `if`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/436", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/436/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/436/events", "html_url": "https://github.com/pyserial/pyserial/issues/436", "id": 450597751, "node_id": "MDU6SXNzdWU0NTA1OTc3NTE=", "number": 436, "title": "Serial not defined", "user": {"login": "andrfgs", "id": 9550364, "node_id": "MDQ6VXNlcjk1NTAzNjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9550364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrfgs", "html_url": "https://github.com/andrfgs", "followers_url": "https://api.github.com/users/andrfgs/followers", "following_url": "https://api.github.com/users/andrfgs/following{/other_user}", "gists_url": "https://api.github.com/users/andrfgs/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrfgs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrfgs/subscriptions", "organizations_url": "https://api.github.com/users/andrfgs/orgs", "repos_url": "https://api.github.com/users/andrfgs/repos", "events_url": "https://api.github.com/users/andrfgs/events{/privacy}", "received_events_url": "https://api.github.com/users/andrfgs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-31T03:25:55Z", "updated_at": "2019-05-31T09:28:48Z", "closed_at": "2019-05-31T09:28:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Cannot use the library. The following program wields an error:\r\n\r\n```\r\nimport serial\r\n\r\nser = Serial('/dev/ttyS0', 9600, timeout = 1.0, rtscts = 0)\r\n```\r\n\r\nThis wields the error: \r\n\r\n> NameError: name 'Serial' is not defined\r\n\r\nI have already installed the module using pip and pip detects it. Since I'm not using any other environments this should work. So it seems to be a bug.\r\n\r\nUsing Python3 but Python2 seems to have the same problem\r\n\r\nEDIT: the .whl seems to be installed in the directory `/home/pi/.local/lib/python3.5/site-packages/serial`. This is the pyserial library. I double checked and uninstalled the `serial` library (as its usually confused with this) and its not listed through `pip list`. It is clearly pyserial's folder.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/435", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/435/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/435/events", "html_url": "https://github.com/pyserial/pyserial/issues/435", "id": 450535027, "node_id": "MDU6SXNzdWU0NTA1MzUwMjc=", "number": 435, "title": "serial.write return value inconsistent", "user": {"login": "anotherKeith", "id": 51171802, "node_id": "MDQ6VXNlcjUxMTcxODAy", "avatar_url": "https://avatars2.githubusercontent.com/u/51171802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anotherKeith", "html_url": "https://github.com/anotherKeith", "followers_url": "https://api.github.com/users/anotherKeith/followers", "following_url": "https://api.github.com/users/anotherKeith/following{/other_user}", "gists_url": "https://api.github.com/users/anotherKeith/gists{/gist_id}", "starred_url": "https://api.github.com/users/anotherKeith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anotherKeith/subscriptions", "organizations_url": "https://api.github.com/users/anotherKeith/orgs", "repos_url": "https://api.github.com/users/anotherKeith/repos", "events_url": "https://api.github.com/users/anotherKeith/events{/privacy}", "received_events_url": "https://api.github.com/users/anotherKeith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-30T22:31:43Z", "updated_at": "2019-05-31T13:23:17Z", "closed_at": "2019-05-31T13:23:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Documentation bug\r\nRunning Python 2.7.14 32-bit on a Win-7 platform.\r\nPyserial version 3.4\r\n\r\nSending a byte to serial.write results in the byte being returned.\r\nSending a string results in the number of bytes sent being returned.\r\n\r\n```\r\nimport serial\r\nimport io\r\nimport time\r\n\r\nser = serial.Serial(port=\"COM9\", \\\r\n      baudrate=9600, \\\r\n      parity=serial.PARITY_NONE, \\\r\n      stopbits=serial.STOPBITS_ONE, \\\r\n      bytesize=serial.EIGHTBITS)\r\n\r\ntime.sleep(0.1)\r\nser.flushOutput()\r\nser.flushInput()\r\n\r\ncmdToSend = bytearray.fromhex(\"0D 0E 0A 0D 0B 0E 0E 0F\")\r\narrLen = len(cmdToSend)\r\nidx = 1\r\nprint(40*\"=\")\r\nfor cmd_byte in bytearray(cmdToSend):\r\n    print(\"index %d of %d = 0x%02x\" % (idx, arrLen, cmd_byte))\r\n    idx += 1\r\n    rtn = ser.write(cmd_byte)\r\n    if (rtn != 1):\r\n        print(\"Serial.write returned:  0x%02X\" % rtn)\r\n    rtn = 0\r\nprint(40*\"=\")\r\nrtn = ser.write('I like eat deadbeef!'.encode('utf-8'))\r\nif (rtn != 1):\r\n    print(\"Serial.write returned: %d\" % rtn)\r\n```\r\n\r\nOutput:\r\n```\r\n========================================\r\nindex 1 of 8 = 0x0d\r\nSerial.write returned: 0x0D\r\nindex 2 of 8 = 0x0e\r\nSerial.write returned: 0x0E\r\nindex 3 of 8 = 0x0a\r\nSerial.write returned: 0x0A\r\nindex 4 of 8 = 0x0d\r\nSerial.write returned: 0x0D\r\nindex 5 of 8 = 0x0b\r\nSerial.write returned: 0x0B\r\nindex 6 of 8 = 0x0e\r\nSerial.write returned: 0x0E\r\nindex 7 of 8 = 0x0e\r\nSerial.write returned: 0x0E\r\nindex 8 of 8 = 0x0f\r\nSerial.write returned: 0x0F\r\n========================================\r\nSerial.write returned: 20\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/423", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/423/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/423/events", "html_url": "https://github.com/pyserial/pyserial/issues/423", "id": 425897304, "node_id": "MDU6SXNzdWU0MjU4OTczMDQ=", "number": 423, "title": "[Question] pyserial gets stuck when trying to read a large string", "user": {"login": "manszigher", "id": 25029263, "node_id": "MDQ6VXNlcjI1MDI5MjYz", "avatar_url": "https://avatars0.githubusercontent.com/u/25029263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manszigher", "html_url": "https://github.com/manszigher", "followers_url": "https://api.github.com/users/manszigher/followers", "following_url": "https://api.github.com/users/manszigher/following{/other_user}", "gists_url": "https://api.github.com/users/manszigher/gists{/gist_id}", "starred_url": "https://api.github.com/users/manszigher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manszigher/subscriptions", "organizations_url": "https://api.github.com/users/manszigher/orgs", "repos_url": "https://api.github.com/users/manszigher/repos", "events_url": "https://api.github.com/users/manszigher/events{/privacy}", "received_events_url": "https://api.github.com/users/manszigher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-27T11:10:10Z", "updated_at": "2019-03-28T06:46:39Z", "closed_at": "2019-03-28T06:46:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am running on an raspberrypi 3 B+ and using python 3.5 and pyserial 3.4 on a GNU/Linux 32 bit system. I am trying to send over a large string over 10KB.  I have the following settings\r\n\r\n<pre>\r\nbaudrate=115200\r\nbytesize=serial.EIGHTBITS\r\nparity=serial.PARITY_NONE\r\nstopbits=serial.STOPBITS_ONE\r\nrtscts=True\r\n</pre>\r\n\r\nI have my raspberrypi connected to my host and is trying to send over a large string using echo \"large string\" > /dev/ttyUSB0 and then running my python application on the raspberrypi reading this data out. For some reason the application gets stuck after 4-8kB. When the application gets stuck I can close it and reinitialize the serial and running the following commands\r\n\r\n<pre>\r\nstty -F /dev/ttyUSB0 9600 raw crtscts\r\ncat /dev/ttyUSB0\r\n</pre>\r\n\r\nand it will continue and print out the rest of the string. So I can send the string over by running the following on the target:\r\n\r\n<pre>\r\nstty -F /dev/ttyUSB0 9600 raw crtscts\r\ncat /dev/ttyUSB0\r\n</pre>\r\n\r\nand on the host:\r\n\r\n<pre>\r\nstty -F /dev/ttyUSB0 9600 raw crtscts\r\necho \"large string\" > /dev/ttyUSB0\r\n</pre>\r\n\r\nI can also receive the string as expected when skipping pyserial and just opening the device directly using a cat implementation in python.\r\n\r\n<pre>\r\nstty -F /dev/ttyUSB0 9600 raw crtscts\r\n./cat.py /dev/ttyUSB0\r\n</pre>\r\n\r\nThe cat.py have the following implementation\r\n \r\n<pre>\r\n#!/usr/bin/python\r\nimport sys, os\r\nfor _arg in sys.argv[1:]:\r\n  try:\r\n    with open(_arg, 'r') as _file:\r\n      _char = _file.read(1)\r\n      while _char:\r\n        sys.stdout.write(_char)\r\n        _char = _file.read(1)\r\n  except IOError as _err:\r\n    sys.stderr.write(os.path.basename(sys.argv[0]) + \": \" + _arg +\r\n    \": \" + _err.strerror + \"\\n\")\r\n</pre>\r\n\r\nMy test application that is failing\r\n\r\n<pre>\r\n#!/usr/bin/env python3\r\nimport signal\r\nimport logging\r\nimport serial\r\nfrom logging.handlers import RotatingFileHandler\r\n\r\ndef main():\r\n    logger = logging.getLogger('My Application')\r\n    level = logging.INFO\r\n    logging.basicConfig(datefmt='%Y-%m-%d %H:%M:%S', format='%(asctime)s %(levelname)-8s %(message)s', level=level)\r\n    handler = RotatingFileHandler(\"/opt/application/logs/application.log\", maxBytes=100*1024*1024, backupCount=10)\r\n    handler.setLevel(level)\r\n    formatter = logging.Formatter('%(asctime)-12s [%(levelname)s] %(message)s')\r\n    handler.setFormatter(formatter)\r\n    logger.addHandler(handler)\r\n    logger.info('Welcome to My Application\")\r\n\r\n    serial_port = serial.Serial(\"/dev/ttyUSB0\", baudrate=9600, bytesize=serial.EIGHTBITS, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, rtscts=True)\r\n\r\n    i = 0\r\n    while True:\r\n        serial_port.write('{}> '.format(\"cli\").encode())\r\n        ch = serial_port.read()\r\n        logger.info(\"ch[{}] = {}\".format(i, str(ch, 'utf-8')))\r\n        i += 1\r\n\r\n    signal.pause()\r\n    logging.shutdown()\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n</pre>\r\n\r\nSo there are some things pointing to an issue in the pyserial but I have this working when running on my host running Linux 64 bit OS and using python 3.6 but with the same pyserial version 3.4. Any assistance on this to exclude pyserial as the problem or pointing me to what I can potentially do solve this issue when using pyserial would be much appreciated because I am running out of ideas.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/412", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/412/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/412/events", "html_url": "https://github.com/pyserial/pyserial/issues/412", "id": 406687405, "node_id": "MDU6SXNzdWU0MDY2ODc0MDU=", "number": 412, "title": "Problem with rfc2217 & ser2net", "user": {"login": "berkinet", "id": 3324529, "node_id": "MDQ6VXNlcjMzMjQ1Mjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3324529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berkinet", "html_url": "https://github.com/berkinet", "followers_url": "https://api.github.com/users/berkinet/followers", "following_url": "https://api.github.com/users/berkinet/following{/other_user}", "gists_url": "https://api.github.com/users/berkinet/gists{/gist_id}", "starred_url": "https://api.github.com/users/berkinet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berkinet/subscriptions", "organizations_url": "https://api.github.com/users/berkinet/orgs", "repos_url": "https://api.github.com/users/berkinet/repos", "events_url": "https://api.github.com/users/berkinet/events{/privacy}", "received_events_url": "https://api.github.com/users/berkinet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 243383812, "node_id": "MDU6TGFiZWwyNDMzODM4MTI=", "url": "https://api.github.com/repos/pyserial/pyserial/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-02-05T09:11:13Z", "updated_at": "2019-08-04T13:40:20Z", "closed_at": "2019-02-08T17:31:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is most likely a user error. But, if it is, I am at a loss to resolve it.  I am using pyserial/rfc2217 to connect to a server running ser2net v3.5 (on OpenWRT). The ser2net config is exactly as documented in rfc2217.py:\r\n &#35;- run a server: run ser2net daemon, in /etc/ser2net.conf:\r\n &#35;    2000:telnet:0:/dev/ttyS0:9600 remctl banner\r\n\r\nHowever, any attempts to connect fail at:\r\n        if self._write_timeout is not None:\r\n            raise NotImplementedError('write_timeout is currently not supported')\r\n\r\nIf I comment out that test, the connection succeeds. There does not appear to be any option in ser2net to not sent wait_timeout.\r\n\r\nAny ideas how to resolve this?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/403", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/403/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/403/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/403/events", "html_url": "https://github.com/pyserial/pyserial/issues/403", "id": 394956753, "node_id": "MDU6SXNzdWUzOTQ5NTY3NTM=", "number": 403, "title": "Use serial.write in the Python Shell at Raspberry Pi and in the Mac OS terminal can't get the data", "user": {"login": "chaolunner", "id": 22044289, "node_id": "MDQ6VXNlcjIyMDQ0Mjg5", "avatar_url": "https://avatars1.githubusercontent.com/u/22044289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chaolunner", "html_url": "https://github.com/chaolunner", "followers_url": "https://api.github.com/users/chaolunner/followers", "following_url": "https://api.github.com/users/chaolunner/following{/other_user}", "gists_url": "https://api.github.com/users/chaolunner/gists{/gist_id}", "starred_url": "https://api.github.com/users/chaolunner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chaolunner/subscriptions", "organizations_url": "https://api.github.com/users/chaolunner/orgs", "repos_url": "https://api.github.com/users/chaolunner/repos", "events_url": "https://api.github.com/users/chaolunner/events{/privacy}", "received_events_url": "https://api.github.com/users/chaolunner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-31T10:06:35Z", "updated_at": "2020-03-13T20:14:49Z", "closed_at": "2019-01-06T10:28:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Enter the following code in the Python Shell at Raspberry Pi:\r\n```\r\nimport serial\r\n\r\nser = serial.Serial(\"/dev/rfcomm0\", 9600m, timeout=1)\r\nser .write(b\"x\")\r\nser.close()\r\n```\r\nI can't get any data in the Mac OS terminal until I enter a command in the Raspberry Pi terminal: `sudo echo \u201chello\u201d > /dev/rfcomm0`.\r\nThen you can see `xhello` message output.\r\nNot sure why? any idea?\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/399", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/399/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/399/events", "html_url": "https://github.com/pyserial/pyserial/issues/399", "id": 392820829, "node_id": "MDU6SXNzdWUzOTI4MjA4Mjk=", "number": 399, "title": "Are start and stop bits automatically sent?", "user": {"login": "max-circlefade", "id": 44303547, "node_id": "MDQ6VXNlcjQ0MzAzNTQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/44303547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-circlefade", "html_url": "https://github.com/max-circlefade", "followers_url": "https://api.github.com/users/max-circlefade/followers", "following_url": "https://api.github.com/users/max-circlefade/following{/other_user}", "gists_url": "https://api.github.com/users/max-circlefade/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-circlefade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-circlefade/subscriptions", "organizations_url": "https://api.github.com/users/max-circlefade/orgs", "repos_url": "https://api.github.com/users/max-circlefade/repos", "events_url": "https://api.github.com/users/max-circlefade/events{/privacy}", "received_events_url": "https://api.github.com/users/max-circlefade/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-19T23:31:30Z", "updated_at": "2018-12-22T11:59:42Z", "closed_at": "2018-12-22T11:59:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey everyone!\r\nMight be a noob question, if I send a command using serial, do I have to integrate the start (0) and stop (1) bits to the message sent ?\r\nLet's say I want to send the command 10001110, shall I do\r\nser.write(bytes(10001110))\r\nor\r\nser.write(bytes(0100011101))\r\n\r\nFrom what I see in the files, the serial.write uses os.write(self.fd,..) to send the bits to the port ; but can't find a reference to start and stop bits.\r\n\r\nThanks :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/398", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/398/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/398/events", "html_url": "https://github.com/pyserial/pyserial/issues/398", "id": 390519704, "node_id": "MDU6SXNzdWUzOTA1MTk3MDQ=", "number": 398, "title": "how to open the port with serial.Serial use python3?? ", "user": {"login": "LFDwater", "id": 38934315, "node_id": "MDQ6VXNlcjM4OTM0MzE1", "avatar_url": "https://avatars0.githubusercontent.com/u/38934315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LFDwater", "html_url": "https://github.com/LFDwater", "followers_url": "https://api.github.com/users/LFDwater/followers", "following_url": "https://api.github.com/users/LFDwater/following{/other_user}", "gists_url": "https://api.github.com/users/LFDwater/gists{/gist_id}", "starred_url": "https://api.github.com/users/LFDwater/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LFDwater/subscriptions", "organizations_url": "https://api.github.com/users/LFDwater/orgs", "repos_url": "https://api.github.com/users/LFDwater/repos", "events_url": "https://api.github.com/users/LFDwater/events{/privacy}", "received_events_url": "https://api.github.com/users/LFDwater/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 243383812, "node_id": "MDU6TGFiZWwyNDMzODM4MTI=", "url": "https://api.github.com/repos/pyserial/pyserial/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-13T05:06:33Z", "updated_at": "2019-08-12T13:36:44Z", "closed_at": "2019-08-12T13:36:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "i  have try:\r\nimport serial\r\nser = serial.Serial(\"/dev/ttyUSB0\",230400)\r\n\r\nbut error:\r\nAttributeError: module 'serial' has no attribute 'Serial'\r\n\r\nand i can make sure not exist file named serial.py which writed by myself\r\n\r\nnow, i don't know how to do  ~0.0~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/397", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/397/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/397/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/397/events", "html_url": "https://github.com/pyserial/pyserial/issues/397", "id": 389986504, "node_id": "MDU6SXNzdWUzODk5ODY1MDQ=", "number": 397, "title": "Is send_break duration in seconds?", "user": {"login": "ericksonla", "id": 10374910, "node_id": "MDQ6VXNlcjEwMzc0OTEw", "avatar_url": "https://avatars1.githubusercontent.com/u/10374910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericksonla", "html_url": "https://github.com/ericksonla", "followers_url": "https://api.github.com/users/ericksonla/followers", "following_url": "https://api.github.com/users/ericksonla/following{/other_user}", "gists_url": "https://api.github.com/users/ericksonla/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericksonla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericksonla/subscriptions", "organizations_url": "https://api.github.com/users/ericksonla/orgs", "repos_url": "https://api.github.com/users/ericksonla/repos", "events_url": "https://api.github.com/users/ericksonla/events{/privacy}", "received_events_url": "https://api.github.com/users/ericksonla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-11T22:44:13Z", "updated_at": "2019-02-08T00:23:44Z", "closed_at": "2019-02-08T00:23:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "My guess is that the duration parameter for send_break is in seconds. Can you confirm or correct please, and it would be great if the docs were updated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/388", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/388/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/388/events", "html_url": "https://github.com/pyserial/pyserial/issues/388", "id": 370248747, "node_id": "MDU6SXNzdWUzNzAyNDg3NDc=", "number": 388, "title": "Miniterm: send data on \"Enter\"", "user": {"login": "ivankravets", "id": 1760209, "node_id": "MDQ6VXNlcjE3NjAyMDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1760209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankravets", "html_url": "https://github.com/ivankravets", "followers_url": "https://api.github.com/users/ivankravets/followers", "following_url": "https://api.github.com/users/ivankravets/following{/other_user}", "gists_url": "https://api.github.com/users/ivankravets/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankravets/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankravets/subscriptions", "organizations_url": "https://api.github.com/users/ivankravets/orgs", "repos_url": "https://api.github.com/users/ivankravets/repos", "events_url": "https://api.github.com/users/ivankravets/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankravets/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-15T16:42:31Z", "updated_at": "2020-03-17T22:13:54Z", "closed_at": "2020-03-17T22:13:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Firstly, thank you so much for a great tool! Our users use it in pair with @PlatformIO.\r\nThey ask very often how to send a bulk of data on \"Enter\". It's very important for embedded applications. Does miniterm have this functionality or, maybe, API?\r\n\r\nCurrently, miniterm sends/writes each byte when typing.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/383", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/383/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/383/events", "html_url": "https://github.com/pyserial/pyserial/issues/383", "id": 358655065, "node_id": "MDU6SXNzdWUzNTg2NTUwNjU=", "number": 383, "title": "serial has no attribute SerialBase", "user": {"login": "chenzeshu", "id": 20907591, "node_id": "MDQ6VXNlcjIwOTA3NTkx", "avatar_url": "https://avatars3.githubusercontent.com/u/20907591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenzeshu", "html_url": "https://github.com/chenzeshu", "followers_url": "https://api.github.com/users/chenzeshu/followers", "following_url": "https://api.github.com/users/chenzeshu/following{/other_user}", "gists_url": "https://api.github.com/users/chenzeshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenzeshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenzeshu/subscriptions", "organizations_url": "https://api.github.com/users/chenzeshu/orgs", "repos_url": "https://api.github.com/users/chenzeshu/repos", "events_url": "https://api.github.com/users/chenzeshu/events{/privacy}", "received_events_url": "https://api.github.com/users/chenzeshu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-10T14:41:44Z", "updated_at": "2018-09-10T17:14:00Z", "closed_at": "2018-09-10T17:14:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi guys!\r\n\r\nwhen I used `pyinstaller`  to pack a simple `test.py` which imported `serial`,  it throwed out an error `serial has no attribute 'SerialBase'`\r\n\r\n- my environment\r\n```\r\nwindows 10\r\npython version 3.6.6\r\npyserial version 3.2.1\r\npyinstaller version 3.4\r\n```\r\n\r\n- code\r\n```\r\n# test.py\r\nimport serial\r\nfrom serial import Serial\r\n\r\ndef search_com():\r\n    ser = Serial()\r\n    i = 1  \r\n    error_num = 0 \u3000\r\n\r\n    while i < 10:\r\n        name = 'COM' + str(i)\r\n        ser.open\r\n        try:\r\n            ser.is_open\r\n            ser = Serial(name)\r\n            ser.baudrate = 9600\r\n            self.com = name\r\n            print(name)\r\n        except serial.serialutil.SerialException:\r\n            error_num += 1\r\n        i += 1\r\n\r\nserch_com()\r\n```\r\n\r\n- error:\r\n`serial has no attribute 'SerialBase'`\r\n\r\n- my tracking\r\n\r\nunder the error direction, I went to  line 475 of `serialwin32.py`\r\n```\r\n@SerialBase.exclusive.setter\r\ndef exclusive(self, exclusive):\r\n    \"\"\"Change the exclusive access setting.\"\"\"\r\n    if exclusive is not None and not exclusive:\r\n        raise ValueError('win32 only supports exclusive access (not: {})'.format(exclusive))\r\n    else:\r\n        serial.SerialBase.exclusive.__set__(self, exclusive)\r\n```  \r\nand the error pointed out `serial.SerialBase` of the last line  is wrong(`serial has no attribute 'SerialBase'`)\r\n\r\n- my solution:\r\nuninstall 3.2.1 and install 3.1.1,  then it worked\r\n\r\n- question:\r\nwhy 3.2.1 cannot work with `pyinstaller`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/378", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/378/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/378/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/378/events", "html_url": "https://github.com/pyserial/pyserial/issues/378", "id": 351755518, "node_id": "MDU6SXNzdWUzNTE3NTU1MTg=", "number": 378, "title": "Opening twice the same port on raspberry", "user": {"login": "aleksbelov", "id": 4018772, "node_id": "MDQ6VXNlcjQwMTg3NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4018772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksbelov", "html_url": "https://github.com/aleksbelov", "followers_url": "https://api.github.com/users/aleksbelov/followers", "following_url": "https://api.github.com/users/aleksbelov/following{/other_user}", "gists_url": "https://api.github.com/users/aleksbelov/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksbelov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksbelov/subscriptions", "organizations_url": "https://api.github.com/users/aleksbelov/orgs", "repos_url": "https://api.github.com/users/aleksbelov/repos", "events_url": "https://api.github.com/users/aleksbelov/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksbelov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 243383812, "node_id": "MDU6TGFiZWwyNDMzODM4MTI=", "url": "https://api.github.com/repos/pyserial/pyserial/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-17T22:21:21Z", "updated_at": "2019-02-08T03:04:13Z", "closed_at": "2019-02-08T03:04:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why there is no exception?\r\n![screen shot 2018-08-17 at 23 41 30](https://user-images.githubusercontent.com/4018772/44291105-f5eaf900-a284-11e8-88ae-f9bff143d561.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/375", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/375/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/375/events", "html_url": "https://github.com/pyserial/pyserial/issues/375", "id": 348953934, "node_id": "MDU6SXNzdWUzNDg5NTM5MzQ=", "number": 375, "title": "Data Corruption or Miss-Parsed Data Due To Unknown Issue", "user": {"login": "knockerclot0715", "id": 19660509, "node_id": "MDQ6VXNlcjE5NjYwNTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/19660509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/knockerclot0715", "html_url": "https://github.com/knockerclot0715", "followers_url": "https://api.github.com/users/knockerclot0715/followers", "following_url": "https://api.github.com/users/knockerclot0715/following{/other_user}", "gists_url": "https://api.github.com/users/knockerclot0715/gists{/gist_id}", "starred_url": "https://api.github.com/users/knockerclot0715/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/knockerclot0715/subscriptions", "organizations_url": "https://api.github.com/users/knockerclot0715/orgs", "repos_url": "https://api.github.com/users/knockerclot0715/repos", "events_url": "https://api.github.com/users/knockerclot0715/events{/privacy}", "received_events_url": "https://api.github.com/users/knockerclot0715/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 243383812, "node_id": "MDU6TGFiZWwyNDMzODM4MTI=", "url": "https://api.github.com/repos/pyserial/pyserial/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-09T02:27:09Z", "updated_at": "2019-02-08T02:59:17Z", "closed_at": "2019-02-08T02:59:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Intro: I'm trying to read serial data out from my PM2.5 sensor through Python 3.7 and which ever the newest version of PySerial that it is currently available.\r\n\r\nMy Source Code:\r\n`import serial`\r\n`while True:`\r\n`Serial = serial.Serial('COM3', 9600, timeout=1)`\r\n`print(Serial.readline())`\r\n`Serial.close()`\r\n\r\nExpected Outcome:\r\n`\r\nb'\\xaa\\xc0\\xc2\\x00\\x16\\x01\\xd2\\xff\\xaa\\xab'\r\n`\r\n\r\nActual Outcome:\r\n`\r\nb'\\xaa\\xc0\\xc2\\x00\\x16\\x01\\xd2\\xff\\xaa\\xab'\r\nb'\\xaa\\xc0\\xc2\\x00\\x19\\x01\\xd2\\xff\\xad\\xab'\r\nb'\\xaa\\xc0\\xc2\\x00\\x19\\x01\\xd2\\xff\\xad\\xab\\xaa\\xc0\\xc1\\x00\\x17\\x01\\xd2\\xff\\xaa\\xab'\r\nb'\\xaa\\xc0\\xc1\\x00\\x15\\x01\\xd2\\xff\\xa8\\xab\\xaa\\xc0\\xc1\\x00\\x14\\x01\\xd2\\xff\\xa7\\xab'\r\nb'\\xaa\\xc0\\xc0\\x00\\x14\\x01\\xd2\\xff\\xa6\\xab\\xaa\\xc0\\xc0\\x00\\x15\\x01\\xd2\\xff\\xa7\\xab'\r\nb'\\xaa\\xc0\\xc0\\x00\\x19\\x01\\xd2\\xff\\xab\\xab\\xaa\\xc0\\xc0\\x00\\x1e\\x01\\xd2\\xff\\xb0\\xab'\r\nb'\\xaa\\xc0\\xc1\\x00#\\x01\\xd2\\xff\\xb6\\xab\\xaa\\xc0\\xc2\\x00$\\x01\\xd2\\xff\\xb8\\xab'\r\nb'\\xaa\\xc0\\xc3\\x00#\\x01\\xd2\\xff\\xb8\\xab\\xaa\\xc0\\xc3\\x00 \\x01\\xd2\\xff\\xb5\\xab'\r\nb'\\xaa\\xc0\\xc3\\x00\\x1f\\x01\\xd2\\xff\\xb4\\xab\\xaa\\xc0\\xc3\\x00 \\x01\\xd2\\xff\\xb5\\xab'\r\nb\"\\xaa\\xc0\\xc4\\x00$\\x01\\xd2\\xff\\xba\\xab\\xaa\\xc0\\xc5\\x00'\\x01\\xd2\\xff\\xbe\\xab\"\r\nb'\\xaa\\xc0\\xc6\\x00-\\x01\\xd2\\xff\\xc5\\xab\\xaa\\xc0\\xc6\\x00/\\x01\\xd2\\xff\\xc7\\xab'\r\nb'\\xaa\\xc0\\xc8\\x003\\x01\\xd2\\xff\\xcd\\xab\\xaa\\xc0\\xc8\\x004\\x01\\xd2\\xff\\xce\\xab'\r\nb'\\xaa\\xc0\\xc8\\x003\\x01\\xd2\\xff\\xcd\\xab\\xaa\\xc0\\xc7\\x000\\x01\\xd2\\xff\\xc9\\xab'\r\nb'\\xaa\\xc0\\xc6\\x00+\\x01\\xd2\\xff\\xc3\\xab\\xaa\\xc0\\xc6\\x00)\\x01\\xd2\\xff\\xc1\\xab'\r\nb\"\\xaa\\xc0\\xc6\\x00'\\x01\\xd2\\xff\\xbf\\xab\\xaa\\xc0\\xc5\\x00'\\x01\\xd2\\xff\\xbe\\xab\"\r\nb'\\xaa\\xc0\\xc4\\x00#\\x01\\xd2\\xff\\xb9\\xab\\xaa\\xc0\\xc2\\x00!\\x01\\xd2\\xff\\xb5\\xab'\r\nb'\\xaa\\xc0\\xc0\\x00\\x1f\\x01\\xd2\\xff\\xb1\\xab\\xaa\\xc0\\xc1\\x00!\\x01\\xd2\\xff\\xb4\\xab'\r\n`\r\n\r\nNotice that starting from line 7 of output, it starts to output symbols such as '!', '#' or '$'. This shouldn't be happening as I would need to convert this data from hexadecimal into deanery values. I have made sure that the correct baud rate is entered: 9600, and the correct port name: 'COM3'. I don't see anything wrong with my code, is it possible that someone help me out here a little bit?\r\n\r\nI can provide more technical documentation in regards to the PM2.5 sensor but unfortunately the documentation is in Chinese, I can however translate it if needed. Thanks\r\n\r\nPS: Markdown isn't working for me for some reason, so I've attached a screenshot of my source code and the output.\r\n\r\n![Source Code](https://user-images.githubusercontent.com/19660509/43874470-a252b5c0-9bbe-11e8-919d-b1a38cb3a064.PNG)\r\n![Output](https://user-images.githubusercontent.com/19660509/43874472-a30e8b38-9bbe-11e8-8021-6f7a410d5a98.PNG)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/372", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/372/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/372/events", "html_url": "https://github.com/pyserial/pyserial/issues/372", "id": 346788836, "node_id": "MDU6SXNzdWUzNDY3ODg4MzY=", "number": 372, "title": "ReaderThread.write() doesn't written bytes written from underlying Serial object", "user": {"login": "si-gwossum", "id": 11904427, "node_id": "MDQ6VXNlcjExOTA0NDI3", "avatar_url": "https://avatars3.githubusercontent.com/u/11904427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/si-gwossum", "html_url": "https://github.com/si-gwossum", "followers_url": "https://api.github.com/users/si-gwossum/followers", "following_url": "https://api.github.com/users/si-gwossum/following{/other_user}", "gists_url": "https://api.github.com/users/si-gwossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/si-gwossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/si-gwossum/subscriptions", "organizations_url": "https://api.github.com/users/si-gwossum/orgs", "repos_url": "https://api.github.com/users/si-gwossum/repos", "events_url": "https://api.github.com/users/si-gwossum/events{/privacy}", "received_events_url": "https://api.github.com/users/si-gwossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-01T22:12:21Z", "updated_at": "2019-02-08T02:14:00Z", "closed_at": "2019-02-08T02:13:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "For threaded operation, ReaderThread.write() should return the same value as serial.write().  It does not do this in pySerial 3.4", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/369", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/369/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/369/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/369/events", "html_url": "https://github.com/pyserial/pyserial/issues/369", "id": 342602594, "node_id": "MDU6SXNzdWUzNDI2MDI1OTQ=", "number": 369, "title": "How to take variable in python 3 and pass that variable in serial writing command", "user": {"login": "ujjaliitkgp", "id": 24600413, "node_id": "MDQ6VXNlcjI0NjAwNDEz", "avatar_url": "https://avatars0.githubusercontent.com/u/24600413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ujjaliitkgp", "html_url": "https://github.com/ujjaliitkgp", "followers_url": "https://api.github.com/users/ujjaliitkgp/followers", "following_url": "https://api.github.com/users/ujjaliitkgp/following{/other_user}", "gists_url": "https://api.github.com/users/ujjaliitkgp/gists{/gist_id}", "starred_url": "https://api.github.com/users/ujjaliitkgp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ujjaliitkgp/subscriptions", "organizations_url": "https://api.github.com/users/ujjaliitkgp/orgs", "repos_url": "https://api.github.com/users/ujjaliitkgp/repos", "events_url": "https://api.github.com/users/ujjaliitkgp/events{/privacy}", "received_events_url": "https://api.github.com/users/ujjaliitkgp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-19T07:01:21Z", "updated_at": "2018-07-19T12:43:18Z", "closed_at": "2018-07-19T12:43:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "import serial           # import the module\r\nser.write(\"speed 6\\r\".encode())\r\n\r\nhow can I take the variable to say 'x' and assign x=6 then pass in the write command (speed=NC4Port.write(\"speed x\\r\".encode()))", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/366", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/366/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/366/events", "html_url": "https://github.com/pyserial/pyserial/issues/366", "id": 341296943, "node_id": "MDU6SXNzdWUzNDEyOTY5NDM=", "number": 366, "title": "_update_break_state is broken on mac due to wrong ioctl value", "user": {"login": "klanmiko", "id": 1013503, "node_id": "MDQ6VXNlcjEwMTM1MDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1013503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klanmiko", "html_url": "https://github.com/klanmiko", "followers_url": "https://api.github.com/users/klanmiko/followers", "following_url": "https://api.github.com/users/klanmiko/following{/other_user}", "gists_url": "https://api.github.com/users/klanmiko/gists{/gist_id}", "starred_url": "https://api.github.com/users/klanmiko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klanmiko/subscriptions", "organizations_url": "https://api.github.com/users/klanmiko/orgs", "repos_url": "https://api.github.com/users/klanmiko/repos", "events_url": "https://api.github.com/users/klanmiko/events{/privacy}", "received_events_url": "https://api.github.com/users/klanmiko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-15T06:39:09Z", "updated_at": "2019-08-13T11:51:10Z", "closed_at": "2019-08-13T11:51:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tested this on a Macbook Pro the other day, opening a serial port and setting the break_condition property leads to an OS Error \r\n\r\n```\r\nFile \"/usr/local/lib/python3.6/site-packages/serial/serialutil.py\", line 479, in break_condition\r\n    self._update_break_state()\r\n  File \"/usr/local/lib/python3.6/site-packages/serial/serialposix.py\", line 620, in _update_break_state\r\n    fcntl.ioctl(self.fd, TIOCSBRK)\r\nOSError: [Errno 25] Inappropriate ioctl for device\r\n```\r\n\r\nThis is due to the linux values for TIOCSBRK and TIOCCBRK being used, instead of the mac (bsd kernel headers) values for those ioctl syscalls.\r\n\r\nThe correct values would need to be added to the library in order for this functionality to work \r\n\r\nFixed by #367 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/352", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/352/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/352/events", "html_url": "https://github.com/pyserial/pyserial/issues/352", "id": 331215882, "node_id": "MDU6SXNzdWUzMzEyMTU4ODI=", "number": 352, "title": "occasional missed packets", "user": {"login": "rdpoor", "id": 1796161, "node_id": "MDQ6VXNlcjE3OTYxNjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1796161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdpoor", "html_url": "https://github.com/rdpoor", "followers_url": "https://api.github.com/users/rdpoor/followers", "following_url": "https://api.github.com/users/rdpoor/following{/other_user}", "gists_url": "https://api.github.com/users/rdpoor/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdpoor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdpoor/subscriptions", "organizations_url": "https://api.github.com/users/rdpoor/orgs", "repos_url": "https://api.github.com/users/rdpoor/repos", "events_url": "https://api.github.com/users/rdpoor/events{/privacy}", "received_events_url": "https://api.github.com/users/rdpoor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 243383812, "node_id": "MDU6TGFiZWwyNDMzODM4MTI=", "url": "https://api.github.com/repos/pyserial/pyserial/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-11T14:34:38Z", "updated_at": "2018-06-15T00:38:02Z", "closed_at": "2018-06-12T21:33:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Environment:\r\n* macOS High Sierra (10.13.5)\r\n* QinHeng Electronics HL-340 USB-Serial adapter (VID:PID = 1A86:7523)\r\n* pyserial 3.4\r\n* Python 3.6.2\r\n## Statement of the problem\r\nWhen performing async read operations, once in a (great) while, no packet is received.\r\n## Details\r\nI'm sending Modbus RTU packets from an embedded device at 19200 baud over an RS485 link to the aforementioned serial adaptor.  Once in a while the `serial.read(256)` operation fails to read any bytes, although my oscilloscope confirms that the bytes were transmitted.  \r\n\r\nMy code is (approximately):\r\n\r\n    serial.baudrate = 19200\r\n    serial.timeout = 0.0\r\n    ...\r\n    serial.write(write_buffer)\r\n    while not end_of_packet:\r\n        read_buffer = bytearray()\r\n        fragment = serial.read(256)\r\n        if len(fragment)>0:\r\n            read_buffer.extend(fragment)\r\n            time.sleep(0.002)\r\n        else:\r\n            # didn't get any bytes this time around -- signal end of packet\r\n\r\nI understand that this may not be an issue with pyserial at all -- it could be a USB driver problem, etc.  \r\n## The real question\r\nWhat tests can I do to refine where the problem lies?  I s'pose a low-level stress test written in C would be useful.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/349", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/349/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/349/events", "html_url": "https://github.com/pyserial/pyserial/issues/349", "id": 330344210, "node_id": "MDU6SXNzdWUzMzAzNDQyMTA=", "number": 349, "title": "Cannot detect Windows Arrow Keys", "user": {"login": "cefn", "id": 159819, "node_id": "MDQ6VXNlcjE1OTgxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/159819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cefn", "html_url": "https://github.com/cefn", "followers_url": "https://api.github.com/users/cefn/followers", "following_url": "https://api.github.com/users/cefn/following{/other_user}", "gists_url": "https://api.github.com/users/cefn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cefn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cefn/subscriptions", "organizations_url": "https://api.github.com/users/cefn/orgs", "repos_url": "https://api.github.com/users/cefn/repos", "events_url": "https://api.github.com/users/cefn/events{/privacy}", "received_events_url": "https://api.github.com/users/cefn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-06-07T16:18:33Z", "updated_at": "2019-01-12T07:29:41Z", "closed_at": "2018-06-07T22:55:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nHaving problems sending arrow key events in Command.exe on Windows 10. I am using a serial connection to a Micropython board ( https://vgkits.org/blog/2018/05/08/introductory-video-tutorial/ ) as a worked example.\r\n\r\nNot sure if this is a different issue to https://github.com/pyserial/pyserial/issues/207 as the modified version of miniterm indicated in that thread doesn't seem to resolve the issue.\r\n\r\nOn Mac and Linux, miniterm seems to be fine, launched as documented here...\r\nhttps://vgkits.org/blog/connecting-with-miniterm/\r\n...and the arrow keys work fine on Mac and Linux too.\r\n\r\nHowever, the Windows invocation documented there creates a console session in which arrow keys and backspace keys are junked.\r\n\r\nThe invocation I tried most recently on Windows (note this was an attempt to use the 'patched miniterm-MPY') was...\r\n\r\n```bash\r\npython miniterm_mpy.py --raw --eol CRLF --encoding ascii COM3 115200\r\n```\r\n\r\nThis leads to a terminal in which pressing the up key produces first...\r\n\r\n```\r\n?H?\r\n```\r\n\r\n...and then if you press again it seems to send an up arrow key and shows...\r\n\r\n```\r\n clearPixel()\r\n```\r\n\r\n...then if you press again it shows \r\n\r\n```\r\n clearPixel()\u001b[12DsetPixel(0, red)\r\n```\r\n...and finally...\r\n```\r\n clearPixel()\u001b[12DsetPixel(0, red)\u001b[16D\u001b[K4+4\r\n```\r\n\r\nWhat it should show is single, clear lines drawn from the history one by one as you press up and down like...\r\n\r\n```\r\nclearPixel()\r\nsetPixel(0, red)\r\n4+4\r\n```\r\n\r\nI'd really like to know that I don't have to guide users to run everything inside the Ubuntu subsystem on Windows 10 just to get a terminal to work, but it sounds like that might be true.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/336", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/336/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/336/events", "html_url": "https://github.com/pyserial/pyserial/issues/336", "id": 317132192, "node_id": "MDU6SXNzdWUzMTcxMzIxOTI=", "number": 336, "title": "Set eol default to CR or CRLF based on platform introspection?", "user": {"login": "cefn", "id": 159819, "node_id": "MDQ6VXNlcjE1OTgxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/159819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cefn", "html_url": "https://github.com/cefn", "followers_url": "https://api.github.com/users/cefn/followers", "following_url": "https://api.github.com/users/cefn/following{/other_user}", "gists_url": "https://api.github.com/users/cefn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cefn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cefn/subscriptions", "organizations_url": "https://api.github.com/users/cefn/orgs", "repos_url": "https://api.github.com/users/cefn/repos", "events_url": "https://api.github.com/users/cefn/events{/privacy}", "received_events_url": "https://api.github.com/users/cefn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-24T08:58:47Z", "updated_at": "2018-05-08T01:49:22Z", "closed_at": "2018-05-08T01:35:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Copy-paste into a Micropython terminal works well with GNU screen, but miniterm has a weird artifact when copy-pasting that I would like to diagnose and fix.\r\n\r\nMicropython paste mode, (which suppresses python auto-indent) is successfully triggered by CTRL+E in both screen and miniterm.  \r\n\r\nIt presents as comprehensible and usable with GNU Screen, as invoked like `screen /dev/ttyUSB0 115200`...\r\n\r\n```python\r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== from time import sleep\r\n=== from machine import Pin\r\n=== from vgkits.ws2811 import *\r\n=== \r\n>>> \r\n```\r\n\r\nHowever, for some reason, a paste into Miniterm from within the same desktop terminal, and to the same UART shell on the same device, adds extra newlines or carriage returns into the terminal when copy-pasting, which has the effect of junking the readability of the pasted code. For example, this session invoked like`python3 -m serial.tools.miniterm --raw --encoding ascii /dev/ttyUSB0 115200`.\r\n\r\n```python\r\n--- Miniterm on /dev/ttyUSB0  115200,8,N,1 ---\r\n--- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---\r\n\r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== from time import sleep\r\n=== \r\nfrom machine import Pin\r\n=== \r\nfrom vgkits.ws2811 import *\r\n=== \r\n\r\n>>> \r\n``` \r\n\r\nIs there some flag I can use to eliminate this behaviour, or is it somehow to do with the way Miniterm actually sets up pipes of characters and is somehow baked into the system? \r\n\r\n# BACKGROUND QUESTION\r\n\r\nI would really prefer to use miniterm compared to GNU Screen, for cross-platform compatibility as part of support packages (mostly authored in python) as part of the [vgkits.org](https://vgkits.org) initiative.\r\n\r\nFor example, I can wrap miniterm easily from within my tool suite.\r\n\r\n```python\r\nimport sys\r\nfrom serial.tools import miniterm\r\nimport config, command\r\n\r\nminicomCommand = \"serial.tools.miniterm --raw --encoding ascii ${port} ${baud}\"\r\nminicomLookup = config.hardwareConfig()\r\ncommand.emulateInvocation(minicomCommand, minicomLookup)\r\nminiterm.main()\r\n```\r\n\r\nUnfortunately, copy-pasting from a text-editor into the shell for interactive debugging and learning is part of the core way of working I would like to share with learners of python. Is use of Miniterm and use of paste mode across platforms destined to fail?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/326", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/326/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/326/events", "html_url": "https://github.com/pyserial/pyserial/issues/326", "id": 306586022, "node_id": "MDU6SXNzdWUzMDY1ODYwMjI=", "number": 326, "title": "miniterm.py does not use exclusive access for native serial ports", "user": {"login": "silbe", "id": 4546556, "node_id": "MDQ6VXNlcjQ1NDY1NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/4546556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/silbe", "html_url": "https://github.com/silbe", "followers_url": "https://api.github.com/users/silbe/followers", "following_url": "https://api.github.com/users/silbe/following{/other_user}", "gists_url": "https://api.github.com/users/silbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/silbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/silbe/subscriptions", "organizations_url": "https://api.github.com/users/silbe/orgs", "repos_url": "https://api.github.com/users/silbe/repos", "events_url": "https://api.github.com/users/silbe/events{/privacy}", "received_events_url": "https://api.github.com/users/silbe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-19T18:45:15Z", "updated_at": "2018-05-07T18:17:32Z", "closed_at": "2018-05-07T18:17:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "(The below applies to Linux / POSIX; haven't checked how it behaves on Windows)\r\n\r\nRunning `miniterm.py` while another process already has the same native serial port open will cause both processes to receive only garbage (or more accurately each will only receive parts of the data), even if the other process uses `flock()` for exclusive access. Since pyserial 3.3 the API offers the `exclusive` option to avoid several processes having the same native port open at the same time. However `miniterm.py` doesn't use this API, neither by default nor via an option.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/314", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/314/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/314/events", "html_url": "https://github.com/pyserial/pyserial/issues/314", "id": 295252661, "node_id": "MDU6SXNzdWUyOTUyNTI2NjE=", "number": 314, "title": "Windows does not enumerate COM ports associated with other devices", "user": {"login": "DomAmato", "id": 6936055, "node_id": "MDQ6VXNlcjY5MzYwNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6936055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DomAmato", "html_url": "https://github.com/DomAmato", "followers_url": "https://api.github.com/users/DomAmato/followers", "following_url": "https://api.github.com/users/DomAmato/following{/other_user}", "gists_url": "https://api.github.com/users/DomAmato/gists{/gist_id}", "starred_url": "https://api.github.com/users/DomAmato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DomAmato/subscriptions", "organizations_url": "https://api.github.com/users/DomAmato/orgs", "repos_url": "https://api.github.com/users/DomAmato/repos", "events_url": "https://api.github.com/users/DomAmato/events{/privacy}", "received_events_url": "https://api.github.com/users/DomAmato/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-07T18:54:51Z", "updated_at": "2019-08-13T11:26:47Z", "closed_at": "2019-08-13T11:26:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a USB cellular modem which has 2 COM ports associated with it, one shows up in the device manager under the Ports (COM & LPT) the other under Modems. Performing serial.tools.list_ports only shows the one in the Ports. \r\n\r\nThe port under the modems is actually the more important one as it is the one needed to send AT commands to control the modem. I can connect and send/receive data using arduino's serial monitor which properly enumerates the port.\r\n\r\nFor reference the Modem GUID _{2C7089AA-2E0E-11D1-B114-00C04FC2AAE4}_ is mentioned here:\r\nhttps://docs.microsoft.com/en-us/windows-hardware/drivers/install/guid-devinterface-modem\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/313", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/313/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/313/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/313/events", "html_url": "https://github.com/pyserial/pyserial/issues/313", "id": 293885339, "node_id": "MDU6SXNzdWUyOTM4ODUzMzk=", "number": 313, "title": "serial.serialutil.SerialException: write failed: [Errno 5] Input/output error", "user": {"login": "pazucj", "id": 18125103, "node_id": "MDQ6VXNlcjE4MTI1MTAz", "avatar_url": "https://avatars2.githubusercontent.com/u/18125103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pazucj", "html_url": "https://github.com/pazucj", "followers_url": "https://api.github.com/users/pazucj/followers", "following_url": "https://api.github.com/users/pazucj/following{/other_user}", "gists_url": "https://api.github.com/users/pazucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pazucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pazucj/subscriptions", "organizations_url": "https://api.github.com/users/pazucj/orgs", "repos_url": "https://api.github.com/users/pazucj/repos", "events_url": "https://api.github.com/users/pazucj/events{/privacy}", "received_events_url": "https://api.github.com/users/pazucj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-02T13:17:50Z", "updated_at": "2018-02-14T09:59:54Z", "closed_at": "2018-02-14T09:59:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/311", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/311/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/311/events", "html_url": "https://github.com/pyserial/pyserial/issues/311", "id": 292162531, "node_id": "MDU6SXNzdWUyOTIxNjI1MzE=", "number": 311, "title": "Miniterm works ... my program doesn't :/ ", "user": {"login": "SandyWalsh", "id": 431773, "node_id": "MDQ6VXNlcjQzMTc3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/431773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandyWalsh", "html_url": "https://github.com/SandyWalsh", "followers_url": "https://api.github.com/users/SandyWalsh/followers", "following_url": "https://api.github.com/users/SandyWalsh/following{/other_user}", "gists_url": "https://api.github.com/users/SandyWalsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandyWalsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandyWalsh/subscriptions", "organizations_url": "https://api.github.com/users/SandyWalsh/orgs", "repos_url": "https://api.github.com/users/SandyWalsh/repos", "events_url": "https://api.github.com/users/SandyWalsh/events{/privacy}", "received_events_url": "https://api.github.com/users/SandyWalsh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-27T23:40:12Z", "updated_at": "2018-01-27T23:58:20Z", "closed_at": "2018-01-27T23:58:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "pySerial 3.4, python 2.7.12, Ubuntu 16.04.3 LTS\r\n\r\nTrying to write some commands to an Arduino. \r\n\r\nUsing miniterm works great ... \r\n```\r\n> python -m serial.tools.miniterm\r\n\r\n--- Available ports:\r\n---  1: /dev/ttyACM0         'ttyACM0'\r\n--- Enter port index or full name: 1\r\n--- Miniterm on /dev/ttyACM0  9600,8,N,1 ---\r\n--- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---\r\n2422224\r\n--- exit ---\r\n```\r\n\r\nI can send my \"blink#\" instructions and get the count echoed back (the 2422224). \r\n\r\nHowever, when I try to do this via my own python program, no joy ... \r\n\r\n```\r\nimport serial\r\nimport time\r\n\r\nser = serial.Serial(\"/dev/ttyACM0\", timeout=1)\r\nmsg = bytearray(b'blink4\\n'.encode())\r\nprint ser.get_settings()\r\nprint ser.port\r\nprint \"Writing\", msg\r\nprint \"Wrote: \", ser.write(msg)\r\nprint \"Out waiting\", ser.out_waiting\r\ntime.sleep(3)\r\nprint \"got:\", len(ser.read(1))\r\nser.close()\r\n```\r\n\r\nEven more bizarre ... if I open the connection with miniterm in one terminal and then run my program in another terminal it works fine (and the response is picked up in miniterm).\r\n\r\nI suspect there's something wonky with the connection info, but I've tried every way of setting 9600/8N1 with the same results. \r\n\r\nThe output looks like things are good (except for the response)\r\n\r\n```\r\n{'parity': 'N', 'baudrate': 9600, 'bytesize': 8, 'xonxoff': False, 'rtscts': False, 'timeout': 1, 'inter_byte_timeout': None, 'stopbits': 1, 'dsrdtr': False, 'write_timeout': None}\r\n/dev/ttyACM0\r\nWriting blink4\r\n\r\nWrote:  7\r\nOut waiting 0\r\ngot: 0\r\n```\r\n\r\nI don't have the Arduino IDE open nor any other terminal attached to the Arduino. \r\n\r\nSo bizarre ... any suggestions would be greatly appreciated. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/308", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/308/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/308/events", "html_url": "https://github.com/pyserial/pyserial/issues/308", "id": 291199552, "node_id": "MDU6SXNzdWUyOTExOTk1NTI=", "number": 308, "title": "rs485.py reading data from device", "user": {"login": "pazucj", "id": 18125103, "node_id": "MDQ6VXNlcjE4MTI1MTAz", "avatar_url": "https://avatars2.githubusercontent.com/u/18125103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pazucj", "html_url": "https://github.com/pazucj", "followers_url": "https://api.github.com/users/pazucj/followers", "following_url": "https://api.github.com/users/pazucj/following{/other_user}", "gists_url": "https://api.github.com/users/pazucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pazucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pazucj/subscriptions", "organizations_url": "https://api.github.com/users/pazucj/orgs", "repos_url": "https://api.github.com/users/pazucj/repos", "events_url": "https://api.github.com/users/pazucj/events{/privacy}", "received_events_url": "https://api.github.com/users/pazucj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-24T12:59:13Z", "updated_at": "2018-01-31T12:08:50Z", "closed_at": "2018-01-31T12:08:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, Im trying to make reading data from device with class RS485, from project rs485.py, there are some examples how do that with using SetRTS and timeouts/delays? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/307", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/307/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/307/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/307/events", "html_url": "https://github.com/pyserial/pyserial/issues/307", "id": 290819686, "node_id": "MDU6SXNzdWUyOTA4MTk2ODY=", "number": 307, "title": "Missing attributes under Windows 7?", "user": {"login": "rdpoor", "id": 1796161, "node_id": "MDQ6VXNlcjE3OTYxNjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1796161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdpoor", "html_url": "https://github.com/rdpoor", "followers_url": "https://api.github.com/users/rdpoor/followers", "following_url": "https://api.github.com/users/rdpoor/following{/other_user}", "gists_url": "https://api.github.com/users/rdpoor/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdpoor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdpoor/subscriptions", "organizations_url": "https://api.github.com/users/rdpoor/orgs", "repos_url": "https://api.github.com/users/rdpoor/repos", "events_url": "https://api.github.com/users/rdpoor/events{/privacy}", "received_events_url": "https://api.github.com/users/rdpoor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-23T12:32:04Z", "updated_at": "2018-01-23T12:35:42Z", "closed_at": "2018-01-23T12:35:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Deleting this issue since posting it on Stack Overflow: https://stackoverflow.com/questions/48401900/missing-attributes-running-pyserial-under-windows-7", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/297", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/297/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/297/events", "html_url": "https://github.com/pyserial/pyserial/issues/297", "id": 282360161, "node_id": "MDU6SXNzdWUyODIzNjAxNjE=", "number": 297, "title": "OSError: [Errno 5] Input/output error (Raspberry Pi 3)", "user": {"login": "willnil", "id": 34547107, "node_id": "MDQ6VXNlcjM0NTQ3MTA3", "avatar_url": "https://avatars3.githubusercontent.com/u/34547107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willnil", "html_url": "https://github.com/willnil", "followers_url": "https://api.github.com/users/willnil/followers", "following_url": "https://api.github.com/users/willnil/following{/other_user}", "gists_url": "https://api.github.com/users/willnil/gists{/gist_id}", "starred_url": "https://api.github.com/users/willnil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willnil/subscriptions", "organizations_url": "https://api.github.com/users/willnil/orgs", "repos_url": "https://api.github.com/users/willnil/repos", "events_url": "https://api.github.com/users/willnil/events{/privacy}", "received_events_url": "https://api.github.com/users/willnil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-15T09:01:23Z", "updated_at": "2018-11-07T16:09:08Z", "closed_at": "2018-11-01T17:04:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using Raspberry Pi 3 to run the RPLidar A2 Laserscanner. I have tried the python codes in my windows laptop the code works and I can get the scan datas. But when I tested it in the RPi 3 with Raspbian, the following error occured. \r\nI am new to Python and after I checked online OSError is due to environment factors. So can someone explain to me what is the problem now and maybe solution to it? Is it due to hardware problem? Thanks alot :)\r\n\r\n> Traceback (most recent call last):\r\n> File \"/home/pi/example.py\", line 10, in\r\n> for i, scan in enumerate(lidar.iter_measures()):\r\n> File \"/usr/local/lib/python3.5/dist-packages/rplidar.py\", line 397, in iter_measures\r\n> raw = self._read_response(dsize)\r\n> File \"/usr/local/lib/python3.5/dist-packages/rplidar.py\", line 223, in _read_response\r\n> while self._serial.inWaiting() < dsize:\r\n> File \"/usr/lib/python3/dist-packages/serial/serialutil.py\", line 572, in inWaiting\r\n> return self.in_waiting\r\n> File \"/usr/lib/python3/dist-packages/serial/serialposix.py\", line 456, in in_waiting\r\n> s = fcntl.ioctl(self.fd, TIOCINQ, TIOCM_zero_str)\r\n> OSError: [Errno 5] Input/output error\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/291", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/291/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/291/events", "html_url": "https://github.com/pyserial/pyserial/issues/291", "id": 278889046, "node_id": "MDU6SXNzdWUyNzg4ODkwNDY=", "number": 291, "title": "miniterm: Autocompletion bug", "user": {"login": "Gim6626", "id": 169866, "node_id": "MDQ6VXNlcjE2OTg2Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/169866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gim6626", "html_url": "https://github.com/Gim6626", "followers_url": "https://api.github.com/users/Gim6626/followers", "following_url": "https://api.github.com/users/Gim6626/following{/other_user}", "gists_url": "https://api.github.com/users/Gim6626/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gim6626/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gim6626/subscriptions", "organizations_url": "https://api.github.com/users/Gim6626/orgs", "repos_url": "https://api.github.com/users/Gim6626/repos", "events_url": "https://api.github.com/users/Gim6626/events{/privacy}", "received_events_url": "https://api.github.com/users/Gim6626/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 243383812, "node_id": "MDU6TGFiZWwyNDMzODM4MTI=", "url": "https://api.github.com/repos/pyserial/pyserial/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-04T06:53:11Z", "updated_at": "2017-12-06T04:49:39Z", "closed_at": "2017-12-06T04:49:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Due to some bug autocompletion in bash is not working correctly when I use miniterm, though in minicom it works correctly. For example I want to list root directory subdirectories starting with letter \"s\", to do it I type in shell \"ls s\" and then press TAB twice, after it I see \"[J\" in command line and command line editing is broken - I press backspaces but \"ls \" still remains in command line:\r\n> / # ls s\u241b[J\r\n> sbin/   share/  sys/\r\n\r\nCould anybody help solving this trouble?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/289", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/289/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/289/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/289/events", "html_url": "https://github.com/pyserial/pyserial/issues/289", "id": 278357784, "node_id": "MDU6SXNzdWUyNzgzNTc3ODQ=", "number": 289, "title": "miniterm: Duplicated new line", "user": {"login": "Gim6626", "id": 169866, "node_id": "MDQ6VXNlcjE2OTg2Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/169866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gim6626", "html_url": "https://github.com/Gim6626", "followers_url": "https://api.github.com/users/Gim6626/followers", "following_url": "https://api.github.com/users/Gim6626/following{/other_user}", "gists_url": "https://api.github.com/users/Gim6626/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gim6626/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gim6626/subscriptions", "organizations_url": "https://api.github.com/users/Gim6626/orgs", "repos_url": "https://api.github.com/users/Gim6626/repos", "events_url": "https://api.github.com/users/Gim6626/events{/privacy}", "received_events_url": "https://api.github.com/users/Gim6626/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-01T04:56:38Z", "updated_at": "2017-12-01T05:18:07Z", "closed_at": "2017-12-01T05:18:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Faced strange miniterm behaviour - when I open shell via serial port and press 'Enter', I see two sequential shell prompts, as if I press 'Enter' twice. Could anybody help fix it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/287", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/287/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/287/events", "html_url": "https://github.com/pyserial/pyserial/issues/287", "id": 276756964, "node_id": "MDU6SXNzdWUyNzY3NTY5NjQ=", "number": 287, "title": "Setting ASYNC_LOW_LATENCY on a serial (on Linux)", "user": {"login": "jabdoa2", "id": 557540, "node_id": "MDQ6VXNlcjU1NzU0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/557540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jabdoa2", "html_url": "https://github.com/jabdoa2", "followers_url": "https://api.github.com/users/jabdoa2/followers", "following_url": "https://api.github.com/users/jabdoa2/following{/other_user}", "gists_url": "https://api.github.com/users/jabdoa2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jabdoa2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jabdoa2/subscriptions", "organizations_url": "https://api.github.com/users/jabdoa2/orgs", "repos_url": "https://api.github.com/users/jabdoa2/repos", "events_url": "https://api.github.com/users/jabdoa2/events{/privacy}", "received_events_url": "https://api.github.com/users/jabdoa2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-25T15:15:17Z", "updated_at": "2018-05-08T00:04:11Z", "closed_at": "2018-05-08T00:04:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a way to set ASYNC_LOW_LATENCY in pyserial? This is useful when using FTDI USB-Serial converters.\r\n\r\nBasically, we need to set the flag using ioctl:\r\n```\r\nioctl(mPhysicalComPort, TIOCGSERIAL, &serial); \r\nserial.flags |= ASYNC_LOW_LATENCY; // (0x2000)\r\nioctl(mPhysicalComPort, TIOCSSERIAL, &serial);\r\n```\r\n\r\nI guess this ioctl is probably Linux only.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/286", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/286/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/286/events", "html_url": "https://github.com/pyserial/pyserial/issues/286", "id": 276753941, "node_id": "MDU6SXNzdWUyNzY3NTM5NDE=", "number": 286, "title": "Crash when port is compared to a non port object", "user": {"login": "frmdstryr", "id": 380158, "node_id": "MDQ6VXNlcjM4MDE1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/380158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frmdstryr", "html_url": "https://github.com/frmdstryr", "followers_url": "https://api.github.com/users/frmdstryr/followers", "following_url": "https://api.github.com/users/frmdstryr/following{/other_user}", "gists_url": "https://api.github.com/users/frmdstryr/gists{/gist_id}", "starred_url": "https://api.github.com/users/frmdstryr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frmdstryr/subscriptions", "organizations_url": "https://api.github.com/users/frmdstryr/orgs", "repos_url": "https://api.github.com/users/frmdstryr/repos", "events_url": "https://api.github.com/users/frmdstryr/events{/privacy}", "received_events_url": "https://api.github.com/users/frmdstryr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-25T14:23:46Z", "updated_at": "2018-05-08T01:52:26Z", "closed_at": "2018-05-08T01:40:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an application that uses a the `comports()` function to populate a combobox. When refreshing the ports, the UI compares the values to see if one of them matches the currently selected port. If no selection exists, the selection is `None` and it compares `port==None` which crashes as shown below.\r\n\r\n```python\r\nfrom serial.tools.list_ports import comports\r\n\r\ncomports()\r\nOut[18]: []\r\n\r\ncomports()\r\nOut[19]: [<serial.tools.list_ports_linux.SysFS at 0x7f4a343e4d50>]\r\n\r\nports = comports()\r\n\r\nports[0] == '/dev/ttyUSB0'\r\n\r\nAttributeErrorTraceback (most recent call last)\r\n<ipython-input-21-cc75c3accc1d> in <module>()\r\n----> 1 ports[0] == '/dev/ttyUSB0'\r\n\r\n/usr/local/lib/python2.7/dist-packages/serial/tools/list_ports_common.pyc in __eq__(self, other)\r\n     72 \r\n     73     def __eq__(self, other):\r\n---> 74         return self.device == other.device\r\n     75 \r\n     76     def __lt__(self, other):\r\n\r\nAttributeError: 'str' object has no attribute 'device'\r\n\r\nports[0] == None\r\n\r\nAttributeErrorTraceback (most recent call last)\r\n<ipython-input-22-dbbd483fcdf4> in <module>()\r\n----> 1 ports[0] == None\r\n\r\n/usr/local/lib/python2.7/dist-packages/serial/tools/list_ports_common.pyc in __eq__(self, other)\r\n     72 \r\n     73     def __eq__(self, other):\r\n---> 74         return self.device == other.device\r\n     75 \r\n     76     def __lt__(self, other):\r\n\r\nAttributeError: 'NoneType' object has no attribute 'device'\r\n```\r\n\r\nIs it possible to have the `__eq__`  method do an instance check before assuming the object it's comparing against has a `device` attribute?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/283", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/283/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/283/events", "html_url": "https://github.com/pyserial/pyserial/issues/283", "id": 274725473, "node_id": "MDU6SXNzdWUyNzQ3MjU0NzM=", "number": 283, "title": "[windows] Serial Number Issues ", "user": {"login": "DuaneEllis-TI", "id": 25351219, "node_id": "MDQ6VXNlcjI1MzUxMjE5", "avatar_url": "https://avatars2.githubusercontent.com/u/25351219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DuaneEllis-TI", "html_url": "https://github.com/DuaneEllis-TI", "followers_url": "https://api.github.com/users/DuaneEllis-TI/followers", "following_url": "https://api.github.com/users/DuaneEllis-TI/following{/other_user}", "gists_url": "https://api.github.com/users/DuaneEllis-TI/gists{/gist_id}", "starred_url": "https://api.github.com/users/DuaneEllis-TI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DuaneEllis-TI/subscriptions", "organizations_url": "https://api.github.com/users/DuaneEllis-TI/orgs", "repos_url": "https://api.github.com/users/DuaneEllis-TI/repos", "events_url": "https://api.github.com/users/DuaneEllis-TI/events{/privacy}", "received_events_url": "https://api.github.com/users/DuaneEllis-TI/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-11-17T01:49:56Z", "updated_at": "2019-08-20T15:49:36Z", "closed_at": "2019-08-13T11:16:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "For USB composite devices, Pyserial cannot extract extract the serial number. \r\nWhat Pyserial needs to do is look at the *parent* device \r\n\r\nWhen Pyserial extracts the \"szHardwareID\" - it gets a strings like (see below)\r\nWhat I am seeing appears to be a \"device instance string\"\r\nReferences:\r\n\r\na)  https://docs.microsoft.com/en-us/windows-hardware/drivers/install/device-instance-ids\r\nb) https://msdn.microsoft.com/en-us/library/windows/hardware/jj649944(v=vs.85).aspx\r\n\r\nWhat is needed is this:\r\n\r\nStep 1 - if you cannot find the serial number ...\r\n\r\nCall the function:  CM_Get_Parent() - pass:  devinfo.DevInst  for the current device.\r\n\r\nThis gives you the PARENT device ID (this is an ephemeral number - meaning it changes when you reboot the machine, or plug & unplug devices)  \r\n\r\nStep 2:\r\n\r\nCall the function CM_Get_Device_ID() - pass the PARENT ID  (from above) and a pointer to a buffer to hold the USB string.\r\n\r\nStep 3: Inspect the parent USB Vendor ID & USB Product ID - compare with your base child.\r\n\r\nCase 1:  \r\n   They do not match - you are done. You have the USB Hub the device is connected to.\r\n   If a serial number exists, it is in the child... \r\n   Some do not have serial numbers, see COM 114\r\n\r\nCase 2:\r\n   They match - but you can't find the serial number - See COM134 as the example.\r\n   Try the parent again... you should only have to go up 2 or 3 times - 4 at most.\r\n   The serial number - if it exists is on the top most element of the matching device.\r\n\r\nCase 3:\r\n    You found the serial number - Great success, and Profit!\r\n\r\nBelow are several examples, note: in this example I am only traversing up 5 levels of parents.\r\n\r\nSome notes:\r\n\r\n1) it would be helpful if PySerial could identify the MI_NUMBER as an additional attribute\r\n  This corresponds to the USB interface index, not the \"NTH-in-some-order\"\r\n  It should be the USB interface index number this never changes.\r\n  Rational:  Some devices have multiple serial ports and you need the NTH port...\r\n\r\n2) Composite example : COM98 & COM99  are from the same composite device - two interfaces\r\n    (It happens to be a TexasInstruments Launch Pad - they have 6 USB interfaces)\r\n\r\n3)  COM96 is a standalone USB cable from FTDI\r\n\r\n4) COM147 - is a device from Ember (now SiLabs) it is a non-composite device.\r\n   This is plugged into the side of my laptop which as an (VID_8087 - aka: Intel) USB Hub\r\n\r\n5) COM114 - has no serial number, it has a CP110x usb converter\r\n   And it does not have a \"MI_XX\" number... it is a non-composite device.\r\n\r\n6) COM148 - is a an \"ARM MBED\" device - fairly common development board from ARM\r\n   See:  https://www.mbed.com/en/  - for details\r\n\r\n7)  COM150 - is a Linux USB Serial \"Gadget\" device\r\n\r\n8) COM88 is a \"Prolific\" USB Serial cable\r\n\r\nExample parent chains follow\r\n```\r\nCOM61\r\n        HW: FTDIBUS\\VID_0403+PID_6001+FTGVOUN1A\\0000\r\n        Parent: USB\\VID_0403&PID_6001\\FTGVOUN1\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&3\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\nCOM88\r\n        HW: USB\\VID_067B&PID_2303\\8&348F3717&0&4\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&3\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\n        Parent: PCI\\VEN_8086&DEV_9CA6&SUBSYS_062E1028&REV_03\\3&11583659&0&E8\r\nCOM93\r\n        HW: USB\\VID_10C4&PID_EA60\\0001\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&3\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\n        Parent: PCI\\VEN_8086&DEV_9CA6&SUBSYS_062E1028&REV_03\\3&11583659&0&E8\r\nCOM96\r\n        HW: FTDIBUS\\VID_0403+PID_6001+FTD5RYSPA\\0000\r\n        Parent: USB\\VID_0403&PID_6001\\FTD5RYSP\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&3\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\nCOM98\r\n        HW: USB\\VID_0451&PID_BEF3&MI_03\\9&33735DAE&0&0003\r\n        Parent: USB\\VID_0451&PID_BEF3\\L110009R\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&2\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\nCOM99\r\n        HW: USB\\VID_0451&PID_BEF3&MI_00\\9&33735DAE&0&0000\r\n        Parent: USB\\VID_0451&PID_BEF3\\L110009R\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&2\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\nCOM114\r\n        HW: USB\\VID_10C4&PID_EA60\\8&21D58672&0&6\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&2\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\n        Parent: PCI\\VEN_8086&DEV_9CA6&SUBSYS_062E1028&REV_03\\3&11583659&0&E8\r\nCOM134\r\n        HW: FTDIBUS\\VID_0403+PID_A6D1+06EB12100A5AA\\0000\r\n        Parent: USB\\VID_0403&PID_A6D1&MI_00\\7&7ED7F17&0&0000\r\n        Parent: USB\\VID_0403&PID_A6D1\\06EB12100A5A\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&3\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\nCOM147\r\n        HW: USB\\VID_10C4&PID_8A5E\\0101CB55\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\n        Parent: PCI\\VEN_8086&DEV_9CA6&SUBSYS_062E1028&REV_03\\3&11583659&0&E8\r\n        Parent: ACPI\\PNP0A08\\0\r\n        Parent: ACPI_HAL\\PNP0C08\\0\r\nCOM148\r\n        HW: USB\\VID_0D28&PID_0204&MI_01\\0240000036934E45003840159F3500240E61000097969900\r\n        Parent: USB\\VID_0D28&PID_0204\\0240000036934E45003840159F3500240E61000097969900\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&2\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\nCOM149\r\n        HW: USB\\VID_10C4&PID_EA60\\ZOL-B001-A20000996\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\n        Parent: PCI\\VEN_8086&DEV_9CA6&SUBSYS_062E1028&REV_03\\3&11583659&0&E8\r\n        Parent: ACPI\\PNP0A08\\0\r\nCOM150\r\n        HW: USB\\VID_1D6B&PID_0104&MI_02\\9&36E837AA&0&0002\r\n        Parent: USB\\VID_1D6B&PID_0104\\2016BBBK2D5E\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&2\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\nCOM141\r\n        HW: USB\\VID_1CBE&PID_00FD&MI_00\\9&1F89E0CD&0&0000\r\n        Parent: USB\\VID_1CBE&PID_00FD\\0E221E86\r\n        Parent: USB\\VID_1608&PID_0181\\7&9294DBA&0&2\r\n        Parent: USB\\VID_413C&PID_2513\\6&4C6DDA4&0&4\r\n        Parent: USB\\VID_8087&PID_8001\\5&BE46B3F&0&1\r\n        Parent: USB\\ROOT_HUB20\\4&1D632659&0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/277", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/277/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/277/events", "html_url": "https://github.com/pyserial/pyserial/issues/277", "id": 268456778, "node_id": "MDU6SXNzdWUyNjg0NTY3Nzg=", "number": 277, "title": "Some written packets are dropped in Linux (Ubuntu 16.04.2)", "user": {"login": "jclevesque", "id": 673768, "node_id": "MDQ6VXNlcjY3Mzc2OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/673768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jclevesque", "html_url": "https://github.com/jclevesque", "followers_url": "https://api.github.com/users/jclevesque/followers", "following_url": "https://api.github.com/users/jclevesque/following{/other_user}", "gists_url": "https://api.github.com/users/jclevesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/jclevesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jclevesque/subscriptions", "organizations_url": "https://api.github.com/users/jclevesque/orgs", "repos_url": "https://api.github.com/users/jclevesque/repos", "events_url": "https://api.github.com/users/jclevesque/events{/privacy}", "received_events_url": "https://api.github.com/users/jclevesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-25T16:05:59Z", "updated_at": "2017-11-20T21:46:10Z", "closed_at": "2017-11-20T21:46:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using a cdc_adm device through pyserial, and on Linux I have issues. I ran the same code on Windows, OSX and Linux and I only have issues with the Linux version.\r\n\r\nIt looks like my written packets are not always received by the device. I tried various things, adding a 1 second timeout before writing anything through serial, flushing the input/output before writing, making sure that there is no pending output (through `Serial.out_waiting`), nothing seems to help. My device just never seems to receive the message.\r\n\r\nI did find some sort of workaround by sending the message multiple times, like 10-20 times in a loop. \r\n\r\nHow would you go about troubleshooting this problem? Should I just keep spamming my messages until I know for sure the device has caught them (in this case, by receiving and looking in status packets sent by the device)? Once again, this issue does not happen on other OSes (OSX, Windows 10), just sending the message once is enough. \r\n\r\nUsed default parameters for baudrate and other pyserial settings. \r\n\r\nOS: Ubuntu 16.04.2\r\nLinux kernel: 4.8.0-36-generic x86_64\r\npyserial version 3.4\r\npython 3.5.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/273", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/273/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/273/events", "html_url": "https://github.com/pyserial/pyserial/issues/273", "id": 262125150, "node_id": "MDU6SXNzdWUyNjIxMjUxNTA=", "number": 273, "title": "Permission denied after invoking new ReaderThread on same port(previous ReaderThread closed)", "user": {"login": "oicnysa", "id": 12498588, "node_id": "MDQ6VXNlcjEyNDk4NTg4", "avatar_url": "https://avatars1.githubusercontent.com/u/12498588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oicnysa", "html_url": "https://github.com/oicnysa", "followers_url": "https://api.github.com/users/oicnysa/followers", "following_url": "https://api.github.com/users/oicnysa/following{/other_user}", "gists_url": "https://api.github.com/users/oicnysa/gists{/gist_id}", "starred_url": "https://api.github.com/users/oicnysa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oicnysa/subscriptions", "organizations_url": "https://api.github.com/users/oicnysa/orgs", "repos_url": "https://api.github.com/users/oicnysa/repos", "events_url": "https://api.github.com/users/oicnysa/events{/privacy}", "received_events_url": "https://api.github.com/users/oicnysa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-02T15:28:48Z", "updated_at": "2017-10-04T12:42:30Z", "closed_at": "2017-10-04T12:42:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi again,\r\nToday I've faced another problem. I have a serial logging utility, which is controlled through TCP. I've implemented functionality to start/stop logging on selected port. I have bunch of ReaderThreads, which is are stored in a list of a dictionaries. Function that disables logging looks like this:\r\n```\r\ndef __disable(self, port):\r\n        for serial in self.__serials:\r\n            if serial['port'] == port and serial['status'] == 'on':\r\n                serial['thread'].close()\r\n                serial['status'] = 'off'  \r\n```\r\nFunction that enables serial logging on selected port again looks like this:\r\n```\r\ndef __enable(self, port):\r\n        for ser in self.__serials:\r\n            if ser['port'] == port and ser['status'] == 'off':\r\n                ser['thread'] = threaded.ReaderThread(serial.Serial(ser['port'], baudrate=ser['baudrate'], timeout=1), lambda: PrintLines(ser['device']))\r\n                ser['thread'].start()\r\n                ser['status'] = 'on'\r\n```\r\n\r\nProblem is that, when I want enable logging again(running __enable function), the program raises an exception:\r\n```\r\n\r\nProcess SerialLogging-1:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/site-packages/serial/serialposix.py\", line 265, in open\r\n    self.fd = os.open(self.portstr, os.O_RDWR | os.O_NOCTTY | os.O_NONBLOCK)\r\nPermissionError: [Errno 13] Permission denied: '/dev/ttyS16'\r\n```\r\nWhy could this happen? Object still exists in memory and occupy serial port?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/271", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/271/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/271/events", "html_url": "https://github.com/pyserial/pyserial/issues/271", "id": 261447800, "node_id": "MDU6SXNzdWUyNjE0NDc4MDA=", "number": 271, "title": "Multiple Reader Threads", "user": {"login": "oicnysa", "id": 12498588, "node_id": "MDQ6VXNlcjEyNDk4NTg4", "avatar_url": "https://avatars1.githubusercontent.com/u/12498588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oicnysa", "html_url": "https://github.com/oicnysa", "followers_url": "https://api.github.com/users/oicnysa/followers", "following_url": "https://api.github.com/users/oicnysa/following{/other_user}", "gists_url": "https://api.github.com/users/oicnysa/gists{/gist_id}", "starred_url": "https://api.github.com/users/oicnysa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oicnysa/subscriptions", "organizations_url": "https://api.github.com/users/oicnysa/orgs", "repos_url": "https://api.github.com/users/oicnysa/repos", "events_url": "https://api.github.com/users/oicnysa/events{/privacy}", "received_events_url": "https://api.github.com/users/oicnysa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 243383812, "node_id": "MDU6TGFiZWwyNDMzODM4MTI=", "url": "https://api.github.com/repos/pyserial/pyserial/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-28T20:18:40Z", "updated_at": "2017-09-29T11:52:51Z", "closed_at": "2017-09-29T11:52:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm rather new to pyserial and stuck with this silly questions.\r\nI need to create multiple ReaderThread instances, to read from numerous serial ports.\r\nCurrently I'm doing it in a loop. Som kind of:\r\n```\r\nthreads = []\r\nfor conf in config:\r\n    thr = ReaderThread(ser, PrintLines).run()\r\n    threads.append(thr)\r\n```\r\nBut in this case it creates only first thread and code bellow this instructions is skipped.\r\nCould you suggest how to deal with this situation?\r\nThank you in advance.    ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/268", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/268/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/268/events", "html_url": "https://github.com/pyserial/pyserial/issues/268", "id": 257004835, "node_id": "MDU6SXNzdWUyNTcwMDQ4MzU=", "number": 268, "title": "Why is there no time.sleep in the ReaderThread run method?", "user": {"login": "mgiaco", "id": 4886904, "node_id": "MDQ6VXNlcjQ4ODY5MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/4886904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgiaco", "html_url": "https://github.com/mgiaco", "followers_url": "https://api.github.com/users/mgiaco/followers", "following_url": "https://api.github.com/users/mgiaco/following{/other_user}", "gists_url": "https://api.github.com/users/mgiaco/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgiaco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgiaco/subscriptions", "organizations_url": "https://api.github.com/users/mgiaco/orgs", "repos_url": "https://api.github.com/users/mgiaco/repos", "events_url": "https://api.github.com/users/mgiaco/events{/privacy}", "received_events_url": "https://api.github.com/users/mgiaco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 243383812, "node_id": "MDU6TGFiZWwyNDMzODM4MTI=", "url": "https://api.github.com/repos/pyserial/pyserial/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-12T11:10:00Z", "updated_at": "2019-07-23T10:57:23Z", "closed_at": "2019-07-23T10:57:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI have looked into the ```serial/threaded/__init__.py```  Implementation because I have some timing issues in my app. I also do have some other threads running and if I use a concurrency analysis I found out that the Reader Thread do not wait for any amount of time. \r\n\r\nI am wondering why there is no time.sleep in the reader thread run method. \r\n\r\nSo therefore I tried to test with time.sleep(2) as shown below but it dose not solve the issue. Also I do not see any changes in the analysis after the time.sleep what I do not understand.\r\n\r\n```python\r\n\r\n        self._connection_made.set()\r\n        while self.alive and self.serial.is_open:\r\n            try:\r\n                # read all that is there or wait for one byte (blocking)\r\n                data = self.serial.read(self.serial.in_waiting or 1)\r\n                time.sleep(2)  # add a sleep here for some test\r\n```\r\n\r\nmany thanks\r\nmathias\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/266", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/266/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/266/events", "html_url": "https://github.com/pyserial/pyserial/issues/266", "id": 253921963, "node_id": "MDU6SXNzdWUyNTM5MjE5NjM=", "number": 266, "title": "Ubuntu 16.04 kernel update from 4.8 to 4.10 breaks communication", "user": {"login": "doisyg", "id": 15727892, "node_id": "MDQ6VXNlcjE1NzI3ODky", "avatar_url": "https://avatars0.githubusercontent.com/u/15727892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doisyg", "html_url": "https://github.com/doisyg", "followers_url": "https://api.github.com/users/doisyg/followers", "following_url": "https://api.github.com/users/doisyg/following{/other_user}", "gists_url": "https://api.github.com/users/doisyg/gists{/gist_id}", "starred_url": "https://api.github.com/users/doisyg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doisyg/subscriptions", "organizations_url": "https://api.github.com/users/doisyg/orgs", "repos_url": "https://api.github.com/users/doisyg/repos", "events_url": "https://api.github.com/users/doisyg/events{/privacy}", "received_events_url": "https://api.github.com/users/doisyg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-30T08:43:41Z", "updated_at": "2019-07-22T10:11:28Z", "closed_at": "2019-07-22T10:11:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have a python 2 program using serial communication that works perfectly when running ubuntu 16.04 with kernel 4.8. However after the last ubuntu point release and the update to kernel 4.10 my program stops the serial communication without error after a few cycles. The problem disappear when going back to kernel 4.8 or 4.4. I also tried with kernel 4.12, same problem.\r\nTried to update pyserial and also rewrote my program to use python 3, same problem.\r\nAny clue what could be the root cause?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/265", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/265/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/265/events", "html_url": "https://github.com/pyserial/pyserial/issues/265", "id": 252154365, "node_id": "MDU6SXNzdWUyNTIxNTQzNjU=", "number": 265, "title": "PosixPollSerial.read fails when timeout=None (the default)", "user": {"login": "mvgrad98", "id": 10375734, "node_id": "MDQ6VXNlcjEwMzc1NzM0", "avatar_url": "https://avatars1.githubusercontent.com/u/10375734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvgrad98", "html_url": "https://github.com/mvgrad98", "followers_url": "https://api.github.com/users/mvgrad98/followers", "following_url": "https://api.github.com/users/mvgrad98/following{/other_user}", "gists_url": "https://api.github.com/users/mvgrad98/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvgrad98/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvgrad98/subscriptions", "organizations_url": "https://api.github.com/users/mvgrad98/orgs", "repos_url": "https://api.github.com/users/mvgrad98/repos", "events_url": "https://api.github.com/users/mvgrad98/events{/privacy}", "received_events_url": "https://api.github.com/users/mvgrad98/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-23T04:09:24Z", "updated_at": "2017-08-24T21:45:38Z", "closed_at": "2017-08-24T21:43:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you do not use a timeout (the default) then the conversion to ms from seconds fails:\r\n`TypeError: unsupported operand type(s) for *: 'NoneType' and 'int'`\r\n\r\nhttps://github.com/pyserial/pyserial/blob/797018b53ddee79856e107f067c5873f53f73ee4/serial/serialposix.py#L742\r\n\r\nOddly there is already support for `_timeout` being `None` following the `poll()` call but I can't see how we would ever make it there if `_timeout` was `None`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/262", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/262/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/262/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/262/events", "html_url": "https://github.com/pyserial/pyserial/issues/262", "id": 251468809, "node_id": "MDU6SXNzdWUyNTE0Njg4MDk=", "number": 262, "title": "macOS ListPortInfo object short name is None", "user": {"login": "BrendanSimon", "id": 472245, "node_id": "MDQ6VXNlcjQ3MjI0NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/472245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrendanSimon", "html_url": "https://github.com/BrendanSimon", "followers_url": "https://api.github.com/users/BrendanSimon/followers", "following_url": "https://api.github.com/users/BrendanSimon/following{/other_user}", "gists_url": "https://api.github.com/users/BrendanSimon/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrendanSimon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrendanSimon/subscriptions", "organizations_url": "https://api.github.com/users/BrendanSimon/orgs", "repos_url": "https://api.github.com/users/BrendanSimon/repos", "events_url": "https://api.github.com/users/BrendanSimon/events{/privacy}", "received_events_url": "https://api.github.com/users/BrendanSimon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-20T05:54:55Z", "updated_at": "2017-08-28T22:29:21Z", "closed_at": "2017-08-28T22:29:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On macOS, the `ListPortInfo` object returned by `list_ports.comports()` has the `name` attribute set to `None`.\r\n\r\nI have to workaround this using the `device` attribute and convert to a short name using `os.path.basename(device)`\r\n\r\nPySerial 3.4\r\nPython 3.6.2\r\nmacOS Sierra 10.12.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/256", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/256/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/256/events", "html_url": "https://github.com/pyserial/pyserial/issues/256", "id": 247187107, "node_id": "MDU6SXNzdWUyNDcxODcxMDc=", "number": 256, "title": "cls", "user": {"login": "harryberlin", "id": 13656586, "node_id": "MDQ6VXNlcjEzNjU2NTg2", "avatar_url": "https://avatars3.githubusercontent.com/u/13656586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harryberlin", "html_url": "https://github.com/harryberlin", "followers_url": "https://api.github.com/users/harryberlin/followers", "following_url": "https://api.github.com/users/harryberlin/following{/other_user}", "gists_url": "https://api.github.com/users/harryberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/harryberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harryberlin/subscriptions", "organizations_url": "https://api.github.com/users/harryberlin/orgs", "repos_url": "https://api.github.com/users/harryberlin/repos", "events_url": "https://api.github.com/users/harryberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/harryberlin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-01T20:13:19Z", "updated_at": "2017-10-03T10:52:33Z", "closed_at": "2017-10-03T10:49:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "cls", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/255", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/255/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/255/events", "html_url": "https://github.com/pyserial/pyserial/issues/255", "id": 247186813, "node_id": "MDU6SXNzdWUyNDcxODY4MTM=", "number": 255, "title": "cls", "user": {"login": "harryberlin", "id": 13656586, "node_id": "MDQ6VXNlcjEzNjU2NTg2", "avatar_url": "https://avatars3.githubusercontent.com/u/13656586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harryberlin", "html_url": "https://github.com/harryberlin", "followers_url": "https://api.github.com/users/harryberlin/followers", "following_url": "https://api.github.com/users/harryberlin/following{/other_user}", "gists_url": "https://api.github.com/users/harryberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/harryberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harryberlin/subscriptions", "organizations_url": "https://api.github.com/users/harryberlin/orgs", "repos_url": "https://api.github.com/users/harryberlin/repos", "events_url": "https://api.github.com/users/harryberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/harryberlin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-01T20:12:09Z", "updated_at": "2017-10-03T10:51:14Z", "closed_at": "2017-10-03T10:51:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "cls", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/253", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/253/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/253/events", "html_url": "https://github.com/pyserial/pyserial/issues/253", "id": 246494693, "node_id": "MDU6SXNzdWUyNDY0OTQ2OTM=", "number": 253, "title": "When close the serial port, Arduino will be reset.", "user": {"login": "Iflier", "id": 19361364, "node_id": "MDQ6VXNlcjE5MzYxMzY0", "avatar_url": "https://avatars1.githubusercontent.com/u/19361364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Iflier", "html_url": "https://github.com/Iflier", "followers_url": "https://api.github.com/users/Iflier/followers", "following_url": "https://api.github.com/users/Iflier/following{/other_user}", "gists_url": "https://api.github.com/users/Iflier/gists{/gist_id}", "starred_url": "https://api.github.com/users/Iflier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Iflier/subscriptions", "organizations_url": "https://api.github.com/users/Iflier/orgs", "repos_url": "https://api.github.com/users/Iflier/repos", "events_url": "https://api.github.com/users/Iflier/events{/privacy}", "received_events_url": "https://api.github.com/users/Iflier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-07-29T02:55:31Z", "updated_at": "2017-08-21T08:25:42Z", "closed_at": "2017-08-21T08:25:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to close the serial port connected to arduino, it seems that arduino will be reset. Is that normal?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/247", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/247/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/247/events", "html_url": "https://github.com/pyserial/pyserial/issues/247", "id": 244538178, "node_id": "MDU6SXNzdWUyNDQ1MzgxNzg=", "number": 247, "title": "Any plans to provide a conda distribution or conda-forge recipe", "user": {"login": "shaunwbell", "id": 6493489, "node_id": "MDQ6VXNlcjY0OTM0ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6493489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shaunwbell", "html_url": "https://github.com/shaunwbell", "followers_url": "https://api.github.com/users/shaunwbell/followers", "following_url": "https://api.github.com/users/shaunwbell/following{/other_user}", "gists_url": "https://api.github.com/users/shaunwbell/gists{/gist_id}", "starred_url": "https://api.github.com/users/shaunwbell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shaunwbell/subscriptions", "organizations_url": "https://api.github.com/users/shaunwbell/orgs", "repos_url": "https://api.github.com/users/shaunwbell/repos", "events_url": "https://api.github.com/users/shaunwbell/events{/privacy}", "received_events_url": "https://api.github.com/users/shaunwbell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-07-21T01:13:21Z", "updated_at": "2017-08-02T00:40:58Z", "closed_at": "2017-08-01T19:39:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "pyserial 2.7 comes packaged with the anaconda python distribution but no clearly reliable fork/source for more recent versions is available", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/239", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/239/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/239/events", "html_url": "https://github.com/pyserial/pyserial/issues/239", "id": 238615396, "node_id": "MDU6SXNzdWUyMzg2MTUzOTY=", "number": 239, "title": "method in_waiting does not work", "user": {"login": "tom-ii", "id": 7058190, "node_id": "MDQ6VXNlcjcwNTgxOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7058190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tom-ii", "html_url": "https://github.com/tom-ii", "followers_url": "https://api.github.com/users/tom-ii/followers", "following_url": "https://api.github.com/users/tom-ii/following{/other_user}", "gists_url": "https://api.github.com/users/tom-ii/gists{/gist_id}", "starred_url": "https://api.github.com/users/tom-ii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tom-ii/subscriptions", "organizations_url": "https://api.github.com/users/tom-ii/orgs", "repos_url": "https://api.github.com/users/tom-ii/repos", "events_url": "https://api.github.com/users/tom-ii/events{/privacy}", "received_events_url": "https://api.github.com/users/tom-ii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-26T17:34:50Z", "updated_at": "2017-06-26T18:31:34Z", "closed_at": "2017-06-26T18:31:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "PS H:\\> python\r\nPython 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32 bit (Intel)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import serial       #       import serial library for ARDUINO comms\r\n>>> TEMP_ARDUINO = 'COM3'\r\n>>> BAUD_RATE = 57600\r\n>>> TIMEOUT = 2\r\n>>> # get a serial instance (we'll open it later)\r\n... ser = serial.Serial()\r\n>>> ser.baudrate = BAUD_RATE\r\n>>> ser.port = TEMP_ARDUINO\r\n>>> #ser.timeout = TIMEOUT\r\n... ser.open()\r\n>>> ser.in_waiting()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: 'int' object is not callable\r\n>>> temp = ser.in_waiting()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: 'int' object is not callable\r\n>>>\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/237", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/237/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/237/events", "html_url": "https://github.com/pyserial/pyserial/issues/237", "id": 238344753, "node_id": "MDU6SXNzdWUyMzgzNDQ3NTM=", "number": 237, "title": "serial.tools.miniterm fails with \"'ascii' codec can't encode characters\" on German Windows", "user": {"login": "AndreKR", "id": 1188538, "node_id": "MDQ6VXNlcjExODg1Mzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1188538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreKR", "html_url": "https://github.com/AndreKR", "followers_url": "https://api.github.com/users/AndreKR/followers", "following_url": "https://api.github.com/users/AndreKR/following{/other_user}", "gists_url": "https://api.github.com/users/AndreKR/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreKR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreKR/subscriptions", "organizations_url": "https://api.github.com/users/AndreKR/orgs", "repos_url": "https://api.github.com/users/AndreKR/repos", "events_url": "https://api.github.com/users/AndreKR/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreKR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-24T21:36:31Z", "updated_at": "2017-07-19T21:00:15Z", "closed_at": "2017-07-19T21:00:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n> python -m serial.tools.miniterm\r\n\r\n--- Available ports:\r\n---  1: COM6                 Intel(R) Active Management Technology - SOL (COM6)\r\n---  2: COM13                F5521gw Mobile Broadband Device Management (COM13)\r\n---  3: COM14                F5521gw Mobile Broadband GPS Port (COM14)\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\andre\\.platformio\\python27\\Lib\\runpy.py\", line 174, in _run_module_as_main\r\n    \"__main__\", fname, loader, pkg_name)\r\n  File \"C:\\Users\\andre\\.platformio\\python27\\Lib\\runpy.py\", line 72, in _run_code\r\n    exec code in run_globals\r\n  File \"C:\\Users\\andre\\.platformio\\penv\\lib\\site-packages\\serial\\tools\\miniterm.py\", line 930, in <module>\r\n    main()\r\n  File \"C:\\Users\\andre\\.platformio\\penv\\lib\\site-packages\\serial\\tools\\miniterm.py\", line 857, in main\r\n    args.port = ask_for_port()\r\n  File \"C:\\Users\\andre\\.platformio\\penv\\lib\\site-packages\\serial\\tools\\miniterm.py\", line 325, in ask_for_port\r\n    sys.stderr.write('--- {:2}: {:20} {}\\n'.format(n, port, desc))\r\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 9-10: ordinal not in range(128)\r\n```\r\n\r\nThe next COM port that would follow is called `Standardm\u00e4\u00dfgige Seriell-\u00fcber-Bluetooth-Verbindung`, so I guess the `\u00e4` and `\u00df` is to blame here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/236", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/236/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/236/events", "html_url": "https://github.com/pyserial/pyserial/issues/236", "id": 235069228, "node_id": "MDU6SXNzdWUyMzUwNjkyMjg=", "number": 236, "title": "Issue in reading \\x00 values", "user": {"login": "karthikeshp", "id": 5039525, "node_id": "MDQ6VXNlcjUwMzk1MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5039525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karthikeshp", "html_url": "https://github.com/karthikeshp", "followers_url": "https://api.github.com/users/karthikeshp/followers", "following_url": "https://api.github.com/users/karthikeshp/following{/other_user}", "gists_url": "https://api.github.com/users/karthikeshp/gists{/gist_id}", "starred_url": "https://api.github.com/users/karthikeshp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karthikeshp/subscriptions", "organizations_url": "https://api.github.com/users/karthikeshp/orgs", "repos_url": "https://api.github.com/users/karthikeshp/repos", "events_url": "https://api.github.com/users/karthikeshp/events{/privacy}", "received_events_url": "https://api.github.com/users/karthikeshp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-11T14:30:16Z", "updated_at": "2017-07-27T19:12:58Z", "closed_at": "2017-07-27T19:11:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "read() returns byte values (\\x00-\\xff) and some strings \r\ne.g. \\xfa\\x99\\x0fm@m@\\x1c\\xe4\\x00\\x00\\x0e\\xeb\\x99\\x0f\\x0e\\xeb\\xfb \r\n\r\nI need to receive only hexadecimal value. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/235", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/235/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/235/events", "html_url": "https://github.com/pyserial/pyserial/issues/235", "id": 233972859, "node_id": "MDU6SXNzdWUyMzM5NzI4NTk=", "number": 235, "title": "[Errno 10035] A non-blocking socket operation could not be completed immediately", "user": {"login": "ivankravets", "id": 1760209, "node_id": "MDQ6VXNlcjE3NjAyMDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1760209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankravets", "html_url": "https://github.com/ivankravets", "followers_url": "https://api.github.com/users/ivankravets/followers", "following_url": "https://api.github.com/users/ivankravets/following{/other_user}", "gists_url": "https://api.github.com/users/ivankravets/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankravets/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankravets/subscriptions", "organizations_url": "https://api.github.com/users/ivankravets/orgs", "repos_url": "https://api.github.com/users/ivankravets/repos", "events_url": "https://api.github.com/users/ivankravets/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankravets/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-06T17:50:50Z", "updated_at": "2017-07-26T03:56:48Z", "closed_at": "2017-07-24T11:51:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "The latest v3.3 release has a bug with opening serial monitor via socket port. \r\nv3.2.1 works very well!\r\n\r\n```\r\ncould not open port \u2018socket://localhost:64256\u2019: reset_input_buffer failed: [Errno 10035] A non-blocking socket operation could not be completed immediately\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/234", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/234/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/234/events", "html_url": "https://github.com/pyserial/pyserial/issues/234", "id": 233857356, "node_id": "MDU6SXNzdWUyMzM4NTczNTY=", "number": 234, "title": "[miniterm.py] Add option to save output to a file?", "user": {"login": "marrakchino", "id": 16545838, "node_id": "MDQ6VXNlcjE2NTQ1ODM4", "avatar_url": "https://avatars0.githubusercontent.com/u/16545838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marrakchino", "html_url": "https://github.com/marrakchino", "followers_url": "https://api.github.com/users/marrakchino/followers", "following_url": "https://api.github.com/users/marrakchino/following{/other_user}", "gists_url": "https://api.github.com/users/marrakchino/gists{/gist_id}", "starred_url": "https://api.github.com/users/marrakchino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marrakchino/subscriptions", "organizations_url": "https://api.github.com/users/marrakchino/orgs", "repos_url": "https://api.github.com/users/marrakchino/repos", "events_url": "https://api.github.com/users/marrakchino/events{/privacy}", "received_events_url": "https://api.github.com/users/marrakchino/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-06T11:12:15Z", "updated_at": "2019-08-29T14:59:44Z", "closed_at": "2019-08-29T14:59:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm here to enquire about any plans to add a parameter which enables copying serial output to a file (sort of a log file to keep a trace of the serial communication) to **miniterm**.\r\n\r\nRegards.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/228", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/228/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/228/events", "html_url": "https://github.com/pyserial/pyserial/issues/228", "id": 227101418, "node_id": "MDU6SXNzdWUyMjcxMDE0MTg=", "number": 228, "title": " 'str' object has no attribute 'formt'", "user": {"login": "philb32", "id": 24301151, "node_id": "MDQ6VXNlcjI0MzAxMTUx", "avatar_url": "https://avatars3.githubusercontent.com/u/24301151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philb32", "html_url": "https://github.com/philb32", "followers_url": "https://api.github.com/users/philb32/followers", "following_url": "https://api.github.com/users/philb32/following{/other_user}", "gists_url": "https://api.github.com/users/philb32/gists{/gist_id}", "starred_url": "https://api.github.com/users/philb32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philb32/subscriptions", "organizations_url": "https://api.github.com/users/philb32/orgs", "repos_url": "https://api.github.com/users/philb32/repos", "events_url": "https://api.github.com/users/philb32/events{/privacy}", "received_events_url": "https://api.github.com/users/philb32/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-08T16:28:32Z", "updated_at": "2017-05-08T21:17:40Z", "closed_at": "2017-05-08T21:17:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Server seems to run and publish ports ok but get this during init when running with python3 :\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/port_publisher.py\", line 468, in <module>\r\n    open(args.pidfile, 'w').write(\"{}\".formt(pid))\r\nAttributeError: 'str' object has no attribute 'formt'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/220", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/220/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/220/events", "html_url": "https://github.com/pyserial/pyserial/issues/220", "id": 219870556, "node_id": "MDU6SXNzdWUyMTk4NzA1NTY=", "number": 220, "title": "Loopback does not work with asyncio", "user": {"login": "pax0r", "id": 1170098, "node_id": "MDQ6VXNlcjExNzAwOTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1170098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pax0r", "html_url": "https://github.com/pax0r", "followers_url": "https://api.github.com/users/pax0r/followers", "following_url": "https://api.github.com/users/pax0r/following{/other_user}", "gists_url": "https://api.github.com/users/pax0r/gists{/gist_id}", "starred_url": "https://api.github.com/users/pax0r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pax0r/subscriptions", "organizations_url": "https://api.github.com/users/pax0r/orgs", "repos_url": "https://api.github.com/users/pax0r/repos", "events_url": "https://api.github.com/users/pax0r/events{/privacy}", "received_events_url": "https://api.github.com/users/pax0r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-06T11:40:04Z", "updated_at": "2017-05-06T21:50:50Z", "closed_at": "2017-05-06T21:50:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Loopback interface always raises `writeTimeoutError` on any write using asyncio SerialTransport. It happens because asyncio implementation sets timeout to 0 (`aio.py:L54`) and loopback checks if it can write a data in given timeout (obviously it can't). ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/214", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/214/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/214/events", "html_url": "https://github.com/pyserial/pyserial/issues/214", "id": 216678744, "node_id": "MDU6SXNzdWUyMTY2Nzg3NDQ=", "number": 214, "title": "How to implement inter_byte_time like timeout?", "user": {"login": "maqp", "id": 7425650, "node_id": "MDQ6VXNlcjc0MjU2NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7425650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maqp", "html_url": "https://github.com/maqp", "followers_url": "https://api.github.com/users/maqp/followers", "following_url": "https://api.github.com/users/maqp/following{/other_user}", "gists_url": "https://api.github.com/users/maqp/gists{/gist_id}", "starred_url": "https://api.github.com/users/maqp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maqp/subscriptions", "organizations_url": "https://api.github.com/users/maqp/orgs", "repos_url": "https://api.github.com/users/maqp/repos", "events_url": "https://api.github.com/users/maqp/events{/privacy}", "received_events_url": "https://api.github.com/users/maqp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-24T07:05:36Z", "updated_at": "2017-03-24T12:05:07Z", "closed_at": "2017-03-24T12:05:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have very specific needs for serial data transmission on Linux:\r\n\r\n1. Variable baud rates from 50 to 2M\r\n2. Unidirectional nature with single Tx-Rx pair (I'm using Reed-Solomon error correction for packets)\r\n3. Two very different types of packet transfer:\r\n\r\n    1. Data the length of which changes randomly between approx. 100 and 1000 bytes. These packets need to be output at high speed. `readline()` and `read_until()` do not work because I can't trust terminator symbols transmit error free (error correction happens after receiving the packet). The method `read(n)` on the other hand requires me to setup timeout, which sucks because on average packets are 400 bytes but I need to account for rare situations where some users output up to 1000 bytes. It slows average use case down because error correction requires it to capture entire packet in single burst.\r\n\r\n    2. Data that has no maximum limit (except maybe RAM). I can't set timeout high for this because it ruins the previous use case. I can assemble the packet from a set of `read(1000)` calls but the additional layer of logic becomes unreliable with high speeds.\r\n             \r\nSo I need a function that can read arbitrary length sequences and where timeout happens when line is dead for a brief amount of time (not so brief receiver timeouts between transferred bytes, so the wide baud rate range needs to be taken into account.\r\n\r\nI did some reading for this and discovered the `inter_byte_timeout` setting. However, an answer in [SO](https://stackoverflow.com/questions/35871822/what-is-inter-byte-timeout-interchartimeout-in-pyserial/37053542#37053542) states that the line [#321 of `serialposix.py`](https://github.com/pyserial/pyserial/blob/master/serial/serialposix.py#L321)\r\n\r\n    vtime = int(self._inter_byte_timeout * 10)\r\n\r\n\"converts it to a vtime of zero and that's why [OPs] code fails. Set it to 0.1 or higher and it should work.\"\r\n\r\nSo I need to set `inter_byte_timeout` at least 0.1 after which receiver looks for 1 second break between transmissions. This is weird. Why does the transmitter need to stay quiet for 1000ms for the receiver to understand that the byte sequence is complete? Also, it doesn't even seem to work. For example\r\n\r\n    # Transmitter\r\n    import serial\r\n    import time\r\n    baudrate = 115200\r\n    port     = serial.Serial('/dev/ttyUSB0', baudrate)\r\n    port.write(50 * b'a')\r\n\r\n\r\n    # Receiver:\r\n    import serial\r\n    baudrate = 115200\r\n    port     = serial.Serial('/dev/ttyUSB0', baudrate, inter_byte_timeout=0.1, timeout=3)\r\n    while True:\r\n        read = port.read(100)\r\n        print(len(read))\r\n\r\ntimeouts 3, not 1 second after receiving the 50 bytes. It does however return immediately if transmitter is run twice (it receives the 100 bytes `read()` waits for).\r\n\r\nSo I started wondering if there's a reason tighter byte-sequence timeout can't be made. If I couldn't do it, I'd run in to the reason. However, following proof of concept code seems to work with any transmission length from 1 to 1M in  baud rates from 50 to 2M.\r\n\r\n\r\n    # Transmitter.py\r\n    # Python 3.3 or newer only\r\n    import os\r\n    import serial\r\n    import time\r\n\r\n    baudrate       = 2000000\r\n    msg_length     = 100\r\n\r\n    bauds_per_byte = 10\r\n    bytes_per_s    = baudrate / bauds_per_byte\r\n    byte_travel_t  = 1 / bytes_per_s\r\n    # Double the delay to ensure receiver timeouts\r\n    delay          = max(4 * byte_travel_t, 0.02)\r\n    port           = serial.Serial('/dev/ttyUSB0', baudrate)\r\n\r\n    print('Delay: {}ms'.format(delay*1000))\r\n\r\n    while True:\r\n        try:\r\n            port.write(msg_length * b'a')\r\n            port.flush()\r\n            time.sleep(delay)\r\n        except KeyboardInterrupt:\r\n            exit()\r\n\r\n---\r\n\r\n    # Receiver.py\r\n    # Python 3.3 or newer only\r\n    import serial\r\n    import os\r\n    import time\r\n\r\n    baudrate       = 2000000\r\n    msg_length     = 100\r\n    \r\n    bauds_per_byte = 10\r\n    bytes_per_s    = baudrate / bauds_per_byte\r\n    byte_travel_t  = 1 / bytes_per_s\r\n\r\n    # If next byte doesn't arrive by the time it takes to arrive, timeout.\r\n    # When speed grows above 1ms timeout resolution, do not set lower value.\r\n    timeout        = max(2 * byte_travel_t, 0.01)\r\n    port           = serial.Serial('/dev/ttyUSB1', baudrate)\r\n    \r\n    print('Timeout:  {}ms'.format(timeout*1000))\r\n\r\n    while True:\r\n        try:\r\n            read_buffer = bytearray()\r\n            while True:\r\n                read = os.read(port.fd, 1000)\r\n                if read:\r\n                    start_time = time.monotonic()\r\n                    read_buffer.extend(read)\r\n                else:\r\n                    if read_buffer:\r\n                        delta = time.monotonic() - start_time\r\n                        if delta > timeout:\r\n                            print('Delta: {}'.format(delta))\r\n                            print(read_buffer == msg_length * b'a')\r\n                            break\r\n                    else:\r\n                        time.sleep(0.001)\r\n        except KeyboardInterrupt:\r\n            exit()\r\n\r\nAccessing the low level `os.read` for serial object's file descriptor isn't exactly ideal, plus this implementation loses pyserial's error handling etc. So my question is, can I somehow implement this kind of logic with existing code and if not, can this type of `read()` be added to the library?\r\n\r\nThank You.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/199", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/199/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/199/events", "html_url": "https://github.com/pyserial/pyserial/issues/199", "id": 202775531, "node_id": "MDU6SXNzdWUyMDI3NzU1MzE=", "number": 199, "title": "bug in pyserial: serialposix.py", "user": {"login": "giongieri", "id": 25320034, "node_id": "MDQ6VXNlcjI1MzIwMDM0", "avatar_url": "https://avatars2.githubusercontent.com/u/25320034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giongieri", "html_url": "https://github.com/giongieri", "followers_url": "https://api.github.com/users/giongieri/followers", "following_url": "https://api.github.com/users/giongieri/following{/other_user}", "gists_url": "https://api.github.com/users/giongieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/giongieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giongieri/subscriptions", "organizations_url": "https://api.github.com/users/giongieri/orgs", "repos_url": "https://api.github.com/users/giongieri/repos", "events_url": "https://api.github.com/users/giongieri/events{/privacy}", "received_events_url": "https://api.github.com/users/giongieri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-24T10:13:34Z", "updated_at": "2017-01-24T10:49:32Z", "closed_at": "2017-01-24T10:49:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nline 50:\r\n        # set custom divisor\r\n        buf[6] = buf[7] / baudrate\r\n\r\nTypeError: integer argument expected, got float\r\n\r\nfix: do cast: buf[6] = int(buf[7] / baudrate)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/198", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/198/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/198/events", "html_url": "https://github.com/pyserial/pyserial/issues/198", "id": 201658201, "node_id": "MDU6SXNzdWUyMDE2NTgyMDE=", "number": 198, "title": "Escape sequences interupt pyserial client", "user": {"login": "iiSeymour", "id": 4310904, "node_id": "MDQ6VXNlcjQzMTA5MDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4310904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iiSeymour", "html_url": "https://github.com/iiSeymour", "followers_url": "https://api.github.com/users/iiSeymour/followers", "following_url": "https://api.github.com/users/iiSeymour/following{/other_user}", "gists_url": "https://api.github.com/users/iiSeymour/gists{/gist_id}", "starred_url": "https://api.github.com/users/iiSeymour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iiSeymour/subscriptions", "organizations_url": "https://api.github.com/users/iiSeymour/orgs", "repos_url": "https://api.github.com/users/iiSeymour/repos", "events_url": "https://api.github.com/users/iiSeymour/events{/privacy}", "received_events_url": "https://api.github.com/users/iiSeymour/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-18T18:42:31Z", "updated_at": "2017-01-20T10:12:35Z", "closed_at": "2017-01-18T18:42:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm writing a pyserial client and I'm getting a series of escape sequences from the device I'm connecting to that seems to be trying to discover the terminals capabilities. I'd like to know more about this process and how to handle it, this is not an issue with pyserial so I've posted a questions over [here](http://stackoverflow.com/q/41708420/1066031) on stackoverflow. Any pointers appreciated :smiley:  \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/194", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/194/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/194/events", "html_url": "https://github.com/pyserial/pyserial/issues/194", "id": 199684399, "node_id": "MDU6SXNzdWUxOTk2ODQzOTk=", "number": 194, "title": "serialwin32: spurios write fails with ERROR_SUCCESS", "user": {"login": "DietmarSchwertberger", "id": 5512021, "node_id": "MDQ6VXNlcjU1MTIwMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5512021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DietmarSchwertberger", "html_url": "https://github.com/DietmarSchwertberger", "followers_url": "https://api.github.com/users/DietmarSchwertberger/followers", "following_url": "https://api.github.com/users/DietmarSchwertberger/following{/other_user}", "gists_url": "https://api.github.com/users/DietmarSchwertberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/DietmarSchwertberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DietmarSchwertberger/subscriptions", "organizations_url": "https://api.github.com/users/DietmarSchwertberger/orgs", "repos_url": "https://api.github.com/users/DietmarSchwertberger/repos", "events_url": "https://api.github.com/users/DietmarSchwertberger/events{/privacy}", "received_events_url": "https://api.github.com/users/DietmarSchwertberger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-09T22:47:32Z", "updated_at": "2017-01-10T21:23:07Z", "closed_at": "2017-01-10T21:22:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\nI'm using a USB device in CDC/VCP mode.\r\nWith heavy traffic, I get spurious exceptions on write, where win32.WriteFile returns a fail, but the error code is win32.ERROR_SUCCESS.\r\nThe data is written successfully to the device, though.\r\nWith the modification below things seem OK.\r\nDo you see a risk with adding this to the repository? The non-blocking version seems to ignore this error code as well.\r\n\r\nRegards,\r\n\r\nDietmar\r\n\r\nserialwin32.py, lines 312...:\r\n```\r\n            success = win32.WriteFile(self._port_handle, data, len(data), ctypes.byref(n), self._overlapped_write)\r\n            if self._write_timeout != 0:  # if blocking (None) or w/ write timeout (>0)\r\n                if not success and win32.GetLastError() not in (win32.ERROR_IO_PENDING,win32.ERROR_SUCCESS):\r\n                    raise SerialException(\"WriteFile failed ({!r})\".format(ctypes.WinError()))\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/193", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/193/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/193/events", "html_url": "https://github.com/pyserial/pyserial/issues/193", "id": 199380460, "node_id": "MDU6SXNzdWUxOTkzODA0NjA=", "number": 193, "title": "inWaiting returns port setting not bytes waiting", "user": {"login": "Mike-D2", "id": 20135110, "node_id": "MDQ6VXNlcjIwMTM1MTEw", "avatar_url": "https://avatars1.githubusercontent.com/u/20135110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mike-D2", "html_url": "https://github.com/Mike-D2", "followers_url": "https://api.github.com/users/Mike-D2/followers", "following_url": "https://api.github.com/users/Mike-D2/following{/other_user}", "gists_url": "https://api.github.com/users/Mike-D2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mike-D2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mike-D2/subscriptions", "organizations_url": "https://api.github.com/users/Mike-D2/orgs", "repos_url": "https://api.github.com/users/Mike-D2/repos", "events_url": "https://api.github.com/users/Mike-D2/events{/privacy}", "received_events_url": "https://api.github.com/users/Mike-D2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-01-07T19:34:00Z", "updated_at": "2017-01-14T19:41:27Z", "closed_at": "2017-01-14T19:41:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm operating python 3.4 shell, with pyserial, recently downloaded and installed. I can read from the port ok, BUT the .inWaiting function returns a long string with all of the port settings, not the number of bytes waiting to be read.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/188", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/188/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/188/events", "html_url": "https://github.com/pyserial/pyserial/issues/188", "id": 195033044, "node_id": "MDU6SXNzdWUxOTUwMzMwNDQ=", "number": 188, "title": "rfc2217.Serial() initialization broken", "user": {"login": "adrianer", "id": 1736676, "node_id": "MDQ6VXNlcjE3MzY2NzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1736676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrianer", "html_url": "https://github.com/adrianer", "followers_url": "https://api.github.com/users/adrianer/followers", "following_url": "https://api.github.com/users/adrianer/following{/other_user}", "gists_url": "https://api.github.com/users/adrianer/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrianer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrianer/subscriptions", "organizations_url": "https://api.github.com/users/adrianer/orgs", "repos_url": "https://api.github.com/users/adrianer/repos", "events_url": "https://api.github.com/users/adrianer/events{/privacy}", "received_events_url": "https://api.github.com/users/adrianer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-12T17:19:31Z", "updated_at": "2016-12-14T18:11:18Z", "closed_at": "2016-12-14T18:06:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "When one initializes rfc2217.Serial() with a port, then all the attributes initialized by the parent method here https://github.com/pyserial/pyserial/blob/master/serial/rfc2217.py#L383 will be overwritten with \"None\" starting with this line: https://github.com/pyserial/pyserial/blob/master/serial/rfc2217.py#L384\r\n\r\nThe typical error one will get because of this is as follows (when calling write()):\r\n\r\n`  File \"/usr/local/lib/python2.7/dist-packages/serial/rfc2217.py\", line 628, in write\r\n    with self._write_lock:\r\nAttributeError: __exit__`\r\n\r\nLooks like this was broken starting in February this year because of PyLint comments... To fix this, all this None initializations of the attributes need to happen *before* calling super() - this way the correctly set ones won't get overwritten...\r\n\r\nWORKAROUND:\r\n-call rfc2217.Serial() without the port parameter and afterwards call open() on the returned object.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/186", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/186/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/186/events", "html_url": "https://github.com/pyserial/pyserial/issues/186", "id": 192989564, "node_id": "MDU6SXNzdWUxOTI5ODk1NjQ=", "number": 186, "title": "spy:// protocol doesn't work with stdlib urlparse", "user": {"login": "jof", "id": 52706, "node_id": "MDQ6VXNlcjUyNzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/52706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jof", "html_url": "https://github.com/jof", "followers_url": "https://api.github.com/users/jof/followers", "following_url": "https://api.github.com/users/jof/following{/other_user}", "gists_url": "https://api.github.com/users/jof/gists{/gist_id}", "starred_url": "https://api.github.com/users/jof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jof/subscriptions", "organizations_url": "https://api.github.com/users/jof/orgs", "repos_url": "https://api.github.com/users/jof/repos", "events_url": "https://api.github.com/users/jof/events{/privacy}", "received_events_url": "https://api.github.com/users/jof/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-01T23:14:56Z", "updated_at": "2017-07-31T11:46:10Z", "closed_at": "2017-07-31T11:46:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running into trouble with the latest v3.2.1 against python2.7 distributed with Debian Squeeze.\r\n\r\nIt seems that the stdlib urlparse keeps a list of protocol schemes which actually support query strings, and as a custom protocol name, \"spy\" isn't in this list.\r\nAs a result, the spy:// protocol URL functionality doesn't work.\r\n\r\nPerhaps the spy:// protocol needs to register itself with urlparse as supporting query strings?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/185", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/185/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/185/events", "html_url": "https://github.com/pyserial/pyserial/issues/185", "id": 192919261, "node_id": "MDU6SXNzdWUxOTI5MTkyNjE=", "number": 185, "title": "{}.format() Not Compatible with Python 2.6", "user": {"login": "schulzj01", "id": 1533882, "node_id": "MDQ6VXNlcjE1MzM4ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1533882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schulzj01", "html_url": "https://github.com/schulzj01", "followers_url": "https://api.github.com/users/schulzj01/followers", "following_url": "https://api.github.com/users/schulzj01/following{/other_user}", "gists_url": "https://api.github.com/users/schulzj01/gists{/gist_id}", "starred_url": "https://api.github.com/users/schulzj01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schulzj01/subscriptions", "organizations_url": "https://api.github.com/users/schulzj01/orgs", "repos_url": "https://api.github.com/users/schulzj01/repos", "events_url": "https://api.github.com/users/schulzj01/events{/privacy}", "received_events_url": "https://api.github.com/users/schulzj01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-01T18:02:11Z", "updated_at": "2018-07-02T20:14:25Z", "closed_at": "2018-07-02T20:14:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using the latest pyserial in 2.6, the {}.format() methods throw an error: \r\n\r\n`    ispeed = ospeed = getattr(termios, 'B{}'.format(self._baudrate))\r\nValueError: zero length field name in format`\r\n\r\nFor python 2.6 compatibility you need to have the argument numbers in the braces: \r\n   ispeed = ospeed = getattr(termios, 'B{}'.format(self._baudrate))\r\nBecomes: \r\n   ispeed = ospeed = getattr(termios, 'B{**0**}'.format(self._baudrate))", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/184", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/184/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/184/events", "html_url": "https://github.com/pyserial/pyserial/issues/184", "id": 192662307, "node_id": "MDU6SXNzdWUxOTI2NjIzMDc=", "number": 184, "title": "Only ports /dev/ttyS32+ are listed", "user": {"login": "ukrkyi", "id": 12379081, "node_id": "MDQ6VXNlcjEyMzc5MDgx", "avatar_url": "https://avatars2.githubusercontent.com/u/12379081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ukrkyi", "html_url": "https://github.com/ukrkyi", "followers_url": "https://api.github.com/users/ukrkyi/followers", "following_url": "https://api.github.com/users/ukrkyi/following{/other_user}", "gists_url": "https://api.github.com/users/ukrkyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ukrkyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ukrkyi/subscriptions", "organizations_url": "https://api.github.com/users/ukrkyi/orgs", "repos_url": "https://api.github.com/users/ukrkyi/repos", "events_url": "https://api.github.com/users/ukrkyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ukrkyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-30T19:53:20Z", "updated_at": "2016-12-03T16:59:39Z", "closed_at": "2016-12-03T16:59:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "`python -m serial.tools.list_ports` lists only ports that have the number bigger than 32, and /dev/ttyS[0-31] aren't listed.\r\n```\r\n$ sudo socat -d -d pty,link=/dev/ttyS30,raw pty,link=/dev/ttyS31,raw\r\n$ sudo python -m serial.tools.list_ports\r\nno ports found\r\n$ sudo socat -d -d pty,link=/dev/ttyS32,raw pty,link=/dev/ttyS33,raw\r\n$ sudo python -m serial.tools.list_ports\r\n/dev/ttyS32         \r\n/dev/ttyS33         \r\n2 ports found\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/182", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/182/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/182/events", "html_url": "https://github.com/pyserial/pyserial/issues/182", "id": 190436974, "node_id": "MDU6SXNzdWUxOTA0MzY5NzQ=", "number": 182, "title": "read_until: Does not honor timeout", "user": {"login": "herm", "id": 753225, "node_id": "MDQ6VXNlcjc1MzIyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/753225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/herm", "html_url": "https://github.com/herm", "followers_url": "https://api.github.com/users/herm/followers", "following_url": "https://api.github.com/users/herm/following{/other_user}", "gists_url": "https://api.github.com/users/herm/gists{/gist_id}", "starred_url": "https://api.github.com/users/herm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/herm/subscriptions", "organizations_url": "https://api.github.com/users/herm/orgs", "repos_url": "https://api.github.com/users/herm/repos", "events_url": "https://api.github.com/users/herm/events{/privacy}", "received_events_url": "https://api.github.com/users/herm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-18T22:27:16Z", "updated_at": "2017-04-21T11:47:54Z", "closed_at": "2017-04-21T11:47:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation on the timeout parameter is pretty clear:\r\n\r\n```\r\ntimeout = x: set timeout to x seconds (float allowed) returns immediately \r\nwhen the requested number of bytes are available, otherwise wait until\r\nthe timeout expires and return all bytes that were received until then.\r\n```\r\n\r\nread_until however does never return if at least one byte is received within each timeout period. e.g. timeout=1 and the device sends 2bytes/second (but no terminator). This is definitely not the expected behavior, as a device sending unexpected data can block your application forever. \r\n\r\nThe problem is caused by ``read(1)`` being called repeatedly without checking for the total time taken. https://github.com/pyserial/pyserial/blob/master/serial/serialutil.py#L640\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/180", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/180/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/180/events", "html_url": "https://github.com/pyserial/pyserial/issues/180", "id": 189120461, "node_id": "MDU6SXNzdWUxODkxMjA0NjE=", "number": 180, "title": "included in RFC2217 - TypeError in to_byte - multiple platforms PI and Windows", "user": {"login": "bassettj", "id": 23454351, "node_id": "MDQ6VXNlcjIzNDU0MzUx", "avatar_url": "https://avatars3.githubusercontent.com/u/23454351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bassettj", "html_url": "https://github.com/bassettj", "followers_url": "https://api.github.com/users/bassettj/followers", "following_url": "https://api.github.com/users/bassettj/following{/other_user}", "gists_url": "https://api.github.com/users/bassettj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bassettj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bassettj/subscriptions", "organizations_url": "https://api.github.com/users/bassettj/orgs", "repos_url": "https://api.github.com/users/bassettj/repos", "events_url": "https://api.github.com/users/bassettj/events{/privacy}", "received_events_url": "https://api.github.com/users/bassettj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-14T14:07:07Z", "updated_at": "2016-12-16T22:13:34Z", "closed_at": "2016-12-16T22:13:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "C:\\Python34\\Lib\\site-packages\\serial\\tools>python rfc2217_server.py com5\r\nINFO:root:RFC 2217 TCP/IP to Serial redirector - type Ctrl-C / BREAK to quit\r\nINFO:root:Serving serial port: com5\r\nINFO:root:TCP/IP port: 2217\r\nINFO:root:Connected by 10.1.15.201:9062\r\nTraceback (most recent call last):\r\n  File \"rfc2217_server.py\", line 169, in <module>\r\n    args.verbosity > 0)\r\n  File \"rfc2217_server.py\", line 27, in __init__\r\n    logger=logging.getLogger('rfc2217.server') if debug else None)\r\n  File \"C:\\Python34\\lib\\site-packages\\serial\\rfc2217.py\", line 967, in __init__\r\n    self.telnet_send_option(option.send_yes, option.option)\r\n  File \"C:\\Python34\\lib\\site-packages\\serial\\rfc2217.py\", line 992, in telnet_se\r\nnd_option\r\n    self.connection.write(to_bytes([IAC, action, option]))\r\n  File \"C:\\Python34\\lib\\site-packages\\serial\\serialutil.py\", line 66, in to_byte\r\ns\r\n    return bytes(bytearray(seq))\r\nTypeError: an integer is required\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/178", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/178/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/178/events", "html_url": "https://github.com/pyserial/pyserial/issues/178", "id": 188211941, "node_id": "MDU6SXNzdWUxODgyMTE5NDE=", "number": 178, "title": "write Integer data to serialPort raises Error on Linux", "user": {"login": "Schmetzler", "id": 12082018, "node_id": "MDQ6VXNlcjEyMDgyMDE4", "avatar_url": "https://avatars3.githubusercontent.com/u/12082018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Schmetzler", "html_url": "https://github.com/Schmetzler", "followers_url": "https://api.github.com/users/Schmetzler/followers", "following_url": "https://api.github.com/users/Schmetzler/following{/other_user}", "gists_url": "https://api.github.com/users/Schmetzler/gists{/gist_id}", "starred_url": "https://api.github.com/users/Schmetzler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Schmetzler/subscriptions", "organizations_url": "https://api.github.com/users/Schmetzler/orgs", "repos_url": "https://api.github.com/users/Schmetzler/repos", "events_url": "https://api.github.com/users/Schmetzler/events{/privacy}", "received_events_url": "https://api.github.com/users/Schmetzler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-09T10:23:55Z", "updated_at": "2016-11-09T14:06:58Z", "closed_at": "2016-11-09T14:04:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found a bug and I am not well aware on how to upload a patch (just didn't do that before and don't know the workflow).\r\n\r\nIn file serialposix.py in function `write(self, data)` the data is transformed to bytes:\r\n(line 518) `d = to_bytes(data)`\r\nbut at the end (line 558) it `return len(data)`, what fails if data is an integer\r\nit should `return len(d)`\r\n(This error does not occur on windows because line 308 in serialwin32.py just does `data = to_bytes(data)`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/176", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/176/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/176/events", "html_url": "https://github.com/pyserial/pyserial/issues/176", "id": 187855429, "node_id": "MDU6SXNzdWUxODc4NTU0Mjk=", "number": 176, "title": "Opening/closing serial ports too quickly on a mac kills usb ports", "user": {"login": "theicfire", "id": 442311, "node_id": "MDQ6VXNlcjQ0MjMxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/442311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theicfire", "html_url": "https://github.com/theicfire", "followers_url": "https://api.github.com/users/theicfire/followers", "following_url": "https://api.github.com/users/theicfire/following{/other_user}", "gists_url": "https://api.github.com/users/theicfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/theicfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theicfire/subscriptions", "organizations_url": "https://api.github.com/users/theicfire/orgs", "repos_url": "https://api.github.com/users/theicfire/repos", "events_url": "https://api.github.com/users/theicfire/events{/privacy}", "received_events_url": "https://api.github.com/users/theicfire/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-11-07T23:04:44Z", "updated_at": "2017-02-20T20:43:25Z", "closed_at": "2016-11-11T01:14:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've verified this on osx 10.11.4 and 10.12.1. Whenever I close a Serial instance, and then unplug/replug in the usb ports, the usb port disappears. Here's the code I'm using:\r\n\r\n```\r\nimport serial\r\nimport sys\r\nimport glob\r\n\r\ndef serial_ports():\r\n    \"\"\" Lists serial port names\r\n\r\n        :raises EnvironmentError:\r\n            On unsupported or unknown platforms\r\n        :returns:\r\n            A list of the serial ports available on the system\r\n    \"\"\"\r\n    if sys.platform.startswith('win'):\r\n        ports = ['COM%s' % (i + 1) for i in range(256)]\r\n    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):\r\n        # this excludes your current terminal \"/dev/tty\"\r\n        ports = glob.glob('/dev/tty[A-Za-z]*')\r\n    elif sys.platform.startswith('darwin'):\r\n        ports = glob.glob('/dev/tty.usb*')\r\n    else:\r\n        raise EnvironmentError('Unsupported platform')\r\n\r\n    result = []\r\n    for port in ports:\r\n        try:\r\n            s = serial.Serial(port)\r\n            s.close()\r\n            result.append(port)\r\n        except (OSError, serial.SerialException):\r\n            pass\r\n    return result\r\n\r\nports = serial_ports()\r\nprint ports\r\nser = serial.Serial(ports[0], 115200, timeout=1)\r\nser.close()\r\n```\r\nInterestingly, on 10.12.1, if I omit the ser.close() call, the problem does not happen. The problem still happens on 10.11.4 -- I expect that's for a different reason: 10.11.4 will kill usb ports that are disconnected while an active connection happens, whereas this does not happen for 10.12.1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/174", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/174/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/174/events", "html_url": "https://github.com/pyserial/pyserial/issues/174", "id": 187347018, "node_id": "MDU6SXNzdWUxODczNDcwMTg=", "number": 174, "title": "Incorrect Handling of Arrow Keys in miniterm.py", "user": {"login": "GHPS", "id": 1478398, "node_id": "MDQ6VXNlcjE0NzgzOTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1478398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GHPS", "html_url": "https://github.com/GHPS", "followers_url": "https://api.github.com/users/GHPS/followers", "following_url": "https://api.github.com/users/GHPS/following{/other_user}", "gists_url": "https://api.github.com/users/GHPS/gists{/gist_id}", "starred_url": "https://api.github.com/users/GHPS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GHPS/subscriptions", "organizations_url": "https://api.github.com/users/GHPS/orgs", "repos_url": "https://api.github.com/users/GHPS/repos", "events_url": "https://api.github.com/users/GHPS/events{/privacy}", "received_events_url": "https://api.github.com/users/GHPS/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-04T14:27:22Z", "updated_at": "2016-12-21T18:52:41Z", "closed_at": "2016-12-07T00:30:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I stumpled upon this bug when tracing down a problem in mpfshell - a shell for micropython [1].\r\nThere the problem came up that the arrrow keys show a lagging behaviour when navigating the shell history or the command line.\r\nBasically you press ARROW-UP, nothing happens, you press ARROW-UP again and get the arrow-up functionality once [2]. This, of course, renders the REPL of micropython pretty useless...\r\n\r\nTo find out what is received and sent by miniterm I added two lines of debugging code:\r\n\r\n```\r\ndiff miniterm-backup.py miniterm.py\r\n168a169\r\n>             print(\"[def getkey] key list: \",list(c))\r\n493a495\r\n>                     print(\"[def writer] transformed: \",list(text), \" encoded: \",list(self.tx_encoder.encode(text)))\r\n```\r\n\r\nThis made clear that there is at least a bug in the getkey function (and probably in the encoding function)..\r\n\r\nAfter the first keypress you get\r\n\r\n```\r\n[def getkey] key list:  ['\\x1b']\r\n[def writer] transformed:  ['\\x1b']  encoded:  [27]\r\n```\r\n\r\nAfter the next single keypress you get\r\n\r\n```\r\n[def getkey] key list:  ['[']\r\n[def writer] transformed:  ['[']  encoded:  [91]\r\n[def getkey] key list:  ['A']\r\n[def writer] transformed:  ['A']  encoded:  [65]\r\n[def getkey] key list:  ['\\x1b']\r\n[def writer] transformed:  ['\\x1b']  encoded:  [27]\r\n```\r\n\r\nHere getkey keeps kind of lagging behind. And I'm not sure about the correctness of the encoding...\r\n\r\nThe problem seems to be limited to Linux and Python 3.x. I've done the testing with Kubuntu 16.04-64,\r\nPython 3.5.2 and pyserial 3.2.1.\r\n\r\n\r\nGHPS\r\n\r\n-------------\r\n[1] https://github.com/wendlers/mpfshell\r\n[2] https://github.com/wendlers/mpfshell/issues/11", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/173", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/173/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/173/events", "html_url": "https://github.com/pyserial/pyserial/issues/173", "id": 186274606, "node_id": "MDU6SXNzdWUxODYyNzQ2MDY=", "number": 173, "title": "Intro code example for context manager needs `with`.", "user": {"login": "gnbl", "id": 1181708, "node_id": "MDQ6VXNlcjExODE3MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1181708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnbl", "html_url": "https://github.com/gnbl", "followers_url": "https://api.github.com/users/gnbl/followers", "following_url": "https://api.github.com/users/gnbl/following{/other_user}", "gists_url": "https://api.github.com/users/gnbl/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnbl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnbl/subscriptions", "organizations_url": "https://api.github.com/users/gnbl/orgs", "repos_url": "https://api.github.com/users/gnbl/repos", "events_url": "https://api.github.com/users/gnbl/events{/privacy}", "received_events_url": "https://api.github.com/users/gnbl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-31T12:43:34Z", "updated_at": "2016-10-31T21:38:30Z", "closed_at": "2016-10-31T21:37:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/pyserial/pyserial/blame/master/documentation/shortintro.rst#L49 is missing `with`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/170", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/170/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/170/events", "html_url": "https://github.com/pyserial/pyserial/issues/170", "id": 184060967, "node_id": "MDU6SXNzdWUxODQwNjA5Njc=", "number": 170, "title": "Serialize serial.Serial object created using pyserial", "user": {"login": "sudiptakarmakar", "id": 2730823, "node_id": "MDQ6VXNlcjI3MzA4MjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2730823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudiptakarmakar", "html_url": "https://github.com/sudiptakarmakar", "followers_url": "https://api.github.com/users/sudiptakarmakar/followers", "following_url": "https://api.github.com/users/sudiptakarmakar/following{/other_user}", "gists_url": "https://api.github.com/users/sudiptakarmakar/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudiptakarmakar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudiptakarmakar/subscriptions", "organizations_url": "https://api.github.com/users/sudiptakarmakar/orgs", "repos_url": "https://api.github.com/users/sudiptakarmakar/repos", "events_url": "https://api.github.com/users/sudiptakarmakar/events{/privacy}", "received_events_url": "https://api.github.com/users/sudiptakarmakar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-19T20:07:33Z", "updated_at": "2016-10-24T23:49:00Z", "closed_at": "2016-10-24T23:49:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to read/write data off a serial port from multiple processes. Since I didn't want to open the connection every time I send a request, I was trying to serialize the serial object reference (once connection is made) and use that for future requests until disconnection happens. But I can't serialize the object using pickle. What do you suggest I do here?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/168", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/168/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/168/events", "html_url": "https://github.com/pyserial/pyserial/issues/168", "id": 180716760, "node_id": "MDU6SXNzdWUxODA3MTY3NjA=", "number": 168, "title": "Request: Expose USB interface descriptor index", "user": {"login": "jrmrjnck", "id": 429934, "node_id": "MDQ6VXNlcjQyOTkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/429934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmrjnck", "html_url": "https://github.com/jrmrjnck", "followers_url": "https://api.github.com/users/jrmrjnck/followers", "following_url": "https://api.github.com/users/jrmrjnck/following{/other_user}", "gists_url": "https://api.github.com/users/jrmrjnck/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmrjnck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmrjnck/subscriptions", "organizations_url": "https://api.github.com/users/jrmrjnck/orgs", "repos_url": "https://api.github.com/users/jrmrjnck/repos", "events_url": "https://api.github.com/users/jrmrjnck/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmrjnck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-03T18:52:27Z", "updated_at": "2019-07-28T18:55:33Z", "closed_at": "2019-07-28T18:55:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to connect with a USB device which exposes two CDC/ACM functions (not sure if function is the right word - I'm new to USB terminology). There are a total of four USB interfaces (control+data for two functions). In pyserial, the two functions are detected but they have identical ListPortInfo data, so it's impossible to know which is which.\n\nI took a look at list_ports and it should be possible to get the interface information (at least on Windows and Linux, which is what I need to support).\n\nOn Windows, the interface index shows up as `&MI_XX` at the end of the HW ID string. (e.g. `USB\\VID_1FC9&PID_0003&REV_0100&MI_02` for the second function on interface index 2).\n\nOn Linux, the sysfs path includes the config.interface information following a colon `:`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/166", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/166/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/166/events", "html_url": "https://github.com/pyserial/pyserial/issues/166", "id": 179950860, "node_id": "MDU6SXNzdWUxNzk5NTA4NjA=", "number": 166, "title": "Missing semicolon in serialwin32.py", "user": {"login": "kbandla", "id": 200847, "node_id": "MDQ6VXNlcjIwMDg0Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/200847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbandla", "html_url": "https://github.com/kbandla", "followers_url": "https://api.github.com/users/kbandla/followers", "following_url": "https://api.github.com/users/kbandla/following{/other_user}", "gists_url": "https://api.github.com/users/kbandla/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbandla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbandla/subscriptions", "organizations_url": "https://api.github.com/users/kbandla/orgs", "repos_url": "https://api.github.com/users/kbandla/repos", "events_url": "https://api.github.com/users/kbandla/events{/privacy}", "received_events_url": "https://api.github.com/users/kbandla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-29T04:36:27Z", "updated_at": "2016-09-29T21:58:53Z", "closed_at": "2016-09-29T21:58:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tested this on Windows 10, and Python 2.7\n\n```\nD:\\>python\nPython 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:19:22) [MSC v.1500 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n>>> import serial\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"D:\\Python27\\lib\\site-packages\\pyserial-3.1.1-py2.7.egg\\serial\\__init__.py\", line 32, in <module>\n    from serial.serialwin32 import Serial\n  File \"D:\\Python27\\lib\\site-packages\\pyserial-3.1.1-py2.7.egg\\serial\\serialwin32.py\", line 330\n    elif errorcode in (win32.ERROR_SUCCESS, win32.ERROR_IO_PENDING)\n                                                                  ^\nSyntaxError: invalid syntax\n>>>\n```\n\nfixed in #164 \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/162", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/162/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/162/events", "html_url": "https://github.com/pyserial/pyserial/issues/162", "id": 177298580, "node_id": "MDU6SXNzdWUxNzcyOTg1ODA=", "number": 162, "title": "Write in non-blocking mode returns incorrect value on windows", "user": {"login": "jabdoa2", "id": 557540, "node_id": "MDQ6VXNlcjU1NzU0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/557540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jabdoa2", "html_url": "https://github.com/jabdoa2", "followers_url": "https://api.github.com/users/jabdoa2/followers", "following_url": "https://api.github.com/users/jabdoa2/following{/other_user}", "gists_url": "https://api.github.com/users/jabdoa2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jabdoa2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jabdoa2/subscriptions", "organizations_url": "https://api.github.com/users/jabdoa2/orgs", "repos_url": "https://api.github.com/users/jabdoa2/repos", "events_url": "https://api.github.com/users/jabdoa2/events{/privacy}", "received_events_url": "https://api.github.com/users/jabdoa2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-15T21:48:56Z", "updated_at": "2016-09-17T14:52:49Z", "closed_at": "2016-09-16T21:54:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When setting write_timeout to 0, a write on a socket will always return 0 on windows. Windows does not provide this value in asynchronous mode:\n\n```\nlpNumberOfBytesWritten [out, optional]\nA pointer to the variable that receives the number of bytes written when using a synchronous hFile parameter. WriteFile sets this value to zero before doing any work or error checking. Use NULL for this parameter if this is an asynchronous operation to avoid potentially erroneous results.\n```\n\nFrom: https://msdn.microsoft.com/en-us/library/windows/desktop/aa365747(v=vs.85).aspx\n\nI suppose it would be correct to just return len(data) in the else branch of https://github.com/pyserial/pyserial/blob/master/serial/serialwin32.py#L315. \n\nAdditionally, it might be helpful to check for those:\n`\nThe WriteFile function may fail with ERROR_INVALID_USER_BUFFER or ERROR_NOT_ENOUGH_MEMORY whenever there are too many outstanding asynchronous I/O requests.\n`\nAnd return 0 in this case. This is a problem for pyserial_asyncio on windows: https://github.com/pyserial/pyserial-asyncio/issues/10\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/160", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/160/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/160/events", "html_url": "https://github.com/pyserial/pyserial/issues/160", "id": 175438434, "node_id": "MDU6SXNzdWUxNzU0Mzg0MzQ=", "number": 160, "title": "for what was .drainOutput() good?", "user": {"login": "heckmannju", "id": 5092129, "node_id": "MDQ6VXNlcjUwOTIxMjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5092129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckmannju", "html_url": "https://github.com/heckmannju", "followers_url": "https://api.github.com/users/heckmannju/followers", "following_url": "https://api.github.com/users/heckmannju/following{/other_user}", "gists_url": "https://api.github.com/users/heckmannju/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckmannju/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckmannju/subscriptions", "organizations_url": "https://api.github.com/users/heckmannju/orgs", "repos_url": "https://api.github.com/users/heckmannju/repos", "events_url": "https://api.github.com/users/heckmannju/events{/privacy}", "received_events_url": "https://api.github.com/users/heckmannju/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-07T08:06:26Z", "updated_at": "2016-09-07T12:37:04Z", "closed_at": "2016-09-07T12:37:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI port an electric meter programm.  The code was running fine on pyserial 2.7 now after update to 3.1.1 I have the problem that i don't know what an method was doing.\n\nhere is the code from pyserial 2.7\n\n if self._reset_baudrate:\n                self._serial.baudrate = 300\n                logger.debug(\"dlms: (re)set baudrate to 300 Baud\")\n            self._serial.write(self._init_seq)\n            self._serial.drainOutput()\n            self._serial.flushInput()\n            response = bytes()\n\nin the documentation i found that now i should use reset_input_buffer()  instead of flushInput() but i found nothing for what the method drainOutput was good.\n\n if self._reset_baudrate:\n                self._serial.baudrate = 300\n                logger.debug(\"dlms: (re)set baudrate to 300 Baud\")\n            self._serial.write(self._init_seq)\n            #self._serial.drainOutput()\n            self._serial.reset_input_buffer()  #self._serial.flushInput()\n            response = bytes()\n\nit seams to work also without that drainOutput. But I have no clue for what this was good for. Any hint how i should translate this?\n\nBest Regards,\nJ\u00fcrgen\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/159", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/159/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/159/events", "html_url": "https://github.com/pyserial/pyserial/issues/159", "id": 174920629, "node_id": "MDU6SXNzdWUxNzQ5MjA2Mjk=", "number": 159, "title": "rs485 not in pyserial", "user": {"login": "walchko", "id": 918960, "node_id": "MDQ6VXNlcjkxODk2MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/918960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walchko", "html_url": "https://github.com/walchko", "followers_url": "https://api.github.com/users/walchko/followers", "following_url": "https://api.github.com/users/walchko/following{/other_user}", "gists_url": "https://api.github.com/users/walchko/gists{/gist_id}", "starred_url": "https://api.github.com/users/walchko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walchko/subscriptions", "organizations_url": "https://api.github.com/users/walchko/orgs", "repos_url": "https://api.github.com/users/walchko/repos", "events_url": "https://api.github.com/users/walchko/events{/privacy}", "received_events_url": "https://api.github.com/users/walchko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-03T22:20:14Z", "updated_at": "2016-09-06T20:22:08Z", "closed_at": "2016-09-06T20:21:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "OS: macOS el capitan\nPython: 2.7.12\n\nI am trying to use rs485 using the example in the [docs](http://pyserial.readthedocs.io/en/latest/pyserial_api.html#rs485-support):\n\n``` python\nimport serial\nser = serial.Serial()\nser.rs485_mode = serial.rs485.RS485Settings()\nser.write(b'hello')\n```\n\nbut I get:\n\n``` bash\nTraceback (most recent call last):\n  File \"./ml-320.py\", line 297, in <module>\n    main()\n  File \"./ml-320.py\", line 262, in main\n    s.rs485_mode = serial.rs485.RS485Settings(\nAttributeError: 'module' object has no attribute 'rs485'\n```\n\nwhen I run python I get:\n\n``` python\n>>> import serial\n>>> serial.__version__\n'3.1.1'\n>>> dir(serial)\n['CR', 'EIGHTBITS', 'FIVEBITS', 'LF', 'PARITY_EVEN', 'PARITY_MARK', 'PARITY_NAMES', \n'PARITY_NONE', 'PARITY_ODD', 'PARITY_SPACE', 'PosixPollSerial', 'SEVENBITS', 'SIXBITS',\n 'STOPBITS_ONE', 'STOPBITS_ONE_POINT_FIVE', 'STOPBITS_TWO', 'Serial', 'SerialBase',\n 'SerialException', 'SerialTimeoutException', 'VERSION', 'VTIMESerial', 'XOFF', 'XON', '__builtins__',\n '__doc__', '__file__', '__name__', '__package__', '__path__', '__version__', 'importlib', 'io', 'iterbytes', 'os',\n 'portNotOpenError', 'protocol_handler_packages', 'serial_for_url', 'serialposix', 'serialutil', 'sys',\n 'time', 'to_bytes', 'writeTimeoutError']\n```\n\nwhere is the rs485 module???\n\nThis is the current version I installed using `pip`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/158", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/158/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/158/events", "html_url": "https://github.com/pyserial/pyserial/issues/158", "id": 174890112, "node_id": "MDU6SXNzdWUxNzQ4OTAxMTI=", "number": 158, "title": "ReInstall pyserial successfull but fails at runtime", "user": {"login": "ldpgh", "id": 13517069, "node_id": "MDQ6VXNlcjEzNTE3MDY5", "avatar_url": "https://avatars0.githubusercontent.com/u/13517069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldpgh", "html_url": "https://github.com/ldpgh", "followers_url": "https://api.github.com/users/ldpgh/followers", "following_url": "https://api.github.com/users/ldpgh/following{/other_user}", "gists_url": "https://api.github.com/users/ldpgh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldpgh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldpgh/subscriptions", "organizations_url": "https://api.github.com/users/ldpgh/orgs", "repos_url": "https://api.github.com/users/ldpgh/repos", "events_url": "https://api.github.com/users/ldpgh/events{/privacy}", "received_events_url": "https://api.github.com/users/ldpgh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-09-03T10:18:14Z", "updated_at": "2016-09-18T21:58:18Z", "closed_at": "2016-09-15T19:30:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "(1) Doing pySerial Install on Win7, Python 2.7.12 successfull. Runtime works fine and as expected :-)\n\n(2.0) Had a functional pySerial (revision unknown) installed on WinXP, Python 2.7.5. The reason for the reinstall are the changes as described by (3)\n2.1) ReInstall successfull\n(2.2) Runtime FAIL. Screen-log ( [pyserial_install_fail.txt](https://github.com/pyserial/pyserial/files/453299/pyserial_install_fail.txt) ) including the install from cmd.exe window.\n\n(3) `list(serial.tools.list_ports.comports())`  seems to behave different between the current pySerial revision and my old installation.\n- installation according (1) ... `[<serial.tools.list_ports_common.ListPortInfo object at 0x02314F70>]`\n- old installation according (2) ... `[('COM1', 'Kommunikationsanschluss (COM1)', '*******')]`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/157", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/157/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/157/events", "html_url": "https://github.com/pyserial/pyserial/issues/157", "id": 173690249, "node_id": "MDU6SXNzdWUxNzM2OTAyNDk=", "number": 157, "title": "Broken handling of CMSPAR in serialposix.py", "user": {"login": "neilwhelchel", "id": 21270768, "node_id": "MDQ6VXNlcjIxMjcwNzY4", "avatar_url": "https://avatars1.githubusercontent.com/u/21270768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilwhelchel", "html_url": "https://github.com/neilwhelchel", "followers_url": "https://api.github.com/users/neilwhelchel/followers", "following_url": "https://api.github.com/users/neilwhelchel/following{/other_user}", "gists_url": "https://api.github.com/users/neilwhelchel/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilwhelchel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilwhelchel/subscriptions", "organizations_url": "https://api.github.com/users/neilwhelchel/orgs", "repos_url": "https://api.github.com/users/neilwhelchel/repos", "events_url": "https://api.github.com/users/neilwhelchel/events{/privacy}", "received_events_url": "https://api.github.com/users/neilwhelchel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-29T03:35:39Z", "updated_at": "2016-08-30T01:32:18Z", "closed_at": "2016-08-29T21:02:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "The logic for clearing the CMSPAR bit in serialposix (and possibly other platforms) seems to be missing. Once you set serial.parity=serial.PARITY_MARK, serial.parity=serial.PARITY_ODD (and others) do not clear the CMSPAR bit in hardware.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/155", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/155/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/155/events", "html_url": "https://github.com/pyserial/pyserial/issues/155", "id": 173571073, "node_id": "MDU6SXNzdWUxNzM1NzEwNzM=", "number": 155, "title": "Serial timeouts are the wrong interval when system clock is set.", "user": {"login": "neilwhelchel", "id": 21270768, "node_id": "MDQ6VXNlcjIxMjcwNzY4", "avatar_url": "https://avatars1.githubusercontent.com/u/21270768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilwhelchel", "html_url": "https://github.com/neilwhelchel", "followers_url": "https://api.github.com/users/neilwhelchel/followers", "following_url": "https://api.github.com/users/neilwhelchel/following{/other_user}", "gists_url": "https://api.github.com/users/neilwhelchel/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilwhelchel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilwhelchel/subscriptions", "organizations_url": "https://api.github.com/users/neilwhelchel/orgs", "repos_url": "https://api.github.com/users/neilwhelchel/repos", "events_url": "https://api.github.com/users/neilwhelchel/events{/privacy}", "received_events_url": "https://api.github.com/users/neilwhelchel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-27T01:36:43Z", "updated_at": "2016-09-04T22:14:48Z", "closed_at": "2016-09-04T22:14:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been having some really hard to find bugs with serial communication locking up when the system clock gets updated.I tracked it back to the use of time.time() instead of time.monotonic() in serialposix.py.\nThe problem is that timeouts are calculated by comparing a previous call to time.time() to a current one. This is a big problem if the system clock is changed backwards. This effectively adds (or subtracts) the changed system time to the timeout. This is what time.monotonic() is intended to avoid.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/151", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/151/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/151/events", "html_url": "https://github.com/pyserial/pyserial/issues/151", "id": 171262357, "node_id": "MDU6SXNzdWUxNzEyNjIzNTc=", "number": 151, "title": "Documentation:  Windows Version Support", "user": {"login": "modal", "id": 181984, "node_id": "MDQ6VXNlcjE4MTk4NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/181984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/modal", "html_url": "https://github.com/modal", "followers_url": "https://api.github.com/users/modal/followers", "following_url": "https://api.github.com/users/modal/following{/other_user}", "gists_url": "https://api.github.com/users/modal/gists{/gist_id}", "starred_url": "https://api.github.com/users/modal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/modal/subscriptions", "organizations_url": "https://api.github.com/users/modal/orgs", "repos_url": "https://api.github.com/users/modal/repos", "events_url": "https://api.github.com/users/modal/events{/privacy}", "received_events_url": "https://api.github.com/users/modal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-15T21:08:16Z", "updated_at": "2016-09-15T19:30:07Z", "closed_at": "2016-09-15T19:30:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can pyserial support for Windows versions be explicitly spelled out in the **README.rst** and  **pyserial/documentation/pyserial.rst** files?    \n\nPrior Reference Issues:  [148](https://github.com/pyserial/pyserial/issues/148), [132](https://github.com/pyserial/pyserial/issues/132)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/150", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/150/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/150/events", "html_url": "https://github.com/pyserial/pyserial/issues/150", "id": 170919102, "node_id": "MDU6SXNzdWUxNzA5MTkxMDI=", "number": 150, "title": "Serial.__enter__ does not open the port", "user": {"login": "fmoor", "id": 8278635, "node_id": "MDQ6VXNlcjgyNzg2MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8278635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmoor", "html_url": "https://github.com/fmoor", "followers_url": "https://api.github.com/users/fmoor/followers", "following_url": "https://api.github.com/users/fmoor/following{/other_user}", "gists_url": "https://api.github.com/users/fmoor/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmoor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmoor/subscriptions", "organizations_url": "https://api.github.com/users/fmoor/orgs", "repos_url": "https://api.github.com/users/fmoor/repos", "events_url": "https://api.github.com/users/fmoor/events{/privacy}", "received_events_url": "https://api.github.com/users/fmoor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-12T17:23:40Z", "updated_at": "2016-08-12T19:20:11Z", "closed_at": "2016-08-12T19:20:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Serial.**enter** does not open the serial port even though **exit** closes the port.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/148", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/148/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/148/events", "html_url": "https://github.com/pyserial/pyserial/issues/148", "id": 170552983, "node_id": "MDU6SXNzdWUxNzA1NTI5ODM=", "number": 148, "title": " On Windws XP not support CancelIO", "user": {"login": "mengyyy", "id": 10589755, "node_id": "MDQ6VXNlcjEwNTg5NzU1", "avatar_url": "https://avatars1.githubusercontent.com/u/10589755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mengyyy", "html_url": "https://github.com/mengyyy", "followers_url": "https://api.github.com/users/mengyyy/followers", "following_url": "https://api.github.com/users/mengyyy/following{/other_user}", "gists_url": "https://api.github.com/users/mengyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/mengyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mengyyy/subscriptions", "organizations_url": "https://api.github.com/users/mengyyy/orgs", "repos_url": "https://api.github.com/users/mengyyy/repos", "events_url": "https://api.github.com/users/mengyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/mengyyy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-11T01:11:38Z", "updated_at": "2017-05-17T18:18:23Z", "closed_at": "2016-08-12T18:09:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just want to know which version  i can use in Windows xp (SP2).\nThanks a lot \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/147", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/147/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/147/events", "html_url": "https://github.com/pyserial/pyserial/issues/147", "id": 169819586, "node_id": "MDU6SXNzdWUxNjk4MTk1ODY=", "number": 147, "title": "listports fails on Windows", "user": {"login": "bainorama", "id": 580314, "node_id": "MDQ6VXNlcjU4MDMxNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/580314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bainorama", "html_url": "https://github.com/bainorama", "followers_url": "https://api.github.com/users/bainorama/followers", "following_url": "https://api.github.com/users/bainorama/following{/other_user}", "gists_url": "https://api.github.com/users/bainorama/gists{/gist_id}", "starred_url": "https://api.github.com/users/bainorama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bainorama/subscriptions", "organizations_url": "https://api.github.com/users/bainorama/orgs", "repos_url": "https://api.github.com/users/bainorama/repos", "events_url": "https://api.github.com/users/bainorama/events{/privacy}", "received_events_url": "https://api.github.com/users/bainorama/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-07T22:28:05Z", "updated_at": "2016-08-07T23:51:10Z", "closed_at": "2016-08-07T23:51:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "In V3.1.1:\nserial.tools.list_ports.comports() fails on a Windows 7 host with:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python34\\lib\\site-packages\\serial\\tools\\list_ports_windows.py\", line 294, in comports\n    return list(iterate_comports())\n  File \"C:\\Python34\\lib\\site-packages\\serial\\tools\\list_ports_windows.py\", line 258, in iterate_comports\n    info.hwid = info.usb_info()\n  File \"C:\\Python34\\lib\\site-packages\\serial\\tools\\list_ports_common.py\", line 61, in usb_info\n    ' LOCATION={}'.format(self.location) if self.location is not None else '')\nTypeError: non-empty format string passed to object.__format__\n```\n\nThis looks to be caused by the pid/vid parameters not being populated (they're set to None), in list_ports_windows.py, ln 227, szHardwareId_str for the failing case is:\nUSB\\VID_03F0&SUBCLASS_01&PROT_02\\7&310FBEA0&0&0000\n\nwhich doesn't match the regex on ln 228.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/145", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/145/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/145/events", "html_url": "https://github.com/pyserial/pyserial/issues/145", "id": 169205148, "node_id": "MDU6SXNzdWUxNjkyMDUxNDg=", "number": 145, "title": "comports() failing due to internal 4G module", "user": {"login": "lukweb", "id": 17657384, "node_id": "MDQ6VXNlcjE3NjU3Mzg0", "avatar_url": "https://avatars1.githubusercontent.com/u/17657384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukweb", "html_url": "https://github.com/lukweb", "followers_url": "https://api.github.com/users/lukweb/followers", "following_url": "https://api.github.com/users/lukweb/following{/other_user}", "gists_url": "https://api.github.com/users/lukweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukweb/subscriptions", "organizations_url": "https://api.github.com/users/lukweb/orgs", "repos_url": "https://api.github.com/users/lukweb/repos", "events_url": "https://api.github.com/users/lukweb/events{/privacy}", "received_events_url": "https://api.github.com/users/lukweb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-03T18:49:41Z", "updated_at": "2016-08-06T00:13:35Z", "closed_at": "2016-08-05T23:54:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "On my notebook I have a builtin 4G module (HP lt4112 Gobi 4G Module) it is using 3 COM ports.\n\nRunning: \nfrom serial.tools.list_ports import comports\ncomports()\n\nis giving me:\nFile \"C:\\Program Files\\Python27\\lib\\site-packages\\serial\\tools\\list_ports_common.py\", line 65, in usb_info\n    ' LOCATION={}'.format(self.location) if self.location is not None else '')\n\nhaving a look (and changing) at list_ports_common.py is telling me that pid and vid is None\n\nthis works, but might not be very proper:\n    def usb_info(self):\n        \"\"\"return a string with USB related information about device\"\"\"\n        return 'USB VID:PID={}:{}{}{}'.format(\n            '{:04X}'.format(self.vid) if self.vid is not None else '',\n            '{:04X}'.format(self.pid) if self.pid is not None else '',\n            ' SER={}'.format(self.serial_number) if self.serial_number is not None else '',\n            ' LOCATION={}'.format(self.location) if self.location is not None else '')\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/143", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/143/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/143/events", "html_url": "https://github.com/pyserial/pyserial/issues/143", "id": 169039252, "node_id": "MDU6SXNzdWUxNjkwMzkyNTI=", "number": 143, "title": "Class Serial in protocol_loop.py references variable before assigning to it", "user": {"login": "RichardLangFromNZ", "id": 13562183, "node_id": "MDQ6VXNlcjEzNTYyMTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/13562183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RichardLangFromNZ", "html_url": "https://github.com/RichardLangFromNZ", "followers_url": "https://api.github.com/users/RichardLangFromNZ/followers", "following_url": "https://api.github.com/users/RichardLangFromNZ/following{/other_user}", "gists_url": "https://api.github.com/users/RichardLangFromNZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/RichardLangFromNZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RichardLangFromNZ/subscriptions", "organizations_url": "https://api.github.com/users/RichardLangFromNZ/orgs", "repos_url": "https://api.github.com/users/RichardLangFromNZ/repos", "events_url": "https://api.github.com/users/RichardLangFromNZ/events{/privacy}", "received_events_url": "https://api.github.com/users/RichardLangFromNZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-03T03:25:54Z", "updated_at": "2016-08-04T18:47:30Z", "closed_at": "2016-08-04T18:47:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "pyserial 3.1.1\n\nClass`Serial` from \"\\urlhandler\\protocol_loop.py\" assigns `buffer_size` member variable in it's`__init__` method, but calls it's superclass `__init_` first, which in some circumstances attempts to open the port via. the `open()` method, which references `buffer_size`...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/142", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/142/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/142/events", "html_url": "https://github.com/pyserial/pyserial/issues/142", "id": 168321517, "node_id": "MDU6SXNzdWUxNjgzMjE1MTc=", "number": 142, "title": "IronPython Does Not Recognize", "user": {"login": "StepMaher", "id": 10765460, "node_id": "MDQ6VXNlcjEwNzY1NDYw", "avatar_url": "https://avatars2.githubusercontent.com/u/10765460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StepMaher", "html_url": "https://github.com/StepMaher", "followers_url": "https://api.github.com/users/StepMaher/followers", "following_url": "https://api.github.com/users/StepMaher/following{/other_user}", "gists_url": "https://api.github.com/users/StepMaher/gists{/gist_id}", "starred_url": "https://api.github.com/users/StepMaher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StepMaher/subscriptions", "organizations_url": "https://api.github.com/users/StepMaher/orgs", "repos_url": "https://api.github.com/users/StepMaher/repos", "events_url": "https://api.github.com/users/StepMaher/events{/privacy}", "received_events_url": "https://api.github.com/users/StepMaher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-29T13:11:39Z", "updated_at": "2016-08-10T13:28:21Z", "closed_at": "2016-08-10T13:28:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\n\nQuick question regarding usage with IronPython. For some reason it doesn't recognize PySerial (see common `ImportError` below).\n\n![image](https://cloud.githubusercontent.com/assets/10765460/17248661/ebf24044-5569-11e6-99e2-29bef8eb1c1b.png)\n\nI installed the library using the Command Prompt. Am I missing something? Or do I need to re-install using a different way?\n\nThanks in advance for the help,\n/SPM\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/138", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/138/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/138/events", "html_url": "https://github.com/pyserial/pyserial/issues/138", "id": 163186205, "node_id": "MDU6SXNzdWUxNjMxODYyMDU=", "number": 138, "title": "problem with ubuntu 16.04 64bit", "user": {"login": "speedy-10", "id": 20227451, "node_id": "MDQ6VXNlcjIwMjI3NDUx", "avatar_url": "https://avatars1.githubusercontent.com/u/20227451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speedy-10", "html_url": "https://github.com/speedy-10", "followers_url": "https://api.github.com/users/speedy-10/followers", "following_url": "https://api.github.com/users/speedy-10/following{/other_user}", "gists_url": "https://api.github.com/users/speedy-10/gists{/gist_id}", "starred_url": "https://api.github.com/users/speedy-10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speedy-10/subscriptions", "organizations_url": "https://api.github.com/users/speedy-10/orgs", "repos_url": "https://api.github.com/users/speedy-10/repos", "events_url": "https://api.github.com/users/speedy-10/events{/privacy}", "received_events_url": "https://api.github.com/users/speedy-10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-06-30T14:55:43Z", "updated_at": "2016-07-15T10:34:16Z", "closed_at": "2016-06-30T18:11:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\nI installed python3-serial with:\nsudo apt-get install python3-serial\nUsing the Python-Shell I got the following failure:\n`\n\n> > > import serial\n> > > s = serial.Serial(0)\n> > > Traceback (most recent call last):\n> > >   File \"<pyshell#1>\", line 1, in <module>\n> > >     s = serial.Serial(0)\n> > >   File \"/usr/local/lib/python3.5/dist-packages/serial/serialutil.py\", line 162, in **init**\n> > >     self.port = port\n> > >   File \"/usr/local/lib/python3.5/dist-packages/serial/serialutil.py\", line 206, in port\n> > >     raise ValueError('\"port\" must be None or a string, not {}'.format(type(port)))\n> > > ValueError: \"port\" must be None or a string, not <class 'int'>`\n\nEven if I tried to install by `sudo python3 setup.py install\n`\n\nI got the same failure.\n\nWhat can I do?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/137", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/137/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/137/events", "html_url": "https://github.com/pyserial/pyserial/issues/137", "id": 161045259, "node_id": "MDU6SXNzdWUxNjEwNDUyNTk=", "number": 137, "title": "Exception while cancel (python3)", "user": {"login": "devkral", "id": 658768, "node_id": "MDQ6VXNlcjY1ODc2OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/658768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devkral", "html_url": "https://github.com/devkral", "followers_url": "https://api.github.com/users/devkral/followers", "following_url": "https://api.github.com/users/devkral/following{/other_user}", "gists_url": "https://api.github.com/users/devkral/gists{/gist_id}", "starred_url": "https://api.github.com/users/devkral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devkral/subscriptions", "organizations_url": "https://api.github.com/users/devkral/orgs", "repos_url": "https://api.github.com/users/devkral/repos", "events_url": "https://api.github.com/users/devkral/events{/privacy}", "received_events_url": "https://api.github.com/users/devkral/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-18T21:56:38Z", "updated_at": "2016-06-19T18:47:43Z", "closed_at": "2016-06-19T18:47:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I hit this exception while terminating pyserial (fix is at the end):\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/threading.py\", line 914, in _bootstrap_inner\n    self.run()\n  File \"/usr/lib/python3.5/threading.py\", line 862, in run\n    self._target(_self._args, *_self._kwargs)\n  File \"/usr/lib/python3.5/site-packages/serial/tools/miniterm.py\", line 463, in reader\n    self.console.cancel()\n  File \"/usr/lib/python3.5/site-packages/serial/tools/miniterm.py\", line 172, in cancel\n    os.write(self.pipe_w, \"x\")\nTypeError: a bytes-like object is required, not 'str'\n\nThe fix is:\n    def cancel(self):\n       os.write(self.pipe_w, \"x\")\nshould be:\n    def cancel(self):\n       os.write(self.pipe_w, b\"x\")\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/133", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/133/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/133/events", "html_url": "https://github.com/pyserial/pyserial/issues/133", "id": 159934713, "node_id": "MDU6SXNzdWUxNTk5MzQ3MTM=", "number": 133, "title": "_update_dtr_state throws Inappropriate ioctl for virtual serial port created by socat on OS X", "user": {"login": "MAKOMO", "id": 13909011, "node_id": "MDQ6VXNlcjEzOTA5MDEx", "avatar_url": "https://avatars2.githubusercontent.com/u/13909011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MAKOMO", "html_url": "https://github.com/MAKOMO", "followers_url": "https://api.github.com/users/MAKOMO/followers", "following_url": "https://api.github.com/users/MAKOMO/following{/other_user}", "gists_url": "https://api.github.com/users/MAKOMO/gists{/gist_id}", "starred_url": "https://api.github.com/users/MAKOMO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MAKOMO/subscriptions", "organizations_url": "https://api.github.com/users/MAKOMO/orgs", "repos_url": "https://api.github.com/users/MAKOMO/repos", "events_url": "https://api.github.com/users/MAKOMO/events{/privacy}", "received_events_url": "https://api.github.com/users/MAKOMO/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-06-13T12:05:01Z", "updated_at": "2016-08-25T12:41:30Z", "closed_at": "2016-06-13T19:22:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "pyserial v3 fails to open a virtual serial port created by socat on OS X \n\n```\n# brew install socat\n# sudo socat -d -d -d -d -lf /tmp/socat pty,link=/dev/master,raw,echo=0,user=marko,group=staff pty,link=/dev/slave,raw,echo=0,user=marko,group=staff\n# python\nPython 2.7.10 (v2.7.10:15c95b7d81dc, May 23 2015, 09:33:12) \n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import serial\n>>> serial.Serial(port=\"/dev/slave\",baudrate=9600)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/serial/serialutil.py\", line 182, in __init__\n    self.open()\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/serial/serialposix.py\", line 265, in open\n    self._update_dtr_state()\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/serial/serialposix.py\", line 595, in _update_dtr_state\n    fcntl.ioctl(self.fd, TIOCMBIS, TIOCM_DTR_str)\nIOError: [Errno 25] Inappropriate ioctl for device\n```\n\nOpening that serial port using\n`serial.Serial(port=\"/dev/slave\",baudrate=9600,dsrdtr=True,rtscts=True)`\nworks. Under pyserial v2.7 opening the port with either command works.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/132", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/132/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/132/events", "html_url": "https://github.com/pyserial/pyserial/issues/132", "id": 159924635, "node_id": "MDU6SXNzdWUxNTk5MjQ2MzU=", "number": 132, "title": "Import Failed under WinXP and Python 3.4", "user": {"login": "lijg", "id": 3980654, "node_id": "MDQ6VXNlcjM5ODA2NTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3980654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lijg", "html_url": "https://github.com/lijg", "followers_url": "https://api.github.com/users/lijg/followers", "following_url": "https://api.github.com/users/lijg/following{/other_user}", "gists_url": "https://api.github.com/users/lijg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lijg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lijg/subscriptions", "organizations_url": "https://api.github.com/users/lijg/orgs", "repos_url": "https://api.github.com/users/lijg/repos", "events_url": "https://api.github.com/users/lijg/events{/privacy}", "received_events_url": "https://api.github.com/users/lijg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-13T11:02:47Z", "updated_at": "2016-12-09T08:01:16Z", "closed_at": "2016-06-13T17:05:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I've tried to use pyserial under WinXP with Python 3.4, but I cannot even import serial.\n\nI installed pyserial-3.1.1 using `pip install pyserial`\n\nhere is the result\n\n```\nC:\\Documents and Settings\\Administrator>python\nPython 3.4.4 (v3.4.4:737efcadf5a6, Dec 20 2015, 19:28:18) [MSC v.1600 32 bit (In\ntel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import serial\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python34\\lib\\site-packages\\serial\\__init__.py\", line 27, in <module>\n    from serial.serialwin32 import Serial\n  File \"C:\\Python34\\lib\\site-packages\\serial\\serialwin32.py\", line 15, in <modul\ne>\n    from serial import win32\n  File \"C:\\Python34\\lib\\site-packages\\serial\\win32.py\", line 182, in <module>\n    CancelIoEx = _stdcall_libraries['kernel32'].CancelIoEx\n  File \"C:\\Python34\\lib\\ctypes\\__init__.py\", line 364, in __getattr__\n    func = self.__getitem__(name)\n  File \"C:\\Python34\\lib\\ctypes\\__init__.py\", line 369, in __getitem__\n    func = self._FuncPtr((name_or_ordinal, self))\nAttributeError: function 'CancelIoEx' not found\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/128", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/128/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/128/events", "html_url": "https://github.com/pyserial/pyserial/issues/128", "id": 159513486, "node_id": "MDU6SXNzdWUxNTk1MTM0ODY=", "number": 128, "title": "Python 3 code being installed by pip into Python 2.7 environment", "user": {"login": "John-Nagle", "id": 942608, "node_id": "MDQ6VXNlcjk0MjYwOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/942608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/John-Nagle", "html_url": "https://github.com/John-Nagle", "followers_url": "https://api.github.com/users/John-Nagle/followers", "following_url": "https://api.github.com/users/John-Nagle/following{/other_user}", "gists_url": "https://api.github.com/users/John-Nagle/gists{/gist_id}", "starred_url": "https://api.github.com/users/John-Nagle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/John-Nagle/subscriptions", "organizations_url": "https://api.github.com/users/John-Nagle/orgs", "repos_url": "https://api.github.com/users/John-Nagle/repos", "events_url": "https://api.github.com/users/John-Nagle/events{/privacy}", "received_events_url": "https://api.github.com/users/John-Nagle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-09T21:33:49Z", "updated_at": "2016-06-13T11:02:22Z", "closed_at": "2016-06-11T19:27:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Installing the current \"pyserial\" with pip results in an attempt to compile Python 3 code with Python 2. Note \n\ndef open_serial_connection(*,\"\n\nwhich is not legal Python 2.7. Bare \"*\" for parameters is a Python 3 only feature.\n\nPyserial documentation claims, at \"https://github.com/pyserial/pyserial/blob/master/CHANGES.rst\", that \"The source code is compatible to the 2.x and 3.x series without any changes.\", but this is not the case.\n\nWhile the test below was an upgrade, the same problem occurs on a clean install of pyserial on a new machine.\n\n> sudo pip install pyserial --upgrade\n> Downloading/unpacking pyserial from https://pypi.python.org/packages/aa/e7/e3109a5db1d76f459987ee3def5a34cd4ea825ac2320bd0704a8189cbc15/pyserial-3.1-py2.py3-none-any.whl#md5=dd199d56fbb257b3277690bcb8591f36\n>   Downloading pyserial-3.1-py2.py3-none-any.whl (93kB): 93kB downloaded\n> Installing collected packages: pyserial\n>   Found existing installation: pyserial 2.6\n>     Not uninstalling pyserial at /usr/lib/python2.7/dist-packages, owned by OS\n> Compiling /tmp/pip_build_root/pyserial/serial/aio.py ...\n>   File \"/tmp/pip_build_root/pyserial/serial/aio.py\", line 366\n>     def open_serial_connection(*,\n>                                 ^\n> SyntaxError: invalid syntax\n> \n> Successfully installed pyserial\n> Cleaning up...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/127", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/127/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/127/events", "html_url": "https://github.com/pyserial/pyserial/issues/127", "id": 159253807, "node_id": "MDU6SXNzdWUxNTkyNTM4MDc=", "number": 127, "title": "The Serial class in the .NET/Mono (IronPython) backend does not implement the _reconfigure_port method", "user": {"login": "sabWA256", "id": 19825305, "node_id": "MDQ6VXNlcjE5ODI1MzA1", "avatar_url": "https://avatars1.githubusercontent.com/u/19825305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sabWA256", "html_url": "https://github.com/sabWA256", "followers_url": "https://api.github.com/users/sabWA256/followers", "following_url": "https://api.github.com/users/sabWA256/following{/other_user}", "gists_url": "https://api.github.com/users/sabWA256/gists{/gist_id}", "starred_url": "https://api.github.com/users/sabWA256/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sabWA256/subscriptions", "organizations_url": "https://api.github.com/users/sabWA256/orgs", "repos_url": "https://api.github.com/users/sabWA256/repos", "events_url": "https://api.github.com/users/sabWA256/events{/privacy}", "received_events_url": "https://api.github.com/users/sabWA256/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-08T19:41:25Z", "updated_at": "2016-06-09T22:08:34Z", "closed_at": "2016-06-09T22:08:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no _reconfigure_port(self) function in serialcli.py but it is expected by the parent class SerialBase in serialutil.py. This causes SerialBase to generate the message _AttributeError: 'Serial' object has no attribute '_reconfigure_port'_.\n\nThe SerialBase class implemented in serialutil.py expects _reconfigure_port(self) to be implemented by subclasses. This is not explicitely stated in the module, but it is clear from examining the code.\nFor example, from serialutil.py:\n\n``` python\n@baudrate.setter\ndef baudrate(self, baudrate):\n    \"\"\"\\\n    Change baud rate. It raises a ValueError if the port is open and the\n    baud rate is not possible. If the port is closed, then the value is\n    accepted and the exception is raised when the port is opened.\n    \"\"\"\n    try:\n        b = int(baudrate)\n    except TypeError:\n        raise ValueError(\"Not a valid baudrate: %r\" % (baudrate,))\n    else:\n        if b &lt;= 0:\n            raise ValueError(\"Not a valid baudrate: %r\" % (baudrate,))\n        self._baudrate = b\n        if self.is_open:\n            self._reconfigure_port()\n```\n\nThe Serial(SerialBase) class implemented in serialcli.py has _configurePort(self) \nbut _configure_port(self) does not exist:\n\n``` python\ndef _reconfigurePort(self):\n    \"\"\"Set communication parameters on opened port.\"\"\"\n    if not self._port_handle:\n        raise SerialException(\"Can only operate on a valid port handle\")\n```\n\n Here is the output of a test run using IronPython. Note the traceback at the end.\n\n> C:\\test>ipy test_advanced.py\n> Some tests for the serial module.\n> Part of pyserial (http://pyserial.sf.net)  (C)2002 cliechti@gmx.net\n> \n> Intended to be run on different platforms, to ensure portability of\n> the code.\n> \n> These tests open a serial port and change all the settings on the fly.\n> If the port is really correctly configured cannot be determined - that\n> would require external hardware or a null modem cable and an other\n> serial port library... Thus it mainly tests that all features are\n> correctly implemented and that the interface does what it should.\n> \n> Testing port: 'COM1'\n> test_BaudrateSetting (**main**.Test_ChangeAttributes) ... ERROR\n> test_BytesizeSetting (**main**.Test_ChangeAttributes) ... ok\n> test_DoubleOpen (**main**.Test_ChangeAttributes) ... ok\n> test_ParitySetting (**main**.Test_ChangeAttributes) ... ok\n> test_PortOpenClose (**main**.Test_ChangeAttributes) ... ok\n> test_PortSetting (**main**.Test_ChangeAttributes) ... ok\n> test_RtsCtsSetting (**main**.Test_ChangeAttributes) ... ok\n> test_StopbitsSetting (**main**.Test_ChangeAttributes) ... ok\n> test_TimeoutSetting (**main**.Test_ChangeAttributes) ... ok\n> test_XonXoffSetting (**main**.Test_ChangeAttributes) ... ok\n> \n> ERROR: test_BaudrateSetting (**main**.Test_ChangeAttributes)\n> \n> Traceback (most recent call last):\n>  File \"test_advanced.py\", line 77, in test_BaudrateSetting\n>    for baudrate in (300, 9600, 19200, 115200):\n>  File \"C:\\Program Files (x86)\\IronPython 2.7\\lib\\site-packages\\serial\\serialutil.py\", line 232, in baudrate\n>    else:\n> AttributeError: 'Serial' object has no attribute '_reconfigure_port'\n> ---\n> \n> Ran 10 tests in 0.233s\n> \n> FAILED (errors=1)\n\nFor the record, I'm using pySerial 3.0.1 and IronPython 2.7.5 (32-bit).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/126", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/126/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/126/events", "html_url": "https://github.com/pyserial/pyserial/issues/126", "id": 159138475, "node_id": "MDU6SXNzdWUxNTkxMzg0NzU=", "number": 126, "title": "PATCH: Check delay_before_tx/rx for None in serialposix.py", "user": {"login": "vanmierlo", "id": 3007095, "node_id": "MDQ6VXNlcjMwMDcwOTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3007095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vanmierlo", "html_url": "https://github.com/vanmierlo", "followers_url": "https://api.github.com/users/vanmierlo/followers", "following_url": "https://api.github.com/users/vanmierlo/following{/other_user}", "gists_url": "https://api.github.com/users/vanmierlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vanmierlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vanmierlo/subscriptions", "organizations_url": "https://api.github.com/users/vanmierlo/orgs", "repos_url": "https://api.github.com/users/vanmierlo/repos", "events_url": "https://api.github.com/users/vanmierlo/events{/privacy}", "received_events_url": "https://api.github.com/users/vanmierlo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-08T11:12:30Z", "updated_at": "2016-06-09T18:27:26Z", "closed_at": "2016-06-09T18:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nHere's a small fix for an issue with the default settings for RS485Settings. In rs485.py delay_before_tx is set to None by default. But in serialposix.py it is unconditionally multiplied by 1000 which fails. I think it's better to leave buf[1] at 0 in that case. The same for delay_before_rx.\n\nMaarten\n\n``` patch\n--- serialposix.py  Wed Jun 08 12:27:07 2016\n+++ serialposix_new.py  Wed Jun 08 12:33:17 2016\n@@ -139,8 +139,10 @@\n                         buf[0] |= SER_RS485_RTS_AFTER_SEND\n                     else:\n                         buf[0] &= ~SER_RS485_RTS_AFTER_SEND\n-                    buf[1] = int(rs485_settings.delay_before_tx * 1000)\n-                    buf[2] = int(rs485_settings.delay_before_rx * 1000)\n+                    if rs485_settings.delay_before_tx is not None:\n+                        buf[1] = int(rs485_settings.delay_before_tx * 1000)\n+                    if rs485_settings.delay_before_rx is not None:\n+                        buf[2] = int(rs485_settings.delay_before_rx * 1000)\n                 else:\n                     buf[0] = 0  # clear SER_RS485_ENABLED\n                 fcntl.ioctl(self.fd, TIOCSRS485, buf)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/123", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/123/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/123/events", "html_url": "https://github.com/pyserial/pyserial/issues/123", "id": 158446770, "node_id": "MDU6SXNzdWUxNTg0NDY3NzA=", "number": 123, "title": "Bytecode compilation issue in Python 2.7.x", "user": {"login": "yegorich", "id": 1172125, "node_id": "MDQ6VXNlcjExNzIxMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1172125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yegorich", "html_url": "https://github.com/yegorich", "followers_url": "https://api.github.com/users/yegorich/followers", "following_url": "https://api.github.com/users/yegorich/following{/other_user}", "gists_url": "https://api.github.com/users/yegorich/gists{/gist_id}", "starred_url": "https://api.github.com/users/yegorich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yegorich/subscriptions", "organizations_url": "https://api.github.com/users/yegorich/orgs", "repos_url": "https://api.github.com/users/yegorich/repos", "events_url": "https://api.github.com/users/yegorich/events{/privacy}", "received_events_url": "https://api.github.com/users/yegorich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-06-03T20:20:07Z", "updated_at": "2016-06-13T11:03:01Z", "closed_at": "2016-06-11T19:27:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "`python -m compileall .` produces following error in `./serial/aio.py`:\n\n```\nCompiling ./serial/aio.py ...\n  File \"./serial/aio.py\", line 366\n    def open_serial_connection(*,\n                                ^\nSyntaxError: invalid syntax\n```\n\nPython 3.x compiles without error.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/121", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/121/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/121/events", "html_url": "https://github.com/pyserial/pyserial/issues/121", "id": 157481465, "node_id": "MDU6SXNzdWUxNTc0ODE0NjU=", "number": 121, "title": "win32: GetOverlappedResult() return code ignored", "user": {"login": "albenik", "id": 1047425, "node_id": "MDQ6VXNlcjEwNDc0MjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albenik", "html_url": "https://github.com/albenik", "followers_url": "https://api.github.com/users/albenik/followers", "following_url": "https://api.github.com/users/albenik/following{/other_user}", "gists_url": "https://api.github.com/users/albenik/gists{/gist_id}", "starred_url": "https://api.github.com/users/albenik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albenik/subscriptions", "organizations_url": "https://api.github.com/users/albenik/orgs", "repos_url": "https://api.github.com/users/albenik/repos", "events_url": "https://api.github.com/users/albenik/events{/privacy}", "received_events_url": "https://api.github.com/users/albenik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-05-30T11:06:18Z", "updated_at": "2016-05-31T21:43:28Z", "closed_at": "2016-05-31T21:43:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "In some strange cases when repeating reading from usb-com serial port GetOverlappedResult can return  0 (zero) and GetLastError() returns ERROR_INVALID_PARAMETER\nBut in pyserial code no any validation of GetOverlappedResult() result, and Serial.read() function returns an empty respone without any timeout instead of exception.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/117", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/117/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/117/events", "html_url": "https://github.com/pyserial/pyserial/issues/117", "id": 156253188, "node_id": "MDU6SXNzdWUxNTYyNTMxODg=", "number": 117, "title": "rx buffer shows available only after get more than 32 bits", "user": {"login": "guzhaoyuan", "id": 11495993, "node_id": "MDQ6VXNlcjExNDk1OTkz", "avatar_url": "https://avatars1.githubusercontent.com/u/11495993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guzhaoyuan", "html_url": "https://github.com/guzhaoyuan", "followers_url": "https://api.github.com/users/guzhaoyuan/followers", "following_url": "https://api.github.com/users/guzhaoyuan/following{/other_user}", "gists_url": "https://api.github.com/users/guzhaoyuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/guzhaoyuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guzhaoyuan/subscriptions", "organizations_url": "https://api.github.com/users/guzhaoyuan/orgs", "repos_url": "https://api.github.com/users/guzhaoyuan/repos", "events_url": "https://api.github.com/users/guzhaoyuan/events{/privacy}", "received_events_url": "https://api.github.com/users/guzhaoyuan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-23T10:53:51Z", "updated_at": "2016-06-26T12:00:14Z", "closed_at": "2016-06-26T12:00:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "My OS is ubuntu 14.04 and I am trying to send from one port(ttyUSB0) to another port(ttyUSB1).\nBut only after the receive port(ttyUSB1) receives more than 32 bits, the rx buffer show there are data available. If I send one byte, no receive data showed and I can not read that byte.\nI tested using c++ on ubuntu 14.04, the same problem.\nBut the same code works on OS X el capitan \nHow to solve this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/116", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/116/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/116/events", "html_url": "https://github.com/pyserial/pyserial/issues/116", "id": 155838636, "node_id": "MDU6SXNzdWUxNTU4Mzg2MzY=", "number": 116, "title": "tag a new release?", "user": {"login": "jrobeson", "id": 56908, "node_id": "MDQ6VXNlcjU2OTA4", "avatar_url": "https://avatars0.githubusercontent.com/u/56908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrobeson", "html_url": "https://github.com/jrobeson", "followers_url": "https://api.github.com/users/jrobeson/followers", "following_url": "https://api.github.com/users/jrobeson/following{/other_user}", "gists_url": "https://api.github.com/users/jrobeson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrobeson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrobeson/subscriptions", "organizations_url": "https://api.github.com/users/jrobeson/orgs", "repos_url": "https://api.github.com/users/jrobeson/repos", "events_url": "https://api.github.com/users/jrobeson/events{/privacy}", "received_events_url": "https://api.github.com/users/jrobeson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-19T21:24:09Z", "updated_at": "2016-05-28T20:09:40Z", "closed_at": "2016-05-28T20:09:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's been awhile since the last release, and it seems like there's been some nice changes since then. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/115", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/115/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/115/events", "html_url": "https://github.com/pyserial/pyserial/issues/115", "id": 155406192, "node_id": "MDU6SXNzdWUxNTU0MDYxOTI=", "number": 115, "title": "Is method newline() dupplicated in version 3.0?", "user": {"login": "yushi-m", "id": 19420661, "node_id": "MDQ6VXNlcjE5NDIwNjYx", "avatar_url": "https://avatars1.githubusercontent.com/u/19420661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yushi-m", "html_url": "https://github.com/yushi-m", "followers_url": "https://api.github.com/users/yushi-m/followers", "following_url": "https://api.github.com/users/yushi-m/following{/other_user}", "gists_url": "https://api.github.com/users/yushi-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/yushi-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yushi-m/subscriptions", "organizations_url": "https://api.github.com/users/yushi-m/orgs", "repos_url": "https://api.github.com/users/yushi-m/repos", "events_url": "https://api.github.com/users/yushi-m/events{/privacy}", "received_events_url": "https://api.github.com/users/yushi-m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-18T02:53:56Z", "updated_at": "2019-07-24T02:00:19Z", "closed_at": "2019-07-24T02:00:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I couldn't find newline() in pyserial API reference.\nhttp://pyserial.readthedocs.io/en/latest/pyserial_api.html\n\nBut newline() is described in shortintro.\nhttp://pyserial.readthedocs.io/en/latest/shortintro.html\n\nCan I use newline() method?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyserial/pyserial/issues/114", "repository_url": "https://api.github.com/repos/pyserial/pyserial", "labels_url": "https://api.github.com/repos/pyserial/pyserial/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/pyserial/pyserial/issues/114/comments", "events_url": "https://api.github.com/repos/pyserial/pyserial/issues/114/events", "html_url": "https://github.com/pyserial/pyserial/issues/114", "id": 154688977, "node_id": "MDU6SXNzdWUxNTQ2ODg5Nzc=", "number": 114, "title": "How to make a safe and blocking write?", "user": {"login": "notdodo", "id": 6991986, "node_id": "MDQ6VXNlcjY5OTE5ODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6991986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notdodo", "html_url": "https://github.com/notdodo", "followers_url": "https://api.github.com/users/notdodo/followers", "following_url": "https://api.github.com/users/notdodo/following{/other_user}", "gists_url": "https://api.github.com/users/notdodo/gists{/gist_id}", "starred_url": "https://api.github.com/users/notdodo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notdodo/subscriptions", "organizations_url": "https://api.github.com/users/notdodo/orgs", "repos_url": "https://api.github.com/users/notdodo/repos", "events_url": "https://api.github.com/users/notdodo/events{/privacy}", "received_events_url": "https://api.github.com/users/notdodo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-13T11:15:16Z", "updated_at": "2016-05-17T09:56:08Z", "closed_at": "2016-05-17T09:56:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! \nI'm using pyserial with thread support for reading and writing from arduino (one thread for reading, one for writing). When I write something in the serial the arduino sends me the response.\nIf I make a sequence of writes obviously the serial buffer is messed up (concurrency on writing and reading): how can I check if the serial if free for writing and/or make the serial.write blocking?\n", "performed_via_github_app": null, "score": 1.0}]}