{"total_count": 693, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/794", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/794/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/794/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/794", "id": 674638655, "node_id": "MDU6SXNzdWU2NzQ2Mzg2NTU=", "number": 794, "title": "Working with Archived email attachments", "user": {"login": "NotInControl", "id": 1291703, "node_id": "MDQ6VXNlcjEyOTE3MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1291703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NotInControl", "html_url": "https://github.com/NotInControl", "followers_url": "https://api.github.com/users/NotInControl/followers", "following_url": "https://api.github.com/users/NotInControl/following{/other_user}", "gists_url": "https://api.github.com/users/NotInControl/gists{/gist_id}", "starred_url": "https://api.github.com/users/NotInControl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NotInControl/subscriptions", "organizations_url": "https://api.github.com/users/NotInControl/orgs", "repos_url": "https://api.github.com/users/NotInControl/repos", "events_url": "https://api.github.com/users/NotInControl/events{/privacy}", "received_events_url": "https://api.github.com/users/NotInControl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-06T22:33:02Z", "updated_at": "2020-08-12T09:33:46Z", "closed_at": "2020-08-12T09:33:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I have been using this library with great success so thank you.\r\n\r\nHowever, I have ran into an issue when trying to download attachments from archived emails where an attachment is never returned instead a blank file with name 'EAS' is returned. Outlook will download the message first, so I am trying to figure out how to do the equivalent using the library.\r\n\r\nIt appears there is an attachmentID in one of the properties of the EAS file, Is there a method which allows me to get an attachment directly from an attachment ID, or is there a recommended way to get attachments from archived emails?\r\n\r\nIf more info is needed, i'd be happy to share", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/793", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/793/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/793/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/793/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/793", "id": 673358096, "node_id": "MDU6SXNzdWU2NzMzNTgwOTY=", "number": 793, "title": "Internal Server Error while marking mail as read", "user": {"login": "Abhi-1504", "id": 37272570, "node_id": "MDQ6VXNlcjM3MjcyNTcw", "avatar_url": "https://avatars1.githubusercontent.com/u/37272570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Abhi-1504", "html_url": "https://github.com/Abhi-1504", "followers_url": "https://api.github.com/users/Abhi-1504/followers", "following_url": "https://api.github.com/users/Abhi-1504/following{/other_user}", "gists_url": "https://api.github.com/users/Abhi-1504/gists{/gist_id}", "starred_url": "https://api.github.com/users/Abhi-1504/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Abhi-1504/subscriptions", "organizations_url": "https://api.github.com/users/Abhi-1504/orgs", "repos_url": "https://api.github.com/users/Abhi-1504/repos", "events_url": "https://api.github.com/users/Abhi-1504/events{/privacy}", "received_events_url": "https://api.github.com/users/Abhi-1504/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-08-05T08:30:16Z", "updated_at": "2020-08-18T04:49:20Z", "closed_at": "2020-08-17T18:18:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting the below error stack while trying to read and download attachments from the mailbox for specified sender's mail id. The error occurs on saving the marked mail as read also while sending email, it's able to make connection and get the account object created for the mail box. The code was working fine till yesterday and I am not sure what caused the problem today. I have pasted my functions dealing with the operations on emails below. Kindly help.\r\n\r\n**Error:**\r\n\r\n> Traceback (most recent call last):\r\n>   File \"/home/appuser/sandbox/mail_module.py\", line 129, in get_mails\r\n>     paths = Download( item, download_path, invoice_check=True)\r\n>   File \"/home/appuser/sandbox/mail_module.py\", line 25, in Download\r\n>     mails.save()\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/items/item.py\", line 134, in save\r\n>     send_meeting_invitations=send_meeting_invitations\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/items/item.py\", line 217, in _update\r\n>     send_meeting_invitations_or_cancellations=send_meeting_invitations)\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/account.py\", line 450, in bulk_update\r\n>     suppress_read_receipts=suppress_read_receipts,\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/account.py\", line 445, in <genexpr>\r\n>     i if isinstance(i, Exception) else Item.id_from_xml(i)\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/account.py\", line 307, in _consume_item_service\r\n>     for i in service_cls(account=self, chunk_size=chunk_size).call(**kwargs):\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 541, in _pool_requests\r\n>     elems = r.get()\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 657, in get\r\n>     raise self._value\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/multiprocessing/pool.py\", line 121, in worker\r\n>     result = (True, func(*args, **kwds))\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 520, in <lambda>\r\n>     lambda c: self._get_elements(payload=payload_func(c, **kwargs)),\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 66, in _get_elements\r\n>     response = self._get_response_xml(payload=payload)\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 151, in _get_response_xml\r\n>     res = self._get_soap_messages(body=body, **parse_opts)\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 258, in _get_soap_messages\r\n>     cls._raise_soap_errors(fault=fault)  # Will throw SOAPError or custom EWS error\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 294, in _raise_soap_errors\r\n>     raise vars(errors)[code](msg)\r\n> exchangelib.errors.ErrorInternalServerError: An internal server error occurred. The operation failed.\r\n> \r\n> During handling of the above exception, another exception occurred:\r\n> \r\n> Traceback (most recent call last):\r\n>   File \"Controller.py\", line 75, in <module>\r\n>     account, unread_mails, emails_ids_and_pdf_list = m.get_mails(username = username,password = password, from_email_ids = from_email_ids, limit = limit, download_path = download_path, subdirectory = subdirectory)\r\n>   File \"/home/appuser/sandbox/mail_module.py\", line 139, in get_mails\r\n>     item.move(to_folder)\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/items/item.py\", line 269, in move\r\n>     res = self.account.bulk_move(ids=[self], to_folder=to_folder)\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/account.py\", line 552, in bulk_move\r\n>     to_folder=to_folder,\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/account.py\", line 550, in <genexpr>\r\n>     i if isinstance(i, Exception) else Item.id_from_xml(i)\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/account.py\", line 307, in _consume_item_service\r\n>     for i in service_cls(account=self, chunk_size=chunk_size).call(**kwargs):\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/move_item.py\", line 15, in call\r\n>     to_folder=to_folder,\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 66, in _get_elements\r\n>     response = self._get_response_xml(payload=payload)\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 151, in _get_response_xml\r\n>     res = self._get_soap_messages(body=body, **parse_opts)\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 258, in _get_soap_messages\r\n>     cls._raise_soap_errors(fault=fault)  # Will throw SOAPError or custom EWS error\r\n>   File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/services/common.py\", line 294, in _raise_soap_errors\r\n>     raise vars(errors)[code](msg)\r\n> exchangelib.errors.ErrorInternalServerError: An internal server error occurred. The operation failed.\r\n\r\n\r\n**Functions:**\r\n\r\n```\r\nimport os\r\nimport re\r\nfrom exchangelib import Credentials, Account, FileAttachment, Mailbox, Message, NTLM, Configuration, DELEGATE\r\nfrom log import logger\r\nfrom ControllerErrors import ControllerError\r\nfrom exchangelib.protocol import BaseProtocol, NoVerifyHTTPAdapter\r\nimport warnings\r\nfrom zipfile import ZipFile\r\nfrom shutil import copy2\r\nwarnings.filterwarnings(\"ignore\")\r\n\r\ndef Download(mails,download_path,invoice_check=False):\r\n    \"\"\"\r\n    Download the attachments from mails\r\n    Parameters:\r\n        mails (items): mail item object\r\n        download_path (str): path where invoices needs to be downloaded\r\n        invoice_check (bool): variable to check if the downloaded attachment needs unique identifier in file name.\r\n    Return:\r\n        local_paths (list): list of invoices downloaded (multiple in case of zipped files)\r\n    \"\"\"\r\n    # MArking mails as read\r\n    mails.is_read = True\r\n    mails.save()\r\n\r\n    # list to populate the path of downloaded invoices\r\n    local_paths = list()\r\n    mail_attachments = mails.attachments\r\n    #Download the attachments\r\n\r\n    # Checking if mail has atleast on attachment\r\n    if len(mail_attachments) > 0:\r\n        #path for downloading attachments\r\n        attachment_folder_path = download_path\r\n\r\n    #downloading the attachments\r\n    for attachment in mail_attachments:\r\n        if isinstance(attachment, FileAttachment):\r\n            local_path = os.path.join(attachment_folder_path,attachment.name.replace(\" \", \"\"))\r\n            if invoice_check:\r\n                index = local_path.rfind('.')\r\n                local_path = local_path[:index] + str(mails.message_id) + local_path[index:]\r\n            with open(local_path, 'wb') as f:\r\n                f.write(attachment.content)\r\n\r\n        # Extracting the invoices from the attachment if it's a compressed file (.zip extension)\r\n        if local_path != None and '.zip' in local_path:\r\n            tmp = os.path.join(download_path,'unzip')\r\n            if not os.path.exists(tmp):\r\n                os.mkdir(tmp)\r\n            with ZipFile(local_path, 'r') as zipfile:\r\n                zipfile.extractall(tmp)\r\n            os.remove(local_path)\r\n            filelist=os.listdir(tmp)\r\n            for files in filelist:\r\n                filename = os.path.join(tmp,files)\r\n                index = filename.rfind('.')\r\n                file = filename[filename.rfind(os.sep)+1:index] + str(mails.message_id) + filename[index:]\r\n                local_path = os.path.join(download_path,file)\r\n                local_paths.append(local_path)\r\n                copy2(filename,local_path)\r\n                os.remove(filename)\r\n            os.rmdir(tmp)\r\n    # Returrng the path for the downloaded and extracted invoices\r\n    if len(local_paths) > 0:\r\n        return local_paths\r\n    else:\r\n        local_paths = [local_path]\r\n        return local_paths\r\n\r\n\r\ndef get_mails(username, password, download_path,from_email_ids, subdirectory,limit = 5):\r\n    \"\"\"\r\n    Read emails from a given outlook mailbox and save attachments generating a list of email to process\r\n    Parameters:\r\n        username (str): Username for the master mailbox\r\n        password (str): Password for the master mailbox\r\n        download_path (str): download path for the invoices\r\n        from_email_ids (list): list of the senders' email address for which the mails need to processed\r\n        subdirectory (list): list of subdirectories from which mails need to be fetched from\r\n        limit (int): number of mails tio be fetched and processed (currently obsolute, used for batch processing)\r\n    Return:\r\n        len(Emails) (int): Number of filtered unread emails\r\n        email_id_list (list): List of tuples containg message id, path of downloaded invoice and mailbox directory of mail from which it was downloaded from\r\n    \"\"\"\r\n\r\n    # Configuration setup for master mailbox and fetching emails from EWS API\r\n    try:\r\n        BaseProtocol.HTTP_ADAPTER_CLS = NoVerifyHTTPAdapter\r\n        credentials = Credentials(username,password)\r\n        config = Configuration(server='xxx.xxx.xxx', credentials=credentials, auth_type=NTLM)\r\n        account = Account(primary_smtp_address=username, config=config, credentials=credentials, autodiscover=False, access_type=DELEGATE)\r\n    except Exception as e:\r\n        logger.error(str(e))\r\n        exit(0)\r\n        raise ControllerError(sys_err_msg=str(e), custom_err_msg=\"Connection Error with mailbox\")\r\n\r\n    logger.info(\"Reading emails from master mailbox...\")\r\n\r\n    # Creating list of mailbox directory objects from which mails needs to be fetched from\r\n    email_id_list = list()\r\n    if len(subdirectory) > 0:\r\n        if 'Inbox' in subdirectory:\r\n            sub_directories = [account.inbox]\r\n            subdirectory.remove('Inbox')\r\n        else:\r\n            sub_directories = []\r\n        for folder in subdirectory:\r\n            sub_directories.append(account.inbox / folder)\r\n    else:\r\n        sub_directories = [account.inbox]\r\n\r\n    #print(sub_directories)\r\n\r\n    subd_and_emails = list()\r\n    Emails = list()\r\n\r\n    # Fetching all the unread mails filtered based on senders' email addresses from the mentioned directories\r\n    for sub in sub_directories:\r\n        subd_and_emails.append((sub,[item for mail in from_email_ids for item in sub.all().filter(sender=mail).exclude(is_read=True)]))\r\n        #print(subd_and_emails[0][1])\r\n\r\n    for sub ,emails in subd_and_emails:\r\n        Emails.extend(emails)\r\n        # Travesing through the list of emails and calling download function to download the attachments\r\n        for item in emails:\r\n            try:\r\n                if item.sender.email_address in [xxxx]:\r\n                    paths = Download( item, download_path, invoice_check=True)\r\n                else:\r\n                    paths = Download(item, download_path)\r\n                for path in paths:\r\n                    email_id_list.append((item.message_id,path,sub))\r\n\r\n            except Exception as e:\r\n                logger.error(e)\r\n                #Moving mails to Unprocessed folders\r\n                to_folder = account.root/'Top of Information Store'/'UnprocessedMails'\r\n                item.move(to_folder)\r\n\r\n    return account, len(Emails), email_id_list\r\n\r\ndef send_mails(account, message, excel_file, to_emails, unprocessed_invoices=None):\r\n    \"\"\"\r\n    Send generated excel report in an email to the recipents\r\n    Parameters:\r\n        account (object): Account object of master mailbox\r\n        excel_file (str): path to the generated excel file report\r\n        to_emails (list): list of recipents' email\r\n    \"\"\"\r\n\r\n    # Creating list of Mailbox objects from the list of recipents' email and sending email from master mailbox\r\n    try:\r\n        to_recipients =[Mailbox(email_address=mail) for mail in to_emails]\r\n        #Create message\r\n        create_message = Message(account=account,\r\n                             folder = account.sent,\r\n                             subject=\"Report\",\r\n                             body=message,\r\n                             to_recipients=to_recipients)\r\n        attachments = []\r\n        if excel_file != None:\r\n            with open(excel_file, 'rb') as f:\r\n                content = f.read()\r\n            index = excel_file.rfind('/')\r\n            filename = excel_file[index+1:]\r\n            attachments.append((filename,content))\r\n\r\n            #attach files\r\n            for attachment_name, attachment_content in attachments or []:\r\n                file = FileAttachment(name=attachment_name, content=attachment_content)\r\n                create_message.attach(file)\r\n        create_message.send_and_save()\r\n\r\n    except Exception as e:\r\n        logger.error(str(e))\r\n\r\ndef move_mails(account, ids, subdirectory):\r\n    \"\"\"\r\n    Move unprocessed emails to unprocessed directory of master mailbox\r\n    Parameters:\r\n        account (object): Account object of master mailbox\r\n        ids (list): list of tuple containing directory object and message ids of unprocessed emails\r\n        subdirectory (list): list of subdirectories from which mails were fetched\r\n    \"\"\"\r\n    # Creating a dictionary with keys as directory objects and values as the list of unprocessed message ids of mails from that directory\r\n    move_dict = dict()\r\n\r\n    for id,sub in ids:\r\n        if sub not in move_dict:\r\n           move_dict[sub] = []\r\n        move_dict[sub].append(id)\r\n    # Moving the unprocessed mails from their respective directories to unprocessed mails in bulk\r\n    to_folder = account.root/'Top of Information Store'/'Unprocessed'\r\n    for target_folder, msg_ids in move_dict.items():\r\n        item_ids = target_folder.filter(message_id__in=msg_ids)\r\n        bulk_items = account.fetch(item_ids)\r\n        account.bulk_move(bulk_items, to_folder)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/792", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/792/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/792/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/792/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/792", "id": 672064679, "node_id": "MDU6SXNzdWU2NzIwNjQ2Nzk=", "number": 792, "title": "how to get the attributes of rooms?", "user": {"login": "YunusovSamat", "id": 44583676, "node_id": "MDQ6VXNlcjQ0NTgzNjc2", "avatar_url": "https://avatars0.githubusercontent.com/u/44583676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YunusovSamat", "html_url": "https://github.com/YunusovSamat", "followers_url": "https://api.github.com/users/YunusovSamat/followers", "following_url": "https://api.github.com/users/YunusovSamat/following{/other_user}", "gists_url": "https://api.github.com/users/YunusovSamat/gists{/gist_id}", "starred_url": "https://api.github.com/users/YunusovSamat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YunusovSamat/subscriptions", "organizations_url": "https://api.github.com/users/YunusovSamat/orgs", "repos_url": "https://api.github.com/users/YunusovSamat/repos", "events_url": "https://api.github.com/users/YunusovSamat/events{/privacy}", "received_events_url": "https://api.github.com/users/YunusovSamat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-03T13:09:57Z", "updated_at": "2020-08-04T08:07:43Z", "closed_at": "2020-08-04T08:07:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Your library is super, thanks.\r\n\r\nI set the attribute for the room.\r\nPowerShell: set-Mailbox \"meeting-room-1\" -ResourceCustom (\"VKS\")\r\nTo get the attribute via PowShell: https://docs.microsoft.com/ru-ru/powershell/module/exchange/get-resourceconfig?view=exchange-ps&viewFallbackFrom=exchserver-2016\r\ncan i get a given attribute via exchangelib?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/791", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/791/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/791/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/791/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/791", "id": 669488468, "node_id": "MDU6SXNzdWU2Njk0ODg0Njg=", "number": 791, "title": "How can I cancel calendar item in 3.2.0?", "user": {"login": "LiChaozhong", "id": 30309965, "node_id": "MDQ6VXNlcjMwMzA5OTY1", "avatar_url": "https://avatars2.githubusercontent.com/u/30309965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LiChaozhong", "html_url": "https://github.com/LiChaozhong", "followers_url": "https://api.github.com/users/LiChaozhong/followers", "following_url": "https://api.github.com/users/LiChaozhong/following{/other_user}", "gists_url": "https://api.github.com/users/LiChaozhong/gists{/gist_id}", "starred_url": "https://api.github.com/users/LiChaozhong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LiChaozhong/subscriptions", "organizations_url": "https://api.github.com/users/LiChaozhong/orgs", "repos_url": "https://api.github.com/users/LiChaozhong/repos", "events_url": "https://api.github.com/users/LiChaozhong/events{/privacy}", "received_events_url": "https://api.github.com/users/LiChaozhong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-31T07:03:32Z", "updated_at": "2020-08-03T07:41:43Z", "closed_at": "2020-08-03T07:37:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "from  [755](https://github.com/ecederstrand/exchangelib/issues/755)\r\n\r\nI need to use CalendarItem.occurrence(), so I have to use 3.2.0 rather than 3.1.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/790", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/790/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/790/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/790/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/790", "id": 665598476, "node_id": "MDU6SXNzdWU2NjU1OTg0NzY=", "number": 790, "title": "group members", "user": {"login": "Idriel", "id": 4640885, "node_id": "MDQ6VXNlcjQ2NDA4ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4640885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Idriel", "html_url": "https://github.com/Idriel", "followers_url": "https://api.github.com/users/Idriel/followers", "following_url": "https://api.github.com/users/Idriel/following{/other_user}", "gists_url": "https://api.github.com/users/Idriel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Idriel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Idriel/subscriptions", "organizations_url": "https://api.github.com/users/Idriel/orgs", "repos_url": "https://api.github.com/users/Idriel/repos", "events_url": "https://api.github.com/users/Idriel/events{/privacy}", "received_events_url": "https://api.github.com/users/Idriel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-25T14:52:05Z", "updated_at": "2020-08-11T10:13:49Z", "closed_at": "2020-08-11T10:13:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nHow to get \r\nis smtp group or single member and then get recursively all mail address if it's a group.  \r\n\r\nThank you. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/789", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/789/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/789/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/789/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/789", "id": 665050606, "node_id": "MDU6SXNzdWU2NjUwNTA2MDY=", "number": 789, "title": "Wrong username or password after migration of mailbox to cloud", "user": {"login": "olgashums", "id": 25157602, "node_id": "MDQ6VXNlcjI1MTU3NjAy", "avatar_url": "https://avatars3.githubusercontent.com/u/25157602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olgashums", "html_url": "https://github.com/olgashums", "followers_url": "https://api.github.com/users/olgashums/followers", "following_url": "https://api.github.com/users/olgashums/following{/other_user}", "gists_url": "https://api.github.com/users/olgashums/gists{/gist_id}", "starred_url": "https://api.github.com/users/olgashums/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olgashums/subscriptions", "organizations_url": "https://api.github.com/users/olgashums/orgs", "repos_url": "https://api.github.com/users/olgashums/repos", "events_url": "https://api.github.com/users/olgashums/events{/privacy}", "received_events_url": "https://api.github.com/users/olgashums/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-24T09:41:21Z", "updated_at": "2020-07-31T09:41:00Z", "closed_at": "2020-07-31T09:41:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "We used exchangelib to read emails from a mailbox hosted on my organisation EWS managed server.\r\nNot so far ago mailbox migrated to the cloud and my code doesn't work anymore, despite the fact, that I changed the server for the new one.\r\n\r\nHere is the code:\r\n```\r\nserver = 'xxx'\r\npassword = 'xxx'\r\nusername = 'xxx'\r\ncredentials = Credentials(username, password)\r\nconfig = Configuration(credentials=credentials, server=server)\r\naccount = Account(\r\n        primary_smtp_address='xxx',\r\n        credentials=credentials, config=config, autodiscover=False, access_type=DELEGATE)\r\n```\r\n\r\nThe error says, that incorrect credentials provided. But I am able to login with the same credentials via web.\r\n`Traceback (most recent call last):\r\n  File \"src/run.py\", line 18, in main\r\n    main_script.main()\r\n  File \"C:\\Users\\ochuvako\\Desktop\\Robots python\\ihd-001\\src\\robot\\main_script.py\", line 45, in main\r\n    credentials=credentials, config=config, autodiscover=False, access_type=DELEGATE)\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\account.py\", line 97, in __init__\r\n    self.version = self.protocol.version\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\protocol.py\", line 419, in version        \r\n    self.config.version = Version.guess(self, api_version_hint=self._api_version_hint)\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\version.py\", line 226, in guess\r\n    list(ResolveNames(protocol=protocol).call(unresolved_entries=[name]))\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\resolve_names.py\", line 26, in call\r\n    contact_data_shape=contact_data_shape,\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 66, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 131, in _get_response_xml\r\n    stream=self.streaming,\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 742, in post_ratelimited   \r\n    _raise_response_errors(r, protocol, log_msg, log_vals)  # Always raises an exception\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 822, in _raise_response_errors\r\n    raise UnauthorizedError('Wrong username or password for %s' % response.url)\r\nexchangelib.errors.UnauthorizedError: Wrong username or password for https://xxx/EWS/Exchange.asmx\r\nTraceback (most recent call last):\r\n  File \"src/run.py\", line 29, in <module>\r\n    main()\r\n  File \"src/run.py\", line 24, in main\r\n    raise e\r\n  File \"src/run.py\", line 18, in main\r\n    main_script.main()\r\n  File \"C:\\Users\\ochuvako\\Desktop\\Robots python\\ihd-001\\src\\robot\\main_script.py\", line 45, in main\r\n    credentials=credentials, config=config, autodiscover=False, access_type=DELEGATE)\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\account.py\", line 97, in __init__\r\n    self.version = self.protocol.version\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\protocol.py\", line 419, in version        \r\n    self.config.version = Version.guess(self, api_version_hint=self._api_version_hint)\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\version.py\", line 226, in guess\r\n    list(ResolveNames(protocol=protocol).call(unresolved_entries=[name]))\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\resolve_names.py\", line 26, in call\r\n    contact_data_shape=contact_data_shape,\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 66, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 131, in _get_response_xml\r\n    stream=self.streaming,\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 742, in post_ratelimited   \r\n    _raise_response_errors(r, protocol, log_msg, log_vals)  # Always raises an exception\r\n  File \"C:\\Users\\ochuvako\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 822, in _raise_response_errors\r\n    raise UnauthorizedError('Wrong username or password for %s' % response.url)\r\nexchangelib.errors.UnauthorizedError: Wrong username or password for https://xxx/EWS/Exchange.asmx`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/788", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/788/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/788/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/788/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/788", "id": 658208918, "node_id": "MDU6SXNzdWU2NTgyMDg5MTg=", "number": 788, "title": "Use exchangelib for postfix content filter", "user": {"login": "Xplz3d", "id": 63337188, "node_id": "MDQ6VXNlcjYzMzM3MTg4", "avatar_url": "https://avatars2.githubusercontent.com/u/63337188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xplz3d", "html_url": "https://github.com/Xplz3d", "followers_url": "https://api.github.com/users/Xplz3d/followers", "following_url": "https://api.github.com/users/Xplz3d/following{/other_user}", "gists_url": "https://api.github.com/users/Xplz3d/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xplz3d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xplz3d/subscriptions", "organizations_url": "https://api.github.com/users/Xplz3d/orgs", "repos_url": "https://api.github.com/users/Xplz3d/repos", "events_url": "https://api.github.com/users/Xplz3d/events{/privacy}", "received_events_url": "https://api.github.com/users/Xplz3d/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 41, "created_at": "2020-07-16T13:38:52Z", "updated_at": "2020-07-20T06:50:30Z", "closed_at": "2020-07-20T06:50:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks !\r\n\r\nI'm playing with postfix and exchange web services.\r\nThe aim is to automatically add tags to an email based on the message-id value on exchange.\r\nSo i configured a hook in postfix to launch my py script as shown below:\r\n\r\npostfix master.cf:\r\nmyhook unix - n n - 100 pipe  flags=F user=adminuser argv=/gw/pyfilter.py ${sender} ${size} ${recipient}\r\n\r\nThe script is the following:\r\n\r\n`#!/usr/bin/env python3\r\nimport os\r\nimport sys\r\nimport email\r\nimport exchangelib\r\nfrom exchangelib import DELEGATE, Account, Credentials\r\n\r\ncreds = Credentials(\r\n    username='impersonateduser@mydomain.com', \r\n    password='Passw0rd')\r\naccount = Account(\r\n    primary_smtp_address='usermailbox@mydomain.com',\r\n    credentials=creds, \r\n    autodiscover=True, \r\n    access_type=DELEGATE)\r\n\r\n\r\na = sys.stdin.read()\r\nmail = email.message_from_string(a)\r\nmessageId = mail['message-id']\r\n\r\n#NOT WORKING FROM HERE\r\nqs = account.inbox.filter(message_id=messageId)\r\n\r\nfor msg in qs.iterator():\r\n    msg.categories = ['foo', 'bar']\r\n    msg.save()`\r\n\r\n\r\nThis is working well up to #NOT WORKING FROM HERE part.\r\nBut if i start the script by using \"python myscript.py\" and with setting the messageid value manually, this is working.\r\n\r\nI don't understand why when postfix launch it this is not working :(\r\nAny help would be really appreciated :)\r\n\r\nThanks at all !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/786", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/786/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/786/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/786/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/786", "id": 656861929, "node_id": "MDU6SXNzdWU2NTY4NjE5Mjk=", "number": 786, "title": "Credentials get authentication error ", "user": {"login": "Abhi-1504", "id": 37272570, "node_id": "MDQ6VXNlcjM3MjcyNTcw", "avatar_url": "https://avatars1.githubusercontent.com/u/37272570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Abhi-1504", "html_url": "https://github.com/Abhi-1504", "followers_url": "https://api.github.com/users/Abhi-1504/followers", "following_url": "https://api.github.com/users/Abhi-1504/following{/other_user}", "gists_url": "https://api.github.com/users/Abhi-1504/gists{/gist_id}", "starred_url": "https://api.github.com/users/Abhi-1504/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Abhi-1504/subscriptions", "organizations_url": "https://api.github.com/users/Abhi-1504/orgs", "repos_url": "https://api.github.com/users/Abhi-1504/repos", "events_url": "https://api.github.com/users/Abhi-1504/events{/privacy}", "received_events_url": "https://api.github.com/users/Abhi-1504/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-14T19:57:48Z", "updated_at": "2020-07-29T07:49:44Z", "closed_at": "2020-07-29T07:49:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using exchangelib to extract emails from a mailbox hosted on my organisation EWS managed server. It has been working fine till last week but now it throws Authentication error of wrong username or password when executed. \n\nThis error is not consistent as for some runs it's still works and I get the desired output. I am using Configuration object and auth_type to NLTM. Kindly help, let me know if any further information is needed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/785", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/785/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/785/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/785/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/785", "id": 656542655, "node_id": "MDU6SXNzdWU2NTY1NDI2NTU=", "number": 785, "title": "Exchangelib oauth new feature request for user level authentication", "user": {"login": "vprem", "id": 47205895, "node_id": "MDQ6VXNlcjQ3MjA1ODk1", "avatar_url": "https://avatars2.githubusercontent.com/u/47205895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vprem", "html_url": "https://github.com/vprem", "followers_url": "https://api.github.com/users/vprem/followers", "following_url": "https://api.github.com/users/vprem/following{/other_user}", "gists_url": "https://api.github.com/users/vprem/gists{/gist_id}", "starred_url": "https://api.github.com/users/vprem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vprem/subscriptions", "organizations_url": "https://api.github.com/users/vprem/orgs", "repos_url": "https://api.github.com/users/vprem/repos", "events_url": "https://api.github.com/users/vprem/events{/privacy}", "received_events_url": "https://api.github.com/users/vprem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-14T11:32:00Z", "updated_at": "2020-07-15T12:06:40Z", "closed_at": "2020-07-15T12:06:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Exchange lib is not having the support of user level authentication for oauth2.\r\nIt is having app level authentication. App level authentication means that full_access_as_app permission is needed in the azure port during the app registration.\r\n\r\nCan you please support us with user level authentication? I mean on running the client application, it can request for username and password for authentication. Once the user is authorized, app can proceed further.\r\n\r\nThis makes easier because in the azure portal the API permission can be given in the User level instead of full access.\r\nI referred to https://pypi.org/project/O365/. They provide these features. \r\n\r\n On behalf of a user\u00a0(auth_flow_type=='authorization') \r\n On behalf of a user (public)\u00a0(auth_flow_type=='public') \r\n With your own identity\u00a0(auth_flow_type=='credentials')\r\n\r\n\"On behalf of a user\" is the feature that we are requesting?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/784", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/784/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/784/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/784/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/784", "id": 655106315, "node_id": "MDU6SXNzdWU2NTUxMDYzMTU=", "number": 784, "title": "How do i edit the disclaimer in exchangelib", "user": {"login": "diego1379", "id": 14226920, "node_id": "MDQ6VXNlcjE0MjI2OTIw", "avatar_url": "https://avatars1.githubusercontent.com/u/14226920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diego1379", "html_url": "https://github.com/diego1379", "followers_url": "https://api.github.com/users/diego1379/followers", "following_url": "https://api.github.com/users/diego1379/following{/other_user}", "gists_url": "https://api.github.com/users/diego1379/gists{/gist_id}", "starred_url": "https://api.github.com/users/diego1379/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diego1379/subscriptions", "organizations_url": "https://api.github.com/users/diego1379/orgs", "repos_url": "https://api.github.com/users/diego1379/repos", "events_url": "https://api.github.com/users/diego1379/events{/privacy}", "received_events_url": "https://api.github.com/users/diego1379/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-11T01:17:17Z", "updated_at": "2020-07-20T06:26:23Z", "closed_at": "2020-07-11T01:33:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/783", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/783/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/783/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/783/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/783", "id": 653448445, "node_id": "MDU6SXNzdWU2NTM0NDg0NDU=", "number": 783, "title": "Find mailbox database for user account", "user": {"login": "levensailor", "id": 2538218, "node_id": "MDQ6VXNlcjI1MzgyMTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2538218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levensailor", "html_url": "https://github.com/levensailor", "followers_url": "https://api.github.com/users/levensailor/followers", "following_url": "https://api.github.com/users/levensailor/following{/other_user}", "gists_url": "https://api.github.com/users/levensailor/gists{/gist_id}", "starred_url": "https://api.github.com/users/levensailor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levensailor/subscriptions", "organizations_url": "https://api.github.com/users/levensailor/orgs", "repos_url": "https://api.github.com/users/levensailor/repos", "events_url": "https://api.github.com/users/levensailor/events{/privacy}", "received_events_url": "https://api.github.com/users/levensailor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-08T16:50:04Z", "updated_at": "2020-08-11T10:13:30Z", "closed_at": "2020-08-11T10:13:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm able to connect to an account, and the closest thing i've seen to do this is:\r\n\r\naccount.ad_response\r\n\r\nbut the mdb_dn appears to be the legacy dn and does not include the CN of the mailbox database that I need. \r\n\r\nany ideas to what methods I can use in this library to find the distinguished mailbox dn that has a CN=XXX that I need?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/782", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/782/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/782/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/782/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/782", "id": 652245569, "node_id": "MDU6SXNzdWU2NTIyNDU1Njk=", "number": 782, "title": "'tuple' object has no attribute 'tzinfo' when updating a CalendarItem", "user": {"login": "SecretUnicorn", "id": 24612112, "node_id": "MDQ6VXNlcjI0NjEyMTEy", "avatar_url": "https://avatars1.githubusercontent.com/u/24612112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SecretUnicorn", "html_url": "https://github.com/SecretUnicorn", "followers_url": "https://api.github.com/users/SecretUnicorn/followers", "following_url": "https://api.github.com/users/SecretUnicorn/following{/other_user}", "gists_url": "https://api.github.com/users/SecretUnicorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/SecretUnicorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SecretUnicorn/subscriptions", "organizations_url": "https://api.github.com/users/SecretUnicorn/orgs", "repos_url": "https://api.github.com/users/SecretUnicorn/repos", "events_url": "https://api.github.com/users/SecretUnicorn/events{/privacy}", "received_events_url": "https://api.github.com/users/SecretUnicorn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-07T11:28:08Z", "updated_at": "2020-07-07T13:16:46Z", "closed_at": "2020-07-07T13:16:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following error occures when attempting to update an Item.\r\nI procceed like the following.\r\n\r\n1. I create an item and remember the ID that is accessable after the .save()\r\n2. I use that ID to filter the calendar of the user to get the Item\r\n3. I set a new start and endtime\r\n4. I attempt to save the changed item.\r\n\r\nI am not sure what I am doing wrong.\r\n\r\nHere is the code\r\n```\r\ndef update_event(organizer, existing_id, start, end, subject, body, required_attendees, location):\r\n    account = Account(primary_smtp_address=organizer, config=config,\r\n                      autodiscover=False, access_type=IMPERSONATION)\r\n    try:\r\n        item = account.calendar.get(id=existing_id)\r\n\r\n        if item is None:\r\n            return (-1, -1)\r\n        item.start = account.default_timezone.localize(EWSDateTime(\r\n            start.year, start.month, start.day, start.hour, start.minute)),\r\n        item.end = account.default_timezone.localize(EWSDateTime(\r\n            end.year, end.month, end.day, end.hour, end.minute)),\r\n        item.subject = subject\r\n        item.body = body\r\n        item.required_attendees = required_attendees\r\n        item.location = location\r\n        item.save(send_meeting_invitations=SEND_TO_ALL_AND_SAVE_COPY)\r\n```\r\n\r\nHere is the exception\r\n\r\n```\r\nEnvironment:\r\n\r\n\r\nRequest Method: GET\r\nRequest URL: ....\r\n\r\nDjango Version: 2.2.7\r\nPython Version: 3.6.9\r\nInstalled Applications:\r\n['django.contrib.admin',\r\n 'django.contrib.auth',\r\n 'django.contrib.contenttypes',\r\n 'django.contrib.sessions',\r\n 'django.contrib.messages',\r\n 'django.contrib.staticfiles',\r\n 'django_extensions',\r\n 'emailservice',\r\n 'rest',\r\n 'exchange',\r\n 'corsheaders',\r\n 'rest_framework',\r\n 'simple_history',\r\n 'djangosecure',\r\n 'sslserver']\r\nInstalled Middleware:\r\n['corsheaders.middleware.CorsMiddleware',\r\n 'django.middleware.common.CommonMiddleware',\r\n 'django.middleware.security.SecurityMiddleware',\r\n 'django.contrib.sessions.middleware.SessionMiddleware',\r\n 'django.middleware.common.CommonMiddleware',\r\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n 'django.contrib.messages.middleware.MessageMiddleware',\r\n 'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n 'django.contrib.auth.middleware.RemoteUserMiddleware',\r\n 'simple_history.middleware.HistoryRequestMiddleware']\r\n\r\n\r\n\r\nTraceback:\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/django/core/handlers/exception.py\" in inner\r\n  34.             response = get_response(request)\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n  115.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n  113.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"....../rest/endpoints.py\" in sendTerminAtStatus\r\n  2465.         itemid,changekey = update_event(organizer[\"email\"], prev_item_id, dt_start, dt_end, \"UPDATE! \"+summary, update_html, attendees, location)\r\n\r\nFile \"......../exchange/main.py\" in update_event\r\n  117.     item.save(send_meeting_invitations=SEND_ONLY_TO_ALL, update_fields=['start','end'])\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/exchangelib/items/item.py\" in save\r\n  100.                 send_meeting_invitations=send_meeting_invitations\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/exchangelib/util.py\" in wrapper\r\n  39.         return f(self, *args, **kwargs)\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/exchangelib/items/item.py\" in _update\r\n  183.             expect_result=message_disposition != SEND_AND_SAVE_COPY,\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/exchangelib/services/common.py\" in get\r\n  66.         res = list(self.call(**kwargs))\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/exchangelib/services/common.py\" in _pool_requests\r\n  540.             for elem in self._get_elements(payload=payload_func(chunk, **kwargs)):\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/exchangelib/services/update_item.py\" in get_payload\r\n  192.             for elem in self._get_item_update_elems(item=item, fieldnames=fieldnames):\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/exchangelib/services/update_item.py\" in _get_item_update_elems\r\n  80.             item.clean_timezone_fields(version=self.account.version)  # Possibly also sets timezone values\r\n\r\nFile \"/opt/django/env/lib/python3.6/site-packages/exchangelib/items/calendar_item.py\" in clean_timezone_fields\r\n  161.             start_tz = self.start.tzinfo\r\n\r\nException Type: AttributeError at /rest/MAIL/send/18606\r\nException Value: 'tuple' object has no attribute 'tzinfo'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/781", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/781/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/781/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/781/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/781", "id": 652103704, "node_id": "MDU6SXNzdWU2NTIxMDM3MDQ=", "number": 781, "title": "Reopening - UnauthorizedError when using OAuth to connect to outlook.office365.com #773", "user": {"login": "vprem", "id": 47205895, "node_id": "MDQ6VXNlcjQ3MjA1ODk1", "avatar_url": "https://avatars2.githubusercontent.com/u/47205895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vprem", "html_url": "https://github.com/vprem", "followers_url": "https://api.github.com/users/vprem/followers", "following_url": "https://api.github.com/users/vprem/following{/other_user}", "gists_url": "https://api.github.com/users/vprem/gists{/gist_id}", "starred_url": "https://api.github.com/users/vprem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vprem/subscriptions", "organizations_url": "https://api.github.com/users/vprem/orgs", "repos_url": "https://api.github.com/users/vprem/repos", "events_url": "https://api.github.com/users/vprem/events{/privacy}", "received_events_url": "https://api.github.com/users/vprem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-07-07T08:10:20Z", "updated_at": "2020-07-23T07:45:50Z", "closed_at": "2020-07-23T07:45:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "full_access_as_app is opening up the full access to all mailboxes. IT team is not giving this permission for us.\r\nis there a way to access a mail box alone?\r\nOur application only needed this. \r\n\r\nIT team is will to give full_access permission to one or few mail boxes alone but not to all mail boxes.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/780", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/780/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/780/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/780/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/780", "id": 649042098, "node_id": "MDU6SXNzdWU2NDkwNDIwOTg=", "number": 780, "title": "Problems moving emails from one mailbox to another (and to different (sub)folders within)", "user": {"login": "wanaryytel", "id": 13919593, "node_id": "MDQ6VXNlcjEzOTE5NTkz", "avatar_url": "https://avatars3.githubusercontent.com/u/13919593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanaryytel", "html_url": "https://github.com/wanaryytel", "followers_url": "https://api.github.com/users/wanaryytel/followers", "following_url": "https://api.github.com/users/wanaryytel/following{/other_user}", "gists_url": "https://api.github.com/users/wanaryytel/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanaryytel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanaryytel/subscriptions", "organizations_url": "https://api.github.com/users/wanaryytel/orgs", "repos_url": "https://api.github.com/users/wanaryytel/repos", "events_url": "https://api.github.com/users/wanaryytel/events{/privacy}", "received_events_url": "https://api.github.com/users/wanaryytel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-01T14:46:25Z", "updated_at": "2020-07-09T10:43:14Z", "closed_at": "2020-07-09T10:43:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been wondering for a while whether exchangelib supports moving emails from one mailbox to another, so something like this: \r\n\r\n```python3\r\naccount1 = Account('test1@test.com', ...)\r\naccount2 = Account('test2@test.com', ...)\r\n\r\naccount1.inbox.all()[0].move(account2.inbox)\r\n```\r\n\r\nFrom this issue https://github.com/ecederstrand/exchangelib/issues/414 I kind of get the feeling that this is supported but I can't find anything in the docs. Is it supported or not?  \r\n\r\nAnyways, assuming for a moment that it is [supposed to be] supported, I'm running into all kinds of trouble when attempting this. Couple of things I've tried in semi-pseudocode:\r\n\r\n```python3\r\naccount1 = Account('test1@test.com', ...)\r\naccount2 = Account('test2@test.com', ...)\r\n\r\naccount1.inbox.all()[0].move(account2.inbox)\r\n\r\n>>> ErrorItemNotFound: The specified object was not found in the store., The process failed to get the correct properties.\r\n\r\n# From this issue this seems to be a permissions issue https://github.com/ecederstrand/exchangelib/issues/548\r\n# What about a random subfolder?\r\n\r\naccount2.inbox // 'Subfolder'\r\n>>> Folder(...)  \r\n# It exists, cool\r\n\r\naccount2.inbox // 'Non-existent subfolder'\r\n>>> ErrorFolderNotFound: No subfolder with name 'Non-existent subfolder'\r\n# Makes sense\r\n\r\naccount1.inbox.all()[0].move(account2.inbox // 'Subfolder')\r\n>>> ErrorToFolderNotFound: The specified target folder could not be found.\r\n# :(\r\n\r\n# So, what if we try to move to a folder that really doesn't exist?\r\naccount1.inbox.all()[0].move(account2.inbox // 'Non-existent subfolder')\r\n>>> ErrorFolderNotFound: No subfolder with name 'Non-existent subfolder'\r\n# Hmm, so in fact exchangelib does tell some kind of a difference between a real and a non-existing folder,\r\n# but tells me that neither exist. What's the deal?\r\n```\r\n\r\nI tried to poke around a bit more but with no success and the results shown here seemed weird enough to come asking for help. Am I missing something? Maybe all of this is related to not having enough permissions? Is there a way I could test it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/778", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/778/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/778/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/778/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/778", "id": 648041724, "node_id": "MDU6SXNzdWU2NDgwNDE3MjQ=", "number": 778, "title": ".filter('from:\"Example\"'): gives wrong results", "user": {"login": "iconberg", "id": 8441455, "node_id": "MDQ6VXNlcjg0NDE0NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/8441455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iconberg", "html_url": "https://github.com/iconberg", "followers_url": "https://api.github.com/users/iconberg/followers", "following_url": "https://api.github.com/users/iconberg/following{/other_user}", "gists_url": "https://api.github.com/users/iconberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/iconberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iconberg/subscriptions", "organizations_url": "https://api.github.com/users/iconberg/orgs", "repos_url": "https://api.github.com/users/iconberg/repos", "events_url": "https://api.github.com/users/iconberg/events{/privacy}", "received_events_url": "https://api.github.com/users/iconberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-30T09:59:04Z", "updated_at": "2020-06-30T14:23:58Z", "closed_at": "2020-06-30T11:41:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\ni have following code:\r\n\r\n```\r\n    orders_test = account.inbox / 'Orders_test'\r\n    for item in orders_test.filter('from:\"Orders test\"'):\r\n    #for item in orders_test.all():\r\n        print(item.sender,\r\n              item.subject,\r\n              item.datetime_sent,\r\n              )\r\n```\r\nThere are 3 mails in the folder, all sent from the same device with the same account at different times.\r\nWith .filter i got 2 mail back, with .all i got 3 mails back.\r\n\r\n.filter result:\r\n```\r\nMailbox(name='Orders test', email_address='orderstest@xyz.com', routing_type='SMTP', mailbox_type='OneOff') Bestellung: ghjh 2020-06-25 09:04:00+00:00\r\nMailbox(name='Orders test', email_address='orderstest@xyz.com', routing_type='SMTP', mailbox_type='OneOff') Bestellung: test 2020-06-24 09:34:11+00:00\r\n```\r\n\r\n.all result:\r\n```\r\nMailbox(name='Orders test', email_address='orderstest@xyz.com', routing_type='SMTP', mailbox_type='OneOff') Bestellung: gshfg 2020-06-29 09:32:10+00:00\r\nMailbox(name='Orders test', email_address='orderstest@xyz.com', routing_type='SMTP', mailbox_type='OneOff') Bestellung: ghjh 2020-06-25 09:04:00+00:00\r\nMailbox(name='Orders test', email_address='orderstest@xyz.com', routing_type='SMTP', mailbox_type='OneOff') Bestellung: test 2020-06-24 09:34:11+00:00\r\n```\r\n\r\nIs this a bug, or doing i something wrong?\r\n\r\n\r\nVersions:\r\n```\r\nName                : EX2016\r\nEdition             : Standard\r\nAdminDisplayVersion : Version 15.1 (Build 1913.5)\r\n```\r\n\r\n`exchangelib 3.2.0, python 3.7`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/777", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/777/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/777/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/777/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/777", "id": 648020135, "node_id": "MDU6SXNzdWU2NDgwMjAxMzU=", "number": 777, "title": "WorkingElsewhere not shown in merged FreeBusyView result", "user": {"login": "hatl", "id": 70505, "node_id": "MDQ6VXNlcjcwNTA1", "avatar_url": "https://avatars0.githubusercontent.com/u/70505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hatl", "html_url": "https://github.com/hatl", "followers_url": "https://api.github.com/users/hatl/followers", "following_url": "https://api.github.com/users/hatl/following{/other_user}", "gists_url": "https://api.github.com/users/hatl/gists{/gist_id}", "starred_url": "https://api.github.com/users/hatl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hatl/subscriptions", "organizations_url": "https://api.github.com/users/hatl/orgs", "repos_url": "https://api.github.com/users/hatl/repos", "events_url": "https://api.github.com/users/hatl/events{/privacy}", "received_events_url": "https://api.github.com/users/hatl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-30T09:28:45Z", "updated_at": "2020-07-20T11:45:36Z", "closed_at": "2020-07-20T11:45:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI've added a calendar entry from 09:00 to 16:00 with the busy type \"Working Elsewhere\".\r\nWhen querying by using\r\n\r\n`account.protocol.get_free_busy_info(accounts=accounts, start=start, end=end, requested_view='DetailedMerged')`\r\n\r\nI get the following result:\r\n\r\n```\r\nFreeBusyView(\r\nview_type='DetailedMerged',\r\nmerged='000000000000000000000000000000000000000000000000',\r\ncalendar_events=[CalendarEvent(start=EWSDateTime(2020, 7, 5, 7, 0), end=EWSDateTime(2020, 7, 5, 14, 0), busy_type='WorkingElsewhere', details=CalendarEventDetails(id='...', subject='tw', location=None, is_meeting=False, is_recurring=False, is_exception=False, is_reminder_set=True, is_private=False))], working_hours=[WorkingPeriod(weekdays=[1, 2, 3, 4, 5], start=datetime.time(8, 0), end=datetime.time(17, 0))], working_hours_timezone=TimeZone(bias=-60, standard_time=StandardTime(bias=0, time=datetime.time(3, 0), occurrence=5, iso_month=10, weekday='Sunday'), daylight_time=DaylightTime(bias=-60, time=datetime.time(2, 0), occurrence=5, iso_month=3, weekday='Sunday')))\r\n```\r\n\r\n**Expected**: the \"merged\" field should show \"5555...\"  for the time period of the \"Working Elsewhere\" entry", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/775", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/775/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/775/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/775", "id": 647355145, "node_id": "MDU6SXNzdWU2NDczNTUxNDU=", "number": 775, "title": "Use kerberos ticket in django to send meeting", "user": {"login": "SecretUnicorn", "id": 24612112, "node_id": "MDQ6VXNlcjI0NjEyMTEy", "avatar_url": "https://avatars1.githubusercontent.com/u/24612112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SecretUnicorn", "html_url": "https://github.com/SecretUnicorn", "followers_url": "https://api.github.com/users/SecretUnicorn/followers", "following_url": "https://api.github.com/users/SecretUnicorn/following{/other_user}", "gists_url": "https://api.github.com/users/SecretUnicorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/SecretUnicorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SecretUnicorn/subscriptions", "organizations_url": "https://api.github.com/users/SecretUnicorn/orgs", "repos_url": "https://api.github.com/users/SecretUnicorn/repos", "events_url": "https://api.github.com/users/SecretUnicorn/events{/privacy}", "received_events_url": "https://api.github.com/users/SecretUnicorn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-29T12:59:19Z", "updated_at": "2020-06-30T13:54:13Z", "closed_at": "2020-06-30T13:54:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear fellow coders,\r\n\r\nI want to send a meeting in the name of the currently logged in User. The authentication over an apache server works flawlessly with django. I am not sure though, how to integrate the automatic SSO authentication into the connection to the exchange server to send/save the meeting.\r\n\r\nThis is the apache config\r\n\r\n```\r\nAuthType Kerberos\r\nAuthName \"Kerberos authenticated intranet\"\r\nKrbAuthRealms  MY.DOMAIN.TLD\r\nKrbServiceName HTTP/servername.my.domain.tld\r\nKrb5Keytab /etc/krb5.keytab\r\nKrbMethodNegotiate On\r\nKrbMethodK5Passwd On\r\nKrbLocalUserMapping On\r\nrequire valid-user\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/774", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/774/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/774/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/774/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/774", "id": 646244651, "node_id": "MDU6SXNzdWU2NDYyNDQ2NTE=", "number": 774, "title": "ContentDecodingError and ErrorTimeoutExpired", "user": {"login": "chhitesh", "id": 1534992, "node_id": "MDQ6VXNlcjE1MzQ5OTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1534992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chhitesh", "html_url": "https://github.com/chhitesh", "followers_url": "https://api.github.com/users/chhitesh/followers", "following_url": "https://api.github.com/users/chhitesh/following{/other_user}", "gists_url": "https://api.github.com/users/chhitesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/chhitesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chhitesh/subscriptions", "organizations_url": "https://api.github.com/users/chhitesh/orgs", "repos_url": "https://api.github.com/users/chhitesh/repos", "events_url": "https://api.github.com/users/chhitesh/events{/privacy}", "received_events_url": "https://api.github.com/users/chhitesh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-26T12:56:51Z", "updated_at": "2020-06-30T11:03:00Z", "closed_at": "2020-06-30T11:03:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "The script was working fine everyday until today. First it gave me ContentDecodingError (more details below) and upon executing again it gave ErrorTimeoutExpired. Could I please get some guidance with this issue?\r\n\r\n** ContentDecodingError**\r\n```\r\nContentDecodingError: ('Received response with content-encoding: gzip, but failed to decode it.', error('Error -3 while decompressing data: incorrect\r\n```\r\n\r\n** ErrorTimeoutExpired**\r\n```\r\nErrorTimeoutExpired                       Traceback (most recent call last)\r\n<ipython-input-17-6e11f69f60e4> in <module>\r\n     11     print(folder_name)\r\n     12 \r\n---> 13     dfMessages_subfolder = get_emails_subfolder(emails, folder_name)\r\n     14     dfMessages_InboxSubFolders = dfMessages_InboxSubFolders.append(dfMessages_subfolder)\r\n     15 \r\n\r\n<ipython-input-16-b36c4da384cf> in get_emails_subfolder(sub_folder, folder_name)\r\n     33     i = 0\r\n     34     message_list = []\r\n---> 35     for email in sub_folder.all():\r\n     36         for _ in range(3):\r\n     37             try:\r\n\r\n~\\Anaconda3\\lib\\site-packages\\exchangelib\\queryset.py in __iter__(self)\r\n    284         log.debug('Initializing cache')\r\n    285         _cache = []\r\n--> 286         for val in self._format_items(items=self._query(), return_format=self.return_format):\r\n    287             _cache.append(val)\r\n    288             yield val\r\n\r\n~\\Anaconda3\\lib\\site-packages\\exchangelib\\queryset.py in _item_yielder(self, iterable, item_func, id_only_func, changekey_only_func, id_and_changekey_func)\r\n    369                 yield transform_func(*i)\r\n    370             return\r\n--> 371         for i in iterable:\r\n    372             if isinstance(i, Exception):\r\n    373                 yield i\r\n\r\n~\\Anaconda3\\lib\\site-packages\\exchangelib\\account.py in fetch(self, ids, folder, only_fields, chunk_size)\r\n    567         for i in self._consume_item_service(service_cls=GetItem, items=ids, chunk_size=chunk_size, kwargs=dict(\r\n    568                 additional_fields=additional_fields,\r\n--> 569                 shape=ID_ONLY,\r\n    570         )):\r\n    571             if isinstance(i, Exception):\r\n\r\n~\\Anaconda3\\lib\\site-packages\\exchangelib\\account.py in _consume_item_service(self, service_cls, items, chunk_size, kwargs)\r\n    335             return\r\n    336         kwargs['items'] = items\r\n--> 337         for i in service_cls(account=self, chunk_size=chunk_size).call(**kwargs):\r\n    338             yield i\r\n    339 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\exchangelib\\services\\common.py in _pool_requests(self, payload_func, items, **kwargs)\r\n    538         for i, chunk in enumerate(chunkify(items, self.chunk_size), start=1):\r\n    539             log.debug('Processing %s chunk %s containing %s items', self.__class__.__name__, i, len(chunk))\r\n--> 540             for elem in self._get_elements(payload=payload_func(chunk, **kwargs)):\r\n    541                 yield elem\r\n    542 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\exchangelib\\services\\common.py in _get_elements_in_response(self, response)\r\n    401     def _get_elements_in_response(self, response):\r\n    402         for msg in response:\r\n--> 403             container_or_exc = self._get_element_container(message=msg, name=self.element_container_name)\r\n    404             if isinstance(container_or_exc, (bool, Exception)):\r\n    405                 yield container_or_exc\r\n\r\n~\\Anaconda3\\lib\\site-packages\\exchangelib\\services\\common.py in _get_element_container(self, message, response_message, name)\r\n    360         # rspclass == 'Error', or 'Success' and not 'NoError'\r\n    361         try:\r\n--> 362             raise self._get_exception(code=response_code, text=msg_text, msg_xml=msg_xml)\r\n    363         except self.ERRORS_TO_CATCH_IN_RESPONSE as e:\r\n    364             return e\r\n\r\nErrorTimeoutExpired: The request timed out.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/773", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/773/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/773/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/773/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/773", "id": 644399437, "node_id": "MDU6SXNzdWU2NDQzOTk0Mzc=", "number": 773, "title": "UnauthorizedError when using OAuth to connect to outlook.office365.com", "user": {"login": "vprem", "id": 47205895, "node_id": "MDQ6VXNlcjQ3MjA1ODk1", "avatar_url": "https://avatars2.githubusercontent.com/u/47205895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vprem", "html_url": "https://github.com/vprem", "followers_url": "https://api.github.com/users/vprem/followers", "following_url": "https://api.github.com/users/vprem/following{/other_user}", "gists_url": "https://api.github.com/users/vprem/gists{/gist_id}", "starred_url": "https://api.github.com/users/vprem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vprem/subscriptions", "organizations_url": "https://api.github.com/users/vprem/orgs", "repos_url": "https://api.github.com/users/vprem/repos", "events_url": "https://api.github.com/users/vprem/events{/privacy}", "received_events_url": "https://api.github.com/users/vprem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-24T07:50:35Z", "updated_at": "2020-07-02T15:44:22Z", "closed_at": "2020-06-30T11:03:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\ncreds = OAuth2Credentials(client_id=CLIENT_ID, client_secret=CLIENT_SECRET, \\\r\n                    tenant_id=TENANT_ID, identity=Identity(primary_smtp_address='X@Y.com'))\r\ncfg = Configuration(server='outlook.office365.com', credentials=creds, auth_type=OAUTH2)\r\n\r\n#FIXME Following line attempts to create a session with EWS. Currently failing\r\naccount = Account(primary_smtp_address='X@Y.com', config=cfg, autodiscover=False, access_type=DELEGATE)\r\n\r\n# Following code would demonstrate account access\r\n# succeeded.\r\nprint('There are {} messages in the inbox.'.format(account.inbox.all().count()))\r\n```\r\n\r\n\r\nwith the above code snippet, we are trying to access the inbox. But it failing with \r\n\r\n```\r\n File \"account.py\", line 33, in <module>\r\n    account = Account(primary_smtp_address='X@Y.com', config=cfg, autodiscover=False, access_type=DELEGATE)\r\n  File \"/home/test/.local/lib/python3.5/site-packages/exchangelib/account.py\", line 125, in __init__\r\n    self.version = self.protocol.version\r\n  File \"/home/test/.local/lib/python3.5/site-packages/exchangelib/protocol.py\", line 420, in version\r\n    self.config.version = Version.guess(self, api_version_hint=self._api_version_hint)\r\n  File \"/home/test/.local/lib/python3.5/site-packages/exchangelib/version.py\", line 226, in guess\r\n    list(ResolveNames(protocol=protocol).call(unresolved_entries=[name]))\r\n  File \"/home/test/.local/lib/python3.5/site-packages/exchangelib/services/resolve_names.py\", line 32, in call\r\n    contact_data_shape=contact_data_shape,\r\n  File \"/home/test/.local/lib/python3.5/site-packages/exchangelib/services/common.py\", line 84, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"/home/test/.local/lib/python3.5/site-packages/exchangelib/services/common.py\", line 162, in _get_response_xml\r\n    stream=self.streaming,\r\n  File \"/home/test/.local/lib/python3.5/site-packages/exchangelib/util.py\", line 770, in post_ratelimited\r\n    _raise_response_errors(r, protocol, log_msg, log_vals)  # Always raises an exception\r\n  File \"/home/test/.local/lib/python3.5/site-packages/exchangelib/util.py\", line 847, in _raise_response_errors\r\n    raise UnauthorizedError('Invalid credentials for %s' % response.url)\r\nexchangelib.errors.UnauthorizedError: Invalid credentials for https://outlook.office365.com/EWS/Exchange.asmx\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Closing sessions\r\n```\r\n\r\nAny inputs will help us", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/772", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/772/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/772/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/772/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/772", "id": 643682939, "node_id": "MDU6SXNzdWU2NDM2ODI5Mzk=", "number": 772, "title": "How to send mail to stored contact group ", "user": {"login": "sebastianwindeck", "id": 28544726, "node_id": "MDQ6VXNlcjI4NTQ0NzI2", "avatar_url": "https://avatars1.githubusercontent.com/u/28544726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebastianwindeck", "html_url": "https://github.com/sebastianwindeck", "followers_url": "https://api.github.com/users/sebastianwindeck/followers", "following_url": "https://api.github.com/users/sebastianwindeck/following{/other_user}", "gists_url": "https://api.github.com/users/sebastianwindeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebastianwindeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebastianwindeck/subscriptions", "organizations_url": "https://api.github.com/users/sebastianwindeck/orgs", "repos_url": "https://api.github.com/users/sebastianwindeck/repos", "events_url": "https://api.github.com/users/sebastianwindeck/events{/privacy}", "received_events_url": "https://api.github.com/users/sebastianwindeck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-23T09:31:24Z", "updated_at": "2020-06-28T09:06:26Z", "closed_at": "2020-06-28T09:06:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was checking the README and stackoverflow but could find a clue, I am still testing and trying. Maybe somebody could give me a hint. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/771", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/771/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/771/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/771/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/771", "id": 641857692, "node_id": "MDU6SXNzdWU2NDE4NTc2OTI=", "number": 771, "title": "Language in mail forwarding", "user": {"login": "SchupsCH", "id": 35555794, "node_id": "MDQ6VXNlcjM1NTU1Nzk0", "avatar_url": "https://avatars3.githubusercontent.com/u/35555794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SchupsCH", "html_url": "https://github.com/SchupsCH", "followers_url": "https://api.github.com/users/SchupsCH/followers", "following_url": "https://api.github.com/users/SchupsCH/following{/other_user}", "gists_url": "https://api.github.com/users/SchupsCH/gists{/gist_id}", "starred_url": "https://api.github.com/users/SchupsCH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SchupsCH/subscriptions", "organizations_url": "https://api.github.com/users/SchupsCH/orgs", "repos_url": "https://api.github.com/users/SchupsCH/repos", "events_url": "https://api.github.com/users/SchupsCH/events{/privacy}", "received_events_url": "https://api.github.com/users/SchupsCH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-19T10:07:14Z", "updated_at": "2020-06-19T13:50:30Z", "closed_at": "2020-06-19T13:49:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good day, and congrats for this amazing library!\r\n\r\nI wrote a script that does conditional forwarding of emails.\r\n\r\nWhen I forward an email, the date is \"rendered\" to German (probably Exchange default, out of my control), rather than English (my users desire).\r\n\r\n**This is how I create my Account object**\r\n```\r\nconfig = Configuration(server='mail.domain.com', credentials=credentials)\r\n\r\naccount = Account('sdtest@domain.com', \r\nconfig=config, \r\nautodiscover=False, \r\naccess_type=DELEGATE, \r\nlocale='en_US.UTF-8')\r\n```\r\n\r\n***This is how the forwarded email gets \"rendered\":***\r\n```\r\nThis email was originally received from 'schups@domain.com'\r\n________________________________________\r\nFrom: Stefano\r\nSent: Freitag, 19. Juni 2020 11:52:30\r\nTo: final-email@domain.com\r\nSubject: Another locale test`\r\n\r\nThis is a test\r\n```\r\n\r\n`Freitag, 19. Juni 2020 11:52:30` was expected to be `19 June 2020 11:52 AM`, like it is the case when I manually forward emails from the web interface (OWA).\r\n\r\nThrough OWA I confirm my language to be set to English.\r\n\r\nWhat am I doing wrong/what am I missing? \r\n\r\nThank you for any hint!!\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/770", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/770/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/770/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/770", "id": 641844609, "node_id": "MDU6SXNzdWU2NDE4NDQ2MDk=", "number": 770, "title": "Unexpected result of __in filter with an empty iterable", "user": {"login": "wanaryytel", "id": 13919593, "node_id": "MDQ6VXNlcjEzOTE5NTkz", "avatar_url": "https://avatars3.githubusercontent.com/u/13919593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanaryytel", "html_url": "https://github.com/wanaryytel", "followers_url": "https://api.github.com/users/wanaryytel/followers", "following_url": "https://api.github.com/users/wanaryytel/following{/other_user}", "gists_url": "https://api.github.com/users/wanaryytel/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanaryytel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanaryytel/subscriptions", "organizations_url": "https://api.github.com/users/wanaryytel/orgs", "repos_url": "https://api.github.com/users/wanaryytel/repos", "events_url": "https://api.github.com/users/wanaryytel/events{/privacy}", "received_events_url": "https://api.github.com/users/wanaryytel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 337732381, "node_id": "MDU6TGFiZWwzMzc3MzIzODE=", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-19T09:44:44Z", "updated_at": "2020-07-01T14:00:02Z", "closed_at": "2020-06-30T11:10:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Whenever querying emails from an inbox, the `__in` filter only seems to be working when the iterable is not empty. Here's an example:\r\n\r\n```python\r\naccount.inbox.filter(message_id__in=[]).count()\r\n>>> 4\r\naccount.inbox.filter(message_id__in=['']).count()\r\n>>> 0\r\n```\r\n\r\nI think both of those should return 0, but the first one fails to do that.\r\n\r\nThanks for the nice work on the library!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/769", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/769/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/769/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/769", "id": 639678690, "node_id": "MDU6SXNzdWU2Mzk2Nzg2OTA=", "number": 769, "title": "How to propose meeting time correctly?", "user": {"login": "denisovkv", "id": 53142530, "node_id": "MDQ6VXNlcjUzMTQyNTMw", "avatar_url": "https://avatars3.githubusercontent.com/u/53142530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisovkv", "html_url": "https://github.com/denisovkv", "followers_url": "https://api.github.com/users/denisovkv/followers", "following_url": "https://api.github.com/users/denisovkv/following{/other_user}", "gists_url": "https://api.github.com/users/denisovkv/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisovkv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisovkv/subscriptions", "organizations_url": "https://api.github.com/users/denisovkv/orgs", "repos_url": "https://api.github.com/users/denisovkv/repos", "events_url": "https://api.github.com/users/denisovkv/events{/privacy}", "received_events_url": "https://api.github.com/users/denisovkv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-16T13:45:30Z", "updated_at": "2020-06-27T09:22:19Z", "closed_at": "2020-06-27T09:22:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I want to be able to propose meeting time. So I perform something like:\r\n\r\n```python\r\nevent = account.calendar.get(id=event_id)\r\nevent.decline(\r\n    proposed_start=start,\r\n    proposed_end=end\r\n)\r\n```\r\n\r\nfrom attendee account.\r\n\r\nThen I find this message with time proposition in organizer mailbox. It is an instance of MeetingResponse. This object has `associated_calendar_item_id` field with `AssociatedCalendarItemId` instance in it.\r\n\r\nI tried to find this message by this field to get `changekey` of event in hope this event has proposed time so i could update old event\r\n```python\r\nitems = account.inbox.all().filter(associated_calendar_item_id=AssociatedCalendarItemId(id=event.id))\r\n```\r\n\r\nBut got an error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/opt/project/backend/api/content/views.py\", line 180, in propose_time\r\n    for item in items:\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/queryset.py\", line 286, in __iter__\r\n    for val in self._format_items(items=self._query(), return_format=self.return_format):\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/queryset.py\", line 363, in _item_yielder\r\n    for i in iterable:\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/account.py\", line 597, in fetch\r\n    shape=ID_ONLY,\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/account.py\", line 301, in _consume_item_service\r\n    is_empty, items = peek(items)\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/util.py\", line 115, in peek\r\n    first = next(iterable)\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/folders/collections.py\", line 190, in find_items\r\n    for i in items:\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/services/common.py\", line 424, in _paged_call\r\n    payload = payload_func(**kwargs)\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/services/find_item.py\", line 62, in get_payload\r\n    finditem.append(restriction.to_xml(version=self.account.version))\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/restriction.py\", line 516, in to_xml\r\n    return self.q.to_xml(folders=self.folders, version=version, applies_to=self.applies_to)\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/restriction.py\", line 307, in to_xml\r\n    elem = self.xml_elem(folders=folders, version=version, applies_to=applies_to)\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/restriction.py\", line 407, in xml_elem\r\n    constant.set('Value', value_to_xml_text(clean_value))\r\n  File \"/home/python/.local/lib/python3.7/site-packages/exchangelib/util.py\", line 171, in value_to_xml_text\r\n    raise NotImplementedError('Unsupported type: %s (%s)' % (type(value), value))\r\nNotImplementedError: Unsupported type: <class 'exchangelib.properties.AssociatedCalendarItemId'> (AssociatedCalendarItemId(id='AAMkADg2YmM3ODM2LTM3MTMtNGVjMC05MDA0LTQ3NDU4NTFjZGNlMgBGAAAAAAAosqJKvdcXSpP/q+vqbwR7BwAzIQyfAI5ESbdg/ESrxKSSAAAAAAENAAAzIQyfAI5ESbdg/ESrxKSSAAA74NHwAAA='))\r\n```\r\n\r\nI guess i can't filter inbox items by `associated_calendar_item_id` field. But may be it isn't necessary.\r\n\r\nPlease, could you explain, if it possible to send new invitation with proposed time? And what is the right way to do this if so?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/767", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/767/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/767/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/767/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/767", "id": 636464552, "node_id": "MDU6SXNzdWU2MzY0NjQ1NTI=", "number": 767, "title": "Perform query with .only() in the middle of iterating through a QuerySet?", "user": {"login": "analogdash", "id": 16400857, "node_id": "MDQ6VXNlcjE2NDAwODU3", "avatar_url": "https://avatars2.githubusercontent.com/u/16400857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/analogdash", "html_url": "https://github.com/analogdash", "followers_url": "https://api.github.com/users/analogdash/followers", "following_url": "https://api.github.com/users/analogdash/following{/other_user}", "gists_url": "https://api.github.com/users/analogdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/analogdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/analogdash/subscriptions", "organizations_url": "https://api.github.com/users/analogdash/orgs", "repos_url": "https://api.github.com/users/analogdash/repos", "events_url": "https://api.github.com/users/analogdash/events{/privacy}", "received_events_url": "https://api.github.com/users/analogdash/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-10T18:38:54Z", "updated_at": "2020-06-30T11:10:54Z", "closed_at": "2020-06-30T11:10:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I'm trying to scrape thousands of emails and on a particular email, I would get an `ErrorMimeContentConversionFailed`\r\n\r\nFrom another issue, I found that a workaround is to use the `.only()` modifier to not download the `mime_content` and not raise this error. However, this is an edge case and I'd like to only invoke `.only()` when encountering that error and not for the whole QuerySet since I actually need the `mime_content`. Something like\r\n\r\n```\r\nfor email_message in account.inbox().all():\r\n\r\n    if hasattr(email_message, 'value'):\r\n        if email_message.value == 'MIME content conversion failed.':\r\n            # re-query this email_message with .only()\r\n\r\n    # processing and loading to DB\r\n```\r\n \r\nI've thought about breaking this down into multiple passes where I only get the `id` on the first pass then I iterate over my saved ids with `.get(id=saved_id)` for better control on the second pass but `.get()` doesn't seem to support `.only()` so I still get the `ErrorMimeContentConversionFailed` because it's trying to get the whole Message. I also can't use `.filter(id__exact=saved_id)` because EWS doesn't support filtering through `id`.\r\n\r\nAlso, maybe we can get a `.defer()` method so we can exclude only the `mime_content` for this error?\r\n\r\nHope you can help and thanks for this package.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/766", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/766/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/766/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/766/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/766", "id": 636138301, "node_id": "MDU6SXNzdWU2MzYxMzgzMDE=", "number": 766, "title": "Code gets stuck at Account object creation", "user": {"login": "Abhi-1504", "id": 37272570, "node_id": "MDQ6VXNlcjM3MjcyNTcw", "avatar_url": "https://avatars1.githubusercontent.com/u/37272570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Abhi-1504", "html_url": "https://github.com/Abhi-1504", "followers_url": "https://api.github.com/users/Abhi-1504/followers", "following_url": "https://api.github.com/users/Abhi-1504/following{/other_user}", "gists_url": "https://api.github.com/users/Abhi-1504/gists{/gist_id}", "starred_url": "https://api.github.com/users/Abhi-1504/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Abhi-1504/subscriptions", "organizations_url": "https://api.github.com/users/Abhi-1504/orgs", "repos_url": "https://api.github.com/users/Abhi-1504/repos", "events_url": "https://api.github.com/users/Abhi-1504/events{/privacy}", "received_events_url": "https://api.github.com/users/Abhi-1504/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-10T10:37:30Z", "updated_at": "2020-06-15T08:16:01Z", "closed_at": "2020-06-15T08:16:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to access mails from mailbox hosted on EWS server using the module. It's managed by my organisation.\r\n\r\nIt was woking fine 1-2 weeks back but now it gets stuck at **Account object creation while trying to make a connection and retrieve the information**. I believe this to be the issue of something blocking the connection and not with the code, need better insights. \r\n\r\nBelow is the stack I get when I send a keyboard interrupt. Let me know if any further information is needed.\r\n\r\n`Traceback (most recent call last):\r\n  File \"Test_Mail.py\", line 43, in <module>\r\n    account = Account(primary_smtp_address='xxx@xxx.com', config=config, credentials=credentials, autodiscover=True, access_type=DELEGATE)\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/account.py\", line 86, in __init__\r\n    email=primary_smtp_address, credentials=credentials, auth_type=auth_type, retry_policy=retry_policy\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/autodiscover/discovery.py\", line 24, in discover\r\n    email=email, credentials=credentials, auth_type=auth_type, retry_policy=retry_policy\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/autodiscover/discovery.py\", line 99, in discover\r\n    ad_response = self._step_1(hostname=domain)\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/autodiscover/discovery.py\", line 329, in _step_1\r\n    is_valid_response, ad = self._attempt_response(url=url)\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/autodiscover/discovery.py\", line 288, in _attempt_response\r\n    auth_type, r = self._get_unauthenticated_response(url=url)\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/exchangelib/autodiscover/discovery.py\", line 230, in _get_unauthenticated_response\r\n    r = getattr(s, method)(**kwargs)\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/requests/sessions.py\", line 578, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/requests/sessions.py\", line 530, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/requests/sessions.py\", line 643, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/requests/adapters.py\", line 449, in send\r\n    timeout=timeout\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 672, in urlopen\r\n    chunked=chunked,\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 376, in _make_request\r\n    self._validate_conn(conn)\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/urllib3/connectionpool.py\", line 994, in _validate_conn\r\n    conn.connect()\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/urllib3/connection.py\", line 300, in connect\r\n    conn = self._new_conn()\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/urllib3/connection.py\", line 157, in _new_conn\r\n    (self._dns_host, self.port), self.timeout, **extra_kw\r\n  File \"/home/appuser/anaconda3/lib/python3.7/site-packages/urllib3/util/connection.py\", line 74, in create_connection\r\n    sock.connect(sa)\r\nKeyboardInterrupt`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/765", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/765/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/765/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/765/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/765", "id": 635734354, "node_id": "MDU6SXNzdWU2MzU3MzQzNTQ=", "number": 765, "title": "Soap Services EWS ", "user": {"login": "manish59", "id": 15991796, "node_id": "MDQ6VXNlcjE1OTkxNzk2", "avatar_url": "https://avatars0.githubusercontent.com/u/15991796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manish59", "html_url": "https://github.com/manish59", "followers_url": "https://api.github.com/users/manish59/followers", "following_url": "https://api.github.com/users/manish59/following{/other_user}", "gists_url": "https://api.github.com/users/manish59/gists{/gist_id}", "starred_url": "https://api.github.com/users/manish59/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manish59/subscriptions", "organizations_url": "https://api.github.com/users/manish59/orgs", "repos_url": "https://api.github.com/users/manish59/repos", "events_url": "https://api.github.com/users/manish59/events{/privacy}", "received_events_url": "https://api.github.com/users/manish59/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-09T20:28:14Z", "updated_at": "2020-06-16T05:52:08Z", "closed_at": "2020-06-16T05:52:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nIm actually trying to understand the your code and compare with the EWS soap services documentation. I have couple of questions and I would really appreciate if you can answer them\r\n1. Every request is a post method and are your using requests.post library?\r\n2. Is the payload str or xml or a json?\r\n3. Do I need to put any headers when requesting the for resources ?\r\n4. If exchange server versions change then the soap body changes ? do they have seperate documentation for server versions?\r\n\r\nI really appreciate if you take some time to give me a reply\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/764", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/764/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/764/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/764/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/764", "id": 631447098, "node_id": "MDU6SXNzdWU2MzE0NDcwOTg=", "number": 764, "title": "Import .eml file in exchange mailbox", "user": {"login": "Marco-Gravina-Lutech", "id": 46992904, "node_id": "MDQ6VXNlcjQ2OTkyOTA0", "avatar_url": "https://avatars3.githubusercontent.com/u/46992904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marco-Gravina-Lutech", "html_url": "https://github.com/Marco-Gravina-Lutech", "followers_url": "https://api.github.com/users/Marco-Gravina-Lutech/followers", "following_url": "https://api.github.com/users/Marco-Gravina-Lutech/following{/other_user}", "gists_url": "https://api.github.com/users/Marco-Gravina-Lutech/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marco-Gravina-Lutech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marco-Gravina-Lutech/subscriptions", "organizations_url": "https://api.github.com/users/Marco-Gravina-Lutech/orgs", "repos_url": "https://api.github.com/users/Marco-Gravina-Lutech/repos", "events_url": "https://api.github.com/users/Marco-Gravina-Lutech/events{/privacy}", "received_events_url": "https://api.github.com/users/Marco-Gravina-Lutech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-05T09:23:24Z", "updated_at": "2020-06-05T11:19:16Z", "closed_at": "2020-06-05T11:16:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to export an email from a mailbox \"A\" to a file \"A.eml\" and than to import the same email from \"A.eml\" to an exchange mailbox \"B\".\r\nI successfully managed to export the email and to import with exchangelib as a Message object, but when I try to save it into a folder I get: \"ValueError: 'update_fields' is only valid for updates.\"\r\nI also tried to save the email by calling `message.move(_folder_`) , but I am required to provide an Item-id and a Changekey. Is there any way to generate those fields or any other way to reach my goal?\r\n\r\nMore details\r\n```\r\n# Import .eml message\r\nimport email\r\nfrom email.policy import HTTP\r\n\r\nwith open(\"exported_email.eml\", \"rb\") as reader:\r\n    mex = email.message_from_file(f)\r\n\r\nmessage = Message(account=account, mime_content=mex.as_bytes(policy=HTTP)\r\nmessage.save(account.inbox)\r\n```\r\n\r\nHere is the error I get:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-43-e0ca146a69c6> in <module>\r\n----> 1 message.save(account.inbox)\r\np:\\python37\\lib\\site-packages\\exchangelib\\items\\item.py in save(self, update_fields, conflict_resolution, send_meeting_invitations)\r\n    140         else:\r\n    141             if update_fields:\r\n--> 142                 raise ValueError(\"'update_fields' is only valid for updates\")\r\n    143             tmp_attachments = None\r\n    144             if self.account and self.account.version.build < EXCHANGE_2010 and self.attachments:\r\nValueError: 'update_fields' is only valid for updates\r\n```\r\nThanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/763", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/763/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/763/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/763/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/763", "id": 629872274, "node_id": "MDU6SXNzdWU2Mjk4NzIyNzQ=", "number": 763, "title": "exchangelib.errors.ErrorNonExistentMailbox: No mailbox with such guid.", "user": {"login": "mattxs", "id": 7007868, "node_id": "MDQ6VXNlcjcwMDc4Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7007868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattxs", "html_url": "https://github.com/mattxs", "followers_url": "https://api.github.com/users/mattxs/followers", "following_url": "https://api.github.com/users/mattxs/following{/other_user}", "gists_url": "https://api.github.com/users/mattxs/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattxs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattxs/subscriptions", "organizations_url": "https://api.github.com/users/mattxs/orgs", "repos_url": "https://api.github.com/users/mattxs/repos", "events_url": "https://api.github.com/users/mattxs/events{/privacy}", "received_events_url": "https://api.github.com/users/mattxs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-03T10:15:44Z", "updated_at": "2020-06-08T12:03:09Z", "closed_at": "2020-06-08T12:03:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI have an issue with cloud EWS mailboxes. We migrate our mailboxes from \"on the ground\" EWS server to Cloud O365. Cloud mailboxes are not \"UserMailbox\" , but \"RemoteUserMailbox\" , which means that cloud mailboxes don't looks like mailboxes in terms of exchange on-premise.\r\n\r\nSo if I try to get Calendar or Root in RemoteUserMailbox I get `exchangelib.errors.ErrorNonExistentMailbox: No mailbox with such guid. ` and cashed_property `KeyError: 'root'` - it is the _class Account_ property.\r\n\r\nAll remote mailboxes are licensed and have the same folder's structure like \"ground\" boxes.\r\nI tried to change server from EXCHANGE 2016 to 19 and to O365, tried to change access_type from IMPERSONATION to DELEGATE, but it didn't help. The error is the same everywhere.\r\n\r\nThe library works great with \"ground\" boxes, but could you tell me please, why do I get \"No mailbox with such guid\" and can't have an access to Root folder?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/762", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/762/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/762/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/762/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/762", "id": 627701525, "node_id": "MDU6SXNzdWU2Mjc3MDE1MjU=", "number": 762, "title": "Failed to update the end time of the meeting", "user": {"login": "bigthing33", "id": 10324272, "node_id": "MDQ6VXNlcjEwMzI0Mjcy", "avatar_url": "https://avatars1.githubusercontent.com/u/10324272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bigthing33", "html_url": "https://github.com/bigthing33", "followers_url": "https://api.github.com/users/bigthing33/followers", "following_url": "https://api.github.com/users/bigthing33/following{/other_user}", "gists_url": "https://api.github.com/users/bigthing33/gists{/gist_id}", "starred_url": "https://api.github.com/users/bigthing33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bigthing33/subscriptions", "organizations_url": "https://api.github.com/users/bigthing33/orgs", "repos_url": "https://api.github.com/users/bigthing33/repos", "events_url": "https://api.github.com/users/bigthing33/events{/privacy}", "received_events_url": "https://api.github.com/users/bigthing33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-05-30T10:39:38Z", "updated_at": "2020-06-03T06:55:26Z", "closed_at": "2020-06-03T06:55:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "## demo \r\n```python3\r\ndef updateEvent(accountRoom,id):\r\n    from exchangelib.items import SEND_MEETING_INVITATIONS_AND_CANCELLATIONS_CHOICES, SEND_ONLY_TO_ALL\r\n    event = accountRoom.calendar.get(id=id)\r\n    print('old end time',event.end)\r\n    event.end=event.end\r\n    event.save(update_fields=['end'], send_meeting_invitations=SEND_ONLY_TO_ALL)\r\n    event = accountRoom.calendar.get(id=id)\r\n    print('update end time',event.end)\r\n```\r\n\r\n## error log\r\n```log\r\nold end time 2020-05-30 12:30:00+00:00\r\n/Library/Python/3.7/site-packages/urllib3/connectionpool.py:986: InsecureRequestWarning: Unverified HTTPS request is being made to host '192.168.66.177'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\r\n  InsecureRequestWarning,\r\nTraceback (most recent call last):\r\n  File \"list-event-demo.py\", line 120, in <module>\r\n    updateEvent(roomAccount,'AAMkAGEyZGMwMDkwLTBjNjctNGJlZi1hOTBlLTM0MjBlNzYzMWI2MQFRAAgI2AQsZXKAAEYAAAAAkmLfaidbM0yTyHgkoY0vjgcAvnfgpUJDY06wWVCn/u6UyAAAAAABDQAAvnfgpUJDY06wWVCn/u6UyAAACHV4VgAAEA==')\r\n  File \"list-event-demo.py\", line 101, in updateEvent\r\n    event.save(update_fields=['end'], send_meeting_invitations=SEND_ONLY_TO_ALL)\r\n  File \"/Library/Python/3.7/site-packages/exchangelib/items/item.py\", line 100, in save\r\n    send_meeting_invitations=send_meeting_invitations\r\n  File \"/Library/Python/3.7/site-packages/exchangelib/util.py\", line 39, in wrapper\r\n    return f(self, *args, **kwargs)\r\n  File \"/Library/Python/3.7/site-packages/exchangelib/items/item.py\", line 183, in _update\r\n    expect_result=message_disposition != SEND_AND_SAVE_COPY,\r\n  File \"/Library/Python/3.7/site-packages/exchangelib/services/common.py\", line 66, in get\r\n    res = list(self.call(**kwargs))\r\n  File \"/Library/Python/3.7/site-packages/exchangelib/services/common.py\", line 540, in _pool_requests\r\n    for elem in self._get_elements(payload=payload_func(chunk, **kwargs)):\r\n  File \"/Library/Python/3.7/site-packages/exchangelib/services/common.py\", line 403, in _get_elements_in_response\r\n    container_or_exc = self._get_element_container(message=msg, name=self.element_container_name)\r\n  File \"/Library/Python/3.7/site-packages/exchangelib/services/common.py\", line 362, in _get_element_container\r\n    raise self._get_exception(code=response_code, text=msg_text, msg_xml=msg_xml)\r\nexchangelib.errors.ErrorInvalidPropertySet: Set action is invalid for property. (field: FieldURI(field_uri='calendar:EndTimeZone'))\r\n```\r\n\r\nAm I writing it wrong? please help me. Thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/761", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/761/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/761/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/761/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/761", "id": 626648027, "node_id": "MDU6SXNzdWU2MjY2NDgwMjc=", "number": 761, "title": "401 error when running from Linux and Mac but working fine from Windows ", "user": {"login": "leoseccia", "id": 2159624, "node_id": "MDQ6VXNlcjIxNTk2MjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2159624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoseccia", "html_url": "https://github.com/leoseccia", "followers_url": "https://api.github.com/users/leoseccia/followers", "following_url": "https://api.github.com/users/leoseccia/following{/other_user}", "gists_url": "https://api.github.com/users/leoseccia/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoseccia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoseccia/subscriptions", "organizations_url": "https://api.github.com/users/leoseccia/orgs", "repos_url": "https://api.github.com/users/leoseccia/repos", "events_url": "https://api.github.com/users/leoseccia/events{/privacy}", "received_events_url": "https://api.github.com/users/leoseccia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-05-28T16:31:27Z", "updated_at": "2020-06-04T08:52:06Z", "closed_at": "2020-06-04T07:52:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When we run the code below in Linux (Ubuntu via WSL) or Mac, we get a 401 error. In Windows, it works fine. Both environments use Python v3.7.4\r\n\r\n```python\r\nfrom exchangelib import Credentials, Account, Configuration, DELEGATE\r\n\r\nimport logging\r\nfrom exchangelib.util import PrettyXmlHandler\r\n\r\nlogging.basicConfig(level=logging.DEBUG, handlers=[PrettyXmlHandler()])\r\n\r\ncredentials = Credentials('account@somedomain.net', 'password')\r\nconfig = Configuration(server='outlook.office365.com', credentials=credentials)\r\naccount = Account(primary_smtp_address='mailbox@somedomain.net',\r\n            config=config,\r\n            autodiscover=False,\r\n            access_type=DELEGATE\r\n            )\r\n\r\nfor item in account.inbox.all().order_by('-datetime_received')[:2]:\r\n    print(item.subject, item.sender, item.datetime_received)\r\n```\r\n\r\nDebug trace from Linux:\r\n\r\n```\r\nWARNING:exchangelib.account:No Windows timezone name found for timezone \"local\". Fallback to UTC\r\nDEBUG:exchangelib.protocol:Waiting for _protocol_cache_lock\r\nDEBUG:exchangelib.protocol:Protocol __call__ cache miss. Adding key '('https://outlook.office365.com/EWS/Exchange.asmx', Credentials('account@somedomain.net', '********'))'\r\nDEBUG:exchangelib.transport:Requesting b'<?xml version=\\'1.0\\' encoding=\\'utf-8\\'?>\\n<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"><s:Header><t:RequestServerVersion Version=\"Exchange2019\"/></s:Header><s:Body><m:ResolveNames ReturnFullContactData=\"false\"><m:UnresolvedEntry>account@somedomain.net</m:UnresolvedEntry></m:ResolveNames></s:Body></s:Envelope>' from https://outlook.office365.com/EWS/Exchange.asmx\r\nDEBUG:exchangelib.transport:Trying to get service auth type for https://outlook.office365.com/EWS/Exchange.asmx\r\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): outlook.office365.com:443\r\nDEBUG:urllib3.connectionpool:https://outlook.office365.com:443 \"POST /EWS/Exchange.asmx HTTP/1.1\" 401 0\r\nDEBUG:exchangelib.transport:Request headers: {'User-Agent': 'exchangelib/3.2.0 (python-requests/2.23.0)', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'text/xml; charset=utf-8', 'Content-Length': '473'}\r\nDEBUG:exchangelib.transport:Response headers: {'Server': 'Microsoft-IIS/10.0', 'request-id': 'f23966f9-68f1-4a82-8b56-c25b52b77136', 'X-Powered-By': 'ASP.NET', 'X-FEServer': 'LO2P265CA0154', 'WWW-Authenticate': 'Basic Realm=\"\"', 'Date': 'Thu, 28 May 2020 16:22:29 GMT', 'Content-Length': '0'}\r\nDEBUG:exchangelib.transport:realm: \r\nDEBUG:exchangelib.transport:Auth type is basic\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Created session 22005\r\nDEBUG:exchangelib.version:Asking server for version info using API version Exchange2019\r\nDEBUG:exchangelib.services.common:Trying API version Exchange2019\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Waiting for session\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Got session 22005\r\nDEBUG:exchangelib.util:Session 22005 thread 140194703675520: retry 0 timeout 120 POST'ing to https://outlook.office365.com/EWS/Exchange.asmx after 10s wait\r\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): outlook.office365.com:443\r\nDEBUG:urllib3.connectionpool:https://outlook.office365.com:443 \"POST /EWS/Exchange.asmx HTTP/1.1\" 401 0\r\nDEBUG:exchangelib.util:Retry: 0\r\nWaited: 10\r\nTimeout: 120\r\nSession: 22005\r\nThread: 140194703675520\r\nAuth type: <requests.auth.HTTPBasicAuth object at 0x7f8196ae0890>\r\nURL: https://outlook.office365.com/EWS/Exchange.asmx\r\nHTTP adapter: <requests.adapters.HTTPAdapter object at 0x7f8196ae0ad0>\r\nAllow redirects: False\r\nStreaming: False\r\nResponse time: 0.6830174000024272\r\nStatus code: 401\r\nRequest headers: {'User-Agent': 'exchangelib/3.2.0 (python-requests/2.23.0)', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'text/xml; charset=utf-8', 'Content-Length': '473', 'Authorization': 'Basic c3ZjLWxlZ2xuZ3lvdXJjQGxlZ2FsLnJlZ24ubmV0OldlbGNvbWVANjIwMQ=='}\r\nResponse headers: {'Server': 'Microsoft-IIS/10.0', 'request-id': 'e9b6b437-a13a-49c8-a4a9-5eb273452b47', 'X-CalculatedFETarget': 'SN6PR2101CU001.internal.outlook.com', 'X-BackEndHttpStatus': '401, 401', 'Set-Cookie': 'exchangecookie=926f119ddd464136bef6257a39cfe747; expires=Fri, 28-May-2021 16:22:29 GMT; path=/; secure; HttpOnly', 'X-FEProxyInfo': 'SN6PR2101CA0022.NAMPRD21.PROD.OUTLOOK.COM', 'X-CalculatedBETarget': 'SN6PR08MB4671.namprd08.prod.outlook.com', 'X-RUM-Validated': '1', 'X-BeSku': 'WCS5', 'X-DiagInfo': 'SN6PR08MB4671', 'X-BEServer': 'SN6PR08MB4671', 'X-Proxy-RoutingCorrectness': '1', 'X-Proxy-BackendServerStatus': '401', 'X-FEServer': 'SN6PR2101CA0022, LO2P265CA0478', 'X-Powered-By': 'ASP.NET', 'WWW-Authenticate': 'Basic Realm=\"\"', 'Date': 'Thu, 28 May 2020 16:22:29 GMT', 'Content-Length': '0'}\r\nRequest data: <?xml version='1.0' encoding='utf-8'?>\r\n<s:Envelope\r\n    xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\r\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\r\n  <s:Header>\r\n    <t:RequestServerVersion Version=\"Exchange2019\"/>\r\n  </s:Header>\r\n  <s:Body>\r\n    <m:ResolveNames ReturnFullContactData=\"false\">\r\n      <m:UnresolvedEntry>account@somedomain.net</m:UnresolvedEntry>\r\n    </m:ResolveNames>\r\n  </s:Body>\r\n</s:Envelope>\r\n\r\nResponse data: b''\r\n\r\nDEBUG:exchangelib.util:No retry: no fail-fast policy\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Retiring session 22005\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Created session 25674\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Releasing session 25674\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 13, in <module>\r\n    access_type=DELEGATE\r\n  File \"/home/my_user/tmp_exchange_test/venv/lib/python3.7/site-packages/exchangelib/account.py\", line 125, in __init__\r\n    self.version = self.protocol.version\r\n  File \"/home/my_user/tmp_exchange_test/venv/lib/python3.7/site-packages/exchangelib/protocol.py\", line 420, in version\r\n    self.config.version = Version.guess(self, api_version_hint=self._api_version_hint)\r\n  File \"/home/my_user/tmp_exchange_test/venv/lib/python3.7/site-packages/exchangelib/version.py\", line 226, in guess\r\n    list(ResolveNames(protocol=protocol).call(unresolved_entries=[name]))\r\n  File \"/home/my_user/tmp_exchange_test/venv/lib/python3.7/site-packages/exchangelib/services/resolve_names.py\", line 32, in call\r\n    contact_data_shape=contact_data_shape,\r\n  File \"/home/my_user/tmp_exchange_test/venv/lib/python3.7/site-packages/exchangelib/services/common.py\", line 84, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"/home/my_user/tmp_exchange_test/venv/lib/python3.7/site-packages/exchangelib/services/common.py\", line 162, in _get_response_xml\r\n    stream=self.streaming,\r\n  File \"/home/my_user/tmp_exchange_test/venv/lib/python3.7/site-packages/exchangelib/util.py\", line 770, in post_ratelimited\r\n    _raise_response_errors(r, protocol, log_msg, log_vals)  # Always raises an exception\r\n  File \"/home/my_user/tmp_exchange_test/venv/lib/python3.7/site-packages/exchangelib/util.py\", line 847, in _raise_response_errors\r\n    raise UnauthorizedError('Invalid credentials for %s' % response.url)\r\nexchangelib.errors.UnauthorizedError: Invalid credentials for https://outlook.office365.com/EWS/Exchange.asmx\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Closing sessions\r\n```\r\n\r\nDebug trace from Windows:\r\n```\r\nDEBUG:exchangelib.protocol:Waiting for _protocol_cache_lock\r\nDEBUG:exchangelib.protocol:Protocol __call__ cache miss. Adding key '('https://outlook.office365.com/EWS/Exchange.asmx', Credentials('account@somedomain.net', '********'))'\r\nDEBUG:exchangelib.transport:Requesting b'<?xml version=\\'1.0\\' encoding=\\'utf-8\\'?>\\n<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"><s:Header><t:RequestServerVersion Version=\"Exchange2019\"/></s:Header><s:Body><m:ResolveNames ReturnFullContactData=\"false\"><m:UnresolvedEntry>account@somedomain.net</m:UnresolvedEntry></m:ResolveNames></s:Body></s:Envelope>' from https://outlook.office365.com/EWS/Exchange.asmx\r\nDEBUG:exchangelib.transport:Trying to get service auth type for https://outlook.office365.com/EWS/Exchange.asmx\r\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): outlook.office365.com:443\r\nDEBUG:urllib3.connectionpool:https://outlook.office365.com:443 \"POST /EWS/Exchange.asmx HTTP/1.1\" 401 0\r\nDEBUG:exchangelib.transport:Request headers: {'User-Agent': 'exchangelib/3.2.0 (python-requests/2.23.0)', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'text/xml; charset=utf-8', 'Content-Length': '473'}\r\nDEBUG:exchangelib.transport:Response headers: {'Server': 'Microsoft-IIS/10.0', 'request-id': 'b2587a45-8895-42bd-948d-d10285d707ea', 'X-Powered-By': 'ASP.NET', 'X-FEServer': 'LO2P265CA0221', 'WWW-Authenticate': 'Basic Realm=\"\"', 'Date': 'Thu, 28 May 2020 15:13:25 GMT', 'Content-Length': '0'}\r\nDEBUG:exchangelib.transport:realm:\r\nDEBUG:exchangelib.transport:Auth type is basic\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Created session 24897\r\nDEBUG:exchangelib.version:Asking server for version info using API version Exchange2019\r\nDEBUG:exchangelib.services.common:Trying API version Exchange2019\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Waiting for session\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Got session 24897\r\nDEBUG:exchangelib.util:Session 24897 thread 25680: retry 0 timeout 120 POST'ing to https://outlook.office365.com/EWS/Exchange.asmx after 10s wait\r\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): outlook.office365.com:443\r\nDEBUG:urllib3.connectionpool:https://outlook.office365.com:443 \"POST /EWS/Exchange.asmx HTTP/1.1\" 500 753\r\nDEBUG:exchangelib.util:Retry: 0\r\nWaited: 10\r\nTimeout: 120\r\nSession: 24897\r\nThread: 25680\r\nAuth type: <requests.auth.HTTPBasicAuth object at 0x0000026562E8E508>\r\nURL: https://outlook.office365.com/EWS/Exchange.asmx\r\nHTTP adapter: <requests.adapters.HTTPAdapter object at 0x0000026562E80FC8>\r\nAllow redirects: False\r\nStreaming: False\r\nResponse time: 0.26599999999962165\r\nStatus code: 500\r\nRequest headers: {'User-Agent': 'exchangelib/3.2.0 (python-requests/2.23.0)', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'text/xml; charset=utf-8', 'Content-Length': '473', 'Authorization': 'Basic c3ZjLWxlZ2xuZ3lvdXJjQGxlZ2FsLnJlZ24ubmV0OldlbGNvbWVANjIwMQ=='}\r\nResponse headers: {'Cache-Control': 'private', 'Content-Length': '753', 'Content-Type': 'text/xml; charset=utf-8', 'Server': 'Microsoft-IIS/10.0', 'request-id': 'de4b882c-74e8-4ca3-aa92-8415cde10df6', 'X-CalculatedFETarget': 'SA9PR11CU001.internal.outlook.com', 'X-BackEndHttpStatus': '500, 500', 'Set-Cookie': 'exchangecookie=a4fb80a1756d4b4a99c58cc4c208df9a; expires=Fri, 28-May-2021 15:13:25 GMT; path=/; secure; HttpOnly', 'X-FEProxyInfo': 'SA9PR11CA0013.NAMPRD11.PROD.OUTLOOK.COM', 'X-CalculatedBETarget': 'SN6PR08MB4671.namprd08.prod.outlook.com', 'X-RUM-Validated': '1', 'X-AspNet-Version': '4.0.30319', 'X-BeSku': 'WCS5', 'X-DiagInfo': 'SN6PR08MB4671', 'X-BEServer': 'SN6PR08MB4671', 'X-Proxy-RoutingCorrectness': '1', 'X-Proxy-BackendServerStatus': '500', 'X-FEServer': 'SA9PR11CA0013, LO2P265CA0219', 'X-Powered-By': 'ASP.NET', 'Date': 'Thu, 28 May 2020 15:13:25 GMT'}\r\nRequest data: <?xml version='1.0' encoding='utf-8'?>\r\n<s:Envelope\r\n    xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\"\r\n    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\">\r\n  <s:Header>\r\n    <t:RequestServerVersion Version=\"Exchange2019\"/>\r\n  </s:Header>\r\n  <s:Body>\r\n    <m:ResolveNames ReturnFullContactData=\"false\">\r\n      <m:UnresolvedEntry>account@somedomain.net</m:UnresolvedEntry>\r\n    </m:ResolveNames>\r\n  </s:Body>\r\n</s:Envelope>\r\n\r\nResponse data: <?xml version='1.0' encoding='utf-8'?>\r\n<s:Envelope\r\n    xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n  <s:Header>\r\n    <Action xmlns=\"http://schemas.microsoft.com/ws/2005/05/addressing/none\" s:mustUnderstand=\"1\">*</Action>\r\n  </s:Header>\r\n  <s:Body>\r\n    <s:Fault>\r\n      <faultcode\r\n    xmlns:a=\"http://schemas.microsoft.com/exchange/services/2006/types\">a:ErrorInvalidServerVersion</faultcode>\r\n      <faultstring xml:lang=\"en-US\">The specified server version is invalid.</faultstring>\r\n      <detail>\r\n        <e:ResponseCode\r\n    xmlns:e=\"http://schemas.microsoft.com/exchange/services/2006/errors\">ErrorInvalidServerVersion</e:ResponseCode>\r\n        <e:Message\r\n    xmlns:e=\"http://schemas.microsoft.com/exchange/services/2006/errors\">The specified server version is invalid.</e:Message>\r\n      </detail>\r\n    </s:Fault>\r\n  </s:Body>\r\n</s:Envelope>\r\n\r\n\r\nDEBUG:exchangelib.util:No retry: wrong status code 500\r\nDEBUG:exchangelib.util:Got status code 500 but trying to parse content anyway\r\nDEBUG:exchangelib.util:Session 24897 thread 25680: Useful response from https://outlook.office365.com/EWS/Exchange.asmx\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Releasing session 24897\r\nDEBUG:exchangelib.services.common:Failed to update version info (No ServerVersionInfo in header: '<s:Header xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><Action xmlns=\"http://schemas.microsoft.com/ws/2005/05/addressing/none\" s:mustUnderstand=\"1\">*</Action></s:Header>')\r\nDEBUG:exchangelib.services.common:API version Exchange2019 was invalid\r\nDEBUG:exchangelib.services.common:Trying API version Exchange2016\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Waiting for session\r\nDEBUG:exchangelib.protocol:Server outlook.office365.com: Got session 24897\r\nDEBUG:exchangelib.util:Session 24897 thread 25680: retry 0 timeout 120 POST'ing to https://outlook.office365.com/EWS/Exchange.asmx after 10s wait\r\nDEBUG:urllib3.connectionpool:https://outlook.office365.com:443 \"POST /EWS/Exchange.asmx HTTP/1.1\" 200 None\r\nDEBUG:exchangelib.util:Retry: 0\r\nWaited: 10\r\nTimeout: 120\r\nSession: 24897\r\nThread: 25680\r\nAuth type: <requests.auth.HTTPBasicAuth object at 0x0000026562E8E508>\r\nURL: https://outlook.office365.com/EWS/Exchange.asmx\r\nHTTP adapter: <requests.adapters.HTTPAdapter object at 0x0000026562E80FC8>\r\nAllow redirects: False\r\nStreaming: False\r\nResponse time: 0.18799999999828287\r\nStatus code: 200\r\n\r\nand then continues on...\r\n```\r\n\r\nHow do we fix it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/760", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/760/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/760/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/760/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/760", "id": 626361166, "node_id": "MDU6SXNzdWU2MjYzNjExNjY=", "number": 760, "title": "Timezone error upgrading from 1.7.4 to 3.2.0", "user": {"login": "pekh", "id": 16785342, "node_id": "MDQ6VXNlcjE2Nzg1MzQy", "avatar_url": "https://avatars2.githubusercontent.com/u/16785342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pekh", "html_url": "https://github.com/pekh", "followers_url": "https://api.github.com/users/pekh/followers", "following_url": "https://api.github.com/users/pekh/following{/other_user}", "gists_url": "https://api.github.com/users/pekh/gists{/gist_id}", "starred_url": "https://api.github.com/users/pekh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pekh/subscriptions", "organizations_url": "https://api.github.com/users/pekh/orgs", "repos_url": "https://api.github.com/users/pekh/repos", "events_url": "https://api.github.com/users/pekh/events{/privacy}", "received_events_url": "https://api.github.com/users/pekh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-28T09:29:07Z", "updated_at": "2020-06-04T07:51:20Z", "closed_at": "2020-06-04T07:51:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI had to upgrade exchangelib after a LONG time in a project today, and now I get the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"iaa_tools.py\", line 103, in <module>\r\n    update(**arguments)\r\n  File \"iaa_tools.py\", line 76, in update\r\n    update_status=update_status)\r\n  File \"/usr/src/app/iaa/main.py\", line 82, in update\r\n    data = conn.get_data(BEGIN, END, employees, stale_status)\r\n  File \"/usr/src/app/iaa/connectors/exchange.py\", line 65, in get_data\r\n    for item in items:\r\n  File \"/usr/local/lib/python3.6/site-packages/exchangelib/queryset.py\", line 286, in __iter__\r\n    for val in self._format_items(items=self._query(), return_format=self.return_format):\r\n  File \"/usr/local/lib/python3.6/site-packages/exchangelib/queryset.py\", line 371, in _item_yielder\r\n    for i in iterable:\r\n  File \"/usr/local/lib/python3.6/site-packages/exchangelib/account.py\", line 574, in fetch\r\n    item = validation_folder.item_model_from_tag(i.tag).from_xml(elem=i, account=self)\r\n  File \"/usr/local/lib/python3.6/site-packages/exchangelib/items/calendar_item.py\", line 220, in from_xml\r\n    setattr(item, field_name, val.astimezone(tz).date())\r\n  File \"/usr/local/lib/python3.6/site-packages/exchangelib/ewsdatetime.py\", line 127, in astimezone\r\n    return self.from_datetime(t)  # We want to return EWSDateTime objects\r\n  File \"/usr/local/lib/python3.6/site-packages/exchangelib/ewsdatetime.py\", line 120, in from_datetime\r\n    tz = EWSTimeZone.from_pytz(d.tzinfo)\r\n  File \"/usr/local/lib/python3.6/site-packages/exchangelib/ewsdatetime.py\", line 242, in from_pytz\r\n    self_cls = type(cls.__name__, base_classes, dict(tz.__class__.__dict__))\r\nTypeError: type 'datetime.timezone' is not an acceptable base type\r\n```\r\nBEGIN and END are initialized as follows:\r\n\r\n```\r\nNOW = LOCT.localize(datetime.now()).astimezone(UTC)\r\nBEGIN = LOCT.localize(datetime.combine(NOW, time(0))).astimezone(UTC)\r\nEND = LOCT.localize(datetime.combine(\r\n                                   NOW + timedelta(days=7), time(23, 59))).astimezone(UTC)\r\n```\r\nwhere LOCT is a pytz.timezone ('Europe/Copenhagen')\r\n\r\nWhile this always seemed awkward to me, it seemed to be the only way to get the correctly localized date.\r\n\r\nWhat do I have to change to get my code working again?\r\n\r\nGreetings,\r\n\r\nJan-Peer", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/759", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/759/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/759/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/759/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/759", "id": 625936000, "node_id": "MDU6SXNzdWU2MjU5MzYwMDA=", "number": 759, "title": "Error on order_by a date retrieving calendar entries", "user": {"login": "fcuencamargalef", "id": 4992908, "node_id": "MDQ6VXNlcjQ5OTI5MDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/4992908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fcuencamargalef", "html_url": "https://github.com/fcuencamargalef", "followers_url": "https://api.github.com/users/fcuencamargalef/followers", "following_url": "https://api.github.com/users/fcuencamargalef/following{/other_user}", "gists_url": "https://api.github.com/users/fcuencamargalef/gists{/gist_id}", "starred_url": "https://api.github.com/users/fcuencamargalef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fcuencamargalef/subscriptions", "organizations_url": "https://api.github.com/users/fcuencamargalef/orgs", "repos_url": "https://api.github.com/users/fcuencamargalef/repos", "events_url": "https://api.github.com/users/fcuencamargalef/events{/privacy}", "received_events_url": "https://api.github.com/users/fcuencamargalef/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 337732381, "node_id": "MDU6TGFiZWwzMzc3MzIzODE=", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-27T18:37:44Z", "updated_at": "2020-05-28T10:30:46Z", "closed_at": "2020-05-28T10:30:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I upgraded to 3.0.2 versi\u00f3n from version 1. And now I get an error with the same code that works before.\r\n\r\nThe error:\r\n\r\n```\r\n  File \"/home/fcuenca/Datos/env/mnemeux/lib/python3.8/site-packages/exchangelib/queryset.py\", line 286, in __iter__\r\n    for val in self._format_items(items=self._query(), return_format=self.return_format):\r\n  File \"/home/fcuenca/Datos/env/mnemeux/lib/python3.8/site-packages/exchangelib/queryset.py\", line 255, in _query\r\n    items = sorted(items, key=lambda i: _get_value_or_default(i, f), reverse=f.reverse)\r\n  File \"/home/fcuenca/Datos/env/mnemeux/lib/python3.8/site-packages/exchangelib/queryset.py\", line 255, in <lambda>\r\n    items = sorted(items, key=lambda i: _get_value_or_default(i, f), reverse=f.reverse)\r\n  File \"/home/fcuenca/Datos/env/mnemeux/lib/python3.8/site-packages/exchangelib/queryset.py\", line 688, in _get_value_or_default\r\n    default = field_order.field_path.field.default or field_order.field_path.field.value_cls()\r\n  File \"/home/fcuenca/Datos/env/mnemeux/lib/python3.8/site-packages/exchangelib/ewsdatetime.py\", line 97, in __new__\r\n    return super().__new__(cls, *args, **kwargs)\r\nTypeError: function missing required argument 'year' (pos 1)\r\n```\r\n\r\nThe code is:\r\n\r\n```\r\ntz = EWSTimeZone.localzone()\r\nsince = tz.localize(EWSDateTime.now()) - since\r\nto = tz.localize(EWSDateTime.now()) + to\r\n\r\nmeetings = self.account.calendar.view( start=since, end=to).only('uid', 'start', 'end', 'subject', 'text_body', 'organizer', 'location', 'required_attendees', 'categories').order_by('start')\r\n\r\nfor meeting in meetings: # Error!\r\n  pass\r\n```\r\n\r\nIt seems that the problem is with order_by('start'). It works if I change to order_by('uid').\r\n\r\nMy environment is:\r\nUbuntu 20.4\r\nPython 3.8\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/758", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/758/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/758/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/758/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/758", "id": 625057298, "node_id": "MDU6SXNzdWU2MjUwNTcyOTg=", "number": 758, "title": "Too many concurrent connections opened", "user": {"login": "kumpelj", "id": 26567053, "node_id": "MDQ6VXNlcjI2NTY3MDUz", "avatar_url": "https://avatars0.githubusercontent.com/u/26567053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kumpelj", "html_url": "https://github.com/kumpelj", "followers_url": "https://api.github.com/users/kumpelj/followers", "following_url": "https://api.github.com/users/kumpelj/following{/other_user}", "gists_url": "https://api.github.com/users/kumpelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kumpelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kumpelj/subscriptions", "organizations_url": "https://api.github.com/users/kumpelj/orgs", "repos_url": "https://api.github.com/users/kumpelj/repos", "events_url": "https://api.github.com/users/kumpelj/events{/privacy}", "received_events_url": "https://api.github.com/users/kumpelj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-26T17:31:57Z", "updated_at": "2020-05-30T10:18:00Z", "closed_at": "2020-05-29T15:39:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I build a small script to fetch calendar data from around 300 accounts. After around 30 iterations  I continuously get \"Too many concurrent connections opened.\" errors\r\n\r\n```python\r\nfor user in users:\r\n  account = Account(primary_smtp_address=item['email'],,,\r\n  account.calendar.filter(...\r\n```\r\n\r\nhow can this be fixed? How can I close open connections?\r\nTried close_connections() does not help..", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/757", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/757/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/757/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/757/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/757", "id": 621744067, "node_id": "MDU6SXNzdWU2MjE3NDQwNjc=", "number": 757, "title": "OAuth2AuthorizationCodeCredentials requires SOAP impersonation headers unconditionally", "user": {"login": "DeanArbel", "id": 20818773, "node_id": "MDQ6VXNlcjIwODE4Nzcz", "avatar_url": "https://avatars3.githubusercontent.com/u/20818773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeanArbel", "html_url": "https://github.com/DeanArbel", "followers_url": "https://api.github.com/users/DeanArbel/followers", "following_url": "https://api.github.com/users/DeanArbel/following{/other_user}", "gists_url": "https://api.github.com/users/DeanArbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeanArbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeanArbel/subscriptions", "organizations_url": "https://api.github.com/users/DeanArbel/orgs", "repos_url": "https://api.github.com/users/DeanArbel/repos", "events_url": "https://api.github.com/users/DeanArbel/events{/privacy}", "received_events_url": "https://api.github.com/users/DeanArbel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-20T13:01:01Z", "updated_at": "2020-05-20T16:19:42Z", "closed_at": "2020-05-20T16:19:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to use a service that's accessible via `account.protocol` with an OAuth2 access token (via `OAuth2AuthorizationCodeCredentials`) will return the following error:\r\n\r\n```\r\nExchangeImpersonation SOAP header must be present for this type of OAuth token.\r\n```\r\n\r\nThis seems related to https://github.com/ecederstrand/exchangelib/issues/735, which was fixed by adding an identity argument to `OAuth2Credentials`. This addition is missing from `OAuth2AuthorizationCodeCredentials`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/756", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/756/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/756/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/756/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/756", "id": 619649395, "node_id": "MDU6SXNzdWU2MTk2NDkzOTU=", "number": 756, "title": "How to authenticate users in an application ?", "user": {"login": "yeyeric", "id": 43412665, "node_id": "MDQ6VXNlcjQzNDEyNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/43412665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeyeric", "html_url": "https://github.com/yeyeric", "followers_url": "https://api.github.com/users/yeyeric/followers", "following_url": "https://api.github.com/users/yeyeric/following{/other_user}", "gists_url": "https://api.github.com/users/yeyeric/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeyeric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeyeric/subscriptions", "organizations_url": "https://api.github.com/users/yeyeric/orgs", "repos_url": "https://api.github.com/users/yeyeric/repos", "events_url": "https://api.github.com/users/yeyeric/events{/privacy}", "received_events_url": "https://api.github.com/users/yeyeric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-17T09:03:29Z", "updated_at": "2020-05-17T17:33:29Z", "closed_at": "2020-05-17T17:32:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI\u2019m creating a portal where my users would be able to send emails. The idea is that I generate template of emails Which they can eventually amend, making their life easier with.\r\n\r\nThe question I have is how I managed the login to their exchange account ? I have perfectly managed to login using login/password, working as a charm.\r\n\r\nTherefore I could store their login/password in my database and uses this Information every time needed but that would not be secure and when changing not sync when changing password for instance.\r\n\r\nI would have only 5-10 users so that\u2019s not a pain for me to proceed like this but how should I do to manage properly the security ?\r\n\r\nMy thinking would be that I store an encrypted token generated once by my user, or renewed every time they change their password, which I can then store and use every time they need to access their exchange account but I\u2019m not sure if that\u2019s how it should be done and if so, how exactly. Tried to read about it but I\u2019m afraid I don\u2019t get it.\r\n\r\nI\u2019m using office 365 business premium\r\n\r\nMy application is running in an aws lambda function if that changes anything.\r\n\r\nThanks for the help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/755", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/755/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/755/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/755/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/755", "id": 617173291, "node_id": "MDU6SXNzdWU2MTcxNzMyOTE=", "number": 755, "title": "CalendarItem.cancel() fails because expect_result=False in 3.2.0", "user": {"login": "ThreePinkApples", "id": 4201981, "node_id": "MDQ6VXNlcjQyMDE5ODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4201981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThreePinkApples", "html_url": "https://github.com/ThreePinkApples", "followers_url": "https://api.github.com/users/ThreePinkApples/followers", "following_url": "https://api.github.com/users/ThreePinkApples/following{/other_user}", "gists_url": "https://api.github.com/users/ThreePinkApples/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThreePinkApples/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThreePinkApples/subscriptions", "organizations_url": "https://api.github.com/users/ThreePinkApples/orgs", "repos_url": "https://api.github.com/users/ThreePinkApples/repos", "events_url": "https://api.github.com/users/ThreePinkApples/events{/privacy}", "received_events_url": "https://api.github.com/users/ThreePinkApples/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 337732381, "node_id": "MDU6TGFiZWwzMzc3MzIzODE=", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T06:16:32Z", "updated_at": "2020-05-14T12:01:19Z", "closed_at": "2020-05-14T12:01:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "With exchangelib 3.2.0 cancelling a meeting is consistently failing for me.\r\n```python\r\nmeeting_data: CalendarItem = self.account.calendar.get(id=meeting.id)\r\nmeeting_data.cancel()\r\n```\r\n\r\n```\r\n    meeting_data.cancel()\r\n  File \"/ramStorage/t22820000-22830000/22828104/23614980/virtualenv/lib/python3.6/site-packages/exchangelib/items/calendar_item.py\", line 192, in cancel\r\n    **kwargs\r\n  File \"/ramStorage/t22820000-22830000/22828104/23614980/virtualenv/lib/python3.6/site-packages/exchangelib/util.py\", line 39, in wrapper\r\n    return f(self, *args, **kwargs)\r\n  File \"/ramStorage/t22820000-22830000/22828104/23614980/virtualenv/lib/python3.6/site-packages/exchangelib/items/base.py\", line 190, in send\r\n    expect_result=False,\r\n  File \"/ramStorage/t22820000-22830000/22828104/23614980/virtualenv/lib/python3.6/site-packages/exchangelib/services/common.py\", line 72, in get\r\n    raise ValueError('Expected result length 0, but got %r', res)\r\nValueError: ('Expected result length 0, but got %r', [<Element {http://schemas.microsoft.com/exchange/services/2006/types}CalendarItem at 0x7f74a0299988>])\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/754", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/754/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/754/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/754/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/754", "id": 617148192, "node_id": "MDU6SXNzdWU2MTcxNDgxOTI=", "number": 754, "title": "Auto-generated online API documentation", "user": {"login": "jdpipe", "id": 87423, "node_id": "MDQ6VXNlcjg3NDIz", "avatar_url": "https://avatars3.githubusercontent.com/u/87423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdpipe", "html_url": "https://github.com/jdpipe", "followers_url": "https://api.github.com/users/jdpipe/followers", "following_url": "https://api.github.com/users/jdpipe/following{/other_user}", "gists_url": "https://api.github.com/users/jdpipe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdpipe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdpipe/subscriptions", "organizations_url": "https://api.github.com/users/jdpipe/orgs", "repos_url": "https://api.github.com/users/jdpipe/repos", "events_url": "https://api.github.com/users/jdpipe/events{/privacy}", "received_events_url": "https://api.github.com/users/jdpipe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 337732383, "node_id": "MDU6TGFiZWwzMzc3MzIzODM=", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-13T05:14:09Z", "updated_at": "2020-06-28T09:28:34Z", "closed_at": "2020-06-28T09:28:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Exchangelib looks like a nice and comprehensive implementation of the Exchange API in Python. The README.md gives a pretty good sense of the range of options that are provided, but it would be  huge help for familiarising oneself with the code if there were also some more extensive class docs generated, eg using Sphinx and Readthedocs.\r\n\r\nAnd while I have your attention, are you aware of any attempts by anyone to use exchangelib to provide a CalDAV interface to EWS calendar data, in a similar way to what Davmail does?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/753", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/753/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/753/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/753/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/753", "id": 616104977, "node_id": "MDU6SXNzdWU2MTYxMDQ5Nzc=", "number": 753, "title": "Serverless / AWS Lambda problem with exchangelib - Multiprocessing ?", "user": {"login": "yeyeric", "id": 43412665, "node_id": "MDQ6VXNlcjQzNDEyNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/43412665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeyeric", "html_url": "https://github.com/yeyeric", "followers_url": "https://api.github.com/users/yeyeric/followers", "following_url": "https://api.github.com/users/yeyeric/following{/other_user}", "gists_url": "https://api.github.com/users/yeyeric/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeyeric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeyeric/subscriptions", "organizations_url": "https://api.github.com/users/yeyeric/orgs", "repos_url": "https://api.github.com/users/yeyeric/repos", "events_url": "https://api.github.com/users/yeyeric/events{/privacy}", "received_events_url": "https://api.github.com/users/yeyeric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-11T18:52:45Z", "updated_at": "2020-05-11T21:20:05Z", "closed_at": "2020-05-11T21:04:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have an issue when using my code deployed on an AWS Lambda function. It works very well locally.\r\n\r\nWhat could be the reason ?\r\n\r\nFrom what I understand it looks to be to multiprocessing which wouldn't be handled in AWS Lambda. In this case, how should I do to access to the content of one folder in my mailbox ?\r\n\r\nThanks\r\n\r\nSample of my code:\r\n\r\n```\r\nfrom exchangelib import Account, CalendarItem, Message, Mailbox, FileAttachment, HTMLBody, Credentials, DELEGATE, Configuration, IMPERSONATION, FaultTolerance\r\n\r\nclass ExchangeIdentification:\r\n    def __init__(self, username: str = settings.exchange_email_login, password: str = settings.exchange_email_password,\r\n                 email_sender_address: str = settings.exchange_email_login):\r\n        credentials = Credentials(username, password)\r\n        config = Configuration(service_endpoint='https://outlook.office365.com/EWS/Exchange.asmx',\r\n                               credentials=credentials, auth_type='basic')\r\n        self.account = Account(primary_smtp_address=username, autodiscover=False, config=config,\r\n                               access_type=DELEGATE)\r\n        self.email_sender_address = email_sender_address\r\n\r\ndef preprocess_file_from_email():\r\n    exchange = ExchangeIdentification()\r\n    folder = exchange.account.root / 'Top of Information Store' / 'my_folder'\r\n    # code continues but breaks at the line above\r\n```\r\n\r\nAnd the output of the error in AWS Lambda:\r\n\r\n```\r\n[ERROR]\t2020-05-11T18:42:06.619Z\td67670a2-865d-4ce1-909e-a4a441c3fdf0\tException in ASGI application\r\n\r\nTraceback (most recent call last):\r\n  File \"/var/task/mangum/protocols/http.py\", line 39, in run\r\n    await app(self.scope, self.receive, self.send)\r\n  File \"/var/task/fastapi/applications.py\", line 149, in __call__\r\n    await super().__call__(scope, receive, send)\r\n  File \"/var/task/starlette/applications.py\", line 102, in __call__\r\n    await self.middleware_stack(scope, receive, send)\r\n  File \"/var/task/starlette/middleware/errors.py\", line 181, in __call__\r\n    raise exc from None\r\n  File \"/var/task/starlette/middleware/errors.py\", line 159, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/var/task/starlette/exceptions.py\", line 82, in __call__\r\n    raise exc from None\r\n  File \"/var/task/starlette/exceptions.py\", line 71, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/var/task/starlette/routing.py\", line 550, in __call__\r\n    await route.handle(scope, receive, send)\r\n  File \"/var/task/starlette/routing.py\", line 227, in handle\r\n    await self.app(scope, receive, send)\r\n  File \"/var/task/starlette/routing.py\", line 41, in app\r\n    response = await func(request)\r\n  File \"/var/task/fastapi/routing.py\", line 196, in app\r\n    raw_response = await run_endpoint_function(\r\n  File \"/var/task/fastapi/routing.py\", line 150, in run_endpoint_function\r\n    return await run_in_threadpool(dependant.call, **values)\r\n  File \"/var/task/starlette/concurrency.py\", line 34, in run_in_threadpool\r\n    return await loop.run_in_executor(None, func, *args)\r\n  File \"/var/lang/lib/python3.8/concurrent/futures/thread.py\", line 57, in run\r\n    result = self.fn(*self.args, **self.kwargs)\r\n  File \"/var/task/app/sf2py/sf2py.py\", line 175, in wrapper\r\n    raise e\r\n  File \"/var/task/app/sf2py/sf2py.py\", line 170, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/var/task/app/quote/creation.py\", line 202, in preprocess_file_from_email\r\n    folder = exchange.account.root / 'Top of Information Store' / 'my_folder'\r\n  File \"/var/task/cached_property.py\", line 73, in __get__\r\n    return obj_dict.setdefault(name, self.func(obj))\r\n  File \"/var/task/exchangelib/account.py\", line 238, in root\r\n    return Root.get_distinguished(account=self)\r\n  File \"/var/task/exchangelib/folders/roots.py\", line 106, in get_distinguished\r\n    return cls.resolve(\r\n  File \"/var/task/exchangelib/folders/base.py\", line 499, in resolve\r\n    folders = list(FolderCollection(account=account, folders=[folder]).resolve())\r\n  File \"/var/task/exchangelib/folders/collections.py\", line 254, in resolve\r\n    for f in self.__class__(account=self.account, folders=resolveable_folders).get_folders(\r\n  File \"/var/task/exchangelib/folders/collections.py\", line 316, in get_folders\r\n    for f in GetFolder(account=self.account).call(\r\n  File \"/var/task/exchangelib/services/get_folder.py\", line 29, in call\r\n    for folder, elem in zip(folders_list, self._pool_requests(\r\n  File \"/var/task/exchangelib/services/common.py\", line 519, in _pool_requests\r\n    results.append((n, self.protocol.thread_pool.apply_async(\r\n  File \"/var/task/cached_property.py\", line 73, in __get__\r\n    return obj_dict.setdefault(name, self.func(obj))\r\n  File \"/var/task/exchangelib/protocol.py\", line 429, in thread_pool\r\n    return ThreadPool(processes=thread_poolsize)\r\n  File \"/var/lang/lib/python3.8/multiprocessing/pool.py\", line 922, in __init__\r\n    Pool.__init__(self, processes, initializer, initargs)\r\n  File \"/var/lang/lib/python3.8/multiprocessing/pool.py\", line 196, in __init__\r\n    self._change_notifier = self._ctx.SimpleQueue()\r\n  File \"/var/lang/lib/python3.8/multiprocessing/context.py\", line 113, in SimpleQueue\r\n    return SimpleQueue(ctx=self.get_context())\r\n  File \"/var/lang/lib/python3.8/multiprocessing/queues.py\", line 336, in __init__\r\n    self._rlock = ctx.Lock()\r\n  File \"/var/lang/lib/python3.8/multiprocessing/context.py\", line 68, in Lock\r\n    return Lock(ctx=self.get_context())\r\n  File \"/var/lang/lib/python3.8/multiprocessing/synchronize.py\", line 162, in __init__\r\n    SemLock.__init__(self, SEMAPHORE, 1, 1, ctx=ctx)\r\n  File \"/var/lang/lib/python3.8/multiprocessing/synchronize.py\", line 57, in __init__\r\n    sl = self._semlock = _multiprocessing.SemLock(\r\nOSError: [Errno 38] Function not implemented\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/752", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/752/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/752/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/752/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/752", "id": 615443158, "node_id": "MDU6SXNzdWU2MTU0NDMxNTg=", "number": 752, "title": "query on sent mailbox", "user": {"login": "ludicludo", "id": 6171433, "node_id": "MDQ6VXNlcjYxNzE0MzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6171433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ludicludo", "html_url": "https://github.com/ludicludo", "followers_url": "https://api.github.com/users/ludicludo/followers", "following_url": "https://api.github.com/users/ludicludo/following{/other_user}", "gists_url": "https://api.github.com/users/ludicludo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ludicludo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ludicludo/subscriptions", "organizations_url": "https://api.github.com/users/ludicludo/orgs", "repos_url": "https://api.github.com/users/ludicludo/repos", "events_url": "https://api.github.com/users/ludicludo/events{/privacy}", "received_events_url": "https://api.github.com/users/ludicludo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-10T17:58:41Z", "updated_at": "2020-05-11T09:23:48Z", "closed_at": "2020-05-11T09:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nFirst of all, thank you for this nice piece of work. I already send my first message thanks to your api in python. Great for sending messages to my students :-)\r\nI would like to insure that I sent all the expected messages by checking my sent folder.\r\n\r\nIs it possible to query from messages you have sent the same way you do it on messages you received ?\r\nActually, I tried but searchable fields are different between inbox and sent folders. \r\n\r\n``list(my_account.sent.filter(subject_contains='some filter of my own'))`` \r\nraises an exception:\r\n``InvalidField: Unknown field path 'subject_contains' on folders \r\n[SentItems(Root(<exchangelib.account.Account object at 0x00000230DD8CE828>, '[self]', 'root', 11, 0, 63, None, 'AAMkAGUzYTVmNDg2LTU3N2EtNDYyNi04M2I3LWI0ZGQzODY0Mjk0YwAuAAAAAACCSp8B1S7TEZ76AFAECzCJAQARUoiwEirTEZ74AFAECzCJAAAAAEIcAAA=', 'AQAAABYAAAB7AopfpewqSZ/y15b5atFAAAHwEZZF'), 'El\u00e9ments envoy\u00e9s', 3333, 0, 0, 'IPF.Note', 'AAMkAGUzYTVmNDg2LTU3N2EtNDYyNi04M2I3LWI0ZGQzODY0Mjk0YwAuAAAAAACCSp8B1S7TEZ76AFAECzCJAQARUoiwEirTEZ74AFAECzCJAAAAAEIiAAA=', 'AQAAABYAAAB7AopfpewqSZ/y15b5atFAAAH8XXtO')]``\r\nThank you\r\nBest regards\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/751", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/751/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/751/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/751/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/751", "id": 612782219, "node_id": "MDU6SXNzdWU2MTI3ODIyMTk=", "number": 751, "title": "Feature Request: Certificate Based Authentication (CBA)", "user": {"login": "neutronscott", "id": 746871, "node_id": "MDQ6VXNlcjc0Njg3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/746871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neutronscott", "html_url": "https://github.com/neutronscott", "followers_url": "https://api.github.com/users/neutronscott/followers", "following_url": "https://api.github.com/users/neutronscott/following{/other_user}", "gists_url": "https://api.github.com/users/neutronscott/gists{/gist_id}", "starred_url": "https://api.github.com/users/neutronscott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neutronscott/subscriptions", "organizations_url": "https://api.github.com/users/neutronscott/orgs", "repos_url": "https://api.github.com/users/neutronscott/repos", "events_url": "https://api.github.com/users/neutronscott/events{/privacy}", "received_events_url": "https://api.github.com/users/neutronscott/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 337732383, "node_id": "MDU6TGFiZWwzMzc3MzIzODM=", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-05T17:47:02Z", "updated_at": "2020-05-11T09:22:07Z", "closed_at": "2020-05-11T09:22:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to use CBA. I had it working by setting session.cert in protocol.py's raw_session. Then I took request's sample code to add cert_file in the pool without hacks to lib code.\r\n\r\nThis is what I've got\r\n\r\n```python\r\nimport requests.adapters\r\nfrom urllib3.poolmanager import PoolManager\r\nfrom exchangelib.protocol import BaseProtocol\r\nfrom exchangelib import Account, Credentials\r\n\r\nclass TLSClientAuth(requests.adapters.HTTPAdapter):\r\n    def cert_verify(self, conn, url, verify, cert):\r\n        super(TLSClientAuth, self).cert_verify(conn=conn, url=url, verify=False, cert=cert)\r\n    def init_poolmanager(self, num_pools, maxsize, block=False):\r\n        self.poolmanager = PoolManager(num_pools=num_pools, maxsize=maxsize, block=block,\r\n                cert_file='user.pem')\r\n\r\n# Tell exchangelib to use this adapter class instead of the default\r\nBaseProtocol.HTTP_ADAPTER_CLS = TLSClientAuth\r\n\r\ncredentials = Credentials('user@domain', 'dontmatter')\r\naccount = Account(\r\n        'user@domain', credentials=credentials, autodiscover=True)\r\n\r\nfor item in account.inbox.all().order_by('-datetime_received')[:100]:\r\n        print(item.subject, item.sender, item.datetime_received)\r\n```\r\n\r\nSeems to work but maybe can be better. Maybe can be an auth_type so that I don't even need to use Credentials (it's all in the cert).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/750", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/750/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/750/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/750/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/750", "id": 611949644, "node_id": "MDU6SXNzdWU2MTE5NDk2NDQ=", "number": 750, "title": "Attaching image from form to new e-mail", "user": {"login": "gregchamblin", "id": 3102990, "node_id": "MDQ6VXNlcjMxMDI5OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3102990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregchamblin", "html_url": "https://github.com/gregchamblin", "followers_url": "https://api.github.com/users/gregchamblin/followers", "following_url": "https://api.github.com/users/gregchamblin/following{/other_user}", "gists_url": "https://api.github.com/users/gregchamblin/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregchamblin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregchamblin/subscriptions", "organizations_url": "https://api.github.com/users/gregchamblin/orgs", "repos_url": "https://api.github.com/users/gregchamblin/repos", "events_url": "https://api.github.com/users/gregchamblin/events{/privacy}", "received_events_url": "https://api.github.com/users/gregchamblin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-04T15:09:23Z", "updated_at": "2020-05-05T22:54:52Z", "closed_at": "2020-05-05T22:54:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have created a form in flask the goal of which is to process the exif information of the uploaded image and email the image and the reverse geocoded address. \r\n\r\nIf I do not try to attach the image, the email sends fine.  Below is the line I am using to attach the image and the error I receive. I have not been doing this long, so let me know if I need to give you more information.\r\n\r\n> my_file = FileAttachment(\r\n>         name=f\"{wonum}.jpg\", content=image\r\n>     )\r\n\r\n> TypeError: Field '_content' value <exif._image.Image object at 0x0000014EAFA22940> must be of type <class 'bytes'>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/748", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/748/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/748/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/748/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/748", "id": 610197433, "node_id": "MDU6SXNzdWU2MTAxOTc0MzM=", "number": 748, "title": "Can't extract payload (PDF document) from a signed email", "user": {"login": "michlschmid", "id": 877285, "node_id": "MDQ6VXNlcjg3NzI4NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/877285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michlschmid", "html_url": "https://github.com/michlschmid", "followers_url": "https://api.github.com/users/michlschmid/followers", "following_url": "https://api.github.com/users/michlschmid/following{/other_user}", "gists_url": "https://api.github.com/users/michlschmid/gists{/gist_id}", "starred_url": "https://api.github.com/users/michlschmid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michlschmid/subscriptions", "organizations_url": "https://api.github.com/users/michlschmid/orgs", "repos_url": "https://api.github.com/users/michlschmid/repos", "events_url": "https://api.github.com/users/michlschmid/events{/privacy}", "received_events_url": "https://api.github.com/users/michlschmid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-30T16:09:48Z", "updated_at": "2020-05-03T07:41:57Z", "closed_at": "2020-05-03T07:41:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've a problem to parse / extract the payload (PDF document) from signed emails with ExchangeLib and can't get it to work.\r\n\r\nFor every signed email I only get the signature file extracted as the emails attachment.\r\nI also thought if i need to extract the PDF as something like a \"sub\"-attachment of the signed part of the message.\r\n\r\nI've no solution - probably you can help me pointing into the right direction...\r\n;-)\r\n\r\nI extracted the contents of the raw email contents in an abstract manner below, to get a better understanding of how the signed email is built (as I'm not really an email expert).\r\n\r\n```\r\n<<< Default Email Headers >>>\r\nFrom: me@me.com\r\nTo: you@you.com\r\nSubject: SMIME Signed Email demo\r\nDate: Fri, 30 Apr 2020 08:45:59 +0000\r\n...\r\n\r\nContent-Type: multipart/signed; protocol=\"application/x-pkcs7-signature\";\r\n    micalg=sha1; boundary=\"----66F1E86F128E7B26BC667130C2E133E5\"\r\nMIME-Version: 1.0\r\n\r\n------66F1E86F128E7B26BC667130C2E133E5\r\nContent-Type: multipart/mixed;\r\n    boundary=\"PHP-mixed-9f8e9ecffa64a5d9f5780016ecfb2858\"\r\n\r\n--PHP-mixed-9f8e9ecffa64a5d9f5780016ecfb2858\r\nContent-Type: text/plain; charset=\"utf-8\"\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<<< Signed \"plain\" Email Content >>>\r\nHello this is my Email to you!\r\n...\r\n\r\n--PHP-mixed-9f8e9ecffa64a5d9f5780016ecfb2858\r\nContent-Type: application/pdf;\r\n    name=\"Document.pdf\"\r\nContent-Transfer-Encoding: base64\r\nContent-Disposition: attachment; filename=\"Document.pdf\"\r\nContent-Description: Document.pdf\r\n\r\n<<< Signed Base64 PDF attachment content >>>\r\nVR0PAQH/BAQDAgXgMD0GCCsGAQUFBwEBBDEwLzAtBggrBgEFBQcwAYYhaHR0cDov\r\nL29jc3AuaXZiYi50ZWxlc2VjLmRlL29jc3ByMA0GCSqGSIb3DQEBCwUAA4IBAQCF\r\n6WL1clKeQrqYLDIr39eU4C9uiD1l38WaP2G0uKKOgvrf6BRsZQaz0nPBNOGYXEgW\r\n7VTHvPJ7yS5viTeE8ULWhp07VAgRO5iuiKWorcfgG1dS9nCoZQXijmvJVAdmE7li\r\nfrHqW7zFsuDP2SSu5s5Ck1Ij9TXAG3AoPxV7NxISRchvM5c9xYenVWxIypdhY5id\r\n...\r\n\r\n--PHP-mixed-9f8e9ecffa64a5d9f5780016ecfb2858--\r\n\r\n------66F1E86F128E7B26BC667130C2E133E5\r\nContent-Type: application/x-pkcs7-signature; name=\"signature.p7s\"\r\nContent-Transfer-Encoding: base64\r\nContent-Disposition: attachment; filename=\"signature.p7s\"\r\n\r\n<<< Signature file content >>>\r\nFw0xOTA0MTUxMjA1MDBaFw0yMjA0MTUyMzU5NTlaMHIxCzAJBgNVBAYTAkRFMQ0w\r\nCwYDVQQKEwRCdW5kMQwwCgYDVQQLEwNCU0kxDDAKBgNVBAsTA0JTSTEsMCoGA1UE\r\nAxMjR1JQOiBMYWdlemVudHJ1bSBQdWJsaWthdGlvbnNzeXN0ZW0xCjAIBgNVBAUT\r\nATEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCpoNHO7zZulTpNdUKE\r\nbrHwqKxn9SBnccFa8AZUP0bnMnCvDqtv1LHwj5P281uTPugmr6H6poyBcer9+1WH\r\n...\r\n\r\n------66F1E86F128E7B26BC667130C2E133E5--\r\n\r\n',\r\nid='AAMkADk4MmMzYzdiLTNjYzYtNDVlZS05OGQzLTY5OGJjNTAzOGEwOABGAAAAAADlj+7T3ckeTLjpXt43l/t1BwCe4sg7v5IITa1nU3x372ElAAAAARrXAACe4sg7v5IITa1nU3x372ElAADUYrm/AAA=',\r\nchangekey='CQAAABYAAACe4sg7v5IITa1nU3x372ElAADUYEjH',\r\nparent_folder_id=ParentFolderId(id='AAMkADk4MmMzYzdiLTNjYzYtNDVlZS05OGQzLTY5OGJjNTAzOGEwOAAuAAAAAADlj+7T3ckeTLjpXt43l/t1AQCe4sg7v5IITa1nU3x372ElAAAAARrXAAA=',\r\nchangekey='AQAAAA=='),\r\nitem_class='IPM.Note.SMIME.MultipartSigned',\r\nsubject='SMIME Signed Email demo',\r\nsensitivity='Normal',\r\ntext_body='\r\n\r\n<<< Unsigned \"plain\" Email Content >>>\r\nHello this is my Email to you!\r\n...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/747", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/747/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/747/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/747/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/747", "id": 606746522, "node_id": "MDU6SXNzdWU2MDY3NDY1MjI=", "number": 747, "title": "Read Exchange Online emails via tenant_id", "user": {"login": "piskvorky", "id": 610412, "node_id": "MDQ6VXNlcjYxMDQxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/610412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piskvorky", "html_url": "https://github.com/piskvorky", "followers_url": "https://api.github.com/users/piskvorky/followers", "following_url": "https://api.github.com/users/piskvorky/following{/other_user}", "gists_url": "https://api.github.com/users/piskvorky/gists{/gist_id}", "starred_url": "https://api.github.com/users/piskvorky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piskvorky/subscriptions", "organizations_url": "https://api.github.com/users/piskvorky/orgs", "repos_url": "https://api.github.com/users/piskvorky/repos", "events_url": "https://api.github.com/users/piskvorky/events{/privacy}", "received_events_url": "https://api.github.com/users/piskvorky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2020-04-25T11:09:02Z", "updated_at": "2020-08-13T11:24:30Z", "closed_at": "2020-05-13T07:23:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "This looks like an awesome lib, but I got lost in the authentication options.\r\n\r\nI want to read emails of a specific user `user@company.onmicrosoft.com` within Exchange Online. I have the `tenant_id`, `client_id` and `client_secret` for the whole org, set up to access whatever mailbox I want.\r\n\r\nHere's what I tried, based on your README:\r\n\r\n```python\r\n>>> credentials = OAuth2Credentials(client_id='<my_client_id>', client_secret='<my_client_secret>', tenant_id='<my_tenant_id>')\r\n>>> config = Configuration(credentials=credentials, auth_type=OAUTH2)\r\n>>> a = Account('user@company.onmicrosoft.com', config=config)\r\nAttributeError: 'config.service_endpoint' must be set\r\n\r\n>>> a = Account('user@company.onmicrosoft.com', config=config, autodiscover=True)\r\nValueError: Auth type must be 'OAuth 2.0' for credentials type OAuth2Credentials\r\n```\r\n\r\nWhat's the correct way?\r\n\r\nI'm just starting to wrap my head around the whole Office API ecosystem, sorry if I'm way off.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/746", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/746/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/746/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/746/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/746", "id": 605900199, "node_id": "MDU6SXNzdWU2MDU5MDAxOTk=", "number": 746, "title": "CalendarItem: Updating required attendees triggers email to all", "user": {"login": "MHC2000", "id": 10467825, "node_id": "MDQ6VXNlcjEwNDY3ODI1", "avatar_url": "https://avatars2.githubusercontent.com/u/10467825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MHC2000", "html_url": "https://github.com/MHC2000", "followers_url": "https://api.github.com/users/MHC2000/followers", "following_url": "https://api.github.com/users/MHC2000/following{/other_user}", "gists_url": "https://api.github.com/users/MHC2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/MHC2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MHC2000/subscriptions", "organizations_url": "https://api.github.com/users/MHC2000/orgs", "repos_url": "https://api.github.com/users/MHC2000/repos", "events_url": "https://api.github.com/users/MHC2000/events{/privacy}", "received_events_url": "https://api.github.com/users/MHC2000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-23T21:55:59Z", "updated_at": "2020-04-24T08:23:52Z", "closed_at": "2020-04-24T08:23:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have difficulties zu update an existing CalendarItem.\r\nWhen I change the required attendees and nothing else and also choose SEND_TO_CHANGED_AND_SAVE_COPY exchange sends the calendar update to everyone and not only to the removed or added users.\r\nWhat am I doing wrong?\r\nTest code:\r\n\r\n```python\r\n...\r\news_connection = Account(primary_smtp_address='admin@test.com', config=config, autodiscover=False, access_type=DELEGATE)\r\ncalendar_item = ews_connection.calendar.get(id=search_event_item_id)\r\ncalendar_item.required_attendees = ['address1@test.com', 'address2@test.com']\r\ncalendar_item.save(update_fields=['required_attendees'], send_meeting_invitations=SEND_TO_CHANGED_AND_SAVE_COPY)\r\n\r\ncalendar_item.required_attendees = ['address1@test.com', 'address3@test.com']\r\ncalendar_item.save(update_fields=['required_attendees'], send_meeting_invitations=SEND_TO_CHANGED_AND_SAVE_COPY)\r\n```\r\n\r\nThe email `address1@test.com` is triggered all the time and gets an update for the calendar entry.\r\nAm I wrong to choose `SEND_TO_CHANGED_AND_SAVE_COPY`? As far as I understand EWS it shouldn't trigger address1 to send an update?\r\n\r\nDoes anyone have an idea what I'm doing wrong or is this a bug?\r\nThanks for the help?\r\n\r\nRegards,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/745", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/745/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/745/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/745/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/745", "id": 603872843, "node_id": "MDU6SXNzdWU2MDM4NzI4NDM=", "number": 745, "title": "how to get the item id for a message", "user": {"login": "Liwenhui02", "id": 64071779, "node_id": "MDQ6VXNlcjY0MDcxNzc5", "avatar_url": "https://avatars2.githubusercontent.com/u/64071779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Liwenhui02", "html_url": "https://github.com/Liwenhui02", "followers_url": "https://api.github.com/users/Liwenhui02/followers", "following_url": "https://api.github.com/users/Liwenhui02/following{/other_user}", "gists_url": "https://api.github.com/users/Liwenhui02/gists{/gist_id}", "starred_url": "https://api.github.com/users/Liwenhui02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Liwenhui02/subscriptions", "organizations_url": "https://api.github.com/users/Liwenhui02/orgs", "repos_url": "https://api.github.com/users/Liwenhui02/repos", "events_url": "https://api.github.com/users/Liwenhui02/events{/privacy}", "received_events_url": "https://api.github.com/users/Liwenhui02/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-21T10:04:35Z", "updated_at": "2020-04-27T15:46:47Z", "closed_at": "2020-04-24T06:13:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a system which can scan exchange emal body and attachment. The result will be json data of a email if it matches some rules.\r\n\r\nI want to move user's email  to a public account's inbox,according as the returned json data.\r\n\r\nI list all the returned json data of a email.\r\n```json\r\n  \"fileCreatedTime\":\"2020-03-13\u00a016:15:36\",\r\n  \"fileChecksum\":\"f556b9d212c0b151e302f184039268b9\",\r\n  \u00a0\"fileModifiedTime\":\"2020-03-13\u00a016:15:00\",\r\n   \"filePath\":\"smith@test.com/inbox/test mail\",\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\"folderPath\":\"smith@test.com/inbox\",\r\n     \u00a0\"filename\":\"test mail\",\r\n```\r\n\r\nI found that if I only use \"subject\" Eg.\"test mail\" of message was insufficient to get item id. \r\n\r\nI don't know whether I can obtain a item id with these json data ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/744", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/744/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/744/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/744/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/744", "id": 598531844, "node_id": "MDU6SXNzdWU1OTg1MzE4NDQ=", "number": 744, "title": "Exception in _get_elements: Traceback (most recent call last):  ... site-packages\\cached_property.py\", line 69, in __get__     return obj_dict[name] KeyError: 'sent'", "user": {"login": "h888866j", "id": 16606957, "node_id": "MDQ6VXNlcjE2NjA2OTU3", "avatar_url": "https://avatars0.githubusercontent.com/u/16606957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h888866j", "html_url": "https://github.com/h888866j", "followers_url": "https://api.github.com/users/h888866j/followers", "following_url": "https://api.github.com/users/h888866j/following{/other_user}", "gists_url": "https://api.github.com/users/h888866j/gists{/gist_id}", "starred_url": "https://api.github.com/users/h888866j/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h888866j/subscriptions", "organizations_url": "https://api.github.com/users/h888866j/orgs", "repos_url": "https://api.github.com/users/h888866j/repos", "events_url": "https://api.github.com/users/h888866j/events{/privacy}", "received_events_url": "https://api.github.com/users/h888866j/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-12T17:23:00Z", "updated_at": "2020-06-28T03:29:42Z", "closed_at": "2020-04-20T12:17:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "### KeyError: 'sent'\r\nI searched around, but did not find similar issue on the web.\r\nIssue is not persistent, my colleague have met this error several times, and today I met an error quite similar this one. `KeyError: 'sent'`. Error was triggered when i tried to use send_and_save method of Items. Before I sent email, I used this lib to retrieve some emails from inbox folder, all succeed.  \r\n\r\nActually the error i met today is a little bit different from the one posted here. The one here is from my colleague.  I forgot to pasted errors to notepad++ but forget to save and no autosaved version found as well. But the error itself is quite the same....the `KeyError: 'sent'` of cached_property, the `m.send_and_save()` throw error.\r\n\r\nI tried to run script again, all working then....\r\n\r\nWhen I met this error next time or get another error report from my colleague, I will post it here. \r\n\r\n```\r\nEWS https://mail.yyy.com/ews/exchange.asmx, account xxx@yyy.com: Exception in _get_elements: Traceback (most recent call last):\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\cached_property.py\", line 69, in __get__\r\n    return obj_dict[name]\r\nKeyError: 'sent'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\services\\common.py\", line 71, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\services\\common.py\", line 128, in _get_response_xml\r\n    r, session = post_ratelimited(\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\util.py\", line 724, in post_ratelimited\r\n    _raise_response_errors(r, protocol, log_msg, log_vals)  # Always raises an exception\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\util.py\", line 796, in _raise_response_errors\r\n    raise response.headers['TimeoutException']\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\util.py\", line 677, in post_ratelimited\r\n    r = session.post(url=url, headers=headers, data=data, allow_redirects=False, timeout=protocol.TIMEOUT,\r\n File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\sessions.py\", line 581, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\sessions.py\", line 646, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\adapters.py\", line 498, in send\r\n    raise ConnectionError(err, request=request)\r\nrequests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\cached_property.py\", line 69, in __get__\r\n    return obj_dict[name]\r\nKeyError: 'sent'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\user01\\Documents\\ETautomation\\bin\\bin.py\", line 386, in <module>\r\n    b.send_mail(\r\n  File \"C:\\Users\\user01\\Documents\\ETautomation\\module\\email_check.py\", line 133, in send_mail\r\n    m.send_and_save()\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\items.py\", line 759, in send_and_save\r\n    res = self._create(\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\items.py\", line 288, in _create\r\n    res = self.account.bulk_create(\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\account.py\", line 378, in bulk_create\r\n    folder = self.sent  # 'Sent' is default EWS behaviour\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\cached_property.py\", line 73, in __get__\r\n    return obj_dict.setdefault(name, self.func(obj))\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\account.py\", line 249, in sent\r\n    return self.root.get_default_folder(SentItems)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\folders\\roots.py\", line 216, in get_default_folder\r\n    return super(Root, self).get_default_folder(folder_cls)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\folders\\roots.py\", line 122, in get_default_folder\r\n    return folder_cls.get_distinguished(root=self)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\folders\\base.py\", line 612, in get_distinguished\r\n    return cls.resolve(\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\folders\\base.py\", line 501, in resolve\r\n    folders = list(FolderCollection(account=account, folders=[folder]).resolve())\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\folders\\collections.py\", line 234, in resolve\r\n    for f in self.__class__(account=self.account, folders=resolveable_folders).get_folders(\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\folders\\collections.py\", line 294, in get_folders\r\n    for f in GetFolder(account=self.account).call(\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\services\\get_folder.py\", line 28, in call\r\n    for folder, elem in zip(folders_list, self._get_elements(payload=self.get_payload(\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\services\\common.py\", line 71, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\services\\common.py\", line 128, in _get_response_xml\r\n    r, session = post_ratelimited(\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\util.py\", line 724, in post_ratelimited\r\n    _raise_response_errors(r, protocol, log_msg, log_vals)  # Always raises an exception\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\util.py\", line 796, in _raise_response_errors\r\n    raise response.headers['TimeoutException']\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\exchangelib\\util.py\", line 677, in post_ratelimited\r\n    r = session.post(url=url, headers=headers, data=data, allow_redirects=False, timeout=protocol.TIMEOUT,\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\sessions.py\", line 581, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\sessions.py\", line 646, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"C:\\Users\\user01\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\requests\\adapters.py\", line 498, in send\r\n    raise ConnectionError(err, request=request)\r\nrequests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/743", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/743/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/743/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/743/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/743", "id": 597718167, "node_id": "MDU6SXNzdWU1OTc3MTgxNjc=", "number": 743, "title": "Consider using SmtpAddress for an impersonation", "user": {"login": "s-limo", "id": 1849760, "node_id": "MDQ6VXNlcjE4NDk3NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1849760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s-limo", "html_url": "https://github.com/s-limo", "followers_url": "https://api.github.com/users/s-limo/followers", "following_url": "https://api.github.com/users/s-limo/following{/other_user}", "gists_url": "https://api.github.com/users/s-limo/gists{/gist_id}", "starred_url": "https://api.github.com/users/s-limo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s-limo/subscriptions", "organizations_url": "https://api.github.com/users/s-limo/orgs", "repos_url": "https://api.github.com/users/s-limo/repos", "events_url": "https://api.github.com/users/s-limo/events{/privacy}", "received_events_url": "https://api.github.com/users/s-limo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 337732383, "node_id": "MDU6TGFiZWwzMzc3MzIzODM=", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-10T06:16:37Z", "updated_at": "2020-04-23T11:52:39Z", "closed_at": "2020-04-23T11:52:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider using SmtpAddress isntead of PrimarySmtpAddress for impersonation. While PrimarySmtpAddress looks correct value according to documentation (https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/connectingsid) it causes some problems.\r\n\r\n**Issue**\r\nI tried to subscribe to push notifications using code from #355 as base. I was able to subscribe (received subscription ID), however later did not receive any change events. I was able to fix by changing impersonation part of message  to use SmtpAddress isntead of PrimarySmtpAddress\r\n\r\ntransport.py line 71:\r\n`            #  add_xml_child(connectingsid, 't:PrimarySmtpAddress', account.primary_smtp_address)\r\n            add_xml_child(connectingsid, 't:SmtpAddress', account.primary_smtp_address)`\r\n\r\n**Additional details**\r\nTo debug issue I tried to reproduce similar behavior using Microsoft.Exchange.WebServices managed API with .NET. Here are results:\r\n- API allows to select what kind of impersonation to use:\r\n![image](https://user-images.githubusercontent.com/1849760/78967482-44f53a00-7b0b-11ea-867a-00890a3c0d0e.png) (and for some reason there is no \"PrimarySmtpAddress \"\r\n- when using SmtpAddress (not suprise) it produces XML which uses SmtpAddress  as Connection ID:\r\n```<Trace Tag=\"EwsRequest\" Tid=\"1\" Time=\"2020-04-09 06:59:58Z\" Version=\"14.02.0051.000\">\r\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n  <soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <soap:Header>\r\n      <t:RequestServerVersion Version=\"Exchange2010_SP1\" />\r\n      <t:ExchangeImpersonation>\r\n        <t:ConnectingSID>\r\n          <t:SmtpAddress>kitchen@tenant.onmicrosoft.com</t:SmtpAddress>\r\n        </t:ConnectingSID>\r\n      </t:ExchangeImpersonation>\r\n    </soap:Header>\r\n    <soap:Body>\r\n      <m:GetFolder>\r\n        <m:FolderShape>\r\n          <t:BaseShape>IdOnly</t:BaseShape>\r\n        </m:FolderShape>\r\n        <m:FolderIds>\r\n          <t:DistinguishedFolderId Id=\"calendar\" />\r\n        </m:FolderIds>\r\n      </m:GetFolder>\r\n    </soap:Body>\r\n  </soap:Envelope>\r\n</Trace>\r\n```\r\n\r\nOf course the best solution would be to allow choose which connection type to use, but as simple (and nonbraking?) fix would be to use SmtpAddress instead of PrimarySmtpAddress \r\n\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/742", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/742/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/742/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/742/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/742", "id": 597331139, "node_id": "MDU6SXNzdWU1OTczMzExMzk=", "number": 742, "title": "Get Folder by ID", "user": {"login": "xkobal", "id": 1136820, "node_id": "MDQ6VXNlcjExMzY4MjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1136820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xkobal", "html_url": "https://github.com/xkobal", "followers_url": "https://api.github.com/users/xkobal/followers", "following_url": "https://api.github.com/users/xkobal/following{/other_user}", "gists_url": "https://api.github.com/users/xkobal/gists{/gist_id}", "starred_url": "https://api.github.com/users/xkobal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xkobal/subscriptions", "organizations_url": "https://api.github.com/users/xkobal/orgs", "repos_url": "https://api.github.com/users/xkobal/repos", "events_url": "https://api.github.com/users/xkobal/events{/privacy}", "received_events_url": "https://api.github.com/users/xkobal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-04-09T14:40:17Z", "updated_at": "2020-04-17T13:33:24Z", "closed_at": "2020-04-17T13:33:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI would like to know if it is possible to get a folder by its Exchange ID (Folder.id) instead of its name ?\r\n\r\nI have test a lot of different methods without success.\r\n\r\nThanks for your help and your great work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/741", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/741/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/741/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/741/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/741", "id": 596305389, "node_id": "MDU6SXNzdWU1OTYzMDUzODk=", "number": 741, "title": "how to convert eml to pst?", "user": {"login": "kexin9752", "id": 52389889, "node_id": "MDQ6VXNlcjUyMzg5ODg5", "avatar_url": "https://avatars2.githubusercontent.com/u/52389889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kexin9752", "html_url": "https://github.com/kexin9752", "followers_url": "https://api.github.com/users/kexin9752/followers", "following_url": "https://api.github.com/users/kexin9752/following{/other_user}", "gists_url": "https://api.github.com/users/kexin9752/gists{/gist_id}", "starred_url": "https://api.github.com/users/kexin9752/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kexin9752/subscriptions", "organizations_url": "https://api.github.com/users/kexin9752/orgs", "repos_url": "https://api.github.com/users/kexin9752/repos", "events_url": "https://api.github.com/users/kexin9752/events{/privacy}", "received_events_url": "https://api.github.com/users/kexin9752/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T04:47:41Z", "updated_at": "2020-04-14T08:41:48Z", "closed_at": "2020-04-14T08:38:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have got the files of eml,how I packed those eml files to pst file?\r\nI don't have much hope for this problem\uff0cbecause i searching for the question too long\r\nthank you!\r\nThank you for answering my last question.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/739", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/739/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/739/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/739", "id": 592831163, "node_id": "MDU6SXNzdWU1OTI4MzExNjM=", "number": 739, "title": "Does the request mime content not support concurrency\uff1f", "user": {"login": "kexin9752", "id": 52389889, "node_id": "MDQ6VXNlcjUyMzg5ODg5", "avatar_url": "https://avatars2.githubusercontent.com/u/52389889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kexin9752", "html_url": "https://github.com/kexin9752", "followers_url": "https://api.github.com/users/kexin9752/followers", "following_url": "https://api.github.com/users/kexin9752/following{/other_user}", "gists_url": "https://api.github.com/users/kexin9752/gists{/gist_id}", "starred_url": "https://api.github.com/users/kexin9752/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kexin9752/subscriptions", "organizations_url": "https://api.github.com/users/kexin9752/orgs", "repos_url": "https://api.github.com/users/kexin9752/repos", "events_url": "https://api.github.com/users/kexin9752/events{/privacy}", "received_events_url": "https://api.github.com/users/kexin9752/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-02T18:13:31Z", "updated_at": "2020-04-14T08:32:59Z", "closed_at": "2020-04-14T08:32:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n    #part of code\r\n    qs = account.inbox.filter(is_read=False).only('attachments')\r\n    qs.page_size = 1\r\n    item = next(qs.iterator())\r\n    item = item.attachments[0].item\r\n```\r\n\r\nUsing Multithreading to do the code snippet,it consume more and more time than single thread\r\n'item = item.attachments[0].item',Does this code not support Concurrent\uff1fhas it locking?\r\nI need you help\r\nI want to download too lager and too many mail to local,how i do?\r\nthank you very very very much!!!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/737", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/737/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/737/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/737/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/737", "id": 592572739, "node_id": "MDU6SXNzdWU1OTI1NzI3Mzk=", "number": 737, "title": "Tracking moved messages", "user": {"login": "fdroessler", "id": 11539266, "node_id": "MDQ6VXNlcjExNTM5MjY2", "avatar_url": "https://avatars1.githubusercontent.com/u/11539266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fdroessler", "html_url": "https://github.com/fdroessler", "followers_url": "https://api.github.com/users/fdroessler/followers", "following_url": "https://api.github.com/users/fdroessler/following{/other_user}", "gists_url": "https://api.github.com/users/fdroessler/gists{/gist_id}", "starred_url": "https://api.github.com/users/fdroessler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fdroessler/subscriptions", "organizations_url": "https://api.github.com/users/fdroessler/orgs", "repos_url": "https://api.github.com/users/fdroessler/repos", "events_url": "https://api.github.com/users/fdroessler/events{/privacy}", "received_events_url": "https://api.github.com/users/fdroessler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-02T11:53:05Z", "updated_at": "2020-04-15T12:55:38Z", "closed_at": "2020-04-15T12:55:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am new to this library so I hope you'll excuse if this is answered somewhere but I could not find anything so far.\r\nI have noticed that when a message is moved to another folder the message id changes. Is there any unique identifier that would allow to find where a message was moved? I know that potentially I could find an email by using search by subject etc. but there are sometimes duplicates and a unique identifier would make things easier to keep track.\r\n\r\nMany thanks for any pointers in that matter.\r\n\r\nCheers,\r\nFlorian", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/736", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/736/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/736/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/736/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/736", "id": 591443588, "node_id": "MDU6SXNzdWU1OTE0NDM1ODg=", "number": 736, "title": "BaseFolder.glob() case-sensitivity depends on operating system", "user": {"login": "dmcgee", "id": 737568, "node_id": "MDQ6VXNlcjczNzU2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/737568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmcgee", "html_url": "https://github.com/dmcgee", "followers_url": "https://api.github.com/users/dmcgee/followers", "following_url": "https://api.github.com/users/dmcgee/following{/other_user}", "gists_url": "https://api.github.com/users/dmcgee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmcgee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmcgee/subscriptions", "organizations_url": "https://api.github.com/users/dmcgee/orgs", "repos_url": "https://api.github.com/users/dmcgee/repos", "events_url": "https://api.github.com/users/dmcgee/events{/privacy}", "received_events_url": "https://api.github.com/users/dmcgee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-31T21:31:12Z", "updated_at": "2020-04-02T18:32:11Z", "closed_at": "2020-04-02T18:32:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`BaseFolder.glob()` may or may not perform a case-sensitive match depending on the operating system on which it runs: on Windows, matches are case-insensitive; everywhere else they're case-sensitive.\r\n\r\n`glob()` (via `_glob()`) uses `fnmatch.fnmatch()` to check candidate folders against the pattern, and `fnmatch()` normalizes its parameters using `os.path.normcase()`. However, `normcase()` is written with local filesystem operations in mind, and whether or not it's case-sensitive depends on the operating system.\r\n\r\nSince Exchange folder names are case-insensitive, the desired (or at least default) behavior is probably always searching case-insensitively. If it's useful to allow case-sensitive searching, `glob()` should take an option to enable that, and `fnmatch()` should not be allowed to affect the chosen behavior.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/735", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/735/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/735/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/735/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/735", "id": 590448320, "node_id": "MDU6SXNzdWU1OTA0NDgzMjA=", "number": 735, "title": "OAuth2Credentials requires SOAP impersonation headers unconditionally", "user": {"login": "axk7812", "id": 40435241, "node_id": "MDQ6VXNlcjQwNDM1MjQx", "avatar_url": "https://avatars3.githubusercontent.com/u/40435241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axk7812", "html_url": "https://github.com/axk7812", "followers_url": "https://api.github.com/users/axk7812/followers", "following_url": "https://api.github.com/users/axk7812/following{/other_user}", "gists_url": "https://api.github.com/users/axk7812/gists{/gist_id}", "starred_url": "https://api.github.com/users/axk7812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axk7812/subscriptions", "organizations_url": "https://api.github.com/users/axk7812/orgs", "repos_url": "https://api.github.com/users/axk7812/repos", "events_url": "https://api.github.com/users/axk7812/events{/privacy}", "received_events_url": "https://api.github.com/users/axk7812/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 337732381, "node_id": "MDU6TGFiZWwzMzc3MzIzODE=", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-03-30T17:03:40Z", "updated_at": "2020-04-30T04:34:59Z", "closed_at": "2020-04-30T04:34:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to connect to an email using Microsoft exchange with this library. Here is the code I'm using :\r\n\r\n```python\r\nfrom exchangelib import Account, FileAttachment, ItemAttachment, Message, \r\nOAUTH2, Configuration, OAuth2Credentials\r\n\r\nclient_id = \"xxxx\"\r\nclient_secret = \"xxxx\"\r\ntenant_id = \"xxxx\"\r\naddress = \"myemail@domain.com\"\r\n\r\ncredentials = OAuth2Credentials(\r\n    client_id=client_id,\r\n    client_secret=client_secret,\r\n    tenant_id=tenant_id\r\n)\r\n\r\nconfig = Configuration(\r\n    credentials=credentials,\r\n    auth_type=OAUTH2\r\n)\r\n\r\naccount = Account(primary_smtp_address=address, autodiscover=True, config=config)\r\n\r\nfor item in account.inbox.all():\r\n    print(\"got item \", item.sender)\r\n```\r\n\r\n\r\n\r\nWhen I put in my credentials and run this program I get the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:/Users/axk7812/Documents/Work/general-data/voip/run.py\", line 42, in <module>\r\n    email_3()\r\n  File \"C:/Users/axk7812/Documents/Work/general-data/voip/run.py\", line 22, in email_3\r\n    account = Account(primary_smtp_address=address, autodiscover=True, config=config)\r\n  File \"C:\\Users\\axk7812\\AppData\\Local\\Continuum\\anaconda3\\envs\\voip\\lib\\site-packages\\exchangelib\\account.py\", line 85, in __init__\r\n    self.ad_response, self.protocol = discover(\r\n  File \"C:\\Users\\axk7812\\AppData\\Local\\Continuum\\anaconda3\\envs\\voip\\lib\\site-packages\\exchangelib\\autodiscover\\discovery.py\", line 23, in discover\r\n    return Autodiscovery(\r\n  File \"C:\\Users\\axk7812\\AppData\\Local\\Continuum\\anaconda3\\envs\\voip\\lib\\site-packages\\exchangelib\\autodiscover\\discovery.py\", line 99, in discover\r\n    ad_response = self._step_1(hostname=domain)\r\n  File \"C:\\Users\\axk7812\\AppData\\Local\\Continuum\\anaconda3\\envs\\voip\\lib\\site-packages\\exchangelib\\autodiscover\\discovery.py\", line 329, in _step_1\r\n    is_valid_response, ad = self._attempt_response(url=url)\r\n  File \"C:\\Users\\axk7812\\AppData\\Local\\Continuum\\anaconda3\\envs\\voip\\lib\\site-packages\\exchangelib\\autodiscover\\discovery.py\", line 289, in _attempt_response\r\n    ad_protocol = AutodiscoverProtocol(\r\n  File \"C:\\Users\\axk7812\\AppData\\Local\\Continuum\\anaconda3\\envs\\voip\\lib\\site-packages\\exchangelib\\protocol.py\", line 73, in __init__\r\n    self._session_pool = self._create_session_pool()\r\n  File \"C:\\Users\\axk7812\\AppData\\Local\\Continuum\\anaconda3\\envs\\voip\\lib\\site-packages\\exchangelib\\protocol.py\", line 160, in _create_session_pool\r\n    session_pool.put(self.create_session(), block=False)\r\n  File \"C:\\Users\\axk7812\\AppData\\Local\\Continuum\\anaconda3\\envs\\voip\\lib\\site-packages\\exchangelib\\protocol.py\", line 237, in create_session\r\n    session = self.create_oauth2_session()\r\n  File \"C:\\Users\\axk7812\\AppData\\Local\\Continuum\\anaconda3\\envs\\voip\\lib\\site-packages\\exchangelib\\protocol.py\", line 265, in create_oauth2_session\r\n    raise ValueError('Auth type must be %r for credentials type OAuth2Credentials' % OAUTH2)\r\nValueError: Auth type must be 'OAuth 2.0' for credentials type OAuth2Credentials\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\nSomehow exchangelib is telling me I'm not setting OAuth but if you look in my Configuration setup I am setting it there. Am I doing something wrong here? \r\n\r\nTested this on both Windows 10 and Amazon Linux AMI 2018.03 (rhel fedora) using Python 3.8.1, and Exchangelib 3.1.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/734", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/734/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/734/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/734/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/734", "id": 583275379, "node_id": "MDU6SXNzdWU1ODMyNzUzNzk=", "number": 734, "title": "Create new contact in public folder", "user": {"login": "vertex-live", "id": 48667627, "node_id": "MDQ6VXNlcjQ4NjY3NjI3", "avatar_url": "https://avatars3.githubusercontent.com/u/48667627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vertex-live", "html_url": "https://github.com/vertex-live", "followers_url": "https://api.github.com/users/vertex-live/followers", "following_url": "https://api.github.com/users/vertex-live/following{/other_user}", "gists_url": "https://api.github.com/users/vertex-live/gists{/gist_id}", "starred_url": "https://api.github.com/users/vertex-live/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vertex-live/subscriptions", "organizations_url": "https://api.github.com/users/vertex-live/orgs", "repos_url": "https://api.github.com/users/vertex-live/repos", "events_url": "https://api.github.com/users/vertex-live/events{/privacy}", "received_events_url": "https://api.github.com/users/vertex-live/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-17T20:22:02Z", "updated_at": "2020-03-25T16:32:00Z", "closed_at": "2020-03-18T22:15:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not sure if I miss it in the documentation, but I can't find anything on creating a contact in a public folde.r\r\n\r\nI can find my folders and extract contacts just fine, but I can't find a flow to create items.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/733", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/733/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/733/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/733/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/733", "id": 582866354, "node_id": "MDU6SXNzdWU1ODI4NjYzNTQ=", "number": 733, "title": "How can i filter emails with a date range", "user": {"login": "niernier007", "id": 40687119, "node_id": "MDQ6VXNlcjQwNjg3MTE5", "avatar_url": "https://avatars1.githubusercontent.com/u/40687119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niernier007", "html_url": "https://github.com/niernier007", "followers_url": "https://api.github.com/users/niernier007/followers", "following_url": "https://api.github.com/users/niernier007/following{/other_user}", "gists_url": "https://api.github.com/users/niernier007/gists{/gist_id}", "starred_url": "https://api.github.com/users/niernier007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niernier007/subscriptions", "organizations_url": "https://api.github.com/users/niernier007/orgs", "repos_url": "https://api.github.com/users/niernier007/repos", "events_url": "https://api.github.com/users/niernier007/events{/privacy}", "received_events_url": "https://api.github.com/users/niernier007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-17T09:15:14Z", "updated_at": "2020-03-19T07:13:55Z", "closed_at": "2020-03-19T07:13:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to filter emails received before 2020-3-13 and after 2020-3-11. Is it right using the below code?\r\nBut i can not get anything in the for loop. \r\nWho can help me? Thanks.\r\n\r\n```python\r\nstart = account.default_timezone.localize(EWSDateTime(2020, 3, 11))\r\nend = account.default_timezone.localize(EWSDateTime(2020, 3, 13))\r\nqs = account.calendar.all()\r\nitems = qs.filter(start__range=(start, end))  # Returns items within range\r\nfor item in items:\r\n      print(item.start, item.end, item.subject, item.body, item.location)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/732", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/732/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/732/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/732/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/732", "id": 580477195, "node_id": "MDU6SXNzdWU1ODA0NzcxOTU=", "number": 732, "title": "Create Message object from .msg file", "user": {"login": "joanrodriguezr", "id": 14201057, "node_id": "MDQ6VXNlcjE0MjAxMDU3", "avatar_url": "https://avatars1.githubusercontent.com/u/14201057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joanrodriguezr", "html_url": "https://github.com/joanrodriguezr", "followers_url": "https://api.github.com/users/joanrodriguezr/followers", "following_url": "https://api.github.com/users/joanrodriguezr/following{/other_user}", "gists_url": "https://api.github.com/users/joanrodriguezr/gists{/gist_id}", "starred_url": "https://api.github.com/users/joanrodriguezr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joanrodriguezr/subscriptions", "organizations_url": "https://api.github.com/users/joanrodriguezr/orgs", "repos_url": "https://api.github.com/users/joanrodriguezr/repos", "events_url": "https://api.github.com/users/joanrodriguezr/events{/privacy}", "received_events_url": "https://api.github.com/users/joanrodriguezr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-13T09:31:07Z", "updated_at": "2020-07-20T06:27:05Z", "closed_at": "2020-03-18T10:29:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Eric,\r\n\r\nFirst of all thanks for your support, it's always appreciated. \r\n\r\nI have an email with a .zip attachment which is a .msg file. That .msg file is the one I have to analyze with my scripts in a recursive way as if it was a Message within the inbox.\r\n\r\nI guess if I can create a Message() or something similar from the .msg file\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/731", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/731/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/731/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/731/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/731", "id": 580255825, "node_id": "MDU6SXNzdWU1ODAyNTU4MjU=", "number": 731, "title": "Ambitions to ActiveSync?", "user": {"login": "alfonsrv", "id": 48770755, "node_id": "MDQ6VXNlcjQ4NzcwNzU1", "avatar_url": "https://avatars3.githubusercontent.com/u/48770755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alfonsrv", "html_url": "https://github.com/alfonsrv", "followers_url": "https://api.github.com/users/alfonsrv/followers", "following_url": "https://api.github.com/users/alfonsrv/following{/other_user}", "gists_url": "https://api.github.com/users/alfonsrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/alfonsrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alfonsrv/subscriptions", "organizations_url": "https://api.github.com/users/alfonsrv/orgs", "repos_url": "https://api.github.com/users/alfonsrv/repos", "events_url": "https://api.github.com/users/alfonsrv/events{/privacy}", "received_events_url": "https://api.github.com/users/alfonsrv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-12T22:20:32Z", "updated_at": "2020-03-18T10:28:09Z", "closed_at": "2020-03-18T10:28:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there any ambitions to implement [Active Sync](https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-ashttp/4cbf28dc-2876-41c6-9d87-ba9db86cd40d?redirectedfrom=MSDN) to provide an alternative way to interact with servers that are not only Exchange or, alternatively Exchange servers that don't have EWS enabled? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/730", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/730/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/730/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/730/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/730", "id": 578824953, "node_id": "MDU6SXNzdWU1Nzg4MjQ5NTM=", "number": 730, "title": "python Is it possible to convert item.datetime_received to localtimezone", "user": {"login": "pythonRookie94", "id": 62034563, "node_id": "MDQ6VXNlcjYyMDM0NTYz", "avatar_url": "https://avatars0.githubusercontent.com/u/62034563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pythonRookie94", "html_url": "https://github.com/pythonRookie94", "followers_url": "https://api.github.com/users/pythonRookie94/followers", "following_url": "https://api.github.com/users/pythonRookie94/following{/other_user}", "gists_url": "https://api.github.com/users/pythonRookie94/gists{/gist_id}", "starred_url": "https://api.github.com/users/pythonRookie94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pythonRookie94/subscriptions", "organizations_url": "https://api.github.com/users/pythonRookie94/orgs", "repos_url": "https://api.github.com/users/pythonRookie94/repos", "events_url": "https://api.github.com/users/pythonRookie94/events{/privacy}", "received_events_url": "https://api.github.com/users/pythonRookie94/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-10T19:56:30Z", "updated_at": "2020-03-18T10:29:29Z", "closed_at": "2020-03-18T10:29:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n    # date\r\n    date_initial = datetime.now()\r\n    date_year = int((date_initial.strftime(\"%Y\")))\r\n    date_month = int((date_initial.strftime(\"%-m\")))\r\n    date_day = int((date_initial.strftime(\"%-d\")))\r\n    print(date_year)\r\n    print(date_month)\r\n    print(date_day)\r\n    \r\n    # file name\r\n    file_date_val = datetime.now() - timedelta(days=1)\r\n    file_path = \"/home/shivam/PycharmProjects/Exchange2/Logs/\"\r\n    file_date = (file_date_val.strftime(\"%m-%d-%Y\"))\r\n    text = \" - sent report full.txt\"\r\n    fileName = file_path+file_date + text\r\n    \r\n    start_localTz=account.default_timezone.localize(EWSDateTime(year=date_year, month=date_month, day=date_day)) - timedelta(days=1)\r\n    end_localTz=account.default_timezone.localize(EWSDateTime(year=date_year, month=date_month, day=date_day))\r\n    print(start_localTz)\r\n    print(end_localTz)\r\n    \r\n    #gather information on top email in the sent mailbox ordered by datetime received\r\n    for item in account.sent.all().order_by('-datetime_received')[:1]:\r\n    \r\n            date = item.datetime_received\r\n            print(date)\r\n    \r\n            #convert item.datetime_received to local timezone\r\n            date_rcvd = account.default_timezone(EWSDateTime(item.datetime_received))\r\n            print(date_rcvd)\r\n```\r\n\r\nthe output of this give me \r\n\r\n\r\n```\r\n    2020\r\n    3\r\n    10\r\n    2020-03-09 00:00:00-04:00\r\n    2020-03-10 00:00:00-04:00\r\n    2020-03-10 19:42:24+00:00\r\n    Traceback (most recent call last):\r\n      File \"test.py\", line 63, in <module>\r\n        date_rcvd = account.default_timezone(EWSDateTime(item.datetime_received))\r\n      File \"/home/shivam/PycharmProjects/Exchange2/venv/lib64/python3.6/site-packages/exchangelib/ewsdatetime.py\", line 97, in __new__\r\n        return super().__new__(cls, *args, **kwargs)\r\n    TypeError: an integer is required (got type EWSDateTime)\r\n\r\n```\r\nwhen i ran this script before daylight saving went into affect (this does not include the error I get above as of right now as its the same)\r\n\r\n```\r\n    2020-03-05 00:00:00-05:00\r\n    2020-03-06 00:00:00-05:00\r\n```\r\n\r\nSo what I am having difficulties is with converting the time to UTC since the exchangelib library outputs datetime_received as UTC. When the script runs I need the datetime_received (exchangelib) converted to UTC. I need the script to be able to convert from Eastern Standard Time or Eastern Daylight Time to the correct UTC time. Also I am very new to python and I am creating a script to check all emails in the sent box of a shared calendar and this is the last hurdle I need to cross.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/729", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/729/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/729/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/729/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/729", "id": 578458775, "node_id": "MDU6SXNzdWU1Nzg0NTg3NzU=", "number": 729, "title": "Permissions on Mailbox/Folder", "user": {"login": "fury-git91", "id": 19947315, "node_id": "MDQ6VXNlcjE5OTQ3MzE1", "avatar_url": "https://avatars1.githubusercontent.com/u/19947315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fury-git91", "html_url": "https://github.com/fury-git91", "followers_url": "https://api.github.com/users/fury-git91/followers", "following_url": "https://api.github.com/users/fury-git91/following{/other_user}", "gists_url": "https://api.github.com/users/fury-git91/gists{/gist_id}", "starred_url": "https://api.github.com/users/fury-git91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fury-git91/subscriptions", "organizations_url": "https://api.github.com/users/fury-git91/orgs", "repos_url": "https://api.github.com/users/fury-git91/repos", "events_url": "https://api.github.com/users/fury-git91/events{/privacy}", "received_events_url": "https://api.github.com/users/fury-git91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-10T09:53:59Z", "updated_at": "2020-04-15T12:53:55Z", "closed_at": "2020-04-15T12:53:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to query the permissions on the mailbox and on individual folders. Can you see which people have which rights to the mailbox or individual folders?\r\nWith the command `account.delegates` I get the following output:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"VENV_PATH\\venv\\lib\\site-packages\\exchangelib\\account.py\", line 625, in delegates\r\n    return list(GetDelegate(account=self).call(user_ids=None, include_permissions=True))\r\n  File \"VENV_PATH\\venv\\lib\\site-packages\\exchangelib\\services\\get_delegate.py\", line 18, in call\r\n    for elem in self._pool_requests(\r\n  File \"VENV_PATH\\venv\\lib\\site-packages\\exchangelib\\services\\common.py\", line 516, in _pool_requests\r\n    for chunk in chunkify(items, self.chunk_size):\r\n  File \"VENV_PATH\\venv\\lib\\site-packages\\exchangelib\\util.py\", line 94, in chunkify\r\n    for i in iterable:\r\nTypeError: 'NoneType' object is not iterable\r\n```\r\n\r\nPermissions are definitely entered on the mailbox.\r\n\r\nI only get my own rights displayed on the calendar folder with `account.calendar.effective_rights`. Can you also see who else has calendar rights?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/728", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/728/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/728/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/728/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/728", "id": 577613928, "node_id": "MDU6SXNzdWU1Nzc2MTM5Mjg=", "number": 728, "title": "Move/Copy functions issues with version 2.2.0", "user": {"login": "morro91", "id": 4150753, "node_id": "MDQ6VXNlcjQxNTA3NTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4150753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/morro91", "html_url": "https://github.com/morro91", "followers_url": "https://api.github.com/users/morro91/followers", "following_url": "https://api.github.com/users/morro91/following{/other_user}", "gists_url": "https://api.github.com/users/morro91/gists{/gist_id}", "starred_url": "https://api.github.com/users/morro91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/morro91/subscriptions", "organizations_url": "https://api.github.com/users/morro91/orgs", "repos_url": "https://api.github.com/users/morro91/repos", "events_url": "https://api.github.com/users/morro91/events{/privacy}", "received_events_url": "https://api.github.com/users/morro91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-09T01:56:05Z", "updated_at": "2020-03-18T11:33:16Z", "closed_at": "2020-03-18T11:33:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having some issues after upgrading from 1.12.0 to 2.2.0 (needed to use the expand_dl feature).\r\n\r\nIn 1.12.0, the moving or copying of email items works perfectly fine. No issues.\r\n\r\nAfter upgrade to 2.2.0, the moving/copying items no longer works, it waits a while, then goes \"ErrorServerBusy\" exception. Also does this just before \"No handlers could be found for logger \"exchangelib.protocol\".\r\n\r\nThe strange thing is, when I put the PrettyXmlHandler debug logging lines in, it then takes an age, but it does work.  It looks to use a fallback method.\r\n\r\nI can't really post debug messages due to sensitive system, but I have two systems, one with 1.12.0 which still works fine, the other with 2.2.0 which does not, so I don't believe it to be a permissions error.\r\n\r\nDoes this sound familiar/something that can be assisted with?\r\n\r\nNot sure if python 2 is still supported at this stage.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/727", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/727/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/727/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/727/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/727", "id": 577347532, "node_id": "MDU6SXNzdWU1NzczNDc1MzI=", "number": 727, "title": "Custom Key/Value pairs in Calendar Invite", "user": {"login": "ccwong-github", "id": 61911948, "node_id": "MDQ6VXNlcjYxOTExOTQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/61911948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccwong-github", "html_url": "https://github.com/ccwong-github", "followers_url": "https://api.github.com/users/ccwong-github/followers", "following_url": "https://api.github.com/users/ccwong-github/following{/other_user}", "gists_url": "https://api.github.com/users/ccwong-github/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccwong-github/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccwong-github/subscriptions", "organizations_url": "https://api.github.com/users/ccwong-github/orgs", "repos_url": "https://api.github.com/users/ccwong-github/repos", "events_url": "https://api.github.com/users/ccwong-github/events{/privacy}", "received_events_url": "https://api.github.com/users/ccwong-github/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-07T15:08:10Z", "updated_at": "2020-03-18T14:19:14Z", "closed_at": "2020-03-18T14:19:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to add a few custom Key/Value pairs to calendar invite (i.e. in the invite.ics attachment) to automate sending online meetings. Following are a few sample custom key/values:\r\n\r\n```\r\nX-MICROSOFT-ONLINEMEETINGEXTERNALLINK:https://xxxx/yyy/zzz/123456\r\nX-MICROSOFT-ONLINEMEETINGCONFLINK:conf:sip:aaa@example.com\\;gruu\\;opaque\r\n =app:conf:focus:id:ssss?conversation-id=xxx\r\nX-MICROSOFT-CONFERENCETELURI:tel:+122121234567\r\nX-MICROSOFT-ONLINEMEETINGINFORMATION:{\"OnlineMeetingProvider\":1}\r\n```\r\n\r\nCan u please advise how I can add these fields? Or I need to make changes to your library?\r\n\r\nThx\r\nCC", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/726", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/726/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/726/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/726/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/726", "id": 576389843, "node_id": "MDU6SXNzdWU1NzYzODk4NDM=", "number": 726, "title": "Get Delegates Not working", "user": {"login": "valouvaliavlo", "id": 28919459, "node_id": "MDQ6VXNlcjI4OTE5NDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/28919459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valouvaliavlo", "html_url": "https://github.com/valouvaliavlo", "followers_url": "https://api.github.com/users/valouvaliavlo/followers", "following_url": "https://api.github.com/users/valouvaliavlo/following{/other_user}", "gists_url": "https://api.github.com/users/valouvaliavlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/valouvaliavlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valouvaliavlo/subscriptions", "organizations_url": "https://api.github.com/users/valouvaliavlo/orgs", "repos_url": "https://api.github.com/users/valouvaliavlo/repos", "events_url": "https://api.github.com/users/valouvaliavlo/events{/privacy}", "received_events_url": "https://api.github.com/users/valouvaliavlo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 337732381, "node_id": "MDU6TGFiZWwzMzc3MzIzODE=", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-05T16:46:13Z", "updated_at": "2020-04-23T12:05:30Z", "closed_at": "2020-04-23T12:05:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\nI've test delegate but it's not working.\r\nThe credentials are fine, tested with python3 and python2.7.\r\n\r\nThe Code :\r\n```python\r\nfrom exchangelib import Credentials, Account\r\n\r\ncredentials = Credentials('mail', 'password')\r\naccount = Account('mail', credentials=credentials, autodiscover=True)\r\n\r\nprint(account.delegates)\r\n```\r\n\r\nThe result : \r\n```\r\nTraceback (most recent call last):\r\n  File \"./get_delegate.py\", line 8, in <module>\r\n    print(account.delegates)\r\n  File \"/home/valentin/.local/lib/python2.7/site-packages/exchangelib/account.py\", line 630, in delegates\r\n    return list(GetDelegate(account=self).call(user_ids=None, include_permissions=True))\r\n  File \"/home/valentin/.local/lib/python2.7/site-packages/exchangelib/services/get_delegate.py\", line 23, in call\r\n    include_permissions=include_permissions,\r\n  File \"/home/valentin/.local/lib/python2.7/site-packages/exchangelib/services/common.py\", line 512, in _pool_requests\r\n    for chunk in chunkify(items, self.chunk_size):\r\n  File \"/home/valentin/.local/lib/python2.7/site-packages/exchangelib/util.py\", line 109, in chunkify\r\n    for i in iterable:\r\nTypeError: 'NoneType' object is not iterable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/725", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/725/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/725/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/725/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/725", "id": 573688701, "node_id": "MDU6SXNzdWU1NzM2ODg3MDE=", "number": 725, "title": "GetUserAvailability sample code", "user": {"login": "srinathgnath", "id": 35440448, "node_id": "MDQ6VXNlcjM1NDQwNDQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/35440448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinathgnath", "html_url": "https://github.com/srinathgnath", "followers_url": "https://api.github.com/users/srinathgnath/followers", "following_url": "https://api.github.com/users/srinathgnath/following{/other_user}", "gists_url": "https://api.github.com/users/srinathgnath/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinathgnath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinathgnath/subscriptions", "organizations_url": "https://api.github.com/users/srinathgnath/orgs", "repos_url": "https://api.github.com/users/srinathgnath/repos", "events_url": "https://api.github.com/users/srinathgnath/events{/privacy}", "received_events_url": "https://api.github.com/users/srinathgnath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-02T03:14:51Z", "updated_at": "2020-03-09T05:47:29Z", "closed_at": "2020-03-09T05:47:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nCould you please share sample code to fetch availability of a user.\r\n\r\nThanks,\r\nSrinath", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/724", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/724/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/724/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/724/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/724", "id": 573005924, "node_id": "MDU6SXNzdWU1NzMwMDU5MjQ=", "number": 724, "title": "Equivalent to SearchDirectory(MS EWS c# method)", "user": {"login": "srinathgnath", "id": 35440448, "node_id": "MDQ6VXNlcjM1NDQwNDQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/35440448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinathgnath", "html_url": "https://github.com/srinathgnath", "followers_url": "https://api.github.com/users/srinathgnath/followers", "following_url": "https://api.github.com/users/srinathgnath/following{/other_user}", "gists_url": "https://api.github.com/users/srinathgnath/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinathgnath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinathgnath/subscriptions", "organizations_url": "https://api.github.com/users/srinathgnath/orgs", "repos_url": "https://api.github.com/users/srinathgnath/repos", "events_url": "https://api.github.com/users/srinathgnath/events{/privacy}", "received_events_url": "https://api.github.com/users/srinathgnath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-28T21:09:36Z", "updated_at": "2020-03-01T00:40:28Z", "closed_at": "2020-03-01T00:40:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nIs there an equivalent method \"SearchDirectory\" in exchangelib? I want to filter out conference room using search.\r\n\r\nC#:\r\nSearchDirectory(\"(&(objectClass=*)(msExchRecipientDisplayType=7))\")\r\n\r\nThanks,\r\nSrinath", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/723", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/723/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/723/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/723/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/723", "id": 571856086, "node_id": "MDU6SXNzdWU1NzE4NTYwODY=", "number": 723, "title": "Unable to use OAuth2AuthorizationCodeCredentials", "user": {"login": "ppremkumar", "id": 6050216, "node_id": "MDQ6VXNlcjYwNTAyMTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6050216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppremkumar", "html_url": "https://github.com/ppremkumar", "followers_url": "https://api.github.com/users/ppremkumar/followers", "following_url": "https://api.github.com/users/ppremkumar/following{/other_user}", "gists_url": "https://api.github.com/users/ppremkumar/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppremkumar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppremkumar/subscriptions", "organizations_url": "https://api.github.com/users/ppremkumar/orgs", "repos_url": "https://api.github.com/users/ppremkumar/repos", "events_url": "https://api.github.com/users/ppremkumar/events{/privacy}", "received_events_url": "https://api.github.com/users/ppremkumar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-27T06:37:17Z", "updated_at": "2020-02-29T09:26:13Z", "closed_at": "2020-02-29T09:26:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi:\r\n\r\nBelow is my code to access a work Microsoft exchange account that has 2-factor authentication. To overcome this 2-factor authorization, I decided to use OAuth2AuthorizationCodeCredentials.\r\n\r\nNow, I generate an access token before I create an instance of OAuth2AuthorizationCodeCredentials.\r\n\r\nFor that, I am using **AuthenticationContext** from **adal**.\r\n> To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code **XXXXXXXX** to authenticate.\r\n\r\nHere, I use my **domain.com** account and I give the native app the necessary authorization. I get the below response, as well.\r\n\r\n> EWSNativeApp\r\n> You have signed in to the EWSNativeApp application on your device. You may now close this window.\r\n\r\nAfter the access token is successfully generated, I pass the necessary client_id, client_secret, and access_token to OAuth2AuthorizationCodeCredentials.\r\n\r\nEverything works fine until I reach **account = Account(primary_smtp_address=token_response['userId'], config=config, autodiscover=False, access_type=DELEGATE)**.\r\n\r\n```\r\nimport config\r\nfrom adal import AuthenticationContext\r\nfrom exchangelib import Account, Configuration, OAUTH2, OAuth2AuthorizationCodeCredentials, DELEGATE, OAuth2Credentials\r\nctx = AuthenticationContext(config.AUTHORITY_URL, api_version=None)\r\ndevice_code = ctx.acquire_user_code(config.RESOURCE, config.CLIENT_ID)\r\nprint(device_code['message'])\r\ntoken_response = ctx.acquire_token_with_device_code(config.RESOURCE, device_code, config.CLIENT_ID)\r\ncredentials = OAuth2AuthorizationCodeCredentials(client_id=config.CLIENT_ID, client_secret=config.CLIENT_SECRET, access_token=token_response['accessToken'])\r\nconfig = Configuration(credentials=credentials, auth_type=OAUTH2)\r\naccount = Account(primary_smtp_address=token_response['userId'], config=config, autodiscover=False, access_type=DELEGATE)\r\nfor item in account.inbox.all().order_by('-datetime_received')[:100]:\r\n    print(item.subject, item.sender, item.datetime_received)\r\n```\r\n\r\nI keep getting the below errors.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"exchange_web_services/ews.py\", line 10, in <module>\r\n    account = Account(primary_smtp_address='john.doe@domain.com', config=config, autodiscover=False, access_type=DELEGATE)\r\n  File \"exchange_web_services\\venv\\lib\\site-packages\\exchangelib\\account.py\", line 94, in __init__\r\n    self.protocol = Protocol(config=config)\r\n  File \"exchange_web_services\\venv\\lib\\site-packages\\exchangelib\\protocol.py\", line 357, in __call__\r\n    protocol = cls._protocol_cache.get(_protocol_cache_key)\r\n  File \"exchange_web_services\\venv\\lib\\site-packages\\exchangelib\\credentials.py\", line 60, in __hash__\r\n    return hash(tuple(self._get_hash_values()))\r\n  File \"exchange_web_services\\venv\\lib\\site-packages\\exchangelib\\credentials.py\", line 158, in <genexpr>\r\n    return (getattr(self, k) if k != 'access_token' else self.access_token['access_token'] for k in self.__dict__.keys() if k != '_lock')\r\nTypeError: string indices must be integers\r\n```\r\n\r\nI am really stuck here and not sure what mistake I have made. Any inputs will be helpful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/722", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/722/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/722/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/722/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/722", "id": 571126968, "node_id": "MDU6SXNzdWU1NzExMjY5Njg=", "number": 722, "title": "routing_type: should 'EX' be an additional choice?", "user": {"login": "fleminra", "id": 4315553, "node_id": "MDQ6VXNlcjQzMTU1NTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4315553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fleminra", "html_url": "https://github.com/fleminra", "followers_url": "https://api.github.com/users/fleminra/followers", "following_url": "https://api.github.com/users/fleminra/following{/other_user}", "gists_url": "https://api.github.com/users/fleminra/gists{/gist_id}", "starred_url": "https://api.github.com/users/fleminra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fleminra/subscriptions", "organizations_url": "https://api.github.com/users/fleminra/orgs", "repos_url": "https://api.github.com/users/fleminra/repos", "events_url": "https://api.github.com/users/fleminra/events{/privacy}", "received_events_url": "https://api.github.com/users/fleminra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-26T07:38:09Z", "updated_at": "2020-02-27T14:56:50Z", "closed_at": "2020-02-27T14:56:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Most of the messages I've seen from my Exchange server have routing_type of 'SMTP' but several have 'EX'. Should that be a valid choice in `exchangelib/properties.py`? I noticed that it [was added](https://github.com/nylas/exchangelib/commit/dcd77b406fa26242de6094c4fd2e1784e66e7a3c#diff-73bb057caf6c86a1ee220a3fdb95eb72) in [this fork](https://github.com/nylas/exchangelib).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/721", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/721/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/721/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/721/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/721", "id": 566311980, "node_id": "MDU6SXNzdWU1NjYzMTE5ODA=", "number": 721, "title": "FileAttachment is not working", "user": {"login": "klem4", "id": 1667435, "node_id": "MDQ6VXNlcjE2Njc0MzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1667435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klem4", "html_url": "https://github.com/klem4", "followers_url": "https://api.github.com/users/klem4/followers", "following_url": "https://api.github.com/users/klem4/following{/other_user}", "gists_url": "https://api.github.com/users/klem4/gists{/gist_id}", "starred_url": "https://api.github.com/users/klem4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klem4/subscriptions", "organizations_url": "https://api.github.com/users/klem4/orgs", "repos_url": "https://api.github.com/users/klem4/repos", "events_url": "https://api.github.com/users/klem4/events{/privacy}", "received_events_url": "https://api.github.com/users/klem4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-17T13:50:00Z", "updated_at": "2020-02-19T12:57:17Z", "closed_at": "2020-02-19T12:57:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\nI'm trying to send an email with an attachment, but the letter is sent without it, I don\u2019t get any errors.\r\nI would be grateful for your help.\r\n\r\nexchangelib==3.1.1\r\nexchange version 15, 0, 12, 34\r\n\r\n```python\r\natt_file = open(att_path, 'rb')\r\natt_content = att_file.read()\r\natt = FileAttachment(name=att_name, content=att_content)\r\nm.attach(att)\r\nm.send_and_save()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/720", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/720/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/720/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/720/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/720", "id": 566010968, "node_id": "MDU6SXNzdWU1NjYwMTA5Njg=", "number": 720, "title": "Acceptable kwargs for inbox.filter()", "user": {"login": "connorferster", "id": 38441489, "node_id": "MDQ6VXNlcjM4NDQxNDg5", "avatar_url": "https://avatars2.githubusercontent.com/u/38441489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/connorferster", "html_url": "https://github.com/connorferster", "followers_url": "https://api.github.com/users/connorferster/followers", "following_url": "https://api.github.com/users/connorferster/following{/other_user}", "gists_url": "https://api.github.com/users/connorferster/gists{/gist_id}", "starred_url": "https://api.github.com/users/connorferster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/connorferster/subscriptions", "organizations_url": "https://api.github.com/users/connorferster/orgs", "repos_url": "https://api.github.com/users/connorferster/repos", "events_url": "https://api.github.com/users/connorferster/events{/privacy}", "received_events_url": "https://api.github.com/users/connorferster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-17T01:40:18Z", "updated_at": "2020-02-26T12:01:10Z", "closed_at": "2020-02-26T12:01:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am looking for the complete list of acceptable kwargs that can be used with `.filter()`. I have read on the documentation, under **Searching**, that the kwarg can be used in conjunction with `__` in addition to various modifiers such as `exact`, `iexact`, and `contains`, etc. However, I am wondering what the list of \"base\" fields are (like, `sender` and `subject`) that can be used.\r\n\r\nFor example, in the documentation, there is a reference to the kwargs `subject` and `sender`, such as:  `.filter(subject = \"My subject\")` and `.filter(sender = \"sender@sending.com\")`. However, when I tried using a kwarg like `recipient`, `recipients`, or `to` I get an `InvalidField` error.\r\n\r\nI read the Microsoft reference you posted (https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/querystring-querystringtype) and will just resort to using query strings if I have to but I am wondering if it is possible to get a list of the full set of \"base\" fields that are acceptable in `.filter()`. I have tried looking in `restrictions.py` and `fields.py` and `query_set.py` but I have not been able to find those references to the kwargs that I know will work: `sender` and `subject`. Could it be that these are the only two?\r\n\r\nIf you are able to point me to the list, I would be happy to update the documentation to include them. \r\n\r\nMany thanks! Exchangelib is an excellent library. I have enjoyed using it at my work: it's a real time saver.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/719", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/719/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/719/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/719/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/719", "id": 564881375, "node_id": "MDU6SXNzdWU1NjQ4ODEzNzU=", "number": 719, "title": "ConnectionResetError - connection forcibly closed.", "user": {"login": "curtischolon", "id": 27692881, "node_id": "MDQ6VXNlcjI3NjkyODgx", "avatar_url": "https://avatars3.githubusercontent.com/u/27692881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/curtischolon", "html_url": "https://github.com/curtischolon", "followers_url": "https://api.github.com/users/curtischolon/followers", "following_url": "https://api.github.com/users/curtischolon/following{/other_user}", "gists_url": "https://api.github.com/users/curtischolon/gists{/gist_id}", "starred_url": "https://api.github.com/users/curtischolon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/curtischolon/subscriptions", "organizations_url": "https://api.github.com/users/curtischolon/orgs", "repos_url": "https://api.github.com/users/curtischolon/repos", "events_url": "https://api.github.com/users/curtischolon/events{/privacy}", "received_events_url": "https://api.github.com/users/curtischolon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-13T18:48:09Z", "updated_at": "2020-02-13T21:37:03Z", "closed_at": "2020-02-13T21:37:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm running into an issue with previously working code, I was able to successfully connect to and iterate through messages on O365, however suddenly I'm receiving the following error:\r\n\r\n`requests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None)\", ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))`\r\n\r\nThe offending code is here, but as I mentioned, it previously worked and has all of a sudden started with this behavior. I did reach through other similar issues raised but did not see any specific resolution.\r\n```\r\ncredentials = Credentials(username=login, password=password)\r\n    config = Configuration(server='outlook.office365.com', credentials=credentials)\r\n    account = Account(\r\n        primary_smtp_address=login,\r\n        config=config,\r\n        autodiscover=False,\r\n        access_type=DELEGATE\r\n        )\r\n    print(account.inbox.all().count())\r\n    for email in account.inbox.all():\r\n        sender = email.sender\r\n```\r\n\r\n\r\nTraceback:\r\n```\r\n\r\nEWS https://outlook.office365.com/EWS/Exchange.asmx, account ccholon@oa-services.com: Exception in _get_elements: Traceback (most recent call last):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 331, in _error_catcher\r\n    yield\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 637, in read_chunked\r\n    self._update_chunk_length()\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 569, in _update_chunk_length\r\n    line = self._fp.fp.readline()\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\socket.py\", line 589, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\ssl.py\", line 1049, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\ssl.py\", line 908, in read\r\n    return self._sslobj.read(len, buffer)\r\nConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\models.py\", line 749, in generate\r\n    for chunk in self.raw.stream(chunk_size, decode_content=True):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 461, in stream\r\n    for line in self.read_chunked(amt, decode_content=decode_content):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 665, in read_chunked\r\n    self._original_response.close()\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\contextlib.py\", line 130, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 349, in _error_catcher\r\n    raise ProtocolError('Connection broken: %r' % e, e)\r\nurllib3.exceptions.ProtocolError: (\"Connection broken: ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None)\", ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 66, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 131, in _get_response_xml\r\n    stream=self.streaming,\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 742, in post_ratelimited\r\n    _raise_response_errors(r, protocol, log_msg, log_vals)  # Always raises an exception\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 824, in _raise_response_errors\r\n    raise response.headers['TimeoutException']\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 687, in post_ratelimited\r\n    stream=stream)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\sessions.py\", line 559, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\sessions.py\", line 512, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\sessions.py\", line 662, in send\r\n    r.content\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\models.py\", line 827, in content\r\n    self._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\models.py\", line 752, in generate\r\n    raise ChunkedEncodingError(e)\r\nrequests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None)\", ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 331, in _error_catcher\r\n    yield\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 637, in read_chunked\r\n    self._update_chunk_length()\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 569, in _update_chunk_length\r\n    line = self._fp.fp.readline()\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\socket.py\", line 589, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\ssl.py\", line 1049, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\ssl.py\", line 908, in read\r\n    return self._sslobj.read(len, buffer)\r\nConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\models.py\", line 749, in generate\r\n    for chunk in self.raw.stream(chunk_size, decode_content=True):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 461, in stream\r\n    for line in self.read_chunked(amt, decode_content=decode_content):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 665, in read_chunked\r\n    self._original_response.close()\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\contextlib.py\", line 130, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\urllib3\\response.py\", line 349, in _error_catcher\r\n    raise ProtocolError('Connection broken: %r' % e, e)\r\nurllib3.exceptions.ProtocolError: (\"Connection broken: ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None)\", ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:/Users/ccholon/PycharmProjects/beer_distribution/curity_report_download.py\", line 63, in <module>\r\n    download_curity_report()\r\n  File \"C:/Users/ccholon/PycharmProjects/beer_distribution/curity_report_download.py\", line 23, in download_curity_report\r\n    for my_email in account.inbox.all():\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\queryset.py\", line 286, in __iter__\r\n    for val in self._format_items(items=self._query(), return_format=self.return_format):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\queryset.py\", line 363, in _item_yielder\r\n    for i in iterable:\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\account.py\", line 597, in fetch\r\n    shape=ID_ONLY,\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\account.py\", line 307, in _consume_item_service\r\n    for i in service_cls(account=self, chunk_size=chunk_size).call(**kwargs):\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 541, in _pool_requests\r\n    elems = r.get()\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\multiprocessing\\pool.py\", line 657, in get\r\n    raise self._value\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\multiprocessing\\pool.py\", line 121, in worker\r\n    result = (True, func(*args, **kwds))\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 520, in <lambda>\r\n    lambda c: self._get_elements(payload=payload_func(c, **kwargs)),\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 66, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\services\\common.py\", line 131, in _get_response_xml\r\n    stream=self.streaming,\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 742, in post_ratelimited\r\n    _raise_response_errors(r, protocol, log_msg, log_vals)  # Always raises an exception\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 824, in _raise_response_errors\r\n    raise response.headers['TimeoutException']\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\exchangelib\\util.py\", line 687, in post_ratelimited\r\n    stream=stream)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\sessions.py\", line 559, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\sessions.py\", line 512, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\sessions.py\", line 662, in send\r\n    r.content\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\models.py\", line 827, in content\r\n    self._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\r\n  File \"C:\\Users\\ccholon\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\requests\\models.py\", line 752, in generate\r\n    raise ChunkedEncodingError(e)\r\nrequests.exceptions.ChunkedEncodingError: (\"Connection broken: ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None)\", ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))\r\n\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/718", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/718/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/718/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/718/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/718", "id": 563471859, "node_id": "MDU6SXNzdWU1NjM0NzE4NTk=", "number": 718, "title": "Autodiscover failing in versions >=3.0.0", "user": {"login": "Austin-Schmidli", "id": 32604113, "node_id": "MDQ6VXNlcjMyNjA0MTEz", "avatar_url": "https://avatars1.githubusercontent.com/u/32604113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Austin-Schmidli", "html_url": "https://github.com/Austin-Schmidli", "followers_url": "https://api.github.com/users/Austin-Schmidli/followers", "following_url": "https://api.github.com/users/Austin-Schmidli/following{/other_user}", "gists_url": "https://api.github.com/users/Austin-Schmidli/gists{/gist_id}", "starred_url": "https://api.github.com/users/Austin-Schmidli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Austin-Schmidli/subscriptions", "organizations_url": "https://api.github.com/users/Austin-Schmidli/orgs", "repos_url": "https://api.github.com/users/Austin-Schmidli/repos", "events_url": "https://api.github.com/users/Austin-Schmidli/events{/privacy}", "received_events_url": "https://api.github.com/users/Austin-Schmidli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T20:56:39Z", "updated_at": "2020-02-13T15:26:53Z", "closed_at": "2020-02-12T05:15:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Autodiscover is working as expected in 2.1.0 and 2.2.0. However on 3.0.0, 3.1.0, 3.1.1, the same code fails.\r\n\r\nCode sample:\r\n```\r\ncredentials = exchangelib.Credentials(username, password)\r\naccount = exchangelib.Account(primary_smtp_address=email_address, credentials=credentials, access_type=exchangelib.DELEGATE, autodiscover=True)\r\n```\r\n\r\nResultant Error:\r\n```\r\nDEBUG:exchangelib.util:No retry: wrong status code 200\r\nDEBUG:exchangelib.util:Session 25743 thread 140734995797440: Useful response from https://autodiscover.***.com/Autodiscover/Autodiscover.xml\r\nDEBUG:exchangelib.protocol:Server autodiscover.***.com: Releasing session 25743\r\nINFO:exchangelib.autodiscover.discovery:Step 5: Checking response\r\nDEBUG:exchangelib.autodiscover.discovery:Released autodiscover_cache_lock\r\nTraceback (most recent call last):\r\n  File \"local/exch.py\", line 13, in <module>\r\n    account = exchangelib.Account(primary_smtp_address=email_address, credentials=credentials, access_type=exchangelib.DELEGATE, autodiscover=True)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/exchangelib/account.py\", line 86, in __init__\r\n    email=primary_smtp_address, credentials=credentials, auth_type=auth_type, retry_policy=retry_policy\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/exchangelib/autodiscover/discovery.py\", line 24, in discover\r\n    email=email, credentials=credentials, auth_type=auth_type, retry_policy=retry_policy\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/exchangelib/autodiscover/discovery.py\", line 113, in discover\r\n    return self._build_response(ad_response=ad_response)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/exchangelib/autodiscover/discovery.py\", line 139, in _build_response\r\n    if protocol.ews_url.lower() == ews_url.lower() and protocol.server_version:\r\nAttributeError: 'NoneType' object has no attribute 'lower'\r\nDEBUG:exchangelib.autodiscover.cache:Domain ***.com: Closing sessions\r\nDEBUG:exchangelib.protocol:Server autodiscover.***.com: Closing sessions\r\nDEBUG:exchangelib.protocol:Server autodiscover.***.com: Closing sessions\r\n```\r\n(Company name redacted)\r\n\r\nLet me know if there's any further information I can provide to help debug this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/716", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/716/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/716/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/716/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/716", "id": 556900876, "node_id": "MDU6SXNzdWU1NTY5MDA4NzY=", "number": 716, "title": "Saved Messages are flagged as \"Draft\" - how to avoid/remove that", "user": {"login": "coldcoff", "id": 14311781, "node_id": "MDQ6VXNlcjE0MzExNzgx", "avatar_url": "https://avatars0.githubusercontent.com/u/14311781?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coldcoff", "html_url": "https://github.com/coldcoff", "followers_url": "https://api.github.com/users/coldcoff/followers", "following_url": "https://api.github.com/users/coldcoff/following{/other_user}", "gists_url": "https://api.github.com/users/coldcoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/coldcoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coldcoff/subscriptions", "organizations_url": "https://api.github.com/users/coldcoff/orgs", "repos_url": "https://api.github.com/users/coldcoff/repos", "events_url": "https://api.github.com/users/coldcoff/events{/privacy}", "received_events_url": "https://api.github.com/users/coldcoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-29T14:32:18Z", "updated_at": "2020-02-01T10:31:28Z", "closed_at": "2020-01-31T21:01:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nThanks for exchangelib. I had much fun in the last days with that library and converted a bunch of imaplib scripts to work with exchangelib now instead.\r\n\r\nWhen saving some message in an exchange folder via exchangelib (either by saving a completely new message -- created in exchangelib --,  or by updating an existing message, with `save(update_fields = ['mime_content'])` and some modifications in the mail text -- as proposed in #331 -- I always get these messages displayed in the Outlook Web Access as \"Drafts\", not as regular messages. I found no hint how to avoid that.\r\n\r\nAlso it seems I cannot remove the `message.is_draft` from exchangelib with an additional, separate update lateron. The field is readonly (at least in exchangelib?).\r\n\r\nHow to create messages that are not considered drafts? How to remove the draft flag from existing messages?\r\n\r\nThanks\r\n\r\nTino", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/715", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/715/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/715/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/715/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/715", "id": 556786433, "node_id": "MDU6SXNzdWU1NTY3ODY0MzM=", "number": 715, "title": "Error when using fetch and only_fields", "user": {"login": "torhhu", "id": 7139323, "node_id": "MDQ6VXNlcjcxMzkzMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7139323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torhhu", "html_url": "https://github.com/torhhu", "followers_url": "https://api.github.com/users/torhhu/followers", "following_url": "https://api.github.com/users/torhhu/following{/other_user}", "gists_url": "https://api.github.com/users/torhhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/torhhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torhhu/subscriptions", "organizations_url": "https://api.github.com/users/torhhu/orgs", "repos_url": "https://api.github.com/users/torhhu/repos", "events_url": "https://api.github.com/users/torhhu/events{/privacy}", "received_events_url": "https://api.github.com/users/torhhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-29T10:59:19Z", "updated_at": "2020-02-11T10:17:33Z", "closed_at": "2020-02-04T20:43:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm downloading emails from an account using\r\n```python\r\nfull_items_iter = account.fetch(ids=items_list)\r\nfor item in full_items_iter:\r\n do_something(item)\r\n```\r\n\r\nThis works, but if I try to use\r\n```python\r\nfull_items_iter = account.fetch(ids=items_list, only_fields=only_fields)\r\n```\r\n\r\nwhere only_fields is a list of strings with the fields I would like to fetch, the program crashes when starting the `for item in full_item_iter` loop (it doesn't start on do_something(item). This happens even if I have only_fields = ['id']\r\n\r\nError message:\r\n```\r\nFile \"C:\\Anaconda\\Python\\venvs\\epost\\lib\\site-packages\\exchangelib\\account.py\", line 597, in fetch\r\n    shape=ID_ONLY,\r\n  File \"C:\\Anaconda\\Python\\venvs\\epost\\lib\\site-packages\\exchangelib\\account.py\", line 307, in _consume_item_service\r\n    for i in service_cls(account=self, chunk_size=chunk_size).call(**kwargs):\r\n  File \"C:\\Anaconda\\Python\\venvs\\epost\\lib\\site-packages\\exchangelib\\services\\common.py\", line 541, in _pool_requests\r\n    elems = r.get()\r\n  File \"C:\\Anaconda\\Python\\lib\\multiprocessing\\pool.py\", line 657, in get\r\n    raise self._value\r\n  File \"C:\\Anaconda\\Python\\lib\\multiprocessing\\pool.py\", line 121, in worker\r\n    result = (True, func(*args, **kwds))\r\n  File \"C:\\Anaconda\\Python\\venvs\\epost\\lib\\site-packages\\exchangelib\\services\\common.py\", line 520, in <lambda>\r\n    lambda c: self._get_elements(payload=payload_func(c, **kwargs)),\r\n  File \"C:\\Anaconda\\Python\\venvs\\epost\\lib\\site-packages\\exchangelib\\services\\common.py\", line 66, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"C:\\Anaconda\\Python\\venvs\\epost\\lib\\site-packages\\exchangelib\\services\\common.py\", line 151, in _get_response_xml\r\n    res = self._get_soap_messages(body=body, **parse_opts)\r\n  File \"C:\\Anaconda\\Python\\venvs\\epost\\lib\\site-packages\\exchangelib\\services\\common.py\", line 258, in _get_soap_messages\r\n    cls._raise_soap_errors(fault=fault)  # Will throw SOAPError or custom EWS error\r\n  File \"C:\\Anaconda\\Python\\venvs\\epost\\lib\\site-packages\\exchangelib\\services\\common.py\", line 294, in _raise_soap_errors\r\n    raise vars(errors)[code](msg)\r\nexchangelib.errors.ErrorInternalServerError: An internal server error occurred. The operation failed.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/714", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/714/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/714/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/714/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/714", "id": 556353557, "node_id": "MDU6SXNzdWU1NTYzNTM1NTc=", "number": 714, "title": "update the date and time for a meeting", "user": {"login": "lcgosi", "id": 47101417, "node_id": "MDQ6VXNlcjQ3MTAxNDE3", "avatar_url": "https://avatars2.githubusercontent.com/u/47101417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcgosi", "html_url": "https://github.com/lcgosi", "followers_url": "https://api.github.com/users/lcgosi/followers", "following_url": "https://api.github.com/users/lcgosi/following{/other_user}", "gists_url": "https://api.github.com/users/lcgosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcgosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcgosi/subscriptions", "organizations_url": "https://api.github.com/users/lcgosi/orgs", "repos_url": "https://api.github.com/users/lcgosi/repos", "events_url": "https://api.github.com/users/lcgosi/events{/privacy}", "received_events_url": "https://api.github.com/users/lcgosi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-28T17:17:49Z", "updated_at": "2020-01-29T13:43:42Z", "closed_at": "2020-01-29T13:43:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, lib is sensational, thanks for sharing.\r\nI am trying to update the date and time of a previously scheduled meeting, but I cannot.\r\nI can only update the meeting subject for example and even then it is only updated for the user who created and updated the meeting.\r\n\r\nCan you help me, please?!\r\n\r\n```python\r\nitem.subject = 'new! Subject of Meeting '\r\nitem.send_and_save(update_fields=['subject'])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/713", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/713/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/713/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/713/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/713", "id": 553563621, "node_id": "MDU6SXNzdWU1NTM1NjM2MjE=", "number": 713, "title": "Deprecation warning on defusedxml.lxml", "user": {"login": "rackunits", "id": 3995805, "node_id": "MDQ6VXNlcjM5OTU4MDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3995805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rackunits", "html_url": "https://github.com/rackunits", "followers_url": "https://api.github.com/users/rackunits/followers", "following_url": "https://api.github.com/users/rackunits/following{/other_user}", "gists_url": "https://api.github.com/users/rackunits/gists{/gist_id}", "starred_url": "https://api.github.com/users/rackunits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rackunits/subscriptions", "organizations_url": "https://api.github.com/users/rackunits/orgs", "repos_url": "https://api.github.com/users/rackunits/repos", "events_url": "https://api.github.com/users/rackunits/events{/privacy}", "received_events_url": "https://api.github.com/users/rackunits/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1826510735, "node_id": "MDU6TGFiZWwxODI2NTEwNzM1", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/on%20hold", "name": "on hold", "color": "f2cca2", "default": false, "description": "Issues that are blocked by external events"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-22T14:06:08Z", "updated_at": "2020-04-21T14:27:16Z", "closed_at": "2020-04-21T14:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I came across the following deprecation warning for defusedxml\r\n\r\nvenv/lib/python3.5/site-packages/exchangelib/util.py:17: DeprecationWarning: defusedxml.lxml is no longer supported and will be removed in a future release.\r\n    from defusedxml.lxml import parse, tostring, GlobalParserTLS, RestrictedElement, _etree\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/711", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/711/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/711/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/711/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/711", "id": 552161381, "node_id": "MDU6SXNzdWU1NTIxNjEzODE=", "number": 711, "title": "Error when there is no email_address while access Mailbox class", "user": {"login": "mys", "id": 17079510, "node_id": "MDQ6VXNlcjE3MDc5NTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/17079510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mys", "html_url": "https://github.com/mys", "followers_url": "https://api.github.com/users/mys/followers", "following_url": "https://api.github.com/users/mys/following{/other_user}", "gists_url": "https://api.github.com/users/mys/gists{/gist_id}", "starred_url": "https://api.github.com/users/mys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mys/subscriptions", "organizations_url": "https://api.github.com/users/mys/orgs", "repos_url": "https://api.github.com/users/mys/repos", "events_url": "https://api.github.com/users/mys/events{/privacy}", "received_events_url": "https://api.github.com/users/mys/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-20T09:03:07Z", "updated_at": "2020-01-20T12:06:30Z", "closed_at": "2020-01-20T12:06:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "AttributeError: 'NoneType' object has no attribute 'lower'\r\n```\r\nTraceback (most recent call last):\r\n  File \".\\Scan message.py\", line 123, in scanFolder\r\n    if not hasattr(item, 'sender') or item.sender == None:\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\properties.py\", line 275, in __eq__\r\n    return hash(self) == hash(other)\r\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\properties.py\", line 443, in __hash__\r\n    return hash(self.email_address.lower())\r\n```\r\n\r\nitem.sender is:\r\n`Mailbox(name='\"X\" <xxx@xxx>', routing_type='SMTP', mailbox_type='OneOff')`\r\n\r\nJust to be clear; In incoming email message, Mailbox class of sender does not have `email_address` field.\r\nEWS version=Version(Build(15, 2, 529, 5), 'Exchange2016')\r\n\r\nhttps://github.com/ecederstrand/exchangelib/blob/master/exchangelib/properties.py#L443", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/709", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/709/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/709/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/709/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/709", "id": 551180209, "node_id": "MDU6SXNzdWU1NTExODAyMDk=", "number": 709, "title": "MimeContentField should decode to bytes", "user": {"login": "nburlett", "id": 1464375, "node_id": "MDQ6VXNlcjE0NjQzNzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1464375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nburlett", "html_url": "https://github.com/nburlett", "followers_url": "https://api.github.com/users/nburlett/followers", "following_url": "https://api.github.com/users/nburlett/following{/other_user}", "gists_url": "https://api.github.com/users/nburlett/gists{/gist_id}", "starred_url": "https://api.github.com/users/nburlett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nburlett/subscriptions", "organizations_url": "https://api.github.com/users/nburlett/orgs", "repos_url": "https://api.github.com/users/nburlett/repos", "events_url": "https://api.github.com/users/nburlett/events{/privacy}", "received_events_url": "https://api.github.com/users/nburlett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-17T03:38:48Z", "updated_at": "2020-01-17T06:02:01Z", "closed_at": "2020-01-17T06:02:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `MimeContentField` attempts to decode the Base64-encoded string and then convert to unicode using the provided `CharacterSet`. This is incorrect, as the `CharacterSet` is the encoding of the base64 data, not the base64-decoded bytes. The resulting bytes are a mime-encoded message, which is not necessarily in the same encoding as the base64 data. \r\n\r\nFor example, I have a message with\r\n```\r\nContent-Type: text/plain; charset=\"windows-1252\"; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\n```\r\n\r\nThe `MimeContentField` cannot decode this message with `UTF-8` and the message's `mime_content` ends up as `None`\r\n\r\nThe `mime_content` field should probably be left as bytes, and the user can decode the message if they desire. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/708", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/708/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/708/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/708/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/708", "id": 550703816, "node_id": "MDU6SXNzdWU1NTA3MDM4MTY=", "number": 708, "title": "How to set High Importance on email message", "user": {"login": "marekk1717", "id": 25406173, "node_id": "MDQ6VXNlcjI1NDA2MTcz", "avatar_url": "https://avatars0.githubusercontent.com/u/25406173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marekk1717", "html_url": "https://github.com/marekk1717", "followers_url": "https://api.github.com/users/marekk1717/followers", "following_url": "https://api.github.com/users/marekk1717/following{/other_user}", "gists_url": "https://api.github.com/users/marekk1717/gists{/gist_id}", "starred_url": "https://api.github.com/users/marekk1717/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marekk1717/subscriptions", "organizations_url": "https://api.github.com/users/marekk1717/orgs", "repos_url": "https://api.github.com/users/marekk1717/repos", "events_url": "https://api.github.com/users/marekk1717/events{/privacy}", "received_events_url": "https://api.github.com/users/marekk1717/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-16T10:10:04Z", "updated_at": "2020-01-16T14:05:32Z", "closed_at": "2020-01-16T14:05:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to set High Importance flag on email message. Is it possible ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/707", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/707/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/707/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/707/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/707", "id": 550444393, "node_id": "MDU6SXNzdWU1NTA0NDQzOTM=", "number": 707, "title": "mime content appears to be invalid base64 and cannot be decoded", "user": {"login": "Austin-Schmidli", "id": 32604113, "node_id": "MDQ6VXNlcjMyNjA0MTEz", "avatar_url": "https://avatars1.githubusercontent.com/u/32604113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Austin-Schmidli", "html_url": "https://github.com/Austin-Schmidli", "followers_url": "https://api.github.com/users/Austin-Schmidli/followers", "following_url": "https://api.github.com/users/Austin-Schmidli/following{/other_user}", "gists_url": "https://api.github.com/users/Austin-Schmidli/gists{/gist_id}", "starred_url": "https://api.github.com/users/Austin-Schmidli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Austin-Schmidli/subscriptions", "organizations_url": "https://api.github.com/users/Austin-Schmidli/orgs", "repos_url": "https://api.github.com/users/Austin-Schmidli/repos", "events_url": "https://api.github.com/users/Austin-Schmidli/events{/privacy}", "received_events_url": "https://api.github.com/users/Austin-Schmidli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-15T21:39:19Z", "updated_at": "2020-01-24T16:33:12Z", "closed_at": "2020-01-24T16:33:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to retrieve a large email (>2MB of text) I get the following error.\r\n\r\n`Cannot convert value [very long base64 string] on field 'mime_content' to type <class 'str'>`\r\n\r\nThis looks quite similar to some others have previously had:\r\nhttps://github.com/ecederstrand/exchangelib/issues/584 \r\nhttps://github.com/ecederstrand/exchangelib/issues/683\r\n\r\nI enabled logging and looked at the actual '\\<MimeContent CharacterSet=\"UTF-8\">' field and it appears that Exchange is actually sending an impossible base64 encoding. The string is padded with '==' but 15310599 characters in total (including that padding). It is my understanding that the total number of characters must always be divisible by 4, and that it should be impossible for a base64 encoding to require more than two padding characters.\r\n\r\nPassing the string directly into Python's base64.b64decode() function gives the following error:\r\n\r\n`binascii.Error: Invalid base64-encoded string: number of data characters (15310597) cannot be 1 more than a multiple of 4`\r\n\r\nBecause of this, regardless of how many '=' padding characters appended to the end of the string, it will never successfully decode.\r\n\r\nAs far as I can tell, this must be a bug on Microsoft's end? If it helps, the server information (as determined by exchangelib) is: `server version Build=14.3.415.0, API=Exchange2010_SP2, Fullname=Microsoft Exchange Server 2010 SP2`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/706", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/706/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/706/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/706/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/706", "id": 549796916, "node_id": "MDU6SXNzdWU1NDk3OTY5MTY=", "number": 706, "title": "Registering extended properties to folders affects unrelated classes", "user": {"login": "dmcgee", "id": 737568, "node_id": "MDQ6VXNlcjczNzU2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/737568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmcgee", "html_url": "https://github.com/dmcgee", "followers_url": "https://api.github.com/users/dmcgee/followers", "following_url": "https://api.github.com/users/dmcgee/following{/other_user}", "gists_url": "https://api.github.com/users/dmcgee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmcgee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmcgee/subscriptions", "organizations_url": "https://api.github.com/users/dmcgee/orgs", "repos_url": "https://api.github.com/users/dmcgee/repos", "events_url": "https://api.github.com/users/dmcgee/events{/privacy}", "received_events_url": "https://api.github.com/users/dmcgee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 337732381, "node_id": "MDU6TGFiZWwzMzc3MzIzODE=", "url": "https://api.github.com/repos/ecederstrand/exchangelib/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-14T20:22:30Z", "updated_at": "2020-01-17T12:47:14Z", "closed_at": "2020-01-17T12:47:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Registering an extended property to a folder class unexpectedly causes it to appear in `FIELDS` for other folder classes. Critically, it does _not_ appear in `_slots_keys()` for those other classes. As a result, when one of those classes is instantiated, this loop in `EWSElement.__init__()`:\r\n\r\n```python\r\n        for f in self.FIELDS:\r\n            setattr(self, f.name, kwargs.pop(f.name, None))\r\n```\r\n\r\nfails this check in `EWSElement.__setattr__()` on the extended property:\r\n\r\n```python\r\n        if not hasattr(self, key) and key not in self._slots_keys():\r\n            raise AttributeError('%r is not a valid attribute. See %s.FIELDS for valid field names' % (\r\n                key, self.__class__.__name__))\r\n```\r\n\r\nThe property should not appear in `FIELDS` for any classes but the one it was added to, plus subclasses. A proof-of-concept is included below using `MsgFolderRoot`, but registering the property to any folder class (for example, `Drafts`) yields the same behavior.\r\n\r\nPossibly beyond the scope of this bug is a related question: should the update to `FIELDS` when an extended property is registered invalidate the `_slots_keys()` cache for subclasses? At present I believe the check in `EWSElement.__setattr__()` would fail if an extended property is registered to a base class after a subclass's `_slots_keys()` cache is populated, and then the subclass is instantiated (since the new instance of the subclass will - correctly - contain the new extended property in `FIELDS`).\r\n\r\nProof-of-concept:\r\n```python\r\n#!/usr/bin/env python3\r\nfrom exchangelib import Account, Configuration, Credentials, ExtendedProperty, IMPERSONATION\r\nfrom exchangelib.folders import Calendar\r\nfrom exchangelib.folders.roots import MsgFolderRoot\r\n\r\n\r\nUSER = 'TEST_USER_HERE'\r\nPASSWORD = 'TEST_PASSWORD_HERE'\r\nMAILBOX = USER\r\nPROPERTY_TAG = 0x65e0\r\n\r\n\r\ndef main():\r\n    credentials = Credentials(USER, PASSWORD)\r\n    configuration = Configuration(server='outlook.office365.com', credentials=credentials)\r\n    account = Account(primary_smtp_address=MAILBOX, config=configuration, autodiscover=False, access_type=IMPERSONATION)\r\n\r\n    class TestProperty(ExtendedProperty):\r\n        property_tag = PROPERTY_TAG\r\n        property_type = 'Binary'\r\n\r\n    print('Before register, Calendar.FIELDS = {}'.format([f.name for f in Calendar.FIELDS]))\r\n    MsgFolderRoot.register('test_property', TestProperty)\r\n    print('After register, Calendar.FIELDS = {}'.format([f.name for f in Calendar.FIELDS]))  # Now includes test_property\r\n\r\n    # If we register the property to Calendar instead of MsgFolderRoot, this succeeds as expected\r\n    #Calendar.register('test_property', TestProperty)\r\n\r\n    # Fails if test_property was registered to MsgFolderRoot\r\n    calendar = account.calendar\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/704", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/704/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/704/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/704", "id": 549730532, "node_id": "MDU6SXNzdWU1NDk3MzA1MzI=", "number": 704, "title": "Hashing fails for credentials objects containing an access token", "user": {"login": "dmcgee", "id": 737568, "node_id": "MDQ6VXNlcjczNzU2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/737568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmcgee", "html_url": "https://github.com/dmcgee", "followers_url": "https://api.github.com/users/dmcgee/followers", "following_url": "https://api.github.com/users/dmcgee/following{/other_user}", "gists_url": "https://api.github.com/users/dmcgee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmcgee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmcgee/subscriptions", "organizations_url": "https://api.github.com/users/dmcgee/orgs", "repos_url": "https://api.github.com/users/dmcgee/repos", "events_url": "https://api.github.com/users/dmcgee/events{/privacy}", "received_events_url": "https://api.github.com/users/dmcgee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-14T18:05:23Z", "updated_at": "2020-01-15T15:25:08Z", "closed_at": "2020-01-15T00:00:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A recent change to the hashing logic in `exchangelib.credentials` switched from each subclass defining its own hashing behavior to a uniform implementation in `BaseCredentials`. However, `OAuth2Credentials` and its subclass(es) need special handling for `access_token`, which is a `dict` and not hashable:\r\n\r\n```\r\n  File \".../.pyenv/versions/3.8.0/lib/python3.8/site-packages/exchangelib-2.1.1-py3.8.egg/exchangelib/credentials.py\", line 67, in __hash__\r\n    return hash(tuple(getattr(self, k) for k in self.__dict__.keys() if k != '_lock'))\r\nTypeError: unhashable type: 'dict'\r\n```\r\n\r\n`OAuth2Credentials` should use the `access_token` string field from its `access_token` attribute in the hash instead of the full dictionary.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/703", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/703/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/703/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/703/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/703", "id": 549433923, "node_id": "MDU6SXNzdWU1NDk0MzM5MjM=", "number": 703, "title": "Unable to reply to mail while keeping the same conversation id.", "user": {"login": "angyangcheng", "id": 39209962, "node_id": "MDQ6VXNlcjM5MjA5OTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/39209962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angyangcheng", "html_url": "https://github.com/angyangcheng", "followers_url": "https://api.github.com/users/angyangcheng/followers", "following_url": "https://api.github.com/users/angyangcheng/following{/other_user}", "gists_url": "https://api.github.com/users/angyangcheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/angyangcheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angyangcheng/subscriptions", "organizations_url": "https://api.github.com/users/angyangcheng/orgs", "repos_url": "https://api.github.com/users/angyangcheng/repos", "events_url": "https://api.github.com/users/angyangcheng/events{/privacy}", "received_events_url": "https://api.github.com/users/angyangcheng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-14T09:20:46Z", "updated_at": "2020-01-15T09:32:33Z", "closed_at": "2020-01-15T09:32:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I replied to an email thread using the following code below:\r\n```\r\n\tdef replymail(self, replyid, message):\r\n\t\tself.login()\r\n\t\tself.replyitem = self.a.inbox.get(id=replyid)\r\n\t\tself.reply = self.replyitem.create_reply(\"Re: \"+self.replyitem.subject, message)\r\n\t\tself.msg = self.reply.save(self.a.drafts)\r\n\t\tself.msg.send()\r\n```\r\nHowever, by doing so, the email I sent has a different conversation_id as the rest of the emails in this thread. Anyone has any idea how I can retain the conversation_id in my sent mail as I am trying to display the conversation thread based on the conversation_id in my UI. Any help is appreciated. Thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/702", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/702/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/702/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/702/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/702", "id": 548361915, "node_id": "MDU6SXNzdWU1NDgzNjE5MTU=", "number": 702, "title": "No permission to see folder:PermissionSet", "user": {"login": "nburlett", "id": 1464375, "node_id": "MDQ6VXNlcjE0NjQzNzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1464375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nburlett", "html_url": "https://github.com/nburlett", "followers_url": "https://api.github.com/users/nburlett/followers", "following_url": "https://api.github.com/users/nburlett/following{/other_user}", "gists_url": "https://api.github.com/users/nburlett/gists{/gist_id}", "starred_url": "https://api.github.com/users/nburlett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nburlett/subscriptions", "organizations_url": "https://api.github.com/users/nburlett/orgs", "repos_url": "https://api.github.com/users/nburlett/repos", "events_url": "https://api.github.com/users/nburlett/events{/privacy}", "received_events_url": "https://api.github.com/users/nburlett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-11T01:33:56Z", "updated_at": "2020-01-13T11:52:51Z", "closed_at": "2020-01-13T11:51:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "When attempting to access an account for which I have delegated access, I see `ErrorAccessDenied: Access is denied. Check credentials and try again.` due to the request for `permission_set` on the root of the hierarchy. \r\n\r\nThis is different from #610  in that the server I'm working with is `EXCHANGE_2013_SP1`, and the field does exist in that version. The problem is just that the credentialed user doesn't have permission to see the `permission_set` of the delegated account. It's also different in that it's the `folders.roots.RootOfHierarchy` that's the problem and not the `folders.Folder` fields.\r\n\r\nRemoving this field from `folders.roots.RootOfHierarchy` allows me to access the subfolders of the account to which my user has delegated access:\r\n\r\n```diff\r\n     LOCAL_FIELDS = [\r\n-        PermissionSetField('permission_set', field_uri='folder:PermissionSet', supported_from=EXCHANGE_2007_SP1,\r\n-                            deprecated_from=EXCHANGE_2016),\r\n         EffectiveRightsField('effective_rights', field_uri='folder:EffectiveRights', is_read_only=True,\r\n                              supported_from=EXCHANGE_2007_SP1),\r\n     ]\r\n```\r\nalternatively, this monkey-patch:\r\n\r\n```python\r\nfrom exchangelib.folders.roots import RootOfHierarchy\r\noriginal_fields = RootOfHierarchy.FIELDS\r\nRootOfHierarchy.FIELDS = [f for f in RootOfHierarchy.FIELDS if f.name != 'permission_set']\r\n```\r\n\r\nPerhaps permission_set shouldn't be requested by default for the root folder?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/701", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/701/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/701/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/701/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/701", "id": 547728090, "node_id": "MDU6SXNzdWU1NDc3MjgwOTA=", "number": 701, "title": "Get mailbox properties failure", "user": {"login": "sumansouravsingh", "id": 6782353, "node_id": "MDQ6VXNlcjY3ODIzNTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6782353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sumansouravsingh", "html_url": "https://github.com/sumansouravsingh", "followers_url": "https://api.github.com/users/sumansouravsingh/followers", "following_url": "https://api.github.com/users/sumansouravsingh/following{/other_user}", "gists_url": "https://api.github.com/users/sumansouravsingh/gists{/gist_id}", "starred_url": "https://api.github.com/users/sumansouravsingh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sumansouravsingh/subscriptions", "organizations_url": "https://api.github.com/users/sumansouravsingh/orgs", "repos_url": "https://api.github.com/users/sumansouravsingh/repos", "events_url": "https://api.github.com/users/sumansouravsingh/events{/privacy}", "received_events_url": "https://api.github.com/users/sumansouravsingh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-09T21:16:24Z", "updated_at": "2020-01-13T14:27:58Z", "closed_at": "2020-01-13T14:27:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @ecederstrand ,\r\nWhile trying to get properties for a particular mailbox i get the following error:\r\n\r\n> **'Access is denied. Check credentials and try again., Non-system logon cannot access Audits folder.'**\r\n\r\nat the following line in file services.py in method `_get_element_container` while its trying to access the folder - Recoverable items.\r\n\r\nAlso, when the mailbox does not have any item in it, it works fine (all the folders and its structure is displayed properly)\r\n\r\nHere is the stack trace:\r\n\r\n> File \"C:\\Commvault\\Automation\\Application\\Exchange\\ExchangeMailbox\\exchangelib_helper.py\", line 258, in get_mailbox_properties\r\n>     folder, processed_folder_list, count)\r\n>   File \"C:\\Commvault\\Automation\\Application\\Exchange\\ExchangeMailbox\\exchangelib_helper.py\", line 327, in get_message_properties_helper\r\n>     if folder.all().exists():\r\n>   File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\queryset.py\", line 474, in exists\r\n>     return self.count() > 0\r\n>   File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\queryset.py\", line 470, in count\r\n>     return len(list(new_qs.__iter__()))\r\n>   File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\queryset.py\", line 197, in __iter__\r\n>     for val in result_formatter(self._query()):\r\n>   File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\queryset.py\", line 272, in _as_items\r\n>     for i in iterable:\r\n>   File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\folders.py\", line 435, in find_items\r\n>     for i in items:\r\n>   File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\services.py\", line 319, in _paged_call\r\n>     rootfolder, next_offset = self._get_page(response)\r\n>   File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\services.py\", line 339, in _get_page\r\n>     rootfolder = self._get_element_container(message=response[0], name='{%s}RootFolder' % MNS)\r\n>   File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\services.py\", line 256, in _get_element_container\r\n>     self._raise_errors(code=response_code, text=msg_text, msg_xml=msg_xml)\r\n>   File \"C:\\Program Files\\Python36\\lib\\site-packages\\exchangelib\\services.py\", line 273, in _raise_errors\r\n>     raise vars(errors)[code](text)\r\n\r\n\r\nCan you tell me what the error might be. The service account i am using to access the mailbox has global admin rights", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/700", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/700/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/700/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/700/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/700", "id": 546291111, "node_id": "MDU6SXNzdWU1NDYyOTExMTE=", "number": 700, "title": "Query folder structure on mailbox with large number of folders times out", "user": {"login": "jcalero", "id": 760405, "node_id": "MDQ6VXNlcjc2MDQwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/760405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcalero", "html_url": "https://github.com/jcalero", "followers_url": "https://api.github.com/users/jcalero/followers", "following_url": "https://api.github.com/users/jcalero/following{/other_user}", "gists_url": "https://api.github.com/users/jcalero/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcalero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcalero/subscriptions", "organizations_url": "https://api.github.com/users/jcalero/orgs", "repos_url": "https://api.github.com/users/jcalero/repos", "events_url": "https://api.github.com/users/jcalero/events{/privacy}", "received_events_url": "https://api.github.com/users/jcalero/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-01-07T13:43:43Z", "updated_at": "2020-01-10T14:56:01Z", "closed_at": "2020-01-10T14:56:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been spending the last few days trying to get this use case to work:\r\n\r\n**I need to retrieve a full list of folder names (+ids) in a mailbox.** \r\n\r\nIn a mailbox with a small number of folders this is easily achieved with `root.walk()`, however this will time out if the mailbox contains a large number of folders, which I can understand, so I've been trying alternative, paginated approaches, but none seem to work. I would really appreciate some advice in how to approach this!\r\n\r\nIt seems that, no matter the query I do (I've tried simple `list(folder.children)` queries with a known folder I know has only 3 subfolders) the underlying logic tries to cache the _entire_ folder structure, starting from root, causing eventual timeout.\r\n\r\nI may be tackling this issue from the wrong angle, so apologies if there's an obvious solution to this, but I haven't been able to find one yet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/698", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/698/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/698/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/698/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/698", "id": 545136745, "node_id": "MDU6SXNzdWU1NDUxMzY3NDU=", "number": 698, "title": "Support OAuth authorization code grant", "user": {"login": "dmcgee", "id": 737568, "node_id": "MDQ6VXNlcjczNzU2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/737568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmcgee", "html_url": "https://github.com/dmcgee", "followers_url": "https://api.github.com/users/dmcgee/followers", "following_url": "https://api.github.com/users/dmcgee/following{/other_user}", "gists_url": "https://api.github.com/users/dmcgee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmcgee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmcgee/subscriptions", "organizations_url": "https://api.github.com/users/dmcgee/orgs", "repos_url": "https://api.github.com/users/dmcgee/repos", "events_url": "https://api.github.com/users/dmcgee/events{/privacy}", "received_events_url": "https://api.github.com/users/dmcgee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-03T19:51:49Z", "updated_at": "2020-01-13T10:48:58Z", "closed_at": "2020-01-13T10:48:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The work for #90 (#630) added support for the client credentials OAuth grant type, which is suitable for an application used internally by an organization to access its own accounts. However, (for example) a hosted service with multiple accounts using exchangelib to access different Microsoft tenants needs to be able to restrict actions taken on behalf of users to only the accounts they've authorized. The client credentials grant cannot make that guarantee since it only conveys the Microsoft tenant ID in the authorization redirect (which is subject to tampering by the authorizing user), and then it relies on the application to provide the tenant ID it wants to operate on with no verification.\r\n\r\nA solution for that problem would be to support the authorization code OAuth 2.0 grant type. This flow returns a signed code during authorization, which the application exchanges for an access token. Microsoft ensures that the token only provides access to the originally authorized tenant, so as long as the application is secure there's no opportunity for users to gain access to Microsoft tenants they don't own.\r\n\r\nOne challenge is access token handling and refreshing: unlike with the client credentials grant, the application doesn't have a static set of credentials that can yield a new access token at any time, and instead it relies on a refresh token returned with the access token. Since the refresh token changes with each refresh, the application must cache tokens to avoid requiring users to re-authorize each time the application restarts, and it needs to refresh tokens as they expire.\r\n\r\nI've prepared an implementation and I'll open a pull request shortly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/696", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/696/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/696/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/696", "id": 542360637, "node_id": "MDU6SXNzdWU1NDIzNjA2Mzc=", "number": 696, "title": "Cant create CalendarItem with AbsoluteYearly recurrence", "user": {"login": "igorMIA", "id": 34746041, "node_id": "MDQ6VXNlcjM0NzQ2MDQx", "avatar_url": "https://avatars2.githubusercontent.com/u/34746041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/igorMIA", "html_url": "https://github.com/igorMIA", "followers_url": "https://api.github.com/users/igorMIA/followers", "following_url": "https://api.github.com/users/igorMIA/following{/other_user}", "gists_url": "https://api.github.com/users/igorMIA/gists{/gist_id}", "starred_url": "https://api.github.com/users/igorMIA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/igorMIA/subscriptions", "organizations_url": "https://api.github.com/users/igorMIA/orgs", "repos_url": "https://api.github.com/users/igorMIA/repos", "events_url": "https://api.github.com/users/igorMIA/events{/privacy}", "received_events_url": "https://api.github.com/users/igorMIA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-25T16:02:02Z", "updated_at": "2020-01-03T12:48:27Z", "closed_at": "2020-01-03T12:48:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When trying to create a Calendar item with absolute yearly recurrence it's throwing error:\r\n\r\n> ErrorSchemaValidation at /api/v1/calendar/events/\r\nThe request failed schema validation. The element 'AbsoluteYearlyRecurrence' in namespace 'http://schemas.microsoft.com/exchange/services/2006/types' has invalid child element 'Month' in namespace 'http://schemas.microsoft.com/exchange/services/2006/types'. List of possible elements expected: 'DayOfMonth' in namespace 'http://schemas.microsoft.com/exchange/services/2006/types'.\r\n\r\nMy code:\r\n\r\n```\r\nitem = CalendarItem(...\r\n            recurrence=Recurrence(pattern=AbsoluteYearlyPattern(month=month, day_of_month=day_of_month), start=start.date(), number=number))\r\nitem.save(send_meeting_invitations=SEND_TO_ALL_AND_SAVE_COPY)\r\n```\r\n\r\nBut when I swapping fields in AbsoluteYearlyPattern it's working\r\n\r\nbefore:\r\n\r\n```    \r\nFIELDS = [\r\n        # The month of the year, from 1 - 12\r\n        EnumField('month', field_uri='t:Month', enum=MONTHS, is_required=True),\r\n        # The day of month of an occurrence, in range 1 -> 31. If a particular month has less days than the day_of_month\r\n        # value, the last day in the month is assumed\r\n        IntegerField('day_of_month', field_uri='t:DayOfMonth', min=1, max=31, is_required=True),\r\n    ]\r\n```\r\n\r\n'month' field is first and 'day_of_month' is the last\r\n\r\nafter I swapped:\r\n\r\n```\r\n    FIELDS = [\r\n        # The day of month of an occurrence, in range 1 -> 31. If a particular month has less days than the day_of_month\r\n        # value, the last day in the month is assumed\r\n        IntegerField('day_of_month', field_uri='t:DayOfMonth', min=1, max=31, is_required=True),\r\n        # The month of the year, from 1 - 12\r\n        EnumField('month', field_uri='t:Month', enum=MONTHS, is_required=True),\r\n    ]\r\n```\r\n\r\nIt's working.\r\n\r\n [Fix PR](https://github.com/ecederstrand/exchangelib/pull/697)\r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/695", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/695/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/695/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/695/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/695", "id": 542360481, "node_id": "MDU6SXNzdWU1NDIzNjA0ODE=", "number": 695, "title": "EML Attachments are not parsed correctly", "user": {"login": "rrrsiem", "id": 56252206, "node_id": "MDQ6VXNlcjU2MjUyMjA2", "avatar_url": "https://avatars1.githubusercontent.com/u/56252206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rrrsiem", "html_url": "https://github.com/rrrsiem", "followers_url": "https://api.github.com/users/rrrsiem/followers", "following_url": "https://api.github.com/users/rrrsiem/following{/other_user}", "gists_url": "https://api.github.com/users/rrrsiem/gists{/gist_id}", "starred_url": "https://api.github.com/users/rrrsiem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rrrsiem/subscriptions", "organizations_url": "https://api.github.com/users/rrrsiem/orgs", "repos_url": "https://api.github.com/users/rrrsiem/repos", "events_url": "https://api.github.com/users/rrrsiem/events{/privacy}", "received_events_url": "https://api.github.com/users/rrrsiem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-25T16:00:37Z", "updated_at": "2020-01-09T12:26:10Z", "closed_at": "2020-01-09T12:26:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nCould you please help me to sort this out?\r\n\r\nAt the moment I'm writing a small application, which should monitor for an Exchange mailbox. If one of the emails contains an EML attachment - print it out.\r\n\r\nAfter some testing, I've figured out that for some of the emails attachment.item.mime_content is: \"Contents:\\nContent-Type: text/plain\\nMIME-Version: 1.0\". I tried with attachment.item.body - it's None in the same cases.\r\n\r\nAfter some experimentation I've found out that emails sent from Outlook are parsed correctly. However, if I send an email with EML attachment from Gmail - it doesn't work.\r\n\r\nPython version: 2.7\r\nexchangelib==2.1.1 (I tried on earlier version=1.12.0 as well - same behavior)\r\n\r\nHere is my test script:\r\n```python\r\nfrom exchangelib import Account, Configuration, Credentials, DELEGATE, FileAttachment, ItemAttachment\r\n\r\n\r\ndef test_attachments_extraction(server_address, user_mail_address, exchange_username, exchange_password):\r\n    credentials = Credentials(\r\n        username=exchange_username,\r\n        password=exchange_password)\r\n    config = Configuration(\r\n        server=server_address,\r\n        credentials=credentials)\r\n    account = Account(\r\n        primary_smtp_address=user_mail_address,\r\n        config=config,\r\n        autodiscover=False,\r\n        access_type=DELEGATE)\r\n\r\n    folder = get_folder_object_by_name(folder_name=\"Inbox\", account=account)\r\n\r\n    query = folder.all().filter(is_read=False)\r\n\r\n    for email in query:\r\n        print(u\"Parsing email with message_id={0}, subject={1}\".format(email.message_id, email.subject))\r\n\r\n        for attachment in email.attachments:\r\n            # if isinstance(attachment, FileAttachment):\r\n            #     print(u\"FileAttachment: {0}\".format(attachment.name))\r\n            if isinstance(attachment, ItemAttachment):\r\n                print(u\"ItemAttachment: {0}\\nContents: \\n{1}\\n\".format(attachment.name, attachment.item.mime_content))\r\n\r\n\r\ndef get_folder_object_by_name(folder_name, account=None):\r\n    if not account:\r\n        account = self.account\r\n\r\n    folders = list(account.root.glob('**/{0}'.format(folder_name)))\r\n    if folders:\r\n        # Return the first matching folder\r\n        return folders[0]\r\n    else:\r\n        return None\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    server = \"<server_address>\"\r\n    mail_address = \"<mail_address>\"\r\n    username = \"<username>\"\r\n    password = \"<username>\"\r\n\r\n    test_attachments_extraction(server_address=server,\r\n                                user_mail_address=mail_address,\r\n                                exchange_username=username,\r\n                                exchange_password=password)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/694", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/694/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/694/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/694/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/694", "id": 540254365, "node_id": "MDU6SXNzdWU1NDAyNTQzNjU=", "number": 694, "title": "Set Parameter for Meeting", "user": {"login": "pradipanand", "id": 40564101, "node_id": "MDQ6VXNlcjQwNTY0MTAx", "avatar_url": "https://avatars3.githubusercontent.com/u/40564101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pradipanand", "html_url": "https://github.com/pradipanand", "followers_url": "https://api.github.com/users/pradipanand/followers", "following_url": "https://api.github.com/users/pradipanand/following{/other_user}", "gists_url": "https://api.github.com/users/pradipanand/gists{/gist_id}", "starred_url": "https://api.github.com/users/pradipanand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pradipanand/subscriptions", "organizations_url": "https://api.github.com/users/pradipanand/orgs", "repos_url": "https://api.github.com/users/pradipanand/repos", "events_url": "https://api.github.com/users/pradipanand/events{/privacy}", "received_events_url": "https://api.github.com/users/pradipanand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-19T11:26:47Z", "updated_at": "2020-01-08T07:07:50Z", "closed_at": "2019-12-26T10:42:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not able to set AlldayEvent and Free(Appointment) in meeting, could you please help. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/692", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/692/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/692/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/692/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/692", "id": 537483200, "node_id": "MDU6SXNzdWU1Mzc0ODMyMDA=", "number": 692, "title": "Client Access server version", "user": {"login": "Ads5740", "id": 14123185, "node_id": "MDQ6VXNlcjE0MTIzMTg1", "avatar_url": "https://avatars3.githubusercontent.com/u/14123185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ads5740", "html_url": "https://github.com/Ads5740", "followers_url": "https://api.github.com/users/Ads5740/followers", "following_url": "https://api.github.com/users/Ads5740/following{/other_user}", "gists_url": "https://api.github.com/users/Ads5740/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ads5740/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ads5740/subscriptions", "organizations_url": "https://api.github.com/users/Ads5740/orgs", "repos_url": "https://api.github.com/users/Ads5740/repos", "events_url": "https://api.github.com/users/Ads5740/events{/privacy}", "received_events_url": "https://api.github.com/users/Ads5740/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-13T10:55:46Z", "updated_at": "2020-01-10T15:00:55Z", "closed_at": "2020-01-10T15:00:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm probably doing something wrong.\r\nI'm getting the following error:\r\n\r\n\"The Client Access server version doesn't match the Mailbox server version of the resource that was being accessed. To determine the correct URL to use to access the resource, use Autodiscover with the address of the resource.\"\r\n\r\nThe server version is returned correctly:\r\n\r\n\"\"\"Response data: <?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Header><h:ServerVersionInfo MajorVersion=\"15\" MinorVersion=\"0\" MajorBuildNumber=\"1497\" MinorBuildNumber=\"0\" Version=\"V2_23\" xmlns:h=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/></s:Header><s:Body><m:FindItemResponse xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"><m:ResponseMessages><m:FindItemResponseMessage ResponseClass=\"Error\"><m:MessageText>The Client Access server version doesn't match the Mailbox server version of the resource that was being accessed. To determine the correct URL to use to access the resource, use Autodiscover with the address of the resource.</m:MessageText><m:ResponseCode>ErrorWrongServerVersion</m:ResponseCode><m:DescriptiveLinkKey>0</m:DescriptiveLinkKey><m:MessageXml><t:Value \"\"\"\r\n\r\nIn the python code I have set the following:\r\n\r\n```Python\r\nversion = Version(build=Build(15, 0, 1497, 0))\r\nconfig = Configuration(server=server, credentials=credentials, version=version, auth_type=NTLM)\r\naccount = Account(primary_smtp_address=address, config=config, autodiscover=False, access_type=DELEGATE)\r\n```\r\nIn order to match, but I can't get it to work, any help would be appreciated\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/691", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/691/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/691/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/691/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/691", "id": 537080235, "node_id": "MDU6SXNzdWU1MzcwODAyMzU=", "number": 691, "title": "Status Code 400 with django", "user": {"login": "Dustlayer", "id": 54326282, "node_id": "MDQ6VXNlcjU0MzI2Mjgy", "avatar_url": "https://avatars0.githubusercontent.com/u/54326282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dustlayer", "html_url": "https://github.com/Dustlayer", "followers_url": "https://api.github.com/users/Dustlayer/followers", "following_url": "https://api.github.com/users/Dustlayer/following{/other_user}", "gists_url": "https://api.github.com/users/Dustlayer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dustlayer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dustlayer/subscriptions", "organizations_url": "https://api.github.com/users/Dustlayer/orgs", "repos_url": "https://api.github.com/users/Dustlayer/repos", "events_url": "https://api.github.com/users/Dustlayer/events{/privacy}", "received_events_url": "https://api.github.com/users/Dustlayer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-12T16:22:29Z", "updated_at": "2019-12-17T15:13:37Z", "closed_at": "2019-12-17T15:13:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use exchangelib (version 2.1.1) in a django-environment (Django Version 2.2).\r\nPython version 3.5.1.\r\nThe code I'm using works when executed manually. It also works when using the \"manage.py shell\" command.\r\nIt only doesn't work, when it is executed under \"real web conditions\".\r\nI'm trying to accomplish that the user can fill a form, which in the backend creates a new meeting on the Exchange-server.\r\nI even tried hardcoding my credentials, so it's not a problem of the form etc.\r\nI also tried defining our company proxy via `class ProxyAdapter(requests.adapters.HTTPAdapter)`, but it even should work without it.\r\n\r\nTesting `requests.get('https://mail.company.com/EWS/Exchange.asmx')` in the django code returns a `<Response [401]>`. So he should be able to access the server.\r\n\r\nSo the code in django:\r\n```\r\nfrom exchangelib import Credentials, Account, Configuration, DELEGATE\r\ncredentials = Credentials(\"DOMAIN\\\\username\", \"secretpassword\")\r\nconfig = Configuration(server=\"mail.company.com\", credentials=credentials)\r\naccount = Account(\"name.name@company.com\", config=config, autodiscover=False, access_type=DELEGATE)\r\n```\r\nThis code works when I execute it manually.\r\nBut with django I keep getting these:\r\n```\r\nUnknown failure\r\nRetry: 0\r\nWaited: 10\r\nTimeout: 120\r\nSession: 26831\r\nThread: 140558522308576\r\nAuth type: <requests_ntlm.requests_ntlm.HttpNtlmAuth object at 0x7fd6312c2be0>\r\nURL: https://mail.company.com/EWS/Exchange.asmx\r\nHTTP adapter: <mymodule.views.ProxyAdapter object at 0x7fd6312c2b38>\r\nAllow redirects: False\r\nStreaming: False\r\nResponse time: 0.06209137476980686\r\nStatus code: 400\r\nRequest headers: {'Content-Length': '0', 'Cookie': 'ClientId=KFUJLOEKFMY9WXSUBQ; expires=Fri, 11-Dec-2020 16:02:40 GMT; path=/; HttpOnly', 'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'User-Agent': 'exchangelib/2.1.1 (python-requests/2.22.0)', 'Content-Type': 'text/xml; charset=utf-8', 'Authorization': 'NTLM [...]/[...]', 'Connection': 'Keep-Alive'}\r\nResponse headers: {'Set-Cookie': 'exchangecookie=9c7db60d5de543a09966fbc0cb3c2bd2; expires=Sat, 12-Dec-2020 16:02:41 GMT; path=/; HttpOnly, X-BackEndCookie=S-1-5-21-1899719792-992224312-1087139693-182861=u56Lnp2ejJqBz8ucnZ7GnZ7Snc3LydLLnZrH0p7NyZvSmsfNyMmenJvOy8jIgYHNz83P0s/O0s7Oq87Jxc/NxcvP; expires=Sat, 11-Jan-2020 16:02:40 GMT; path=/EWS; secure; HttpOnly', 'Date': 'Thu, 12 Dec 2019 16:02:40 GMT', 'Content-Length': '0', 'X-Powered-By': 'ASP.NET', 'X-BEServer': 'SERVERNAME', 'X-DiagInfo': 'SERVERNAME', 'X-FEServer': 'OTHERSERVER', 'Server': 'Microsoft-IIS/8.5', 'request-id': 'aaa2a517-8151-4fc8-b61c-8d8c6dd3e3de', 'X-CalculatedBETarget': 'servername.domain.com', 'Persistent-Auth': 'true', 'Cache-Control': 'private', 'X-AspNet-Version': '4.0.30319'}\r\nRequest data: b''\r\nResponse data: b''\r\n```\r\n\r\nThe output I'm seeing in the webserver logs:\r\n```\r\nNo Windows timezone name found for timezone \"CET\". Fallback to UTC\r\nEWS https://mail.company.com/EWS/Exchange.asmx, account None: Exception in _get_elements: Traceback (most recent call last):\r\n  File \"/path/to/virtualenv/lib/python3.5/site-packages/cached_property.py\", line 69, in __get__\r\n    return obj_dict[name]\r\nKeyError: 'protocol'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/path/to/virtualenv/lib/python3.5/site-packages/exchangelib/services/common.py\", line 71, in _get_elements\r\n    response = self._get_response_xml(payload=payload)\r\n  File \"/path/to/virtualenv/lib/python3.5/site-packages/exchangelib/services/common.py\", line 135, in _get_response_xml\r\n    stream=self.streaming,\r\n  File \"/path/to/virtualenv/lib/python3.5/site-packages/exchangelib/util.py\", line 738, in post_ratelimited\r\n    _raise_response_errors(r, protocol, log_msg, log_vals)  # Always raises an exception\r\n  File \"/path/to/virtualenv/lib/python3.5/site-packages/exchangelib/util.py\", line 812, in _raise_response_errors\r\n    raise TransportError(str('Unknown failure\\\\n') + log_msg % log_vals)\r\nexchangelib.errors.TransportError: Unknown failure\r\n```\r\n\r\nHave you got some ideas on this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/690", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/690/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/690/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/690/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/690", "id": 536713369, "node_id": "MDU6SXNzdWU1MzY3MTMzNjk=", "number": 690, "title": "Unable to import into archive", "user": {"login": "CrowCakes", "id": 21997146, "node_id": "MDQ6VXNlcjIxOTk3MTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/21997146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrowCakes", "html_url": "https://github.com/CrowCakes", "followers_url": "https://api.github.com/users/CrowCakes/followers", "following_url": "https://api.github.com/users/CrowCakes/following{/other_user}", "gists_url": "https://api.github.com/users/CrowCakes/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrowCakes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrowCakes/subscriptions", "organizations_url": "https://api.github.com/users/CrowCakes/orgs", "repos_url": "https://api.github.com/users/CrowCakes/repos", "events_url": "https://api.github.com/users/CrowCakes/events{/privacy}", "received_events_url": "https://api.github.com/users/CrowCakes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-12T02:02:46Z", "updated_at": "2019-12-12T08:19:40Z", "closed_at": "2019-12-12T07:36:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "After following the import/export example in the readme, I was able to successfully export from a sample inbox and upload its messages into an inbox from a different account. I then tried to follow the same exact steps for the archive folders, but ran into this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"exchange-migrate.py\", line 44, in <module>\r\n    target_account.upload((target_archive, d) for d in data)\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\account.py\", line 345, in upload\r\n    return list(UploadItems(account=self, chunk_size=chunk_size).call(data=data))\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\services\\common.py\", line 535, in _pool_requests\r\n    elems = r.get()\r\n  File \"C:\\Python37\\lib\\multiprocessing\\pool.py\", line 657, in get\r\n    raise self._value\r\n  File \"C:\\Python37\\lib\\multiprocessing\\pool.py\", line 121, in worker\r\n    result = (True, func(*args, **kwds))\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\services\\common.py\", line 516, in <lambda>\r\n    lambda c: self._get_elements(payload=payload_func(c, **kwargs)),\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\services\\upload_items.py\", line 34, in get_payload\r\n    parentfolderid = ParentFolderId(parent_folder.id, parent_folder.changekey)\r\nAttributeError: 'FolderCollection' object has no attribute 'id'\r\n```\r\n\r\nThis is the code I am using:\r\n```\r\narchive = my_account.root.glob('*/Archive')\r\ntarget_archive = target_account.root.glob('*/Archive')\r\n\r\nfor folder in target_archive:\r\n    print(folder)\r\n\r\nitems = archive.all().only('id', 'changekey')\r\nprint(\"Exporting archive\")\r\ndata = my_account.export(items)\r\nfor item in data:\r\n    print(item[0:300], \"\\n-------------\\n\")\r\n\t\r\nprint(\"Migrating archive\")\r\ntarget_account.upload((target_archive, d) for d in data)\r\n```\r\n\r\nThis brings me to a related problem: I can't access the account's `archive_inbox` or its root using the account method.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Python37\\lib\\site-packages\\cached_property.py\", line 69, in __get__\r\n    return obj_dict[name]\r\nKeyError: 'archive_msg_folder_root'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Python37\\lib\\site-packages\\cached_property.py\", line 69, in __get__\r\n    return obj_dict[name]\r\nKeyError: 'archive_root'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\folders\\roots.py\", line 102, in get_distinguished\r\n    folder=cls(account=account, name=cls.DISTINGUISHED_FOLDER_ID, is_distinguished=True)\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\folders\\base.py\", line 508, in resolve\r\n    raise f\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\services\\common.py\", line 341, in _get_element_container\r\n    raise self._get_exception(code=response_code, text=msg_text, msg_xml=msg_xml)\r\nexchangelib.errors.ErrorFolderNotFound: The specified folder could not be found in the store.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"exchange-migrate.py\", line 28, in <module>\r\n    archive = my_account.archive_inbox\r\n  File \"C:\\Python37\\lib\\site-packages\\cached_property.py\", line 73, in __get__\r\n    return obj_dict.setdefault(name, self.func(obj))\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\account.py\", line 113, in archive_inbox\r\n    return self.archive_root.get_default_folder(ArchiveInbox)\r\n  File \"C:\\Python37\\lib\\site-packages\\cached_property.py\", line 73, in __get__\r\n    return obj_dict.setdefault(name, self.func(obj))\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\account.py\", line 137, in archive_root\r\n    return ArchiveRoot.get_distinguished(account=self)\r\n  File \"C:\\Python37\\lib\\site-packages\\exchangelib\\folders\\roots.py\", line 105, in get_distinguished\r\n    raise ErrorFolderNotFound('Could not find distinguished folder %s' % cls.DISTINGUISHED_FOLDER_ID)\r\nexchangelib.errors.ErrorFolderNotFound: Could not find distinguished folder archiveroot\r\n```\r\n\r\nI'd thought that the import function only needed a folder, but it seems something's wrong with the steps leading up to it. Is this because something unexpected was found in the mailbox hierarchy?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/687", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/687/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/687/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/687/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/687", "id": 532632271, "node_id": "MDU6SXNzdWU1MzI2MzIyNzE=", "number": 687, "title": "Index out of range error in pool_requests on 2.1.0", "user": {"login": "jcalero", "id": 760405, "node_id": "MDQ6VXNlcjc2MDQwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/760405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcalero", "html_url": "https://github.com/jcalero", "followers_url": "https://api.github.com/users/jcalero/followers", "following_url": "https://api.github.com/users/jcalero/following{/other_user}", "gists_url": "https://api.github.com/users/jcalero/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcalero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcalero/subscriptions", "organizations_url": "https://api.github.com/users/jcalero/orgs", "repos_url": "https://api.github.com/users/jcalero/repos", "events_url": "https://api.github.com/users/jcalero/events{/privacy}", "received_events_url": "https://api.github.com/users/jcalero/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-04T11:45:18Z", "updated_at": "2019-12-05T07:58:00Z", "closed_at": "2019-12-05T07:58:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Haven't been able to fully pin down the cause, but 2.0.1 doesn't have this issue.\r\n\r\n```\r\n    def _pool_requests(self, payload_func, items, **kwargs):\r\n        log.debug('Processing items in chunks of %s', self.chunk_size)\r\n        # Chop items list into suitable pieces and let worker threads chew on the work. The order of the output result\r\n        # list must be the same as the input id list, so the caller knows which status message belongs to which ID.\r\n        # Yield results as they become available.\r\n        results = []\r\n        n = 0\r\n        for chunk in chunkify(items, self.chunk_size):\r\n            n += 1\r\n            log.debug('Starting %s._get_elements worker %s for %s items', self.__class__.__name__, n, len(chunk))\r\n            results.append((n, self.protocol.thread_pool.apply_async(\r\n                lambda c: self._get_elements(payload=payload_func(c, **kwargs)),\r\n                (chunk,)\r\n            )))\r\n\r\n            # Results will be available before iteration has finished if 'items' is a slow generator. Return early\r\n            for idx in range(len(results)):\r\n>               i, r = results[idx]\r\nE               IndexError: list index out of range\r\n```\r\n\r\nIt seems like the commit that introduced this is: https://github.com/ecederstrand/exchangelib/commit/a1e2f919a4c3b8924bb83e212fd9b34c787c51b6, and it does look like you're modifying the results list (`del results[idx]`) while iterating through the `range` of the length of the list, causing a possible case of `idx` being out of range on the next iteration.\r\n\r\nThe code I'm running (abridged):\r\n```\r\nfolder_collection = FolderCollection(\r\n    account=cursor.mailbox.account, folders=cursor.mailbox.folders\r\n)\r\nquery = folder_collection.all().order_by(\"datetime_received\")\r\nmailbox_iter = query.iterator()\r\n\r\nwhile True:\r\n    try:\r\n        item = next(mailbox_iter)  # <- Fails here\r\n    except StopIteration:\r\n        break\r\n    do_something(item)\r\n```\r\n\r\nSome more debug output from a test in my service:\r\n```\r\news/tests/test_service.py:104:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\news/service.py:217: in poll\r\n    cursor, mailbox_iter, batch_limit\r\news/service.py:131: in _collect_batch\r\n    item = next(mailbox_iter)\r\n../../../.virtualenv/r/lib/python3.6/site-packages/exchangelib/queryset.py:367: in _item_yielder\r\n    for i in iterable:\r\n../../../.virtualenv/r/lib/python3.6/site-packages/exchangelib/account.py:600: in fetch\r\n    shape=ID_ONLY,\r\n../../../.virtualenv/r/lib/python3.6/site-packages/exchangelib/account.py:310: in _consume_item_service\r\n    for i in service_cls(account=self, chunk_size=chunk_size).call(**kwargs):\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <exchangelib.services.get_item.GetItem object at 0x7fb2981a64e0>\r\npayload_func = <bound method GetItem.get_payload of <exchangelib.services.get_item.GetItem object at 0x7fb2981a64e0>>\r\nitems = <itertools.chain object at 0x7fb2981a6a58>\r\nkwargs = {'additional_fields': [FieldPath(IntegerField(name='conflicting_meeting_count', value_cls=<class 'int'>, is_list=False..._class', value_cls=<class 'str'>, is_list=False, is_complex=False, default=None), None, None), ...], 'shape': 'IdOnly'}\r\nresults = [(2, <multiprocessing.pool.ApplyResult object at 0x7fb2981a6908>)], n = 3\r\nchunk = [('AAMkADg2NzJjZGJmLWQzZjMtNDIyMy1hYjAyLTYxYTZmMjc5ODRiMwBGAAAAAAC6KR07ZTEZT4VeKsmJwmCUBwBFLwjr0uvtSYjhp5jgRRofAAAB2Ps/AABFLwjr0uvtSYjhp5jgRRofAAAB2P5jAAA=', 'CQAAABYAAABFLwjr0uvtSYjhp5jgRRofAAAB2QBo')]\r\nidx = 2, i = 3, r = <multiprocessing.pool.ApplyResult object at 0x7fb290749ba8>\r\nelem = <Element {http://schemas.microsoft.com/exchange/services/2006/types}Message at 0x7fb29076be88>\r\n\r\n    def _pool_requests(self, payload_func, items, **kwargs):\r\n        log.debug('Processing items in chunks of %s', self.chunk_size)\r\n        # Chop items list into suitable pieces and let worker threads chew on the work. The order of the output result\r\n        # list must be the same as the input id list, so the caller knows which status message belongs to which ID.\r\n        # Yield results as they become available.\r\n        results = []\r\n        n = 0\r\n        for chunk in chunkify(items, self.chunk_size):\r\n            n += 1\r\n            log.debug('Starting %s._get_elements worker %s for %s items', self.__class__.__name__, n, len(chunk))\r\n            results.append((n, self.protocol.thread_pool.apply_async(\r\n                lambda c: self._get_elements(payload=payload_func(c, **kwargs)),\r\n                (chunk,)\r\n            )))\r\n\r\n            # Results will be available before iteration has finished if 'items' is a slow generator. Return early\r\n            for idx in range(len(results)):\r\n>               i, r = results[idx]\r\nE               IndexError: list index out of range\r\n\r\n../../../.virtualenv/r/lib/python3.6/site-packages/exchangelib/services/common.py:522: IndexError\r\n-------------------------------------------------------------------- Captured stdout call ---------------------------------------------------------------------\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/686", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/686/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/686/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/686/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/686", "id": 532134248, "node_id": "MDU6SXNzdWU1MzIxMzQyNDg=", "number": 686, "title": "Access to large file attachments (In version 2.1.0)", "user": {"login": "joanrodriguezr", "id": 14201057, "node_id": "MDQ6VXNlcjE0MjAxMDU3", "avatar_url": "https://avatars1.githubusercontent.com/u/14201057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joanrodriguezr", "html_url": "https://github.com/joanrodriguezr", "followers_url": "https://api.github.com/users/joanrodriguezr/followers", "following_url": "https://api.github.com/users/joanrodriguezr/following{/other_user}", "gists_url": "https://api.github.com/users/joanrodriguezr/gists{/gist_id}", "starred_url": "https://api.github.com/users/joanrodriguezr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joanrodriguezr/subscriptions", "organizations_url": "https://api.github.com/users/joanrodriguezr/orgs", "repos_url": "https://api.github.com/users/joanrodriguezr/repos", "events_url": "https://api.github.com/users/joanrodriguezr/events{/privacy}", "received_events_url": "https://api.github.com/users/joanrodriguezr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-03T17:09:01Z", "updated_at": "2020-01-10T06:38:39Z", "closed_at": "2020-01-10T06:35:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Erik,\r\n\r\nI need to retrieve large attachments recursively in on an attached message which has inside it the PDF file attached which I want to access.\r\n\r\nI have been looking at the different Issues another users have opened in your project, and tried to apply some of the changes you have proposed them but I can't see a proper solution to the need I have.\r\n\r\nIf I filter items with this:\r\n\r\naccount.inbox.all().only('subject','datetime_received','sender','body','attachments','headers','mime_content')\r\n\r\nI get the ERROR:  \" 'NoneType' object has no attribute 'name' \"\r\n\r\nBut if I filter with this:\r\naccount.inbox.all().only('subject','datetime_received','sender','body','attachments','headers')\r\n\r\nAnd I try to access with mailItem.attachment I get 1 attachment for the very first Message (which has instance of ItemAttachment) but it does not have the second level attachment:\r\n\r\nMessage(sensitivity='Normal', attachments=[], importance='Normal', reminder_is_set=False, reminder_minutes_before_start=0, is_read_receipt_requested=False, is_delivery_receipt_requested=False, is_read=False, is_response_requested=False)\r\n\r\nCan you shed some light on this please?\r\n\r\nThank you very much!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/685", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/685/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/685/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/685/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/685", "id": 529949187, "node_id": "MDU6SXNzdWU1Mjk5NDkxODc=", "number": 685, "title": "How to use FindPeople?", "user": {"login": "marekk1717", "id": 25406173, "node_id": "MDQ6VXNlcjI1NDA2MTcz", "avatar_url": "https://avatars0.githubusercontent.com/u/25406173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marekk1717", "html_url": "https://github.com/marekk1717", "followers_url": "https://api.github.com/users/marekk1717/followers", "following_url": "https://api.github.com/users/marekk1717/following{/other_user}", "gists_url": "https://api.github.com/users/marekk1717/gists{/gist_id}", "starred_url": "https://api.github.com/users/marekk1717/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marekk1717/subscriptions", "organizations_url": "https://api.github.com/users/marekk1717/orgs", "repos_url": "https://api.github.com/users/marekk1717/repos", "events_url": "https://api.github.com/users/marekk1717/events{/privacy}", "received_events_url": "https://api.github.com/users/marekk1717/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-28T14:38:08Z", "updated_at": "2019-12-05T07:28:33Z", "closed_at": "2019-12-02T09:32:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to find manager assigned to user. First I need to find contact/user. \"GAL Contacts\" is empty. I think it should be possible with FindPeople. Do you have any idea how it can be used?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/684", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/684/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/684/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/684/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/684", "id": 529668370, "node_id": "MDU6SXNzdWU1Mjk2NjgzNzA=", "number": 684, "title": "sender email_address unproperly parsed", "user": {"login": "immez", "id": 7035123, "node_id": "MDQ6VXNlcjcwMzUxMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7035123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immez", "html_url": "https://github.com/immez", "followers_url": "https://api.github.com/users/immez/followers", "following_url": "https://api.github.com/users/immez/following{/other_user}", "gists_url": "https://api.github.com/users/immez/gists{/gist_id}", "starred_url": "https://api.github.com/users/immez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immez/subscriptions", "organizations_url": "https://api.github.com/users/immez/orgs", "repos_url": "https://api.github.com/users/immez/repos", "events_url": "https://api.github.com/users/immez/events{/privacy}", "received_events_url": "https://api.github.com/users/immez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-28T03:11:10Z", "updated_at": "2019-11-28T15:13:24Z", "closed_at": "2019-11-28T15:13:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not sure if this is a situation that conflicts with RFC or any protocols.\r\nBut if there was a comma in the sender name, exchangelib may parse it as multi-senders?\r\nE,g: a mail whose mime_content contains \"From: immez, Co. Ltd <immez@xxx.yyy>\"\r\nthe mail.sender.email_address will be immez, and the chars after the comma will be ignored?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/683", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/683/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/683/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/683/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/683", "id": 529294392, "node_id": "MDU6SXNzdWU1MjkyOTQzOTI=", "number": 683, "title": "Failed to convert 'mime_content' into class <str>", "user": {"login": "immez", "id": 7035123, "node_id": "MDQ6VXNlcjcwMzUxMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7035123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immez", "html_url": "https://github.com/immez", "followers_url": "https://api.github.com/users/immez/followers", "following_url": "https://api.github.com/users/immez/following{/other_user}", "gists_url": "https://api.github.com/users/immez/gists{/gist_id}", "starred_url": "https://api.github.com/users/immez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immez/subscriptions", "organizations_url": "https://api.github.com/users/immez/orgs", "repos_url": "https://api.github.com/users/immez/repos", "events_url": "https://api.github.com/users/immez/events{/privacy}", "received_events_url": "https://api.github.com/users/immez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-27T11:42:51Z", "updated_at": "2019-11-28T14:32:41Z", "closed_at": "2019-11-27T14:49:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have encountered this error several times: Cannot convert value '{some chars looks like base64encoded}' on field 'mime_content' to type <class 'str'>\r\nWhen the error occurs, item.mime_content will be None, and sometimes the other properties of the mail are also failed to be parsed, e.g. item.datetime_received was set to be None.\r\nWhat can I do for this error? \r\n\r\nSorry for that I can't give the example mime_content here for privacy reasons.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/682", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/682/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/682/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/682", "id": 526883999, "node_id": "MDU6SXNzdWU1MjY4ODM5OTk=", "number": 682, "title": "ErrorAccessDenied after upgrading from 1.12.2 to 1.12.3", "user": {"login": "nblivin", "id": 1562779, "node_id": "MDQ6VXNlcjE1NjI3Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1562779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nblivin", "html_url": "https://github.com/nblivin", "followers_url": "https://api.github.com/users/nblivin/followers", "following_url": "https://api.github.com/users/nblivin/following{/other_user}", "gists_url": "https://api.github.com/users/nblivin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nblivin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nblivin/subscriptions", "organizations_url": "https://api.github.com/users/nblivin/orgs", "repos_url": "https://api.github.com/users/nblivin/repos", "events_url": "https://api.github.com/users/nblivin/events{/privacy}", "received_events_url": "https://api.github.com/users/nblivin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-21T22:46:06Z", "updated_at": "2019-11-22T06:04:18Z", "closed_at": "2019-11-22T06:04:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "We recently upgraded from 1.12.2 and queries started failing with the error \"exchangelib.errors.ErrorAccessDenied: Access is denied. Check credentials and try again.\" Downgrading to 1.12.2 resolves the error, upgrading to 1.12.3 causes it to occur.\r\n\r\nLooking at the differences between the two versions, it looks like the inclusion of FieldURI=\"folder:PermissionSet\" is the only difference in the request data for the request that receives the error response. Any ideas on how I might resolve the issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/681", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/681/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/681/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/681/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/681", "id": 525721043, "node_id": "MDU6SXNzdWU1MjU3MjEwNDM=", "number": 681, "title": "[Q] possible to work against local ics files?", "user": {"login": "laur89", "id": 4551018, "node_id": "MDQ6VXNlcjQ1NTEwMTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4551018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laur89", "html_url": "https://github.com/laur89", "followers_url": "https://api.github.com/users/laur89/followers", "following_url": "https://api.github.com/users/laur89/following{/other_user}", "gists_url": "https://api.github.com/users/laur89/gists{/gist_id}", "starred_url": "https://api.github.com/users/laur89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laur89/subscriptions", "organizations_url": "https://api.github.com/users/laur89/orgs", "repos_url": "https://api.github.com/users/laur89/repos", "events_url": "https://api.github.com/users/laur89/events{/privacy}", "received_events_url": "https://api.github.com/users/laur89/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-20T10:43:19Z", "updated_at": "2019-11-21T05:55:02Z", "closed_at": "2019-11-21T05:55:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "exchangelib is doing amazing work at interacting with the DAV servers.\r\n\r\na) Would it still be possible to use the library against local .ics files that are being kept in-sync by other means (eg by [vdirsyncer](https://github.com/pimutils/vdirsyncer/))?\r\nb) if not, does exchangelib offer similar support for synchronization?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/680", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/680/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/680/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/680/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/680", "id": 525686734, "node_id": "MDU6SXNzdWU1MjU2ODY3MzQ=", "number": 680, "title": "Version not set", "user": {"login": "madpipeline", "id": 3527534, "node_id": "MDQ6VXNlcjM1Mjc1MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3527534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madpipeline", "html_url": "https://github.com/madpipeline", "followers_url": "https://api.github.com/users/madpipeline/followers", "following_url": "https://api.github.com/users/madpipeline/following{/other_user}", "gists_url": "https://api.github.com/users/madpipeline/gists{/gist_id}", "starred_url": "https://api.github.com/users/madpipeline/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madpipeline/subscriptions", "organizations_url": "https://api.github.com/users/madpipeline/orgs", "repos_url": "https://api.github.com/users/madpipeline/repos", "events_url": "https://api.github.com/users/madpipeline/events{/privacy}", "received_events_url": "https://api.github.com/users/madpipeline/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-20T09:42:18Z", "updated_at": "2019-11-21T18:35:40Z", "closed_at": "2019-11-21T16:25:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using exchangelib 2.1.0.\r\n\r\nWith the following code: (example from readme)\r\n\r\n```\r\nfrom exchangelib import Credentials, Account\r\n\r\ncredentials = Credentials('john@example.com', 'topsecret')\r\nconfig = Configuration(server='outlook.office365.com', credentials=credentials)\r\naccount = Account('john@example.com', credentials=credentials, config=config, autodiscover=False)\r\n\r\nfor item in account.inbox.all().order_by('-datetime_received')[:100]:\r\n    print(item.subject, item.sender, item.datetime_received)\r\n```\r\n\r\nI'm getting the error: `AttributeError: 'NoneType' object has no attribute 'major_version'`.\r\n\r\nStack trace:\r\n\r\n<details>\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/cached_property.py in __get__(self, obj, cls)\r\n     68                 # check if the value was computed before the lock was acquired\r\n---> 69                 return obj_dict[name]\r\n     70 \r\n\r\nKeyError: 'inbox'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/cached_property.py in __get__(self, obj, cls)\r\n     68                 # check if the value was computed before the lock was acquired\r\n---> 69                 return obj_dict[name]\r\n     70 \r\n\r\nKeyError: 'root'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-18-7df589075485> in <module>\r\n----> 1 for item in account.inbox.all().order_by('-datetime_received')[:100]:\r\n      2     print(item.subject, item.sender, item.datetime_received)\r\n      3 \r\n\r\n/usr/local/lib/python3.7/site-packages/cached_property.py in __get__(self, obj, cls)\r\n     71             except KeyError:\r\n     72                 # if not, do the calculation and release the lock\r\n---> 73                 return obj_dict.setdefault(name, self.func(obj))\r\n     74 \r\n     75 \r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/account.py in inbox(self)\r\n    175     @threaded_cached_property\r\n    176     def inbox(self):\r\n--> 177         return self.root.get_default_folder(Inbox)\r\n    178 \r\n    179     @threaded_cached_property\r\n\r\n/usr/local/lib/python3.7/site-packages/cached_property.py in __get__(self, obj, cls)\r\n     71             except KeyError:\r\n     72                 # if not, do the calculation and release the lock\r\n---> 73                 return obj_dict.setdefault(name, self.func(obj))\r\n     74 \r\n     75 \r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/account.py in root(self)\r\n    239     @threaded_cached_property\r\n    240     def root(self):\r\n--> 241         return Root.get_distinguished(account=self)\r\n    242 \r\n    243     @threaded_cached_property\r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/folders/roots.py in get_distinguished(cls, account)\r\n    100             return cls.resolve(\r\n    101                 account=account,\r\n--> 102                 folder=cls(account=account, name=cls.DISTINGUISHED_FOLDER_ID, is_distinguished=True)\r\n    103             )\r\n    104         except ErrorFolderNotFound:\r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/folders/base.py in resolve(cls, account, folder)\r\n    499     def resolve(cls, account, folder):\r\n    500         # Resolve a single folder\r\n--> 501         folders = list(FolderCollection(account=account, folders=[folder]).resolve())\r\n    502         if not folders:\r\n    503             raise ErrorFolderNotFound('Could not find folder %r' % folder)\r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/folders/collections.py in resolve(self)\r\n    231                 resolveable_folders.append(f)\r\n    232         # Fetch all properties for the remaining folders of folder IDs\r\n--> 233         additional_fields = self.get_folder_fields(target_cls=self._get_target_cls(), is_complex=None)\r\n    234         for f in self.__class__(account=self.account, folders=resolveable_folders).get_folders(\r\n    235                 additional_fields=additional_fields\r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/folders/collections.py in get_folder_fields(self, target_cls, is_complex)\r\n    199     def get_folder_fields(self, target_cls, is_complex=None):\r\n    200         return {\r\n--> 201             FieldPath(field=f) for f in target_cls.supported_fields(version=self.account.version)\r\n    202             if is_complex is None or f.is_complex is is_complex\r\n    203         }\r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/folders/base.py in supported_fields(cls, version)\r\n    494     @classmethod\r\n    495     def supported_fields(cls, version=None):\r\n--> 496         return tuple(f for f in cls.FIELDS if f.name not in ('id', 'changekey') and f.supports_version(version))\r\n    497 \r\n    498     @classmethod\r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/folders/base.py in <genexpr>(.0)\r\n    494     @classmethod\r\n    495     def supported_fields(cls, version=None):\r\n--> 496         return tuple(f for f in cls.FIELDS if f.name not in ('id', 'changekey') and f.supports_version(version))\r\n    497 \r\n    498     @classmethod\r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/fields.py in supports_version(self, version)\r\n    320         if not version:\r\n    321             return True\r\n--> 322         if self.supported_from and version.build < self.supported_from:\r\n    323             return False\r\n    324         if self.deprecated_from and version.build >= self.deprecated_from:\r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/version.py in __gt__(self, other)\r\n    144 \r\n    145     def __gt__(self, other):\r\n--> 146         return self.__cmp__(other) > 0\r\n    147 \r\n    148     def __ge__(self, other):\r\n\r\n/usr/local/lib/python3.7/site-packages/exchangelib/version.py in __cmp__(self, other)\r\n    117     def __cmp__(self, other):\r\n    118         # __cmp__ is not a magic method in Python3. We'll just use it here to implement comparison operators\r\n--> 119         c = (self.major_version > other.major_version) - (self.major_version < other.major_version)\r\n    120         if c != 0:\r\n    121             return c\r\n\r\nAttributeError: 'NoneType' object has no attribute 'major_version'\r\n```\r\n\r\n</details>\r\n\r\n\r\nI'm disabling autodiscover because it's failing. I guess it's related to https://github.com/ecederstrand/exchangelib/issues/337.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/679", "repository_url": "https://api.github.com/repos/ecederstrand/exchangelib", "labels_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/679/labels{/name}", "comments_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/679/comments", "events_url": "https://api.github.com/repos/ecederstrand/exchangelib/issues/679/events", "html_url": "https://github.com/ecederstrand/exchangelib/issues/679", "id": 525023294, "node_id": "MDU6SXNzdWU1MjUwMjMyOTQ=", "number": 679, "title": "Rertrieving Values from QuerySets", "user": {"login": "gprinz", "id": 32190139, "node_id": "MDQ6VXNlcjMyMTkwMTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/32190139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gprinz", "html_url": "https://github.com/gprinz", "followers_url": "https://api.github.com/users/gprinz/followers", "following_url": "https://api.github.com/users/gprinz/following{/other_user}", "gists_url": "https://api.github.com/users/gprinz/gists{/gist_id}", "starred_url": "https://api.github.com/users/gprinz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gprinz/subscriptions", "organizations_url": "https://api.github.com/users/gprinz/orgs", "repos_url": "https://api.github.com/users/gprinz/repos", "events_url": "https://api.github.com/users/gprinz/events{/privacy}", "received_events_url": "https://api.github.com/users/gprinz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-19T13:52:29Z", "updated_at": "2019-11-22T04:34:26Z", "closed_at": "2019-11-22T04:34:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "As described in the inbox, it is possible to query the items of a mailbox with the following statement:\r\n```\r\n q = (Q(subject__icontains='ch mim | inc'))\r\n items = inbox.filter(q)\r\n```\r\nitems are of type QuerySet, but how can we extract information out of them (for example the item id or change key?)", "performed_via_github_app": null, "score": 1.0}]}