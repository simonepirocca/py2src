{"total_count": 818, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/spotify/luigi/issues/2979", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2979/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2979/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2979/events", "html_url": "https://github.com/spotify/luigi/issues/2979", "id": 676189642, "node_id": "MDU6SXNzdWU2NzYxODk2NDI=", "number": 2979, "title": "[Question] What should be the value of --address arg for luigid", "user": {"login": "tashrifbillah", "id": 35086881, "node_id": "MDQ6VXNlcjM1MDg2ODgx", "avatar_url": "https://avatars3.githubusercontent.com/u/35086881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tashrifbillah", "html_url": "https://github.com/tashrifbillah", "followers_url": "https://api.github.com/users/tashrifbillah/followers", "following_url": "https://api.github.com/users/tashrifbillah/following{/other_user}", "gists_url": "https://api.github.com/users/tashrifbillah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tashrifbillah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tashrifbillah/subscriptions", "organizations_url": "https://api.github.com/users/tashrifbillah/orgs", "repos_url": "https://api.github.com/users/tashrifbillah/repos", "events_url": "https://api.github.com/users/tashrifbillah/events{/privacy}", "received_events_url": "https://api.github.com/users/tashrifbillah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-10T14:41:19Z", "updated_at": "2020-08-12T22:01:30Z", "closed_at": "2020-08-12T22:01:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nWhat should be the value of `--address` arg for `luigid` when launching the server? I tried many things-- http://localhost, http://127.0.0.1, etc. but they all result in the following error:\r\n> (base) [tb571@pnl-z840-2 luigi-pnlpipe]$ luigid --port 8083 --logdir luigi-server.log/ --address http://localhost\r\n```vim\r\nTraceback (most recent call last):\r\n\u00a0 File \"/home/tb571/miniconda3/bin/luigid\", line 11, in <module>\r\n\u00a0 \u00a0 sys.exit(luigid())\r\n\u00a0 File \"/home/tb571/miniconda3/lib/python3.6/site-packages/luigi/cmdline.py\", line 37, in luigid\r\n\u00a0 \u00a0 luigi.server.run(api_port=opts.port, address=opts.address, unix_socket=opts.unix_socket)\r\n\u00a0 File \"/home/tb571/miniconda3/lib/python3.6/site-packages/luigi/server.py\", line 341, in run\r\n\u00a0 \u00a0 unix_socket=unix_socket,\r\n\u00a0 File \"/home/tb571/miniconda3/lib/python3.6/site-packages/luigi/server.py\", line 319, in _init_api\r\n\u00a0 \u00a0 api_sockets = tornado.netutil.bind_sockets(api_port, address=address)\r\n\u00a0 File \"/home/tb571/miniconda3/lib/python3.6/site-packages/tornado/netutil.py\", line 122, in bind_sockets\r\n\u00a0 \u00a0 0, flags)):\r\n\u00a0 File \"/home/tb571/miniconda3/lib/python3.6/socket.py\", line 745, in getaddrinfo\r\n\u00a0 \u00a0 for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\r\nsocket.gaierror: [Errno -2] Name or service not known\r\n```\r\n\r\nI understand that the `default-scheduler-url` is http://localhost:8082 but I need to change the IP address for my localhost so asking.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2972", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2972/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2972/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2972/events", "html_url": "https://github.com/spotify/luigi/issues/2972", "id": 659531413, "node_id": "MDU6SXNzdWU2NTk1MzE0MTM=", "number": 2972, "title": "[Question] Setting proxy_pass for Luigi in nginx", "user": {"login": "tashrifbillah", "id": 35086881, "node_id": "MDQ6VXNlcjM1MDg2ODgx", "avatar_url": "https://avatars3.githubusercontent.com/u/35086881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tashrifbillah", "html_url": "https://github.com/tashrifbillah", "followers_url": "https://api.github.com/users/tashrifbillah/followers", "following_url": "https://api.github.com/users/tashrifbillah/following{/other_user}", "gists_url": "https://api.github.com/users/tashrifbillah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tashrifbillah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tashrifbillah/subscriptions", "organizations_url": "https://api.github.com/users/tashrifbillah/orgs", "repos_url": "https://api.github.com/users/tashrifbillah/repos", "events_url": "https://api.github.com/users/tashrifbillah/events{/privacy}", "received_events_url": "https://api.github.com/users/tashrifbillah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-17T18:54:48Z", "updated_at": "2020-07-17T22:07:04Z", "closed_at": "2020-07-17T22:07:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Luigi server is running on a remote server `my.org` at port 8082. http://my.org is publicly visible so I need to set up nginx `proxy_pass` at the remote server for being able to see the Luigi visualizer on the internet which is available at http://localhost:8082 locally.\r\n\r\nFor this purpose, I edited the last few lines-- `server{}` block of the default `/etc/nginx.conf`:\r\n```vim\r\nuser nginx;\r\nworker_processes auto;\r\nerror_log /var/log/nginx/error.log;\r\npid /run/nginx.pid;\r\n\r\ninclude /usr/share/nginx/modules/*.conf;\r\n\r\nevents {\r\n    worker_connections 1024;\r\n}\r\n\r\nhttp {\r\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\r\n                      '$status $body_bytes_sent \"$http_referer\" '\r\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\r\n\r\n    access_log  /var/log/nginx/access.log  main;\r\n\r\n    sendfile            on;\r\n    tcp_nopush          on;\r\n    tcp_nodelay         on;\r\n    keepalive_timeout   65;\r\n    types_hash_max_size 2048;\r\n\r\n    include             /etc/nginx/mime.types;\r\n    default_type        application/octet-stream;\r\n\r\n    include /etc/nginx/conf.d/*.conf;\r\n\r\n    server {\r\n       location / {\r\n           proxy_pass http://127.0.0.1:8082;\r\n       }\r\n    }\r\n\r\n}\r\n```\r\n\r\nThen, when I plug in http://my.org/index.html on the internet, I get:\r\n```html\r\n<html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.16.1</center>\r\n</body>\r\n</html>\r\n```\r\n\r\nCan anyone please help with setting [proxy_pass](http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass) right?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2949", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2949/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2949/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2949/events", "html_url": "https://github.com/spotify/luigi/issues/2949", "id": 621325364, "node_id": "MDU6SXNzdWU2MjEzMjUzNjQ=", "number": 2949, "title": "Support Tornado>=6", "user": {"login": "maresb", "id": 15216687, "node_id": "MDQ6VXNlcjE1MjE2Njg3", "avatar_url": "https://avatars3.githubusercontent.com/u/15216687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maresb", "html_url": "https://github.com/maresb", "followers_url": "https://api.github.com/users/maresb/followers", "following_url": "https://api.github.com/users/maresb/following{/other_user}", "gists_url": "https://api.github.com/users/maresb/gists{/gist_id}", "starred_url": "https://api.github.com/users/maresb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maresb/subscriptions", "organizations_url": "https://api.github.com/users/maresb/orgs", "repos_url": "https://api.github.com/users/maresb/repos", "events_url": "https://api.github.com/users/maresb/events{/privacy}", "received_events_url": "https://api.github.com/users/maresb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-19T22:30:21Z", "updated_at": "2020-08-10T14:35:43Z", "closed_at": "2020-08-10T14:35:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry to duplicate #2805, but I'm forced to uninstall Luigi from my JupyterLab environment since Tornado < 6 is breaking my extensions. Would you reconsider supporting Tornado 6? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2939", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2939/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2939/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2939/events", "html_url": "https://github.com/spotify/luigi/issues/2939", "id": 611342877, "node_id": "MDU6SXNzdWU2MTEzNDI4Nzc=", "number": 2939, "title": "Threading.Thread.isAlive has been deprecated and removed in Python 3.9.", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-03T06:14:50Z", "updated_at": "2020-05-30T16:31:24Z", "closed_at": "2020-05-30T16:31:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Threading.Thread.isAlive has been deprecated and removed in Python 3.9 in favor of Threading.Thread.is_alive that is present in both Python 2 and 3 . Reference : https://github.com/python/cpython/pull/15225\r\n\r\n```\r\ntest/worker_test.py\r\n885:                self.assertEqual(first_should_live, t1.isAlive())\r\n886:                self.assertEqual(second_should_live, t2.isAlive())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2925", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2925/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2925/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2925/events", "html_url": "https://github.com/spotify/luigi/issues/2925", "id": 593069133, "node_id": "MDU6SXNzdWU1OTMwNjkxMzM=", "number": 2925, "title": "luigi re-runing tasks", "user": {"login": "Bcjg23", "id": 54872638, "node_id": "MDQ6VXNlcjU0ODcyNjM4", "avatar_url": "https://avatars3.githubusercontent.com/u/54872638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bcjg23", "html_url": "https://github.com/Bcjg23", "followers_url": "https://api.github.com/users/Bcjg23/followers", "following_url": "https://api.github.com/users/Bcjg23/following{/other_user}", "gists_url": "https://api.github.com/users/Bcjg23/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bcjg23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bcjg23/subscriptions", "organizations_url": "https://api.github.com/users/Bcjg23/orgs", "repos_url": "https://api.github.com/users/Bcjg23/repos", "events_url": "https://api.github.com/users/Bcjg23/events{/privacy}", "received_events_url": "https://api.github.com/users/Bcjg23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-03T04:32:32Z", "updated_at": "2020-04-26T08:29:28Z", "closed_at": "2020-04-16T18:59:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\nI am new to luigi and I have some tasks to create a RDS instance in AWS (CreaInstanciaRDS), another to create schemas (CreaEsquemasBD) for the database and a 3rd task to create the tables in the schema (CreaTablasBD). But every time I run the *main* task -which I understand is the task that creates the tables-, all the required tasks also run again. \r\nI am using complete() method in all tasks since any of them return a file.\r\n\r\n![Screenshot from 2020-04-02 22-23-42](https://user-images.githubusercontent.com/54872638/78324287-8432f200-7531-11ea-80bd-73c8c264d899.png)\r\n![Screenshot from 2020-04-02 22-23-48](https://user-images.githubusercontent.com/54872638/78324286-8301c500-7531-11ea-810a-ea5691a7c58d.png)\r\n![Screenshot from 2020-04-02 22-24-16](https://user-images.githubusercontent.com/54872638/78324284-81380180-7531-11ea-8e70-fc94b5307b04.png)\r\n\r\nThanks in advance!\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2922", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2922/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2922/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2922/events", "html_url": "https://github.com/spotify/luigi/issues/2922", "id": 588796216, "node_id": "MDU6SXNzdWU1ODg3OTYyMTY=", "number": 2922, "title": "pykube is archived and no longer maintained", "user": {"login": "jbw", "id": 41447, "node_id": "MDQ6VXNlcjQxNDQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/41447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbw", "html_url": "https://github.com/jbw", "followers_url": "https://api.github.com/users/jbw/followers", "following_url": "https://api.github.com/users/jbw/following{/other_user}", "gists_url": "https://api.github.com/users/jbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbw/subscriptions", "organizations_url": "https://api.github.com/users/jbw/orgs", "repos_url": "https://api.github.com/users/jbw/repos", "events_url": "https://api.github.com/users/jbw/events{/privacy}", "received_events_url": "https://api.github.com/users/jbw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-26T23:52:10Z", "updated_at": "2020-04-13T18:29:54Z", "closed_at": "2020-04-13T18:29:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "pykube is no longer maintained by the author (https://github.com/kelproject/pykube). It has since been forked and picked up at https://github.com/hjacobs/pykube\r\n\r\nhttps://github.com/spotify/luigi/blob/fbb7e4a0aa75775fd7c34e03f23a5f90aa85e437/luigi/contrib/kubernetes.py#L45\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2917", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2917/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2917/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2917/events", "html_url": "https://github.com/spotify/luigi/issues/2917", "id": 578133418, "node_id": "MDU6SXNzdWU1NzgxMzM0MTg=", "number": 2917, "title": "config parsing inconsistency between Python 2 and Python 3", "user": {"login": "thomasgilgenast", "id": 1387532, "node_id": "MDQ6VXNlcjEzODc1MzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1387532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasgilgenast", "html_url": "https://github.com/thomasgilgenast", "followers_url": "https://api.github.com/users/thomasgilgenast/followers", "following_url": "https://api.github.com/users/thomasgilgenast/following{/other_user}", "gists_url": "https://api.github.com/users/thomasgilgenast/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasgilgenast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasgilgenast/subscriptions", "organizations_url": "https://api.github.com/users/thomasgilgenast/orgs", "repos_url": "https://api.github.com/users/thomasgilgenast/repos", "events_url": "https://api.github.com/users/thomasgilgenast/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasgilgenast/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-09T19:16:10Z", "updated_at": "2020-04-12T19:28:49Z", "closed_at": "2020-04-12T19:28:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using luigi in a library that supports both Python 2 and Python 3 from the same code base, and I'm trying to ensure that the same luigi config file can be used with both Python 2 and Python 3. I'm encountering an inconsistency between how the Python 2 ConfigParser and Python 3 configparser handle escaping of \"%\" symbols in the \"ini/cfg\"-style config file. configparser requires that \"%\" symbols be escaped (by writing \"%%\"; the extra \"%\" gets removed when accessing values from the config file), while ConfigParser does not (\"%\" symbols in the config file are fine).\r\n\r\nA minimal example to reproduce this is (run in Python 2 with configparser installed):\r\n\r\n```\r\n>>> import ConfigParser\r\n>>> config2 = ConfigParser.ConfigParser()\r\n>>> config2.add_section('section')\r\n>>> config2.set('section', 'unescaped', '10%')\r\n>>> config2.set('section', 'escaped', '10%%')\r\n>>> config2.get('section', 'escaped')  # bad because extra % in parsed value\r\n'10%%'\r\n>>>\r\n>>> import configparser\r\n>>> config3 = configparser.ConfigParser()\r\n>>> config3.add_section('section')\r\n>>> config3.set('section', 'unescaped', '10%')  # bad because ValueError\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"...\\backports\\configparser\\__init__.py\", line 1305, in set\r\n    super(ConfigParser, self).set(section, option, value)\r\n  File \"...\\backports\\configparser\\__init__.py\", line 978, in set\r\n    value = self._interpolation.before_set(self, section, option, value)\r\n  File \"...\\backports\\configparser\\__init__.py\", line 439, in before_set\r\n    \"position %d\" % (value, tmp_value.find('%'))\r\nValueError: invalid interpolation syntax in u'10%' at position 2\r\n>>> config3.set('section', 'escaped', '10%%')\r\n>>> config3.get('section', 'escaped')\r\nu'10%'\r\n```\r\n\r\nNot escaping the % symbol is not an option, because it will lead to a ValueError in Python 3. Escaping the % symbol is also not an option, because it will lead to different results between Python 2 and Python 3 (\"10%%\" vs \"10%\").\r\n\r\nA related error that I've seen when parsing \"unescaped\" config files in Python 3 is:\r\n\r\n```\r\nconfigparser.InterpolationSyntaxError: '%' must be followed by '%' or '('\r\n```\r\n\r\nAs far as I can tell, this is not related to #2527 / #2354 since this difference is not \"caused\" by luigi - it is caused by differences in the underlying ConfigParser/configparser implementations.\r\n\r\nThe [Python-Future cheat sheet](https://python-future.org/compatible_idioms.html#configparser) suggests that one way to make code that uses ConfigParser/configparser behave the same way in both Python 2 and Python 3 is to install configparser (available as a backport) when running the code in Python 2. Unfortunately, luigi currently attempts to import ConfigParser first, so even if configparser is available in a Python 2 environment, luigi will still use ConfigParser.\r\n\r\nThis suggests that a possible solution to this is to both\r\n1) require configparser in my client library for versions of Python that don't have it via `install_requires=['configparser;python_version<\"3.2\"']` in my library's `setup.py`\r\n2) re-order the attempted order of imports in luigi so that configparser is tried first\r\n\r\nI am not sure if there are any disadvantages to attempting to import configparser first.\r\n\r\nThis might be made irrelevant by plans to drop Python 2 support anyway (#2830) - if so feel free to close this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2916", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2916/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2916/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2916/events", "html_url": "https://github.com/spotify/luigi/issues/2916", "id": 577065138, "node_id": "MDU6SXNzdWU1NzcwNjUxMzg=", "number": 2916, "title": "inherits and requires fails with luigi.Task but does not fail with luigi.WrapperTask", "user": {"login": "nesat", "id": 6490604, "node_id": "MDQ6VXNlcjY0OTA2MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6490604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nesat", "html_url": "https://github.com/nesat", "followers_url": "https://api.github.com/users/nesat/followers", "following_url": "https://api.github.com/users/nesat/following{/other_user}", "gists_url": "https://api.github.com/users/nesat/gists{/gist_id}", "starred_url": "https://api.github.com/users/nesat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nesat/subscriptions", "organizations_url": "https://api.github.com/users/nesat/orgs", "repos_url": "https://api.github.com/users/nesat/repos", "events_url": "https://api.github.com/users/nesat/events{/privacy}", "received_events_url": "https://api.github.com/users/nesat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-06T17:10:29Z", "updated_at": "2020-03-06T19:11:23Z", "closed_at": "2020-03-06T19:09:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Luigi tasks requiring other luigi tasks that are created either using `luigi.util.inherits` or `luigi.util.requires` fail even the inherited tasks are finished. However, when inherited tasks are defined as `luigi.WrapperTask` instead of `luigi.Task`, the main task finishes successfully.\r\n\r\nhttps://luigi.readthedocs.io/en/stable/api/luigi.util.html#luigi.util.inherits and https://luigi.readthedocs.io/en/stable/api/luigi.util.html#luigi.util.requires meant to use `luigi.util.inherits` and `luigi.util.requires` with `luigi.Task`\r\n\r\nAm I doing something wrong or is there a bug?\r\n\r\n### **Before sharing the example, code please note that when I edit**\r\n```\r\n@requires(TaskB)\r\nclass CopyTaskB(luigi.Task):\r\n    pass\r\n\r\n\r\n@inherits(TaskA)\r\nclass CopyTaskA(luigi.Task):\r\n    def requires(self):\r\n        return self.clone(TaskA)\r\n```\r\n### **to**\r\n```\r\n@requires(TaskB)\r\nclass CopyTaskB(luigi.WrapperTask):\r\n    pass\r\n\r\n\r\n@inherits(TaskA)\r\nclass CopyTaskA(luigi.WrapperTask):\r\n    def requires(self):\r\n        return self.clone(TaskA)\r\n```\r\n### **the code runs successfully!**\r\n\r\n\r\n## Example code\r\n\r\n### main.py\r\n```\r\nimport luigi\r\nfrom luigi.util import inherits, requires\r\n\r\nfrom task_a import TaskA\r\nfrom task_b import TaskB\r\n\r\n\r\nclass MainTask(luigi.Task):\r\n    task_namespace = \"req\"\r\n    date = luigi.DateParameter()\r\n\r\n    def requires(self):\r\n        return [CopyTaskA(date=self.date),\r\n                CopyTaskB(date=self.date)]\r\n\r\n\r\n@requires(TaskB)\r\nclass CopyTaskB(luigi.Task):\r\n    pass\r\n\r\n\r\n@inherits(TaskA)\r\nclass CopyTaskA(luigi.Task):\r\n    def requires(self):\r\n        return self.clone(TaskA)\r\n\r\n\r\nif __name__ == '__main__':\r\n    luigi.run()\r\n```\r\n\r\n### task_a.py\r\n```\r\nimport luigi\r\n\r\n\r\nclass TaskA(luigi.Task):\r\n    task_namespace = \"req\"\r\n    date = luigi.DateParameter()\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget('./luigi_outputs/{}/{}.txt'.format(str(self.date), self.__class__.__name__))\r\n\r\n    def run(self):\r\n        with self.output().open('w') as f:\r\n            f.write('Done')\r\n```\r\n\r\n### task_b.py\r\n```\r\nimport luigi\r\n\r\n\r\nclass TaskB(luigi.Task):\r\n    task_namespace = \"req\"\r\n    date = luigi.DateParameter()\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget('./luigi_outputs/{}/{}.txt'.format(str(self.date), self.__class__.__name__))\r\n\r\n    def run(self):\r\n        with self.output().open('w') as f:\r\n            f.write('Done')\r\n```\r\n\r\n### Command line\r\n`python3 main.py req.MainTask --date 2020-03-06 --local-scheduler`\r\n\r\n### Error message\r\n```\r\nDEBUG: Checking if req.MainTask(date=2020-03-06) is complete\r\n/xxx/luigi/lib/python3.7/site-packages/luigi/worker.py:409: UserWarning: Task req.MainTask(date=2020-03-06) without outputs has no custom complete() method\r\n  is_complete = task.complete()\r\nDEBUG: Checking if CopyTaskA(date=2020-03-06) is complete\r\n/xxx/luigi/lib/python3.7/site-packages/luigi/worker.py:409: UserWarning: Task CopyTaskA(date=2020-03-06) without outputs has no custom complete() method\r\n  is_complete = task.complete()\r\nDEBUG: Checking if CopyTaskB(date=2020-03-06) is complete\r\n/xxx/luigi/lib/python3.7/site-packages/luigi/worker.py:409: UserWarning: Task CopyTaskB(date=2020-03-06) without outputs has no custom complete() method\r\n  is_complete = task.complete()\r\nINFO: Informed scheduler that task   req.MainTask_2020_03_06_e53bc182d5   has status   PENDING\r\nDEBUG: Checking if req.TaskB(date=2020-03-06) is complete\r\nINFO: Informed scheduler that task   CopyTaskB_2020_03_06_e53bc182d5   has status   PENDING\r\nINFO: Informed scheduler that task   req.TaskB_2020_03_06_e53bc182d5   has status   DONE\r\nDEBUG: Checking if req.TaskA(date=2020-03-06) is complete\r\nINFO: Informed scheduler that task   CopyTaskA_2020_03_06_e53bc182d5   has status   PENDING\r\nINFO: Informed scheduler that task   req.TaskA_2020_03_06_e53bc182d5   has status   DONE\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 3\r\nINFO: [pid 70400] Worker Worker(salt=466072318, workers=1, host=xxx, username=xxx, pid=70400) running   CopyTaskA(date=2020-03-06)\r\nINFO: [pid 70400] Worker Worker(salt=466072318, workers=1, host=xxx, username=xxx, pid=70400) done      CopyTaskA(date=2020-03-06)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   CopyTaskA_2020_03_06_e53bc182d5   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 2\r\nINFO: [pid 70400] Worker Worker(salt=466072318, workers=1, host=xxx, username=xxx, pid=70400) running   CopyTaskB(date=2020-03-06)\r\nINFO: [pid 70400] Worker Worker(salt=466072318, workers=1, host=xxx, username=xxx, pid=70400) done      CopyTaskB(date=2020-03-06)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   CopyTaskB_2020_03_06_e53bc182d5   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 1\r\nINFO: [pid 70400] Worker Worker(salt=466072318, workers=1, host=xxx, username=xxx, pid=70400) running   req.MainTask(date=2020-03-06)\r\n/xxx/luigi/lib/python3.7/site-packages/luigi/worker.py:181: UserWarning: Task CopyTaskA(date=2020-03-06) without outputs has no custom complete() method\r\n  missing = [dep.task_id for dep in self.task.deps() if not dep.complete()]\r\n/xxx/luigi/lib/python3.7/site-packages/luigi/worker.py:181: UserWarning: Task CopyTaskB(date=2020-03-06) without outputs has no custom complete() method\r\n  missing = [dep.task_id for dep in self.task.deps() if not dep.complete()]\r\nERROR: [pid 70400] Worker Worker(salt=466072318, workers=1, host=xxx, username=xxx, pid=70400) failed    req.MainTask(date=2020-03-06)\r\nTraceback (most recent call last):\r\n  File \"/xxx/luigi/lib/python3.7/site-packages/luigi/worker.py\", line 184, in run\r\n    raise RuntimeError('Unfulfilled %s at run time: %s' % (deps, ', '.join(missing)))\r\nRuntimeError: Unfulfilled dependencies at run time: CopyTaskA_2020_03_06_e53bc182d5, CopyTaskB_2020_03_06_e53bc182d5\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   req.MainTask_2020_03_06_e53bc182d5   has status   FAILED\r\nDEBUG: Checking if req.MainTask(date=2020-03-06) is complete\r\nDEBUG: Checking if CopyTaskA(date=2020-03-06) is complete\r\nDEBUG: Checking if CopyTaskB(date=2020-03-06) is complete\r\nINFO: Informed scheduler that task   req.MainTask_2020_03_06_e53bc182d5   has status   PENDING\r\nDEBUG: Checking if req.TaskB(date=2020-03-06) is complete\r\nINFO: Informed scheduler that task   CopyTaskB_2020_03_06_e53bc182d5   has status   PENDING\r\nINFO: Informed scheduler that task   req.TaskB_2020_03_06_e53bc182d5   has status   DONE\r\nDEBUG: Checking if req.TaskA(date=2020-03-06) is complete\r\nINFO: Informed scheduler that task   CopyTaskA_2020_03_06_e53bc182d5   has status   PENDING\r\nINFO: Informed scheduler that task   req.TaskA_2020_03_06_e53bc182d5   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 1\r\nINFO: [pid 70400] Worker Worker(salt=466072318, workers=1, host=xxx, username=xxx, pid=70400) running   req.MainTask(date=2020-03-06)\r\nERROR: [pid 70400] Worker Worker(salt=466072318, workers=1, host=xxx, username=xxx, pid=70400) failed    req.MainTask(date=2020-03-06)\r\nTraceback (most recent call last):\r\n  File \"/xxx/luigi/lib/python3.7/site-packages/luigi/worker.py\", line 184, in run\r\n    raise RuntimeError('Unfulfilled %s at run time: %s' % (deps, ', '.join(missing)))\r\nRuntimeError: Unfulfilled dependencies at run time: CopyTaskA_2020_03_06_e53bc182d5, CopyTaskB_2020_03_06_e53bc182d5\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   req.MainTask_2020_03_06_e53bc182d5   has status   FAILED\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nDEBUG: There are 1 pending tasks possibly being run by other workers\r\nDEBUG: There are 1 pending tasks unique to this worker\r\nDEBUG: There are 1 pending tasks last scheduled by this worker\r\nINFO: Worker Worker(salt=466072318, workers=1, host=xxx, username=xxx, pid=70400) was stopped. Shutting down Keep-Alive thread\r\nINFO:\r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 5 tasks of which:\r\n* 2 complete ones were encountered:\r\n    - 1 req.TaskA(date=2020-03-06)\r\n    - 1 req.TaskB(date=2020-03-06)\r\n* 2 ran successfully:\r\n    - 1 CopyTaskA(date=2020-03-06)\r\n    - 1 CopyTaskB(date=2020-03-06)\r\n* 1 failed:\r\n    - 1 req.MainTask(date=2020-03-06)\r\n\r\nThis progress looks :( because there were failed tasks\r\n\r\n===== Luigi Execution Summary =====\r\n\r\n\r\nProcess finished with exit code 0\r\n\r\n```\r\n\r\nLuigi version: 2.8.11\r\nMay be related to https://github.com/spotify/luigi/issues/1552\r\n\r\n**Main goal [out of topic]:** I want to import luigi tasks from python packages and reuse them. However, some of the imported luigi tasks depend to some of the other imported luigitasks. In the example, I did not show that but in the end I will edit my code as:\r\n```\r\n@inherits(TaskA)\r\nclass CopyTaskA(luigi.Task):\r\n    def requires(self):\r\n        return [CopyTaskB(date=self.date), self.clone(TaskA)]\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2907", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2907/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2907/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2907/events", "html_url": "https://github.com/spotify/luigi/issues/2907", "id": 570446717, "node_id": "MDU6SXNzdWU1NzA0NDY3MTc=", "number": 2907, "title": "Luigi does not read by default luigi.toml file", "user": {"login": "H4dr1en", "id": 16240134, "node_id": "MDQ6VXNlcjE2MjQwMTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/16240134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/H4dr1en", "html_url": "https://github.com/H4dr1en", "followers_url": "https://api.github.com/users/H4dr1en/followers", "following_url": "https://api.github.com/users/H4dr1en/following{/other_user}", "gists_url": "https://api.github.com/users/H4dr1en/gists{/gist_id}", "starred_url": "https://api.github.com/users/H4dr1en/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/H4dr1en/subscriptions", "organizations_url": "https://api.github.com/users/H4dr1en/orgs", "repos_url": "https://api.github.com/users/H4dr1en/repos", "events_url": "https://api.github.com/users/H4dr1en/events{/privacy}", "received_events_url": "https://api.github.com/users/H4dr1en/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T09:56:57Z", "updated_at": "2020-07-11T02:47:32Z", "closed_at": "2020-07-11T02:47:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Luigi does not read by default `luigi.toml` file located in the current directory.\r\n\r\nSetting the `LUIGI_CONFIG_PARSER` env variable to `toml` gave me the error that had to install `luigi[toml]`, which I did, but then the `luigi.toml` was still not read.\r\n\r\nI had to go to `luigi/configuration/core` and edit:\r\n```\r\n# select parser via env var\r\nDEFAULT_PARSER = 'cfg'\r\n```\r\nto:\r\n```\r\n# select parser via env var\r\nDEFAULT_PARSER = 'toml'\r\n```\r\nAnd then the config TOML file was successfully read.\r\n\r\n## Expected behavior\r\n\r\nI was expecting that the `toml` file would be read without requiring any manual hack, as stated in the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2902", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2902/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2902/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2902/events", "html_url": "https://github.com/spotify/luigi/issues/2902", "id": 566783463, "node_id": "MDU6SXNzdWU1NjY3ODM0NjM=", "number": 2902, "title": "Extend internal luigi-task-hist.db schema", "user": {"login": "fatjoni", "id": 7958688, "node_id": "MDQ6VXNlcjc5NTg2ODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7958688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fatjoni", "html_url": "https://github.com/fatjoni", "followers_url": "https://api.github.com/users/fatjoni/followers", "following_url": "https://api.github.com/users/fatjoni/following{/other_user}", "gists_url": "https://api.github.com/users/fatjoni/gists{/gist_id}", "starred_url": "https://api.github.com/users/fatjoni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fatjoni/subscriptions", "organizations_url": "https://api.github.com/users/fatjoni/orgs", "repos_url": "https://api.github.com/users/fatjoni/repos", "events_url": "https://api.github.com/users/fatjoni/events{/privacy}", "received_events_url": "https://api.github.com/users/fatjoni/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-18T10:10:42Z", "updated_at": "2020-07-02T07:42:39Z", "closed_at": "2020-07-02T07:42:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there some way i can easily extend the luigi-task-hist.db database so i can for example save the failure message also? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2901", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2901/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2901/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2901/events", "html_url": "https://github.com/spotify/luigi/issues/2901", "id": 566777412, "node_id": "MDU6SXNzdWU1NjY3Nzc0MTI=", "number": 2901, "title": "AWS SNS email with additional recipients only send to first", "user": {"login": "RaquelDiazG", "id": 9463311, "node_id": "MDQ6VXNlcjk0NjMzMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/9463311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RaquelDiazG", "html_url": "https://github.com/RaquelDiazG", "followers_url": "https://api.github.com/users/RaquelDiazG/followers", "following_url": "https://api.github.com/users/RaquelDiazG/following{/other_user}", "gists_url": "https://api.github.com/users/RaquelDiazG/gists{/gist_id}", "starred_url": "https://api.github.com/users/RaquelDiazG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RaquelDiazG/subscriptions", "organizations_url": "https://api.github.com/users/RaquelDiazG/orgs", "repos_url": "https://api.github.com/users/RaquelDiazG/repos", "events_url": "https://api.github.com/users/RaquelDiazG/events{/privacy}", "received_events_url": "https://api.github.com/users/RaquelDiazG/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-18T10:00:29Z", "updated_at": "2020-07-02T07:42:38Z", "closed_at": "2020-07-02T07:42:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nI have the error-email configured in the core section of the .cfg file through aws sns with only one topic.\r\n\r\nBut when trying to send a notification by passing additional recipients, the notification is only sent to the first topic.\r\n\r\nThe [send_error_email](https://github.com/spotify/luigi/blob/2de1b686d14e4c3d844d1eaca62405b8256fdd3f/luigi/notifications.py#L340) function receives as an additional_recipients parameter \r\n`def send_error_email(subject, message, additional_recipients=None):`\r\nand calls [send_email](https://github.com/spotify/luigi/blob/2de1b686d14e4c3d844d1eaca62405b8256fdd3f/luigi/notifications.py#L290) \r\n`def send_email(subject, message, sender, recipients, image_png=None):`\r\nand this calls [send_email_sns](https://github.com/spotify/luigi/blob/2de1b686d14e4c3d844d1eaca62405b8256fdd3f/luigi/notifications.py#L263)\r\n`def send_email_sns (sender, subject, message, topic_ARN, image_png):`\r\n\r\nBut this is incorrect because topic_ARN is a list\r\n\r\nSo as [in this line,](https://github.com/spotify/luigi/blob/2de1b686d14e4c3d844d1eaca62405b8256fdd3f/luigi/notifications.py#L276) only the first topic is retrieved, it is never sent to the rest that is passed as a parameter\r\n`topic = sns.Topic (topic_ARN [0])`\r\n\r\nI think that in function `send_email_sns` a for loop is necessary to send the notification to all topics", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2898", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2898/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2898/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2898/events", "html_url": "https://github.com/spotify/luigi/issues/2898", "id": 565418267, "node_id": "MDU6SXNzdWU1NjU0MTgyNjc=", "number": 2898, "title": "luigi.toml file generating error with 2.8.11, but works with 2.8.9", "user": {"login": "James-Hudson3010", "id": 60199558, "node_id": "MDQ6VXNlcjYwMTk5NTU4", "avatar_url": "https://avatars3.githubusercontent.com/u/60199558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/James-Hudson3010", "html_url": "https://github.com/James-Hudson3010", "followers_url": "https://api.github.com/users/James-Hudson3010/followers", "following_url": "https://api.github.com/users/James-Hudson3010/following{/other_user}", "gists_url": "https://api.github.com/users/James-Hudson3010/gists{/gist_id}", "starred_url": "https://api.github.com/users/James-Hudson3010/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/James-Hudson3010/subscriptions", "organizations_url": "https://api.github.com/users/James-Hudson3010/orgs", "repos_url": "https://api.github.com/users/James-Hudson3010/repos", "events_url": "https://api.github.com/users/James-Hudson3010/events{/privacy}", "received_events_url": "https://api.github.com/users/James-Hudson3010/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-14T16:05:45Z", "updated_at": "2020-07-04T18:07:52Z", "closed_at": "2020-07-04T18:07:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "My luigi.toml file is just this...\r\n\r\n```\r\n[logging]\r\nversion = 1.0\r\ndisable_existing_loggers = false\r\n\r\n[logging.handlers.console]\r\nlevel = \"DEBUG\"\r\nclass = \"logging.StreamHandler\"\r\n```\r\n\r\nwhen using luigi 2.8.9, my task (```luigi --module tasks.test Test --local-scheduler```) runs just fine.\r\n\r\nHowever, if I upgrade to 2.8.11, I get the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/jamesh/.pyenv/versions/3.7.6/lib/python3.7/logging/config.py\", line 563, in configure\r\n    handler = self.configure_handler(handlers[name])\r\n  File \"/Users/jamesh/.pyenv/versions/3.7.6/lib/python3.7/logging/config.py\", line 697, in configure_handler\r\n    formatter = config.pop('formatter', None)\r\nAttributeError: 'FrozenOrderedDict' object has no attribute 'pop'\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/jamesh/depot/test/test_env/lib/python3.7/site-packages/luigi/retcodes.py\", line 75, in run_with_retcodes\r\n    worker = luigi.interface._run(argv).worker\r\n  File \"/Users/jamesh/depot/test/test_env/lib/python3.7/site-packages/luigi/interface.py\", line 211, in _run\r\n    return _schedule_and_run([cp.get_task_obj()], worker_scheduler_factory)\r\n  File \"/Users/jamesh/depot/test/test_env/lib/python3.7/site-packages/luigi/interface.py\", line 145, in _schedule_and_run\r\n    InterfaceLogging.setup(env_params)\r\n  File \"/Users/jamesh/depot/test/test_env/lib/python3.7/site-packages/luigi/setup_logging.py\", line 83, in setup\r\n    configured = cls._section(opts)\r\n  File \"/Users/jamesh/depot/test/test_env/lib/python3.7/site-packages/luigi/setup_logging.py\", line 48, in _section\r\n    logging.config.dictConfig(logging_config)\r\n  File \"/Users/jamesh/.pyenv/versions/3.7.6/lib/python3.7/logging/config.py\", line 800, in dictConfig\r\n    dictConfigClass(config).configure()\r\n  File \"/Users/jamesh/.pyenv/versions/3.7.6/lib/python3.7/logging/config.py\", line 571, in configure\r\n    '%r' % name) from e\r\nValueError: Unable to configure handler 'console'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2894", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2894/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2894/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2894/events", "html_url": "https://github.com/spotify/luigi/issues/2894", "id": 561553093, "node_id": "MDU6SXNzdWU1NjE1NTMwOTM=", "number": 2894, "title": "Auto Refresh ", "user": {"login": "kohlishivam", "id": 20373481, "node_id": "MDQ6VXNlcjIwMzczNDgx", "avatar_url": "https://avatars0.githubusercontent.com/u/20373481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kohlishivam", "html_url": "https://github.com/kohlishivam", "followers_url": "https://api.github.com/users/kohlishivam/followers", "following_url": "https://api.github.com/users/kohlishivam/following{/other_user}", "gists_url": "https://api.github.com/users/kohlishivam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kohlishivam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kohlishivam/subscriptions", "organizations_url": "https://api.github.com/users/kohlishivam/orgs", "repos_url": "https://api.github.com/users/kohlishivam/repos", "events_url": "https://api.github.com/users/kohlishivam/events{/privacy}", "received_events_url": "https://api.github.com/users/kohlishivam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-07T10:31:46Z", "updated_at": "2020-07-11T02:47:31Z", "closed_at": "2020-07-11T02:47:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think that there should be auto refresh on the luigi web interface.\r\n\r\n<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2892", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2892/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2892/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2892/events", "html_url": "https://github.com/spotify/luigi/issues/2892", "id": 561170891, "node_id": "MDU6SXNzdWU1NjExNzA4OTE=", "number": 2892, "title": "path mixup on windows environment hdfs ", "user": {"login": "fatjoni", "id": 7958688, "node_id": "MDQ6VXNlcjc5NTg2ODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7958688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fatjoni", "html_url": "https://github.com/fatjoni", "followers_url": "https://api.github.com/users/fatjoni/followers", "following_url": "https://api.github.com/users/fatjoni/following{/other_user}", "gists_url": "https://api.github.com/users/fatjoni/gists{/gist_id}", "starred_url": "https://api.github.com/users/fatjoni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fatjoni/subscriptions", "organizations_url": "https://api.github.com/users/fatjoni/orgs", "repos_url": "https://api.github.com/users/fatjoni/repos", "events_url": "https://api.github.com/users/fatjoni/events{/privacy}", "received_events_url": "https://api.github.com/users/fatjoni/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-06T17:49:05Z", "updated_at": "2020-06-20T17:33:04Z", "closed_at": "2020-06-20T17:33:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have setup hadoop on windows machine and i am trying to write a string in it.\r\nThe file is successfully created in tmp but cannot be moved since the generated path is mixed:\r\n\r\nluigi.contrib.hdfs.error.HDFSCliError: Command ['C:\\\\hadoop-3.1.0\\\\bin\\\\hadoop.cmd', 'fs', '-mv', '/tmp\\\\User\\\\testnow.csv-luigitemp-383991260', 'testnow.csv'] failed [exit code 1]\r\n---stdout---\r\n\r\n---stderr---\r\nmv: `/tmpUsertestnow.csv-luigitemp-383991260': No such file or directory\r\n\r\nIt seems to be adding \\\\User\\\\ that creates a mess out of it:\r\n\r\n    def output(self):      \r\n        return luigi.contrib.hdfs.HdfsTarget(\"testfile.csv\")\r\n\r\n    def run(self):  \r\n        with self.output().open('w') as outfile:\r\n            outfile.write(\"testString\")\r\n\r\nmy code as you can see is basic and straight forward", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2889", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2889/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2889/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2889/events", "html_url": "https://github.com/spotify/luigi/issues/2889", "id": 557720185, "node_id": "MDU6SXNzdWU1NTc3MjAxODU=", "number": 2889, "title": "SVG does not capture dependency correctly, but D3 does", "user": {"login": "tashrifbillah", "id": 35086881, "node_id": "MDQ6VXNlcjM1MDg2ODgx", "avatar_url": "https://avatars3.githubusercontent.com/u/35086881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tashrifbillah", "html_url": "https://github.com/tashrifbillah", "followers_url": "https://api.github.com/users/tashrifbillah/followers", "following_url": "https://api.github.com/users/tashrifbillah/following{/other_user}", "gists_url": "https://api.github.com/users/tashrifbillah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tashrifbillah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tashrifbillah/subscriptions", "organizations_url": "https://api.github.com/users/tashrifbillah/orgs", "repos_url": "https://api.github.com/users/tashrifbillah/repos", "events_url": "https://api.github.com/users/tashrifbillah/events{/privacy}", "received_events_url": "https://api.github.com/users/tashrifbillah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-30T20:01:53Z", "updated_at": "2020-04-20T21:32:17Z", "closed_at": "2020-04-20T21:32:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Description\r\n\r\nSVG graph (incorrect): missing link between TaskB and D\r\n\r\n![image](https://user-images.githubusercontent.com/35086881/73485287-d2c8e200-4370-11ea-93a1-5b08c013af66.png)\r\n\r\nD3 graph (correct): see the link between TaskB and D\r\n![image](https://user-images.githubusercontent.com/35086881/73485336-ea07cf80-4370-11ea-8039-e9e56fdff1bf.png)\r\n\r\n\r\n# Way to reproduce\r\n\r\n> python svgVsd3_issue.py\r\n\r\n<details><summary>svgVsd3_issue.py</summary>\r\n<p>\r\n\r\n```python\r\nfrom luigi import build, Task, LocalTarget\r\nfrom luigi.util import requires\r\n\r\nclass TaskA(Task):\r\n\r\n    def run(self):\r\n        with open('/tmp/a.txt','w') as f:\r\n            f.write('a')\r\n\r\n\r\n    def output(self):\r\n        return LocalTarget('/tmp/a.txt')\r\n\r\n@requires(TaskA)\r\nclass TaskB(Task):\r\n\r\n    def run(self):\r\n        with open('/tmp/b.txt', 'w') as f:\r\n            f.write('b')\r\n\r\n    def output(self):\r\n        return LocalTarget('/tmp/b.txt')\r\n\r\n\r\n@requires(TaskB)\r\nclass TaskC(Task):\r\n\r\n    def run(self):\r\n        with open('/tmp/c.txt', 'w') as f:\r\n            f.write('c')\r\n\r\n    def output(self):\r\n        return LocalTarget('/tmp/c.txt')\r\n\r\n\r\n@requires(TaskC,TaskB)\r\nclass TaskD(Task):\r\n\r\n    def run(self):\r\n        with open('/tmp/d.txt', 'w') as f:\r\n            f.write('d')\r\n\r\n    def output(self):\r\n        return LocalTarget('/tmp/d.txt')\r\n\r\n\r\nif __name__=='__main__':\r\n    build([TaskD()])\r\n    \r\n```\r\n</p>\r\n</details>\r\n\r\n\r\nIs there suggestion about fixing it or is it a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2888", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2888/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2888/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2888/events", "html_url": "https://github.com/spotify/luigi/issues/2888", "id": 557583498, "node_id": "MDU6SXNzdWU1NTc1ODM0OTg=", "number": 2888, "title": "Tasks don't fail although LocalTarget is not created", "user": {"login": "tashrifbillah", "id": 35086881, "node_id": "MDQ6VXNlcjM1MDg2ODgx", "avatar_url": "https://avatars3.githubusercontent.com/u/35086881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tashrifbillah", "html_url": "https://github.com/tashrifbillah", "followers_url": "https://api.github.com/users/tashrifbillah/followers", "following_url": "https://api.github.com/users/tashrifbillah/following{/other_user}", "gists_url": "https://api.github.com/users/tashrifbillah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tashrifbillah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tashrifbillah/subscriptions", "organizations_url": "https://api.github.com/users/tashrifbillah/orgs", "repos_url": "https://api.github.com/users/tashrifbillah/repos", "events_url": "https://api.github.com/users/tashrifbillah/events{/privacy}", "received_events_url": "https://api.github.com/users/tashrifbillah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-30T15:50:37Z", "updated_at": "2020-02-02T00:12:31Z", "closed_at": "2020-02-01T23:32:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nIt appears that Luigi doesn't check if the `LocalTarget` is created after execution of `run` method. Is it really the case? In other words, is there a way to check if `LocalTarget` is created after execution of `run` method?\r\n\r\n# Expected behavior\r\n\r\nLet's see the following simple task, that completes even though I don't create `/tmp/test.txt`. On the contrary, I expected the task to fail.\r\n\r\n# Way to reproduce\r\n\r\nSave the following as `task1.py `and then `python task1.py`\r\n\r\n<details><summary>task1.py</summary>\r\n<p>\r\n\r\n```python\r\nfrom luigi import Task, build, LocalTarget\r\n\r\nclass TaskA(Task):\r\n\r\n    def run(self):\r\n        print('\\n*\\nDo not create /tmp/test.txt\\n*\\n')\r\n\r\n    def output(self):\r\n        return LocalTarget('/tmp/test.txt')\r\n\r\nif __name__=='__main__':\r\n    build([TaskA()])\r\n```\r\n</p>\r\n</details>\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2887", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2887/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2887/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2887/events", "html_url": "https://github.com/spotify/luigi/issues/2887", "id": 555125297, "node_id": "MDU6SXNzdWU1NTUxMjUyOTc=", "number": 2887, "title": "Why not become a Apache or LF or CNCF project?", "user": {"login": "ChethanUK", "id": 16241795, "node_id": "MDQ6VXNlcjE2MjQxNzk1", "avatar_url": "https://avatars1.githubusercontent.com/u/16241795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChethanUK", "html_url": "https://github.com/ChethanUK", "followers_url": "https://api.github.com/users/ChethanUK/followers", "following_url": "https://api.github.com/users/ChethanUK/following{/other_user}", "gists_url": "https://api.github.com/users/ChethanUK/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChethanUK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChethanUK/subscriptions", "organizations_url": "https://api.github.com/users/ChethanUK/orgs", "repos_url": "https://api.github.com/users/ChethanUK/repos", "events_url": "https://api.github.com/users/ChethanUK/events{/privacy}", "received_events_url": "https://api.github.com/users/ChethanUK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-25T19:12:26Z", "updated_at": "2020-03-04T08:18:13Z", "closed_at": "2020-02-03T17:47:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "So many projects have massive after becoming Apache or LF or CNCF project, just was wondering why Luigi still not one..", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2886", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2886/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2886/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2886/events", "html_url": "https://github.com/spotify/luigi/issues/2886", "id": 554678353, "node_id": "MDU6SXNzdWU1NTQ2NzgzNTM=", "number": 2886, "title": "Cant start luigid in background with Python 3.8", "user": {"login": "christophesaintjean", "id": 1215817, "node_id": "MDQ6VXNlcjEyMTU4MTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1215817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christophesaintjean", "html_url": "https://github.com/christophesaintjean", "followers_url": "https://api.github.com/users/christophesaintjean/followers", "following_url": "https://api.github.com/users/christophesaintjean/following{/other_user}", "gists_url": "https://api.github.com/users/christophesaintjean/gists{/gist_id}", "starred_url": "https://api.github.com/users/christophesaintjean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christophesaintjean/subscriptions", "organizations_url": "https://api.github.com/users/christophesaintjean/orgs", "repos_url": "https://api.github.com/users/christophesaintjean/repos", "events_url": "https://api.github.com/users/christophesaintjean/events{/privacy}", "received_events_url": "https://api.github.com/users/christophesaintjean/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-24T11:16:48Z", "updated_at": "2020-07-16T18:12:14Z", "closed_at": "2020-06-26T08:58:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "After a recent update (luigi and system), i got the following error:\r\n\"\"\"\r\n**$ pip install --user --upgrade luigi**\r\n....\r\n...\r\nSuccessfully installed luigi-2.8.11\r\n\r\n**$ luigid --background --logdir ~/logs**\r\nTraceback (most recent call last):\r\n  File \"/home/csaintje/.local/bin/luigid\", line 8, in <module>\r\n    sys.exit(luigid())\r\n  File \"/home/csaintje/.local/lib/python3.8/site-packages/luigi/cmdline.py\", line 33, in luigid\r\n    luigi.process.daemonize(luigi.server.run, api_port=opts.port,\r\n  File \"/home/csaintje/.local/lib/python3.8/site-packages/luigi/process.py\", line 101, in daemonize\r\n    ctx = daemon.DaemonContext(\r\n  File \"/home/csaintje/.local/lib/python3.8/site-packages/daemon/daemon.py\", line 280, in __init__\r\n    detach_process = is_detach_process_context_required()\r\n  File \"/home/csaintje/.local/lib/python3.8/site-packages/daemon/daemon.py\", line 801, in is_detach_process_context_required\r\n    if is_process_started_by_init() or is_process_started_by_superserver():\r\n  File \"/home/csaintje/.local/lib/python3.8/site-packages/daemon/daemon.py\", line 778, in is_process_started_by_superserver\r\n    if is_socket(stdin_fd):\r\n  File \"/home/csaintje/.local/lib/python3.8/site-packages/daemon/daemon.py\", line 743, in is_socket\r\n    file_socket = socket.fromfd(fd, socket.AF_INET, socket.SOCK_RAW)\r\n  File \"/usr/lib/python3.8/socket.py\", line 544, in fromfd\r\n    return socket(family, type, proto, nfd)\r\n  File \"/usr/lib/python3.8/socket.py\", line 231, in __init__\r\n    _socket.socket.__init__(self, family, type, proto, fileno)\r\nOSError: [Errno 88] Socket operation on non-socket\r\n\r\n**$ uname -a**\r\nLinux delirium 4.19.97-1-MANJARO #1 SMP Sat Jan 18 00:17:24 UTC 2020 x86_64 GNU/Linux\r\n\"\"\"\r\n\r\nLaunching it with **$ luigid --logdir ~/logs** yields no error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2884", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2884/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2884/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2884/events", "html_url": "https://github.com/spotify/luigi/issues/2884", "id": 550693836, "node_id": "MDU6SXNzdWU1NTA2OTM4MzY=", "number": 2884, "title": "How to trigger task by REST API ? ", "user": {"login": "ttpro1995", "id": 7196876, "node_id": "MDQ6VXNlcjcxOTY4NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7196876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ttpro1995", "html_url": "https://github.com/ttpro1995", "followers_url": "https://api.github.com/users/ttpro1995/followers", "following_url": "https://api.github.com/users/ttpro1995/following{/other_user}", "gists_url": "https://api.github.com/users/ttpro1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/ttpro1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ttpro1995/subscriptions", "organizations_url": "https://api.github.com/users/ttpro1995/orgs", "repos_url": "https://api.github.com/users/ttpro1995/repos", "events_url": "https://api.github.com/users/ttpro1995/events{/privacy}", "received_events_url": "https://api.github.com/users/ttpro1995/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-16T09:52:12Z", "updated_at": "2020-06-13T16:28:42Z", "closed_at": "2020-06-13T16:28:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to docs https://luigi.readthedocs.io/en/stable/execution_model.html#triggering-tasks  \r\nIt use crontab to trigger task.\r\n\r\nHowever, is there any other way to trigger the task like REST API (http) yet ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2883", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2883/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2883/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2883/events", "html_url": "https://github.com/spotify/luigi/issues/2883", "id": 549246781, "node_id": "MDU6SXNzdWU1NDkyNDY3ODE=", "number": 2883, "title": "Luigi Task History only shows latest of job run, weird behaviour upon server restart", "user": {"login": "williamdrake", "id": 29098128, "node_id": "MDQ6VXNlcjI5MDk4MTI4", "avatar_url": "https://avatars2.githubusercontent.com/u/29098128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/williamdrake", "html_url": "https://github.com/williamdrake", "followers_url": "https://api.github.com/users/williamdrake/followers", "following_url": "https://api.github.com/users/williamdrake/following{/other_user}", "gists_url": "https://api.github.com/users/williamdrake/gists{/gist_id}", "starred_url": "https://api.github.com/users/williamdrake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/williamdrake/subscriptions", "organizations_url": "https://api.github.com/users/williamdrake/orgs", "repos_url": "https://api.github.com/users/williamdrake/repos", "events_url": "https://api.github.com/users/williamdrake/events{/privacy}", "received_events_url": "https://api.github.com/users/williamdrake/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-13T23:42:25Z", "updated_at": "2020-05-30T09:58:50Z", "closed_at": "2020-05-30T09:58:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\n**Environment**\r\n\r\n* Windows 7 64-bit\r\n* Python 3.7.3\r\n* Luigi 2.8.10\r\n* Tornado 5.1.1\r\n* SQLAlchemy 1.3.12\r\n* mysqlclient 1.4.2\r\n\r\n**Issue**\r\n\r\nThere is a couple of things here:\r\n\r\n* The Task Scheduler setup to dump to MySQL. The database is being populated, however the /history page will only show the latest result of the job (1 row per job)\r\n* If the server is reset and the job is run again, the /history page now shows the latest result of the job, plus the result of the one we just run. Jobs before the 2nd last job do not appear.\r\n\r\nHas anybody run into this one? There is a similar issue over at #1873 with no response.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2882", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2882/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2882/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2882/events", "html_url": "https://github.com/spotify/luigi/issues/2882", "id": 549141852, "node_id": "MDU6SXNzdWU1NDkxNDE4NTI=", "number": 2882, "title": "\"there were tasks that were not granted run permission by the scheduler\"", "user": {"login": "ocschwar", "id": 5799715, "node_id": "MDQ6VXNlcjU3OTk3MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5799715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ocschwar", "html_url": "https://github.com/ocschwar", "followers_url": "https://api.github.com/users/ocschwar/followers", "following_url": "https://api.github.com/users/ocschwar/following{/other_user}", "gists_url": "https://api.github.com/users/ocschwar/gists{/gist_id}", "starred_url": "https://api.github.com/users/ocschwar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ocschwar/subscriptions", "organizations_url": "https://api.github.com/users/ocschwar/orgs", "repos_url": "https://api.github.com/users/ocschwar/repos", "events_url": "https://api.github.com/users/ocschwar/events{/privacy}", "received_events_url": "https://api.github.com/users/ocschwar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-13T19:44:58Z", "updated_at": "2020-07-04T18:07:51Z", "closed_at": "2020-07-04T18:07:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a task that runs and babysits an R script, which is consistently being refused permission to run, with nothng in the job log or the Luigi server lot to indicate the reason. \r\n\r\nHere is a mock task that is a stripped down version, which fails semiconsistently right now: \r\n\r\n```\r\nclass MockTask(luigi.Task):\r\n    r_path = luigi.Parameter(default='../..')\r\n    source_path = luigi.Parameter()\r\n    r_params = luigi.DictParameter(default = {})\r\n    def output(self):\r\n        sha = hashlib.sha256()\r\n        sha.update(self.source_path.encode())\r\n        sha.update(self.r_path.encode())\r\n        sha.update(open(self.source_path).read().encode())\r\n        sha.update(datetime.datetime.now().isoformat().encode())\r\n        return luigi.LocalTarget('/var/tmp/mock.tgt.{}'.format(sha.hexdigest()))\r\n    def run(self):\r\n\tf = open(self.output().path,'w')\r\n        f.close()\r\n```\r\n\r\nHere's the output I get: \r\n\r\n```oschwarz@ip-10-0-0-206:~/r_oschwarz/REhedge$ /usr/bin/env R_DEFAULT_SERIALIZE_VERSION=2 R_DEFAULT_SAVE_VERSION=2 LD_LIBRARY_PATH=/usr/lib/jvm/java-11-openjdk-amd64/lib/server XGBOOST_NTHREAD=2 PYTHONPATH=`pwd`/inst/python TOML=TRUE luigi --module luigitask --workers 3 MockTask --source-path inst/Pipelines/closed/pipeline_BearkatII.R\r\nR[write to console]: Loading required package: stats\r\n\r\nR[write to console]: Loading required package: utils\r\n\r\nDEBUG: Checking if MockTask(r_path=../.., source_path=inst/Pipelines/closed/pipeline_BearcatII.R, r_params={}) is complete\r\nINFO: Informed scheduler that task   MockTask__________inst_Pipelines_c_8e0260877f   has status   PENDING\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 3 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nINFO: Worker Worker(salt=521944519, workers=3, host=ip-10-0-0-206, username=oschwarz, pid=3712) was stopped. Shutting down Keep-Alive thread\r\nINFO: \r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 1 tasks of which:\r\n* 1 were left pending, among these:\r\n    * 1 was not granted run permission by the scheduler:\r\n        - 1 MockTask(r_path=../.., source_path=inst/Pipelines/closed/pipeline_BearcatII.R, r_params={})\r\n\r\nDid not run any tasks\r\nThis progress looks :| because there were tasks that were not granted run permission by the scheduler\r\n\r\n===== Luigi Execution Summary =====\r\n```\r\n\r\nI cannot understand why, but when I \"ask the scheduler for work\" it balks, and then the job halts. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2880", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2880/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2880/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2880/events", "html_url": "https://github.com/spotify/luigi/issues/2880", "id": 546627872, "node_id": "MDU6SXNzdWU1NDY2Mjc4NzI=", "number": 2880, "title": "Exception on Windows thrown by RemoteFileSystem on putting file to ftp ", "user": {"login": "elessarelfstone", "id": 10145360, "node_id": "MDQ6VXNlcjEwMTQ1MzYw", "avatar_url": "https://avatars1.githubusercontent.com/u/10145360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elessarelfstone", "html_url": "https://github.com/elessarelfstone", "followers_url": "https://api.github.com/users/elessarelfstone/followers", "following_url": "https://api.github.com/users/elessarelfstone/following{/other_user}", "gists_url": "https://api.github.com/users/elessarelfstone/gists{/gist_id}", "starred_url": "https://api.github.com/users/elessarelfstone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elessarelfstone/subscriptions", "organizations_url": "https://api.github.com/users/elessarelfstone/orgs", "repos_url": "https://api.github.com/users/elessarelfstone/repos", "events_url": "https://api.github.com/users/elessarelfstone/events{/privacy}", "received_events_url": "https://api.github.com/users/elessarelfstone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-08T03:43:50Z", "updated_at": "2020-05-22T06:45:48Z", "closed_at": "2020-05-22T06:45:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get `ftplib.error_perm: 553 Prohibited directory name` when I put a file to FTP from Windows machine. I have to fix this method every time:\r\n`    \r\ndef _ftp_put(self, local_path, path, atomic):\r\n\t\t# normpath = posixpath.normpath(path)\r\n        normpath = os.path.normpath(path)\r\n        folder = os.path.dirname(normpath)\r\n\r\n        # create paths if do not exists\r\n\t\t# for subfolder in folder.split(posixpath.sep):\r\n        for subfolder in folder.split(os.sep):\r\n            if subfolder and subfolder not in self.conn.nlst():\r\n                self.conn.mkd(subfolder)\r\n\r\n            self.conn.cwd(subfolder)\r\n\r\n        # go back to ftp root folder\r\n        self.conn.cwd(\"/\")\r\n\r\n        # random file name\r\n        if atomic:\r\n\t\t\t# tmp_path = folder + posixpath.sep + 'luigi-tmp-%09d' % random.randrange(0, 1e10)\r\n            tmp_path = folder + os.sep + 'luigi-tmp-%09d' % random.randrange(0, 1e10)\r\n        else:\r\n            tmp_path = normpath\r\n\r\n        self.conn.storbinary('STOR %s' % tmp_path, open(local_path, 'rb'))\r\n\r\n        if atomic:\r\n            self.conn.rename(tmp_path, normpath)\r\n `\r\n\r\nChanges I make are commented. So I am guessing since the problem because of slashes. Here luigi use \r\nbackslash to build path for posix file system.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2879", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2879/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2879/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2879/events", "html_url": "https://github.com/spotify/luigi/issues/2879", "id": 546149686, "node_id": "MDU6SXNzdWU1NDYxNDk2ODY=", "number": 2879, "title": "Unable to configure logging in 2.8.11 using TOML.", "user": {"login": "hirolau", "id": 352885, "node_id": "MDQ6VXNlcjM1Mjg4NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/352885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirolau", "html_url": "https://github.com/hirolau", "followers_url": "https://api.github.com/users/hirolau/followers", "following_url": "https://api.github.com/users/hirolau/following{/other_user}", "gists_url": "https://api.github.com/users/hirolau/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirolau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirolau/subscriptions", "organizations_url": "https://api.github.com/users/hirolau/orgs", "repos_url": "https://api.github.com/users/hirolau/repos", "events_url": "https://api.github.com/users/hirolau/events{/privacy}", "received_events_url": "https://api.github.com/users/hirolau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-07T08:32:32Z", "updated_at": "2020-07-31T06:55:33Z", "closed_at": "2020-05-20T13:20:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In 2.8.11 the TOML parser freezes the config dict, this makes it no longer possible to load logging using that config.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/opt/rh/rh-python36/root/usr/lib64/python3.6/logging/config.py\", line 538, in configure\r\n    formatters[name])\r\nTypeError: 'FrozenOrderedDict' object does not support item assignment\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/opt/app-root/bin/luigid\", line 11, in <module>\r\n    load_entry_point('luigi==2.8.11', 'console_scripts', 'luigid')()\r\n  File \"/opt/app-root/lib/python3.6/site-packages/luigi/cmdline.py\", line 31, in luigid\r\n    DaemonLogging.setup(opts)\r\n  File \"/opt/app-root/lib/python3.6/site-packages/luigi/setup_logging.py\", line 83, in setup\r\n    configured = cls._section(opts)\r\n  File \"/opt/app-root/lib/python3.6/site-packages/luigi/setup_logging.py\", line 48, in _section\r\n    logging.config.dictConfig(logging_config)\r\n  File \"/opt/rh/rh-python36/root/usr/lib64/python3.6/logging/config.py\", line 795, in dictConfig\r\n    dictConfigClass(config).configure()\r\n  File \"/opt/rh/rh-python36/root/usr/lib64/python3.6/logging/config.py\", line 541, in configure\r\n    'formatter %r: %s' % (name, e))\r\nValueError: Unable to configure formatter 'simple': 'FrozenOrderedDict' object does not support item assignment\r\n```\r\n\r\nI have not had time to look into possible solutions for now.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2873", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2873/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2873/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2873/events", "html_url": "https://github.com/spotify/luigi/issues/2873", "id": 539881117, "node_id": "MDU6SXNzdWU1Mzk4ODExMTc=", "number": 2873, "title": "update luigi.contrib.lsf.LSFJobTask._dump for python 3 (similar to #1683)", "user": {"login": "DingXuefeng", "id": 3205938, "node_id": "MDQ6VXNlcjMyMDU5Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3205938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DingXuefeng", "html_url": "https://github.com/DingXuefeng", "followers_url": "https://api.github.com/users/DingXuefeng/followers", "following_url": "https://api.github.com/users/DingXuefeng/following{/other_user}", "gists_url": "https://api.github.com/users/DingXuefeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/DingXuefeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DingXuefeng/subscriptions", "organizations_url": "https://api.github.com/users/DingXuefeng/orgs", "repos_url": "https://api.github.com/users/DingXuefeng/repos", "events_url": "https://api.github.com/users/DingXuefeng/events{/privacy}", "received_events_url": "https://api.github.com/users/DingXuefeng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-18T19:40:26Z", "updated_at": "2020-05-01T01:48:15Z", "closed_at": "2020-05-01T01:48:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "python version 3.6.8, luigi version 2.8.10.\r\n\r\nCannot pickle dump because the file type is not binary. can update to the version used by SGE. Creating a common abstract class would be even better.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/worker.py\", line 199, in run\r\n    new_deps = self._run_get_new_deps()\r\n  File \"/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/worker.py\", line 141, in _run_get_new_deps\r\n    task_gen = self.task.run()\r\n  File \"/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/contrib/lsf.py\", line 191, in run\r\n    self._init_local()\r\n  File \"/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/contrib/lsf.py\", line 162, in _init_local\r\n    self._dump(self.tmp_dir)\r\n  File \"/storage/gpfs_data/Software/python3.6.8/lib64/python3.6/site-packages/luigi/contrib/lsf.py\", line 217, in _dump\r\n    pickle.dump(self, open(self.job_file, \"w\"))\r\nTypeError: write() argument must be str, not bytes\r\n```\r\n\r\nsimilar to #1683", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2868", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2868/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2868/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2868/events", "html_url": "https://github.com/spotify/luigi/issues/2868", "id": 537898099, "node_id": "MDU6SXNzdWU1Mzc4OTgwOTk=", "number": 2868, "title": "Fix simple typo: throug -> through", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-14T10:45:29Z", "updated_at": "2019-12-14T20:20:24Z", "closed_at": "2019-12-14T20:20:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in doc/configuration.rst.\nShould read `through` rather than `throug`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2867", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2867/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2867/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2867/events", "html_url": "https://github.com/spotify/luigi/issues/2867", "id": 536760641, "node_id": "MDU6SXNzdWU1MzY3NjA2NDE=", "number": 2867, "title": "Trouble running tutorial on \"@inheritance\"", "user": {"login": "tashrifbillah", "id": 35086881, "node_id": "MDQ6VXNlcjM1MDg2ODgx", "avatar_url": "https://avatars3.githubusercontent.com/u/35086881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tashrifbillah", "html_url": "https://github.com/tashrifbillah", "followers_url": "https://api.github.com/users/tashrifbillah/followers", "following_url": "https://api.github.com/users/tashrifbillah/following{/other_user}", "gists_url": "https://api.github.com/users/tashrifbillah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tashrifbillah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tashrifbillah/subscriptions", "organizations_url": "https://api.github.com/users/tashrifbillah/orgs", "repos_url": "https://api.github.com/users/tashrifbillah/repos", "events_url": "https://api.github.com/users/tashrifbillah/events{/privacy}", "received_events_url": "https://api.github.com/users/tashrifbillah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-12T05:10:12Z", "updated_at": "2020-07-18T15:10:14Z", "closed_at": "2020-07-18T15:10:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't run any of the approaches given [here](https://luigi.readthedocs.io/en/stable/api/luigi.util.html#using-inherits-and-requires-to-ease-parameter-pain):\r\n\r\n# Approach 1:\r\n> luigi --module my_tasks TaskC --param-c foo --TaskB-param-b bar --TaskA-param-a baz --local-scheduler\r\n\r\n```\r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 3 tasks of which:\r\n* 3 were left pending, among these:\r\n    * 1 were missing external dependencies:\r\n        - 1 TaskA(param_a=baz)\r\n    * 2 had missing dependencies:\r\n        - 1 TaskB(param_b=bar)\r\n        - 1 TaskC(param_c=foo)\r\n\r\nDid not run any tasks\r\nThis progress looks :| because there were missing external dependencies\r\n\r\n===== Luigi Execution Summary =====\r\n```\r\n\r\n# Approach 3:\r\n> luigi --module my_tasks TaskC --param-c foo --param-b bar --param-a baz --local-scheduler\r\n\r\n```\r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 3 tasks of which:\r\n* 3 were left pending, among these:\r\n    * 1 were missing external dependencies:\r\n        - 1 TaskA(param_a=baz)\r\n    * 2 had missing dependencies:\r\n        - 1 TaskB(param_a=baz, param_b=bar)\r\n        - 1 TaskC(param_a=baz, param_b=bar, param_c=foo)\r\n\r\nDid not run any tasks\r\nThis progress looks :| because there were missing external dependencies\r\n\r\n===== Luigi Execution Summary =====\r\n\r\n```\r\n\r\nI appreciate any advice you may have.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2858", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2858/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2858/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2858/events", "html_url": "https://github.com/spotify/luigi/issues/2858", "id": 532735068, "node_id": "MDU6SXNzdWU1MzI3MzUwNjg=", "number": 2858, "title": "Exception on macOS thrown by MockTarget() with 2 or more workers", "user": {"login": "indexless", "id": 1623159, "node_id": "MDQ6VXNlcjE2MjMxNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1623159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/indexless", "html_url": "https://github.com/indexless", "followers_url": "https://api.github.com/users/indexless/followers", "following_url": "https://api.github.com/users/indexless/following{/other_user}", "gists_url": "https://api.github.com/users/indexless/gists{/gist_id}", "starred_url": "https://api.github.com/users/indexless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/indexless/subscriptions", "organizations_url": "https://api.github.com/users/indexless/orgs", "repos_url": "https://api.github.com/users/indexless/repos", "events_url": "https://api.github.com/users/indexless/events{/privacy}", "received_events_url": "https://api.github.com/users/indexless/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-12-04T14:52:41Z", "updated_at": "2020-04-28T03:54:46Z", "closed_at": "2020-04-28T03:54:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nTried to run this couple of chained tasks writing to MockTarget's:\r\n\r\n```\r\nfrom luigi import Task\r\nfrom luigi.mock import MockTarget\r\n\r\nclass A(Task):\r\n    def run(self):\r\n        with self.output().open('w') as f:\r\n           f.write('done')\r\n\r\n    def output(self):\r\n        return MockTarget('A')\r\n\r\n\r\nclass B(Task):\r\n    def requires(self):\r\n        return [A()]\r\n\r\n    def run(self):\r\n        with self.output().open('w') as f:\r\n           f.write('done')\r\n\r\n    def output(self):\r\n        return MockTarget('B')\r\n\r\n\r\nif __name__ == '__main__':\r\n    luigi.run()\r\n```\r\n\r\nWith a single worker works perfectly on both Linux Mint 19 and macOS 10.13..6 (High Sierra).\r\n\r\nWith --workers=2 or more still works on Linux Mint, but raises an exception on macOS.\r\n\r\nThe full command line is:\r\n\r\n```\r\nPYTHONPATH='.' luigi --module test-mock-target --local-scheduler --workers=2 B\r\n```\r\n\r\nThe test script (with .py renamed to .txt) with both macOS and Linux logs is attached.\r\n\r\n----\r\nThe versions used on macOS:\r\n\r\nPython 3.8.0 (default, Nov 18 2019, 19:10:44) \r\n[Clang 10.0.0 (clang-1000.10.44.4)] on darwin\r\n\r\nluigi 2.8.10\r\n----\r\n\r\n[test-mock-target.txt](https://github.com/spotify/luigi/files/3922384/test-mock-target.txt)\r\n[linux-mint.log](https://github.com/spotify/luigi/files/3922362/linux-mint.log)\r\n[macos-high-sierra.log](https://github.com/spotify/luigi/files/3922363/macos-high-sierra.log)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2853", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2853/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2853/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2853/events", "html_url": "https://github.com/spotify/luigi/issues/2853", "id": 531820445, "node_id": "MDU6SXNzdWU1MzE4MjA0NDU=", "number": 2853, "title": "Feature request: Load logging config using JSON or YAML.", "user": {"login": "hirolau", "id": 352885, "node_id": "MDQ6VXNlcjM1Mjg4NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/352885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirolau", "html_url": "https://github.com/hirolau", "followers_url": "https://api.github.com/users/hirolau/followers", "following_url": "https://api.github.com/users/hirolau/following{/other_user}", "gists_url": "https://api.github.com/users/hirolau/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirolau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirolau/subscriptions", "organizations_url": "https://api.github.com/users/hirolau/orgs", "repos_url": "https://api.github.com/users/hirolau/repos", "events_url": "https://api.github.com/users/hirolau/events{/privacy}", "received_events_url": "https://api.github.com/users/hirolau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-03T08:47:26Z", "updated_at": "2020-07-02T13:28:13Z", "closed_at": "2020-04-17T01:23:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current way to load logging using a file only support the basic logging file format.\r\n\r\nThis format is somewhat limited in that one cannot add custom filters.\r\n\r\nI am planning on changing the setup logging code to look at the extension, and if it matches yaml or json, try to load it by parsing the file, and then using the the logging dict config option.\r\n\r\nDoes this sounds reasonable? I will not do this unless I get positive feedback on this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2830", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2830/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2830/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2830/events", "html_url": "https://github.com/spotify/luigi/issues/2830", "id": 527248490, "node_id": "MDU6SXNzdWU1MjcyNDg0OTA=", "number": 2830, "title": "Get ready for Python2 deprecation", "user": {"login": "honnix", "id": 158892, "node_id": "MDQ6VXNlcjE1ODg5Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/158892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honnix", "html_url": "https://github.com/honnix", "followers_url": "https://api.github.com/users/honnix/followers", "following_url": "https://api.github.com/users/honnix/following{/other_user}", "gists_url": "https://api.github.com/users/honnix/gists{/gist_id}", "starred_url": "https://api.github.com/users/honnix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honnix/subscriptions", "organizations_url": "https://api.github.com/users/honnix/orgs", "repos_url": "https://api.github.com/users/honnix/repos", "events_url": "https://api.github.com/users/honnix/events{/privacy}", "received_events_url": "https://api.github.com/users/honnix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1696527952, "node_id": "MDU6TGFiZWwxNjk2NTI3OTUy", "url": "https://api.github.com/repos/spotify/luigi/labels/Breaking%20change", "name": "Breaking change", "color": "c13270", "default": false, "description": ""}, {"id": 1696810875, "node_id": "MDU6TGFiZWwxNjk2ODEwODc1", "url": "https://api.github.com/repos/spotify/luigi/labels/Python2%20deprecation", "name": "Python2 deprecation", "color": "abfcd0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 29, "created_at": "2019-11-22T15:04:40Z", "updated_at": "2020-06-02T08:28:50Z", "closed_at": "2020-06-02T08:28:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n@dlstadther @Tarrasch It's almost there. We will need to give people heads-up before dropping Python2 CI.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2829", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2829/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2829/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2829/events", "html_url": "https://github.com/spotify/luigi/issues/2829", "id": 525099074, "node_id": "MDU6SXNzdWU1MjUwOTkwNzQ=", "number": 2829, "title": "Don't spin down workers if pending tasks are waiting for available resources", "user": {"login": "ThePletch", "id": 4468322, "node_id": "MDQ6VXNlcjQ0NjgzMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4468322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePletch", "html_url": "https://github.com/ThePletch", "followers_url": "https://api.github.com/users/ThePletch/followers", "following_url": "https://api.github.com/users/ThePletch/following{/other_user}", "gists_url": "https://api.github.com/users/ThePletch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePletch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePletch/subscriptions", "organizations_url": "https://api.github.com/users/ThePletch/orgs", "repos_url": "https://api.github.com/users/ThePletch/repos", "events_url": "https://api.github.com/users/ThePletch/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePletch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-19T15:54:43Z", "updated_at": "2020-04-14T18:06:11Z", "closed_at": "2020-04-14T18:06:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nI've seen a few of my Luigi workflows terminate partway through due to resource contention recently, and this behavior doesn't seem ideal. The behavior is as follows:\r\n\r\nWhen a Luigi worker has no tasks available to run, it either immediately spins down or begins to increment its keep-alive counter and spins down when the max idle time has been exceeded. However, tasks that are ready to run, but don't have sufficient available resources to execute are also considered 'pending'. This means that if a resource has enough demand that it leaves workers waiting for longer than their keep-alive timeout, the workers may quit despite being fully ready to continue execution once the resource becomes available, which orphans any remaining tasks.\r\n\r\nThe alternative, where we don't consider 'waiting for resources' to be the same as 'waiting for a failed task to retry' or 'waiting for a disabled dependency to be re-enabled', seems like it should be either configurable or the default behavior.\r\n\r\nAn ideal, full-featured version of this new system would let us configure different keep-alive behavior for different types of 'pending' state. My proposal for how to differentiate the states with a new `pending_reason` field is as follows, with states being evaluated in the following order of precedence (the term \"ready\" here means \"pending with all requirements having succeeded\"):\r\n\r\n- `pending_reason = None`: Worker has no pending tasks of any kind (either there are no tasks at all, all tasks are running, or all tasks are complete).\r\n- `pending_reason = \"insufficient_resources\"`: At least one ready task requires a resource, but the required quantity is unavailable.\r\n- `pending_reason = \"insufficient_threads\"`: The worker does not have enough threads to execute all ready tasks.\r\n- `pending_reason = \"failure\"`: At least one ready task has failed.\r\n- `pending_reason = \"disabled\"`: At least one ready task has been disabled.\r\n- `pending_reason = \"scheduling_error\"`: At least one task is in an Unknown state, so we can't determine if it is ready.\r\n- `pending_reason = \"requirements\"`: There are pending tasks, but no ready tasks (this implies that at least one task is running, since luigi doesn't support cyclical dependencies).\r\n\r\nThe easiest fix for this specific behavior would be to set workers to stay alive indefinitely for pending tasks, but that prevents workers that encounter failures from spinning down unless they're manually cleaned up.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2825", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2825/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2825/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2825/events", "html_url": "https://github.com/spotify/luigi/issues/2825", "id": 521111414, "node_id": "MDU6SXNzdWU1MjExMTE0MTQ=", "number": 2825, "title": "AttributeError: 'str' object has no attribute 'date_a'", "user": {"login": "gabriel-aranha", "id": 8185952, "node_id": "MDQ6VXNlcjgxODU5NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8185952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabriel-aranha", "html_url": "https://github.com/gabriel-aranha", "followers_url": "https://api.github.com/users/gabriel-aranha/followers", "following_url": "https://api.github.com/users/gabriel-aranha/following{/other_user}", "gists_url": "https://api.github.com/users/gabriel-aranha/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabriel-aranha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabriel-aranha/subscriptions", "organizations_url": "https://api.github.com/users/gabriel-aranha/orgs", "repos_url": "https://api.github.com/users/gabriel-aranha/repos", "events_url": "https://api.github.com/users/gabriel-aranha/events{/privacy}", "received_events_url": "https://api.github.com/users/gabriel-aranha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-11T18:14:48Z", "updated_at": "2019-11-15T11:46:31Z", "closed_at": "2019-11-15T11:46:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I couldn't find any examples online using the DateIntervalParameter in conjunction with luigi.build() to see if it is wrong.\r\nHere is the relevant part of my task: \r\n```\r\nclass AggregateData(luigi.Task):\r\n        date_interval = luigi.DateIntervalParameter()\r\n\r\n        def requires(self):\r\n                return SourceData(some_other_parameter)\r\n\r\n        def output(self):\r\n                return luigi.LocalTarget(path='some_path')\r\n\r\n        def run(self):\r\n                date_a = self.date_interval.date_a\r\n                date_b = self.date_interval.date_b\r\n                df = df.loc[date_a:date_b]\r\n                .\r\n                .\r\n                .\r\nif __name__ == '__main__':\r\n        luigi.build([AggregateData(date_interval=\"2016-10-30-2016-11-30\")])\r\n```\r\nWhen I execute the pipeline using the build command like it is presented above, I get the title error.\r\nWhen i simply run the pipeline using the command line and passing the command below, it works as expected.\r\n```\r\nPYTHONPATH='.' luigi --module pipeline AggregateData --local-scheduler  --date-interval '2016-10-30-2016-11-30'\r\n```\r\nIt seems that the DateIntervalParameter is not parsing the date when I use the build command from inside the code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2816", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2816/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2816/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2816/events", "html_url": "https://github.com/spotify/luigi/issues/2816", "id": 513653738, "node_id": "MDU6SXNzdWU1MTM2NTM3Mzg=", "number": 2816, "title": "Ordering of SGE logging can crash but not output useful logging information", "user": {"login": "gwarmstrong", "id": 19470970, "node_id": "MDQ6VXNlcjE5NDcwOTcw", "avatar_url": "https://avatars2.githubusercontent.com/u/19470970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gwarmstrong", "html_url": "https://github.com/gwarmstrong", "followers_url": "https://api.github.com/users/gwarmstrong/followers", "following_url": "https://api.github.com/users/gwarmstrong/following{/other_user}", "gists_url": "https://api.github.com/users/gwarmstrong/gists{/gist_id}", "starred_url": "https://api.github.com/users/gwarmstrong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gwarmstrong/subscriptions", "organizations_url": "https://api.github.com/users/gwarmstrong/orgs", "repos_url": "https://api.github.com/users/gwarmstrong/repos", "events_url": "https://api.github.com/users/gwarmstrong/events{/privacy}", "received_events_url": "https://api.github.com/users/gwarmstrong/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-29T02:20:13Z", "updated_at": "2020-03-12T07:05:40Z", "closed_at": "2020-03-12T07:05:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/spotify/luigi/blob/db8ff63f8cd4418be91fa6bfb75b23102a5fae2f/luigi/contrib/sge.py#L306-L308\r\n\r\nI think it would be more useful here if L308 came before L307 so that if there is a crash in (current) L307, the potentially breaking command is logged.\r\n\r\nCan submit a PR. Is this something you would be interested in?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2814", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2814/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2814/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2814/events", "html_url": "https://github.com/spotify/luigi/issues/2814", "id": 513587296, "node_id": "MDU6SXNzdWU1MTM1ODcyOTY=", "number": 2814, "title": "test/contrib/kubernetes_test.py fails on master", "user": {"login": "plizmol", "id": 32671073, "node_id": "MDQ6VXNlcjMyNjcxMDcz", "avatar_url": "https://avatars1.githubusercontent.com/u/32671073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plizmol", "html_url": "https://github.com/plizmol", "followers_url": "https://api.github.com/users/plizmol/followers", "following_url": "https://api.github.com/users/plizmol/following{/other_user}", "gists_url": "https://api.github.com/users/plizmol/gists{/gist_id}", "starred_url": "https://api.github.com/users/plizmol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plizmol/subscriptions", "organizations_url": "https://api.github.com/users/plizmol/orgs", "repos_url": "https://api.github.com/users/plizmol/repos", "events_url": "https://api.github.com/users/plizmol/events{/privacy}", "received_events_url": "https://api.github.com/users/plizmol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-28T22:17:03Z", "updated_at": "2020-03-12T07:05:40Z", "closed_at": "2020-03-12T07:05:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\n```\r\nFEDEBUG: Checking if SuccessJob() is complete\r\n/home/.../luigi/luigi/worker.py:409: UserWarning: Task SuccessJob() without outputs has no custom complete() method\r\n  is_complete = task.complete()\r\nINFO: Informed scheduler that task   SuccessJob__99914b932b   has status   PENDING\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 1\r\nINFO: [pid 14613] Worker Worker(salt=..., workers=1, host=..., username=..., pid=14613) running   SuccessJob()\r\nDEBUG: Kubernetes auth method: kubeconfig\r\nINFO: Submitting Kubernetes Job: success-20191028221352-86fbccc971ff4748\r\nINFO: Start tracking Kubernetes Job: success-20191028221352-86fbccc971ff4748\r\nDEBUG: Waiting for Kubernetes job success-20191028221352-86fbccc971ff4748 to start\r\nINFO: To stream Pod logs, use:\r\nINFO: `kubectl logs -f pod/success-20191028221352-86fbccc971ff4748-xlv8q`\r\nINFO: Kubernetes job success-20191028221352-86fbccc971ff4748 succeeded\r\nINFO: [pid 14613] Worker Worker(salt=..., workers=1, host=..., username=..., pid=14613) done      SuccessJob()\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   SuccessJob__99914b932b   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nINFO: Worker Worker(salt=..., workers=1, host=..., username=..., pid=14613) was stopped. Shutting down Keep-Alive thread\r\nINFO: \r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 1 tasks of which:\r\n* 1 ran successfully:\r\n    - 1 SuccessJob()\r\n\r\nThis progress looks :) because there were no failed tasks or missing dependencies\r\n\r\n===== Luigi Execution Summary =====\r\n\r\n.\r\n======================================================================\r\nERROR: test_output (__main__.TestK8STask)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/.../.virtualenvs/luigi_temp/lib/python3.7/site-packages/mock/mock.py\", line 1330, in patched\r\n    return func(*args, **keywargs)\r\n  File \"test/contrib/kubernetes_test.py\", line 105, in test_output\r\n    kubernetes_job._KubernetesJobTask__track_job()\r\n  File \"/home/.../luigi/luigi/contrib/kubernetes.py\", line 218, in __track_job\r\n    while not self.__verify_job_has_started():\r\n  File \"/home/.../luigi/luigi/contrib/kubernetes.py\", line 275, in __verify_job_has_started\r\n    self.__get_job()\r\n  File \"/home/.../luigi/luigi/contrib/kubernetes.py\", line 253, in __get_job\r\n    jobs = Job.objects(self.__kube_api, namespace=self.kubernetes_namespace) \\\r\nAttributeError: 'KubernetesJobTask' object has no attribute '_KubernetesJobTask__kube_api'\r\n\r\n======================================================================\r\nFAIL: test_fail_job (__main__.TestK8STask)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test/contrib/kubernetes_test.py\", line 84, in test_fail_job\r\n    self.assertRaises(RuntimeError, fail.run)\r\nAssertionError: Pod fail-20191028221346-eb2a7b33c484458b-6qjz6 ContainerCannotRun (exit code 128). Logs: `kubectl logs pod/fail-20191028221346-eb2a7b33c484458b-6qjz6`\r\n\r\n----------------------------------------------------------------------\r\nRan 3 tests in 11.993s\r\n\r\nFAILED (failures=1, errors=1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2812", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2812/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2812/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2812/events", "html_url": "https://github.com/spotify/luigi/issues/2812", "id": 511259967, "node_id": "MDU6SXNzdWU1MTEyNTk5Njc=", "number": 2812, "title": "Luigi Passes List to json.loads When Using TOML Config and ListParameter", "user": {"login": "adonig", "id": 900404, "node_id": "MDQ6VXNlcjkwMDQwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/900404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adonig", "html_url": "https://github.com/adonig", "followers_url": "https://api.github.com/users/adonig/followers", "following_url": "https://api.github.com/users/adonig/following{/other_user}", "gists_url": "https://api.github.com/users/adonig/gists{/gist_id}", "starred_url": "https://api.github.com/users/adonig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adonig/subscriptions", "organizations_url": "https://api.github.com/users/adonig/orgs", "repos_url": "https://api.github.com/users/adonig/repos", "events_url": "https://api.github.com/users/adonig/events{/privacy}", "received_events_url": "https://api.github.com/users/adonig/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-23T11:27:43Z", "updated_at": "2020-06-20T17:33:05Z", "closed_at": "2020-06-20T17:33:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using luigi 2.8.9 with toml 0.10.0 as extra. My luigi.toml contains a list. Accessing its value with a luigi.ListParameter causes the following error:\r\n\r\n>   File \"/Users/asd/Projects/smtc/pipeline/.venv/lib/python3.7/site-packages/luigi/parameter.py\", line 1054, in parse\r\n>     return list(json.loads(x, object_pairs_hook=_FrozenOrderedDict))\r\n>   File \"/Users/asd/.pyenv/versions/3.7.4/lib/python3.7/json/__init__.py\", line 341, in loads\r\n>     raise TypeError(f'the JSON object must be str, bytes or bytearray, '\r\n\r\nThe problem is that `x` already has type `<class 'list'>` while it should be a `str` instead.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2811", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2811/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2811/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2811/events", "html_url": "https://github.com/spotify/luigi/issues/2811", "id": 510476530, "node_id": "MDU6SXNzdWU1MTA0NzY1MzA=", "number": 2811, "title": "How to send custom notification on failed task ? ", "user": {"login": "ttpro1995", "id": 7196876, "node_id": "MDQ6VXNlcjcxOTY4NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7196876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ttpro1995", "html_url": "https://github.com/ttpro1995", "followers_url": "https://api.github.com/users/ttpro1995/followers", "following_url": "https://api.github.com/users/ttpro1995/following{/other_user}", "gists_url": "https://api.github.com/users/ttpro1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/ttpro1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ttpro1995/subscriptions", "organizations_url": "https://api.github.com/users/ttpro1995/orgs", "repos_url": "https://api.github.com/users/ttpro1995/repos", "events_url": "https://api.github.com/users/ttpro1995/events{/privacy}", "received_events_url": "https://api.github.com/users/ttpro1995/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-22T07:26:40Z", "updated_at": "2020-03-05T14:59:38Z", "closed_at": "2020-03-05T14:59:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to send notification by calling my custom api. As far as I can see on documentation, (https://luigi.readthedocs.io/en/stable/api/luigi.notifications.html) luigi support notification by email. \r\n\r\nHowever, I want to write custom notification function (call my api with a message) that will be invoke when there is failed task. \r\n\r\nHow can I write my own notification function, how to make my notification function be call when a task failed ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2810", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2810/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2810/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2810/events", "html_url": "https://github.com/spotify/luigi/issues/2810", "id": 509982765, "node_id": "MDU6SXNzdWU1MDk5ODI3NjU=", "number": 2810, "title": "Multiprocessing\\Multithreading", "user": {"login": "diegocorradini", "id": 17815168, "node_id": "MDQ6VXNlcjE3ODE1MTY4", "avatar_url": "https://avatars3.githubusercontent.com/u/17815168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diegocorradini", "html_url": "https://github.com/diegocorradini", "followers_url": "https://api.github.com/users/diegocorradini/followers", "following_url": "https://api.github.com/users/diegocorradini/following{/other_user}", "gists_url": "https://api.github.com/users/diegocorradini/gists{/gist_id}", "starred_url": "https://api.github.com/users/diegocorradini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diegocorradini/subscriptions", "organizations_url": "https://api.github.com/users/diegocorradini/orgs", "repos_url": "https://api.github.com/users/diegocorradini/repos", "events_url": "https://api.github.com/users/diegocorradini/events{/privacy}", "received_events_url": "https://api.github.com/users/diegocorradini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-21T14:00:07Z", "updated_at": "2019-10-21T14:19:38Z", "closed_at": "2019-10-21T14:19:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI have been facing the following problem without finding a solution since a while.\r\nI am developing a Django webapp which starts a Luigi pipeline with let s say N workers.\r\nEvery worker of the pipeline run queries.\r\n\r\nIf I am running just 1 worker everything fine.\r\nOtherwise, if I am running more workers, I get random database errors.\r\nIt seems that Django and Postgres have problem to run queries from different processes\r\n\r\nIs it possible to spawn workers as threads?\r\nOtherwise could you suggest a workaround?\r\n\r\nHope the problem is clear.\r\n\r\nThe framework is great but without run queries in parallel it becomes useless. \r\n\r\nMany thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2806", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2806/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2806/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2806/events", "html_url": "https://github.com/spotify/luigi/issues/2806", "id": 507698416, "node_id": "MDU6SXNzdWU1MDc2OTg0MTY=", "number": 2806, "title": "BigTable target", "user": {"login": "NatashaL", "id": 4315174, "node_id": "MDQ6VXNlcjQzMTUxNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/4315174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NatashaL", "html_url": "https://github.com/NatashaL", "followers_url": "https://api.github.com/users/NatashaL/followers", "following_url": "https://api.github.com/users/NatashaL/following{/other_user}", "gists_url": "https://api.github.com/users/NatashaL/gists{/gist_id}", "starred_url": "https://api.github.com/users/NatashaL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NatashaL/subscriptions", "organizations_url": "https://api.github.com/users/NatashaL/orgs", "repos_url": "https://api.github.com/users/NatashaL/repos", "events_url": "https://api.github.com/users/NatashaL/events{/privacy}", "received_events_url": "https://api.github.com/users/NatashaL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 642242876, "node_id": "MDU6TGFiZWw2NDIyNDI4NzY=", "url": "https://api.github.com/repos/spotify/luigi/labels/FeatureRequest", "name": "FeatureRequest", "color": "d4c5f9", "default": false, "description": null}, {"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-16T08:33:04Z", "updated_at": "2020-06-15T00:20:02Z", "closed_at": "2020-06-15T00:20:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nLike the title says, add a BigTableTarget implementation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2805", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2805/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2805/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2805/events", "html_url": "https://github.com/spotify/luigi/issues/2805", "id": 507236576, "node_id": "MDU6SXNzdWU1MDcyMzY1NzY=", "number": 2805, "title": "Support Tornado>=6", "user": {"login": "lbolla", "id": 20991, "node_id": "MDQ6VXNlcjIwOTkx", "avatar_url": "https://avatars3.githubusercontent.com/u/20991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbolla", "html_url": "https://github.com/lbolla", "followers_url": "https://api.github.com/users/lbolla/followers", "following_url": "https://api.github.com/users/lbolla/following{/other_user}", "gists_url": "https://api.github.com/users/lbolla/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbolla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbolla/subscriptions", "organizations_url": "https://api.github.com/users/lbolla/orgs", "repos_url": "https://api.github.com/users/lbolla/repos", "events_url": "https://api.github.com/users/lbolla/events{/privacy}", "received_events_url": "https://api.github.com/users/lbolla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-15T13:13:43Z", "updated_at": "2020-03-07T10:23:38Z", "closed_at": "2020-02-27T05:16:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tornado 6 is out. Luigi should not pin against it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2804", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2804/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2804/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2804/events", "html_url": "https://github.com/spotify/luigi/issues/2804", "id": 505979105, "node_id": "MDU6SXNzdWU1MDU5NzkxMDU=", "number": 2804, "title": "The problem with kubernetes (service-account & self-signed certificates)", "user": {"login": "korcky", "id": 13122622, "node_id": "MDQ6VXNlcjEzMTIyNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/13122622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/korcky", "html_url": "https://github.com/korcky", "followers_url": "https://api.github.com/users/korcky/followers", "following_url": "https://api.github.com/users/korcky/following{/other_user}", "gists_url": "https://api.github.com/users/korcky/gists{/gist_id}", "starred_url": "https://api.github.com/users/korcky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/korcky/subscriptions", "organizations_url": "https://api.github.com/users/korcky/orgs", "repos_url": "https://api.github.com/users/korcky/repos", "events_url": "https://api.github.com/users/korcky/events{/privacy}", "received_events_url": "https://api.github.com/users/korcky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-11T17:48:06Z", "updated_at": "2020-02-22T18:38:55Z", "closed_at": "2020-02-22T18:38:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there!\r\n\r\nI am using latest release of `luigi==2.8.9`, that installs (I guess by default) quite old version of `pykube==0.15.0` (`requests==2.22.0`).\r\n\r\nThis combinations of modules creates an error: `[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1049)` when your certificates are self-signed and `auth_method` for kubernetes is `service-account` (at least, mb this will affect any `auth_method`).\r\n\r\nThe problem is with how the `pykube==0.15.0` makes a `request.Session`:\r\nin `requests==2.22.0` `Session()` object, by default, have a parameter `trust_env = True`, which force any request to use only environment certificates which break everything (even when you specify `verify` parameter in `Session()`, `pykube` do exactly this).\r\n\r\nMy current solution for this issue (for now) is to create a new class from `pykube.http.HTTPClient` that will fix a variable in session:\r\n```python\r\nfrom pykube.http import HTTPClient as OriginalHTTPClient\r\n\r\nclass HTTPClient(OriginalHTTPClient):\r\n    @property\r\n    def session(self):\r\n        _session = super().session\r\n        if _session.trust_env:\r\n            _session.trust_env = False\r\n        return _session\r\n```\r\n\r\nMb `luigi.contrib.kubernetes` should implements something like this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2800", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2800/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2800/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2800/events", "html_url": "https://github.com/spotify/luigi/issues/2800", "id": 504638534, "node_id": "MDU6SXNzdWU1MDQ2Mzg1MzQ=", "number": 2800, "title": "Adding subclass of RangeBase", "user": {"login": "tayal007", "id": 22911530, "node_id": "MDQ6VXNlcjIyOTExNTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/22911530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tayal007", "html_url": "https://github.com/tayal007", "followers_url": "https://api.github.com/users/tayal007/followers", "following_url": "https://api.github.com/users/tayal007/following{/other_user}", "gists_url": "https://api.github.com/users/tayal007/gists{/gist_id}", "starred_url": "https://api.github.com/users/tayal007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tayal007/subscriptions", "organizations_url": "https://api.github.com/users/tayal007/orgs", "repos_url": "https://api.github.com/users/tayal007/repos", "events_url": "https://api.github.com/users/tayal007/events{/privacy}", "received_events_url": "https://api.github.com/users/tayal007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-09T13:03:00Z", "updated_at": "2019-10-13T17:34:28Z", "closed_at": "2019-10-13T17:34:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nI want to schedule my tasks weekly and so I made my own RangeWeeklyBase class which derives RangeBase.\r\nMy question is how do I use to to run luigi through cmd?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2794", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2794/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2794/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2794/events", "html_url": "https://github.com/spotify/luigi/issues/2794", "id": 499690089, "node_id": "MDU6SXNzdWU0OTk2OTAwODk=", "number": 2794, "title": "Test impact of relaxing python-daemon clamp at < 2.2.0", "user": {"login": "pmlandwehr", "id": 4303236, "node_id": "MDQ6VXNlcjQzMDMyMzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/4303236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmlandwehr", "html_url": "https://github.com/pmlandwehr", "followers_url": "https://api.github.com/users/pmlandwehr/followers", "following_url": "https://api.github.com/users/pmlandwehr/following{/other_user}", "gists_url": "https://api.github.com/users/pmlandwehr/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmlandwehr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmlandwehr/subscriptions", "organizations_url": "https://api.github.com/users/pmlandwehr/orgs", "repos_url": "https://api.github.com/users/pmlandwehr/repos", "events_url": "https://api.github.com/users/pmlandwehr/events{/privacy}", "received_events_url": "https://api.github.com/users/pmlandwehr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-27T23:25:22Z", "updated_at": "2020-02-12T04:17:09Z", "closed_at": "2020-02-12T04:17:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`python-daemon` is now at 2.2.3.  Can we get a retest to see if [the windows issue keeping luigi at 2.1.2](https://github.com/spotify/luigi/issues/2525) has been mitigated?\r\n\r\n<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2792", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2792/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2792/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2792/events", "html_url": "https://github.com/spotify/luigi/issues/2792", "id": 498045315, "node_id": "MDU6SXNzdWU0OTgwNDUzMTU=", "number": 2792, "title": "\"ValueError: Unknown format code 'd' for object of type 'str'\"", "user": {"login": "sarwatfatimam", "id": 8774286, "node_id": "MDQ6VXNlcjg3NzQyODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8774286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarwatfatimam", "html_url": "https://github.com/sarwatfatimam", "followers_url": "https://api.github.com/users/sarwatfatimam/followers", "following_url": "https://api.github.com/users/sarwatfatimam/following{/other_user}", "gists_url": "https://api.github.com/users/sarwatfatimam/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarwatfatimam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarwatfatimam/subscriptions", "organizations_url": "https://api.github.com/users/sarwatfatimam/orgs", "repos_url": "https://api.github.com/users/sarwatfatimam/repos", "events_url": "https://api.github.com/users/sarwatfatimam/events{/privacy}", "received_events_url": "https://api.github.com/users/sarwatfatimam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-25T04:46:47Z", "updated_at": "2020-06-17T04:42:34Z", "closed_at": "2020-06-17T04:42:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to override the scheduler_host in luigi.build in order to connect to luigid in docker.  However, it gives a format error as follows. \r\n\r\n```\r\nluigi.build([MyTask()], scheduler_host=\"0.0.0.0\", scheduler_port=\"8082\")\r\n\r\n```\r\n\r\nI believe the issue in the function **_schedule_and_run** in the following code. I don't think so the URL port should have \"d\" after ':' has {port:d}\r\n\r\n``` \r\nif env_params.local_scheduler:\r\n        sch = worker_scheduler_factory.create_local_scheduler()\r\n    else:\r\n        if env_params.scheduler_url != '':\r\n            url = env_params.scheduler_url\r\n        else:\r\n            url = 'http://{host}:{port:d}/'.format(\r\n                host=env_params.scheduler_host,\r\n                port=env_params.scheduler_port,\r\n            )\r\n``` \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2790", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2790/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2790/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2790/events", "html_url": "https://github.com/spotify/luigi/issues/2790", "id": 496885339, "node_id": "MDU6SXNzdWU0OTY4ODUzMzk=", "number": 2790, "title": "Need documentation on \"assistant\" feature", "user": {"login": "ttpro1995", "id": 7196876, "node_id": "MDQ6VXNlcjcxOTY4NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7196876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ttpro1995", "html_url": "https://github.com/ttpro1995", "followers_url": "https://api.github.com/users/ttpro1995/followers", "following_url": "https://api.github.com/users/ttpro1995/following{/other_user}", "gists_url": "https://api.github.com/users/ttpro1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/ttpro1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ttpro1995/subscriptions", "organizations_url": "https://api.github.com/users/ttpro1995/orgs", "repos_url": "https://api.github.com/users/ttpro1995/repos", "events_url": "https://api.github.com/users/ttpro1995/events{/privacy}", "received_events_url": "https://api.github.com/users/ttpro1995/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-23T04:09:20Z", "updated_at": "2020-02-04T20:26:04Z", "closed_at": "2020-02-04T20:26:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to read documentation on \"assistant\", which is mention on #1217 . \r\n\r\nI can't find any detail about assistant on current stable build [documentation ](https://luigi.readthedocs.io/en/stable/index.html).\r\n\r\nSomething like How to use, Systax, Example will be helpful. \r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2788", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2788/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2788/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2788/events", "html_url": "https://github.com/spotify/luigi/issues/2788", "id": 496322821, "node_id": "MDU6SXNzdWU0OTYzMjI4MjE=", "number": 2788, "title": "Scheduler endpoint for checking status/health", "user": {"login": "Valleo4", "id": 3699059, "node_id": "MDQ6VXNlcjM2OTkwNTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3699059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Valleo4", "html_url": "https://github.com/Valleo4", "followers_url": "https://api.github.com/users/Valleo4/followers", "following_url": "https://api.github.com/users/Valleo4/following{/other_user}", "gists_url": "https://api.github.com/users/Valleo4/gists{/gist_id}", "starred_url": "https://api.github.com/users/Valleo4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Valleo4/subscriptions", "organizations_url": "https://api.github.com/users/Valleo4/orgs", "repos_url": "https://api.github.com/users/Valleo4/repos", "events_url": "https://api.github.com/users/Valleo4/events{/privacy}", "received_events_url": "https://api.github.com/users/Valleo4/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-20T12:24:49Z", "updated_at": "2020-01-20T15:52:14Z", "closed_at": "2020-01-20T15:52:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using Docker Swarm for example, a healthcheck command can be used to check whether services in containers are up. Right now the best way to check health of the luigi scheduler is by GET request to root \"/\" which redirects and returns the landing page, which is not fitting when just checking the service.\r\n\r\nPerhaps the service could accept HEAD requests to the root \"/\" for this purpose?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2787", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2787/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2787/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2787/events", "html_url": "https://github.com/spotify/luigi/issues/2787", "id": 495205026, "node_id": "MDU6SXNzdWU0OTUyMDUwMjY=", "number": 2787, "title": "Feature Request: free resource at tasks' run time", "user": {"login": "FxIII", "id": 1052649, "node_id": "MDQ6VXNlcjEwNTI2NDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1052649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FxIII", "html_url": "https://github.com/FxIII", "followers_url": "https://api.github.com/users/FxIII/followers", "following_url": "https://api.github.com/users/FxIII/following{/other_user}", "gists_url": "https://api.github.com/users/FxIII/gists{/gist_id}", "starred_url": "https://api.github.com/users/FxIII/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FxIII/subscriptions", "organizations_url": "https://api.github.com/users/FxIII/orgs", "repos_url": "https://api.github.com/users/FxIII/repos", "events_url": "https://api.github.com/users/FxIII/events{/privacy}", "received_events_url": "https://api.github.com/users/FxIII/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-18T12:49:38Z", "updated_at": "2019-09-19T15:15:31Z", "closed_at": "2019-09-19T15:15:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Rationale\r\nThe resource declaration mechanism allows the scheduler to delay the execution of tasks when there are not enough resources available for them.\r\n\r\nCurrently the resource allocation is bound to the task lifetime i.e. resource are allocated by the scheduler before the task execution and freed upon task completition/exit.\r\n\r\nWhile the resource allocation needs to be done upfront by the scheduler, the tasks should be allowed to notify the scheduler if they released some of the declared resources _**before**_ the tasks completition/exit.\r\n\r\nThis should prevent long running tasks to stop other tasks if the firsts use the resources for a fraction of their time.\r\n\r\n### Feature Request\r\nA task method that notifies the scheduler that a subset of the allocated resources can be deallocated. Something like\r\n```python\r\nself.free_resources(stone=1, wood=2)\r\n```\r\nwhich frees one stone and two woods; obviously exceeding values should be clamped to actually allocated resources.\r\noptionally\r\n```python\r\nself.free_resources()\r\n```\r\nshould free all the allocated resources as if the task was completed/terminated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2786", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2786/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2786/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2786/events", "html_url": "https://github.com/spotify/luigi/issues/2786", "id": 494531017, "node_id": "MDU6SXNzdWU0OTQ1MzEwMTc=", "number": 2786, "title": "BigQueryTarget.exists() for partitioned table", "user": {"login": "bartkim0426", "id": 23415251, "node_id": "MDQ6VXNlcjIzNDE1MjUx", "avatar_url": "https://avatars1.githubusercontent.com/u/23415251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bartkim0426", "html_url": "https://github.com/bartkim0426", "followers_url": "https://api.github.com/users/bartkim0426/followers", "following_url": "https://api.github.com/users/bartkim0426/following{/other_user}", "gists_url": "https://api.github.com/users/bartkim0426/gists{/gist_id}", "starred_url": "https://api.github.com/users/bartkim0426/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bartkim0426/subscriptions", "organizations_url": "https://api.github.com/users/bartkim0426/orgs", "repos_url": "https://api.github.com/users/bartkim0426/repos", "events_url": "https://api.github.com/users/bartkim0426/events{/privacy}", "received_events_url": "https://api.github.com/users/bartkim0426/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-17T10:12:58Z", "updated_at": "2020-01-30T02:31:48Z", "closed_at": "2020-01-30T02:31:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "For a partitioned table, it always returns True if any table exists.\r\n\r\nFor example, I have `test_table_$20190916`.\r\n\r\nThen every target existance including `test_table_` prefix is True \r\n\r\n```\r\n>>> target = BigQueryTarget(\r\n            project_id=PROJECT_ID,\r\n            dataset_id=DATASET_ID,\r\n            table_id=\"test_table_$20190917\",\r\n        )\r\n\r\n>>> target.exists()\r\nTrue\r\n```\r\n\r\nIt's because `client.tables().get(...).execute()` get results. Is it intended result? Or is there other way to get the right existance of a partitioned table?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2784", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2784/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2784/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2784/events", "html_url": "https://github.com/spotify/luigi/issues/2784", "id": 493533667, "node_id": "MDU6SXNzdWU0OTM1MzM2Njc=", "number": 2784, "title": "System Requirements?", "user": {"login": "cowlinator", "id": 4963190, "node_id": "MDQ6VXNlcjQ5NjMxOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4963190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cowlinator", "html_url": "https://github.com/cowlinator", "followers_url": "https://api.github.com/users/cowlinator/followers", "following_url": "https://api.github.com/users/cowlinator/following{/other_user}", "gists_url": "https://api.github.com/users/cowlinator/gists{/gist_id}", "starred_url": "https://api.github.com/users/cowlinator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cowlinator/subscriptions", "organizations_url": "https://api.github.com/users/cowlinator/orgs", "repos_url": "https://api.github.com/users/cowlinator/repos", "events_url": "https://api.github.com/users/cowlinator/events{/privacy}", "received_events_url": "https://api.github.com/users/cowlinator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-13T22:02:32Z", "updated_at": "2019-11-24T19:31:39Z", "closed_at": "2019-09-30T16:30:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation lacks sufficient information about the things Luigi depends on (a.k.a. System Requirements, a.k.a. Prerequisites).\r\n\r\nFor example, the Central Scheduler requires a Unix-based OS.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2783", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2783/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2783/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2783/events", "html_url": "https://github.com/spotify/luigi/issues/2783", "id": 492872110, "node_id": "MDU6SXNzdWU0OTI4NzIxMTA=", "number": 2783, "title": "Feature Request: binary write mode for LocalTarget", "user": {"login": "mwheeler-hdai", "id": 52678277, "node_id": "MDQ6VXNlcjUyNjc4Mjc3", "avatar_url": "https://avatars3.githubusercontent.com/u/52678277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwheeler-hdai", "html_url": "https://github.com/mwheeler-hdai", "followers_url": "https://api.github.com/users/mwheeler-hdai/followers", "following_url": "https://api.github.com/users/mwheeler-hdai/following{/other_user}", "gists_url": "https://api.github.com/users/mwheeler-hdai/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwheeler-hdai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwheeler-hdai/subscriptions", "organizations_url": "https://api.github.com/users/mwheeler-hdai/orgs", "repos_url": "https://api.github.com/users/mwheeler-hdai/repos", "events_url": "https://api.github.com/users/mwheeler-hdai/events{/privacy}", "received_events_url": "https://api.github.com/users/mwheeler-hdai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-12T15:16:50Z", "updated_at": "2020-04-23T02:18:27Z", "closed_at": "2020-04-23T02:18:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to use `pickle.dump` to write to a LocalTarget after calling `open` in write mode, kind of like this: \r\n\r\n```\r\ndef run(self):\r\n    some_object = object()\r\n    local_target = self.output()  # An instance of LocalTarget\r\n    with local_target.open(mode=\"w\") as f:  # <-- binary write not supported\r\n        pickle.dump(some_object, f)\r\n```\r\n\r\nUnfortunately this causes an error: `TypeError: write() argument must be str, not bytes` because the LocalTarget open method doesn't allow binary write mode. This appears to be a deliberate decision, as the [source code](https://luigi.readthedocs.io/en/stable/_modules/luigi/local_target.html#LocalTarget) for the `open` method just strips the `b` out of the mode argument. \r\n\r\nIt's easy enough to work around this by using `self.output().path` as suggested by [this kind stranger](https://stackoverflow.com/a/44418914). Nonetheless I think it would be nice either to include this capability as part of the LocalTarget `open` method, or to throw a more informative error instead of just stripping out the `b`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2782", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2782/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2782/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2782/events", "html_url": "https://github.com/spotify/luigi/issues/2782", "id": 492703536, "node_id": "MDU6SXNzdWU0OTI3MDM1MzY=", "number": 2782, "title": "Database cuncurrency problem", "user": {"login": "diegocorradini", "id": 17815168, "node_id": "MDQ6VXNlcjE3ODE1MTY4", "avatar_url": "https://avatars3.githubusercontent.com/u/17815168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diegocorradini", "html_url": "https://github.com/diegocorradini", "followers_url": "https://api.github.com/users/diegocorradini/followers", "following_url": "https://api.github.com/users/diegocorradini/following{/other_user}", "gists_url": "https://api.github.com/users/diegocorradini/gists{/gist_id}", "starred_url": "https://api.github.com/users/diegocorradini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diegocorradini/subscriptions", "organizations_url": "https://api.github.com/users/diegocorradini/orgs", "repos_url": "https://api.github.com/users/diegocorradini/repos", "events_url": "https://api.github.com/users/diegocorradini/events{/privacy}", "received_events_url": "https://api.github.com/users/diegocorradini/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-09-12T09:53:42Z", "updated_at": "2020-04-11T13:02:02Z", "closed_at": "2020-04-11T13:02:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI am developing a pipeline in Django where different workers read/write on a database.\r\nEverything is working fine if I am using only one worker.\r\nOtherwise I get random errors in the tasks like: pop from empty list, EOF detected, database is locked.. depending on the databaes backend.\r\nYes because I tried with Postgres, MySQL and SQLite.. \r\n\r\nThis is the line where I am configuring the workers:\r\n`luigi.build(Workflow(id=session_id)], workers=4)`\r\n\r\nAny help would be really appreciate since I am stuck with this problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2781", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2781/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2781/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2781/events", "html_url": "https://github.com/spotify/luigi/issues/2781", "id": 492463634, "node_id": "MDU6SXNzdWU0OTI0NjM2MzQ=", "number": 2781, "title": "Trigger event on upstream failure", "user": {"login": "ThePletch", "id": 4468322, "node_id": "MDQ6VXNlcjQ0NjgzMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4468322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePletch", "html_url": "https://github.com/ThePletch", "followers_url": "https://api.github.com/users/ThePletch/followers", "following_url": "https://api.github.com/users/ThePletch/following{/other_user}", "gists_url": "https://api.github.com/users/ThePletch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePletch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePletch/subscriptions", "organizations_url": "https://api.github.com/users/ThePletch/orgs", "repos_url": "https://api.github.com/users/ThePletch/repos", "events_url": "https://api.github.com/users/ThePletch/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePletch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-11T20:58:18Z", "updated_at": "2020-01-28T15:18:07Z", "closed_at": "2020-01-28T15:18:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\nSeveral of our workflows that run through Luigi post a notification to an external system when the workflow succeeds or fails, but there is currently no straightforward way to notify the user if a dependency of the root task fails, preventing the root task from running.\r\n\r\nOptions we've explored include:\r\n1. Tying the hook to post the failure notification to every component task's `on_failure` (difficult to both prevent duplicate notifications and allow for multiple failure notifications for multiple attempts)\r\n2. Associating a custom hook that deduplicates alerts by their root task (requires tracking a task's 'root task', does not fully eliminate above problem with allowing multiple notifications for different runs)\r\n\r\nThe option that would require the least work from us would be an event that triggers the first time an upstream task for a specific task fails. This would let us keep all configuration for notifying about successes and failures in the root workflow, rather than needing to manage notifications for every step in the process and handle the accompanying usability features (deduplication, etc).\r\n\r\nIs this something that's available in Luigi, but I'm unaware of, something that's slated for development soon, or is there a technical limitation preventing this from being easily implemented?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2780", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2780/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2780/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2780/events", "html_url": "https://github.com/spotify/luigi/issues/2780", "id": 492317163, "node_id": "MDU6SXNzdWU0OTIzMTcxNjM=", "number": 2780, "title": "Reverse proxying webserver", "user": {"login": "timkpaine", "id": 3105306, "node_id": "MDQ6VXNlcjMxMDUzMDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3105306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timkpaine", "html_url": "https://github.com/timkpaine", "followers_url": "https://api.github.com/users/timkpaine/followers", "following_url": "https://api.github.com/users/timkpaine/following{/other_user}", "gists_url": "https://api.github.com/users/timkpaine/gists{/gist_id}", "starred_url": "https://api.github.com/users/timkpaine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timkpaine/subscriptions", "organizations_url": "https://api.github.com/users/timkpaine/orgs", "repos_url": "https://api.github.com/users/timkpaine/repos", "events_url": "https://api.github.com/users/timkpaine/events{/privacy}", "received_events_url": "https://api.github.com/users/timkpaine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-11T15:40:18Z", "updated_at": "2019-11-19T01:55:52Z", "closed_at": "2019-11-19T01:55:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, I'm trying to run luigi's visualizer behind a reverse proxy. It does not work due to [this line](https://github.com/spotify/luigi/blob/master/luigi/server.py#L274), specifically the initial `/`. Shouldn't the redirect omit this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2778", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2778/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2778/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2778/events", "html_url": "https://github.com/spotify/luigi/issues/2778", "id": 491349693, "node_id": "MDU6SXNzdWU0OTEzNDk2OTM=", "number": 2778, "title": "PySparkTask fails if name contains invalid characters", "user": {"login": "mrk-its", "id": 920204, "node_id": "MDQ6VXNlcjkyMDIwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/920204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrk-its", "html_url": "https://github.com/mrk-its", "followers_url": "https://api.github.com/users/mrk-its/followers", "following_url": "https://api.github.com/users/mrk-its/following{/other_user}", "gists_url": "https://api.github.com/users/mrk-its/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrk-its/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrk-its/subscriptions", "organizations_url": "https://api.github.com/users/mrk-its/orgs", "repos_url": "https://api.github.com/users/mrk-its/repos", "events_url": "https://api.github.com/users/mrk-its/events{/privacy}", "received_events_url": "https://api.github.com/users/mrk-its/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-09T22:05:53Z", "updated_at": "2019-09-20T12:39:31Z", "closed_at": "2019-09-20T12:39:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "PySparkTask derives run_path and run_pickle from name property, but it do not escape special characters:\r\n1. '/' in name causes FileNotFoundError raised by mkdtemp\r\n2. ',' is separator of files in spark-submit '--files' arg, and run_pickle is passed to 'files' arg in cluster mode.\r\n3. ':' causes java.net.URISyntaxException\r\n\r\nTo reproduce: create PySparkTask subclass with name property containing above special characters and try to run it.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2777", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2777/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2777/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2777/events", "html_url": "https://github.com/spotify/luigi/issues/2777", "id": 487702753, "node_id": "MDU6SXNzdWU0ODc3MDI3NTM=", "number": 2777, "title": "Parallel scheduling hangs with no output", "user": {"login": "evictor", "id": 1620156, "node_id": "MDQ6VXNlcjE2MjAxNTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1620156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evictor", "html_url": "https://github.com/evictor", "followers_url": "https://api.github.com/users/evictor/followers", "following_url": "https://api.github.com/users/evictor/following{/other_user}", "gists_url": "https://api.github.com/users/evictor/gists{/gist_id}", "starred_url": "https://api.github.com/users/evictor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evictor/subscriptions", "organizations_url": "https://api.github.com/users/evictor/orgs", "repos_url": "https://api.github.com/users/evictor/repos", "events_url": "https://api.github.com/users/evictor/events{/privacy}", "received_events_url": "https://api.github.com/users/evictor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-30T23:30:14Z", "updated_at": "2020-05-09T12:50:12Z", "closed_at": "2020-05-09T12:50:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Luigi verison 2.8.7\r\n\r\nI'm attempting to use parallel scheduling for a migration task that needs to schedule several thousand dependencies. Normally (without parallel scheduling), I see this kind of output once scheduling begins:\r\n\r\n```\r\n16:24:10 INFO:luigi-interface:Informed scheduler that task   RepredictWithDemogFallback_0_047b165dd5   has status   PENDING\r\n```\r\n\r\nHowever when using parallel scheduling, this console output from Luigi never appears, and in the Luigi Web GUI nothing appears to be scheduled; instead the runner just hangs and nothing ever happens.\r\n\r\nPlease LMK what debug logs I can provide.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2776", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2776/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2776/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2776/events", "html_url": "https://github.com/spotify/luigi/issues/2776", "id": 487663762, "node_id": "MDU6SXNzdWU0ODc2NjM3NjI=", "number": 2776, "title": "Feature request: Progress reporting during requires()", "user": {"login": "evictor", "id": 1620156, "node_id": "MDQ6VXNlcjE2MjAxNTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1620156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evictor", "html_url": "https://github.com/evictor", "followers_url": "https://api.github.com/users/evictor/followers", "following_url": "https://api.github.com/users/evictor/following{/other_user}", "gists_url": "https://api.github.com/users/evictor/gists{/gist_id}", "starred_url": "https://api.github.com/users/evictor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evictor/subscriptions", "organizations_url": "https://api.github.com/users/evictor/orgs", "repos_url": "https://api.github.com/users/evictor/repos", "events_url": "https://api.github.com/users/evictor/events{/privacy}", "received_events_url": "https://api.github.com/users/evictor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-30T20:43:25Z", "updated_at": "2020-02-05T21:18:48Z", "closed_at": "2020-02-05T21:18:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice to be able to use `set_progress_percentage` during `requires()` for tasks that take a while to calculate and yield dependencies (e.g. migration-type wrapper tasks). LMK if you need an example of why I would want to do this if it is not obvious and I will write something up.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2775", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2775/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2775/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2775/events", "html_url": "https://github.com/spotify/luigi/issues/2775", "id": 487105379, "node_id": "MDU6SXNzdWU0ODcxMDUzNzk=", "number": 2775, "title": "Dynamically importing modules while using dynamic dependencies results in ambiguous task name", "user": {"login": "ihowell", "id": 11066637, "node_id": "MDQ6VXNlcjExMDY2NjM3", "avatar_url": "https://avatars2.githubusercontent.com/u/11066637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ihowell", "html_url": "https://github.com/ihowell", "followers_url": "https://api.github.com/users/ihowell/followers", "following_url": "https://api.github.com/users/ihowell/following{/other_user}", "gists_url": "https://api.github.com/users/ihowell/gists{/gist_id}", "starred_url": "https://api.github.com/users/ihowell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ihowell/subscriptions", "organizations_url": "https://api.github.com/users/ihowell/orgs", "repos_url": "https://api.github.com/users/ihowell/repos", "events_url": "https://api.github.com/users/ihowell/events{/privacy}", "received_events_url": "https://api.github.com/users/ihowell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-29T18:15:09Z", "updated_at": "2020-01-22T15:42:36Z", "closed_at": "2020-01-22T15:42:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nWhen I import a module dynamically and that module uses dynamic dependencies, luigi registers the task classes twice, resulting in an ambiguous class name. I've created this minimal use case to reproduce the bug:\r\n\r\n```\r\n# main.py\r\nimport luigi\r\nimport importlib.util\r\nimport sys\r\n\r\n\r\ndef main():\r\n    spec = importlib.util.spec_from_file_location(\"workflow\", \"workflow.py\")\r\n    workflow = importlib.util.module_from_spec(spec)\r\n    spec.loader.exec_module(workflow)\r\n\r\n    workflows = [workflow.Workflow()]\r\n    luigi.build(workflows, workers=1, local_scheduler=True)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(sys.argv)\r\n    main()\r\n```\r\n\r\n```\r\n# workflow.py\r\nimport luigi\r\n\r\n\r\nclass TaskOne(luigi.Task):\r\n    def output(self):\r\n        return luigi.LocalTarget(\"out.txt\")\r\n\r\n    def run(self):\r\n        with self.output().open(\"w\") as out_file:\r\n            out_file.write(\"Hello World!\")\r\n\r\n\r\nclass Workflow(luigi.Task):\r\n    def output(self):\r\n        return luigi.LocalTarget(\"workflow.success\")\r\n\r\n    def run(self):\r\n        yield TaskOne()\r\n        with self.output().open(\"w\") as success_file:\r\n            success_file.write(\"1\")\r\n```\r\n\r\nBy running `python main.py`, I get this stack trace:\r\n\r\n```\r\nDEBUG: Checking if Workflow() is complete\r\nINFO: Informed scheduler that task   Workflow__99914b932b   has status   PENDING\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 1\r\nINFO: [pid 6040] Worker Worker(salt=970405691, workers=1, host=cse-yu-12.local, username=ihowell, pid=6040) running   Workflow()\r\nINFO: [pid 6040] Worker Worker(salt=970405691, workers=1, host=cse-yu-12.local, username=ihowell, pid=6040) new requirements      Workflow()\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Worker Worker(salt=970405691, workers=1, host=cse-yu-12.local, username=ihowell, pid=6040) was stopped. Shutting down Keep-Alive thread\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 17, in <module>\r\n    main()\r\n  File \"main.py\", line 12, in main\r\n    luigi.build(workflows, workers=1, local_scheduler=True)\r\n  File \"/Users/ihowell/.venvs/luigi/lib/python3.7/site-packages/luigi/interface.py\", line 237, in build\r\n    luigi_run_result = _schedule_and_run(tasks, worker_scheduler_factory, override_defaults=env_params)\r\n  File \"/Users/ihowell/.venvs/luigi/lib/python3.7/site-packages/luigi/interface.py\", line 173, in _schedule_and_run\r\n    success &= worker.run()\r\n  File \"/Users/ihowell/.venvs/luigi/lib/python3.7/site-packages/luigi/worker.py\", line 1192, in run\r\n    self._handle_next_task()\r\n  File \"/Users/ihowell/.venvs/luigi/lib/python3.7/site-packages/luigi/worker.py\", line 1088, in _handle_next_task\r\n    for module, name, params in new_requirements]\r\n  File \"/Users/ihowell/.venvs/luigi/lib/python3.7/site-packages/luigi/worker.py\", line 1088, in <listcomp>\r\n    for module, name, params in new_requirements]\r\n  File \"/Users/ihowell/.venvs/luigi/lib/python3.7/site-packages/luigi/task_register.py\", line 252, in load_task\r\n    task_cls = Register.get_task_cls(task_name)\r\n  File \"/Users/ihowell/.venvs/luigi/lib/python3.7/site-packages/luigi/task_register.py\", line 182, in get_task_cls\r\n    raise TaskClassAmbigiousException('Task %r is ambiguous' % name)\r\nluigi.task_register.TaskClassAmbigiousException: Task 'TaskOne' is ambiguous\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2774", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2774/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2774/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2774/events", "html_url": "https://github.com/spotify/luigi/issues/2774", "id": 486434619, "node_id": "MDU6SXNzdWU0ODY0MzQ2MTk=", "number": 2774, "title": "Task died unexpectedly with exit code -11", "user": {"login": "deatinor", "id": 11456434, "node_id": "MDQ6VXNlcjExNDU2NDM0", "avatar_url": "https://avatars0.githubusercontent.com/u/11456434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deatinor", "html_url": "https://github.com/deatinor", "followers_url": "https://api.github.com/users/deatinor/followers", "following_url": "https://api.github.com/users/deatinor/following{/other_user}", "gists_url": "https://api.github.com/users/deatinor/gists{/gist_id}", "starred_url": "https://api.github.com/users/deatinor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deatinor/subscriptions", "organizations_url": "https://api.github.com/users/deatinor/orgs", "repos_url": "https://api.github.com/users/deatinor/repos", "events_url": "https://api.github.com/users/deatinor/events{/privacy}", "received_events_url": "https://api.github.com/users/deatinor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-28T14:55:12Z", "updated_at": "2020-01-16T19:11:52Z", "closed_at": "2020-01-16T19:11:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, my Luigi pipeline failed with this error.\r\n\r\nDo you have an idea what does it mean? I didn't find any documentation regarding this.\r\nI have no clue about what could have caused this error.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2773", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2773/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2773/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2773/events", "html_url": "https://github.com/spotify/luigi/issues/2773", "id": 483647669, "node_id": "MDU6SXNzdWU0ODM2NDc2Njk=", "number": 2773, "title": "Use official kubernetes-python client instead of pykube (no longer maintained)", "user": {"login": "petermorrow", "id": 9690235, "node_id": "MDQ6VXNlcjk2OTAyMzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9690235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petermorrow", "html_url": "https://github.com/petermorrow", "followers_url": "https://api.github.com/users/petermorrow/followers", "following_url": "https://api.github.com/users/petermorrow/following{/other_user}", "gists_url": "https://api.github.com/users/petermorrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/petermorrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petermorrow/subscriptions", "organizations_url": "https://api.github.com/users/petermorrow/orgs", "repos_url": "https://api.github.com/users/petermorrow/repos", "events_url": "https://api.github.com/users/petermorrow/events{/privacy}", "received_events_url": "https://api.github.com/users/petermorrow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-21T20:55:28Z", "updated_at": "2020-01-02T22:54:34Z", "closed_at": "2020-01-02T22:54:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [pykube](https://github.com/kelproject/pykube) project has been archived and is no longer maintained.\r\n\r\nCan the `luigi.contrib.kubernetes` module use the official [kubernetes-client](https://github.com/kubernetes-client/python) instead of pykube?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2771", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2771/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2771/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2771/events", "html_url": "https://github.com/spotify/luigi/issues/2771", "id": 482618374, "node_id": "MDU6SXNzdWU0ODI2MTgzNzQ=", "number": 2771, "title": "A Short task name with a small number of variables lead to failure when dict is used in TOML Config file", "user": {"login": "fullflu", "id": 9534465, "node_id": "MDQ6VXNlcjk1MzQ0NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9534465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fullflu", "html_url": "https://github.com/fullflu", "followers_url": "https://api.github.com/users/fullflu/followers", "following_url": "https://api.github.com/users/fullflu/following{/other_user}", "gists_url": "https://api.github.com/users/fullflu/gists{/gist_id}", "starred_url": "https://api.github.com/users/fullflu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fullflu/subscriptions", "organizations_url": "https://api.github.com/users/fullflu/orgs", "repos_url": "https://api.github.com/users/fullflu/repos", "events_url": "https://api.github.com/users/fullflu/events{/privacy}", "received_events_url": "https://api.github.com/users/fullflu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-20T02:57:31Z", "updated_at": "2020-01-01T12:04:03Z", "closed_at": "2020-01-01T12:04:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\n# Overview\r\n\r\nI found additional errors when I reproduced the issue #2538 .\r\nA Shorter task name with a small number of variables lead to failure (but outputs expected results).\r\nI hope the PR #2540 would consider this error @orsinium .\r\n\r\nTried five ways to parse dict (key-value pairs) on TOML config.\r\n\r\n- Case 1 (TestCase1): Parsing with luigi.Parameter inside luigi.Task .\r\n-> Task fails but somehow outputs expected results. This result is the same as #2538 .\r\n\r\n- Case 2 (TestCase2): Adding seven key-value pairs in the config file.\r\n-> Task success with warning and outputs expected results.\r\n\r\n- Case 3 (TC3): Using the same config file as Case 2 and the shorter task name (TC3).\r\n-> Task fails as with Case 1.\r\n\r\n- Case 4 (TestCase4): Adding six key-value pairs in the config file.\r\n-> Task fails as with Case 1.\r\n\r\n- Case 5 (TestCase5): Adding six key-value pairs in the config file with longer variable names.\r\n-> Task success with warning and outputs expected results.\r\n\r\n# Enrironment\r\n- python 3.6.1\r\n- luigi 2.8.8\r\n\r\n# Files\r\n## Luigi Task python script\r\n`testcase.py`\r\n```\r\nimport luigi\r\n\r\n\r\nclass TestCase1(luigi.Task):\r\n    text = luigi.Parameter()\r\n    dic = luigi.Parameter()\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget(\"data/case1.txt\")\r\n\r\n    def requires(self):\r\n        return None\r\n\r\n    def run(self):\r\n        with self.output().open('w') as out_file:\r\n            out_file.write('text: {}, dict: {}'.format(self.text, self.dic))\r\n\r\n\r\nclass TestCase2(luigi.Task):\r\n    dic_params = luigi.Parameter()\r\n    text = luigi.Parameter()\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget(\"data/case2.txt\")\r\n\r\n    def requires(self):\r\n        return None\r\n\r\n    def run(self):\r\n        with self.output().open('w') as out_file:\r\n            out_file.write('text: {}, dict: {}'.format(self.text, self.dic_params))\r\n\r\n\r\nclass TC3(luigi.Task):\r\n    dic_params = luigi.Parameter()\r\n    text = luigi.Parameter()\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget(\"data/case3.txt\")\r\n\r\n    def requires(self):\r\n        return None\r\n\r\n    def run(self):\r\n        with self.output().open('w') as out_file:\r\n            out_file.write('text: {}, dict: {}'.format(self.text, self.dic_params))\r\n\r\n\r\nclass TestCase4(luigi.Task):\r\n    dic_params = luigi.Parameter()\r\n    text = luigi.Parameter()\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget(\"data/case4.txt\")\r\n\r\n    def requires(self):\r\n        return None\r\n\r\n    def run(self):\r\n        with self.output().open('w') as out_file:\r\n            out_file.write('text: {}, dict: {}'.format(self.text, self.dic_params))\r\n\r\n\r\nclass TestCase5(luigi.Task):\r\n    dic_params = luigi.Parameter()\r\n    text = luigi.Parameter()\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget(\"data/case5.txt\")\r\n\r\n    def requires(self):\r\n        return None\r\n\r\n    def run(self):\r\n        with self.output().open('w') as out_file:\r\n            out_file.write('text: {}, dict: {}'.format(self.text, self.dic_params))\r\n\r\n```\r\n\r\n\r\n## TOML config file\r\ntestcase.toml\r\n```\r\n[TestCase1]\r\ntext = \"sample text\"\r\n\r\n[TestCase1.dic]\r\nkey1 = 'value1'\r\nkey2 = 'value2'\r\n\r\n\r\n[TestCase2]\r\ntext = \"sample text\"\r\n\r\n[TestCase2.dic_params]\r\nkey1 = 'value1'\r\nkey2 = 'value2'\r\nkey3 = 'value3'\r\nkey4 = 'value4'\r\nkey5 = 'value5'\r\nkey6 = 'value6'\r\nkey7 = 'value7'\r\nkey8 = 'value8'\r\nkey9 = 'value9'\r\n\r\n\r\n[TC3]\r\ntext = \"sample text\"\r\n\r\n[TC3.dic_params]\r\nkey1 = 'value1'\r\nkey2 = 'value2'\r\nkey3 = 'value3'\r\nkey4 = 'value4'\r\nkey5 = 'value5'\r\nkey6 = 'value6'\r\nkey7 = 'value7'\r\nkey8 = 'value8'\r\nkey9 = 'value9'\r\n\r\n[TestCase4]\r\ntext = \"sample text\"\r\n\r\n[TestCase4.dic_params]\r\nkey1 = 'value1'\r\nkey2 = 'value2'\r\nkey3 = 'value3'\r\nkey4 = 'value4'\r\nkey5 = 'value5'\r\nkey6 = 'value6'\r\nkey7 = 'value7'\r\nkey8 = 'value8'\r\n\r\n\r\n[TestCase5]\r\ntext = \"sample text\"\r\n\r\n[TestCase5.dic_params]\r\nkey1 = 'value1'\r\nkey2 = 'value2'\r\nkey3 = 'value3'\r\nkey4 = 'value4'\r\nkey5 = 'value5'\r\nkey6 = 'value6'\r\nkey7_long_long = 'valvalval7'\r\nkey8_long_long = 'valvalval8'\r\n```\r\n\r\n# Case 1\r\nParsing with luigi.Parameter inside luigi.Task .\r\n\r\n`PYTHONPATH='.' LUIGI_CONFIG_PARSER='toml' LUIGI_CONFIG_PATH='examples/testcase.toml' python3 -m luigi --module examples.testcase TestCase1 --local-scheduler`\r\n\r\n```\r\n******:luigi ************$ PYTHONPATH='.' LUIGI_CONFIG_PARSER='toml' LUIGI_CONFIG_PATH='examples/testcase.toml' python3 -m luigi --module examples.testcase TestCase1 --local-scheduler\r\n/Users/************/projects/luigi/luigi/parameter.py:286: UserWarning: Parameter \"dic\" with value \"{'key1': 'value1', 'key2': 'value2'}\" is not of type string.\r\n  warnings.warn('Parameter \"{}\" with value \"{}\" is not of type string.'.format(param_name, param_value))\r\nDEBUG: Checking if TestCase1(text=sample text, dic={'key1': 'value1', 'key2': 'value2'}) is complete\r\nINFO: Informed scheduler that task   TestCase1___key1____value1_sample_text_7b550efa06   has status   DONE\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nINFO: Worker Worker(salt=826253823, workers=1, host=******.local, username=************, pid=53688) was stopped. Shutting down Keep-Alive thread\r\nERROR: Uncaught exception in luigi\r\nTraceback (most recent call last):\r\n  File \"/Users/************/projects/luigi/luigi/retcodes.py\", line 75, in run_with_retcodes\r\n    worker = luigi.interface._run(argv).worker\r\n  File \"/Users/************/projects/luigi/luigi/interface.py\", line 211, in _run\r\n    return _schedule_and_run([cp.get_task_obj()], worker_scheduler_factory)\r\n  File \"/Users/************/projects/luigi/luigi/interface.py\", line 174, in _schedule_and_run\r\n    luigi_run_result = LuigiRunResult(worker, success)\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 79, in __init__\r\n    self.summary_text = _summary_wrap(_summary_format(summary_dict, worker))\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 414, in _summary_format\r\n    str_output += '{0}\\n'.format(_get_str(group_tasks[status], status in _PENDING_SUB_STATUSES))\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 204, in _get_str\r\n    params = _get_set_of_params(tasks)\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 247, in _get_set_of_params\r\n    params[param] = {getattr(task, param[0]) for task in tasks}\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 247, in <setcomp>\r\n    params[param] = {getattr(task, param[0]) for task in tasks}\r\nTypeError: unhashable type: 'dict'\r\n```\r\n\r\n# Case 2\r\nAdding seven key-value pairs in the config file.\r\n\r\n```\r\n******:luigi ************$ PYTHONPATH='.' LUIGI_CONFIG_PARSER='toml' LUIGI_CONFIG_PATH='examples/testcase.toml' python3 -m luigi --module examples.testcase TestCase2 --local-scheduler\r\n/Users/************/projects/luigi/luigi/parameter.py:286: UserWarning: Parameter \"dic_params\" with value \"{'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8', 'key9': 'value9'}\" is not of type string.\r\n  warnings.warn('Parameter \"{}\" with value \"{}\" is not of type string.'.format(param_name, param_value))\r\nDEBUG: Checking if TestCase2(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8', 'key9': 'value9'}, text=sample text) is complete\r\nINFO: Informed scheduler that task   TestCase2___key1____value1_sample_text_9e00d13a2c   has status   PENDING\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 1\r\nINFO: [pid 53756] Worker Worker(salt=815462199, workers=1, host=******.local, username=************, pid=53756) running   TestCase2(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8', 'key9': 'value9'}, text=sample text)\r\nINFO: [pid 53756] Worker Worker(salt=815462199, workers=1, host=******.local, username=************, pid=53756) done      TestCase2(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8', 'key9': 'value9'}, text=sample text)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   TestCase2___key1____value1_sample_text_9e00d13a2c   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nINFO: Worker Worker(salt=815462199, workers=1, host=******.local, username=************, pid=53756) was stopped. Shutting down Keep-Alive thread\r\nINFO: \r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 1 tasks of which:\r\n* 1 ran successfully:\r\n    - 1 TestCase2(...)\r\n\r\nThis progress looks :) because there were no failed tasks or missing dependencies\r\n\r\n===== Luigi Execution Summary =====\r\n```\r\n\r\n# Case 3\r\nUsing the same config file as Case 2 and the shorter task name (TC3).\r\n\r\n```\r\n******:luigi ************$ PYTHONPATH='.' LUIGI_CONFIG_PARSER='toml' LUIGI_CONFIG_PATH='examples/testcase.toml' python3 -m luigi --module examples.testcase TC3 --local-scheduler\r\n/Users/************/projects/luigi/luigi/parameter.py:286: UserWarning: Parameter \"dic_params\" with value \"{'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8', 'key9': 'value9'}\" is not of type string.\r\n  warnings.warn('Parameter \"{}\" with value \"{}\" is not of type string.'.format(param_name, param_value))\r\nDEBUG: Checking if TC3(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8', 'key9': 'value9'}, text=sample text) is complete\r\nINFO: Informed scheduler that task   TC3___key1____value1_sample_text_9e00d13a2c   has status   PENDING\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 1\r\nINFO: [pid 53822] Worker Worker(salt=216360697, workers=1, host=******.local, username=************, pid=53822) running   TC3(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8', 'key9': 'value9'}, text=sample text)\r\nINFO: [pid 53822] Worker Worker(salt=216360697, workers=1, host=******.local, username=************, pid=53822) done      TC3(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8', 'key9': 'value9'}, text=sample text)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   TC3___key1____value1_sample_text_9e00d13a2c   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nINFO: Worker Worker(salt=216360697, workers=1, host=******.local, username=************, pid=53822) was stopped. Shutting down Keep-Alive thread\r\nERROR: Uncaught exception in luigi\r\nTraceback (most recent call last):\r\n  File \"/Users/************/projects/luigi/luigi/retcodes.py\", line 75, in run_with_retcodes\r\n    worker = luigi.interface._run(argv).worker\r\n  File \"/Users/************/projects/luigi/luigi/interface.py\", line 211, in _run\r\n    return _schedule_and_run([cp.get_task_obj()], worker_scheduler_factory)\r\n  File \"/Users/************/projects/luigi/luigi/interface.py\", line 174, in _schedule_and_run\r\n    luigi_run_result = LuigiRunResult(worker, success)\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 79, in __init__\r\n    self.summary_text = _summary_wrap(_summary_format(summary_dict, worker))\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 414, in _summary_format\r\n    str_output += '{0}\\n'.format(_get_str(group_tasks[status], status in _PENDING_SUB_STATUSES))\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 204, in _get_str\r\n    params = _get_set_of_params(tasks)\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 247, in _get_set_of_params\r\n    params[param] = {getattr(task, param[0]) for task in tasks}\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 247, in <setcomp>\r\n    params[param] = {getattr(task, param[0]) for task in tasks}\r\nTypeError: unhashable type: 'dict'\r\n```\r\n\r\n# Case 4\r\nAdding six key-value pairs in the config file.\r\n\r\n```\r\n******:luigi ************$ PYTHONPATH='.' LUIGI_CONFIG_PARSER='toml' LUIGI_CONFIG_PATH='examples/testcase.toml' python3 -m luigi --module examples.testcase TestCase4 --local-scheduler\r\n/Users/************/projects/luigi/luigi/parameter.py:286: UserWarning: Parameter \"dic_params\" with value \"{'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8'}\" is not of type string.\r\n  warnings.warn('Parameter \"{}\" with value \"{}\" is not of type string.'.format(param_name, param_value))\r\nDEBUG: Checking if TestCase4(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8'}, text=sample text) is complete\r\nINFO: Informed scheduler that task   TestCase4___key1____value1_sample_text_576e01ac43   has status   PENDING\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 1\r\nINFO: [pid 53884] Worker Worker(salt=816352291, workers=1, host=******.local, username=************, pid=53884) running   TestCase4(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8'}, text=sample text)\r\nINFO: [pid 53884] Worker Worker(salt=816352291, workers=1, host=******.local, username=************, pid=53884) done      TestCase4(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7': 'value7', 'key8': 'value8'}, text=sample text)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   TestCase4___key1____value1_sample_text_576e01ac43   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nINFO: Worker Worker(salt=816352291, workers=1, host=******.local, username=************, pid=53884) was stopped. Shutting down Keep-Alive thread\r\nERROR: Uncaught exception in luigi\r\nTraceback (most recent call last):\r\n  File \"/Users/************/projects/luigi/luigi/retcodes.py\", line 75, in run_with_retcodes\r\n    worker = luigi.interface._run(argv).worker\r\n  File \"/Users/************/projects/luigi/luigi/interface.py\", line 211, in _run\r\n    return _schedule_and_run([cp.get_task_obj()], worker_scheduler_factory)\r\n  File \"/Users/************/projects/luigi/luigi/interface.py\", line 174, in _schedule_and_run\r\n    luigi_run_result = LuigiRunResult(worker, success)\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 79, in __init__\r\n    self.summary_text = _summary_wrap(_summary_format(summary_dict, worker))\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 414, in _summary_format\r\n    str_output += '{0}\\n'.format(_get_str(group_tasks[status], status in _PENDING_SUB_STATUSES))\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 204, in _get_str\r\n    params = _get_set_of_params(tasks)\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 247, in _get_set_of_params\r\n    params[param] = {getattr(task, param[0]) for task in tasks}\r\n  File \"/Users/************/projects/luigi/luigi/execution_summary.py\", line 247, in <setcomp>\r\n    params[param] = {getattr(task, param[0]) for task in tasks}\r\nTypeError: unhashable type: 'dict'\r\n```\r\n\r\n# Case 5\r\nAdding six key-value pairs in the config file with longer variable names.\r\n\r\n```\r\n******:luigi ************$ PYTHONPATH='.' LUIGI_CONFIG_PARSER='toml' LUIGI_CONFIG_PATH='examples/testcase.toml' python3 -m luigi --module examples.testcase TestCase5 --local-scheduler\r\n/Users/************/projects/luigi/luigi/parameter.py:286: UserWarning: Parameter \"dic_params\" with value \"{'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7_long_long': 'valvalval7', 'key8_long_long': 'valvalval8'}\" is not of type string.\r\n  warnings.warn('Parameter \"{}\" with value \"{}\" is not of type string.'.format(param_name, param_value))\r\nDEBUG: Checking if TestCase5(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7_long_long': 'valvalval7', 'key8_long_long': 'valvalval8'}, text=sample text) is complete\r\nINFO: Informed scheduler that task   TestCase5___key1____value1_sample_text_5bb767f0de   has status   PENDING\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 1\r\nINFO: [pid 53942] Worker Worker(salt=630670131, workers=1, host=******.local, username=************, pid=53942) running   TestCase5(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7_long_long': 'valvalval7', 'key8_long_long': 'valvalval8'}, text=sample text)\r\nINFO: [pid 53942] Worker Worker(salt=630670131, workers=1, host=******.local, username=************, pid=53942) done      TestCase5(dic_params={'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5', 'key6': 'value6', 'key7_long_long': 'valvalval7', 'key8_long_long': 'valvalval8'}, text=sample text)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   TestCase5___key1____value1_sample_text_5bb767f0de   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nINFO: Worker Worker(salt=630670131, workers=1, host=******.local, username=************, pid=53942) was stopped. Shutting down Keep-Alive thread\r\nINFO: \r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 1 tasks of which:\r\n* 1 ran successfully:\r\n    - 1 TestCase5(...)\r\n\r\nThis progress looks :) because there were no failed tasks or missing dependencies\r\n\r\n===== Luigi Execution Summary =====\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2769", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2769/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2769/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2769/events", "html_url": "https://github.com/spotify/luigi/issues/2769", "id": 482514807, "node_id": "MDU6SXNzdWU0ODI1MTQ4MDc=", "number": 2769, "title": "SQLServer incompatibility with task history: Operand type clash: datetime2 is incompatible with timestamp", "user": {"login": "shan224", "id": 12377799, "node_id": "MDQ6VXNlcjEyMzc3Nzk5", "avatar_url": "https://avatars2.githubusercontent.com/u/12377799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shan224", "html_url": "https://github.com/shan224", "followers_url": "https://api.github.com/users/shan224/followers", "following_url": "https://api.github.com/users/shan224/following{/other_user}", "gists_url": "https://api.github.com/users/shan224/gists{/gist_id}", "starred_url": "https://api.github.com/users/shan224/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shan224/subscriptions", "organizations_url": "https://api.github.com/users/shan224/orgs", "repos_url": "https://api.github.com/users/shan224/repos", "events_url": "https://api.github.com/users/shan224/events{/privacy}", "received_events_url": "https://api.github.com/users/shan224/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 277744463, "node_id": "MDU6TGFiZWwyNzc3NDQ0NjM=", "url": "https://api.github.com/repos/spotify/luigi/labels/Affects%20contrib%20(only)", "name": "Affects contrib (only)", "color": "bfd4f2", "default": false, "description": null}, {"id": 310671978, "node_id": "MDU6TGFiZWwzMTA2NzE5Nzg=", "url": "https://api.github.com/repos/spotify/luigi/labels/in%20progress", "name": "in progress", "color": "ededed", "default": false, "description": null}, {"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-19T20:35:27Z", "updated_at": "2020-04-09T09:19:49Z", "closed_at": "2020-04-09T09:19:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Error occurs when accessing the /history endpoint and when using pyodbc+mssql. \r\n\r\nRoot cause: \r\nThe TaskEvent class creates a column of type [TimeStamp.](https://github.com/spotify/luigi/blob/0f31f07ecc58acda864e14ae563484865ff3128a/luigi/db_task_history.py#L213) Which is incorrect for mssql because the [mssql implementation of TimeStamp](https://github.com/zzzeek/sqlalchemy/blob/7e0dfd2ad4141289a992adc65d2a6641f46dc82d/lib/sqlalchemy/dialects/mssql/base.py#L1039) is different from the SQL standard \ud83d\ude44 .\r\n\r\nSolution: \r\nThis column needs to be defined as of type DateTime2 if connecting to mssql\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2766", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2766/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2766/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2766/events", "html_url": "https://github.com/spotify/luigi/issues/2766", "id": 481576783, "node_id": "MDU6SXNzdWU0ODE1NzY3ODM=", "number": 2766, "title": "Unfulfilled External Tasks do not trigger error emails", "user": {"login": "dlstadther", "id": 7432199, "node_id": "MDQ6VXNlcjc0MzIxOTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7432199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlstadther", "html_url": "https://github.com/dlstadther", "followers_url": "https://api.github.com/users/dlstadther/followers", "following_url": "https://api.github.com/users/dlstadther/following{/other_user}", "gists_url": "https://api.github.com/users/dlstadther/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlstadther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlstadther/subscriptions", "organizations_url": "https://api.github.com/users/dlstadther/orgs", "repos_url": "https://api.github.com/users/dlstadther/repos", "events_url": "https://api.github.com/users/dlstadther/events{/privacy}", "received_events_url": "https://api.github.com/users/dlstadther/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-16T11:58:18Z", "updated_at": "2020-01-09T13:17:43Z", "closed_at": "2020-01-09T13:17:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Incomplete External Tasks do not cause error emails due to their lack of completeness being defined as a WARNING.\r\n\r\nhttps://github.com/spotify/luigi/blob/e2228418eec60b68ca09a30c878ab26413846847/luigi/worker.py#L830-L837\r\n\r\nI would propose that this should be updated to an Error.\r\n\r\nFor automated pipelines where you expect to have received an external dependency and it doesn't exist, that's an error.\r\n\r\nAs a warning, when this event occurs it acts as a silent error. The pipeline will \"fail\" due to inability to schedule upstream tasks, but no error emails are sent. Requires digging through logs to find this warning for missing dependency.\r\n\r\n\r\n\r\nI've been unable to find any discussion about the motivation for leaving it as a warning. This line's origin dates back to [early 2012](https://github.com/spotify/luigi/commit/cac259af401a2db13c7d4c5bf9ba14fa5de0963c) with only languages changes over time.\r\n\r\nThought?\r\n\r\nI'm happy to submit that PR\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2765", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2765/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2765/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2765/events", "html_url": "https://github.com/spotify/luigi/issues/2765", "id": 480977876, "node_id": "MDU6SXNzdWU0ODA5Nzc4NzY=", "number": 2765, "title": "`CONTRIBUTING.rst` is outdated and incorrect.", "user": {"login": "cowlinator", "id": 4963190, "node_id": "MDQ6VXNlcjQ5NjMxOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4963190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cowlinator", "html_url": "https://github.com/cowlinator", "followers_url": "https://api.github.com/users/cowlinator/followers", "following_url": "https://api.github.com/users/cowlinator/following{/other_user}", "gists_url": "https://api.github.com/users/cowlinator/gists{/gist_id}", "starred_url": "https://api.github.com/users/cowlinator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cowlinator/subscriptions", "organizations_url": "https://api.github.com/users/cowlinator/orgs", "repos_url": "https://api.github.com/users/cowlinator/repos", "events_url": "https://api.github.com/users/cowlinator/events{/privacy}", "received_events_url": "https://api.github.com/users/cowlinator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-15T03:27:15Z", "updated_at": "2019-08-15T10:54:22Z", "closed_at": "2019-08-15T10:54:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "`CONTRIBUTING.rst` is outdated and incorrect.\r\nThe example tox command `tox -e py27-nonhdfs` does not work because the `nonhdfs` tox environment does not exist.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2763", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2763/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2763/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2763/events", "html_url": "https://github.com/spotify/luigi/issues/2763", "id": 480236096, "node_id": "MDU6SXNzdWU0ODAyMzYwOTY=", "number": 2763, "title": "API documentation, for none python implementations?", "user": {"login": "Skabunkel", "id": 9131566, "node_id": "MDQ6VXNlcjkxMzE1NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9131566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skabunkel", "html_url": "https://github.com/Skabunkel", "followers_url": "https://api.github.com/users/Skabunkel/followers", "following_url": "https://api.github.com/users/Skabunkel/following{/other_user}", "gists_url": "https://api.github.com/users/Skabunkel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skabunkel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skabunkel/subscriptions", "organizations_url": "https://api.github.com/users/Skabunkel/orgs", "repos_url": "https://api.github.com/users/Skabunkel/repos", "events_url": "https://api.github.com/users/Skabunkel/events{/privacy}", "received_events_url": "https://api.github.com/users/Skabunkel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-13T15:54:51Z", "updated_at": "2019-08-17T01:18:04Z", "closed_at": "2019-08-17T01:18:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I didn't find any expensive API documentation that detailed functions and input variables etc, i suppose this is by design? \r\n\r\nBased on what i have read of the source code(more like glancing, through a drinking straw) one would be able to use any language to interface with the luigi scheduler, or am i mistaken?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2757", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2757/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2757/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2757/events", "html_url": "https://github.com/spotify/luigi/issues/2757", "id": 479035135, "node_id": "MDU6SXNzdWU0NzkwMzUxMzU=", "number": 2757, "title": "range_test and sge_test not picked up by tox due to being executable", "user": {"login": "lnsndn", "id": 46681127, "node_id": "MDQ6VXNlcjQ2NjgxMTI3", "avatar_url": "https://avatars2.githubusercontent.com/u/46681127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnsndn", "html_url": "https://github.com/lnsndn", "followers_url": "https://api.github.com/users/lnsndn/followers", "following_url": "https://api.github.com/users/lnsndn/following{/other_user}", "gists_url": "https://api.github.com/users/lnsndn/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnsndn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnsndn/subscriptions", "organizations_url": "https://api.github.com/users/lnsndn/orgs", "repos_url": "https://api.github.com/users/lnsndn/repos", "events_url": "https://api.github.com/users/lnsndn/events{/privacy}", "received_events_url": "https://api.github.com/users/lnsndn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-09T15:07:35Z", "updated_at": "2019-09-23T18:59:48Z", "closed_at": "2019-08-13T11:48:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While developing some new functionality in `luigi.tools.range` I ran the `range_test.py` file manually and noticed that it had multiple failing tests that were unrelated to my changes, even on a clean master with no changes at all. Strangely, tox goes through and the build passes anyway. This happens because _the whole file is ignored_. The reason the file is ignored is because it is set as executable (755) which apparently causes tox to ignore it.\r\n\r\n**Steps to reproduce**\r\n\r\n1. Run complete test suite as usual and watch everything go through: `tox`\r\n2. Run only the `range_test.py` file and it has multiple issues, FAILED (failures=2, errors=6): `cd test && python -m unittest range_test`\r\n3. Change file permissions: `chmod 644 range_test.py`\r\n4. Run tox suite again and this time the file is picked up, failing with the same problems:\r\n\r\n```\r\n======================================================================\r\nERROR: Verify that you can still programmatically set of param as string\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 1385, in test_old_month_instantiation\r\n    self.assertEqual(expected_task, list(range_task._requires())[0])\r\nIndexError: list index out of range\r\n\r\n======================================================================\r\nERROR: test_param_name (range_test.MonthInstantiationTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 1423, in test_param_name\r\n    self.assertEqual(expected_task, list(range_task._requires())[0])\r\nIndexError: list index out of range\r\n\r\n======================================================================\r\nERROR: test_param_name_with_inferred_fs (range_test.MonthInstantiationTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 1439, in test_param_name_with_inferred_fs\r\n    self.assertEqual(expected_task, list(range_task._requires())[0])\r\nIndexError: list index out of range\r\n\r\n======================================================================\r\nFAIL: Verify that you can still use Range through CLI\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 1407, in test_month_cli_instantiation\r\n    self.assertEqual(MyTask(month_param=datetime.date(1934, 12, 1)).secret, 'yay')\r\nAssertionError: 'some-value-to-sooth-python-linters' != 'yay'\r\n-------------------- >> begin captured logging << --------------------\r\nluigi: INFO: logging already configured\r\nluigi.scheduler: DEBUG: Starting pruning of task graph\r\nluigi.scheduler: DEBUG: Done pruning task graph\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n======================================================================\r\nFAIL: test_of_param_commandline (range_test.MonthInstantiationTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 1481, in test_of_param_commandline\r\n    self.assertEqual(MyTask.state, ('bar', 5))\r\nAssertionError: Tuples differ: (None, None) != ('bar', 5)\r\n\r\nFirst differing element 0:\r\nNone\r\n'bar'\r\n\r\n- (None, None)\r\n+ ('bar', 5)\r\n\r\n======================================================================\r\nERROR: test_non_dividing_interval (range_test.RangeByMinutesBaseTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 626, in test_non_dividing_interval\r\n    self.assertRaises(luigi.parameter.ParameterException, task.requires)\r\n  File \"/usr/lib/python3.6/unittest/case.py\", line 733, in assertRaises\r\n    return context.handle('assertRaises', args, kwargs)\r\n  File \"/usr/lib/python3.6/unittest/case.py\", line 178, in handle\r\n    callable_obj(*args, **kwargs)\r\n  File \"/home/lena/virtualenvs/luigi/lib/python3.6/site-packages/luigi-2.8.7-py3.6.egg/luigi/tools/range.py\", line 240, in requires\r\n    self._emit_metrics(missing_datetimes, finite_start, finite_stop)\r\n  File \"/home/lena/virtualenvs/luigi/lib/python3.6/site-packages/luigi-2.8.7-py3.6.egg/luigi/tools/range.py\", line 177, in _emit_metrics\r\n    delay_in_jobs = len(datetimes) - datetimes.index(missing_datetimes[0]) if datetimes and missing_datetimes else 0\r\nValueError: datetime.datetime(2016, 3, 31, 0, 0) is not in list\r\n\r\n======================================================================\r\nERROR: test_bulk_complete_correctly_interfaced (range_test.RangeByMinutesTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 1463, in test_bulk_complete_correctly_interfaced\r\n    actual = [str(t) for t in task.requires()]\r\n  File \"/home/lena/virtualenvs/luigi/lib/python3.6/site-packages/luigi-2.8.7-py3.6.egg/luigi/tools/range.py\", line 233, in requires\r\n    missing_datetimes = sorted(self._missing_datetimes(datetimes))\r\n  File \"/home/lena/virtualenvs/luigi/lib/python3.6/site-packages/luigi-2.8.7-py3.6.egg/luigi/tools/range.py\", line 272, in _missing_datetimes\r\n    return self.missing_datetimes(finite_datetimes)\r\n  File \"/home/lena/virtualenvs/luigi/lib/python3.6/site-packages/luigi-2.8.7-py3.6.egg/luigi/tools/range.py\", line 798, in missing_datetimes\r\n    complete_parameters = self.of.bulk_complete.__func__(cls_with_params, map(self.datetime_to_parameter, finite_datetimes))\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 1447, in bulk_complete\r\n    return parameter_tuples[:-2]\r\nTypeError: 'map' object is not subscriptable\r\n\r\n======================================================================\r\nERROR: test_bulk_complete_of_params (range_test.RangeByMinutesTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 1493, in test_bulk_complete_of_params\r\n    actual = [str(t) for t in task.requires()]\r\n  File \"/home/lena/virtualenvs/luigi/lib/python3.6/site-packages/luigi-2.8.7-py3.6.egg/luigi/tools/range.py\", line 233, in requires\r\n    missing_datetimes = sorted(self._missing_datetimes(datetimes))\r\n  File \"/home/lena/virtualenvs/luigi/lib/python3.6/site-packages/luigi-2.8.7-py3.6.egg/luigi/tools/range.py\", line 272, in _missing_datetimes\r\n    return self.missing_datetimes(finite_datetimes)\r\n  File \"/home/lena/virtualenvs/luigi/lib/python3.6/site-packages/luigi-2.8.7-py3.6.egg/luigi/tools/range.py\", line 798, in missing_datetimes\r\n    complete_parameters = self.of.bulk_complete.__func__(cls_with_params, map(self.datetime_to_parameter, finite_datetimes))\r\n  File \"/home/lena/projects/github/spotify/luigi/test/range_test.py\", line 1476, in bulk_complete\r\n    return parameter_tuples[:-2]\r\nTypeError: 'map' object is not subscriptable\r\n``` \r\n\r\nThe only executable files I could find were `range_test.py` and `contrib/sge_test.py`.\r\n\r\n**Solution**\r\n\r\nWe need to chmod the concerned files to match the others (644) and fix the failing tests. If we can't fix them right now we need to temporarily ignore the individual tests and create new Github issues. I am in progress of doing this but wanted to report the error in case anyone else encounters the problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2756", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2756/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2756/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2756/events", "html_url": "https://github.com/spotify/luigi/issues/2756", "id": 479031665, "node_id": "MDU6SXNzdWU0NzkwMzE2NjU=", "number": 2756, "title": "Warnings conflict in initialization", "user": {"login": "dyens", "id": 1698958, "node_id": "MDQ6VXNlcjE2OTg5NTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1698958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dyens", "html_url": "https://github.com/dyens", "followers_url": "https://api.github.com/users/dyens/followers", "following_url": "https://api.github.com/users/dyens/following{/other_user}", "gists_url": "https://api.github.com/users/dyens/gists{/gist_id}", "starred_url": "https://api.github.com/users/dyens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dyens/subscriptions", "organizations_url": "https://api.github.com/users/dyens/orgs", "repos_url": "https://api.github.com/users/dyens/repos", "events_url": "https://api.github.com/users/dyens/events{/privacy}", "received_events_url": "https://api.github.com/users/dyens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-09T15:00:13Z", "updated_at": "2019-12-02T10:30:11Z", "closed_at": "2019-12-02T10:30:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nTwo deprecaction warnings conflicts to each other.\r\n\r\nSimple to reproduce:\r\n\r\n```python\r\n# DeprecationWarning ignored by default, unless triggered by code in __main__\r\nimport warnings \r\nwarnings.simplefilter('default')\r\nimport luigi\r\n```\r\n\r\nAfter running this code a have a warning:\r\n\r\n```\r\nDeprecationWarning:\r\nAutoloading range tasks by default has been deprecated and will be removed in a future version. \r\nTo get the behavior now add an option to luigi.cfg:\r\n\r\n          [core]\r\n            autoload-range: false\r\n```\r\n\r\nOk, i  create luigi.cfg in root:\r\n\r\n```\r\n\u25b6 /bin/cat luigi.cfg\r\n[core]\r\n  autoload-range: false\r\n```\r\n\r\nRun script again. And i have another Warning:\r\n\r\n```\r\nDeprecationWarning: Configuration [core] autoload-range (with dashes) should be avoided. Please use underscores: autoload_range.\r\n  warnings.warn(warn, DeprecationWarning)\r\n```\r\nOhh. Ok, i change my config:\r\n```\r\n\u25b6 /bin/cat luigi.cfg\r\n[core]\r\n  autoload_range: false\r\n```\r\nBut now i have again previous DeprecationWarning...\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2753", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2753/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2753/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2753/events", "html_url": "https://github.com/spotify/luigi/issues/2753", "id": 473867131, "node_id": "MDU6SXNzdWU0NzM4NjcxMzE=", "number": 2753, "title": "RangeHourly not behaving correctly outside GMT timezone", "user": {"login": "chunleng", "id": 2003639, "node_id": "MDQ6VXNlcjIwMDM2Mzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2003639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chunleng", "html_url": "https://github.com/chunleng", "followers_url": "https://api.github.com/users/chunleng/followers", "following_url": "https://api.github.com/users/chunleng/following{/other_user}", "gists_url": "https://api.github.com/users/chunleng/gists{/gist_id}", "starred_url": "https://api.github.com/users/chunleng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chunleng/subscriptions", "organizations_url": "https://api.github.com/users/chunleng/orgs", "repos_url": "https://api.github.com/users/chunleng/repos", "events_url": "https://api.github.com/users/chunleng/events{/privacy}", "received_events_url": "https://api.github.com/users/chunleng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-29T06:09:57Z", "updated_at": "2019-12-10T09:58:48Z", "closed_at": "2019-12-10T09:58:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nI have created a small program to illustrate the scenario.\r\n\r\n```python\r\nimport luigi\r\nimport datetime\r\n\r\nclass Test(luigi.Task):\r\n\r\n    hour = luigi.DateHourParameter()\r\n\r\n    def run(self):\r\n        with self.output().open('w') as f:\r\n            f.write('Test')\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget(self.hour.strftime('out/%Y-%m-%d-%H.out'))\r\n```\r\n\r\nThen I try to run it\r\n\r\n```\r\n$ date\r\nMon Jul 29 15:01:45 JST 2019\r\n\r\n$ PYTHONPATH=. luigi --module test RangeHourly --of Test --start=2019-07-29T00 --stop=2019-07-29T15\r\n/Users/chunlenglim/test/luigi/.env/lib/python3.6/site-packages/luigi/parameter.py:286: UserWarning: Parameter \"param_name\" with value \"None\" is not of type string.\r\n  warnings.warn('Parameter \"{}\" with value \"{}\" is not of type string.'.format(param_name, param_value))\r\nDEBUG: Checking if RangeHourly(of=Test, of_params={}, reverse=False, task_limit=50, now=None, param_name=None, start=2019-07-29T00, stop=2019-07-29T15, hours_back=2400, hours_forward=0) is complete\r\nDEBUG: Actually checking if range [2019-07-29T00, 2019-07-29T06] of Test is complete\r\nDEBUG: Listing out\r\nDEBUG: 1 LocalFileSystem listings took 0.000268 s to return 0 items\r\nDEBUG: Range [2019-07-29T00, 2019-07-29T06] lacked 7 of expected 7 Test instances\r\nDEBUG: Requiring 7 missing Test instances in range [2019-07-29T00, 2019-07-29T06]\r\nDEBUG: Checking if Test(hour=2019-07-29T00) is complete\r\nDEBUG: Checking if Test(hour=2019-07-29T01) is complete\r\nDEBUG: Checking if Test(hour=2019-07-29T02) is complete\r\nDEBUG: Checking if Test(hour=2019-07-29T03) is complete\r\nDEBUG: Checking if Test(hour=2019-07-29T04) is complete\r\nDEBUG: Checking if Test(hour=2019-07-29T05) is complete\r\nDEBUG: Checking if Test(hour=2019-07-29T06) is complete\r\nINFO: Informed scheduler that task   RangeHourly_2400_0_None_7d939e4a80   has status   PENDING\r\nINFO: Informed scheduler that task   Test_2019_07_29T06_ba5e66148a   has status   PENDING\r\nINFO: Informed scheduler that task   Test_2019_07_29T05_2440c7534f   has status   PENDING\r\nINFO: Informed scheduler that task   Test_2019_07_29T04_25c0a1855d   has status   PENDING\r\nINFO: Informed scheduler that task   Test_2019_07_29T03_1cfa9dc7aa   has status   PENDING\r\nINFO: Informed scheduler that task   Test_2019_07_29T02_6a555bf794   has status   PENDING\r\nINFO: Informed scheduler that task   Test_2019_07_29T01_3cc38e12e0   has status   PENDING                                                                                                                                              INFO: Informed scheduler that task   Test_2019_07_29T00_95963f8f96   has status   PENDING\r\nINFO: Done scheduling tasks                                                                                                                                                                                                            INFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 8\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) running   Test(hour=2019-07-29T06)\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) done      Test(hour=2019-07-29T06)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   Test_2019_07_29T06_ba5e66148a   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 7\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) running   Test(hour=2019-07-29T01)\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) done      Test(hour=2019-07-29T01)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   Test_2019_07_29T01_3cc38e12e0   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 6\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) running   Test(hour=2019-07-29T04)\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) done      Test(hour=2019-07-29T04)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   Test_2019_07_29T04_25c0a1855d   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 5\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) running   Test(hour=2019-07-29T02)\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) done      Test(hour=2019-07-29T02)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   Test_2019_07_29T02_6a555bf794   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 4\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) running   Test(hour=2019-07-29T03)\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) done      Test(hour=2019-07-29T03)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   Test_2019_07_29T03_1cfa9dc7aa   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 3\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) running   Test(hour=2019-07-29T00)\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) done      Test(hour=2019-07-29T00)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   Test_2019_07_29T00_95963f8f96   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 2\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) running   Test(hour=2019-07-29T05)\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) done      Test(hour=2019-07-29T05)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   Test_2019_07_29T05_2440c7534f   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Pending tasks: 1\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) running   RangeHourly(of=Test, of_params={}, reverse=False, task_limit=50, now=None, param_name=None, start=2019-07-29T00, stop=2019-07-29T15, hours_back=2400, hours_forward=0)\r\nINFO: [pid 48746] Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) done      RangeHourly(of=Test, of_params={}, reverse=False, task_limit=50, now=None, param_name=None, start=2019-07-29T00, stop=2019-07-29T15, hours_back=2400, hours_forward=0)\r\nDEBUG: 1 running tasks, waiting for next task to finish\r\nINFO: Informed scheduler that task   RangeHourly_2400_0_None_7d939e4a80   has status   DONE\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nINFO: Worker Worker(salt=068564994, workers=1, host=Chuns-MacBook-Pro.local, username=chunlenglim, pid=48746) was stopped. Shutting down Keep-Alive thread\r\nINFO:\r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 8 tasks of which:\r\n* 8 ran successfully:\r\n    - 1 RangeHourly(...)\r\n    - 7 Test(hour=2019-07-29T00...2019-07-29T06)\r\n\r\nThis progress looks :) because there were no failed tasks or missing dependencies\r\n\r\n===== Luigi Execution Summary =====\r\n```\r\n\r\n\r\n### Execution Output\r\n\r\n```\r\n$ ls -1 out\r\n2019-07-29-00.out\r\n...\r\n2019-07-29-06.out\r\n```\r\n\r\n### Expected Output\r\n\r\n```\r\n$ ls -1 out\r\n2019-07-29-00.out\r\n...\r\n2019-07-29-15.out\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2752", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2752/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2752/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2752/events", "html_url": "https://github.com/spotify/luigi/issues/2752", "id": 473866726, "node_id": "MDU6SXNzdWU0NzM4NjY3MjY=", "number": 2752, "title": "current working directory not in sys.path causing \"module not found\" errors", "user": {"login": "jocassid", "id": 5742458, "node_id": "MDQ6VXNlcjU3NDI0NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5742458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jocassid", "html_url": "https://github.com/jocassid", "followers_url": "https://api.github.com/users/jocassid/followers", "following_url": "https://api.github.com/users/jocassid/following{/other_user}", "gists_url": "https://api.github.com/users/jocassid/gists{/gist_id}", "starred_url": "https://api.github.com/users/jocassid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jocassid/subscriptions", "organizations_url": "https://api.github.com/users/jocassid/orgs", "repos_url": "https://api.github.com/users/jocassid/repos", "events_url": "https://api.github.com/users/jocassid/events{/privacy}", "received_events_url": "https://api.github.com/users/jocassid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-29T06:08:29Z", "updated_at": "2020-05-07T04:51:14Z", "closed_at": "2019-12-14T21:03:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just found out about luigi this afternoon and started teaching myself how to use it.  \r\n\r\nI set up an environment in `/home/john/Practice/luigi/`.  I created a hello_luigi.py based on an example in the documentation in `/home/john/Practice/luigi` While in `/home/john/Practice/luigi` I ran the command `luigi --local-scheduler --module hello_luigi MyTask --x 1 --y 2` and got a \"hello_luigi\" module not found error.  I modified  `/home/john/Practice/luigi/bin/luigi` to print the contents of `sys.path` and found out that whereas the `bin` directory was on the path it's parent (and my current working directory) `/home/john/Practice/luigi` was not.  By adding a symbolic in bin using the command `ln -s ../hello_luigi.py hello_luigi.py` I could get it to run.  This experiment with the symbolic link led the way to my workaround which is to add the following lines to  `/home/john/Practice/luigi/bin/luigi` just under `if __name__ == '__main__`\r\n\r\n```\r\n    cwd = getcwd()\r\n    if cwd not in sys.path:\r\n        sys.path.insert(0, cwd)\r\n```\r\nI see a `bin/luigi` file in the source code, but it differs from what I'm seeing.  I'm guessing this file is altered by the setup process.  The need for this hack was unexpected.  Skimming through the documentation I didn't see anything as to how a luigi project directory should be set up (i.e. where do the modules with my tasks go?).  Is there some `luigi.cfg` option that fixes this problem? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2750", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2750/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2750/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2750/events", "html_url": "https://github.com/spotify/luigi/issues/2750", "id": 472562203, "node_id": "MDU6SXNzdWU0NzI1NjIyMDM=", "number": 2750, "title": "Luigi atomic write fails with pandas.DataFrame.to_pickle() in pandas 0.25.0", "user": {"login": "charlesoblack", "id": 18634426, "node_id": "MDQ6VXNlcjE4NjM0NDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/18634426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlesoblack", "html_url": "https://github.com/charlesoblack", "followers_url": "https://api.github.com/users/charlesoblack/followers", "following_url": "https://api.github.com/users/charlesoblack/following{/other_user}", "gists_url": "https://api.github.com/users/charlesoblack/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlesoblack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlesoblack/subscriptions", "organizations_url": "https://api.github.com/users/charlesoblack/orgs", "repos_url": "https://api.github.com/users/charlesoblack/repos", "events_url": "https://api.github.com/users/charlesoblack/events{/privacy}", "received_events_url": "https://api.github.com/users/charlesoblack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-24T22:03:58Z", "updated_at": "2019-07-26T15:00:23Z", "closed_at": "2019-07-26T15:00:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nIt seems in pandas 0.25.0 that when `to_pickle()` is called, it closes the file before Luigi does. This throws the following error:\r\n\r\n    Traceback (most recent call last):\r\n      File \"c:\\python37\\lib\\site-packages\\luigi\\worker.py\", line 199, in run\r\n        new_deps = self._run_get_new_deps()\r\n      File \"c:\\python37\\lib\\site-packages\\luigi\\worker.py\", line 141, in _run_get_new_deps\r\n        task_gen = self.task.run()\r\n      File \"C:\\git\\chess-pipeline\\chess_pipeline.py\", line 81, in run\r\n        df.to_pickle(f, compression=None)\r\n      File \"c:\\python37\\lib\\site-packages\\luigi\\target.py\", line 349, in __exit__\r\n        return super(AtomicLocalFile, self).__exit__(exc_type, exc, traceback)\r\n      File \"c:\\python37\\lib\\site-packages\\luigi\\target.py\", line 329, in close\r\n        self.move_to_final_destination()\r\n      File \"c:\\python37\\lib\\site-packages\\luigi\\local_target.py\", line 40, in move_to_final_destination\r\n        os.rename(self.tmp_path, self.path)\r\n    FileNotFoundError: [WinError 2] The system cannot find the file specified: 'C:\\\\Users\\\\abcd/Temp/luigi/raw-games.pckl-luigi-tmp-910384860' -> 'C:\\\\Users\\\\abcd/Temp/luigi/raw-games.pckl'\r\n\r\nSample Tasks:\r\n\r\n    class SampleTask(Task):\r\n    \r\n        def output(self):\r\n            return LocalTarget('testfile.pckl', format=Nop)\r\n    \r\n        def run(self):\r\n            from pandas import DataFrame\r\n    \r\n            self.output().makedirs()\r\n    \r\n            df = DataFrame()\r\n    \r\n            with self.output().open('w') as db:\r\n                df.to_pickle(db, compression=None)\r\n    \r\n    \r\n    @requires(SampleTask)\r\n    class SampleTask2(Task):\r\n    \r\n        def run(self):\r\n            from pandas import read_pickle\r\n    \r\n            with self.input().open('r') as f:\r\n                df = read_pickle(f, compression=None)\r\n\r\nThe above works in pandas 0.24.2 but not 0.25.0, all other dependencies being equal. I suspect the line that affects it is [this one](https://github.com/pandas-dev/pandas/blob/3b96ada3a17f5fcc8c32a238457075ec4dd8433a/pandas/io/pickle.py#L78). Any ideas on how to fix this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2749", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2749/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2749/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2749/events", "html_url": "https://github.com/spotify/luigi/issues/2749", "id": 471734414, "node_id": "MDU6SXNzdWU0NzE3MzQ0MTQ=", "number": 2749, "title": "TypeError because task.retry is None", "user": {"login": "BenBlaisdell", "id": 5452486, "node_id": "MDQ6VXNlcjU0NTI0ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5452486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenBlaisdell", "html_url": "https://github.com/BenBlaisdell", "followers_url": "https://api.github.com/users/BenBlaisdell/followers", "following_url": "https://api.github.com/users/BenBlaisdell/following{/other_user}", "gists_url": "https://api.github.com/users/BenBlaisdell/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenBlaisdell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenBlaisdell/subscriptions", "organizations_url": "https://api.github.com/users/BenBlaisdell/orgs", "repos_url": "https://api.github.com/users/BenBlaisdell/repos", "events_url": "https://api.github.com/users/BenBlaisdell/events{/privacy}", "received_events_url": "https://api.github.com/users/BenBlaisdell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-23T14:34:16Z", "updated_at": "2019-12-04T15:42:24Z", "closed_at": "2019-12-04T15:42:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "This issue has popped up twice for my org in 2 different environments, but I'm not sure how it's getting in this state.\r\n\r\nIt appears that `task.retry` is `None` in the state pickle.\r\n\r\n```\r\n2019-07-23 14:12:23,723 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T11300_347472d5b5'\r\n2019-07-23 14:12:23,723 luigi.scheduler INFO     Removing task 'JobB_530b2afff0'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobC_79d10cad66'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T18300_4978b6fc52'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobB_9e8056c664'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobC_485505f19d'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T19000_3ac92efe3c'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobC_0cd4a17227'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobB_6e2688e055'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T20300_c34dde6ea0'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobC_39bb92e304'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobB_0a559bef01'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T21300_3bffc126d4'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobB_f3519a299f'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobC_715cfc8f19'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T22000_b6b1cce74f'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobC_e9c261dcb9'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobB_3636409089'\r\n2019-07-23 14:12:23,724 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T22300_27bc9ba6ba'\r\n2019-07-23 14:12:23,725 luigi.scheduler INFO     Removing task 'JobC_ddf20d05ef'\r\n2019-07-23 14:12:23,725 luigi.scheduler INFO     Removing task 'JobB_3bbf98418b'\r\n2019-07-23 14:12:23,725 luigi.scheduler INFO     Removing task 'JobD_2019_06_29T01300_40fe1c0cdb'\r\n2019-07-23 14:12:23,725 luigi.scheduler INFO     Removing task 'JobE_67c708f998'\r\n2019-07-23 14:12:23,725 luigi.scheduler INFO     Removing task 'JobF_ee434e315f'\r\n2019-07-23 14:12:23,725 luigi.scheduler INFO     Removing task 'JobG_ee434e315f'\r\n2019-07-23 14:12:23,725 luigi.scheduler INFO     Removing task 'JobH_ee434e315f'\r\n2019-07-23 14:12:23,725 tornado.application ERROR    Uncaught exception GET /api/worker_list?data=%7B%7D (10.10.143.47)\r\nHTTPServerRequest(protocol='http', host='my-luigi-instance.com', method='GET', uri='/api/worker_list?data=%7B%7D', version='HTTP/1.1', remote_ip='10.10.143.47', headers={'Host': 'my-luigi-instance.com', 'X-Request-Id': '0b410f7bd8c39a9ab2cb00b538dfb9d2', 'X-Real-Ip': '38.122.48.218', 'X-Forwarded-For': '38.122.48.218', 'X-Forwarded-Host': 'my-luigi-instance.com', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https', 'X-Original-Uri': '/api/worker_list?data=%7B%7D', 'X-Scheme': 'https', 'Accept': 'application/json, text/javascript, */*; q=0.01', 'X-Requested-With': 'XMLHttpRequest', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36', 'Referer': 'https://my-luigi-instance.com/static/visualiser/index.html', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'en-US,en;q=0.9'})\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/tornado/web.py\", line 1510, in _execute\r\n    result = method(*self.path_args, **self.path_kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/server.py\", line 121, in get\r\n    result = getattr(self._scheduler, method)(**arguments)\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/scheduler.py\", line 1461, in worker_list\r\n    self.prune()\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/scheduler.py\", line 730, in prune\r\n    self._prune_tasks()\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/scheduler.py\", line 749, in _prune_tasks\r\n    self._state.update_status(task, self._config)\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/scheduler.py\", line 623, in update_status\r\n    if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\r\nTypeError: '<' not supported between instances of 'NoneType' and 'float'\r\n2019-07-23 14:12:23,725 tornado.access  ERROR    500 GET /api/worker_list?data=%7B%7D (10.10.143.47) 3.11ms\r\n2019-07-23 14:12:23,750 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T11300_347472d5b5'\r\n2019-07-23 14:12:23,750 luigi.scheduler INFO     Removing task 'JobB_530b2afff0'\r\n2019-07-23 14:12:23,750 luigi.scheduler INFO     Removing task 'JobC_79d10cad66'\r\n2019-07-23 14:12:23,750 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T18300_4978b6fc52'\r\n2019-07-23 14:12:23,750 luigi.scheduler INFO     Removing task 'JobB_9e8056c664'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobC_485505f19d'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T19000_3ac92efe3c'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobC_0cd4a17227'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobB_6e2688e055'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T20300_c34dde6ea0'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobC_39bb92e304'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobB_0a559bef01'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T21300_3bffc126d4'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobB_f3519a299f'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobC_715cfc8f19'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T22000_b6b1cce74f'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobC_e9c261dcb9'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobB_3636409089'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobA__2019_07_22T22300_27bc9ba6ba'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobC_ddf20d05ef'\r\n2019-07-23 14:12:23,751 luigi.scheduler INFO     Removing task 'JobB_3bbf98418b'\r\n2019-07-23 14:12:23,752 luigi.scheduler INFO     Removing task 'JobD_2019_06_29T01300_40fe1c0cdb'\r\n2019-07-23 14:12:23,752 luigi.scheduler INFO     Removing task 'JobE_67c708f998'\r\n2019-07-23 14:12:23,752 luigi.scheduler INFO     Removing task 'JobF_ee434e315f'\r\n2019-07-23 14:12:23,752 luigi.scheduler INFO     Removing task 'JobG_ee434e315f'\r\n2019-07-23 14:12:23,752 luigi.scheduler INFO     Removing task 'JobH_ee434e315f'\r\n2019-07-23 14:12:23,752 tornado.application ERROR    Uncaught exception GET /api/task_list?data=%7B%22status%22%3A%22RUNNING%22%2C%22upstream_status%22%3A%22%22%2C%22search%22%3A%22%22%7D (10.10.143.47)\r\nHTTPServerRequest(protocol='http', host='my-luigi-instance.com', method='GET', uri='/api/task_list?data=%7B%22status%22%3A%22RUNNING%22%2C%22upstream_status%22%3A%22%22%2C%22search%22%3A%22%22%7D', version='HTTP/1.1', remote_ip='10.10.143.47', headers={'Host': 'my-luigi-instance.com', 'X-Request-Id': '5653ffa39839ba4e62b3d21eccabbbdf', 'X-Real-Ip': '38.122.48.218', 'X-Forwarded-For': '38.122.48.218', 'X-Forwarded-Host': 'my-luigi-instance.com', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https', 'X-Original-Uri': '/api/task_list?data=%7B%22status%22%3A%22RUNNING%22%2C%22upstream_status%22%3A%22%22%2C%22search%22%3A%22%22%7D', 'X-Scheme': 'https', 'Accept': 'application/json, text/javascript, */*; q=0.01', 'X-Requested-With': 'XMLHttpRequest', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36', 'Referer': 'https://my-luigi-instance.com/static/visualiser/index.html', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'en-US,en;q=0.9'})\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/tornado/web.py\", line 1510, in _execute\r\n    result = method(*self.path_args, **self.path_kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/server.py\", line 121, in get\r\n    result = getattr(self._scheduler, method)(**arguments)\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/scheduler.py\", line 1430, in task_list\r\n    self.prune()\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/scheduler.py\", line 730, in prune\r\n    self._prune_tasks()\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/scheduler.py\", line 749, in _prune_tasks\r\n    self._state.update_status(task, self._config)\r\n  File \"/usr/local/lib/python3.7/site-packages/luigi/scheduler.py\", line 623, in update_status\r\n    if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\r\nTypeError: '<' not supported between instances of 'NoneType' and 'float'\r\n2019-07-23 14:12:23,752 tornado.access  ERROR    500 GET /api/task_list?data=%7B%22status%22%3A%22RUNNING%22%2C%22upstream_status%22%3A%22%22%2C%22search%22%3A%22%22%7D (10.10.143.47) 3.19ms\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2748", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2748/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2748/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2748/events", "html_url": "https://github.com/spotify/luigi/issues/2748", "id": 470257119, "node_id": "MDU6SXNzdWU0NzAyNTcxMTk=", "number": 2748, "title": "[luigid] daemonized logging configuration?", "user": {"login": "dgronskij", "id": 12527959, "node_id": "MDQ6VXNlcjEyNTI3OTU5", "avatar_url": "https://avatars0.githubusercontent.com/u/12527959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgronskij", "html_url": "https://github.com/dgronskij", "followers_url": "https://api.github.com/users/dgronskij/followers", "following_url": "https://api.github.com/users/dgronskij/following{/other_user}", "gists_url": "https://api.github.com/users/dgronskij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgronskij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgronskij/subscriptions", "organizations_url": "https://api.github.com/users/dgronskij/orgs", "repos_url": "https://api.github.com/users/dgronskij/repos", "events_url": "https://api.github.com/users/dgronskij/events{/privacy}", "received_events_url": "https://api.github.com/users/dgronskij/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-19T10:33:36Z", "updated_at": "2019-11-30T11:39:46Z", "closed_at": "2019-11-30T11:39:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there. I'm having hard time trying to run daemonized `luigid` and configure it's logpath. It seems that `luigid` background / logdir options a broken in a sense that no logging configuration can be done at all in background mode.\r\n\r\n-  The only way to daemonize `luigid` is to specify `--background` option (look https://github.com/spotify/luigi/blob/38443c2990771d92547330e1163f0e8bf594c94f/luigi/cmdline.py#L33)\r\n\r\n- If `--background` is present, the `--logdir` parameter is not respected (https://github.com/spotify/luigi/blob/38443c2990771d92547330e1163f0e8bf594c94f/luigi/setup_logging.py#L116)\r\n- If it's desired bahaviour, than probably it may be configured via configuration file? Nope, becuase CLI arguments are processed in the first place (https://github.com/spotify/luigi/blob/38443c2990771d92547330e1163f0e8bf594c94f/luigi/setup_logging.py#L77)\r\n- if no `logdir` specified, `luigid` picks up the default `/var/log/luigi` location, which is unavailable to me. (https://github.com/spotify/luigi/blob/38443c2990771d92547330e1163f0e8bf594c94f/luigi/process.py#L81)\r\n\r\nThus we end up in a situation where the only possible option to run `luigid` in background mode is to to use default logging with default params with logging level set to \"INFO\". Is it meant to be done this way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2746", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2746/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2746/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2746/events", "html_url": "https://github.com/spotify/luigi/issues/2746", "id": 468985493, "node_id": "MDU6SXNzdWU0Njg5ODU0OTM=", "number": 2746, "title": "Add parameter to customize the logging format in interface logging", "user": {"login": "gavincyi", "id": 10500805, "node_id": "MDQ6VXNlcjEwNTAwODA1", "avatar_url": "https://avatars0.githubusercontent.com/u/10500805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gavincyi", "html_url": "https://github.com/gavincyi", "followers_url": "https://api.github.com/users/gavincyi/followers", "following_url": "https://api.github.com/users/gavincyi/following{/other_user}", "gists_url": "https://api.github.com/users/gavincyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/gavincyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gavincyi/subscriptions", "organizations_url": "https://api.github.com/users/gavincyi/orgs", "repos_url": "https://api.github.com/users/gavincyi/repos", "events_url": "https://api.github.com/users/gavincyi/events{/privacy}", "received_events_url": "https://api.github.com/users/gavincyi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-17T04:55:14Z", "updated_at": "2019-11-28T06:48:59Z", "closed_at": "2019-11-28T06:48:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "The default interface logging supports only customizing on logging level, but [not](https://github.com/spotify/luigi/blob/master/luigi/setup_logging.py#L181) the logging format. Is it possible to expose the parameter to customize the logging format?\r\n\r\nI understand it can be customized by the logging configuration file but in my case I do not want logging configuration files spawned everywhere in my production environment, especially running the luigi in python codes.\r\n\r\nI can make a PR on this if you approve this enhancement.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2744", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2744/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2744/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2744/events", "html_url": "https://github.com/spotify/luigi/issues/2744", "id": 467871053, "node_id": "MDU6SXNzdWU0Njc4NzEwNTM=", "number": 2744, "title": "No best practice for noop?", "user": {"login": "charlesoblack", "id": 18634426, "node_id": "MDQ6VXNlcjE4NjM0NDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/18634426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlesoblack", "html_url": "https://github.com/charlesoblack", "followers_url": "https://api.github.com/users/charlesoblack/followers", "following_url": "https://api.github.com/users/charlesoblack/following{/other_user}", "gists_url": "https://api.github.com/users/charlesoblack/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlesoblack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlesoblack/subscriptions", "organizations_url": "https://api.github.com/users/charlesoblack/orgs", "repos_url": "https://api.github.com/users/charlesoblack/repos", "events_url": "https://api.github.com/users/charlesoblack/events{/privacy}", "received_events_url": "https://api.github.com/users/charlesoblack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-14T18:38:41Z", "updated_at": "2019-12-31T18:19:54Z", "closed_at": "2019-12-31T18:19:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nSome pipelines don't have any new data to push through and thus end up in \"noop\" state. However, there don't seem to be good noop handling practices; the only solution I've found is to add a \"if there is no data\" check wrapping the entire run function. Should this be the way to go? Or maybe there's a different way of doing things that I'm not aware of?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2743", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2743/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2743/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2743/events", "html_url": "https://github.com/spotify/luigi/issues/2743", "id": 467856416, "node_id": "MDU6SXNzdWU0Njc4NTY0MTY=", "number": 2743, "title": "History page is unavailable from the central visualizer page", "user": {"login": "charlesoblack", "id": 18634426, "node_id": "MDQ6VXNlcjE4NjM0NDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/18634426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlesoblack", "html_url": "https://github.com/charlesoblack", "followers_url": "https://api.github.com/users/charlesoblack/followers", "following_url": "https://api.github.com/users/charlesoblack/following{/other_user}", "gists_url": "https://api.github.com/users/charlesoblack/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlesoblack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlesoblack/subscriptions", "organizations_url": "https://api.github.com/users/charlesoblack/orgs", "repos_url": "https://api.github.com/users/charlesoblack/repos", "events_url": "https://api.github.com/users/charlesoblack/events{/privacy}", "received_events_url": "https://api.github.com/users/charlesoblack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-14T16:01:44Z", "updated_at": "2019-08-20T13:12:37Z", "closed_at": "2019-08-20T13:12:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nI can't seem to find a link to the task history from the central visualizer page. Am I missing a link somewhere?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2741", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2741/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2741/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2741/events", "html_url": "https://github.com/spotify/luigi/issues/2741", "id": 467833017, "node_id": "MDU6SXNzdWU0Njc4MzMwMTc=", "number": 2741, "title": "SendGrid documentation on Config documentation page is incorrect", "user": {"login": "charlesoblack", "id": 18634426, "node_id": "MDQ6VXNlcjE4NjM0NDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/18634426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlesoblack", "html_url": "https://github.com/charlesoblack", "followers_url": "https://api.github.com/users/charlesoblack/followers", "following_url": "https://api.github.com/users/charlesoblack/following{/other_user}", "gists_url": "https://api.github.com/users/charlesoblack/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlesoblack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlesoblack/subscriptions", "organizations_url": "https://api.github.com/users/charlesoblack/orgs", "repos_url": "https://api.github.com/users/charlesoblack/repos", "events_url": "https://api.github.com/users/charlesoblack/events{/privacy}", "received_events_url": "https://api.github.com/users/charlesoblack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-14T12:54:09Z", "updated_at": "2019-07-19T11:04:07Z", "closed_at": "2019-07-19T11:04:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nWhen doing PR #2715 , I forgot to update the configuration documentation for SendGrid. Specifically, the `username`/`password` options should be replaced with `apikey`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2739", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2739/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2739/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2739/events", "html_url": "https://github.com/spotify/luigi/issues/2739", "id": 467558349, "node_id": "MDU6SXNzdWU0Njc1NTgzNDk=", "number": 2739, "title": "Custom MetricsCollectors should be easily configurable", "user": {"login": "tophers42", "id": 8508014, "node_id": "MDQ6VXNlcjg1MDgwMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8508014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tophers42", "html_url": "https://github.com/tophers42", "followers_url": "https://api.github.com/users/tophers42/followers", "following_url": "https://api.github.com/users/tophers42/following{/other_user}", "gists_url": "https://api.github.com/users/tophers42/gists{/gist_id}", "starred_url": "https://api.github.com/users/tophers42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tophers42/subscriptions", "organizations_url": "https://api.github.com/users/tophers42/orgs", "repos_url": "https://api.github.com/users/tophers42/repos", "events_url": "https://api.github.com/users/tophers42/events{/privacy}", "received_events_url": "https://api.github.com/users/tophers42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-12T19:04:31Z", "updated_at": "2019-12-24T21:34:35Z", "closed_at": "2019-12-24T21:34:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to override the datadog metrics collector (see: https://github.com/spotify/luigi/issues/2738) and was having trouble registering a custom collector. What I wanted to do was subclass an existing MetricsCollector and then register it with the scheduler using config:\r\n```\r\n[scheduler]\r\nmetrics_collector=MyCustomCollector\r\n```\r\nbut the collectors are hard coded in metrics.py: https://github.com/spotify/luigi/blob/master/luigi/metrics.py#L7\r\n\r\nWould be nice to be able to write custom metrics collectors and inject them at runtime. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2738", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2738/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2738/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2738/events", "html_url": "https://github.com/spotify/luigi/issues/2738", "id": 467555349, "node_id": "MDU6SXNzdWU0Njc1NTUzNDk=", "number": 2738, "title": "Datadog metrics collector sends all params as tags", "user": {"login": "tophers42", "id": 8508014, "node_id": "MDQ6VXNlcjg1MDgwMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8508014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tophers42", "html_url": "https://github.com/tophers42", "followers_url": "https://api.github.com/users/tophers42/followers", "following_url": "https://api.github.com/users/tophers42/following{/other_user}", "gists_url": "https://api.github.com/users/tophers42/gists{/gist_id}", "starred_url": "https://api.github.com/users/tophers42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tophers42/subscriptions", "organizations_url": "https://api.github.com/users/tophers42/orgs", "repos_url": "https://api.github.com/users/tophers42/repos", "events_url": "https://api.github.com/users/tophers42/events{/privacy}", "received_events_url": "https://api.github.com/users/tophers42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-12T18:56:31Z", "updated_at": "2019-11-23T20:38:28Z", "closed_at": "2019-11-23T20:38:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Was trying to use the datadog metrics collector as added in: https://github.com/spotify/luigi/pull/2434.\r\nIt's a great plugin, but there is one major issue that makes it unsuitable for us to use and we've had to monkey patch it.\r\nThe collector sends all params for a task to the datadog as tags. This is problematic for two reasons:\r\n        1. Params tend to have high cardinality which is not compatible with datadog tags (see number 6: https://docs.datadoghq.com/tagging/#defining-tags)\r\n        2. Params can contain secrets and there doesn't seem to be any filtering of which\r\n        params are sent to DD. At the very least, the datadog collector should respect the visibility of params. \r\n\r\nFor reference here's how we monkey-patched it in our `__init__.py`\r\n```\r\nfrom luigi.contrib import datadog_metric\r\n\r\n\r\ndef override_format_task_params_to_tags(self, task):\r\n    \"\"\"\r\n    Monkey patch an override to DatadogMetricsCollector._format_task_params_to_tags\r\n    In general, params should not be sent as tags to DD for multiple reasons:\r\n        1. Params tend to have high cardinality which is not compatible with datadog tags\r\n        2. Params can contain secrets and there doesn't seem to be any filtering of which\r\n        params are sent to DD.\r\n    \"\"\"\r\n    return []\r\n\r\n\r\ndatadog_metric.DatadogMetricsCollector._format_task_params_to_tags = override_format_task_params_to_tags  # noqa: E501\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2737", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2737/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2737/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2737/events", "html_url": "https://github.com/spotify/luigi/issues/2737", "id": 466940016, "node_id": "MDU6SXNzdWU0NjY5NDAwMTY=", "number": 2737, "title": "luigi.task_register.TaskClassAmbigiousException: Task 'Streams' is ambiguous", "user": {"login": "kashifusmani", "id": 7829114, "node_id": "MDQ6VXNlcjc4MjkxMTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7829114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kashifusmani", "html_url": "https://github.com/kashifusmani", "followers_url": "https://api.github.com/users/kashifusmani/followers", "following_url": "https://api.github.com/users/kashifusmani/following{/other_user}", "gists_url": "https://api.github.com/users/kashifusmani/gists{/gist_id}", "starred_url": "https://api.github.com/users/kashifusmani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kashifusmani/subscriptions", "organizations_url": "https://api.github.com/users/kashifusmani/orgs", "repos_url": "https://api.github.com/users/kashifusmani/repos", "events_url": "https://api.github.com/users/kashifusmani/events{/privacy}", "received_events_url": "https://api.github.com/users/kashifusmani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-11T14:49:06Z", "updated_at": "2019-07-11T18:55:57Z", "closed_at": "2019-07-11T18:55:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\nI am following a minimal example from https://luigi.readthedocs.io/en/stable/example_top_artists.html\r\n\r\n```\r\nclass Streams(luigi.Task):\r\n    \"\"\"\r\n    Faked version right now, just generates bogus data.\r\n    \"\"\"\r\n    date = luigi.DateParameter()\r\n\r\n\r\n    def run(self):\r\n        \"\"\"\r\n        Generates bogus data and writes it into the :py:meth:`~.Streams.output` target.\r\n        \"\"\"\r\n        with self.output().open('w') as output:\r\n            for _ in range(1000):\r\n                output.write('{} {} {}\\n'.format(\r\n                    random.randint(0, 999),\r\n                    random.randint(0, 999),\r\n                    random.randint(0, 999)))\r\n\r\n    def output(self):\r\n        \"\"\"\r\n        Returns the target output for this task.\r\n        In this case, a successful execution of this task will create a file in the local file system.\r\n\r\n        :return: the target output for this task.\r\n        :rtype: object (:py:class:`luigi.target.Target`)\r\n        \"\"\"\r\n        return luigi.LocalTarget(self.date.strftime('data/streams_%Y_%m_%d_faked.tsv'))\r\n```\r\n\r\nThe above code, when run gives me the error that ```luigi.task_register.TaskClassAmbigiousException: Task 'Streams' is ambiguous```\r\n\r\nI need to understand what am I missing? I am running it via IntelliJ with the configuration\r\n```--module my_script Streams --local-scheduler --date-interval 2012-06```\r\n\r\nIf I run it from terminal, it works. Not sure what is missing when its run via IntelliJ?\r\n\r\nIs there a way I can set the task name?\r\n\r\nThe following in the complete stack trace\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/kusmani/Library/Application Support/IntelliJIdea2018.1/python/helpers/pydev/pydevd.py\", line 1664, in <module>\r\n    main()\r\n  File \"/Users/kusmani/Library/Application Support/IntelliJIdea2018.1/python/helpers/pydev/pydevd.py\", line 1658, in main\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"/Users/kusmani/Library/Application Support/IntelliJIdea2018.1/python/helpers/pydev/pydevd.py\", line 1068, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File \"/Users/kusmani/Library/Application Support/IntelliJIdea2018.1/python/helpers/pydev/_pydev_imps/_pydev_execfile.py\", line 18, in execfile\r\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\r\n  File \"/Users/kusmani/Projects/luigi/luigi_task/code/my_script.py\", line 87, in <module>\r\n    luigi.run()\r\n  File \"/Users/kusmani/Projects/virts/luigi/lib/python3.7/site-packages/luigi/interface.py\", line 194, in run\r\n    luigi_run_result = _run(*args, **kwargs)\r\n  File \"/Users/kusmani/Projects/virts/luigi/lib/python3.7/site-packages/luigi/interface.py\", line 210, in _run\r\n    with CmdlineParser.global_instance(cmdline_args) as cp:\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py\", line 112, in __enter__\r\n    return next(self.gen)\r\n  File \"/Users/kusmani/Projects/virts/luigi/lib/python3.7/site-packages/luigi/cmdline_parser.py\", line 52, in global_instance\r\n    new_value = CmdlineParser(cmdline_args)\r\n  File \"/Users/kusmani/Projects/virts/luigi/lib/python3.7/site-packages/luigi/cmdline_parser.py\", line 76, in __init__\r\n    Register.get_task_cls(root_task)\r\n  File \"/Users/kusmani/Projects/virts/luigi/lib/python3.7/site-packages/luigi/task_register.py\", line 182, in get_task_cls\r\n    raise TaskClassAmbigiousException('Task %r is ambiguous' % name)\r\nluigi.task_register.TaskClassAmbigiousException: Task 'Streams' is ambiguous```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2736", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2736/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2736/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2736/events", "html_url": "https://github.com/spotify/luigi/issues/2736", "id": 466821696, "node_id": "MDU6SXNzdWU0NjY4MjE2OTY=", "number": 2736, "title": "Kubernetes spark operator support", "user": {"login": "ekhaydarov", "id": 13380622, "node_id": "MDQ6VXNlcjEzMzgwNjIy", "avatar_url": "https://avatars0.githubusercontent.com/u/13380622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekhaydarov", "html_url": "https://github.com/ekhaydarov", "followers_url": "https://api.github.com/users/ekhaydarov/followers", "following_url": "https://api.github.com/users/ekhaydarov/following{/other_user}", "gists_url": "https://api.github.com/users/ekhaydarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekhaydarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekhaydarov/subscriptions", "organizations_url": "https://api.github.com/users/ekhaydarov/orgs", "repos_url": "https://api.github.com/users/ekhaydarov/repos", "events_url": "https://api.github.com/users/ekhaydarov/events{/privacy}", "received_events_url": "https://api.github.com/users/ekhaydarov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-11T10:59:32Z", "updated_at": "2019-11-27T20:25:53Z", "closed_at": "2019-11-27T20:25:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, when using `from luigi.contrib.kubernetes import KubernetesJobTask` it is only possible to create a Job resource in kubernetes. I am trying to implement a [spark operator](https://github.com/GoogleCloudPlatform/spark-on-k8s-operator) which is a different kubernetes resource\r\n\r\nI was wondering if it would be under luigis scope to implement a more dynamic `KubernetesJobTask`. So far I have tried to just override the run method of the class but the internal methods that check on the job, starting with `self.__track_job()` dont get inherited properly as well as their scope of tracking the `Job` resource only.\r\n\r\nMy question is, with more and more operators coming into the kubernetes ecosystem it seems some kind of support for that would be good in luigi? \r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2734", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2734/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2734/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2734/events", "html_url": "https://github.com/spotify/luigi/issues/2734", "id": 465414559, "node_id": "MDU6SXNzdWU0NjU0MTQ1NTk=", "number": 2734, "title": "enum34 dependency breaks install using poetry on python 3.7.3", "user": {"login": "Timost", "id": 7479071, "node_id": "MDQ6VXNlcjc0NzkwNzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7479071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Timost", "html_url": "https://github.com/Timost", "followers_url": "https://api.github.com/users/Timost/followers", "following_url": "https://api.github.com/users/Timost/following{/other_user}", "gists_url": "https://api.github.com/users/Timost/gists{/gist_id}", "starred_url": "https://api.github.com/users/Timost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Timost/subscriptions", "organizations_url": "https://api.github.com/users/Timost/orgs", "repos_url": "https://api.github.com/users/Timost/repos", "events_url": "https://api.github.com/users/Timost/events{/privacy}", "received_events_url": "https://api.github.com/users/Timost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-08T19:08:45Z", "updated_at": "2020-01-07T16:06:04Z", "closed_at": "2020-01-07T16:06:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI've several projects that depend on luigi, I use poetry to manage their dependencies and when trying to build them on python `3.7.3` the install fails because of `enum34`.\r\nThe issue with `enum34` has impacted many well known projects (see https://github.com/sdispater/poetry/issues/1122 for more details):\r\n- https://github.com/sdispater/poetry/issues/881\r\n- https://github.com/sdispater/poetry/issues/844\r\n- https://github.com/tensorflow/tensorflow/issues/15136\r\n\r\nIt seems these projects had to modify their `setup.py` to properly use environment markers as specified in https://www.python.org/dev/peps/pep-0508/#environment-markers.\r\n\r\nI've taken a quick look at the `setup.py` of luigi and there is a comment dating back from 2016 guarding against the use of those environment markers for `enum34`. I was wondering if this was still needed and if not if it could be be modified to conform to PEP508.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2733", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2733/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2733/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2733/events", "html_url": "https://github.com/spotify/luigi/issues/2733", "id": 463215993, "node_id": "MDU6SXNzdWU0NjMyMTU5OTM=", "number": 2733, "title": "RangeHourly task is always encountered", "user": {"login": "oyarushe", "id": 33004847, "node_id": "MDQ6VXNlcjMzMDA0ODQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/33004847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oyarushe", "html_url": "https://github.com/oyarushe", "followers_url": "https://api.github.com/users/oyarushe/followers", "following_url": "https://api.github.com/users/oyarushe/following{/other_user}", "gists_url": "https://api.github.com/users/oyarushe/gists{/gist_id}", "starred_url": "https://api.github.com/users/oyarushe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oyarushe/subscriptions", "organizations_url": "https://api.github.com/users/oyarushe/orgs", "repos_url": "https://api.github.com/users/oyarushe/repos", "events_url": "https://api.github.com/users/oyarushe/events{/privacy}", "received_events_url": "https://api.github.com/users/oyarushe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-02T13:00:45Z", "updated_at": "2019-08-09T19:50:01Z", "closed_at": "2019-08-09T19:50:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "RangeHourly task is always encountered. Execution of other tasks are skipped.\r\n\r\n```\r\nimport luigi\r\nimport datetime\r\n\r\n\r\nclass Test(luigi.Task):\r\n\r\n    dt = luigi.DateMinuteParameter()\r\n    latest = datetime.datetime(2014, 05, 01)\r\n\r\n    def run(self):\r\n        print self.dt\r\n        Test.latest = max(Test.latest, self.dt)\r\n\r\n    def complete(self):\r\n        return self.dt <= Test.latest\r\n\r\n    @classmethod\r\n    def bulk_complete(cls, *args, **kwargs):\r\n        return []\r\n\r\n\r\nif __name__ == '__main__':\r\n    luigi.run()\r\n```\r\n\r\n```\r\n$ python test.py RangeHourly --of Test --start 2015-05-01T00 --stop 2015-05-02T00 --local-schedule \r\nDEBUG: Checking if RangeHourly(of=Test, of_params={}, reverse=False, task_limit=50, now=None, param_name=None, start=2015-05-01T00, stop=2015-05-02T00, hours_back=2400, hours_forward=0) is complete\r\nDEBUG: Empty range. No Test instances expected\r\nINFO: Informed scheduler that task   RangeHourly_2400_0_None_153c857a8f   has status   DONE\r\nINFO: Done scheduling tasks\r\nINFO: Running Worker with 1 processes\r\nDEBUG: Asking scheduler for work...\r\nDEBUG: Done\r\nDEBUG: There are no more tasks to run at this time\r\nINFO: Worker Worker(salt=062617973, workers=1, host=d42eb853bfc1, username=root, pid=303) was stopped. Shutting down Keep-Alive thread\r\nINFO: \r\n===== Luigi Execution Summary =====\r\n\r\nScheduled 1 tasks of which:\r\n* 1 complete ones were encountered:\r\n    - 1 RangeHourly(...)\r\n\r\nDid not run any tasks\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2731", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2731/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2731/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2731/events", "html_url": "https://github.com/spotify/luigi/issues/2731", "id": 460951369, "node_id": "MDU6SXNzdWU0NjA5NTEzNjk=", "number": 2731, "title": "PidLockAlreadyTakenExit", "user": {"login": "veltzerdoron", "id": 8045446, "node_id": "MDQ6VXNlcjgwNDU0NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8045446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veltzerdoron", "html_url": "https://github.com/veltzerdoron", "followers_url": "https://api.github.com/users/veltzerdoron/followers", "following_url": "https://api.github.com/users/veltzerdoron/following{/other_user}", "gists_url": "https://api.github.com/users/veltzerdoron/gists{/gist_id}", "starred_url": "https://api.github.com/users/veltzerdoron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veltzerdoron/subscriptions", "organizations_url": "https://api.github.com/users/veltzerdoron/orgs", "repos_url": "https://api.github.com/users/veltzerdoron/repos", "events_url": "https://api.github.com/users/veltzerdoron/events{/privacy}", "received_events_url": "https://api.github.com/users/veltzerdoron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-06-26T12:49:15Z", "updated_at": "2020-05-05T19:49:37Z", "closed_at": "2019-11-23T08:38:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "This lock means that luigi.run() can't be invoked more than once per process, can you please explain why this is so? why not clean the lock once the run is complete? I'm kind of forced to run the method with --no-lock as suggested [here](https://groups.google.com/forum/#!topic/luigi-user/7ZCY18l5uJM), they also suggested opening a luigi issue for this which I'm doing right now, please ask for further details if necessary.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2729", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2729/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2729/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2729/events", "html_url": "https://github.com/spotify/luigi/issues/2729", "id": 459961610, "node_id": "MDU6SXNzdWU0NTk5NjE2MTA=", "number": 2729, "title": "Uncaught exception in execution summary ", "user": {"login": "orenovadia", "id": 17835057, "node_id": "MDQ6VXNlcjE3ODM1MDU3", "avatar_url": "https://avatars2.githubusercontent.com/u/17835057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orenovadia", "html_url": "https://github.com/orenovadia", "followers_url": "https://api.github.com/users/orenovadia/followers", "following_url": "https://api.github.com/users/orenovadia/following{/other_user}", "gists_url": "https://api.github.com/users/orenovadia/gists{/gist_id}", "starred_url": "https://api.github.com/users/orenovadia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orenovadia/subscriptions", "organizations_url": "https://api.github.com/users/orenovadia/orgs", "repos_url": "https://api.github.com/users/orenovadia/repos", "events_url": "https://api.github.com/users/orenovadia/events{/privacy}", "received_events_url": "https://api.github.com/users/orenovadia/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-24T15:36:26Z", "updated_at": "2019-12-30T21:38:21Z", "closed_at": "2019-12-30T21:38:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "While generating an execution summary, `current_task._requires()` is called without any exception protection.\r\n\r\nIn case a pending task fails on a later call to `_requires()`  (say some external service died while luigi was running), an exception is thrown and is not handled. \r\n\r\nThese tasks reproduce the issue:\r\n```python\r\nfrom luigi.target import Target\r\nfrom luigi.task import ExternalTask, WrapperTask\r\n\r\n\r\nclass MissingExternal(ExternalTask):\r\n    # this task is pending: missing external dependency\r\n    def output(self):\r\n        class DoesNotExist(Target):\r\n\r\n            def exists(self):\r\n                return False\r\n\r\n        return DoesNotExist()\r\n\r\n\r\nclass MyTask(WrapperTask):\r\n    # This task is left pending due to MissingExternal\r\n    # But it will make execution summary crash later on\r\n    num_calls = 0\r\n\r\n    def requires(self):\r\n        if self.num_calls == 2:\r\n            raise Exception('Crash in a later call to requires()')\r\n        self.num_calls += 1\r\n        yield MissingExternal()\r\n```\r\n\r\nRunning it yields:\r\n```bash\r\nERROR: Uncaught exception in luigi\r\nTraceback (most recent call last):\r\n  File \"luigi/retcodes.py\", line 75, in run_with_retcodes\r\n    worker = luigi.interface._run(argv).worker\r\n  File \"luigi/interface.py\", line 211, in _run\r\n    return _schedule_and_run([cp.get_task_obj()], worker_scheduler_factory)\r\n  File \"luigi/interface.py\", line 174, in _schedule_and_run\r\n    luigi_run_result = LuigiRunResult(worker, success)\r\n  File \"luigi/execution_summary.py\", line 78, in __init__\r\n    summary_dict = _summary_dict(worker)\r\n  File \"luigi/execution_summary.py\", line 393, in _summary_dict\r\n    _populate_unknown_statuses(set_tasks)\r\n  File \"luigi/execution_summary.py\", line 131, in _populate_unknown_statuses\r\n    _depth_first_search(set_tasks, task, visited)\r\n  File \"luigi/execution_summary.py\", line 144, in _depth_first_search\r\n    for task in current_task._requires():\r\n  File \"luigi/task.py\", line 626, in _requires\r\n    return flatten(self.requires())  # base impl\r\n  File \"luigi/task.py\", line 887, in flatten\r\n    for result in iterator:\r\n  File \"fizz.py\", line 23, in requires\r\n    raise Exception('Crash in a later call to requires()')\r\nException: Crash in a later call to requires()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2728", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2728/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2728/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2728/events", "html_url": "https://github.com/spotify/luigi/issues/2728", "id": 459684802, "node_id": "MDU6SXNzdWU0NTk2ODQ4MDI=", "number": 2728, "title": "how to run parallel tasks on windows", "user": {"login": "Foristkirito", "id": 13299109, "node_id": "MDQ6VXNlcjEzMjk5MTA5", "avatar_url": "https://avatars2.githubusercontent.com/u/13299109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Foristkirito", "html_url": "https://github.com/Foristkirito", "followers_url": "https://api.github.com/users/Foristkirito/followers", "following_url": "https://api.github.com/users/Foristkirito/following{/other_user}", "gists_url": "https://api.github.com/users/Foristkirito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Foristkirito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Foristkirito/subscriptions", "organizations_url": "https://api.github.com/users/Foristkirito/orgs", "repos_url": "https://api.github.com/users/Foristkirito/repos", "events_url": "https://api.github.com/users/Foristkirito/events{/privacy}", "received_events_url": "https://api.github.com/users/Foristkirito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-24T04:43:06Z", "updated_at": "2019-11-05T05:55:21Z", "closed_at": "2019-11-05T05:55:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "currently luigi does not support multi works on windows. I'm curious about any plan to add this feature on windows in the future. And how to run parallel works on windows using some other method on current luigi version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2725", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2725/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2725/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2725/events", "html_url": "https://github.com/spotify/luigi/issues/2725", "id": 453598338, "node_id": "MDU6SXNzdWU0NTM1OTgzMzg=", "number": 2725, "title": "ExpiredTocken issue with AWS with aws_role_arn", "user": {"login": "Casyfill", "id": 2675621, "node_id": "MDQ6VXNlcjI2NzU2MjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2675621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Casyfill", "html_url": "https://github.com/Casyfill", "followers_url": "https://api.github.com/users/Casyfill/followers", "following_url": "https://api.github.com/users/Casyfill/following{/other_user}", "gists_url": "https://api.github.com/users/Casyfill/gists{/gist_id}", "starred_url": "https://api.github.com/users/Casyfill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Casyfill/subscriptions", "organizations_url": "https://api.github.com/users/Casyfill/orgs", "repos_url": "https://api.github.com/users/Casyfill/repos", "events_url": "https://api.github.com/users/Casyfill/events{/privacy}", "received_events_url": "https://api.github.com/users/Casyfill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-07T16:32:53Z", "updated_at": "2019-10-18T14:52:47Z", "closed_at": "2019-10-18T14:52:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having a fairly long task, and it seems that in a ~hour token expires - and S3Client fails instead of refreshing it:\r\n\r\n```\r\nbotocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired\r\n```\r\n\r\nNot sure what to share, here is a client:\r\n\r\n```\r\nS3Client(\r\n                aws_role_arn=os.environ[\"AWS_ROLE_ARN\"],\r\n                aws_role_session_name=\"serj-datalake-task\",\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2721", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2721/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2721/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2721/events", "html_url": "https://github.com/spotify/luigi/issues/2721", "id": 451452836, "node_id": "MDU6SXNzdWU0NTE0NTI4MzY=", "number": 2721, "title": "RedisTarget is incompatible with redis-py >= 3", "user": {"login": "KenyaDonDraper", "id": 5718841, "node_id": "MDQ6VXNlcjU3MTg4NDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5718841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KenyaDonDraper", "html_url": "https://github.com/KenyaDonDraper", "followers_url": "https://api.github.com/users/KenyaDonDraper/followers", "following_url": "https://api.github.com/users/KenyaDonDraper/following{/other_user}", "gists_url": "https://api.github.com/users/KenyaDonDraper/gists{/gist_id}", "starred_url": "https://api.github.com/users/KenyaDonDraper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KenyaDonDraper/subscriptions", "organizations_url": "https://api.github.com/users/KenyaDonDraper/orgs", "repos_url": "https://api.github.com/users/KenyaDonDraper/repos", "events_url": "https://api.github.com/users/KenyaDonDraper/events{/privacy}", "received_events_url": "https://api.github.com/users/KenyaDonDraper/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-03T12:23:05Z", "updated_at": "2019-06-07T11:16:48Z", "closed_at": "2019-06-07T11:16:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From the redis-py v3.0.0 [release notes]*(https://github.com/andymccurdy/redis-py/blob/9b03af26dc829beea232a3248768de933f4c3b67/CHANGES#L9-L15):\r\n\r\n> Only bytes, strings and numbers (ints, longs and floats) are acceptable\r\nfor keys and values. Previously redis-py attempted to cast other types\r\nto str() and store the result. This caused must confusion and frustration\r\nwhen passing boolean values (cast to 'True' and 'False') or None values\r\n(cast to 'None'). It is now the user's responsibility to cast all\r\nkey names and values to bytes, strings or numbers before passing the\r\nvalue to redis-py.\r\n\r\nThe current version of RedisTarget is, however, still trying to set a datetime value - see https://github.com/spotify/luigi/blob/4ab2a909f42f2507310b6d902f2ed9ed0b7eae83/luigi/contrib/redis_store.py#L90. This is causing the following error for those using redis-py >= 3.0.0;\r\n\r\n> redis.exceptions.DataError: Invalid input of type: 'datetime'. Convert to a byte, string or number first.\r\n\r\nI think we should cast the datetime to a str as a fix. Will be sending a PR shortly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2719", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2719/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2719/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2719/events", "html_url": "https://github.com/spotify/luigi/issues/2719", "id": 449234780, "node_id": "MDU6SXNzdWU0NDkyMzQ3ODA=", "number": 2719, "title": "Serialization csv file with pandas.DataFrame.to_csv and luigi.format.Gzip (python 3)", "user": {"login": "Kim2212", "id": 22478048, "node_id": "MDQ6VXNlcjIyNDc4MDQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/22478048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kim2212", "html_url": "https://github.com/Kim2212", "followers_url": "https://api.github.com/users/Kim2212/followers", "following_url": "https://api.github.com/users/Kim2212/following{/other_user}", "gists_url": "https://api.github.com/users/Kim2212/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kim2212/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kim2212/subscriptions", "organizations_url": "https://api.github.com/users/Kim2212/orgs", "repos_url": "https://api.github.com/users/Kim2212/repos", "events_url": "https://api.github.com/users/Kim2212/events{/privacy}", "received_events_url": "https://api.github.com/users/Kim2212/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-28T12:14:59Z", "updated_at": "2019-05-30T10:16:50Z", "closed_at": "2019-05-30T10:16:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\npython=3.7\r\nluigi=2.8.0\r\npandas=0.24.2\r\n\r\nLuigi Task fails, when serializing pandas.DataFrame to csv file with gzip compression\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/vladimir/pyt3.7/lib/python3.7/site-packages/luigi/worker.py\", line 199, in run\r\n    new_deps = self._run_get_new_deps()\r\n  File \"/home/vladimir/pyt3.7/lib/python3.7/site-packages/luigi/worker.py\", line 139, in _run_get_new_deps\r\n    task_gen = self.task.run()\r\n  File \"simple_task.py\", line 15, in run\r\n    df.to_csv(ofile, index=False, compression='gzip')\r\n  File \"/home/vladimir/pyt3.7/lib/python3.7/site-packages/pandas/core/generic.py\", line 3020, in to_csv\r\n    formatter.save()\r\n  File \"/home/vladimir/pyt3.7/lib/python3.7/site-packages/pandas/io/formats/csvs.py\", line 172, in save\r\n    self._save()\r\n  File \"/home/vladimir/pyt3.7/lib/python3.7/site-packages/pandas/io/formats/csvs.py\", line 274, in _save\r\n    self._save_header()\r\n  File \"/home/vladimir/pyt3.7/lib/python3.7/site-packages/pandas/io/formats/csvs.py\", line 242, in _save_header\r\n    writer.writerow(encoded_labels)\r\n  File \"/home/vladimir/pyt3.7/lib/python3.7/site-packages/luigi/format.py\", line 188, in write\r\n    self._process.stdin.write(*args, **kwargs)\r\nTypeError: a bytes-like object is required, not 'str'\r\n```\r\n\r\ncodes:\r\n```\r\nimport luigi\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\n\r\nclass SimpleTask(luigi.Task):\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget('result.csv.gz', format=luigi.format.Gzip)\r\n\r\n    def run(self):\r\n        df = pd.DataFrame(np.random.randn(100, 3), columns=['a', 'b', 'c'])\r\n\r\n        with self.output().open('w') as ofile:\r\n            df.to_csv(ofile, index=False, compression='gzip')\r\n\r\nif __name__ == '__main__':\r\n    luigi.run()\r\n```\r\nworks fine if add this `args = tuple(arg.encode('utf-8') if type(arg) == str else arg for arg in args)` [here](https://github.com/spotify/luigi/blob/2de1b686d14e4c3d844d1eaca62405b8256fdd3f/luigi/format.py#L187)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2718", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2718/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2718/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2718/events", "html_url": "https://github.com/spotify/luigi/issues/2718", "id": 449234769, "node_id": "MDU6SXNzdWU0NDkyMzQ3Njk=", "number": 2718, "title": "Serialization csv file with pandas.DataFrame.to_csv and luigi.format.Gzip (python 3", "user": {"login": "Kim2212", "id": 22478048, "node_id": "MDQ6VXNlcjIyNDc4MDQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/22478048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kim2212", "html_url": "https://github.com/Kim2212", "followers_url": "https://api.github.com/users/Kim2212/followers", "following_url": "https://api.github.com/users/Kim2212/following{/other_user}", "gists_url": "https://api.github.com/users/Kim2212/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kim2212/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kim2212/subscriptions", "organizations_url": "https://api.github.com/users/Kim2212/orgs", "repos_url": "https://api.github.com/users/Kim2212/repos", "events_url": "https://api.github.com/users/Kim2212/events{/privacy}", "received_events_url": "https://api.github.com/users/Kim2212/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-28T12:14:58Z", "updated_at": "2019-05-28T12:16:00Z", "closed_at": "2019-05-28T12:16:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2717", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2717/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2717/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2717/events", "html_url": "https://github.com/spotify/luigi/issues/2717", "id": 449234758, "node_id": "MDU6SXNzdWU0NDkyMzQ3NTg=", "number": 2717, "title": "Serialization csv file with pandas.DataFrame.to_csv and luigi.format.Gzip (python 3", "user": {"login": "Kim2212", "id": 22478048, "node_id": "MDQ6VXNlcjIyNDc4MDQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/22478048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kim2212", "html_url": "https://github.com/Kim2212", "followers_url": "https://api.github.com/users/Kim2212/followers", "following_url": "https://api.github.com/users/Kim2212/following{/other_user}", "gists_url": "https://api.github.com/users/Kim2212/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kim2212/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kim2212/subscriptions", "organizations_url": "https://api.github.com/users/Kim2212/orgs", "repos_url": "https://api.github.com/users/Kim2212/repos", "events_url": "https://api.github.com/users/Kim2212/events{/privacy}", "received_events_url": "https://api.github.com/users/Kim2212/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-28T12:14:56Z", "updated_at": "2019-05-28T12:15:48Z", "closed_at": "2019-05-28T12:15:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2714", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2714/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2714/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2714/events", "html_url": "https://github.com/spotify/luigi/issues/2714", "id": 447664964, "node_id": "MDU6SXNzdWU0NDc2NjQ5NjQ=", "number": 2714, "title": "SendGrid integration is deprecated", "user": {"login": "charlesoblack", "id": 18634426, "node_id": "MDQ6VXNlcjE4NjM0NDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/18634426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlesoblack", "html_url": "https://github.com/charlesoblack", "followers_url": "https://api.github.com/users/charlesoblack/followers", "following_url": "https://api.github.com/users/charlesoblack/following{/other_user}", "gists_url": "https://api.github.com/users/charlesoblack/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlesoblack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlesoblack/subscriptions", "organizations_url": "https://api.github.com/users/charlesoblack/orgs", "repos_url": "https://api.github.com/users/charlesoblack/repos", "events_url": "https://api.github.com/users/charlesoblack/events{/privacy}", "received_events_url": "https://api.github.com/users/charlesoblack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-23T13:31:44Z", "updated_at": "2019-06-02T09:49:30Z", "closed_at": "2019-06-02T09:49:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just like #1956 . Somehow I can't reopen the old issue.\r\n\r\nI can work on fixing this, but would appreciate some pointers as to how the config files work exactly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2712", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2712/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2712/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2712/events", "html_url": "https://github.com/spotify/luigi/issues/2712", "id": 446483159, "node_id": "MDU6SXNzdWU0NDY0ODMxNTk=", "number": 2712, "title": "\"sqlalchemy\" requirement not in setup.py", "user": {"login": "tfiers", "id": 3773558, "node_id": "MDQ6VXNlcjM3NzM1NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3773558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tfiers", "html_url": "https://github.com/tfiers", "followers_url": "https://api.github.com/users/tfiers/followers", "following_url": "https://api.github.com/users/tfiers/following{/other_user}", "gists_url": "https://api.github.com/users/tfiers/gists{/gist_id}", "starred_url": "https://api.github.com/users/tfiers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tfiers/subscriptions", "organizations_url": "https://api.github.com/users/tfiers/orgs", "repos_url": "https://api.github.com/users/tfiers/repos", "events_url": "https://api.github.com/users/tfiers/events{/privacy}", "received_events_url": "https://api.github.com/users/tfiers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-21T08:26:25Z", "updated_at": "2019-05-31T12:40:32Z", "closed_at": "2019-05-31T12:40:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This package is used when task history is enabled for the central scheduler.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2708", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2708/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2708/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2708/events", "html_url": "https://github.com/spotify/luigi/issues/2708", "id": 444405122, "node_id": "MDU6SXNzdWU0NDQ0MDUxMjI=", "number": 2708, "title": "prometheus metrics collector broken", "user": {"login": "Globegitter", "id": 2580254, "node_id": "MDQ6VXNlcjI1ODAyNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2580254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Globegitter", "html_url": "https://github.com/Globegitter", "followers_url": "https://api.github.com/users/Globegitter/followers", "following_url": "https://api.github.com/users/Globegitter/following{/other_user}", "gists_url": "https://api.github.com/users/Globegitter/gists{/gist_id}", "starred_url": "https://api.github.com/users/Globegitter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Globegitter/subscriptions", "organizations_url": "https://api.github.com/users/Globegitter/orgs", "repos_url": "https://api.github.com/users/Globegitter/repos", "events_url": "https://api.github.com/users/Globegitter/events{/privacy}", "received_events_url": "https://api.github.com/users/Globegitter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-15T12:16:21Z", "updated_at": "2019-05-16T07:17:00Z", "closed_at": "2019-05-16T07:17:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nI have a luigi.conf as follows used by the latest luigi release 2.8.5\r\n\r\n```\r\n[scheduler]\r\nretry-delay: 1\r\nretry_count: 0\r\nrecord_task_history = False\r\nmetrics_collector = prometheus\r\n\r\n[worker]\r\nkeep_alive: false\r\nwait_interval: 1\r\n```\r\n\r\nthen starting up `luigid --port 8005` and making a request to `localhost:8005/metrics` I get the following exception:\r\n\r\n```\r\netl_1  | 2019-05-15 12:10:07,587 tornado.application[1] ERROR: Uncaught exception GET /metrics (172.22.0.1)\r\netl_1  | HTTPServerRequest(protocol='http', host='local.ecosia.org:8005', method='GET', uri='/metrics', version='HTTP/1.1', remote_ip='172.22.0.1', headers={'Host': 'local.ecosia.org:8005', 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:67.0) Gecko/20100101 Firefox/67.0', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Language': 'de-DE,en-US;q=0.7,en;q=0.3', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Cookie': 'ECFG=a=1:as=1:cs=0:dt=pc:f=i:fr=0:fs=0:l=en:lt=1557921956:mc=de-de:nf=1:nt=0:t=275:tt=0:tu=auto:wu=auto:ma=1; ecosia_sp2id.3d5d=1c68e633-f199-431a-9723-809c8bc2a816.1552574687.164.1557921957.1557913598.fc7b2121-8875-49ec-88f2-12b92923c01f; lastReadNotificationTimestamp=1557756263397; _ga=GA1.2.869378598.1553858530; _fbp=fb.1.1554110834265.1486831124; lastDiscardedNotification={%22banner%22:1556538435552%2C%22popup%22:1556540594641}; ecosia_sp2ses.3d5d=*', 'Upgrade-Insecure-Requests': '1'})\r\netl_1  | Traceback (most recent call last):\r\netl_1  |   File \"/usr/local/lib/python3.7/site-packages/tornado/web.py\", line 1510, in _execute\r\netl_1  |     result = method(*self.path_args, **self.path_kwargs)\r\netl_1  |   File \"/usr/local/lib/python3.7/site-packages/luigi/server.py\", line 284, in get\r\netl_1  |     metrics.configure_http_handler(self)\r\netl_1  | AttributeError: 'bytes' object has no attribute 'configure_http_handler'\r\netl_1  | 2019-05-15 12:10:07,588 tornado.access[1] ERROR: 500 GET /metrics (172.22.0.1) 2.20ms\r\n```\r\n\r\nLooking at https://github.com/spotify/luigi/blob/master/luigi/server.py#L284-L285 something does not seem quite right to me, that one can call `configure_http_handler` on the same object that is being written out, but I also don't know the code. Anyway, let me know if there is more information needed from my side.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2707", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2707/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2707/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2707/events", "html_url": "https://github.com/spotify/luigi/issues/2707", "id": 443104025, "node_id": "MDU6SXNzdWU0NDMxMDQwMjU=", "number": 2707, "title": "can't redirect task's output ", "user": {"login": "avnaf", "id": 24667043, "node_id": "MDQ6VXNlcjI0NjY3MDQz", "avatar_url": "https://avatars3.githubusercontent.com/u/24667043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avnaf", "html_url": "https://github.com/avnaf", "followers_url": "https://api.github.com/users/avnaf/followers", "following_url": "https://api.github.com/users/avnaf/following{/other_user}", "gists_url": "https://api.github.com/users/avnaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/avnaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avnaf/subscriptions", "organizations_url": "https://api.github.com/users/avnaf/orgs", "repos_url": "https://api.github.com/users/avnaf/repos", "events_url": "https://api.github.com/users/avnaf/events{/privacy}", "received_events_url": "https://api.github.com/users/avnaf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-12T13:20:20Z", "updated_at": "2019-09-23T15:05:40Z", "closed_at": "2019-09-23T15:05:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to run a task with its own output and redirecting (i.e. bash script) there are 2 options:\r\n1) using luigi.task and then opening a subprocess\r\n2) using the contrib option ExternalProgramTask and supplying capture_output flag. This option is boolean, meaning I can either disregard the output or do nothing (i.e. output goes to console). Why isn't there an option for saving the output in a specified file?\r\n\r\ni.e. changing line 129 in [https://github.com/spotify/luigi/blob/master/luigi/contrib/external_program.py#L57](url) to \r\ntmp_stdout, tmp_stderr = self.out, self.err\r\n\r\nwhere out,err are luigi.Parameters", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2706", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2706/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2706/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2706/events", "html_url": "https://github.com/spotify/luigi/issues/2706", "id": 442216836, "node_id": "MDU6SXNzdWU0NDIyMTY4MzY=", "number": 2706, "title": "ReadTheDocs: Not Building", "user": {"login": "dlstadther", "id": 7432199, "node_id": "MDQ6VXNlcjc0MzIxOTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7432199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlstadther", "html_url": "https://github.com/dlstadther", "followers_url": "https://api.github.com/users/dlstadther/followers", "following_url": "https://api.github.com/users/dlstadther/following{/other_user}", "gists_url": "https://api.github.com/users/dlstadther/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlstadther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlstadther/subscriptions", "organizations_url": "https://api.github.com/users/dlstadther/orgs", "repos_url": "https://api.github.com/users/dlstadther/repos", "events_url": "https://api.github.com/users/dlstadther/events{/privacy}", "received_events_url": "https://api.github.com/users/dlstadther/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-09T12:42:56Z", "updated_at": "2019-05-14T09:54:15Z", "closed_at": "2019-05-13T14:57:50Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\n[Luigi hasn't had a success ReadTheDocs build since late December 2018](https://readthedocs.org/projects/luigi/builds/). The last build failed and no builds have attempted since 2018-12-20.\r\n\r\n@Tarrasch @honnix Do either of you have access to that RTD project to investigate further? Or force a new build?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2703", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2703/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2703/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2703/events", "html_url": "https://github.com/spotify/luigi/issues/2703", "id": 441638975, "node_id": "MDU6SXNzdWU0NDE2Mzg5NzU=", "number": 2703, "title": "2.8.4 is broken for the TOML configuration", "user": {"login": "dycw", "id": 10572122, "node_id": "MDQ6VXNlcjEwNTcyMTIy", "avatar_url": "https://avatars0.githubusercontent.com/u/10572122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dycw", "html_url": "https://github.com/dycw", "followers_url": "https://api.github.com/users/dycw/followers", "following_url": "https://api.github.com/users/dycw/following{/other_user}", "gists_url": "https://api.github.com/users/dycw/gists{/gist_id}", "starred_url": "https://api.github.com/users/dycw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dycw/subscriptions", "organizations_url": "https://api.github.com/users/dycw/orgs", "repos_url": "https://api.github.com/users/dycw/repos", "events_url": "https://api.github.com/users/dycw/events{/privacy}", "received_events_url": "https://api.github.com/users/dycw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-08T09:29:34Z", "updated_at": "2019-05-09T00:13:06Z", "closed_at": "2019-05-09T00:13:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Release 2.8.4](https://github.com/spotify/luigi/releases/tag/2.8.4) included [this change set](https://github.com/spotify/luigi/commit/9afc222c5f3497a512ccf6a76cf03b492ded54ec) (which was used to address [#2656](https://github.com/spotify/luigi/pull/2656)). The unfortunate side-effect is that the TOML configuration is now broken:\r\n\r\n`AttributeError: 'LuigiTomlParser' object has no attribute 'has_option'`\r\n\r\nThis arises because unlike the default `LuigiCfgParser`, the former does not inherit from `configparser.ConfigParser`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2698", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2698/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2698/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2698/events", "html_url": "https://github.com/spotify/luigi/issues/2698", "id": 438441504, "node_id": "MDU6SXNzdWU0Mzg0NDE1MDQ=", "number": 2698, "title": "S3 Client doesn't work with TOML configuration", "user": {"login": "liamlundy", "id": 8194608, "node_id": "MDQ6VXNlcjgxOTQ2MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8194608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liamlundy", "html_url": "https://github.com/liamlundy", "followers_url": "https://api.github.com/users/liamlundy/followers", "following_url": "https://api.github.com/users/liamlundy/following{/other_user}", "gists_url": "https://api.github.com/users/liamlundy/gists{/gist_id}", "starred_url": "https://api.github.com/users/liamlundy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liamlundy/subscriptions", "organizations_url": "https://api.github.com/users/liamlundy/orgs", "repos_url": "https://api.github.com/users/liamlundy/repos", "events_url": "https://api.github.com/users/liamlundy/events{/privacy}", "received_events_url": "https://api.github.com/users/liamlundy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-29T18:12:49Z", "updated_at": "2019-09-18T08:38:22Z", "closed_at": "2019-09-18T08:38:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using the TOML configuration, the s3 client breaks.\r\n\r\nTo reproduce, create luigi.toml configuration file and set the `LUIGI_CONFIG_PARSER` environment variables to `toml` and running the following code:\r\n\r\n```\r\nfrom luigi.contrib.s3 import S3Target\r\nS3Target('test_path')\r\n```\r\n\r\nError:\r\n```\r\nae_luigi_worker/tasks/pipeline_mta_model_task.py:43: in output\r\n    return self.upload_task.output()\r\nae_luigi_worker/tasks/pipeline_mta_model_task.py:160: in output\r\n    for output_file in self.run_model_task.output_files]\r\nae_luigi_worker/tasks/pipeline_mta_model_task.py:160: in <listcomp>\r\n    for output_file in self.run_model_task.output_files]\r\n../../../.local/share/virtualenvs/ae/lib/python3.7/site-packages/luigi/contrib/s3.py:673: in __init__\r\n    self.fs = client or S3Client()\r\n../../../.local/share/virtualenvs/ae/lib/python3.7/site-packages/luigi/contrib/s3.py:106: in __init__\r\n    options = self._get_s3_config()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nkey = None\r\n\r\n    @staticmethod\r\n    def _get_s3_config(key=None):\r\n>       defaults = dict(configuration.get_config().defaults())\r\nE       AttributeError: 'LuigiTomlParser' object has no attribute 'defaults'\r\n```\r\n\r\nThis error is occurring at: https://github.com/spotify/luigi/blob/c5eca1c3c3ee2a7eb612486192a0da146710a1e9/luigi/contrib/s3.py#L507 and appears to be due to the fact that the `LuigiTomlParser` doesn't have a defaults method like the standard configuration object. This could be fixed in the s3 client code, but it seems like the interface of the two configuration objects should be standard.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2694", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2694/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2694/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2694/events", "html_url": "https://github.com/spotify/luigi/issues/2694", "id": 433180610, "node_id": "MDU6SXNzdWU0MzMxODA2MTA=", "number": 2694, "title": "Luigi Tasks not failing on custom condition", "user": {"login": "amirkhn33", "id": 37038775, "node_id": "MDQ6VXNlcjM3MDM4Nzc1", "avatar_url": "https://avatars1.githubusercontent.com/u/37038775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amirkhn33", "html_url": "https://github.com/amirkhn33", "followers_url": "https://api.github.com/users/amirkhn33/followers", "following_url": "https://api.github.com/users/amirkhn33/following{/other_user}", "gists_url": "https://api.github.com/users/amirkhn33/gists{/gist_id}", "starred_url": "https://api.github.com/users/amirkhn33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amirkhn33/subscriptions", "organizations_url": "https://api.github.com/users/amirkhn33/orgs", "repos_url": "https://api.github.com/users/amirkhn33/repos", "events_url": "https://api.github.com/users/amirkhn33/events{/privacy}", "received_events_url": "https://api.github.com/users/amirkhn33/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-15T09:25:23Z", "updated_at": "2019-09-21T12:38:44Z", "closed_at": "2019-09-21T12:38:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!---\r\nWe use GitHub issues mainly for tracking bugs and feature requests.\r\nQuestions for how to use luigi can be sent to the mailing list.\r\n\r\nCurrently, there are no strict procedures or guidelines for submitting issues.\r\nIn short, please just use common sense.\r\n\r\nCommon sense includes this at bare-minimum:\r\n\r\n * search for similar issues posted before creating a new issue.\r\n * Use markdown to format all code/logs. Issues which are hard to read\r\n   when rendered on GitHub might be closed with a friendly reminder of this.\r\n * If applicable, reading relevant parts of the documentation.\r\n\r\nAlso, add steps to reproduce the bug, if applicable. Sample code would be nice too :)\r\n\r\nFor more information on how to submit valuable contributions,\r\nsee https://opensource.guide/how-to-contribute/#how-to-submit-a-contribution\r\n-->\r\n\r\nI am trying to load data from text files to PostgreSQL. Code for doing so is written in R and I'm running it from RScript command using subprocess. I've overridden `complete(self)` method to provide a custom condition for Task completion which checks whether or not a new table is created, with a predefined name.\r\n\r\nThe issue I'm facing is that even though `subprocess.call([command, path2script])` fails, Task is getting completed. Also, those tables are not written in the DB, which means Task should fail as the custom condition evaluates to `False`.\r\n```\r\nimport luigi\r\nimport subprocess\r\nfrom sqlalchemy import create_engine\r\n\r\nclass LoadingFiles(luigi.Task):\r\n\r\n    def output(self):\r\n        files_required = [\r\n            luigi.LocalTarget('foo.txt'),\r\n            luigi.LocalTarget('foo2.txt'),\r\n]\r\n        return files_required\r\n\r\n\r\nclass DataLoading(luigi.Task):\r\n\r\n    def __init__(self):\r\n        super(DataLoading, self).__init__()\r\n        self.engine = create_engine('postgresql://user:pwd@127.0.0.0/pg_db')\r\n        self.task_complete = False\r\n\r\n    def complete(self):\r\n        status = self.engine.dialect.has_table(self.engine, 'data_1', schema='automation') and \\\r\n                 self.engine.dialect.has_table(self.engine, 'data_2', schema='automation')\r\n        self.task_complete = status\r\n        return self.task_complete\r\n\r\n    def requires(self):\r\n        LoadingFiles()\r\n\r\n    def run(self):\r\n        command = '/usr/bin/Rscript'\r\n        path2script = '../RScripts/data_loading.R'\r\n        subprocess.call([command, path2script])\r\n\r\nif __name__ == '__main__':\r\n    luigi.run()\r\n```\r\n\r\nI've also tried an alternate way but still result is the same.\r\n```\r\nimport luigi\r\nimport subprocess\r\nfrom sqlalchemy import create_engine\r\n\r\nclass LoadingFiles(luigi.Task):\r\n\r\n    def output(self):\r\n        files_required = [\r\n            luigi.LocalTarget('foo.txt'),\r\n            luigi.LocalTarget('foo2.txt'),\r\n]\r\n        return files_required\r\n\r\n\r\nclass DataLoading(luigi.Task):\r\n\r\n    def __init__(self):\r\n        super(DataLoading, self).__init__()\r\n        self.engine = create_engine('postgresql://user:pwd@127.0.0.0/pg_db')\r\n        self.task_complete = False\r\n\r\n    def output(self):\r\n        return luigi.LocalTarget('Script_01_status.txt')\r\n\r\n    def requires(self):\r\n        LoadingFiles()\r\n\r\n    def run(self):\r\n        command = '/usr/bin/Rscript'\r\n        path2script = '../RScripts/data_loading.R'\r\n        subprocess.call([command, path2script])\r\n\r\n        status = self.engine.dialect.has_table(self.engine, 'data_1', schema='automation') and \\\r\n                 self.engine.dialect.has_table(self.engine, 'data_2', schema='automation')\r\n\r\n        if status:\r\n            with open('Script_01_status.txt', 'w') as wf:\r\n                wf.write(\"Status : Complete\")\r\n\r\nif __name__ == '__main__':\r\n    luigi.run()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2693", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2693/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2693/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2693/events", "html_url": "https://github.com/spotify/luigi/issues/2693", "id": 433008046, "node_id": "MDU6SXNzdWU0MzMwMDgwNDY=", "number": 2693, "title": "Global parameters when workers != 1 not being passed to workers", "user": {"login": "veltzerdoron", "id": 8045446, "node_id": "MDQ6VXNlcjgwNDU0NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8045446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veltzerdoron", "html_url": "https://github.com/veltzerdoron", "followers_url": "https://api.github.com/users/veltzerdoron/followers", "following_url": "https://api.github.com/users/veltzerdoron/following{/other_user}", "gists_url": "https://api.github.com/users/veltzerdoron/gists{/gist_id}", "starred_url": "https://api.github.com/users/veltzerdoron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veltzerdoron/subscriptions", "organizations_url": "https://api.github.com/users/veltzerdoron/orgs", "repos_url": "https://api.github.com/users/veltzerdoron/repos", "events_url": "https://api.github.com/users/veltzerdoron/events{/privacy}", "received_events_url": "https://api.github.com/users/veltzerdoron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-04-14T17:33:18Z", "updated_at": "2020-01-15T20:11:54Z", "closed_at": "2019-10-10T18:38:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure what the status of global parameters (apart from being in the documentation), I tried to use them but since I plan on using palatalization I can't since whenever I use run with workers != 1 the global parameter values don't seem to propagate correctly to the workers (I get the default value for the parameter), I say it doesn't propagate to the workers because if I break the run before the workers are assigned the tasks the values seem to be as passed in the command line.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2690", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2690/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2690/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2690/events", "html_url": "https://github.com/spotify/luigi/issues/2690", "id": 430478162, "node_id": "MDU6SXNzdWU0MzA0NzgxNjI=", "number": 2690, "title": "Debugging luigi in an IDE", "user": {"login": "veltzerdoron", "id": 8045446, "node_id": "MDQ6VXNlcjgwNDU0NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8045446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veltzerdoron", "html_url": "https://github.com/veltzerdoron", "followers_url": "https://api.github.com/users/veltzerdoron/followers", "following_url": "https://api.github.com/users/veltzerdoron/following{/other_user}", "gists_url": "https://api.github.com/users/veltzerdoron/gists{/gist_id}", "starred_url": "https://api.github.com/users/veltzerdoron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veltzerdoron/subscriptions", "organizations_url": "https://api.github.com/users/veltzerdoron/orgs", "repos_url": "https://api.github.com/users/veltzerdoron/repos", "events_url": "https://api.github.com/users/veltzerdoron/events{/privacy}", "received_events_url": "https://api.github.com/users/veltzerdoron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-08T14:18:17Z", "updated_at": "2019-12-09T09:44:12Z", "closed_at": "2019-12-09T09:44:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason in my IDE (pycharm) luigi can't be debugged when the tasks and the luigi.run invocation are in the same module, otherwise I get the following exception from pydev:\r\n\r\n> ERROR: Luigi unexpected framework error while scheduling HelloWorldTask(ident=ide, path=hello_world_files)\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\dv90863\\py3_6_mario\\lib\\site-packages\\luigi\\worker.py\", line 740, in add\r\n    current = queue.get()\r\n  File \"<string>\", line 2, in get\r\n  File \"c:\\program files\\python36\\Lib\\multiprocessing\\managers.py\", line 757, in _callmethod\r\n    kind, result = conn.recv()\r\n  File \"c:\\program files\\python36\\Lib\\multiprocessing\\connection.py\", line 251, in recv\r\n    return _ForkingPickler.loads(buf.getbuffer())\r\nAttributeError: Can't get attribute 'HelloWorldTask' on <module 'pydevd' from 'C:\\\\Program Files\\\\JetBrains\\\\PyCharm Community Edition 2018.3\\\\helpers\\\\pydev\\\\pydevd.py'>\r\nINFO: Worker Worker(salt=339097217, workers=4, host=TLVCMEN000134, username=doroni, pid=10808) was stopped. Shutting down Keep-Alive thread\r\nTraceback (most recent call last):\r\n  File \"C:\\Program Files\\JetBrains\\PyCharm Community Edition 2018.3\\helpers\\pydev\\pydevd.py\", line 1689, in <module>\r\n    main()\r\n  File \"C:\\Program Files\\JetBrains\\PyCharm Community Edition 2018.3\\helpers\\pydev\\pydevd.py\", line 1683, in main\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"C:\\Program Files\\JetBrains\\PyCharm Community Edition 2018.3\\helpers\\pydev\\pydevd.py\", line 1083, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File \"C:\\Program Files\\JetBrains\\PyCharm Community Edition 2018.3\\helpers\\pydev\\_pydev_imps\\_pydev_execfile.py\", line 18, in execfile\r\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\r\n  File \"C:/Users/dv90863/git/mario/demos/hello_world_demo.py\", line 82, in <module>\r\n    main_task_cls=HelloWorldTask)\r\n  File \"C:\\Users\\dv90863\\py3_6_mario\\lib\\site-packages\\luigi\\interface.py\", line 192, in run\r\n    return _run(*args, **kwargs)['success']\r\n  File \"C:\\Users\\dv90863\\py3_6_mario\\lib\\site-packages\\luigi\\interface.py\", line 209, in _run\r\n    return _schedule_and_run([cp.get_task_obj()], worker_scheduler_factory)\r\n  File \"C:\\Users\\dv90863\\py3_6_mario\\lib\\site-packages\\luigi\\interface.py\", line 170, in _schedule_and_run\r\n    success &= worker.add(t, env_params.parallel_scheduling, env_params.parallel_scheduling_processes)\r\n  File \"C:\\Users\\dv90863\\py3_6_mario\\lib\\site-packages\\luigi\\worker.py\", line 740, in add\r\n    current = queue.get()\r\n  File \"<string>\", line 2, in get\r\n  File \"c:\\program files\\python36\\Lib\\multiprocessing\\managers.py\", line 757, in _callmethod\r\n    kind, result = conn.recv()\r\n  File \"c:\\program files\\python36\\Lib\\multiprocessing\\connection.py\", line 251, in recv\r\n    return _ForkingPickler.loads(buf.getbuffer())\r\nAttributeError: Can't get attribute 'HelloWorldTask' on <module 'pydevd' from 'C:\\\\Program Files\\\\JetBrains\\\\PyCharm Community Edition 2018.3\\\\helpers\\\\pydev\\\\pydevd.py'>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2688", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2688/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2688/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2688/events", "html_url": "https://github.com/spotify/luigi/issues/2688", "id": 429492812, "node_id": "MDU6SXNzdWU0Mjk0OTI4MTI=", "number": 2688, "title": "Inconsistent dash/underscore handling and usage in configuration parameters", "user": {"login": "soxofaan", "id": 44946, "node_id": "MDQ6VXNlcjQ0OTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/44946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soxofaan", "html_url": "https://github.com/soxofaan", "followers_url": "https://api.github.com/users/soxofaan/followers", "following_url": "https://api.github.com/users/soxofaan/following{/other_user}", "gists_url": "https://api.github.com/users/soxofaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/soxofaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soxofaan/subscriptions", "organizations_url": "https://api.github.com/users/soxofaan/orgs", "repos_url": "https://api.github.com/users/soxofaan/repos", "events_url": "https://api.github.com/users/soxofaan/events{/privacy}", "received_events_url": "https://api.github.com/users/soxofaan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-04T21:32:55Z", "updated_at": "2019-08-07T07:20:05Z", "closed_at": "2019-08-07T07:20:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was reading through the documentation on Luigi configuration https://luigi.readthedocs.io/en/stable/configuration.html and noticed that there is inconsistent usage of dashes and underscores in the config params. For example under `[core]` there is:\r\n- `default-scheduler-host`, `hdfs-tmp-dir`, `parallel-scheduling-processes`, ...\r\n- `log_level`, `max_reschedules`, `parallel_scheduling`\r\n\r\nI found #2133  and #2160 which replaced a lot of dash-cases with underscore-style, but not everything. However, when I started digging into this I noticed that it's not as simple as \"underscores is recommended, dashes are deprecated\".\r\n\r\nThe luigi core features (e.g. `worker.py` and `scheduler.py`) use the `luigi.task.Config` approach: they make a `Config` subclass with a bunch of luigi parameters to hold the configuration. With this approach both the underscore-style and dash-style keys in configuration files are supported. Dash-style entries in your configuration will however cause DeprecationWarnings.\r\n\r\nOn the other hand, a lot of contrib modules (e.g. hadoop, spark, sqla, ...) use `luigi.configuration.get_config().get()` directly which requires the correct spelling of the parameter name, practically dash-style in all cases. If you would put the parameter in underscore-style in your config file, it would not be picked up.\r\n\r\nTo sum up: officially (core luigi features) undercore-style configs are recommended, but for contrib modules only dash-style works in practice.\r\nThis creates a very confusing experience when you are trying to get your config working as expected.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2687", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2687/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2687/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2687/events", "html_url": "https://github.com/spotify/luigi/issues/2687", "id": 429264809, "node_id": "MDU6SXNzdWU0MjkyNjQ4MDk=", "number": 2687, "title": "Is logging configured before a task __init__ ?", "user": {"login": "arrisonsam4", "id": 49277987, "node_id": "MDQ6VXNlcjQ5Mjc3OTg3", "avatar_url": "https://avatars1.githubusercontent.com/u/49277987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arrisonsam4", "html_url": "https://github.com/arrisonsam4", "followers_url": "https://api.github.com/users/arrisonsam4/followers", "following_url": "https://api.github.com/users/arrisonsam4/following{/other_user}", "gists_url": "https://api.github.com/users/arrisonsam4/gists{/gist_id}", "starred_url": "https://api.github.com/users/arrisonsam4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arrisonsam4/subscriptions", "organizations_url": "https://api.github.com/users/arrisonsam4/orgs", "repos_url": "https://api.github.com/users/arrisonsam4/repos", "events_url": "https://api.github.com/users/arrisonsam4/events{/privacy}", "received_events_url": "https://api.github.com/users/arrisonsam4/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-04T12:58:55Z", "updated_at": "2019-08-16T15:11:54Z", "closed_at": "2019-08-16T15:11:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a luigi.Task and in the `__init__` function, I try to do some logging, but nothing is showing up unless I emit a error or critical message. And, with those messages emitted, it is ignoring my formatter.\r\n\r\nHowever, I can use the same logger in the run function and everything works as normal. info & debug messages show up and the formatter is used.\r\n\r\nAs near as I can tell, my luigi.toml file, which contains the logging configuration, is simply ignored until sometime after the luigi.Task `__init__` is called.\r\n\r\nIs there anything I can do to have the logging configured before my tasks' `__init__` function is called? If not, please consider this a feature request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spotify/luigi/issues/2684", "repository_url": "https://api.github.com/repos/spotify/luigi", "labels_url": "https://api.github.com/repos/spotify/luigi/issues/2684/labels{/name}", "comments_url": "https://api.github.com/repos/spotify/luigi/issues/2684/comments", "events_url": "https://api.github.com/repos/spotify/luigi/issues/2684/events", "html_url": "https://github.com/spotify/luigi/issues/2684", "id": 428433859, "node_id": "MDU6SXNzdWU0Mjg0MzM4NTk=", "number": 2684, "title": "2.7 to 2.8 upgrade path?", "user": {"login": "rayrrr", "id": 7869818, "node_id": "MDQ6VXNlcjc4Njk4MTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7869818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rayrrr", "html_url": "https://github.com/rayrrr", "followers_url": "https://api.github.com/users/rayrrr/followers", "following_url": "https://api.github.com/users/rayrrr/following{/other_user}", "gists_url": "https://api.github.com/users/rayrrr/gists{/gist_id}", "starred_url": "https://api.github.com/users/rayrrr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rayrrr/subscriptions", "organizations_url": "https://api.github.com/users/rayrrr/orgs", "repos_url": "https://api.github.com/users/rayrrr/repos", "events_url": "https://api.github.com/users/rayrrr/events{/privacy}", "received_events_url": "https://api.github.com/users/rayrrr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1009703747, "node_id": "MDU6TGFiZWwxMDA5NzAzNzQ3", "url": "https://api.github.com/repos/spotify/luigi/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-02T20:41:15Z", "updated_at": "2019-09-06T17:48:06Z", "closed_at": "2019-09-06T17:48:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Revisiting familiar territory here. We are using luigi 2.7.6 and tried unsuccessfully some time ago to upgrade to 2.8.x, as reflected in #2507. Now we tried again, and are seeing the same exact error as described in #2535.\r\n\r\nHere is the behavior I'm now seeing with 2.8.3:\r\n\r\n- The UI \"Done Tasks\" tile shows a spinning loading icon, that's it. Examining the JavaScript console reveals a 500 error associated with the `task_list` endpoint.\r\n\r\n- Our actual DAG is running fine. The bug is limited to the Luigi UI.\r\n\r\n- We do use a `state.pickle` file but even after deleting it after upgrading and rebooting the cloud \"server,\" the bug persists.\r\n\r\n\r\nGiven the PR to \"resolve the upgrade issue\" (https://github.com/spotify/luigi/pull/2537) was closed without being merged is there a working upgrade path for existing users to 2.8 at this time? Or should we just stay on 2.7.6 for now?", "performed_via_github_app": null, "score": 1.0}]}