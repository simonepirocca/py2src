{"total_count": 285, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/scikit-hep/uproot/issues/515", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/515/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/515/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/515/events", "html_url": "https://github.com/scikit-hep/uproot/issues/515", "id": 683765896, "node_id": "MDU6SXNzdWU2ODM3NjU4OTY=", "number": 515, "title": "Problem reading TTree because of attribute error", "user": {"login": "casesyh", "id": 28450154, "node_id": "MDQ6VXNlcjI4NDUwMTU0", "avatar_url": "https://avatars0.githubusercontent.com/u/28450154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/casesyh", "html_url": "https://github.com/casesyh", "followers_url": "https://api.github.com/users/casesyh/followers", "following_url": "https://api.github.com/users/casesyh/following{/other_user}", "gists_url": "https://api.github.com/users/casesyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/casesyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/casesyh/subscriptions", "organizations_url": "https://api.github.com/users/casesyh/orgs", "repos_url": "https://api.github.com/users/casesyh/repos", "events_url": "https://api.github.com/users/casesyh/events{/privacy}", "received_events_url": "https://api.github.com/users/casesyh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-21T18:55:58Z", "updated_at": "2020-08-21T19:23:20Z", "closed_at": "2020-08-21T19:23:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n<img width=\"276\" alt=\"Screen Shot 2020-08-21 at 3 01 00 PM\" src=\"https://user-images.githubusercontent.com/28450154/90925606-8c47dd00-e3bf-11ea-8a90-0f92f909a200.png\">\r\n\r\nI was trying to read a tree from a root file, I got the error below. However reading other trees in the same root file was fine.\r\nThanks.\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-26-dab7ced4dbc6> in <module>\r\n      1 path_root_file = '~/TracksAndEvents.root'\r\n      2 f = uproot.open(path_root_file)\r\n----> 3 f['discPoints1D'].keys()\r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/rootio.py in __getitem__(self, name)\r\n    223 \r\n    224     def __getitem__(self, name):\r\n--> 225         return self.get(name)\r\n    226 \r\n    227     def __len__(self):\r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/rootio.py in get(self, name, cycle)\r\n    357 \r\n    358             if last is not None:\r\n--> 359                 return last.get()\r\n    360             elif cycle is None:\r\n    361                 raise _KeyError(\"not found: {0}\\n in file: {1}\".format(repr(name), self._context.sourcepath))\r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/rootio.py in get(self, dismiss)\r\n   1008 \r\n   1009         try:\r\n-> 1010             return _classof(self._context, self._fClassName).read(self._source, self._cursor.copied(), self._context, self)\r\n   1011         finally:\r\n   1012             if dismiss:\r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/rootio.py in read(cls, source, cursor, context, parent)\r\n    948         out = cls.__new__(cls)\r\n    949         out = cls._readinto(out, source, cursor, context, parent)\r\n--> 950         out._postprocess(source, cursor, context, parent)\r\n    951         return out\r\n    952 \r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/tree.py in _postprocess(self, source, cursor, context, parent)\r\n    293         for branch in self.itervalues(recursive=True):\r\n    294             if len(branch._fLeaves) > 0:\r\n--> 295                 branch._countleaf = branch._fLeaves[0]._fLeafCount\r\n    296                 if branch._countleaf is not None:\r\n    297                     branch._countbranch = leaf2branch.get(id(branch._countleaf), None)\r\n\r\nAttributeError: 'Undefined' object has no attribute '_fLeafCount'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/513", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/513/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/513/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/513/events", "html_url": "https://github.com/scikit-hep/uproot/issues/513", "id": 660376571, "node_id": "MDU6SXNzdWU2NjAzNzY1NzE=", "number": 513, "title": "inaccurate / inconsistent reading of ROOT file", "user": {"login": "cshimmin", "id": 605806, "node_id": "MDQ6VXNlcjYwNTgwNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/605806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cshimmin", "html_url": "https://github.com/cshimmin", "followers_url": "https://api.github.com/users/cshimmin/followers", "following_url": "https://api.github.com/users/cshimmin/following{/other_user}", "gists_url": "https://api.github.com/users/cshimmin/gists{/gist_id}", "starred_url": "https://api.github.com/users/cshimmin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cshimmin/subscriptions", "organizations_url": "https://api.github.com/users/cshimmin/orgs", "repos_url": "https://api.github.com/users/cshimmin/repos", "events_url": "https://api.github.com/users/cshimmin/events{/privacy}", "received_events_url": "https://api.github.com/users/cshimmin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-18T20:57:13Z", "updated_at": "2020-07-20T17:41:36Z", "closed_at": "2020-07-20T01:13:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm trying to use uproot to read a ROOT file created by Delphes, and I am seeing some very strange behavior. I've uploaded a small file which demonstrates the issue: [test.root (1.2Mb)](https://drive.google.com/file/d/1t28yYVW7WvJNJFBVoNhjPV3w0PJcefdH/view?usp=sharing). Delphes uses ExRootAnalysis under the hood, which in turn is writing TClonesArrays of particle-like objects to the root file. I'm using ROOT version 6.20/06 to create this sample, and I'm reading the file with uproot v3.11.7 on python 3.6.7.\r\n\r\nWhen I read this file in using the ROOT command line interpreter, everything looks as expected, but I see highly inconsistent results when I load the file with uproot. The first thing I noticed is that the field `fUniqueID` is not read properly by uproot. In this example, each particle's `fUniqueID` happens to be equal to its array index + 1, as can be verified by opening the file in root:\r\n```\r\nroot [1] Delphes->Scan(\"Particle.fUniqueID\")\r\n\r\n***********************************\r\n*    Row   * Instance * Particle. *\r\n***********************************\r\n*        0 *        0 *         1 *\r\n*        0 *        1 *         2 *\r\n*        0 *        2 *         3 *\r\n*        0 *        3 *         4 *\r\n*        0 *        4 *         5 *\r\n*        0 *        5 *         6 *\r\n*        0 *        6 *         7 *\r\n*        0 *        7 *         8 *\r\n*        0 *        8 *         9 *\r\n*        0 *        9 *        10 *\r\n[ .. clipped ...]\r\n```\r\n\r\nHowever, uproot reports 0 for all values in this branch:\r\n```python\r\nf = uproot.open(\"test.root\")\r\nt = f[\"Delphes\"]\r\n(t.array(\"Particle.fUniqueID\") == 0).all().all()\r\n\r\n> True\r\n```\r\n\r\nThis led me to realize that uproot seems to somehow be confused about how may particles there are in each event. This file has a field called `Particle_size`, which is an integer that is set for convenience by the tree writer to indicate the length of the corresponding TClonesArray. However, the values read out by root vs. uproot are wildly different:\r\n\r\n```\r\nroot [1] Delphes->Scan(\"Particle_size\")\r\n\r\n************************\r\n*    Row   * Particle_ *\r\n************************\r\n*        0 *      2519 *\r\n*        1 *      2580 *\r\n*        2 *      1992 *\r\n*        3 *      1848 *\r\n*        4 *      2376 *\r\n*        5 *      1963 *\r\n*        6 *      2300 *\r\n*        7 *      1949 *\r\n*        8 *      2524 *\r\n*        9 *      2685 *\r\n************************\r\n```\r\n\r\nThis result is as expected. But when I try to look at the same branch w/ uproot I get:\r\n\r\n```python\r\nf = uproot.open(\"test.root\")\r\nt = f[\"Delphes\"]\r\nt.array(\"Particle_size\")\r\n\r\n> array([201, 125, 111, 116, 183, 132, 140, 107, 177, 243], dtype=int32)\r\n```\r\n\r\nDigging deeper, I found something even stranger; these incorrect numbers appear to correspond to the length of *some*, but not all of the split branches. For instance, the `Particle.fUniqueID` and `Particle.PT` branches actually do contain far fewer entries than expected:\r\n```python\r\npt = t.array(\"Particle.PT\")\r\nlist(map(len, pt))\r\n\r\n> [201, 125, 111, 116, 183, 132, 140, 107, 177, 243]\r\n```\r\n\r\nHowever, other branches, such as `Particle.PID`, contain the full number of expected entries, in agreement with root:\r\n```python\r\npid =t.array(\"Particle.PID\")\r\nlis(map(len, pid))\r\n\r\n> [2519, 2580, 1992, 1848, 2376, 1963, 2300, 1949, 2524, 2685]\r\n```\r\n\r\nIt gets weirder. While the `fUniqueID` field is just filled with zeros, the `PT` values are nonzero:\r\n```python\r\npt[0,:10]\r\n\r\n> array([26.841331 , 25.875156 , 15.073622 , 13.940983 , 13.5541315,\r\n       13.457675 , 10.314984 ,  9.512343 ,  8.793333 ,  8.770421 ],\r\n      dtype=float32)\r\n```\r\n\r\nand they're sorted in descending order!\r\n```python\r\n(pt[0,:1] > pt[0,1:]).all()\r\n\r\n> True\r\n```\r\n\r\nAlthough there are thousands of particles in the actual event (as when read by root), I did some spot checking and it turns out that at least some of these PT values do actually appear in the event, so they are not just bogus numbers:\r\n\r\n```\r\nroot [2] Delphes->Scan(\"Particle.PT\", \"Particle.PT>8 && Particle.Status==1\")\r\n\r\n***********************************\r\n*    Row   * Instance * Particle. *\r\n***********************************\r\n*        0 *     1627 * 13.554131 *\r\n*        0 *     1820 * 8.7933330 *\r\n*        0 *     1823 * 10.314984 *\r\n*        0 *     1840 * 26.841331 *\r\n*        0 *     1842 * 13.457675 *\r\n*        0 *     1844 * 8.3317794 *\r\n*        0 *     2052 * 15.073621 *\r\n*        0 *     2053 * 8.7704210 *\r\n*        0 *     2366 * 25.875156 *\r\n*        0 *     2510 * 13.940982 *\r\n*        0 *     2511 * 9.5123434 *\r\n```\r\n\r\nI was not able to identify an obvious commonality between these particles, except that at least first ten (and possibly all, I didn't check) are particles with status code = 1 (i.e. stable particles); however, this subset still contains fewer than the expected number of stable particles. It is also maybe not too shocking that the pt is ordered, as I believe Delphes applies in-place sorting of particle arrays at various points during its processing.\r\n\r\n\r\nTo summarize, when I try to read this file with uproot, we have some branches appearing with fewer entries than expected, and in some cases missing/incorrect values. In other cases, the values are not missing, but appear to be a (random?) subset of the expected values, and appearing in a completely different order.\r\n\r\nI don't know a lot about ROOT I/O but I am wondering if this has to do with multiple versions or \"histories\" of the file buffer appearing in the ROOT file? So that perhaps e.g. the 201 particles in the first event at some point were added, and then later the branch got updated with more data, before the event was finalized? It is interesting that the integer `Particle_size` agrees with the size of the incomplete branches. I can point you to [the line where this gets set in ExRootAnalysis](https://github.com/delphes/delphes/blob/master/external/ExRootAnalysis/ExRootTreeBranch.cc#L84): the integer that backs the `*_size` branch is incremented as items are added to the TClonesArray, as opposed to being set by inspecting the length just before Tree.Fill(), so this could explain why the \"partial\" branches agree with the `Particle_size` branch.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/512", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/512/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/512/events", "html_url": "https://github.com/scikit-hep/uproot/issues/512", "id": 658664810, "node_id": "MDU6SXNzdWU2NTg2NjQ4MTA=", "number": 512, "title": "Support boost_histogram 0.10.0", "user": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T23:34:23Z", "updated_at": "2020-07-16T23:35:43Z", "closed_at": "2020-07-16T23:35:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In https://github.com/scikit-hep/boost-histogram/issues/410, @HDembinski requested that I add an underscore to `sum_of_weighted_deltas_squared`, and this has broken Uproot's `to_boost()` method on TProfiles.\r\n\r\nNow when reading a TProfile, we get the error:\r\n\r\n```\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-10-d946cc02fe81> in <module>\r\n----> 1 mplhep.histplot(rfile['hprof;1'].to_boost())\r\n\r\n/usr/local/Caskroom/miniconda/base/envs/bh-talk/lib/python3.8/site-packages/uproot4/behaviors/TProfile.py in to_boost(self)\r\n    178         view.sum_of_weights_squared\r\n    179         view.value = values\r\n--> 180         view.sum_of_weighted_deltas_squared\r\n    181 \r\n    182         raise NotImplementedError(repr(self))\r\n\r\nAttributeError: 'WeightedMeanView' object has no attribute 'sum_of_weighted_deltas_squared'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/509", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/509/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/509/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/509/events", "html_url": "https://github.com/scikit-hep/uproot/issues/509", "id": 656204128, "node_id": "MDU6SXNzdWU2NTYyMDQxMjg=", "number": 509, "title": "Cannot open TTree with branches consisting of unsigned integers", "user": {"login": "harringtonh", "id": 54288976, "node_id": "MDQ6VXNlcjU0Mjg4OTc2", "avatar_url": "https://avatars1.githubusercontent.com/u/54288976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harringtonh", "html_url": "https://github.com/harringtonh", "followers_url": "https://api.github.com/users/harringtonh/followers", "following_url": "https://api.github.com/users/harringtonh/following{/other_user}", "gists_url": "https://api.github.com/users/harringtonh/gists{/gist_id}", "starred_url": "https://api.github.com/users/harringtonh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harringtonh/subscriptions", "organizations_url": "https://api.github.com/users/harringtonh/orgs", "repos_url": "https://api.github.com/users/harringtonh/repos", "events_url": "https://api.github.com/users/harringtonh/events{/privacy}", "received_events_url": "https://api.github.com/users/harringtonh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-13T22:59:16Z", "updated_at": "2020-07-14T17:23:19Z", "closed_at": "2020-07-14T17:23:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/54288976/87361274-b1c00c00-c520-11ea-80ab-011e1326ced2.png)\r\nWhen I open a ROOT file I am able to open all of the TTrees except for one, for which I get the above error. However TBrowser is able to open the tree without any problems. I read the earlier issue thread regarding streamers which looked very similar. If this is the same issue, is there a way to ensure while writing a tree that the correct streamers get attached? Thank you in advance for any help.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/504", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/504/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/504/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/504/events", "html_url": "https://github.com/scikit-hep/uproot/issues/504", "id": 654063959, "node_id": "MDU6SXNzdWU2NTQwNjM5NTk=", "number": 504, "title": "XRootD opened files not properly closed", "user": {"login": "nikoladze", "id": 3707225, "node_id": "MDQ6VXNlcjM3MDcyMjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3707225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikoladze", "html_url": "https://github.com/nikoladze", "followers_url": "https://api.github.com/users/nikoladze/followers", "following_url": "https://api.github.com/users/nikoladze/following{/other_user}", "gists_url": "https://api.github.com/users/nikoladze/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikoladze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikoladze/subscriptions", "organizations_url": "https://api.github.com/users/nikoladze/orgs", "repos_url": "https://api.github.com/users/nikoladze/repos", "events_url": "https://api.github.com/users/nikoladze/events{/privacy}", "received_events_url": "https://api.github.com/users/nikoladze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "chrisburr", "id": 5220533, "node_id": "MDQ6VXNlcjUyMjA1MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5220533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisburr", "html_url": "https://github.com/chrisburr", "followers_url": "https://api.github.com/users/chrisburr/followers", "following_url": "https://api.github.com/users/chrisburr/following{/other_user}", "gists_url": "https://api.github.com/users/chrisburr/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisburr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisburr/subscriptions", "organizations_url": "https://api.github.com/users/chrisburr/orgs", "repos_url": "https://api.github.com/users/chrisburr/repos", "events_url": "https://api.github.com/users/chrisburr/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisburr/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "chrisburr", "id": 5220533, "node_id": "MDQ6VXNlcjUyMjA1MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5220533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisburr", "html_url": "https://github.com/chrisburr", "followers_url": "https://api.github.com/users/chrisburr/followers", "following_url": "https://api.github.com/users/chrisburr/following{/other_user}", "gists_url": "https://api.github.com/users/chrisburr/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisburr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisburr/subscriptions", "organizations_url": "https://api.github.com/users/chrisburr/orgs", "repos_url": "https://api.github.com/users/chrisburr/repos", "events_url": "https://api.github.com/users/chrisburr/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisburr/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2020-07-09T13:32:23Z", "updated_at": "2020-07-24T13:44:41Z", "closed_at": "2020-07-24T13:44:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "When i open a file via xrootd it doesn't seem to properly close after calling `ROOTDirectory.close` - only after deleting, it sends the close command:\r\n\r\n```sh\r\n$ export XRD_LOGLEVEL=Debug\r\n$ python\r\n>>> import uproot\r\n>>> uproot.__version__\r\n'3.11.7'\r\n>>> f = uproot.open(\"root://eospublic.cern.ch//eos/opendata/atlas/OutreachDatasets/2020-01-22/GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root\")\r\n[lots of output]\r\n[2020-07-09 15:23:25.469776 +0200][Debug  ][File              ] [0x46e61eb0@root://eospublic.cern.ch:1094//eos/opendata/atlas/OutreachDatasets/2020-01-22/GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root?xrdcl.requuid=d84e01e1-ade7-4bc2-8632-ae2607ab9d72] Sending a read command for handle 0x0 to st-096-dd904rx8.cern.ch:1095\r\n[2020-07-09 15:23:25.469816 +0200][Debug  ][ExDbgMsg          ] [st-096-dd904rx8.cern.ch:1095] MsgHandler created: 0x47154b40 (message: kXR_read (handle: 0x00000000, offset: 156237824, size: 1048576) ).\r\n[2020-07-09 15:23:25.469908 +0200][Debug  ][ExDbgMsg          ] [st-096-dd904rx8.cern.ch:1095] Moving MsgHandler: 0x47154b40 (message: kXR_read (handle: 0x00000000, offset: 156237824, size: 1048576) ) from out-queu to in-queue.\r\n[2020-07-09 15:23:25.634958 +0200][Debug  ][ExDbgMsg          ] [st-096-dd904rx8.cern.ch:1095] Calling MsgHandler: 0x47154b40 (message: kXR_read (handle: 0x00000000, offset: 156237824, size: 1048576) ) with status: [SUCCESS] .\r\n[2020-07-09 15:23:25.635105 +0200][Debug  ][ExDbgMsg          ] [st-096-dd904rx8.cern.ch:1095] Destroying MsgHandler: 0x47154b40.\r\n>>> f.close() # no debug output after this\r\n>>> del f\r\n2020-07-09 15:24:37.946056 +0200][Debug  ][File              ] [0x46e61eb0@root://eospublic.cern.ch:1094//eos/opendata/atlas/OutreachDatasets/2020-01-22/GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root?xrdcl.requuid=d84e01e1-ade7-4bc2-8632-ae2607ab9d72] Sending a close command for handle 0x0 to st-096-dd904rx8.cern.ch:1095\r\n[2020-07-09 15:24:37.946226 +0200][Debug  ][ExDbgMsg          ] [st-096-dd904rx8.cern.ch:1095] MsgHandler created: 0x47144f10 (message: kXR_close (handle: 0x00000000) ).\r\n[2020-07-09 15:24:37.946531 +0200][Debug  ][ExDbgMsg          ] [st-096-dd904rx8.cern.ch:1095] Moving MsgHandler: 0x47144f10 (message: kXR_close (handle: 0x00000000) ) from out-queu to in-queue.\r\n[2020-07-09 15:24:37.964924 +0200][Debug  ][ExDbgMsg          ] [st-096-dd904rx8.cern.ch:1095] Calling MsgHandler: 0x47144f10 (message: kXR_close (handle: 0x00000000) ) with status: [SUCCESS] .\r\n[2020-07-09 15:24:37.965020 +0200][Debug  ][File              ] [0x46e61eb0@root://eospublic.cern.ch:1094//eos/opendata/atlas/OutreachDatasets/2020-01-22/GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root?xrdcl.requuid=d84e01e1-ade7-4bc2-8632-ae2607ab9d72] Close returned from st-096-dd904rx8.cern.ch:1095 with: [SUCCESS]\r\n[2020-07-09 15:24:37.965067 +0200][Debug  ][ExDbgMsg          ] [st-096-dd904rx8.cern.ch:1095] Destroying MsgHandler: 0x47144f10.\r\n>>> exit() # interestingly there is further output for closing sockets after this, but that might be a feature of pyxrootd\r\n[2020-07-09 15:25:50.170498 +0200][Debug  ][JobMgr            ] Stopping the job manager...\r\n[2020-07-09 15:25:50.170952 +0200][Debug  ][JobMgr            ] Job manager stopped\r\n[2020-07-09 15:25:50.170978 +0200][Debug  ][TaskMgr           ] Stopping the task manager...\r\n[2020-07-09 15:25:50.171118 +0200][Debug  ][TaskMgr           ] Task manager stopped\r\n[2020-07-09 15:25:50.171138 +0200][Debug  ][Poller            ] Stopping the poller...\r\n[2020-07-09 15:25:50.171207 +0200][Debug  ][TaskMgr           ] Requesting unregistration of: \"TickGeneratorTask for: eospublic.cern.ch:1094\"\r\n[2020-07-09 15:25:50.171224 +0200][Debug  ][AsyncSock         ] [eospublic.cern.ch:1094 #0.0] Closing the socket\r\n[2020-07-09 15:25:50.171234 +0200][Debug  ][Poller            ] <[::ffff:10.153.234.167]:48056><--><[::ffff:188.184.38.74]:1094> Removing socket from the poller\r\n[2020-07-09 15:25:50.171267 +0200][Debug  ][PostMaster        ] [eospublic.cern.ch:1094 #0] Destroying stream\r\n[2020-07-09 15:25:50.171275 +0200][Debug  ][AsyncSock         ] [eospublic.cern.ch:1094 #0.0] Closing the socket\r\n[2020-07-09 15:25:50.171287 +0200][Debug  ][TaskMgr           ] Requesting unregistration of: \"TickGeneratorTask for: st-096-dd904rx8.cern.ch:1095\"\r\n[2020-07-09 15:25:50.171294 +0200][Debug  ][AsyncSock         ] [st-096-dd904rx8.cern.ch:1095 #0.0] Closing the socket\r\n[2020-07-09 15:25:50.171300 +0200][Debug  ][Poller            ] <[::ffff:10.153.234.167]:44330><--><[::ffff:128.142.49.73]:1095> Removing socket from the poller\r\n[2020-07-09 15:25:50.171314 +0200][Debug  ][PostMaster        ] [st-096-dd904rx8.cern.ch:1095 #0] Destroying stream\r\n[2020-07-09 15:25:50.171321 +0200][Debug  ][AsyncSock         ] [st-096-dd904rx8.cern.ch:1095 #0.0] Closing the socket\r\n```\r\n\r\nSimilarly with the context manager:\r\n\r\n```\r\nwith uproot.open(\"root://eospublic.cern.ch//eos/opendata/atlas/OutreachDatasets/2020-01-22/GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root\") as f:\r\n...     pass\r\n...\r\n[lots of output]\r\n[2020-07-09 15:28:47.782148 +0200][Debug  ][File              ] [0xa9c3710@root://eospublic.cern.ch:1094//eos/opendata/atlas/OutreachDatasets/2020-01-22/GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root?xrdcl.requuid=595355b1-4cac-4e74-9d2c-4e1ebbb233da] Sending a read command for handle 0x0 to st-048-cc819a2a.cern.ch:1095\r\n[2020-07-09 15:28:47.782194 +0200][Debug  ][ExDbgMsg          ] [st-048-cc819a2a.cern.ch:1095] MsgHandler created: 0xabd1750 (message: kXR_read (handle: 0x00000000, offset: 156237824, size: 1048576) ).\r\n[2020-07-09 15:28:47.782302 +0200][Debug  ][ExDbgMsg          ] [st-048-cc819a2a.cern.ch:1095] Moving MsgHandler: 0xabd1750 (message: kXR_read (handle: 0x00000000, offset: 156237824, size: 1048576) ) from out-queu to in-queue.\r\n[2020-07-09 15:28:48.116592 +0200][Debug  ][ExDbgMsg          ] [st-048-cc819a2a.cern.ch:1095] Calling MsgHandler: 0xabd1750 (message: kXR_read (handle: 0x00000000, offset: 156237824, size: 1048576) ) with status: [SUCCESS] .\r\n[2020-07-09 15:28:48.116711 +0200][Debug  ][ExDbgMsg          ] [st-048-cc819a2a.cern.ch:1095] Destroying MsgHandler: 0xabd1750.\r\n>>> f.close() # no debug output after this\r\n>>> del f\r\n[2020-07-09 15:29:44.512478 +0200][Debug  ][File              ] [0xa9c3710@root://eospublic.cern.ch:1094//eos/opendata/atlas/OutreachDatasets/2020-01-22/GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root?xrdcl.requuid=595355b1-4cac-4e74-9d2c-4e1ebbb233da] Sending a close command for handle 0x0 to st-048-cc819a2a.cern.ch:1095\r\n[2020-07-09 15:29:44.512636 +0200][Debug  ][ExDbgMsg          ] [st-048-cc819a2a.cern.ch:1095] MsgHandler created: 0xabcea30 (message: kXR_close (handle: 0x00000000) ).\r\n[2020-07-09 15:29:44.512896 +0200][Debug  ][ExDbgMsg          ] [st-048-cc819a2a.cern.ch:1095] Moving MsgHandler: 0xabcea30 (message: kXR_close (handle: 0x00000000) ) from out-queu to in-queue.\r\n[2020-07-09 15:29:44.531135 +0200][Debug  ][ExDbgMsg          ] [st-048-cc819a2a.cern.ch:1095] Calling MsgHandler: 0xabcea30 (message: kXR_close (handle: 0x00000000) ) with status: [SUCCESS] .\r\n[2020-07-09 15:29:44.531238 +0200][Debug  ][File              ] [0xa9c3710@root://eospublic.cern.ch:1094//eos/opendata/atlas/OutreachDatasets/2020-01-22/GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root?xrdcl.requuid=595355b1-4cac-4e74-9d2c-4e1ebbb233da] Close returned from st-048-cc819a2a.cern.ch:1095 with: [SUCCESS]\r\n[2020-07-09 15:29:44.531340 +0200][Debug  ][ExDbgMsg          ] [st-048-cc819a2a.cern.ch:1095] Destroying MsgHandler: 0xabcea30.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/503", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/503/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/503/events", "html_url": "https://github.com/scikit-hep/uproot/issues/503", "id": 652090680, "node_id": "MDU6SXNzdWU2NTIwOTA2ODA=", "number": 503, "title": "Slow reading later entries from file", "user": {"login": "romanovzky", "id": 7794475, "node_id": "MDQ6VXNlcjc3OTQ0NzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/7794475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romanovzky", "html_url": "https://github.com/romanovzky", "followers_url": "https://api.github.com/users/romanovzky/followers", "following_url": "https://api.github.com/users/romanovzky/following{/other_user}", "gists_url": "https://api.github.com/users/romanovzky/gists{/gist_id}", "starred_url": "https://api.github.com/users/romanovzky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romanovzky/subscriptions", "organizations_url": "https://api.github.com/users/romanovzky/orgs", "repos_url": "https://api.github.com/users/romanovzky/repos", "events_url": "https://api.github.com/users/romanovzky/events{/privacy}", "received_events_url": "https://api.github.com/users/romanovzky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-07T07:51:45Z", "updated_at": "2020-07-20T14:11:12Z", "closed_at": "2020-07-20T14:11:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI have a `ROOT` file with 1179372 objects (`TH2D`). I first open it with `uproot.rootio.open`\r\n\r\n```python\r\nfile = uproot.rootio.open(FILE_PATH)\r\n```\r\nwhich takes around 1 minute, which is not super fast but acceptable. I then noticed that processing the lines was getting slower and slower as it went from the beginning to the end and decided to investigate it further\r\n\r\n```python\r\nfirst_key = b'Sample_10000002;1' #  This is the first TH2D\r\nlast_key = b'SamplePt_11099962;1' # This is the last TH2D\r\n\r\n%%timeit\r\nfile[first_key]\r\n626 \u00b5s \u00b1 1.99 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n\r\n%%timeit\r\nfile[last_key]\r\n189 ms \u00b1 12.2 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\r\n```\r\nSo there is almost 3 orders of magnitude degradation in I/O reading for later entries of the file.\r\n\r\nIs this expected behaviour? What should I do to mitigate this issue?\r\n\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/500", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/500/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/500/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/500/events", "html_url": "https://github.com/scikit-hep/uproot/issues/500", "id": 644377631, "node_id": "MDU6SXNzdWU2NDQzNzc2MzE=", "number": 500, "title": "Continued need for use of tostring() in codebase?", "user": {"login": "matthewfeickert", "id": 5142394, "node_id": "MDQ6VXNlcjUxNDIzOTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5142394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewfeickert", "html_url": "https://github.com/matthewfeickert", "followers_url": "https://api.github.com/users/matthewfeickert/followers", "following_url": "https://api.github.com/users/matthewfeickert/following{/other_user}", "gists_url": "https://api.github.com/users/matthewfeickert/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewfeickert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewfeickert/subscriptions", "organizations_url": "https://api.github.com/users/matthewfeickert/orgs", "repos_url": "https://api.github.com/users/matthewfeickert/repos", "events_url": "https://api.github.com/users/matthewfeickert/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewfeickert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142275, "node_id": "MDU6TGFiZWw2ODcxNDIyNzU=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/question", "name": "question", "color": "fff572", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-24T07:13:30Z", "updated_at": "2020-07-09T11:42:29Z", "closed_at": "2020-07-07T13:21:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In the `pyhf` test logs for [`tests/test_import.py`](https://github.com/scikit-hep/pyhf/blob/03b227373b3f893eb501178c3613e0919d5198d8/tests/test_import.py) we're seeing a lot of (harmless) warnings of \r\n\r\n```\r\n/opt/hostedtoolcache/Python/3.8.3/x64/lib/python3.8/site-packages/uproot/source/cursor.py:73: DeprecationWarning: tostring() is deprecated. Use tobytes() instead.\r\nreturn source.data(start, stop).tostring()\r\n```\r\n\r\nwhere the offending function is\r\n\r\nhttps://github.com/scikit-hep/uproot/blob/634667fad826ec6c86e2df442887b1024c2cfee8/uproot/source/cursor.py#L63-L73\r\n\r\nIs there an explicit need for this still in the codebase? If no, would a PR to switch it over be of interest, or should any contributions be left for `uproot4`?\r\n\r\ncc @lukasheinrich @kratsg ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/499", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/499/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/499/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/499/events", "html_url": "https://github.com/scikit-hep/uproot/issues/499", "id": 643009903, "node_id": "MDU6SXNzdWU2NDMwMDk5MDM=", "number": 499, "title": "Value too large for lazyarray", "user": {"login": "bdrum", "id": 16210997, "node_id": "MDQ6VXNlcjE2MjEwOTk3", "avatar_url": "https://avatars1.githubusercontent.com/u/16210997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdrum", "html_url": "https://github.com/bdrum", "followers_url": "https://api.github.com/users/bdrum/followers", "following_url": "https://api.github.com/users/bdrum/following{/other_user}", "gists_url": "https://api.github.com/users/bdrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdrum/subscriptions", "organizations_url": "https://api.github.com/users/bdrum/orgs", "repos_url": "https://api.github.com/users/bdrum/repos", "events_url": "https://api.github.com/users/bdrum/events{/privacy}", "received_events_url": "https://api.github.com/users/bdrum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-22T12:00:09Z", "updated_at": "2020-06-22T13:41:08Z", "closed_at": "2020-06-22T13:41:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\nFirst of all many thanks for the nice tool!\r\n\r\nI've got such error when try to use lazyarray instead of just array:\r\n\r\nSuch code\r\n~~~\r\nevents = uproot.open(UPCFiles.ccup9_2015_win)['events']\r\ndata = events.lazyarrays(\"*\") \r\ndata[\"HasPointOnITSLayer0\"]\r\n~~~\r\n\r\nhas provided to me the error:\r\n\r\n~~~\r\nValueError                                Traceback (most recent call last)\r\nC:\\Python38\\lib\\site-packages\\IPython\\core\\formatters.py in __call__(self, obj)\r\n    700                 type_pprinters=self.type_printers,\r\n    701                 deferred_pprinters=self.deferred_printers)\r\n--> 702             printer.pretty(obj)\r\n    703             printer.flush()\r\n    704             return stream.getvalue()\r\n\r\nC:\\Python38\\lib\\site-packages\\IPython\\lib\\pretty.py in pretty(self, obj)\r\n    392                         if cls is not object \\\r\n    393                                 and callable(cls.__dict__.get('__repr__')):\r\n--> 394                             return _repr_pprint(obj, self, cycle)\r\n    395 \r\n    396             return _default_pprint(obj, self, cycle)\r\n\r\nC:\\Python38\\lib\\site-packages\\IPython\\lib\\pretty.py in _repr_pprint(obj, p, cycle)\r\n    698     \"\"\"A pprint that just redirects to the normal repr function.\"\"\"\r\n    699     # Find newlines and replace them with p.break_()\r\n--> 700     output = repr(obj)\r\n    701     lines = output.splitlines()\r\n    702     with p.group():\r\n\r\nC:\\Python38\\lib\\site-packages\\awkward\\array\\base.py in __repr__(self)\r\n    109 \r\n    110     def __repr__(self):\r\n--> 111         return \"<{0} {1} at 0x{2:012x}>\".format(self.__class__.__name__, str(self), id(self))\r\n    112 \r\n    113     @property\r\n\r\nC:\\Python38\\lib\\site-packages\\awkward\\array\\chunked.py in __str__(self)\r\n    271     def __str__(self):\r\n    272         if self.chunksizesknown:\r\n--> 273             return super(ChunkedArray, self).__str__()\r\n    274         else:\r\n    275             strs = [self._util_arraystr(x) for x in self[:7].__iter__(checkiter=False)]\r\n\r\nC:\\Python38\\lib\\site-packages\\awkward\\array\\base.py in __str__(self)\r\n    102             if isinstance(first, AwkwardArray):\r\n    103                 first = first.__iter__(checkiter=False)\r\n--> 104             last = self[-3:]\r\n    105             if isinstance(first, AwkwardArray):\r\n    106                 last = last.__iter__(checkiter=False)\r\n\r\nC:\\Python38\\lib\\site-packages\\awkward\\array\\chunked.py in __getitem__(self, where)\r\n    426 \r\n    427                 # add a sliced chunk\r\n--> 428                 chunk = self._chunks[chunkid][(slice(local_start, local_stop, step),)]\r\n    429                 if len(chunk) > 0:\r\n    430                     chunk = chunk[(slice(None),) + tail]\r\n\r\nC:\\Python38\\lib\\site-packages\\awkward\\array\\virtual.py in __getitem__(self, where)\r\n    367 \r\n    368     def __getitem__(self, where):\r\n--> 369         return self.array[where]\r\n    370 \r\n    371     def __setitem__(self, where, what):\r\n\r\nC:\\Python38\\lib\\site-packages\\awkward\\array\\virtual.py in array(self)\r\n    293         if self._array is None:\r\n    294             # states (1) and (3)\r\n--> 295             return self.materialize()\r\n    296 \r\n    297         elif self._cache is None:\r\n\r\nC:\\Python38\\lib\\site-packages\\awkward\\array\\virtual.py in materialize(self)\r\n    324 \r\n    325     def materialize(self):\r\n--> 326         array = self._util_toarray(self._generator(*self._args, **self._kwargs), self.DEFAULTTYPE)\r\n    327         if self._setitem is not None:\r\n    328             for n, x in self._setitem.items():\r\n\r\nC:\\Python38\\lib\\site-packages\\uproot\\tree.py in __call__(self, branch, entrystart, entrystop)\r\n   1916 \r\n   1917     def __call__(self, branch, entrystart, entrystop):\r\n-> 1918         return self.tree[branch].array(interpretation=self.interpretation[branch], entrystart=entrystart, entrystop=entrystop, flatten=self.flatten, awkwardlib=self.awkwardlib, cache=None, basketcache=self.basketcache, keycache=self.keycache, executor=self.executor)\r\n   1919 \r\n   1920 class _LazyBranch(object):\r\n\r\nC:\\Python38\\lib\\site-packages\\uproot\\tree.py in array(self, interpretation, entrystart, entrystop, flatten, awkwardlib, cache, basketcache, keycache, executor, blocking)\r\n   1432         if executor is None:\r\n   1433             for j in range(basketstop - basketstart):\r\n-> 1434                 _delayedraise(fill(j))\r\n   1435             excinfos = ()\r\n   1436         else:\r\n\r\nC:\\Python38\\lib\\site-packages\\uproot\\tree.py in _delayedraise(excinfo)\r\n     57             exec(\"raise cls, err, trc\")\r\n     58         else:\r\n---> 59             raise err.with_traceback(trc)\r\n     60 \r\n     61 def _filename_explode(x):\r\n\r\nC:\\Python38\\lib\\site-packages\\uproot\\tree.py in fill(j)\r\n   1400                 i = j + basketstart\r\n   1401                 local_entrystart, local_entrystop = self._localentries(i, entrystart, entrystop)\r\n-> 1402                 source = self._basket(i, interpretation, local_entrystart, local_entrystop, awkward, basketcache, keycache)\r\n   1403 \r\n   1404                 expecteditems = basket_itemoffset[j + 1] - basket_itemoffset[j]\r\n\r\nC:\\Python38\\lib\\site-packages\\uproot\\tree.py in _basket(self, i, interpretation, local_entrystart, local_entrystop, awkward, basketcache, keycache)\r\n   1186 \r\n   1187         if basketcache is not None:\r\n-> 1188             basketcache[basketcachekey] = basketdata\r\n   1189 \r\n   1190         if key._fObjlen == key.border:\r\n\r\nC:\\Python38\\lib\\site-packages\\uproot\\cache.py in __setitem__(self, where, what)\r\n     65     def __setitem__(self, where, what):\r\n     66         with self._lock:\r\n---> 67             self._cache[where] = what\r\n     68 \r\n     69     def __delitem__(self, where):\r\n\r\nC:\\Python38\\lib\\site-packages\\cachetools\\lru.py in __setitem__(self, key, value, cache_setitem)\r\n     17 \r\n     18     def __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\r\n---> 19         cache_setitem(self, key, value)\r\n     20         self.__update(key)\r\n     21 \r\n\r\nC:\\Python38\\lib\\site-packages\\cachetools\\cache.py in __setitem__(self, key, value)\r\n     45         size = self.getsizeof(value)\r\n     46         if size > maxsize:\r\n---> 47             raise ValueError('value too large')\r\n     48         if key not in self.__data or self.__size[key] < size:\r\n     49             while self.__currsize + size > maxsize:\r\n\r\nValueError: value too large\r\n~~~\r\n\r\nI've found out that in case of I added the index like that:\r\n\r\n~~~\r\ndata[\"HasPointOnITSLayer0\"][0]\r\narray([   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n          0,    0,    0,    0,    0,    1, 1717, 1717, 1717, 1717, 1717,\r\n       1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,\r\n       1717, 1717, 1717,  ....\r\n~~~\r\n\r\nIt works, but I would like to work without indexes as in numpy style, I mean masked array:\r\nSomething like this:\r\n~~~\r\npt = data[\"Pt\"][data[\"HasPointOnITSLayer0\"] == 1]\r\n~~~\r\n\r\nJust for the info I have **1 135 259** events and this branch (HasPointOnITSLayer0) has such description **asdtype(\"('>i4', (177,))\")**.\r\n\r\nI will use this issue also for asking a question about performance features:\r\n\r\nActually this tree works fine without any special features e.g. dask, lazy array and so on,\r\nbut I have another one that 8x times greater. \r\n\r\nThis is the reason why I've started to use lazy arrays, but perhaps someone could advice me some 'the best practice' scheme for working with such data volumes, because just arrays \r\n1. takes all my memory \r\n2. slow. e.g. via root rdataframe I able to process 10Gb files for 1 minute, but I don't have background in python and as I understood I have to use multiprocessing module. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/496", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/496/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/496/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/496/events", "html_url": "https://github.com/scikit-hep/uproot/issues/496", "id": 637096671, "node_id": "MDU6SXNzdWU2MzcwOTY2NzE=", "number": 496, "title": "Reading CMS open data", "user": {"login": "pierinim", "id": 2368916, "node_id": "MDQ6VXNlcjIzNjg5MTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2368916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierinim", "html_url": "https://github.com/pierinim", "followers_url": "https://api.github.com/users/pierinim/followers", "following_url": "https://api.github.com/users/pierinim/following{/other_user}", "gists_url": "https://api.github.com/users/pierinim/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierinim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierinim/subscriptions", "organizations_url": "https://api.github.com/users/pierinim/orgs", "repos_url": "https://api.github.com/users/pierinim/repos", "events_url": "https://api.github.com/users/pierinim/events{/privacy}", "received_events_url": "https://api.github.com/users/pierinim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-11T15:11:14Z", "updated_at": "2020-06-12T14:27:25Z", "closed_at": "2020-06-12T14:27:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use uproot to read CMS open data. Everything works ok, except when I try to access the auxiliary information \r\n\r\nimport uproot as ur \r\n\r\nf = ur.open(\"root://eospublic.cern.ch//eos/opendata/cms/Run2012B/DoubleMuParked/AOD/22Jan2013-v1/20000/0A9D2B29-9067-E211-842B-0025905280BE.root\")\r\nevt = f.get(\"Events\")\r\nd = evt.get(\"EventAuxiliary\")\r\n\r\nprint(d.keys())\r\n[]\r\n\r\nI am using Python 2.7.15+ from within CMSSW_10_6_2. \r\n\r\nAny idea of what I might be doing wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/495", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/495/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/495/events", "html_url": "https://github.com/scikit-hep/uproot/issues/495", "id": 635530454, "node_id": "MDU6SXNzdWU2MzU1MzA0NTQ=", "number": 495, "title": "uproot 3.11.7 fails to read branch with AssertionError", "user": {"login": "davehadley", "id": 9845034, "node_id": "MDQ6VXNlcjk4NDUwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9845034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davehadley", "html_url": "https://github.com/davehadley", "followers_url": "https://api.github.com/users/davehadley/followers", "following_url": "https://api.github.com/users/davehadley/following{/other_user}", "gists_url": "https://api.github.com/users/davehadley/gists{/gist_id}", "starred_url": "https://api.github.com/users/davehadley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davehadley/subscriptions", "organizations_url": "https://api.github.com/users/davehadley/orgs", "repos_url": "https://api.github.com/users/davehadley/repos", "events_url": "https://api.github.com/users/davehadley/events{/privacy}", "received_events_url": "https://api.github.com/users/davehadley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-09T15:20:48Z", "updated_at": "2020-06-09T19:29:53Z", "closed_at": "2020-06-09T19:29:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "uproot fails to read a branch raising an `AssertionError` from numerical.py line 159.\r\nThe branch contains an std::vector containing a custom object inheriting from TObject that contains 3 primitives (1 int, 1 float and 1 double).\r\n\r\nThe branch interpretation appears to be correct (although I notice that it sets the fBits and fUniqueID to 8 byte rather than the 4 byte that I was expecting). \r\n\r\n```python\r\nimport uproot\r\n\r\nprint(uproot.__version__) # prints: 3.11.7\r\n\r\nrootfile = uproot.open(\"example.root\")\r\nbranch = rootfile[\"T\"][\"ev.pmt\"]\r\n\r\nprint(branch.interpretation) # prints: asjagged(astable(asdtype(\"[(' fBits', '>u8'), (' fUniqueID', '>u8'), ('id', '>i4'), ('charge', '>f4'), ('time', '>f8')]\", \"[('id', '<i4'), ('charge', '<f4'), ('time', '<f8')]\")), 10)\r\n\r\nbranch.array() # raises: AssertionError (coming from assert reminder ==0 in uproot/interp/numerical.py line 159\r\n```\r\n\r\nAn example ROOT file is stored in [example-root.zip](https://github.com/scikit-hep/uproot/files/4752970/example-root.zip).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/494", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/494/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/494/events", "html_url": "https://github.com/scikit-hep/uproot/issues/494", "id": 634543728, "node_id": "MDU6SXNzdWU2MzQ1NDM3Mjg=", "number": 494, "title": "Missing interpretation for std::map<std::string, TVector3>", "user": {"login": "chernals", "id": 1025745, "node_id": "MDQ6VXNlcjEwMjU3NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1025745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chernals", "html_url": "https://github.com/chernals", "followers_url": "https://api.github.com/users/chernals/followers", "following_url": "https://api.github.com/users/chernals/following{/other_user}", "gists_url": "https://api.github.com/users/chernals/gists{/gist_id}", "starred_url": "https://api.github.com/users/chernals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chernals/subscriptions", "organizations_url": "https://api.github.com/users/chernals/orgs", "repos_url": "https://api.github.com/users/chernals/repos", "events_url": "https://api.github.com/users/chernals/events{/privacy}", "received_events_url": "https://api.github.com/users/chernals/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142271, "node_id": "MDU6TGFiZWw2ODcxNDIyNzE=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/feature-request", "name": "feature-request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-08T11:54:44Z", "updated_at": "2020-07-02T03:58:59Z", "closed_at": "2020-07-02T03:58:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if this is really something missing or an issue on my side, I expect `TVector3` to be sufficiently standard that it should work.\r\n\r\nHere is a sample file:\r\n\r\nhttps://www.dropbox.com/s/f1x6xvro5fq03g1/uproot_issue_tvector3?dl=0\r\n\r\nIt is in the `Model` tree, branch `Model.scoringMeshTranslation`.\r\n\r\nThanks for the help on this!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/491", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/491/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/491/events", "html_url": "https://github.com/scikit-hep/uproot/issues/491", "id": 622885085, "node_id": "MDU6SXNzdWU2MjI4ODUwODU=", "number": 491, "title": "Different ways of opening and reading files into lazyarrays", "user": {"login": "alexander-held", "id": 45009355, "node_id": "MDQ6VXNlcjQ1MDA5MzU1", "avatar_url": "https://avatars0.githubusercontent.com/u/45009355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexander-held", "html_url": "https://github.com/alexander-held", "followers_url": "https://api.github.com/users/alexander-held/followers", "following_url": "https://api.github.com/users/alexander-held/following{/other_user}", "gists_url": "https://api.github.com/users/alexander-held/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexander-held/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexander-held/subscriptions", "organizations_url": "https://api.github.com/users/alexander-held/orgs", "repos_url": "https://api.github.com/users/alexander-held/repos", "events_url": "https://api.github.com/users/alexander-held/events{/privacy}", "received_events_url": "https://api.github.com/users/alexander-held/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-22T01:23:39Z", "updated_at": "2020-05-22T11:55:43Z", "closed_at": "2020-05-22T10:36:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI observed a segfault when reading ROOT files (built with `uproot`) with `lazyarrays()`.  This segfault does not occur in my local development environment (macOS), but I can reproduce it in a docker container. Furthermore, it only appears in one of two ways of reading the file.\r\n\r\nTo reproduce the error, I am using\r\n```bash\r\n$ docker run -it --rm python:3.7-slim bash\r\n```\r\nInside the container:\r\n```bash\r\n$ pip install uproot\r\n$ python\r\n>>> import uproot\r\n>>> uproot.__version__\r\n'3.11.6'\r\n>>> import awkward\r\n>>> awkward.__version__\r\n'0.12.21'\r\n```\r\nI then create a file with this script:\r\n```python\r\nimport uproot\r\n\r\nwith uproot.recreate(\"data.root\") as f:\r\n    f[\"tree\"] = uproot.newtree({\"jet_pt\": \"float64\"})\r\n    f[\"tree\"].extend({\"jet_pt\": [1,2,3,4,5]})\r\n```\r\nNext, I read the file like this:\r\n```python\r\nimport uproot\r\n\r\nwith uproot.open(\"data.root\") as f:\r\n    data = f[\"tree\"].lazyarrays()\r\n\r\nprint(data[\"jet_pt\"])\r\n```\r\nresulting in `Segmentation fault`.\r\nI then try reading the file in the following way instead:\r\n```python\r\nimport uproot\r\n\r\ndata = uproot.open(\"data.root\")[\"tree\"].lazyarrays()\r\n\r\nprint(data[\"jet_pt\"])\r\n```\r\nwhich does not produce a crash.\r\nAnother way to avoid the segfault is to already access the data while the file is still open, like this:\r\n```python\r\nimport uproot\r\n\r\nwith uproot.open(\"data.root\") as f:\r\n    data = f[\"tree\"].lazyarrays()\r\n    print(data[\"jet_pt\"])\r\n\r\nprint(data[\"jet_pt\"])\r\n```\r\nI am surprised about the differences in behavior, and that I only see them in this docker image (and gitlab CI, which originally caused me to discover this), while in my macOS environment all examples work without segfaulting. For completeness, I'm using `awkward` 0.12.17 and `uproot` 3.10.12 locally. Is this behavior expected?\r\n\r\nEdit:  I updated to `uproot` 3.11.6 and `awkward` 0.12.21 locally, which now also segfaults in the same way and shows identical behavior to the docker container.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/490", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/490/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/490/events", "html_url": "https://github.com/scikit-hep/uproot/issues/490", "id": 621276918, "node_id": "MDU6SXNzdWU2MjEyNzY5MTg=", "number": 490, "title": "uproot: read performances -- official benchmark", "user": {"login": "sbinet", "id": 1070920, "node_id": "MDQ6VXNlcjEwNzA5MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1070920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbinet", "html_url": "https://github.com/sbinet", "followers_url": "https://api.github.com/users/sbinet/followers", "following_url": "https://api.github.com/users/sbinet/following{/other_user}", "gists_url": "https://api.github.com/users/sbinet/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbinet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbinet/subscriptions", "organizations_url": "https://api.github.com/users/sbinet/orgs", "repos_url": "https://api.github.com/users/sbinet/repos", "events_url": "https://api.github.com/users/sbinet/events{/privacy}", "received_events_url": "https://api.github.com/users/sbinet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-19T20:52:07Z", "updated_at": "2020-05-26T17:30:58Z", "closed_at": "2020-05-20T19:07:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi there,\r\n\r\nI vaguely remember Jim showing reading performances of uproot _wrt_ ROOT/C++ (and/or PyROOT?).\r\n\r\nI've recently quite improved (x3!) the read performances of groot (beating ROOT C++ w/ SetBranch and TTreeReader) and I would like to get some more perf ground covered.\r\n\r\nare the bench scripts from uproot still available somewhere?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/489", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/489/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/489/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/489/events", "html_url": "https://github.com/scikit-hep/uproot/issues/489", "id": 620996293, "node_id": "MDU6SXNzdWU2MjA5OTYyOTM=", "number": 489, "title": "Request for nested array support", "user": {"login": "chamindu123", "id": 20547485, "node_id": "MDQ6VXNlcjIwNTQ3NDg1", "avatar_url": "https://avatars0.githubusercontent.com/u/20547485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chamindu123", "html_url": "https://github.com/chamindu123", "followers_url": "https://api.github.com/users/chamindu123/followers", "following_url": "https://api.github.com/users/chamindu123/following{/other_user}", "gists_url": "https://api.github.com/users/chamindu123/gists{/gist_id}", "starred_url": "https://api.github.com/users/chamindu123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chamindu123/subscriptions", "organizations_url": "https://api.github.com/users/chamindu123/orgs", "repos_url": "https://api.github.com/users/chamindu123/repos", "events_url": "https://api.github.com/users/chamindu123/events{/privacy}", "received_events_url": "https://api.github.com/users/chamindu123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-19T13:54:08Z", "updated_at": "2020-05-19T14:44:16Z", "closed_at": "2020-05-19T14:44:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nIn this previous [issue](https://github.com/scikit-hep/uproot/issues/39) it looked like support for doubly nested jagged data was on the roadmap. Is this still the case? \r\nI've been resorting to using `fromiter()` to convert the the `arrays()` output of type `ObjectArray` to a jagged arrays. I wonder if this is still the best way?\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/488", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/488/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/488/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/488/events", "html_url": "https://github.com/scikit-hep/uproot/issues/488", "id": 617371802, "node_id": "MDU6SXNzdWU2MTczNzE4MDI=", "number": 488, "title": "Writing a TH2 into file", "user": {"login": "xaratustrah", "id": 7139148, "node_id": "MDQ6VXNlcjcxMzkxNDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xaratustrah", "html_url": "https://github.com/xaratustrah", "followers_url": "https://api.github.com/users/xaratustrah/followers", "following_url": "https://api.github.com/users/xaratustrah/following{/other_user}", "gists_url": "https://api.github.com/users/xaratustrah/gists{/gist_id}", "starred_url": "https://api.github.com/users/xaratustrah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xaratustrah/subscriptions", "organizations_url": "https://api.github.com/users/xaratustrah/orgs", "repos_url": "https://api.github.com/users/xaratustrah/repos", "events_url": "https://api.github.com/users/xaratustrah/events{/privacy}", "received_events_url": "https://api.github.com/users/xaratustrah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-13T11:31:21Z", "updated_at": "2020-06-18T00:25:57Z", "closed_at": "2020-06-18T00:25:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the [readme section](https://github.com/scikit-hep/uproot#writing-histograms), there is an example of writing a TH1 histogram created entirely in Python. This example works very well. I am now trying to do the same thing using a TH2, which I posted [here on StackOverflow](https://stackoverflow.com/q/61752417/5177935), still without success.\r\n\r\nOn *line 135* in function `allvalues` in file `~/Library/anaconda3/lib/python3.7/site-packages/uproot_methods/classes/TH2.py` I see:\r\n\r\n```\r\nv = v.reshape(self.ynumbins + 2, self.xnumbins + 2)\r\n``` \r\n\r\nI don't understand the addition of +2 here? Or if this is OK, how is the proper way to fill the histogram?\r\n\r\nthanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/485", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/485/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/485/events", "html_url": "https://github.com/scikit-hep/uproot/issues/485", "id": 614933220, "node_id": "MDU6SXNzdWU2MTQ5MzMyMjA=", "number": 485, "title": "Include Allpix\u00b2 data types/ custom data types", "user": {"login": "flome", "id": 7194522, "node_id": "MDQ6VXNlcjcxOTQ1MjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7194522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flome", "html_url": "https://github.com/flome", "followers_url": "https://api.github.com/users/flome/followers", "following_url": "https://api.github.com/users/flome/following{/other_user}", "gists_url": "https://api.github.com/users/flome/gists{/gist_id}", "starred_url": "https://api.github.com/users/flome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flome/subscriptions", "organizations_url": "https://api.github.com/users/flome/orgs", "repos_url": "https://api.github.com/users/flome/repos", "events_url": "https://api.github.com/users/flome/events{/privacy}", "received_events_url": "https://api.github.com/users/flome/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-05-08T19:15:14Z", "updated_at": "2020-05-09T21:42:41Z", "closed_at": "2020-05-09T18:33:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear all,\r\nwe are currently starting to work with Allpix\u00b2, a silicon detector simulation framework based on Geant4 which is really great. It outputs natively data into root files (which is nice, so we can use uproot) but uses custom data types (which is not nice, because uproot cannot de-serialize them correctly...)\r\n\r\nIf I want to read an entry from a branch of choice, this is the result:\r\n```\r\nimport uproot\r\nf = uproot.open(\"sim_output.root\")\r\n\r\nprint(f['MCParticle/detector1'])\r\n>>>  <TBranchElement b'detector1' at 0x7f8b748c4090>\r\n\r\nprint( f['MCParticle/detector1'].interpretation )\r\n>>> asgenobj(STLVector(Pointer(allpix_3a3a_MCParticle)))\r\n\r\nprint( f['MCParticle/detector1']._streamer._fTypeName )\r\n>>> b'vector<allpix::MCParticle*>'\r\n\r\nprint(f['MCParticle/detector1'].array()[0][0])\r\n>>> <Undefined (failed to read 'allpix::MCParticle' version 6) at 0x7f8b73a15950>\r\n```\r\nresulting in the array containing only entries of class \"undefined\". Thing is, I really prefer using uproot than PyROOT or whatsoever. Is there anything I can do about it?\r\n\r\nThanks a lot for your awesome project! \r\nBest regards!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/484", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/484/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/484/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/484/events", "html_url": "https://github.com/scikit-hep/uproot/issues/484", "id": 614674704, "node_id": "MDU6SXNzdWU2MTQ2NzQ3MDQ=", "number": 484, "title": "Key not found error when key is there", "user": {"login": "sarah-alam-malik", "id": 6233792, "node_id": "MDQ6VXNlcjYyMzM3OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6233792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarah-alam-malik", "html_url": "https://github.com/sarah-alam-malik", "followers_url": "https://api.github.com/users/sarah-alam-malik/followers", "following_url": "https://api.github.com/users/sarah-alam-malik/following{/other_user}", "gists_url": "https://api.github.com/users/sarah-alam-malik/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarah-alam-malik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarah-alam-malik/subscriptions", "organizations_url": "https://api.github.com/users/sarah-alam-malik/orgs", "repos_url": "https://api.github.com/users/sarah-alam-malik/repos", "events_url": "https://api.github.com/users/sarah-alam-malik/events{/privacy}", "received_events_url": "https://api.github.com/users/sarah-alam-malik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-08T11:08:09Z", "updated_at": "2020-06-18T00:24:18Z", "closed_at": "2020-06-18T00:24:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm trying to read a root file and get an exception when reading a particular variable (Muon_tunepRelPt)- I've checked that this key is present in the root file and I have the correct name etc. \r\nWhat else should I look at? \r\n\r\nThanks!\r\n\r\nSarah\r\n\r\n\r\nFile \"/vols/build/cms/samalik/miniconda2/envs/zinv37new2/lib/python3.7/site-packages/uproot/tree.py\", line 391, in get\r\n    raise uproot.rootio._KeyError(\"not found: {0}\\n in file: {1}\".format(repr(name), self._context.sourcepath))\r\nKeyError: not found: b'Muon_tunepRelPt'  in file: root://xrootd-cms.infn.it///store/mc/RunIISummer16NanoAODv4/DYJetsToLL_Pt-250To400_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8/NANOAODSIM/PUMoriond17_Nano14Dec2018_102X_mcRun2_asymptotic_v6-v1/10000/3A4FF9EE-E857-2046-AFB7-B5AF9077D05F.root", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/483", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/483/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/483/events", "html_url": "https://github.com/scikit-hep/uproot/issues/483", "id": 613298590, "node_id": "MDU6SXNzdWU2MTMyOTg1OTA=", "number": 483, "title": "Determine number of chunks with uproot.iterate", "user": {"login": "beojan", "id": 3727925, "node_id": "MDQ6VXNlcjM3Mjc5MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3727925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beojan", "html_url": "https://github.com/beojan", "followers_url": "https://api.github.com/users/beojan/followers", "following_url": "https://api.github.com/users/beojan/following{/other_user}", "gists_url": "https://api.github.com/users/beojan/gists{/gist_id}", "starred_url": "https://api.github.com/users/beojan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beojan/subscriptions", "organizations_url": "https://api.github.com/users/beojan/orgs", "repos_url": "https://api.github.com/users/beojan/repos", "events_url": "https://api.github.com/users/beojan/events{/privacy}", "received_events_url": "https://api.github.com/users/beojan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-06T12:56:38Z", "updated_at": "2020-06-18T00:26:26Z", "closed_at": "2020-06-18T00:26:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using `iterate`, is there some way to determine ahead of time how many chunks there are (i.e. how many iterations will occur)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/479", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/479/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/479/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/479/events", "html_url": "https://github.com/scikit-hep/uproot/issues/479", "id": 609203722, "node_id": "MDU6SXNzdWU2MDkyMDM3MjI=", "number": 479, "title": "Fast-forward with uproot.iterate() for debuging purpose", "user": {"login": "zhenbinwu", "id": 1052165, "node_id": "MDQ6VXNlcjEwNTIxNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1052165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhenbinwu", "html_url": "https://github.com/zhenbinwu", "followers_url": "https://api.github.com/users/zhenbinwu/followers", "following_url": "https://api.github.com/users/zhenbinwu/following{/other_user}", "gists_url": "https://api.github.com/users/zhenbinwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhenbinwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhenbinwu/subscriptions", "organizations_url": "https://api.github.com/users/zhenbinwu/orgs", "repos_url": "https://api.github.com/users/zhenbinwu/repos", "events_url": "https://api.github.com/users/zhenbinwu/events{/privacy}", "received_events_url": "https://api.github.com/users/zhenbinwu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-29T16:46:57Z", "updated_at": "2020-06-18T00:26:44Z", "closed_at": "2020-06-18T00:26:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am current using the uproot.iterate() to read and process a list of NanoAOD files. For debugging purpose, I need to read directly Nth group of the iterator. This was implemented using `if continue`. But it seems the reading and unpacking still taking a long time. Is there a better way to handle this with iterate()? I am expecting lazyarray could provide an alternative solution, but it require some heavy modification of my current code. Thanks\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/478", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/478/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/478/events", "html_url": "https://github.com/scikit-hep/uproot/issues/478", "id": 609105467, "node_id": "MDU6SXNzdWU2MDkxMDU0Njc=", "number": 478, "title": "TParameter support", "user": {"login": "beojan", "id": 3727925, "node_id": "MDQ6VXNlcjM3Mjc5MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3727925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beojan", "html_url": "https://github.com/beojan", "followers_url": "https://api.github.com/users/beojan/followers", "following_url": "https://api.github.com/users/beojan/following{/other_user}", "gists_url": "https://api.github.com/users/beojan/gists{/gist_id}", "starred_url": "https://api.github.com/users/beojan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beojan/subscriptions", "organizations_url": "https://api.github.com/users/beojan/orgs", "repos_url": "https://api.github.com/users/beojan/repos", "events_url": "https://api.github.com/users/beojan/events{/privacy}", "received_events_url": "https://api.github.com/users/beojan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-04-29T14:31:46Z", "updated_at": "2020-05-21T10:09:31Z", "closed_at": "2020-05-21T10:09:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to add the ability to (easily) read and write `TParameter`s? We use these to store normalizations and other metadata in our ATLAS analysis.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/475", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/475/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/475/events", "html_url": "https://github.com/scikit-hep/uproot/issues/475", "id": 604149108, "node_id": "MDU6SXNzdWU2MDQxNDkxMDg=", "number": 475, "title": "IndexError while reading a vector of custom class objects from tree", "user": {"login": "bglenardo", "id": 8248205, "node_id": "MDQ6VXNlcjgyNDgyMDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8248205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bglenardo", "html_url": "https://github.com/bglenardo", "followers_url": "https://api.github.com/users/bglenardo/followers", "following_url": "https://api.github.com/users/bglenardo/following{/other_user}", "gists_url": "https://api.github.com/users/bglenardo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bglenardo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bglenardo/subscriptions", "organizations_url": "https://api.github.com/users/bglenardo/orgs", "repos_url": "https://api.github.com/users/bglenardo/repos", "events_url": "https://api.github.com/users/bglenardo/events{/privacy}", "received_events_url": "https://api.github.com/users/bglenardo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-21T17:18:53Z", "updated_at": "2020-06-18T00:27:56Z", "closed_at": "2020-06-18T00:27:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a use case in which we have a branch which is a vector of a custom class objects (in our case, the class is called `ElecChannel`), and I would like to access individual members of this object (which include some `vector<short>` objects). If I try following the instructions from Issue #371 , I get an `IndexError`:\r\n\r\n```\r\nelec = TFile['Event/Elec/ElecEvent']\r\nobj = elec['fElecChannels'].array()[0]\r\n\r\n\r\n\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-17-4e71d5389b06> in <module>\r\n      1 elec = TFile['Event/Elec/ElecEvent']\r\n      2 print(elec.show())\r\n----> 3 obj = elec['fElecChannels'].array()[0]\r\n      4 \r\n      5 #branch = elec['ElecEvent']['fElecChannels']\r\n\r\n~/localpythonpackages/lib/python3.7/site-packages/awkward/array/objects.py in __getitem__(self, where)\r\n    191         if self._util_isinteger(head):\r\n    192             if isinstance(tail, tuple) and tail == ():\r\n--> 193                 return self.generator(content, *self._args, **self._kwargs)\r\n    194             else:\r\n    195                 return self.generator(content, *self._args, **self._kwargs)[tail]\r\n\r\n~/localpythonpackages/lib/python3.7/site-packages/uproot/interp/objects.py in __call__(self, arg)\r\n    377             source = uproot.source.source.Source(bytes)\r\n    378             cursor = uproot.source.cursor.Cursor(0, origin=origin)\r\n--> 379             return self.cls.read(source, cursor, self.context, None)\r\n    380         def __repr__(self):\r\n    381             if isinstance(self.cls, type):\r\n\r\n~/localpythonpackages/lib/python3.7/site-packages/uproot/interp/objects.py in read(self, source, cursor, context, parent)\r\n     68             out = [None] * numitems\r\n     69             for i in range(numitems):\r\n---> 70                 out[i] = self.cls.read(source, cursor, context, parent)\r\n     71             return out\r\n     72 \r\n\r\n~/localpythonpackages/lib/python3.7/site-packages/uproot/rootio.py in read(cls, source, cursor, context, parent)\r\n    963             context = context.copy()\r\n    964         out = cls.__new__(cls)\r\n--> 965         out = cls._readinto(out, source, cursor, context, parent)\r\n    966         out._postprocess(source, cursor, context, parent)\r\n    967         return out\r\n\r\n~/localpythonpackages/lib/python3.7/site-packages/uproot/rootio.py in _readinto(cls, self, source, cursor, context, parent, asclass)\r\n\r\n~/localpythonpackages/lib/python3.7/site-packages/uproot/source/cursor.py in array(self, source, length, dtype)\r\n     59         start = self.index\r\n     60         stop = self.index = start + length*dtype.itemsize\r\n---> 61         return source.data(start, stop, dtype)\r\n     62 \r\n     63     def string(self, source):\r\n\r\n~/localpythonpackages/lib/python3.7/site-packages/uproot/source/source.py in data(self, start, stop, dtype)\r\n     39 \r\n     40         if stop > len(self._source):\r\n---> 41             raise IndexError(\"indexes {0}:{1} are beyond the end of data source of length {2}\".format(start, stop, len(self._source)))\r\n     42 \r\n     43         if dtype is None:\r\n\r\nIndexError: indexes 611:268436067 are beyond the end of data source of length 4787\r\n```\r\n\r\nUsing `show` tells me that the fElecChannels branch is being interpreted as a generic object, though I'm not sure exactly what that means:\r\n\r\n```\r\nElecEvent                  TStreamerInfo              None\r\nnEXO::EventObject          TStreamerInfo              asgenobj(nEXO_3a3a_EventObject)\r\nfElecChannels              TStreamerSTL               asgenobj(STLVector(nEXO_3a3a_ElecChannel))\r\nfNTE                       TStreamerBasicType         asdtype('>i4')\r\nfEnergy                    TStreamerBasicType         asdtype('>f4')\r\nfmc_charge                 TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nfmc_tepos                  TStreamerSTL               None\r\n```\r\n\r\nIs there a way I can read this out into arrays?\r\n\r\n[An example file can be found here](https://drive.google.com/file/d/1q0ODnYXbbvcqNgRDrLuGDPRrAz-qiJqx/view?usp=sharing)\r\n\r\nThanks so much!\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/474", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/474/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/474/events", "html_url": "https://github.com/scikit-hep/uproot/issues/474", "id": 600663162, "node_id": "MDU6SXNzdWU2MDA2NjMxNjI=", "number": 474, "title": "Working with TGraph2DErrors", "user": {"login": "GuiiFerrari", "id": 56280982, "node_id": "MDQ6VXNlcjU2MjgwOTgy", "avatar_url": "https://avatars0.githubusercontent.com/u/56280982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuiiFerrari", "html_url": "https://github.com/GuiiFerrari", "followers_url": "https://api.github.com/users/GuiiFerrari/followers", "following_url": "https://api.github.com/users/GuiiFerrari/following{/other_user}", "gists_url": "https://api.github.com/users/GuiiFerrari/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuiiFerrari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuiiFerrari/subscriptions", "organizations_url": "https://api.github.com/users/GuiiFerrari/orgs", "repos_url": "https://api.github.com/users/GuiiFerrari/repos", "events_url": "https://api.github.com/users/GuiiFerrari/events{/privacy}", "received_events_url": "https://api.github.com/users/GuiiFerrari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-16T00:18:53Z", "updated_at": "2020-06-18T00:28:36Z", "closed_at": "2020-06-18T00:28:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone,\r\n\r\nI need to read the axis of a TGraph2DErrors but I'm not finding any method / documention that helps me. There's only a .read() but I don't know how to work with arguments: 'source', 'cursor', 'context', and 'parent'. I need these axisin arrays because It's easy than C++ to implement some Machine Learning methods. what should I do?\r\n\r\nThank you all.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/473", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/473/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/473/events", "html_url": "https://github.com/scikit-hep/uproot/issues/473", "id": 599798920, "node_id": "MDU6SXNzdWU1OTk3OTg5MjA=", "number": 473, "title": "Reading ROOT tree with jagged arrays into a Dataframe", "user": {"login": "sznajder", "id": 5032118, "node_id": "MDQ6VXNlcjUwMzIxMTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5032118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sznajder", "html_url": "https://github.com/sznajder", "followers_url": "https://api.github.com/users/sznajder/followers", "following_url": "https://api.github.com/users/sznajder/following{/other_user}", "gists_url": "https://api.github.com/users/sznajder/gists{/gist_id}", "starred_url": "https://api.github.com/users/sznajder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sznajder/subscriptions", "organizations_url": "https://api.github.com/users/sznajder/orgs", "repos_url": "https://api.github.com/users/sznajder/repos", "events_url": "https://api.github.com/users/sznajder/events{/privacy}", "received_events_url": "https://api.github.com/users/sznajder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-04-14T19:14:38Z", "updated_at": "2020-07-05T15:14:41Z", "closed_at": "2020-06-18T00:29:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have a Root tree that I am reading reading into a dataframe and it has many branches with different number of hits and particles per events as printed bellow. If I use the flatten option I get an error when creating the dataframe  because of the jagged arrays in the Tree ! Is there any option I can use to create the dataframe that allows to get a flattened arrays dataframe with NaN filled when there's no information available in the arrays ?\r\nCheers,\r\nAndre\r\n \r\n\r\nvh_station                 TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nvh_ring                    TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nvh_sector                  TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nvh_sim_phi                 TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvh_sim_theta               TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvh_sim_eta                 TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvh_sim_r                   TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvh_sim_z                   TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvh_size                    (no streamer)              asdtype('>i4')\r\nvu_pt                      TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvu_phi                     TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvu_eta                     TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvu_theta                   TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvu_q                       TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nvp_pt                      TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvp_phi                     TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvp_eta                     TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvp_theta                   TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nvp_q                       TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nvp_event                   TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nvp_pdgid                   TStreamerSTL               asjagged(asdtype('>i4'), 10)\r\nvp_status                  TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nvp_genp                    TStreamerSTL               asjagged(asdtype('>i4'), 10)\r\nvp_size                    (no streamer)              asdtype('>i4')\r\nve_event                   TStreamerSTL               asjagged(asdtype('>u8'), 10)\r\nve_run                     TStreamerSTL               asjagged(asdtype('>u4'), 10)\r\nve_lumi                    TStreamerSTL               asjagged(asdtype('>u4'), 10)\r\nve_npv                     TStreamerSTL               asjagged(asdtype('>i4'), 10)\r\nve_size                    (no streamer)              asdtype('>i4')", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/472", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/472/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/472/events", "html_url": "https://github.com/scikit-hep/uproot/issues/472", "id": 595744716, "node_id": "MDU6SXNzdWU1OTU3NDQ3MTY=", "number": 472, "title": "Uproot cannot recover the content of a non properly closed ROOT file.", "user": {"login": "DanielLopezCoto", "id": 18554833, "node_id": "MDQ6VXNlcjE4NTU0ODMz", "avatar_url": "https://avatars2.githubusercontent.com/u/18554833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielLopezCoto", "html_url": "https://github.com/DanielLopezCoto", "followers_url": "https://api.github.com/users/DanielLopezCoto/followers", "following_url": "https://api.github.com/users/DanielLopezCoto/following{/other_user}", "gists_url": "https://api.github.com/users/DanielLopezCoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielLopezCoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielLopezCoto/subscriptions", "organizations_url": "https://api.github.com/users/DanielLopezCoto/orgs", "repos_url": "https://api.github.com/users/DanielLopezCoto/repos", "events_url": "https://api.github.com/users/DanielLopezCoto/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielLopezCoto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-07T09:58:29Z", "updated_at": "2020-04-07T14:22:03Z", "closed_at": "2020-04-07T14:20:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I realized that if a ROOT file has to be recovered (because it was not closed properly for any reason), uproot is not able to read its content, and returns an empty list when doing:\r\n```\r\n in: file = uproot.open(\"random_file.root\")\r\n in: list_of_keys = file.keys()\r\n in: list_of_keys\r\nout: [ ]\r\n```\r\nIs there actually a way to recover those files contents just like ROOT does when loading such files?\r\n\r\nThank you!\r\nDaniel.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/469", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/469/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/469/events", "html_url": "https://github.com/scikit-hep/uproot/issues/469", "id": 589853799, "node_id": "MDU6SXNzdWU1ODk4NTM3OTk=", "number": 469, "title": "Table object returned by lazyarrays is not implementing dict interface", "user": {"login": "HDembinski", "id": 2631586, "node_id": "MDQ6VXNlcjI2MzE1ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HDembinski", "html_url": "https://github.com/HDembinski", "followers_url": "https://api.github.com/users/HDembinski/followers", "following_url": "https://api.github.com/users/HDembinski/following{/other_user}", "gists_url": "https://api.github.com/users/HDembinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/HDembinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HDembinski/subscriptions", "organizations_url": "https://api.github.com/users/HDembinski/orgs", "repos_url": "https://api.github.com/users/HDembinski/repos", "events_url": "https://api.github.com/users/HDembinski/events{/privacy}", "received_events_url": "https://api.github.com/users/HDembinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-29T18:31:29Z", "updated_at": "2020-06-18T00:29:34Z", "closed_at": "2020-06-18T00:29:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "tree.lazyarrays(...) returns a Table object. This table object acts somewhat like a dict, but does not support the usual dict interface. In particular, I am missing `.keys()`, `.values()`, `.items()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/468", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/468/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/468/events", "html_url": "https://github.com/scikit-hep/uproot/issues/468", "id": 588615434, "node_id": "MDU6SXNzdWU1ODg2MTU0MzQ=", "number": 468, "title": "Missing interpretation involving `std::map<int, struct>`", "user": {"login": "chernals", "id": 1025745, "node_id": "MDQ6VXNlcjEwMjU3NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1025745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chernals", "html_url": "https://github.com/chernals", "followers_url": "https://api.github.com/users/chernals/followers", "following_url": "https://api.github.com/users/chernals/following{/other_user}", "gists_url": "https://api.github.com/users/chernals/gists{/gist_id}", "starred_url": "https://api.github.com/users/chernals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chernals/subscriptions", "organizations_url": "https://api.github.com/users/chernals/orgs", "repos_url": "https://api.github.com/users/chernals/repos", "events_url": "https://api.github.com/users/chernals/events{/privacy}", "received_events_url": "https://api.github.com/users/chernals/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142271, "node_id": "MDU6TGFiZWw2ODcxNDIyNzE=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/feature-request", "name": "feature-request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-26T17:59:09Z", "updated_at": "2020-07-02T03:58:28Z", "closed_at": "2020-07-02T03:58:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that I am running into trouble with `uproot` missing the interpretation of the format.\r\n\r\nHere is a very lightweight `root` file: https://www.dropbox.com/s/xuux3yel3gd8trw/uproot_issue.root?dl=0\r\n\r\nThe issue is for the tree `Geant4Data` which contains the class `BDSOutputROOTGeant4Data` (source: https://bitbucket.org/jairhul/bdsim/src/master/include/BDSOutputROOTGeant4Data.hh ).\r\n\r\nIt contains `std::map<int, ParticleInfo> particles;` where `ParticleInfo` is defined as\r\n\r\n```\r\nstruct ParticleInfo\r\n{\r\n      std::string name;   ///< Name of particle.\r\n      int         charge; ///< Charge in units of e.\r\n      double      mass;   ///< Mass in GeV.\r\n};\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/465", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/465/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/465/events", "html_url": "https://github.com/scikit-hep/uproot/issues/465", "id": 582654974, "node_id": "MDU6SXNzdWU1ODI2NTQ5NzQ=", "number": 465, "title": "Dimensional issue of subclassed object in nested branches", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-16T23:23:41Z", "updated_at": "2020-05-04T15:41:16Z", "closed_at": "2020-05-04T15:41:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sorry for the weird issue title, we can change it later, I could not find a better one \ud83d\ude09 \r\n\r\nI need some help parsing a fairly simple data structure. It derives from a class which has:\r\n\r\n```c++\r\nstruct AAObject : public TObject\r\n{\r\n  std::vector<double>      usr;              ///< user data\r\n  std::vector<std::string> usr_names;        ///< user keys\r\n```\r\n\r\nThese two vectors are used to store arbitrary data, so that e.g. `usr_names = [\"bx\", \"by\", \"ichan\", \"cc\"]` and the corresponding values are at the specific indices. So if you need to look up the value for `\"by\"`, you look up the index of it and then access `usr[idx]`.\r\n\r\nSo far so good, it works for \"one dimensional\" (flat) branches. Here, the event of class `Evt` derives from that `AAObject` and the the branch `Evt` simply contains a flat vector of `Evt` instances (3 of them) and each event contains 17 \"usr entries\":\r\n\r\n```python\r\n[ins] In [1]: import uproot\r\n\r\n[ins] In [2]: f = uproot.open(\"usr-flat.root\")\r\n\r\n[ins] In [3]: f['E']['Evt']['usr_names'].array()\r\nOut[3]: <ObjectArray [[b'RecoQuality', b'RecoNDF', b'CoC', b'ToT', b'ChargeAbove', b'ChargeBelow', b'ChargeRatio', b'DeltaPosZ', b'FirstPartPosZ', b'LastPartPosZ', b'NSnapHits', b'NTrigHits', b'NTrigDOMs', b'NTrigLines', b'NSpeedVetoHits', b'NGeometryVetoHits', b'ClassficationScore'] [b'RecoQuality', b'RecoNDF', b'CoC', b'ToT', b'ChargeAbove', b'ChargeBelow', b'ChargeRatio', b'DeltaPosZ', b'FirstPartPosZ', b'LastPartPosZ', b'NSnapHits', b'NTrigHits', b'NTrigDOMs', b'NTrigLines', b'NSpeedVetoHits', b'NGeometryVetoHits', b'ClassficationScore'] [b'RecoQuality', b'RecoNDF', b'CoC', b'ToT', b'ChargeAbove', b'ChargeBelow', b'ChargeRatio', b'DeltaPosZ', b'FirstPartPosZ', b'LastPartPosZ', b'NSnapHits', b'NTrigHits', b'NTrigDOMs', b'NTrigLines', b'NSpeedVetoHits', b'NGeometryVetoHits', b'ClassficationScore']] at 0x7f1b8fa2a880>\r\n\r\n[ins] In [4]: f['E']['Evt']['usr_names'].array()[0]\r\nOut[4]:\r\n[b'RecoQuality',\r\n b'RecoNDF',\r\n b'CoC',\r\n b'ToT',\r\n b'ChargeAbove',\r\n b'ChargeBelow',\r\n b'ChargeRatio',\r\n b'DeltaPosZ',\r\n b'FirstPartPosZ',\r\n b'LastPartPosZ',\r\n b'NSnapHits',\r\n b'NTrigHits',\r\n b'NTrigDOMs',\r\n b'NTrigLines',\r\n b'NSpeedVetoHits',\r\n b'NGeometryVetoHits',\r\n b'ClassficationScore']\r\n\r\n[ins] In [5]: f['E']['Evt']['usr'].array()[0]\r\nOut[5]:\r\narray([8.54595724e+01, 3.70000000e+01, 1.18630282e+02, 8.25000000e+02,\r\n       1.76000000e+02, 6.49000000e+02, 2.13333333e-01, 3.75196777e+01,\r\n       1.35294997e+02, 9.77753193e+01, 5.10000000e+01, 3.00000000e+01,\r\n       7.00000000e+00, 6.00000000e+00, 0.00000000e+00, 0.00000000e+00,\r\n       1.68633822e-01])\r\n\r\n[ins] In [6]: len(f['E']['Evt'])\r\nOut[6]: 3\r\n```\r\n\r\nThe problem appears with classes which have instances in nested branches. This means that for example the `Trk` class, which also derives from `AAObject` and is part of the `Evt` branch. Each `Evt` entry has a variable length of `Trks`, as seen here (just the relevant parts):\r\n\r\n```c++\r\nstruct Evt: public AAObject\r\n{\r\n...\r\n  std::vector<Hit> hits;        ///< list of hits\r\n  std::vector<Trk> trks;        ///< list of reconstructed tracks (can be several because of prefits,showers, etc).   \r\n...\r\n```\r\n\r\nThe `Trk` class itself is also quite straight forward and consists of some attributes:\r\n\r\n```c++\r\nstruct Trk: public AAObject\r\n{\r\n  int    id;                          ///< track identifier\r\n  Vec    pos;                         ///< postion of the track at time t\r\n  Vec    dir;                         ///< track direction\r\n  double t;                           ///< track time (when the particle is at pos )\r\n...\r\n```\r\n\r\nThe file `usr-nested` contains a few events and every event contains multiple `Trk` instances. Only the first two `Trk` entries should have some entries in the `usr*` attributes, the first one `by`, `bx`, `ichan` and `cc`, the second one only `energy_lost_in_can`. The structure of the arrays however I get back from `uproot` are all one dimensional per event. It seems that only the first entry is extracted and also the length of the arrays seems a bit \"random\".\r\n\r\nThis is what I get:\r\n\r\n```python\r\n[ins] In [34]: import uproot\r\n\r\n[ins] In [35]: f = uproot.open(\"usr-nested.root\")\r\n\r\n[ins] In [36]: f['E']['Evt']['mc_trks']['mc_trks.usr_names'].array()\r\nOut[36]: <ObjectArray [[b'bx', b'by', b'ichan', b'cc'] [b'bx', b'by', b'ichan', b'cc'] [b'bx', b'by', b'ichan', b'cc'] ... [b'bx', b'by', b'ichan', b'cc'] [b'bx', b'by', b'ichan', b'cc'] [b'bx', b'by', b'ichan', b'cc']] at 0x7ff1e6587040>\r\n\r\n[ins] In [37]: f['E']['Evt']['mc_trks']['mc_trks.usr_names'].array()[0]\r\nOut[37]: [b'bx', b'by', b'ichan', b'cc']\r\n\r\n[ins] In [38]: f['E']['Evt']['mc_trks']['mc_trks.usr'].array()[0]\r\nOut[38]:\r\narray([ 4.86920000e-002,  5.88460000e-002,  3.00000000e+000,\r\n        2.00000000e+000,  2.65507278e-314, -9.07373616e+207,\r\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\r\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\r\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000])\r\n\r\n[ins] In [39]: f['E']['Evt']['mc_trks']['mc_trks.pos.x'].array()[0]\r\nOut[39]:\r\narray([32.263, 32.263, 32.263, 32.263, 32.263, 32.263, 32.263, 32.263,\r\n       32.263, 32.263, 32.263, 32.263, 32.263, 32.263, 32.263, 32.263,\r\n       32.263, 32.263, 32.263, 32.263, 32.263])\r\n\r\n[ins] In [40]: f['E']['Evt']['mc_trks']['mc_trks.pos.x'].array()[0].shape\r\nOut[40]: (21,)\r\n```\r\n\r\nWhat I expect, is that the following line returns a nested list, where the first nested list has a length of 4, the second 1 and all others are empty. I however get 15 single entries and the first 4 entries correspond to the first track (and the values are OK):\r\n\r\n```python\r\n[ins] In [38]: f['E']['Evt']['mc_trks']['mc_trks.usr'].array()[0]\r\nOut[38]:\r\narray([ 4.86920000e-002,  5.88460000e-002,  3.00000000e+000,\r\n        2.00000000e+000,  2.65507278e-314, -9.07373616e+207,\r\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\r\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\r\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000])\r\n```\r\n\r\nThe array elements apart from the first 4 values seem to be random memory bits.\r\n\r\nI tried to figure out why the data is parsed incorrectly but I failed so far. I also did not found the word `energy_lost_in_can` in the `usr_fields` (converted to string etc.), so I guess it is lost somewhere in the low level parsing in `uproot`.\r\n\r\nThis is what the ROOT based library spits out for the first event (all 21 tracks, the first one with 4 usr-entries, the second with 1 and every other with no entries):\r\n\r\n```\r\nTrk: id=0 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.669588 -0.539513 0.510467 t=0 E=67.213 pdg-type=14\r\n0 \t bx : \t 0.048692\r\n1 \t by : \t 0.058846\r\n2 \t ichan : \t 3\r\n3 \t cc : \t 2\r\nTrk: id=1 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.663003 -0.546697 0.51142 t=0 E=63.347 pdg-type=-13\r\n0 \t energy_lost_in_can : \t 63.2413\r\nTrk: id=2 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.19609 -0.948629 -0.248297 t=0 E=1.2184 pdg-type=2212\r\nTrk: id=3 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.126922 -0.514083 0.848298 t=0 E=0.9756 pdg-type=2212\r\nTrk: id=4 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.201009 0.875771 0.438886 t=0 E=1.264 pdg-type=2212\r\nTrk: id=5 pos=Vec:32.263 10.292 117.624 dir=Vec:0.03499 -0.730037 -0.682511 t=0 E=1.1212 pdg-type=2212\r\nTrk: id=6 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.013096 0.280756 0.95969 t=0 E=1.0763 pdg-type=2212\r\nTrk: id=7 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.549502 0.013973 0.835376 t=0 E=1.0252 pdg-type=2212\r\nTrk: id=8 pos=Vec:32.263 10.292 117.624 dir=Vec:0.882835 -0.235994 0.406091 t=0 E=1.0421 pdg-type=2212\r\nTrk: id=9 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.944463 -0.174758 -0.278297 t=0 E=0.99328 pdg-type=2112\r\nTrk: id=10 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.801781 -0.360305 0.476789 t=0 E=1.9418 pdg-type=2112\r\nTrk: id=11 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.488549 -0.831056 0.26583 t=0 E=1.3408 pdg-type=2212\r\nTrk: id=12 pos=Vec:32.263 10.292 117.624 dir=Vec:0.221472 -0.012973 0.97508 t=0 E=1.0457 pdg-type=2112\r\nTrk: id=13 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.7151 0.448516 -0.536158 t=0 E=1.0784 pdg-type=2112\r\nTrk: id=14 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.837188 0.317147 -0.445571 t=0 E=1.0119 pdg-type=2112\r\nTrk: id=15 pos=Vec:32.263 10.292 117.624 dir=Vec:0.960773 0.064413 0.269754 t=0 E=1.054 pdg-type=2112\r\nTrk: id=16 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.878487 0.279885 -0.387201 t=0 E=0.15467 pdg-type=22\r\nTrk: id=17 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.463415 0.821182 -0.333027 t=0 E=0.16669 pdg-type=11\r\nTrk: id=18 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.468878 0.822227 -0.32264 t=0 E=0.085231 pdg-type=-11\r\nTrk: id=19 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.870512 -0.390102 -0.30005 t=0 E=0.25603 pdg-type=22\r\nTrk: id=20 pos=Vec:32.263 10.292 117.624 dir=Vec:-0.531486 -0.838616 0.119353 t=0 E=0.14464 pdg-type=22\r\n```\r\n\r\nDo you have any idea, or is this a known issue with nested vectors?\r\n\r\nI attached both files in case you want to have a look.\r\n\r\n[usr.zip](https://github.com/scikit-hep/uproot/files/4340774/usr.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/464", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/464/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/464/events", "html_url": "https://github.com/scikit-hep/uproot/issues/464", "id": 576932476, "node_id": "MDU6SXNzdWU1NzY5MzI0NzY=", "number": 464, "title": "can't convert \"leaf-list\" with different dimensional arrays", "user": {"login": "LeavesWang", "id": 41975394, "node_id": "MDQ6VXNlcjQxOTc1Mzk0", "avatar_url": "https://avatars1.githubusercontent.com/u/41975394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeavesWang", "html_url": "https://github.com/LeavesWang", "followers_url": "https://api.github.com/users/LeavesWang/followers", "following_url": "https://api.github.com/users/LeavesWang/following{/other_user}", "gists_url": "https://api.github.com/users/LeavesWang/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeavesWang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeavesWang/subscriptions", "organizations_url": "https://api.github.com/users/LeavesWang/orgs", "repos_url": "https://api.github.com/users/LeavesWang/repos", "events_url": "https://api.github.com/users/LeavesWang/events{/privacy}", "received_events_url": "https://api.github.com/users/LeavesWang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-06T13:29:49Z", "updated_at": "2020-06-18T00:33:44Z", "closed_at": "2020-06-18T00:33:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI am currently trying to use the uproot to convert my root/tree data files to NumPy or Pandas data format. My data structure looks like this:\r\n<img width=\"433\" alt=\"Capture\" src=\"https://user-images.githubusercontent.com/41975394/76087300-e1b03f00-5f83-11ea-9a55-05d8f139b620.PNG\">\r\n\r\nAnd I tried using the \u201carray\u201d to convert the anaToF to an array, but it didn\u2019t work and gave me this error message:\r\n<img width=\"687\" alt=\"Capture2\" src=\"https://user-images.githubusercontent.com/41975394/76087345-fb518680-5f83-11ea-9897-cb7ad15e5022.PNG\">\r\n<img width=\"624\" alt=\"Capture3\" src=\"https://user-images.githubusercontent.com/41975394/76087350-fe4c7700-5f83-11ea-8a58-a42f0cce81b8.PNG\">\r\n\r\nHow can I deal with it?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/461", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/461/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/461/events", "html_url": "https://github.com/scikit-hep/uproot/issues/461", "id": 575400998, "node_id": "MDU6SXNzdWU1NzU0MDA5OTg=", "number": 461, "title": "uproot 4 dev-branch?", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-04T13:28:21Z", "updated_at": "2020-05-22T12:39:19Z", "closed_at": "2020-05-22T11:42:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sorry for my ignorance, maybe this is already mentioned somewhere but I couldn't find it. Is there a dev-branch for uproot 4? I am dealing with some nested awkward arrays and went through the awkward-1 resources (also https://github.com/scikit-hep/awkward-1.0/blob/master/docs/demos/2020-01-22-numba-demo-EVALUATED.ipynb which is impressive) and it seem that this will solve all my issues automatically (see https://github.com/scikit-hep/awkward-array/issues/229).\r\n\r\nAnyways, I would be happy to try uproot 4 (alpha) and maybe also contribute if possible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/460", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/460/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/460/events", "html_url": "https://github.com/scikit-hep/uproot/issues/460", "id": 574758971, "node_id": "MDU6SXNzdWU1NzQ3NTg5NzE=", "number": 460, "title": "uproot.update is not functional", "user": {"login": "kratsg", "id": 761483, "node_id": "MDQ6VXNlcjc2MTQ4Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/761483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kratsg", "html_url": "https://github.com/kratsg", "followers_url": "https://api.github.com/users/kratsg/followers", "following_url": "https://api.github.com/users/kratsg/following{/other_user}", "gists_url": "https://api.github.com/users/kratsg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kratsg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kratsg/subscriptions", "organizations_url": "https://api.github.com/users/kratsg/orgs", "repos_url": "https://api.github.com/users/kratsg/repos", "events_url": "https://api.github.com/users/kratsg/events{/privacy}", "received_events_url": "https://api.github.com/users/kratsg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-03T15:44:17Z", "updated_at": "2020-03-06T15:38:55Z", "closed_at": "2020-03-06T15:38:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you look at the lines here\r\n\r\nhttps://github.com/scikit-hep/uproot/blob/6b7e886efc0720a20b3622a5b2840cb1fa0558bc/uproot/write/TFile.py#L27-L40\r\n\r\nrunning `uproot.update` on an existing ROOT file causes a crash like so:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib64/python3.6/multiprocessing/pool.py\", line 119, in worker\r\n    result = (True, func(*args, **kwds))\r\n  File \"/usr/lib64/python3.6/multiprocessing/pool.py\", line 44, in mapstar\r\n    return list(map(*args))\r\n  File \"run.py\", line 13, in process_file\r\n    with uproot.update(output_fname) as out_file:\r\n  File \"/afs/cern.ch/user/g/gstark/pyhf/lib64/python3.6/site-packages/uproot/write/TFile.py\", line 29, in __init__\r\n    self._openfile(path)\r\nTypeError: _openfile() missing 1 required positional argument: 'compression'\r\n```\r\n\r\nthis is because the call to `_openfile` in the `__init__` seems to only specify one positional argument here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/458", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/458/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/458/events", "html_url": "https://github.com/scikit-hep/uproot/issues/458", "id": 569586938, "node_id": "MDU6SXNzdWU1Njk1ODY5Mzg=", "number": 458, "title": "AttributeError: no column named 'reshape' for ChunkedArray with jagged content", "user": {"login": "raymondEhlers", "id": 1571927, "node_id": "MDQ6VXNlcjE1NzE5Mjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1571927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raymondEhlers", "html_url": "https://github.com/raymondEhlers", "followers_url": "https://api.github.com/users/raymondEhlers/followers", "following_url": "https://api.github.com/users/raymondEhlers/following{/other_user}", "gists_url": "https://api.github.com/users/raymondEhlers/gists{/gist_id}", "starred_url": "https://api.github.com/users/raymondEhlers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raymondEhlers/subscriptions", "organizations_url": "https://api.github.com/users/raymondEhlers/orgs", "repos_url": "https://api.github.com/users/raymondEhlers/repos", "events_url": "https://api.github.com/users/raymondEhlers/events{/privacy}", "received_events_url": "https://api.github.com/users/raymondEhlers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-24T00:32:17Z", "updated_at": "2020-06-18T00:34:56Z", "closed_at": "2020-06-18T00:34:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "When attempting to process a ChunkedArray containing jagged values loaded via `uproot.lazyarrays(...)`, I receive: `AttributeError: no column named 'reshape'`. The full traceback can be seen in the following example:\r\n\r\n```python\r\nIn [14]: arrays[\"data_z\"]\r\nOut[14]: <ChunkedArray [[0.22628734 0.094208576 0.11197069 0.23886986] [0.2817931 0.02485017 0.31829283 ... 0.37544665 0.39175743 0.063571155] [0.084453866 0.022292202] ... [0.0815998 0.48151806 0.27003774 0.35759225 0.47045997 0.29828948] [0.049144566 0.26100245 0.37040257 ... 0.11787954 0.3755424 0.45226774] [0.4637775 0.3404903 0.3402615 ... 0.20760414 0.16756321 0.47770718]] at 0x00010f6814d0>\r\n\r\nIn [15]: np.sin(arrays[\"data_z\"]) / arrays[\"data_z\"]\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\ntest.py in <module>\r\n----> 1 np.sin(arrays[\"data_z\"]) / arrays[\"data_z\"]\r\n\r\n.venv/lib/python3.7/site-packages/numpy/lib/mixins.py in func(self, other)\r\n     23         if _disables_array_ufunc(other):\r\n     24             return NotImplemented\r\n---> 25         return ufunc(self, other)                                                                                           \r\n     26     func.__name__ = '__{}__'.format(name)\r\n     27     return func\r\n\r\n.venv/lib/python3.7/site-packages/awkward/array/chunked.py in __array_ufunc__(self, ufunc, method, *inputs, **kwargs)\r\n    560         types = {}\r\n    561         for batch in batches:\r\n--> 562             result = getattr(ufunc, method)(*batch, **kwargs)\r\n    563\r\n    564             if isinstance(result, tuple):\r\n\r\n.venv/lib/python3.7/site-packages/awkward/array/chunked.py in __array_ufunc__(self, ufunc, method, *inputs, **kwargs)\r\n    560         types = {}\r\n    561         for batch in batches:\r\n--> 562             result = getattr(ufunc, method)(*batch, **kwargs)\r\n    563\r\n    564             if isinstance(result, tuple):\r\n\r\n.venv/lib/python3.7/site-packages/awkward/array/jagged.py in __array_ufunc__(self, ufunc, method, *inputs, **kwargs)\r\n   1025                         return content\r\n   1026\r\n-> 1027                 content = recurse(data)\r\n   1028\r\n   1029                 inputs[i] = self.JaggedArray(starts, stops, content)\r\n\r\n.venv/lib/python3.7/site-packages/awkward/array/jagged.py in recurse(x)\r\n   1014                             content = self.numpy.full(len(parents), x, dtype=x.dtype)\r\n   1015                         else:\r\n-> 1016                             content = x.reshape(-1)[parents]\r\n   1017                         return content\r\n   1018\r\n\r\n.venv/lib/python3.7/site-packages/awkward/array/base.py in __getattr__(self, where)\r\n    254                     raise AttributeError(\"while trying to get column {0}, an exception occurred:\\n{1}: {2}\".format(repr(where), type(err), str(err)))\r\n    255             else:\r\n--> 256                 raise AttributeError(\"no column named {0}\".format(repr(where)))\r\n    257\r\n    258     def __dir__(self):\r\n\r\nAttributeError: no column named 'reshape'\r\n```\r\n\r\nI can cause it with some operations (such as the above), but not in every case (simple division works, but dividing three terms fails). As the traceback hints, it seems to be related to processing chunks - if I load the data using `arrays(...)`, the operation works fine. Perhaps I've missed a detail, but I'm at a loss why this doesn't work. Any suggestions would be greatly appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/456", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/456/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/456/events", "html_url": "https://github.com/scikit-hep/uproot/issues/456", "id": 567680957, "node_id": "MDU6SXNzdWU1Njc2ODA5NTc=", "number": 456, "title": "uproot docstrings should use hard wrapping", "user": {"login": "HDembinski", "id": 2631586, "node_id": "MDQ6VXNlcjI2MzE1ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HDembinski", "html_url": "https://github.com/HDembinski", "followers_url": "https://api.github.com/users/HDembinski/followers", "following_url": "https://api.github.com/users/HDembinski/following{/other_user}", "gists_url": "https://api.github.com/users/HDembinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/HDembinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HDembinski/subscriptions", "organizations_url": "https://api.github.com/users/HDembinski/orgs", "repos_url": "https://api.github.com/users/HDembinski/repos", "events_url": "https://api.github.com/users/HDembinski/events{/privacy}", "received_events_url": "https://api.github.com/users/HDembinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-19T16:31:11Z", "updated_at": "2020-02-25T12:10:21Z", "closed_at": "2020-02-25T12:10:21Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "When typing help(some_uproot_object), the output looks weird even on wide screens because the lines are very long. Example:\r\n```\r\nHelp on TTree in module uproot.rootio object:\r\n\r\nclass TTree(uproot.tree.TTreeMethods, TNamed, TAttLine, TAttFill, TAttMarker)\r\n |  Adds array reading methods to TTree objects that have been streamed from a ROOT file.\r\n |  \r\n |  - square brackets (``__getitem__``) returns a branch by name (see :py:meth:`get <uproot.tree.TTreeMethods.get>`).\r\n |  - the ``len`` function (``__len__``) returns the number of entries (same as ``numentries``).\r\n |  - iteration (``__iter__``) has no implementation. This is to avoid confusion between iterating over all branches (probably not what you want, but fitting the pattern set by :py:class:`ROOTDirectory <uproot.rootio.ROOTDirectory>` and ``dict``) and iterating over the data.\r\n |  \r\n```\r\nIn a Jupyter notebook, this looks like:\r\n```\r\nHelp on TTree in module uproot.rootio object:\r\n\r\nclass TTree(uproot.tree.TTreeMethods, TNamed, TAttLine, TAttFill, TAttMarker)\r\n |  Adds array reading methods to TTree objects that have been streamed from a ROOT file.\r\n |  \r\n |  - square brackets (``__getitem__``) returns a branch by name (see :py:meth:`get\r\n<uproot.tree.TTreeMethods.get>`).\r\n |  - the ``len`` function (``__len__``) returns the number of entries (same as ``numentries``).\r\n |  - iteration (``__iter__``) has no implementation. This is to avoid confusion between iterating \r\nover all branches (probably not what you want, but fitting the pattern set by \r\n:py:class:`ROOTDirectory <uproot.rootio.ROOTDirectory>` and ``dict``) and iterating over the \r\ndata.\r\n |  \r\n```\r\nFor the help to print nicely, I think the line endings need to be inserted manually at X characters.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/454", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/454/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/454/events", "html_url": "https://github.com/scikit-hep/uproot/issues/454", "id": 567543247, "node_id": "MDU6SXNzdWU1Njc1NDMyNDc=", "number": 454, "title": "Retrieve dict of branch names and types for an existing tree", "user": {"login": "beojan", "id": 3727925, "node_id": "MDQ6VXNlcjM3Mjc5MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3727925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beojan", "html_url": "https://github.com/beojan", "followers_url": "https://api.github.com/users/beojan/followers", "following_url": "https://api.github.com/users/beojan/following{/other_user}", "gists_url": "https://api.github.com/users/beojan/gists{/gist_id}", "starred_url": "https://api.github.com/users/beojan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beojan/subscriptions", "organizations_url": "https://api.github.com/users/beojan/orgs", "repos_url": "https://api.github.com/users/beojan/repos", "events_url": "https://api.github.com/users/beojan/events{/privacy}", "received_events_url": "https://api.github.com/users/beojan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-19T12:41:44Z", "updated_at": "2020-06-18T00:38:35Z", "closed_at": "2020-06-18T00:38:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Basically, I'd like to use uproot to copy `TTree`s, because I have some `TTree`s that are each one giant cluster, and I'd like to split them into multiple clusters.\r\n\r\nTo create a new tree with the same branches as an existing one, a `TTreeMethods` method that provided the branch dict needed would be helpful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/452", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/452/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/452/events", "html_url": "https://github.com/scikit-hep/uproot/issues/452", "id": 566003630, "node_id": "MDU6SXNzdWU1NjYwMDM2MzA=", "number": 452, "title": "Failed conversion with JaggedArray with `wrapjaggedmethod` when building ObjectArray", "user": {"login": "raymondEhlers", "id": 1571927, "node_id": "MDQ6VXNlcjE1NzE5Mjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1571927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raymondEhlers", "html_url": "https://github.com/raymondEhlers", "followers_url": "https://api.github.com/users/raymondEhlers/followers", "following_url": "https://api.github.com/users/raymondEhlers/following{/other_user}", "gists_url": "https://api.github.com/users/raymondEhlers/gists{/gist_id}", "starred_url": "https://api.github.com/users/raymondEhlers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raymondEhlers/subscriptions", "organizations_url": "https://api.github.com/users/raymondEhlers/orgs", "repos_url": "https://api.github.com/users/raymondEhlers/repos", "events_url": "https://api.github.com/users/raymondEhlers/events{/privacy}", "received_events_url": "https://api.github.com/users/raymondEhlers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-17T00:59:42Z", "updated_at": "2020-02-17T12:36:49Z", "closed_at": "2020-02-17T12:36:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to write some array methods to interpret a tree. I followed the example of the `TLorentzVectorArray` in `uproot-methods` and was able to successfully build two array classes. However, for my third class, I receive the error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"../exploration_scripts/test_array_interpretation.py\", line 73, in <module>\r\n    run()\r\n  File \"../exploration_scripts/test_array_interpretation.py\", line 67, in run\r\n    arrays[\"data.fSubjets.fConstituentJaggedIndices\"],\r\n  File \"code/.venv/lib/python3.7/site-packages/awkward/util.py\", line 112, in func_wrapper\r\n    wrap, arrays = unwrap_jagged(cls, awkcls, _normalize_arrays(cls, arrays))\r\n  File \"code/alice/substructure/.venv/lib/python3.7/site-packages/awkward/util.py\", line 92, in _normalize_arrays\r\n    arrays[i] = jaggedtype[i](starts, stops, content) + arrays[i]    # invoke jagged broadcasting to align arrays\r\n  File \"code/alice/substructure/.venv/lib/python3.7/site-packages/numpy/lib/mixins.py\", line 25, in func\r\n    return ufunc(self, other)\r\n  File \"code/alice/substructure/.venv/lib/python3.7/site-packages/awkward/array/jagged.py\", line 965, in __array_ufunc__\r\n    inputs[i] = inputs[i]._tojagged(starts, stops, copy=False)\r\n  File \"code/alice/substructure/.venv/lib/python3.7/site-packages/awkward/array/jagged.py\", line 904, in _tojagged\r\n    raise ValueError(\"cannot fit contents of JaggedArray into the given starts and stops arrays\")\r\nValueError: cannot fit contents of JaggedArray into the given starts and stops arrays\r\n```\r\n\r\nThe part of the tree that I'm trying to apply the methods to is:\r\n\r\n```\r\ndata.fSubjets              TStreamerObjectAny         None\r\ndata.fSubjets.fSplittingNodeIndex\r\n                           TStreamerSTL               asjagged(asdtype('>u2'), 10)\r\ndata.fSubjets.fPartOfIterativeSplitting\r\n                           TStreamerSTL               asjagged(asdtype('bool'), 10)\r\ndata.fSubjets.fConstituentIndices\r\n                           TStreamerSTL               asjagged(asdtype('>u2'), 10)\r\ndata.fSubjets.fConstituentJaggedIndices\r\n                           TStreamerSTL               asjagged(asdtype('>u4'), 10)\r\n```\r\n\r\nThe interpretation appear to match my expected definition. I've simplified the code so that the issue can be reproduced with:\r\n\r\n```python\r\nimport awkward as ak\r\nimport uproot\r\n\r\nclass ArrayMethods(ak.Methods):\r\n    awkward = ak\r\n\r\nclass MyObject:\r\n    def __init__(self, a, b):\r\n        self._a = a\r\n        self._b = b\r\n\r\nclass MyObjectArrayMethods(ArrayMethods):\r\n    def _init_object_array(self, table):\r\n        self.awkward.ObjectArray.__init__(\r\n            self, table, lambda row: MyObject(row[\"a\"], row[\"b\"])\r\n        )\r\n\r\n# Adds in JaggedArray methods for constructing objects with jagged structure.\r\nJaggedMyArrayMethods = MyObjectArrayMethods.mixin(MyObjectArrayMethods, ak.JaggedArray)\r\n\r\nclass MyArray(MyObjectArrayMethods, ak.ObjectArray):\r\n    def __init__(self, a, b) -> None:\r\n        self._init_object_array(ak.Table())\r\n        self[\"a\"] = a\r\n        self[\"b\"] = b\r\n\r\n    @classmethod\r\n    @ak.util.wrapjaggedmethod(JaggedMyArrayMethods)\r\n    def from_jagged(cls, a, b):\r\n        return cls(a, b)\r\n\r\nf = uproot.open(\"../temp/reproducer.root\")\r\nt = f[\"reproducer\"]\r\narrays = t.arrays(namedecode=\"utf-8\")\r\n\r\nsubjets = MyArray.from_jagged(\r\n    arrays[\"data.fSubjets.fConstituentIndices\"],\r\n    arrays[\"data.fSubjets.fConstituentJaggedIndices\"],\r\n)\r\n\r\n```\r\n\r\nwith the file [here](https://cernbox.cern.ch/index.php/s/xdRX9pFl3wkmlkQ). Oddly, if I replace the  two arguments with some other branches, then it succeeds in creating the object (but only for some particular branches). So I suspect those something has gone wrong in reading the last few branches, but I'm uncertain of how to debug further.\r\n\r\nAny help or pointers would be greatly appreciated! Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/451", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/451/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/451/events", "html_url": "https://github.com/scikit-hep/uproot/issues/451", "id": 563510970, "node_id": "MDU6SXNzdWU1NjM1MTA5NzA=", "number": 451, "title": "Failed to read TClonesArray", "user": {"login": "antoniomdk", "id": 4209122, "node_id": "MDQ6VXNlcjQyMDkxMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4209122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoniomdk", "html_url": "https://github.com/antoniomdk", "followers_url": "https://api.github.com/users/antoniomdk/followers", "following_url": "https://api.github.com/users/antoniomdk/following{/other_user}", "gists_url": "https://api.github.com/users/antoniomdk/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoniomdk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoniomdk/subscriptions", "organizations_url": "https://api.github.com/users/antoniomdk/orgs", "repos_url": "https://api.github.com/users/antoniomdk/repos", "events_url": "https://api.github.com/users/antoniomdk/events{/privacy}", "received_events_url": "https://api.github.com/users/antoniomdk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-11T22:05:08Z", "updated_at": "2020-06-18T00:39:07Z", "closed_at": "2020-06-18T00:39:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone,  I've been given a ROOT file and I need to extract some data to feed a model. I'm new to ROOT (CS background) and I can't get my head around this. This error appears when trying to convert a branch into an array:\r\n\r\n> In[50]: branch['fStations']['fStations.fPMTs'].array(entrystop=1)\r\nOut[50]: <ObjectArray [[<Undefined (failed to read 'TClonesArray' version 65535) at 0x0001ade87510>, ...]\r\n\r\n> In[52]: b['fStations']['fStations.fPMTs'].interpretation\r\nOut[52]: asgenobj(SimpleArray(TClonesArray))\r\n\r\nI'm not sure if it's my bad or just that the library doesn't support TClonesArray type.\r\n\r\nI'd appreciate any help.\r\n\r\nThank you so much!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/448", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/448/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/448/events", "html_url": "https://github.com/scikit-hep/uproot/issues/448", "id": 562317867, "node_id": "MDU6SXNzdWU1NjIzMTc4Njc=", "number": 448, "title": "Name mismatch for PositionVector3D streamer", "user": {"login": "chrisburr", "id": 5220533, "node_id": "MDQ6VXNlcjUyMjA1MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5220533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisburr", "html_url": "https://github.com/chrisburr", "followers_url": "https://api.github.com/users/chrisburr/followers", "following_url": "https://api.github.com/users/chrisburr/following{/other_user}", "gists_url": "https://api.github.com/users/chrisburr/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisburr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisburr/subscriptions", "organizations_url": "https://api.github.com/users/chrisburr/orgs", "repos_url": "https://api.github.com/users/chrisburr/repos", "events_url": "https://api.github.com/users/chrisburr/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisburr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142269, "node_id": "MDU6TGFiZWw2ODcxNDIyNjk=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-10T04:31:11Z", "updated_at": "2020-02-11T16:12:45Z", "closed_at": "2020-02-11T16:12:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Yet another fun streamer naming thing... \ud83d\ude09\r\n\r\nWhen opening a file from the CMS opendata, loading the `Tree` object fails with a `KeyError`. This seems to be because the expected key in `streamerinfosmap` is:\r\n\r\n`b'ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double> >'`\r\n\r\nI can work around it by hacking the key to be:\r\n\r\n`b'ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>'`\r\n\r\n## Full reproducer\r\n```python\r\nIn [1]: import uproot\r\n   ...: f = uproot.open('root://eospublic.cern.ch//eos/opendata/cms/Run2010B/MuOnia/AOD/Apr21ReReco-v1/0000/02186E3C-D277-E011-8A05-00215E21D516.root')\r\n   ...: tree = f['Events']\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-1-6b196f960e9d> in <module>\r\n      1 import uproot\r\n      2 f = uproot.open('root://eospublic.cern.ch//eos/opendata/cms/Run2010B/MuOnia/AOD/Apr21ReReco-v1/0000/02186E3C-D277-E011-8A05-00215E21D516.root')\r\n----> 3 tree = f['Events']\r\n\r\n~/miniconda3/envs/d2hll/lib/python3.7/site-packages/uproot/rootio.py in __getitem__(self, name)\r\n    223\r\n    224     def __getitem__(self, name):\r\n--> 225         return self.get(name)\r\n    226\r\n    227     def __len__(self):\r\n\r\n~/miniconda3/envs/d2hll/lib/python3.7/site-packages/uproot/rootio.py in get(self, name, cycle)\r\n    357\r\n    358             if last is not None:\r\n--> 359                 return last.get()\r\n    360             elif cycle is None:\r\n    361                 raise _KeyError(\"not found: {0}\\n in file: {1}\".format(repr(name), self._context.sourcepath))\r\n\r\n~/miniconda3/envs/d2hll/lib/python3.7/site-packages/uproot/rootio.py in get(self, dismiss)\r\n   1024\r\n   1025         try:\r\n-> 1026             return _classof(self._context, self._fClassName).read(self._source, self._cursor.copied(), self._context, self)\r\n   1027         finally:\r\n   1028             if dismiss:\r\n\r\n~/miniconda3/envs/d2hll/lib/python3.7/site-packages/uproot/rootio.py in read(cls, source, cursor, context, parent)\r\n    964         out = cls.__new__(cls)\r\n    965         out = cls._readinto(out, source, cursor, context, parent)\r\n--> 966         out._postprocess(source, cursor, context, parent)\r\n    967         return out\r\n    968\r\n\r\n~/miniconda3/envs/d2hll/lib/python3.7/site-packages/uproot/tree.py in _postprocess(self, source, cursor, context, parent)\r\n    287\r\n    288         for branch in self._fBranches:\r\n--> 289             self._attachstreamer(branch, context.streamerinfosmap.get(getattr(branch, \"_fClassName\", None), None), context.streamerinfosmap, False)\r\n    290\r\n    291         self._branchlookup = {}\r\n\r\n~/miniconda3/envs/d2hll/lib/python3.7/site-packages/uproot/tree.py in _attachstreamer(self, branch, streamer, streamerinfosmap, isTClonesArray)\r\n    279                     pass\r\n    280\r\n--> 281                 self._attachstreamer(subbranch, submembers.get(name, None), streamerinfosmap, isTClonesArray)\r\n    282\r\n    283     def _postprocess(self, source, cursor, context, parent):\r\n\r\n~/miniconda3/envs/d2hll/lib/python3.7/site-packages/uproot/tree.py in _attachstreamer(self, branch, streamer, streamerinfosmap, isTClonesArray)\r\n    266                         base, name = name[:index], name[index + 1:]\r\n    267                         if base in submembers and isinstance(submembers[base], digDeeperTypes):\r\n--> 268                             submembers = streamerinfosmap[submembers[base]._fTypeName.rstrip(b\"*\")].members\r\n    269\r\n    270                 try:\r\n\r\nKeyError: b'ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<double> >'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/447", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/447/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/447/events", "html_url": "https://github.com/scikit-hep/uproot/issues/447", "id": 556919516, "node_id": "MDU6SXNzdWU1NTY5MTk1MTY=", "number": 447, "title": "uproot.rootio.TTree.arrays omitting variables", "user": {"login": "kreczko", "id": 1213276, "node_id": "MDQ6VXNlcjEyMTMyNzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1213276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kreczko", "html_url": "https://github.com/kreczko", "followers_url": "https://api.github.com/users/kreczko/followers", "following_url": "https://api.github.com/users/kreczko/following{/other_user}", "gists_url": "https://api.github.com/users/kreczko/gists{/gist_id}", "starred_url": "https://api.github.com/users/kreczko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kreczko/subscriptions", "organizations_url": "https://api.github.com/users/kreczko/orgs", "repos_url": "https://api.github.com/users/kreczko/repos", "events_url": "https://api.github.com/users/kreczko/events{/privacy}", "received_events_url": "https://api.github.com/users/kreczko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142271, "node_id": "MDU6TGFiZWw2ODcxNDIyNzE=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/feature-request", "name": "feature-request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-29T15:01:18Z", "updated_at": "2020-06-18T22:03:11Z", "closed_at": "2020-06-18T22:03:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Summary\r\nIn the case of multiple branches with identical variable (sub-branch/leaf?) names the [`uproot.rootio.TTree.arrays`](https://github.com/scikit-hep/uproot/blob/master/uproot/tree.py#L502) will hide variables.\r\n\r\nAs en example, see http://fast-hep-data.web.cern.ch/fast-hep-data/cms/L1T/CMS_L1T_study.root where the tree `'l1CaloTowerEmuTree/L1CaloTowerTree'` has the structure:\r\n\r\n```bash\r\nCaloTP                     TStreamerInfo              None\r\nnHCALTP                    TStreamerBasicType         asdtype('>i2')\r\nhcalTPieta                 TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nhcalTPiphi                 TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nhcalTPCaliphi              TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nhcalTPet                   TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nhcalTPcompEt               TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nhcalTPfineGrain            TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nnECALTP                    TStreamerBasicType         asdtype('>i2')\r\necalTPieta                 TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\necalTPiphi                 TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\necalTPCaliphi              TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\necalTPet                   TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\necalTPcompEt               TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\necalTPfineGrain            TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\n\r\nL1CaloTower                TStreamerInfo              None\r\nnTower                     TStreamerBasicType         asdtype('>i2')\r\nieta                       TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\niphi                       TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\niet                        TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\niem                        TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\nihad                       TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\niratio                     TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\niqual                      TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\net                         TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\neta                        TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nphi                        TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\n\r\nL1CaloCluster              TStreamerInfo              None\r\nnCluster                   TStreamerBasicType         asdtype('>i2')\r\nieta                       TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\niphi                       TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\niet                        TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\niqual                      TStreamerSTL               asjagged(asdtype('>i2'), 10)\r\net                         TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\neta                        TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\nphi                        TStreamerSTL               asjagged(asdtype('>f4'), 10)\r\n```\r\n\r\nHere, `L1CaloTower` and `L1CaloCluster` have a few variables in common, e.g. `et`, `eta`, `phi`.\r\nHowever, when calling `tree.arrays(namedecode=\"utf-8\")`, these variables are only present once, which leads to a total of 7 missing variables:\r\n```bash\r\narray keys dict_keys(['nHCALTP', 'hcalTPieta', 'hcalTPiphi', 'hcalTPCaliphi', 'hcalTPet', 'hcalTPcompEt', 'hcalTPfineGrain', 'nECALTP', 'ecalTPieta', 'ecalTPiphi', 'ecalTPCaliphi', 'ecalTPet', 'ecalTPcompEt', 'ecalTPfineGrain', 'nTower', 'ieta', 'iphi', 'iet', 'iem', 'ihad', 'iratio', 'iqual', 'et', 'eta', 'phi', 'nCluster'])\r\n\r\n33 variables across 3 branches but 26 variables in array dict\r\n```\r\n\r\n### Request\r\nWould it be possible to adjust the `arrays` method or add an option to the `arrays` method to produce unique keys for all variables?\r\ne.g. `L1CaloCluster.et` and `L1CaloTower.et`?\r\n\r\nThe workaround at the moment is to convert each variable independently, e.g. `array = t1['L1CaloTower']['et'].array()`\r\n\r\n### Full example code\r\n```python\r\nimport uproot\r\n\r\nf = uproot.open('http://fast-hep-data.web.cern.ch/fast-hep-data/cms/L1T/CMS_L1T_study.root')\r\nt1 = f['l1CaloTowerEmuTree/L1CaloTowerTree']\r\n\r\nt1.show()\r\n\r\narrays = t1.arrays(namedecode=\"utf-8\")\r\nprint('array keys', arrays.keys())\r\nn_array_vars = len(arrays.keys())\r\n\r\nn_branches = len(t1.keys())\r\nn_vars = sum([len(t1[k].keys()) for k in t1.keys()])\r\nprint(f'{n_vars} variables across {n_branches} branches but {n_array_vars} variables in array dict')\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/445", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/445/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/445/events", "html_url": "https://github.com/scikit-hep/uproot/issues/445", "id": 556849256, "node_id": "MDU6SXNzdWU1NTY4NDkyNTY=", "number": 445, "title": "lazyarray/lazyarrays does not always report missing TTree", "user": {"login": "vippolit", "id": 33893114, "node_id": "MDQ6VXNlcjMzODkzMTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/33893114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vippolit", "html_url": "https://github.com/vippolit", "followers_url": "https://api.github.com/users/vippolit/followers", "following_url": "https://api.github.com/users/vippolit/following{/other_user}", "gists_url": "https://api.github.com/users/vippolit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vippolit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vippolit/subscriptions", "organizations_url": "https://api.github.com/users/vippolit/orgs", "repos_url": "https://api.github.com/users/vippolit/repos", "events_url": "https://api.github.com/users/vippolit/events{/privacy}", "received_events_url": "https://api.github.com/users/vippolit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-29T13:05:06Z", "updated_at": "2020-01-29T14:33:23Z", "closed_at": "2020-01-29T14:33:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like, while\r\n```python\r\nuproot.tree.lazyarrays(some_file, some_tree_name)\r\n```\r\ncorrectly reports that the specified TTree is not present in the input TFiles, \r\n```python\r\nraise ValueError(\"no matching paths contained a tree named {0}\".format(repr(treepath)))\r\n```\r\ninstead the variants\r\n```python\r\nuproot.tree.lazyarrays(some_file, some_tree_name, [branchname1, branchname2])\r\nuproot.tree.lazyarray(some_file, some_tree_name, branchname)\r\n```\r\ndo not catch this issue, and end up complaining about the branchlist being \"incomplete\":\r\n```python\r\nfor branch, interpretation in branches:\r\nValueError: not enough values to unpack (expected 2, got 1)\r\n```\r\nwhich is a bit misleading.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/444", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/444/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/444/events", "html_url": "https://github.com/scikit-hep/uproot/issues/444", "id": 555850178, "node_id": "MDU6SXNzdWU1NTU4NTAxNzg=", "number": 444, "title": "Extend branch lookup to match subbranches using `/` as separator", "user": {"login": "ast0815", "id": 5884065, "node_id": "MDQ6VXNlcjU4ODQwNjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5884065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ast0815", "html_url": "https://github.com/ast0815", "followers_url": "https://api.github.com/users/ast0815/followers", "following_url": "https://api.github.com/users/ast0815/following{/other_user}", "gists_url": "https://api.github.com/users/ast0815/gists{/gist_id}", "starred_url": "https://api.github.com/users/ast0815/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ast0815/subscriptions", "organizations_url": "https://api.github.com/users/ast0815/orgs", "repos_url": "https://api.github.com/users/ast0815/repos", "events_url": "https://api.github.com/users/ast0815/events{/privacy}", "received_events_url": "https://api.github.com/users/ast0815/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142271, "node_id": "MDU6TGFiZWw2ODcxNDIyNzE=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/feature-request", "name": "feature-request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-27T21:40:52Z", "updated_at": "2020-08-12T13:26:33Z", "closed_at": "2020-08-12T13:26:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As discussed in #443, it would be convenient to specify subbranches in the `iterate` functions. This would have to be implemented in a couple of places:\r\n\r\nhttps://github.com/scikit-hep/uproot/blob/master/uproot/rootio.py#L333-L363\r\n\r\nhttps://github.com/scikit-hep/uproot/blob/master/uproot/tree.py#L374-L383\r\n\r\nhttps://github.com/scikit-hep/uproot/blob/master/uproot/tree.py#L981-L986", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/443", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/443/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/443/events", "html_url": "https://github.com/scikit-hep/uproot/issues/443", "id": 555562800, "node_id": "MDU6SXNzdWU1NTU1NjI4MDA=", "number": 443, "title": "Reading tree with TVector3 branch into Pandas DataFrame", "user": {"login": "ast0815", "id": 5884065, "node_id": "MDQ6VXNlcjU4ODQwNjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5884065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ast0815", "html_url": "https://github.com/ast0815", "followers_url": "https://api.github.com/users/ast0815/followers", "following_url": "https://api.github.com/users/ast0815/following{/other_user}", "gists_url": "https://api.github.com/users/ast0815/gists{/gist_id}", "starred_url": "https://api.github.com/users/ast0815/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ast0815/subscriptions", "organizations_url": "https://api.github.com/users/ast0815/orgs", "repos_url": "https://api.github.com/users/ast0815/repos", "events_url": "https://api.github.com/users/ast0815/events{/privacy}", "received_events_url": "https://api.github.com/users/ast0815/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-27T13:09:41Z", "updated_at": "2020-01-27T18:00:58Z", "closed_at": "2020-01-27T18:00:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am trying to read a TTree with a TVector3 branch, and ultimately would like to have the data as a Pandas DataFrame. Unfortunately I get this error when trying to do so:\r\n\r\n```\r\nValueError: cannot interpret branch b'hitPosExtrap' as a Python type\r\n```\r\n\r\nHere is an excerpt of my code:\r\n\r\n```\r\ntree_name = 'muonDataTree'\r\nwith uproot.open(filelist[0]) as f:\r\n    print(f[tree_name].array('hitPosExtrap'))\r\n```\r\n\r\nI uploaded a file where this happens here: \r\n\r\nhttp://www-pnp.physics.ox.ac.uk/~koch/TVector3_error.root", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/440", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/440/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/440/events", "html_url": "https://github.com/scikit-hep/uproot/issues/440", "id": 554555123, "node_id": "MDU6SXNzdWU1NTQ1NTUxMjM=", "number": 440, "title": "Add PyPI and Conda-forge badges", "user": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-24T05:41:32Z", "updated_at": "2020-01-24T11:28:34Z", "closed_at": "2020-01-24T11:26:54Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I was recently asked for a quick way to find the latest version of Uproot, and I tried to point the user at the PyPI badge on the repo page, but there wasn't one. PyPI and Conda-forge version badges would be a useful addition!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/438", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/438/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/438/events", "html_url": "https://github.com/scikit-hep/uproot/issues/438", "id": 550026056, "node_id": "MDU6SXNzdWU1NTAwMjYwNTY=", "number": 438, "title": "Questions about the memory management of uproot, or: how to properly close files (and clean up memory)?", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2020-01-15T08:02:29Z", "updated_at": "2020-01-16T14:47:40Z", "closed_at": "2020-01-15T17:31:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As far as I understood, there is no explicit \"closing\" of the files, since it's automatically managed (https://uproot.readthedocs.io/en/latest/opening-files.html). I however ran into memory issues when processing tons of ROOT files, although I do not use the data after some iterations so they should be garbage collected at some point, at least I thought it would.\r\n\r\nI even tried to reuse the same `basketcache` (I hope it's safe to do?) over different branches and files.\r\n\r\nHere is an example script which I use to process a few hundred files. It accesses some branches and jumps to the next file. I also monitor the peak memory usage during the execution. Sorry, it's not a MWE due to the large files but I think it's enough for demonstration:\r\n\r\n```python\r\nimport resource\r\nimport sys\r\nfrom glob import glob\r\nimport numpy as np\r\n\r\nsea_files = glob(\"data/reco-sea/*aanet*.root\")\r\n\r\nimport uproot\r\nBASKET_CACHE_SIZE = 10 * 1024**2\r\n\r\n\r\ndef peak_memory_usage():\r\n    \"\"\"Return peak memory usage in MB\"\"\"\r\n    if sys.platform.startswith('win'):\r\n        p = psutil.Process()\r\n        return p.memory_info().peak_wset / 1024 / 1024\r\n\r\n    mem = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\r\n    factor_mb = 1 / 1024\r\n    if sys.platform == 'darwin':\r\n        factor_mb = 1 / (1024 * 1024)\r\n    return mem * factor_mb\r\n\r\ndef read_test():\r\n    for idx, sea_file in enumerate(sea_files[:40]):\r\n        print(\"Opening file {} (#{})\".format(sea_file, idx))\r\n        print(\"  peak memory: {} MB\".format(peak_memory_usage()))\r\n        f = uproot.open(sea_file)\r\n        print(\"  file opened...\")\r\n        print(\"  peak memory: {} MB\".format(peak_memory_usage()))\r\n        features = [\r\n            'E', 'lik', *[e + '.' + q for q in 'xyz' for e in ['pos', 'dir']]\r\n        ]\r\n        tracks = f['E']['Evt']['trks']\r\n        cache = uproot.cache.ThreadSafeArrayCache(BASKET_CACHE_SIZE)\r\n        mask = tracks['trks.len'].lazyarray(basketcache=cache).counts > 0\r\n        data = {}\r\n        for feature in features:\r\n            print(\"  Reading branch '{}'\".format(feature))\r\n            data[feature] = tracks['trks.{}'.format(feature)].lazyarray(\r\n                basketcache=cache)[mask, 0]\r\n            print(\"    peak memory: {} MB\".format(peak_memory_usage()))\r\n\r\nread_test()\r\n```\r\n\r\nThe output of the script shows that the peak memory usage grows until it reaches `4715 MB` and then stays constant, indicating that some cache limit has been reached:\r\n\r\n```\r\n\u2591 tgal@cca008:~/analysis/orca4-rbr  venv\r\n\u2591 22:00:43 > python t.py\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006081.root (#0)\r\n  peak memory: 26.8359375 MB\r\n  file opened...\r\n  peak memory: 28.01953125 MB\r\n  Reading branch 'E'\r\n    peak memory: 182.3515625 MB\r\n  Reading branch 'lik'\r\n    peak memory: 274.74609375 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 402.76953125 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 478.87109375 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 607.6328125 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 683.41796875 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 808.92578125 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 873.4609375 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006186.root (#1)\r\n  peak memory: 873.4609375 MB\r\n  file opened...\r\n  peak memory: 873.4609375 MB\r\n  Reading branch 'E'\r\n    peak memory: 880.91015625 MB\r\n  Reading branch 'lik'\r\n    peak memory: 971.85546875 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 1102.859375 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 1179.37890625 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 1309.984375 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 1385.89453125 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 1514.28515625 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 1579.50390625 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006230.root (#2)\r\n  peak memory: 1579.50390625 MB\r\n  file opened...\r\n  peak memory: 1579.50390625 MB\r\n  Reading branch 'E'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'lik'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 1579.50390625 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006612.root (#3)\r\n  peak memory: 1579.50390625 MB\r\n  file opened...\r\n  peak memory: 1579.50390625 MB\r\n  Reading branch 'E'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'lik'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 1579.50390625 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006518.root (#4)\r\n  peak memory: 1579.50390625 MB\r\n  file opened...\r\n  peak memory: 1579.50390625 MB\r\n  Reading branch 'E'\r\n    peak memory: 1579.50390625 MB\r\n  Reading branch 'lik'\r\n    peak memory: 1650.40234375 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 1773.63671875 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 1846.32421875 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 1969.0546875 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 2040.9375 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 2160.50390625 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 2222.94921875 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006138.root (#5)\r\n  peak memory: 2222.94921875 MB\r\n  file opened...\r\n  peak memory: 2223.25 MB\r\n  Reading branch 'E'\r\n    peak memory: 2238.421875 MB\r\n  Reading branch 'lik'\r\n    peak memory: 2329.2890625 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 2460.8203125 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 2537.65625 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 2668.8203125 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 2744.8671875 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 2872.9296875 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 2938.15234375 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006496.root (#6)\r\n  peak memory: 2938.15234375 MB\r\n  file opened...\r\n  peak memory: 2938.15234375 MB\r\n  Reading branch 'E'\r\n    peak memory: 2938.5390625 MB\r\n  Reading branch 'lik'\r\n    peak memory: 3027.75 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 3157.30078125 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 3233.58203125 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 3362.65625 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 3439.14453125 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 3566.0078125 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 3631.078125 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006372.root (#7)\r\n  peak memory: 3631.078125 MB\r\n  file opened...\r\n  peak memory: 3631.078125 MB\r\n  Reading branch 'E'\r\n    peak memory: 3633.98046875 MB\r\n  Reading branch 'lik'\r\n    peak memory: 3721.7421875 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 3848.34765625 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 3922.50390625 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4048.68359375 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4122.05859375 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4245.0703125 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4307.52734375 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006134.root (#8)\r\n  peak memory: 4307.52734375 MB\r\n  file opened...\r\n  peak memory: 4307.52734375 MB\r\n  Reading branch 'E'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4307.52734375 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006486.root (#9)\r\n  peak memory: 4307.52734375 MB\r\n  file opened...\r\n  peak memory: 4307.52734375 MB\r\n  Reading branch 'E'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4307.52734375 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006097.root (#10)\r\n  peak memory: 4307.52734375 MB\r\n  file opened...\r\n  peak memory: 4307.52734375 MB\r\n  Reading branch 'E'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4307.52734375 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00005977.root (#11)\r\n  peak memory: 4307.52734375 MB\r\n  file opened...\r\n  peak memory: 4307.52734375 MB\r\n  Reading branch 'E'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4307.52734375 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006531.root (#12)\r\n  peak memory: 4307.52734375 MB\r\n  file opened...\r\n  peak memory: 4307.52734375 MB\r\n  Reading branch 'E'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4307.52734375 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006472.root (#13)\r\n  peak memory: 4307.52734375 MB\r\n  file opened...\r\n  peak memory: 4307.52734375 MB\r\n  Reading branch 'E'\r\n    peak memory: 4307.52734375 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4377.2265625 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4508.19140625 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4584.67578125 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4715.25 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00005786.root (#14)\r\n  peak memory: 4715.25 MB\r\n  file opened...\r\n  peak memory: 4715.25 MB\r\n  Reading branch 'E'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4715.25 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006591.root (#15)\r\n  peak memory: 4715.25 MB\r\n  file opened...\r\n  peak memory: 4715.25 MB\r\n  Reading branch 'E'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4715.25 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00005892.root (#16)\r\n  peak memory: 4715.25 MB\r\n  file opened...\r\n  peak memory: 4715.25 MB\r\n  Reading branch 'E'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4715.25 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00005827.root (#17)\r\n  peak memory: 4715.25 MB\r\n  file opened...\r\n  peak memory: 4715.25 MB\r\n  Reading branch 'E'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4715.25 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00006530.root (#18)\r\n  peak memory: 4715.25 MB\r\n  file opened...\r\n  peak memory: 4715.25 MB\r\n  Reading branch 'E'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4715.25 MB\r\nOpening file data/reco-sea/datav5.40.jorcarec.aanet.00005900.root (#19)\r\n  peak memory: 4715.25 MB\r\n  file opened...\r\n  peak memory: 4715.25 MB\r\n  Reading branch 'E'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'lik'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.x'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.y'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'pos.z'\r\n    peak memory: 4715.25 MB\r\n  Reading branch 'dir.z'\r\n    peak memory: 4715.25 MB\r\n```\r\n\r\nI also tried to pass in another `cache` with a size of `10 MB` to the `lazyarray` because I thought that limiting that would have an effect on the final peak memory, but it had only very tiny effect (`4200 MB` at max). This is the changed part of the above script with `CACHE_SIZE = 10 * 1024**2)`:\r\n\r\n```python\r\n        cache = uproot.cache.ThreadSafeArrayCache(CACHE_SIZE)\r\n        basket_cache = uproot.cache.ThreadSafeArrayCache(BASKET_CACHE_SIZE)\r\n        mask = tracks['trks.len'].lazyarray(\r\n            cache=cache, basketcache=basket_cache).counts > 0\r\n        data = {}\r\n        for feature in features:\r\n            print(\"  Reading branch '{}'\".format(feature))\r\n            data[feature] = tracks['trks.{}'.format(feature)].lazyarray(\r\n                cache=cache, basketcache=basket_cache)[mask, 0]\r\n            print(\"    peak memory: {} MB\".format(peak_memory_usage()))\r\n```\r\n\r\nMoving `cache` and `basket_cache` to the global scope so they are reused also across files does not make a difference either, so I am sure it's not a memory leak related to this particular caches.\r\n\r\nSo my questions now are,  before I spend too much time into understanding the low level memory management of uproot (I guess experts can answer these much more quickly or better, point me to the right direction to find it out myself):\r\n\r\n1. Is it safe to reuse a cache across files (with similar branch names)? Or in other words: are the hashes in the cache unique w.r.t. filenames or so?\r\n2. Which cache is actually growing in the above examples? The `cache`/`basket_cache` cannot be the culprit since I tested them file-wise and also in the global scope\r\n3. Is there a way to force a file-close and memory cleanup? Funnily at more or less the same time a PR has been opened by @nsmith- which might be related (sorry, I did not have closer look yet) https://github.com/scikit-hep/uproot/pull/437\r\n4. Where does the ~4GB memory cap come from? Does uproot set this limit based on available resources or is just a side effect of whatever?\r\n\r\n...and of course finally: what can I do have control over the memory management in this case? I need to understand this to be able to design jobs on our HPC farms.\r\n\r\nThanks in advance!\r\n\r\nping @zinebaly\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/434", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/434/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/434/events", "html_url": "https://github.com/scikit-hep/uproot/issues/434", "id": 548184995, "node_id": "MDU6SXNzdWU1NDgxODQ5OTU=", "number": 434, "title": "dtype byteswap", "user": {"login": "8me", "id": 17862090, "node_id": "MDQ6VXNlcjE3ODYyMDkw", "avatar_url": "https://avatars3.githubusercontent.com/u/17862090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/8me", "html_url": "https://github.com/8me", "followers_url": "https://api.github.com/users/8me/followers", "following_url": "https://api.github.com/users/8me/following{/other_user}", "gists_url": "https://api.github.com/users/8me/gists{/gist_id}", "starred_url": "https://api.github.com/users/8me/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/8me/subscriptions", "organizations_url": "https://api.github.com/users/8me/orgs", "repos_url": "https://api.github.com/users/8me/repos", "events_url": "https://api.github.com/users/8me/events{/privacy}", "received_events_url": "https://api.github.com/users/8me/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-10T16:52:49Z", "updated_at": "2020-01-11T16:37:22Z", "closed_at": "2020-01-11T16:37:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some trouble with the dtype in the `KM3NeT_TIMESLICE` format (see for example #433). The data can be read using \r\n```python\r\nf = uproot.open(\"file.root\")\r\ntree = f[b'KM3NET_TIMESLICE_L2'][b'KM3NETDAQ::JDAQTimeslice']\r\nsuperframes = tree[b'vector<KM3NETDAQ::JDAQSuperFrame>']\r\nhits_buffer = superframes[\r\nb'vector<KM3NETDAQ::JDAQSuperFrame>.buffer'].lazyarray(\r\n    uproot.asjagged(uproot.astable(\r\n        uproot.asdtype([(\"pmt\", \"u1\"), (\"tdc\", \"u4\"),\r\n              (\"tot\", \"u1\")])),\r\n           skipbytes=6),\r\n        basketcache=uproot.cache.ThreadSafeArrayCache(23*1024**2))\r\n```\r\n(taken from #433 ... thanks @tamasgal ;).\r\n\r\nI tried to modify this code and use the dtypes \"<u4\" and \">u4\" for the \"tdc\" field, in order to invert byteorder. Unfortunately this modification did not have any effect.\r\n\r\n[example.zip](https://github.com/scikit-hep/uproot/files/4046711/example.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/433", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/433/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/433/events", "html_url": "https://github.com/scikit-hep/uproot/issues/433", "id": 548128259, "node_id": "MDU6SXNzdWU1NDgxMjgyNTk=", "number": 433, "title": "TBranch split level", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-10T15:03:15Z", "updated_at": "2020-06-22T20:48:18Z", "closed_at": "2020-06-22T20:48:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have trouble with one specific data stream in our ROOT files, which is the `KM3NET_TIMESLICE` format. This particular data has a specific structure and is written in different branches (where the data is filtered differently, but the structure is the same) with differing \"TBranch split levels\".\r\n\r\nI can read the data which has split level `4` with uproot easily, but two other branches have split level `2` and `0`, which I could not parse yet.\r\n\r\nThe biggest (and probably the only) problem is the `buffer` field, which has it's own \"subdtype\".\r\n\r\nTo be specific, the `KM3NET_TIMESLICE_L0` has split level 2 and the other one `KM3NET_TIMESLICE_L2` split level 4:\r\n\r\n![timeslice_branches](https://user-images.githubusercontent.com/1730350/72161572-a8fb4b80-33c0-11ea-9949-1af706bd033d.png)\r\n\r\nIn case of the split level 4 branch (`KM3NET_TIMESLICE_L2`) I can parse the `buffer` (which is a list of hits).\r\n\r\nHere is the output of `show()`\r\n\r\n```python\r\n>>> f['KM3NET_TIMESLICE_L2']['vector<KM3NETDAQ::JDAQSuperFrame>'].show()\r\nvector<KM3NETDAQ::JDAQSuperFrame>\r\n                           TStreamerSTL               asdtype('>i4')\r\nvector<KM3NETDAQ::JDAQSuperFrame>.length\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.type\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.fUniqueID\r\n                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.fBits\r\n                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.detector_id\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.run\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.frame_index\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.timeslice_start.UTC_seconds\r\n                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.timeslice_start.UTC_16nanosecondcycles\r\n                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.id\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.daq\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.status\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.fifo\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.status_3\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.status_4\r\n                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.numberOfHits\r\n                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\nvector<KM3NETDAQ::JDAQSuperFrame>.buffer\r\n                           TStreamerLoop              None\r\n```\r\n\r\n```python\r\nf = uproot.open(\"file.root\")\r\ntree = f[b'KM3NET_TIMESLICE_L2'][b'KM3NETDAQ::JDAQTimeslice']\r\nsuperframes = tree[b'vector<KM3NETDAQ::JDAQSuperFrame>']\r\nhits_buffer = superframes[\r\nb'vector<KM3NETDAQ::JDAQSuperFrame>.buffer'].lazyarray(\r\n    uproot.asjagged(uproot.astable(\r\n        uproot.asdtype([(\"pmt\", \"u1\"), (\"tdc\", \"u4\"),\r\n              (\"tot\", \"u1\")])),\r\n           skipbytes=6),\r\n        basketcache=uproot.cache.ThreadSafeArrayCache(23*1024**2))\r\n```\r\n\r\nThis works fine because I have direct access to the `buffer` via `superframes[b'vector<KM3NETDAQ::JDAQSuperFrame>.buffer']`.\r\n\r\nFor lower split levels however, I cannot access it, but the whole blob in one go. Here, the output of `show()` is:\r\n\r\n```python\r\n>>> f['KM3NET_TIMESLICE_L0']['vector<KM3NETDAQ::JDAQSuperFrame>'].show()\r\nvector<KM3NETDAQ::JDAQSuperFrame>\r\n                           TStreamerSTL               asjagged(astable(asdtype(\"[('length', '>i4'), ('type', '>i4'), (' fBits', '>u8'), (' fUniqueID', '>u8'), ('detector_id', '>i4'), ('run', '>i4'), ('frame_index', '>i4'), ('UTC_seconds', '>u4'), ('UTC_16nanosecondcycles', '>u4'), ('id', '>i4'), ('daq', '>i4'), ('status', '>i4'), ('fifo', '>i4'), ('status_3', '>i4'), ('status_4', '>i4'), ('numberOfHits', '>u4')]\", \"[('length', '<i4'), ('type', '<i4'), ('detector_id', '<i4'), ('run', '<i4'), ('frame_index', '<i4'), ('UTC_seconds', '<u4'), ('UTC_16nanosecondcycles', '<u4'), ('id', '<i4'), ('daq', '<i4'), ('status', '<i4'), ('fifo', '<i4'), ('status_3', '<i4'), ('status_4', '<i4'), ('numberOfHits', '<u4')]\")), 10)\r\n```\r\nI tried to parse it, but I need to define a nested `dtype`, which is as far as I understood not possible yet. This is just an example how the `dtype` could look like, notice that I am clueless about the `buffer` part, although I know it's an array of `[(\"pmt\", \"u1\"), (\"tdc\", \"u4\"), (\"tot\", \"u1\")]` structs.\r\n\r\n```\r\ndtype = uproot.asjagged(\r\n    uproot.astable(\r\n        uproot.asdtype(\r\n            [('length', '>i4'),\r\n             ('type', '>i4'),\r\n             ('fBits', '>u8'),\r\n             ('fUniqueID', '>u8'), \r\n             ('detector_id', '>i4'), \r\n             ('run', '>i4'), \r\n             ('frame_index', '>i4'), \r\n             ('UTC_seconds', '>u4'), \r\n             ('UTC_16nanosecondcycles', '>u4'), \r\n             ('id', '>i4'), ('daq', '>i4'), \r\n             ('status', '>i4'), \r\n             ('fifo', '>i4'), \r\n             ('status_3', '>i4'), \r\n             ('status_4', '>i4'), \r\n             ('numberOfHits', '>u4'),\r\n             ('buffer', '...')   # ???\r\n            ])\r\n    ), \r\n    skipbytes=10)\r\n```\r\n\r\nHere are two files, one which contains an L0 timeslice branch with split level 2 and one with L1 timeslice and split level 4:\r\n\r\n[files.zip](https://github.com/scikit-hep/uproot/files/4046228/files.zip)\r\n\r\nMany thanks for any input in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/431", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/431/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/431/events", "html_url": "https://github.com/scikit-hep/uproot/issues/431", "id": 546248768, "node_id": "MDU6SXNzdWU1NDYyNDg3Njg=", "number": 431, "title": "Issues reading str->str std::map structures in branch", "user": {"login": "zinebaly", "id": 47111087, "node_id": "MDQ6VXNlcjQ3MTExMDg3", "avatar_url": "https://avatars2.githubusercontent.com/u/47111087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zinebaly", "html_url": "https://github.com/zinebaly", "followers_url": "https://api.github.com/users/zinebaly/followers", "following_url": "https://api.github.com/users/zinebaly/following{/other_user}", "gists_url": "https://api.github.com/users/zinebaly/gists{/gist_id}", "starred_url": "https://api.github.com/users/zinebaly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zinebaly/subscriptions", "organizations_url": "https://api.github.com/users/zinebaly/orgs", "repos_url": "https://api.github.com/users/zinebaly/repos", "events_url": "https://api.github.com/users/zinebaly/events{/privacy}", "received_events_url": "https://api.github.com/users/zinebaly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 16, "created_at": "2020-01-07T12:08:13Z", "updated_at": "2020-01-20T17:35:19Z", "closed_at": "2020-01-20T17:32:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all: happy new year! Thank you for your time and priceless help :)\r\n\r\nHere is my issue:\r\nWhen I try to read a root file header, an uproot error is raised. Here is how I proceed\r\n\r\n```Python\r\nfile = uproot.open(my_root_file)\r\nfile.keys()\r\n>>> [b'Head;1',\r\n b'META;1',\r\n b'E;1',\r\n b'KM3NET_TIMESLICE;1',\r\n b'KM3NET_TIMESLICE_L0;1',\r\n b'KM3NET_TIMESLICE_L1;1',\r\n b'KM3NET_TIMESLICE_L2;1',\r\n b'KM3NET_TIMESLICE_SN;1',\r\n b'KM3NET_EVENT;1',\r\n b'KM3NET_SUMMARYSLICE;1']\r\n```\r\nto read the header info, I type:\r\n\r\n```Python\r\ntree = file[b'Head;1']\r\n```\r\n\r\nwhich raises the following error:\r\n\r\n```Python\r\nNotImplementedError: \r\n\r\nUnimplemented streamer type: TStreamerSTL\r\n\r\nmembers: {'_classversion': 4, '_fOffset': 0, '_fName': b'map<string,string>', '_fTitle': b'', '_fType': 500, '_fSize': 0, '_fArrayLength': 0, '_fArrayDim': 0, '_fMaxIndex': array([0, 0, 0, 0, 0], dtype=int32), '_fTypeName': b'map<string,string>', '_fXmin': 0.0, '_fXmax': 0.0, '_fFactor': 0.0, '_fSTLtype': 4, '_fCtype': 61}\r\n\r\nfile contents:\r\n\r\n00000020  40 00 02 d4 40 09 00 00  4f d9 d7 42 00 00 00 22  |@...@...O..B...\"|\r\n00000040  40 00 01 17 00 09 03 44  41 51 03 50 44 46 08 58  |@......DAQ.PDF.X|\r\n00000060  53 65 63 46 69 6c 65 03  63 61 6e 08 63 61 6e 5f  |SecFile.can.can_|\r\n00000100  75 73 65 72 0c 63 6f 6f  72 64 5f 6f 72 69 67 69  |user.coord_origi|\r\n00000120  6e 06 63 75 74 5f 69 6e  06 63 75 74 5f 6e 75 0b  |n.cut_in.cut_nu.|\r\n00000140  63 75 74 5f 70 72 69 6d  61 72 79 0b 63 75 74 5f  |cut_primary.cut_|\r\n00000160  73 65 61 6d 75 6f 6e 05  64 65 63 61 79 08 64 65  |seamuon.decay.de|\r\n00000200  74 65 63 74 6f 72 07 64  72 61 77 69 6e 67 09 65  |tector.drawing.e|\r\n00000220  6e 64 5f 65 76 65 6e 74  09 67 65 6e 68 65 6e 63  |nd_event.genhenc|\r\n00000240  75 74 06 67 65 6e 76 6f  6c 04 6b 63 75 74 08 6c  |ut.genvol.kcut.l|\r\n```\r\nTo have an overview of the header's data, here is an alternative way of reading the file header (using an internal software package - aa- based on ROOT): \r\n\r\n```Python\r\n\r\nIn [1]: import ROOT, aa                                                                                                           \r\nloading root....  /pbs/throng/km3net/software/root/6.18.04\r\nloading /pbs/throng/km3net/software/aanet/2.0.0/lib/libaaevt.so ... ok (0.52 s.)\r\nloading /pbs/throng/km3net/software/aanet/2.0.0/lib/libaastro.so ... ok (0.03 s.)\r\n\r\nIn [2]: f = ROOT.EventFile(\"numucc.root\")                                                                                         \r\n\r\nIn [3]: print(f.header)                                                                                                           \r\nstart_run: 1\r\nDAQ: 394\r\nPDF: 4      58\r\nXSecFile: \r\ncan: 0 1027 888.4\r\ncan_user: 0.00 1027.00  888.40\r\ncoord_origin: 0 0 0\r\ncut_in: 0 0 0 0\r\ncut_nu: 100 1e+08 -1 1\r\ncut_primary: 0 0 0 0\r\ncut_seamuon: 0 0 0 0\r\ndecay: doesnt happen\r\ndetector: NOT\r\ndrawing: Volume\r\ngenhencut: 2000 0\r\ngenvol: 0 1027 888.4 2.649e+09 100000\r\nkcut: 2\r\nlivetime: 0 0\r\nmodel: 1       2       0       1      12\r\nmuon_desc_file: \r\nngen: 0.1000E+06\r\nnorma: 0 0\r\nnuflux: 0       3       0 0.500E+00 0.000E+00 0.100E+01 0.300E+01\r\nphysics: GENHEN 7.2-220514 181116 1138\r\nseed: GENHEN 3  305765867         0         0\r\nsimul: JSirene 11012 11/17/18 07\r\nsourcemode: diffuse\r\nspectrum: -1.4\r\ntarget: isoscalar\r\nusedetfile: false\r\nxlat_user: 0.63297\r\nxparam: OFF\r\nzed_user: 0.00 3450.00\r\nend_event:\r\n\r\n\r\nIn [4]: f.header.get_line(\"can\")                                                                                                  \r\nOut[4]: '0 1027 888.4'\r\n```\r\nthe header data is usually accessed using a `std::str->std::str` map. \r\n\r\nIs it possible to access the header data using uproot? \r\n\r\nroot file mentioned above:\r\n[numucc.root.zip](https://github.com/scikit-hep/uproot/files/4030411/numucc.root.zip)\r\n\r\nI would like to ping @tamasgal ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/429", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/429/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/429/events", "html_url": "https://github.com/scikit-hep/uproot/issues/429", "id": 543841120, "node_id": "MDU6SXNzdWU1NDM4NDExMjA=", "number": 429, "title": "Cannot read branch data", "user": {"login": "Editi0", "id": 39005998, "node_id": "MDQ6VXNlcjM5MDA1OTk4", "avatar_url": "https://avatars3.githubusercontent.com/u/39005998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Editi0", "html_url": "https://github.com/Editi0", "followers_url": "https://api.github.com/users/Editi0/followers", "following_url": "https://api.github.com/users/Editi0/following{/other_user}", "gists_url": "https://api.github.com/users/Editi0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Editi0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Editi0/subscriptions", "organizations_url": "https://api.github.com/users/Editi0/orgs", "repos_url": "https://api.github.com/users/Editi0/repos", "events_url": "https://api.github.com/users/Editi0/events{/privacy}", "received_events_url": "https://api.github.com/users/Editi0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-30T11:07:52Z", "updated_at": "2020-06-18T00:51:50Z", "closed_at": "2020-06-18T00:51:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "My root file have branch data_ana_kk but it appears that this branch cannot be interpreted as a Python type.\r\n```\r\n>>> f.keys()\r\n[b'data_tr;1']\r\n>>> f[\"data_tr\"].show()\r\ndata_ana_kk                (no streamer)              None\r\nmctoptype                  (no streamer)              asdtype('>i4')\r\nmctopnum                   (no streamer)              asdtype('>i4')\r\nmctopdata                  (no streamer)              asdtype(\"('>i4', (192,))\")\r\nmctopmd5                   (no streamer)              asdtype(\"('>i4', (4,))\")\r\n>>> f[\"data_tr\"][\"data_ana_kk\"].array()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.8/site-packages/uproot/tree.py\", line 1348, in array\r\n    interpretation = self._normalize_interpretation(interpretation, awkward)\r\n  File \"/usr/lib/python3.8/site-packages/uproot/tree.py\", line 1091, in _normalize_interpretation\r\n    raise ValueError(\"cannot interpret branch {0} as a Python type\\n   in file: {1}\".format(repr(self.name), self._context.sourcepath))\r\nValueError: cannot interpret branch b'data_ana_kk' as a Python type\r\n   in file: data_ana_001.root\r\n```\r\nThe root file is here(https://github.com/Editing42/rootfile/blob/master/data_ana_001.root)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/424", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/424/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/424/events", "html_url": "https://github.com/scikit-hep/uproot/issues/424", "id": 539970362, "node_id": "MDU6SXNzdWU1Mzk5NzAzNjI=", "number": 424, "title": "Creating new trees with cycles in the name breaks write-ability", "user": {"login": "kratsg", "id": 761483, "node_id": "MDQ6VXNlcjc2MTQ4Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/761483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kratsg", "html_url": "https://github.com/kratsg", "followers_url": "https://api.github.com/users/kratsg/followers", "following_url": "https://api.github.com/users/kratsg/following{/other_user}", "gists_url": "https://api.github.com/users/kratsg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kratsg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kratsg/subscriptions", "organizations_url": "https://api.github.com/users/kratsg/orgs", "repos_url": "https://api.github.com/users/kratsg/repos", "events_url": "https://api.github.com/users/kratsg/events{/privacy}", "received_events_url": "https://api.github.com/users/kratsg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142269, "node_id": "MDU6TGFiZWw2ODcxNDIyNjk=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-12-18T22:55:39Z", "updated_at": "2019-12-19T14:49:27Z", "closed_at": "2019-12-19T14:49:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "The basic usage works fine\r\n\r\n```python\r\nimport uproot\r\nimport numpy\r\n\r\nwith uproot.recreate(\"example.root\") as f:\r\n    f[\"t\"] = uproot.newtree({\"branch\": \"int32\"})\r\n    f[\"t\"].extend({\"branch\": numpy.array([1, 2, 3, 4, 5])})\r\n```\r\n\r\nhowever, once you get to using a cycle like so\r\n\r\n```\r\nimport uproot\r\nimport numpy\r\n\r\nwith uproot.recreate(\"example.root\") as f:\r\n    f[\"t;1\"] = uproot.newtree({\"branch\": \"int32\"})\r\n    f[\"t;1\"].extend({\"branch\": numpy.array([1, 2, 3, 4, 5])})\r\n```\r\n\r\nthis crashes as `f[\"t;1\"]` stops becoming a `uproot.write.objects.TTree.TTree` and becomes a `uproot.rootio.TTree` instead. This means, among other things, we lose the `extend()` functionality.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/422", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/422/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/422/events", "html_url": "https://github.com/scikit-hep/uproot/issues/422", "id": 539664013, "node_id": "MDU6SXNzdWU1Mzk2NjQwMTM=", "number": 422, "title": "Test suite with two failing tests", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-12-18T12:55:54Z", "updated_at": "2019-12-19T19:32:16Z", "closed_at": "2019-12-18T17:16:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On the current master (6e89ce655) I have two failing tests in `tests/test_tree.py`, see below.\r\n\r\nShould the first one check for a raised `NonImplementedError`, maybe?\r\n\r\n```\r\n\u2591 tgal@staticbox:uproot \ue0a0 remotes/upstream/master uproot \r\n\u2591 13:52:48 128 > pip freeze           \r\nattrs==19.3.0\r\nawkward==0.12.18\r\ncachetools==4.0.0\r\ncertifi==2019.11.28\r\ncffi==1.13.2\r\nchardet==3.0.4\r\nidna==2.8\r\nimportlib-metadata==1.3.0\r\nlz4==2.2.1\r\nmock==3.0.5\r\nmore-itertools==8.0.2\r\nnumpy==1.17.4\r\npackaging==19.2\r\npandas==0.25.3\r\npluggy==0.13.1\r\npy==1.8.0\r\npycparser==2.19\r\npyparsing==2.4.5\r\npytest==5.3.2\r\npython-dateutil==2.8.1\r\npytz==2019.3\r\nrequests==2.22.0\r\nsix==1.13.0\r\n-e git+git@github.com:tamasgal/uproot.git@6e89ce6556fe204ee4cc9e0c0c06f6d78f97503b#egg=uproot\r\nuproot-methods==0.7.2\r\nurllib3==1.25.7\r\nwcwidth==0.1.7\r\nxxhash==1.4.3\r\nzipp==0.6.0\r\nzstandard==0.12.0\r\n\u2591 tgal@staticbox:uproot \ue0a0 remotes/upstream/master uproot \r\n\u2591 13:53:33 > python --version   \r\nPython 3.7.4\r\n```\r\n\r\nTest suite run:\r\n\r\n```\r\ntests/test_tree.py .F.......F..........................                                                                    [ 87%]\r\n```\r\n\r\nFailures:\r\n\r\n```python\r\n============================================================ FAILURES ============================================================\r\n______________________________________________ Test.test_branch_auto_interpretation ______________________________________________\r\n\r\nself = <tests.test_tree.Test testMethod=test_branch_auto_interpretation>\r\n\r\n    def test_branch_auto_interpretation(self):\r\n        # The aim is to reduce this list in a controlled manner\r\n        known_branches_without_interp = [\r\n            b'event',\r\n            b'TObject',\r\n            b'fClosestDistance',\r\n            b'fEvtHdr',\r\n            b'fTracks',\r\n            b'fTracks.fPointValue',\r\n            b'fTriggerBits',\r\n            b'fTriggerBits.TObject'\r\n        ]\r\n        path = os.path.join(\"tests\", \"samples\", \"Event.root\")\r\n        if os.path.exists(path):\r\n            tree = uproot.open(path)[\"T\"]\r\n        else:\r\n            tree = uproot.open(\"http://scikit-hep.org/uproot/examples/Event.root\")[\"T\"]\r\n        branches_without_interp = [b.name for b in tree.allvalues() if b.interpretation is None]\r\n        assert branches_without_interp == known_branches_without_interp\r\n        assert tree.array(\"fTracks.fTArray[3]\", entrystop=10)[5][10].tolist()  == [11.03951644897461, 19.40645980834961, 34.54059982299805]\r\n        assert tree.array(\"fTracks.fCharge\", entrystop=10)[0][0:10].tolist()   == [1.0, 1.0, 1.0, 1.0,-1.0, 0.0, 1.0, 0.0, 0.0, 0.0]\r\n>       assert tree.array(\"fMatrix[4][4]\", entrystop=10)[0][1].tolist()        == [-0.13630907237529755, 0.8007842898368835, 1.706235647201538, 0.0]\r\n\r\ntests/test_tree.py:634: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nuproot/tree.py:500: in array\r\n    return tbranch.array(interpretation=interpretation, entrystart=entrystart, entrystop=entrystop, flatten=flatten, awkwardlib=awkwardlib, cache=cache, basketcache=basketcache, keycache=keycache, executor=executor, blocking=blocking)\r\nuproot/tree.py:1381: in array\r\n    basket_itemoffset = self._basket_itemoffset(interpretation, basketstart, basketstop, keycache)\r\nuproot/tree.py:1334: in _basket_itemoffset\r\n    for j, key in enumerate(self._threadsafe_iterate_keys(keycache, True, basketstart, basketstop)):\r\nuproot/tree.py:1040: in _threadsafe_iterate_keys\r\n    key = self._basketkey(keysource, i, complete)\r\nuproot/tree.py:1757: in _basketkey\r\n    return self._BasketKey(source.parent(), Cursor(self._fBasketSeek[i]), self.compression, complete)\r\nuproot/tree.py:1635: in __init__\r\n    self._fNbytes, self._fVersion, self._fObjlen, self._fDatime, self._fKeylen, self._fCycle, self._fSeekKey, self._fSeekPdir = cursor.fields(source, TBranchMethods._BasketKey._format_small)\r\nuproot/source/cursor.py:46: in fields\r\n    return format.unpack(source.data(start, stop))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <uproot.source.http.HTTPSource object at 0x7f350fac69d0>, start = 8166160, stop = 8166186, dtype = None\r\n\r\n    def data(self, start, stop, dtype=None):\r\n        if dtype is None:\r\n            thedtype = numpy.dtype(numpy.uint8)\r\n        else:\r\n            thedtype = dtype\r\n    \r\n        # assert start >= 0\r\n        # assert stop >= 0\r\n        # assert stop >= start\r\n    \r\n        chunkstart = start // self._chunkbytes\r\n        if stop % self._chunkbytes == 0:\r\n            chunkstop = stop // self._chunkbytes\r\n        else:\r\n            chunkstop = stop // self._chunkbytes + 1\r\n    \r\n        out = numpy.empty((stop - start) // thedtype.itemsize, dtype=thedtype)\r\n    \r\n        for chunkindex in range(chunkstart, chunkstop):\r\n            chunk = None\r\n            if self._futures is not None:\r\n                future = self._futures.pop(chunkindex, None)\r\n                if future is not None:\r\n                    chunk = future.result()\r\n    \r\n            if chunk is None:\r\n                try:\r\n                    chunk = self.cache[chunkindex]\r\n                except KeyError:\r\n                    self._open()\r\n                    chunk = self._read(chunkindex)\r\n    \r\n            cstart = 0\r\n            cstop = self._chunkbytes\r\n            gstart = chunkindex * self._chunkbytes\r\n            gstop = (chunkindex + 1) * self._chunkbytes\r\n    \r\n            if len(chunk) > self._chunkbytes:\r\n                if not numpy.array_equal(chunk[:4], list(b\"root\")):\r\n>                   raise NotImplementedError(\"Expected {0} or fewer bytes but received {1} and data does not appear to be an entire ROOT file.\".format(self._chunkbytes, len(chunk)))\r\nE                   NotImplementedError: Expected 1048576 or fewer bytes but received 1048577 and data does not appear to be an entire ROOT file.\r\n\r\nuproot/source/chunked.py:125: NotImplementedError\r\n_____________________________________________________ Test.test_hist_in_tree _____________________________________________________\r\n\r\nself = <tests.test_tree.Test testMethod=test_hist_in_tree>\r\n\r\n    def test_hist_in_tree(self):\r\n        path = os.path.join(\"tests\", \"samples\", \"Event.root\")\r\n        if os.path.exists(path):\r\n            tree = uproot.open(path)[\"T\"]\r\n        else:\r\n            tree = uproot.open(\"http://scikit-hep.org/uproot/examples/Event.root\")[\"T\"]\r\n        check = [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,\r\n                 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,\r\n                 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n                 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,\r\n                 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0,\r\n                 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,\r\n                 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]\r\n    \r\n>       assert tree.array(\"fH\")[20].values.tolist() == check\r\n\r\ntests/test_tree.py:611: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nuproot/tree.py:500: in array\r\n    return tbranch.array(interpretation=interpretation, entrystart=entrystart, entrystop=entrystop, flatten=flatten, awkwardlib=awkwardlib, cache=cache, basketcache=basketcache, keycache=keycache, executor=executor, blocking=blocking)\r\nuproot/tree.py:1381: in array\r\n    basket_itemoffset = self._basket_itemoffset(interpretation, basketstart, basketstop, keycache)\r\nuproot/tree.py:1334: in _basket_itemoffset\r\n    for j, key in enumerate(self._threadsafe_iterate_keys(keycache, True, basketstart, basketstop)):\r\nuproot/tree.py:1040: in _threadsafe_iterate_keys\r\n    key = self._basketkey(keysource, i, complete)\r\nuproot/tree.py:1757: in _basketkey\r\n    return self._BasketKey(source.parent(), Cursor(self._fBasketSeek[i]), self.compression, complete)\r\nuproot/tree.py:1635: in __init__\r\n    self._fNbytes, self._fVersion, self._fObjlen, self._fDatime, self._fKeylen, self._fCycle, self._fSeekKey, self._fSeekPdir = cursor.fields(source, TBranchMethods._BasketKey._format_small)\r\nuproot/source/cursor.py:46: in fields\r\n    return format.unpack(source.data(start, stop))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <uproot.source.http.HTTPSource object at 0x7f3510c6f4d0>, start = 1171681, stop = 1171707, dtype = None\r\n\r\n    def data(self, start, stop, dtype=None):\r\n        if dtype is None:\r\n            thedtype = numpy.dtype(numpy.uint8)\r\n        else:\r\n            thedtype = dtype\r\n    \r\n        # assert start >= 0\r\n        # assert stop >= 0\r\n        # assert stop >= start\r\n    \r\n        chunkstart = start // self._chunkbytes\r\n        if stop % self._chunkbytes == 0:\r\n            chunkstop = stop // self._chunkbytes\r\n        else:\r\n            chunkstop = stop // self._chunkbytes + 1\r\n    \r\n        out = numpy.empty((stop - start) // thedtype.itemsize, dtype=thedtype)\r\n    \r\n        for chunkindex in range(chunkstart, chunkstop):\r\n            chunk = None\r\n            if self._futures is not None:\r\n                future = self._futures.pop(chunkindex, None)\r\n                if future is not None:\r\n                    chunk = future.result()\r\n    \r\n            if chunk is None:\r\n                try:\r\n                    chunk = self.cache[chunkindex]\r\n                except KeyError:\r\n                    self._open()\r\n                    chunk = self._read(chunkindex)\r\n    \r\n            cstart = 0\r\n            cstop = self._chunkbytes\r\n            gstart = chunkindex * self._chunkbytes\r\n            gstop = (chunkindex + 1) * self._chunkbytes\r\n    \r\n            if len(chunk) > self._chunkbytes:\r\n                if not numpy.array_equal(chunk[:4], list(b\"root\")):\r\n                    raise NotImplementedError(\"Expected {0} or fewer bytes but received {1} and data does not appear to be an entire ROOT file.\".format(self._chunkbytes, len(chunk)))\r\n                self.cache = {}\r\n                for i in range(0, len(chunk), self._chunkbytes):\r\n                    self.cache[i // self._chunkbytes] = chunk[i:i+self._chunkbytes]\r\n                chunk = self.cache[chunkindex]\r\n                # Dismiss any pending futures as everything has already been loaded\r\n                self.dismiss()\r\n            else:\r\n                self.cache[chunkindex] = chunk\r\n    \r\n            if gstart < start:\r\n                cstart += start - gstart\r\n                gstart += start - gstart\r\n            if gstop > stop:\r\n                cstop -= gstop - stop\r\n                gstop -= gstop - stop\r\n    \r\n            if cstop - cstart > len(chunk):\r\n>               raise IndexError(\"indexes {0}:{1} are beyond the end of data source {2}\".format(gstart + len(chunk), stop, repr(self.path)))\r\nE               IndexError: indexes 1171682:1171707 are beyond the end of data source 'http://scikit-hep.org/uproot/examples/Event.root'\r\n\r\nuproot/source/chunked.py:143: IndexError\r\n=========================================== 2 failed, 105 passed, 2 skipped in 10.92s ============================================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/419", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/419/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/419/events", "html_url": "https://github.com/scikit-hep/uproot/issues/419", "id": 537979954, "node_id": "MDU6SXNzdWU1Mzc5Nzk5NTQ=", "number": 419, "title": "Investigating basket sizes before creating lazyarrays to adjust the cache size", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-14T23:42:59Z", "updated_at": "2019-12-15T13:28:53Z", "closed_at": "2019-12-15T02:48:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We use `lazyarray`s for many of our nested data structures and they work very nicely. However, we sometimes hit a file where the (default) cache size which we use as the `basketcache` is too small, so we get the error `ValueError: value too large` from `cachetools`.\r\n\r\nIs there any recommended way to skim through the ROOT structures and figure out the maximum basket size so we can adjust the `basketcache` size beforehand? Quickly iterating through the the trees/branches and checking for `dtype`s and `len`ghts would provide the numbers but I'd like to avoid any unnecessary I/O to keep the latency low.\r\n\r\nIf I find some time I'd also would like to follow this up with a PR if I find time to add a `console_script` to the `setup.py` similar to [ptdump](https://www.pytables.org/usersguide/utilities.html) in PyTables which shows the tree structures and some relevant sizes.\r\n\r\nPing @zinebaly", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/418", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/418/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/418/events", "html_url": "https://github.com/scikit-hep/uproot/issues/418", "id": 536608170, "node_id": "MDU6SXNzdWU1MzY2MDgxNzA=", "number": 418, "title": "Accessing custom class methods", "user": {"login": "soleti", "id": 6535253, "node_id": "MDQ6VXNlcjY1MzUyNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6535253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soleti", "html_url": "https://github.com/soleti", "followers_url": "https://api.github.com/users/soleti/followers", "following_url": "https://api.github.com/users/soleti/following{/other_user}", "gists_url": "https://api.github.com/users/soleti/gists{/gist_id}", "starred_url": "https://api.github.com/users/soleti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soleti/subscriptions", "organizations_url": "https://api.github.com/users/soleti/orgs", "repos_url": "https://api.github.com/users/soleti/repos", "events_url": "https://api.github.com/users/soleti/events{/privacy}", "received_events_url": "https://api.github.com/users/soleti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-12-11T20:53:50Z", "updated_at": "2019-12-12T11:24:44Z", "closed_at": "2019-12-12T11:24:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, sorry if this issue is a duplicate, but I am trying to access the values returned by some methods of a custom class. This is what I have in the TBrowser:\r\n\r\n![TBrowser screenshot](https://i.imgur.com/hGfwKF8.png)\r\n\r\nBut when I try to access it with uproot I get\r\n\r\n``` >>> import uproot\r\n>>> file = uproot.open(\"output.root\")\r\n>>> pos = file[\"SCHD\"][\"chdiag\"][\"pos\"]\r\n>>> pos.show()\r\npos                        TStreamerInfo              None\r\nfCoordinates               TStreamerObjectAny         None\r\nfCoordinates.fX            TStreamerBasicType         asdtype('>f4')\r\nfCoordinates.fY            TStreamerBasicType         asdtype('>f4')\r\nfCoordinates.fZ            TStreamerBasicType         asdtype('>f4')\r\n\r\n```\r\n\r\nSo basically I can access only fCoordinates and not e.g. mag2 or perp2. Another problem is that, since this class is used more than once in the tree, if I convert the tree to a pandas dataframe I get columns with the same name (e.g. `fCoordinates.fX`). I can rename them but I need to do it manually by inspecting their order in the columns list, so I know who is who. It would be helpful if they could automatically be called e.g. `pos.fCoordinates.fX`.\r\n\r\nIs there a way to do both things with uproot? I uploaded a small example file here: https://drive.google.com/open?id=1ChG6nDEUgVa09ro9zgpCfwEAnlXIbgdN", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/415", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/415/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/415/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/415/events", "html_url": "https://github.com/scikit-hep/uproot/issues/415", "id": 530129718, "node_id": "MDU6SXNzdWU1MzAxMjk3MTg=", "number": 415, "title": "Add the ability to read data compressed by zstd", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-29T02:42:41Z", "updated_at": "2019-12-19T12:41:27Z", "closed_at": "2019-12-19T12:41:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "ROOT is introducing a new compression method, zstd (\"z-standard\"), which will need to be explicitly handled like the others (zlib, lzma, and lz4). There is surely a Python library for this compression method, though it will take some investigation to discover what the new two-character identifier for zstd is, what kind of header it has, how to access the right decompression function in the Python library (i.e. block vs. frame). One of us should do this soon after the ROOT version with zstd is released.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/414", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/414/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/414/events", "html_url": "https://github.com/scikit-hep/uproot/issues/414", "id": 530128834, "node_id": "MDU6SXNzdWU1MzAxMjg4MzQ=", "number": 414, "title": "Check compatibility with recent versions of ROOT", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-29T02:38:07Z", "updated_at": "2020-06-18T00:52:57Z", "closed_at": "2020-06-18T00:52:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The `sample-VERSION-COMPRESSION.root` files in `tests/samples` are generated by the `.C` file in that directory, and it may be a few versions of ROOT behind. One of us should verify that new `sample` files made by the latest version of ROOT can pass the same tests as the others. (The other direction, ROOT reading files generated by uproot, is automatically treated with the latest conda version of ROOT by continuous integration.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/413", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/413/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/413/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/413/events", "html_url": "https://github.com/scikit-hep/uproot/issues/413", "id": 530059946, "node_id": "MDU6SXNzdWU1MzAwNTk5NDY=", "number": 413, "title": "reading trees created by groot-v0.21.0", "user": {"login": "sbinet", "id": 1070920, "node_id": "MDQ6VXNlcjEwNzA5MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1070920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbinet", "html_url": "https://github.com/sbinet", "followers_url": "https://api.github.com/users/sbinet/followers", "following_url": "https://api.github.com/users/sbinet/following{/other_user}", "gists_url": "https://api.github.com/users/sbinet/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbinet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbinet/subscriptions", "organizations_url": "https://api.github.com/users/sbinet/orgs", "repos_url": "https://api.github.com/users/sbinet/repos", "events_url": "https://api.github.com/users/sbinet/events{/privacy}", "received_events_url": "https://api.github.com/users/sbinet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142269, "node_id": "MDU6TGFiZWw2ODcxNDIyNjk=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}, {"id": 1953928640, "node_id": "MDU6TGFiZWwxOTUzOTI4NjQw", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/good%20first%20issue", "name": "good first issue", "color": "4c67ff", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "Arpita-Seksaria", "id": 58268950, "node_id": "MDQ6VXNlcjU4MjY4OTUw", "avatar_url": "https://avatars3.githubusercontent.com/u/58268950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arpita-Seksaria", "html_url": "https://github.com/Arpita-Seksaria", "followers_url": "https://api.github.com/users/Arpita-Seksaria/followers", "following_url": "https://api.github.com/users/Arpita-Seksaria/following{/other_user}", "gists_url": "https://api.github.com/users/Arpita-Seksaria/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arpita-Seksaria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arpita-Seksaria/subscriptions", "organizations_url": "https://api.github.com/users/Arpita-Seksaria/orgs", "repos_url": "https://api.github.com/users/Arpita-Seksaria/repos", "events_url": "https://api.github.com/users/Arpita-Seksaria/events{/privacy}", "received_events_url": "https://api.github.com/users/Arpita-Seksaria/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Arpita-Seksaria", "id": 58268950, "node_id": "MDQ6VXNlcjU4MjY4OTUw", "avatar_url": "https://avatars3.githubusercontent.com/u/58268950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arpita-Seksaria", "html_url": "https://github.com/Arpita-Seksaria", "followers_url": "https://api.github.com/users/Arpita-Seksaria/followers", "following_url": "https://api.github.com/users/Arpita-Seksaria/following{/other_user}", "gists_url": "https://api.github.com/users/Arpita-Seksaria/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arpita-Seksaria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arpita-Seksaria/subscriptions", "organizations_url": "https://api.github.com/users/Arpita-Seksaria/orgs", "repos_url": "https://api.github.com/users/Arpita-Seksaria/repos", "events_url": "https://api.github.com/users/Arpita-Seksaria/events{/privacy}", "received_events_url": "https://api.github.com/users/Arpita-Seksaria/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2019-11-28T19:50:56Z", "updated_at": "2020-07-02T03:59:54Z", "closed_at": "2020-07-02T03:59:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "it seems `uproot` can't read back a simple ROOT files created by Go-HEP v0.21.0:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"log\"\r\n\r\n\t\"go-hep.org/x/hep/groot\"\r\n\t\"go-hep.org/x/hep/groot/rtree\"\r\n)\r\n\r\nfunc main() {\r\n\ttype Data struct {\r\n\t\tI32    int32\r\n\t\tF64    float64\r\n\t\tStr    string\r\n\t\tArrF64 [5]float64\r\n\t\tN      int32\r\n\t\tSliF64 []float64 `groot:\"SliF64[N]\"` // tell ROOT/C++ the leaf name and the leaf holding the count\r\n\t}\r\n\r\n\tconst (\r\n\t\tfname = \"struct.root\"\r\n\t\tnevts = 5\r\n\t)\r\n\r\n\tf, err := groot.Create(fname)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"%+v\", err)\r\n\t}\r\n\tdefer f.Close()\r\n\r\n\tvar evt Data\r\n\r\n\ttree, err := rtree.NewWriter(f, \"mytree\", rtree.WriteVarsFromStruct(&evt))\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"could not create tree writer: %+v\", err)\r\n\t}\r\n\r\n\tfmt.Printf(\"-- created tree %q:\\n\", tree.Name())\r\n\tfor i, b := range tree.Branches() {\r\n\t\tfmt.Printf(\"branch[%d]: name=%q, title=%q\\n\", i, b.Name(), b.Title())\r\n\t}\r\n\r\n\tfor i := 0; i < nevts; i++ {\r\n\t\tevt.I32 = int32(i)\r\n\t\tevt.F64 = float64(i)\r\n\t\tevt.Str = fmt.Sprintf(\"evt-%0d\", i)\r\n\t\tevt.ArrF64 = [5]float64{float64(i), float64(i + 1), float64(i + 2), float64(i + 3), float64(i + 4)}\r\n\t\tevt.N = int32(i)\r\n\t\tevt.SliF64 = []float64{float64(i), float64(i + 1), float64(i + 2), float64(i + 3), float64(i + 4)}[:i]\r\n\t\t_, err = tree.Write()\r\n\t\tif err != nil {\r\n\t\t\tlog.Fatalf(\"could not write event %d: %+v\", i, err)\r\n\t\t}\r\n\t}\r\n\tfmt.Printf(\"-- filled tree with %d entries\\n\", tree.Entries())\r\n\r\n\terr = tree.Close()\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"could not write tree: %+v\", err)\r\n\t}\r\n\r\n\terr = f.Close()\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"could not close tree: %+v\", err)\r\n\t}\r\n}\r\n```\r\n\r\n[struct.root.gz](https://github.com/scikit-hep/uproot/files/3902913/struct.root.gz)\r\n\r\nreading it back w/ `uproot-3.10.12` + `uproot-methods-0.7.1` yields:\r\n\r\n```py\r\n>>> import uproot\r\n>>> f = uproot.open(\"struct.root\")\r\n>>> f[\"mytree\"]\r\n>>> f[\"mytree\"]\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/binet/.local/lib/python3.8/site-packages/uproot/rootio.py\", line 225, in __getitem__\r\n    return self.get(name)\r\n  File \"/home/binet/.local/lib/python3.8/site-packages/uproot/rootio.py\", line 359, in get\r\n    return last.get()\r\n  File \"/home/binet/.local/lib/python3.8/site-packages/uproot/rootio.py\", line 1010, in get\r\n    return _classof(self._context, self._fClassName).read(self._source, self._cursor.copied(), self._context, self)\r\n  File \"/home/binet/.local/lib/python3.8/site-packages/uproot/rootio.py\", line 949, in read\r\n    out = cls._readinto(out, source, cursor, context, parent)\r\n  File \"<generated from TStreamerInfo b'TTree' at 0x7fdeac430220>\", line 70, in _readinto\r\n  File \"/home/binet/.local/lib/python3.8/site-packages/uproot/rootio.py\", line 949, in read\r\n    out = cls._readinto(out, source, cursor, context, parent)\r\n  File \"/home/binet/.local/lib/python3.8/site-packages/uproot/rootio.py\", line 1600, in _readinto\r\n    _endcheck(start, cursor, cnt)\r\n  File \"/home/binet/.local/lib/python3.8/site-packages/uproot/rootio.py\", line 441, in _endcheck\r\n    raise ValueError(\"object has {0} bytes; expected {1}\".format(observed, cnt))\r\nValueError: object has 11 bytes; expected 7\r\n```\r\n\r\nreading it w/ `PyROOT-6.18/04`:\r\n```py\r\n>>> import ROOT\r\n>>> f=ROOT.TFile.Open(\"struct.root\")\r\n>>> f.mytree.Scan()\r\n***********************************************************************************************\r\n*    Row   * Instance *       I32 *       F64 *       Str *    ArrF64 *         N *    SliF64 *\r\n***********************************************************************************************\r\n*        0 *        0 *         0 *         0 *     evt-0 *         0 *         0 *           *\r\n*        0 *        1 *         0 *         0 *           *         1 *         0 *           *\r\n*        0 *        2 *         0 *         0 *           *         2 *         0 *           *\r\n*        0 *        3 *         0 *         0 *           *         3 *         0 *           *\r\n*        0 *        4 *         0 *         0 *           *         4 *         0 *           *\r\n*        1 *        0 *         1 *         1 *     evt-1 *         1 *         1 *         1 *\r\n*        1 *        1 *         1 *         1 *           *         2 *         1 *           *\r\n*        1 *        2 *         1 *         1 *           *         3 *         1 *           *\r\n*        1 *        3 *         1 *         1 *           *         4 *         1 *           *\r\n*        1 *        4 *         1 *         1 *           *         5 *         1 *           *\r\n*        2 *        0 *         2 *         2 *     evt-2 *         2 *         2 *         2 *\r\n*        2 *        1 *         2 *         2 *           *         3 *         2 *         3 *\r\n*        2 *        2 *         2 *         2 *           *         4 *         2 *           *\r\n*        2 *        3 *         2 *         2 *           *         5 *         2 *           *\r\n*        2 *        4 *         2 *         2 *           *         6 *         2 *           *\r\n*        3 *        0 *         3 *         3 *     evt-3 *         3 *         3 *         3 *\r\n*        3 *        1 *         3 *         3 *           *         4 *         3 *         4 *\r\n*        3 *        2 *         3 *         3 *           *         5 *         3 *         5 *\r\n*        3 *        3 *         3 *         3 *           *         6 *         3 *           *\r\n*        3 *        4 *         3 *         3 *           *         7 *         3 *           *\r\n*        4 *        0 *         4 *         4 *     evt-4 *         4 *         4 *         4 *\r\n*        4 *        1 *         4 *         4 *           *         5 *         4 *         5 *\r\n*        4 *        2 *         4 *         4 *           *         6 *         4 *         6 *\r\n*        4 *        3 *         4 *         4 *           *         7 *         4 *         7 *\r\n*        4 *        4 *         4 *         4 *           *         8 *         4 *           *\r\n***********************************************************************************************\r\n25\r\n```\r\n\r\n(perhaps a `ROOT::TIOFeatures` issue?)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/412", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/412/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/412/events", "html_url": "https://github.com/scikit-hep/uproot/issues/412", "id": 527172228, "node_id": "MDU6SXNzdWU1MjcxNzIyMjg=", "number": 412, "title": "Too many indices for array with lazyarrays", "user": {"login": "beojan", "id": 3727925, "node_id": "MDQ6VXNlcjM3Mjc5MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3727925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beojan", "html_url": "https://github.com/beojan", "followers_url": "https://api.github.com/users/beojan/followers", "following_url": "https://api.github.com/users/beojan/following{/other_user}", "gists_url": "https://api.github.com/users/beojan/gists{/gist_id}", "starred_url": "https://api.github.com/users/beojan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beojan/subscriptions", "organizations_url": "https://api.github.com/users/beojan/orgs", "repos_url": "https://api.github.com/users/beojan/repos", "events_url": "https://api.github.com/users/beojan/events{/privacy}", "received_events_url": "https://api.github.com/users/beojan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-22T12:36:35Z", "updated_at": "2019-11-22T14:56:11Z", "closed_at": "2019-11-22T14:17:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run a selection using lazy arrays, I get the error `Too many indices for array`.\r\n\r\n```python\r\ntree = up.open('data17-slim.root')['low'].lazyarrays(namedecode='utf8')\r\ntree['m_dj_min'][tree['ntag'] == 2]\r\n```\r\n\r\nI get no error if I convert the index array to a Numpy array:\r\n```python\r\ntree['m_dj_min'][np.array(tree['ntag'] == 2)]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/410", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/410/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/410/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/410/events", "html_url": "https://github.com/scikit-hep/uproot/issues/410", "id": 524475244, "node_id": "MDU6SXNzdWU1MjQ0NzUyNDQ=", "number": 410, "title": "Wrong assignment of type JaggedArray", "user": {"login": "lgiommi", "id": 20187993, "node_id": "MDQ6VXNlcjIwMTg3OTkz", "avatar_url": "https://avatars3.githubusercontent.com/u/20187993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgiommi", "html_url": "https://github.com/lgiommi", "followers_url": "https://api.github.com/users/lgiommi/followers", "following_url": "https://api.github.com/users/lgiommi/following{/other_user}", "gists_url": "https://api.github.com/users/lgiommi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgiommi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgiommi/subscriptions", "organizations_url": "https://api.github.com/users/lgiommi/orgs", "repos_url": "https://api.github.com/users/lgiommi/repos", "events_url": "https://api.github.com/users/lgiommi/events{/privacy}", "received_events_url": "https://api.github.com/users/lgiommi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-18T16:25:52Z", "updated_at": "2019-11-18T16:49:05Z", "closed_at": "2019-11-18T16:49:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I am using uproot in my project and I find a wrong behaviour of uproot.\r\nI am using this root file (/afs/cern.ch/work/l/lugiommi/public/sgn.root) and there is something strange in assigning the type of the branch triggerBit. It is strange because each element of this branch is an array of dimension 23 so it should not be assigned JaggedArray as uproot does, right?\r\n\r\n```\r\nimport uproot\r\nfile=uproot.open(\"sgn.root\u201d)\r\narray=file[\"boostedAk8/events\"].array(\"triggerBit\")\r\narray[array.counts!=23]\r\n<JaggedArray [] at 0x00012bd66990>\r\n\r\nfile[\"boostedAk8/events\"].show()\r\ntriggerBit                 (no streamer)              asjagged(asdtype('bool'), 10)\r\n```\r\n\r\n\r\nThanks,\r\nLuca", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/409", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/409/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/409/events", "html_url": "https://github.com/scikit-hep/uproot/issues/409", "id": 524276697, "node_id": "MDU6SXNzdWU1MjQyNzY2OTc=", "number": 409, "title": "`value too large` when accesing lazy array with branches of static sized arrays", "user": {"login": "rprechelt", "id": 10441161, "node_id": "MDQ6VXNlcjEwNDQxMTYx", "avatar_url": "https://avatars2.githubusercontent.com/u/10441161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprechelt", "html_url": "https://github.com/rprechelt", "followers_url": "https://api.github.com/users/rprechelt/followers", "following_url": "https://api.github.com/users/rprechelt/following{/other_user}", "gists_url": "https://api.github.com/users/rprechelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprechelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprechelt/subscriptions", "organizations_url": "https://api.github.com/users/rprechelt/orgs", "repos_url": "https://api.github.com/users/rprechelt/repos", "events_url": "https://api.github.com/users/rprechelt/events{/privacy}", "received_events_url": "https://api.github.com/users/rprechelt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-18T10:33:20Z", "updated_at": "2019-11-22T20:47:55Z", "closed_at": "2019-11-22T20:47:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using uproot to succesfully load a branch that contains a static-sized array into a lazyarray\r\n\r\n    >>> events = uproot.lazyarrays(['events.root'], treepath=\"eventTree\", branches=[\"run\", \"data[108][260]\"])\r\n      \r\nThis works and I can successfully query the shape of `data`\r\n\r\n    >>> events[\"data[108][260]\"].shape # yay!\r\n    (100000, 108, 260)\r\n\r\nHowever, attempting to perform operations over the lazy array fails (with the error below). \r\n\r\n    >>> events[\"data[108][260]\"].sum() # fails\r\n\r\nIt also fails when attempting to access only a portion of the lazy-array with the same error\r\n\r\n    >>> events[\"data[108][260]\"][0:10, :, :].sum() # fails\r\n\r\nI explicitly did not use a cache in the lazyarray function in order to prevent hitting any cache limits. Is this an issue with uproot or awkward? \r\n\r\nIn stepping through the stacktrace, it seems like uproot might not be passing the correct size to awkward due to the nested dimensions of the branch?  \r\n\r\nThis seems directly related to #317 which was closed. \r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-3-3b056c8e912b> in <module>\r\n----> 1 events[\"data[108][260]\"].sum()\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/base.py in sum(self)\r\n    200 \r\n    201     def sum(self):\r\n--> 202         return self._reduce(self.numpy.add, 0, None)\r\n    203 \r\n    204     def prod(self):\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/chunked.py in _reduce(self, ufunc, identity, dtype)\r\n    685         self._valid()\r\n    686 \r\n--> 687         if self._util_hasjagged(self):\r\n    688             chunks = []\r\n    689             for chunkid, chunk in enumerate(self._chunks):\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/base.py in _util_hasjagged(cls, array)\r\n    433     @classmethod\r\n    434     def _util_hasjagged(cls, array):\r\n--> 435         return isinstance(array, AwkwardArray) and array._hasjagged()\r\n    436 \r\n    437     @classmethod\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/chunked.py in _hasjagged(self)\r\n    677             self.knowchunksizes(chunkid + 1)\r\n    678             if self._chunksizes[chunkid] > 0:\r\n--> 679                 return self._util_hasjagged(self._chunks[chunkid])\r\n    680         else:\r\n    681             return False\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/base.py in _util_hasjagged(cls, array)\r\n    433     @classmethod\r\n    434     def _util_hasjagged(cls, array):\r\n--> 435         return isinstance(array, AwkwardArray) and array._hasjagged()\r\n    436 \r\n    437     @classmethod\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/virtual.py in _hasjagged(self)\r\n    447 \r\n    448     def _hasjagged(self):\r\n--> 449         return self._util_hasjagged(self.array)\r\n    450 \r\n    451     def _reduce(self, ufunc, identity, dtype):\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/base.py in _util_hasjagged(cls, array)\r\n    433     @classmethod\r\n    434     def _util_hasjagged(cls, array):\r\n--> 435         return isinstance(array, AwkwardArray) and array._hasjagged()\r\n    436 \r\n    437     @classmethod\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/chunked.py in _hasjagged(self)\r\n    677             self.knowchunksizes(chunkid + 1)\r\n    678             if self._chunksizes[chunkid] > 0:\r\n--> 679                 return self._util_hasjagged(self._chunks[chunkid])\r\n    680         else:\r\n    681             return False\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/base.py in _util_hasjagged(cls, array)\r\n    433     @classmethod\r\n    434     def _util_hasjagged(cls, array):\r\n--> 435         return isinstance(array, AwkwardArray) and array._hasjagged()\r\n    436 \r\n    437     @classmethod\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/virtual.py in _hasjagged(self)\r\n    447 \r\n    448     def _hasjagged(self):\r\n--> 449         return self._util_hasjagged(self.array)\r\n    450 \r\n    451     def _reduce(self, ufunc, identity, dtype):\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/virtual.py in array(self)\r\n    293         if self._array is None:\r\n    294             # states (1) and (3)\r\n--> 295             return self.materialize()\r\n    296 \r\n    297         elif self._cache is None:\r\n\r\n~/.local/lib/python3.7/site-packages/awkward/array/virtual.py in materialize(self)\r\n    324 \r\n    325     def materialize(self):\r\n--> 326         array = self._util_toarray(self._generator(*self._args, **self._kwargs), self.DEFAULTTYPE)\r\n    327         if self._setitem is not None:\r\n    328             for n, x in self._setitem.items():\r\n\r\n~/.local/lib/python3.7/site-packages/uproot/tree.py in __call__(self, entrystart, entrystop)\r\n   1942 \r\n   1943     def __call__(self, entrystart, entrystop):\r\n-> 1944         return self.branch.array(interpretation=self.interpretation, entrystart=entrystart, entrystop=entrystop, flatten=self.flatten, awkwardlib=self.awkwardlib, cache=None, basketcache=self.basketcache, keycache=self.keycache, executor=self.executor, blocking=True)\r\n   1945 \r\n   1946 def lazyarray(path, treepath, branchname, interpretation=None, namedecode=\"utf-8\", entrysteps=float(\"inf\"), flatten=False, awkwardlib=None, cache=None, basketcache=None, keycache=None, executor=None, persistvirtual=False, localsource=MemmapSource.defaults, xrootdsource=XRootDSource.defaults, httpsource=HTTPSource.defaults, **options):\r\n\r\n~/.local/lib/python3.7/site-packages/uproot/tree.py in array(self, interpretation, entrystart, entrystop, flatten, awkwardlib, cache, basketcache, keycache, executor, blocking)\r\n   1425         if executor is None:\r\n   1426             for j in range(basketstop - basketstart):\r\n-> 1427                 _delayedraise(fill(j))\r\n   1428             excinfos = ()\r\n   1429         else:\r\n\r\n~/.local/lib/python3.7/site-packages/uproot/tree.py in _delayedraise(excinfo)\r\n     56             exec(\"raise cls, err, trc\")\r\n     57         else:\r\n---> 58             raise err.with_traceback(trc)\r\n     59 \r\n     60 def _filename_explode(x):\r\n\r\n~/.local/lib/python3.7/site-packages/uproot/tree.py in fill(j)\r\n   1393                 i = j + basketstart\r\n   1394                 local_entrystart, local_entrystop = self._localentries(i, entrystart, entrystop)\r\n-> 1395                 source = self._basket(i, interpretation, local_entrystart, local_entrystop, awkward, basketcache, keycache)\r\n   1396 \r\n   1397                 expecteditems = basket_itemoffset[j + 1] - basket_itemoffset[j]\r\n\r\n~/.local/lib/python3.7/site-packages/uproot/tree.py in _basket(self, i, interpretation, local_entrystart, local_entrystop, awkward, basketcache, keycache)\r\n   1179 \r\n   1180         if basketcache is not None:\r\n-> 1181             basketcache[basketcachekey] = basketdata\r\n   1182 \r\n   1183         if key._fObjlen == key.border:\r\n\r\n~/.local/lib/python3.7/site-packages/uproot/cache.py in __setitem__(self, where, what)\r\n     65     def __setitem__(self, where, what):\r\n     66         with self._lock:\r\n---> 67             self._cache[where] = what\r\n     68 \r\n     69     def __delitem__(self, where):\r\n\r\n~/.local/lib/python3.7/site-packages/cachetools/lru.py in __setitem__(self, key, value, cache_setitem)\r\n     19 \r\n     20     def __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\r\n---> 21         cache_setitem(self, key, value)\r\n     22         self.__update(key)\r\n     23 \r\n\r\n~/.local/lib/python3.7/site-packages/cachetools/cache.py in __setitem__(self, key, value)\r\n     47         size = self.getsizeof(value)\r\n     48         if size > maxsize:\r\n---> 49             raise ValueError('value too large')\r\n     50         if key not in self.__data or self.__size[key] < size:\r\n     51             while self.__currsize + size > maxsize:\r\n\r\nValueError: value too large\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/408", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/408/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/408/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/408/events", "html_url": "https://github.com/scikit-hep/uproot/issues/408", "id": 524014416, "node_id": "MDU6SXNzdWU1MjQwMTQ0MTY=", "number": 408, "title": "Cracking the TSreamerLoop ", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-17T17:09:05Z", "updated_at": "2019-11-18T16:36:13Z", "closed_at": "2019-11-18T16:31:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a follow-up on https://github.com/scikit-hep/uproot/issues/407\r\n\r\nThe main problem is a branch which cannot be parsed automatically and has a streamer called `TStreamerLoop`.\r\n\r\nI managed to access all the data I need, but it's far from optimal from the users point of few: I need `uproot.asdebug` and additional information about the underlying data structure which needs to be hardcoded.\r\n\r\nHere is a complete script which is running `uproot v3.10.12` and parses a ROOT file from https://github.com/KM3NeT/km3io/blob/master/tests/samples/jpp_v12.0.0.root\r\n\r\nA bit of background information: the data of interest is in the `vector<KM3NETDAQ::JDAQSuperFrame>.buffer` branch and consists of a ragged array of `JDAQHits` which is a simple struct:\r\n\r\n```c++\r\n    typedef  unsigned char             JPMT_t;    //!< PMT channel in FPGA\r\n    typedef  unsigned int              JTDC_t;    //!< leading edge [ns]\r\n    typedef  unsigned char             JTOT_t;    //!< time over threshold [ns]\r\n```\r\n\r\nThe actual script with explanations:\r\n\r\n```python\r\nimport uproot\r\n\r\nuproot.__version__   # 3.10.12\r\n\r\nf = uproot.open(\"jpp_v12.0.0.root\")\r\n\r\ntree = f[\"KM3NET_TIMESLICE_L1\"]\r\n\r\ntree.keys() # [b'km3net_timeslice_L1']\r\n\r\nframes = tree[b'km3net_timeslice_L1'][b'KM3NETDAQ::JDAQTimeslice'][b'vector<KM3NETDAQ::JDAQSuperFrame>']\r\n\r\nframes.show()\r\n# vector<KM3NETDAQ::JDAQSuperFrame>\r\n#                           TStreamerSTL               asdtype('>i4')\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.length\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.type\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.fUniqueID\r\n#                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.fBits\r\n#                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.detector_id\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.run\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.frame_index\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.timeslice_start.UTC_seconds\r\n#                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.timeslice_start.UTC_16nanosecondcycles\r\n#                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.id\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.daq\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.status\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.fifo\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.status_3\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.status_4\r\n#                           TStreamerBasicType         asjagged(asdtype('>i4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.numberOfHits\r\n#                           TStreamerBasicType         asjagged(asdtype('>u4'))\r\n#vector<KM3NETDAQ::JDAQSuperFrame>.buffer\r\n                           TStreamerLoop              None\r\n```\r\n\r\nAs seen, all branches are parsed correctly but the the `.buffer`, which has a `TStreamerLoop` streamer.\r\n\r\n```python\r\nframes[b'vector<KM3NETDAQ::JDAQSuperFrame>.buffer'].show()\r\n# vector<KM3NETDAQ::JDAQSuperFrame>.buffer\r\n#                           TStreamerLoop              None\r\n\r\nTo explore the buffer:\r\n\r\n```python\r\nbuffer = frames[b'vector<KM3NETDAQ::JDAQSuperFrame>.buffer']\r\n\r\nbuffer.array(uproot.asdebug)\r\n# <JaggedArray [[64 4 130 ... 237 5 30] [64 4 125 ... 245 5 17] [64 4 128 ... 245 5 26]] at 0x0001139f1610>\r\n\r\n# The very first byte of 64 is kind of a ROOT header as you (Jim) mentioned in https://github.com/scikit-hep/uproot/issues/407?\r\n\r\n# The file contains 3 super frames (timeslices), and each of them consists of 69 frames\r\n# the 69 however is not fixed, it can vary from slice to slice! Each frame\r\n# consists of hits (vector of JDAQHit<6bytes>) and corresponds to an optical module\r\n# which registers those. It is already a good sign that the jagged arrays has 3 sub-arrays, since\r\n# we have 3 super frames!\r\n\r\n# The first timeslice which contains exactly 49243 hits from various different\r\n# optical modules\r\nts = buffer.array(uproot.asdebug)[0]\r\n\r\nts\r\n# array([ 64,   4, 130, ..., 237,   5,  30], dtype=uint8)\r\n\r\nlen(ts)\r\n# 295464\r\n```\r\n\r\n\r\n`295464 bytes` - `6 bytes` offset (don't yet understand why 6, but it works)\r\ngive `295458 bytes` of raw `JDAQHit` data, which makes sense, since we know\r\nthat we have `49243 hits` and `49243*6 == 295458`\r\n\r\nNow to parse the data, I extract a flat array of hits and manually slice it into a dictionary\r\n\r\n```python\r\nflat_array_of_hits = frames[b'vector<KM3NETDAQ::JDAQSuperFrame>.buffer'].array(\r\n                uproot.asjagged(uproot.astable(\r\n                    uproot.asdtype([(\"pmt\", \"u1\"),\r\n                                    (\"tdc\", \"u4\"),\r\n                                    (\"tot\", \"u1\")])),\r\n                                skipbytes=6))\r\n\r\nts_hits = flat_array_of_hits[0]\r\nlen(ts_hits)\r\n# 49243\r\n\r\nts_hits[\"tot\"]\r\n# array([27, 24,  5, ..., 44, 14, 30], dtype=uint8)\r\n```\r\n\r\nSo the problem is now, that it's a flat array of hits, however, they should be grouped the module ID `.numberOfHits` and `.id` tells us more:\r\n\r\n```python\r\nn_hits = frames[b'vector<KM3NETDAQ::JDAQSuperFrame>.numberOfHits'].array()[0]\r\nn_hits\r\n# array([ 984, 1004,  251,  729,  787,  243,  223,  891,  693, 1138,  524,\r\n#        1089,  734,  819,  927,  849,  281,  711,  913,  714, 1046,  681,\r\n#         515,  708,  762,  570,  433, 1106,  987,   94,  798,  312,  776,\r\n#         224,  612,  443,  803,  774,  719,  792,  625,  229,  454,  634,\r\n#         533, 1103,  693,  776,  815,  442,  671,  939,  876,  803,  643,\r\n#        1058,  501, 1126, 1028,  442,  919,  670,  339, 1057,  800, 1010,\r\n#         863,  809,  726], dtype=uint32)\r\n\r\nmodule_ids = frames[b'vector<KM3NETDAQ::JDAQSuperFrame>.id'].array()[0]\r\nmodule_ids\r\n# array([806451572, 806455814, 806465101, 806483369, 806487219, 806487226,\r\n#        806487231, 808432835, 808435278, 808447180, 808447186, 808451904,\r\n#        808451907, 808469129, 808472260, 808472265, 808488895, 808488990,\r\n#        808489014, 808489117, 808493910, 808946818, 808949744, 808951460,\r\n#        808956908, 808959411, 808961448, 808961480, 808961504, 808961655,\r\n#        808964815, 808964852, 808964883, 808964908, 808969848, 808969857,\r\n#        808972593, 808972598, 808972698, 808974758, 808974773, 808974811,\r\n#        808974972, 808976377, 808979567, 808979721, 808979729, 808981510,\r\n#        808981523, 808981672, 808981812, 808981864, 808982005, 808982018,\r\n#        808982041, 808982066, 808982077, 808982547, 808984711, 808996773,\r\n#        808997793, 809006037, 809007627, 809503416, 809521500, 809524432,\r\n#        809526097, 809544058, 809544061], dtype=int32)\r\n```\r\n\r\nNow the fun part: the first set of hits belong to module (`.id`) == `806451572`, and consists\r\nof `984 hits`\r\n\r\n### Here is an inefficient loop to fill the hits:\r\n\r\n```python\r\nhits = {}\r\nidx = 0\r\nfor module_id, n_hits in zip(module_ids, n_hits):\r\n    hits[module_id] = ts_hits[idx:idx+n_hits]\r\n    idx += n_hits\r\n\r\n# quick check against the PyROOT framework:\r\n# [ins] In [15]: ts_hits[ts_hits.dom_id == 808972593]\r\n# Out[15]: TimesliceHits <class 'km3pipe.dataclasses.Table'> (rows: 803)\r\n\r\nlen(hits[808972593])\r\n# 803, fine!\r\n\r\n# another check to see if the data is correct, expecting:\r\n# [ins] In [16]: ts_hits[ts_hits.dom_id ==808972593].tot[:10]\r\n# Out[16]: array([25, 31, 43, 21, 25, 24, 31, 25, 30, 23], dtype=uint8)\r\nhits[808972593][\"tot\"][:10]\r\n# array([25, 31, 43, 21, 25, 24, 31, 25, 30, 23], dtype=uint8)\r\n```\r\n\r\nPerfect! But a bit \"whacky\" and inefficient ;)\r\nI am not so familiar with [jr]agged arrays yet, but I am sure one can somehow pass this this structure to the flat array and get it in one shot or something like this?\r\nThe module IDs are then just encoded by the index and one need another lookup in `.id` or so...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/407", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/407/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/407/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/407/events", "html_url": "https://github.com/scikit-hep/uproot/issues/407", "id": 523820295, "node_id": "MDU6SXNzdWU1MjM4MjAyOTU=", "number": 407, "title": "Trouble with reading data in one shot -> ValueError: entries in recovered baskets ... don't add up to total number of entries", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-11-16T09:14:23Z", "updated_at": "2019-11-17T00:14:40Z", "closed_at": "2019-11-16T14:26:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am about to finalise a library which uses `uproot` to read all of our ROOT formats (both DAQ and MC!) and only a few things are missing. Many thanks for your help so far!\r\n\r\nOne of the trickiest ones was reading the events, but with your help and fixes it works nicely and I wrapped it into a user-friendly API: https://github.com/scikit-hep/uproot/issues/124#issuecomment-423316496\r\n\r\nNow I am struggling with reading the remaining parts of the DAQ dataformat, namely timeslices and summary slices (allow me to open separate issues if needed) which are stored in this file: https://github.com/KM3NeT/km3io/blob/80770af461121bc58eaa625702f66ed84756b9e2/tests/samples/jpp_v12.0.0.root (open access)\r\n\r\nI am quite confused about the long chain of lookups I need to make, because I find repeated data, but anyways, this is how it looks like when I try to read timeslice data, which basically consists of `n` headers, `n` superframes and `m` frames in each superframe. In the sample file `n=3` and `m=69`. The superframe contains the hit-level data:\r\n\r\nHere I am just trying to read the header:\r\n\r\n```\r\n>>> f = uproot.open(\"jpp_v12.0.0.root\")\r\n>>> tree = f[\"KM3NET_TIMESLICE_L1\"]\r\n>>> tree.keys()\r\n[b'km3net_timeslice_L1']\r\n>>> tree[b'km3net_timeslice_L1'][b'KM3NETDAQ::JDAQTimeslice'].keys()\r\n[b'KM3NETDAQ::JDAQPreamble',\r\n b'KM3NETDAQ::JDAQTimesliceHeader',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>']\r\n>>> tree[b'km3net_timeslice_L1'][b'KM3NETDAQ::JDAQTimeslice'][b'KM3NETDAQ::JDAQTimesliceHeader'][b'KM3NETDAQ::JDAQHeader'][b'KM3NETDAQ::JDAQChronometer'].keys()\r\n[b'detector_id',\r\n b'run',\r\n b'frame_index',\r\n b'timeslice_start.UTC_seconds',\r\n b'timeslice_start.UTC_16nanosecondcycles']\r\n```\r\n\r\nThis looks a bit weird, but I get access to the data!\r\n\r\n```\r\n>>> tree[b'km3net_timeslice_L1'][b'KM3NETDAQ::JDAQTimeslice'][b'KM3NETDAQ::JDAQTimesliceHeader'][b'KM3NETDAQ::JDAQHeader'][b'KM3NETDAQ::JDAQChronometer'][b'frame_index'].array()\r\narray([512, 509, 514], dtype=int32)\r\n```\r\n\r\nFunnily, I get access to the same data when I directly query `b['frame_index']` on `tree[b'km3net_timeslice_L1']`:\r\n\r\n```\r\n>>> tree[b'km3net_timeslice_L1'][b'frame_index'].array()\r\narray([512, 509, 514], dtype=int32)\r\n```\r\n\r\n**My first question is**: how do I get an  `ndarray` of this headers in one-shot? I mean, I can read every \"sub\"-array manually and compose a `recarray` or so, but I am sure there is a trick to read it in whole.\r\n\r\nI first tried with:\r\n\r\n```\r\n>>> tree[b'km3net_timeslice_L1'].array()\r\n...\r\nValueError: entries in recovered baskets (offsets [0]) don't add up to total number of entries (3)\r\n```\r\n\r\nI also tried to understand what you did in the previous issue and passed in the dtypes, but I get the same error, things like this (and different variations, also providing the full \"path\"):\r\n\r\n```\r\n>>> tree[b'km3net_timeslice_L1'].array(\r\n    uproot.asdtype(\r\n        [(\"det_id\", \"i4\"),\r\n         (\"run\", \"i4\"),\r\n         (\"frame_index\", \"i4\"),\r\n         (\"seconds\", \"i4\"),\r\n         (\"ns_cycles\", \"i4\")]\r\n    )\r\n)\r\n)))\r\n```\r\n\r\n**My second question (might be another issue, but it's basically the same problem) targets the frames themselves, the actual frames data:**\r\n\r\n```\r\n>>> frames = tree[b'km3net_timeslice_L1'][b'KM3NETDAQ::JDAQTimeslice'][b'vector<KM3NETDAQ::JDAQSuperFrame>']\r\n>>> frames.keys()\r\n[b'vector<KM3NETDAQ::JDAQSuperFrame>.KM3NETDAQ::JDAQPreamble',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.detector_id',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.run',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.frame_index',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.timeslice_start.UTC_seconds',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.timeslice_start.UTC_16nanosecondcycles',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.KM3NETDAQ::JDAQModuleIdentifier',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.daq',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.status',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.fifo',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.status_3',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.status_4',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.numberOfHits',\r\n b'vector<KM3NETDAQ::JDAQSuperFrame>.buffer']\r\n```\r\n\r\nThat's already nice and I can access most of them easily, but also here only in parts:\r\n\r\n```\r\n>>> frames[b'vector<KM3NETDAQ::JDAQSuperFrame>.numberOfHits'].array()\r\n<JaggedArray [[984 1004 251 ... 863 809 726] [1004 1074 231 ... 886 949 738] [976 902 321 ... 865 825 732]] at 0x7f0ede7d5d10>\r\n```\r\n\r\nWhen I try to read everything as a big array (I'd prefer a lazy ragged one, but here I only tried `array`):\r\n\r\n```\r\n>>> frames.array()\r\n[60]:\r\narray([69, 69, 69], dtype=int32)\r\n```\r\n\r\nI get the lengths of the superframes. Maybe it's also related, I have troubles reading `b'vector<KM3NETDAQ::JDAQSuperFrame>.KM3NETDAQ::JDAQModuleIdentifier',`:\r\n\r\n```\r\n>>> frames[b'vector<KM3NETDAQ::JDAQSuperFrame>.KM3NETDAQ::JDAQModuleIdentifier'].array()\r\n...\r\nValueError: cannot interpret branch b'vector<KM3NETDAQ::JDAQSuperFrame>.KM3NETDAQ::JDAQModuleIdentifier' as a Python type\r\n```\r\n\r\nI tried to use the `interpret` but it yields the same error:\r\n\r\n```\r\n>>> frames[b'vector<KM3NETDAQ::JDAQSuperFrame>.KM3NETDAQ::JDAQModuleIdentifier'].array(\r\n                uproot.interpret(frames[b'vector<KM3NETDAQ::JDAQSuperFrame>.KM3NETDAQ::JDAQModuleIdentifier'],\r\n                                 cntvers=True))\r\n...\r\nValueError: cannot interpret branch b'vector<KM3NETDAQ::JDAQSuperFrame>.KM3NETDAQ::JDAQModuleIdentifier' as a Python type\r\n```\r\n\r\nAnd one big issue is still: I could not find the actual hit data yet. There has to be some (in this case 69) vectors of `snapshotHits` or alike in each superframe, with fields `tdc`, `tot` etc... \ud83d\ude15 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/406", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/406/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/406/events", "html_url": "https://github.com/scikit-hep/uproot/issues/406", "id": 523746726, "node_id": "MDU6SXNzdWU1MjM3NDY3MjY=", "number": 406, "title": "uproot.iterate over file containing TBranchElements fails with Attribute Error", "user": {"login": "rprechelt", "id": 10441161, "node_id": "MDQ6VXNlcjEwNDQxMTYx", "avatar_url": "https://avatars2.githubusercontent.com/u/10441161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprechelt", "html_url": "https://github.com/rprechelt", "followers_url": "https://api.github.com/users/rprechelt/followers", "following_url": "https://api.github.com/users/rprechelt/following{/other_user}", "gists_url": "https://api.github.com/users/rprechelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprechelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprechelt/subscriptions", "organizations_url": "https://api.github.com/users/rprechelt/orgs", "repos_url": "https://api.github.com/users/rprechelt/repos", "events_url": "https://api.github.com/users/rprechelt/events{/privacy}", "received_events_url": "https://api.github.com/users/rprechelt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-15T23:33:54Z", "updated_at": "2019-11-16T05:24:00Z", "closed_at": "2019-11-16T05:24:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a ROOT file that contains a class (consisting of basic types) that I can access with uproot just fine. The class is called `event` and stored in an `eventTree` TTree.\r\n\r\n    # this works perfectly to access the `eventNumber` attribute of `event`\r\n    >>> f = uproot.open('events.root')\r\n    >>> f['eventTree']\r\n    <TTree b'eventTree' at 0x7f6b92e96048>\r\n    >>> f['eventTree/event']\r\n    <TBranchElement b'event' at 0x7f6c20e97a20>\r\n     >>> f['eventTree/event/eventNumber']\r\n     <TBranchElement b'eventNumber' at 0x7f6c20e979b0>\r\n     >>> f['eventTree/event/eventNumber'].array()\r\n     array([14402301, 14402302, 14402303, ..., 14627676, 14627677, 14627678],\r\n               dtype=uint32)\r\n\r\nHowever, I am trying to repeat this using `uproot.iterate` to iterate over a large number of files and am getting an error. \r\n\r\nMy first attempt was:\r\n\r\n    for _ in uproot.iterate(['events.root'], treepath='eventTree/event', branches=[b'eventNumber']:\r\n         pass\r\n\r\nwhich gives an `AttributeError`\r\n\r\n```\r\n~/.local/lib/python3.6/site-packages/uproot/tree.py in iterate(path, treepath, branches, entrysteps, outputtype, namedecode, reportpath, reportfile, reportentries, flatten, flatname, awkwardlib, cache, basketcache, keycache, executor, blocking, localsource, xrootdsource, httpsource, **options)\r\n    110 def iterate(path, treepath, branches=None, entrysteps=float(\"inf\"), outputtype=dict, namedecode=None, reportpath=False, reportfile=False, reportentries=False, flatten=False, flatname=None, awkwardlib=None, cache=None, basketcache=None, keycache=None, executor=None, blocking=True, localsource=MemmapSource.defaults, xrootdsource=XRootDSource.defaults, httpsource=HTTPSource.defaults, **options):\r\n    111     awkward = _normalize_awkwardlib(awkwardlib)\r\n--> 112     for tree, newbranches, globalentrystart, thispath, thisfile in _iterate(path, treepath, branches, awkward, localsource, xrootdsource, httpsource, **options):\r\n    113         for start, stop, arrays in tree.iterate(branches=newbranches, entrysteps=entrysteps, outputtype=outputtype, namedecode=namedecode, reportentries=True, entrystart=0, entrystop=tree.numentries, flatten=flatten, flatname=flatname, awkwardlib=awkward, cache=cache, basketcache=basketcache, keycache=keycache, executor=executor, blocking=blocking):\r\n    114 \r\n\r\n~/.local/lib/python3.6/site-packages/uproot/tree.py in _iterate(path, treepath, branches, awkward, localsource, xrootdsource, httpsource, **options)\r\n    162         except KeyError:\r\n    163             continue\r\n--> 164         listbranches = list(tree._normalize_branches(branches, awkward))\r\n    165 \r\n    166         newbranches = OrderedDict((branch.name, interpretation) for branch, interpretation in listbranches)\r\n\r\nAttributeError: 'TBranchElement' object has no attribute '_normalize_branches'\r\n```\r\nThe next method was: \r\n\r\n    for _ in uproot.iterate(['events.root'], treepath='eventTree', branches=[b'event/eventNumber']:\r\n         pass\r\n\r\nwhich returns `KeyError: not found: b'event/eventNumber'`.\r\n\r\nIs this possible? If not, it might be worth adding a catch/check in iterate to avoid presenting a mysterious `_normalize_branches` to the user.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/404", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/404/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/404/events", "html_url": "https://github.com/scikit-hep/uproot/issues/404", "id": 523487598, "node_id": "MDU6SXNzdWU1MjM0ODc1OTg=", "number": 404, "title": "Cannot interpret std::string", "user": {"login": "rtesse", "id": 26649180, "node_id": "MDQ6VXNlcjI2NjQ5MTgw", "avatar_url": "https://avatars1.githubusercontent.com/u/26649180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtesse", "html_url": "https://github.com/rtesse", "followers_url": "https://api.github.com/users/rtesse/followers", "following_url": "https://api.github.com/users/rtesse/following{/other_user}", "gists_url": "https://api.github.com/users/rtesse/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtesse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtesse/subscriptions", "organizations_url": "https://api.github.com/users/rtesse/orgs", "repos_url": "https://api.github.com/users/rtesse/repos", "events_url": "https://api.github.com/users/rtesse/events{/privacy}", "received_events_url": "https://api.github.com/users/rtesse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-15T14:04:06Z", "updated_at": "2019-11-15T16:38:12Z", "closed_at": "2019-11-15T14:48:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to read a branch, no issue with all the `double` elements but I cannot read `std::string` elements.\r\n\r\nSee the sample file : https://www.dropbox.com/s/nvqb3tqa0zbn5mk/survey.root?dl=0\r\n\r\n```\r\nimport uproot\r\nuproot.open(\"survey.root\")['Beam']['Beam.GMAD::BeamBase.beamParticleName'].array()\r\n```\r\n\r\nraising `ValueError: cannot interpret branch b'Beam.GMAD::BeamBase.beamParticleName' as a Python type in file: survey.root`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/403", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/403/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/403/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/403/events", "html_url": "https://github.com/scikit-hep/uproot/issues/403", "id": 522902678, "node_id": "MDU6SXNzdWU1MjI5MDI2Nzg=", "number": 403, "title": "Cannot interpret custom type in a std::vector<>", "user": {"login": "chernals", "id": 1025745, "node_id": "MDQ6VXNlcjEwMjU3NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1025745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chernals", "html_url": "https://github.com/chernals", "followers_url": "https://api.github.com/users/chernals/followers", "following_url": "https://api.github.com/users/chernals/following{/other_user}", "gists_url": "https://api.github.com/users/chernals/gists{/gist_id}", "starred_url": "https://api.github.com/users/chernals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chernals/subscriptions", "organizations_url": "https://api.github.com/users/chernals/orgs", "repos_url": "https://api.github.com/users/chernals/repos", "events_url": "https://api.github.com/users/chernals/events{/privacy}", "received_events_url": "https://api.github.com/users/chernals/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-14T14:41:58Z", "updated_at": "2019-11-19T08:23:10Z", "closed_at": "2019-11-18T16:58:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a branch storing a class defined with, among other things, the following attribute:\r\n\r\n```\r\nstd::vector<BDSOutputROOTEventCollimatorInfo>\r\n```\r\n\r\nWhere `BDSOutputROOTEventCollimatorInfo` is defined with these:\r\n\r\n```\r\n  std::string componentName;\r\n  std::string componentType;\r\n  double      length;\r\n  double      tilt;\r\n  double      offsetX;\r\n  double      offsetY;\r\n  std::string material;\r\n  double      xSizeIn;\r\n  double      ySizeIn;\r\n  double      xSizeOut;\r\n  double      ySizeOut;\r\n```\r\n\r\nAs this doesn't involve pointers or deeply nested custom types, I thought this should already work.\r\n\r\nThe error is \r\n\r\n```\r\nValueError: cannot interpret branch b'Model.collimatorInfo' as a Python type\r\n```\r\n\r\nThe interepretation is `None`:\r\n\r\n```\r\nm['Model.collimatorInfo'].interpretation is None  # True\r\n```\r\n\r\nI can provide an example root file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/402", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/402/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/402/events", "html_url": "https://github.com/scikit-hep/uproot/issues/402", "id": 521776325, "node_id": "MDU6SXNzdWU1MjE3NzYzMjU=", "number": 402, "title": "Installing upROOT on lxplus", "user": {"login": "ZhelunLi1995", "id": 32752647, "node_id": "MDQ6VXNlcjMyNzUyNjQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/32752647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZhelunLi1995", "html_url": "https://github.com/ZhelunLi1995", "followers_url": "https://api.github.com/users/ZhelunLi1995/followers", "following_url": "https://api.github.com/users/ZhelunLi1995/following{/other_user}", "gists_url": "https://api.github.com/users/ZhelunLi1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZhelunLi1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZhelunLi1995/subscriptions", "organizations_url": "https://api.github.com/users/ZhelunLi1995/orgs", "repos_url": "https://api.github.com/users/ZhelunLi1995/repos", "events_url": "https://api.github.com/users/ZhelunLi1995/events{/privacy}", "received_events_url": "https://api.github.com/users/ZhelunLi1995/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-12T20:11:37Z", "updated_at": "2019-11-19T17:49:30Z", "closed_at": "2019-11-12T20:49:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\n  I have a rather basic question: what would be the easiest way of installing upROOT and pandas on lxplus? I tried the pip -install for both of them and it simply does not work out the well. \r\n\r\nCheers,\r\nZhelun\r\n\r\n![pandas_install](https://user-images.githubusercontent.com/32752647/68706880-ad40ef00-055e-11ea-8173-9e748398bc15.png)\r\n![uproot_install](https://user-images.githubusercontent.com/32752647/68706881-ad40ef00-055e-11ea-8766-b07d16e3e9c9.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/401", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/401/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/401/events", "html_url": "https://github.com/scikit-hep/uproot/issues/401", "id": 521392901, "node_id": "MDU6SXNzdWU1MjEzOTI5MDE=", "number": 401, "title": "ROOT binary format documentation?", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 28, "created_at": "2019-11-12T08:12:25Z", "updated_at": "2020-04-29T20:14:03Z", "closed_at": "2019-11-18T16:55:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Are there any plans to consolidate all the immensely valuable information Jim and all the other people have collected about the ROOT binary dataformat and put it into a format description document? I am very well aware of the fact that this is really something the ROOT developers should provide, but as far as I know, there is no publicly available information other than the source code of ROOT. Please(!) correct me if I am wrong!\r\n\r\nI am asking because I am thinking about a [Julia](https://julialang.org) \"uproot\" project as well and such a document would of course be tremendously helpful since uproot of course fully utilises the Python language and numpy features, so the code is very tailored and thus it's not so straight forward to get a big picture.\r\n\r\nI am also willing to help to maintain such a document.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/399", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/399/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/399/events", "html_url": "https://github.com/scikit-hep/uproot/issues/399", "id": 520536813, "node_id": "MDU6SXNzdWU1MjA1MzY4MTM=", "number": 399, "title": "Cannot interpret std::vector<THnD*>", "user": {"login": "chernals", "id": 1025745, "node_id": "MDQ6VXNlcjEwMjU3NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1025745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chernals", "html_url": "https://github.com/chernals", "followers_url": "https://api.github.com/users/chernals/followers", "following_url": "https://api.github.com/users/chernals/following{/other_user}", "gists_url": "https://api.github.com/users/chernals/gists{/gist_id}", "starred_url": "https://api.github.com/users/chernals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chernals/subscriptions", "organizations_url": "https://api.github.com/users/chernals/orgs", "repos_url": "https://api.github.com/users/chernals/repos", "events_url": "https://api.github.com/users/chernals/events{/privacy}", "received_events_url": "https://api.github.com/users/chernals/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2019-11-10T01:11:27Z", "updated_at": "2019-11-12T14:01:19Z", "closed_at": "2019-11-11T16:06:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Root output files generated by BDSIM (http://www.pp.rhul.ac.uk/bdsim/manual/) have branches containing vectors of 1d, 2d and 3d histgrams.\r\n\r\nIt appears that this cannot be interpreted as a Python type.\r\n\r\nCan this be done ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/398", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/398/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/398/events", "html_url": "https://github.com/scikit-hep/uproot/issues/398", "id": 519274957, "node_id": "MDU6SXNzdWU1MTkyNzQ5NTc=", "number": 398, "title": "Reading data using lazyarray()", "user": {"login": "zinebaly", "id": 47111087, "node_id": "MDQ6VXNlcjQ3MTExMDg3", "avatar_url": "https://avatars2.githubusercontent.com/u/47111087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zinebaly", "html_url": "https://github.com/zinebaly", "followers_url": "https://api.github.com/users/zinebaly/followers", "following_url": "https://api.github.com/users/zinebaly/following{/other_user}", "gists_url": "https://api.github.com/users/zinebaly/gists{/gist_id}", "starred_url": "https://api.github.com/users/zinebaly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zinebaly/subscriptions", "organizations_url": "https://api.github.com/users/zinebaly/orgs", "repos_url": "https://api.github.com/users/zinebaly/repos", "events_url": "https://api.github.com/users/zinebaly/events{/privacy}", "received_events_url": "https://api.github.com/users/zinebaly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-07T13:43:58Z", "updated_at": "2019-11-08T17:26:22Z", "closed_at": "2019-11-07T22:07:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Data file from issue #390, redirected here from [StackOverflow](https://stackoverflow.com/questions/58747852/how-to-use-lazyarrays-in-uproot?noredirect=1#comment103788384_58747852).\r\n\r\nI was able to access data from hits as a jagged array, while for 'trks' it is not possible for some specific cases. Here is how I proceed for these cases: \r\n    \r\n    tree = uproot.open(my_file)['E']\r\n    tree[\"trks.rec_stages\"].interpretation\r\n\r\nthe output is:\r\n    asjagged(asdtype('>i4'), 10)\r\n\r\nthen:\r\n\r\n    tree.array(\"trks.rec_stages\")\r\n\r\nI get the following error:\r\n\r\n    ValueError: could not broadcast input array from shape (15713) into shape (15711)\r\n\r\nI always get the error above with ('trks.rec_stages', 'trks.error_matrix', 'trks.fitinfo') using tree.array() .\r\n\r\nBut when I try this:\r\n\r\n    lazy_rec_stages = tree.lazyarray(\"trks.rec_stages\")\r\n\r\nI get my data as the following: \r\n\r\n    <ChunkedArray [[1 3 5 ... 1 1 1] [1 3 5 ... 1 1 1] [1 3 5 ... 1 1 1] ... [1 3 5 ... 1 1 1] [1 3 5 ... 1 1 1] [1 3 5 ... 1 1 1]] at 0x7f4dabe12450>\r\n\r\n\r\nExcept that data in each array of lazy_rec_stages read with uproot doesn't seem to have conserved the \"structure\" of data from the original root file. To illustrate this, I will use the following example:\r\nif we look at an event, for each event we have an associated number of tracks, each track has reconstruction stages info stored in rec_stages and a likelihood stored in trks.lik: \r\n\r\n    event       trks         trks.rec_stages        trks.lik\r\n     0           0            \"1 2 3\"                 10\r\n                 1            \"4 5\"                   20   \r\n                 2            \"6 7 8 9\"               30\r\n\r\nSo one would expect: \r\n\r\n    tree.lazyarray(\"trks.rec_stages\")[0][0]\r\n    Output: \"1 2 3 5 4\" \r\n    tree.lazyarray(\"trks.lik\")[0][0] \r\n    Output: 10\r\n\r\nBut I am not sure that it is the case, here is what I get:\r\n\r\n    tree.lazyarray(\"trks.rec_stages\")[0][0]\r\n    Output: [1 2 3 4 5 6 7 8 9]\r\n\r\nWhich makes it difficult to associate which rec_stages corresponds to which trks. Could you please tell me what I am doing wrong here? \r\n\r\nWhen I try the following for \"trks.error_matrix\", I get the following: \r\n\r\n    tree.lazyarray(\"trks.error_matrix\")\r\n    AssertionError: \r\n\r\nPS: I think I am using the latest version of uproot.\r\n\r\nThank you for your time and consideration.\r\n@tamasgal", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/397", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/397/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/397/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/397/events", "html_url": "https://github.com/scikit-hep/uproot/issues/397", "id": 519267894, "node_id": "MDU6SXNzdWU1MTkyNjc4OTQ=", "number": 397, "title": "Reading data as MultiIndex DataFrame", "user": {"login": "zinebaly", "id": 47111087, "node_id": "MDQ6VXNlcjQ3MTExMDg3", "avatar_url": "https://avatars2.githubusercontent.com/u/47111087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zinebaly", "html_url": "https://github.com/zinebaly", "followers_url": "https://api.github.com/users/zinebaly/followers", "following_url": "https://api.github.com/users/zinebaly/following{/other_user}", "gists_url": "https://api.github.com/users/zinebaly/gists{/gist_id}", "starred_url": "https://api.github.com/users/zinebaly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zinebaly/subscriptions", "organizations_url": "https://api.github.com/users/zinebaly/orgs", "repos_url": "https://api.github.com/users/zinebaly/repos", "events_url": "https://api.github.com/users/zinebaly/events{/privacy}", "received_events_url": "https://api.github.com/users/zinebaly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-07T13:31:10Z", "updated_at": "2019-11-08T17:27:02Z", "closed_at": "2019-11-07T22:00:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to read 'hits' and 'trks' data as a MultiIndex DataFrame from the file in this issue [#390](https://github.com/scikit-hep/uproot/issues/390), redirected here from [StackOverflow](https://stackoverflow.com/questions/58747852/how-to-use-lazyarrays-in-uproot?noredirect=1#comment103788384_58747852).\r\n\r\nI managed to get data about all events in a DataFrame, by opening the content of my tree as Jagged arrays. Now I would like 'hits' and 'trks' to be read in a MultiIndex DataFrame. But I am not sure I understand why tree.pandas.df(\"hits.*\") and tree.pandas.df(\"trks.*\") aren't working for me.\r\nHere is how I proceed: \r\n\r\n    tree = uproot.open(my_file)['E']\r\n    tree.pandas.df(\"hits.*\")\r\n\r\nThis gives the an empty AssertionError.\r\n\r\n```python\r\nAssertionError: \r\n```\r\n\r\nBut when I try for example:\r\n\r\n    tree.pandas.df(\"hits.trig\")\r\n\r\nI do get a MultiIndex DataFrame with one column containing data read from tree[\"hits.trig\"]. \r\n\r\nSame issue with tree.pandas.df(\"trks.*\")\r\n\r\nThank you for your time and consideration.\r\n@tamasgal", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/396", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/396/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/396/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/396/events", "html_url": "https://github.com/scikit-hep/uproot/issues/396", "id": 519236403, "node_id": "MDU6SXNzdWU1MTkyMzY0MDM=", "number": 396, "title": "Conversion to Pandas DataFrame fails when involving empty branches", "user": {"login": "chernals", "id": 1025745, "node_id": "MDQ6VXNlcjEwMjU3NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1025745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chernals", "html_url": "https://github.com/chernals", "followers_url": "https://api.github.com/users/chernals/followers", "following_url": "https://api.github.com/users/chernals/following{/other_user}", "gists_url": "https://api.github.com/users/chernals/gists{/gist_id}", "starred_url": "https://api.github.com/users/chernals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chernals/subscriptions", "organizations_url": "https://api.github.com/users/chernals/orgs", "repos_url": "https://api.github.com/users/chernals/repos", "events_url": "https://api.github.com/users/chernals/events{/privacy}", "received_events_url": "https://api.github.com/users/chernals/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-07T12:27:36Z", "updated_at": "2019-11-08T00:44:27Z", "closed_at": "2019-11-07T23:34:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure that the title correctly describes the issue.\r\n\r\nBasically I have this:\r\n\r\n`ValueError: cannot use flatten=True on branches with different jagged structure, such as electrons and muons (different, variable number of each per event); either explicitly select compatible branches, such as [\"MET_*\", \"Muon_*\"] (scalar and variable per event is okay), or set flatten=False`\r\n\r\nI understand that and it makes sense. However, in my case, it fails because one branch (actually a \"sub-branch\", ie. a branch with a `splitlevel > 0`) is empty. I expect the branch to have the correct structure if filled at all.\r\n\r\nI imagine it would be possible to handle that (corner) case smoothly, so that I can have the same code wether or not the branch is filled. If empty, it could be indicated by something with `pd.isnull(x) == True` for all subentries.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/395", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/395/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/395/events", "html_url": "https://github.com/scikit-hep/uproot/issues/395", "id": 518501582, "node_id": "MDU6SXNzdWU1MTg1MDE1ODI=", "number": 395, "title": "error in the docs", "user": {"login": "HDembinski", "id": 2631586, "node_id": "MDQ6VXNlcjI2MzE1ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HDembinski", "html_url": "https://github.com/HDembinski", "followers_url": "https://api.github.com/users/HDembinski/followers", "following_url": "https://api.github.com/users/HDembinski/following{/other_user}", "gists_url": "https://api.github.com/users/HDembinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/HDembinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HDembinski/subscriptions", "organizations_url": "https://api.github.com/users/HDembinski/orgs", "repos_url": "https://api.github.com/users/HDembinski/repos", "events_url": "https://api.github.com/users/HDembinski/events{/privacy}", "received_events_url": "https://api.github.com/users/HDembinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-06T14:18:17Z", "updated_at": "2019-11-07T22:58:24Z", "closed_at": "2019-11-07T22:58:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://uproot.readthedocs.io/en/latest/opening-files.html#uproot-pandas-iterate\r\n\r\nThe :py:func\\`uproot.pandas.iterate <uproot.pandas.iterate>\\` function is like the above, except that it iterates over Pandas DataFrames (as though you passed outputtype=pandas.DataFrame and changed some defaults).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/394", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/394/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/394/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/394/events", "html_url": "https://github.com/scikit-hep/uproot/issues/394", "id": 518442795, "node_id": "MDU6SXNzdWU1MTg0NDI3OTU=", "number": 394, "title": "Possible bug in uproot.iterate", "user": {"login": "HDembinski", "id": 2631586, "node_id": "MDQ6VXNlcjI2MzE1ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HDembinski", "html_url": "https://github.com/HDembinski", "followers_url": "https://api.github.com/users/HDembinski/followers", "following_url": "https://api.github.com/users/HDembinski/following{/other_user}", "gists_url": "https://api.github.com/users/HDembinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/HDembinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HDembinski/subscriptions", "organizations_url": "https://api.github.com/users/HDembinski/orgs", "repos_url": "https://api.github.com/users/HDembinski/repos", "events_url": "https://api.github.com/users/HDembinski/events{/privacy}", "received_events_url": "https://api.github.com/users/HDembinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-06T12:33:02Z", "updated_at": "2019-11-06T21:12:39Z", "closed_at": "2019-11-06T14:40:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I noticed in a script of mine that `uproot.iterate` to iterate over some files twice in a row in the same script does not work. The second time it does not actually iterate. I am not sure how to make a minimal example to demonstrate this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/393", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/393/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/393/events", "html_url": "https://github.com/scikit-hep/uproot/issues/393", "id": 517578993, "node_id": "MDU6SXNzdWU1MTc1Nzg5OTM=", "number": 393, "title": "HTTP multipart/XRootD vector_read for remote baskets", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "chrisburr", "id": 5220533, "node_id": "MDQ6VXNlcjUyMjA1MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5220533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisburr", "html_url": "https://github.com/chrisburr", "followers_url": "https://api.github.com/users/chrisburr/followers", "following_url": "https://api.github.com/users/chrisburr/following{/other_user}", "gists_url": "https://api.github.com/users/chrisburr/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisburr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisburr/subscriptions", "organizations_url": "https://api.github.com/users/chrisburr/orgs", "repos_url": "https://api.github.com/users/chrisburr/repos", "events_url": "https://api.github.com/users/chrisburr/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisburr/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "chrisburr", "id": 5220533, "node_id": "MDQ6VXNlcjUyMjA1MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5220533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisburr", "html_url": "https://github.com/chrisburr", "followers_url": "https://api.github.com/users/chrisburr/followers", "following_url": "https://api.github.com/users/chrisburr/following{/other_user}", "gists_url": "https://api.github.com/users/chrisburr/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisburr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisburr/subscriptions", "organizations_url": "https://api.github.com/users/chrisburr/orgs", "repos_url": "https://api.github.com/users/chrisburr/repos", "events_url": "https://api.github.com/users/chrisburr/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisburr/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-11-05T06:49:34Z", "updated_at": "2020-06-18T00:57:42Z", "closed_at": "2020-06-18T00:57:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The chunked sources (`HTTPSource` and `XRootDSource`) currently have a fixed-chunksize cache. Since the base directory and TTree metadata of most files is at the end of the file, this means that `uproot.open(\"http://...\")` consists of two sequential remote reads: the beginning of the file (`TFile` header and all `TStreamerInfos`) and the end of the file, and the `file[\"tree\"]` request probably hits the latter. This is a good argument for making the chunksize large (1 MB, PR #392), so that it is not likely to be more than two such reads.\r\n\r\nHowever, when a user requests a single or a subset of branches from the TTree, a large chunksize might require too much data downloading because 1 MB is coarser than most basket sizes. Ideally, we want to send an HTTP multipart or XRootD vector_read of _only_ the bytes corresponding to the basket data. They are known before the read:\r\n\r\n```python\r\nbranch._fBasketSeek[:branch.numbaskets]    # start of each basket in bytes\r\nbranch._fBasketBytes[:branch.numbaskets]   # size of each basket in bytes\r\n```\r\n\r\nThe main chunked source cache relies on the fact that the chunksize is fixed, so that finding the appropriate chunk is a constant-time operation (it is performed many times, for every set of contiguous, fixed-size fields and for 2-3 times for every variable-size string). These baskets would be variable-sized, so they should be a _second cache_, in addition to the main cache. The second cache would have to maintain a list of start positions and sizes, with log-N lookup time via Python's `bisect` or Numpy's `searchsorted`.\r\n\r\nRequesting data from baskets would have to be called in a different way for baskets than for every other case. This is not a major problem, since such access is already abstracted through `Cursor` and `Source`: a new method could be added to `Source`, like `Source.data` but going through the second cache (in chunked sources; no difference in other sources) and a new method could be added to `Cursor` for getting an array that is only used in basket reading.\r\n\r\nThe HTTP multipart or XRootD vector_read call could be added to `HTTPSource.preload` and `XRootDSource.preload` instead of the one-request-per-task parallel preloader that's in there now. The hook exists, but it will need to be expanded from knowing just the start of each seek point of interest to knowing the full ranges (starts and stops or starts and sizes).\r\n\r\nNote that a `Cursor`'s request for fixed-fields and strings in a basket's `TKey` header must also hit the second cache\u2014this is not just about passing raw basket bytes to Numpy. See the `TTreeMethods._threadsafe_iterate_keys` method, which loads half (`complete=False`) or all (`complete=True`) of each basket `TKey`. All of the basket `TKeys` must be completely read and interpreted before beginning the basket data compression and conversion into arrays because important information for the `Interpretation` can only be discovered this way, such as the number of items contained in all the nested arrays of a jagged array branch. This first pass over the multipart data must not be allowed to cause a cache eviction, or arrays might have to be downloaded twice: once before reading the `TKeys` and again afterward. It is not possible to make a multipart fetch for only the `TKey` headers, small though they are, because their exact size is not known from TBranch metadata.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/390", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/390/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/390/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/390/events", "html_url": "https://github.com/scikit-hep/uproot/issues/390", "id": 516247583, "node_id": "MDU6SXNzdWU1MTYyNDc1ODM=", "number": 390, "title": "Accessing custom classes with uproot", "user": {"login": "zinebaly", "id": 47111087, "node_id": "MDQ6VXNlcjQ3MTExMDg3", "avatar_url": "https://avatars2.githubusercontent.com/u/47111087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zinebaly", "html_url": "https://github.com/zinebaly", "followers_url": "https://api.github.com/users/zinebaly/followers", "following_url": "https://api.github.com/users/zinebaly/following{/other_user}", "gists_url": "https://api.github.com/users/zinebaly/gists{/gist_id}", "starred_url": "https://api.github.com/users/zinebaly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zinebaly/subscriptions", "organizations_url": "https://api.github.com/users/zinebaly/orgs", "repos_url": "https://api.github.com/users/zinebaly/repos", "events_url": "https://api.github.com/users/zinebaly/events{/privacy}", "received_events_url": "https://api.github.com/users/zinebaly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-11-01T17:28:32Z", "updated_at": "2019-11-02T19:43:50Z", "closed_at": "2019-11-02T19:43:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, THANK YOU for you quick reply on my [stackoverflow question](https://stackoverflow.com/q/58640970/1623645) :)\r\n\r\nCan you please tell me how uproot can handle the class features in : Evt, AAObject, TObject and t? \r\n\r\nMy goal: open data in my root file into pandas DataFrame.\r\n\r\nWhen I try to loop over data in ['Evt'] tree, I get the following error for the following branches AAObject, TObject and  t\r\n\r\n    ValueError: cannot interpret branch b'AAObject' as a Python typein file: /myfile.root\r\n\r\n    ValueError: cannot interpret branch b't' as a Python type in file: /myfile.root\r\n\r\n    ValueError: cannot interpret branch b'TObject' as a Python type in file: /myfile.root\r\n\r\nThis is what I type to explore my file\r\n\r\n    data = uproot.open(\"myfile.root\")[\"E\"]\r\n    data.show() \r\n    data_branch_Evt['Evt']['AAObject'].basket(0)\r\n    data_branch_Evt['t'].basket(0)`\r\n\r\nHere is the result of data.show()\r\n\r\n```\r\nEvt                        TStreamerInfo              None\r\nAAObject                   TStreamerInfo              None\r\nTObject                    TStreamerInfo              None\r\nfUniqueID                  TStreamerBasicType         asdtype('>u4')\r\nfBits                      TStreamerBasicType         asdtype('>u4')\r\n\r\nusr                        TStreamerSTL  asjagged(asdtype('>f8'), 10)\r\nusr_names                  TStreamerSTL asgenobj(STLVector(STLString()))\r\n\r\nid                         TStreamerBasicType         asdtype('>i4')\r\ndet_id                     TStreamerBasicType         asdtype('>i4')\r\nmc_id                      TStreamerBasicType         asdtype('>i4')\r\nrun_id                     TStreamerBasicType         asdtype('>i4')\r\nmc_run_id                  TStreamerBasicType         asdtype('>i4')\r\nframe_index                TStreamerBasicType         asdtype('>i4')\r\ntrigger_mask               TStreamerBasicType         asdtype('>u8')\r\ntrigger_counter            TStreamerBasicType         asdtype('>u8')\r\noverlays                   TStreamerBasicType         asdtype('>u4')\r\nt                          TStreamerObjectAny         None\r\nt.fSec                     TStreamerBasicType         asdtype('>i4')\r\nt.fNanoSec                 TStreamerBasicType         asdtype('>i4')\r\n\r\nhits                       TStreamerSTL               asdtype('>i4')\r\n```\r\n\r\nThank you for your time and consideration \r\n  \r\n[dummy.root.zip](https://github.com/scikit-hep/uproot/files/3798897/dummy.root.zip)\r\n@tamasgal", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/388", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/388/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/388/events", "html_url": "https://github.com/scikit-hep/uproot/issues/388", "id": 514815573, "node_id": "MDU6SXNzdWU1MTQ4MTU1NzM=", "number": 388, "title": "iterate does not read all requested branches", "user": {"login": "jrueb", "id": 30041073, "node_id": "MDQ6VXNlcjMwMDQxMDcz", "avatar_url": "https://avatars2.githubusercontent.com/u/30041073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrueb", "html_url": "https://github.com/jrueb", "followers_url": "https://api.github.com/users/jrueb/followers", "following_url": "https://api.github.com/users/jrueb/following{/other_user}", "gists_url": "https://api.github.com/users/jrueb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrueb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrueb/subscriptions", "organizations_url": "https://api.github.com/users/jrueb/orgs", "repos_url": "https://api.github.com/users/jrueb/repos", "events_url": "https://api.github.com/users/jrueb/events{/privacy}", "received_events_url": "https://api.github.com/users/jrueb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-30T16:35:59Z", "updated_at": "2019-11-01T22:26:01Z", "closed_at": "2019-11-01T22:26:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm reading multiple root files containing trees. Some of the root files contain branches, which the others don't. I only need selected branches from the root files. Some of the branches I want are only present in some root files. Thus I use uproot.iterate, where the branches argument is a function TBranchMethods \u21d2 True or False.\r\nWhat I would expect is, that the dict yielded by iterate contains the branches as they are available.\r\nBut instead the branches inside the dict are determined by the branch availabilities of the first file that was read: When the first file does not have some branches, they are not read for later files that have them; when a later file does not have a branch, an exception is raised by uproot/tree.py.\r\nEverything seems to be caused by lines 178 to 183 in tree.py.\r\nI can not understand this behaviour from the documentation. It also does not make sense to call the function given by the branches argument in every iteration step if the branches are determined by the first call. For my case, the only way I could solve the issue is by splitting the files I have into categories of their available branches and then having a iterate loop for each of the categories. This would be complicate things by a lot.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/387", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/387/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/387/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/387/events", "html_url": "https://github.com/scikit-hep/uproot/issues/387", "id": 514662229, "node_id": "MDU6SXNzdWU1MTQ2NjIyMjk=", "number": 387, "title": "Cannot find documentation easily with help() for TTree", "user": {"login": "HDembinski", "id": 2631586, "node_id": "MDQ6VXNlcjI2MzE1ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HDembinski", "html_url": "https://github.com/HDembinski", "followers_url": "https://api.github.com/users/HDembinski/followers", "following_url": "https://api.github.com/users/HDembinski/following{/other_user}", "gists_url": "https://api.github.com/users/HDembinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/HDembinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HDembinski/subscriptions", "organizations_url": "https://api.github.com/users/HDembinski/orgs", "repos_url": "https://api.github.com/users/HDembinski/repos", "events_url": "https://api.github.com/users/HDembinski/events{/privacy}", "received_events_url": "https://api.github.com/users/HDembinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-30T13:18:21Z", "updated_at": "2019-11-18T16:52:56Z", "closed_at": "2019-11-18T16:52:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I try to use the iterate method on a tree loaded with uproot. I have some kind of user error, which to understand I need to look up the documentation of iterate. So I print the type of the tree, it is `uproot.rootio.TTree` and tried to look up this class in help() without success:\r\n```\r\n>>> help()\r\n\r\nWelcome to Python 3.7's help utility!\r\n\r\nIf this is your first time using Python, you should definitely check out\r\nthe tutorial on the Internet at https://docs.python.org/3.7/tutorial/.\r\n\r\nEnter the name of any module, keyword, or topic to get help on writing\r\nPython programs and using Python modules.  To quit this help utility and\r\nreturn to the interpreter, just type \"quit\".\r\n\r\nTo get a list of available modules, keywords, symbols, or topics, type\r\n\"modules\", \"keywords\", \"symbols\", or \"topics\".  Each module also comes\r\nwith a one-line summary of what it does; to list the modules whose name\r\nor summary contain a given string such as \"spam\", type \"modules spam\".\r\n\r\nhelp> uproot.rootio\r\n\r\nhelp> uproot.rootio.TTree\r\nNo Python documentation found for 'uproot.rootio.TTree'.\r\nUse help() to get the interactive help utility.\r\nUse help(str) for help on the str class.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/384", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/384/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/384/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/384/events", "html_url": "https://github.com/scikit-hep/uproot/issues/384", "id": 511604058, "node_id": "MDU6SXNzdWU1MTE2MDQwNTg=", "number": 384, "title": "uproot.iterate error (AttributeError: object has no attribute)", "user": {"login": "iokarkan", "id": 56940437, "node_id": "MDQ6VXNlcjU2OTQwNDM3", "avatar_url": "https://avatars0.githubusercontent.com/u/56940437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iokarkan", "html_url": "https://github.com/iokarkan", "followers_url": "https://api.github.com/users/iokarkan/followers", "following_url": "https://api.github.com/users/iokarkan/following{/other_user}", "gists_url": "https://api.github.com/users/iokarkan/gists{/gist_id}", "starred_url": "https://api.github.com/users/iokarkan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iokarkan/subscriptions", "organizations_url": "https://api.github.com/users/iokarkan/orgs", "repos_url": "https://api.github.com/users/iokarkan/repos", "events_url": "https://api.github.com/users/iokarkan/events{/privacy}", "received_events_url": "https://api.github.com/users/iokarkan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-10-23T22:26:13Z", "updated_at": "2019-10-24T14:43:20Z", "closed_at": "2019-10-24T14:43:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I've come across the following error while trying to get uproot iterate to loop over 2 separate files. My command is:\r\n`for data in uproot.iterate(\"*.root\",\"Delphes\",[\"Particle.PT\",\"Particle.Eta\",\"Particle.Phi\",\"Particle.E\",\"Particle.Pz\",\"Particle.fUniqueID\",\r\n                        \"GenJet.PT\",\"GenJet.Mass\",\"GenJet.Particles\",\"GenJet.Constituents\"],namedecode=\"utf-8\",entrysteps=steps):\r\n    pass`\r\n\r\nand the error (**Windows**)\r\n`Traceback (most recent call last):\r\n  File \"D:/share_with_cernvm/PyCharm uproot/largegenjet_bkgzj/[manyfiles_iterate][loop_out_of_function]reco_object_selection_delphes.py\", line 139, in <module>\r\n    \"GenJet.PT\",\"GenJet.Mass\",\"GenJet.Particles\",\"GenJet.Constituents\"],namedecode=\"utf-8\",entrysteps=steps):\r\n  File \"C:\\Users\\kark\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\uproot\\tree.py\", line 114, in iterate\r\n    for tree, newbranches, globalentrystart, thispath, thisfile in _iterate(path, treepath, branches, awkward, localsource, xrootdsource, httpsource, **options):\r\n  File \"C:\\Users\\kark\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\uproot\\tree.py\", line 174, in _iterate\r\n    elif not newbranches[key].compatible(oldbranches[key]):\r\n  File \"C:\\Users\\kark\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\uproot\\interp\\objects.py\", line 316, in compatible\r\n    return isinstance(other, asgenobj) and self.generator.cls.__name__ == other.generator.cls.__name__\r\nAttributeError: 'SimpleArray' object has no attribute '__name__'`\r\n\r\nand (**Ubuntu 18.04**):\r\n`Traceback (most recent call last):\r\n  File \"/media/sf_share_with_cernvm/PyCharm_uproot/largegenjet_bkgzj/[manyfiles_iterate][loop_out_of_function]reco_object_selection_delphes.py\", line 141, in <module>\r\n    \"GenJet.PT\",\"GenJet.Mass\",\"GenJet.Particles\",\"GenJet.Constituents\"],namedecode=\"utf-8\",entrysteps=steps):\r\n  File \"/home/kark/PycharmProjects/uproot/venv/lib/python3.6/site-packages/uproot/tree.py\", line 114, in iterate\r\n    for tree, newbranches, globalentrystart, thispath, thisfile in _iterate(path, treepath, branches, awkward, localsource, xrootdsource, httpsource, **options):\r\n  File \"/home/kark/PycharmProjects/uproot/venv/lib/python3.6/site-packages/uproot/tree.py\", line 174, in _iterate\r\n    elif not newbranches[key].compatible(oldbranches[key]):\r\n  File \"/home/kark/PycharmProjects/uproot/venv/lib/python3.6/site-packages/uproot/interp/objects.py\", line 316, in compatible\r\n    return isinstance(other, asgenobj) and self.generator.cls.__name__ == other.generator.cls.__name__\r\nAttributeError: 'SimpleArray' object has no attribute '__name__'\r\n`\r\n\r\nNow, I can see that googling gets me to [Issue 274](https://github.com/scikit-hep/uproot/issues/274), but I cannot find any solution in the link of the comment. Is this not the correct syntax? \r\nI am trying the 1st snippet both in Windows and a Ubuntu 18.04 VM, in python2.7, getting the same error. \r\n\r\nAlso, trying the example from the tutorial on how to use uproot.iterate fails on windows 10 with the similar error:\r\n\r\n`Traceback (most recent call last):\r\n  File \"D:/share_with_cernvm/PyCharm uproot/largegenjet_bkgzj/[manyfiles_iterate][loop_out_of_function]reco_object_selection_delphes.py\", line 145, in <module>\r\n    reportpath=True, reportfile=True, reportentries=True):\r\n  File \"C:\\Users\\kark\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\uproot\\tree.py\", line 114, in iterate\r\n    for tree, newbranches, globalentrystart, thispath, thisfile in _iterate(path, treepath, branches, awkward, localsource, xrootdsource, httpsource, **options):\r\n  File \"C:\\Users\\kark\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\uproot\\tree.py\", line 151, in _iterate\r\n    paths = [y for x in path for y in _filename_explode(x)]\r\n  File \"C:\\Users\\kark\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\uproot\\tree.py\", line 151, in <listcomp>\r\n    paths = [y for x in path for y in _filename_explode(x)]\r\n  File \"C:\\Users\\kark\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\uproot\\tree.py\", line 70, in _filename_explode\r\n    if _bytesid(parsed.scheme) == b\"file\" or len(parsed.scheme) == 0 or (os.name == \"nt\" and open._windows_absolute.match(x) is not None):\r\nAttributeError: 'builtin_function_or_method' object has no attribute '_windows_absolute'`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/382", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/382/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/382/events", "html_url": "https://github.com/scikit-hep/uproot/issues/382", "id": 509470687, "node_id": "MDU6SXNzdWU1MDk0NzA2ODc=", "number": 382, "title": "Getting correct PATH locations on Windows 10 PC in uproot.open(<pathname>)", "user": {"login": "physicscitizen", "id": 45843291, "node_id": "MDQ6VXNlcjQ1ODQzMjkx", "avatar_url": "https://avatars3.githubusercontent.com/u/45843291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/physicscitizen", "html_url": "https://github.com/physicscitizen", "followers_url": "https://api.github.com/users/physicscitizen/followers", "following_url": "https://api.github.com/users/physicscitizen/following{/other_user}", "gists_url": "https://api.github.com/users/physicscitizen/gists{/gist_id}", "starred_url": "https://api.github.com/users/physicscitizen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/physicscitizen/subscriptions", "organizations_url": "https://api.github.com/users/physicscitizen/orgs", "repos_url": "https://api.github.com/users/physicscitizen/repos", "events_url": "https://api.github.com/users/physicscitizen/events{/privacy}", "received_events_url": "https://api.github.com/users/physicscitizen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2019-10-19T15:45:26Z", "updated_at": "2019-10-21T18:29:21Z", "closed_at": "2019-10-21T13:50:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I manged to get 64 bit Python 3.8 loaded up and it seems to work ok on some of my simple files. \r\nUsing pip I was able to get numpy, uproot, and awkward installed as well with no problems. \r\nMy working disk is my \u201cD:\u201d drive, but my ATLAS data sits on my \u201cF:\u201d drive. \r\n\r\nSo I naively decided to try out uproot first just within an IDLE session. \r\n\r\nAnd I\u2019m falling at the first hurdle because it seems that uproot is having trouble parsing the path to the ROOT file. \r\n\r\nHere\u2019s what I get in the IDLE session:\r\n```\r\nPython 3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:37:50) [MSC v.1916 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license()\" for more information.\r\n>>> import uproot as upr\r\n>>> import awkward\r\n>>> pth = 'F:\\\\ROOTdataATLAS\\\\ATLASatk4EMTopoHITS002866.root'\r\n>>> print(pth)\r\nF:\\ROOTdataATLAS\\ATLASatk4EMTopoHITS002866.root\r\n\r\n>>> upr.open(pth)\r\n\r\nTraceback (most recent call last):\r\n  File \"<pyshell#4>\", line 1, in <module>\r\n    upr.open(pth)\r\n  File \"D:\\Python38\\lib\\site-packages\\uproot\\rootio.py\", line 53, in open\r\n    return ROOTDirectory.read(openfcn(path), **options)\r\n  File \"D:\\Python38\\lib\\site-packages\\uproot\\rootio.py\", line 50, in <lambda>\r\n    openfcn = lambda path: MemmapSource(path, **kwargs)\r\n  File \"D:\\Python38\\lib\\site-packages\\uproot\\source\\memmap.py\", line 21, in __init__\r\n    self._source = numpy.memmap(self.path, dtype=numpy.uint8, mode=\"r\")\r\n  File \"D:\\Python38\\lib\\site-packages\\numpy\\core\\memmap.py\", line 225, in __new__\r\n    f_ctx = open(os_fspath(filename), ('r' if mode == 'c' else mode)+'b')\r\nFileNotFoundError: [Errno 2] No such file or directory: '\\\\ROOTdataATLAS\\\\ATLASatk4EMTopoHITS002866.root'\r\n>>>\r\n```\r\nThe first lines are me just creating a string variable \u2018pth\u2019 that holds the path and file location and then printing out that variable to verify that it is correct (it is). \r\nIt appears that uproot is picking up the double back-slashes and not interpreting them as single back-slashes? Also, will uproot understand the change of disk location? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/378", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/378/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/378/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/378/events", "html_url": "https://github.com/scikit-hep/uproot/issues/378", "id": 507000771, "node_id": "MDU6SXNzdWU1MDcwMDA3NzE=", "number": 378, "title": "Convert a table into a dict of Jagged arrays", "user": {"login": "nfoppiani", "id": 13448134, "node_id": "MDQ6VXNlcjEzNDQ4MTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/13448134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfoppiani", "html_url": "https://github.com/nfoppiani", "followers_url": "https://api.github.com/users/nfoppiani/followers", "following_url": "https://api.github.com/users/nfoppiani/following{/other_user}", "gists_url": "https://api.github.com/users/nfoppiani/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfoppiani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfoppiani/subscriptions", "organizations_url": "https://api.github.com/users/nfoppiani/orgs", "repos_url": "https://api.github.com/users/nfoppiani/repos", "events_url": "https://api.github.com/users/nfoppiani/events{/privacy}", "received_events_url": "https://api.github.com/users/nfoppiani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-15T04:40:46Z", "updated_at": "2020-06-18T00:58:56Z", "closed_at": "2020-06-18T00:58:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "This issue is mainly a question.\r\nI would like to know how I can convert a table\r\nobtained with this code `uproot.open(root_filename)[tree].lazyarrays()` \r\ninto a dict of Jagged arrays\r\nobtained normally with this code `uproot.open(root_filename)[tree].arrays()`.\r\nThis is because I would like to consider a table, compute a function that produces a mask (a vector of True or False with length equal to the number of rows of the table), and then create a dict of Jagged arrays without the masked rows.\r\n\r\nThis is because I need to run functions that would produce new jagged arrays (or new columns, if we think about tables), which are not applicable on all rows but only on those for which the mask is True.\r\n\r\nAdditionally, I also realised that executing operations with the dict of arrays is faster than with the table, is it expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/377", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/377/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/377/events", "html_url": "https://github.com/scikit-hep/uproot/issues/377", "id": 506506668, "node_id": "MDU6SXNzdWU1MDY1MDY2Njg=", "number": 377, "title": "Default output types of arrays() and lazyarrays() are different", "user": {"login": "masonproffitt", "id": 32773304, "node_id": "MDQ6VXNlcjMyNzczMzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/32773304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masonproffitt", "html_url": "https://github.com/masonproffitt", "followers_url": "https://api.github.com/users/masonproffitt/followers", "following_url": "https://api.github.com/users/masonproffitt/following{/other_user}", "gists_url": "https://api.github.com/users/masonproffitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/masonproffitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masonproffitt/subscriptions", "organizations_url": "https://api.github.com/users/masonproffitt/orgs", "repos_url": "https://api.github.com/users/masonproffitt/repos", "events_url": "https://api.github.com/users/masonproffitt/events{/privacy}", "received_events_url": "https://api.github.com/users/masonproffitt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-14T08:17:18Z", "updated_at": "2019-10-14T11:34:33Z", "closed_at": "2019-10-14T11:34:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Example:\r\n```python\r\n>>> import uproot\r\n>>> file = uproot.open('run0.root')\r\n>>> tree = file.values()[0]\r\n>>> type(tree.arrays())\r\n<class 'dict'>\r\n>>> type(tree.lazyarrays())\r\n<class 'awkward.array.table.Table'>\r\n```\r\n\r\nThis is quite surprising and confusing. They should both return the same type. It doesn't matter as much to me which one, although I'd have a preference for `Table` since it can also be subscripted by row.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/376", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/376/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/376/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/376/events", "html_url": "https://github.com/scikit-hep/uproot/issues/376", "id": 506483173, "node_id": "MDU6SXNzdWU1MDY0ODMxNzM=", "number": 376, "title": "Problems with identifying the type of a ROOT object", "user": {"login": "masonproffitt", "id": 32773304, "node_id": "MDQ6VXNlcjMyNzczMzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/32773304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masonproffitt", "html_url": "https://github.com/masonproffitt", "followers_url": "https://api.github.com/users/masonproffitt/followers", "following_url": "https://api.github.com/users/masonproffitt/following{/other_user}", "gists_url": "https://api.github.com/users/masonproffitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/masonproffitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masonproffitt/subscriptions", "organizations_url": "https://api.github.com/users/masonproffitt/orgs", "repos_url": "https://api.github.com/users/masonproffitt/repos", "events_url": "https://api.github.com/users/masonproffitt/events{/privacy}", "received_events_url": "https://api.github.com/users/masonproffitt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-14T07:12:56Z", "updated_at": "2019-11-23T14:02:17Z", "closed_at": "2019-11-23T14:02:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems unnecessarily difficult to figure out what an object's type is once read from a ROOT file. I often want to open a ROOT file and then scan across the TKeys to find the one(s) that corresponds to a TTree, for example. But this is what I run into with uproot:\r\n\r\n```python\r\n>>> import uproot\r\n>>> file = uproot.open('run0.root')\r\n>>> tree = file.values()[0]\r\n>>> type(tree)\r\n<class 'uproot.rootio.TTree'>\r\n>>> isinstance(tree, uproot.rootio.TTree)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: module 'uproot.rootio' has no attribute 'TTree'\r\n```\r\n\r\nI can do this:\r\n\r\n```python\r\n>>> isinstance(tree, uproot.tree.TTreeMethods)\r\nTrue\r\n```\r\n\r\nbut there's no intuitive reason to check TTreeMethods unless I dig into the documentation and eventually find that TTrees are a subclass of it.\r\n\r\nIt would be slightly better if I could do this:\r\n\r\n```python\r\n>>> tree._classname == 'TTree'\r\nFalse\r\n```\r\n\r\n...but that also fails because I need to check against a byte literal:\r\n\r\n```python\r\n>>> tree._classname           \r\nb'TTree'\r\n>>> tree._classname == b'TTree'\r\nTrue\r\n```\r\n\r\nwhich is also very non-intuitive.\r\n\r\nIs there a way to make something like `isinstance(tree, uproot.TTree)` work, or to make `tree._classname == 'TTree'` work, or both? Why doesn't `uproot.open()` have a `namedecode` option like `arrays()`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/374", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/374/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/374/events", "html_url": "https://github.com/scikit-hep/uproot/issues/374", "id": 504548197, "node_id": "MDU6SXNzdWU1MDQ1NDgxOTc=", "number": 374, "title": "Error reading STL vectors inside TClonesArrays", "user": {"login": "rklasen", "id": 13201731, "node_id": "MDQ6VXNlcjEzMjAxNzMx", "avatar_url": "https://avatars1.githubusercontent.com/u/13201731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rklasen", "html_url": "https://github.com/rklasen", "followers_url": "https://api.github.com/users/rklasen/followers", "following_url": "https://api.github.com/users/rklasen/following{/other_user}", "gists_url": "https://api.github.com/users/rklasen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rklasen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rklasen/subscriptions", "organizations_url": "https://api.github.com/users/rklasen/orgs", "repos_url": "https://api.github.com/users/rklasen/repos", "events_url": "https://api.github.com/users/rklasen/events{/privacy}", "received_events_url": "https://api.github.com/users/rklasen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-09T10:07:41Z", "updated_at": "2019-10-09T15:02:57Z", "closed_at": "2019-10-09T15:02:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nthis issue is an addition or refinement to #373, but we think we found the root cause. It appears uproot crashes when it tries to access a vector inside a struct/class which was written to a TClonesArray. My colleague wrote a minimum example using only ROOT and uproot, not boost whatsoever.\r\n\r\n`rootFileTest.C`:\r\n```c\r\n#include \"TClonesArray.h\"\r\n#include \"TFile.h\"\r\n#include \"TTree.h\"\r\n\r\nstruct A {\r\n  double foo;\r\n  int bar;\r\n};\r\n\r\nstruct B : public TObject {\r\n  std::vector<A> foobars;\r\n};\r\n\r\nvoid rootFileTest() {\r\n  TFile f(\"output.root\", \"RECREATE\");\r\n  TTree t(\"asdf\", \"asdf\");\r\n  TClonesArray arr(\"B\", 1);\r\n\r\n  new (arr[0]) B;\r\n  B *b = (B *)arr.ConstructedAt(0);\r\n  b->foobars.push_back({0.1, 1});\r\n\r\n  t.Branch(\"myarr\", &arr);\r\n  t.Fill();\r\n  t.Write();\r\n}\r\n```\r\n\r\n`readTree.py`\r\n```python\r\nimport uproot\r\nimport numpy\r\n\r\nf = uproot.open(\"output.root\")\r\nevents = f[\"asdf\"]\r\n\r\nprint(events[\"myarr.foobars\"].array())\r\n```\r\n\r\nCompile and run with:\r\n\r\n```\r\nroot -l rootFileTest.C+\r\nroot [0] \r\nProcessing rootFileTest.C+...\r\nInfo in <TUnixSystem::ACLiC>: creating shared library /home/roman/temp/rootTest/./rootFileTest_C.so\r\nWarning in cling::IncrementalParser::CheckABICompatibility():\r\n  Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20180720'\r\n  Extraction of runtime standard library version was: '20181206'\r\nroot [1] rootFileTest()\r\nroot [2] .q\r\n```\r\n\r\nThe file `output.root` is now created and can be read with ROOTs `TBrowser`:\r\n\r\n![TBrowser](https://i.imgur.com/c2ckhtx.png)\r\n\r\nHowever, `uproot` cannot read this branch:\r\n\r\n```\r\npython3 readTree.py \r\nTraceback (most recent call last):\r\n  File \"readTree.py\", line 7, in <module>\r\n    print(events[\"myarr.foobars\"].array())\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/tree.py\", line 1386, in array\r\n    basket_itemoffset = self._basket_itemoffset(interpretation, basketstart, basketstop, keycache)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/tree.py\", line 1341, in _basket_itemoffset\r\n    numitems = interpretation.numitems(key.border, self.basket_numentries(i))\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/interp/jagged.py\", line 64, in numitems\r\n    return self.content.numitems(numbytes - numentries * self.skipbytes, numentries)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/interp/objects.py\", line 158, in numitems\r\n    return self.content.numitems(numbytes, numentries)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/interp/numerical.py\", line 152, in numitems\r\n    assert remainder == 0\r\nAssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/373", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/373/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/373/events", "html_url": "https://github.com/scikit-hep/uproot/issues/373", "id": 504075753, "node_id": "MDU6SXNzdWU1MDQwNzU3NTM=", "number": 373, "title": "Error reading stl vector from root file", "user": {"login": "rklasen", "id": 13201731, "node_id": "MDQ6VXNlcjEzMjAxNzMx", "avatar_url": "https://avatars1.githubusercontent.com/u/13201731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rklasen", "html_url": "https://github.com/rklasen", "followers_url": "https://api.github.com/users/rklasen/followers", "following_url": "https://api.github.com/users/rklasen/following{/other_user}", "gists_url": "https://api.github.com/users/rklasen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rklasen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rklasen/subscriptions", "organizations_url": "https://api.github.com/users/rklasen/orgs", "repos_url": "https://api.github.com/users/rklasen/repos", "events_url": "https://api.github.com/users/rklasen/events{/privacy}", "received_events_url": "https://api.github.com/users/rklasen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-10-08T14:21:53Z", "updated_at": "2019-10-09T17:09:33Z", "closed_at": "2019-10-08T20:02:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to read an `stl:vector` of numbers from a `TBranch` inside a root file. The file in genereal looks like this:\r\n\r\n```\r\ntrackFile = uproot.open('Lumi_Track_100000.root')\r\nprint(f'Your file looks like this:\\n')\r\ntrackFile[b\"pndsim\"].show()\r\n```\r\n\r\nThis is the shortend output:\r\n\r\n```\r\nEventHeader.               TStreamerInfo              asgenobj(FairEventHeader)\r\nLMDPndTrack                TStreamerInfo              asdtype('>i4')\r\n[...]\r\nLMDPndTrack.fTrackParamLast.fiver\r\n                           TStreamerInfo              asjagged(asobj(<uproot_methods.classes.TVector3.Methods>))\r\n[...]\r\nLMDPndTrack.fTrackCand.fHitId\r\n                           TStreamerSTL               asjagged(astable(asdtype(\"[('fFile', 'u1'), ('fType', '>u2'), ('fEntry', '>i4'), ('fIndex', '>i4'), ('fWeight', '>f4'), ('fRho', '>f8')]\")), 10)\r\n[...]\r\n```\r\n\r\nAnd I can access a sub branch just fine with `trackFile[b\"pndsim\"].array(\"LMDPndTrack.fTrackParamLast.fiver\")`:\r\n\r\n```\r\nAccess some sub branch:\r\n [[TVector3(0.04001, -3.4694e-18, 0.9992) TVector3(0.04001, -3.4694e-18, 0.9992) \r\n[...]\r\nTVector3(0.04001, -3.4694e-18, 0.9992) TVector3(0.04001, -3.4694e-18, 0.9992)]]\r\n```\r\n\r\nHowever, the important branch access fails with `trackFile[b\"pndsim\"].array(\"LMDPndTrack.fTrackCand.fHitId\")`:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"./trackCandMinimal.py\", line 11, in <module>\r\n    print(f'Access the important sub branch:\\n { trackFile[b\"pndsim\"].array(\"LMDPndTrack.fTrackCand.fHitId\") }\\n\\n')\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/tree.py\", line 513, in array\r\n    return tbranch.array(interpretation=interpretation, entrystart=entrystart, entrystop=entrystop, flatten=flatten, awkwardlib=awkwardlib, cache=cache, basketcache=basketcache, keycache=keycache, executor=executor, blocking=blocking)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/tree.py\", line 1386, in array\r\n    basket_itemoffset = self._basket_itemoffset(interpretation, basketstart, basketstop, keycache)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/tree.py\", line 1341, in _basket_itemoffset\r\n    numitems = interpretation.numitems(key.border, self.basket_numentries(i))\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/interp/jagged.py\", line 64, in numitems\r\n    return self.content.numitems(numbytes - numentries * self.skipbytes, numentries)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/interp/objects.py\", line 158, in numitems\r\n    return self.content.numitems(numbytes, numentries)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/interp/numerical.py\", line 152, in numitems\r\n    assert remainder == 0\r\nAssertionError\r\n```\r\n\r\nIt seems the interpretation of this branch is wrong, it's not supposed to be `astable`, but like a `SimpleArray` or something. I can not use `awkward.fromiter`, because the assertion fails as soon as I try to access the `TBranch`. So the important thing I guess is:\r\n\r\n**Can I force the interpretation of a TBranch as a vector, array, something else?**\r\n\r\nI created a minimal running example here:\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport numpy as np\r\nimport uproot\r\n\r\ntrackFile = uproot.open('Lumi_Track_100000.root')\r\nprint(f'Your file looks like this:\\n')\r\ntrackFile[b\"pndsim\"].show()\r\nprint(f'\\n\\n')\r\nprint(f'Access some sub branch:\\n { trackFile[b\"pndsim\"].array(\"LMDPndTrack.fTrackParamLast.fiver\") }\\n\\n')\r\nprint(f'Access the important sub branch:\\n { trackFile[b\"pndsim\"].array(\"LMDPndTrack.fTrackCand.fHitId\") }\\n\\n')\r\n```\r\n\r\n[And the track file can be downloaded from my Dropbox.](https://www.dropbox.com/s/uh51fk72stthi79/Lumi_Track_100000.root?dl=0)\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/371", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/371/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/371/events", "html_url": "https://github.com/scikit-hep/uproot/issues/371", "id": 503429410, "node_id": "MDU6SXNzdWU1MDM0Mjk0MTA=", "number": 371, "title": "Reading custom classes in BDSIM Trees", "user": {"login": "chernals", "id": 1025745, "node_id": "MDQ6VXNlcjEwMjU3NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1025745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chernals", "html_url": "https://github.com/chernals", "followers_url": "https://api.github.com/users/chernals/followers", "following_url": "https://api.github.com/users/chernals/following{/other_user}", "gists_url": "https://api.github.com/users/chernals/gists{/gist_id}", "starred_url": "https://api.github.com/users/chernals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chernals/subscriptions", "organizations_url": "https://api.github.com/users/chernals/orgs", "repos_url": "https://api.github.com/users/chernals/repos", "events_url": "https://api.github.com/users/chernals/events{/privacy}", "received_events_url": "https://api.github.com/users/chernals/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-10-07T12:46:15Z", "updated_at": "2019-10-07T19:22:57Z", "closed_at": "2019-10-07T16:25:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am attempting to process BDSIM ROOT output files (see http://www.pp.rhul.ac.uk/bdsim/manual/) using `uproot` to take advantage of your wonderful library and simplify our present workflow (pyroot + root_numpy with bits of rootpy and root_pandas).\r\n\r\nSo far so good, except, for custom classes. I tried to follow issue #124 but this seems to be different.\r\n\r\nThe custom class is correctly shown with a `TBrowser`; see screenshot:\r\n\r\n<img width=\"214\" alt=\"Screenshot 2019-10-07 14 41 17\" src=\"https://user-images.githubusercontent.com/1025745/66312509-18205a00-e911-11e9-803c-ee6f29e44a0c.png\">\r\n\r\nUsing `show` within `uproot` reports this:\r\n\r\n`DRIFT_0.                   TStreamerInfo              asdtype(\"[(' fBits', '>u8'), (' fUniqueID', '>u8'), ('n', '>i4'), ('z', '>f4'), ('modelID', '>i4'), ('S', '>f4')]\")`\r\n\r\nThe interpretation appears to be wrong.\r\n\r\nThe class which is feed onto the branches like 'DRIFT_0' is this one: https://bitbucket.org/jairhul/bdsim/src/master/include/BDSOutputROOTEventSampler.hh .\r\n\r\nI must admit that I do not know enough about `root` to correctly diagnose what's happening, so any pointer would be appreciated.\r\n\r\nAn example file is shared on [Dropbox](https://www.dropbox.com/s/md9pd3c60eb6nnr/output.root?dl=0).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/367", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/367/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/367/events", "html_url": "https://github.com/scikit-hep/uproot/issues/367", "id": 502651116, "node_id": "MDU6SXNzdWU1MDI2NTExMTY=", "number": 367, "title": "Reading std::map< std::string, std::vector<float> >", "user": {"login": "nfoppiani", "id": 13448134, "node_id": "MDQ6VXNlcjEzNDQ4MTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/13448134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfoppiani", "html_url": "https://github.com/nfoppiani", "followers_url": "https://api.github.com/users/nfoppiani/followers", "following_url": "https://api.github.com/users/nfoppiani/following{/other_user}", "gists_url": "https://api.github.com/users/nfoppiani/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfoppiani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfoppiani/subscriptions", "organizations_url": "https://api.github.com/users/nfoppiani/orgs", "repos_url": "https://api.github.com/users/nfoppiani/repos", "events_url": "https://api.github.com/users/nfoppiani/events{/privacy}", "received_events_url": "https://api.github.com/users/nfoppiani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-10-04T13:54:09Z", "updated_at": "2019-10-21T14:55:34Z", "closed_at": "2019-10-18T10:39:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "My group uses TTrees in which we store `std::map< std::string, std::vector<float> >` as weights relative to certain parameters identified by the strings.\r\nIs there a way to read it efficiently with uproot, and maybe to convert it into a Jagged Array?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/365", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/365/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/365/events", "html_url": "https://github.com/scikit-hep/uproot/issues/365", "id": 502108921, "node_id": "MDU6SXNzdWU1MDIxMDg5MjE=", "number": 365, "title": "Not able to read `vector<ULong64_t>`", "user": {"login": "leoredi", "id": 6040303, "node_id": "MDQ6VXNlcjYwNDAzMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6040303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoredi", "html_url": "https://github.com/leoredi", "followers_url": "https://api.github.com/users/leoredi/followers", "following_url": "https://api.github.com/users/leoredi/following{/other_user}", "gists_url": "https://api.github.com/users/leoredi/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoredi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoredi/subscriptions", "organizations_url": "https://api.github.com/users/leoredi/orgs", "repos_url": "https://api.github.com/users/leoredi/repos", "events_url": "https://api.github.com/users/leoredi/events{/privacy}", "received_events_url": "https://api.github.com/users/leoredi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-03T14:40:22Z", "updated_at": "2019-10-03T16:06:29Z", "closed_at": "2019-10-03T16:06:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "You would probably want to allow `uproot` to read  `vector<ULong64_t>` branches as a an array of integers\r\n\r\n```\r\nIn [6]: a = events.array(\"TOT\")\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-6-6dcabaf4504c> in <module>\r\n----> 1 a = events.array(\"TOT\")\r\n\r\n/usr/local/miniconda3/envs/hepML/lib/python3.6/site-packages/uproot/tree.py in array(self, branch, interpretation, entrystart, entrystop, flatten, awkwardlib, cache, basketcache, keycache, executor, blocking)\r\n    503     def array(self, branch, interpretation=None, entrystart=None, entrystop=None, flatten=False, awkwardlib=None, cache=None, basketcache=None, keycache=None, executor=None, blocking=True):\r\n    504         awkward = _normalize_awkwardlib(awkwardlib)\r\n--> 505         branches = list(self._normalize_branches(branch, awkward))\r\n    506         if len(branches) == 1:\r\n    507             if interpretation is None:\r\n\r\n/usr/local/miniconda3/envs/hepML/lib/python3.6/site-packages/uproot/tree.py in _normalize_branches(self, arg, awkward, allownone, allowcallable, allowdict, allowstring, aliases)\r\n    814\r\n    815         elif allowstring and isinstance(arg, string_types):\r\n--> 816             for x in self._normalize_branches([arg], awkward):\r\n    817                 yield x\r\n    818\r\n\r\n/usr/local/miniconda3/envs/hepML/lib/python3.6/site-packages/uproot/tree.py in _normalize_branches(self, arg, awkward, allownone, allowcallable, allowdict, allowstring, aliases)\r\n    852                         interpretation = interpret(branch, awkward)\r\n    853                         if interpretation is None:\r\n--> 854                             raise ValueError(\"cannot interpret branch {0} as a Python type\\n   in file: {1}\".format(repr(branch.name), self._context.sourcepath))\r\n    855                         else:\r\n    856                             yield branch, interpretation\r\n\r\nValueError: cannot interpret branch b'TOT' as a Python type\r\n   in file: Root_Files/Run_5001_withSatHit.root\r\n```\r\n\r\nFor clarity this is what happens when you read the same branch with RDataFrame:\r\n```\r\nIn [2]: df = ROOT.RDataFrame(\"data\", \"Root_Files/Run_5001_withSatHit.root\")\r\nIn [4]: npy1 = df.AsNumpy()\r\nIn [7]: print(npy1[\"TOT\"])\r\n[<ROOT.ROOT::VecOps::RVec<ULong64_t> object at 0x10aeb4000>\r\n <ROOT.ROOT::VecOps::RVec<ULong64_t> object at 0x10aeb4028>\r\n <ROOT.ROOT::VecOps::RVec<ULong64_t> object at 0x10aeb4050> ...\r\n <ROOT.ROOT::VecOps::RVec<ULong64_t> object at 0x10af15a08>\r\n <ROOT.ROOT::VecOps::RVec<ULong64_t> object at 0x10af15a30>\r\n <ROOT.ROOT::VecOps::RVec<ULong64_t> object at 0x10af15a58>]\r\nIn [8]: print(npy1[\"TOT\"][1])\r\n{ 1, 1, 3, 7, 19, 2, 2, 3, 13, 3, 3, 1, 5, 9, 12, 3, 2, 3, 6, 7, 4, 3, 3, 1, 1, 2, 1, 1, 2, 2, 8, 3, 16, 9, 11, 7, 3, 6, 3, 10, 6, 5, 1, 2, 4, 3, 1, 1, 1, 1, 4, 3, 1, 9, 12, 8, 19, 4, 8, 3, 5, 2, 2, 3, 1, 1, 2, 1, 1, 1, 1, 4, 1, 4, 4, 5, 3, 4, 3, 5, 8, 3, 4, 4, 8, 6, 5, 3, 2, 1, 2, 2, 1, 1, 1, 4, 1, 2, 2, 2, 1, 2, 5, 4, 5, 3, 3, 5, 3, 3, 6, 7, 3, 3, 1, 1, 1, 2, 1, 4, 3, 1, 4, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1 }\r\n```\r\n\r\n@chrisburr ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/364", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/364/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/364/events", "html_url": "https://github.com/scikit-hep/uproot/issues/364", "id": 502057660, "node_id": "MDU6SXNzdWU1MDIwNTc2NjA=", "number": 364, "title": "Reading TEfficiency objects", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-10-03T13:11:27Z", "updated_at": "2020-06-18T00:59:31Z", "closed_at": "2020-06-18T00:59:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, there's a `NotImplementedError` (untested by me; need to triage).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/355", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/355/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/355/events", "html_url": "https://github.com/scikit-hep/uproot/issues/355", "id": 499797538, "node_id": "MDU6SXNzdWU0OTk3OTc1Mzg=", "number": 355, "title": "Write TTrees with multi-dimensional array data", "user": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1063701062, "node_id": "MDU6TGFiZWwxMDYzNzAxMDYy", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/writing-improvements", "name": "writing-improvements", "color": "1d76db", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-09-28T17:18:55Z", "updated_at": "2020-01-11T23:09:02Z", "closed_at": "2020-01-11T23:09:02Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/354", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/354/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/354/events", "html_url": "https://github.com/scikit-hep/uproot/issues/354", "id": 499797457, "node_id": "MDU6SXNzdWU0OTk3OTc0NTc=", "number": 354, "title": "Write TTrees with Jagged Array data", "user": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1063701062, "node_id": "MDU6TGFiZWwxMDYzNzAxMDYy", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/writing-improvements", "name": "writing-improvements", "color": "1d76db", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-09-28T17:18:15Z", "updated_at": "2020-05-01T16:56:48Z", "closed_at": "2020-05-01T16:42:34Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/352", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/352/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/352/events", "html_url": "https://github.com/scikit-hep/uproot/issues/352", "id": 499644620, "node_id": "MDU6SXNzdWU0OTk2NDQ2MjA=", "number": 352, "title": "Reading a file written with uproot: TTreeCache::{AddBranch,DropBranch}: unknown branch -> *", "user": {"login": "douglasdavis", "id": 3202090, "node_id": "MDQ6VXNlcjMyMDIwOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3202090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/douglasdavis", "html_url": "https://github.com/douglasdavis", "followers_url": "https://api.github.com/users/douglasdavis/followers", "following_url": "https://api.github.com/users/douglasdavis/following{/other_user}", "gists_url": "https://api.github.com/users/douglasdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/douglasdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/douglasdavis/subscriptions", "organizations_url": "https://api.github.com/users/douglasdavis/orgs", "repos_url": "https://api.github.com/users/douglasdavis/repos", "events_url": "https://api.github.com/users/douglasdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/douglasdavis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142269, "node_id": "MDU6TGFiZWw2ODcxNDIyNjk=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 31, "created_at": "2019-09-27T20:50:49Z", "updated_at": "2019-10-02T13:37:14Z", "closed_at": "2019-10-02T13:21:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm taking a first stab at TTree writing and I'm running into an issue when trying to read the file back into ROOT (reading it back in uproot is working fine). ROOT is telling me\r\n```\r\nError in <TTreeCache::AddBranch>: unknown branch -> *\r\nError in <TTreeCache::DropBranch>: unknown branch -> *\r\n```\r\nwhen I try to call `TTree::Show` on it. It seems like some kind of nameless ghost of a branch is appearing in the tree some how. I've also tested reading the uproot-originating tree via `RDataFrame` (to create ROOT histograms with `RDataFrame::Histo1D`). Things just crash.\r\n\r\nMy file is created like so:\r\n\r\n```python\r\n## `out_dict` is a dictionary of {name(type=str) -> data(type=numpy.ndarray)}.\r\n## `tree` is just a string for the tree name in the file.\r\n\r\nbranches = {}\r\nfor colname, arr in out_dict.items():\r\n    if arr.dtype == np.uint32: ## convert to int32 for now\r\n        out_dict[colname] = out_dict[colname].astype(np.int32)\r\n    branches[colname] = uproot.newbranch(out_dict[colname].dtype)\r\n    log.info(f\"Saving branch {colname} with dtype {out_dict[colname].dtype}\")\r\n\r\nwith uproot.recreate(outfile) as f:\r\n    f[tree] = uproot.newtree(branches, flushsize=\"10 MB\")\r\n    f[tree].extend(out_dict, flush=False)\r\n```\r\n\r\nI've tried tinkering with the flush (not declaring a `flushsize` on the tree and giving extend `flush=True`) and compression settings just to see if it might impact the error I'm seeing but it doesn't (just file size is different, as I guess is expected). [Link to file](http://webhome.phy.duke.edu/~ddavis/public/uproot352.root)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/349", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/349/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/349/events", "html_url": "https://github.com/scikit-hep/uproot/issues/349", "id": 499407970, "node_id": "MDU6SXNzdWU0OTk0MDc5NzA=", "number": 349, "title": "Masking of JaggedArray does not seem to work", "user": {"login": "HDembinski", "id": 2631586, "node_id": "MDQ6VXNlcjI2MzE1ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HDembinski", "html_url": "https://github.com/HDembinski", "followers_url": "https://api.github.com/users/HDembinski/followers", "following_url": "https://api.github.com/users/HDembinski/following{/other_user}", "gists_url": "https://api.github.com/users/HDembinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/HDembinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HDembinski/subscriptions", "organizations_url": "https://api.github.com/users/HDembinski/orgs", "repos_url": "https://api.github.com/users/HDembinski/repos", "events_url": "https://api.github.com/users/HDembinski/events{/privacy}", "received_events_url": "https://api.github.com/users/HDembinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-09-27T12:07:56Z", "updated_at": "2019-09-27T14:32:37Z", "closed_at": "2019-09-27T14:32:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I have a simple tree with two levels.\r\n```\r\n******************************************************************************\r\n*Tree    :ana       : Units: mm and GeV                                      *\r\n*Entries :   691422 : Total =       328096439 bytes  File  Size =  251965226 *\r\n*        :          : Tree compression factor =   1.30                       *\r\n******************************************************************************\r\n*Br    0 :evt_bxtype : evt_bxtype/B                                          *\r\n*Entries :   691422 : Total  Size=     692797 bytes  File Size  =      90391 *\r\n*Baskets :       11 : Basket Size=      78848 bytes  Compression=   7.66     *\r\n*............................................................................*\r\n*Br    1 :vtx_len   : vtx_len/S                                              *\r\n*Entries :   691422 : Total  Size=    1384362 bytes  File Size  =     290897 *\r\n*Baskets :       13 : Basket Size=     157696 bytes  Compression=   4.76     *\r\n*............................................................................*\r\n*Br    2 :vtx_x     : vtx_x[vtx_len]/F                                       *\r\n*Entries :   691422 : Total  Size=    4919576 bytes  File Size  =    1877942 *\r\n*Baskets :       44 : Basket Size=     574976 bytes  Compression=   2.62     *\r\n*............................................................................*\r\n*Br    3 :vtx_y     : vtx_y[vtx_len]/F                                       *\r\n*Entries :   691422 : Total  Size=    4919576 bytes  File Size  =    1915784 *\r\n*Baskets :       44 : Basket Size=     574976 bytes  Compression=   2.57     *\r\n*............................................................................*\r\n*Br    4 :vtx_z     : vtx_z[vtx_len]/F                                       *\r\n*Entries :   691422 : Total  Size=    4919576 bytes  File Size  =    2664929 *\r\n*Baskets :       44 : Basket Size=     574976 bytes  Compression=   1.85     *\r\n*............................................................................*\r\n```\r\nThere are branches like `evt_bxtype`, which have one value per event. And there are Branches with VLEN arrays, which contain a variable number of values per event.\r\n\r\nA typical use-case is to do something with the contents of a branch with VLEN arrays, but only for events which pass some condition on `evt_bxtype`. In ROOT, one does something like this:\r\n```\r\ntree->Draw(\"vtx_z\", \"evt_bxtype==3\")\r\n```\r\n\r\nWhen I try this with uproot, I find that JaggedArrays cannot be masked along the first dimension.\r\n\r\n```\r\nf = uproot.open(somefile)\r\ntree = f[\"tree\"]\r\nvtx_z = tree[\"vtx_z\"].array() # a JaggedArray\r\nevt_bxtype = tree[\"evt_bxtype\"].array() # normal array\r\n\r\nvtx_z[evt_bxtype == 3] # does not work\r\n```\r\nIs there a way to achieve this that I missed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/348", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/348/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/348/events", "html_url": "https://github.com/scikit-hep/uproot/issues/348", "id": 499291055, "node_id": "MDU6SXNzdWU0OTkyOTEwNTU=", "number": 348, "title": "uproot.pandas.iterate not working in python 2 (since #332)", "user": {"login": "stderr-enst", "id": 9086241, "node_id": "MDQ6VXNlcjkwODYyNDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9086241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stderr-enst", "html_url": "https://github.com/stderr-enst", "followers_url": "https://api.github.com/users/stderr-enst/followers", "following_url": "https://api.github.com/users/stderr-enst/following{/other_user}", "gists_url": "https://api.github.com/users/stderr-enst/gists{/gist_id}", "starred_url": "https://api.github.com/users/stderr-enst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stderr-enst/subscriptions", "organizations_url": "https://api.github.com/users/stderr-enst/orgs", "repos_url": "https://api.github.com/users/stderr-enst/repos", "events_url": "https://api.github.com/users/stderr-enst/events{/privacy}", "received_events_url": "https://api.github.com/users/stderr-enst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-27T07:45:36Z", "updated_at": "2019-09-27T15:12:45Z", "closed_at": "2019-09-27T15:12:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looks like the public attributes `start` & `stop` of `RangeIndex` were only added in [pandas 0.25](https://github.com/pandas-dev/pandas/commit/873e22ef4ac1de06a3a033567daa3cc8be39ac26) which is not available for python 2.\r\nThe corresponding change in uproot was introduced in #332 .\r\nI have a setup with pandas 0.24.2 where `uproot.pandas.iterate` throws:\r\n\r\n```AttributeError: 'RangeIndex' object has no attribute 'start'```\r\n\r\nbecause of this. Using `_start` and `_stop` is probably an easy fix?\r\n\r\nOut of curiosity: whats the general consensus, is uproot expected to support python 2 after the its phase out in 3 months? (I should probably just migrate :))", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/347", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/347/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/347/events", "html_url": "https://github.com/scikit-hep/uproot/issues/347", "id": 499173005, "node_id": "MDU6SXNzdWU0OTkxNzMwMDU=", "number": 347, "title": "TChain like behavior?", "user": {"login": "HDembinski", "id": 2631586, "node_id": "MDQ6VXNlcjI2MzE1ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HDembinski", "html_url": "https://github.com/HDembinski", "followers_url": "https://api.github.com/users/HDembinski/followers", "following_url": "https://api.github.com/users/HDembinski/following{/other_user}", "gists_url": "https://api.github.com/users/HDembinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/HDembinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HDembinski/subscriptions", "organizations_url": "https://api.github.com/users/HDembinski/orgs", "repos_url": "https://api.github.com/users/HDembinski/repos", "events_url": "https://api.github.com/users/HDembinski/events{/privacy}", "received_events_url": "https://api.github.com/users/HDembinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-27T00:22:50Z", "updated_at": "2019-09-27T14:24:18Z", "closed_at": "2019-09-27T14:24:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "tl;dr: It would be nice if the docs could elaborate a bit on how to best replace a TChain to process several files at once with uproot facilities. I found the note regarding lazyarrays, but I was wondering whether there is more.\r\n\r\nI wanted to process several files in a TChain-like way with uproot. From the reading the docs it was not clear to me how achieve this. It seems like uproot.open can only open one file. I found the lazyarray(s), which are great, but I would still like to know whether TChain-like processing of several files is possible with uproot or not.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/345", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/345/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/345/events", "html_url": "https://github.com/scikit-hep/uproot/issues/345", "id": 497625909, "node_id": "MDU6SXNzdWU0OTc2MjU5MDk=", "number": 345, "title": "root file, written with uproot, size issue", "user": {"login": "marinang", "id": 24250309, "node_id": "MDQ6VXNlcjI0MjUwMzA5", "avatar_url": "https://avatars3.githubusercontent.com/u/24250309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marinang", "html_url": "https://github.com/marinang", "followers_url": "https://api.github.com/users/marinang/followers", "following_url": "https://api.github.com/users/marinang/following{/other_user}", "gists_url": "https://api.github.com/users/marinang/gists{/gist_id}", "starred_url": "https://api.github.com/users/marinang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marinang/subscriptions", "organizations_url": "https://api.github.com/users/marinang/orgs", "repos_url": "https://api.github.com/users/marinang/repos", "events_url": "https://api.github.com/users/marinang/events{/privacy}", "received_events_url": "https://api.github.com/users/marinang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2019-09-24T11:24:18Z", "updated_at": "2019-10-06T07:40:08Z", "closed_at": "2019-10-05T03:59:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi,\r\n\r\nit seems that files written with uproot have a very large size. I tried to write a subset of a dataset (*less than 1%*) with less variables to another root file and the size of the latter is of the same order of magnitude as the size of the original root file.\r\n\r\nI tried to play by adding a compression as described in the README\r\n\r\n```python\r\ntree = uproot.newtree(branchdict, compression=uproot.LZ4(4))\r\n```\r\n\r\nand also to reduce the data type of the branches from float64 to float32. This does reduce the size of the output root file but it is still very large. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/341", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/341/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/341/events", "html_url": "https://github.com/scikit-hep/uproot/issues/341", "id": 495918472, "node_id": "MDU6SXNzdWU0OTU5MTg0NzI=", "number": 341, "title": "vector<uint_64> is read as jagged array of dtype uint32", "user": {"login": "DraTeots", "id": 4732545, "node_id": "MDQ6VXNlcjQ3MzI1NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4732545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DraTeots", "html_url": "https://github.com/DraTeots", "followers_url": "https://api.github.com/users/DraTeots/followers", "following_url": "https://api.github.com/users/DraTeots/following{/other_user}", "gists_url": "https://api.github.com/users/DraTeots/gists{/gist_id}", "starred_url": "https://api.github.com/users/DraTeots/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DraTeots/subscriptions", "organizations_url": "https://api.github.com/users/DraTeots/orgs", "repos_url": "https://api.github.com/users/DraTeots/repos", "events_url": "https://api.github.com/users/DraTeots/events{/privacy}", "received_events_url": "https://api.github.com/users/DraTeots/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-19T16:57:35Z", "updated_at": "2019-09-20T12:48:43Z", "closed_at": "2019-09-20T12:45:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\nI have a root file with \"events\" each of it having \r\n\r\n```c++\r\nstd::vector<uint64_t> hit_trk_id\r\n```\r\n\r\nWhen I open the file with root and print the branch info\r\n\r\n```\r\nroot [13] b->Print()\r\n*Br    0 :hit_trk_id : vector<unsigned long>                                 *\r\n*Entries :      100 : Total  Size=     161079 bytes  File Size  =      16628 *\r\n*Baskets :        6 : Basket Size=      32000 bytes  Compression=   9.66     *\r\n*............................................................................*\r\n```\r\n\r\nWhen I open it with uproot:\r\n\r\n```\r\nevents = uproot.open(\"data/g4e_test_herwig_100ev_2019-09.root\")['events']\r\nevents.show()\r\n```\r\nThe result:\r\n```\r\n...\r\nhit_trk_id                 TStreamerSTL               asjagged(asdtype('>u4'), 10)\r\n...\r\n```\r\nSo it is 32 bits and the data is kind of corrupted if read without an explicit interpretation:\r\n```python\r\nprint(events.array('hit_trk_id').flatten())   # flatten is for simplicity\r\n```\r\ngives\r\n```\r\narray([    0,  1021,     0, ..., 11801,     0, 11802], dtype=uint32)\r\n```\r\n(zeroes and dtype)\r\n\r\nThe workaround is something like:\r\n\r\n```python\r\nskip_bytes = 0\r\nif isinstance(events['hit_trk_id'], asjagged):\r\n    skip_bytes = asjagged.skipbytes\r\nevents['hit_trk_id'].array(asjagged(asdtype(np.uint64), skip_bytes))   # prints tree contents\r\n```\r\n\r\nBut I believe it is a bug. \r\nThe root file is attached. \r\n\r\nP.S. are skip_bytes always 10? \r\n\r\n\r\n[g4e_test_herwig_100ev_2019-09.zip](https://github.com/scikit-hep/uproot/files/3632337/g4e_test_herwig_100ev_2019-09.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/340", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/340/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/340/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/340/events", "html_url": "https://github.com/scikit-hep/uproot/issues/340", "id": 495636723, "node_id": "MDU6SXNzdWU0OTU2MzY3MjM=", "number": 340, "title": "Error reading with uproot root files, with TTree, written with uproot", "user": {"login": "marinang", "id": 24250309, "node_id": "MDQ6VXNlcjI0MjUwMzA5", "avatar_url": "https://avatars3.githubusercontent.com/u/24250309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marinang", "html_url": "https://github.com/marinang", "followers_url": "https://api.github.com/users/marinang/followers", "following_url": "https://api.github.com/users/marinang/following{/other_user}", "gists_url": "https://api.github.com/users/marinang/gists{/gist_id}", "starred_url": "https://api.github.com/users/marinang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marinang/subscriptions", "organizations_url": "https://api.github.com/users/marinang/orgs", "repos_url": "https://api.github.com/users/marinang/repos", "events_url": "https://api.github.com/users/marinang/events{/privacy}", "received_events_url": "https://api.github.com/users/marinang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2019-09-19T08:00:21Z", "updated_at": "2019-09-20T13:11:54Z", "closed_at": "2019-09-20T10:38:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi I tried the example in the README to write TTree in root file but when I try to read it back I get the following error.\r\n\r\n```\r\nIn [1]: import uproot\r\n\r\nIn [2]: import numpy as np\r\n\r\nIn [3]: with uproot.recreate(\"example.root\") as f:\r\n   ...:     f[\"t\"] = uproot.newtree({\"normal\": np.float64})\r\n   ...:     f[\"t\"].extend({\"normal\": np.random.normal(0, 1, 10000)})\r\n   ...:\r\n\r\nIn [4]: t = uproot.open(\"example.root\")[\"t\"]\r\n\r\nIn [5]: t\r\nOut[5]: <TTree b't' at 0x00010e1e50f0>\r\n\r\nIn [6]: t.arrays()\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-6-6502dc56ca9a> in <module>\r\n----> 1 t.arrays()\r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/tree.py in arrays(self, branches, outputtype, namedecode, entrystart, entrystop, flatten, flatname, awkwardlib, cache, basketcache, keycache, executor, blocking)\r\n    513\r\n    514         # start the job of filling the arrays\r\n--> 515         futures = [(branch.name if namedecode is None else branch.name.decode(namedecode), interpretation, branch.array(interpretation=interpretation, entrystart=entrystart, entrystop=entrystop, flatten=(flatten and not ispandas), awkwardlib=awkward, cache=cache, basketcache=basketcache, keycache=keycache, executor=executor, blocking=False)) for branch, interpretation in branches]\r\n    516\r\n    517         # make functions that wait for the filling job to be done and return the right outputtype\r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/tree.py in <listcomp>(.0)\r\n    513\r\n    514         # start the job of filling the arrays\r\n--> 515         futures = [(branch.name if namedecode is None else branch.name.decode(namedecode), interpretation, branch.array(interpretation=interpretation, entrystart=entrystart, entrystop=entrystop, flatten=(flatten and not ispandas), awkwardlib=awkward, cache=cache, basketcache=basketcache, keycache=keycache, executor=executor, blocking=False)) for branch, interpretation in branches]\r\n    516\r\n    517         # make functions that wait for the filling job to be done and return the right outputtype\r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/tree.py in array(self, interpretation, entrystart, entrystop, flatten, awkwardlib, cache, basketcache, keycache, executor, blocking)\r\n   1360             keycache = {}\r\n   1361\r\n-> 1362         basket_itemoffset = self._basket_itemoffset(interpretation, basketstart, basketstop, keycache)\r\n   1363         basket_entryoffset = self._basket_entryoffset(basketstart, basketstop)\r\n   1364\r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/tree.py in _basket_itemoffset(self, interpretation, basketstart, basketstop, keycache)\r\n   1315         for j, key in enumerate(self._threadsafe_iterate_keys(keycache, True, basketstart, basketstop)):\r\n   1316             i = basketstart + j\r\n-> 1317             numitems = interpretation.numitems(key.border, self.basket_numentries(i))\r\n   1318             basket_itemoffset.append(basket_itemoffset[-1] + numitems)\r\n   1319         return basket_itemoffset\r\n\r\n/usr/local/lib/python3.7/site-packages/uproot/interp/numerical.py in numitems(self, numbytes, numentries)\r\n    150         dtype, shape = _dtypeshape(self.fromdtype)\r\n    151         quotient, remainder = divmod(numbytes, dtype.itemsize)\r\n--> 152         assert remainder == 0\r\n    153         return quotient\r\n    154\r\n\r\nAssertionError:\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/339", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/339/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/339/events", "html_url": "https://github.com/scikit-hep/uproot/issues/339", "id": 495181502, "node_id": "MDU6SXNzdWU0OTUxODE1MDI=", "number": 339, "title": "Segmentation Fault (Crash) in `tests/test_write.py` while testing", "user": {"login": "kgizdov", "id": 3164953, "node_id": "MDQ6VXNlcjMxNjQ5NTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3164953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kgizdov", "html_url": "https://github.com/kgizdov", "followers_url": "https://api.github.com/users/kgizdov/followers", "following_url": "https://api.github.com/users/kgizdov/following{/other_user}", "gists_url": "https://api.github.com/users/kgizdov/gists{/gist_id}", "starred_url": "https://api.github.com/users/kgizdov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kgizdov/subscriptions", "organizations_url": "https://api.github.com/users/kgizdov/orgs", "repos_url": "https://api.github.com/users/kgizdov/repos", "events_url": "https://api.github.com/users/kgizdov/events{/privacy}", "received_events_url": "https://api.github.com/users/kgizdov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1017633619, "node_id": "MDU6TGFiZWwxMDE3NjMzNjE5", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/could-not-reproduce", "name": "could-not-reproduce", "color": "e08040", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-09-18T12:02:15Z", "updated_at": "2019-09-19T14:29:24Z", "closed_at": "2019-09-18T16:33:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In `python-uproot` version `3.10.0` the tests crash with the following error:\r\n```python\r\nrunning pytest\r\nrunning egg_info\r\ncreating uproot.egg-info\r\nwriting uproot.egg-info/PKG-INFO\r\nwriting dependency_links to uproot.egg-info/dependency_links.txt\r\nwriting requirements to uproot.egg-info/requires.txt\r\nwriting top-level names to uproot.egg-info/top_level.txt\r\nwriting manifest file 'uproot.egg-info/SOURCES.txt'\r\nreading manifest file 'uproot.egg-info/SOURCES.txt'\r\nwriting manifest file 'uproot.egg-info/SOURCES.txt'\r\nrunning build_ext\r\n============================================================================= test session starts =============================================================================\r\nplatform linux -- Python 3.7.4, pytest-5.1.2, py-1.8.0, pluggy-0.12.0\r\nrootdir: /home/gizdov/builds/python-uproot/src/uproot-3.10.0\r\ncollected 195 items                                                                                                                                                           \r\n\r\ntests/test_cache.py ....                                                                                                                                                [  2%]\r\ntests/test_compression.py .....                                                                                                                                         [  4%]\r\ntests/test_http.py .....                                                                                                                                                [  7%]\r\ntests/test_issues.py .....s.....................                                                                                                                        [ 21%]\r\ntests/test_jagged.py ...                                                                                                                                                [ 22%]\r\ntests/test_stlvector.py .......                                                                                                                                         [ 26%]\r\ntests/test_tree.py ...................................                                                                                                                  [ 44%]\r\ntests/test_versions.py .............                                                                                                                                    [ 50%]\r\ntests/test_write.py .........FFF\r\n *** Break *** segmentation violation\r\n\r\n\r\n\r\n===========================================================\r\nThere was a crash.\r\nThis is the entire stack trace of all threads:\r\n===========================================================\r\n\r\nThread 2 (Thread 0x7f4180f50700 (LWP 7099)):\r\n#0  0x00007f41878087ca in pthread_cond_timedwait\r\n\r\nGLIBC_2.3.2 () from /usr/lib/libpthread.so.0\r\n#1  0x00007f4187909584 in PyEval_RestoreThread () from /usr/lib/libpython3.7m.so.1.0\r\n#2  0x00007f41879da48d in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#3  0x00007f41879204e3 in _PyMethodDef_RawFastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#4  0x00007f4187920714 in _PyCFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#5  0x00007f41879522ec in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#6  0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#7  0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#8  0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#9  0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#10 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#11 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#12 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#13 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#14 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#15 0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#16 0x00007f4187915ce8 in _PyObject_Call_Prepend () from /usr/lib/libpython3.7m.so.1.0\r\n#17 0x00007f41879423be in PyObject_Call () from /usr/lib/libpython3.7m.so.1.0\r\n#18 0x00007f4187a1e68a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#19 0x00007f4187997ad5 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#20 0x00007f418780257f in start_thread () from /usr/lib/libpthread.so.0\r\n#21 0x00007f4187c5e0e3 in clone () from /usr/lib/libc.so.6\r\n\r\nThread 1 (Thread 0x7f41876a8680 (LWP 7067)):\r\n#0  0x00007f4187c2b0a6 in waitpid () from /usr/lib/libc.so.6\r\n#1  0x00007f4187ba95e7 in do_system () from /usr/lib/libc.so.6\r\n#2  0x00007f417367766b in TUnixSystem::StackTrace() () from /usr/lib/root/libCore.so\r\n#3  0x00007f417367425e in TUnixSystem::DispatchSignals(ESignals) () from /usr/lib/root/libCore.so\r\n#4  <signal handler called>\r\n#5  0x00007f41735d6af0 in TList::FindObject(char const*) const () from /usr/lib/root/libCore.so\r\n#6  0x00007f41735d485b in THashTable::FindObject(char const*) const () from /usr/lib/root/libCore.so\r\n#7  0x00007f41735d2842 in THashList::FindObject(char const*) const () from /usr/lib/root/libCore.so\r\n#8  0x00007f41738b4a2c in TDirectoryFile::AppendKey(TKey*) () from /usr/lib/root/libRIO.so\r\n#9  0x00007f4173901ded in TKey::TKey(TObject const*, char const*, int, TDirectory*) () from /usr/lib/root/libRIO.so\r\n#10 0x00007f41738d43d0 in TFile::WriteStreamerInfo() () from /usr/lib/root/libRIO.so\r\n#11 0x00007f41738d311e in TFile::Close(char const*) () from /usr/lib/root/libRIO.so\r\n#12 0x00007f41738d3713 in TFile::~TFile() () from /usr/lib/root/libRIO.so\r\n#13 0x00007f41738d39fa in TFile::~TFile() () from /usr/lib/root/libRIO.so\r\n#14 0x00007f4173619e60 in TClass::Destructor(void*, bool) () from /usr/lib/root/libCore.so\r\n#15 0x00007f4173d9fb1d in PyROOT::op_dealloc_nofree(PyROOT::ObjectProxy*) () from /usr/lib/python3.7/site-packages/libPyROOT.so\r\n#16 0x00007f4173d9fc5a in ?? () from /usr/lib/python3.7/site-packages/libPyROOT.so\r\n#17 0x00007f418797358c in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#18 0x00007f41879077ff in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#19 0x00007f41878fd559 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#20 0x00007f4187995eab in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#21 0x00007f418790b10a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#22 0x00007f41879a288e in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#23 0x00007f418790b67e in _PyObject_GC_Malloc () from /usr/lib/libpython3.7m.so.1.0\r\n#24 0x00007f418790b6ae in _PyObject_GC_New () from /usr/lib/libpython3.7m.so.1.0\r\n#25 0x00007f4187927cc1 in _PyObjectDict_SetItem () from /usr/lib/libpython3.7m.so.1.0\r\n#26 0x00007f418796a4a3 in _PyObject_GenericSetAttrWithDict () from /usr/lib/libpython3.7m.so.1.0\r\n#27 0x00007f418796a6f6 in PyObject_SetAttr () from /usr/lib/libpython3.7m.so.1.0\r\n#28 0x00007f4187a10f99 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#29 0x00007f4187a12c0c in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#30 0x00007f41879a898a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#31 0x00007f4187a12252 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#32 0x00007f41879a898a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#33 0x00007f4187a146a2 in PyAST_mod2obj () from /usr/lib/libpython3.7m.so.1.0\r\n#34 0x00007f4187a1554a in Py_CompileStringObject () from /usr/lib/libpython3.7m.so.1.0\r\n#35 0x00007f4187a156d2 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#36 0x00007f4187920478 in _PyMethodDef_RawFastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#37 0x00007f4187920714 in _PyCFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#38 0x00007f41879522ec in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#39 0x00007f4187987ed7 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#40 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#41 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#42 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#43 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#44 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#45 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#46 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#47 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#48 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#49 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#50 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#51 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#52 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#53 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#54 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#55 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#56 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#57 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#58 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#59 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#60 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#61 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#62 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#63 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#64 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#65 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#66 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#67 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#68 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#69 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#70 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#71 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#72 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#73 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#74 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#75 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#76 0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#77 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#78 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#79 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#80 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#81 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#82 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#83 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#84 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#85 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#86 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#87 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#88 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#89 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#90 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#91 0x00007f4187915ce8 in _PyObject_Call_Prepend () from /usr/lib/libpython3.7m.so.1.0\r\n#92 0x00007f41879d728a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#93 0x00007f418795131c in _PyObject_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#94 0x00007f4187952362 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#95 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#96 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#97 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#98 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#99 0x00007f4187987ed7 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#100 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#101 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#102 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#103 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#104 0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#105 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#106 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#107 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#108 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#109 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#110 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#111 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#112 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#113 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#114 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#115 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#116 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#117 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#118 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#119 0x00007f4187915ce8 in _PyObject_Call_Prepend () from /usr/lib/libpython3.7m.so.1.0\r\n#120 0x00007f41879d728a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#121 0x00007f418795131c in _PyObject_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#122 0x00007f4187952362 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#123 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#124 0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#125 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#126 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#127 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#128 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#129 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#130 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#131 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#132 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#133 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#134 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#135 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#136 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#137 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#138 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#139 0x00007f4187915ce8 in _PyObject_Call_Prepend () from /usr/lib/libpython3.7m.so.1.0\r\n#140 0x00007f41879d728a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#141 0x00007f418795131c in _PyObject_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#142 0x00007f4187952362 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#143 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#144 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#145 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#146 0x00007f4187987ed7 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#147 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#148 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#149 0x00007f4187987ed7 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#150 0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#151 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#152 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#153 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#154 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#155 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#156 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#157 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#158 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#159 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#160 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#161 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#162 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#163 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#164 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#165 0x00007f4187915ce8 in _PyObject_Call_Prepend () from /usr/lib/libpython3.7m.so.1.0\r\n#166 0x00007f41879d728a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#167 0x00007f418795131c in _PyObject_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#168 0x00007f4187952362 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#169 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#170 0x00007f41879cd372 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#171 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#172 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#173 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#174 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#175 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#176 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#177 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#178 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#179 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#180 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#181 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#182 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#183 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#184 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#185 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#186 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#187 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#188 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#189 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#190 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#191 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#192 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#193 0x00007f418794152a in PyEval_EvalCodeEx () from /usr/lib/libpython3.7m.so.1.0\r\n#194 0x00007f41879d109c in PyEval_EvalCode () from /usr/lib/libpython3.7m.so.1.0\r\n#195 0x00007f4187a15815 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#196 0x00007f4187a15d9b in PyRun_FileExFlags () from /usr/lib/libpython3.7m.so.1.0\r\n#197 0x00007f4187a1c8a7 in PyRun_SimpleFileExFlags () from /usr/lib/libpython3.7m.so.1.0\r\n#198 0x00007f4187a1eaa8 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#199 0x00007f4187a1ec5c in _Py_UnixMain () from /usr/lib/libpython3.7m.so.1.0\r\n#200 0x00007f4187b88ee3 in __libc_start_main () from /usr/lib/libc.so.6\r\n#201 0x000055728702f05e in _start ()\r\n===========================================================\r\n\r\n\r\nThe lines below might hint at the cause of the crash.\r\nYou may get help by asking at the ROOT forum http://root.cern.ch/forum\r\nOnly if you are really convinced it is a bug in ROOT then please submit a\r\nreport at http://root.cern.ch/bugs Please post the ENTIRE stack trace\r\nfrom above as an attachment in addition to anything else\r\nthat might help us fixing this issue.\r\n===========================================================\r\n#5  0x00007f41735d6af0 in TList::FindObject(char const*) const () from /usr/lib/root/libCore.so\r\n#6  0x00007f41735d485b in THashTable::FindObject(char const*) const () from /usr/lib/root/libCore.so\r\n#7  0x00007f41735d2842 in THashList::FindObject(char const*) const () from /usr/lib/root/libCore.so\r\n#8  0x00007f41738b4a2c in TDirectoryFile::AppendKey(TKey*) () from /usr/lib/root/libRIO.so\r\n#9  0x00007f4173901ded in TKey::TKey(TObject const*, char const*, int, TDirectory*) () from /usr/lib/root/libRIO.so\r\n#10 0x00007f41738d43d0 in TFile::WriteStreamerInfo() () from /usr/lib/root/libRIO.so\r\n#11 0x00007f41738d311e in TFile::Close(char const*) () from /usr/lib/root/libRIO.so\r\n#12 0x00007f41738d3713 in TFile::~TFile() () from /usr/lib/root/libRIO.so\r\n#13 0x00007f41738d39fa in TFile::~TFile() () from /usr/lib/root/libRIO.so\r\n#14 0x00007f4173619e60 in TClass::Destructor(void*, bool) () from /usr/lib/root/libCore.so\r\n#15 0x00007f4173d9fb1d in PyROOT::op_dealloc_nofree(PyROOT::ObjectProxy*) () from /usr/lib/python3.7/site-packages/libPyROOT.so\r\n#16 0x00007f4173d9fc5a in ?? () from /usr/lib/python3.7/site-packages/libPyROOT.so\r\n#17 0x00007f418797358c in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#18 0x00007f41879077ff in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#19 0x00007f41878fd559 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#20 0x00007f4187995eab in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#21 0x00007f418790b10a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#22 0x00007f41879a288e in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#23 0x00007f418790b67e in _PyObject_GC_Malloc () from /usr/lib/libpython3.7m.so.1.0\r\n#24 0x00007f418790b6ae in _PyObject_GC_New () from /usr/lib/libpython3.7m.so.1.0\r\n#25 0x00007f4187927cc1 in _PyObjectDict_SetItem () from /usr/lib/libpython3.7m.so.1.0\r\n#26 0x00007f418796a4a3 in _PyObject_GenericSetAttrWithDict () from /usr/lib/libpython3.7m.so.1.0\r\n#27 0x00007f418796a6f6 in PyObject_SetAttr () from /usr/lib/libpython3.7m.so.1.0\r\n#28 0x00007f4187a10f99 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#29 0x00007f4187a12c0c in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#30 0x00007f41879a898a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#31 0x00007f4187a12252 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#32 0x00007f41879a898a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#33 0x00007f4187a146a2 in PyAST_mod2obj () from /usr/lib/libpython3.7m.so.1.0\r\n#34 0x00007f4187a1554a in Py_CompileStringObject () from /usr/lib/libpython3.7m.so.1.0\r\n#35 0x00007f4187a156d2 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#36 0x00007f4187920478 in _PyMethodDef_RawFastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#37 0x00007f4187920714 in _PyCFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#38 0x00007f41879522ec in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#39 0x00007f4187987ed7 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#40 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#41 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#42 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#43 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#44 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#45 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#46 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#47 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#48 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#49 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#50 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#51 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#52 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#53 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#54 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#55 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#56 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#57 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#58 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#59 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#60 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#61 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#62 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#63 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#64 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#65 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#66 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#67 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#68 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#69 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#70 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#71 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#72 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#73 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#74 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#75 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#76 0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#77 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#78 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#79 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#80 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#81 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#82 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#83 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#84 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#85 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#86 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#87 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#88 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#89 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#90 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#91 0x00007f4187915ce8 in _PyObject_Call_Prepend () from /usr/lib/libpython3.7m.so.1.0\r\n#92 0x00007f41879d728a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#93 0x00007f418795131c in _PyObject_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#94 0x00007f4187952362 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#95 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#96 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#97 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#98 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#99 0x00007f4187987ed7 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#100 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#101 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#102 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#103 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#104 0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#105 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#106 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#107 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#108 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#109 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#110 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#111 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#112 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#113 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#114 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#115 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#116 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#117 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#118 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#119 0x00007f4187915ce8 in _PyObject_Call_Prepend () from /usr/lib/libpython3.7m.so.1.0\r\n#120 0x00007f41879d728a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#121 0x00007f418795131c in _PyObject_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#122 0x00007f4187952362 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#123 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#124 0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#125 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#126 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#127 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#128 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#129 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#130 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#131 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#132 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#133 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#134 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#135 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#136 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#137 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#138 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#139 0x00007f4187915ce8 in _PyObject_Call_Prepend () from /usr/lib/libpython3.7m.so.1.0\r\n#140 0x00007f41879d728a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#141 0x00007f418795131c in _PyObject_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#142 0x00007f4187952362 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#143 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#144 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#145 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#146 0x00007f4187987ed7 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#147 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#148 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#149 0x00007f4187987ed7 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#150 0x00007f4187941cab in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#151 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#152 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#153 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#154 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#155 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#156 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#157 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#158 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#159 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#160 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#161 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#162 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#163 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#164 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#165 0x00007f4187915ce8 in _PyObject_Call_Prepend () from /usr/lib/libpython3.7m.so.1.0\r\n#166 0x00007f41879d728a in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#167 0x00007f418795131c in _PyObject_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#168 0x00007f4187952362 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#169 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#170 0x00007f41879cd372 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#171 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#172 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#173 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#174 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#175 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#176 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#177 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#178 0x00007f418798c40a in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#179 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#180 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#181 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#182 0x00007f4187941633 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#183 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#184 0x00007f4187987f70 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#185 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#186 0x00007f4187941e7f in _PyFunction_FastCallDict () from /usr/lib/libpython3.7m.so.1.0\r\n#187 0x00007f418798948e in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#188 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#189 0x00007f41879417d3 in _PyFunction_FastCallKeywords () from /usr/lib/libpython3.7m.so.1.0\r\n#190 0x00007f41879521d0 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#191 0x00007f4187988b78 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.7m.so.1.0\r\n#192 0x00007f4187940768 in _PyEval_EvalCodeWithName () from /usr/lib/libpython3.7m.so.1.0\r\n#193 0x00007f418794152a in PyEval_EvalCodeEx () from /usr/lib/libpython3.7m.so.1.0\r\n#194 0x00007f41879d109c in PyEval_EvalCode () from /usr/lib/libpython3.7m.so.1.0\r\n#195 0x00007f4187a15815 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#196 0x00007f4187a15d9b in PyRun_FileExFlags () from /usr/lib/libpython3.7m.so.1.0\r\n#197 0x00007f4187a1c8a7 in PyRun_SimpleFileExFlags () from /usr/lib/libpython3.7m.so.1.0\r\n#198 0x00007f4187a1eaa8 in ?? () from /usr/lib/libpython3.7m.so.1.0\r\n#199 0x00007f4187a1ec5c in _Py_UnixMain () from /usr/lib/libpython3.7m.so.1.0\r\n#200 0x00007f4187b88ee3 in __libc_start_main () from /usr/lib/libc.so.6\r\n#201 0x000055728702f05e in _start ()\r\n===========================================================\r\n\r\n\r\n/home/gizdov/builds/python-uproot/PKGBUILD: line 40:  7067 Segmentation fault      (core dumped) python setup.py pytest\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/338", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/338/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/338/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/338/events", "html_url": "https://github.com/scikit-hep/uproot/issues/338", "id": 494648421, "node_id": "MDU6SXNzdWU0OTQ2NDg0MjE=", "number": 338, "title": "Working with std::vector<std::string>", "user": {"login": "DraTeots", "id": 4732545, "node_id": "MDQ6VXNlcjQ3MzI1NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4732545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DraTeots", "html_url": "https://github.com/DraTeots", "followers_url": "https://api.github.com/users/DraTeots/followers", "following_url": "https://api.github.com/users/DraTeots/following{/other_user}", "gists_url": "https://api.github.com/users/DraTeots/gists{/gist_id}", "starred_url": "https://api.github.com/users/DraTeots/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DraTeots/subscriptions", "organizations_url": "https://api.github.com/users/DraTeots/orgs", "repos_url": "https://api.github.com/users/DraTeots/repos", "events_url": "https://api.github.com/users/DraTeots/events{/privacy}", "received_events_url": "https://api.github.com/users/DraTeots/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-17T14:09:58Z", "updated_at": "2019-09-17T14:38:30Z", "closed_at": "2019-09-17T14:29:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Before I write that things below, thank you very much for your uproot effort!\r\n\r\nNow working with `std::vector<std::string>` seems a bit difficult. \r\n\r\nAs an example I have a ROOT file where each event has hits information. Something like:\r\n\r\n```c++\r\nvector<double> hit_x\r\nvector<double> hit_y\r\nvector<double> hit_z\r\nvector<string> hit_vol_name\r\n```\r\nWhile all vector<double> work like a charm, the interpretation of `hit_vol_name` is \r\n\r\n```\r\nhit_vol_name        TStreamerSTL               asgenobj(STLVector(STLString()))\r\nhit_x                      TStreamerSTL               asjagged(asdtype('>f8'), 10)\r\nhit_y                      TStreamerSTL               asjagged(asdtype('>f8'), 10)\r\nhit_z                      TStreamerSTL               asjagged(asdtype('>f8'), 10)\r\n```\r\n\r\nAnd it causes problems, when converted to pandas, for example:\r\n\r\n![Screenshot from 2019-09-17 10-00-10](https://user-images.githubusercontent.com/4732545/65048473-2db5eb80-d932-11e9-8747-e15b010672cc.png)\r\n\r\nAnd then I have to do the first round of conversions:\r\n\r\n```python\r\nfrom awkward import JaggedArray\r\nimport awkward\r\na = JaggedArray.fromiter(file['events']['hit_vol_name'].array())\r\n```\r\nBut then it is byte strings, so like in #228 one has to do something like:\r\n\r\n```python\r\nimport numpy as np\r\nb = a.flatten().regular().astype('U')\r\n```\r\nIn this case flattening was Ok, but... \r\n\r\nIt seems both inefficient and inconvenient. Or are there better workarounds? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/336", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/336/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/336/events", "html_url": "https://github.com/scikit-hep/uproot/issues/336", "id": 494105673, "node_id": "MDU6SXNzdWU0OTQxMDU2NzM=", "number": 336, "title": "append should take a dictionary of numbers, not arrays", "user": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-09-16T14:59:52Z", "updated_at": "2019-09-20T12:08:26Z", "closed_at": "2019-09-20T12:08:26Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/334", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/334/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/334/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/334/events", "html_url": "https://github.com/scikit-hep/uproot/issues/334", "id": 494105605, "node_id": "MDU6SXNzdWU0OTQxMDU2MDU=", "number": 334, "title": "README - Add TTree writing documentation", "user": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-09-16T14:59:46Z", "updated_at": "2019-09-20T10:38:01Z", "closed_at": "2019-09-20T10:38:01Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/333", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/333/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/333/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/333/events", "html_url": "https://github.com/scikit-hep/uproot/issues/333", "id": 491176754, "node_id": "MDU6SXNzdWU0OTExNzY3NTQ=", "number": 333, "title": "Unable to compress data larger than 2^24 bytes", "user": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687142269, "node_id": "MDU6TGFiZWw2ODcxNDIyNjk=", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}, {"id": 1063701062, "node_id": "MDU6TGFiZWwxMDYzNzAxMDYy", "url": "https://api.github.com/repos/scikit-hep/uproot/labels/writing-improvements", "name": "writing-improvements", "color": "1d76db", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reikdas", "id": 11775615, "node_id": "MDQ6VXNlcjExNzc1NjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/11775615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reikdas", "html_url": "https://github.com/reikdas", "followers_url": "https://api.github.com/users/reikdas/followers", "following_url": "https://api.github.com/users/reikdas/following{/other_user}", "gists_url": "https://api.github.com/users/reikdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/reikdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reikdas/subscriptions", "organizations_url": "https://api.github.com/users/reikdas/orgs", "repos_url": "https://api.github.com/users/reikdas/repos", "events_url": "https://api.github.com/users/reikdas/events{/privacy}", "received_events_url": "https://api.github.com/users/reikdas/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-09-09T15:44:22Z", "updated_at": "2019-12-20T12:05:39Z", "closed_at": "2019-12-20T12:05:39Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Data corresponds to individual objects like TTree, TH and each basket of a TTree.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/331", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/331/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/331/events", "html_url": "https://github.com/scikit-hep/uproot/issues/331", "id": 489950909, "node_id": "MDU6SXNzdWU0ODk5NTA5MDk=", "number": 331, "title": "AttributeError when using `uproot.pandas.iterate`.", "user": {"login": "marinang", "id": 24250309, "node_id": "MDQ6VXNlcjI0MjUwMzA5", "avatar_url": "https://avatars3.githubusercontent.com/u/24250309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marinang", "html_url": "https://github.com/marinang", "followers_url": "https://api.github.com/users/marinang/followers", "following_url": "https://api.github.com/users/marinang/following{/other_user}", "gists_url": "https://api.github.com/users/marinang/gists{/gist_id}", "starred_url": "https://api.github.com/users/marinang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marinang/subscriptions", "organizations_url": "https://api.github.com/users/marinang/orgs", "repos_url": "https://api.github.com/users/marinang/repos", "events_url": "https://api.github.com/users/marinang/events{/privacy}", "received_events_url": "https://api.github.com/users/marinang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-05T19:16:17Z", "updated_at": "2019-09-06T23:06:31Z", "closed_at": "2019-09-06T23:06:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi I get the following error when doing\r\n\r\n```python\r\nfor df in uproot.pandas.iterate(files, \"ntuple/DecayTree\",\r\n    namedecode=\"utf-8\", branches=branches):\r\n```\r\n\r\n```python\r\nFile \"/afs/cern.ch/work/m/mmarinan/anaconda3/envs/analysis/lib/python3.7/site-packages/uproot/tree.py\", line 126, in iterate\r\n    arrays.index._start += globalentrystart\r\nAttributeError: can't set attribute\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/uproot/issues/329", "repository_url": "https://api.github.com/repos/scikit-hep/uproot", "labels_url": "https://api.github.com/repos/scikit-hep/uproot/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/uproot/issues/329/comments", "events_url": "https://api.github.com/repos/scikit-hep/uproot/issues/329/events", "html_url": "https://github.com/scikit-hep/uproot/issues/329", "id": 489725528, "node_id": "MDU6SXNzdWU0ODk3MjU1Mjg=", "number": 329, "title": "Issues reading some TRef arrays", "user": {"login": "HenryDayHall", "id": 12996763, "node_id": "MDQ6VXNlcjEyOTk2NzYz", "avatar_url": "https://avatars3.githubusercontent.com/u/12996763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HenryDayHall", "html_url": "https://github.com/HenryDayHall", "followers_url": "https://api.github.com/users/HenryDayHall/followers", "following_url": "https://api.github.com/users/HenryDayHall/following{/other_user}", "gists_url": "https://api.github.com/users/HenryDayHall/gists{/gist_id}", "starred_url": "https://api.github.com/users/HenryDayHall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HenryDayHall/subscriptions", "organizations_url": "https://api.github.com/users/HenryDayHall/orgs", "repos_url": "https://api.github.com/users/HenryDayHall/repos", "events_url": "https://api.github.com/users/HenryDayHall/events{/privacy}", "received_events_url": "https://api.github.com/users/HenryDayHall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-05T12:40:02Z", "updated_at": "2019-09-05T15:11:59Z", "closed_at": "2019-09-05T15:11:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "To start with thank you so much for implementing TRef reading, it's been amazing. \r\nI have almost finished refactoring to get rid of all my previous work arounds.\r\n\r\nOne thing that doesn't quite work yet is the TRefs that appear in Towers.\r\nOne Tower is created by the energy deposits of multiple particles, so each tower gets a list of references (might be a TRefArray object, not quite sure...).\r\n\r\nIn the same root file as last time (https://mega.nz/#F!afB2SSwC!3C8bp5xY_d01VvXmkh1nJQ);\r\nevent_n|tower_n|particle_n\r\n0|0|[1413, 1417, 1470, 1570]\r\n0|1|[1446]\r\n0|2|[1571]\r\n0|3|[1763]\r\n0|4|[1568]\r\n...\r\nAs you can see the first tower is linked to 4 particles.\r\n\r\nA minimal broken example of this would be;\r\n```\r\nimport uproot\r\nfile_name = \"/path/to/h1bBatch2.root\"\r\nroot_file = uproot.open(file_name)['Delphes']\r\nproblem_array = root_file.array('Tower.Particles')\r\nprint(problem_array)  # expected a list of TRef objects. Possibly a TRefArray?\r\n# error! see below\r\n```\r\nThe error message I get from this is at the bottom (but I'm not sure how informative it is).\r\n\r\nThanks again for all your work on this.\r\n- Henry\r\n\r\nP.S. the error message;\r\n```\r\nTraceback (most recent call last):\r\n  File \"minimal_error.py\", line 5, in <module>\r\n    print(problem_array)  # expected a list of TRef objects. Possibly a TRefArray?\r\n  File \"/usr/local/lib/python3.6/dist-packages/awkward/array/base.py\", line 103, in __str__\r\n    return \"[{0} ... {1}]\".format(\" \".join(self._util_arraystr(x) for x in first), \" \".join(self._util_arraystr(x) for x in last))\r\n  File \"/usr/local/lib/python3.6/dist-packages/awkward/array/base.py\", line 103, in <genexpr>\r\n    return \"[{0} ... {1}]\".format(\" \".join(self._util_arraystr(x) for x in first), \" \".join(self._util_arraystr(x) for x in last))\r\n  File \"/usr/local/lib/python3.6/dist-packages/awkward/array/objects.py\", line 178, in __iter__\r\n    yield self.generator(x, *self._args, **self._kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/interp/objects.py\", line 298, in __call__\r\n    return self.cls.read(source, cursor, self.context, None)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/interp/objects.py\", line 28, in read\r\n    out.append(self.cls.read(source, cursor, context, parent))\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/rootio.py\", line 867, in read\r\n    out = cls._readinto(out, source, cursor, context, parent)\r\n  File \"<generated from TStreamerInfo b'TRefArray' at 0x7fe2004b4b00>\", line 29, in _readinto\r\n  File \"<generated from TStreamerInfo b'TSeqCollection' at 0x7fe200497eb8>\", line 25, in _readinto\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/rootio.py\", line 1418, in read\r\n    out = cls._readinto(out, source, cursor, context, parent)\r\n  File \"/usr/local/lib/python3.6/dist-packages/uproot/rootio.py\", line 1428, in _readinto\r\n    raise TypeError(\"cannot read objects of type {0} and cannot even skip over this one (returning Undefined) because its size is not known\\n  in file: {1}\".format(\"???\" if self._classname is None else self._classname.decode(\"ascii\"), context.sourcepath))\r\nTypeError: cannot read objects of type ??? and cannot even skip over this one (returning Undefined) because its size is not known\r\n  in file: /home/henry/lazy/dataset2/h1bBatch2.root\r\n```\r\n ", "performed_via_github_app": null, "score": 1.0}]}