{"total_count": 272, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pyeve/cerberus/issues/549", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/549/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/549/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/549/events", "html_url": "https://github.com/pyeve/cerberus/issues/549", "id": 643955249, "node_id": "MDU6SXNzdWU2NDM5NTUyNDk=", "number": 549, "title": "Custom error handling/Error readability support with Cerberus", "user": {"login": "Chetana27", "id": 9020464, "node_id": "MDQ6VXNlcjkwMjA0NjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/9020464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chetana27", "html_url": "https://github.com/Chetana27", "followers_url": "https://api.github.com/users/Chetana27/followers", "following_url": "https://api.github.com/users/Chetana27/following{/other_user}", "gists_url": "https://api.github.com/users/Chetana27/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chetana27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chetana27/subscriptions", "organizations_url": "https://api.github.com/users/Chetana27/orgs", "repos_url": "https://api.github.com/users/Chetana27/repos", "events_url": "https://api.github.com/users/Chetana27/events{/privacy}", "received_events_url": "https://api.github.com/users/Chetana27/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-23T15:51:55Z", "updated_at": "2020-06-27T20:03:08Z", "closed_at": "2020-06-27T20:03:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: \u2026 **1.3.2**\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\nError readability/ Human readability needs to be enhanced for better debuggability in Cerberus\r\n----\r\n\r\n#### Bug report / Feature request\r\nWe are coming up with a Yaml validation tool. Even with custom error messages, the entire field gets printed which is not required/easy to debug the issues. Is there any way in which this can be achieved? How do we add simple error handling messages without any additional fields/arguments? If the feature is already present/has a workaround, kindly provide a couple of examples.\r\n\r\nThe problem arises when the input is a complex nested dictionary and we would not want the entire dict to be printed in the error msg.\r\n\r\nEg: 'abc_variables': ['none or more than one rule validate',\r\n                    {'oneof definition 0': ['must be of string type'],\r\n                     'oneof definition 1': [{'ab - addpath_policy': ['value '\r\n                                                                     'does not '\r\n                                                                     'match '\r\n                                                                     'regex '\r\n                                                                     \"'[a-zA-Z0-9-_]+'\"]}],\r\n                     'oneof definition 2': ['must be of list type']}]}\r\n\r\n\r\nerror(field, \" some msg \") <<< can this be modified to just present the human readable errors (custom messages without the fields - similar to an exception)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/548", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/548/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/548/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/548/events", "html_url": "https://github.com/pyeve/cerberus/issues/548", "id": 639041439, "node_id": "MDU6SXNzdWU2MzkwNDE0Mzk=", "number": 548, "title": "unknown rule: propertyschema", "user": {"login": "sakitA", "id": 5094655, "node_id": "MDQ6VXNlcjUwOTQ2NTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5094655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sakitA", "html_url": "https://github.com/sakitA", "followers_url": "https://api.github.com/users/sakitA/followers", "following_url": "https://api.github.com/users/sakitA/following{/other_user}", "gists_url": "https://api.github.com/users/sakitA/gists{/gist_id}", "starred_url": "https://api.github.com/users/sakitA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sakitA/subscriptions", "organizations_url": "https://api.github.com/users/sakitA/orgs", "repos_url": "https://api.github.com/users/sakitA/repos", "events_url": "https://api.github.com/users/sakitA/events{/privacy}", "received_events_url": "https://api.github.com/users/sakitA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-15T18:10:31Z", "updated_at": "2020-06-19T02:09:04Z", "closed_at": "2020-06-17T18:48:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "used version: 1.3.2\r\n\r\nthere is no `propertyschema` rule instead has `keyschema`. I don't know this a bug or documentation error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/546", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/546/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/546/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/546/events", "html_url": "https://github.com/pyeve/cerberus/issues/546", "id": 635820229, "node_id": "MDU6SXNzdWU2MzU4MjAyMjk=", "number": 546, "title": "default value is not set when the parent dict node is not specified", "user": {"login": "thiagocrepaldi", "id": 5469809, "node_id": "MDQ6VXNlcjU0Njk4MDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5469809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagocrepaldi", "html_url": "https://github.com/thiagocrepaldi", "followers_url": "https://api.github.com/users/thiagocrepaldi/followers", "following_url": "https://api.github.com/users/thiagocrepaldi/following{/other_user}", "gists_url": "https://api.github.com/users/thiagocrepaldi/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagocrepaldi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagocrepaldi/subscriptions", "organizations_url": "https://api.github.com/users/thiagocrepaldi/orgs", "repos_url": "https://api.github.com/users/thiagocrepaldi/repos", "events_url": "https://api.github.com/users/thiagocrepaldi/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagocrepaldi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-09T23:27:16Z", "updated_at": "2020-06-27T20:00:45Z", "closed_at": "2020-06-27T20:00:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nUsed Cerberus version / latest commit: 1.3.2\r\n\r\n- [N] I have the capacity to improve the docs when my problem is solved.\r\n- [N] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [N] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nBy specifying a schema which contains a non required dictionary in which one of the entries has a default value, after validating it, if the dict is not specified, the entry in the dict doesn't get a default value assigned.\r\n```python\r\n\r\nschema = {\r\n    'dict1' : {\r\n        'type' : 'dict',\r\n        'required' : False,\r\n        'schema' : {\r\n            'key1: {\r\n                'type' : 'integer', 'default' : 123\r\n            }\r\n        },\r\n}\r\n\r\nval = cerberus.Validator(schema)\r\nprint(val.validated({})\r\n> {}\r\n```\r\n\r\nExpected behavior would be something like `{'dict1' : {'key1' : 123}}`\r\n\r\nOne ugly workaround is specifying an empty dictionary\r\n\r\n```python\r\nval = cerberus.Validator(schema)\r\nprint(val.validated({'dict1'})\r\n> {'dict1' : {'key1' : 123}\r\n```\r\n\r\nAlthough it is valid to return {} in the scenario above, it is also valid to return a schema that returns all keys with default values. This is interesting to inform users about default values on an incomplete but valid schema. \r\n\r\nA new flag on `Validator` such as `force_default=False` could implement this new behavior", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/544", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/544/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/544/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/544/events", "html_url": "https://github.com/pyeve/cerberus/issues/544", "id": 627300498, "node_id": "MDU6SXNzdWU2MjczMDA0OTg=", "number": 544, "title": "Error when excluding fields in version 1.3.2", "user": {"login": "dhanythirstie", "id": 63095062, "node_id": "MDQ6VXNlcjYzMDk1MDYy", "avatar_url": "https://avatars3.githubusercontent.com/u/63095062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhanythirstie", "html_url": "https://github.com/dhanythirstie", "followers_url": "https://api.github.com/users/dhanythirstie/followers", "following_url": "https://api.github.com/users/dhanythirstie/following{/other_user}", "gists_url": "https://api.github.com/users/dhanythirstie/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhanythirstie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhanythirstie/subscriptions", "organizations_url": "https://api.github.com/users/dhanythirstie/orgs", "repos_url": "https://api.github.com/users/dhanythirstie/repos", "events_url": "https://api.github.com/users/dhanythirstie/events{/privacy}", "received_events_url": "https://api.github.com/users/dhanythirstie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-29T14:12:02Z", "updated_at": "2020-06-14T16:53:48Z", "closed_at": "2020-06-14T16:53:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently upgraded the Cerberus version to 1.3.2 from 1.1. But getting validation errors. Please find the validation schema.\r\n\r\nmy_schema = \r\n{\r\n    'email': {\r\n        'type': 'string', 'maxlength': 1000,\r\n        'regex': EMAIL_PATTERN, 'required': True\r\n    },\r\n    'guest': {\r\n        'type': 'boolean', 'required': False,\r\n        'excludes': ['password', 'issue_password_reset']\r\n    },\r\n    'password': {\r\n        'type': 'string', 'minlength': 9, 'required': True,\r\n        'excludes': 'issue_password_reset'\r\n    },\r\n    'prefix': {\r\n        'type': 'string', 'nullable': True,\r\n        'required': False, 'maxlength': 10\r\n    },\r\n    'first_name': {\r\n        'type': 'string', 'nullable': True,\r\n        'required': False, 'maxlength': 50\r\n    },\r\n    'last_name': {\r\n        'type': 'string', 'nullable': True,\r\n        'required': False, 'maxlength': 50\r\n    },\r\n    'phone_number': {\r\n        'type': 'string', 'required': False,\r\n        'nullable': True, 'regex': PHONE_NUMBER_PATTERN\r\n    },\r\n    'birthday': {\r\n        'type': 'string', 'required': True,\r\n        'excludes': 'is_legal_drinking_age'\r\n    },\r\n    'is_legal_drinking_age': {\r\n        'type': 'boolean', 'required': True,\r\n        'excludes': 'birthday'\r\n    },\r\n    'issue_password_reset': {\r\n        'type': 'boolean', 'required': True,\r\n        'excludes': 'password'\r\n    },\r\n}\r\n\r\ndata = {\r\n        \"email\": \"guest123@email.com\",\r\n        \"guest\": True,\r\n        \"birthday\": \"1975-05-05\",\r\n        \"prefix\": \"Ms.\",\r\n        \"first_name\": \"Allison\",\r\n        \"last_name\": \"Smith\",\r\n        \"phone_number\": \"(212) 555-2002\"\r\n    }\r\n\r\nvalid = Validator(default_schema)\r\nresp = valid.validate(data)\r\nprint(valid.errors)\r\nprint(resp)\r\n\r\nFor Cerberus version 1.3.2, getting validation error as **\"{'issue_password_reset': ['required field'], 'password': ['required field']}\"**\r\n\r\n\r\nThe same validation schema getting validated in Cerberus version 1.1.\r\n\r\nHoping to find some help.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/543", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/543/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/543/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/543/events", "html_url": "https://github.com/pyeve/cerberus/issues/543", "id": 621626702, "node_id": "MDU6SXNzdWU2MjE2MjY3MDI=", "number": 543, "title": "use cerberus to check the clear resut data ,the cpu cost is hight  near 100%", "user": {"login": "abo123456789", "id": 4077400, "node_id": "MDQ6VXNlcjQwNzc0MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4077400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abo123456789", "html_url": "https://github.com/abo123456789", "followers_url": "https://api.github.com/users/abo123456789/followers", "following_url": "https://api.github.com/users/abo123456789/following{/other_user}", "gists_url": "https://api.github.com/users/abo123456789/gists{/gist_id}", "starred_url": "https://api.github.com/users/abo123456789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abo123456789/subscriptions", "organizations_url": "https://api.github.com/users/abo123456789/orgs", "repos_url": "https://api.github.com/users/abo123456789/repos", "events_url": "https://api.github.com/users/abo123456789/events{/privacy}", "received_events_url": "https://api.github.com/users/abo123456789/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T09:54:50Z", "updated_at": "2020-05-21T12:53:56Z", "closed_at": "2020-05-21T12:53:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: \u2026\r\n\r\n- [ ] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\n v = Validator()\r\n        v.allow_unknown = True\r\n        schema = schema = {\r\n            \"_id\": {'type': 'string', 'empty': False, 'required': True},\r\n            \"s_id\": {'type': 'string', 'empty': False, 'required': True},\r\n            \"from\": {'type': 'string', 'empty': False, 'required': True},\r\n            \"from_cn\": {'type': 'string', 'empty': False, 'required': True},\r\n            \"title\": {'type': 'string', 'empty': False, 'required': True},\r\n            \"course_type\": {'type': 'integer', 'empty': False, 'required': True, 'regex': '^(1|2)$'},\r\n            \"price\": {'type': 'float', 'empty': False, 'required': True}}\r\n       formate_data = {}\r\n        check_result = v.validate(formate_data, schema)\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nwhen i run a python craw and use cerberus to check the clear resut data ,the cpu cost is hight  near 100% ,any one has some method to resolve the problem? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/542", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/542/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/542/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/542/events", "html_url": "https://github.com/pyeve/cerberus/issues/542", "id": 619930919, "node_id": "MDU6SXNzdWU2MTk5MzA5MTk=", "number": 542, "title": "Error when pytest", "user": {"login": "xinjiyier", "id": 18064887, "node_id": "MDQ6VXNlcjE4MDY0ODg3", "avatar_url": "https://avatars0.githubusercontent.com/u/18064887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xinjiyier", "html_url": "https://github.com/xinjiyier", "followers_url": "https://api.github.com/users/xinjiyier/followers", "following_url": "https://api.github.com/users/xinjiyier/following{/other_user}", "gists_url": "https://api.github.com/users/xinjiyier/gists{/gist_id}", "starred_url": "https://api.github.com/users/xinjiyier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xinjiyier/subscriptions", "organizations_url": "https://api.github.com/users/xinjiyier/orgs", "repos_url": "https://api.github.com/users/xinjiyier/repos", "events_url": "https://api.github.com/users/xinjiyier/events{/privacy}", "received_events_url": "https://api.github.com/users/xinjiyier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-18T05:56:03Z", "updated_at": "2020-05-18T12:17:21Z", "closed_at": "2020-05-18T12:17:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Bug report \r\n\r\n<!-- describe your issue here -->\r\nerror when I pytest   \r\nenvironment:  pytest 5.4.1  \r\n\r\nBelow is the error message :\r\ncerberus/tests/test_zzz_validated_schema_cache.py .                                                                                                                                                  [100%]\r\n\r\n================================================================================================== ERRORS ==================================================================================================\r\n________________________________________________________________________________ ERROR at setup of test_overall_performance ________________________________________________________________________________\r\nfile /home/shoppingchen/work/xml-json-test/cerberus/cerberus/benchmarks/test_overall_performance.py, line 141\r\n  def test_overall_performance(benchmark):\r\nE       fixture 'benchmark' not found\r\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, extra, metadata, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\r\n>       use 'pytest --fixtures [testpath]' for help on them.\r\n\r\n/home/shoppingchen/work/xml-json-test/cerberus/cerberus/benchmarks/test_overall_performance.py:141\r\n======================================================================================= 394 passed, 1 error in 3.51s =======================================================================================", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/541", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/541/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/541/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/541/events", "html_url": "https://github.com/pyeve/cerberus/issues/541", "id": 619450943, "node_id": "MDU6SXNzdWU2MTk0NTA5NDM=", "number": 541, "title": "We cannot use a \"validator\" function for Arrays. It think it would be a great addition!", "user": {"login": "Abhisek1994Roy", "id": 8615520, "node_id": "MDQ6VXNlcjg2MTU1MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8615520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Abhisek1994Roy", "html_url": "https://github.com/Abhisek1994Roy", "followers_url": "https://api.github.com/users/Abhisek1994Roy/followers", "following_url": "https://api.github.com/users/Abhisek1994Roy/following{/other_user}", "gists_url": "https://api.github.com/users/Abhisek1994Roy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Abhisek1994Roy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Abhisek1994Roy/subscriptions", "organizations_url": "https://api.github.com/users/Abhisek1994Roy/orgs", "repos_url": "https://api.github.com/users/Abhisek1994Roy/repos", "events_url": "https://api.github.com/users/Abhisek1994Roy/events{/privacy}", "received_events_url": "https://api.github.com/users/Abhisek1994Roy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-16T11:33:11Z", "updated_at": "2020-05-18T12:14:33Z", "closed_at": "2020-05-18T12:14:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: \u2026\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\n<!-- please summarize your use-case -->\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\n<!-- describe your issue here -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/540", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/540/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/540/events", "html_url": "https://github.com/pyeve/cerberus/issues/540", "id": 616677988, "node_id": "MDU6SXNzdWU2MTY2Nzc5ODg=", "number": 540, "title": "constraints defined in 'schema' for dicts defined in 'valuesrules' are not enforced.", "user": {"login": "ben-developer", "id": 39803605, "node_id": "MDQ6VXNlcjM5ODAzNjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/39803605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben-developer", "html_url": "https://github.com/ben-developer", "followers_url": "https://api.github.com/users/ben-developer/followers", "following_url": "https://api.github.com/users/ben-developer/following{/other_user}", "gists_url": "https://api.github.com/users/ben-developer/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben-developer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben-developer/subscriptions", "organizations_url": "https://api.github.com/users/ben-developer/orgs", "repos_url": "https://api.github.com/users/ben-developer/repos", "events_url": "https://api.github.com/users/ben-developer/events{/privacy}", "received_events_url": "https://api.github.com/users/ben-developer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-12T13:56:26Z", "updated_at": "2020-05-13T12:38:40Z", "closed_at": "2020-05-13T12:38:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "    \"control\": {'type': 'dict', 'required': False, \"valuesrules\": {\r\n            'type': 'dict',\r\n            \"schema\": {\r\n                \"device_codes\": {},\r\n                \"scope\": {},\r\n                \"optional\": {},\r\n            }\r\n        }},\r\n\r\n\r\nI could define other random keys in the schema and the validator will say my document is valid.\r\n\r\nPython3.6, Cerberus 1.3.2.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/536", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/536/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/536/events", "html_url": "https://github.com/pyeve/cerberus/issues/536", "id": 606060062, "node_id": "MDU6SXNzdWU2MDYwNjAwNjI=", "number": 536, "title": "Need normalization AFTER validation", "user": {"login": "socketpair", "id": 1157412, "node_id": "MDQ6VXNlcjExNTc0MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1157412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/socketpair", "html_url": "https://github.com/socketpair", "followers_url": "https://api.github.com/users/socketpair/followers", "following_url": "https://api.github.com/users/socketpair/following{/other_user}", "gists_url": "https://api.github.com/users/socketpair/gists{/gist_id}", "starred_url": "https://api.github.com/users/socketpair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/socketpair/subscriptions", "organizations_url": "https://api.github.com/users/socketpair/orgs", "repos_url": "https://api.github.com/users/socketpair/repos", "events_url": "https://api.github.com/users/socketpair/events{/privacy}", "received_events_url": "https://api.github.com/users/socketpair/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-24T05:52:15Z", "updated_at": "2020-04-27T13:23:16Z", "closed_at": "2020-04-24T16:43:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "The case: I need to have a field with IP and prefix, like `1.2.3.4/24`.\r\n\r\nI need my system to eat both `1.2.3.4/255.255.255.0` and `1.2.3.4/24`, and the first should be normalized to the last form.\r\n\r\nIf I add coercion like `lambda value: str(ipaddress.IPv4address(value))` it will also eat strings like `1.2.3.4` (without a mask) and even integer values, which is input error for sure. Yep, I can merge validator with the coercion, but it looks awkward and weird, and I also have no way to call `error(field, message)` in this case.\r\n\r\nI need first to validate that value is a string, that it matches specific regexp, and THEN run some normalizer like `lambda` mentioned before.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/535", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/535/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/535/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/535/events", "html_url": "https://github.com/pyeve/cerberus/issues/535", "id": 589676969, "node_id": "MDU6SXNzdWU1ODk2NzY5Njk=", "number": 535, "title": "Running into an issue with Boolean types", "user": {"login": "aronchick", "id": 51317, "node_id": "MDQ6VXNlcjUxMzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/51317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aronchick", "html_url": "https://github.com/aronchick", "followers_url": "https://api.github.com/users/aronchick/followers", "following_url": "https://api.github.com/users/aronchick/following{/other_user}", "gists_url": "https://api.github.com/users/aronchick/gists{/gist_id}", "starred_url": "https://api.github.com/users/aronchick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aronchick/subscriptions", "organizations_url": "https://api.github.com/users/aronchick/orgs", "repos_url": "https://api.github.com/users/aronchick/repos", "events_url": "https://api.github.com/users/aronchick/events{/privacy}", "received_events_url": "https://api.github.com/users/aronchick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-28T23:05:19Z", "updated_at": "2020-03-29T21:30:53Z", "closed_at": "2020-03-29T12:21:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: \u2026\r\n\r\n- [X] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [X] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nI'm importing things from yaml into python objects using the strictyaml library. An issue I'm running into is that it casts all objects into strings, and then the strings validated against the schema. So the issue I'm running into is here:\r\n\r\n```\r\nv = Validator()\r\n\r\nUUID = \"\"\"\r\nrun_id:\r\n    type: uuid\r\n    required: True\r\n\"\"\"\r\na = strictyaml.load(UUID).data\r\n# Value of a => OrderedDict([('run_id',\r\n#                   OrderedDict([('type', 'uuid'), ('required', 'True')]))])\r\n\r\nb = ruamel.YAML.load(UUID)\r\n# Value of b => {'run_id': {'type': 'uuid', 'required': True}}\r\n\r\ns.schema = b\r\n# Output => SchemaError: {'run_id': [{'required': ['must be of boolean type']}]}\r\n\r\ns.schema = a\r\n# Output => True (it worked)\r\n```\r\n\r\nIs there a simple way to force boolean without requiring the user to add coerce/normalization to the schema? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/533", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/533/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/533/events", "html_url": "https://github.com/pyeve/cerberus/issues/533", "id": 579785329, "node_id": "MDU6SXNzdWU1Nzk3ODUzMjk=", "number": 533, "title": "dependencies rule triggers error with unrelated field", "user": {"login": "ypitrey", "id": 17247240, "node_id": "MDQ6VXNlcjE3MjQ3MjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/17247240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ypitrey", "html_url": "https://github.com/ypitrey", "followers_url": "https://api.github.com/users/ypitrey/followers", "following_url": "https://api.github.com/users/ypitrey/following{/other_user}", "gists_url": "https://api.github.com/users/ypitrey/gists{/gist_id}", "starred_url": "https://api.github.com/users/ypitrey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ypitrey/subscriptions", "organizations_url": "https://api.github.com/users/ypitrey/orgs", "repos_url": "https://api.github.com/users/ypitrey/repos", "events_url": "https://api.github.com/users/ypitrey/events{/privacy}", "received_events_url": "https://api.github.com/users/ypitrey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-12T08:55:27Z", "updated_at": "2020-03-12T20:18:10Z", "closed_at": "2020-03-12T20:18:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a duplicate of the [question I asked on Stackoverflow](https://stackoverflow.com/questions/60524853/runtimeerror-theres-no-handler-for-insert-filed-name-in-the-validate-domai) about a week ago. I am asking it here as I didn't get any replies on SO.\r\n\r\nI am using cerberus v1.3.2 with python-3.8 stable to validate json data that will be used to send http requests. I am having an issue using the _dependencies_ rule. My objects have a field `request_type` and an optional field `payload` that contains more data. Only objects that have a `request_type` in `['CREATE', 'AMEND']` have a payload. When I run the validation, I get an error related to one of the fields in the payload. Here is the code I'm running:\r\n\r\n```\r\nfrom cerberus import Validator\r\n\r\nrequest = {\r\n    \"request_type\": \"CREATE\",\r\n    \"other_field_1\": \"whatever\",\r\n    \"other_field_2\": \"whatever\",\r\n    \"payload\": {\r\n        \"id\": \"123456\",\r\n        \"jobs\": [\r\n            {\r\n                \"duration\": 1800,\r\n                \"other_field_1\": \"whatever\",\r\n                \"other_field_2\": \"whatever\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nschema = {\r\n    'request_type': {\r\n        'type': 'string',\r\n        'allowed': ['CREATE', 'CANCEL', 'AMEND'],\r\n        'required': True,\r\n        'empty': False\r\n    },\r\n    'other_field_1': {'type': 'string', },\r\n    'other_field_2': {'type': 'string', },\r\n    'payload': {\r\n        'required': False,\r\n        'schema': {\r\n            'id': {\r\n                'type': 'string',\r\n                'regex': r'[A-Za-z0-9_-]`',\r\n                'minlength': 1, 'maxlength': 32,\r\n                'coerce': str\r\n            },\r\n            'jobs': {\r\n                'type': 'list',\r\n                'schema': {\r\n                    'duration': {\r\n                        'type': 'integer', 'min': 0,\r\n                        'required': True, 'empty': False,\r\n                    },\r\n                    'other_field_1': {'type': 'string', },\r\n                    'other_field_2': {'type': 'string', },\r\n                }\r\n            }\r\n        },\r\n        'dependencies': {'request_type': ['CREATE', 'AMEND']},\r\n    }\r\n}\r\n\r\nvalidator = Validator(schema, purge_unknown=True)\r\nif validator.validate(request):\r\n    print('The request is valid.')\r\nelse:\r\n    print(f'The request failed validation: {validator.errors}')\r\n```\r\nAnd this is the error I'm getting:\r\n```\r\n\"RuntimeError: There's no handler for 'duration' in the 'validate' domain.\"\r\n```\r\n\r\nIs there something I'm doing wrong?\r\n\r\nFor context, I managed to make the validation work by using the exact same rules, but instead of using `dependencies`, I have two separate schemas named `payload_schema` and `no_payload_schema`. In `payload_schema` I set the allowed values for `request_type` to `['CREATE', 'AMEND']`, and in `no_payload_schema` I set the allowed values to `['CANCEL']`. I run the validation on both schemas and if neither of them passes, I raise an error. This sounds a bit hacky and I'd like to understand how I could use the `dependencies` rule to do that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/524", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/524/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/524/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/524/events", "html_url": "https://github.com/pyeve/cerberus/issues/524", "id": 555211199, "node_id": "MDU6SXNzdWU1NTUyMTExOTk=", "number": 524, "title": "allowed rule crashes with unashable values", "user": {"login": "gilbsgilbs", "id": 3407667, "node_id": "MDQ6VXNlcjM0MDc2Njc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3407667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilbsgilbs", "html_url": "https://github.com/gilbsgilbs", "followers_url": "https://api.github.com/users/gilbsgilbs/followers", "following_url": "https://api.github.com/users/gilbsgilbs/following{/other_user}", "gists_url": "https://api.github.com/users/gilbsgilbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilbsgilbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilbsgilbs/subscriptions", "organizations_url": "https://api.github.com/users/gilbsgilbs/orgs", "repos_url": "https://api.github.com/users/gilbsgilbs/repos", "events_url": "https://api.github.com/users/gilbsgilbs/events{/privacy}", "received_events_url": "https://api.github.com/users/gilbsgilbs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16062791, "node_id": "MDU6TGFiZWwxNjA2Mjc5MQ==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/11", "html_url": "https://github.com/pyeve/cerberus/milestone/11", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/11/labels", "id": 4932840, "node_id": "MDk6TWlsZXN0b25lNDkzMjg0MA==", "number": 11, "title": "1.3.3", "description": "", "creator": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "open_issues": 3, "closed_issues": 5, "state": "open", "created_at": "2019-12-14T18:34:25Z", "updated_at": "2020-06-17T19:28:40Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2020-01-26T10:50:05Z", "updated_at": "2020-02-09T15:44:34Z", "closed_at": "2020-02-09T15:44:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: 631e05d9773991238dfd7d994a637887fca348d7\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [x] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nValidating the following input:\r\n\r\n```json\r\n{\r\n  \"letters\": [{\"foo\": \"bar\"}]\r\n}\r\n```\r\n\r\nagainst the following schema:\r\n\r\n```json\r\n{\r\n  \"letters\": {\r\n    \"type\": \"list\",\r\n    \"allowed\": [\"a\", \"b\", \"c\"]\r\n  }\r\n}\r\n```\r\n\r\nleads to the following crash:\r\n\r\n```\r\n   File \"./cerberus/validator.py\", line 997, in validate\r\n     self.__validate_definitions(definitions, field)\r\n   File \"./cerberus/validator.py\", line 1066, in __validate_definitions\r\n     result = validate_rule(rule)\r\n   File \"./cerberus/validator.py\", line 1041, in validate_rule\r\n     return validator(definitions.get(rule, None), field, value)\r\n   File \"./cerberus/validator.py\", line 1087, in _validate_allowed\r\n     unallowed = set(value) - set(allowed_values)\r\n TypeError: unhashable type: 'dict'\r\n```\r\n\r\nexpected behavior: a validation error, not a crash.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/523", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/523/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/523/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/523/events", "html_url": "https://github.com/pyeve/cerberus/issues/523", "id": 555202809, "node_id": "MDU6SXNzdWU1NTUyMDI4MDk=", "number": 523, "title": "how to add multi lingual and custom errors ?", "user": {"login": "javadasoodeh", "id": 17512044, "node_id": "MDQ6VXNlcjE3NTEyMDQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/17512044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javadasoodeh", "html_url": "https://github.com/javadasoodeh", "followers_url": "https://api.github.com/users/javadasoodeh/followers", "following_url": "https://api.github.com/users/javadasoodeh/following{/other_user}", "gists_url": "https://api.github.com/users/javadasoodeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/javadasoodeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javadasoodeh/subscriptions", "organizations_url": "https://api.github.com/users/javadasoodeh/orgs", "repos_url": "https://api.github.com/users/javadasoodeh/repos", "events_url": "https://api.github.com/users/javadasoodeh/events{/privacy}", "received_events_url": "https://api.github.com/users/javadasoodeh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-26T09:28:14Z", "updated_at": "2020-01-26T15:02:14Z", "closed_at": "2020-01-26T15:02:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: \u2026\r\n\r\n- [ ] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\n<!-- please summarize your use-case -->\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\n<!-- describe your issue here -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/521", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/521/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/521/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/521/events", "html_url": "https://github.com/pyeve/cerberus/issues/521", "id": 537705966, "node_id": "MDU6SXNzdWU1Mzc3MDU5NjY=", "number": 521, "title": "`keysrules` isn't working with `type: list`", "user": {"login": "KyleKing", "id": 3784339, "node_id": "MDQ6VXNlcjM3ODQzMzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3784339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KyleKing", "html_url": "https://github.com/KyleKing", "followers_url": "https://api.github.com/users/KyleKing/followers", "following_url": "https://api.github.com/users/KyleKing/following{/other_user}", "gists_url": "https://api.github.com/users/KyleKing/gists{/gist_id}", "starred_url": "https://api.github.com/users/KyleKing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KyleKing/subscriptions", "organizations_url": "https://api.github.com/users/KyleKing/orgs", "repos_url": "https://api.github.com/users/KyleKing/repos", "events_url": "https://api.github.com/users/KyleKing/events{/privacy}", "received_events_url": "https://api.github.com/users/KyleKing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-13T18:37:11Z", "updated_at": "2019-12-15T17:56:43Z", "closed_at": "2019-12-14T18:04:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Cerberus version: `1.3.2` (latest)\r\n\r\n- [X] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n- [X] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Summary and Code Example\r\n\r\nShould `keysrules` work with type `list`?\r\n\r\nIn the below example, the expected result is for `val.validate(document, schema_keysrules)` to return True (no errors)\r\n\r\n```py\r\nfrom cerberus import Validator\r\n\r\nschema_schema = {\r\n    'key1': {\r\n        'type': 'dict',\r\n        'schema': {\r\n            '01': {\r\n                'type': 'list',\r\n                'schema': {'type': 'float'},\r\n            },\r\n            '101': {\r\n                'type': 'list',\r\n                'schema': {'type': 'float'},\r\n            },\r\n        },\r\n    },\r\n}\r\nschema_keysrules = {\r\n    'key1': {\r\n        'type': 'dict',\r\n        'keysrules': {\r\n            'regex': r'[0-9]{2,3}',\r\n            'type': 'list',\r\n            'schema': {'type': 'float'},\r\n        },\r\n    },\r\n}\r\n\r\ndocument = {\r\n    'key1': {\r\n        '01': [10.0, 10.0],\r\n        '101': [0.1, 10.0],\r\n        '999': [1.2, 34.5],\r\n    },\r\n}\r\n\r\nval = Validator()\r\n\r\n# Try with standard schema\r\nprint(val.validate(document, schema_schema))\r\nprint(val.errors)\r\n\r\n# Try with keysrules\r\nprint(val.validate(document, schema_keysrules))\r\nprint(val.errors)\r\n```\r\n\r\n```sh\r\nval.validate(document, schema_schema): False\r\nval.errors: {'key1': [{'999': ['unknown field']}]}\r\n\r\nval.validate(document, schema_keysrules): False\r\nval.errors: {'key1': [{'01': ['must be of list type'],\r\n                  '101': ['must be of list type'],\r\n                  '999': ['must be of list type']}]}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/519", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/519/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/519/events", "html_url": "https://github.com/pyeve/cerberus/issues/519", "id": 533547357, "node_id": "MDU6SXNzdWU1MzM1NDczNTc=", "number": 519, "title": "Fix simple typo: useages -> usage", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-05T19:26:34Z", "updated_at": "2020-02-09T15:27:39Z", "closed_at": "2020-02-09T15:27:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in CHANGES.rst.\nShould read usage rather than useages.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/514", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/514/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/514/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/514/events", "html_url": "https://github.com/pyeve/cerberus/issues/514", "id": 518192791, "node_id": "MDU6SXNzdWU1MTgxOTI3OTE=", "number": 514, "title": "Check with rule doesn't work as expected", "user": {"login": "BinarSkugga", "id": 7575628, "node_id": "MDQ6VXNlcjc1NzU2Mjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7575628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BinarSkugga", "html_url": "https://github.com/BinarSkugga", "followers_url": "https://api.github.com/users/BinarSkugga/followers", "following_url": "https://api.github.com/users/BinarSkugga/following{/other_user}", "gists_url": "https://api.github.com/users/BinarSkugga/gists{/gist_id}", "starred_url": "https://api.github.com/users/BinarSkugga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BinarSkugga/subscriptions", "organizations_url": "https://api.github.com/users/BinarSkugga/orgs", "repos_url": "https://api.github.com/users/BinarSkugga/repos", "events_url": "https://api.github.com/users/BinarSkugga/events{/privacy}", "received_events_url": "https://api.github.com/users/BinarSkugga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-06T02:14:37Z", "updated_at": "2019-11-22T19:33:28Z", "closed_at": "2019-11-22T19:33:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi and thanks for the awesome library !\r\n\r\nSo I'm using the latest version of Cerberus on pip and I have a weird problem where check_with doesn't seem to be scoped (if that makes sense). Basically I'm using this schema:\r\n\r\n```python\r\n{\r\n  'id': {'type': 'integer', 'min': 1},\r\n  'name': {'type': 'string', 'empty': False, 'required': False, 'maxlength': 127},\r\n  'elements': {'type': 'list', 'required': False, 'minlength': 1, 'check_with': 'elements',\r\n    'schema': {\r\n      'type': 'dict',\r\n      'schema': {\r\n        'id': {'type': 'integer', 'min': 1},\r\n        'order': {'type': 'integer', 'min': 0}\r\n        'duration': {'type': 'float', 'min': 0, 'max': 1},\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nWith the following validator:\r\n```python\r\nclass CustomValidator(Validator):\r\n    def _check_with_elements(self, field, value):\r\n\t\t# Scale to 1000 to eliminate floating point errors\r\n        durations = [int(e['duration'] * 1000) for e in value if 'duration' in e]\r\n        orders = [set(e['order'] for e in value if 'order' in e)]\r\n\r\n        if reduce(lambda x, y: x + y, durations, 0) != 1000:\r\n            self._error(field, 'The sum of all durations needs to be equal to 1.')\r\n        if len(value) != len(orders):\r\n            self._error(field, 'Each order value must be uniquely assigned.')\r\n```\r\nSo basically the sum of all the durations of every elements should alway be equal to 1. I'm multiplying by 1000 to limit the input to 3 decimal and avoid floating point errors. Everythings looks okay to me but when validating the following document I get the 'The sum of all durations needs to be equal to 1.' error.\r\n```python\r\n{\r\n  'id': 12, \r\n  'name': 'test_edit_body_duration4', \r\n  'elements': [\r\n    {'id': 900, 'duration': 0.5, 'order': 1},\r\n    {'id': 901, 'duration': 0.5, 'order': 2}\r\n  ]\r\n}\r\n```\r\nI have been working on this for hours and I can't understand what is wrong with it :/. My first guess was that some old errors were re-thrown or something. At runtime, durations is [500, 500] and the result is 1000, the step-by-step debug event skip the error line.\r\n\r\nThanks in advance !\r\n\r\n*EDIT:* I'm executing this in automated tests (unittest) if that can help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/513", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/513/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/513/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/513/events", "html_url": "https://github.com/pyeve/cerberus/issues/513", "id": 510386737, "node_id": "MDU6SXNzdWU1MTAzODY3Mzc=", "number": 513, "title": "TypeError when using cerberus for recursive data validation", "user": {"login": "bertusk", "id": 17009113, "node_id": "MDQ6VXNlcjE3MDA5MTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/17009113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bertusk", "html_url": "https://github.com/bertusk", "followers_url": "https://api.github.com/users/bertusk/followers", "following_url": "https://api.github.com/users/bertusk/following{/other_user}", "gists_url": "https://api.github.com/users/bertusk/gists{/gist_id}", "starred_url": "https://api.github.com/users/bertusk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bertusk/subscriptions", "organizations_url": "https://api.github.com/users/bertusk/orgs", "repos_url": "https://api.github.com/users/bertusk/repos", "events_url": "https://api.github.com/users/bertusk/events{/privacy}", "received_events_url": "https://api.github.com/users/bertusk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-22T01:53:02Z", "updated_at": "2019-10-26T19:23:51Z", "closed_at": "2019-10-26T19:23:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Cerberus 1.3.1 and I'm getting this error when validating a recursive data structure.\r\nHere's some example code that triggers the error:\r\n\r\n```python\r\nbinop = {\r\n    \"binop\": {\r\n        \"type\": \"dict\",\r\n        \"schema\": {\r\n            \"left\": {\r\n                \"schema\": \"expr\",\r\n                \"required\": True\r\n            },\r\n            \"right\": {\r\n                \"schema\": \"expr\",\r\n                \"required\": True\r\n            },\r\n            \"operator\": {\r\n                \"type\": \"string\",\r\n                \"required\": True\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nvar = {\r\n    \"variable\": {\r\n        \"type\": \"dict\",\r\n        \"schema\": {\r\n            \"name\": {\r\n                \"type\": \"string\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexpr = {\r\n    \"expr\": {\r\n        \"type\": \"dict\",\r\n        \"schema\": {\r\n            \"anyof\": [\r\n                {\"schema\": var},\r\n                {\"schema\": binop}\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\ncerberus.schema_registry.add('expr', expr)\r\nschema = {\"expressions\": {\"type\": \"list\", \"schema\": \"expr\"}}\r\n\r\nv = cerberus.Validator(schema)\r\n\r\ndoc = {\r\n    \"expressions\": [\r\n        {\r\n            \"expr\": {\r\n                \"binop\": {\r\n                    \"left\": {\"expr\": {\"variable\": {\"name\": \"var1\"}}},\r\n                    \"right\": {\"expr\": {\"variable\": {\"name\": \"var2\"}}},\r\n                    \"operator\": \"+\"\r\n                }\r\n            }\r\n        },\r\n        {\"expr\": {\"variable\": {\"name\": \"var3\"}}},\r\n        {\"expr\": {\"variable\": {\"name\": \"var4\"}}}\r\n    ]\r\n}\r\nprint(v.validate(doc))\r\n\r\n```\r\nWhen I run this code I get the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 71, in <module>\r\n    print(v.validate(doc))\r\n  File \".venv/lib/python3.6/site-packages/cerberus/validator.py\", line 990, in validate\r\n    self.__normalize_mapping(self.document, self.schema)\r\n  File \".venv/lib/python3.6/site-packages/cerberus/validator.py\", line 671, in __normalize_mapping\r\n    self.__normalize_containers(mapping, schema)\r\n  File \".venv/lib/python3.6/site-packages/cerberus/validator.py\", line 757, in __normalize_containers\r\n    self.__normalize_sequence_per_schema(field, mapping, schema)\r\n  File \".venv/lib/python3.6/site-packages/cerberus/validator.py\", line 826, in __normalize_sequence_per_schema\r\n    result = validator.normalized(document, always_return_document=True)\r\n  File \".venv/lib/python3.6/site-packages/cerberus/validator.py\", line 646, in normalized\r\n    self.__normalize_mapping(self.document, self.schema)\r\n  File \".venv/lib/python3.6/site-packages/cerberus/validator.py\", line 660, in __normalize_mapping\r\n    self.__normalize_rename_fields(mapping, schema)\r\n  File \".venv/lib/python3.6/site-packages/cerberus/validator.py\", line 864, in __normalize_rename_fields\r\n    self._normalize_rename(mapping, schema, field)\r\n  File \".venv/lib/python3.6/site-packages/cerberus/validator.py\", line 877, in _normalize_rename\r\n    if 'rename' in schema[field]:\r\nTypeError: argument of type 'NoneType' is not iterable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/510", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/510/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/510/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/510/events", "html_url": "https://github.com/pyeve/cerberus/issues/510", "id": 495826342, "node_id": "MDU6SXNzdWU0OTU4MjYzNDI=", "number": 510, "title": "Unable to validate anyof schema", "user": {"login": "purna777", "id": 53346440, "node_id": "MDQ6VXNlcjUzMzQ2NDQw", "avatar_url": "https://avatars0.githubusercontent.com/u/53346440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/purna777", "html_url": "https://github.com/purna777", "followers_url": "https://api.github.com/users/purna777/followers", "following_url": "https://api.github.com/users/purna777/following{/other_user}", "gists_url": "https://api.github.com/users/purna777/gists{/gist_id}", "starred_url": "https://api.github.com/users/purna777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/purna777/subscriptions", "organizations_url": "https://api.github.com/users/purna777/orgs", "repos_url": "https://api.github.com/users/purna777/repos", "events_url": "https://api.github.com/users/purna777/events{/privacy}", "received_events_url": "https://api.github.com/users/purna777/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-19T14:12:46Z", "updated_at": "2019-10-04T10:39:04Z", "closed_at": "2019-10-04T10:39:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n{\r\n  \"offers\": {\r\n    \"type\": \"list\",\r\n    \"schema\": {\r\n      \"type\": \"dict\",\r\n      \"oneof\":[{\r\n      \"schema\": {\r\n        \"random1\": {\r\n          \"type\": \"float\",\r\n          \"empty\": False\r\n        },\r\n        \"random2\": {\r\n          \"type\": \"float\",\r\n          \"empty\": False     \r\n        }}}],\r\n        \"schema\":{\r\n        \"offerId\": {\r\n          \"type\": \"string\",\r\n          \"required\": True,\r\n          \"empty\": False\r\n        },\r\n        \"frequency\": {\r\n          \"type\": \"string\",\r\n          \"empty\": False\r\n        },\r\n        \"action\": {\r\n          \"type\": \"string\",\r\n          \"required\": True,\r\n          \"empty\": False\r\n        }\r\n      }\r\n    }\r\n}\r\n```\r\nI'm trying to validate the `oneof` schema and it is giving `True` when both `random1` and `random2` are not in the request. even i have tried with all other `of-rules`.can you help me with this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/508", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/508/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/508/events", "html_url": "https://github.com/pyeve/cerberus/issues/508", "id": 480824451, "node_id": "MDU6SXNzdWU0ODA4MjQ0NTE=", "number": 508, "title": "rename_handler in keysrules fails normalization", "user": {"login": "KonstantinNosov", "id": 1056177, "node_id": "MDQ6VXNlcjEwNTYxNzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1056177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KonstantinNosov", "html_url": "https://github.com/KonstantinNosov", "followers_url": "https://api.github.com/users/KonstantinNosov/followers", "following_url": "https://api.github.com/users/KonstantinNosov/following{/other_user}", "gists_url": "https://api.github.com/users/KonstantinNosov/gists{/gist_id}", "starred_url": "https://api.github.com/users/KonstantinNosov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KonstantinNosov/subscriptions", "organizations_url": "https://api.github.com/users/KonstantinNosov/orgs", "repos_url": "https://api.github.com/users/KonstantinNosov/repos", "events_url": "https://api.github.com/users/KonstantinNosov/events{/privacy}", "received_events_url": "https://api.github.com/users/KonstantinNosov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-14T18:28:47Z", "updated_at": "2019-08-19T11:26:36Z", "closed_at": "2019-08-18T21:10:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: 1.3.1\r\n\r\nKeyError is thrown if normalized s called with rename_handler in keysrules\r\n\r\n```\r\ndef test_rename_handler():\r\n    v = Validator({'foo': {\r\n        'keysrules': {\r\n            'rename_handler': str.upper\r\n        }\r\n\r\n    }})\r\n    normalized = v.normalized({'foo': {\"a\":1,\"b\":2}})\r\n    assert normalized =={'foo': {\"A\":1,\"B\":2}}\r\n```\r\nfailes with:\r\n```\r\nC:\\Users\\knst\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\cerberus\\validator.py:646: in normalized\r\n    self.__normalize_mapping(self.document, self.schema)\r\nC:\\Users\\knst\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\cerberus\\validator.py:671: in __normalize_mapping\r\n    self.__normalize_containers(mapping, schema)\r\nC:\\Users\\knst\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\cerberus\\validator.py:738: in __normalize_containers\r\n    field, mapping, schema[field]['keysrules']\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <cerberus.validator.Validator object at 0x000002583D97E390>\r\nfield = 'foo', mapping = {'foo': {'a': 1, 'b': 2}}\r\nproperty_rules = {'rename_handler': <method 'upper' of 'str' objects>}\r\n\r\n    def __normalize_mapping_per_keysrules(self, field, mapping, property_rules):\r\n        schema = dict(((k, property_rules) for k in mapping[field]))\r\n        document = dict(((k, k) for k in mapping[field]))\r\n        validator = self._get_child_validator(\r\n            document_crumb=field, schema_crumb=(field, 'keysrules'), schema=schema\r\n        )\r\n        result = validator.normalized(document, always_return_document=True)\r\n        if validator._errors:\r\n            self._drop_nodes_from_errorpaths(validator._errors, [], [2, 4])\r\n            self._error(validator._errors)\r\n        for k in result:\r\n            if k == result[k]:\r\n                continue\r\n            if result[k] in mapping[field]:\r\n                warn(\r\n                    \"Normalizing keys of {path}: {key} already exists, \"\r\n                    \"its value is replaced.\".format(\r\n                        path='.'.join(str(x) for x in self.document_path + (field,)),\r\n                        key=k,\r\n                    )\r\n                )\r\n>               mapping[field][result[k]] = mapping[field][k]\r\nE               KeyError: 'A'\r\n\r\nC:\\Users\\knst\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\cerberus\\validator.py:782: KeyError\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/506", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/506/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/506/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/506/events", "html_url": "https://github.com/pyeve/cerberus/issues/506", "id": 476873700, "node_id": "MDU6SXNzdWU0NzY4NzM3MDA=", "number": 506, "title": "datetime validation", "user": {"login": "rmlopes", "id": 423404, "node_id": "MDQ6VXNlcjQyMzQwNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/423404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlopes", "html_url": "https://github.com/rmlopes", "followers_url": "https://api.github.com/users/rmlopes/followers", "following_url": "https://api.github.com/users/rmlopes/following{/other_user}", "gists_url": "https://api.github.com/users/rmlopes/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlopes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlopes/subscriptions", "organizations_url": "https://api.github.com/users/rmlopes/orgs", "repos_url": "https://api.github.com/users/rmlopes/repos", "events_url": "https://api.github.com/users/rmlopes/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlopes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-05T13:55:29Z", "updated_at": "2019-08-05T18:43:18Z", "closed_at": "2019-08-05T15:11:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using Cerberus version 1.3.1 (also 1.2):\r\n\r\n- [X] I have the capacity to improve the docs when my problem is solved.\r\n- [X] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [X] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n#### Use-case abstract\r\n\r\n\r\nDetected using Eve, default `DATE_FORMAT` configuration.\r\n\r\n#### Bug report\r\n\r\nShould accept default ISO-8601 datetime strings: \"2017-01-01T00:00:00.000Z\". Validation always fails.\r\n\r\n```\r\nfrom cerberus import Validator\r\nschema = {\"mydate\": {\"type\":\"datetime\"}}\r\ndocument = {\"mydate\": \"2019-01-01T00:00:00.000Z\"}\r\nv = Validator(schema)\r\nv.validate(document)\r\n# False\r\nv.errors\r\n# {'mydate': ['must be of datetime type']}\r\n```\r\n\r\nNote: The default format in Eve is \"%a, %d %b %Y %H:%M:%S GMT\". This is not validated by Cerberus as well. What should the format be?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/505", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/505/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/505/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/505/events", "html_url": "https://github.com/pyeve/cerberus/issues/505", "id": 476860150, "node_id": "MDU6SXNzdWU0NzY4NjAxNTA=", "number": 505, "title": "Strange error message if length of list is wrong", "user": {"login": "pravindahal", "id": 894731, "node_id": "MDQ6VXNlcjg5NDczMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/894731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pravindahal", "html_url": "https://github.com/pravindahal", "followers_url": "https://api.github.com/users/pravindahal/followers", "following_url": "https://api.github.com/users/pravindahal/following{/other_user}", "gists_url": "https://api.github.com/users/pravindahal/gists{/gist_id}", "starred_url": "https://api.github.com/users/pravindahal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pravindahal/subscriptions", "organizations_url": "https://api.github.com/users/pravindahal/orgs", "repos_url": "https://api.github.com/users/pravindahal/repos", "events_url": "https://api.github.com/users/pravindahal/events{/privacy}", "received_events_url": "https://api.github.com/users/pravindahal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16062791, "node_id": "MDU6TGFiZWwxNjA2Mjc5MQ==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/10", "html_url": "https://github.com/pyeve/cerberus/milestone/10", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/10/labels", "id": 4305896, "node_id": "MDk6TWlsZXN0b25lNDMwNTg5Ng==", "number": 10, "title": "1.3.2", "description": null, "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "open", "created_at": "2019-05-12T09:11:22Z", "updated_at": "2019-10-23T19:43:17Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2019-08-05T13:29:03Z", "updated_at": "2019-08-05T15:51:16Z", "closed_at": "2019-08-05T15:51:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: 1.3.1\r\n\r\n- [ ] I have the capacity to improve the docs when my problem is solved.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nUsing list validator with incorrect number of items.\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\n```python\r\n#!/usr/bin/env python2\r\n\r\nfrom cerberus import Validator\r\nimport json\r\n\r\nSCHEMA = {\r\n    'test_list': {\r\n        'type': 'list',\r\n        'required': True,\r\n        'items': [\r\n            {\r\n                'type': 'string',\r\n            },\r\n            {\r\n                'type': 'string',\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\npayload = {\r\n    'test_list': [\r\n        'test'\r\n    ]\r\n}\r\n\r\nvalidator = Validator(SCHEMA)\r\nvalidator.validate(payload)\r\nprint json.dumps(validator.errors)\r\n\r\n```\r\n\r\nExpected output:\r\n```json\r\n{\r\n\t\"test_list\": [\"length of list should be 2, it is 1\"]\r\n}\r\n```\r\n\r\nActual output:\r\n```json\r\n{\r\n\t\"test_list\": [\"length of list should be [{'type': 'string'}, {'type': 'string'}], it is 2\"]\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/504", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/504/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/504/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/504/events", "html_url": "https://github.com/pyeve/cerberus/issues/504", "id": 474179441, "node_id": "MDU6SXNzdWU0NzQxNzk0NDE=", "number": 504, "title": "Cerberus tests fail under Python 3.8", "user": {"login": "ignatenkobrain", "id": 2866862, "node_id": "MDQ6VXNlcjI4NjY4NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2866862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ignatenkobrain", "html_url": "https://github.com/ignatenkobrain", "followers_url": "https://api.github.com/users/ignatenkobrain/followers", "following_url": "https://api.github.com/users/ignatenkobrain/following{/other_user}", "gists_url": "https://api.github.com/users/ignatenkobrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/ignatenkobrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ignatenkobrain/subscriptions", "organizations_url": "https://api.github.com/users/ignatenkobrain/orgs", "repos_url": "https://api.github.com/users/ignatenkobrain/repos", "events_url": "https://api.github.com/users/ignatenkobrain/events{/privacy}", "received_events_url": "https://api.github.com/users/ignatenkobrain/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16062791, "node_id": "MDU6TGFiZWwxNjA2Mjc5MQ==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/10", "html_url": "https://github.com/pyeve/cerberus/milestone/10", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/10/labels", "id": 4305896, "node_id": "MDk6TWlsZXN0b25lNDMwNTg5Ng==", "number": 10, "title": "1.3.2", "description": null, "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "open", "created_at": "2019-05-12T09:11:22Z", "updated_at": "2019-10-23T19:43:17Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2019-07-29T17:54:24Z", "updated_at": "2019-08-10T15:17:04Z", "closed_at": "2019-08-10T14:55:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: 1.3.1\r\n\r\n#### Bug report / Feature request\r\n\r\nI'm maintainer of Cerberus in Fedora. Python folks are trying to rebuild all packages against Python 3.8. However, cerberus one tests fail with 3.8 (but succeed with 3.7). Below you can find output.\r\n\r\n```python\r\n______________________________ test_nested_oneofs ______________________________\r\n\r\nvalidator = <cerberus.validator.Validator object at 0x7f6ccf22a0a0>\r\n\r\n    def test_nested_oneofs(validator):\r\n>       validator.schema = {\r\n            'abc': {\r\n                'type': 'dict',\r\n                'oneof_schema': [\r\n                    {\r\n                        'foo': {\r\n                            'type': 'dict',\r\n                            'schema': {'bar': {'oneof_type': ['integer', 'float']}},\r\n                        }\r\n                    },\r\n                    {'baz': {'type': 'string'}},\r\n                ],\r\n            }\r\n        }\r\n\r\ncerberus/tests/test_validation.py:1522: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncerberus/validator.py:562: in schema\r\n    self._schema = DefinitionSchema(self, schema)\r\ncerberus/schema.py:82: in __init__\r\n    self.validate(schema)\r\ncerberus/schema.py:259: in validate\r\n    self._validate(schema)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <[AttributeError(\"'DefinitionSchema' object has no attribute 'schema'\") raised in repr()] DefinitionSchema object at 0x7f6ccf22acd0>\r\nschema = {'abc': {'oneof': [{'schema': {'foo': {'schema': {...}, 'type': 'dict'}}}, {'schema': {'baz': {'type': 'string'}}}], 'type': 'dict'}}\r\n\r\n    def _validate(self, schema):\r\n        if isinstance(schema, _str_type):\r\n            schema = self.validator.schema_registry.get(schema, schema)\r\n    \r\n        if schema is None:\r\n            raise SchemaError(errors.SCHEMA_ERROR_MISSING)\r\n    \r\n        schema = copy(schema)\r\n        for field in schema:\r\n            if isinstance(schema[field], _str_type):\r\n                schema[field] = rules_set_registry.get(schema[field], schema[field])\r\n    \r\n        if not self.schema_validator(schema, normalize=False):\r\n>           raise SchemaError(self.schema_validator.errors)\r\nE           cerberus.schema.SchemaError: {'abc': [{'oneof': [{'schema': ['no definitions validate', {'anyof definition 0': [{'foo': [{'schema': ['no definitions validate', {'anyof definition 0': [{'bar': [{'oneof_type': ['unknown rule']}]}], 'anyof definition 1': [{'bar': ['unknown rule']}]}]}]}], 'anyof definition 1': [{'foo': ['unknown rule']}]}]}]}]}\r\n\r\ncerberus/schema.py:275: SchemaError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/502", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/502/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/502/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/502/events", "html_url": "https://github.com/pyeve/cerberus/issues/502", "id": 464658391, "node_id": "MDU6SXNzdWU0NjQ2NTgzOTE=", "number": 502, "title": "Unable to expand schema_registry", "user": {"login": "vkropotko", "id": 34027567, "node_id": "MDQ6VXNlcjM0MDI3NTY3", "avatar_url": "https://avatars3.githubusercontent.com/u/34027567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkropotko", "html_url": "https://github.com/vkropotko", "followers_url": "https://api.github.com/users/vkropotko/followers", "following_url": "https://api.github.com/users/vkropotko/following{/other_user}", "gists_url": "https://api.github.com/users/vkropotko/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkropotko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkropotko/subscriptions", "organizations_url": "https://api.github.com/users/vkropotko/orgs", "repos_url": "https://api.github.com/users/vkropotko/repos", "events_url": "https://api.github.com/users/vkropotko/events{/privacy}", "received_events_url": "https://api.github.com/users/vkropotko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-05T14:09:49Z", "updated_at": "2019-07-06T13:53:40Z", "closed_at": "2019-07-06T13:53:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "cerberus version: 1.3.1, python version 3.7\r\n\r\nWhen I try to add to schema_registry I get an error - 'not iterable':\r\n```>>> from cerberus import schema_registry\r\n>>> custom_schema = (('id', {'type': 'integer', 'coerce': int, 'min': 1}))\r\n>>> schema_registry.add(*custom_schema)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/vkropotko/.pyenv/versions/3.7.0/lib/python3.7/site-packages/cerberus/schema.py\", line 483, in add\r\n    self._storage[name] = self._expand_definition(definition)\r\n  File \"/Users/vkropotko/.pyenv/versions/3.7.0/lib/python3.7/site-packages/cerberus/schema.py\", line 524, in _expand_definition\r\n    return DefinitionSchema.expand(definition)\r\n  File \"/Users/vkropotko/.pyenv/versions/3.7.0/lib/python3.7/site-packages/cerberus/schema.py\", line 128, in expand\r\n    schema = cls._rename_deprecated_rulenames(schema)\r\n  File \"/Users/vkropotko/.pyenv/versions/3.7.0/lib/python3.7/site-packages/cerberus/schema.py\", line 225, in _rename_deprecated_rulenames\r\n    if old not in rules:\r\nTypeError: argument of type 'type' is not iterable```\r\n```\r\nIt can be fixed here:\r\nhttps://github.com/pyeve/cerberus/blob/master/cerberus/schema.py#L216\r\nwith:\r\n```\r\nfrom collections.abc import Iterable\r\nif isinstance(rules, str) or not isinstance(rules, Iterable):\r\n    continue\r\n```\r\nBut I'm not pretty sure that it's a bug. =)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/501", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/501/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/501/events", "html_url": "https://github.com/pyeve/cerberus/issues/501", "id": 464452991, "node_id": "MDU6SXNzdWU0NjQ0NTI5OTE=", "number": 501, "title": "LDAP3 python library is not able to add member to a group.", "user": {"login": "rijubhaskergslab", "id": 50904549, "node_id": "MDQ6VXNlcjUwOTA0NTQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/50904549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rijubhaskergslab", "html_url": "https://github.com/rijubhaskergslab", "followers_url": "https://api.github.com/users/rijubhaskergslab/followers", "following_url": "https://api.github.com/users/rijubhaskergslab/following{/other_user}", "gists_url": "https://api.github.com/users/rijubhaskergslab/gists{/gist_id}", "starred_url": "https://api.github.com/users/rijubhaskergslab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rijubhaskergslab/subscriptions", "organizations_url": "https://api.github.com/users/rijubhaskergslab/orgs", "repos_url": "https://api.github.com/users/rijubhaskergslab/repos", "events_url": "https://api.github.com/users/rijubhaskergslab/events{/privacy}", "received_events_url": "https://api.github.com/users/rijubhaskergslab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-05T04:11:41Z", "updated_at": "2019-07-05T04:36:43Z", "closed_at": "2019-07-05T04:36:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use below POC to add memeber to a group But it is giving error {'result': 32, 'description': 'noSuchObject', 'dn': '', 'message': \"00000525: NameErr: DSID-031A1292, problem 2001 (NO_OBJECT), data 0, best match of:\\n\\t''\\n\\x00\", 'referrals': None, 't ype': 'modifyResponse'}\r\nPOC below ----\r\n\r\n\r\nfrom ldap3 import Server, ALL, Connection, SUBTREE, MODIFY_REPLACE,MODIFY_ADD, BASE, DEREF_NEVER\r\nfrom ldap3.extend.microsoft.addMembersToGroups import ad_add_members_to_groups as addUsersInGroups\r\n\r\ndef connect():\r\n    method_name = \"connect()\"\r\n    ldap_host = 'XXXXXXXXXX'\r\n    ldap_port = 'XXXXXX'\r\n    username = 'XXXXXXXXX'\r\n    password = 'xxxxxxxxxxx'\r\n    protocol =  'ldap'\r\n    print(\"NEW CONNECTOR: Entering into \" + method_name)\r\n    connection_url = protocol + \"://\" + ldap_host + \":\" + ldap_port\r\n    print(\"NEW CONNECTOR: Generated LDAP Connection URL as -> \" + connection_url)\r\n    server = Server(connection_url, get_info=ALL)\r\n    print(\"NEW CONNECTOR: Server object created successfully\")\r\n    conn = Connection(server, username, password, auto_bind=True)\r\n    print(\"NEW CONNECTOR: Connection object created. Returning Connection object\")\r\n    print(\"NEW CONNECTOR: Exiting from  \" + method_name)\r\n    return conn\r\n\r\ndef update_user(userdn:str,group_dn:str):\r\n    print(userdn)\r\n    print(group_dn)\r\n    conn = connect()\r\n    userdn_list = [userdn]\r\n    groupdn_list = [group_dn]\r\n    updatedItem = conn.extend.microsoft.add_members_to_groups(userdn, group_dn)\r\n    #updatedItem  = addUsersInGroups(conn, userdn_list, groupdn_list,raise_error=True)\r\n    print(updatedItem)\r\n    return conn.result\r\n\r\ndn_user = 'CN=DemoRjF1 DemoRjL1,OU=Demo,OU=Users,OU=mycompany,DC=mydept,DC=com'\r\ndn_group = 'CN=Wifi,OU=Groups,OU=mycompany,DC=mydept,DC=com'\r\n\r\nupd = update_user(dn_user,dn_group)\r\nprint(upd)\r\n\r\n\r\nOutput - \r\nFalse \r\n{'result': 32, 'description': 'noSuchObject', 'dn': '', 'message': \"00000525: NameErr: DSID-031A1292, problem 2001 (NO_OBJECT), data 0, best match of:\\n\\t''\\n\\x00\", 'referrals': None, 't ype': 'modifyResponse'}", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/500", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/500/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/500/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/500/events", "html_url": "https://github.com/pyeve/cerberus/issues/500", "id": 463205147, "node_id": "MDU6SXNzdWU0NjMyMDUxNDc=", "number": 500, "title": "Willing to add more examples for Validation Rules ", "user": {"login": "vipulgupta2048", "id": 22801822, "node_id": "MDQ6VXNlcjIyODAxODIy", "avatar_url": "https://avatars0.githubusercontent.com/u/22801822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipulgupta2048", "html_url": "https://github.com/vipulgupta2048", "followers_url": "https://api.github.com/users/vipulgupta2048/followers", "following_url": "https://api.github.com/users/vipulgupta2048/following{/other_user}", "gists_url": "https://api.github.com/users/vipulgupta2048/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipulgupta2048/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipulgupta2048/subscriptions", "organizations_url": "https://api.github.com/users/vipulgupta2048/orgs", "repos_url": "https://api.github.com/users/vipulgupta2048/repos", "events_url": "https://api.github.com/users/vipulgupta2048/events{/privacy}", "received_events_url": "https://api.github.com/users/vipulgupta2048/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-02T12:38:07Z", "updated_at": "2019-08-17T06:44:47Z", "closed_at": "2019-08-05T15:01:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello there, \r\nI am Vipul Gupta, and I am participating in [Google Summer of Code 2019](https://mixstersite.wordpress.com/gsoc/). Cerberus is helping me out quite a lot in my project. Hence, I think what better way to help the project than to contribute back to it. I am an experienced freelance documentation writer. I kinda referred a lot to Validation Rules pages for examples as a reference regarding various features of Cerberus. I see there are fewer examples of some rules. \r\n\r\nNow, I know there is no need for examples of every single rule out there, but as a beginner, I think it certainly helps people when they can refer to something. I have already made several examples of my own when I was writing tests for my use-case. And it would be my honor to contribute back to this amazing package in whatever way possible. \r\n\r\nI also understand if the reason not to go ahead with this is to `not` bloat up the docs. I get that :smile:, but if you feel there is some need for them. I can post the examples on my blog (Check out - http://Mixster.live)\r\n\r\nThank you for all the work being done with Cerberus.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/499", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/499/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/499/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/499/events", "html_url": "https://github.com/pyeve/cerberus/issues/499", "id": 458537300, "node_id": "MDU6SXNzdWU0NTg1MzczMDA=", "number": 499, "title": "setuptools should be in the requirements list", "user": {"login": "Innuendo1975", "id": 3993300, "node_id": "MDQ6VXNlcjM5OTMzMDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3993300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Innuendo1975", "html_url": "https://github.com/Innuendo1975", "followers_url": "https://api.github.com/users/Innuendo1975/followers", "following_url": "https://api.github.com/users/Innuendo1975/following{/other_user}", "gists_url": "https://api.github.com/users/Innuendo1975/gists{/gist_id}", "starred_url": "https://api.github.com/users/Innuendo1975/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Innuendo1975/subscriptions", "organizations_url": "https://api.github.com/users/Innuendo1975/orgs", "repos_url": "https://api.github.com/users/Innuendo1975/repos", "events_url": "https://api.github.com/users/Innuendo1975/events{/privacy}", "received_events_url": "https://api.github.com/users/Innuendo1975/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16062791, "node_id": "MDU6TGFiZWwxNjA2Mjc5MQ==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/10", "html_url": "https://github.com/pyeve/cerberus/milestone/10", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/10/labels", "id": 4305896, "node_id": "MDk6TWlsZXN0b25lNDMwNTg5Ng==", "number": 10, "title": "1.3.2", "description": null, "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "open", "created_at": "2019-05-12T09:11:22Z", "updated_at": "2019-10-23T19:43:17Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2019-06-20T09:23:43Z", "updated_at": "2019-08-10T15:09:25Z", "closed_at": "2019-08-10T15:09:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\non my minimized docker environment with no pip installed I have the following exception traceback:\r\n\r\n```\r\nPython 3.5.3 (default, Sep 27 2018, 17:25:39) \r\n[GCC 6.3.0 20170516] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import cerberus\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/data/vendor/cerberus/__init__.py\", line 13, in <module>\r\n    from pkg_resources import get_distribution, DistributionNotFound\r\nImportError: No module named 'pkg_resources'\r\n```\r\n\r\nIndeed I can solve it by installing setuptools but it should be included in **install_requires** list of setup.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/498", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/498/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/498/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/498/events", "html_url": "https://github.com/pyeve/cerberus/issues/498", "id": 454439292, "node_id": "MDU6SXNzdWU0NTQ0MzkyOTI=", "number": 498, "title": "Unable to validate dict", "user": {"login": "kamikaze", "id": 52880, "node_id": "MDQ6VXNlcjUyODgw", "avatar_url": "https://avatars2.githubusercontent.com/u/52880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamikaze", "html_url": "https://github.com/kamikaze", "followers_url": "https://api.github.com/users/kamikaze/followers", "following_url": "https://api.github.com/users/kamikaze/following{/other_user}", "gists_url": "https://api.github.com/users/kamikaze/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamikaze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamikaze/subscriptions", "organizations_url": "https://api.github.com/users/kamikaze/orgs", "repos_url": "https://api.github.com/users/kamikaze/repos", "events_url": "https://api.github.com/users/kamikaze/events{/privacy}", "received_events_url": "https://api.github.com/users/kamikaze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-11T01:29:48Z", "updated_at": "2019-10-26T19:35:23Z", "closed_at": "2019-10-26T19:25:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unable to validate dict with random keys like this:\r\n\r\n```python\r\ndocument = {\r\n    'random_key_1': {},\r\n    'random_key_2': {},\r\n}\r\n```\r\n\r\nHow do I write rules for such dict? Keys are completely random strings. All the examples I found are designed for dictionaries with strict key names on top-level.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/494", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/494/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/494/events", "html_url": "https://github.com/pyeve/cerberus/issues/494", "id": 443082187, "node_id": "MDU6SXNzdWU0NDMwODIxODc=", "number": 494, "title": "[WARNING] Unexpected keys present on black: python_version", "user": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/10", "html_url": "https://github.com/pyeve/cerberus/milestone/10", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/10/labels", "id": 4305896, "node_id": "MDk6TWlsZXN0b25lNDMwNTg5Ng==", "number": 10, "title": "1.3.2", "description": null, "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "open", "created_at": "2019-05-12T09:11:22Z", "updated_at": "2019-10-23T19:43:17Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2019-05-12T09:09:45Z", "updated_at": "2019-05-12T09:11:22Z", "closed_at": "2019-05-12T09:11:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/512968/57580159-499e1200-74a6-11e9-82b2-ed830a0ae793.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/489", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/489/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/489/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/489/events", "html_url": "https://github.com/pyeve/cerberus/issues/489", "id": 439580894, "node_id": "MDU6SXNzdWU0Mzk1ODA4OTQ=", "number": 489, "title": "Schema file not working anymore with Cerberus 1.3", "user": {"login": "fdeschamps", "id": 32927135, "node_id": "MDQ6VXNlcjMyOTI3MTM1", "avatar_url": "https://avatars2.githubusercontent.com/u/32927135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fdeschamps", "html_url": "https://github.com/fdeschamps", "followers_url": "https://api.github.com/users/fdeschamps/followers", "following_url": "https://api.github.com/users/fdeschamps/following{/other_user}", "gists_url": "https://api.github.com/users/fdeschamps/gists{/gist_id}", "starred_url": "https://api.github.com/users/fdeschamps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fdeschamps/subscriptions", "organizations_url": "https://api.github.com/users/fdeschamps/orgs", "repos_url": "https://api.github.com/users/fdeschamps/repos", "events_url": "https://api.github.com/users/fdeschamps/events{/privacy}", "received_events_url": "https://api.github.com/users/fdeschamps/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-05-02T13:06:08Z", "updated_at": "2019-05-10T15:07:18Z", "closed_at": "2019-05-02T16:03:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: Cerberus 1.3 / Python 3.5.2\r\n\r\n- [ ] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nSince Cerberus 1.3, keyschema and valueschema are deprecated and should still work, but I get an error when using them.\r\n\r\nThe error is gone when using the new keys keysrules and valuesrules.\r\n\r\nHere is my schema :\r\n\r\n```\r\nrequests:\r\n  type: dict\r\n  keyschema:\r\n    type: string\r\n  valueschema:\r\n    type: dict\r\n    schema:\r\n      aggs:\r\n        type: dict\r\n        keyschema:\r\n          type: string\r\n        valueschema:\r\n          type: dict\r\n```\r\n\r\nMy Python code :\r\n\r\n```\r\n#!/usr/bin/env python3\r\n\r\nfrom yaml import load, load_all\r\nfrom cerberus import Validator\r\n\r\nschemafile = \"schema.yml\"\r\n\r\nwith open(schemafile, \"r\") as f:\r\n    schema = load(f)\r\n\r\nv = Validator(schema)\r\n```\r\n\r\nAnd the Python error :\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"./test.py\", line 11, in <module>\r\n    v = Validator(schema)\r\n  File \"/usr/local/lib/python3.5/dist-packages/cerberus/validator.py\", line 181, in __init__\r\n    self.schema = kwargs.get('schema', None)\r\n  File \"/usr/local/lib/python3.5/dist-packages/cerberus/validator.py\", line 562, in schema\r\n    self._schema = DefinitionSchema(self, schema)\r\n  File \"/usr/local/lib/python3.5/dist-packages/cerberus/schema.py\", line 76, in __init__\r\n    self.validate(schema)\r\n  File \"/usr/local/lib/python3.5/dist-packages/cerberus/schema.py\", line 247, in validate\r\n    self._validate(schema)\r\n  File \"/usr/local/lib/python3.5/dist-packages/cerberus/schema.py\", line 263, in _validate\r\n    raise SchemaError(self.schema_validator.errors)\r\ncerberus.schema.SchemaError: {'requests': [{'valuesrules': [{'schema': ['no definitions validate', {'anyof definition 0': [{'aggs': [{'valueschema': ['unknown rule'], 'keyschema': ['unknown rule']}]}], 'anyof definition 1': [{'aggs': ['unknown rule']}]}]}]}]}\r\n```\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\n<!-- describe your issue here -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/488", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/488/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/488/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/488/events", "html_url": "https://github.com/pyeve/cerberus/issues/488", "id": 439351323, "node_id": "MDU6SXNzdWU0MzkzNTEzMjM=", "number": 488, "title": "Python 3.10 support?", "user": {"login": "andreymal", "id": 3236464, "node_id": "MDQ6VXNlcjMyMzY0NjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreymal", "html_url": "https://github.com/andreymal", "followers_url": "https://api.github.com/users/andreymal/followers", "following_url": "https://api.github.com/users/andreymal/following{/other_user}", "gists_url": "https://api.github.com/users/andreymal/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreymal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreymal/subscriptions", "organizations_url": "https://api.github.com/users/andreymal/orgs", "repos_url": "https://api.github.com/users/andreymal/repos", "events_url": "https://api.github.com/users/andreymal/events{/privacy}", "received_events_url": "https://api.github.com/users/andreymal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-01T22:24:47Z", "updated_at": "2019-11-08T22:54:38Z", "closed_at": "2019-11-08T22:54:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>>> import sys\r\n>>> sys.version_info = (3, 10, 0)\r\n>>> import cerberus.platform\r\n>>> print(cerberus.platform.PYTHON_VERSION)\r\n4.0\r\n```\r\n\r\nwat.\r\n\r\nNot sure if Python 3.10 will exist in the future (Python 4.0 will probably be made), but I think this is a bad idea to use a float for the `PYTHON_VERSION` variable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/486", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/486/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/486/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/486/events", "html_url": "https://github.com/pyeve/cerberus/issues/486", "id": 439330497, "node_id": "MDU6SXNzdWU0MzkzMzA0OTc=", "number": 486, "title": "Deprecation with py37, Cerberus 1.3", "user": {"login": "jeking3", "id": 11771245, "node_id": "MDQ6VXNlcjExNzcxMjQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/11771245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeking3", "html_url": "https://github.com/jeking3", "followers_url": "https://api.github.com/users/jeking3/followers", "following_url": "https://api.github.com/users/jeking3/following{/other_user}", "gists_url": "https://api.github.com/users/jeking3/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeking3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeking3/subscriptions", "organizations_url": "https://api.github.com/users/jeking3/orgs", "repos_url": "https://api.github.com/users/jeking3/repos", "events_url": "https://api.github.com/users/jeking3/events{/privacy}", "received_events_url": "https://api.github.com/users/jeking3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-05-01T21:20:40Z", "updated_at": "2019-05-02T07:10:10Z", "closed_at": "2019-05-02T07:10:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\n.tox/py37/lib/python3.7/site-packages/cerberus/errors.py:6: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n```\r\n    from collections import defaultdict, namedtuple, MutableMapping\r\n```\r\n\r\nUsed Cerberus version / latest commit:1.3\r\n\r\n- [ ] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\n<!-- please summarize your use-case -->\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\n<!-- describe your issue here -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/484", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/484/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/484/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/484/events", "html_url": "https://github.com/pyeve/cerberus/issues/484", "id": 438945474, "node_id": "MDU6SXNzdWU0Mzg5NDU0NzQ=", "number": 484, "title": "*of_check_with results in SchemaError due to unknown rule", "user": {"login": "jasongraham", "id": 399471, "node_id": "MDQ6VXNlcjM5OTQ3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/399471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasongraham", "html_url": "https://github.com/jasongraham", "followers_url": "https://api.github.com/users/jasongraham/followers", "following_url": "https://api.github.com/users/jasongraham/following{/other_user}", "gists_url": "https://api.github.com/users/jasongraham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasongraham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasongraham/subscriptions", "organizations_url": "https://api.github.com/users/jasongraham/orgs", "repos_url": "https://api.github.com/users/jasongraham/repos", "events_url": "https://api.github.com/users/jasongraham/events{/privacy}", "received_events_url": "https://api.github.com/users/jasongraham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/8", "html_url": "https://github.com/pyeve/cerberus/milestone/8", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/8/labels", "id": 4110096, "node_id": "MDk6TWlsZXN0b25lNDExMDA5Ng==", "number": 8, "title": "1.3.1", "description": "", "creator": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2019-03-04T20:58:03Z", "updated_at": "2019-08-10T15:09:11Z", "due_on": null, "closed_at": "2019-08-10T15:09:11Z"}, "comments": 1, "created_at": "2019-04-30T19:43:00Z", "updated_at": "2019-05-01T07:10:03Z", "closed_at": "2019-05-01T07:10:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: **1.3**\r\n\r\n- [ ] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nI'm attempting to replace the usage of `validator`s within my schemas with `check_with`.\r\n\r\nI've run into a problem trying to use `*of_check_with`.\r\n\r\nMy previous usage of `*of_validator` did indeed work just fine, and I would like to continue using this pattern.\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nAttempting to use `check-with` in place of `validator` within an [`*of` typesaver](http://docs.python-cerberus.org/en/stable/validation-rules.html#of-rules-typesaver) structure results in a `SchemaError` being raised.\r\n\r\nExample contents of `test.py`\r\n```python\r\nimport cerberus\r\n\r\n# Arbitrary dummy validators\r\ndef foo(field, value, error):\r\n    ...\r\n\r\ndef bar(field, value, error):\r\n    ...\r\n\r\nschema = {\r\n    \"a\": {\r\n        # Also fails with oneof, allof, noneof\r\n        # replacing with *of_validator works\r\n        \"anyof_check_with\": [foo, bar]\r\n    }\r\n}\r\n\r\ncerberus.Validator(schema)\r\n```\r\n\r\nResult: of running `python test.py`\r\n```python\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 20, in <module>\r\n    cerberus.Validator(schema)\r\n  File .../python3.7/site-packages/cerberus/validator.py\", line 181, in __init__\r\n    self.schema = kwargs.get('schema', None)\r\n  File \".../python3.7/site-packages/cerberus/validator.py\", line 562, in schema\r\n    self._schema = DefinitionSchema(self, schema)\r\n  File \".../python3.7/site-packages/cerberus/schema.py\", line 76, in __init__\r\n    self.validate(schema)\r\n  File \".../python3.7/site-packages/cerberus/schema.py\", line 247, in validate\r\n    self._validate(schema)\r\n  File \".../python3.7/site-packages/cerberus/schema.py\", line 263, in _validate\r\n    raise SchemaError(self.schema_validator.errors)\r\ncerberus.schema.SchemaError: {'a': [{'anyof_check_with': ['unknown rule']}]}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/482", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/482/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/482/events", "html_url": "https://github.com/pyeve/cerberus/issues/482", "id": 438797009, "node_id": "MDU6SXNzdWU0Mzg3OTcwMDk=", "number": 482, "title": "Deprecation of keyschema and valueschema does not work when in subschema", "user": {"login": "ningirsu", "id": 7975575, "node_id": "MDQ6VXNlcjc5NzU1NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7975575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ningirsu", "html_url": "https://github.com/ningirsu", "followers_url": "https://api.github.com/users/ningirsu/followers", "following_url": "https://api.github.com/users/ningirsu/following{/other_user}", "gists_url": "https://api.github.com/users/ningirsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ningirsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ningirsu/subscriptions", "organizations_url": "https://api.github.com/users/ningirsu/orgs", "repos_url": "https://api.github.com/users/ningirsu/repos", "events_url": "https://api.github.com/users/ningirsu/events{/privacy}", "received_events_url": "https://api.github.com/users/ningirsu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/8", "html_url": "https://github.com/pyeve/cerberus/milestone/8", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/8/labels", "id": 4110096, "node_id": "MDk6TWlsZXN0b25lNDExMDA5Ng==", "number": 8, "title": "1.3.1", "description": "", "creator": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2019-03-04T20:58:03Z", "updated_at": "2019-08-10T15:09:11Z", "due_on": null, "closed_at": "2019-08-10T15:09:11Z"}, "comments": 1, "created_at": "2019-04-30T14:06:18Z", "updated_at": "2019-05-10T07:23:41Z", "closed_at": "2019-05-01T07:10:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nUsed Cerberus version 1.3\r\n\r\n#### Bug report / Feature request\r\n\r\nDepreciation of the rule `keyschema` and `valueschema` does not work properly when in a subschema of `valueschema` or `keyschema` on itself:\r\n\r\nThis snipet will not work for instance:\r\n\r\n```python\r\nschema = {\r\n    \"a\": {\r\n        'type': 'dict',\r\n        'valueschema': {\r\n            'type': 'dict',\r\n            'keyschema': {\r\n                'type': 'string',\r\n            },\r\n            'valueschema': {\r\n                'type': 'string'\r\n            },\r\n        }\r\n    }\r\n}\r\ncerberus.Validator(schema)\r\n```\r\n\r\nOutput will be:\r\n\r\n```\r\n(BackEnd)  moutix@pistache ~/project/BackEnd (*feature/cerberus-upgrade) $ python testcerberus.py \r\nTraceback (most recent call last):\r\n  File \"testcerberus.py\", line 36, in <module>\r\n    cerberus.Validator(schema)\r\n  File \"/home/moutix/.virtualenvs/BackEnd/lib/python3.6/site-packages/cerberus/validator.py\", line 181, in __init__\r\n    self.schema = kwargs.get('schema', None)\r\n  File \"/home/moutix/.virtualenvs/BackEnd/lib/python3.6/site-packages/cerberus/validator.py\", line 562, in schema\r\n    self._schema = DefinitionSchema(self, schema)\r\n  File \"/home/moutix/.virtualenvs/BackEnd/lib/python3.6/site-packages/cerberus/schema.py\", line 76, in __init__\r\n    self.validate(schema)\r\n  File \"/home/moutix/.virtualenvs/BackEnd/lib/python3.6/site-packages/cerberus/schema.py\", line 247, in validate\r\n    self._validate(schema)\r\n  File \"/home/moutix/.virtualenvs/BackEnd/lib/python3.6/site-packages/cerberus/schema.py\", line 263, in _validate\r\n    raise SchemaError(self.schema_validator.errors)\r\ncerberus.schema.SchemaError: {'a': [{'valuesrules': [{'keyschema': ['unknown rule'], 'valueschema': ['unknown rule']}]}]}\r\n```\r\n\r\nWhen setting with `valuesrule`, it will properly work:\r\n\r\n```python\r\nimport cerberus\r\n\r\nschema = {\r\n    \"a\": {\r\n        'type': 'dict',\r\n        'valuesrules': {\r\n            'type': 'dict',\r\n            'keysrules': {\r\n                'type': 'string',\r\n            },\r\n            'valuesrules': {\r\n                'type': 'string'\r\n            },\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/481", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/481/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/481/events", "html_url": "https://github.com/pyeve/cerberus/issues/481", "id": 438689785, "node_id": "MDU6SXNzdWU0Mzg2ODk3ODU=", "number": 481, "title": "Add maintainer metadata to setup.py", "user": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-30T09:45:58Z", "updated_at": "2019-04-30T09:51:04Z", "closed_at": "2019-04-30T09:51:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Since I forgot to add it for the last two releases...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/480", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/480/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/480/events", "html_url": "https://github.com/pyeve/cerberus/issues/480", "id": 438689222, "node_id": "MDU6SXNzdWU0Mzg2ODkyMjI=", "number": 480, "title": "Add project_urls to setup.py", "user": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-30T09:44:48Z", "updated_at": "2019-04-30T09:51:04Z", "closed_at": "2019-04-30T09:51:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Like we did with Eve. They will show up on PyPI:\r\n\r\n![image](https://user-images.githubusercontent.com/512968/56953562-246fe200-6b3d-11e9-99dc-3ca84c87dfb8.png)\r\n\r\nAdding the github reference will also allow PyPI to pick up project statics:\r\n\r\n![image](https://user-images.githubusercontent.com/512968/56953662-584b0780-6b3d-11e9-8190-2946cf23eff0.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/478", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/478/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/478/events", "html_url": "https://github.com/pyeve/cerberus/issues/478", "id": 437817339, "node_id": "MDU6SXNzdWU0Mzc4MTczMzk=", "number": 478, "title": "New Release - Python 3.7 Support?", "user": {"login": "leonsmith", "id": 219717, "node_id": "MDQ6VXNlcjIxOTcxNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/219717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonsmith", "html_url": "https://github.com/leonsmith", "followers_url": "https://api.github.com/users/leonsmith/followers", "following_url": "https://api.github.com/users/leonsmith/following{/other_user}", "gists_url": "https://api.github.com/users/leonsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonsmith/subscriptions", "organizations_url": "https://api.github.com/users/leonsmith/orgs", "repos_url": "https://api.github.com/users/leonsmith/repos", "events_url": "https://api.github.com/users/leonsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/leonsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-26T19:39:03Z", "updated_at": "2019-05-01T13:11:34Z", "closed_at": "2019-05-01T13:11:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: 1.2 \r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve. _(I don't actaully know what this question is asking but that might just be my poor english skills)_\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nI have another library using this amazing package but would like to support 3.7 whilst cerberus lastest release only supports up to python 3.6.\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nLooks like the last release was back in April last year and considering this has a passing test suite with 3.7 it would be super cool to get a point release out with 3.7 support.\r\n\r\nAnything I can do to help get this rolling? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/477", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/477/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/477/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/477/events", "html_url": "https://github.com/pyeve/cerberus/issues/477", "id": 434755867, "node_id": "MDU6SXNzdWU0MzQ3NTU4Njc=", "number": 477, "title": "No validation schema is defined for the arguments", "user": {"login": "tallesl", "id": 3655047, "node_id": "MDQ6VXNlcjM2NTUwNDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3655047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tallesl", "html_url": "https://github.com/tallesl", "followers_url": "https://api.github.com/users/tallesl/followers", "following_url": "https://api.github.com/users/tallesl/following{/other_user}", "gists_url": "https://api.github.com/users/tallesl/gists{/gist_id}", "starred_url": "https://api.github.com/users/tallesl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tallesl/subscriptions", "organizations_url": "https://api.github.com/users/tallesl/orgs", "repos_url": "https://api.github.com/users/tallesl/repos", "events_url": "https://api.github.com/users/tallesl/events{/privacy}", "received_events_url": "https://api.github.com/users/tallesl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-18T12:55:04Z", "updated_at": "2019-04-19T10:44:40Z", "closed_at": "2019-04-19T10:44:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why if I remove the docstring in the [docs example](http://docs.python-cerberus.org/en/stable/customize.html#custom-rules) I got the warning below?\r\n\r\n> UserWarning: No validation schema is defined for the arguments of rule 'isodd'\r\n\r\n(looks like it's coming from [here](https://github.com/pyeve/cerberus/blob/eb1012f4d9200b0e662faed9cc3132f616445fcc/cerberus/validator.py#L1608))\r\n\r\n[On eve documentation the docstring is absent by the way](https://docs.python-eve.org/en/stable/validation.html#custom-validation-rules).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/476", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/476/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/476/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/476/events", "html_url": "https://github.com/pyeve/cerberus/issues/476", "id": 434736783, "node_id": "MDU6SXNzdWU0MzQ3MzY3ODM=", "number": 476, "title": "Using min and max with datetimes", "user": {"login": "tallesl", "id": 3655047, "node_id": "MDQ6VXNlcjM2NTUwNDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3655047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tallesl", "html_url": "https://github.com/tallesl", "followers_url": "https://api.github.com/users/tallesl/followers", "following_url": "https://api.github.com/users/tallesl/following{/other_user}", "gists_url": "https://api.github.com/users/tallesl/gists{/gist_id}", "starred_url": "https://api.github.com/users/tallesl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tallesl/subscriptions", "organizations_url": "https://api.github.com/users/tallesl/orgs", "repos_url": "https://api.github.com/users/tallesl/repos", "events_url": "https://api.github.com/users/tallesl/events{/privacy}", "received_events_url": "https://api.github.com/users/tallesl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-18T12:07:38Z", "updated_at": "2019-04-19T10:48:06Z", "closed_at": "2019-04-19T10:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to use the `min` and `max` validation rules against `datetime` datatype?\r\n\r\nI imagine this would be fairly trivial to support out of the box, but eve documentation indicates that there isn't:\r\n\r\n> Minimum and maximum values allowed for `integer`, `float` and `number` types.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/475", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/475/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/475/events", "html_url": "https://github.com/pyeve/cerberus/issues/475", "id": 423916016, "node_id": "MDU6SXNzdWU0MjM5MTYwMTY=", "number": 475, "title": "`BAD_TYPE` error on valid registered data type", "user": {"login": "rawrgulmuffins", "id": 1521575, "node_id": "MDQ6VXNlcjE1MjE1NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1521575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rawrgulmuffins", "html_url": "https://github.com/rawrgulmuffins", "followers_url": "https://api.github.com/users/rawrgulmuffins/followers", "following_url": "https://api.github.com/users/rawrgulmuffins/following{/other_user}", "gists_url": "https://api.github.com/users/rawrgulmuffins/gists{/gist_id}", "starred_url": "https://api.github.com/users/rawrgulmuffins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rawrgulmuffins/subscriptions", "organizations_url": "https://api.github.com/users/rawrgulmuffins/orgs", "repos_url": "https://api.github.com/users/rawrgulmuffins/repos", "events_url": "https://api.github.com/users/rawrgulmuffins/events{/privacy}", "received_events_url": "https://api.github.com/users/rawrgulmuffins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-21T20:00:19Z", "updated_at": "2019-03-22T10:18:19Z", "closed_at": "2019-03-22T10:18:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: \u2026\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nExtending Cerberus with a custom data type as described [here](http://docs.python-cerberus.org/en/stable/customize.html#custom-data-types)\r\n\r\n#### Bug report\r\n\r\nI'm attempting to add custom data types to [Cerberus](https://github.com/pyeve/cerberus). The UUID class works as expected (it's a standard library class) but I'm not able to validate with the UUID type using Cerberus.\r\n\r\nSecondarily I was not able to register multiple types in an an `__init__` function but that probably should be it's own question.\r\n\r\nHere's my custom validator that should register the given types.\r\n\r\n```\r\nimport cerberus\r\n\r\nclass UUID:\r\n    name = \"UUID\"\r\n\r\n    def __init__(self, potential_uuid: str):\r\n        self.uuid = uuid.UUID(potential_uuid)\r\n\r\n    def __str__(self):\r\n        return str(self.uuid)\r\n\r\nclass Validator(cerberus.Validator):\r\n    def _register_types(self) -> cerberus.Validator.types_mapping:\r\n        types_mapping = Validator.types_mapping.copy()\r\n        for schema_type in datatypes.ALL_TYPES:\r\n            cerberus_type = cerberus.TypeDefinition(\r\n                schema_type.name,\r\n                (schema_type,),\r\n                ())\r\n            types_mapping[schema_type.name] = cerberus_type\r\n        return types_mapping\r\n\r\n    cerberus_type = cerberus.TypeDefinition(\r\n        \"UUID\",\r\n        (datatypes.UUID,),\r\n        ())\r\n    types_mapping = cerberus.Validator.types_mapping.copy()\r\n    types_mapping[\"UUID\"] = cerberus_type\r\n\r\n    #def __init__(self, *args, **kwargs ):\r\n    #    types_mapping = self._register_types()\r\n    #    super().__init__(*args, **kwargs)\r\n\r\n```\r\n\r\nAnd here's my unit tests for this code.\r\n```\r\n@pytest.mark.unit\r\ndef test_valid_uuid():\r\n    test_input = \"35d6d5a0-6f37-4794-a493-2712eda41c1a\"\r\n    actual = UUID(test_input)\r\n    assert str(actual) == \"35d6d5a0-6f37-4794-a493-2712eda41c1a\"\r\n\r\n@pytest.mark.unit\r\ndef test_invalid_uuid():\r\n    test_input = \"Not a Valid UUID\"\r\n    with pytest.raises(ValueError):\r\n        actual = UUID(test_input) \r\n\r\n@pytest.mark.unit\r\ndef test_uuid_type_registration():\r\n    test_schema = {\"test_name\": {\"type\": \"UUID\"}}\r\n    validator = Validator(test_schema)\r\n    test_record = {\"test_name\": \"35d6d5a0-6f37-4794-a493-2712eda41c1a\"}\r\n    result = validator.validate(test_record)\r\n    print(validator._errors)\r\n    assert result == True\r\n\r\n```\r\n\r\nIf we just give the UUID class a valid UUID it succeeds but if we attempt to validate it through Cerberus we get a `BAD_TYPE` validation error.\r\n\r\n```\r\npytest tests/test_datatypes/test_datatypes.py\r\n============================================================================================================================= test session starts ==============================================================================================================================\r\nplatform linux -- Python 3.7.2, pytest-4.3.1, py-1.8.0, pluggy-0.9.0\r\nbenchmark: 3.2.2 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\r\nrootdir: /home/vdev, inifile: setup.cfg\r\nplugins: cov-2.6.1, benchmark-3.2.2\r\ncollected 4 items\r\n\r\ntests/test_datatypes/test_datatypes.py ...F                                                                                                                                                                                                                              [100%]\r\n\r\n=================================================================================================================================== FAILURES ===================================================================================================================================\r\n_________________________________________________________________________________________________________________________ test_uuid_type_registration __________________________________________________________________________________________________________________________\r\n\r\n    @pytest.mark.unit\r\n    def test_uuid_type_registration():\r\n        test_schema = {\"test_name\": {\"type\": \"UUID\"}}\r\n        validator = Validator(test_schema)\r\n        test_record = {\"test_name\": \"35d6d5a0-6f37-4794-a493-2712eda41c1a\"}\r\n        result = validator.validate(test_record)\r\n        print(validator._errors)\r\n>       assert result == True\r\nE       assert False == True\r\n\r\ntests/test_datatypes/test_datatypes.py:30: AssertionError\r\n----------------------------------------------------------------------------------------------------------------------------- Captured stdout call -----------------------------------------------------------------------------------------------------------------------------\r\n[ValidationError @ 0x7fa477e10278 ( document_path=('test_name',),schema_path=('test_name', 'type'),code=0x24,constraint=\"UUID\",value=\"35d6d5a0-6f37-4794-a493-2712eda41c1a\",info=() )]\r\n=============================================================================================================================== warnings summary ===============================================================================================================================\r\n/usr/local/lib/python3.7/site-packages/cerberus/validator.py:14\r\n/usr/local/lib/python3.7/site-packages/cerberus/validator.py:14\r\n/usr/local/lib/python3.7/site-packages/cerberus/validator.py:14\r\n/usr/local/lib/python3.7/site-packages/cerberus/validator.py:14\r\n  /usr/local/lib/python3.7/site-packages/cerberus/validator.py:14: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import Hashable, Iterable, Mapping, Sequence\r\n\r\n/usr/local/lib/python3.7/site-packages/cerberus/errors.py:6\r\n  /usr/local/lib/python3.7/site-packages/cerberus/errors.py:6: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import defaultdict, namedtuple, MutableMapping\r\n\r\n/usr/local/lib/python3.7/site-packages/cerberus/schema.py:3\r\n  /usr/local/lib/python3.7/site-packages/cerberus/schema.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import (Callable, Hashable, Iterable, Mapping,\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n================================================================================================================ 1 failed, 3 passed, 6 warnings in 0.33 seconds ===============================================================================================================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/474", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/474/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/474/events", "html_url": "https://github.com/pyeve/cerberus/issues/474", "id": 423010689, "node_id": "MDU6SXNzdWU0MjMwMTA2ODk=", "number": 474, "title": "Forcing endswith(\u2018$\u2019) for regex blocks some scenarios", "user": {"login": "Nemesis7", "id": 3630904, "node_id": "MDQ6VXNlcjM2MzA5MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3630904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemesis7", "html_url": "https://github.com/Nemesis7", "followers_url": "https://api.github.com/users/Nemesis7/followers", "following_url": "https://api.github.com/users/Nemesis7/following{/other_user}", "gists_url": "https://api.github.com/users/Nemesis7/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemesis7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemesis7/subscriptions", "organizations_url": "https://api.github.com/users/Nemesis7/orgs", "repos_url": "https://api.github.com/users/Nemesis7/repos", "events_url": "https://api.github.com/users/Nemesis7/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemesis7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-03-20T00:18:10Z", "updated_at": "2019-03-21T16:53:41Z", "closed_at": "2019-03-21T16:53:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: 1.2\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [x] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nBy forcing the dollar sign at the end of a regular expression, a negative lookbehind scenario will not work, example: http://www.learningaboutelectronics.com/Articles/Negative-look-behind-regular-expression-in-Python.php\r\n\r\nBy doung this, you\u2019ll never detect if there are violations in the rest of the string.\r\n\r\n#### Bug report / Feature request\r\nRemove the endswith(\u2018$\u2019) requirement from regex validation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/471", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/471/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/471/events", "html_url": "https://github.com/pyeve/cerberus/issues/471", "id": 418497452, "node_id": "MDU6SXNzdWU0MTg0OTc0NTI=", "number": 471, "title": "Set __version__ to an invalid value if package distribution is not found", "user": {"login": "s4heid", "id": 8442432, "node_id": "MDQ6VXNlcjg0NDI0MzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8442432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s4heid", "html_url": "https://github.com/s4heid", "followers_url": "https://api.github.com/users/s4heid/followers", "following_url": "https://api.github.com/users/s4heid/following{/other_user}", "gists_url": "https://api.github.com/users/s4heid/gists{/gist_id}", "starred_url": "https://api.github.com/users/s4heid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s4heid/subscriptions", "organizations_url": "https://api.github.com/users/s4heid/orgs", "repos_url": "https://api.github.com/users/s4heid/repos", "events_url": "https://api.github.com/users/s4heid/events{/privacy}", "received_events_url": "https://api.github.com/users/s4heid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-07T20:25:35Z", "updated_at": "2019-03-16T14:07:42Z", "closed_at": "2019-03-16T13:52:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: master\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [x] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nI want to use Cerberus without installing it, e.g. vendorized as a git submodule.\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nWhen attempting to use the cerberus repo as a git submodule in a project, users are going to get a `DistributionNotFound` error, because the [get_distribution()](https://github.com/pyeve/cerberus/blob/f4b78f8a9002b6464eaf1a5ee714986621be3497/cerberus/__init__.py#L20) method in the `__init__.py` file cannot retrieve the distribution of the package.\r\n\r\nSee stack trace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n...\r\n    from cerberus import Validator\r\n  File \"/Users/s4heid/workspace/some-project/lib/cerberus/cerberus/__init__.py\", line 24, in <module>\r\n    __version__ = pkg_resources.get_distribution('Cerberus').version\r\n  File \"/usr/local/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 481, in get_distribution\r\n    dist = get_provider(dist)\r\n  File \"/usr/local/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 357, in get_provider\r\n    return working_set.find(moduleOrReq) or require(str(moduleOrReq))[0]\r\n  File \"/usr/local/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 900, in require\r\n    needed = self.resolve(parse_requirements(requirements))\r\n  File \"/usr/local/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 786, in resolve\r\n    raise DistributionNotFound(req, requirers)\r\npkg_resources.DistributionNotFound: The 'Cerberus' distribution was not found and is required by the application\r\n```\r\n\r\nI currently workaround this issue by manually setting `__version__` to some string.\r\n\r\nI would expect that if `pkg_resources.DistributionNotFound` is raised, the exception is getting catched and `__version__` set to an invalid version string which won't break your source installation and at the same time indicate that something is broken if the distribution cannot be found.\r\n\r\nThe  name of the version string could be something like `unknown`, which I've seen in other projects as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/468", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/468/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/468/events", "html_url": "https://github.com/pyeve/cerberus/issues/468", "id": 417005905, "node_id": "MDU6SXNzdWU0MTcwMDU5MDU=", "number": 468, "title": "`DeprecationWarning`s referenced in #450 in latest release", "user": {"login": "rawrgulmuffins", "id": 1521575, "node_id": "MDQ6VXNlcjE1MjE1NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1521575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rawrgulmuffins", "html_url": "https://github.com/rawrgulmuffins", "followers_url": "https://api.github.com/users/rawrgulmuffins/followers", "following_url": "https://api.github.com/users/rawrgulmuffins/following{/other_user}", "gists_url": "https://api.github.com/users/rawrgulmuffins/gists{/gist_id}", "starred_url": "https://api.github.com/users/rawrgulmuffins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rawrgulmuffins/subscriptions", "organizations_url": "https://api.github.com/users/rawrgulmuffins/orgs", "repos_url": "https://api.github.com/users/rawrgulmuffins/repos", "events_url": "https://api.github.com/users/rawrgulmuffins/events{/privacy}", "received_events_url": "https://api.github.com/users/rawrgulmuffins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/7", "html_url": "https://github.com/pyeve/cerberus/milestone/7", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/7/labels", "id": 3390378, "node_id": "MDk6TWlsZXN0b25lMzM5MDM3OA==", "number": 7, "title": "1.2.1", "description": "", "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 17, "state": "closed", "created_at": "2018-05-31T13:24:36Z", "updated_at": "2019-08-10T15:09:01Z", "due_on": null, "closed_at": "2019-08-10T15:09:01Z"}, "comments": 2, "created_at": "2019-03-04T21:42:57Z", "updated_at": "2019-03-05T21:57:42Z", "closed_at": "2019-03-05T21:57:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\nUsed Cerberus version / latest commit: \u2026\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n\r\n#### Bug report / Feature request\r\n\r\nRunning Cerberus on Python 3.7.2 produces a set of `DeprecationWarning`s. A cursory glance at the issue titles pointed to #450 being closed. To me this means that this is still an issue that will break in the 3.8 release despite the closed issue.\r\n\r\n```\r\n============================================================================ test session starts ============================================================================\r\nplatform linux -- Python 3.7.2, pytest-4.3.0, py-1.8.0, pluggy-0.9.0\r\nbenchmark: 3.2.2 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\r\nrootdir: /home/vdev, inifile: setup.cfg\r\nplugins: cov-2.6.1, benchmark-3.2.2\r\ncollected 1 item\r\n\r\nvalidation_demos/test_cerberus.py .                                                                                                                                   [100%]\r\n\r\n============================================================================= warnings summary ==============================================================================\r\n/usr/local/lib/python3.7/site-packages/cerberus/validator.py:14\r\n/usr/local/lib/python3.7/site-packages/cerberus/validator.py:14\r\n/usr/local/lib/python3.7/site-packages/cerberus/validator.py:14\r\n/usr/local/lib/python3.7/site-packages/cerberus/validator.py:14\r\n  /usr/local/lib/python3.7/site-packages/cerberus/validator.py:14: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import Hashable, Iterable, Mapping, Sequence\r\n\r\n/usr/local/lib/python3.7/site-packages/cerberus/errors.py:6\r\n  /usr/local/lib/python3.7/site-packages/cerberus/errors.py:6: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import defaultdict, namedtuple, MutableMapping\r\n\r\n/usr/local/lib/python3.7/site-packages/cerberus/schema.py:3\r\n  /usr/local/lib/python3.7/site-packages/cerberus/schema.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import (Callable, Hashable, Iterable, Mapping,\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n=================================================================== 1 passed, 6 warnings in 0.13 seconds ====================================================================\r\n```\r\n\r\n```\r\nvdev@2c17c47f1172:~$ pip list\r\nPackage          Version\r\n---------------- -------\r\natomicwrites     1.3.0\r\nattrs            18.2.0\r\nCerberus         1.2\r\ncoverage         4.5.2\r\ndocopt           0.6.2\r\nentrypoints      0.3\r\nflake8           3.7.7\r\njsonschema       3.0.1\r\nmccabe           0.6.1\r\nmore-itertools   6.0.0\r\nmypy             0.670\r\nmypy-extensions  0.4.1\r\npip              19.0.3\r\npluggy           0.9.0\r\npy               1.8.0\r\npy-cpuinfo       4.0.0\r\npycodestyle      2.5.0\r\npyflakes         2.1.1\r\npykwalify        1.7.0\r\npyrsistent       0.14.11\r\npytest           4.3.0\r\npytest-benchmark 3.2.2\r\npytest-cov       2.6.1\r\npython-dateutil  2.8.0\r\nPyYAML           3.13\r\nruamel.yaml      0.15.89\r\nsetuptools       40.8.0\r\nsix              1.12.0\r\nstrict-rfc3339   0.7\r\ntyped-ast        1.3.1\r\nvoluptuous       0.11.5\r\nwheel            0.33.1\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/467", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/467/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/467/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/467/events", "html_url": "https://github.com/pyeve/cerberus/issues/467", "id": 414780320, "node_id": "MDU6SXNzdWU0MTQ3ODAzMjA=", "number": 467, "title": "Validating fields in the context of others / uniqueness list issue", "user": {"login": "decentral1se", "id": 1991377, "node_id": "MDQ6VXNlcjE5OTEzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1991377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentral1se", "html_url": "https://github.com/decentral1se", "followers_url": "https://api.github.com/users/decentral1se/followers", "following_url": "https://api.github.com/users/decentral1se/following{/other_user}", "gists_url": "https://api.github.com/users/decentral1se/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentral1se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentral1se/subscriptions", "organizations_url": "https://api.github.com/users/decentral1se/orgs", "repos_url": "https://api.github.com/users/decentral1se/repos", "events_url": "https://api.github.com/users/decentral1se/events{/privacy}", "received_events_url": "https://api.github.com/users/decentral1se/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-26T19:31:34Z", "updated_at": "2019-03-01T15:08:50Z", "closed_at": "2019-02-28T11:38:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version 1.2\r\n\r\n---\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nSupport validation of fields in the context of the entire schema.\r\n\r\n#### Bug report / Feature request\r\n\r\nIn https://github.com/ansible/molecule/pull/1775, I needed to validate that the `name` key in the following schema has unique values. An example of the schema is:\r\n\r\n```\r\nplatforms_docker_schema = {\r\n    'platforms': {\r\n        'type': 'list',\r\n        'schema': {\r\n            'type': 'dict',\r\n            'schema': {\r\n                'name': {\r\n                    'type': 'string',\r\n                },\r\n                ...\r\n    }\r\n}\r\n```\r\n\r\nMy solution involved adding a `'unique_keys': ['name'],` entry and then implementing a `_validate_unique_key`. However, there are two issues with this: 1) I cannot easily evaulate the name values in the context of the entire `platforms` name list (see https://github.com/ansible/molecule/pull/1775/files#diff-1e67bc3147c69bed463615849b56f3b1R948) 2) I cannot suppress duplicate uniqueness validation errors (see test in https://github.com/ansible/molecule/pull/1775/files#diff-ce21a0f23fce9df819e6b6241b30826aR39.\r\n\r\nSo, I would like to see if we can improve the API for my use case. Perhaps we can work on a 'list uniqueness' validator in core? Or some simpler solution?\r\n\r\nAnyway, I'm new to Cerberus but here's my problem so far. \r\n\r\nThanks for reading :+1: \r\n\r\nSome references that I found while searching:\r\n  * https://github.com/pyeve/eve/issues/295\r\n  * https://github.com/pyeve/cerberus/issues/60", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/466", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/466/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/466/events", "html_url": "https://github.com/pyeve/cerberus/issues/466", "id": 412472760, "node_id": "MDU6SXNzdWU0MTI0NzI3NjA=", "number": 466, "title": "`validator:` rule as string does not work", "user": {"login": "jeking3", "id": 11771245, "node_id": "MDQ6VXNlcjExNzcxMjQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/11771245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeking3", "html_url": "https://github.com/jeking3", "followers_url": "https://api.github.com/users/jeking3/followers", "following_url": "https://api.github.com/users/jeking3/following{/other_user}", "gists_url": "https://api.github.com/users/jeking3/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeking3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeking3/subscriptions", "organizations_url": "https://api.github.com/users/jeking3/orgs", "repos_url": "https://api.github.com/users/jeking3/repos", "events_url": "https://api.github.com/users/jeking3/events{/privacy}", "received_events_url": "https://api.github.com/users/jeking3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-02-20T15:04:50Z", "updated_at": "2019-02-27T21:07:34Z", "closed_at": "2019-02-27T21:06:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: \u2026\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\n<!-- please summarize your use-case -->\r\nI want to make a subclass of cerberus.Validator has to work with a schema that is read in from a file, and that validates the contents of a field using a custom validator.  Given the schema is read in from a file, I cannot specify the field validator as a `callable`.\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\n<!-- describe your issue here -->\r\nThe documentation states that a field validator rule can be either a `callable`, or `string`, or `list` containing either.  The `callable` seems to work okay, however using a `string` yields:\r\n\r\n```\r\ncerberus.schema.SchemaError: \r\n    {'size': [{'validator': ['none or more than one rule validate', \r\n            {'oneof definition 0': ['must be of callable type'], \r\n             'oneof definition 1': ['must be of list type'], \r\n             'oneof definition 2': ['unallowed value size_func']}]}]}\r\n```\r\n\r\nThis happens with cerberus 1.2 and with master.  Note the \"unallowed value size_func\" which is strange, because the cerberus _validate_validator docstring schema appears to allow for this case.\r\n\r\nExample:\r\n```\r\n#!/usr/bin/env python3\r\nimport humanfriendly\r\nimport sys\r\nfrom cerberus import Validator\r\n\r\nclass CustomValidator(Validator):\r\n    def _validate_size_func(self, field, value, error):\r\n        \"\"\" {'type': ['integer', 'string']} \"\"\"\r\n        try:\r\n            humanfriendly.parse_size(value, binary=True)\r\n        except humanfriendly.InvalidSize:\r\n            error(field, 'invalid size')\r\n\r\nschema = {\r\n    'size': {\r\n        'validator': 'size_func'\r\n    }\r\n}\r\n\r\nuut = CustomValidator(schema=schema)\r\nif not uut.validate({'size': '10mb'}):\r\n    sys.exit(1)\r\nprint('ok')\r\n```\r\n\r\nThe example in the documentation has a string with a space in it, `prime number`, and I'm not sure how that would be mapped to a class `_validate_` method.  I suppose a workaround to this case is to use a rule instead of a validator:\r\n```\r\nschema = {\r\n    'size': {\r\n        'type': ['integer', 'string'],\r\n        'size': True\r\n    }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/465", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/465/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/465/events", "html_url": "https://github.com/pyeve/cerberus/issues/465", "id": 410267434, "node_id": "MDU6SXNzdWU0MTAyNjc0MzQ=", "number": 465, "title": "Dependencies allowing dict and list", "user": {"login": "kaushikkv", "id": 31644286, "node_id": "MDQ6VXNlcjMxNjQ0Mjg2", "avatar_url": "https://avatars1.githubusercontent.com/u/31644286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaushikkv", "html_url": "https://github.com/kaushikkv", "followers_url": "https://api.github.com/users/kaushikkv/followers", "following_url": "https://api.github.com/users/kaushikkv/following{/other_user}", "gists_url": "https://api.github.com/users/kaushikkv/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaushikkv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaushikkv/subscriptions", "organizations_url": "https://api.github.com/users/kaushikkv/orgs", "repos_url": "https://api.github.com/users/kaushikkv/repos", "events_url": "https://api.github.com/users/kaushikkv/events{/privacy}", "received_events_url": "https://api.github.com/users/kaushikkv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-14T12:02:53Z", "updated_at": "2019-02-26T18:32:15Z", "closed_at": "2019-02-26T18:32:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "currently dependencies key supports one of list of dict of elements. Can this be enhanced to allow both, or allow regex inside dependency key.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/461", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/461/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/461/events", "html_url": "https://github.com/pyeve/cerberus/issues/461", "id": 394559750, "node_id": "MDU6SXNzdWUzOTQ1NTk3NTA=", "number": 461, "title": "`empty` doesn't work with custom rules", "user": {"login": "solo-framework", "id": 726433, "node_id": "MDQ6VXNlcjcyNjQzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/726433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solo-framework", "html_url": "https://github.com/solo-framework", "followers_url": "https://api.github.com/users/solo-framework/followers", "following_url": "https://api.github.com/users/solo-framework/following{/other_user}", "gists_url": "https://api.github.com/users/solo-framework/gists{/gist_id}", "starred_url": "https://api.github.com/users/solo-framework/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solo-framework/subscriptions", "organizations_url": "https://api.github.com/users/solo-framework/orgs", "repos_url": "https://api.github.com/users/solo-framework/repos", "events_url": "https://api.github.com/users/solo-framework/events{/privacy}", "received_events_url": "https://api.github.com/users/solo-framework/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-28T06:33:03Z", "updated_at": "2019-01-14T14:53:48Z", "closed_at": "2019-01-14T14:53:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus : 1.2\r\n\r\n- [ ] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nValidator doesn't skip checking custom rules if value is empty and `empty` rule is set\r\nI expect the validator will not execute the custom rule if the value is empty\r\n\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\n<!-- describe your issue here -->\r\nThere is custome rule:\r\n\r\n```\r\nclass MyValidator(Validator):\r\n\t\tdef _validate_myrule(self, myrule, field, value):\r\n\t\t\t\"\"\" Test the oddity of a value.\r\n\t\t\t\r\n\t\t\t{'type': 'boolean'}\r\n\t\t\t\"\"\"\r\n\t\t\tif myrule != \"myrule\":\r\n\t\t\t\tself._error(field, \"Must be 'myrule' string\")\r\n```\r\nData & schema\r\n\r\n```\r\nschema = {'num': {'type': 'string',\r\n\t                   'empty': True,\r\n\t                   'myrule': True,\r\n\t                   'required': False\r\n\t                   }}\r\ndocument = {'num': ''}\r\nv = MyValidator(schema)\r\nv.validate(document)\r\n```\r\n\r\noutput is\r\n```\r\n{'num': ['Must be 'myrule' string']}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/460", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/460/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/460/events", "html_url": "https://github.com/pyeve/cerberus/issues/460", "id": 394360722, "node_id": "MDU6SXNzdWUzOTQzNjA3MjI=", "number": 460, "title": "Consider extending Validator dynamically", "user": {"login": "jacek-jablonski", "id": 35669512, "node_id": "MDQ6VXNlcjM1NjY5NTEy", "avatar_url": "https://avatars2.githubusercontent.com/u/35669512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacek-jablonski", "html_url": "https://github.com/jacek-jablonski", "followers_url": "https://api.github.com/users/jacek-jablonski/followers", "following_url": "https://api.github.com/users/jacek-jablonski/following{/other_user}", "gists_url": "https://api.github.com/users/jacek-jablonski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacek-jablonski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacek-jablonski/subscriptions", "organizations_url": "https://api.github.com/users/jacek-jablonski/orgs", "repos_url": "https://api.github.com/users/jacek-jablonski/repos", "events_url": "https://api.github.com/users/jacek-jablonski/events{/privacy}", "received_events_url": "https://api.github.com/users/jacek-jablonski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-27T10:43:20Z", "updated_at": "2019-01-03T12:40:17Z", "closed_at": "2019-01-03T12:40:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think it is good idea to define multiple rules in different places for Validator without multiple inheritance. My application consists of separable modules and each module may define it's own validation rules. Maybe it is good idea to have this functionality out of the box. Here is my current workaround:\r\n```python\r\ndef register_validation_rule(name: str):\r\n    def __get_rule_schema(cls, method_name):\r\n        docstring = getattr(cls, method_name).__doc__\r\n        if docstring is None:\r\n            result = {}\r\n        else:\r\n            if RULE_SCHEMA_SEPARATOR in docstring:\r\n                docstring = docstring.split(RULE_SCHEMA_SEPARATOR)[1]\r\n            try:\r\n                result = literal_eval(docstring.strip())\r\n            except Exception:\r\n                result = {}\r\n\r\n        if not result and method_name != '_validate_meta':\r\n            warn(\r\n                \"No validation schema is defined for the arguments of rule \"\r\n                \"'%s'\" % method_name.split('_', 2)[-1]\r\n            )\r\n\r\n        return result\r\n\r\n    def decorator(func):\r\n        @wraps(func)\r\n        def wrapper(self, param, field, value):\r\n            return func(self, param, field, value)\r\n\r\n        validator_name = f'_validate_{name}'\r\n        wrapper.__name__ = validator_name\r\n        setattr(Validator, validator_name, wrapper)\r\n        Validator.validation_rules[name] = __get_rule_schema(Validator, validator_name)\r\n        Validator.rules.update(Validator.validation_rules)\r\n        return func\r\n    return decorator\r\n```\r\nand usage: \r\n```python\r\n@register_validation_rule('backends')\r\ndef validate_backends(validator, schema_value, field, value):\r\n    \"\"\" {'type': 'boolean'} \"\"\"\r\n    if schema_value:\r\n        from .models import Backend\r\n        backends_missing = set()\r\n        result = list(Backend.objects.filter(slug__in=value).values_list('slug', flat=True))\r\n        for backend in value:\r\n            if backend not in result:\r\n                backends_missing.add(backend)\r\n\r\n        if backends_missing:\r\n            validator.add_error(field, f'Missing backends: {\", \".join(backends_missing)}')\r\n```\r\nWhat do you think? Maybe I didn't noticed something and there is simpler way to extend Validator?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/458", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/458/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/458/events", "html_url": "https://github.com/pyeve/cerberus/issues/458", "id": 390837298, "node_id": "MDU6SXNzdWUzOTA4MzcyOTg=", "number": 458, "title": "Unexpected TypeError raised on validation when using schema_registry and a list is passed instead of single value", "user": {"login": "alexandrefvb", "id": 108050, "node_id": "MDQ6VXNlcjEwODA1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/108050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandrefvb", "html_url": "https://github.com/alexandrefvb", "followers_url": "https://api.github.com/users/alexandrefvb/followers", "following_url": "https://api.github.com/users/alexandrefvb/following{/other_user}", "gists_url": "https://api.github.com/users/alexandrefvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandrefvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandrefvb/subscriptions", "organizations_url": "https://api.github.com/users/alexandrefvb/orgs", "repos_url": "https://api.github.com/users/alexandrefvb/repos", "events_url": "https://api.github.com/users/alexandrefvb/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandrefvb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-13T20:02:04Z", "updated_at": "2019-04-04T13:23:14Z", "closed_at": "2019-01-14T14:29:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version: 1.2\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [x] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nUsing schema_registry to define schemas of models with references between schemas.\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nA unexpected TypeError is raised on this scenario:\r\n\r\n1. Define two schemas 'A' and 'B' on schema registry with 'A' referencing 'B' on a single value attribute\r\n2. Create a validator with schema 'A'\r\n3. Call validation method passing b value as a list\r\n\r\n```\r\n>>> from cerberus import schema_registry, Validator\r\n>>> schema_registry.add('A', { 'b': { 'schema': 'B' } })\r\n>>> schema_registry.add('B', { 'c': { 'type': 'string' } })\r\n>>> v = Validator('A')\r\n>>> v.validated({'b':{'c':'d'}})\r\n{'b': {'c': 'd'}}\r\n>>> v.validated({'b':[{'c':'d'}]})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/fidelis/workspaces/yandeh/b2b/b2b-api/venv/lib/python3.6/site-packages/cerberus/validator.py\", line 895, in validated\r\n    self.validate(*args, **kwargs)\r\n  File \"/home/fidelis/workspaces/yandeh/b2b/b2b-api/venv/lib/python3.6/site-packages/cerberus/validator.py\", line 870, in validate\r\n    self.__normalize_mapping(self.document, self.schema)\r\n  File \"/home/fidelis/workspaces/yandeh/b2b/b2b-api/venv/lib/python3.6/site-packages/cerberus/validator.py\", line 617, in __normalize_mapping\r\n    self.__normalize_containers(mapping, schema)\r\n  File \"/home/fidelis/workspaces/yandeh/b2b/b2b-api/venv/lib/python3.6/site-packages/cerberus/validator.py\", line 687, in __normalize_containers\r\n    self.__normalize_sequence(field, mapping, schema)\r\n  File \"/home/fidelis/workspaces/yandeh/b2b/b2b-api/venv/lib/python3.6/site-packages/cerberus/validator.py\", line 744, in __normalize_sequence\r\n    result = validator.normalized(document, always_return_document=True)\r\n  File \"/home/fidelis/workspaces/yandeh/b2b/b2b-api/venv/lib/python3.6/site-packages/cerberus/validator.py\", line 594, in normalized\r\n    self.__normalize_mapping(self.document, self.schema)\r\n  File \"/home/fidelis/workspaces/yandeh/b2b/b2b-api/venv/lib/python3.6/site-packages/cerberus/validator.py\", line 608, in __normalize_mapping\r\n    self.__normalize_rename_fields(mapping, schema)\r\n  File \"/home/fidelis/workspaces/yandeh/b2b/b2b-api/venv/lib/python3.6/site-packages/cerberus/validator.py\", line 761, in __normalize_rename_fields\r\n    self._normalize_rename(mapping, schema, field)\r\n  File \"/home/fidelis/workspaces/yandeh/b2b/b2b-api/venv/lib/python3.6/site-packages/cerberus/validator.py\", line 771, in _normalize_rename\r\n    if 'rename' in schema[field]:\r\nTypeError: argument of type 'NoneType' is not iterable\r\n\r\n```\r\n----\r\n\r\n#### Proposed solution\r\n\r\nChange _resolve_rules_set method of cerberus.Validator class from:\r\n\r\n```\r\n    def _resolve_rules_set(self, rules_set):\r\n        if isinstance(rules_set, Mapping):\r\n            return rules_set\r\n        elif isinstance(rules_set, _str_type):\r\n            return self.rules_set_registry.get(rules_set)\r\n        return None\r\n```\r\n\r\nto:\r\n\r\n```\r\n    def _resolve_rules_set(self, rules_set):\r\n        if isinstance(rules_set, Mapping):\r\n            return rules_set\r\n        elif isinstance(rules_set, _str_type):\r\n            return self.rules_set_registry.get(rules_set, {})\r\n        return None\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/457", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/457/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/457/events", "html_url": "https://github.com/pyeve/cerberus/issues/457", "id": 389067356, "node_id": "MDU6SXNzdWUzODkwNjczNTY=", "number": 457, "title": "coerce within items doesn't work", "user": {"login": "DeepGitz", "id": 17801043, "node_id": "MDQ6VXNlcjE3ODAxMDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/17801043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeepGitz", "html_url": "https://github.com/DeepGitz", "followers_url": "https://api.github.com/users/DeepGitz/followers", "following_url": "https://api.github.com/users/DeepGitz/following{/other_user}", "gists_url": "https://api.github.com/users/DeepGitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeepGitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeepGitz/subscriptions", "organizations_url": "https://api.github.com/users/DeepGitz/orgs", "repos_url": "https://api.github.com/users/DeepGitz/repos", "events_url": "https://api.github.com/users/DeepGitz/events{/privacy}", "received_events_url": "https://api.github.com/users/DeepGitz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-09T21:42:28Z", "updated_at": "2019-03-15T13:04:12Z", "closed_at": "2019-01-03T12:52:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: 1.2\r\npython: 3.7\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [x] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n#### Bug report / Feature request\r\n\r\nIn a list of lists, The coerce function doesn't work within 'items'.\r\n\r\nThe following code should not produce error, but is does, as the 'coerce' is simply ignored.\r\n\r\n```python\r\nimport cerberus\r\nv = cerberus.Validator()\r\nschema = {'list_of_values': {'type': 'list',\r\n                             'schema': {'items': [{'type': 'string', 'coerce': str},\r\n                                                  {'type': 'integer', 'coerce': int}]}}\r\n                             }\r\ndocument = {'list_of_values': [['hello', 100], [123, \"122\"]]}\r\nv.validate(document, schema)\r\nv.errors\r\n}\r\n```\r\nOutput:\r\n```\r\n{'list_of_values': [{1: [{0: ['must be of string type'],\r\n     1: ['must be of integer type']}]}]}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/454", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/454/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/454/events", "html_url": "https://github.com/pyeve/cerberus/issues/454", "id": 377760582, "node_id": "MDU6SXNzdWUzNzc3NjA1ODI=", "number": 454, "title": "Usage of allowed and nullable params", "user": {"login": "mishgu", "id": 11853162, "node_id": "MDQ6VXNlcjExODUzMTYy", "avatar_url": "https://avatars2.githubusercontent.com/u/11853162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mishgu", "html_url": "https://github.com/mishgu", "followers_url": "https://api.github.com/users/mishgu/followers", "following_url": "https://api.github.com/users/mishgu/following{/other_user}", "gists_url": "https://api.github.com/users/mishgu/gists{/gist_id}", "starred_url": "https://api.github.com/users/mishgu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mishgu/subscriptions", "organizations_url": "https://api.github.com/users/mishgu/orgs", "repos_url": "https://api.github.com/users/mishgu/repos", "events_url": "https://api.github.com/users/mishgu/events{/privacy}", "received_events_url": "https://api.github.com/users/mishgu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/7", "html_url": "https://github.com/pyeve/cerberus/milestone/7", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/7/labels", "id": 3390378, "node_id": "MDk6TWlsZXN0b25lMzM5MDM3OA==", "number": 7, "title": "1.2.1", "description": "", "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 17, "state": "closed", "created_at": "2018-05-31T13:24:36Z", "updated_at": "2019-08-10T15:09:01Z", "due_on": null, "closed_at": "2019-08-10T15:09:01Z"}, "comments": 5, "created_at": "2018-11-06T09:33:37Z", "updated_at": "2019-01-27T18:57:15Z", "closed_at": "2019-01-27T18:57:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm have a issues when use allowed and nullable params\r\n----\r\n#### Use-case abstract\r\n```\r\n schemas = [\r\n    {'role': {'type': 'string', 'allowed': ['agent', 'client', 'supplier']}},\r\n    {'role': {'type': 'string', 'allowed': ['agent', 'client', 'supplier', None]}},\r\n    {'role': {'type': 'string', 'allowed': ['agent', 'client', 'supplier'], 'nullable': True}},\r\n    {'role': {'type': 'string', 'allowed': ['agent', 'client', 'supplier', None], 'nullable': True}},\r\n    {'role': {'type': 'string', 'nullable': True}},\r\n]\r\ndata = [\r\n    {'role': 'agent'},\r\n    {'role': None},\r\n]\r\n```\r\nOutput from cerberus\r\n```\r\nVersion - 1.2\r\nSchema # \t   Data\r\n   1\t\tTrue  False  \r\n   2\t\tTrue  False  \r\n   3\t\tTrue  False  \r\n   4\t\tTrue  True  \r\n   5\t\tTrue  True  \r\n```\r\n----\r\n```\r\nVersion - 1.1\r\nSchema # \t   Data\r\n   1\t\tTrue  False  \r\n   2\t\tTrue  False  \r\n   3\t\tTrue  True  \r\n   4\t\tTrue  True  \r\n   5\t\tTrue  True  \r\n```\r\n#### Bug report / Feature request\r\nAs we can see in v1.2 have different ouput with **nullable** param (3td schema). It looks like a bug\r\nIn my oppinion v1.1 working more properly", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/450", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/450/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/450/events", "html_url": "https://github.com/pyeve/cerberus/issues/450", "id": 366305605, "node_id": "MDU6SXNzdWUzNjYzMDU2MDU=", "number": 450, "title": "DeprecationWarning about collections.abc", "user": {"login": "Gallaecio", "id": 705211, "node_id": "MDQ6VXNlcjcwNTIxMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/705211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gallaecio", "html_url": "https://github.com/Gallaecio", "followers_url": "https://api.github.com/users/Gallaecio/followers", "following_url": "https://api.github.com/users/Gallaecio/following{/other_user}", "gists_url": "https://api.github.com/users/Gallaecio/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gallaecio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gallaecio/subscriptions", "organizations_url": "https://api.github.com/users/Gallaecio/orgs", "repos_url": "https://api.github.com/users/Gallaecio/repos", "events_url": "https://api.github.com/users/Gallaecio/events{/privacy}", "received_events_url": "https://api.github.com/users/Gallaecio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-03T12:02:55Z", "updated_at": "2019-05-01T13:13:08Z", "closed_at": "2019-05-01T13:13:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pytest reports the following deprecation warnings about Cerberus 1.2 under Python 3.7:\r\n\r\n```\r\n/usr/local/lib/python3.7/site-packages/cerberus/validator.py:14: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import Hashable, Iterable, Mapping, Sequence\r\n\r\n/usr/local/lib/python3.7/site-packages/cerberus/schema.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import (Callable, Hashable, Iterable, Mapping,\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/447", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/447/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/447/events", "html_url": "https://github.com/pyeve/cerberus/issues/447", "id": 362992396, "node_id": "MDU6SXNzdWUzNjI5OTIzOTY=", "number": 447, "title": "Feature request: re-use a schema with extra params on validate()", "user": {"login": "mararzu", "id": 11561904, "node_id": "MDQ6VXNlcjExNTYxOTA0", "avatar_url": "https://avatars0.githubusercontent.com/u/11561904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mararzu", "html_url": "https://github.com/mararzu", "followers_url": "https://api.github.com/users/mararzu/followers", "following_url": "https://api.github.com/users/mararzu/following{/other_user}", "gists_url": "https://api.github.com/users/mararzu/gists{/gist_id}", "starred_url": "https://api.github.com/users/mararzu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mararzu/subscriptions", "organizations_url": "https://api.github.com/users/mararzu/orgs", "repos_url": "https://api.github.com/users/mararzu/repos", "events_url": "https://api.github.com/users/mararzu/events{/privacy}", "received_events_url": "https://api.github.com/users/mararzu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-24T00:41:38Z", "updated_at": "2019-01-14T14:33:39Z", "closed_at": "2019-01-14T14:33:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Feature request \r\n(first of all sorry for my english, hope you get the idea :) )\r\n\r\nlatest commit: 7d61ac3624d34d5dcb621089e48d91a3d1ee64a7\r\nversion: pypi v1.2\r\n- [No] I have the capacity to improve the docs when my problem is solved.\r\n- [No] I have the capacity to submit a patch when a bug is identified.\r\n\r\n#### Use-case abstract\r\nA simple entity like User which has: name, age, notes\r\nAnd 2 common CRUD use cases: Create and Update\r\nOn creation: i want to check thet name and age EXISTS,  and ARE NOT EMPTY \r\nOn update: i want to check an ID field comes in the json AND name/age/notes are NOT MANDATORY, but if they come they CANT be empty\r\n\r\n#### Feature request\r\nFrom which i see (hope im wrong) i need to create 2 separate schemas, one for create and another for update.\r\nIt would be nice if i can create 1 schema with all the fields (including the ID needed for update) and that the \"validate\" method could receive like another params like \"not-mandatory\" that could be a list of fields that if exists on the schema i want to override the \"mandatory\" property and set it to FALSE.\r\n\r\nIt has the benefit of no need to copy multiple times the same attributes on differents schemas", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/446", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/446/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/446/events", "html_url": "https://github.com/pyeve/cerberus/issues/446", "id": 361143384, "node_id": "MDU6SXNzdWUzNjExNDMzODQ=", "number": 446, "title": "np.nan is throughout treated as valid entry, a major problem with validator", "user": {"login": "swagatam101", "id": 13260300, "node_id": "MDQ6VXNlcjEzMjYwMzAw", "avatar_url": "https://avatars0.githubusercontent.com/u/13260300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swagatam101", "html_url": "https://github.com/swagatam101", "followers_url": "https://api.github.com/users/swagatam101/followers", "following_url": "https://api.github.com/users/swagatam101/following{/other_user}", "gists_url": "https://api.github.com/users/swagatam101/gists{/gist_id}", "starred_url": "https://api.github.com/users/swagatam101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swagatam101/subscriptions", "organizations_url": "https://api.github.com/users/swagatam101/orgs", "repos_url": "https://api.github.com/users/swagatam101/repos", "events_url": "https://api.github.com/users/swagatam101/events{/privacy}", "received_events_url": "https://api.github.com/users/swagatam101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-18T05:41:37Z", "updated_at": "2018-11-24T17:20:52Z", "closed_at": "2018-11-24T17:20:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version 1.2 \r\n\r\nExample code: \r\n\r\nschemaA =  {'type': 'list', 'schema': {'type': 'number', 'min': 0, 'max': 10}}\r\nschema = {'A': schemaA,  'B': {'type': 'list', 'schema': {'type': 'number'}}}\r\n\r\nV = cerberus.Validator()\r\nV.validate({'A':[1, 2, np.nan], 'B': [np.nan, 5,  6]}, schema)\r\n\r\nWill validate and retain the nans. \r\nAm I missing something? How can nans not be treated properly in a data validator? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/442", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/442/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/442/events", "html_url": "https://github.com/pyeve/cerberus/issues/442", "id": 358438007, "node_id": "MDU6SXNzdWUzNTg0MzgwMDc=", "number": 442, "title": "Cannot pass a dict to self._error()", "user": {"login": "biscuit314", "id": 8892155, "node_id": "MDQ6VXNlcjg4OTIxNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8892155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/biscuit314", "html_url": "https://github.com/biscuit314", "followers_url": "https://api.github.com/users/biscuit314/followers", "following_url": "https://api.github.com/users/biscuit314/following{/other_user}", "gists_url": "https://api.github.com/users/biscuit314/gists{/gist_id}", "starred_url": "https://api.github.com/users/biscuit314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/biscuit314/subscriptions", "organizations_url": "https://api.github.com/users/biscuit314/orgs", "repos_url": "https://api.github.com/users/biscuit314/repos", "events_url": "https://api.github.com/users/biscuit314/events{/privacy}", "received_events_url": "https://api.github.com/users/biscuit314/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-10T01:46:04Z", "updated_at": "2018-09-29T13:45:25Z", "closed_at": "2018-09-29T13:45:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Use-case abstract\r\n\r\nCustom validator can no longer call `self._error(field, message)` where `message` is a dict\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nIn v0.9.2 a custom validator could pass a dict as the second param to self._error().  This code used to work:\r\n\r\n```\r\nfrom cerberus import Validator\r\n\r\nclass MyValidator(Validator):\r\n    def _validate_isodd(self, isodd, field, value):\r\n        \"\"\" {'type': 'boolean'} \"\"\"\r\n        if isodd and not bool(value & 1):\r\n            self._error(field, {'message': 'Not an odd number', 'suggestion': 'add or subtract one'})\r\n\r\nschema = {'test_field': {'isodd': True}}\r\nvalidator = MyValidator(schema)\r\nvalidator.validate({'test_field': 8}, schema)\r\n```\r\n\r\nNow it throws \r\n`AttributeError: 'dict' object has no attribute 'code'`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/440", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/440/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/440/events", "html_url": "https://github.com/pyeve/cerberus/issues/440", "id": 358433788, "node_id": "MDU6SXNzdWUzNTg0MzM3ODg=", "number": 440, "title": "Custom validator can no longer add fields to the document being validated.", "user": {"login": "biscuit314", "id": 8892155, "node_id": "MDQ6VXNlcjg4OTIxNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8892155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/biscuit314", "html_url": "https://github.com/biscuit314", "followers_url": "https://api.github.com/users/biscuit314/followers", "following_url": "https://api.github.com/users/biscuit314/following{/other_user}", "gists_url": "https://api.github.com/users/biscuit314/gists{/gist_id}", "starred_url": "https://api.github.com/users/biscuit314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/biscuit314/subscriptions", "organizations_url": "https://api.github.com/users/biscuit314/orgs", "repos_url": "https://api.github.com/users/biscuit314/repos", "events_url": "https://api.github.com/users/biscuit314/events{/privacy}", "received_events_url": "https://api.github.com/users/biscuit314/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-10T01:16:37Z", "updated_at": "2018-09-29T14:56:03Z", "closed_at": "2018-09-29T13:50:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Use-case abstract\r\nCustom validator can no longer add fields to the document being validated.\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nIn v0.9.2 a custom validator could add fields to the document being validated.  This code used to work:\r\n\r\n```\r\nfrom cerberus import Validator\r\n\r\nclass MyValidator(Validator):\r\n    def _validate_is_witch(self, is_witch, field, value):\r\n        \"\"\" {'type': 'boolean'} \"\"\"\r\n        # If you have to ask, she's a witch            \r\n        if is_witch:\r\n            self._error(field, 'Burn her!')\r\n            self.document['duck_weight'] = True                \r\n\r\nschema = {'candidate': {'is_witch': True}}\r\nvalidator = MyValidator(schema)\r\n\r\nvalidator.validate({'candidate': 'Connie Booth'}, schema)\r\n```\r\n\r\nNow it throws\r\n`RuntimeError: dictionary changed size during iteration`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/439", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/439/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/439/events", "html_url": "https://github.com/pyeve/cerberus/issues/439", "id": 357954621, "node_id": "MDU6SXNzdWUzNTc5NTQ2MjE=", "number": 439, "title": "Order of execution of validation rules", "user": {"login": "sreenadh", "id": 89586, "node_id": "MDQ6VXNlcjg5NTg2", "avatar_url": "https://avatars3.githubusercontent.com/u/89586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sreenadh", "html_url": "https://github.com/sreenadh", "followers_url": "https://api.github.com/users/sreenadh/followers", "following_url": "https://api.github.com/users/sreenadh/following{/other_user}", "gists_url": "https://api.github.com/users/sreenadh/gists{/gist_id}", "starred_url": "https://api.github.com/users/sreenadh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sreenadh/subscriptions", "organizations_url": "https://api.github.com/users/sreenadh/orgs", "repos_url": "https://api.github.com/users/sreenadh/repos", "events_url": "https://api.github.com/users/sreenadh/events{/privacy}", "received_events_url": "https://api.github.com/users/sreenadh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-07T07:39:54Z", "updated_at": "2019-01-03T12:48:17Z", "closed_at": "2019-01-03T12:48:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nschema = {\r\n                'work_start_time': {\r\n                'type'        : 'string',\r\n                'empty'       : False,\r\n                'required'    : True,\r\n                'regex'       : \"(((0[1-9])|(1[0-2])):([0-5])(0|5)\\s(a|A|p|P)(m|M))\",\r\n                'compare_time': {'field': 'work_end_time', 'operator': '<', 'format': '%I:%M %p'}\r\n            }\r\n}\r\n\r\nI want the rule \"regex\" to be executed before my custom validation rule \"compare_time\". But it's not happening.\r\n\r\nVersion: 1.2\r\nPython 2.7.15\r\nDarwin Mac.local 17.4.0 Darwin Kernel Version 17.4.0: Sun Dec 17 09:19:54 PST 2017; root:xnu-4570.41.2~1/RELEASE_X86_64 x86_64", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/437", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/437/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/437/events", "html_url": "https://github.com/pyeve/cerberus/issues/437", "id": 356234954, "node_id": "MDU6SXNzdWUzNTYyMzQ5NTQ=", "number": 437, "title": "`'allowed'` rules crash when validating against un-hashable values", "user": {"login": "rmarren1", "id": 10272301, "node_id": "MDQ6VXNlcjEwMjcyMzAx", "avatar_url": "https://avatars3.githubusercontent.com/u/10272301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmarren1", "html_url": "https://github.com/rmarren1", "followers_url": "https://api.github.com/users/rmarren1/followers", "following_url": "https://api.github.com/users/rmarren1/following{/other_user}", "gists_url": "https://api.github.com/users/rmarren1/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmarren1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmarren1/subscriptions", "organizations_url": "https://api.github.com/users/rmarren1/orgs", "repos_url": "https://api.github.com/users/rmarren1/repos", "events_url": "https://api.github.com/users/rmarren1/events{/privacy}", "received_events_url": "https://api.github.com/users/rmarren1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-01T21:48:52Z", "updated_at": "2019-01-27T15:26:23Z", "closed_at": "2019-01-27T15:26:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThis issue tracker is dedicated to bugs and feature requests.\r\n\r\n**IT IS NOT SUPPOSED FOR ANY USAGE RELATED QUESTIONS.**\r\n(sorry for that loud but necessary statement.)\r\n\r\nStack Overflow is the go-to place for general questions and general how-tos. On\r\nSO, questions tagged with the 'cerberus' tag are actively monitored by the\r\nproject author, contributors and users. If consultancy there leads you to the\r\nconclusion that the documentation should be improved, it is a valid bug report\r\nhere.\r\n\r\nWhen reporting a bug, please post a full code example and make it as simple as\r\npossible. From your use-case throw everything out that is irrelevant to evoke\r\nthe bug.\r\n\r\n**It is mandatory to provide the information in the template below:**\r\n\r\n-->\r\n\r\nUsed Cerberus version / latest commit: 1.2\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [x] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n#### Bug report / Feature request\r\n\r\n`'allowed'` rules crash when validating against a nested list (or generally any unhashable value). See below:\r\n```\r\n>>> import cerberus\r\n>>> v = cerberus.Validator({'val': {'allowed': ['one', 'two', 'three']}})\r\n>>> v.validate({'val': [[]]})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/ryan/.local/share/virtualenvs/validate/local/lib/python2.7/site-packages/cerberus/validator.py\", line 877, in validate\r\n    self.__validate_definitions(definitions, field)\r\n  File \"/home/ryan/.local/share/virtualenvs/validate/local/lib/python2.7/site-packages/cerberus/validator.py\", line 940, in __validate_definitions\r\n    result = validate_rule(rule)\r\n  File \"/home/ryan/.local/share/virtualenvs/validate/local/lib/python2.7/site-packages/cerberus/validator.py\", line 922, in validate_rule\r\n    return validator(definitions.get(rule, None), field, value)\r\n  File \"/home/ryan/.local/share/virtualenvs/validate/local/lib/python2.7/site-packages/cerberus/validator.py\", line 960, in _validate_allowed\r\n    unallowed = set(value) - set(allowed_values)\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/436", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/436/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/436/events", "html_url": "https://github.com/pyeve/cerberus/issues/436", "id": 352985971, "node_id": "MDU6SXNzdWUzNTI5ODU5NzE=", "number": 436, "title": "Forbidden rule does not support float", "user": {"login": "MartyHub", "id": 1159991, "node_id": "MDQ6VXNlcjExNTk5OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1159991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartyHub", "html_url": "https://github.com/MartyHub", "followers_url": "https://api.github.com/users/MartyHub/followers", "following_url": "https://api.github.com/users/MartyHub/following{/other_user}", "gists_url": "https://api.github.com/users/MartyHub/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartyHub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartyHub/subscriptions", "organizations_url": "https://api.github.com/users/MartyHub/orgs", "repos_url": "https://api.github.com/users/MartyHub/repos", "events_url": "https://api.github.com/users/MartyHub/events{/privacy}", "received_events_url": "https://api.github.com/users/MartyHub/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16062791, "node_id": "MDU6TGFiZWwxNjA2Mjc5MQ==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/7", "html_url": "https://github.com/pyeve/cerberus/milestone/7", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/7/labels", "id": 3390378, "node_id": "MDk6TWlsZXN0b25lMzM5MDM3OA==", "number": 7, "title": "1.2.1", "description": "", "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 17, "state": "closed", "created_at": "2018-05-31T13:24:36Z", "updated_at": "2019-08-10T15:09:01Z", "due_on": null, "closed_at": "2019-08-10T15:09:01Z"}, "comments": 2, "created_at": "2018-08-22T14:42:46Z", "updated_at": "2019-01-27T15:07:14Z", "closed_at": "2019-01-27T15:07:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following schema does not work as expected :\r\n\r\n```json\r\n{\r\n  \"amount\": {\r\n    \"forbidden\": [0],\r\n    \"max\": 1,\r\n    \"min\": 0,\r\n    \"type\": \"number\",\r\n  }\r\n}\r\n```\r\n\r\nbecause [the forbidden rule](https://github.com/pyeve/cerberus/blob/7d61ac3624d34d5dcb621089e48d91a3d1ee64a7/cerberus/validator.py#L1189) only check for `int` :\r\n\r\n```python\r\nValidator().validate(\r\n  {\r\n    \"amount\": 0.0\r\n  },\r\n  schema\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/433", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/433/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/433/events", "html_url": "https://github.com/pyeve/cerberus/issues/433", "id": 348716808, "node_id": "MDU6SXNzdWUzNDg3MTY4MDg=", "number": 433, "title": "Cerberus does not analyze sub-schemas inside of lists", "user": {"login": "14rcole", "id": 10855607, "node_id": "MDQ6VXNlcjEwODU1NjA3", "avatar_url": "https://avatars2.githubusercontent.com/u/10855607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14rcole", "html_url": "https://github.com/14rcole", "followers_url": "https://api.github.com/users/14rcole/followers", "following_url": "https://api.github.com/users/14rcole/following{/other_user}", "gists_url": "https://api.github.com/users/14rcole/gists{/gist_id}", "starred_url": "https://api.github.com/users/14rcole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14rcole/subscriptions", "organizations_url": "https://api.github.com/users/14rcole/orgs", "repos_url": "https://api.github.com/users/14rcole/repos", "events_url": "https://api.github.com/users/14rcole/events{/privacy}", "received_events_url": "https://api.github.com/users/14rcole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-08T13:04:21Z", "updated_at": "2018-08-08T14:20:22Z", "closed_at": "2018-08-08T14:20:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: \u2026\r\n\r\n- [X ] I have the capacity to improve the docs when my problem is solved.\r\n- [X ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nSchema validation does not analyze sub-schemas that are a part of lists\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\nThe built-in validator for Cerberus doesn't attempt to validate schemas that are a part of lists.  For example, in a document being validated by the schema below, `size` could be string and the document would pass validation. However, if `count` were a string then the validation would fail.\r\n\r\n```json\r\nres_defs: {\r\n    \"type\": \"list\",\r\n    \"schema\": {\r\n        \"name\": { \"type\": \"string\", \"required\": true },\r\n        \"count\": { \"type\": \"integer\", \"required\": false },\r\n        \"volumes\": {\r\n            \"type\": \"list\",\r\n            \"required\": false,\r\n            \"schema\": {\r\n                \"size\": { \"type\": \"integer\", \"required\": true },\r\n                \"units\": { \"type\": \"string\", \"required\":  false }\r\n            }\r\n        }\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/430", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/430/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/430/events", "html_url": "https://github.com/pyeve/cerberus/issues/430", "id": 346921448, "node_id": "MDU6SXNzdWUzNDY5MjE0NDg=", "number": 430, "title": "about JSONErrorHandler error", "user": {"login": "xiaoyezi2004", "id": 23653856, "node_id": "MDQ6VXNlcjIzNjUzODU2", "avatar_url": "https://avatars1.githubusercontent.com/u/23653856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaoyezi2004", "html_url": "https://github.com/xiaoyezi2004", "followers_url": "https://api.github.com/users/xiaoyezi2004/followers", "following_url": "https://api.github.com/users/xiaoyezi2004/following{/other_user}", "gists_url": "https://api.github.com/users/xiaoyezi2004/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaoyezi2004/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaoyezi2004/subscriptions", "organizations_url": "https://api.github.com/users/xiaoyezi2004/orgs", "repos_url": "https://api.github.com/users/xiaoyezi2004/repos", "events_url": "https://api.github.com/users/xiaoyezi2004/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaoyezi2004/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-02T08:59:58Z", "updated_at": "2018-08-03T11:33:04Z", "closed_at": "2018-08-03T11:33:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "is JSONErrorHandler implemented?\r\n\r\nAfter reading the article : http://cerberus-collections.readthedocs.io/en/latest/error_handlers.html\r\n\r\nHere is my simple test code:\r\n\r\n```import cerberus\r\nimport cerberus_collections\r\n\r\nschema = {'name': { \"type\": \"string\",\r\n\"maxlength\": 4\r\n}\r\n}\r\nv = cerberus.validator(schema,error_handler=cerberus_collections.JSONErrorHandler)\r\nv({'name': 'Einhorn'})\r\n\r\nwith open('errors.json', 'wt') as f:\r\nf.write(v.errors)\r\n```\r\n\r\nBut I got the error:\r\n```C:\\Users\\U0145216\\git\\Python\\Scripts\\python.exe C:/Users/U0145216/git/test/learning.py\r\nTraceback (most recent call last):\r\nFile \"C:/Users/U0145216/git/test/learning.py\", line 2, in \r\nimport cerberus_collections\r\nFile \"C:\\Users\\U0145216\\git\\Python\\lib\\site-packages\\cerberus_collections_init_.py\", line 4, in \r\nfrom cerberus_collections.error_handlers import * # noqa: F401, F403\r\nModuleNotFoundError: No module named 'cerberus_collections.error_handlers'\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\nI am using Python 3.6.5, cerberus 1.2\r\nafter install cerberus-collections, when i use\r\nfrom cerberus_collections.error_handlers.json import JSONErrorHandler,\r\nI got the error below:\r\n```\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from cerberus_collections.error_handlers.json import JSONErrorHandler\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"E:\\Python\\Python36\\lib\\site-packages\\cerberus_collections\\__init__.py\", line 4, in <module>\r\n    from cerberus_collections.error_handlers import *  # noqa: F401, F403\r\nModuleNotFoundError: No module named 'cerberus_collections.error_handlers'\r\n>>>\r\n```\r\nAnd I have asked my fried to try, the same result.\r\nCould anyone please give some advice?\r\nDo i need a higer version of cerberus? I am using 1.2\r\n\r\nhere is the code in E:\\Python\\Python36\\lib\\site-packages\\cerberus_collections_init_.py\r\n```\r\nfrom cerberus.utils import validator_factory  # noqa: F401\r\n\r\nfrom cerberus_collections.error_handlers import *  # noqa: F401, F403\r\nfrom cerberus_collections.versions import __version__  # noqa: F401\r\n\r\nVanillaValidator = Validator = cerberus.Validator\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/428", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/428/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/428/events", "html_url": "https://github.com/pyeve/cerberus/issues/428", "id": 345431937, "node_id": "MDU6SXNzdWUzNDU0MzE5Mzc=", "number": 428, "title": "Regex is ignored when using custom coercion", "user": {"login": "elben10", "id": 23096679, "node_id": "MDQ6VXNlcjIzMDk2Njc5", "avatar_url": "https://avatars1.githubusercontent.com/u/23096679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elben10", "html_url": "https://github.com/elben10", "followers_url": "https://api.github.com/users/elben10/followers", "following_url": "https://api.github.com/users/elben10/following{/other_user}", "gists_url": "https://api.github.com/users/elben10/gists{/gist_id}", "starred_url": "https://api.github.com/users/elben10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elben10/subscriptions", "organizations_url": "https://api.github.com/users/elben10/orgs", "repos_url": "https://api.github.com/users/elben10/repos", "events_url": "https://api.github.com/users/elben10/events{/privacy}", "received_events_url": "https://api.github.com/users/elben10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-28T08:34:54Z", "updated_at": "2018-07-29T16:31:05Z", "closed_at": "2018-07-29T16:30:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Use-case abstract\r\n\r\nIt seems like that regexes is simply ignored, when using a coercing function. I would expect that if the input is a string the regex validation shouldn't be affected by the coercion function. \r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\n<!-- describe your issue here -->\r\n\r\n```python\r\n>>> # Import library\r\n... \r\n>>> from cerberus import Validator\r\n>>> \r\n>>> \r\n>>> # Define custom coerce function\r\n... \r\n>>> def custom_coerce(x):\r\n...         if x is True:\r\n...                 return 'true'\r\n...         else:\r\n...                 return 'false'\r\n... \r\n>>> \r\n>>> # Define schemas\r\n... \r\n>>> schema1 = {\r\n...     'test': {\r\n...         'type': 'string',\r\n...         'regex': '^true$',\r\n...         'coerce': (bool, custom_coerce)\r\n...     }\r\n... }\r\n>>> \r\n>>> schema2 = {\r\n...     'test': {\r\n...         'type': 'string',\r\n...         'regex': '^true$',\r\n...     }\r\n... }\r\n>>> \r\n>>> # Initiate validator\r\n... \r\n>>> v = Validator()\r\n>>> \r\n>>> v.validate({'test': 'ThisShouldConflictWithRegex'}, schema1) # Should return False\r\nTrue\r\n>>> v.validate({'test': 'ThisShouldConflictWithRegex'}, schema2)\r\nFalse\r\n```\r\n\r\nBut it seems like that the actual coercion works with the regex. If the coercion function is supplied then `{'test': True}` is validated to `True` if the coercion function is not supplied `{'test': True}` is validated to false. This behaviour is as expected.\r\n\r\n```python\r\n>>> v.validate({'test': True}, schema1)\r\nTrue\r\n>>> v.validate({'test': False}, schema1)\r\nFalse\r\n>>> v.validate({'test': True}, schema2)\r\nFalse\r\n>>> v.validate({'test': False}, schema2)\r\nFalse\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/418", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/418/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/418/events", "html_url": "https://github.com/pyeve/cerberus/issues/418", "id": 338495371, "node_id": "MDU6SXNzdWUzMzg0OTUzNzE=", "number": 418, "title": "Do we need linting at all?", "user": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-05T09:28:41Z", "updated_at": "2018-07-06T13:45:15Z", "closed_at": "2018-07-06T13:45:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "i noticed that 965ea73ab656b962ff8d59d69bc61cc3b886e13e introduced some redundancy regarding linting / use of `flake8` in the `tox.ini`. before sorting this out, i wonder whether we actually need any of this, now that `black` is used for formatting. a mandatory check with `black` on the ci should be sufficient to catch any style violations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/417", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/417/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/417/events", "html_url": "https://github.com/pyeve/cerberus/issues/417", "id": 337491579, "node_id": "MDU6SXNzdWUzMzc0OTE1Nzk=", "number": 417, "title": "Proposal: Add an option to require all defined fields of a schema", "user": {"login": "pohmelie", "id": 2385765, "node_id": "MDQ6VXNlcjIzODU3NjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2385765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pohmelie", "html_url": "https://github.com/pohmelie", "followers_url": "https://api.github.com/users/pohmelie/followers", "following_url": "https://api.github.com/users/pohmelie/following{/other_user}", "gists_url": "https://api.github.com/users/pohmelie/gists{/gist_id}", "starred_url": "https://api.github.com/users/pohmelie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pohmelie/subscriptions", "organizations_url": "https://api.github.com/users/pohmelie/orgs", "repos_url": "https://api.github.com/users/pohmelie/repos", "events_url": "https://api.github.com/users/pohmelie/events{/privacy}", "received_events_url": "https://api.github.com/users/pohmelie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 26236839, "node_id": "MDU6TGFiZWwyNjIzNjgzOQ==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/feature%20request", "name": "feature request", "color": "354bcc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-02T12:09:10Z", "updated_at": "2018-10-20T08:01:40Z", "closed_at": "2018-10-20T08:01:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are four cases which I think should be covered with validator instance arguments:\r\n* Allow known missed, forbid unknown present (default behavior right now)\r\n* Allow known missed, allow unknown present (`allow_unknown=True`)\r\n* Forbid known missed, forbid unknown present (no way at validator creation time)\r\n* Forbid known missed, allow unkown present (no way at validator creation time)\r\n\r\nCerberus have `allow_unknown` option for validator, but have no `allow_known_missed` / `forbid_known_missed` or something like this. As [stackoverflow](https://stackoverflow.com/questions/45935812/have-required-set-to-true-by-default-in-cerberus) question said, it is pretty annoying to set `required: True` for all fields, cause they can be nested and schema looks noisy and dirty.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/416", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/416/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/416/events", "html_url": "https://github.com/pyeve/cerberus/issues/416", "id": 334998516, "node_id": "MDU6SXNzdWUzMzQ5OTg1MTY=", "number": 416, "title": "Allow unknown keys but validated subs schemas", "user": {"login": "CJ-Wright", "id": 6740689, "node_id": "MDQ6VXNlcjY3NDA2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6740689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CJ-Wright", "html_url": "https://github.com/CJ-Wright", "followers_url": "https://api.github.com/users/CJ-Wright/followers", "following_url": "https://api.github.com/users/CJ-Wright/following{/other_user}", "gists_url": "https://api.github.com/users/CJ-Wright/gists{/gist_id}", "starred_url": "https://api.github.com/users/CJ-Wright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CJ-Wright/subscriptions", "organizations_url": "https://api.github.com/users/CJ-Wright/orgs", "repos_url": "https://api.github.com/users/CJ-Wright/repos", "events_url": "https://api.github.com/users/CJ-Wright/events{/privacy}", "received_events_url": "https://api.github.com/users/CJ-Wright/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 408598004, "node_id": "MDU6TGFiZWw0MDg1OTgwMDQ=", "url": "https://api.github.com/repos/pyeve/cerberus/labels/documentation", "name": "documentation", "color": "0e8a16", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "CJ-Wright", "id": 6740689, "node_id": "MDQ6VXNlcjY3NDA2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6740689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CJ-Wright", "html_url": "https://github.com/CJ-Wright", "followers_url": "https://api.github.com/users/CJ-Wright/followers", "following_url": "https://api.github.com/users/CJ-Wright/following{/other_user}", "gists_url": "https://api.github.com/users/CJ-Wright/gists{/gist_id}", "starred_url": "https://api.github.com/users/CJ-Wright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CJ-Wright/subscriptions", "organizations_url": "https://api.github.com/users/CJ-Wright/orgs", "repos_url": "https://api.github.com/users/CJ-Wright/repos", "events_url": "https://api.github.com/users/CJ-Wright/events{/privacy}", "received_events_url": "https://api.github.com/users/CJ-Wright/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "CJ-Wright", "id": 6740689, "node_id": "MDQ6VXNlcjY3NDA2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6740689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CJ-Wright", "html_url": "https://github.com/CJ-Wright", "followers_url": "https://api.github.com/users/CJ-Wright/followers", "following_url": "https://api.github.com/users/CJ-Wright/following{/other_user}", "gists_url": "https://api.github.com/users/CJ-Wright/gists{/gist_id}", "starred_url": "https://api.github.com/users/CJ-Wright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CJ-Wright/subscriptions", "organizations_url": "https://api.github.com/users/CJ-Wright/orgs", "repos_url": "https://api.github.com/users/CJ-Wright/repos", "events_url": "https://api.github.com/users/CJ-Wright/events{/privacy}", "received_events_url": "https://api.github.com/users/CJ-Wright/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-06-22T19:48:39Z", "updated_at": "2019-05-06T20:05:40Z", "closed_at": "2019-05-06T20:05:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit:\r\n\r\ncerberus                  1.2                      py36_0    conda-forge\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [ ] My question does not concern a practical use-case that I can't figure out\r\n      to solve. [I have a practical use case for this issue, I can't seem to get things to operate properly, I'm not certain if this box applies to me?]\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nI'd like to have a sub schema where the top level keys are unknown (eg the ids for the entries) but the sub schema beneath that are validated.\r\nfor example\r\n\r\n----\r\n\r\n#### Bug report / Feature request\r\n\r\n```python\r\ndata = {\r\n'name': 'test',\r\n'department': {\r\n    'unknown_key': {\r\n        'known_key': 'good',\r\n        'unknown_key': 'bad'\r\n    }\r\n}}\r\n\r\nschema = {\r\n'name': {\r\n    'type': 'string'\r\n},\r\n'department': {\r\n    'type': 'dict',\r\n    'allow_unknown': {\r\n        'schema': {\r\n            'type': 'dict',\r\n            'schema': {'known_key': {'type': 'string'},\r\n                       'must_have_key': {'type': 'string'}}}\r\n    },\r\n}}\r\nv = Validator(schema)\r\nv.validate(data)  # is True\r\n```\r\nBut this has failed as the validation passes. It should have failed on both the missing `must_have_key` and the `unknown_key`.\r\n\r\nSO question: https://stackoverflow.com/questions/50994398/allow-unknown-keys-but-validated-values-in-schema", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/410", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/410/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/410/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/410/events", "html_url": "https://github.com/pyeve/cerberus/issues/410", "id": 331852989, "node_id": "MDU6SXNzdWUzMzE4NTI5ODk=", "number": 410, "title": "how does  cerberus count maxlength if it's 2byte character like japanese?", "user": {"login": "ts-kazuo-ieiri", "id": 39757586, "node_id": "MDQ6VXNlcjM5NzU3NTg2", "avatar_url": "https://avatars0.githubusercontent.com/u/39757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ts-kazuo-ieiri", "html_url": "https://github.com/ts-kazuo-ieiri", "followers_url": "https://api.github.com/users/ts-kazuo-ieiri/followers", "following_url": "https://api.github.com/users/ts-kazuo-ieiri/following{/other_user}", "gists_url": "https://api.github.com/users/ts-kazuo-ieiri/gists{/gist_id}", "starred_url": "https://api.github.com/users/ts-kazuo-ieiri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ts-kazuo-ieiri/subscriptions", "organizations_url": "https://api.github.com/users/ts-kazuo-ieiri/orgs", "repos_url": "https://api.github.com/users/ts-kazuo-ieiri/repos", "events_url": "https://api.github.com/users/ts-kazuo-ieiri/events{/privacy}", "received_events_url": "https://api.github.com/users/ts-kazuo-ieiri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16062795, "node_id": "MDU6TGFiZWwxNjA2Mjc5NQ==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/question", "name": "question", "color": "78e26c", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-13T06:04:07Z", "updated_at": "2018-06-13T10:50:18Z", "closed_at": "2018-06-13T10:50:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "how does  cerberus count maxlength if it's 2byte character like japanese?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/406", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/406/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/406/events", "html_url": "https://github.com/pyeve/cerberus/issues/406", "id": 330305815, "node_id": "MDU6SXNzdWUzMzAzMDU4MTU=", "number": 406, "title": "Improve changelog format", "user": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 408598004, "node_id": "MDU6TGFiZWw0MDg1OTgwMDQ=", "url": "https://api.github.com/repos/pyeve/cerberus/labels/documentation", "name": "documentation", "color": "0e8a16", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-06-07T14:45:35Z", "updated_at": "2018-06-21T07:13:52Z", "closed_at": "2018-06-21T07:12:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I really like the update in changelog format we adopted in Eve. \r\n\r\n![screen shot 2018-06-07 at 16 41 13](https://user-images.githubusercontent.com/512968/41107086-d954ab2e-6a71-11e8-8be1-6ecfd02d075c.png)\r\n\r\n- We have different sections: fixed, improved, docs, etc. No need to add a fix:, new: prefix to every single line.\r\n- There is a link to the relevant ticket/pr on every single line. helpful for people who want to understand what/why/when things changed. \r\n- No more attributions (a click on the link will reveal who-did-what)\r\n\r\nIn general, the log seems much more clean, readable, and parseable. I propose we adopt the same format here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/405", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/405/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/405/events", "html_url": "https://github.com/pyeve/cerberus/issues/405", "id": 329207801, "node_id": "MDU6SXNzdWUzMjkyMDc4MDE=", "number": 405, "title": "Let's rename the 'validator' rule to 'check_with'", "user": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/6", "html_url": "https://github.com/pyeve/cerberus/milestone/6", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/6/labels", "id": 3216189, "node_id": "MDk6TWlsZXN0b25lMzIxNjE4OQ==", "number": 6, "title": "1.3", "description": null, "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2018-03-26T07:53:31Z", "updated_at": "2019-08-10T15:09:14Z", "due_on": null, "closed_at": "2019-08-10T15:09:14Z"}, "comments": 4, "created_at": "2018-06-04T20:38:52Z", "updated_at": "2018-07-09T13:51:42Z", "closed_at": "2018-07-09T13:51:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "as we are evolving a concept for the next major release, we have the opportunity for a thing i like best: breaking things.\r\n\r\ni'm not very fond of the circumstance that the number one object of the library and a default rule it provides have the same name: `validator`.\r\n\r\nit makes especially communicating to humans about Cerberus harder and potentially misleading. it probably also doesn't help to conceptualize Cerberus (or the opposite, who knows, depending on the recipient). in some client code this may resolve in longer or confusing variable names. (users that read code that makes use of Cerberus and don't know more about it than its designation - which is obvious due to the names `validate` etc. - are an audience to be considered as well.)\r\n\r\nwhat could be another name that describes the rather autonomous validation rule `validator` that offers a lot of leverage and requires more than entry-level effort by users? it should not include more than two morphemes, ten chars max seems reasonable, and no short hamming distance to any other relevant term obviously.\r\n\r\nif renamed, a deprecation layer could easily be provided, as no other rule with that name would be added ever again.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/404", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/404/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/404/events", "html_url": "https://github.com/pyeve/cerberus/issues/404", "id": 329197804, "node_id": "MDU6SXNzdWUzMjkxOTc4MDQ=", "number": 404, "title": "Improve API docs on ErrorDefinitions", "user": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 408598004, "node_id": "MDU6TGFiZWw0MDg1OTgwMDQ=", "url": "https://api.github.com/repos/pyeve/cerberus/labels/documentation", "name": "documentation", "color": "0e8a16", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/7", "html_url": "https://github.com/pyeve/cerberus/milestone/7", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/7/labels", "id": 3390378, "node_id": "MDk6TWlsZXN0b25lMzM5MDM3OA==", "number": 7, "title": "1.2.1", "description": "", "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 17, "state": "closed", "created_at": "2018-05-31T13:24:36Z", "updated_at": "2019-08-10T15:09:01Z", "due_on": null, "closed_at": "2019-08-10T15:09:01Z"}, "comments": 0, "created_at": "2018-06-04T20:07:19Z", "updated_at": "2018-06-11T14:19:02Z", "closed_at": "2018-06-11T14:19:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: any\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n- [x] My question does not concern a practical use-case that I can't figure out \r\n      to solve.\r\n\r\n----\r\n\r\n#### Bug report\r\n\r\nthe api docs [exclude](https://github.com/pyeve/cerberus/blob/master/docs/includes/generate.py#L26) error definitions that are not assigned to a distinct rule. that's quark.\r\n\r\non that occasion, the semantics of the codes' bits should be documented better and bits that are safe to use for customizations should be declared (mind different notations!). ther might be an open issue related to the latter.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/402", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/402/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/402/events", "html_url": "https://github.com/pyeve/cerberus/issues/402", "id": 328414811, "node_id": "MDU6SXNzdWUzMjg0MTQ4MTE=", "number": 402, "title": "Adopt Black code-style. Also add support for pre-commit workflow.", "user": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16062793, "node_id": "MDU6TGFiZWwxNjA2Mjc5Mw==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/enhancement", "name": "enhancement", "color": "6ca4cc", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/6", "html_url": "https://github.com/pyeve/cerberus/milestone/6", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/6/labels", "id": 3216189, "node_id": "MDk6TWlsZXN0b25lMzIxNjE4OQ==", "number": 6, "title": "1.3", "description": null, "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 18, "state": "closed", "created_at": "2018-03-26T07:53:31Z", "updated_at": "2019-08-10T15:09:14Z", "due_on": null, "closed_at": "2019-08-10T15:09:14Z"}, "comments": 5, "created_at": "2018-06-01T07:45:06Z", "updated_at": "2018-06-22T11:58:00Z", "closed_at": "2018-06-22T11:57:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I am loving the new workflow we have in Eve. With Black and other linters/fixers hooked into pre-commit, we have a code standard guarantee which also happens to be remarkably readable. \r\n\r\nAs mentioned in #383, what about doing the same thing with Cerberus? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/400", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/400/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/400/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/400/events", "html_url": "https://github.com/pyeve/cerberus/issues/400", "id": 327430175, "node_id": "MDU6SXNzdWUzMjc0MzAxNzU=", "number": 400, "title": "nullable is ignored in schemas with 'allowed'", "user": {"login": "crunk1", "id": 1885442, "node_id": "MDQ6VXNlcjE4ODU0NDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1885442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crunk1", "html_url": "https://github.com/crunk1", "followers_url": "https://api.github.com/users/crunk1/followers", "following_url": "https://api.github.com/users/crunk1/following{/other_user}", "gists_url": "https://api.github.com/users/crunk1/gists{/gist_id}", "starred_url": "https://api.github.com/users/crunk1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crunk1/subscriptions", "organizations_url": "https://api.github.com/users/crunk1/orgs", "repos_url": "https://api.github.com/users/crunk1/repos", "events_url": "https://api.github.com/users/crunk1/events{/privacy}", "received_events_url": "https://api.github.com/users/crunk1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-29T18:08:53Z", "updated_at": "2018-05-31T13:10:48Z", "closed_at": "2018-05-31T13:10:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: 1.2\r\n\r\n- I consulted these documentations:\r\n  - [x ] http://docs.python-cerberus.org/en/stable/\r\n  - [x] http://docs.python-cerberus.org/en/latest/\r\n\r\n- [x] I found nothing relevant to my problem in the docs.\r\n- [x] I found the documentation not helpful to my problem.\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nI want to limit the values of a string via, i.e. `allowed` values, but I also want the field to be nullable.\r\nExample:\r\n\r\n```python \r\n>>> schema = {'foo': {'type': 'string', 'allowed': ['bar'], 'nullable': True}} \r\n>>> v = Validator(schema)\r\n>>> v.validate({})\r\nTrue\r\n>>> v.validate({'foo': 'bar'})\r\nTrue\r\n>>> v.validate({'foo': 1})\r\nFalse\r\n>>> v.validate({'foo': 'gaz'})\r\nFalse\r\n>>> Validator({'foo': {'type': 'string', 'nullable': True}}).validate({'foo': None})  # True when not using 'allowed'\r\nTrue\r\n>>> v.validate({'foo': None})  # I want this to be True\r\nFalse\r\n```\r\n\r\n----\r\n\r\n#### Support request / Bug report\r\n`'nullable'` is ignored when `'allowed'` is used.\r\n\r\nI've also tried \r\n```python \r\n>>> schema = {'foo': {'type': 'string', 'allowed': ['bar', None], 'nullable': True}}\r\n```\r\n\r\nbut that doesn't work.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/399", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/399/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/399/events", "html_url": "https://github.com/pyeve/cerberus/issues/399", "id": 327213780, "node_id": "MDU6SXNzdWUzMjcyMTM3ODA=", "number": 399, "title": "Validate schema list error: RuntimeError: There's no handler for 'status' in the 'validate' domain.", "user": {"login": "xiaoyezi2004", "id": 23653856, "node_id": "MDQ6VXNlcjIzNjUzODU2", "avatar_url": "https://avatars1.githubusercontent.com/u/23653856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaoyezi2004", "html_url": "https://github.com/xiaoyezi2004", "followers_url": "https://api.github.com/users/xiaoyezi2004/followers", "following_url": "https://api.github.com/users/xiaoyezi2004/following{/other_user}", "gists_url": "https://api.github.com/users/xiaoyezi2004/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaoyezi2004/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaoyezi2004/subscriptions", "organizations_url": "https://api.github.com/users/xiaoyezi2004/orgs", "repos_url": "https://api.github.com/users/xiaoyezi2004/repos", "events_url": "https://api.github.com/users/xiaoyezi2004/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaoyezi2004/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-29T08:15:29Z", "updated_at": "2019-07-04T05:30:49Z", "closed_at": "2018-06-01T02:31:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using Stable Version\r\nI am trying cerberus for our validator and i have one testing python file as below:\r\n```\r\nfrom cerberus import Validator\r\nfrom datetime import datetime, date, time\r\n\r\ndef string_toDatetime(string):\r\n    return datetime.strptime(string, '%Y-%m-%d')\r\n\r\n\r\nschema={\r\n 'adminStatus':{\r\n    'type':'list',\r\n    'schema':{\r\n      'effectiveDates':{\r\n        'type':'dict',\r\n        'schema':{\r\n          'effectiveFrom':{'type':'datetime'},\r\n          'effectiveTo':{'type':'datetime'}\r\n        }\r\n      },\r\n      'status':{'type':'string','allowed':['Active','Inactive']},\r\n      'reason':{'type':'string'}\r\n    }\r\n  }    \r\n}\r\n\r\ndocument={\r\n  'adminStatus':[\r\n  {\r\n    'effectiveDates':{\r\n      'effectiveFrom':string_toDatetime('2018-05-10'),\r\n      'effectiveTo':string_toDatetime('2018-05-11')\r\n    },\r\n    'status':'ctive',\r\n    'reason':'Expired'\r\n  },\r\n  {\r\n    'effectiveDates' : {\r\n      'effectiveFrom' :string_toDatetime('2018-05-11')\r\n    },\r\n    'status' : 'Inactive',\r\n    'reason' : 'Matured'\r\n  }\r\n]\r\n}\r\n\r\nv=Validator(schema)\r\nv.validate(document)\r\n\r\n\r\nprint(v.errors)\r\n```\r\nHowever I encounter some  error like below:\r\n```Traceback (most recent call last):\r\n  File \"E:\\cerberus\\cerberus_test.py\", line 46, in <module>\r\n    v.validate(document)\r\n  File \"C:\\Python27\\lib\\site-packages\\cerberus\\validator.py\", line 877, in validate\r\n    self.__validate_definitions(definitions, field)\r\n  File \"C:\\Python27\\lib\\site-packages\\cerberus\\validator.py\", line 940, in __validate_definitions\r\n    result = validate_rule(rule)\r\n  File \"C:\\Python27\\lib\\site-packages\\cerberus\\validator.py\", line 922, in validate_rule\r\n    return validator(definitions.get(rule, None), field, value)\r\n  File \"C:\\Python27\\lib\\site-packages\\cerberus\\validator.py\", line 1234, in _validate_schema\r\n    self.__validate_schema_sequence(field, schema, value)\r\n  File \"C:\\Python27\\lib\\site-packages\\cerberus\\validator.py\", line 1259, in __validate_schema_sequence\r\n    update=self.update, normalize=False)\r\n  File \"C:\\Python27\\lib\\site-packages\\cerberus\\validator.py\", line 877, in validate\r\n    self.__validate_definitions(definitions, field)\r\n  File \"C:\\Python27\\lib\\site-packages\\cerberus\\validator.py\", line 940, in __validate_definitions\r\n    result = validate_rule(rule)\r\n  File \"C:\\Python27\\lib\\site-packages\\cerberus\\validator.py\", line 921, in validate_rule\r\n    validator = self.__get_rule_handler('validate', rule)\r\n  File \"C:\\Python27\\lib\\site-packages\\cerberus\\validator.py\", line 338, in __get_rule_handler\r\n    \"domain.\".format(rule, domain))\r\nRuntimeError: There's no handler for 'status' in the 'validate' domain.```\r\n\r\nAm i using schema list correctly? Could anyone tell me why and how to correct it? \r\n@funkyfuture \r\n\r\nMany thanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/396", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/396/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/396/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/396/events", "html_url": "https://github.com/pyeve/cerberus/issues/396", "id": 326190999, "node_id": "MDU6SXNzdWUzMjYxOTA5OTk=", "number": 396, "title": "Add DATE_FORMAT for datetime type / feature requests", "user": {"login": "solinas3000", "id": 18660057, "node_id": "MDQ6VXNlcjE4NjYwMDU3", "avatar_url": "https://avatars0.githubusercontent.com/u/18660057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solinas3000", "html_url": "https://github.com/solinas3000", "followers_url": "https://api.github.com/users/solinas3000/followers", "following_url": "https://api.github.com/users/solinas3000/following{/other_user}", "gists_url": "https://api.github.com/users/solinas3000/gists{/gist_id}", "starred_url": "https://api.github.com/users/solinas3000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solinas3000/subscriptions", "organizations_url": "https://api.github.com/users/solinas3000/orgs", "repos_url": "https://api.github.com/users/solinas3000/repos", "events_url": "https://api.github.com/users/solinas3000/events{/privacy}", "received_events_url": "https://api.github.com/users/solinas3000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-24T16:08:01Z", "updated_at": "2018-06-01T21:34:26Z", "closed_at": "2018-06-01T21:34:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "the field date coming from my front end are formatted like this : \"%Y-%m-%dT%H:%M:%S.%fZ\"\r\n\r\nincoming payload :\r\n`{\r\n\"ID_RessourceStudio\":-1,\r\n\"RessourceStudio_CreationDate\":\"2018-05-24T15:26:47.019Z\",\r\n\"RessourceStudio_LastModificationDate\":null,\r\n\"RessourceStudio_Code\":\"lenn\",\r\n\"RessourceStudio_Name\":\"hcx\",\r\n\"RessourceStudio_Active\":true\r\n}`\r\nschema :\r\n`{'ID_RessourceStudio': {'required': True, 'type': 'integer'}, 'RessourceStudio_CreationDate': {'nullable': True, 'default': None, 'type': 'datetime'}, 'RessourceStudio_LastModificationDate': {'nullable': True, 'default': None, 'type': 'datetime'}, 'RessourceStudio_Code': {'required': True, 'type': 'string'}, 'RessourceStudio_Name': {'required': True, 'type': 'string'}, 'RessourceStudio_Active': {'required': True, 'type': 'boolean'}}`\r\nv.errors : \r\n`{'RessourceStudio_CreationDate': ['must be of datetime type']}`\r\n\r\nCerberus don't provide a way to format the 'datetime' type used in the schema validation.\r\n\r\nThis option is already available on python eve framework using cerberus validation like this :\r\nDATE_FORMAT = \"%Y-%m-%dT%H:%M:%S.%fZ\" in settings.py\r\n\r\nFor this particular case i'm outside the scope of python eve.\r\n\r\nCould you please provide me with a workaround ? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/395", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/395/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/395/events", "html_url": "https://github.com/pyeve/cerberus/issues/395", "id": 325307830, "node_id": "MDU6SXNzdWUzMjUzMDc4MzA=", "number": 395, "title": "Cerberus module not found if used in two different virtualenvs", "user": {"login": "philsch", "id": 5527838, "node_id": "MDQ6VXNlcjU1Mjc4Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5527838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philsch", "html_url": "https://github.com/philsch", "followers_url": "https://api.github.com/users/philsch/followers", "following_url": "https://api.github.com/users/philsch/following{/other_user}", "gists_url": "https://api.github.com/users/philsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/philsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philsch/subscriptions", "organizations_url": "https://api.github.com/users/philsch/orgs", "repos_url": "https://api.github.com/users/philsch/repos", "events_url": "https://api.github.com/users/philsch/events{/privacy}", "received_events_url": "https://api.github.com/users/philsch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-22T14:00:46Z", "updated_at": "2018-05-22T16:28:52Z", "closed_at": "2018-05-22T16:28:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version: 1.2\r\nOS: Amazon Linux AMI (2018.03) - AMI-ID ami-ca0135b3\r\nPython version: 3.6.5\r\npip version: 10.0.1\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nOn a clean system, installing Cerberus in two different virtualenv. The module can not be imported inside the second virtualenv even pip install did not produce any errors. \r\n\r\n----\r\n\r\n#### Bug report\r\n\r\nSteps to reproduce:\r\n\r\n1) Machine setup\r\n- bootup a new machine\r\n- `sudo yum install python36 python36-devel -y`\r\n\r\n2) First Virtualenv\r\n- `virtualenv -p python3 /tmp/test`\r\n-  `source /tmp/test/bin/activate`\r\n- `pip install cerberus`\r\n-  `python -c \"import cerberus\"` -> *no error*\r\n\r\n3) Second Virtualenv\r\n- leave the virtualenv 1\r\n- `virtualenv -p python3 /tmp/test2`\r\n- `source /tmp/test2/bin/activate`\r\n- `pip install cerberus`*\r\n    - first problem: `pip list` does *not* list Cerberus\r\n- `python -c \"import cerberus\"`\r\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'cerberus'\r\n```\r\n\r\n*) Note the pip install command in step 3 does not trigger any error. Here the log if I execute this step with `-vvv`:\r\n\r\n```\r\n$ pip install cerberus -vvv\r\n\r\nCreated temporary directory: /tmp/pip-ephem-wheel-cache-zbmbv00g\r\nCreated temporary directory: /tmp/pip-install-3h87ggas\r\nCollecting cerberus\r\n  1 location(s) to search for versions of cerberus:\r\n  * https://pypi.org/simple/cerberus/\r\n  Getting page https://pypi.org/simple/cerberus/\r\n  Looking up \"https://pypi.org/simple/cerberus/\" in the cache\r\n  Current age based on date: 275\r\n  Freshness lifetime from max-age: 600\r\n  Freshness lifetime from request max-age: 600\r\n  The response is \"fresh\", returning cached response\r\n  600 > 275\r\n  Analyzing links from page https://pypi.org/simple/cerberus/\r\n    Found link https://files.pythonhosted.org/packages/1a/ea/5162945f0120d8286431be6f9ce9c5749954816b7776637489247fcef9ae/Cerberus-0.0.1.tar.gz#sha256=696395c1a83aa6bedfde672ac8715b017608758eae8a78e05b1ed8fef9cfb352 (from https://pypi.org/simple/cerberus/), version: 0.0.1\r\n    Found link https://files.pythonhosted.org/packages/3f/cd/664766ed3cd92c5d72471aa6a60f7b206491fe79495e4e799f56cfd4fb81/Cerberus-0.0.2.tar.gz#sha256=96f67c4a1d9127ad9b0e97e6992b863dddf477225f1107f4e29c796c08696db9 (from https://pypi.org/simple/cerberus/), version: 0.0.2\r\n    Found link https://files.pythonhosted.org/packages/5c/5b/1f7451670467626355deda633541c9bab3cd4d833b8d90c1a4c49705b1a0/Cerberus-0.0.3.tar.gz#sha256=eb0372795ed9371e91f065e46094c912ca368e3392d8f1600e606096f8bc18fb (from https://pypi.org/simple/cerberus/), version: 0.0.3\r\n    Found link https://files.pythonhosted.org/packages/ef/ba/b552d30ff336340b501f3e117382d7cb2c70b6ccc01c3f4c54049f37bffe/Cerberus-0.1.0.tar.gz#sha256=dee366f6ae6b697a7b511a3378abde28c67c007a9ef1b998e5c52f69c112dd91 (from https://pypi.org/simple/cerberus/), version: 0.1.0\r\n    Found link https://files.pythonhosted.org/packages/38/07/c2bb4ecdd3f0eea47617231285b2151ce7d18e39e12e1aaf7fd445a3da2f/Cerberus-0.2.0.tar.gz#sha256=94e14e688a7d3e61bac76acdee802c359b8c3d0038bc3ffc885b2061091f8226 (from https://pypi.org/simple/cerberus/), version: 0.2.0\r\n    Found link https://files.pythonhosted.org/packages/53/8b/7352086e4fbc28703c0e405eb9e8569f2b81f2811b05b395423036eea094/Cerberus-0.3.0.tar.gz#sha256=90b32ab0875299e670e70837cbc4d6cf465672daa9fd0652efe66d497779b6a4 (from https://pypi.org/simple/cerberus/), version: 0.3.0\r\n    Found link https://files.pythonhosted.org/packages/22/41/72e6cf85545eb76952a69f9a491c6c0274bad05bd1d7fe61cf03728ec9e2/Cerberus-0.4.0.tar.gz#sha256=c8d0319d7ff95d499ad13f849558394649ffadadb2c3c9e4f9e2c5c4037a5e63 (from https://pypi.org/simple/cerberus/), version: 0.4.0\r\n    Found link https://files.pythonhosted.org/packages/94/80/6c602563bf44de3fca08f113a81939911e8c6fb936eb899aa2af36691a0b/Cerberus-0.5.tar.gz#sha256=2dd8198499127d2bc24a36d8cfd81389a1deb72ed66ef77c4c801512da7a0d53 (from https://pypi.org/simple/cerberus/), version: 0.5\r\n    Found link https://files.pythonhosted.org/packages/7c/24/2b9964f3e03a82e0119a08b614dfe5bd93632634e92f406b4ed5e922578f/Cerberus-0.6.tar.gz#sha256=01f2b1bfcfca82dd565c97ecf29c5a5aa4fc0a06f6525eec28c28ee150a4cefb (from https://pypi.org/simple/cerberus/), version: 0.6\r\n    Found link https://files.pythonhosted.org/packages/1d/44/7298370d0302428a521175191dbc034844be569c8e5ca075520b22145ef3/Cerberus-0.7.tar.gz#sha256=945b5ef308825d3142f733cae35edb9a74f70342a398865e6ca0e32cb56d9c14 (from https://pypi.org/simple/cerberus/), version: 0.7\r\n    Found link https://files.pythonhosted.org/packages/78/c3/0835c9183fc82f3dfcb7da3d46386ff21debdc69a104d8b866260a6ecb99/Cerberus-0.7.1.tar.gz#sha256=807554f85927f52b5a35ff9440234b849986e1e36d84801bf6f97669ac13ba14 (from https://pypi.org/simple/cerberus/), version: 0.7.1\r\n    Found link https://files.pythonhosted.org/packages/46/b2/76212cd53cb1da37700393e7575add450d7d13d5fa1ba22bceedf19d1c64/Cerberus-0.7.2.tar.gz#sha256=aa9bb302abb03904a604c2546c9e5b40a0ede17eb487126d6ed8d201f015b7f6 (from https://pypi.org/simple/cerberus/), version: 0.7.2\r\n    Found link https://files.pythonhosted.org/packages/3d/88/09c3075eca8a257a802184f779b58e1870b24a308aacc5e2a1c549393374/Cerberus-0.8.tar.gz#sha256=384f9309630f59f1079060604044adb386b3088346decad11f5198cd1b678754 (from https://pypi.org/simple/cerberus/), version: 0.8\r\n    Found link https://files.pythonhosted.org/packages/b8/ae/e4a13d1165fbee5fb95d630fd7696e8e5d350e74a29f21b2c8e45a40a7c2/Cerberus-0.8.1.tar.gz#sha256=0532a5ca3b3559ff05c984363749dc8d48d734c8e70cbca3f3c33f19c0a007d0 (from https://pypi.org/simple/cerberus/), version: 0.8.1\r\n    Found link https://files.pythonhosted.org/packages/7c/d6/539a60f2ca5524a27a57919cc5508d2e8adc94fbc0f5b72c98045731970a/Cerberus-0.9.tar.gz#sha256=a60ffa5d7eb79bf97d123acbf0daf31ddb6ef556e7ee3c24bea98a00673c7274 (from https://pypi.org/simple/cerberus/), version: 0.9\r\n    Found link https://files.pythonhosted.org/packages/ed/da/a7b0528ca57a339762fe7500778fc2ef63735d89dcf22d2d101b2f02e65a/Cerberus-0.9.1.tar.gz#sha256=4d9210a76367291da51da36e15c3f730bd636d5a47fcdd52d8f28af2ed127cdc (from https://pypi.org/simple/cerberus/), version: 0.9.1\r\n    Found link https://files.pythonhosted.org/packages/c1/7a/65f3aa48279cda81208ccca4c932e63fedaf02f80f1fb6a482a7b8d8f239/Cerberus-0.9.2.tar.gz#sha256=b122c7b2cbf856ea2587e187fac968fc8dcd49d47aa1f239abd9eaa0ed86a7ce (from https://pypi.org/simple/cerberus/), version: 0.9.2\r\n    Found link https://files.pythonhosted.org/packages/5e/49/a4ab98865ce395945d3930c4495844d67091363c589d92ee7f4b5e538c0a/Cerberus-1.0.1.tar.gz#sha256=b4d6a6a355fef497875ccca2ad482b3511c3e8739919f2cbf58a0dacf09d9f9f (from https://pypi.org/simple/cerberus/), version: 1.0.1\r\n    Found link https://files.pythonhosted.org/packages/e0/7e/3949c86f4e60bc2b3d24ebc94af55ffaf9d62ad221f47c194edc9bd7fa94/Cerberus-1.1.tar.gz#sha256=a5b39090fde3ec3294c9d7030b8eda935b42222160a66a922e0c8aea34cabfdf (from https://pypi.org/simple/cerberus/), version: 1.1\r\n    Found link https://files.pythonhosted.org/packages/90/31/e30784a1f9a4b46875cfed1c9f806c188e2181e7ba3b568e81e7b0bc5718/Cerberus-1.2.tar.gz#sha256=f5c2e048fb15ecb3c088d192164316093fcfa602a74b3386eefb2983aa7e800a (from https://pypi.org/simple/cerberus/), version: 1.2\r\n  Using version 1.2 (newest of versions: 0.0.1, 0.0.2, 0.0.3, 0.1.0, 0.2.0, 0.3.0, 0.4.0, 0.5, 0.6, 0.7, 0.7.1, 0.7.2, 0.8, 0.8.1, 0.9, 0.9.1, 0.9.2, 1.0.1, 1.1, 1.2)\r\n  Using cached wheel link: file:///home/ec2-user/.cache/pip/wheels/94/bb/6b/6bbdb83662e32eacca84e22341007a8f5b216cf05acd403086/Cerberus-1.2-cp36-none-any.whl\r\nInstalling collected packages: cerberus\r\n\r\nSuccessfully installed cerberus-1.2\r\nCleaning up...\r\n```\r\n\r\nPlease let me know if you need any further information. Thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/394", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/394/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/394/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/394/events", "html_url": "https://github.com/pyeve/cerberus/issues/394", "id": 324877374, "node_id": "MDU6SXNzdWUzMjQ4NzczNzQ=", "number": 394, "title": "error.schema_path is empty for custom validation rules", "user": {"login": "andreymal", "id": 3236464, "node_id": "MDQ6VXNlcjMyMzY0NjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreymal", "html_url": "https://github.com/andreymal", "followers_url": "https://api.github.com/users/andreymal/followers", "following_url": "https://api.github.com/users/andreymal/following{/other_user}", "gists_url": "https://api.github.com/users/andreymal/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreymal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreymal/subscriptions", "organizations_url": "https://api.github.com/users/andreymal/orgs", "repos_url": "https://api.github.com/users/andreymal/repos", "events_url": "https://api.github.com/users/andreymal/events{/privacy}", "received_events_url": "https://api.github.com/users/andreymal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-21T11:08:59Z", "updated_at": "2018-05-22T15:33:22Z", "closed_at": "2018-05-21T13:09:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use a custom error handler that uses `error.schema_path`. But today I noticed that this field is empty:\r\n\r\n```python\r\nclass MyValidator(cerberus.Validator):\r\n    def _validate_failing(self, failing, field, value):\r\n        ''' {'nullable': True} '''\r\n        self._error(field, 'Custom message')\r\n```\r\n\r\nFor example, `schema_path` with non-custom validation rule:\r\n\r\n```python\r\nv = MyValidator({'a': {'type': 'string'}})\r\nv.validated({'a': 5})\r\nprint(v._errors[0].schema_path)  # => ('a', 'type') \u2014 good\r\n```\r\n\r\nBut with custom validation rule:\r\n\r\n```python\r\nv = MyValidator({'a': {'failing': None}})\r\nv.validated({'a': 5})\r\nprint(v._errors[0].schema_path)  # => () \u2014 bad\r\n```\r\n\r\nAccording to [cerberus/validator.py#L270](https://github.com/pyeve/cerberus/blob/master/cerberus/validator.py#L270):\r\n\r\n```python\r\n# def _error(self, *args):\r\nschema_path = self.schema_path\r\nif code != errors.UNKNOWN_FIELD.code and rule is not None:\r\n    schema_path += (field, rule)\r\n```\r\n\r\nI have to create my own `ErrorDefinition` instance:\r\n\r\n```python\r\nFAILING_FOREVER = cerberus.errors.ErrorDefinition(0x4815162342, 'failing')\r\n\r\n\r\nclass MyValidator(cerberus.Validator):\r\n    def _validate_failing(self, failing, field, value):\r\n        ''' {'nullable': True} '''\r\n        self._error(field, FAILING_FOREVER)\r\n\r\n\r\nv = MyValidator({'a': {'failing': None}})\r\nv.validated({'a': 5})\r\nprint(v._errors[0].schema_path)  # => ('a', 'failing') \u2014\u00a0very good\r\n```\r\n\r\nbut use of `ErrorDefinition` is not documented.\r\n\r\nWhat should I do to get `error.schema_path`? Can I use `ErrorDefinition`? What id should I use instead of 0x4815162342?\r\n\r\nOr is there a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/393", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/393/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/393/events", "html_url": "https://github.com/pyeve/cerberus/issues/393", "id": 324154767, "node_id": "MDU6SXNzdWUzMjQxNTQ3Njc=", "number": 393, "title": "unallowed value None for nullable=True", "user": {"login": "lucas03", "id": 2773622, "node_id": "MDQ6VXNlcjI3NzM2MjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2773622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucas03", "html_url": "https://github.com/lucas03", "followers_url": "https://api.github.com/users/lucas03/followers", "following_url": "https://api.github.com/users/lucas03/following{/other_user}", "gists_url": "https://api.github.com/users/lucas03/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucas03/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucas03/subscriptions", "organizations_url": "https://api.github.com/users/lucas03/orgs", "repos_url": "https://api.github.com/users/lucas03/repos", "events_url": "https://api.github.com/users/lucas03/events{/privacy}", "received_events_url": "https://api.github.com/users/lucas03/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-17T19:27:56Z", "updated_at": "2018-05-17T20:41:59Z", "closed_at": "2018-05-17T20:41:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: cerberus-1.2\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nNullable is ignored\r\n\r\n#### Support request / Bug report\r\n\r\n```\r\nIn [1]: from cerberus import Validator\r\n\r\nIn [2]: client_schema = {'client': {\r\n   ...:         'type': 'string',\r\n   ...:         'nullable': True,\r\n   ...:         'required': False,\r\n   ...:         'allowed': ['browser', 'app', 'app_ios', 'app_android'],\r\n   ...:     },\r\n   ...: }\r\n\r\nIn [3]: client_body = {'client': None}\r\n\r\nIn [4]: v = Validator(client_schema)\r\n\r\nIn [5]: v.validate(client_body)\r\nOut[5]: False\r\n\r\nIn [6]: v.errors\r\nOut[6]: {'client': ['unallowed value None']}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/392", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/392/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/392/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/392/events", "html_url": "https://github.com/pyeve/cerberus/issues/392", "id": 321647029, "node_id": "MDU6SXNzdWUzMjE2NDcwMjk=", "number": 392, "title": "Validation of custom type doesn't work as expected", "user": {"login": "Pithikos", "id": 400048, "node_id": "MDQ6VXNlcjQwMDA0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/400048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pithikos", "html_url": "https://github.com/Pithikos", "followers_url": "https://api.github.com/users/Pithikos/followers", "following_url": "https://api.github.com/users/Pithikos/following{/other_user}", "gists_url": "https://api.github.com/users/Pithikos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pithikos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pithikos/subscriptions", "organizations_url": "https://api.github.com/users/Pithikos/orgs", "repos_url": "https://api.github.com/users/Pithikos/repos", "events_url": "https://api.github.com/users/Pithikos/events{/privacy}", "received_events_url": "https://api.github.com/users/Pithikos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-09T16:51:05Z", "updated_at": "2018-05-10T10:48:00Z", "closed_at": "2018-05-10T10:48:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following the docs [here](http://docs.python-cerberus.org/en/stable/customize.html#instantiating-custom-validators) I am trying a make a custom type `fudge` with a custom validator. I've spent quite some time digging into this and still haven't figured out how to do so.\r\n\r\nStackoverflow question is [here](https://stackoverflow.com/questions/50258249/validation-for-custom-type-in-cerberus)\r\n\r\n```\r\nimport cerberus\r\n\r\nclass MyValidator(cerberus.Validator):\r\n    types_mapping = cerberus.Validator.types_mapping.copy()\r\n    types_mapping['fudge'] = cerberus.TypeDefinition('fudge', (str,), ())\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        if 'additional_context' in kwargs:\r\n            self.additional_context = kwargs['additional_context']\r\n        super(MyValidator, self).__init__(*args, **kwargs)\r\n\r\n    @property\r\n    def additional_context(self):\r\n        self._error(field, \"INVALID!\")\r\n        return self._config.get('additional_context', 'bar')\r\n\r\n    def _validate_type_fudge(self, field, value):\r\n        self._error(field, \"INVALID!\")\r\n        make_use_of(self.additional_context)\r\n\r\nvalidator = MyValidator()\r\nvalidator.validate({'myfield': 'yada'}, {'myfield': {'type': 'fudge'}})  # Gives True, but should have errors\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/391", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/391/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/391/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/391/events", "html_url": "https://github.com/pyeve/cerberus/issues/391", "id": 318788349, "node_id": "MDU6SXNzdWUzMTg3ODgzNDk=", "number": 391, "title": "How Can I Check a Number is a Certain Length in Cerberus?", "user": {"login": "Nerldy", "id": 25157392, "node_id": "MDQ6VXNlcjI1MTU3Mzky", "avatar_url": "https://avatars0.githubusercontent.com/u/25157392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nerldy", "html_url": "https://github.com/Nerldy", "followers_url": "https://api.github.com/users/Nerldy/followers", "following_url": "https://api.github.com/users/Nerldy/following{/other_user}", "gists_url": "https://api.github.com/users/Nerldy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nerldy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nerldy/subscriptions", "organizations_url": "https://api.github.com/users/Nerldy/orgs", "repos_url": "https://api.github.com/users/Nerldy/repos", "events_url": "https://api.github.com/users/Nerldy/events{/privacy}", "received_events_url": "https://api.github.com/users/Nerldy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-30T05:22:47Z", "updated_at": "2018-05-02T07:53:06Z", "closed_at": "2018-05-02T07:53:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm writing a book schema with Cerberus but I've stumbled upon a block. I want the ISBN field to accept a number/integer/digit that is either exactly 10 digits long, or exactly 13. How can I go about that? I tried using maxlength and minlength but they don't seem to work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/390", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/390/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/390/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/390/events", "html_url": "https://github.com/pyeve/cerberus/issues/390", "id": 318080510, "node_id": "MDU6SXNzdWUzMTgwODA1MTA=", "number": 390, "title": "A couple of spelling errors in the docs", "user": {"login": "ukch", "id": 973865, "node_id": "MDQ6VXNlcjk3Mzg2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/973865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ukch", "html_url": "https://github.com/ukch", "followers_url": "https://api.github.com/users/ukch/followers", "following_url": "https://api.github.com/users/ukch/following{/other_user}", "gists_url": "https://api.github.com/users/ukch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ukch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ukch/subscriptions", "organizations_url": "https://api.github.com/users/ukch/orgs", "repos_url": "https://api.github.com/users/ukch/repos", "events_url": "https://api.github.com/users/ukch/events{/privacy}", "received_events_url": "https://api.github.com/users/ukch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-26T15:24:56Z", "updated_at": "2018-06-01T21:50:24Z", "closed_at": "2018-06-01T21:50:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Support request / Bug report\r\n\r\nWhen building the docs for distribution, I have run them through an automated spell-checker and come up with the following issues:\r\n\r\n```\r\nparticulary :: particularly\r\nallows to :: allows one to (*3)\r\noccurance :: occurrence\r\nintially :: initially\r\nkeywork :: keyword\r\nsuperflous :: superfluous\r\nlenght :: length\r\noccured :: occurred\r\n```\r\n(In the table above, to the left is the actual spelling and to the right the expected spelling. `(*3)` means the issue occurs three separate times.)\r\n\r\nPlease consider correcting the spelling in the source files.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/389", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/389/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/389/events", "html_url": "https://github.com/pyeve/cerberus/issues/389", "id": 317158606, "node_id": "MDU6SXNzdWUzMTcxNTg2MDY=", "number": 389, "title": "Request: Regex MULTILINE implementation ", "user": {"login": "marian-daogaru", "id": 34738243, "node_id": "MDQ6VXNlcjM0NzM4MjQz", "avatar_url": "https://avatars0.githubusercontent.com/u/34738243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marian-daogaru", "html_url": "https://github.com/marian-daogaru", "followers_url": "https://api.github.com/users/marian-daogaru/followers", "following_url": "https://api.github.com/users/marian-daogaru/following{/other_user}", "gists_url": "https://api.github.com/users/marian-daogaru/gists{/gist_id}", "starred_url": "https://api.github.com/users/marian-daogaru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marian-daogaru/subscriptions", "organizations_url": "https://api.github.com/users/marian-daogaru/orgs", "repos_url": "https://api.github.com/users/marian-daogaru/repos", "events_url": "https://api.github.com/users/marian-daogaru/events{/privacy}", "received_events_url": "https://api.github.com/users/marian-daogaru/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 408598004, "node_id": "MDU6TGFiZWw0MDg1OTgwMDQ=", "url": "https://api.github.com/repos/pyeve/cerberus/labels/documentation", "name": "documentation", "color": "0e8a16", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/7", "html_url": "https://github.com/pyeve/cerberus/milestone/7", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/7/labels", "id": 3390378, "node_id": "MDk6TWlsZXN0b25lMzM5MDM3OA==", "number": 7, "title": "1.2.1", "description": "", "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 17, "state": "closed", "created_at": "2018-05-31T13:24:36Z", "updated_at": "2019-08-10T15:09:01Z", "due_on": null, "closed_at": "2019-08-10T15:09:01Z"}, "comments": 2, "created_at": "2018-04-24T10:10:17Z", "updated_at": "2018-06-11T14:19:03Z", "closed_at": "2018-06-11T14:19:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello team! \r\n\r\nIn `Validator._validate_regex` it was recently added that if the regex pattern does not end with **$**, it will be added to the pattern. However, this is sometimes problematic for multi-line string as it will match properly what is desired. \r\n\r\nDo you think it would be possible to added a flag to enable `re.MULTILINE` to be added to the `re_obj.match(value)`.\r\n\r\nThank you! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/385", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/385/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/385/events", "html_url": "https://github.com/pyeve/cerberus/issues/385", "id": 316498039, "node_id": "MDU6SXNzdWUzMTY0OTgwMzk=", "number": 385, "title": "Cerberus 2: Proposal to clearly distinguish names for different 'schema' rules", "user": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16062793, "node_id": "MDU6TGFiZWwxNjA2Mjc5Mw==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/enhancement", "name": "enhancement", "color": "6ca4cc", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/9", "html_url": "https://github.com/pyeve/cerberus/milestone/9", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/9/labels", "id": 4289746, "node_id": "MDk6TWlsZXN0b25lNDI4OTc0Ng==", "number": 9, "title": "2.0", "description": "", "creator": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 6, "state": "open", "created_at": "2019-05-06T20:01:18Z", "updated_at": "2020-05-10T14:33:21Z", "due_on": null, "closed_at": null}, "comments": 4, "created_at": "2018-04-21T14:49:35Z", "updated_at": "2019-11-08T23:02:51Z", "closed_at": "2019-11-08T23:02:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There are currently five rules to define constraints on container objects that are either sequences or mappings:\r\n\r\n- `items` defines a sequence of individual sets of rules for each item in a sequence\r\n- `keyschema` defines one set of rules that all keys of a mapping must match\r\n- `schema`\r\n  - either defines a schema for a subdocument (a mapping) with the same (slightly enhanced, actually) semantics as a 'top level' schema\r\n  - or it defines one set of rules that all items in a sequence must match\r\n- `valueschema` defines one set of rules that all values of a mapping must match\r\n\r\n#### Proposal 1\r\n\r\nthe different meanings of `schema` have been a source of confusion among users and it also forces us to operate with some assumptions in the code and to add some necessary overhead around this.\r\n\r\ntherefore the next major relase should clarify semantics on the `schema` rule. it's quiet obvious that its name points to the first mentioned mapping-related semantic as it matches the overall usage of the term *schema* in Cerberus' nomenclature.\r\n\r\nthe name of the other rule should be chosen wisely to imply both the similarity with and the difference to the `items` rule.\r\n\r\ni can think of the following atm:\r\n\r\n* ~~`allitems`~~ (see rationale in P2)\r\n* ~~`eachitem`~~ (see rationale in P2)\r\n* `itemsrules`\r\n\r\n#### Proposal 2\r\n\r\nas the comprehension above shows, there are two categories of rules in this realm: those that define a set of rules for particular items or just any item of a container object and those that define a schema that assigns such set of rules to values identified by a key. it'd be therefore terminologically stringent to rename `keyschema` and `valueschema` to `keysrules` and `valuesrules`. as there are no name conflicts, the previous names can still be used as aliases.\r\n\r\nwith these terms, `itemsrules` would be a consistent choice for the previous proposal as the morpheme `items` implies that it concerns all of the sequence members and the morpheme `rules` implies that a set of rules is expected.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/384", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/384/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/384/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/384/events", "html_url": "https://github.com/pyeve/cerberus/issues/384", "id": 316457852, "node_id": "MDU6SXNzdWUzMTY0NTc4NTI=", "number": 384, "title": "Support for any iterable (instead of just list) in \"allowed\" rule.", "user": {"login": "crunk1", "id": 1885442, "node_id": "MDQ6VXNlcjE4ODU0NDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1885442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crunk1", "html_url": "https://github.com/crunk1", "followers_url": "https://api.github.com/users/crunk1/followers", "following_url": "https://api.github.com/users/crunk1/following{/other_user}", "gists_url": "https://api.github.com/users/crunk1/gists{/gist_id}", "starred_url": "https://api.github.com/users/crunk1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crunk1/subscriptions", "organizations_url": "https://api.github.com/users/crunk1/orgs", "repos_url": "https://api.github.com/users/crunk1/repos", "events_url": "https://api.github.com/users/crunk1/events{/privacy}", "received_events_url": "https://api.github.com/users/crunk1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-21T03:34:27Z", "updated_at": "2018-04-24T08:23:19Z", "closed_at": "2018-04-24T08:23:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Used Cerberus version / latest commit: 1.2\r\nPython version: 3.6.5\r\n\r\n- I consulted these documentations:\r\n  - [x] http://docs.python-cerberus.org/en/stable/\r\n  - [x] http://docs.python-cerberus.org/en/latest/\r\n\r\n- [x] I found nothing relevant to my problem in the docs.\r\n- [x] I found the documentation not helpful to my problem.\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nI suggest adding support for using iterables in the \"allowed\" validation rule. In particular, I have a string enum class derived from enum.Enum. An enum.Enum is iterable. I'll try to demonstrate my use case:\r\n```python3\r\nclass MyEnum(StrEnum):\r\n  FOO = 'FOO'\r\n\r\n# Behavior of MyEnum\r\n# list(MyEnum)         -> [<MyEnum.FOO: 'FOO'>]\r\n# 'FOO' in MyEnum      -> True\r\n# 'BAR' in MyEnum      -> False\r\n# MyEnum.FOO in MyEnum -> True\r\n# MyEnum.FOO == 'FOO'  -> True\r\n# MyEnum.FOO == 'BAR'  -> False\r\n\r\n# This works, but is undesirable:\r\nschema = {\r\n  'foo': {'type': 'list', 'allowed': list(MyEnum)},\r\n}\r\nv = cerberus.Validator(schema)\r\n# v.validate({'foo': [MyEnum.FOO, 'FOO']}) -> True\r\n\r\n# This raises an error:\r\nschema = {\r\n  'foo': {'type': 'list', 'allowed': MyEnum},\r\n}\r\nv = cerberus.Validator(schema)\r\n# Traceback (most recent call last):\r\n#   File \"<input>\", line 1, in <module>\r\n#   File \"C:\\Python36\\lib\\site-packages\\cerberus\\validator.py\", line 169, in __init__\r\n#     self.schema = kwargs.get('schema', None)\r\n#   File \"C:\\Python36\\lib\\site-packages\\cerberus\\validator.py\", line 509, in schema\r\n#     self._schema = DefinitionSchema(self, schema)\r\n#   File \"C:\\Python36\\lib\\site-packages\\cerberus\\schema.py\", line 69, in __init__\r\n#     self.validate(schema)\r\n#   File \"C:\\Python36\\lib\\site-packages\\cerberus\\schema.py\", line 197, in validate\r\n#     self._validate(schema)\r\n#   File \"C:\\Python36\\lib\\site-packages\\cerberus\\schema.py\", line 219, in _validate\r\n#     raise SchemaError(self.schema_validator.errors)\r\n# cerberus.schema.SchemaError: {'foo': [{'allowed': ['must be of list type']}]}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/382", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/382/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/382/events", "html_url": "https://github.com/pyeve/cerberus/issues/382", "id": 315041161, "node_id": "MDU6SXNzdWUzMTUwNDExNjE=", "number": 382, "title": "which homepage in package metadata?", "user": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-17T12:40:03Z", "updated_at": "2018-06-01T21:52:00Z", "closed_at": "2018-06-01T21:52:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "currently, the homepage field of the package metadata points to this repo with `http` as schema. shall this be changed just to `https` or shall it rather point to the Cerberus domain? (i'm preparing minor docs stuff)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/381", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/381/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/381/events", "html_url": "https://github.com/pyeve/cerberus/issues/381", "id": 314969019, "node_id": "MDU6SXNzdWUzMTQ5NjkwMTk=", "number": 381, "title": "anyof_type\uff1a boolean is error", "user": {"login": "Lonersun", "id": 13027049, "node_id": "MDQ6VXNlcjEzMDI3MDQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/13027049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lonersun", "html_url": "https://github.com/Lonersun", "followers_url": "https://api.github.com/users/Lonersun/followers", "following_url": "https://api.github.com/users/Lonersun/following{/other_user}", "gists_url": "https://api.github.com/users/Lonersun/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lonersun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lonersun/subscriptions", "organizations_url": "https://api.github.com/users/Lonersun/orgs", "repos_url": "https://api.github.com/users/Lonersun/repos", "events_url": "https://api.github.com/users/Lonersun/events{/privacy}", "received_events_url": "https://api.github.com/users/Lonersun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-17T09:05:12Z", "updated_at": "2018-04-18T01:50:08Z", "closed_at": "2018-04-18T01:50:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi:\r\n     When I execute the following code, I feel the result is wrong\uff1a\r\n\r\n```\r\nfrom cerberus import Validator\r\n\r\n\r\nschema = {'foo': {'anyof_type': ['string', 'integer']}}\r\ndocument = {'foo': False}\r\n\r\nv = Validator()\r\nprint v.validate(document, schema)\r\n# True\r\n\r\nschema = {'foo': {'anyof_type': ['string', 'integer']}}\r\ndocument = {'foo': True}\r\n\r\nv = Validator()\r\nprint v.validate(document, schema)\r\n# True\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/379", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/379/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/379/events", "html_url": "https://github.com/pyeve/cerberus/issues/379", "id": 314531814, "node_id": "MDU6SXNzdWUzMTQ1MzE4MTQ=", "number": 379, "title": "Custom rules has stoppe working in Cerberus 1.2", "user": {"login": "ThreePinkApples", "id": 4201981, "node_id": "MDQ6VXNlcjQyMDE5ODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4201981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThreePinkApples", "html_url": "https://github.com/ThreePinkApples", "followers_url": "https://api.github.com/users/ThreePinkApples/followers", "following_url": "https://api.github.com/users/ThreePinkApples/following{/other_user}", "gists_url": "https://api.github.com/users/ThreePinkApples/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThreePinkApples/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThreePinkApples/subscriptions", "organizations_url": "https://api.github.com/users/ThreePinkApples/orgs", "repos_url": "https://api.github.com/users/ThreePinkApples/repos", "events_url": "https://api.github.com/users/ThreePinkApples/events{/privacy}", "received_events_url": "https://api.github.com/users/ThreePinkApples/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-16T07:32:04Z", "updated_at": "2018-04-17T12:31:28Z", "closed_at": "2018-04-17T12:31:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "- [x] I found nothing relevant to my problem in the docs.\r\n- [x] I found the documentation not helpful to my problem.\r\n\r\n- [ ] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n----\r\n\r\nA simple custom rule, constant\r\n----\r\n\r\nWe've been using a custom rule named 'constant' for quite some time now, but after upgrade to Cerberus 1.2 it crashes with this:\r\n```\r\nRuntimeError: There's no handler for 'constant' in the 'validate' domain.\r\n```\r\n\r\nOur validator:\r\n\r\n```\r\nclass MetadataValidator(Validator):\r\n    def _validate_constant(self, constant, field, value):\r\n        '''{'constant': {'required': True}}'''\r\n        if value != constant:\r\n            self._error(field, '{!r} != expected constant {!r}'.format(\r\n                value, constant))\r\n```\r\n\r\nThe scheme:\r\n\r\n```\r\n{'metadata_version': {'type': 'integer', 'constant': 3, 'required': True}}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/377", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/377/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/377/events", "html_url": "https://github.com/pyeve/cerberus/issues/377", "id": 314018577, "node_id": "MDU6SXNzdWUzMTQwMTg1Nzc=", "number": 377, "title": "Error in get_rule_handler after updating to 1.2", "user": {"login": "Luckjanov", "id": 929846, "node_id": "MDQ6VXNlcjkyOTg0Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/929846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Luckjanov", "html_url": "https://github.com/Luckjanov", "followers_url": "https://api.github.com/users/Luckjanov/followers", "following_url": "https://api.github.com/users/Luckjanov/following{/other_user}", "gists_url": "https://api.github.com/users/Luckjanov/gists{/gist_id}", "starred_url": "https://api.github.com/users/Luckjanov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Luckjanov/subscriptions", "organizations_url": "https://api.github.com/users/Luckjanov/orgs", "repos_url": "https://api.github.com/users/Luckjanov/repos", "events_url": "https://api.github.com/users/Luckjanov/events{/privacy}", "received_events_url": "https://api.github.com/users/Luckjanov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-04-13T08:41:59Z", "updated_at": "2018-04-30T10:39:56Z", "closed_at": "2018-04-23T08:46:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "After updating from 1.1 to 1.2 my tests are failing with exception:\r\n```_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:877: in validate\r\n    self.__validate_definitions(definitions, field)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:940: in __validate_definitions\r\n    result = validate_rule(rule)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:922: in validate_rule\r\n    return validator(definitions.get(rule, None), field, value)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:1236: in _validate_schema\r\n    self.__validate_schema_mapping(field, schema, value)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:1247: in __validate_schema_mapping\r\n    if not validator(value, update=self.update, normalize=False):\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:877: in validate\r\n    self.__validate_definitions(definitions, field)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:940: in __validate_definitions\r\n    result = validate_rule(rule)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:922: in validate_rule\r\n    return validator(definitions.get(rule, None), field, value)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:1234: in _validate_schema\r\n    self.__validate_schema_sequence(field, schema, value)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:1259: in __validate_schema_sequence\r\n    update=self.update, normalize=False)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:877: in validate\r\n    self.__validate_definitions(definitions, field)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:940: in __validate_definitions\r\n    result = validate_rule(rule)\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:921: in validate_rule\r\n    validator = self.__get_rule_handler('validate', rule)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <cerberus.validator.Validator object at 0x7f94a6315a58>\r\ndomain = 'validate', rule = 'id'\r\n\r\n    def __get_rule_handler(self, domain, rule):\r\n        methodname = '_{0}_{1}'.format(domain, rule.replace(' ', '_'))\r\n        result = getattr(self, methodname, None)\r\n        if result is None:\r\n            raise RuntimeError(\"There's no handler for '{}' in the '{}' \"\r\n>                              \"domain.\".format(rule, domain))\r\nE           RuntimeError: There's no handler for 'id' in the 'validate' domain.\r\n\r\n/usr/local/lib/python3.6/site-packages/cerberus/validator.py:338: RuntimeError```\r\n\r\nI don't know if it has something to do with my schemes. I have only one \"id\":\r\n\"id\": {\r\n        \"required\": True,\r\n        \"type\": \"integer\"\r\n    } ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/375", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/375/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/375/events", "html_url": "https://github.com/pyeve/cerberus/issues/375", "id": 313603617, "node_id": "MDU6SXNzdWUzMTM2MDM2MTc=", "number": 375, "title": "Docs: changelog issue references incorrectly link to sphinx-docs repository", "user": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 408598004, "node_id": "MDU6TGFiZWw0MDg1OTgwMDQ=", "url": "https://api.github.com/repos/pyeve/cerberus/labels/documentation", "name": "documentation", "color": "0e8a16", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-12T07:14:54Z", "updated_at": "2018-04-12T12:27:51Z", "closed_at": "2018-04-12T12:27:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Just click any ticket link: http://docs.python-cerberus.org/en/stable/changelog.html#version-1-2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/374", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/374/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/374/events", "html_url": "https://github.com/pyeve/cerberus/issues/374", "id": 311783029, "node_id": "MDU6SXNzdWUzMTE3ODMwMjk=", "number": 374, "title": "Cerberus 2: Proposal for stricter and more flexible type checks at the same time!", "user": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/9", "html_url": "https://github.com/pyeve/cerberus/milestone/9", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/9/labels", "id": 4289746, "node_id": "MDk6TWlsZXN0b25lNDI4OTc0Ng==", "number": 9, "title": "2.0", "description": "", "creator": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "open_issues": 9, "closed_issues": 6, "state": "open", "created_at": "2019-05-06T20:01:18Z", "updated_at": "2020-05-10T14:33:21Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2018-04-05T21:56:25Z", "updated_at": "2019-11-08T22:57:08Z", "closed_at": "2019-11-08T22:57:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "i propose to make the type checking mechanics simpler and more flexible regarding the possible constraints with the next major release of Cerberus.\r\n\r\nthis means that users need to refactor their custom validators - remove any method prefixed with `_validate_type_` - resp. the employed schemas when upgrading. uses with the vanilla validator may require schema changes due to slight semantical shifts. type checks can no longer be misused for what rules and validators are supposed for.\r\n\r\nusers could publish enhanced sets of type definitions, e.g. for uses with NumPy or other common frameworks that define data types.\r\n\r\nan implementation would roughly look like this (in the style proposed in #372):\r\n\r\n```python\r\n\r\nclass Validator(metaclass=ValidatorMeta):\r\n    type_definitions = {\r\n        'binary':\r\n            TypeDefinition('binary', (collections.abc.ByteString), ()),\r\n        'boolean':\r\n            TypeDefinition('boolean', (bool,), ()),\r\n        'bytearray':  # new to enhance builtins coverage\r\n            TypeDefinition('bytearray', (bytearray,), ()),\r\n        'bytes':  # new to enhance builtins coverage\r\n            TypeDefinition('bytes', (bytes,), ()),\r\n        'complex':  # new to enhance builtins coverage\r\n            TypeDefinition('complex', (complex,), ()),\r\n        'date':\r\n            TypeDefinition('date', (datetime.date,), ()),\r\n        'datetime':\r\n            TypeDefinition('datetime', (datetime.datetime,), ()),\r\n        'dict':  # this is stricter again, but unambigious\r\n            TypeDefinition('dict', (dict,), ()),\r\n        'float':  # stricter, but unambigious\r\n            TypeDefinition('float', (float,), ()),\r\n        'frozenset':  # new to enhance builtins coverage\r\n            TypeDefinition('frozenset', (frozenset,), ()),\r\n        'integer':\r\n            TypeDefinition('integer', (int,), ()),\r\n        'list':  # this is stricter again, but unambigious\r\n            TypeDefinition('list', (list,), ()),\r\n        'mapping':  # new\r\n            TypeDefinition('mapping', (collections.abc.Mapping,), ()),\r\n        'none':   # does this obsolete the 'null' rule?\r\n            TypeDefinition('none', (type(None),), ()),\r\n        'number':\r\n            TypeDefinition('number', (int, float), (bool,)),\r\n        'sequence':  # new; should AnyStr and ByteString be excluded?\r\n            TypeDefinition('sequence', (collections.abc.Sequence), ()),\r\n        'set':\r\n            TypeDefinition('set', (set,), ()),\r\n        'string':  # this includes bytes again\r\n            TypeDefinition('string', (typing.AnyStr,), ()),\r\n        'tuple':  # new to enhance builtins coverage\r\n            TypeDefinition('tuple', (tuple,), ()),\r\n        'unicode':  # new\r\n            TypeDefinition('string', (str,), ()),\r\n    }\r\n    # an alias\r\n    type_definitions['null'] = type_definitions['none']\r\n\r\n\r\n@validation_rule(name='type')\r\ndef type_check(validator, constraint, value):\r\n    if not _validate_type(validator, constraint, value):\r\n        validator.error(\u2026)\r\n\r\n\r\ndef _validate_type(validator, constraint, value) -> bool:\r\n    if isinstance(constraint, str):\r\n        # the known string constraints are needed for serialized schemas\r\n        return _validate_type(\r\n            validator, validator.type_definitions[constraint], value\r\n        )\r\n\r\n    elif isinstance(constraint, (list, tuple)):\r\n        # the container type for multiple allowed types is restricted to list\r\n        # and tuple, hence classes from collections.abc can be used in the\r\n        # fallback check; both can be checked with default string constraints\r\n        return any(_validate_type(validator, x, value) for x in constraint)\r\n\r\n    elif isinstance(constraint, TypeDefinition):\r\n        return isinstance(value, definition.included_types) \\\r\n            and not isinstance(value, definition.excluded_types)\r\n\r\n    # the last two possible checks are great for simple drop-ins, ide/editor\r\n    # fancyness and dynamic uses\r\n    elif isinstance(constraint, typing.TypeVar):\r\n        # some fiddling with the constraint's __bound__ and __constraints__\r\n        pass\r\n\r\n    # as a fallback\r\n    try:\r\n        return isinstance(value, constraint)\r\n    except Exception as e:\r\n        raise RuntimeError('Invalid constraint for type rule.') from e\r\n```\r\n\r\nshould more types from `collections.abc` be included in the vanilla validator's `type_definitions`? my guess is that these would rather be used in situations where schema serialization plays no role.\r\n\r\nshould `range` and `memoryview` also be included in the vanilla type defintions to fully cover builtin types? i'd consider these as data that is hardly exchanged between components, well actually hardly as data at all.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/369", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/369/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/369/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/369/events", "html_url": "https://github.com/pyeve/cerberus/issues/369", "id": 308523437, "node_id": "MDU6SXNzdWUzMDg1MjM0Mzc=", "number": 369, "title": "Named coerce functions not available in Cerberus 0.9", "user": {"login": "sybrenstuvel", "id": 1092128, "node_id": "MDQ6VXNlcjEwOTIxMjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1092128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sybrenstuvel", "html_url": "https://github.com/sybrenstuvel", "followers_url": "https://api.github.com/users/sybrenstuvel/followers", "following_url": "https://api.github.com/users/sybrenstuvel/following{/other_user}", "gists_url": "https://api.github.com/users/sybrenstuvel/gists{/gist_id}", "starred_url": "https://api.github.com/users/sybrenstuvel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sybrenstuvel/subscriptions", "organizations_url": "https://api.github.com/users/sybrenstuvel/orgs", "repos_url": "https://api.github.com/users/sybrenstuvel/repos", "events_url": "https://api.github.com/users/sybrenstuvel/events{/privacy}", "received_events_url": "https://api.github.com/users/sybrenstuvel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-26T10:53:58Z", "updated_at": "2018-03-27T07:41:56Z", "closed_at": "2018-03-26T13:07:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Used Cerberus version: 0.9.2 (pinned by Eve)\r\n\r\n- I consulted these documentations:\r\n  - [x] http://docs.python-cerberus.org/en/stable/\r\n  - [x] http://docs.python-cerberus.org/en/latest/\r\n\r\n- I consulted these sections of the docs (add more lines as necessary):\r\n  - http://docs.python-cerberus.org/en/stable/customize.html#custom-coercers\r\n  - http://docs.python-cerberus.org/en/stable/normalization-rules.html#value-coercion\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nI want to add custom coercion rules by implementing a `_normalize_coerce_{rulename}` function.\r\n\r\n----\r\n\r\n#### Support request / Bug report\r\n\r\nThe documentation, more specifically the section [Value Coercion](http://docs.python-cerberus.org/en/stable/normalization-rules.html#value-coercion), mention that this feature was introduced in Cerberus 0.9. The other section in the documentation on this subject ([Custom Coercers](http://docs.python-cerberus.org/en/stable/customize.html#custom-coercers)) doesn't mention any version in which this was introduced.\r\n\r\nImplementing the `_normalize_coerce_multiply` example causes a problem, where the value `2` cannot be coerced. Inspecting the [source code of Cerberus](https://github.com/pyeve/cerberus/blob/dabc063c32d14738d3abadc0b7b82d1a98f41c2c/cerberus/cerberus.py#L453) shows that it doesn't do any by-name lookup on the validator class at all.\r\n\r\nIt would seem that using the name of a custom normalization method is not supported in 0.9, and my guess is that it was introduced in 1.0. However, the introduction of this isn't even mentioned in [the changelog](http://docs.python-cerberus.org/en/stable/changelog.html#version-1-0).\r\n\r\nWhile 0.9.2 is pinned by Eve, please provide documentation for that version. Right now I'm loosing time struggling with Cerberus and trying get features to run that aren't supported in the first place. Note that the Eve documentation even points to http://docs.python-cerberus.org/en/latest/usage.html#type-coercion (note the `latest` in that URL), adding to the confusion.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/368", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/368/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/368/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/368/events", "html_url": "https://github.com/pyeve/cerberus/issues/368", "id": 308468127, "node_id": "MDU6SXNzdWUzMDg0NjgxMjc=", "number": 368, "title": "Docs build is failing on readthedocs", "user": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 408598004, "node_id": "MDU6TGFiZWw0MDg1OTgwMDQ=", "url": "https://api.github.com/repos/pyeve/cerberus/labels/documentation", "name": "documentation", "color": "0e8a16", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-26T07:59:31Z", "updated_at": "2018-04-01T18:29:13Z", "closed_at": "2018-04-01T18:29:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://readthedocs.org/projects/cerberus/builds/6944531/\r\n\r\n@funkyfuture would you look into it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/367", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/367/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/367/events", "html_url": "https://github.com/pyeve/cerberus/issues/367", "id": 307608309, "node_id": "MDU6SXNzdWUzMDc2MDgzMDk=", "number": 367, "title": "New Release", "user": {"login": "davidt99", "id": 8295100, "node_id": "MDQ6VXNlcjgyOTUxMDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidt99", "html_url": "https://github.com/davidt99", "followers_url": "https://api.github.com/users/davidt99/followers", "following_url": "https://api.github.com/users/davidt99/following{/other_user}", "gists_url": "https://api.github.com/users/davidt99/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidt99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidt99/subscriptions", "organizations_url": "https://api.github.com/users/davidt99/orgs", "repos_url": "https://api.github.com/users/davidt99/repos", "events_url": "https://api.github.com/users/davidt99/events{/privacy}", "received_events_url": "https://api.github.com/users/davidt99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-22T11:41:22Z", "updated_at": "2018-04-12T07:13:20Z", "closed_at": "2018-04-12T07:13:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "The last release was in january 2017. Any chance for a new release in PyPi, even a rc1 one?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/366", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/366/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/366/events", "html_url": "https://github.com/pyeve/cerberus/issues/366", "id": 306849548, "node_id": "MDU6SXNzdWUzMDY4NDk1NDg=", "number": 366, "title": "UserWarning while running sample code for  class-based Validator", "user": {"login": "olegsv", "id": 4197479, "node_id": "MDQ6VXNlcjQxOTc0Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4197479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegsv", "html_url": "https://github.com/olegsv", "followers_url": "https://api.github.com/users/olegsv/followers", "following_url": "https://api.github.com/users/olegsv/following{/other_user}", "gists_url": "https://api.github.com/users/olegsv/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegsv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegsv/subscriptions", "organizations_url": "https://api.github.com/users/olegsv/orgs", "repos_url": "https://api.github.com/users/olegsv/repos", "events_url": "https://api.github.com/users/olegsv/events{/privacy}", "received_events_url": "https://api.github.com/users/olegsv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-20T12:44:48Z", "updated_at": "2019-12-11T12:24:44Z", "closed_at": "2018-03-20T13:35:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have copied an example code for class-based Validator from here : http://cerberus-sanhe.readthedocs.io/customize.html#class-validator\r\n\r\n```\r\nfrom cerberus import Validator\r\n\r\nclass MyValidator(Validator):\r\n    def _validate_isodd(self, isodd, field, value):\r\n        if isodd and not bool(value & 1):\r\n            self._error(field, \"Must be an odd number\")\r\n\r\n```\r\nUnfortunately the code emits user warning: (python3.5, cerberus 1.1)\r\n\r\n```\r\n/usr/local/lib/python3.5/dist-packages/cerberus/validator.py:1338: UserWarning: No validation schema is defined for the arguments of rule 'isodd'\r\n  \"'%s'\" % method_name.split('_', 2)[-1])\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/365", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/365/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/365/events", "html_url": "https://github.com/pyeve/cerberus/issues/365", "id": 306848895, "node_id": "MDU6SXNzdWUzMDY4NDg4OTU=", "number": 365, "title": "Possible error in custom rule example code", "user": {"login": "olegsv", "id": 4197479, "node_id": "MDQ6VXNlcjQxOTc0Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4197479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegsv", "html_url": "https://github.com/olegsv", "followers_url": "https://api.github.com/users/olegsv/followers", "following_url": "https://api.github.com/users/olegsv/following{/other_user}", "gists_url": "https://api.github.com/users/olegsv/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegsv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegsv/subscriptions", "organizations_url": "https://api.github.com/users/olegsv/orgs", "repos_url": "https://api.github.com/users/olegsv/repos", "events_url": "https://api.github.com/users/olegsv/events{/privacy}", "received_events_url": "https://api.github.com/users/olegsv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-20T12:42:41Z", "updated_at": "2018-03-20T12:43:37Z", "closed_at": "2018-03-20T12:43:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/364", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/364/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/364/events", "html_url": "https://github.com/pyeve/cerberus/issues/364", "id": 306117725, "node_id": "MDU6SXNzdWUzMDYxMTc3MjU=", "number": 364, "title": "Conditionally including schema", "user": {"login": "retr0h", "id": 9895, "node_id": "MDQ6VXNlcjk4OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retr0h", "html_url": "https://github.com/retr0h", "followers_url": "https://api.github.com/users/retr0h/followers", "following_url": "https://api.github.com/users/retr0h/following{/other_user}", "gists_url": "https://api.github.com/users/retr0h/gists{/gist_id}", "starred_url": "https://api.github.com/users/retr0h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retr0h/subscriptions", "organizations_url": "https://api.github.com/users/retr0h/orgs", "repos_url": "https://api.github.com/users/retr0h/repos", "events_url": "https://api.github.com/users/retr0h/events{/privacy}", "received_events_url": "https://api.github.com/users/retr0h/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-17T01:35:13Z", "updated_at": "2018-04-01T15:37:23Z", "closed_at": "2018-03-28T22:32:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Use-case abstract\r\n\r\nI have a fairly complex schema. However, a section of it changes based on the type of driver.\r\n\r\n```\r\nplatforms_docker_schema = {\r\n    'platforms': {\r\n        'type': 'list',\r\n        'schema': {\r\n            'type': 'dict',\r\n            'schema': {\r\n                'name': {\r\n                    'type': 'string',\r\n                },\r\n                'hostname': {\r\n                    'type': 'string',\r\n                },\r\n                'image': {\r\n                    'type': 'string',\r\n                },\r\n                'registry': {\r\n                    'type': 'dict',\r\n                    'schema': {\r\n                        'url': {\r\n                            'type': 'string',\r\n                        },\r\n                        'credentials': {\r\n                            'type': 'dict',\r\n                            'schema': {\r\n                                'username': {\r\n                                    'type': 'string',\r\n                                    'regex': '^[{$]+[a-z0-9A-z]+[}]*$',\r\n                                },\r\n                                'password': {\r\n                                    'type': 'string',\r\n                                    'regex': '^[{$]+[a-z0-9A-z]+[}]*$',\r\n                                },\r\n                                'email': {\r\n                                    'type': 'string',\r\n                                },\r\n                            }\r\n                        },\r\n                    }\r\n                },\r\n                'command': {\r\n                    'type': 'string',\r\n                },\r\n                'privileged': {\r\n                    'type': 'boolean',\r\n                },\r\n                'volumes': {\r\n                    'type': 'list',\r\n                    'schema': {\r\n                        'type': 'string',\r\n                    }\r\n                },\r\n                'capabilities': {\r\n                    'type': 'list',\r\n                    'schema': {\r\n                        'type': 'string',\r\n                    }\r\n                },\r\n                'exposed_ports': {\r\n                    'type': 'list',\r\n                    'schema': {\r\n                        'type': 'string',\r\n                    }\r\n                },\r\n                'published_ports': {\r\n                    'type': 'list',\r\n                    'schema': {\r\n                        'type': 'string',\r\n                    }\r\n                },\r\n                'ulimits': {\r\n                    'type': 'list',\r\n                    'schema': {\r\n                        'type': 'string',\r\n                    }\r\n                },\r\n                'dns_servers': {\r\n                    'type': 'list',\r\n                    'schema': {\r\n                        'type': 'string',\r\n                    }\r\n                },\r\n                'networks': {\r\n                    'type': 'list',\r\n                    'schema': {\r\n                        'type': 'dict',\r\n                        'schema': {\r\n                            'name': {\r\n                                'type': 'string',\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    },\r\n}\r\n```\r\n\r\n```\r\nplatforms_base_schema = {\r\n    'platforms': {\r\n        'type': 'list',\r\n        'schema': {\r\n            'type': 'dict',\r\n            'allow_unknown': True,\r\n            'schema': {\r\n                'name': {\r\n                    'type': 'string',\r\n                },\r\n                'groups': {\r\n                    'type': 'list',\r\n                    'schema': {\r\n                        'type': 'string',\r\n                    }\r\n                },\r\n                'children': {\r\n                    'type': 'list',\r\n                    'schema': {\r\n                        'type': 'string',\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    },\r\n}\r\n```\r\n\r\n```\r\ndef validate(config):\r\n    if config['driver']['name'] == 'docker':\r\n        util.merge_dicts(schema, platforms_docker_schema)\r\n    else:\r\n        util.merge_dicts(schema, platforms_base_schema)\r\n\r\n    v = Validator()\r\n    v.validate(config, schema)\r\n\r\n    return v.errors\r\n```\r\n\r\nThis feels like it can get gross pretty quickly.  I was hoping cerberus could include a schema when a particular key equals a value (in this case 'docker').  Any ideas or improvements?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/363", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/363/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/363/events", "html_url": "https://github.com/pyeve/cerberus/issues/363", "id": 304788490, "node_id": "MDU6SXNzdWUzMDQ3ODg0OTA=", "number": 363, "title": "schema with field named \"type\" = 'NoneType' object is not callable", "user": {"login": "halberom", "id": 1328095, "node_id": "MDQ6VXNlcjEzMjgwOTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1328095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/halberom", "html_url": "https://github.com/halberom", "followers_url": "https://api.github.com/users/halberom/followers", "following_url": "https://api.github.com/users/halberom/following{/other_user}", "gists_url": "https://api.github.com/users/halberom/gists{/gist_id}", "starred_url": "https://api.github.com/users/halberom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/halberom/subscriptions", "organizations_url": "https://api.github.com/users/halberom/orgs", "repos_url": "https://api.github.com/users/halberom/repos", "events_url": "https://api.github.com/users/halberom/events{/privacy}", "received_events_url": "https://api.github.com/users/halberom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 16062791, "node_id": "MDU6TGFiZWwxNjA2Mjc5MQ==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 16062796, "node_id": "MDU6TGFiZWwxNjA2Mjc5Ng==", "url": "https://api.github.com/repos/pyeve/cerberus/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-13T14:30:46Z", "updated_at": "2018-07-09T17:38:08Z", "closed_at": "2018-07-09T17:38:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Related to https://github.com/pyeve/cerberus/issues/353\r\n\r\nUsed Cerberus version / latest commit: ...\r\n\r\n```\r\npip freeze | grep -i cerberus\r\nCerberus==1.1\r\n```\r\n\r\n- I consulted these documentations:\r\n  - [ ] http://docs.python-cerberus.org/en/stable/\r\n  - [x] http://docs.python-cerberus.org/en/latest/\r\n\r\n- [x] I found nothing relevant to my problem in the docs.\r\n- [ ] I found the documentation not helpful to my problem.\r\n\r\n- [ ] I have the capacity to improve the docs when my problem is solved.\r\n- [ ] I have the capacity to submit a patch when a bug is identified.\r\n\r\n----\r\n\r\n#### Support request / Bug report\r\n\r\nI attempted to create a schema for an AWS Service Control Policy, and found I was unable to use `type` as a key title.\r\n\r\n```\r\npolicies:\r\n  type: list\r\n  schema:\r\n    name:\r\n      type: string\r\n      required: True\r\n    content:\r\n      type: string\r\n      required: True\r\n    description:\r\n      type: string\r\n    type:\r\n      type: string\r\n      allowed:\r\n        - 'SERVICE_CONTROL_POLICY'\r\n```\r\n\r\nThis resulted in the following stackdump\r\n\r\n```\r\n   result = yaml_validator.validate(yaml_)\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 803, in validate\r\n    self.__validate_definitions(definitions, field)\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 871, in __validate_definitions\r\n    validate_rule(rule)\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 852, in validate_rule\r\n    return validator(definitions.get(rule, None), field, value)\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 1151, in _validate_schema\r\n    self.__validate_schema_sequence(field, schema, value)\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 1176, in __validate_schema_sequence\r\n    update=self.update, normalize=False)\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 803, in validate\r\n    self.__validate_definitions(definitions, field)\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 862, in __validate_definitions\r\n    if validate_rule(rule):\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 852, in validate_rule\r\n    return validator(definitions.get(rule, None), field, value)\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 1186, in _validate_type\r\n    for x in types):\r\n  File \"/usr/local/Cellar/python/3.6.4_3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/cerberus/validator.py\", line 1186, in <genexpr>\r\n    for x in types):\r\nTypeError: 'NoneType' object is not callable\r\n```\r\n\r\nChanging `type` to `type_` or `_type` causes validation to occur, but it does not apply the `allowed` requirements so is not actually validating.  e.g. the following passes validation.\r\n\r\n```\r\npolicies:\r\n  type: list\r\n  schema:\r\n    ...\r\n    type_:  # or _type\r\n      type: string\r\n      allowed:\r\n        - 'foobar'\r\n```\r\n```\r\npolicies:\r\n  - name: FullAWSAccess\r\n    content: |\r\n      '{\r\n          \"Version\": \"2012-10-17\",\r\n          \"Statement\": [\r\n              {\r\n                  \"Effect\": \"Allow\",\r\n                  \"Action\": \"*\",\r\n                  \"Resource\": \"*\"\r\n              }\r\n          ]\r\n      }'\r\n    description: Allows access to every operation\r\n    type: 'SERVICE_CONTROL_POLICY'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/362", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/362/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/362/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/362/events", "html_url": "https://github.com/pyeve/cerberus/issues/362", "id": 304301745, "node_id": "MDU6SXNzdWUzMDQzMDE3NDU=", "number": 362, "title": "Validate compose fields.", "user": {"login": "Bernardoow", "id": 4077212, "node_id": "MDQ6VXNlcjQwNzcyMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4077212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bernardoow", "html_url": "https://github.com/Bernardoow", "followers_url": "https://api.github.com/users/Bernardoow/followers", "following_url": "https://api.github.com/users/Bernardoow/following{/other_user}", "gists_url": "https://api.github.com/users/Bernardoow/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bernardoow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bernardoow/subscriptions", "organizations_url": "https://api.github.com/users/Bernardoow/orgs", "repos_url": "https://api.github.com/users/Bernardoow/repos", "events_url": "https://api.github.com/users/Bernardoow/events{/privacy}", "received_events_url": "https://api.github.com/users/Bernardoow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-12T09:48:40Z", "updated_at": "2018-03-13T13:19:00Z", "closed_at": "2018-03-13T13:18:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to validate if the first field is different from the second.\r\n\r\nExample Telephone connection: The source must always be different from the receiver.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/358", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/358/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/358/events", "html_url": "https://github.com/pyeve/cerberus/issues/358", "id": 291543023, "node_id": "MDU6SXNzdWUyOTE1NDMwMjM=", "number": 358, "title": "Proposal for a contains rule", "user": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-25T11:49:27Z", "updated_at": "2018-06-02T12:25:20Z", "closed_at": "2018-06-02T12:25:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "while we were looking on a deceased project to test json-apis we noticed one validation rule it has that *Cerberus* doesn't have: `contains`. quiet obviously, it would test whether an object that implements a `__contains__` method contains the constraining values.\r\n\r\n```yaml\r\n# schema\r\nfoo:\r\n  contains: \"1\"\r\n\r\n# another schema\r\nfoo:\r\n  contains: [\"1\", \"2\"]\r\n\r\n# valid doc\r\nfoo:\r\n  - \"1\"\r\n  - \"2\"\r\n  - \"3\"\r\n\r\n# invalid doc\r\nfoo:\r\n  - \"4\"\r\n  - \"5\"\r\n  - \"6\"\r\n\r\n```\r\n\r\nstrings are not considered as a container object, so this isn't suitable to test substrings, there's `regex` for that.\r\n\r\nor am i overlooking the possibilty to do such tests already?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/357", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/357/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/357/events", "html_url": "https://github.com/pyeve/cerberus/issues/357", "id": 290196552, "node_id": "MDU6SXNzdWUyOTAxOTY1NTI=", "number": 357, "title": "Include a link to Nicola's talk at PiterPy in the docs", "user": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-20T14:35:40Z", "updated_at": "2018-03-29T07:54:41Z", "closed_at": "2018-03-29T07:54:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "i'd like to put a reference to @nicolaiarocci's [talk at the PiterPy](https://www.youtube.com/watch?v=vlHAjIPvoT4) in the docs. but i have no idea what a good spot would be. is anyone aware of other Cerberus related resources that are hosted by a third party?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/356", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/356/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/356/events", "html_url": "https://github.com/pyeve/cerberus/issues/356", "id": 289001440, "node_id": "MDU6SXNzdWUyODkwMDE0NDA=", "number": 356, "title": "NotImplementedError when accessing validator errors while using anyof list of dict", "user": {"login": "mattskone", "id": 2359322, "node_id": "MDQ6VXNlcjIzNTkzMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2359322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattskone", "html_url": "https://github.com/mattskone", "followers_url": "https://api.github.com/users/mattskone/followers", "following_url": "https://api.github.com/users/mattskone/following{/other_user}", "gists_url": "https://api.github.com/users/mattskone/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattskone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattskone/subscriptions", "organizations_url": "https://api.github.com/users/mattskone/orgs", "repos_url": "https://api.github.com/users/mattskone/repos", "events_url": "https://api.github.com/users/mattskone/events{/privacy}", "received_events_url": "https://api.github.com/users/mattskone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-16T17:58:12Z", "updated_at": "2018-05-31T21:22:43Z", "closed_at": "2018-05-31T21:22:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using Cerberus 1.1\r\n\r\nI consulted available documentation and found nothing relevant to this problem.  It seems similar to #299, but I'm adding this issue to document alternative repro steps, as they are not the same here as in #299 (using `anyof` instead of `oneof`).  Feel free to close this issue if the pending fix in https://github.com/pyeve/cerberus/commit/c21aac1e9f07551122c2540654bbbdc23452ec4d also fixes this issue.\r\n\r\n#### Use-case abstract\r\n\r\nI have a schema that specifies one element, a dictionary which should be valid if it conforms to any of a list of additional \"sub-schemas\".\r\n\r\n----\r\n\r\n#### Support request / Bug report\r\n\r\nIn this example, the \"sub-schema\" requires a string value, but an integer is used.\r\n\r\n```python\r\nfrom cerberus import Validator\r\n\r\nschema = {'foo': {'anyof': [{'type': 'dict', 'schema': {'bar': {'type': 'dict', 'valueschema': {'type': 'string'}}}}]}}\r\ndoc = {'foo': {'bar': {'baz': 1}}}\r\nv = Validator()\r\nv.validate(doc, schema)\r\nv.errors\r\n```\r\n\r\nExpected behavior: a graceful exit with a Cerberus error message\r\n\r\nActual behavior:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/root/.local/share/virtualenvs/vcloud-rf72CdgU/lib/python3.6/site-packages/cerberus/validator.py\", line 391, in errors\r\n    return self.error_handler(self._errors)\r\n  File \"/root/.local/share/virtualenvs/vcloud-rf72CdgU/lib/python3.6/site-packages/cerberus/errors.py\", line 473, in __call__\r\n    self.extend(errors)\r\n  File \"/root/.local/share/virtualenvs/vcloud-rf72CdgU/lib/python3.6/site-packages/cerberus/errors.py\", line 375, in extend\r\n    self.add(error)\r\n  File \"/root/.local/share/virtualenvs/vcloud-rf72CdgU/lib/python3.6/site-packages/cerberus/errors.py\", line 482, in add\r\n    self.insert_logic_error(error)\r\n  File \"/root/.local/share/virtualenvs/vcloud-rf72CdgU/lib/python3.6/site-packages/cerberus/errors.py\", line 549, in insert_logic_error\r\n    raise NotImplementedError\r\nNotImplementedError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/355", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/355/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/355/events", "html_url": "https://github.com/pyeve/cerberus/issues/355", "id": 288843391, "node_id": "MDU6SXNzdWUyODg4NDMzOTE=", "number": 355, "title": "[feature] add support for metadata keys in schema", "user": {"login": "yagnik", "id": 777296, "node_id": "MDQ6VXNlcjc3NzI5Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/777296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yagnik", "html_url": "https://github.com/yagnik", "followers_url": "https://api.github.com/users/yagnik/followers", "following_url": "https://api.github.com/users/yagnik/following{/other_user}", "gists_url": "https://api.github.com/users/yagnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/yagnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yagnik/subscriptions", "organizations_url": "https://api.github.com/users/yagnik/orgs", "repos_url": "https://api.github.com/users/yagnik/repos", "events_url": "https://api.github.com/users/yagnik/events{/privacy}", "received_events_url": "https://api.github.com/users/yagnik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-16T09:48:22Z", "updated_at": "2018-01-27T23:43:11Z", "closed_at": "2018-01-27T23:43:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently any additional fields in the schema gives an \"unknown rule\" error.\r\nWe are looking to add support for metadata fields or any extra fields in the schema. \r\nI'll be more than happy to add this feature if you can point me in the right direction.\r\n\r\n- I consulted these documentations:\r\n  - [x] http://docs.python-cerberus.org/en/stable/\r\n  - [x] http://docs.python-cerberus.org/en/latest/\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nPLEASE SUMMARIZE YOUR USE-CASE\r\n\r\n```\r\nschema = {\r\n  \"type\": \"string\",\r\n  \"required\": True,\r\n  \"metadata\": \"foobar\"\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pyeve/cerberus/issues/354", "repository_url": "https://api.github.com/repos/pyeve/cerberus", "labels_url": "https://api.github.com/repos/pyeve/cerberus/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/pyeve/cerberus/issues/354/comments", "events_url": "https://api.github.com/repos/pyeve/cerberus/issues/354/events", "html_url": "https://github.com/pyeve/cerberus/issues/354", "id": 287709541, "node_id": "MDU6SXNzdWUyODc3MDk1NDE=", "number": 354, "title": "Schema cannot be added to registry object ", "user": {"login": "daviskirk", "id": 1049817, "node_id": "MDQ6VXNlcjEwNDk4MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1049817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daviskirk", "html_url": "https://github.com/daviskirk", "followers_url": "https://api.github.com/users/daviskirk/followers", "following_url": "https://api.github.com/users/daviskirk/following{/other_user}", "gists_url": "https://api.github.com/users/daviskirk/gists{/gist_id}", "starred_url": "https://api.github.com/users/daviskirk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daviskirk/subscriptions", "organizations_url": "https://api.github.com/users/daviskirk/orgs", "repos_url": "https://api.github.com/users/daviskirk/repos", "events_url": "https://api.github.com/users/daviskirk/events{/privacy}", "received_events_url": "https://api.github.com/users/daviskirk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pyeve/cerberus/milestones/7", "html_url": "https://github.com/pyeve/cerberus/milestone/7", "labels_url": "https://api.github.com/repos/pyeve/cerberus/milestones/7/labels", "id": 3390378, "node_id": "MDk6TWlsZXN0b25lMzM5MDM3OA==", "number": 7, "title": "1.2.1", "description": "", "creator": {"login": "nicolaiarocci", "id": 512968, "node_id": "MDQ6VXNlcjUxMjk2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/512968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaiarocci", "html_url": "https://github.com/nicolaiarocci", "followers_url": "https://api.github.com/users/nicolaiarocci/followers", "following_url": "https://api.github.com/users/nicolaiarocci/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaiarocci/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaiarocci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaiarocci/subscriptions", "organizations_url": "https://api.github.com/users/nicolaiarocci/orgs", "repos_url": "https://api.github.com/users/nicolaiarocci/repos", "events_url": "https://api.github.com/users/nicolaiarocci/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaiarocci/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 17, "state": "closed", "created_at": "2018-05-31T13:24:36Z", "updated_at": "2019-08-10T15:09:01Z", "due_on": null, "closed_at": "2019-08-10T15:09:01Z"}, "comments": 7, "created_at": "2018-01-11T09:02:51Z", "updated_at": "2018-06-02T12:29:13Z", "closed_at": "2018-06-02T12:29:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Used Cerberus 1.1:\r\n\r\n- I consulted these documentations:\r\n  - [x] http://docs.python-cerberus.org/en/stable/\r\n  - [x] http://docs.python-cerberus.org/en/latest/\r\n\r\n- I consulted these sections of the docs (add more lines as necessary):\r\n  - http://docs.python-cerberus.org/en/latest/schemas.html#registries\r\n\r\n- [x] I found nothing relevant to my problem in the docs.\r\n- [x] I found the documentation not helpful to my problem.\r\n\r\n- [x] I have the capacity to improve the docs when my problem is solved.\r\n- [x] I have the capacity to submit a patch when a bug is identified.\r\n\r\n----\r\n\r\n#### Use-case abstract\r\n\r\nI am trying to add schemas to a custom registry so that I don't clutter the `cerberus.schema_registry` namespace. \r\nAdding any schema to a newly created `Registry` object results in an attribute error.\r\n\r\n----\r\n\r\n#### Support request / Bug report\r\n\r\n```python\r\nimport cerberus \r\nr = cerberus.Registry()\r\nr.add('non-system user', {'uid': {'min': 1000, 'max': 0xffff}})\r\n```\r\nresults in \r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-20-ad8c4bb8a5d2> in <module>()\r\n----> 1 r.add('non-system user', {'uid': {'min': 1000, 'max': 0xffff}})\r\n\r\n~/anaconda/envs/athion-forecaster/lib/python3.6/site-packages/cerberus/schema.py in add(self, name, definition)\r\n    375         :param definition: The definition.\r\n    376         :type definition: any :term:`mapping` \"\"\"\r\n--> 377         self._storage[name] = self._expand_definition(definition)\r\n    378 \r\n    379     def all(self):\r\n\r\nAttributeError: 'Registry' object has no attribute '_expand_definition'\r\n```", "performed_via_github_app": null, "score": 1.0}]}