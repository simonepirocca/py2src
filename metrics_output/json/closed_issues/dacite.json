{"total_count": 67, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/konradhalas/dacite/issues/108", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/108/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/108/events", "html_url": "https://github.com/konradhalas/dacite/issues/108", "id": 650196467, "node_id": "MDU6SXNzdWU2NTAxOTY0Njc=", "number": 108, "title": "Feature proposal: Add optional key mapping schemas", "user": {"login": "ebarcsa", "id": 67715652, "node_id": "MDQ6VXNlcjY3NzE1NjUy", "avatar_url": "https://avatars0.githubusercontent.com/u/67715652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebarcsa", "html_url": "https://github.com/ebarcsa", "followers_url": "https://api.github.com/users/ebarcsa/followers", "following_url": "https://api.github.com/users/ebarcsa/following{/other_user}", "gists_url": "https://api.github.com/users/ebarcsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebarcsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebarcsa/subscriptions", "organizations_url": "https://api.github.com/users/ebarcsa/orgs", "repos_url": "https://api.github.com/users/ebarcsa/repos", "events_url": "https://api.github.com/users/ebarcsa/events{/privacy}", "received_events_url": "https://api.github.com/users/ebarcsa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-02T20:49:43Z", "updated_at": "2020-07-03T14:15:31Z", "closed_at": "2020-07-03T08:19:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! \r\nAppreciate that finally we have simple library for this. My implementation was mess but at least learned from it.\r\nI'm clueless why it is not in the standard. Very useful when processing simple HTTP response, database items etc. \r\n\r\nAnyway, i wanted to extended it with mapping of keys because often we don't want to have the same \r\nhierarchy / attribute naming that it was in for example \"application/json\" response.\r\nAs an example:\r\n```\r\n@dataclass\r\n@dacite.map_field('created', 'made')\r\nclass Log():\r\n      created: int\r\n\r\n@dataclass\r\n@dacite.map_fields({'link': 'self', 'logs': 'logs.logs'})\r\nclass Logs():\r\n     link: str\r\n     logs: List[Log]\r\n\r\ndata = {\r\n  \"self\": \"logs@example.com\"\r\n  \"logs\": {\r\n        \"updated\":  1593722205,\r\n        \"logs\": [ {  \"made\": 1593722205  }  ]\r\n}}\r\n# or per request, no decorator\r\nfrom_dict(Logs, data=data, schema={'link': 'self', 'logs': ('logs.logs', { 'created': 'made'})})\r\n```\r\nIf interested i have somewhat implemented it and could create pull request:(https://github.com/ebarcsa/dacite/commit/12a6c9ab3e888088166bfd616d430e8cb428400c)\r\n\r\nCsaba", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/106", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/106/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/106/events", "html_url": "https://github.com/konradhalas/dacite/issues/106", "id": 644885985, "node_id": "MDU6SXNzdWU2NDQ4ODU5ODU=", "number": 106, "title": "Union type field somehow affected by Optional nested type", "user": {"login": "panzer", "id": 3926534, "node_id": "MDQ6VXNlcjM5MjY1MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3926534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/panzer", "html_url": "https://github.com/panzer", "followers_url": "https://api.github.com/users/panzer/followers", "following_url": "https://api.github.com/users/panzer/following{/other_user}", "gists_url": "https://api.github.com/users/panzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/panzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/panzer/subscriptions", "organizations_url": "https://api.github.com/users/panzer/orgs", "repos_url": "https://api.github.com/users/panzer/repos", "events_url": "https://api.github.com/users/panzer/events{/privacy}", "received_events_url": "https://api.github.com/users/panzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-24T19:43:44Z", "updated_at": "2020-07-03T10:37:15Z", "closed_at": "2020-07-03T10:37:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have run up against an issue which seems pretty strange to me. Really the only way I know how to explain it is with an example. I expect the assert at the end to pass (be True) since `h` should be identically recreated from the dict of `g`\r\n\r\nMinimal example to reproduce on dacite 1.5.0:\r\n```python\r\n@dataclass\r\nclass Leaf:\r\n    x: Optional[int]  # changing to `int` fixes the issue\r\n\r\n@dataclass\r\nclass Branch:\r\n    y: List[Union[Leaf, Branch]]\r\n\r\n@dataclass\r\nclass Graph:\r\n    z: Union[Leaf, Branch]\r\n\r\ng = Graph(z=Branch(y=[]))\r\n\r\ng_dict = asdict(g)\r\n\r\nh = dacite.from_dict(data_class=Graph, data=g_dict)\r\n\r\nprint(f\"g= {g}\")            # g= Graph(z=Branch(y=[]))\r\nprint(f\"g_dict= {g_dict}\")  # g_dict= {'z': {'y': []}}\r\nprint(f\"h= {h}\")            # h= Graph(z=Leaf(x=None))\r\n\r\nassert g == h  # fails\r\n```\r\n\r\nAny idea what is going on here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/103", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/103/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/103/events", "html_url": "https://github.com/konradhalas/dacite/issues/103", "id": 639460834, "node_id": "MDU6SXNzdWU2Mzk0NjA4MzQ=", "number": 103, "title": "mypy typecheck fails on dacite import", "user": {"login": "fburato", "id": 1006065, "node_id": "MDQ6VXNlcjEwMDYwNjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1006065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fburato", "html_url": "https://github.com/fburato", "followers_url": "https://api.github.com/users/fburato/followers", "following_url": "https://api.github.com/users/fburato/following{/other_user}", "gists_url": "https://api.github.com/users/fburato/gists{/gist_id}", "starred_url": "https://api.github.com/users/fburato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fburato/subscriptions", "organizations_url": "https://api.github.com/users/fburato/orgs", "repos_url": "https://api.github.com/users/fburato/repos", "events_url": "https://api.github.com/users/fburato/events{/privacy}", "received_events_url": "https://api.github.com/users/fburato/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-16T08:07:02Z", "updated_at": "2020-06-16T11:59:10Z", "closed_at": "2020-06-16T11:59:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @konradhalas,\r\n\r\nI'm having some issues when type-checking my applications with `mypy` due to the absence of the `py.typed` marker in the `dacite` package as required by [PEP 561](https://www.python.org/dev/peps/pep-0561/#id18). I might have not looked to deep into the code, but at a first look it seems like every public entity is properly type annotated. Is there any reason why the package is not marked as typed? Are there stub implementation for type hints that would prevent me from having to add the `# type: ignore` comment?\r\n\r\nThanks,\r\n\r\nFrank", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/102", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/102/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/102/events", "html_url": "https://github.com/konradhalas/dacite/issues/102", "id": 638273544, "node_id": "MDU6SXNzdWU2MzgyNzM1NDQ=", "number": 102, "title": "TypeError: 'type' object is not subscriptable with __future__.annotations", "user": {"login": "eddawley", "id": 2414890, "node_id": "MDQ6VXNlcjI0MTQ4OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2414890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddawley", "html_url": "https://github.com/eddawley", "followers_url": "https://api.github.com/users/eddawley/followers", "following_url": "https://api.github.com/users/eddawley/following{/other_user}", "gists_url": "https://api.github.com/users/eddawley/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddawley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddawley/subscriptions", "organizations_url": "https://api.github.com/users/eddawley/orgs", "repos_url": "https://api.github.com/users/eddawley/repos", "events_url": "https://api.github.com/users/eddawley/events{/privacy}", "received_events_url": "https://api.github.com/users/eddawley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-14T03:08:06Z", "updated_at": "2020-07-03T16:01:40Z", "closed_at": "2020-07-03T10:49:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dacite throws the following error under Python 3.7 with `__future__.annotations` features:\r\n\r\n```\r\nroot@09bea08c2d96:/usr/src# ipython\r\nPython 3.7.4 (default, Oct 17 2019, 05:59:21) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.15.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from __future__ import annotations                                                                                                                                       \r\n\r\nIn [2]: import dacite, dataclasses                                                                                                                                               \r\n\r\nIn [3]: @dataclasses.dataclass \r\n   ...: class Foo: \r\n   ...:     a: list[str] \r\n   ...:                                                                                                                                                                          \r\n\r\nIn [4]: dacite.from_dict(data_class=Foo, data={ \r\n   ...: \"a\": [\"b\"], \r\n   ...: })                                                                                                                                                                       \r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-4-9e1270a160ab> in <module>\r\n      1 dacite.from_dict(data_class=Foo, data={\r\n----> 2 \"a\": [\"b\"],\r\n      3 })\r\n\r\n/usr/local/lib/python3.7/site-packages/dacite/core.py in from_dict(data_class, data, config)\r\n     40     config = config or Config()\r\n     41     try:\r\n---> 42         data_class_hints = get_type_hints(data_class, globalns=config.forward_references)\r\n     43     except NameError as error:\r\n     44         raise ForwardReferenceError(str(error))\r\n\r\n/usr/local/lib/python3.7/typing.py in get_type_hints(obj, globalns, localns)\r\n    974                 if isinstance(value, str):\r\n    975                     value = ForwardRef(value, is_argument=False)\r\n--> 976                 value = _eval_type(value, base_globals, localns)\r\n    977                 hints[name] = value\r\n    978         return hints\r\n\r\n/usr/local/lib/python3.7/typing.py in _eval_type(t, globalns, localns)\r\n    261     \"\"\"\r\n    262     if isinstance(t, ForwardRef):\r\n--> 263         return t._evaluate(globalns, localns)\r\n    264     if isinstance(t, _GenericAlias):\r\n    265         ev_args = tuple(_eval_type(a, globalns, localns) for a in t.__args__)\r\n\r\n/usr/local/lib/python3.7/typing.py in _evaluate(self, globalns, localns)\r\n    465                 localns = globalns\r\n    466             self.__forward_value__ = _type_check(\r\n--> 467                 eval(self.__forward_code__, globalns, localns),\r\n    468                 \"Forward references must evaluate to types.\",\r\n    469                 is_argument=self.__forward_is_argument__)\r\n\r\n<string> in <module>\r\n\r\nTypeError: 'type' object is not subscriptable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/99", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/99/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/99/events", "html_url": "https://github.com/konradhalas/dacite/issues/99", "id": 630291237, "node_id": "MDU6SXNzdWU2MzAyOTEyMzc=", "number": 99, "title": "Additional tagging options for enum representation", "user": {"login": "malthe", "id": 26405, "node_id": "MDQ6VXNlcjI2NDA1", "avatar_url": "https://avatars0.githubusercontent.com/u/26405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malthe", "html_url": "https://github.com/malthe", "followers_url": "https://api.github.com/users/malthe/followers", "following_url": "https://api.github.com/users/malthe/following{/other_user}", "gists_url": "https://api.github.com/users/malthe/gists{/gist_id}", "starred_url": "https://api.github.com/users/malthe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malthe/subscriptions", "organizations_url": "https://api.github.com/users/malthe/orgs", "repos_url": "https://api.github.com/users/malthe/repos", "events_url": "https://api.github.com/users/malthe/events{/privacy}", "received_events_url": "https://api.github.com/users/malthe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-03T20:08:42Z", "updated_at": "2020-07-03T11:04:56Z", "closed_at": "2020-07-03T11:04:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Rust's serde library, [enum representation](https://serde.rs/enum-representations.html) can be untagged (as currently supported in dacite), but also _internally_ and _externally_ tagged.\r\n\r\nThat is, it would be useful to have a means of disambiguating a polymorphic type based not on structure, but a tagged value.\r\n\r\nFor example:\r\n```python\r\nfrom dataclasses import dataclass, field\r\nfrom enum import Enum\r\n\r\nclass E(Enum):\r\n    X = 'x'\r\n    Y = 'y'\r\n    Z = 'z'\r\n\r\n@dataclass\r\nclass A:\r\n    kind: E = field(init=False)\r\n\r\n@dataclass\r\nclass B(A):\r\n    kind = E.X\r\n\r\n@dataclass\r\nclass C(A):\r\n    kind = E.Y\r\n```\r\nThe library would be able to use \"kind\" as an internal tagging:\r\n\r\n```python\r\nassert dacite.from_dict({\"kind\": \"x\"}) == B()\r\n```\r\nExternal tagging is probably harder to do without using annotations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/98", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/98/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/98/events", "html_url": "https://github.com/konradhalas/dacite/issues/98", "id": 625671260, "node_id": "MDU6SXNzdWU2MjU2NzEyNjA=", "number": 98, "title": "Issue with python 3.9.b1", "user": {"login": "ondrejmular", "id": 6061818, "node_id": "MDQ6VXNlcjYwNjE4MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6061818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ondrejmular", "html_url": "https://github.com/ondrejmular", "followers_url": "https://api.github.com/users/ondrejmular/followers", "following_url": "https://api.github.com/users/ondrejmular/following{/other_user}", "gists_url": "https://api.github.com/users/ondrejmular/gists{/gist_id}", "starred_url": "https://api.github.com/users/ondrejmular/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ondrejmular/subscriptions", "organizations_url": "https://api.github.com/users/ondrejmular/orgs", "repos_url": "https://api.github.com/users/ondrejmular/repos", "events_url": "https://api.github.com/users/ondrejmular/events{/privacy}", "received_events_url": "https://api.github.com/users/ondrejmular/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-27T12:51:57Z", "updated_at": "2020-07-03T14:17:21Z", "closed_at": "2020-07-03T14:17:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, first of all thank you for a great lib!\r\n\r\nIn Fedora, all python packages are currently being rebuild and tested with the latest Python 3.9 beta1. And it seems like there have been some changes in internals of `typing` module.\r\n\r\nAfter a really quick investigation I found that accessing `__args__` attribute of a type object (e.g. `typing.Mapping`, used in tests) raises an `AttributeError` exception.\r\n\r\nI tried to fix that issue in this commit https://github.com/ondrejmular/dacite/commit/37a7d1f4083126ce698797ff945340560764fc4d. With this commit, dacite test suite is passing.\r\n\r\nI have not created a PR just yet, as after a further research I found that there are some other changes that may affect functionality of this lib even though tests are passing. I've noticed that `_special` attribute is missing as well (at least in `typing.Mapping`), and I think I've seen this attribute used somewhere in the codebase. I wasn't able to find anything related to this in [what's new in python 3.9](https://docs.python.org/3.9/whatsnew/3.9.html).\r\n\r\nHere is a difference that I found between python 3.8 and python 3.9 yet:\r\n```\r\n[root@node1 ~]# python3\r\nPython 3.8.2 (default, Feb 28 2020, 00:00:00)\r\n[GCC 10.0.1 20200216 (Red Hat 10.0.1-0.8)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import typing\r\n>>> typing.Mapping.__args__\r\n(~KT, +VT_co)\r\n>>> typing.Mapping.__dict__\r\n{'_inst': True, '_special': True, '_name': 'Mapping', '__origin__': <class 'collections.abc.Mapping'>, '__args__': (~KT, +VT_co), '__parameters__': (~KT, +VT_co), '__slots__': None}\r\n>>>\r\n```\r\n```\r\n[root@node2 ~]# python3\r\nPython 3.9.0b1 (default, May 21 2020, 00:00:00)\r\n[GCC 10.1.1 20200507 (Red Hat 10.1.1-1)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import typing\r\n>>> typing.Mapping.__args__\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib64/python3.9/typing.py\", line 640, in __getattr__\r\n    raise AttributeError(attr)\r\nAttributeError: __args__\r\n>>> typing.Mapping.__dict__\r\n{'_inst': True, '_name': 'Mapping', '__origin__': <class 'collections.abc.Mapping'>, '__slots__': None, '_nparams': 2, '__doc__': 'A generic version of collections.abc.Mapping.'}\r\n>>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/96", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/96/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/96/events", "html_url": "https://github.com/konradhalas/dacite/issues/96", "id": 616051942, "node_id": "MDU6SXNzdWU2MTYwNTE5NDI=", "number": 96, "title": "Any way to use an existing dataclass and just augment it with dacite?", "user": {"login": "alexferl", "id": 3533424, "node_id": "MDQ6VXNlcjM1MzM0MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3533424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexferl", "html_url": "https://github.com/alexferl", "followers_url": "https://api.github.com/users/alexferl/followers", "following_url": "https://api.github.com/users/alexferl/following{/other_user}", "gists_url": "https://api.github.com/users/alexferl/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexferl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexferl/subscriptions", "organizations_url": "https://api.github.com/users/alexferl/orgs", "repos_url": "https://api.github.com/users/alexferl/repos", "events_url": "https://api.github.com/users/alexferl/events{/privacy}", "received_events_url": "https://api.github.com/users/alexferl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-11T17:27:50Z", "updated_at": "2020-05-31T14:13:15Z", "closed_at": "2020-05-31T14:13:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThank you for the lib, I was about to make something similar to handle nested data and dataclasses but found yours instead.\r\n\r\nThat being said, I haven't found a way to do exactly what I want even after searching. Perhaps you can help me?\r\n\r\nI have the following base dataclass that has some fields and methods that I want in all my other dataclasses:\r\n\r\n```\r\n@dataclass\r\nclass BaseModel:\r\n    id: str = \"\"\r\n    created_at: str = field(default_factory=get_isoformat)\r\n    deleted_at: Optional[str] = None\r\n    updated_at: Optional[str] = None\r\n\r\n    def _set_attrs(self, d: dict) -> BaseModel:\r\n        for k, v in d.items():\r\n            setattr(self, k, v)\r\n        return self\r\n\r\n    def delete(self):\r\n        self.deleted_at = get_isoformat()\r\n\r\n    def update(self, d: dict) -> BaseModel:\r\n        self.updated_at = get_isoformat()\r\n        return self._set_attrs(d)\r\n\r\n    def from_dict(self, d: dict) -> BaseModel:\r\n        return self._set_attrs(d)\r\n\r\n    def from_json(self, d: str) -> BaseModel:\r\n        return self._set_attrs(json.loads(d))\r\n\r\n    def to_dict(self) -> dict:\r\n        return asdict(self)\r\n\r\n    def to_json(self) -> bytes:\r\n        return json.dumps(self.to_dict())\r\n```\r\n\r\nObviously the way I set the attributes in `_set_attrs` is very naive and won't support nested data so I was hopping to use dacite **within** that method to properly set them for me.\r\n\r\nThe use case for this is the following:\r\nConsider the following dataclasses:\r\n```\r\n@dataclass\r\nclass Profile:\r\n    picture_url: str = \"\"\r\n\r\n@dataclass\r\nclass UserModel(BaseModel):\r\n    email: str = \"\"\r\n    first_name: str = \"\"\r\n    last_name: str = \"\"\r\n    profile: Profile = Profile()\r\n```\r\n\r\nIf I were to create a user I would do something like:\r\n```\r\ndata = {\"email\": \"test@example.com\", \"first_name\": \"Test\", \"last_name\": \"User\"}\r\nuser = UserModel(**data)\r\ndb.save(user)\r\n```\r\n\r\nNo problem there as there's no nested fields.\r\n\r\nNow if I wanted to update a nested field:\r\n```\r\ndata = {\"profile\": {\"profile_url\": \"some_url}\r\nuser = db.load(user_id)\r\nuser.update(data)\r\ndb.save(user)\r\n```\r\nAs you know that's not gonna work, `profile` will be set to: `{\"profile_url\": \"some_url\"}`\r\n\r\nEnter `dacite`.\r\nIdeally, I'd want to modify my `BaseModel`'s `update()` method to something like this:\r\n```\r\n    def update(self, d: dict) -> BaseModel:\r\n        self.updated_at = get_isoformat()\r\n        dacite.from_dict(self, d)\r\n        return self\r\n```\r\n\r\nbut again, as you know, this won't work since `from_dict()` excepts `Type[T]` not an instance.\r\n\r\nA very hacky workaround that seems like a bad idea is:\r\n```\r\n    def update(self, d: dict) -> BaseModel:\r\n        self.updated_at = get_isoformat()\r\n        self.__dict__.update(d)\r\n        c = dacite.from_dict(self.__class__, asdict(self))\r\n        new_obj = c\r\n        self.__dict__.update(new_obj.__dict__)\r\n        return self\r\n```\r\n\r\nMy question is, would you consider having `dacite` augment an existing instance instead of creating one? Or is there another way to do what I want?\r\n\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/95", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/95/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/95/events", "html_url": "https://github.com/konradhalas/dacite/issues/95", "id": 615801661, "node_id": "MDU6SXNzdWU2MTU4MDE2NjE=", "number": 95, "title": "Feature proposal: as_dict method which uses dacite's Config", "user": {"login": "mprzewie", "id": 21194406, "node_id": "MDQ6VXNlcjIxMTk0NDA2", "avatar_url": "https://avatars3.githubusercontent.com/u/21194406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mprzewie", "html_url": "https://github.com/mprzewie", "followers_url": "https://api.github.com/users/mprzewie/followers", "following_url": "https://api.github.com/users/mprzewie/following{/other_user}", "gists_url": "https://api.github.com/users/mprzewie/gists{/gist_id}", "starred_url": "https://api.github.com/users/mprzewie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mprzewie/subscriptions", "organizations_url": "https://api.github.com/users/mprzewie/orgs", "repos_url": "https://api.github.com/users/mprzewie/repos", "events_url": "https://api.github.com/users/mprzewie/events{/privacy}", "received_events_url": "https://api.github.com/users/mprzewie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-11T11:12:31Z", "updated_at": "2020-07-03T14:19:52Z", "closed_at": "2020-07-03T14:19:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know the standard `dataclasses` lib provides `asdict` by default, but it would be nice to be able to boost it with many of the awesome functionalities Dacite provides, such as type hooks. \r\n\r\nMy use case is serialization/deserialization of objects such as pathlib Paths or numpy arrays. \r\nI'd be happy to help with it if you are considering this a viable direction for dacite.\r\n\r\nThanks for an awesome project! It's really useful :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/90", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/90/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/90/events", "html_url": "https://github.com/konradhalas/dacite/issues/90", "id": 609102973, "node_id": "MDU6SXNzdWU2MDkxMDI5NzM=", "number": 90, "title": "support for dashes in dictionary keys?", "user": {"login": "muxator", "id": 4067621, "node_id": "MDQ6VXNlcjQwNjc2MjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/4067621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muxator", "html_url": "https://github.com/muxator", "followers_url": "https://api.github.com/users/muxator/followers", "following_url": "https://api.github.com/users/muxator/following{/other_user}", "gists_url": "https://api.github.com/users/muxator/gists{/gist_id}", "starred_url": "https://api.github.com/users/muxator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muxator/subscriptions", "organizations_url": "https://api.github.com/users/muxator/orgs", "repos_url": "https://api.github.com/users/muxator/repos", "events_url": "https://api.github.com/users/muxator/events{/privacy}", "received_events_url": "https://api.github.com/users/muxator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-29T14:28:29Z", "updated_at": "2020-05-02T20:25:45Z", "closed_at": "2020-05-02T12:47:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am trying to convert a legacy project's configuration structures from dictionaries to dataclasses. **dacite** is a wonderful library for accomplishing this.\r\n\r\nI have a problem that probably is going to be common enough, and I wanted to know if dacite supports this case.\r\n\r\n\r\nIn my project the incoming dictionary's structure has to be considered fixed, for backwards compatibility reasons. Unfortunately, some keys of that dictionary contain a dash (for example: **`is-active`** instead of `is_active` like in **dacite**'s main the example).\r\n\r\nI would be ok with changing the name of the dataclass member, replacing the dash with something else, but I cannot change the structure of the incoming dictionary. Something on the lines of:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nfrom dacite import from_dict\r\n\r\n\r\n@dataclass\r\nclass User:\r\n    name: str\r\n    age: int\r\n\r\n    # - a \"magical\" auto conversion of \"-\" to \"_\" (bad)?\r\n    # - a an explicit mapping of the source key name via some annotation?\r\n    is_active: bool # <-- just a proposal\r\n\r\ndata = {\r\n    'name': 'John',\r\n    'age': 30,\r\n    'is-active': True,   # <-- dict key name has a dash, and cannot be changed\r\n}\r\n\r\nuser = from_dict(data_class=User, data=data)\r\n\r\nassert user == User(name='John', age=30, is_active=True)\r\n```\r\n\r\nDoes dacite currently support this use case?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/89", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/89/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/89/events", "html_url": "https://github.com/konradhalas/dacite/issues/89", "id": 607579082, "node_id": "MDU6SXNzdWU2MDc1NzkwODI=", "number": 89, "title": "tuples with elements of mixed types don't work correctly", "user": {"login": "ArthurKantor", "id": 628379, "node_id": "MDQ6VXNlcjYyODM3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/628379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArthurKantor", "html_url": "https://github.com/ArthurKantor", "followers_url": "https://api.github.com/users/ArthurKantor/followers", "following_url": "https://api.github.com/users/ArthurKantor/following{/other_user}", "gists_url": "https://api.github.com/users/ArthurKantor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArthurKantor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArthurKantor/subscriptions", "organizations_url": "https://api.github.com/users/ArthurKantor/orgs", "repos_url": "https://api.github.com/users/ArthurKantor/repos", "events_url": "https://api.github.com/users/ArthurKantor/events{/privacy}", "received_events_url": "https://api.github.com/users/ArthurKantor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-27T14:06:02Z", "updated_at": "2020-05-02T17:16:22Z", "closed_at": "2020-05-02T12:30:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nThanks for the library.\r\n\r\nThe problem follows.\r\n\r\n```python\r\nimport dacite \r\nfrom dataclasses import dataclass \r\nfrom typing import List, Tuple \r\n \r\n@dataclass \r\nclass MyDataClass: \r\n    field: List[Tuple[int,str]] \r\n \r\n \r\ndat={'field':[(1,'one'),(2,'two')]} \r\n \r\ndacite.from_dict(MyDataClass, dat, config=dacite.Config(cast=[tuple])) \r\n```\r\nerrors with \r\n`WrongTypeError: wrong value type for field \"field\" - should be \"typing.List[typing.Tuple[int, str]]\" instead of value \"[(1, 'one'), (2, 'two')]\" of type \"list\"`\r\n\r\nBut this works fine:\r\n```python\r\nimport dacite \r\nfrom dataclasses import dataclass \r\nfrom typing import List, Tuple \r\n \r\n@dataclass \r\nclass MyDataClass: \r\n    field: List[Tuple[str,str]] \r\n \r\n \r\ndat={'field':[('1','one'),('2','two')]} \r\n \r\ndacite.from_dict(MyDataClass, dat, config=dacite.Config(cast=[tuple]))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/87", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/87/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/87/events", "html_url": "https://github.com/konradhalas/dacite/issues/87", "id": 602655293, "node_id": "MDU6SXNzdWU2MDI2NTUyOTM=", "number": 87, "title": "Assigning bool values to an int/float field doesn't raise WrongTypeError", "user": {"login": "hieu-n", "id": 6425119, "node_id": "MDQ6VXNlcjY0MjUxMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6425119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hieu-n", "html_url": "https://github.com/hieu-n", "followers_url": "https://api.github.com/users/hieu-n/followers", "following_url": "https://api.github.com/users/hieu-n/following{/other_user}", "gists_url": "https://api.github.com/users/hieu-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/hieu-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hieu-n/subscriptions", "organizations_url": "https://api.github.com/users/hieu-n/orgs", "repos_url": "https://api.github.com/users/hieu-n/repos", "events_url": "https://api.github.com/users/hieu-n/events{/privacy}", "received_events_url": "https://api.github.com/users/hieu-n/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-19T08:23:35Z", "updated_at": "2020-04-23T19:40:41Z", "closed_at": "2020-04-23T19:40:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom dataclasses import dataclass\r\nimport dacite\r\n\r\n@dataclass\r\nclass Example:\r\n    should_be_number: float = 0\r\n\r\na_dict = {'should_be_number': False}\r\nobj = dacite.from_dict(Example, a_dict)\r\nprint(obj.should_be_number == False)\r\n```\r\n\r\nI'm using dacite 1.4.0.\r\nThe code above doesn't raise WrongTypeError. I think it should.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/85", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/85/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/85/events", "html_url": "https://github.com/konradhalas/dacite/issues/85", "id": 602645689, "node_id": "MDU6SXNzdWU2MDI2NDU2ODk=", "number": 85, "title": "from_dict as class method", "user": {"login": "StyXman", "id": 167327, "node_id": "MDQ6VXNlcjE2NzMyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/167327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StyXman", "html_url": "https://github.com/StyXman", "followers_url": "https://api.github.com/users/StyXman/followers", "following_url": "https://api.github.com/users/StyXman/following{/other_user}", "gists_url": "https://api.github.com/users/StyXman/gists{/gist_id}", "starred_url": "https://api.github.com/users/StyXman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StyXman/subscriptions", "organizations_url": "https://api.github.com/users/StyXman/orgs", "repos_url": "https://api.github.com/users/StyXman/repos", "events_url": "https://api.github.com/users/StyXman/events{/privacy}", "received_events_url": "https://api.github.com/users/StyXman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-19T07:25:32Z", "updated_at": "2020-04-29T20:09:46Z", "closed_at": "2020-04-23T19:22:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "That way this:\r\n\r\n```python\r\nfrom_dict(data_class=User, data=data)\r\n```\r\n\r\nCould become this:\r\n\r\n```python\r\nUser.from_dict(data)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/84", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/84/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/84/events", "html_url": "https://github.com/konradhalas/dacite/issues/84", "id": 599365030, "node_id": "MDU6SXNzdWU1OTkzNjUwMzA=", "number": 84, "title": "Type hooks are applied at the wrong time for Union cases.", "user": {"login": "kwvanderlinde", "id": 7492219, "node_id": "MDQ6VXNlcjc0OTIyMTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7492219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwvanderlinde", "html_url": "https://github.com/kwvanderlinde", "followers_url": "https://api.github.com/users/kwvanderlinde/followers", "following_url": "https://api.github.com/users/kwvanderlinde/following{/other_user}", "gists_url": "https://api.github.com/users/kwvanderlinde/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwvanderlinde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwvanderlinde/subscriptions", "organizations_url": "https://api.github.com/users/kwvanderlinde/orgs", "repos_url": "https://api.github.com/users/kwvanderlinde/repos", "events_url": "https://api.github.com/users/kwvanderlinde/events{/privacy}", "received_events_url": "https://api.github.com/users/kwvanderlinde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-14T07:44:13Z", "updated_at": "2020-05-02T17:16:55Z", "closed_at": "2020-05-02T11:42:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "This relates to the fix for #82.\r\n\r\nIn most circumstances, a type hook is applied to input data before the corresponding type is instantiated. This lets us modify the input prior to parsing it. However, if the type is used in a `Union`, then the type hook is not applied to the input, but to the parsed result.\r\n\r\nThe expected behaviour would be for the type hook always and only be used to transform the input data.\r\n\r\nHere is a minimal example demonstrating the difference:\r\n```python3\r\n#!/usr/bin/env python3\r\nimport dacite\r\nfrom dataclasses import dataclass\r\nfrom typing import Union\r\n\r\n\r\ndef hook(data):\r\n    assert not isinstance(data, B)\r\n    return data\r\n\r\n\r\n@dataclass\r\nclass A:\r\n    a: int\r\n\r\n\r\n@dataclass\r\nclass B:\r\n    b: str\r\n\r\n\r\n@dataclass\r\nclass Top:\r\n    field: Union[A, B]  # Removing `A` makes the assertion pass!\r\n\r\n\r\ndacite.from_dict(\r\n    data_class=Top,\r\n    data={\r\n        'field': {\r\n            'b': 'Hello!'\r\n        }\r\n    },\r\n    config=dacite.Config(\r\n        strict=True,\r\n        type_hooks={\r\n            B: hook,\r\n        }\r\n    ))\r\n```\r\n\r\nThis occurs on dacite 1.4.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/82", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/82/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/82/events", "html_url": "https://github.com/konradhalas/dacite/issues/82", "id": 596332503, "node_id": "MDU6SXNzdWU1OTYzMzI1MDM=", "number": 82, "title": "Type hooks are not called for Union cases", "user": {"login": "kwvanderlinde", "id": 7492219, "node_id": "MDQ6VXNlcjc0OTIyMTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7492219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwvanderlinde", "html_url": "https://github.com/kwvanderlinde", "followers_url": "https://api.github.com/users/kwvanderlinde/followers", "following_url": "https://api.github.com/users/kwvanderlinde/following{/other_user}", "gists_url": "https://api.github.com/users/kwvanderlinde/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwvanderlinde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwvanderlinde/subscriptions", "organizations_url": "https://api.github.com/users/kwvanderlinde/orgs", "repos_url": "https://api.github.com/users/kwvanderlinde/repos", "events_url": "https://api.github.com/users/kwvanderlinde/events{/privacy}", "received_events_url": "https://api.github.com/users/kwvanderlinde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T06:09:06Z", "updated_at": "2020-04-10T20:10:48Z", "closed_at": "2020-04-10T20:10:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is a simple example:\r\n```python3\r\n#!/usr/bin/env python3\r\nimport dacite\r\nfrom dataclasses import dataclass\r\nfrom typing import Union\r\n\r\n\r\n@dataclass\r\nclass A:\r\n    a: int\r\n\r\n\r\n@dataclass\r\nclass B:\r\n    b: str\r\n\r\n\r\n@dataclass\r\nclass Top:\r\n    field: Union[A, B]\r\n\r\n\r\nresult = dacite.from_dict(\r\n    data_class=Top,\r\n    data={\r\n        'field': {\r\n            'b': '52'\r\n        }\r\n    },\r\n    config=dacite.Config(\r\n        type_hooks={\r\n            B: lambda d: B(b='Hello!')\r\n        }\r\n    ))\r\nprint(result)\r\n```\r\nIf you run this today, it will print:\r\n```\r\nTop(field=B(b='52'))\r\n```\r\nNotice that the `B` instance returned by the type hook is ignored (indeed the type hook is never called). I would expect the code to actually print:\r\n```\r\nTop(field=B(b='Hello!'))\r\n```\r\n\r\nThis is inconsistent with the non-`Union` case. I.e., if we use a simpler version of `Top`, the type hook *is* used:\r\n```python3\r\n@dataclass\r\nclass Top:\r\n    field: B\r\n```\r\nOf course, a `Union` with a single argument is identical to just using the argument, so this also works:\r\n```python3\r\n@dataclass\r\nclass Top:\r\n    field: Union[B]\r\n```\r\nBut once we add a second argument to the Union, no more type hooks are used.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/81", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/81/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/81/events", "html_url": "https://github.com/konradhalas/dacite/issues/81", "id": 595015375, "node_id": "MDU6SXNzdWU1OTUwMTUzNzU=", "number": 81, "title": "When using from dict with strict config it collides with InitVar", "user": {"login": "KasperskyZiv", "id": 11722351, "node_id": "MDQ6VXNlcjExNzIyMzUx", "avatar_url": "https://avatars3.githubusercontent.com/u/11722351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KasperskyZiv", "html_url": "https://github.com/KasperskyZiv", "followers_url": "https://api.github.com/users/KasperskyZiv/followers", "following_url": "https://api.github.com/users/KasperskyZiv/following{/other_user}", "gists_url": "https://api.github.com/users/KasperskyZiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/KasperskyZiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KasperskyZiv/subscriptions", "organizations_url": "https://api.github.com/users/KasperskyZiv/orgs", "repos_url": "https://api.github.com/users/KasperskyZiv/repos", "events_url": "https://api.github.com/users/KasperskyZiv/events{/privacy}", "received_events_url": "https://api.github.com/users/KasperskyZiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-06T10:59:03Z", "updated_at": "2020-04-10T19:21:31Z", "closed_at": "2020-04-10T19:21:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I user InitVar to initiate some enum from number but it's not in `fields()` so when i user `strict` it throws an `UnexpectedDataError`.\r\n\r\npossible solution is to add a new field function:\r\n```python\r\ndef fields_w_init_var(class_or_instance):\r\n    \"\"\"Return a tuple describing the fields of this dataclass.\r\n\r\n    Accepts a dataclass or an instance of one. Tuple elements are of\r\n    type Field.\r\n    \"\"\"\r\n\r\n    # Might it be worth caching this, per class?\r\n    try:\r\n        fields = getattr(class_or_instance, _FIELDS)\r\n    except AttributeError:\r\n        raise TypeError('must be called with a dataclass type or instance')\r\n\r\n    # Exclude pseudo-fields.  Note that fields is sorted by insertion\r\n    # order, so the order of the tuple is as the fields were defined.\r\n    return tuple(f for f in fields.values() if f._field_type is _FIELD or f._field_type is _FIELD_INITVAR)\r\n```\r\n\r\nand then edit the from_dict code:\r\n```python\r\n    if config.strict:\r\n        accepted_fields = fields_w_init_var(data_class)\r\n        extra_fields = set(data.keys()) - {f.name for f in accepted_fields}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/80", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/80/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/80/events", "html_url": "https://github.com/konradhalas/dacite/issues/80", "id": 575750526, "node_id": "MDU6SXNzdWU1NzU3NTA1MjY=", "number": 80, "title": "Support for Literal?", "user": {"login": "jbcpollak", "id": 188558, "node_id": "MDQ6VXNlcjE4ODU1OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/188558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcpollak", "html_url": "https://github.com/jbcpollak", "followers_url": "https://api.github.com/users/jbcpollak/followers", "following_url": "https://api.github.com/users/jbcpollak/following{/other_user}", "gists_url": "https://api.github.com/users/jbcpollak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcpollak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcpollak/subscriptions", "organizations_url": "https://api.github.com/users/jbcpollak/orgs", "repos_url": "https://api.github.com/users/jbcpollak/repos", "events_url": "https://api.github.com/users/jbcpollak/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcpollak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-04T20:36:59Z", "updated_at": "2020-03-19T13:07:36Z", "closed_at": "2020-03-14T20:54:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to be able to deserialize from_dict() a Union of overlapping types based on the Literal values. Is that possible?\r\n\r\n```\r\n    @dataclass\r\n    class AType:\r\n        # changing type to str doesn't help\r\n        type: Literal['A'] = 'A'\r\n\r\n    @dataclass\r\n    class BType:\r\n        type: Literal['B'] = 'B'\r\n\r\n    @dataclass\r\n    class AorB:\r\n        u: Union[AType, BType]\r\n\r\n        obj = dacite.from_dict(\r\n            data_class=AorB,\r\n            data=loaded_dict,\r\n            config=dacite.Config(strict=False)\r\n       )\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/79", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/79/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/79/events", "html_url": "https://github.com/konradhalas/dacite/issues/79", "id": 572941005, "node_id": "MDU6SXNzdWU1NzI5NDEwMDU=", "number": 79, "title": "per-class disable strict=True?", "user": {"login": "jbcpollak", "id": 188558, "node_id": "MDQ6VXNlcjE4ODU1OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/188558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcpollak", "html_url": "https://github.com/jbcpollak", "followers_url": "https://api.github.com/users/jbcpollak/followers", "following_url": "https://api.github.com/users/jbcpollak/following{/other_user}", "gists_url": "https://api.github.com/users/jbcpollak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcpollak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcpollak/subscriptions", "organizations_url": "https://api.github.com/users/jbcpollak/orgs", "repos_url": "https://api.github.com/users/jbcpollak/repos", "events_url": "https://api.github.com/users/jbcpollak/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcpollak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-28T18:54:20Z", "updated_at": "2020-03-02T19:01:16Z", "closed_at": "2020-03-02T19:01:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "is it possible to disable strict-field checking on a per-subclass basis? For example, give this class structure I'd like to make B as \"not strict\" so I can get the \"extra\" field back:\r\n\r\n```\r\n\r\n        @dataclass\r\n        class A:\r\n           b: B\r\n\r\n        @dataclass\r\n        class B:\r\n           f: str\r\n\r\n        data = {\r\n           b: {\r\n               f: \"Foo\",\r\n               extra: \"More Data\",        \r\n        }\r\n        obj = dacite.from_dict(\r\n            data_class=A,\r\n            data=data,\r\n            config=dacite.Config(\r\n                strict=True\r\n            )\r\n        )\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/78", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/78/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/78/events", "html_url": "https://github.com/konradhalas/dacite/issues/78", "id": 571813017, "node_id": "MDU6SXNzdWU1NzE4MTMwMTc=", "number": 78, "title": "Add 'rename_keys=' Config  option", "user": {"login": "tomsem", "id": 1051562, "node_id": "MDQ6VXNlcjEwNTE1NjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1051562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomsem", "html_url": "https://github.com/tomsem", "followers_url": "https://api.github.com/users/tomsem/followers", "following_url": "https://api.github.com/users/tomsem/following{/other_user}", "gists_url": "https://api.github.com/users/tomsem/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomsem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomsem/subscriptions", "organizations_url": "https://api.github.com/users/tomsem/orgs", "repos_url": "https://api.github.com/users/tomsem/repos", "events_url": "https://api.github.com/users/tomsem/events{/privacy}", "received_events_url": "https://api.github.com/users/tomsem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-27T04:27:48Z", "updated_at": "2020-02-28T10:42:51Z", "closed_at": "2020-02-28T10:42:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Use case is that a script is ingesting some JSON and the incoming  key names do not conform to Python naming conventions (e.g., they're Java or JavaScript naming conventions instead). I'd like to be able to supply  a function to rename them to the desired target dataclass property  names, perhaps using something like 'inflection' package:\r\n\r\nExample:\r\n```\r\nfrom dataclasses import dataclass\r\n\r\nfrom dacite import from_dict\r\nfrom inflection import underscore\r\n\r\n\r\n@dataclass\r\nclass Metrics:\r\n    blocked_duration_millis: int\r\n    blocked_time_millis: int\r\n    buildable_duration_millis: int\r\n\r\n\r\ndata = {\r\n      \"blockedDurationMillis\": 1803,\r\n      \"blockedTimeMillis\": 1803,\r\n      \"buildableDurationMillis\": 0\r\n    }\r\n\r\n\r\nresult = from_dict(Metrics, data, config=Config(rename_keys=underscore)\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/77", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/77/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/77/events", "html_url": "https://github.com/konradhalas/dacite/issues/77", "id": 564983698, "node_id": "MDU6SXNzdWU1NjQ5ODM2OTg=", "number": 77, "title": "WrongTypeError: should be \"typing.Union[float, NoneType]\" instead of \"int\"", "user": {"login": "Garrett-R", "id": 6614695, "node_id": "MDQ6VXNlcjY2MTQ2OTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6614695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Garrett-R", "html_url": "https://github.com/Garrett-R", "followers_url": "https://api.github.com/users/Garrett-R/followers", "following_url": "https://api.github.com/users/Garrett-R/following{/other_user}", "gists_url": "https://api.github.com/users/Garrett-R/gists{/gist_id}", "starred_url": "https://api.github.com/users/Garrett-R/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Garrett-R/subscriptions", "organizations_url": "https://api.github.com/users/Garrett-R/orgs", "repos_url": "https://api.github.com/users/Garrett-R/repos", "events_url": "https://api.github.com/users/Garrett-R/events{/privacy}", "received_events_url": "https://api.github.com/users/Garrett-R/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-13T22:18:15Z", "updated_at": "2020-03-03T09:10:42Z", "closed_at": "2020-03-02T19:18:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is quite similar to Issue #62, only different being that I've now added an extra `Optional`:\r\n\r\n```python\r\nimport dataclasses\r\nfrom typing import Optional\r\n\r\nimport dacite\r\n\r\n\r\n@dataclasses.dataclass\r\nclass Person:\r\n    height: Optional[float] = 160\r\n\r\nperson = Person()\r\nperson_dict = dataclasses.asdict(person)\r\n\r\nnew_person_1 = dacite.from_dict(data_class=Person, data=person_dict)\r\n```\r\n\r\nOn the latest version of Dacite (v1.2.0 \u2012 9c311b1), executing this yields:\r\n```\r\nWrongTypeError: wrong type for field \"height\" - should be \"typing.Union[float, NoneType]\" instead of \"int\"\r\n```\r\n\r\nChanging `Optional[float]` to be just `float` will make it work again.  This seems to be a bug since `Optional[float]` should also work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/74", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/74/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/74/events", "html_url": "https://github.com/konradhalas/dacite/issues/74", "id": 539556304, "node_id": "MDU6SXNzdWU1Mzk1NTYzMDQ=", "number": 74, "title": "The numeric tower", "user": {"login": "larsrinn", "id": 22575361, "node_id": "MDQ6VXNlcjIyNTc1MzYx", "avatar_url": "https://avatars3.githubusercontent.com/u/22575361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsrinn", "html_url": "https://github.com/larsrinn", "followers_url": "https://api.github.com/users/larsrinn/followers", "following_url": "https://api.github.com/users/larsrinn/following{/other_user}", "gists_url": "https://api.github.com/users/larsrinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsrinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsrinn/subscriptions", "organizations_url": "https://api.github.com/users/larsrinn/orgs", "repos_url": "https://api.github.com/users/larsrinn/repos", "events_url": "https://api.github.com/users/larsrinn/events{/privacy}", "received_events_url": "https://api.github.com/users/larsrinn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-18T09:24:21Z", "updated_at": "2019-12-27T13:16:14Z", "closed_at": "2019-12-27T13:16:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've seen the discussion in #62 and am kind of reopening the issue, because I disagree with the output (if @konradhalas disagrees to my objection, feel free to close this issue for good):\r\n\r\nLet me cite PEP383 as an argument: https://www.python.org/dev/peps/pep-0484/#the-numeric-tower\r\n\r\n> PEP 3141 defines Python's numeric tower, and the stdlib module numbers implements the corresponding ABCs (Number, Complex, Real, Rational and Integral). There are some issues with these ABCs, but the built-in concrete numeric classes complex, float and int are ubiquitous (especially the latter two :-).\r\n\r\n> Rather than requiring that users write import numbers and then use numbers.Float etc., this PEP proposes a straightforward shortcut that is almost as effective: when an argument is annotated as having type float, an argument of type int is acceptable; similar, for an argument annotated as having type complex, arguments of type float or int are acceptable. This does not handle classes implementing the corresponding ABCs or the fractions.Fraction class, but we believe those use cases are exceedingly rare.\r\n\r\ndacite not accepting `int`s as `float`s or `complex`' makes it seem more catholic than the Pope. It requires us to write more complex code without providing any benefit.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/73", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/73/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/73/events", "html_url": "https://github.com/konradhalas/dacite/issues/73", "id": 539540907, "node_id": "MDU6SXNzdWU1Mzk1NDA5MDc=", "number": 73, "title": "Behaviour when deserializing tuples", "user": {"login": "larsrinn", "id": 22575361, "node_id": "MDQ6VXNlcjIyNTc1MzYx", "avatar_url": "https://avatars3.githubusercontent.com/u/22575361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsrinn", "html_url": "https://github.com/larsrinn", "followers_url": "https://api.github.com/users/larsrinn/followers", "following_url": "https://api.github.com/users/larsrinn/following{/other_user}", "gists_url": "https://api.github.com/users/larsrinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsrinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsrinn/subscriptions", "organizations_url": "https://api.github.com/users/larsrinn/orgs", "repos_url": "https://api.github.com/users/larsrinn/repos", "events_url": "https://api.github.com/users/larsrinn/events{/privacy}", "received_events_url": "https://api.github.com/users/larsrinn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-18T08:53:00Z", "updated_at": "2019-12-27T12:11:05Z", "closed_at": "2019-12-27T12:11:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "...and probably also for sets, etc.\r\n\r\nFirst of all, thank you for comments and changes after my last issue #61. I clearly understand the reasoning behind that.\r\n\r\nNow I'm running into issues related to that. When trying to deserialize a dictionary that has a list but the dataclass requires tuples, I can't get the casting to work. I think the code speaks for itsself:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nimport typing\r\n\r\nfrom dacite import from_dict, Config\r\n\r\nTupleOfInts = typing.Tuple[int]\r\n\r\n\r\n@dataclass\r\nclass Dataclass:\r\n    values: TupleOfInts\r\n\r\n\r\nfrom_dict(\r\n    data_class=Dataclass,\r\n    data={\"values\": [1,2,3]},\r\n    config=Config(\r\n        cast=[\r\n            typing.Tuple, # I'd expect either of these to work\r\n            tuple,\r\n        ]\r\n    )\r\n)\r\n```\r\n\r\n```\r\ndacite.exceptions.WrongTypeError: wrong type for field \"values\" - should be \"typing.Tuple[int]\" instead of \"list\"\r\n```\r\n\r\nI expected dacite to cast the list to a tuple and then confirm the actual values are ints. So I thought: Maybe I have to add the `TupleOfInts` to the `cast` parameter explicitly (which I'd prefer to avoid) but then I get another error:\r\n\r\n```\r\n  File \"/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py\", line 671, in __call__\r\n    raise TypeError(f\"Type {self._name} cannot be instantiated; \"\r\nTypeError: Type Tuple cannot be instantiated; use tuple() instead\r\n```\r\n\r\nbtw: My editor complains when passing in a set as parameter for `cast`. Without having looked at the implementation, it seems the type hint `List` is more restrictive than necessary and `Iterable` will do the job, too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/72", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/72/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/72/events", "html_url": "https://github.com/konradhalas/dacite/issues/72", "id": 538942539, "node_id": "MDU6SXNzdWU1Mzg5NDI1Mzk=", "number": 72, "title": "Since version 1.1.0: dacite.exceptions.WrongTypeError: wrong type for field - should be \"typing.List[~T]\" instead of \"list\"", "user": {"login": "tobwiens", "id": 6491363, "node_id": "MDQ6VXNlcjY0OTEzNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6491363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobwiens", "html_url": "https://github.com/tobwiens", "followers_url": "https://api.github.com/users/tobwiens/followers", "following_url": "https://api.github.com/users/tobwiens/following{/other_user}", "gists_url": "https://api.github.com/users/tobwiens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobwiens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobwiens/subscriptions", "organizations_url": "https://api.github.com/users/tobwiens/orgs", "repos_url": "https://api.github.com/users/tobwiens/repos", "events_url": "https://api.github.com/users/tobwiens/events{/privacy}", "received_events_url": "https://api.github.com/users/tobwiens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-17T09:29:17Z", "updated_at": "2019-12-23T10:46:26Z", "closed_at": "2019-12-23T10:46:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nthank you for dacite it's a great help working with python dataclasses. \r\n\r\nThere might be a bug in the current version of 1.1.0. Here is the stacktrace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/test.py\", line 33, in <module>\r\n    print(dacite.from_dict(data_class=IntegerList, data=dict))\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\dacite\\core.py\", line 64, in from_dict\r\n    raise WrongTypeError(field_path=field.name, field_type=field.type, value=value)\r\ndacite.exceptions.WrongTypeError: wrong type for field \"some_list\" - should be \"typing.List[~T]\" instead of \"list\"\r\n```\r\n\r\n\r\nHere is a code snippet to reproduce the error:\r\n\r\n```\r\nfrom dataclasses import dataclass\r\nfrom typing import List, TypeVar, Generic\r\n\r\nimport dacite\r\n\r\n\r\n@dataclass\r\nclass Point:\r\n    x: int\r\n    y: int\r\n\r\n\r\n@dataclass\r\nclass PointA:\r\n    a: int\r\n    b: int\r\n    c: float\r\n\r\n\r\nT = TypeVar('T', Point, PointA)\r\n\r\n\r\n@dataclass\r\nclass IntegerList(Generic[T]):\r\n    some_list: List[T]\r\n\r\n\r\nok_dict = {'some_list': [{'x': 1, 'y': 2}]}\r\n\r\nprint(dacite.from_dict(data_class=IntegerList, data=ok_dict))\r\n```\r\n\r\nExecuting with version 1.0.2 prints the expected data structure.\r\nExecuting with version 1.1.0 gives the above error. \r\n\r\nNot sure what is causing that or if that is intended. \r\n\r\nCheers,\r\nTobias\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/69", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/69/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/69/events", "html_url": "https://github.com/konradhalas/dacite/issues/69", "id": 538028274, "node_id": "MDU6SXNzdWU1MzgwMjgyNzQ=", "number": 69, "title": "Undesirable WrongTypeError in from_dict() when input dict field has explicit None value", "user": {"login": "navndn", "id": 34212271, "node_id": "MDQ6VXNlcjM0MjEyMjcx", "avatar_url": "https://avatars0.githubusercontent.com/u/34212271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/navndn", "html_url": "https://github.com/navndn", "followers_url": "https://api.github.com/users/navndn/followers", "following_url": "https://api.github.com/users/navndn/following{/other_user}", "gists_url": "https://api.github.com/users/navndn/gists{/gist_id}", "starred_url": "https://api.github.com/users/navndn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/navndn/subscriptions", "organizations_url": "https://api.github.com/users/navndn/orgs", "repos_url": "https://api.github.com/users/navndn/repos", "events_url": "https://api.github.com/users/navndn/events{/privacy}", "received_events_url": "https://api.github.com/users/navndn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-15T09:58:44Z", "updated_at": "2019-12-15T12:51:00Z", "closed_at": "2019-12-15T12:51:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a use-case similar to below code ...\r\n\r\n```python\r\nfrom dacite import from_dict\r\nfrom dataclasses import dataclass, asdict\r\n\r\n@dataclass\r\nclass A():\r\n    x: str = None\r\n\r\n# a1 = A('a1')\r\na1 = A()\r\na2 = from_dict(A, asdict(a1))\r\n    \r\n        \r\n```\r\nError:  \r\n\r\n```\r\nWrongTypeError: wrong type for field \"x\" - should be \"str\" instead of \"NoneType\"\r\n\r\n```\r\n\r\nIs this expected behaviour? Is there a work-around other than using custom asdict function which skips None valued keys?\r\n\r\nThanks!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/68", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/68/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/68/events", "html_url": "https://github.com/konradhalas/dacite/issues/68", "id": 537911179, "node_id": "MDU6SXNzdWU1Mzc5MTExNzk=", "number": 68, "title": "Suggestion: add a serializable base class", "user": {"login": "danield137", "id": 15192451, "node_id": "MDQ6VXNlcjE1MTkyNDUx", "avatar_url": "https://avatars1.githubusercontent.com/u/15192451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danield137", "html_url": "https://github.com/danield137", "followers_url": "https://api.github.com/users/danield137/followers", "following_url": "https://api.github.com/users/danield137/following{/other_user}", "gists_url": "https://api.github.com/users/danield137/gists{/gist_id}", "starred_url": "https://api.github.com/users/danield137/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danield137/subscriptions", "organizations_url": "https://api.github.com/users/danield137/orgs", "repos_url": "https://api.github.com/users/danield137/repos", "events_url": "https://api.github.com/users/danield137/events{/privacy}", "received_events_url": "https://api.github.com/users/danield137/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-14T13:04:08Z", "updated_at": "2019-12-27T10:46:53Z", "closed_at": "2019-12-27T10:46:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been using dacite for a while in many projects, and it's a very useful little tool!\r\nI did notice that as a pattern I prefer to have the methods as part of the class itself, so I have been using it like so:\r\n```python\r\nclass Entity(Serializable):\r\n    ...\r\n\r\nentity = Entity.load('file_path')\r\n\r\nassert entity == Entity.from_dict(data)\r\n```\r\n\r\nHere is the definition:\r\n```python\r\n@dataclass\r\nclass Serializable:\r\n    @classmethod\r\n    def copy(cls, other):\r\n        return dacite.from_dict(cls, asdict(other))\r\n\r\n    @classmethod\r\n    def load(cls, file):\r\n        with open(file, \"r\") as f:\r\n            data = json.load(f)\r\n\r\n        return dacite.from_dict(cls, data)\r\n\r\n    @classmethod\r\n    def from_dict(cls, data):\r\n        return dacite.from_dict(cls, data)\r\n\r\n    def to_json(self):\r\n        return json.dumps(asdict(self))\r\n```\r\n\r\nIt's pretty simple but IMHO makes it more explicit, and doesn't require using classes to be aware of dacite (thus decoupling the implementation from the interface..)\r\n\r\nWould you accept a PR?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/67", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/67/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/67/events", "html_url": "https://github.com/konradhalas/dacite/issues/67", "id": 533327925, "node_id": "MDU6SXNzdWU1MzMzMjc5MjU=", "number": 67, "title": "Case insensitive featutre in from_dict config", "user": {"login": "rrezino", "id": 19705449, "node_id": "MDQ6VXNlcjE5NzA1NDQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/19705449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rrezino", "html_url": "https://github.com/rrezino", "followers_url": "https://api.github.com/users/rrezino/followers", "following_url": "https://api.github.com/users/rrezino/following{/other_user}", "gists_url": "https://api.github.com/users/rrezino/gists{/gist_id}", "starred_url": "https://api.github.com/users/rrezino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rrezino/subscriptions", "organizations_url": "https://api.github.com/users/rrezino/orgs", "repos_url": "https://api.github.com/users/rrezino/repos", "events_url": "https://api.github.com/users/rrezino/events{/privacy}", "received_events_url": "https://api.github.com/users/rrezino/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-05T12:42:11Z", "updated_at": "2019-12-09T11:34:56Z", "closed_at": "2019-12-09T11:34:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Now to perform it correcly, the name of the field need to match the case of the dict key. Would nice if we could use `from_dict` as case insensitive. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/66", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/66/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/66/events", "html_url": "https://github.com/konradhalas/dacite/issues/66", "id": 524025281, "node_id": "MDU6SXNzdWU1MjQwMjUyODE=", "number": 66, "title": "Option to autoconvert camelCase to snake_case", "user": {"login": "kiddick", "id": 9250239, "node_id": "MDQ6VXNlcjkyNTAyMzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/9250239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiddick", "html_url": "https://github.com/kiddick", "followers_url": "https://api.github.com/users/kiddick/followers", "following_url": "https://api.github.com/users/kiddick/following{/other_user}", "gists_url": "https://api.github.com/users/kiddick/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiddick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiddick/subscriptions", "organizations_url": "https://api.github.com/users/kiddick/orgs", "repos_url": "https://api.github.com/users/kiddick/repos", "events_url": "https://api.github.com/users/kiddick/events{/privacy}", "received_events_url": "https://api.github.com/users/kiddick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-17T18:38:02Z", "updated_at": "2019-11-25T19:13:45Z", "closed_at": "2019-11-25T19:13:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to add such option to Config?\r\nI have some 3rd party json with keys in `camelCase` but that isn't appropriate naming for attributes in dataclass", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/64", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/64/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/64/events", "html_url": "https://github.com/konradhalas/dacite/issues/64", "id": 500313785, "node_id": "MDU6SXNzdWU1MDAzMTM3ODU=", "number": 64, "title": "Conda forge package", "user": {"login": "AntoineD", "id": 433696, "node_id": "MDQ6VXNlcjQzMzY5Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/433696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AntoineD", "html_url": "https://github.com/AntoineD", "followers_url": "https://api.github.com/users/AntoineD/followers", "following_url": "https://api.github.com/users/AntoineD/following{/other_user}", "gists_url": "https://api.github.com/users/AntoineD/gists{/gist_id}", "starred_url": "https://api.github.com/users/AntoineD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AntoineD/subscriptions", "organizations_url": "https://api.github.com/users/AntoineD/orgs", "repos_url": "https://api.github.com/users/AntoineD/repos", "events_url": "https://api.github.com/users/AntoineD/events{/privacy}", "received_events_url": "https://api.github.com/users/AntoineD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-30T14:26:51Z", "updated_at": "2019-10-18T11:53:40Z", "closed_at": "2019-10-18T11:53:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible for you to create a package of dacite for conda forge?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/63", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/63/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/63/events", "html_url": "https://github.com/konradhalas/dacite/issues/63", "id": 496379803, "node_id": "MDU6SXNzdWU0OTYzNzk4MDM=", "number": 63, "title": "Unable to Deserialize Circular Dependencies", "user": {"login": "iamchairs", "id": 4390732, "node_id": "MDQ6VXNlcjQzOTA3MzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4390732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamchairs", "html_url": "https://github.com/iamchairs", "followers_url": "https://api.github.com/users/iamchairs/followers", "following_url": "https://api.github.com/users/iamchairs/following{/other_user}", "gists_url": "https://api.github.com/users/iamchairs/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamchairs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamchairs/subscriptions", "organizations_url": "https://api.github.com/users/iamchairs/orgs", "repos_url": "https://api.github.com/users/iamchairs/repos", "events_url": "https://api.github.com/users/iamchairs/events{/privacy}", "received_events_url": "https://api.github.com/users/iamchairs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-20T14:19:53Z", "updated_at": "2019-11-27T21:40:19Z", "closed_at": "2019-11-27T21:40:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python supports circular dependencies when an entire package is included through the wildcard. But dacite is unable to deserialize circular dependencies. Example:\r\n\r\n```\r\nfrom .b import *\r\n\r\n@dataclass\r\nclass A:\r\n  b: Optional[B]\r\n```\r\n\r\n```\r\nfrom .a import *\r\n\r\n@dataclass\r\nclass B:\r\n  a: Optional[A]\r\n```\r\n\r\nThen when I try to load this:\r\n\r\n```\r\nfrom models.a import A\r\ndacite.from_dict(data_class=A, data={\r\n  'b': {}\r\n})\r\n```\r\n\r\nI get-\r\n\r\n> dacite.exceptions.ForwardReferenceError: can not resolve forward reference: name 'B' is not defined\r\n\r\nBecause it can't find `B` in the `from .b import *` statement?\r\n\r\nWhat can I do to get around this issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/62", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/62/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/62/events", "html_url": "https://github.com/konradhalas/dacite/issues/62", "id": 494962234, "node_id": "MDU6SXNzdWU0OTQ5NjIyMzQ=", "number": 62, "title": "WrongTypeError: should be \"float\" instead of \"int\"", "user": {"login": "Garrett-R", "id": 6614695, "node_id": "MDQ6VXNlcjY2MTQ2OTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6614695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Garrett-R", "html_url": "https://github.com/Garrett-R", "followers_url": "https://api.github.com/users/Garrett-R/followers", "following_url": "https://api.github.com/users/Garrett-R/following{/other_user}", "gists_url": "https://api.github.com/users/Garrett-R/gists{/gist_id}", "starred_url": "https://api.github.com/users/Garrett-R/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Garrett-R/subscriptions", "organizations_url": "https://api.github.com/users/Garrett-R/orgs", "repos_url": "https://api.github.com/users/Garrett-R/repos", "events_url": "https://api.github.com/users/Garrett-R/events{/privacy}", "received_events_url": "https://api.github.com/users/Garrett-R/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-18T03:14:23Z", "updated_at": "2019-12-31T11:38:53Z", "closed_at": "2019-11-27T12:09:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you run this code:\r\n\r\n```python\r\nimport dataclasses\r\nfrom dataclasses import dataclass\r\n\r\nimport dacite\r\n\r\n\r\n@dataclass\r\nclass Person:\r\n    height: float = 160\r\n\r\nperson = Person()\r\nperson_dict = dataclasses.asdict(person)\r\n\r\nnew_person_1 = dacite.from_dict(data_class=Person, data=person_dict)\r\n```\r\n\r\nit gives this error:\r\n\r\n    WrongTypeError: wrong type for field \"height\" - should be \"float\" instead of \"int\"\r\n\r\nI think it should be able to safely cast what it interprets as ints to be floats.  Or alternatively, perhaps when doing `asdict`, it should save it as a float `160.0`.  Not sure which is better, or if the current behavior is desired since the user kind of erred with their datatype (although seems a bit user-unfriendly).\r\n\r\nBTW, two \"workarounds\": \r\n 1) change a line above to `height: float = 160.0` or cast to float\r\n 1) change the final line to:\r\n\r\n```python\r\nnew_person_2 = dacite.from_dict(data_class=Person, data=person_dict,\r\n                                config=dacite.Config({float: float}))\r\n```\r\n\r\nHappy to submit a PR if you like.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/61", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/61/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/61/events", "html_url": "https://github.com/konradhalas/dacite/issues/61", "id": 477882595, "node_id": "MDU6SXNzdWU0Nzc4ODI1OTU=", "number": 61, "title": "Support for Enums", "user": {"login": "larsrinn", "id": 22575361, "node_id": "MDQ6VXNlcjIyNTc1MzYx", "avatar_url": "https://avatars3.githubusercontent.com/u/22575361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsrinn", "html_url": "https://github.com/larsrinn", "followers_url": "https://api.github.com/users/larsrinn/followers", "following_url": "https://api.github.com/users/larsrinn/following{/other_user}", "gists_url": "https://api.github.com/users/larsrinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsrinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsrinn/subscriptions", "organizations_url": "https://api.github.com/users/larsrinn/orgs", "repos_url": "https://api.github.com/users/larsrinn/repos", "events_url": "https://api.github.com/users/larsrinn/events{/privacy}", "received_events_url": "https://api.github.com/users/larsrinn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-08-07T11:55:05Z", "updated_at": "2019-12-15T18:17:26Z", "closed_at": "2019-11-27T12:25:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nvery cool library, thanks for it.\r\n\r\nIs there any intention to add support for Enums in order let the following code work:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nfrom enum import Enum\r\n\r\nfrom dacite import from_dict\r\n\r\n\r\nclass SomeEnum(Enum):\r\n    FIRST_VALUE = \"first\"\r\n    SECOND_VALUE = \"second\"\r\n\r\n\r\n@dataclass\r\nclass DataClass:\r\n    message: str\r\n    value: SomeEnum\r\n\r\n\r\ndata = {\"message\": \"hello\", \"value\": \"first\"}\r\nfrom_dict(data_class=DataClass, data=data)\r\n\r\n```\r\n\r\nCurrently this raises\r\n\r\n```\r\ndacite.exceptions.WrongTypeError: wrong type for field \"value\" - should be \"SomeEnum\" instead of \"str\"\r\n```\r\n\r\nBut actually it should be quite easy to do the conversion to the enum along the deserialization (`SomeEnum(\"first\")` yields `<SomeEnum.FIRST_VALUE: 'first'>`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/60", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/60/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/60/events", "html_url": "https://github.com/konradhalas/dacite/issues/60", "id": 470643378, "node_id": "MDU6SXNzdWU0NzA2NDMzNzg=", "number": 60, "title": "List from_dict accepts all type of items", "user": {"login": "JungWinter", "id": 13811604, "node_id": "MDQ6VXNlcjEzODExNjA0", "avatar_url": "https://avatars1.githubusercontent.com/u/13811604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JungWinter", "html_url": "https://github.com/JungWinter", "followers_url": "https://api.github.com/users/JungWinter/followers", "following_url": "https://api.github.com/users/JungWinter/following{/other_user}", "gists_url": "https://api.github.com/users/JungWinter/gists{/gist_id}", "starred_url": "https://api.github.com/users/JungWinter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JungWinter/subscriptions", "organizations_url": "https://api.github.com/users/JungWinter/orgs", "repos_url": "https://api.github.com/users/JungWinter/repos", "events_url": "https://api.github.com/users/JungWinter/events{/privacy}", "received_events_url": "https://api.github.com/users/JungWinter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-20T06:53:08Z", "updated_at": "2019-11-27T22:30:28Z", "closed_at": "2019-11-27T22:30:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\nfrom dataclasses import dataclass\r\nfrom typing import List\r\n\r\nimport dacite\r\n\r\n@dataclass\r\nclass A:\r\n    a: List[int]\r\n\r\nassert dacite.from_dict(A, {'a': ['1']})\r\n```\r\n\r\n`dacite` doesn't raise `WrongTypeError` even if we provide different type into `A.a`. I know that dacite is not designed to perform data validation, so just wondering it's intended behavior. \ud83d\ude04 \r\n\r\n* dacite version: `1.0.2`\r\n* python version: `3.7.3`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/58", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/58/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/58/events", "html_url": "https://github.com/konradhalas/dacite/issues/58", "id": 443935957, "node_id": "MDU6SXNzdWU0NDM5MzU5NTc=", "number": 58, "title": "Union match errors are difficult to debug for unions of complex types", "user": {"login": "chaoflow", "id": 89596, "node_id": "MDQ6VXNlcjg5NTk2", "avatar_url": "https://avatars2.githubusercontent.com/u/89596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chaoflow", "html_url": "https://github.com/chaoflow", "followers_url": "https://api.github.com/users/chaoflow/followers", "following_url": "https://api.github.com/users/chaoflow/following{/other_user}", "gists_url": "https://api.github.com/users/chaoflow/gists{/gist_id}", "starred_url": "https://api.github.com/users/chaoflow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chaoflow/subscriptions", "organizations_url": "https://api.github.com/users/chaoflow/orgs", "repos_url": "https://api.github.com/users/chaoflow/repos", "events_url": "https://api.github.com/users/chaoflow/events{/privacy}", "received_events_url": "https://api.github.com/users/chaoflow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-14T14:06:10Z", "updated_at": "2019-06-04T13:50:27Z", "closed_at": "2019-06-04T13:50:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given:\n\n``` python\nimport dacite\nfrom dataclasses import dataclass\nfrom typing import List, Union\n\n\n@dataclass\nclass Foo:\n    x: int\n\n\n@dataclass\nclass Bar:\n    y: int\n\n\n@dataclass\nclass Action:\n    target: str\n\n\n@dataclass\nclass FooAction(Action):\n    foo: Foo\n\n\n@dataclass\nclass BarAction(Action):\n    bar: Bar\n\n\n@dataclass\nclass Config:\n    actions: List[Union[FooAction, BarAction]]\n```\n\nThe following misses a value for ``target``\n\n``` python\ncfg = dacite.from_dict(Config, {'actions': [\n    {'foo': {'x': 1}},\n    {'bar': {'y': 2}},\n]})\n\n```\n\nand raises: \n\n``` python\ndacite.exceptions.UnionMatchError: can not match type \"dict\" to any type of \"actions\" union: typing.Union[__main__.FooAction, __main__.BarAction]\n\n```\n\nThe very same exception is raised if the type of ``x`` is wrong:\n\n``` python\ncfg = dacite.from_dict(Config, {'actions': [\n    {'foo': {'x': '1'}, 'target': 'target'},\n    {'bar': {'y': 2}, 'target': 'target'},\n]})\n```\n\nwhile this parses fine:\n\n``` python\ncfg = dacite.from_dict(Config, {'actions': [\n    {'foo': {'x': 1}, 'target': 'target'},\n    {'bar': {'y': 2}, 'target': 'target'},\n]})\n```\n\nIt would be great if dacite could produce more specific error messages when handling unions of complex types.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/57", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/57/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/57/events", "html_url": "https://github.com/konradhalas/dacite/issues/57", "id": 443432859, "node_id": "MDU6SXNzdWU0NDM0MzI4NTk=", "number": 57, "title": "Better support for types outside of the standard library", "user": {"login": "mvalkon", "id": 4346211, "node_id": "MDQ6VXNlcjQzNDYyMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4346211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvalkon", "html_url": "https://github.com/mvalkon", "followers_url": "https://api.github.com/users/mvalkon/followers", "following_url": "https://api.github.com/users/mvalkon/following{/other_user}", "gists_url": "https://api.github.com/users/mvalkon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvalkon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvalkon/subscriptions", "organizations_url": "https://api.github.com/users/mvalkon/orgs", "repos_url": "https://api.github.com/users/mvalkon/repos", "events_url": "https://api.github.com/users/mvalkon/events{/privacy}", "received_events_url": "https://api.github.com/users/mvalkon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-13T14:31:57Z", "updated_at": "2019-05-23T08:05:00Z", "closed_at": "2019-05-23T08:04:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have had a bit of a problem with dacite's way of handling type conversions from `str` to `Enum`. In pre 1.0 I had to use `cast` to be able use `Enum`'s in a `dataclass`. For example:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nfrom enum import Enum\r\nimport dacite\r\n\r\nclass Thing(Enum):\r\n    Foo = \"foo\"\r\n    Bar = \"bar\"\r\n\r\n@dataclass\r\nclass Container:\r\n    simple: str\r\n    thing: Thing\r\n\r\ndata = {\r\n    \"simple\": \"value\",\r\n    \"thing\": \"foo\"\r\n}\r\n\r\ncontainer = dacite.from_dict(data_class=Container, data=data, config=dacite.Config(cast=[\"thing\"]))\r\n```\r\n\r\nIt seems that 1.0 removes a lot of functionality, but I can still work with enums by using the `type_hooks`-feature in the `Config`.\r\n\r\n```python\r\ncontainer = dacite.from_dict(data_class=Container, data=data, config=dacite.Config(type_hooks={Thing: Thing}))\r\n```\r\n\r\nI am not sure how `dacite` is used but it seems to me that as a user of the library, my expectation is that types are automatically converted according to the definition of the dataclass that is passed to `from_dict()`. Attempting to automatically transform the types in the case of non-standard-library types would follow the principle of least astonishment and I do not think it is hard to implement.\r\n\r\nFor example it might be possible to populate a default `type_hooks` in `from_dict`, and then update it based on the configuration provided by the user. The user is still able to pass custom transformations so the change should be backwards compatible with 1.0. A very, very crude example\r\n\r\n```python\r\n# In this example,data_class is the Container from my example\r\ndefault = {f.type: f.type for f in dataclasses.fields(data_class)}\r\ndefault.update(config.type_hooks)\r\nupdated_hooks = default\r\ntry:\r\n    field_data = data[field.name]\r\n    transformed_value = transform_value(\r\n        type_hooks=updated_hooks, target_type=field.type, value=field_data\r\n    )\r\n    value = _build_value(type_=field.type, data=transformed_value, config=config)\r\nexcept DaciteFieldError as error:\r\n    error.update_path(field.name)\r\n    raise\r\n```\r\n\r\n@konradhalas I might be open to contributing such functionality in a PR if you're not against the idea and if you're willing to provide some idea as a maintainer of how you'd like that implementation to look like.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/56", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/56/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/56/events", "html_url": "https://github.com/konradhalas/dacite/issues/56", "id": 443287620, "node_id": "MDU6SXNzdWU0NDMyODc2MjA=", "number": 56, "title": "how to to_dict?", "user": {"login": "daiooo", "id": 46855652, "node_id": "MDQ6VXNlcjQ2ODU1NjUy", "avatar_url": "https://avatars2.githubusercontent.com/u/46855652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daiooo", "html_url": "https://github.com/daiooo", "followers_url": "https://api.github.com/users/daiooo/followers", "following_url": "https://api.github.com/users/daiooo/following{/other_user}", "gists_url": "https://api.github.com/users/daiooo/gists{/gist_id}", "starred_url": "https://api.github.com/users/daiooo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daiooo/subscriptions", "organizations_url": "https://api.github.com/users/daiooo/orgs", "repos_url": "https://api.github.com/users/daiooo/repos", "events_url": "https://api.github.com/users/daiooo/events{/privacy}", "received_events_url": "https://api.github.com/users/daiooo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-13T09:12:01Z", "updated_at": "2019-05-13T09:13:31Z", "closed_at": "2019-05-13T09:13:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "tks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/54", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/54/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/54/events", "html_url": "https://github.com/konradhalas/dacite/issues/54", "id": 437264811, "node_id": "MDU6SXNzdWU0MzcyNjQ4MTE=", "number": 54, "title": "Impossible to set a field value whose annotated type is an abstract collection", "user": {"login": "NoiseByNorthwest", "id": 1461284, "node_id": "MDQ6VXNlcjE0NjEyODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1461284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NoiseByNorthwest", "html_url": "https://github.com/NoiseByNorthwest", "followers_url": "https://api.github.com/users/NoiseByNorthwest/followers", "following_url": "https://api.github.com/users/NoiseByNorthwest/following{/other_user}", "gists_url": "https://api.github.com/users/NoiseByNorthwest/gists{/gist_id}", "starred_url": "https://api.github.com/users/NoiseByNorthwest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NoiseByNorthwest/subscriptions", "organizations_url": "https://api.github.com/users/NoiseByNorthwest/orgs", "repos_url": "https://api.github.com/users/NoiseByNorthwest/repos", "events_url": "https://api.github.com/users/NoiseByNorthwest/events{/privacy}", "received_events_url": "https://api.github.com/users/NoiseByNorthwest/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-25T15:32:52Z", "updated_at": "2019-06-04T12:51:24Z", "closed_at": "2019-06-04T12:51:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom dataclasses import dataclass\r\nfrom typing import Sequence\r\n\r\nimport dacite\r\n\r\n@dataclass(frozen=True)\r\nclass Foo:\r\n    bar: Sequence[int]\r\n\r\ndacite.from_dict(Foo, {\"bar\": []}) # FAIL: TypeError(\"object() takes no parameters\")\r\n                                   #    raised in dacite/core.py:105\r\n```\r\n\r\nThe error is raised right here https://github.com/konradhalas/dacite/blob/55051de7c230c787495b9aacff815eb0b282aa0e/dacite/core.py#L105\r\n\r\nThis is due to the fact that collection_cls is resolved in this case to `collections.abc.Sequence`.\r\n\r\nSo I cannot initialize a field hinted as an abstract type whereas the given value is obviously of a concrete & compatible type ?\r\n\r\nWhy such a limitation ? Why simply not use the value type as long as it is compatible with the annotated type ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/53", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/53/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/53/events", "html_url": "https://github.com/konradhalas/dacite/issues/53", "id": 436343915, "node_id": "MDU6SXNzdWU0MzYzNDM5MTU=", "number": 53, "title": "Add support for type-based transformations", "user": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/konradhalas/dacite/milestones/1", "html_url": "https://github.com/konradhalas/dacite/milestone/1", "labels_url": "https://api.github.com/repos/konradhalas/dacite/milestones/1/labels", "id": 4128596, "node_id": "MDk6TWlsZXN0b25lNDEyODU5Ng==", "number": 1, "title": "v1.0.0", "description": "", "creator": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-11T13:05:52Z", "updated_at": "2019-05-15T17:27:33Z", "due_on": null, "closed_at": "2019-05-15T17:27:33Z"}, "comments": 4, "created_at": "2019-04-23T19:06:35Z", "updated_at": "2019-05-12T18:29:43Z", "closed_at": "2019-05-12T18:29:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "According to #38 instead of:\r\n\r\n```python\r\nConfig(transform={\"my_field\": datetime.fromisoformat})\r\n```\r\n\r\n... we want to have:\r\n\r\n```python\r\nConfig(transform={datetime: datetime.fromisoformat})\r\n```\r\n\r\nIt was implemented some time ago in this PR: https://github.com/konradhalas/dacite/pull/32 but it should be implemented from scratch because of latests refactor + we have to think about good name.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/52", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/52/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/52/events", "html_url": "https://github.com/konradhalas/dacite/issues/52", "id": 436342687, "node_id": "MDU6SXNzdWU0MzYzNDI2ODc=", "number": 52, "title": "Remove all dict shape transformation features", "user": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/konradhalas/dacite/milestones/1", "html_url": "https://github.com/konradhalas/dacite/milestone/1", "labels_url": "https://api.github.com/repos/konradhalas/dacite/milestones/1/labels", "id": 4128596, "node_id": "MDk6TWlsZXN0b25lNDEyODU5Ng==", "number": 1, "title": "v1.0.0", "description": "", "creator": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-11T13:05:52Z", "updated_at": "2019-05-15T17:27:33Z", "due_on": null, "closed_at": "2019-05-15T17:27:33Z"}, "comments": 3, "created_at": "2019-04-23T19:03:28Z", "updated_at": "2019-05-12T18:29:28Z", "closed_at": "2019-05-12T18:29:28Z", "author_association": "OWNER", "active_lock_reason": null, "body": "According to #38 we will remove:\r\n\r\n- `flattened`\r\n- `remap`\r\n- `prefixed`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/51", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/51/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/51/events", "html_url": "https://github.com/konradhalas/dacite/issues/51", "id": 435423988, "node_id": "MDU6SXNzdWU0MzU0MjM5ODg=", "number": 51, "title": "Expose custom JSON de/encoder that handles JSON serialization transparently?", "user": {"login": "d33tah", "id": 295322, "node_id": "MDQ6VXNlcjI5NTMyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d33tah", "html_url": "https://github.com/d33tah", "followers_url": "https://api.github.com/users/d33tah/followers", "following_url": "https://api.github.com/users/d33tah/following{/other_user}", "gists_url": "https://api.github.com/users/d33tah/gists{/gist_id}", "starred_url": "https://api.github.com/users/d33tah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d33tah/subscriptions", "organizations_url": "https://api.github.com/users/d33tah/orgs", "repos_url": "https://api.github.com/users/d33tah/repos", "events_url": "https://api.github.com/users/d33tah/events{/privacy}", "received_events_url": "https://api.github.com/users/d33tah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-20T18:00:25Z", "updated_at": "2019-04-23T18:44:05Z", "closed_at": "2019-04-23T18:44:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wanted to store dataclasses as Flask session values, but Flask complains that I first need to override `app.json_decoder` and `app.json_encoder`. I thought of your library, but then realized that implementing object hooks for deserialization might actually be non-trivial. Perhaps you'd like to look into this use case and see if it's within the scope of your project?\r\n\r\nIdeally I'd like to be able to do something like:\r\n\r\n```\r\nfrom flask import Flask, session\r\nfrom dacite.json_handlers import JSONDecoder, JSONEncoder\r\n\r\napp = Flask(__name__)\r\napp.secret_key = b'soverysecret'  # needed for session storage\r\napp.json_encoder = JSONEncoder\r\napp.json_decoder = JSONDecoder\r\n```\r\n\r\nAnd then be able to transparently store my dataclasses in a Flask session.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/50", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/50/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/50/events", "html_url": "https://github.com/konradhalas/dacite/issues/50", "id": 435141492, "node_id": "MDU6SXNzdWU0MzUxNDE0OTI=", "number": 50, "title": "Dacite does not support containers of containers", "user": {"login": "AngelEzquerra", "id": 6682868, "node_id": "MDQ6VXNlcjY2ODI4Njg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6682868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AngelEzquerra", "html_url": "https://github.com/AngelEzquerra", "followers_url": "https://api.github.com/users/AngelEzquerra/followers", "following_url": "https://api.github.com/users/AngelEzquerra/following{/other_user}", "gists_url": "https://api.github.com/users/AngelEzquerra/gists{/gist_id}", "starred_url": "https://api.github.com/users/AngelEzquerra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AngelEzquerra/subscriptions", "organizations_url": "https://api.github.com/users/AngelEzquerra/orgs", "repos_url": "https://api.github.com/users/AngelEzquerra/repos", "events_url": "https://api.github.com/users/AngelEzquerra/events{/privacy}", "received_events_url": "https://api.github.com/users/AngelEzquerra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-19T11:11:20Z", "updated_at": "2019-04-23T19:16:35Z", "closed_at": "2019-04-23T19:16:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code does not work as I would expect:\r\n\r\n```python\r\nfrom dataclasses import dataclass, field\r\nimport dacite\r\n\r\n@dataclass\r\nclass item:\r\n    item_field: str = 'default_value'\r\n\r\n@dataclass\r\nclass container:\r\n    dict_of_dict_of_dataclass: Dict[str, Dict[str, item]] = field(default_factory=dict)\r\n\r\ncomplex_dict = {'dict_of_dict_of_dataclass': {'outer': {'inner': {'item_field': 'a value'}}}}\r\n\r\nobj = dacite.from_dict(container, complex_dict)\r\ntype(obj.dict_of_dict_of_dataclass['outer']['inner'])  # should return 'item' but it returns 'dict'\r\n```\r\n\r\nIf I remove one dict level from the structure, it works as expected:\r\n\r\n```python\r\nfrom dataclasses import dataclass, field\r\nimport dacite\r\n\r\n@dataclass\r\nclass item:\r\n    item_field: str = 'default_value'\r\n\r\n@dataclass\r\nclass simpler_container:\r\n    dict_of_dataclass: Dict[str, item] = field(default_factory=dict)\r\n\r\nsimpler_dict = {'dict_of_dataclass': {'inner': {'item_field': 'a value'}}}\r\n\r\nobj = dacite.from_dict(simpler_container, simpler_dict)\r\n\r\ntype(obj.dict_of_dataclass['inner'])  # returns 'item'\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/48", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/48/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/48/events", "html_url": "https://github.com/konradhalas/dacite/issues/48", "id": 433297535, "node_id": "MDU6SXNzdWU0MzMyOTc1MzU=", "number": 48, "title": "Dataclasses has become a dependency of dacite on python 3.7.x", "user": {"login": "mvalkon", "id": 4346211, "node_id": "MDQ6VXNlcjQzNDYyMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4346211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvalkon", "html_url": "https://github.com/mvalkon", "followers_url": "https://api.github.com/users/mvalkon/followers", "following_url": "https://api.github.com/users/mvalkon/following{/other_user}", "gists_url": "https://api.github.com/users/mvalkon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvalkon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvalkon/subscriptions", "organizations_url": "https://api.github.com/users/mvalkon/orgs", "repos_url": "https://api.github.com/users/mvalkon/repos", "events_url": "https://api.github.com/users/mvalkon/events{/privacy}", "received_events_url": "https://api.github.com/users/mvalkon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-04-15T13:57:35Z", "updated_at": "2020-02-16T09:45:31Z", "closed_at": "2019-04-19T11:52:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting a confusing error with dacite `0.0.25`. I'm using dacite in anAWS Lambda function (which is why the traceback looks a little funny), and I'm getting the following exception when importing `dacite.config.Config`:\r\n```python\r\nAttributeError: module 'typing' has no attribute '_ClassVar'\r\nTraceback (most recent call last):\r\n  File \"/var/lang/lib/python3.7/imp.py\", line 234, in load_module\r\n    return load_source(name, filename, file)\r\n  File \"/var/lang/lib/python3.7/imp.py\", line 171, in load_source\r\n    module = _load(spec)\r\n  File \"<frozen importlib._bootstrap>\", line 696, in _load\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/var/task/cris/queue_event.py\", line 8, in <module>\r\n    from dacite import Config, from_dict\r\n  File \"/var/task/dacite/__init__.py\", line 1, in <module>\r\n    from dacite.config import Config\r\n  File \"/var/task/dacite/config.py\", line 14, in <module>\r\n    @dataclass\r\n  File \"/var/task/dataclasses.py\", line 958, in dataclass\r\n    return wrap(_cls)\r\n  File \"/var/task/dataclasses.py\", line 950, in wrap\r\n    return _process_class(cls, init, repr, eq, order, unsafe_hash, frozen)\r\n  File \"/var/task/dataclasses.py\", line 801, in _process_class\r\n    for name, type in cls_annotations.items()]\r\n  File \"/var/task/dataclasses.py\", line 801, in <listcomp>\r\n    for name, type in cls_annotations.items()]\r\n  File \"/var/task/dataclasses.py\", line 659, in _get_field\r\n    if (_is_classvar(a_type, typing)\r\n  File \"/var/task/dataclasses.py\", line 550, in _is_classvar\r\n    return type(a_type) is typing._ClassVar\r\n```\r\n\r\nFor some reason, the 0.0.25 release introduces `dataclasses==0.6` as a dependency even though I'm on python 3.7.2\r\n\r\n```\r\n% pip --version\r\npip 19.0.3 from /usr/local/opt/pyenv/versions/3.7.2/envs/test/lib/python3.7/site-packages/pip (python 3.7)\r\n% python --version\r\nPython 3.7.2\r\n% pip freeze\r\n% pip install dacite\r\nCollecting dacite\r\n  Using cached https://files.pythonhosted.org/packages/48/a8/218d76025df9b63f6896f91a432a2ccbc658efb8c404e2d0af8c28f89dde/dacite-0.0.25-py3-none-any.whl\r\nCollecting dataclasses (from dacite)\r\n  Using cached https://files.pythonhosted.org/packages/26/2f/1095cdc2868052dd1e64520f7c0d5c8c550ad297e944e641dbf1ffbb9a5d/dataclasses-0.6-py3-none-any.whl\r\nInstalling collected packages: dataclasses, dacite\r\nSuccessfully installed dacite-0.0.25 dataclasses-0.6\r\n% pip freeze\r\ndacite==0.0.25\r\ndataclasses==0.6\r\n```\r\n\r\nIf I attempt to install the 0.0.24, the dataclasses dependency is not present\r\n\r\n```\r\npip install dacite==0.0.24\r\nCollecting dacite==0.0.24\r\n  Using cached https://files.pythonhosted.org/packages/60/a8/50cc19f7254f688c41140fd33531499f7d0b529617757c119a5b0e95ce01/dacite-0.0.24-py3-none-any.whl\r\nInstalling collected packages: dacite\r\nSuccessfully installed dacite-0.0.24\r\n% pip freeze\r\ndacite==0.0.24\r\n```\r\n\r\nI went through the `setup.py` and cannot really understand where the dataclasses dependency leaks in on a 3.7 python. At the moment I've resorted to downgrading to 0.0.24 for my use case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/46", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/46/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/46/events", "html_url": "https://github.com/konradhalas/dacite/issues/46", "id": 428691134, "node_id": "MDU6SXNzdWU0Mjg2OTExMzQ=", "number": 46, "title": "Dacite throws an error while using Optional on NewType", "user": {"login": "AlwxSin", "id": 3910216, "node_id": "MDQ6VXNlcjM5MTAyMTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3910216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlwxSin", "html_url": "https://github.com/AlwxSin", "followers_url": "https://api.github.com/users/AlwxSin/followers", "following_url": "https://api.github.com/users/AlwxSin/following{/other_user}", "gists_url": "https://api.github.com/users/AlwxSin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlwxSin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlwxSin/subscriptions", "organizations_url": "https://api.github.com/users/AlwxSin/orgs", "repos_url": "https://api.github.com/users/AlwxSin/repos", "events_url": "https://api.github.com/users/AlwxSin/events{/privacy}", "received_events_url": "https://api.github.com/users/AlwxSin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-03T10:34:28Z", "updated_at": "2019-04-13T16:20:17Z", "closed_at": "2019-04-13T13:39:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example \r\n```python\r\nimport dataclasses\r\nfrom typing import  NewType, Optional\r\n\r\nCUSTOM_TYPE = NewType('CUSTOM_TYPE', str)\r\n\r\n@dataclasses.dataclass\r\nclass Test:\r\n    usual_field: str\r\n    custom_type_field: CUSTOM_TYPE\r\n    optional_custom_type_field: Optional[CUSTOM_TYPE]\r\n        \r\ntest = Test('usual', CUSTOM_TYPE('custom'), CUSTOM_TYPE('optional_custom'))\r\ntest_dict = dataclasses.asdict(test)\r\ndacite.from_dict(Test, test_dict)\r\n```\r\n\r\nOutput\r\n```python\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-22-c59ddd955c43> in <module>\r\n      8 test = Test('usual', CUSTOM_TYPE('custom'))\r\n      9 test_dict = dataclasses.asdict(test)\r\n---> 10 dacite.from_dict(Test, test_dict)\r\n\r\n.venv/lib/python3.7/site-packages/dacite/core.py in from_dict(data_class, data, config)\r\n     43                 error.update_path(field.name)\r\n     44                 raise\r\n---> 45             if config.check_types and not is_instance(value, field.type):\r\n     46                 raise WrongTypeError(\r\n     47                     field_path=field.name,\r\n\r\n.venv/lib/python3.7/site-packages/dacite/types.py in is_instance(value, t)\r\n     53     elif is_union(t):\r\n     54         types = tuple(extract_origin_collection(t) if is_generic(t) else t for t in extract_generic(t))\r\n---> 55         return isinstance(value, types)\r\n     56     elif is_generic_collection(t):\r\n     57         return isinstance(value, extract_origin_collection(t))\r\n\r\nTypeError: isinstance() arg 2 must be a type or tuple of types\r\n```\r\n\r\nThis is happens only if I use `Optional[NewType]`. Without `Optional` dacite works like charm.\r\n```python\r\n>>> dataclasses.fields(Test)[0].type, dataclasses.fields(Test)[1].type, dataclasses.fields(Test)[2].type\r\n(str,\r\n <function typing.NewType.<locals>.new_type(x)>,\r\n typing.Union[CUSTOM_TYPE, NoneType])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/44", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/44/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/44/events", "html_url": "https://github.com/konradhalas/dacite/issues/44", "id": 424628599, "node_id": "MDU6SXNzdWU0MjQ2Mjg1OTk=", "number": 44, "title": "Post init field without default throws KeyError", "user": {"login": "AlwxSin", "id": 3910216, "node_id": "MDQ6VXNlcjM5MTAyMTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3910216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlwxSin", "html_url": "https://github.com/AlwxSin", "followers_url": "https://api.github.com/users/AlwxSin/followers", "following_url": "https://api.github.com/users/AlwxSin/following{/other_user}", "gists_url": "https://api.github.com/users/AlwxSin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlwxSin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlwxSin/subscriptions", "organizations_url": "https://api.github.com/users/AlwxSin/orgs", "repos_url": "https://api.github.com/users/AlwxSin/repos", "events_url": "https://api.github.com/users/AlwxSin/events{/privacy}", "received_events_url": "https://api.github.com/users/AlwxSin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-24T15:57:50Z", "updated_at": "2019-04-13T14:24:54Z", "closed_at": "2019-04-13T14:19:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's minimal example\r\n\r\n```python\r\nimport dacite\r\nimport dataclasses\r\n\r\n@dataclasses.dataclass\r\nclass Example:\r\n    a: int\r\n    b: str = dataclasses.field(init=False)\r\n        \r\n    def __post_init__(self):\r\n        self.b = 'GOT IT'\r\n        \r\nexample = Example(1)\r\nexample_dict = dataclasses.asdict(example)\r\nexample_dict.pop('b')\r\n\r\nexample_from_dacite = dacite.from_dict(Example, example_dict)\r\n```\r\n\r\nTraceback\r\n```python\r\n~/Projects/.venv/lib/python3.7/site-packages/dacite/core.py in from_dict(data_class, data, config)\r\n     53                 value = get_default_value_for_field(field)\r\n     54             except DefaultValueNotFoundError:\r\n---> 55                 raise MissingValueError(field.name)\r\n     56         if field.init:\r\n     57             init_values[field.name] = value\r\n\r\nMissingValueError: missing value for field \"b\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/43", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/43/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/43/events", "html_url": "https://github.com/konradhalas/dacite/issues/43", "id": 421721023, "node_id": "MDU6SXNzdWU0MjE3MjEwMjM=", "number": 43, "title": "dacite doesn't allow for methods defined on a dataclass", "user": {"login": "morrison12", "id": 6386006, "node_id": "MDQ6VXNlcjYzODYwMDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6386006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/morrison12", "html_url": "https://github.com/morrison12", "followers_url": "https://api.github.com/users/morrison12/followers", "following_url": "https://api.github.com/users/morrison12/following{/other_user}", "gists_url": "https://api.github.com/users/morrison12/gists{/gist_id}", "starred_url": "https://api.github.com/users/morrison12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/morrison12/subscriptions", "organizations_url": "https://api.github.com/users/morrison12/orgs", "repos_url": "https://api.github.com/users/morrison12/repos", "events_url": "https://api.github.com/users/morrison12/events{/privacy}", "received_events_url": "https://api.github.com/users/morrison12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-15T22:05:29Z", "updated_at": "2019-03-16T21:33:56Z", "closed_at": "2019-03-16T15:30:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "If one tries to define a method on a dateless (e.g. diameter as shown below), dacite doesn't seem to want to accept such a case - see tests and output below.  This seems to be a collision with the handling of post_init values\r\n\r\n========================================================================== test session starts ==========================================================================\r\nplatform darwin -- Python 3.7.2, pytest-4.3.1, py-1.8.0, pluggy-0.9.0\r\nrootdir: /Users/james/Projects/dacite, inifile:\r\ncollected 131 items                                                                                                                                                     \r\n\r\ntest_config.py ............                                                                                                                                       [  9%]\r\ntest_dataclasses.py ......FF                                                                                                                                      [ 15%]\r\ntest_types.py ............................                                                                                                                        [ 36%]\r\ncore/test_base.py ............                                                                                                                                    [ 45%]\r\ncore/test_collection.py ........                                                                                                                                  [ 51%]\r\ncore/test_config.py .......................................                                                                                                       [ 81%]\r\ncore/test_optional.py ............                                                                                                                                [ 90%]\r\ncore/test_union.py ............                                                                                                                                   [100%]\r\n\r\n=============================================================================== FAILURES ================================================================================\r\n_______________________________________________________________ test_create_instance_with_computed_attr_1 _______________________________________________________________\r\n\r\n    def test_create_instance_with_computed_attr_1():\r\n    \r\n        @dataclass\r\n        class Circle(object):\r\n            radius: int\r\n            diameter: int = field(init=False)\r\n    \r\n            def diameter(self):\r\n                return 2 * self.radius\r\n    \r\n        instance = create_instance(\r\n            data_class=Circle,\r\n            init_values={'radius':4},\r\n            post_init_values={})\r\n    \r\n        assert instance.radius == 4\r\n>       assert instance.diameter == 8\r\nE       assert <function test_create_instance_with_computed_attr_1.<locals>.Circle.diameter at 0x104a57378> == 8\r\nE        +  where <function test_create_instance_with_computed_attr_1.<locals>.Circle.diameter at 0x104a57378> = test_create_instance_with_computed_attr_1.<locals>.Circle(radius=4, diameter=<function test_create_instance_with_computed_attr_1.<locals>.Circle.diameter at 0x104a57378>).diameter\r\n\r\ntest_dataclasses.py:93: AssertionError\r\n_______________________________________________________________ test_create_instance_with_computed_attr_2 _______________________________________________________________\r\n\r\n    def test_create_instance_with_computed_attr_2():\r\n    \r\n        @dataclass\r\n        class Circle(object):\r\n            radius: int\r\n            diameter: int = field(init=False)\r\n    \r\n            def diameter(self):\r\n                return 2 * self.radius\r\n    \r\n        instance = create_instance(\r\n            data_class=Circle,\r\n            init_values={'radius':4},\r\n            post_init_values={'diameter':None})\r\n    \r\n        assert instance.radius == 4\r\n>       assert instance.diameter == 8\r\nE       assert None == 8\r\nE        +  where None = test_create_instance_with_computed_attr_2.<locals>.Circle(radius=4, diameter=None).diameter\r\n\r\ntest_dataclasses.py:111: AssertionError\r\n================================================================= 2 failed, 129 passed in 0.36 seconds ==================================================================\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/42", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/42/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/42/events", "html_url": "https://github.com/konradhalas/dacite/issues/42", "id": 421640269, "node_id": "MDU6SXNzdWU0MjE2NDAyNjk=", "number": 42, "title": "Compare dacite with pydantic", "user": {"login": "rominf", "id": 3449635, "node_id": "MDQ6VXNlcjM0NDk2MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3449635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rominf", "html_url": "https://github.com/rominf", "followers_url": "https://api.github.com/users/rominf/followers", "following_url": "https://api.github.com/users/rominf/following{/other_user}", "gists_url": "https://api.github.com/users/rominf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rominf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rominf/subscriptions", "organizations_url": "https://api.github.com/users/rominf/orgs", "repos_url": "https://api.github.com/users/rominf/repos", "events_url": "https://api.github.com/users/rominf/events{/privacy}", "received_events_url": "https://api.github.com/users/rominf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-15T17:59:53Z", "updated_at": "2019-04-14T17:18:47Z", "closed_at": "2019-04-14T17:18:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/samuelcolvin/pydantic/ seems similar to dacite and 5 times more popular. Please, compare them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/41", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/41/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/41/events", "html_url": "https://github.com/konradhalas/dacite/issues/41", "id": 419674850, "node_id": "MDU6SXNzdWU0MTk2NzQ4NTA=", "number": 41, "title": "Dead link.", "user": {"login": "cheako", "id": 1366303, "node_id": "MDQ6VXNlcjEzNjYzMDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1366303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cheako", "html_url": "https://github.com/cheako", "followers_url": "https://api.github.com/users/cheako/followers", "following_url": "https://api.github.com/users/cheako/following{/other_user}", "gists_url": "https://api.github.com/users/cheako/gists{/gist_id}", "starred_url": "https://api.github.com/users/cheako/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cheako/subscriptions", "organizations_url": "https://api.github.com/users/cheako/orgs", "repos_url": "https://api.github.com/users/cheako/repos", "events_url": "https://api.github.com/users/cheako/events{/privacy}", "received_events_url": "https://api.github.com/users/cheako/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-11T20:44:34Z", "updated_at": "2019-03-11T20:58:54Z", "closed_at": "2019-03-11T20:58:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "[This is a dead link](https://www.khronos.org/registry/vulkan/specs/1.0-extensions/html/vkspec.html#fundamentals-versionnum) use [here](https://docs.rs/dacite/0.7.0/dacite/core/struct.Version.html).\r\n\r\nhttps://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#extendingvulkan-coreversions-versionnumbers\r\n\r\nExamples for VK_API_VERSION_1_1 and VK_API_VERSION_1_0 should be provided.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/40", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/40/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/40/events", "html_url": "https://github.com/konradhalas/dacite/issues/40", "id": 419641275, "node_id": "MDU6SXNzdWU0MTk2NDEyNzU=", "number": 40, "title": "Get rid of pipenv", "user": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/konradhalas/dacite/milestones/1", "html_url": "https://github.com/konradhalas/dacite/milestone/1", "labels_url": "https://api.github.com/repos/konradhalas/dacite/milestones/1/labels", "id": 4128596, "node_id": "MDk6TWlsZXN0b25lNDEyODU5Ng==", "number": 1, "title": "v1.0.0", "description": "", "creator": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-11T13:05:52Z", "updated_at": "2019-05-15T17:27:33Z", "due_on": null, "closed_at": "2019-05-15T17:27:33Z"}, "comments": 1, "created_at": "2019-03-11T19:21:31Z", "updated_at": "2019-03-16T15:45:48Z", "closed_at": "2019-03-16T15:45:48Z", "author_association": "OWNER", "active_lock_reason": null, "body": "It doesn't make sense in project like `dacite`, let use `setup.extras_require`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/39", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/39/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/39/events", "html_url": "https://github.com/konradhalas/dacite/issues/39", "id": 419640134, "node_id": "MDU6SXNzdWU0MTk2NDAxMzQ=", "number": 39, "title": "Add \"development\" section to docs", "user": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/konradhalas/dacite/milestones/1", "html_url": "https://github.com/konradhalas/dacite/milestone/1", "labels_url": "https://api.github.com/repos/konradhalas/dacite/milestones/1/labels", "id": 4128596, "node_id": "MDk6TWlsZXN0b25lNDEyODU5Ng==", "number": 1, "title": "v1.0.0", "description": "", "creator": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-11T13:05:52Z", "updated_at": "2019-05-15T17:27:33Z", "due_on": null, "closed_at": "2019-05-15T17:27:33Z"}, "comments": 3, "created_at": "2019-03-11T19:18:32Z", "updated_at": "2019-04-14T09:28:57Z", "closed_at": "2019-04-14T09:28:57Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/38", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/38/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/38/events", "html_url": "https://github.com/konradhalas/dacite/issues/38", "id": 419502130, "node_id": "MDU6SXNzdWU0MTk1MDIxMzA=", "number": 38, "title": "Review current scope of the library (aka get rid of unused features)", "user": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/konradhalas/dacite/milestones/1", "html_url": "https://github.com/konradhalas/dacite/milestone/1", "labels_url": "https://api.github.com/repos/konradhalas/dacite/milestones/1/labels", "id": 4128596, "node_id": "MDk6TWlsZXN0b25lNDEyODU5Ng==", "number": 1, "title": "v1.0.0", "description": "", "creator": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-11T13:05:52Z", "updated_at": "2019-05-15T17:27:33Z", "due_on": null, "closed_at": "2019-05-15T17:27:33Z"}, "comments": 6, "created_at": "2019-03-11T14:34:06Z", "updated_at": "2019-05-05T11:53:00Z", "closed_at": "2019-04-23T18:56:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I'm not sure about some features currently implemented in `dacite`. The main goal of this project is to build a data class from a plain dictionary. It's not a serialization/desearialization or validation library. There are many such libs, e.g. [DRF](https://www.django-rest-framework.org/) or [marshmallow](https://github.com/marshmallow-code/marshmallow), and I don't want to create another one.\r\n\r\nI'm talking about following features:\r\n\r\n- `Config.remap`\r\n- `Config.flattened`\r\n- `Config.prefixed`\r\n- `Config.cast`\r\n- `Config.transform`\r\n\r\nEven from code point of view all of those features live in a separate module -`config` - and they can be easily decoupled from data classes at all. So maybe this is a good idea for a new library which will allow to transform your dictionary to different dictionary according to provided rules (`remap`, `flattened`, `prefixed`...), but I don't know should we have such features in `dacite`.\r\n\r\nOn the other hand it easier for users to install one lib instead of two.\r\n\r\nSo I see the following solutions:\r\n\r\n1. Do not change anything - leave it as it is\r\n2. Get rid of them\r\n3. Make it 100% decoupled from data classes, e.g.\r\n\r\n```\r\ndacite.from_dict(\r\n    data_class=X, \r\n    data=dacite.transform_data(data, config=TransformConfig(...)), \r\n    config=Config(...),\r\n)\r\n```\r\n\r\nNr 2 is my favourite one.\r\n\r\nWhat do you think @rominf @jasisz?\r\n\r\nIt's a good time for such decisions - I want to release 1.0.0 soon.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/37", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/37/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/37/events", "html_url": "https://github.com/konradhalas/dacite/issues/37", "id": 419476180, "node_id": "MDU6SXNzdWU0MTk0NzYxODA=", "number": 37, "title": "Add popular use cases to README", "user": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/konradhalas/dacite/milestones/1", "html_url": "https://github.com/konradhalas/dacite/milestone/1", "labels_url": "https://api.github.com/repos/konradhalas/dacite/milestones/1/labels", "id": 4128596, "node_id": "MDk6TWlsZXN0b25lNDEyODU5Ng==", "number": 1, "title": "v1.0.0", "description": "", "creator": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-11T13:05:52Z", "updated_at": "2019-05-15T17:27:33Z", "due_on": null, "closed_at": "2019-05-15T17:27:33Z"}, "comments": 1, "created_at": "2019-03-11T13:43:34Z", "updated_at": "2019-04-14T17:10:53Z", "closed_at": "2019-04-14T17:10:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "... + add info that `dacite` is not a serialiation/deserialization library", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/36", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/36/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/36/events", "html_url": "https://github.com/konradhalas/dacite/issues/36", "id": 419459332, "node_id": "MDU6SXNzdWU0MTk0NTkzMzI=", "number": 36, "title": "Configure static analysis tools within CI", "user": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/konradhalas/dacite/milestones/1", "html_url": "https://github.com/konradhalas/dacite/milestone/1", "labels_url": "https://api.github.com/repos/konradhalas/dacite/milestones/1/labels", "id": 4128596, "node_id": "MDk6TWlsZXN0b25lNDEyODU5Ng==", "number": 1, "title": "v1.0.0", "description": "", "creator": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-11T13:05:52Z", "updated_at": "2019-05-15T17:27:33Z", "due_on": null, "closed_at": "2019-05-15T17:27:33Z"}, "comments": 1, "created_at": "2019-03-11T13:07:04Z", "updated_at": "2019-03-17T16:45:36Z", "closed_at": "2019-03-17T16:45:36Z", "author_association": "OWNER", "active_lock_reason": null, "body": "We want to have:\r\n\r\n- `black`\r\n- `pylint`\r\n- `mypy`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/35", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/35/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/35/events", "html_url": "https://github.com/konradhalas/dacite/issues/35", "id": 418724806, "node_id": "MDU6SXNzdWU0MTg3MjQ4MDY=", "number": 35, "title": "Unable to transform None", "user": {"login": "condemil", "id": 722990, "node_id": "MDQ6VXNlcjcyMjk5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/722990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/condemil", "html_url": "https://github.com/condemil", "followers_url": "https://api.github.com/users/condemil/followers", "following_url": "https://api.github.com/users/condemil/following{/other_user}", "gists_url": "https://api.github.com/users/condemil/gists{/gist_id}", "starred_url": "https://api.github.com/users/condemil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/condemil/subscriptions", "organizations_url": "https://api.github.com/users/condemil/orgs", "repos_url": "https://api.github.com/users/condemil/repos", "events_url": "https://api.github.com/users/condemil/events{/privacy}", "received_events_url": "https://api.github.com/users/condemil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-08T10:22:55Z", "updated_at": "2019-03-10T17:30:08Z", "closed_at": "2019-03-10T17:30:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "dacite 0.0.23\r\n\r\n```python\r\n\r\n>>> from dataclasses import dataclass\r\n>>> from enum import Enum\r\n>>>\r\n>>> import dacite\r\n>>>\r\n>>>\r\n>>> class TestEnum(Enum):\r\n...     none = 1\r\n...     some_option = 2\r\n...\r\n>>> @dataclass\r\n... class TestData:\r\n...     some_field: TestEnum\r\n...\r\n>>>\r\n>>> def _transform_none(enum_field):\r\n...     if not enum_field:\r\n...         return TestEnum.none\r\n...     return TestEnum[enum_field]\r\n...\r\n>>>\r\n>>> dacite.from_dict(TestData, {'some_field': None}, dacite.Config(transform={'some_field': _transform_none}))\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    dacite.from_dict(TestData, {'some_field': None}, dacite.Config(transform={'some_field': _transform_none}))\r\n  File \"/Users/dmitry/.local/pyenv/versions/3.7.0/envs/sandbox/lib/python3.7/site-packages/dacite.py\", line 92, in from_dict\r\n    raise WrongTypeError(field, value)\r\ndacite.WrongTypeError: wrong type for field \"some_field\" - should be \"TestEnum\" instead of \"NoneType\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/33", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/33/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/33/events", "html_url": "https://github.com/konradhalas/dacite/issues/33", "id": 413789056, "node_id": "MDU6SXNzdWU0MTM3ODkwNTY=", "number": 33, "title": "Support for NewType", "user": {"login": "jurajpelikan", "id": 181692, "node_id": "MDQ6VXNlcjE4MTY5Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/181692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jurajpelikan", "html_url": "https://github.com/jurajpelikan", "followers_url": "https://api.github.com/users/jurajpelikan/followers", "following_url": "https://api.github.com/users/jurajpelikan/following{/other_user}", "gists_url": "https://api.github.com/users/jurajpelikan/gists{/gist_id}", "starred_url": "https://api.github.com/users/jurajpelikan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jurajpelikan/subscriptions", "organizations_url": "https://api.github.com/users/jurajpelikan/orgs", "repos_url": "https://api.github.com/users/jurajpelikan/repos", "events_url": "https://api.github.com/users/jurajpelikan/events{/privacy}", "received_events_url": "https://api.github.com/users/jurajpelikan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-24T06:49:08Z", "updated_at": "2019-03-10T18:16:11Z", "closed_at": "2019-03-10T18:13:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example:\r\n```\r\nfrom dataclasses import dataclass\r\nfrom typing import NewType\r\n\r\nimport dacite\r\n\r\nMyStr = NewType(\"MyStr\", str)\r\n\r\n\r\n@dataclass\r\nclass Data:\r\n    my_str: MyStr\r\n\r\n\r\ndacite.from_dict(Data, {\"my_str\": \"foo-bar\"})\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    dacite.from_dict(Data, {\"my_str\": \"foo-bar\"})\r\n  File \"dacite.py\", line 103, in from_dict\r\n    if not _is_instance(field.type, value):\r\n  File \"dacite.py\", line 337, in _is_instance\r\n    return isinstance(value, t)\r\nTypeError: isinstance() arg 2 must be a type or tuple of types\r\n```\r\nDacite currently does not support the \"NewType\" fields. The problem is in the  `_is_instance`  function. Please see the related pull request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/30", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/30/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/30/events", "html_url": "https://github.com/konradhalas/dacite/issues/30", "id": 404167716, "node_id": "MDU6SXNzdWU0MDQxNjc3MTY=", "number": 30, "title": "Inherited Concrete Types of Generic Types do not resolve TypeVar fields", "user": {"login": "bpeake-illuscio", "id": 44302546, "node_id": "MDQ6VXNlcjQ0MzAyNTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/44302546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpeake-illuscio", "html_url": "https://github.com/bpeake-illuscio", "followers_url": "https://api.github.com/users/bpeake-illuscio/followers", "following_url": "https://api.github.com/users/bpeake-illuscio/following{/other_user}", "gists_url": "https://api.github.com/users/bpeake-illuscio/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpeake-illuscio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpeake-illuscio/subscriptions", "organizations_url": "https://api.github.com/users/bpeake-illuscio/orgs", "repos_url": "https://api.github.com/users/bpeake-illuscio/repos", "events_url": "https://api.github.com/users/bpeake-illuscio/events{/privacy}", "received_events_url": "https://api.github.com/users/bpeake-illuscio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 855112551, "node_id": "MDU6TGFiZWw4NTUxMTI1NTE=", "url": "https://api.github.com/repos/konradhalas/dacite/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-29T08:07:53Z", "updated_at": "2019-05-18T19:36:31Z", "closed_at": "2019-03-10T18:49:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Example:\r\n\r\n```\r\n>>> import dacite\r\n>>> from dataclasses import dataclass\r\n>>> from typing import TypeVar, Generic\r\n>>> \r\n>>> DataType = TypeVar(\"DataType\")\r\n>>> \r\n>>> @dataclass\r\n... class Data(Generic[DataType]):\r\n...     value: DataType\r\n...     \r\n>>> class StrData(Data[str]):\r\n...     pass\r\n... \r\n>>> dacite.from_dict(StrData, {\"value\": \"I am a string\"})\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"dacite.py\", line 103, in from_dict\r\n    if not _is_instance(field.type, value):\r\n  File \"dacite.py\", line 330, in _is_instance\r\n    return isinstance(value, t)\r\nTypeError: isinstance() arg 2 must be a type or tuple of types\r\n```\r\n\r\ndacite currently does not deduce that the \"value\" field for StrData is a ```str``` type due to its generic inheritance into a concrete type. Instead, it throws the error above.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/29", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/29/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/29/events", "html_url": "https://github.com/konradhalas/dacite/issues/29", "id": 403536017, "node_id": "MDU6SXNzdWU0MDM1MzYwMTc=", "number": 29, "title": "How to cast all fields?", "user": {"login": "oTree-org", "id": 5423929, "node_id": "MDQ6VXNlcjU0MjM5Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5423929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oTree-org", "html_url": "https://github.com/oTree-org", "followers_url": "https://api.github.com/users/oTree-org/followers", "following_url": "https://api.github.com/users/oTree-org/following{/other_user}", "gists_url": "https://api.github.com/users/oTree-org/gists{/gist_id}", "starred_url": "https://api.github.com/users/oTree-org/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oTree-org/subscriptions", "organizations_url": "https://api.github.com/users/oTree-org/orgs", "repos_url": "https://api.github.com/users/oTree-org/repos", "events_url": "https://api.github.com/users/oTree-org/events{/privacy}", "received_events_url": "https://api.github.com/users/oTree-org/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-27T10:24:52Z", "updated_at": "2019-01-27T10:46:56Z", "closed_at": "2019-01-27T10:46:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to type cast all fields, including on nested models? I know I can set `cast` and include dotted items, but this would not work for complex object models, especially where a particular class could show up in different places in the tree.\r\n\r\nWould be nice if I could pass a callable that would return True or False depending on the class + field name, or if dacite could look for a particular method on my class, etc.\r\n\r\nAnyway it's not critical for me, but just giving a feature idea.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/26", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/26/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/26/events", "html_url": "https://github.com/konradhalas/dacite/issues/26", "id": 401056130, "node_id": "MDU6SXNzdWU0MDEwNTYxMzA=", "number": 26, "title": "Optional and Union not working together", "user": {"login": "adezegher", "id": 7766138, "node_id": "MDQ6VXNlcjc3NjYxMzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7766138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adezegher", "html_url": "https://github.com/adezegher", "followers_url": "https://api.github.com/users/adezegher/followers", "following_url": "https://api.github.com/users/adezegher/following{/other_user}", "gists_url": "https://api.github.com/users/adezegher/gists{/gist_id}", "starred_url": "https://api.github.com/users/adezegher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adezegher/subscriptions", "organizations_url": "https://api.github.com/users/adezegher/orgs", "repos_url": "https://api.github.com/users/adezegher/repos", "events_url": "https://api.github.com/users/adezegher/events{/privacy}", "received_events_url": "https://api.github.com/users/adezegher/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 855112551, "node_id": "MDU6TGFiZWw4NTUxMTI1NTE=", "url": "https://api.github.com/repos/konradhalas/dacite/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-20T02:40:15Z", "updated_at": "2019-01-25T16:11:47Z", "closed_at": "2019-01-25T16:11:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that when using ``Optional`` and ``Union`` together, the ``Optional`` attribute is ignored.\r\n\r\nThis test will fail right now because a ``MissingValueError`` is incorrectly raised:\r\n```python\r\n@dataclass\r\nclass X:\r\n    i: int\r\n\r\n\r\n@dataclass\r\nclass Y:\r\n    s: str\r\n\r\n\r\n@dataclass\r\nclass Z:\r\n    x_or_y: Optional[Union[X,Y]]\r\n\r\nresult = from_dict(Z, {'a': {'s': 'test'}})\r\n\r\nassert result == Z(x_or_y=None)\r\n```\r\n\r\nError:\r\n```\r\ndacite.MissingValueError: missing value for field x_or_y\r\n```\r\n\r\nLooking into the code it seems related to this function:\r\n```python\r\ndef _is_optional(t: Type) -> bool:\r\n    return _is_union(t) and type(None) in t.__args__ and len(t.__args__) == 2\r\n```\r\n\r\nThe function is returning ``false``, when it should be returning ``true``. This is because ``len(t.__args__) == 2`` is returning false. What is the reason for the ``len == 2`` check? It seems that removing this will solve this corner case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/24", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/24/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/24/events", "html_url": "https://github.com/konradhalas/dacite/issues/24", "id": 401036184, "node_id": "MDU6SXNzdWU0MDEwMzYxODQ=", "number": 24, "title": "Support for mixed List", "user": {"login": "adezegher", "id": 7766138, "node_id": "MDQ6VXNlcjc3NjYxMzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7766138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adezegher", "html_url": "https://github.com/adezegher", "followers_url": "https://api.github.com/users/adezegher/followers", "following_url": "https://api.github.com/users/adezegher/following{/other_user}", "gists_url": "https://api.github.com/users/adezegher/gists{/gist_id}", "starred_url": "https://api.github.com/users/adezegher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adezegher/subscriptions", "organizations_url": "https://api.github.com/users/adezegher/orgs", "repos_url": "https://api.github.com/users/adezegher/repos", "events_url": "https://api.github.com/users/adezegher/events{/privacy}", "received_events_url": "https://api.github.com/users/adezegher/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 855112551, "node_id": "MDU6TGFiZWw4NTUxMTI1NTE=", "url": "https://api.github.com/repos/konradhalas/dacite/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-19T21:22:47Z", "updated_at": "2019-03-10T17:17:20Z", "closed_at": "2019-03-10T17:17:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dacite supports well unions on list when all the items in the list are of the same class.\r\nHowever it does not seem to support unions on lists that have different types of classes.\r\n\r\nExample of a test case that fails right now:\r\n```python\r\n@dataclass\r\nclass X:\r\n    i: int\r\n\r\n\r\n@dataclass\r\nclass Y:\r\n    s: str\r\n\r\n\r\n@dataclass\r\nclass Z:\r\n    x_or_y: List[Union[X,Y]]\r\n\r\n\r\nresult = from_dict(Z, {'x_or_y': [{'s': 'test'}, {'i': 1}]})\r\n\r\nassert result == Z(x_or_y=[Y(s='test'), X(i=1)])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/21", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/21/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/21/events", "html_url": "https://github.com/konradhalas/dacite/issues/21", "id": 398221906, "node_id": "MDU6SXNzdWUzOTgyMjE5MDY=", "number": 21, "title": "Optional enum and cast is not working well together", "user": {"login": "condemil", "id": 722990, "node_id": "MDQ6VXNlcjcyMjk5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/722990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/condemil", "html_url": "https://github.com/condemil", "followers_url": "https://api.github.com/users/condemil/followers", "following_url": "https://api.github.com/users/condemil/following{/other_user}", "gists_url": "https://api.github.com/users/condemil/gists{/gist_id}", "starred_url": "https://api.github.com/users/condemil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/condemil/subscriptions", "organizations_url": "https://api.github.com/users/condemil/orgs", "repos_url": "https://api.github.com/users/condemil/repos", "events_url": "https://api.github.com/users/condemil/events{/privacy}", "received_events_url": "https://api.github.com/users/condemil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 855112551, "node_id": "MDU6TGFiZWw4NTUxMTI1NTE=", "url": "https://api.github.com/repos/konradhalas/dacite/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-11T10:16:44Z", "updated_at": "2019-01-14T14:21:23Z", "closed_at": "2019-01-13T14:01:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example:\r\n\r\n```python\r\nimport uuid\r\nfrom dataclasses import dataclass\r\nfrom enum import Enum\r\nfrom typing import Optional\r\n\r\nimport dacite\r\n\r\n\r\nclass E(Enum):\r\n    A = 1\r\n    B = 2\r\n\r\n@dataclass\r\nclass X:\r\n    test: Optional[E]\r\n\r\n\r\ndata = {\r\n    'test': None\r\n}\r\n\r\n\r\nx = dacite.from_dict(\r\n    data_class=X,\r\n    data=data,\r\n    config=dacite.Config(cast=['test'])\r\n)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 4, in <module>\r\n    config=dacite.Config(cast=['test'])\r\n  File \"/Users/dmitry/.local/pyenv/versions/3.7.0/envs/sandbox/lib/python3.7/site-packages/dacite.py\", line 93, in from_dict\r\n    value = cls(value)\r\n  File \"/Users/dmitry/.local/pyenv/versions/3.7.0/lib/python3.7/enum.py\", line 307, in __call__\r\n    return cls.__new__(cls, value)\r\n  File \"/Users/dmitry/.local/pyenv/versions/3.7.0/lib/python3.7/enum.py\", line 555, in __new__\r\n    return cls._missing_(value)\r\n  File \"/Users/dmitry/.local/pyenv/versions/3.7.0/lib/python3.7/enum.py\", line 568, in _missing_\r\n    raise ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\r\nValueError: None is not a valid E\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/20", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/20/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/20/events", "html_url": "https://github.com/konradhalas/dacite/issues/20", "id": 397902287, "node_id": "MDU6SXNzdWUzOTc5MDIyODc=", "number": 20, "title": "Unable to cast list of values", "user": {"login": "condemil", "id": 722990, "node_id": "MDQ6VXNlcjcyMjk5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/722990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/condemil", "html_url": "https://github.com/condemil", "followers_url": "https://api.github.com/users/condemil/followers", "following_url": "https://api.github.com/users/condemil/following{/other_user}", "gists_url": "https://api.github.com/users/condemil/gists{/gist_id}", "starred_url": "https://api.github.com/users/condemil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/condemil/subscriptions", "organizations_url": "https://api.github.com/users/condemil/orgs", "repos_url": "https://api.github.com/users/condemil/repos", "events_url": "https://api.github.com/users/condemil/events{/privacy}", "received_events_url": "https://api.github.com/users/condemil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-10T16:10:25Z", "updated_at": "2019-01-16T17:03:25Z", "closed_at": "2019-01-16T17:03:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to cast a list of strings to UUIDs and get the error. Here is the example:\r\n\r\n```python\r\n>>> from dataclasses import dataclass\r\n>>> from typing import List\r\n>>> from uuid import UUID\r\n>>>\r\n>>> import dacite\r\n>>>\r\n>>>\r\n>>> @dataclass\r\n... class A:\r\n...     uuid_list: List[UUID]\r\n...\r\n...\r\n>>> data = {'uuid_list': ['3416bc37-9d53-49dc-8361-ad2fb261fb71', 'e81bdbb7-14cd-480b-81ff-369ff49a0bcc']}\r\n>>>\r\n>>> dacite.from_dict(data_class=A, data=data, config=dacite.Config(cast=['uuid_list']))\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    dacite.from_dict(data_class=A, data=data, config=dacite.Config(cast=['uuid_list']))\r\n  File \"/Users/dmitry/.local/pyenv/versions/3.7.0/envs/sandbox/lib/python3.7/site-packages/dacite.py\", line 93, in from_dict\r\n    value = cls(value)\r\n  File \"/Users/dmitry/.local/pyenv/versions/3.7.0/lib/python3.7/typing.py\", line 668, in __call__\r\n    raise TypeError(f\"Type {self._name} cannot be instantiated; \"\r\nTypeError: Type List cannot be instantiated; use list() instead\r\n>>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/19", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/19/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/19/events", "html_url": "https://github.com/konradhalas/dacite/issues/19", "id": 397862198, "node_id": "MDU6SXNzdWUzOTc4NjIxOTg=", "number": 19, "title": "Feature request: Convert strings to Enum", "user": {"login": "condemil", "id": 722990, "node_id": "MDQ6VXNlcjcyMjk5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/722990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/condemil", "html_url": "https://github.com/condemil", "followers_url": "https://api.github.com/users/condemil/followers", "following_url": "https://api.github.com/users/condemil/following{/other_user}", "gists_url": "https://api.github.com/users/condemil/gists{/gist_id}", "starred_url": "https://api.github.com/users/condemil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/condemil/subscriptions", "organizations_url": "https://api.github.com/users/condemil/orgs", "repos_url": "https://api.github.com/users/condemil/repos", "events_url": "https://api.github.com/users/condemil/events{/privacy}", "received_events_url": "https://api.github.com/users/condemil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-10T14:44:04Z", "updated_at": "2019-01-10T15:45:03Z", "closed_at": "2019-01-10T15:42:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "When you have field with enum.Enum type it is not possible to parse json string and map it to dataclass. It will be nice to be able to convert string to enum field in background.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/18", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/18/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/18/events", "html_url": "https://github.com/konradhalas/dacite/issues/18", "id": 397849189, "node_id": "MDU6SXNzdWUzOTc4NDkxODk=", "number": 18, "title": "Feature request: Convert strings to UUID", "user": {"login": "condemil", "id": 722990, "node_id": "MDQ6VXNlcjcyMjk5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/722990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/condemil", "html_url": "https://github.com/condemil", "followers_url": "https://api.github.com/users/condemil/followers", "following_url": "https://api.github.com/users/condemil/following{/other_user}", "gists_url": "https://api.github.com/users/condemil/gists{/gist_id}", "starred_url": "https://api.github.com/users/condemil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/condemil/subscriptions", "organizations_url": "https://api.github.com/users/condemil/orgs", "repos_url": "https://api.github.com/users/condemil/repos", "events_url": "https://api.github.com/users/condemil/events{/privacy}", "received_events_url": "https://api.github.com/users/condemil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-10T14:14:03Z", "updated_at": "2019-01-10T16:12:34Z", "closed_at": "2019-01-10T15:44:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use dacite to map json that is returned from http call to dataclass. As soon as there is no UUID type in json the received uuid have string type. Instead of manually converting all UUIDs before calling from_dict() it will be really nice if dacite can check that input type is string and required type is UUID and convert string to UUID in background.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/16", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/16/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/16/events", "html_url": "https://github.com/konradhalas/dacite/issues/16", "id": 394842838, "node_id": "MDU6SXNzdWUzOTQ4NDI4Mzg=", "number": 16, "title": "TypeError when dataclass contains list of other dataclasses", "user": {"login": "bpeake-illuscio", "id": 44302546, "node_id": "MDQ6VXNlcjQ0MzAyNTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/44302546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpeake-illuscio", "html_url": "https://github.com/bpeake-illuscio", "followers_url": "https://api.github.com/users/bpeake-illuscio/followers", "following_url": "https://api.github.com/users/bpeake-illuscio/following{/other_user}", "gists_url": "https://api.github.com/users/bpeake-illuscio/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpeake-illuscio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpeake-illuscio/subscriptions", "organizations_url": "https://api.github.com/users/bpeake-illuscio/orgs", "repos_url": "https://api.github.com/users/bpeake-illuscio/repos", "events_url": "https://api.github.com/users/bpeake-illuscio/events{/privacy}", "received_events_url": "https://api.github.com/users/bpeake-illuscio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-30T03:23:33Z", "updated_at": "2019-01-05T20:58:46Z", "closed_at": "2019-01-05T20:58:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It looks like dacite errors out when given a dict with a list of loaded dataclasses already in it. Because of the way ```json.loads``` works, this is something that pops up when trying to load dataclasses directly. ``json.loads`` starts at the deepest object, and works its way back up. Dataclasses with a list of other dataclasses will have each object in the list loaded first.\r\n\r\nHere is an example that manifests the bug:\r\n\r\n```\r\n>>> import dacite\r\n>>> \r\n>>> from dataclasses import dataclass, field\r\n>>> from typing import List\r\n>>> \r\n>>> @dataclass\r\n... class X:\r\n...     text: str = \"default\"\r\n...     \r\n>>> @dataclass\r\n... class Y:\r\n...     x: X = X()\r\n...     \r\n>>> @dataclass\r\n... class Y:\r\n...     x_list: List[X] = field(default_factory=list)\r\n... \r\n>>> y_dict = {\"x_list\": [X(), X()]}\r\n>>> dacite.from_dict(Y, y_dict)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 78, in from_dict\r\n    field=field,\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 189, in _inner_from_dict_for_collection\r\n    ) for item in data)\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 189, in <genexpr>\r\n    ) for item in data)\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 61, in from_dict\r\n    _validate_config(data_class, data, config)\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 101, in _validate_config\r\n    _validate_config_data_key(data, config, 'remap')\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 122, in _validate_config_data_key\r\n    input_data_keys = set(data.keys())\r\nAttributeError: 'X' object has no attribute 'keys'\r\n```\r\n\r\nAnd here is an example of when this pops up in practical code:\r\n\r\n```\r\n>>> import json\r\n>>> from typing import Type\r\n>>> \r\n>>> def dataclass_hook(obj):\r\n...     class_index = {dc.__name__: dc for dc in [X, Y]}\r\n...     try:\r\n...         type_name = obj['_type']\r\n...     except (KeyError, IndexError):\r\n...         return obj\r\n...     try:\r\n...         data_type = class_index[type_name]\r\n...     except KeyError:\r\n...         return obj\r\n...     # lets print each step so we can see what order objects are being loaded,\r\n...     # and what values look like when the error is thrown\r\n...     print(data_type, obj)\r\n...     return dacite.from_dict(data_type, obj)\r\n... \r\n>>> data = {\r\n...     \"_type\": \"Y\",\r\n...     \"x_list\": [\r\n...         {\"_type\": \"X\", \"text\": \"value one\"},\r\n...         {\"_type\": \"X\", \"text\": \"value two\"},\r\n...     ]\r\n... }\r\n>>> json_string = json.dumps(data)\r\n>>> loaded = json.loads(json_string, object_hook=dataclass_hook)\r\n<class '__main__.X'> {'_type': 'X', 'text': 'value one'}\r\n<class '__main__.X'> {'_type': 'X', 'text': 'value two'}\r\n<class '__main__.Y'> {'_type': 'Y', 'x_list': [X(text='value one'), X(text='value two')]}\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py\", line 361, in loads\r\n    return cls(**kw).decode(s)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py\", line 337, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py\", line 353, in raw_decode\r\n    obj, end = self.scan_once(s, idx)\r\n  File \"<input>\", line 14, in dataclass_hook\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 78, in from_dict\r\n    field=field,\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 189, in _inner_from_dict_for_collection\r\n    ) for item in data)\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 189, in <genexpr>\r\n    ) for item in data)\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 61, in from_dict\r\n    _validate_config(data_class, data, config)\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 101, in _validate_config\r\n    _validate_config_data_key(data, config, 'remap')\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 122, in _validate_config_data_key\r\n    input_data_keys = set(data.keys())\r\nAttributeError: 'X' object has no attribute 'keys'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/15", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/15/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/15/events", "html_url": "https://github.com/konradhalas/dacite/issues/15", "id": 394836554, "node_id": "MDU6SXNzdWUzOTQ4MzY1NTQ=", "number": 15, "title": "TypeError with Undeclared Type Annotations", "user": {"login": "bpeake-illuscio", "id": 44302546, "node_id": "MDQ6VXNlcjQ0MzAyNTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/44302546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpeake-illuscio", "html_url": "https://github.com/bpeake-illuscio", "followers_url": "https://api.github.com/users/bpeake-illuscio/followers", "following_url": "https://api.github.com/users/bpeake-illuscio/following{/other_user}", "gists_url": "https://api.github.com/users/bpeake-illuscio/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpeake-illuscio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpeake-illuscio/subscriptions", "organizations_url": "https://api.github.com/users/bpeake-illuscio/orgs", "repos_url": "https://api.github.com/users/bpeake-illuscio/repos", "events_url": "https://api.github.com/users/bpeake-illuscio/events{/privacy}", "received_events_url": "https://api.github.com/users/bpeake-illuscio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 855112553, "node_id": "MDU6TGFiZWw4NTUxMTI1NTM=", "url": "https://api.github.com/repos/konradhalas/dacite/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-30T00:51:29Z", "updated_at": "2019-03-10T19:05:46Z", "closed_at": "2019-03-10T19:05:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sometimes it is necessary to declare types out-of-order. In this instance, quotes are put around the type to indicate the type has not yet been declared, but will be once the module is done importing.\r\n\r\nHere is a trivial example:\r\n\r\n```\r\n>>> @dataclass\r\n... class X:\r\n...     text: str\r\n...     y_data: \"Y\"\r\n...     \r\n>>> @dataclass\r\n... class Y:\r\n...     num: int\r\n...     \r\n```\r\n\r\nObviously, in this case, one could just reverse the declarations, but there are cases where types must remain in quotes, especially when handling cross-dependencies.\r\n\r\nHaving such a type declaration results in the following: \r\n\r\n```\r\n>>> x_dict = {\r\n...     \"text\": \"hello!\",\r\n...     \"y_data\": {\r\n...         \"num\": 10\r\n...     }\r\n... }\r\n>>> dacite.from_dict(x_dict)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\nTypeError: from_dict() missing 1 required positional argument: 'data'\r\n>>> dacite.from_dict(X, x_dict)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 93, in from_dict\r\n    elif not _is_instance(field.type, value):\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 276, in _is_instance\r\n    return isinstance(value, t)\r\nTypeError: isinstance() arg 2 must be a type or tuple of types\r\n```\r\n\r\nEven explicitly having a Y class already in the dict throws the same error:\r\n\r\n```\r\n>>> x_dict = {\r\n...     \"text\": \"hello!\",\r\n...     \"y_data\": Y(10)\r\n... }\r\n>>> dacite.from_dict(X, x_dict)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 93, in from_dict\r\n    elif not _is_instance(field.type, value):\r\n  File \"/Users/williampeake/venvs/spanreed-py-37/lib/python3.7/site-packages/dacite.py\", line 276, in _is_instance\r\n    return isinstance(value, t)\r\nTypeError: isinstance() arg 2 must be a type or tuple of types\r\n```\r\n\r\nThanks for your time. This is an awesome library, and I plan to make fairly heavy use of it for serializing / deserializing dataclasses from json. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/13", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/13/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/13/events", "html_url": "https://github.com/konradhalas/dacite/issues/13", "id": 394774575, "node_id": "MDU6SXNzdWUzOTQ3NzQ1NzU=", "number": 13, "title": "class with field(init=False) raises error", "user": {"login": "bpeake-illuscio", "id": 44302546, "node_id": "MDQ6VXNlcjQ0MzAyNTQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/44302546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpeake-illuscio", "html_url": "https://github.com/bpeake-illuscio", "followers_url": "https://api.github.com/users/bpeake-illuscio/followers", "following_url": "https://api.github.com/users/bpeake-illuscio/following{/other_user}", "gists_url": "https://api.github.com/users/bpeake-illuscio/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpeake-illuscio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpeake-illuscio/subscriptions", "organizations_url": "https://api.github.com/users/bpeake-illuscio/orgs", "repos_url": "https://api.github.com/users/bpeake-illuscio/repos", "events_url": "https://api.github.com/users/bpeake-illuscio/events{/privacy}", "received_events_url": "https://api.github.com/users/bpeake-illuscio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-29T08:33:07Z", "updated_at": "2019-01-06T14:15:05Z", "closed_at": "2019-01-06T14:15:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, using a dataclasses which include non-init fields throws an error.\r\n\r\nExample (python 3.7):\r\n```\r\n>>> import dacite\r\n>>> from dataclasses import dataclass, field\r\n>>> \r\n>>> @dataclass\r\n>>> class A:\r\n...     number: int\r\n...     text: str\r\n... \r\n...     post: str = field(init=False)\r\n... \r\n>>>\r\n>>> data = {\r\n...     \"_data_type\": \"A\",\r\n...     \"number\": 1,\r\n...     \"text\": \"hello\",\r\n...     \"post\": \"gotcha!\"\r\n... }\r\n>>> dacite.from_dict(A, data)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Users/williampeake/venvs/isle_collections-py-37/lib/python3.7/site-packages/dacite.py\", line 96, in from_dict\r\n    return data_class(**values)\r\nTypeError: __init__() got an unexpected keyword argument 'post'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/12", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/12/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/12/events", "html_url": "https://github.com/konradhalas/dacite/issues/12", "id": 392407997, "node_id": "MDU6SXNzdWUzOTI0MDc5OTc=", "number": 12, "title": "from_dict ignores extraneous data", "user": {"login": "kadrach", "id": 206176, "node_id": "MDQ6VXNlcjIwNjE3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/206176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadrach", "html_url": "https://github.com/kadrach", "followers_url": "https://api.github.com/users/kadrach/followers", "following_url": "https://api.github.com/users/kadrach/following{/other_user}", "gists_url": "https://api.github.com/users/kadrach/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadrach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadrach/subscriptions", "organizations_url": "https://api.github.com/users/kadrach/orgs", "repos_url": "https://api.github.com/users/kadrach/repos", "events_url": "https://api.github.com/users/kadrach/events{/privacy}", "received_events_url": "https://api.github.com/users/kadrach/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 855112553, "node_id": "MDU6TGFiZWw4NTUxMTI1NTM=", "url": "https://api.github.com/repos/konradhalas/dacite/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/konradhalas/dacite/milestones/1", "html_url": "https://github.com/konradhalas/dacite/milestone/1", "labels_url": "https://api.github.com/repos/konradhalas/dacite/milestones/1/labels", "id": 4128596, "node_id": "MDk6TWlsZXN0b25lNDEyODU5Ng==", "number": 1, "title": "v1.0.0", "description": "", "creator": {"login": "konradhalas", "id": 101077, "node_id": "MDQ6VXNlcjEwMTA3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/101077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konradhalas", "html_url": "https://github.com/konradhalas", "followers_url": "https://api.github.com/users/konradhalas/followers", "following_url": "https://api.github.com/users/konradhalas/following{/other_user}", "gists_url": "https://api.github.com/users/konradhalas/gists{/gist_id}", "starred_url": "https://api.github.com/users/konradhalas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konradhalas/subscriptions", "organizations_url": "https://api.github.com/users/konradhalas/orgs", "repos_url": "https://api.github.com/users/konradhalas/repos", "events_url": "https://api.github.com/users/konradhalas/events{/privacy}", "received_events_url": "https://api.github.com/users/konradhalas/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-03-11T13:05:52Z", "updated_at": "2019-05-15T17:27:33Z", "due_on": null, "closed_at": "2019-05-15T17:27:33Z"}, "comments": 5, "created_at": "2018-12-19T01:49:43Z", "updated_at": "2019-05-12T18:56:12Z", "closed_at": "2019-05-12T18:56:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Probably related to type validation, but I noticed that dacite ignores extraneous data passed to `from_dict`.\r\n\r\nI expected the last example to also raise an exception.\r\n\r\n```\r\n> @dataclass\r\n> class A:  \r\n>    x: str\r\n\r\n> A(x=\"hello\")\r\nA(x='hello')\r\n> A(x=\"hello\", y=\"world\")\r\nTypeError: __init__() got an unexpected keyword argument 'y'\r\n\r\n> dacite.from_dict(data_class=A, data={\"x\":\"hello\", \"y\": \"world\"})\r\nA(x='hello')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/11", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/11/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/11/events", "html_url": "https://github.com/konradhalas/dacite/issues/11", "id": 386952480, "node_id": "MDU6SXNzdWUzODY5NTI0ODA=", "number": 11, "title": "Nested configuration options", "user": {"login": "achennu", "id": 8309004, "node_id": "MDQ6VXNlcjgzMDkwMDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8309004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achennu", "html_url": "https://github.com/achennu", "followers_url": "https://api.github.com/users/achennu/followers", "following_url": "https://api.github.com/users/achennu/following{/other_user}", "gists_url": "https://api.github.com/users/achennu/gists{/gist_id}", "starred_url": "https://api.github.com/users/achennu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achennu/subscriptions", "organizations_url": "https://api.github.com/users/achennu/orgs", "repos_url": "https://api.github.com/users/achennu/repos", "events_url": "https://api.github.com/users/achennu/events{/privacy}", "received_events_url": "https://api.github.com/users/achennu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-03T18:44:16Z", "updated_at": "2018-12-10T19:59:03Z", "closed_at": "2018-12-10T19:59:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, nice nifty little library. I'm trying to understand how the API supports the idea of creating nested dataclasses. The example in the documentation shows a nesting of one level, but if one has to deal with a dict of deeper nesting, then how can the ``Config`` instance for the deeper levels be passed through.\r\n\r\nExtending the documentation example:\r\n\r\n```python\r\n@dataclass\r\nclass A:\r\n    x: int\r\n    y: int\r\n\r\n\r\n@dataclass\r\nclass B:\r\n    a: A\r\n    is_cool: bool\r\n\r\nB_config = Config(prefixed={'a': 'a_})\r\n\r\n@dataclass\r\nclass C:\r\n    b: B\r\n    count: int\r\n    \r\nC_config = Config(remap={'count': 'number'})\r\n\r\n\r\nDATA={\r\n    'number': 30,\r\n    'b': {\r\n        'is_cool': False,\r\n        'a_x': 30,\r\n        'a_y': 55,\r\n    }\r\n}\r\n\r\nfrom_dict(data_class=C, data=DATA, config=C_config)\r\n```\r\n\r\nI do not see how the ``from_dict`` API allows the use of B_config. Could you provide an example? Or is there no possibility for configuration beyond the top nesting level?\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/2", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/2/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/2/events", "html_url": "https://github.com/konradhalas/dacite/issues/2", "id": 355762201, "node_id": "MDU6SXNzdWUzNTU3NjIyMDE=", "number": 2, "title": "Python 3.7.0: AttributeError: type object 'str' has no attribute '__origin__'", "user": {"login": "bwalsh", "id": 47808, "node_id": "MDQ6VXNlcjQ3ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/47808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwalsh", "html_url": "https://github.com/bwalsh", "followers_url": "https://api.github.com/users/bwalsh/followers", "following_url": "https://api.github.com/users/bwalsh/following{/other_user}", "gists_url": "https://api.github.com/users/bwalsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwalsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwalsh/subscriptions", "organizations_url": "https://api.github.com/users/bwalsh/orgs", "repos_url": "https://api.github.com/users/bwalsh/repos", "events_url": "https://api.github.com/users/bwalsh/events{/privacy}", "received_events_url": "https://api.github.com/users/bwalsh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-30T21:32:19Z", "updated_at": "2018-09-04T03:52:24Z", "closed_at": "2018-09-03T21:44:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.  Thank you for your project.  Looks like just the thing I need.\r\nRunning into the following\r\n\r\n```\r\npython\r\nPython 3.7.0 (default, Jul 17 2018, 11:04:33)\r\n[GCC 6.3.0 20170516] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from dataclasses import dataclass\r\n>>> from dacite import from_dict\r\n>>>\r\n>>>\r\n>>> @dataclass\r\n... class User:\r\n...     name: str\r\n...     age: int\r\n...     is_active: bool\r\n...\r\n>>>\r\n>>> data = {\r\n...     'name': 'john',\r\n...     'age': 30,\r\n...     'is_active': True,\r\n... }\r\n>>>\r\n>>> user = from_dict(data_class=User, data=data)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.7/site-packages/dacite.py\", line 90, in from_dict\r\n    elif not _is_instance(field.type, value):\r\n  File \"/usr/local/lib/python3.7/site-packages/dacite.py\", line 248, in _is_instance\r\n    return isinstance(value, t.__origin__)\r\nAttributeError: type object 'str' has no attribute '__origin__'\r\n>>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/konradhalas/dacite/issues/1", "repository_url": "https://api.github.com/repos/konradhalas/dacite", "labels_url": "https://api.github.com/repos/konradhalas/dacite/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/konradhalas/dacite/issues/1/comments", "events_url": "https://api.github.com/repos/konradhalas/dacite/issues/1/events", "html_url": "https://github.com/konradhalas/dacite/issues/1", "id": 315688177, "node_id": "MDU6SXNzdWUzMTU2ODgxNzc=", "number": 1, "title": "Support for typing.TypeVar", "user": {"login": "diogobaeder", "id": 207168, "node_id": "MDQ6VXNlcjIwNzE2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diogobaeder", "html_url": "https://github.com/diogobaeder", "followers_url": "https://api.github.com/users/diogobaeder/followers", "following_url": "https://api.github.com/users/diogobaeder/following{/other_user}", "gists_url": "https://api.github.com/users/diogobaeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/diogobaeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diogobaeder/subscriptions", "organizations_url": "https://api.github.com/users/diogobaeder/orgs", "repos_url": "https://api.github.com/users/diogobaeder/repos", "events_url": "https://api.github.com/users/diogobaeder/events{/privacy}", "received_events_url": "https://api.github.com/users/diogobaeder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-04-19T00:37:01Z", "updated_at": "2018-05-18T13:28:35Z", "closed_at": "2018-04-26T17:30:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI was experimenting with this library, to try to used it to solve some problems I have, and I hit a wall: I need to support flexible types in my dataclasses, and dacite doesn't support `typing.TypeVar`.\r\n\r\nSo it would be nice to have dacite supporting `TypeVar` and infer the type that the value needs to be transformed to. For example:\r\n\r\n```python\r\n@dataclass\r\nclass Car:\r\n    model: str\r\n\r\n\r\n@dataclass\r\nclass Person:\r\n    age: int\r\n\r\n\r\nBox = TypeVar('Box', Car, Person)\r\n\r\n\r\n@dataclass\r\nclass Container:\r\n    box: Box\r\n\r\n\r\ncar_container = from_dict(Container, {\r\n    'box': {\r\n        'model': 'chevy',\r\n    },\r\n})\r\nassert isinstance(car_container.box, Car)\r\n```\r\n\r\nWhat do you think? Does this make sense? In that example, there could be a check for `Box.__constraints__` and try to match with whatever type it makes sense given the provided fields.", "performed_via_github_app": null, "score": 1.0}]}