{"total_count": 123, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/453", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/453/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/453/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/453", "id": 674329154, "node_id": "MDU6SXNzdWU2NzQzMjkxNTQ=", "number": 453, "title": "last() can try to use reversed()", "user": {"login": "brianmaissy", "id": 622989, "node_id": "MDQ6VXNlcjYyMjk4OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/622989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianmaissy", "html_url": "https://github.com/brianmaissy", "followers_url": "https://api.github.com/users/brianmaissy/followers", "following_url": "https://api.github.com/users/brianmaissy/following{/other_user}", "gists_url": "https://api.github.com/users/brianmaissy/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianmaissy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianmaissy/subscriptions", "organizations_url": "https://api.github.com/users/brianmaissy/orgs", "repos_url": "https://api.github.com/users/brianmaissy/repos", "events_url": "https://api.github.com/users/brianmaissy/events{/privacy}", "received_events_url": "https://api.github.com/users/brianmaissy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-06T13:48:47Z", "updated_at": "2020-08-11T21:36:08Z", "closed_at": "2020-08-11T21:36:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, first of all, I'm new new to more-itertools, and wanted to say thanks! I'm currently in the process of migrating a codebase to use this instead of some of its own hand-rolled utils.\r\n\r\nWhat follows is a suggestion for a possible improvement, based on behavior that one of those utils supported. If you like the idea I'm happy to open a PR.\r\n\r\nIf I call `last()` on an iterable which doesn't support indexing but does have a `__reversed__()` method, the entire iterable will be consumed. Is there a reason `last()` doesn't try to call `reversed()`?\r\n\r\nHere's a toy example of the type of iterable which would benefit from that behavior:\r\n\r\n```\r\nclass ReversibleSlowRange:\r\n    def __init__(self, start, stop, step=1):\r\n        self.start = start\r\n        self.stop = stop\r\n        self.step = step\r\n        self.current = start\r\n\r\n    def __iter__(self):\r\n        return self\r\n\r\n    def __next__(self):\r\n        if self.current == self.stop:\r\n            raise StopIteration()\r\n        time.sleep(1)\r\n        result = self.current\r\n        self.current += self.step\r\n        return result\r\n\r\n    def __reversed__(self):\r\n        return self.__class__(self.stop-self.step, self.start-self.step, -self.step)\r\n```\r\n\r\nI don't think this is relevant for any of the builtins or types from the standard library, and there might not be too many real-world examples of data structures like this, so if this is rejected for falling into the category of \"bloat\", I understand. Just thought I would suggest it in case it might be useful to somebody.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/447", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/447/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/447/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/447", "id": 647805280, "node_id": "MDU6SXNzdWU2NDc4MDUyODA=", "number": 447, "title": "Replace Travis CI", "user": {"login": "bbayles", "id": 1922815, "node_id": "MDQ6VXNlcjE5MjI4MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1922815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbayles", "html_url": "https://github.com/bbayles", "followers_url": "https://api.github.com/users/bbayles/followers", "following_url": "https://api.github.com/users/bbayles/following{/other_user}", "gists_url": "https://api.github.com/users/bbayles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbayles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbayles/subscriptions", "organizations_url": "https://api.github.com/users/bbayles/orgs", "repos_url": "https://api.github.com/users/bbayles/repos", "events_url": "https://api.github.com/users/bbayles/events{/privacy}", "received_events_url": "https://api.github.com/users/bbayles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-30T02:35:28Z", "updated_at": "2020-07-01T02:12:56Z", "closed_at": "2020-07-01T02:12:56Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "This last breakage was the final straw; I'm not going back.\r\n\r\nI will probably set up GitHub Actions instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/443", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/443/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/443/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/443", "id": 645897662, "node_id": "MDU6SXNzdWU2NDU4OTc2NjI=", "number": 443, "title": "a function to rotate an iterable", "user": {"login": "graingert", "id": 413772, "node_id": "MDQ6VXNlcjQxMzc3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/413772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graingert", "html_url": "https://github.com/graingert", "followers_url": "https://api.github.com/users/graingert/followers", "following_url": "https://api.github.com/users/graingert/following{/other_user}", "gists_url": "https://api.github.com/users/graingert/gists{/gist_id}", "starred_url": "https://api.github.com/users/graingert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graingert/subscriptions", "organizations_url": "https://api.github.com/users/graingert/orgs", "repos_url": "https://api.github.com/users/graingert/repos", "events_url": "https://api.github.com/users/graingert/events{/privacy}", "received_events_url": "https://api.github.com/users/graingert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-25T22:54:32Z", "updated_at": "2020-06-28T01:40:07Z", "closed_at": "2020-06-28T01:40:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n>>> tuple(rotate([1, 2, 3, 4, 5], 2))\r\n(3, 4, 5, 1, 2)\r\n```\r\n\r\n```python\r\ndef rotate(items, n):\r\n    items = iter(items)\r\n    front = reversed(list(itertools.islice(items, 0, n)))\r\n    yield from items\r\n    yield from front\r\n```\r\n\r\nalthough that doesn't work if the n rotate is greater than the number of elements in this iterable", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/442", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/442/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/442/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/442", "id": 645452109, "node_id": "MDU6SXNzdWU2NDU0NTIxMDk=", "number": 442, "title": "Recipe recommendation: \"all_same_type\"", "user": {"login": "lmmx", "id": 2979452, "node_id": "MDQ6VXNlcjI5Nzk0NTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2979452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lmmx", "html_url": "https://github.com/lmmx", "followers_url": "https://api.github.com/users/lmmx/followers", "following_url": "https://api.github.com/users/lmmx/following{/other_user}", "gists_url": "https://api.github.com/users/lmmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/lmmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lmmx/subscriptions", "organizations_url": "https://api.github.com/users/lmmx/orgs", "repos_url": "https://api.github.com/users/lmmx/repos", "events_url": "https://api.github.com/users/lmmx/events{/privacy}", "received_events_url": "https://api.github.com/users/lmmx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-25T10:31:19Z", "updated_at": "2020-06-25T12:58:52Z", "closed_at": "2020-06-25T12:58:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to suggest a new recipe to be included in the package, [via](https://stackoverflow.com/a/13252614/2668831) StackOverflow:\r\n\r\n```py\r\ndef all_same_type(iterable):\r\n    iterable = iter(iterable)\r\n    try:\r\n        first = type(next(iterable))\r\n        return all(isinstance(i,first) for i in iterable)\r\n    except StopIteration:\r\n        return True\r\n```\r\n\r\nCan I recommend it for inclusion into the list of itertools recipes ([here](https://docs.python.org/3/library/itertools.html#itertools-recipes)) which ship with this package?\r\n\r\nI think it'd fit in alongside the funcdef `all_equal`, which checks for value equality. This funcdef checks for _type_ equality (and can handle subclasses).\r\n\r\nSince it requires exception handling in the case of a \"void iterator\" i.e. where calling `next` the first time raises `StopIteration` (such as `range(0)`), it can't be done in a one-liner so it warrants its own funcdef.\r\n\r\nThe handling of the void iterator is made to match the behaviour of all, returning `True` in the case that the assignment of `first` to `type(next(iterable))` throws `StopIteration` from the next call.\r\n\r\nCredit: StackOverflow users EnricoGiampieri (who wrote the answer) and mgilson (who made a correction to it).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/441", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/441/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/441/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/441", "id": 644342103, "node_id": "MDU6SXNzdWU2NDQzNDIxMDM=", "number": 441, "title": "Callback to iterator utility: cb_to_iter", "user": {"login": "frankier", "id": 299380, "node_id": "MDQ6VXNlcjI5OTM4MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/299380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankier", "html_url": "https://github.com/frankier", "followers_url": "https://api.github.com/users/frankier/followers", "following_url": "https://api.github.com/users/frankier/following{/other_user}", "gists_url": "https://api.github.com/users/frankier/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankier/subscriptions", "organizations_url": "https://api.github.com/users/frankier/orgs", "repos_url": "https://api.github.com/users/frankier/repos", "events_url": "https://api.github.com/users/frankier/events{/privacy}", "received_events_url": "https://api.github.com/users/frankier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-24T05:59:39Z", "updated_at": "2020-07-03T19:18:22Z", "closed_at": "2020-07-03T19:18:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Thought I would ask about this one here since it's something I keep using, and is completely to do with iterators but I'm not sure if it might be a bit controversial/out of scope.\r\n\r\nSome libraries (e.g. HDF5py, lxml) do iteration via callbacks. It seems to be particularly common in fairly straight forward wrappers of C/C++ APIs. The idea of converting it to an iterator has come up before https://stackoverflow.com/questions/9968592/turn-functions-with-a-callback-into-python-generators . I myself have used this repeatedly (I have been copy pasting it between projects) so that I can get something out I can start applying iterator combinators on.\r\n\r\nHere is the straw man. \r\n\r\n```\r\nclass AbortThread(BaseException):\r\n    pass\r\n\r\n\r\ndef cb_to_iter(f):\r\n    def iter(*args, **kwargs):\r\n        from threading import Thread\r\n        from queue import Queue\r\n\r\n        q = Queue()\r\n        job_done = object()\r\n        abort = False\r\n\r\n        def cb(*cb_args, **cb_kwargs):\r\n            if cb_kwargs:\r\n                cb_args = cb_args + (cb_kwargs,)\r\n            if len(cb_args) == 1:\r\n                q.put(cb_args[0])\r\n            else:\r\n                q.put(cb_args)\r\n            q.join()\r\n            if abort:\r\n                raise AbortThread\r\n\r\n        def task(*args, **kwargs):\r\n            try:\r\n                f(*(args + (cb,)), **kwargs)\r\n                q.put(job_done)\r\n            except AbortThread:\r\n                pass\r\n\r\n        thread = Thread(target=task, args=args, kwargs=kwargs)\r\n        thread.start()\r\n\r\n        try:\r\n            while True:\r\n                next_item = q.get(True)\r\n                if next_item is job_done:\r\n                    break\r\n                yield next_item\r\n                q.task_done()\r\n        finally:\r\n            abort = True\r\n            try:\r\n                q.task_done()\r\n            except ValueError:\r\n                pass\r\n            thread.join(5)\r\n\r\n    return iter\r\n```\r\n\r\nOne big question mark here is: is it okay to start spawning threads? The main justification has to be that it's the only way to achieve this, and this is the only way to start applying iterator combinators when faced with this type of API short of just collecting everything into a list.\r\n\r\nIt would also be possible to use an async iterator, but that's a whole different kettle of fish.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/439", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/439/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/439/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/439", "id": 641222800, "node_id": "MDU6SXNzdWU2NDEyMjI4MDA=", "number": 439, "title": "unique_when_justseen", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-18T13:48:12Z", "updated_at": "2020-07-02T18:07:50Z", "closed_at": "2020-07-02T18:07:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw a [post](https://stackoverflow.com/q/62430679/4531270) on squashing consecutive duplicates of a particular number.  It led me to generalize a kind of `unique_justseen()` with a predicate.  The predicate let's you chose what elements you wish to be unique.\r\n\r\n```python\r\ndef unique_when_justseen(seq, pred=None):\r\n    \"\"\"Yield unique values when a predicate is satisfied; default unique_justseen.\"\"\"\r\n    if pred is None:\r\n        pred = lambda x: x\r\n\r\n    for k, g in it.groupby(seq):\r\n\r\n        if pred(k):\r\n            yield k\r\n        else:\r\n            yield from g\r\n\r\n```\r\n\r\n\r\n*How can it be used?*\r\n\r\nPerhaps you want to compress certain contiguous values (as seen in the post):\r\n\r\n```python\r\nvalues = [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1]\r\nlist(unique_when_justseen(values, pred=lambda x: x in (0,)))\r\n# [0, 1, 1, 1, 0, 1, 1, 0, 1, 1]\r\n```\r\n\r\nOr you want to screen background noise from repeated values you care about (clustering):\r\n\r\n```python\r\ncpu_usage = [0, 0, 0, 0, 80, 80, 100, 100, 100, 100, 100, 100, 100, 60, 60, 20, 0, 0]\r\nlist(unique_when_justseen(cpu_usage, pred=lambda x: x < 70))\r\n# [0, 80, 80, 100, 100, 100, 100, 100, 100, 100, 60, 20, 0]\r\n\r\nmessage = \"      111     111             11      1        1111       \"\r\n\"\".join(unique_when_justseen(message, pred=lambda x: x not in (\"1\",)))\r\n# ' 111 111 11 1 1111 '\r\n```\r\n\r\nI had trouble locating many real world examples.  I decided to post it anyway, in case anyone had ideas.  \r\n\r\n\r\nSee also \r\n\r\n- `unique_justseen`\r\n- `unique_everseen`\r\n- `unique_to_each`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/428", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/428/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/428/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/428", "id": 622505593, "node_id": "MDU6SXNzdWU2MjI1MDU1OTM=", "number": 428, "title": "islice_extended with actual slices", "user": {"login": "cool-RR", "id": 56778, "node_id": "MDQ6VXNlcjU2Nzc4", "avatar_url": "https://avatars1.githubusercontent.com/u/56778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cool-RR", "html_url": "https://github.com/cool-RR", "followers_url": "https://api.github.com/users/cool-RR/followers", "following_url": "https://api.github.com/users/cool-RR/following{/other_user}", "gists_url": "https://api.github.com/users/cool-RR/gists{/gist_id}", "starred_url": "https://api.github.com/users/cool-RR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cool-RR/subscriptions", "organizations_url": "https://api.github.com/users/cool-RR/orgs", "repos_url": "https://api.github.com/users/cool-RR/repos", "events_url": "https://api.github.com/users/cool-RR/events{/privacy}", "received_events_url": "https://api.github.com/users/cool-RR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-21T13:38:40Z", "updated_at": "2020-05-25T01:34:18Z", "closed_at": "2020-05-25T01:34:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here's an idea I suggested to python-ideas, and I was told it could be a better fit here. How about instead of this: \r\n\r\n`islice_extended(iterable, 7, 20)`\r\n\r\nWe'll just have: \r\n\r\n`islice_extended(iterable)[7:20]`\r\n\r\nAdvantages:\r\n1. More familiar slicing syntax.\r\n2. No need to awkwardly use `None` when you're interested in just specifying the end of the slice without specifying the start, i.e. `islice_extended(x)[10:]` instead of `islice_extended(x, 10, None)`.\r\n3. Doesn't require breaking backwards compatibility.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/426", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/426/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/426/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/426", "id": 621842348, "node_id": "MDU6SXNzdWU2MjE4NDIzNDg=", "number": 426, "title": "Documentation on `islice_extended` function signature is incorrect", "user": {"login": "dsfulf", "id": 8421927, "node_id": "MDQ6VXNlcjg0MjE5Mjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8421927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsfulf", "html_url": "https://github.com/dsfulf", "followers_url": "https://api.github.com/users/dsfulf/followers", "following_url": "https://api.github.com/users/dsfulf/following{/other_user}", "gists_url": "https://api.github.com/users/dsfulf/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsfulf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsfulf/subscriptions", "organizations_url": "https://api.github.com/users/dsfulf/orgs", "repos_url": "https://api.github.com/users/dsfulf/repos", "events_url": "https://api.github.com/users/dsfulf/events{/privacy}", "received_events_url": "https://api.github.com/users/dsfulf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-20T15:10:07Z", "updated_at": "2020-05-26T12:55:23Z", "closed_at": "2020-05-26T12:55:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Minor issue, but the function signature doesn't list the `iterable` as an argument.\r\n\r\nhttps://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.islice_extended", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/421", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/421/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/421/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/421", "id": 607624371, "node_id": "MDU6SXNzdWU2MDc2MjQzNzE=", "number": 421, "title": "Why isn't more-itertools built-in", "user": {"login": "0xF4D3C0D3", "id": 19762154, "node_id": "MDQ6VXNlcjE5NzYyMTU0", "avatar_url": "https://avatars3.githubusercontent.com/u/19762154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0xF4D3C0D3", "html_url": "https://github.com/0xF4D3C0D3", "followers_url": "https://api.github.com/users/0xF4D3C0D3/followers", "following_url": "https://api.github.com/users/0xF4D3C0D3/following{/other_user}", "gists_url": "https://api.github.com/users/0xF4D3C0D3/gists{/gist_id}", "starred_url": "https://api.github.com/users/0xF4D3C0D3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0xF4D3C0D3/subscriptions", "organizations_url": "https://api.github.com/users/0xF4D3C0D3/orgs", "repos_url": "https://api.github.com/users/0xF4D3C0D3/repos", "events_url": "https://api.github.com/users/0xF4D3C0D3/events{/privacy}", "received_events_url": "https://api.github.com/users/0xF4D3C0D3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3906322, "node_id": "MDU6TGFiZWwzOTA2MzIy", "url": "https://api.github.com/repos/more-itertools/more-itertools/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-27T15:05:50Z", "updated_at": "2020-04-27T15:28:08Z", "closed_at": "2020-04-27T15:28:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Don't take this the wrong way.  I just wonder why more-itertools is just a third-party module because it looks like quite light-weight and universal. some functions of more-itertools make my code more readable and maintainable. I think if it's a feature, not a module, it'll make python better(well, it's already pretty good though). I know that this question like a request isn't appropriate here. But I just want to know your opinions.\r\n\r\nSorry for my poor English, If you feel uncomfortable, I didn't mean to it. \r\n\r\nIn brief, Why isn't more-itertools built-in? It would look pretty good to be built-in(well this is quite subjective)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/410", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/410/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/410/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/410/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/410", "id": 589469436, "node_id": "MDU6SXNzdWU1ODk0Njk0MzY=", "number": 410, "title": "Inconsistent return type for distinct_permutations", "user": {"login": "ilai-deutel", "id": 10098207, "node_id": "MDQ6VXNlcjEwMDk4MjA3", "avatar_url": "https://avatars0.githubusercontent.com/u/10098207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilai-deutel", "html_url": "https://github.com/ilai-deutel", "followers_url": "https://api.github.com/users/ilai-deutel/followers", "following_url": "https://api.github.com/users/ilai-deutel/following{/other_user}", "gists_url": "https://api.github.com/users/ilai-deutel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilai-deutel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilai-deutel/subscriptions", "organizations_url": "https://api.github.com/users/ilai-deutel/orgs", "repos_url": "https://api.github.com/users/ilai-deutel/repos", "events_url": "https://api.github.com/users/ilai-deutel/events{/privacy}", "received_events_url": "https://api.github.com/users/ilai-deutel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-28T00:07:38Z", "updated_at": "2020-03-29T19:28:45Z", "closed_at": "2020-03-29T19:28:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Before `r` was added to `distinct_permutations`, the function yielded tuples, like `permutations`:\r\n\r\n```python\r\n>>> list(distinct_permutations([1, 0, 1]))\r\n[(1, 0, 1), (0, 1, 1), (1, 1, 0)]\r\n>>> list(distinct_permutations([1]))\r\n[(1,)]\r\n```\r\n\r\nWith `r`, the function yields lists in certain cases, tuples in others:\r\n\r\n```python\r\n>>> list(distinct_permutations([1, 0, 1], r=1))\r\n[(0,), (1,)]\r\n>>> list(distinct_permutations([1, 0, 1], r=2))\r\n[(0, 1), (1, 0), (1, 1)]\r\n>>> list(distinct_permutations([1], r=1))\r\n[[1]]\r\n```\r\n\r\nI think that having a special case when `r == 1` and  `item_count == 1` would solve the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/409", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/409/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/409/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/409", "id": 587705229, "node_id": "MDU6SXNzdWU1ODc3MDUyMjk=", "number": 409, "title": "spy: changing the result list changes the returned iterable", "user": {"login": "has2k1", "id": 780341, "node_id": "MDQ6VXNlcjc4MDM0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/780341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/has2k1", "html_url": "https://github.com/has2k1", "followers_url": "https://api.github.com/users/has2k1/followers", "following_url": "https://api.github.com/users/has2k1/following{/other_user}", "gists_url": "https://api.github.com/users/has2k1/gists{/gist_id}", "starred_url": "https://api.github.com/users/has2k1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/has2k1/subscriptions", "organizations_url": "https://api.github.com/users/has2k1/orgs", "repos_url": "https://api.github.com/users/has2k1/repos", "events_url": "https://api.github.com/users/has2k1/events{/privacy}", "received_events_url": "https://api.github.com/users/has2k1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-25T13:41:57Z", "updated_at": "2020-03-30T00:56:55Z", "closed_at": "2020-03-30T00:56:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Changing the result list of `spy` also alters the iterable.\r\n\r\n```python\r\nIn [1]: from more_itertools import spy\r\n\r\nIn [2]: it = range(10)\r\n\r\nIn [3]: head, it = spy(it, 3)\r\n\r\nIn [4]: head[1] = 'bad'\r\n\r\nIn [5]: list(it)\r\nOut[5]: [0, 'bad', 2, 3, 4, 5, 6, 7, 8, 9]\r\n```\r\n\r\n I think it is a case of implementation details leaking out.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/393", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/393/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/393/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/393", "id": 577141875, "node_id": "MDU6SXNzdWU1NzcxNDE4NzU=", "number": 393, "title": "PEP/python-dev discussion history", "user": {"login": "sciencemanx", "id": 6300101, "node_id": "MDQ6VXNlcjYzMDAxMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6300101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sciencemanx", "html_url": "https://github.com/sciencemanx", "followers_url": "https://api.github.com/users/sciencemanx/followers", "following_url": "https://api.github.com/users/sciencemanx/following{/other_user}", "gists_url": "https://api.github.com/users/sciencemanx/gists{/gist_id}", "starred_url": "https://api.github.com/users/sciencemanx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sciencemanx/subscriptions", "organizations_url": "https://api.github.com/users/sciencemanx/orgs", "repos_url": "https://api.github.com/users/sciencemanx/repos", "events_url": "https://api.github.com/users/sciencemanx/events{/privacy}", "received_events_url": "https://api.github.com/users/sciencemanx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3906322, "node_id": "MDU6TGFiZWwzOTA2MzIy", "url": "https://api.github.com/repos/more-itertools/more-itertools/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-06T19:51:27Z", "updated_at": "2020-05-15T12:57:18Z", "closed_at": "2020-03-14T14:27:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Has there been any history of discussion about merging this into python's itertools? It seems silly that they list useful recipes (https://docs.python.org/2/library/itertools.html#recipes) in the documentation but you have to go elsewhere or copy them internally to use them.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/389", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/389/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/389/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/389", "id": 573465801, "node_id": "MDU6SXNzdWU1NzM0NjU4MDE=", "number": 389, "title": "PR in the README", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-01T02:40:10Z", "updated_at": "2020-03-02T01:40:07Z", "closed_at": "2020-03-02T01:40:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "The other kind of PR ;)\r\n\r\nIt's not often I see writeups on `more_itertools`.  Lately, I heard about a [blog][1] on an episode of [Python Bytes][0] (double publicity).  Should we include a publicity section in the README?\r\n\r\nI think tutorials/tours like this help guide people through a subset of the 95+ tools we have.  They can serve as \"entry points\" to new users to a growing library.  It's nice to have some external recommendations.\r\n\r\n\r\nP.S. Kudos to @erikrose and @bbayles on maintaining a great library.\r\n\r\n  [0]: https://pythonbytes.fm/episodes/show/170/visualize-this-visualizing-python-s-visualization-ecosystem\r\n  [1]: https://martinheinz.dev/blog/16\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/388", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/388/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/388/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/388", "id": 570840277, "node_id": "MDU6SXNzdWU1NzA4NDAyNzc=", "number": 388, "title": "proposals on distinct_permutations", "user": {"login": "SergBobrovsky", "id": 13639764, "node_id": "MDQ6VXNlcjEzNjM5NzY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13639764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergBobrovsky", "html_url": "https://github.com/SergBobrovsky", "followers_url": "https://api.github.com/users/SergBobrovsky/followers", "following_url": "https://api.github.com/users/SergBobrovsky/following{/other_user}", "gists_url": "https://api.github.com/users/SergBobrovsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergBobrovsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergBobrovsky/subscriptions", "organizations_url": "https://api.github.com/users/SergBobrovsky/orgs", "repos_url": "https://api.github.com/users/SergBobrovsky/repos", "events_url": "https://api.github.com/users/SergBobrovsky/events{/privacy}", "received_events_url": "https://api.github.com/users/SergBobrovsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-25T21:20:34Z", "updated_at": "2020-03-06T01:54:43Z", "closed_at": "2020-03-06T01:54:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Standard python's permutation has signature\r\n`itertools.permutations(iterable, r=None)`\r\nwhere **r** means length of permutations.\r\ndistinct_permutations has no this option. Is it drawback? Yes. A few days ago I felt it on my own.\r\nThere is a trick to bypass this: to combine distinct_combinations of length **r** with distinct_permutations, it works. So first variant is to add this combination to codebase or to replace resent realisation or distinct_permutations to thouse combine. Something like this:\r\n`\r\ndef partial_distinct_permutations(iterable, r=None):\r\n\r\n    return chain.from_iterable(\r\n\r\n        map(distinct_permutations,\r\n\r\n            distinct_combinations(iterable, r)))\r\n`It has a disadvantages:\r\n- non-elegant\r\n- chaotic output instead lexicographical\r\n\r\nAnother one is to rewrite distinct_permutations on way like this:`\r\n\r\ndef distinct_permutations(iterable, r=None):\r\n\r\n    def helper(abc, depth):\r\n\r\n        if depth:\r\n\r\n            depth -= 1\r\n\r\n            a, *bc = abc\r\n\r\n            for cb in helper(bc, depth):\r\n\r\n                yield [a, *cb]\r\n\r\n            for i, b in enumerate(bc):\r\n\r\n                if a == b:\r\n\r\n                    continue\r\n\r\n                a, bc[i] = b, a\r\n\r\n                for cb in helper(bc, depth):\r\n\r\n                    yield [a, *cb]\r\n\r\n        else:\r\n\r\n            yield abc\r\n\r\n    l = sorted(iterable)\r\n\r\n    if r is None:\r\n\r\n        r = len(l)\r\n\r\n    return (res[:r] for res in helper(l, r - (r == (len(l))))) \r\n`\r\nLexicographical. This variant is 4+ times slowly compared with resent distinct_permutations realization (on full width, of course), but is it so important? No, I hope and I can illustrate it.\r\n\r\nThere is a third way - to rewrite second one to more complex and fast. It is unlikely that the maintainer will be interested in this )\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/383", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/383/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/383/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/383", "id": 558745224, "node_id": "MDU6SXNzdWU1NTg3NDUyMjQ=", "number": 383, "title": "Unpacking unzip() fails for empty iterators.", "user": {"login": "lschmelzeisen", "id": 488697, "node_id": "MDQ6VXNlcjQ4ODY5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/488697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lschmelzeisen", "html_url": "https://github.com/lschmelzeisen", "followers_url": "https://api.github.com/users/lschmelzeisen/followers", "following_url": "https://api.github.com/users/lschmelzeisen/following{/other_user}", "gists_url": "https://api.github.com/users/lschmelzeisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/lschmelzeisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lschmelzeisen/subscriptions", "organizations_url": "https://api.github.com/users/lschmelzeisen/orgs", "repos_url": "https://api.github.com/users/lschmelzeisen/repos", "events_url": "https://api.github.com/users/lschmelzeisen/events{/privacy}", "received_events_url": "https://api.github.com/users/lschmelzeisen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-02T19:36:01Z", "updated_at": "2020-02-04T16:21:28Z", "closed_at": "2020-02-04T16:21:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following use of `unzip()` is described in the docs:\r\n\r\n```python\r\n>>> iterable = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\r\n>>> letters, numbers = unzip(iterable)\r\n```\r\n\r\nHowever, this will fail if `iterable` is empty:\r\n\r\n```python\r\n>>> letters, numbers = unzip([])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nValueError: not enough values to unpack (expected 2, got 0)\r\n```\r\n\r\nUnless I'm missing something this makes using `unzip()` quite unwieldy for a possibly empty  `iterable`.\r\n\r\nWhat's the suggested way to deal with this case on the caller side?\r\n\r\n Any way the API could be changed here to make this easier for the caller?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/379", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/379/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/379/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/379", "id": 555962051, "node_id": "MDU6SXNzdWU1NTU5NjIwNTE=", "number": 379, "title": "Head and Tail", "user": {"login": "jamiecook", "id": 151124, "node_id": "MDQ6VXNlcjE1MTEyNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/151124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamiecook", "html_url": "https://github.com/jamiecook", "followers_url": "https://api.github.com/users/jamiecook/followers", "following_url": "https://api.github.com/users/jamiecook/following{/other_user}", "gists_url": "https://api.github.com/users/jamiecook/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamiecook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamiecook/subscriptions", "organizations_url": "https://api.github.com/users/jamiecook/orgs", "repos_url": "https://api.github.com/users/jamiecook/repos", "events_url": "https://api.github.com/users/jamiecook/events{/privacy}", "received_events_url": "https://api.github.com/users/jamiecook/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-28T03:31:31Z", "updated_at": "2020-02-04T02:43:35Z", "closed_at": "2020-02-04T02:43:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this fits with this library but I use it quite a lot so I'll put it here for judgement.\r\n\r\nThe basic concept is list decomposition by it's first element and the remainder (head and tail)\r\n\r\n```python\r\ndef head_and_tail(iterable):\u2028    \r\n    # type: (Iterable) -> Tuple[Any, Iterable]\u2028\r\n    it = iter(iterable)\u2028    \r\n    return next(it), it\u2028\r\n```\r\n\r\nWould be happy to upgrade the above into something more robust and PR if it's of interest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/370", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/370/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/370/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/370", "id": 545195390, "node_id": "MDU6SXNzdWU1NDUxOTUzOTA=", "number": 370, "title": "list(bucket()) hangs with 100% CPU", "user": {"login": "alexchandel", "id": 637714, "node_id": "MDQ6VXNlcjYzNzcxNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/637714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexchandel", "html_url": "https://github.com/alexchandel", "followers_url": "https://api.github.com/users/alexchandel/followers", "following_url": "https://api.github.com/users/alexchandel/following{/other_user}", "gists_url": "https://api.github.com/users/alexchandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexchandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexchandel/subscriptions", "organizations_url": "https://api.github.com/users/alexchandel/orgs", "repos_url": "https://api.github.com/users/alexchandel/repos", "events_url": "https://api.github.com/users/alexchandel/events{/privacy}", "received_events_url": "https://api.github.com/users/alexchandel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-03T22:49:17Z", "updated_at": "2020-01-11T19:05:27Z", "closed_at": "2020-01-11T19:05:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "From the docs:\r\n\r\n```py\r\nb = bucket(['a1', 'b1', 'c1', 'a2', 'b2', 'c2', 'b3'], lambda x: x[0])\r\n```\r\n\r\nThe following uses 100% CPU and never returns:\r\n```py\r\nlist(b)\r\n```\r\n\r\nAdditionally, `dict(b)` fails with `dictionary update sequence element #0 has length 0; 2 is required`, leaving no way to inspect the opaque result without prior knowledge of all keys.\r\n\r\nThis occurs in all versions of more-itertools.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/367", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/367/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/367/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/367", "id": 545008657, "node_id": "MDU6SXNzdWU1NDUwMDg2NTc=", "number": 367, "title": "What is the preferred way of getting the version of more-itertools", "user": {"login": "MSeifert04", "id": 14200878, "node_id": "MDQ6VXNlcjE0MjAwODc4", "avatar_url": "https://avatars2.githubusercontent.com/u/14200878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MSeifert04", "html_url": "https://github.com/MSeifert04", "followers_url": "https://api.github.com/users/MSeifert04/followers", "following_url": "https://api.github.com/users/MSeifert04/following{/other_user}", "gists_url": "https://api.github.com/users/MSeifert04/gists{/gist_id}", "starred_url": "https://api.github.com/users/MSeifert04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MSeifert04/subscriptions", "organizations_url": "https://api.github.com/users/MSeifert04/orgs", "repos_url": "https://api.github.com/users/MSeifert04/repos", "events_url": "https://api.github.com/users/MSeifert04/events{/privacy}", "received_events_url": "https://api.github.com/users/MSeifert04/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-03T14:11:16Z", "updated_at": "2020-01-11T19:05:48Z", "closed_at": "2020-01-11T19:05:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A lot of packages provide some kind of variable to get the version of a package. Typically this is a `__version__` of the main module. Is there some equivalent for `more_itertools` or should one rather rely on feature detection for this library?\r\n\r\n```\r\n>>> import more_itertools\r\n>>> more_itertools.__version__\r\nAttributeError: module 'more_itertools' has no attribute '__version__'\r\n\r\n>>> import numpy as np\r\n>>> np.__version__\r\n'1.17.4'\r\n\r\n>>> import pip\r\n>>> pip.__version__\r\n'19.3.1'\r\n```\r\n\r\nIn either case it would be nice if there was some sort of documentation on this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/366", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/366/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/366/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/366", "id": 545006891, "node_id": "MDU6SXNzdWU1NDUwMDY4OTE=", "number": 366, "title": "Partition throws an exception when None is passed in as predicate", "user": {"login": "MSeifert04", "id": 14200878, "node_id": "MDQ6VXNlcjE0MjAwODc4", "avatar_url": "https://avatars2.githubusercontent.com/u/14200878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MSeifert04", "html_url": "https://github.com/MSeifert04", "followers_url": "https://api.github.com/users/MSeifert04/followers", "following_url": "https://api.github.com/users/MSeifert04/following{/other_user}", "gists_url": "https://api.github.com/users/MSeifert04/gists{/gist_id}", "starred_url": "https://api.github.com/users/MSeifert04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MSeifert04/subscriptions", "organizations_url": "https://api.github.com/users/MSeifert04/orgs", "repos_url": "https://api.github.com/users/MSeifert04/repos", "events_url": "https://api.github.com/users/MSeifert04/events{/privacy}", "received_events_url": "https://api.github.com/users/MSeifert04/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-03T14:06:28Z", "updated_at": "2020-01-03T21:10:13Z", "closed_at": "2020-01-03T21:10:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This has changed with #310. Before it worked with `None` as predicate, now it throws an exception:\r\n\r\nVersion 8.0.2:\r\n\r\n```\r\n>>> from more_itertools import partition\r\n>>> f, t = partition(None, [1, 0, 1, 0])\r\n>>> list(f)\r\n...\\lib\\site-packages\\more_itertools\\recipes.py in <genexpr>(.0)\r\n    319     t1, t2 = tee(evaluations)\r\n    320     return (\r\n--> 321         (x for (cond, x) in t1 if not cond),\r\n    322         (x for (cond, x) in t2 if cond),\r\n    323     )\r\n\r\n...\\lib\\site-packages\\more_itertools\\recipes.py in <genexpr>(.0)\r\n    316     \"\"\"\r\n    317     # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\r\n--> 318     evaluations = ((pred(x), x) for x in iterable)\r\n    319     t1, t2 = tee(evaluations)\r\n    320     return (\r\n\r\nTypeError: 'NoneType' object is not callable\r\n```\r\n\r\nVersion 6.0.0\r\n\r\n```\r\n>>> from more_itertools import partition\r\n>>> f, t = partition(None, [1, 0, 1, 0])\r\n>>> list(f)\r\n[0, 0]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/361", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/361/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/361/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/361", "id": 542374812, "node_id": "MDU6SXNzdWU1NDIzNzQ4MTI=", "number": 361, "title": "segment function", "user": {"login": "Marco-Sulla", "id": 13075999, "node_id": "MDQ6VXNlcjEzMDc1OTk5", "avatar_url": "https://avatars1.githubusercontent.com/u/13075999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marco-Sulla", "html_url": "https://github.com/Marco-Sulla", "followers_url": "https://api.github.com/users/Marco-Sulla/followers", "following_url": "https://api.github.com/users/Marco-Sulla/following{/other_user}", "gists_url": "https://api.github.com/users/Marco-Sulla/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marco-Sulla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marco-Sulla/subscriptions", "organizations_url": "https://api.github.com/users/Marco-Sulla/orgs", "repos_url": "https://api.github.com/users/Marco-Sulla/repos", "events_url": "https://api.github.com/users/Marco-Sulla/events{/privacy}", "received_events_url": "https://api.github.com/users/Marco-Sulla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3906326, "node_id": "MDU6TGFiZWwzOTA2MzI2", "url": "https://api.github.com/repos/more-itertools/more-itertools/labels/deferred", "name": "deferred", "color": "ffffff", "default": false, "description": "We're not inclined to fix this issue, but please link to it if the same thing comes up later"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-12-25T18:42:59Z", "updated_at": "2020-05-15T01:18:08Z", "closed_at": "2020-05-15T01:18:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "This segment(iterable, n=1) function splits the iterable in a list of lists. Every sublist must contain as elements slices of the iterable, and must have length n. The list must contain all the possible sublist. Example:\r\n\r\n```python\r\n>>> segment('12345', 3)\r\n[['1', '23', '45'], ['12', '3', '45'], ['12', '34', '5'], ['1', '2', '345'], ['1', '234', '5'], ['123', '4', '5']]\r\n>>> segment((x for x in range(5)), 2)\r\n[[(0, 1), (2, 3, 4)], [(0, 1, 2), (3, 4)]]\r\n```\r\n\r\nSource code:\r\nhttps://mail.python.org/archives/list/python-ideas@python.org/message/KYMYVYHLILBWOSQ4LSVBWON723HJKH3D/\r\n\r\nThe idea was requested here:\r\nhttps://mail.python.org/archives/list/python-ideas@python.org/thread/VYDU3JF2MFFUUHU3XUCIAW3UXJGXZCKD/\r\n\r\nThanks to [Mark Dickinson](https://mail.python.org/archives/list/python-ideas@python.org/message/LLJJIWRGC726Y4OSGIETP3SE55PIQOYT/) for the algorithm.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/359", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/359/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/359/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/359", "id": 541670360, "node_id": "MDU6SXNzdWU1NDE2NzAzNjA=", "number": 359, "title": "Link to documentation at the top of the repository", "user": {"login": "MSeifert04", "id": 14200878, "node_id": "MDQ6VXNlcjE0MjAwODc4", "avatar_url": "https://avatars2.githubusercontent.com/u/14200878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MSeifert04", "html_url": "https://github.com/MSeifert04", "followers_url": "https://api.github.com/users/MSeifert04/followers", "following_url": "https://api.github.com/users/MSeifert04/following{/other_user}", "gists_url": "https://api.github.com/users/MSeifert04/gists{/gist_id}", "starred_url": "https://api.github.com/users/MSeifert04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MSeifert04/subscriptions", "organizations_url": "https://api.github.com/users/MSeifert04/orgs", "repos_url": "https://api.github.com/users/MSeifert04/repos", "events_url": "https://api.github.com/users/MSeifert04/events{/privacy}", "received_events_url": "https://api.github.com/users/MSeifert04/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-23T09:41:30Z", "updated_at": "2020-02-25T21:32:52Z", "closed_at": "2020-02-25T21:32:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "GitHub allows adding a link to the top of the repository \"main page\". It can be set when \"edit\"ing the description.\r\n\r\n![Unbenannt](https://user-images.githubusercontent.com/14200878/71349929-6b00c980-2570-11ea-8589-8a1f360f5dcf.png)\r\n\r\nI would find it helpful if there were a link to https://more-itertools.readthedocs.io/en/stable/ (or one of the shorter links).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/358", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/358/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/358/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/358", "id": 540246512, "node_id": "MDU6SXNzdWU1NDAyNDY1MTI=", "number": 358, "title": "Link \"Edit on GitHub\" in documentation page is down", "user": {"login": "vezeli", "id": 37907135, "node_id": "MDQ6VXNlcjM3OTA3MTM1", "avatar_url": "https://avatars2.githubusercontent.com/u/37907135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vezeli", "html_url": "https://github.com/vezeli", "followers_url": "https://api.github.com/users/vezeli/followers", "following_url": "https://api.github.com/users/vezeli/following{/other_user}", "gists_url": "https://api.github.com/users/vezeli/gists{/gist_id}", "starred_url": "https://api.github.com/users/vezeli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vezeli/subscriptions", "organizations_url": "https://api.github.com/users/vezeli/orgs", "repos_url": "https://api.github.com/users/vezeli/repos", "events_url": "https://api.github.com/users/vezeli/events{/privacy}", "received_events_url": "https://api.github.com/users/vezeli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-19T11:12:12Z", "updated_at": "2020-02-25T21:37:39Z", "closed_at": "2020-02-25T21:37:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to go from readthedocs.io page to GitHub page and I get 404. Maybe you want to update your configuration files for docs.\r\n\r\nThanks for maintaining the project. I find it very useful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/357", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/357/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/357/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/357", "id": 538702355, "node_id": "MDU6SXNzdWU1Mzg3MDIzNTU=", "number": 357, "title": "Skipping the first n elements of an iterator", "user": {"login": "balshetzer", "id": 1846726, "node_id": "MDQ6VXNlcjE4NDY3MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1846726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/balshetzer", "html_url": "https://github.com/balshetzer", "followers_url": "https://api.github.com/users/balshetzer/followers", "following_url": "https://api.github.com/users/balshetzer/following{/other_user}", "gists_url": "https://api.github.com/users/balshetzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/balshetzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/balshetzer/subscriptions", "organizations_url": "https://api.github.com/users/balshetzer/orgs", "repos_url": "https://api.github.com/users/balshetzer/repos", "events_url": "https://api.github.com/users/balshetzer/events{/privacy}", "received_events_url": "https://api.github.com/users/balshetzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-16T22:17:53Z", "updated_at": "2019-12-19T18:08:31Z", "closed_at": "2019-12-19T18:08:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I sometimes need to skip the first n elements of an iterator. I can do that with islice(it, n, None). I could do it with consume(it, n). I think the consume version is more readable but I can't use it inline because consume doesn't return the iterator.\r\n\r\nWhat do you think of having consume return the iterator? \r\n\r\nOtherwise, would you support a skip(it, n) recipe? It would just map to islice(it, n, None).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/355", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/355/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/355/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/355", "id": 537131376, "node_id": "MDU6SXNzdWU1MzcxMzEzNzY=", "number": 355, "title": "SyntaxError: invalid syntax - yield from iterable", "user": {"login": "claudiamaximus", "id": 55325877, "node_id": "MDQ6VXNlcjU1MzI1ODc3", "avatar_url": "https://avatars0.githubusercontent.com/u/55325877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claudiamaximus", "html_url": "https://github.com/claudiamaximus", "followers_url": "https://api.github.com/users/claudiamaximus/followers", "following_url": "https://api.github.com/users/claudiamaximus/following{/other_user}", "gists_url": "https://api.github.com/users/claudiamaximus/gists{/gist_id}", "starred_url": "https://api.github.com/users/claudiamaximus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claudiamaximus/subscriptions", "organizations_url": "https://api.github.com/users/claudiamaximus/orgs", "repos_url": "https://api.github.com/users/claudiamaximus/repos", "events_url": "https://api.github.com/users/claudiamaximus/events{/privacy}", "received_events_url": "https://api.github.com/users/claudiamaximus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-12T18:02:44Z", "updated_at": "2020-06-10T14:48:14Z", "closed_at": "2019-12-17T16:59:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "more-itertools version - 8.0.2\r\npython version - 3.6.8\r\n\r\n<details><summary>requirements.txt</summary>\r\n\r\n```\r\nalembic==1.3.1\r\namqp==2.5.2\r\nbilliard==3.6.1.0\r\nblinker==1.4\r\ncelery==4.3.0\r\ncertifi==2019.6.16\r\nchardet==3.0.4\r\nClick==7.0\r\ncolorama==0.4.1\r\nFlask==1.1.1\r\nFlask-Mail==0.9.1\r\nFlask-Migrate==2.5.2\r\nFlask-SQLAlchemy==2.4.1\r\nidna==2.8\r\nimportlib-metadata==1.3.0\r\nitsdangerous==1.1.0\r\nJinja2==2.10.1\r\nkombu==4.6.7\r\nMako==1.1.0\r\nMarkupSafe==1.1.1\r\nmore-itertools==8.0.2\r\npymaging==0.1\r\npymaging-png==0.1\r\npython-dateutil==2.8.1\r\npython-editor==1.0.4\r\npytz==2019.3\r\nqrcode==6.1\r\nrazorpay==1.2.0\r\nrequests==2.22.0\r\nsix==1.12.0\r\nSQLAlchemy==1.3.11\r\nurllib3==1.25.3\r\nvine==1.3.0\r\nWerkzeug==0.15.5\r\nzipp==0.6.0\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>__init__.py</summary>\r\n\r\n```python\r\n...\r\ncelery = Celery(app.name, broker=app.config['CELERY_BROKER_URL'])\r\ncelery.conf.update(app.config)\r\n...\r\n```\r\n\r\n</details>\r\n\r\n\r\n<details><summary>views/home.py</summary>\r\n\r\n```python\r\n...\r\nr = send_mail(email).delay(10, 20)\r\n...\r\n@celery.task\r\ndef send_mail(email):\r\n    # email stuff\r\n```\r\n\r\n</details>\r\n\r\nWhen I run the app, I get the following traceback!\r\n\r\n```\r\n[838493]  mod_wsgi (pid=12557): Exception occurred processing WSGI script '/var/www/myapp.com/public_html/myapp.wsgi'.\r\n[838556]  Traceback (most recent call last):\r\n[838580]    File \"/var/www/myapp.com/public_html/myapp.wsgi\", line 4, in <module>\r\n[838617]      from myapp import app as application\r\n[838626]    File \"/var/www/myapp.com/public_html/myapp/__init__.py\", line 13, in <module>\r\n[838642]      from celery import Celery\r\n[838650]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/celery/local.py\", line 509, in __getattr__\r\n[838665]      module = __import__(self._object_origins[name], None, None, [name])\r\n[838672]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/celery/app/__init__.py\", line 5, in <module>\r\n[838686]      from celery import _state\r\n[838693]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/celery/_state.py\", line 17, in <module>\r\n[838705]      from celery.utils.threads import LocalStack\r\n[838712]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/celery/utils/__init__.py\", line 8, in <module>\r\n[838726]      from .functional import memoize  # noqa\r\n[838745]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/celery/utils/functional.py\", line 10, in <module>\r\n[838759]      from kombu.utils.functional import (LRUCache, dictfilter, is_list, lazy,\r\n[838766]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/kombu/utils/__init__.py\", line 5, in <module>\r\n[838779]      from .compat import fileno, maybe_fileno, nested, register_after_fork\r\n[838786]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/kombu/utils/compat.py\", line 14, in <module>\r\n[838798]      import importlib_metadata\r\n[838805]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/importlib_metadata/__init__.py\", line 9, in <module>\r\n[838818]      import zipp\r\n[838825]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/zipp.py\", line 12, in <module>\r\n[838844]      import more_itertools\r\n[838868]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/more_itertools/__init__.py\", line 1, in <module>\r\n[838893]      from .more import *  # noqa\r\n[838939]    File \"/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/more_itertools/more.py\", line 460\r\n[838946]      yield from iterable\r\n[838950]               ^\r\n[838955]  SyntaxError: invalid syntax\r\n```\r\n\r\n<details><summary>WSGI configuration</summary>\r\n\r\n```\r\nWSGIDaemonProcess myapp user=myuser group=sudo threads=5 python-path=/var/www/myapp.com:/var/www/myapp.com/public_html/venv/lib/python3.6/site-packages/\r\n\r\nWSGIScriptAlias / /var/www/myapp.com/public_html/myapp.wsgi\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>sys.version</summary>\r\n\r\n`3.6.8 (default, Jan 14 2019, 11:02:34) [GCC 8.0.1 20180414 (experimental) [trunk revision 259383]]`\r\n\r\n</details>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/354", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/354/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/354/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/354", "id": 537123391, "node_id": "MDU6SXNzdWU1MzcxMjMzOTE=", "number": 354, "title": "SyntaxError: invalid syntax - \"yield from iterable\"", "user": {"login": "AndrewPaglusch", "id": 10167257, "node_id": "MDQ6VXNlcjEwMTY3MjU3", "avatar_url": "https://avatars0.githubusercontent.com/u/10167257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndrewPaglusch", "html_url": "https://github.com/AndrewPaglusch", "followers_url": "https://api.github.com/users/AndrewPaglusch/followers", "following_url": "https://api.github.com/users/AndrewPaglusch/following{/other_user}", "gists_url": "https://api.github.com/users/AndrewPaglusch/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndrewPaglusch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndrewPaglusch/subscriptions", "organizations_url": "https://api.github.com/users/AndrewPaglusch/orgs", "repos_url": "https://api.github.com/users/AndrewPaglusch/repos", "events_url": "https://api.github.com/users/AndrewPaglusch/events{/privacy}", "received_events_url": "https://api.github.com/users/AndrewPaglusch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-12T17:45:01Z", "updated_at": "2020-06-10T14:43:22Z", "closed_at": "2019-12-12T17:47:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hopefully this is enough information. Please let me know if any more can be provided that would make troubleshooting this easier. My guess is that this has something to do with commit 5be161892cf05ea210d927bd585409014169740d.\r\n\r\n<details><summary>Details</summary>\r\n\r\nUp-to-date CentOS 7\r\n```\r\n[root@awxtest awxcompose]# cat /etc/redhat-release\r\nCentOS Linux release 7.7.1908 (Core)\r\n```\r\n\r\n```\r\n[root@awxtest awxcompose]# uname -a\r\nLinux awxtest 3.10.0-1062.9.1.el7.x86_64 #1 SMP Fri Dec 6 15:49:49 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\nUp-to-date more-itertools\r\n```\r\n[root@awxtest awxcompose]# pip list 2>&1 | grep more-itertools\r\nmore-itertools                     8.0.2\r\n```\r\n\r\n```\r\n[root@awxtest awxcompose]# pip install more-itertools -U 2>/dev/null\r\nRequirement already up-to-date: more-itertools in /usr/lib/python2.7/site-packages (8.0.2)\r\n```\r\n\r\nUp-to-date Python 2\r\n```\r\n[root@awxtest awxcompose]# python -V\r\nPython 2.7.5\r\n```\r\n\r\n```\r\n[root@awxtest awxcompose]# python -c \"import more_itertools\"\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/site-packages/more_itertools/__init__.py\", line 1, in <module>\r\n    from .more import *  # noqa\r\n  File \"/usr/lib/python2.7/site-packages/more_itertools/more.py\", line 460\r\n    yield from iterable\r\n             ^\r\nSyntaxError: invalid syntax\r\n```\r\n\r\n</details>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/353", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/353/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/353/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/353", "id": 535776590, "node_id": "MDU6SXNzdWU1MzU3NzY1OTA=", "number": 353, "title": "Suggestion: Add random generators.", "user": {"login": "Jabbey92", "id": 32350542, "node_id": "MDQ6VXNlcjMyMzUwNTQy", "avatar_url": "https://avatars0.githubusercontent.com/u/32350542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jabbey92", "html_url": "https://github.com/Jabbey92", "followers_url": "https://api.github.com/users/Jabbey92/followers", "following_url": "https://api.github.com/users/Jabbey92/following{/other_user}", "gists_url": "https://api.github.com/users/Jabbey92/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jabbey92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jabbey92/subscriptions", "organizations_url": "https://api.github.com/users/Jabbey92/orgs", "repos_url": "https://api.github.com/users/Jabbey92/repos", "events_url": "https://api.github.com/users/Jabbey92/events{/privacy}", "received_events_url": "https://api.github.com/users/Jabbey92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-10T14:45:22Z", "updated_at": "2019-12-19T01:57:46Z", "closed_at": "2019-12-19T01:57:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For the instances where a stream of random numbers/floating point values is needed I suggest adding ones such as below. _(Essentially efficient wrappers around the random library)_ thus replacing the need to manually create a new random number while iterating over something else. For Example:\r\n\r\n    for element in iterable:\r\n        rand = random.random()\r\n        ...\r\n\r\nBe replaced with:\r\n\r\n    for element, rand in zip(iterable, randoms()):\r\n        ...\r\n\r\nI believe this is the most efficient way to do such a thing, and I also figured shadowing `random.random` and `random.randint` would be easy enough to make clear.\r\n\r\n    from random import randint, random\r\n    from functools import partial\r\n\r\n    _marker = object()\r\n \r\n    def randoms():\r\n        \"\"\"Yield an infinite stream of random floating point numbers\r\n        in the range ``[0.0, 1.0]``.\r\n    \r\n        This function is essentially a wrapper for :func:`random.random`.\r\n        \"\"\"\r\n        return iter(random, _marker)\r\n\r\n    def randints(a, b):\r\n        \"\"\"Yield an infinite stream of random random integers _N_ such \r\n        that ``a <= N <= b``.\r\n    \r\n        This function is essentially a wrapper for :func:`random.randint`.\r\n        \"\"\"\r\n        return iter(partial(randint, a, b), _marker)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/351", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/351/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/351/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/351", "id": 531933533, "node_id": "MDU6SXNzdWU1MzE5MzM1MzM=", "number": 351, "title": "New function indicating whether the current element is first or last", "user": {"login": "arturbalabanov", "id": 3062003, "node_id": "MDQ6VXNlcjMwNjIwMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3062003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arturbalabanov", "html_url": "https://github.com/arturbalabanov", "followers_url": "https://api.github.com/users/arturbalabanov/followers", "following_url": "https://api.github.com/users/arturbalabanov/following{/other_user}", "gists_url": "https://api.github.com/users/arturbalabanov/gists{/gist_id}", "starred_url": "https://api.github.com/users/arturbalabanov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arturbalabanov/subscriptions", "organizations_url": "https://api.github.com/users/arturbalabanov/orgs", "repos_url": "https://api.github.com/users/arturbalabanov/repos", "events_url": "https://api.github.com/users/arturbalabanov/events{/privacy}", "received_events_url": "https://api.github.com/users/arturbalabanov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3906326, "node_id": "MDU6TGFiZWwzOTA2MzI2", "url": "https://api.github.com/repos/more-itertools/more-itertools/labels/deferred", "name": "deferred", "color": "ffffff", "default": false, "description": "We're not inclined to fix this issue, but please link to it if the same thing comes up later"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-03T11:57:24Z", "updated_at": "2020-05-15T01:17:38Z", "closed_at": "2020-05-15T01:17:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Quite often when iterating over an iterable, I need to know whether the current element is the first one or I've reached the last element. The check for the first element can be performed using `enumerate`, however the check for the last one is not so trivial.\r\n\r\nIf we're working with a list (or any other iterable with with a known and finite length), this can be achieved by using the `len` function, which, albeit on the uglier side, works fine:\r\n\r\n```python\r\nvalues = [1, 2, 3]\r\nfor idx, value in enumerate(values):\r\n    is_first = idx == 0\r\n    is_last = idx == len(values) - 1\r\n```\r\n\r\nHowever, the same method cannot be used for iterables which don't define `__len__` and the approach that needs to be used then requires more setup and being extra careful with how the iterator is used. This results in harder to read code (due to a large amount of lower-level logic) and, depending on how often this pattern is used, code repetition.\r\n\r\nSo, my proposal is to add a new function to this package, which returns each element of the iterable along with two booleans indicating whether it's the first and last element. Here's an example implementation (I assume some improvements need to be done to make it work with all data structures and/or some edge cases I haven't thought of yet):\r\n\r\n```python\r\ndef first_last_iter(iterable):\r\n    \"\"\"\r\n    Iterate over an interable returning each element along with whether that\r\n    element is first or last in the sequence.\r\n\r\n    Example:\r\n\r\n    >>> for is_first, is_last, value in first_last_iter([1, 2, 3]):\r\n    ...     print(is_first, is_last, value)\r\n    ...\r\n    True False 1\r\n    False False 2\r\n    False True 3\r\n    \"\"\"\r\n\r\n    iterable = iter(iterable)\r\n    following = next(iterable)\r\n\r\n    is_first = True\r\n    while True:\r\n        value = following\r\n\r\n        try:\r\n            following = next(iterable)\r\n            yield is_first, False, value\r\n        except StopIteration:\r\n            yield is_first, True, value\r\n            raise\r\n\r\n        is_first = False\r\n```\r\n\r\nThe main drawback of this implementation is that when iterating, the next element needs to be retrieved in order to determine whether it exists in the iterable. If the iterable is an expensive generator, this may be a problem. However, my counterpoints are that:\r\n\r\n1. I doubt that such a scenario occurs often enough\r\n2. I don't think the problem has a big enough impact to justify this function not being used\r\n3. Even if 1) and 2) are false for a very specific usecase, then this function can be simply not used there\r\n\r\nThat being said, any feedback for this would be more than helpful!\r\n\r\nPersonally, I find this scenario occurring often enough to justify adding a function to `more-itertools`, so I don't need to re-implement it for every project I'm working on. However, I'm still opening this issue, as opposed to directly making a PR, to gather feedback and to understand whether the problem it's solving occurs often enough in other people's projects. Of course, if people are happy with this idea, I'm ready to make the patch myself and open a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/349", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/349/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/349/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/349", "id": 530975583, "node_id": "MDU6SXNzdWU1MzA5NzU1ODM=", "number": 349, "title": "mypy annotations don't work with root package", "user": {"login": "keisheiled", "id": 58230987, "node_id": "MDQ6VXNlcjU4MjMwOTg3", "avatar_url": "https://avatars3.githubusercontent.com/u/58230987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keisheiled", "html_url": "https://github.com/keisheiled", "followers_url": "https://api.github.com/users/keisheiled/followers", "following_url": "https://api.github.com/users/keisheiled/following{/other_user}", "gists_url": "https://api.github.com/users/keisheiled/gists{/gist_id}", "starred_url": "https://api.github.com/users/keisheiled/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keisheiled/subscriptions", "organizations_url": "https://api.github.com/users/keisheiled/orgs", "repos_url": "https://api.github.com/users/keisheiled/repos", "events_url": "https://api.github.com/users/keisheiled/events{/privacy}", "received_events_url": "https://api.github.com/users/keisheiled/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-02T08:42:35Z", "updated_at": "2019-12-03T15:00:41Z", "closed_at": "2019-12-03T15:00:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/344", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/344/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/344/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/344", "id": 527761300, "node_id": "MDU6SXNzdWU1Mjc3NjEzMDA=", "number": 344, "title": "Add reservoir sampling?", "user": {"login": "tommyod", "id": 10076072, "node_id": "MDQ6VXNlcjEwMDc2MDcy", "avatar_url": "https://avatars1.githubusercontent.com/u/10076072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyod", "html_url": "https://github.com/tommyod", "followers_url": "https://api.github.com/users/tommyod/followers", "following_url": "https://api.github.com/users/tommyod/following{/other_user}", "gists_url": "https://api.github.com/users/tommyod/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyod/subscriptions", "organizations_url": "https://api.github.com/users/tommyod/orgs", "repos_url": "https://api.github.com/users/tommyod/repos", "events_url": "https://api.github.com/users/tommyod/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-24T21:40:44Z", "updated_at": "2020-01-01T03:45:04Z", "closed_at": "2020-01-01T03:45:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi! Thanks for the great library! I have a proposal:\r\n\r\n- *Reservoir sampling* algorithms sample from iterables, see [wikipedia](https://en.wikipedia.org/wiki/Reservoir_sampling).\r\n- They can sample from iterables of unknown/infinite length.\r\n\r\nMost Python implementations I've found are bad and/or wrong. I have some implementations of reservoir sampling with/without repetitions laying around.\r\n\r\nDoes this fit within scope of more_itertools? Would you accept a PR for algorithms like these? They are not the most commonly used algorithms, but they are used, and it would be nice to see a proper implementation in a popular Python library for working with iterables - so naturally I thought of more_itertools.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/342", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/342/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/342/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/342", "id": 523193393, "node_id": "MDU6SXNzdWU1MjMxOTMzOTM=", "number": 342, "title": "Improve difference", "user": {"login": "Jabbey92", "id": 32350542, "node_id": "MDQ6VXNlcjMyMzUwNTQy", "avatar_url": "https://avatars0.githubusercontent.com/u/32350542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jabbey92", "html_url": "https://github.com/Jabbey92", "followers_url": "https://api.github.com/users/Jabbey92/followers", "following_url": "https://api.github.com/users/Jabbey92/following{/other_user}", "gists_url": "https://api.github.com/users/Jabbey92/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jabbey92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jabbey92/subscriptions", "organizations_url": "https://api.github.com/users/Jabbey92/orgs", "repos_url": "https://api.github.com/users/Jabbey92/repos", "events_url": "https://api.github.com/users/Jabbey92/events{/privacy}", "received_events_url": "https://api.github.com/users/Jabbey92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-15T01:01:20Z", "updated_at": "2019-11-22T20:27:53Z", "closed_at": "2019-11-22T20:27:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was reading the source for `difference` and it seems using `starmap` and reversing the arguments to the `zip` would be an improvement over the current `lambda`.\r\n\r\n**Consideration**\r\n\r\n    def difference(iterable, func=sub, *, initial=None):\r\n        a, b = tee(iterable)\r\n        try:\r\n            first = [next(b)]\r\n        except StopIteration:\r\n            return iter([])\r\n    \r\n        if initial is not None:\r\n            first = []\r\n            \r\n        return chain(first, starmap(func, zip(b,a)))\r\n\r\nIn my tests I see no difference in the output as all the lambda was doing was reversing the arguments which is unnecessary using this approach.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/324", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/324/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/324/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/324", "id": 514065382, "node_id": "MDU6SXNzdWU1MTQwNjUzODI=", "number": 324, "title": "Stub files not being installed", "user": {"login": "fmagin", "id": 8415354, "node_id": "MDQ6VXNlcjg0MTUzNTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/8415354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmagin", "html_url": "https://github.com/fmagin", "followers_url": "https://api.github.com/users/fmagin/followers", "following_url": "https://api.github.com/users/fmagin/following{/other_user}", "gists_url": "https://api.github.com/users/fmagin/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmagin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmagin/subscriptions", "organizations_url": "https://api.github.com/users/fmagin/orgs", "repos_url": "https://api.github.com/users/fmagin/repos", "events_url": "https://api.github.com/users/fmagin/events{/privacy}", "received_events_url": "https://api.github.com/users/fmagin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-29T16:44:35Z", "updated_at": "2019-10-30T11:12:50Z", "closed_at": "2019-10-30T11:12:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just tried installing master to use the type annotations from https://github.com/erikrose/more-itertools/pull/309, but they are probably not being installed because the standard mechanism that gathers files to install doesn't include `.pyi` files.\r\n\r\nTo reproduce:\r\n```bash\r\npip install --upgrade git+https://github.com/erikrose/more-itertools.git@583367c # current master at the time of the issue\r\nls $VIRTUAL_ENV/lib/python3.7/site-packages/more_itertools/\r\n```\r\nThis isn't hard to fix, for a pure stub package I have [code that deals with this](https://github.com/fmagin/networkx-stubs/blob/master/setup.py#L14-L23) which according to the typing gitter is the best way to do it currently. Because this package should obviously include the regular `.py` files too some extra work is required which should be fairly trivial though. I might be able to look into this again later today if someone else wasn't quicker. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/315", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/315/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/315/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/315/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/315", "id": 502743586, "node_id": "MDU6SXNzdWU1MDI3NDM1ODY=", "number": 315, "title": "Add not_none", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-04T16:58:24Z", "updated_at": "2019-10-07T17:37:06Z", "closed_at": "2019-10-07T17:36:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be convenient to have a function `non_none` which takes an `Iterator`/`Iterable` and returns another which skips all elements which are `None`, similar to e.g. Kotlin's [`filterNotNull`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/filter-not-null.html). \r\n\r\nThis can already be achieved by:\r\n```python\r\nfilter(lambda x: x is not None, sequence)\r\n```\r\n\r\nor by a generator expression like\r\n\r\n```python\r\n(x for x in seq if x is not None)\r\n```\r\n\r\nbut those are bulky and hard to read when composed with other sequence operations, such as:\r\n\r\n```python\r\ndef extract_if_possible(x) -> Optional[T]:\r\n   ...\r\n\r\nextracted_items = filter(lambda x: x is not None, map(seq, extract_if_possible))\r\nextracted_items = (x for x in map(seq, extract_if_possible) if x is not None)\r\nextracted_items = non_none(map(seq, extract_if_possible))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/314", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/314/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/314/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/314", "id": 502714842, "node_id": "MDU6SXNzdWU1MDI3MTQ4NDI=", "number": 314, "title": "Clarify `take`'s behavior when the iterable has fewer than the number of requested items", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-04T15:53:04Z", "updated_at": "2019-10-05T18:34:47Z", "closed_at": "2019-10-05T18:34:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[`take`'s docstring](https://github.com/erikrose/more-itertools/blob/57c100e6b652505869f8764b428d8dee41b9f9c9/more_itertools/recipes.py#L58) is currently:\r\n\r\n```\r\n    \"\"\"Return first *n* items of the iterable as a list.\r\n        >>> take(3, range(10))\r\n        [0, 1, 2]\r\n        >>> take(5, range(3))\r\n        [0, 1, 2]\r\n    Effectively a short replacement for ``next`` based iterator consumption\r\n    when you want more than one item, but less than the whole iterator.\r\n    \"\"\"\r\n```\r\n\r\nIts behavior when more items are requested than the iterable can provide is implicit in the second usage example, but it would be clearer if it were made explicit (the user might expect it would instead throw an exception).  For example,\r\n\r\n```\r\nReturn first *n* items of the iterable as a list.\r\nIf the iterable provides fewer than *n* items, all provided items are returned.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/312", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/312/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/312/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/312", "id": 501082030, "node_id": "MDU6SXNzdWU1MDEwODIwMzA=", "number": 312, "title": "More informative exception message for `only`", "user": {"login": "gabbard", "id": 7139661, "node_id": "MDQ6VXNlcjcxMzk2NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7139661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabbard", "html_url": "https://github.com/gabbard", "followers_url": "https://api.github.com/users/gabbard/followers", "following_url": "https://api.github.com/users/gabbard/following{/other_user}", "gists_url": "https://api.github.com/users/gabbard/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabbard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabbard/subscriptions", "organizations_url": "https://api.github.com/users/gabbard/orgs", "repos_url": "https://api.github.com/users/gabbard/repos", "events_url": "https://api.github.com/users/gabbard/events{/privacy}", "received_events_url": "https://api.github.com/users/gabbard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-01T18:53:33Z", "updated_at": "2019-10-04T13:41:56Z", "closed_at": "2019-10-04T13:41:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Our team is thinking of replacing our use of some internal utility methods with `more-itertools`. Something we would miss, though, is that in some cases our methods give helpful debugging information. \r\n\r\nFor example (as noted by my colleague @berquist ), compare [`get_only`](https://github.com/isi-vista/vistautils/blob/7eb87c06d3dc31d8c29f43d932ef6b834500c3f2/vistautils/collection_utils.py#L8) to [`only`](https://github.com/erikrose/more-itertools/blob/111d6deb8080040f8ec28db32eeb44b61238d860/more_itertools/more.py#L2523):\r\n\r\n```\r\nx = [1, 2, 3]\r\nget_only(x)\r\nValueError(\"Expected one item in iterable but got multiple: [1, 2, 3]\")\r\nonly(x)\r\nValueError(\"too many items in iterable (expected 1)\")\r\n```\r\n\r\nThe extra information provided by the former is often enough to determine the fix for a bug simply by reading the exception message.\r\n\r\nThe downside of `get_only`'s approach is that it can produce large error messages for collections with large, complex objects with bulky `__repr__`s. (collections with many elements are not a problem because we limit the number of elements we print).    In our case at least, the trade-off seems worthwhile.\r\n\r\nIs adding a more informative message along these minds something that would be useful to `more_itertools`?  (another option: `only` currently takes an argument `too_long` which is `raise`d on error if specified.  We could allow making `too_long` a `Callable` which is called to generate the exception on failure).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/311", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/311/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/311/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/311", "id": 500702716, "node_id": "MDU6SXNzdWU1MDA3MDI3MTY=", "number": 311, "title": "Optimize partition for the case where the predicate is expensive", "user": {"login": "stevecj", "id": 388671, "node_id": "MDQ6VXNlcjM4ODY3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/388671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevecj", "html_url": "https://github.com/stevecj", "followers_url": "https://api.github.com/users/stevecj/followers", "following_url": "https://api.github.com/users/stevecj/following{/other_user}", "gists_url": "https://api.github.com/users/stevecj/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevecj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevecj/subscriptions", "organizations_url": "https://api.github.com/users/stevecj/orgs", "repos_url": "https://api.github.com/users/stevecj/repos", "events_url": "https://api.github.com/users/stevecj/events{/privacy}", "received_events_url": "https://api.github.com/users/stevecj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-01T06:55:49Z", "updated_at": "2019-10-01T13:14:52Z", "closed_at": "2019-10-01T13:14:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The partition forks the given iterable using `tee` filters each of the results on given predicate. Assuming an equal number of items are evaluated on each fork, this results in the predicate being evaluated twice for each item from the originally given iterable.\r\n\r\nIf the predicate is expensive (and I have encountered this situation in production code) then `partition` will take around twice as much processing time as necessary.\r\n\r\nI have made https://github.com/erikrose/more-itertools/pull/310 as a proposed improvement for this case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/307", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/307/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/307/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/307/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/307", "id": 486748773, "node_id": "MDU6SXNzdWU0ODY3NDg3NzM=", "number": 307, "title": "Problematic combination of `consecutive_groups` and `last`", "user": {"login": "kriomant", "id": 494406, "node_id": "MDQ6VXNlcjQ5NDQwNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/494406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kriomant", "html_url": "https://github.com/kriomant", "followers_url": "https://api.github.com/users/kriomant/followers", "following_url": "https://api.github.com/users/kriomant/following{/other_user}", "gists_url": "https://api.github.com/users/kriomant/gists{/gist_id}", "starred_url": "https://api.github.com/users/kriomant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kriomant/subscriptions", "organizations_url": "https://api.github.com/users/kriomant/orgs", "repos_url": "https://api.github.com/users/kriomant/repos", "events_url": "https://api.github.com/users/kriomant/events{/privacy}", "received_events_url": "https://api.github.com/users/kriomant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-29T05:40:44Z", "updated_at": "2019-08-30T11:27:09Z", "closed_at": "2019-08-30T11:27:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>>> from more_itertools import consecutive_groups, last\r\n>>> list(map(list, consecutive_groups([1,2,10,11])))\r\n[[1, 2], [10, 11]]\r\n>>> list(last(consecutive_groups([1,2,10,11])))\r\n[11]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/304", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/304/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/304/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/304", "id": 474506418, "node_id": "MDU6SXNzdWU0NzQ1MDY0MTg=", "number": 304, "title": "split_before confuse me", "user": {"login": "Elune0syh", "id": 18223326, "node_id": "MDQ6VXNlcjE4MjIzMzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/18223326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Elune0syh", "html_url": "https://github.com/Elune0syh", "followers_url": "https://api.github.com/users/Elune0syh/followers", "following_url": "https://api.github.com/users/Elune0syh/following{/other_user}", "gists_url": "https://api.github.com/users/Elune0syh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Elune0syh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Elune0syh/subscriptions", "organizations_url": "https://api.github.com/users/Elune0syh/orgs", "repos_url": "https://api.github.com/users/Elune0syh/repos", "events_url": "https://api.github.com/users/Elune0syh/events{/privacy}", "received_events_url": "https://api.github.com/users/Elune0syh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-30T10:34:11Z", "updated_at": "2020-03-12T11:19:51Z", "closed_at": "2019-08-01T09:22:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "[The docs says `split_before`](https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.split_before)\r\n> Yield lists of items from iterable, where each list starts with an item where callable pred returns True\r\n\r\nBut why below returns\r\n```\r\nIn [3]: list(split_before(range(1, 10), lambda n: n % 3 == 0))\r\nOut[3]: [[1, 2], [3, 4, 5], [6, 7, 8], [9]]\r\n```\r\nRather than returns\r\n```\r\nIn [3]: list(split_before(range(1, 10), lambda n: n % 3 == 0))\r\nOut[3]: [[3, 4, 5], [6, 7, 8], [9]]\r\n```\r\n\r\nWhat i`m got wrong ?  Thanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/302", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/302/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/302/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/302", "id": 473724871, "node_id": "MDU6SXNzdWU0NzM3MjQ4NzE=", "number": 302, "title": "`split_when`", "user": {"login": "jferard", "id": 10564095, "node_id": "MDQ6VXNlcjEwNTY0MDk1", "avatar_url": "https://avatars3.githubusercontent.com/u/10564095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jferard", "html_url": "https://github.com/jferard", "followers_url": "https://api.github.com/users/jferard/followers", "following_url": "https://api.github.com/users/jferard/following{/other_user}", "gists_url": "https://api.github.com/users/jferard/gists{/gist_id}", "starred_url": "https://api.github.com/users/jferard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jferard/subscriptions", "organizations_url": "https://api.github.com/users/jferard/orgs", "repos_url": "https://api.github.com/users/jferard/repos", "events_url": "https://api.github.com/users/jferard/events{/privacy}", "received_events_url": "https://api.github.com/users/jferard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-28T09:33:53Z", "updated_at": "2019-08-01T02:09:44Z", "closed_at": "2019-08-01T02:09:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We have three useful functions: `more_itertools.split_at(iterable, pred)`, `more_itertools.split_before(iterable, pred)` and `more_itertools.split_after(iterable, pred)` but none of them helps for a question like [this one](https://stackoverflow.com/questions/57236885/distinct-group-of-integer):\r\n\r\n> Given an array of integers, I want to determine the number of distinct groups of integers wherein the values ascend.\r\n\r\nTo answer this question, you have to compare two consecutive values. You can play with `zip`, but its very cumbersome. A `split_when` function taking an iterable and a function of two consecutive element is easy to code, and has the following result:\r\n\r\n    >>> myList = [1, 2, 3, 4, 3, 2, 2, 3, 1, 2, 1, 4, 2]\r\n    >>> list(split_when(myList, lambda x, y: x > y))\r\n    [[1, 2, 3, 4], [3], [2, 2, 3], [1, 2], [1, 4], [2]]\r\n\r\nObviously, you have an equivalent to `split_before` and `split_after`:\r\n\r\n    >>> list(split_when('OneTwo', lambda _, s: s.isupper()))\r\n    [['O', 'n', 'e'], ['T', 'w', 'o']]\r\n\r\n    >>> list(split_when('one1two2', lambda s, _: s.isdigit()))\r\n    [['o', 'n', 'e', '1'], ['t', 'w', 'o', '2']]\r\n\r\n(I don't think a replacement of these functions implementations is a good idea though).\r\n\r\nAre you interested in a PR?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/300", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/300/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/300/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/300", "id": 473034141, "node_id": "MDU6SXNzdWU0NzMwMzQxNDE=", "number": 300, "title": "`set_partitions` speed", "user": {"login": "jferard", "id": 10564095, "node_id": "MDQ6VXNlcjEwNTY0MDk1", "avatar_url": "https://avatars3.githubusercontent.com/u/10564095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jferard", "html_url": "https://github.com/jferard", "followers_url": "https://api.github.com/users/jferard/followers", "following_url": "https://api.github.com/users/jferard/following{/other_user}", "gists_url": "https://api.github.com/users/jferard/gists{/gist_id}", "starred_url": "https://api.github.com/users/jferard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jferard/subscriptions", "organizations_url": "https://api.github.com/users/jferard/orgs", "repos_url": "https://api.github.com/users/jferard/repos", "events_url": "https://api.github.com/users/jferard/events{/privacy}", "received_events_url": "https://api.github.com/users/jferard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-25T19:32:14Z", "updated_at": "2019-08-01T02:21:58Z", "closed_at": "2019-08-01T02:21:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I recently needed to get all partitions of a list in `k` groups (to answer [this question](https://stackoverflow.com/questions/56987469/how-to-find-anagrams-using-3-words-in-a-text-having-a-list-of-words/57171036#57171036)). I didn't find `set_partitions` in my installed version of `more_itertools`, hence I implemented [a simple and straightforward version](https://stackoverflow.com/a/57171036/6914441). Here's a slightly modified version:\r\n\r\n    def set_partitions2(S, k):\r\n        S = list(S)\r\n        if len(S) < k or k <= 0:\r\n            raise ValueError(\"Can't partition {} in {} elements\".format(S, k))\r\n        elif k == 1:\r\n            yield [S]\r\n        elif len(S) == k:\r\n            yield list(map(list, S))\r\n        else:\r\n            e, *M = S\r\n            for p in set_partitions2(M, k-1):\r\n                yield ([e], *p)\r\n            for p in set_partitions2(M, k):\r\n                for i in range(len(p)):\r\n                    yield list(p[:i]) + [[e] + p[i]] + list(p[i+1:])\r\n\r\nAs you can see:\r\n\r\n* it returns tuples of lists instead of tuples of tuples;\r\n* the tuples and the groups inside the tuples are not ordered the same way as `more_itertools.set_partitions`;\r\n* there is no `k=None` version.\r\n\r\nBut the result is equivalent . Examples:\r\n\r\n```\r\nlist(set_partitions2(\"abcd\", 3))\r\n# [(['a'], ['b'], ['c', 'd']), (['a'], ['b', 'c'], ['d']), (['a'], ['c'], ['b', 'd']), [['a', 'b'], ['c'], ['d']], [['b'], ['a', 'c'], ['d']], [['b'], ['c'], ['a', 'd']]]\r\n\r\nlist(set_partitions(\"abcd\", 3))\r\n# [(('a',), ('b',), ('c', 'd')), (('a',), ('c',), ('b', 'd')), (('a',), ('d',), ('b', 'c')), (('b',), ('c',), ('a', 'd')), (('b',), ('d',), ('a', 'c')), (('c',), ('d',), ('a', 'b'))]\r\n```\r\n\r\nOut of curiosity, I checked the speed of both version, and my version is a lot faster:\r\n\r\n    print (timeit.timeit(lambda: list(set_partitions2(\"abcdefghi\", 4)), number=100))\r\n    # 0.6860678209995967\r\n    print (timeit.timeit(lambda: list(set_partitions(\"abcdefghi\", 4)), number=100))\r\n    # 17.434939999000562\r\n\r\nAnd\r\n\r\n    print (timeit.timeit(lambda: list(set_partitions2(\"abcdefghiklm\", 4)), number=10))\r\n    5.268347465000261\r\n    print (timeit.timeit(lambda: list(set_partitions(\"abcdefghiklm\", 4)), number=10))\r\n    165.6531076650008\r\n\r\nI know that `set_partitions` is very young in `more_itertools` and is maybe a work in progress, thus I didn't make a pull request (I don't want to be rude!), but I would be glad to improve my code (comments, ...) and to make one if you think it worthes it.\r\n(Any comment from @ktbarrett is welcome.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/296", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/296/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/296/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/296", "id": 466447267, "node_id": "MDU6SXNzdWU0NjY0NDcyNjc=", "number": 296, "title": "Set partitioning", "user": {"login": "ktbarrett", "id": 22162772, "node_id": "MDQ6VXNlcjIyMTYyNzcy", "avatar_url": "https://avatars1.githubusercontent.com/u/22162772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktbarrett", "html_url": "https://github.com/ktbarrett", "followers_url": "https://api.github.com/users/ktbarrett/followers", "following_url": "https://api.github.com/users/ktbarrett/following{/other_user}", "gists_url": "https://api.github.com/users/ktbarrett/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktbarrett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktbarrett/subscriptions", "organizations_url": "https://api.github.com/users/ktbarrett/orgs", "repos_url": "https://api.github.com/users/ktbarrett/repos", "events_url": "https://api.github.com/users/ktbarrett/events{/privacy}", "received_events_url": "https://api.github.com/users/ktbarrett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-10T18:09:51Z", "updated_at": "2019-07-13T18:51:40Z", "closed_at": "2019-07-13T18:51:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would like to the library include a function that implements partitioning of a set N-ways that does not preserve order (that's how it differs from `partitions`).\r\n\r\nThe 2-way set partitions of `range(4)` are\r\n```python\r\n((0,), (1, 2, 3))\r\n((1,), (0, 2, 3))\r\n((2,), (0, 1, 3))\r\n((3,), (0, 1, 2))\r\n((0, 1), (2, 3))\r\n((0, 2), (1, 3))\r\n((0, 3), (1, 2))\r\n```\r\n\r\nIf this is desired, I already have an implementation of `integer_partitions` and `set_partitions` that yield lexicographically ordered partitions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/295", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/295/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/295/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/295/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/295", "id": 461280568, "node_id": "MDU6SXNzdWU0NjEyODA1Njg=", "number": 295, "title": "getting 'SyntaxError: invalid syntax'", "user": {"login": "MaximLeyenson", "id": 52267068, "node_id": "MDQ6VXNlcjUyMjY3MDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/52267068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaximLeyenson", "html_url": "https://github.com/MaximLeyenson", "followers_url": "https://api.github.com/users/MaximLeyenson/followers", "following_url": "https://api.github.com/users/MaximLeyenson/following{/other_user}", "gists_url": "https://api.github.com/users/MaximLeyenson/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaximLeyenson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaximLeyenson/subscriptions", "organizations_url": "https://api.github.com/users/MaximLeyenson/orgs", "repos_url": "https://api.github.com/users/MaximLeyenson/repos", "events_url": "https://api.github.com/users/MaximLeyenson/events{/privacy}", "received_events_url": "https://api.github.com/users/MaximLeyenson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-27T03:11:26Z", "updated_at": "2019-06-27T13:25:29Z", "closed_at": "2019-06-27T13:24:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThanks for submitting an issue!\r\n\r\nHere's a quick checklist for what to provide:\r\n-->\r\n\r\n- [x] a detailed description of the bug or suggestion\r\n- [ ] output of `pip list` from the virtual environment you are using\r\n- [x] pytest and operating system versions\r\n- [x] minimal example if possible\r\n\r\nI am trying to run [Stapler](https://github.com/hellerbarde/stapler) after switching to Linux Mint. \r\nStapler depens on Python 2 and more-itertools, I have python-more-itertools  3.2.0-2:\r\n\r\n`# apt list *more-itertools*`\r\n`python-more-itertools/bionic,bionic,now 3.2.0-2 all [installed]  `\r\n\r\n(though `$pip list` gives `more-itertools (7.0.0)` ; I do not know how they are enumerated)\r\n\r\nI am encountering  \r\n\r\n```\r\n$ stapler -h\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/stapler\", line 11, in <module>\r\n    load_entry_point('stapler==0.3.3', 'console_scripts', 'stapler')()\r\n  File \"/usr/local/lib/python2.7/dist-packages/stapler-0.3.3-py2.7.egg/staplelib/__init__.py\", line 11, in main\r\n    import stapler\r\n  File \"/usr/local/lib/python2.7/dist-packages/stapler-0.3.3-py2.7.egg/staplelib/stapler.py\", line 9, in <module>\r\n    from . import commands, CommandError\r\n  File \"/usr/local/lib/python2.7/dist-packages/stapler-0.3.3-py2.7.egg/staplelib/commands.py\", line 10, in <module>\r\n    import more_itertools\r\n  File \"build/bdist.linux-x86_64/egg/more_itertools/__init__.py\", line 1, in <module>\r\n  File \"/usr/local/lib/python2.7/dist-packages/more_itertools-7.0.0-py2.7.egg/more_itertools/more.py\", line 333\r\n    def _collate(*iterables, key=lambda a: a, reverse=False):\r\n                               ^\r\nSyntaxError: invalid syntax\r\n```\r\n\r\n\r\nI have installed Stapler with\r\n\r\n ```\r\n $ sudo  apt install python-setuptools \r\n  $ sudo apt install python-more-itertools\r\n  $ git clone https://github.com/hellerbarde/stapler\r\n  $ cd stapler\r\n  $ sudo python setup.py install\r\n```\r\n\r\nThere is no file \r\n\r\n ` \"/usr/local/lib/python2.7/dist-packages/more_itertools-7.0.0-py2.7.egg/more_itertools/more.py\"`\r\n\r\non my system, though there is a file (not a folder)\r\n\r\n```\r\n$ file /usr/local/lib/python2.7/dist-packages/more_itertools-7.0.0-py2.7.egg\r\n\r\n/usr/local/lib/python2.7/dist-packages/more_itertools-7.0.0-py2.7.egg: Zip archive data, at least v2.0 to extract\r\n```\r\n\r\nRunning pytest:\r\n\r\n```\r\n======== test session starts  ===============================\r\nplatform linux2 -- Python 2.7.15rc1, pytest-3.3.2, py-1.5.2, pluggy-0.6.0\r\nrootdir: /home/leyenson/island/text-files/logins, inifile:\r\ncollected 0 items      \r\n```                                                                                                               \r\nSystem:\r\n\r\n`Linux .. 4.15.0-20-generic #21-Ubuntu SMP Tue Apr 24 06:16:15 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux`\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/288", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/288/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/288/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/288", "id": 435966562, "node_id": "MDU6SXNzdWU0MzU5NjY1NjI=", "number": 288, "title": "Shared iterator", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-23T02:15:56Z", "updated_at": "2019-04-25T14:36:16Z", "closed_at": "2019-04-25T14:36:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw the implementation of [this post](https://stackoverflow.com/a/55762535/4531270) and thought a similar tool might be useful here.\r\n\r\n**Problem**\r\n\r\nYou have a generator and you consume a result that you wish to share with other clients.\r\n\r\nIf the iterator is large, rather than `tee`ing several copies of the same iterator, the post implies sharing the state of the generator with all of its \"subscribers.\"\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/281", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/281/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/281/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/281/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/281", "id": 426494123, "node_id": "MDU6SXNzdWU0MjY0OTQxMjM=", "number": 281, "title": "Unable to return zero or one element, ValueError on more", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-28T13:32:26Z", "updated_at": "2019-04-13T14:54:18Z", "closed_at": "2019-04-13T14:54:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a function that has this docstring:\r\n\r\n\"\"\"\r\nReturn the first element from the iterable, if present, or None. Raises a ValueError if more than one element is present.\r\n\"\"\"\r\n\r\nI thought for sure more_itertools.one or more_itertools.first would satisfy this use-case, but neither does.\r\n\r\n`one` fails the use-case because it only raises exceptions on `too_short` or `too_long`. `first` fails because it doesn't do any checks on the iterable after.\r\n\r\nI wonder if `one` could be extended to accept values for `too_short` and `too_long` that aren't exceptions. If they are exceptions, raise them, otherwise return that value.\r\n\r\nThen, one could write:\r\n\r\n```\r\none(iterable, too_short=None, too_long=ValueError(\"Too many items\"))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/277", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/277/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/277/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/277", "id": 424501315, "node_id": "MDU6SXNzdWU0MjQ1MDEzMTU=", "number": 277, "title": "Add another substrings function", "user": {"login": "rominf", "id": 3449635, "node_id": "MDQ6VXNlcjM0NDk2MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3449635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rominf", "html_url": "https://github.com/rominf", "followers_url": "https://api.github.com/users/rominf/followers", "following_url": "https://api.github.com/users/rominf/following{/other_user}", "gists_url": "https://api.github.com/users/rominf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rominf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rominf/subscriptions", "organizations_url": "https://api.github.com/users/rominf/orgs", "repos_url": "https://api.github.com/users/rominf/repos", "events_url": "https://api.github.com/users/rominf/events{/privacy}", "received_events_url": "https://api.github.com/users/rominf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-23T13:34:05Z", "updated_at": "2019-03-25T02:11:55Z", "closed_at": "2019-03-25T02:11:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm proposing to add another `substrings` function. Here is the implementation:\r\n```python\r\ndef substrings_new(string, with_indexes=False):\r\n    return ((string[i:i + length], i, i + length) if with_indexes else string[i:i + length]\r\n             for length in range(len(string), 0, -1)\r\n             for i in range(len(string) - length + 1))\r\n```\r\nDifferences with `substrings`, which is already included:\r\n1. Downside: this function requires the argument to be subscribable.\r\n2. Order: my version returns longest substrings first. I think this is a more suitable behavior for NLP tasks.\r\n3. Indexes can be included. Indexes are useful for replacing substrings in the original string, which is also good for NLP tasks.\r\n4. The function returns normal strings, not the list of strings of length 1. No need to do expensive `join`.\r\n5. Implementation: it's smaller and IMHO more readable.\r\n6. Speed:\r\n```python\r\nIn [1]: a = ' '*100\r\n\r\nIn [2]: %timeit list(substrings(a))\r\n1.9 ms \u00b1 41.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n\r\nIn [3]: %timeit [''.join(substring) for substring in substrings(a)]\r\n3.66 ms \u00b1 171 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n\r\nIn [4]: %timeit list(substrings_new(a))\r\n1.3 ms \u00b1 46.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n```\r\n\r\nThe only problem is what to do with 2 similar, but different functions in the library. That's why this is an issue, but not PR.\r\n\r\nPS: I'm currently using this function in https://github.com/rominf/profanity-filter, so this function is useful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/275", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/275/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/275/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/275", "id": 421793773, "node_id": "MDU6SXNzdWU0MjE3OTM3NzM=", "number": 275, "title": "add to conda-forge", "user": {"login": "matanster", "id": 4996067, "node_id": "MDQ6VXNlcjQ5OTYwNjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4996067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matanster", "html_url": "https://github.com/matanster", "followers_url": "https://api.github.com/users/matanster/followers", "following_url": "https://api.github.com/users/matanster/following{/other_user}", "gists_url": "https://api.github.com/users/matanster/gists{/gist_id}", "starred_url": "https://api.github.com/users/matanster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matanster/subscriptions", "organizations_url": "https://api.github.com/users/matanster/orgs", "repos_url": "https://api.github.com/users/matanster/repos", "events_url": "https://api.github.com/users/matanster/events{/privacy}", "received_events_url": "https://api.github.com/users/matanster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-16T10:39:50Z", "updated_at": "2020-05-15T01:20:23Z", "closed_at": "2020-05-15T01:20:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "any plans to package this for conda-forge?\r\nis the API already frozen / stable enough for that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/273", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/273/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/273/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/273", "id": 409325742, "node_id": "MDU6SXNzdWU0MDkzMjU3NDI=", "number": 273, "title": "collapse([b'bytes literal']) -> generator of `int`", "user": {"login": "asottile", "id": 1810591, "node_id": "MDQ6VXNlcjE4MTA1OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1810591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asottile", "html_url": "https://github.com/asottile", "followers_url": "https://api.github.com/users/asottile/followers", "following_url": "https://api.github.com/users/asottile/following{/other_user}", "gists_url": "https://api.github.com/users/asottile/gists{/gist_id}", "starred_url": "https://api.github.com/users/asottile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asottile/subscriptions", "organizations_url": "https://api.github.com/users/asottile/orgs", "repos_url": "https://api.github.com/users/asottile/repos", "events_url": "https://api.github.com/users/asottile/events{/privacy}", "received_events_url": "https://api.github.com/users/asottile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-12T14:26:01Z", "updated_at": "2019-03-18T14:43:47Z", "closed_at": "2019-03-18T14:43:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "seems incompatible with the approach that `always_iterable` uses:\r\n\r\n```pycon\r\n>>> tuple(collapse([b'foo']))\r\n(102, 111, 111)\r\n>>> tuple(always_iterable(b'foo'))\r\n(b'foo',)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/272", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/272/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/272/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/272", "id": 409114932, "node_id": "MDU6SXNzdWU0MDkxMTQ5MzI=", "number": 272, "title": "Error in more.py during pytest in Python 2.7", "user": {"login": "joshuahendinata", "id": 5980973, "node_id": "MDQ6VXNlcjU5ODA5NzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5980973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshuahendinata", "html_url": "https://github.com/joshuahendinata", "followers_url": "https://api.github.com/users/joshuahendinata/followers", "following_url": "https://api.github.com/users/joshuahendinata/following{/other_user}", "gists_url": "https://api.github.com/users/joshuahendinata/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshuahendinata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshuahendinata/subscriptions", "organizations_url": "https://api.github.com/users/joshuahendinata/orgs", "repos_url": "https://api.github.com/users/joshuahendinata/repos", "events_url": "https://api.github.com/users/joshuahendinata/events{/privacy}", "received_events_url": "https://api.github.com/users/joshuahendinata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-02-12T04:28:06Z", "updated_at": "2020-06-10T15:08:50Z", "closed_at": "2019-02-12T04:34:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I received this error in version 6.0 (released just now in PyPi) when running pytest which depends on more-itertools. I am using python 2.7\r\n\r\n```\r\ndef _collate(*iterables, key=lambda a: a, reverse=False):\r\n                           ^\r\nSyntaxError: invalid syntax\r\n```\r\n\r\n---\r\n\r\n__Edited to add__: For people finding this issue from Google, the issue is with Python 2.7. For a version more `more-itertools` that works with that version of Python, `pip install more_itertools==5.0.0`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/269", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/269/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/269/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/269", "id": 403315270, "node_id": "MDU6SXNzdWU0MDMzMTUyNzA=", "number": 269, "title": "`unique_everseen` docstring: maybe add a simple tip", "user": {"login": "jferard", "id": 10564095, "node_id": "MDQ6VXNlcjEwNTY0MDk1", "avatar_url": "https://avatars3.githubusercontent.com/u/10564095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jferard", "html_url": "https://github.com/jferard", "followers_url": "https://api.github.com/users/jferard/followers", "following_url": "https://api.github.com/users/jferard/following{/other_user}", "gists_url": "https://api.github.com/users/jferard/gists{/gist_id}", "starred_url": "https://api.github.com/users/jferard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jferard/subscriptions", "organizations_url": "https://api.github.com/users/jferard/orgs", "repos_url": "https://api.github.com/users/jferard/repos", "events_url": "https://api.github.com/users/jferard/events{/privacy}", "received_events_url": "https://api.github.com/users/jferard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-25T20:10:03Z", "updated_at": "2019-02-05T01:30:23Z", "closed_at": "2019-02-05T01:30:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is not really an issue, but I think this could be documented:\r\n\r\n```\r\n>>> import timeit\r\n>>> from more_itertools import unique_everseen\r\n>>> L = [[i%50] for i in range(100)] # [[0], ..., [49], [0], ..., [49]]\r\n>>> timeit.timeit(lambda: list(unique_everseen(L)))\r\n66.02612847099954\r\n>>> timeit.timeit(lambda: list(unique_everseen(L, tuple)))\r\n12.531652420000682\r\n>>> list(unique_everseen(L, tuple)) == list(unique_everseen(L)) \r\nTrue\r\n```\r\n\r\nIt's possible to improve the speed of `unique_everseen` in the case of unhashable elements with the `key` parameter. In the example above `list`s are converted to their `tuple`s equivalents, and those tuples are hashable. Thus, we use `seenset` instead of `seenlist` to test if the element was seen, and the time complexity decreases to `O(n)`.\r\n\r\nI think the following paragraph (or a better rephrasing):  \r\n\r\n> Tip: the `key` argument may be helpful to mitigate the speed issue with \r\nunhashable elements: `unique_everseen([[1],[2],[3],[2]], tuple)` is `O(n)`\r\nwhile `unique_everseen([[1],[2],[3],[2]])` is `O(n^2)` but they return the \r\nsame result because `tuple`s are hashable equivalents of `list`s.\r\n\r\nwould be helpful in the `unique_everseen` docstring.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/266", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/266/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/266/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/266", "id": 400848102, "node_id": "MDU6SXNzdWU0MDA4NDgxMDI=", "number": 266, "title": "flatmap", "user": {"login": "gsakkis", "id": 291289, "node_id": "MDQ6VXNlcjI5MTI4OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/291289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsakkis", "html_url": "https://github.com/gsakkis", "followers_url": "https://api.github.com/users/gsakkis/followers", "following_url": "https://api.github.com/users/gsakkis/following{/other_user}", "gists_url": "https://api.github.com/users/gsakkis/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsakkis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsakkis/subscriptions", "organizations_url": "https://api.github.com/users/gsakkis/orgs", "repos_url": "https://api.github.com/users/gsakkis/repos", "events_url": "https://api.github.com/users/gsakkis/events{/privacy}", "received_events_url": "https://api.github.com/users/gsakkis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-18T18:57:34Z", "updated_at": "2019-01-21T16:59:09Z", "closed_at": "2019-01-21T16:59:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "How about adding `flatmap`, a common functional transformation? Granted, the implementation is trivial (`chain.from_iterable(map(f, iterable))`), but so are many others included already.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/265", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/265/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/265/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/265", "id": 398525792, "node_id": "MDU6SXNzdWUzOTg1MjU3OTI=", "number": 265, "title": "[Feature] Add left padding to windowed", "user": {"login": "Vimos", "id": 2136700, "node_id": "MDQ6VXNlcjIxMzY3MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2136700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vimos", "html_url": "https://github.com/Vimos", "followers_url": "https://api.github.com/users/Vimos/followers", "following_url": "https://api.github.com/users/Vimos/following{/other_user}", "gists_url": "https://api.github.com/users/Vimos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vimos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vimos/subscriptions", "organizations_url": "https://api.github.com/users/Vimos/orgs", "repos_url": "https://api.github.com/users/Vimos/repos", "events_url": "https://api.github.com/users/Vimos/events{/privacy}", "received_events_url": "https://api.github.com/users/Vimos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-12T06:14:59Z", "updated_at": "2019-01-23T01:11:02Z", "closed_at": "2019-01-23T01:11:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "How about adding a feature to support a similar function like below?\r\n\r\n```\r\nIn [11]: from itertools import chain\r\nIn [12]: padding = iter([None] * 2)\r\nIn [13]: list(windowed(chain(padding, range(10)), 3))\r\nOut[13]: \r\n[(None, None, 0),\r\n (None, 0, 1),\r\n (0, 1, 2),\r\n (1, 2, 3),\r\n (2, 3, 4),\r\n (3, 4, 5),\r\n (4, 5, 6),\r\n (5, 6, 7),\r\n (6, 7, 8),\r\n (7, 8, 9)]\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/262", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/262/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/262/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/262/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/262", "id": 396503302, "node_id": "MDU6SXNzdWUzOTY1MDMzMDI=", "number": 262, "title": "Add type annotations", "user": {"login": "Tadaboody", "id": 6463334, "node_id": "MDQ6VXNlcjY0NjMzMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6463334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tadaboody", "html_url": "https://github.com/Tadaboody", "followers_url": "https://api.github.com/users/Tadaboody/followers", "following_url": "https://api.github.com/users/Tadaboody/following{/other_user}", "gists_url": "https://api.github.com/users/Tadaboody/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tadaboody/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tadaboody/subscriptions", "organizations_url": "https://api.github.com/users/Tadaboody/orgs", "repos_url": "https://api.github.com/users/Tadaboody/repos", "events_url": "https://api.github.com/users/Tadaboody/events{/privacy}", "received_events_url": "https://api.github.com/users/Tadaboody/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-01-07T14:15:37Z", "updated_at": "2019-10-14T00:32:54Z", "closed_at": "2019-10-14T00:32:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to implement [PEP 484](https://www.python.org/dev/peps/pep-0484/) type annotations and distribute them as detailed in [PEP 561](https://www.python.org/dev/peps/pep-0561/). Do you think this is a good idea for the project?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/260", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/260/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/260/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/260", "id": 396212783, "node_id": "MDU6SXNzdWUzOTYyMTI3ODM=", "number": 260, "title": "substrings kwarg not implemented", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-06T00:01:21Z", "updated_at": "2019-01-07T01:49:54Z", "closed_at": "2019-01-07T01:49:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears `more_itertools.substrings` has a `join_func` keyword, but [no code is implemented](https://more-itertools.readthedocs.io/en/latest/_modules/more_itertools/more.html#substrings).   Here is the [PR](https://github.com/erikrose/more-itertools/pull/229/files).  I missed this during the review.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/256", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/256/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/256/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/256", "id": 395686510, "node_id": "MDU6SXNzdWUzOTU2ODY1MTA=", "number": 256, "title": "grouper signature doesn't match recipe", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-03T18:56:30Z", "updated_at": "2019-01-04T03:24:25Z", "closed_at": "2019-01-04T03:22:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In #38, I suggested that chunked should match grouper. What I didn't realize at the time is that the signature for `grouper` doesn't match what's in the stdlib docs. Here's what I see for stdlib:\r\n\r\n![image](https://user-images.githubusercontent.com/308610/50655616-b7698880-0f5e-11e9-97e2-dd8dfa91f921.png)\r\n\r\nBut the signature for the implementation herein switches the order of parameters.\r\n\r\nhttps://github.com/erikrose/more-itertools/blob/1a3682b87a78416711fdeea7ef050e997d5e4e4b/more_itertools/recipes.py#L288-L296\r\n\r\nI'd have expected the recipes to match the documentation in the stdlib... or at least call out when the signature doesn't match. Best would be for it to match so that someone doesn't read the stdlib docs, find the recipe they need, pull in more-itertools to use it, then find that it's not implemented that way in more_itertools.\r\n\r\nDid the order of the parameter change in the stdlib recipe?\r\n\r\nWould you consider a pull request to give compatibility for either order of parameters and raise a DeprecationWarning when they're not in the new, preferred order as found in stdlib docs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/253", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/253/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/253/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/253", "id": 394234890, "node_id": "MDU6SXNzdWUzOTQyMzQ4OTA=", "number": 253, "title": "Drop Python 2.7 support by 2020", "user": {"login": "bbayles", "id": 1922815, "node_id": "MDQ6VXNlcjE5MjI4MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1922815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbayles", "html_url": "https://github.com/bbayles", "followers_url": "https://api.github.com/users/bbayles/followers", "following_url": "https://api.github.com/users/bbayles/following{/other_user}", "gists_url": "https://api.github.com/users/bbayles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbayles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbayles/subscriptions", "organizations_url": "https://api.github.com/users/bbayles/orgs", "repos_url": "https://api.github.com/users/bbayles/repos", "events_url": "https://api.github.com/users/bbayles/events{/privacy}", "received_events_url": "https://api.github.com/users/bbayles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-26T20:18:43Z", "updated_at": "2019-02-12T02:30:27Z", "closed_at": "2019-02-12T02:30:27Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It's almost 2019, which will be the last year with any releases that explicitly support Python 2.7. See [here](https://python3statement.org/) for some information on motivation.\r\n\r\nWhat this means:\r\n* I'll continue to accept additions that require Python 2-specific code throughout 2019\r\n* At the end of 2019 I'll make a final Python 2.7-compatible release\r\n* After that release I will make issues for making use of Python 3-only features, like `yield from`\r\n* I'll remove `six` from the requirements and remove the places where it's used\r\n* I'll accept PRs that change existing tools to use Python 3-only features\r\n* I'll accept PRs that add new tools with Python 3-only features\r\n\r\nIf someone wants to make a fork targeting older Python versions they are of course welcome to; if requested I will provide a link in the docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/251", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/251/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/251/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/251", "id": 392211323, "node_id": "MDU6SXNzdWUzOTIyMTEzMjM=", "number": 251, "title": "Proper use of consume()", "user": {"login": "r0f1", "id": 7324891, "node_id": "MDQ6VXNlcjczMjQ4OTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7324891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r0f1", "html_url": "https://github.com/r0f1", "followers_url": "https://api.github.com/users/r0f1/followers", "following_url": "https://api.github.com/users/r0f1/following{/other_user}", "gists_url": "https://api.github.com/users/r0f1/gists{/gist_id}", "starred_url": "https://api.github.com/users/r0f1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r0f1/subscriptions", "organizations_url": "https://api.github.com/users/r0f1/orgs", "repos_url": "https://api.github.com/users/r0f1/repos", "events_url": "https://api.github.com/users/r0f1/events{/privacy}", "received_events_url": "https://api.github.com/users/r0f1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-18T15:36:31Z", "updated_at": "2018-12-19T09:51:36Z", "closed_at": "2018-12-19T09:51:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n```python\r\nfor e in take(10, my_iterator):\r\n    print(e)\r\n```\r\nThis prints the first 10 elements,\r\n\r\nWhen I want to *skip* the first 10 elements, and get the next 10 elements, I want to write something like:\r\n```python\r\nfor e in take(10, consume(my_iterator, 10)):  # wrong code, this does not work\r\n    print(e)\r\n```\r\nHow would I do that? Or in other words: Why does `consume()` not return an iterator? (Related: Why is the ordering of arguments in take and consume different?)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/250", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/250/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/250/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/250", "id": 391350155, "node_id": "MDU6SXNzdWUzOTEzNTAxNTU=", "number": 250, "title": "Chainable tools", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-12-15T06:38:21Z", "updated_at": "2019-01-07T18:15:38Z", "closed_at": "2019-01-07T18:15:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I heard about these two libraries with chained methods on an object that wraps an iterable.  \r\n\r\n1. [Repo](https://github.com/sixty-north/asq) `aqk`\r\n1. [Repo](https://github.com/olirice/flupy) `flupy`\r\n\r\nFrom flupy\r\n\r\n```python\r\npipeline = flu(count()).map(lambda x: x**2) \\\r\n                       .filter(lambda x: x % 517 == 0) \\\r\n                       .chunk(5) \\\r\n                       .take(3)\r\n\r\nfor item in pipeline:\r\n  print(item)\r\n\r\n# Returns:\r\n# [0, 267289, 1069156, 2405601, 4276624]\r\n# [6682225, 9622404, 13097161, 17106496, 21650409]\r\n# [26728900, 32341969, 38489616, 45171841, 52388644]\r\n```\r\n\r\nWhat are your thoughts on doing something similar in `more_itertools` - perhaps a `Chainable` or `Pipeline` object that wraps an iterable and gives serial dotted access to close to all of the tools in the library?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/246", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/246/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/246/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/246", "id": 389143842, "node_id": "MDU6SXNzdWUzODkxNDM4NDI=", "number": 246, "title": "Function to split iterable into uneven sized lists", "user": {"login": "pjdon", "id": 45183782, "node_id": "MDQ6VXNlcjQ1MTgzNzgy", "avatar_url": "https://avatars3.githubusercontent.com/u/45183782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjdon", "html_url": "https://github.com/pjdon", "followers_url": "https://api.github.com/users/pjdon/followers", "following_url": "https://api.github.com/users/pjdon/following{/other_user}", "gists_url": "https://api.github.com/users/pjdon/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjdon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjdon/subscriptions", "organizations_url": "https://api.github.com/users/pjdon/orgs", "repos_url": "https://api.github.com/users/pjdon/repos", "events_url": "https://api.github.com/users/pjdon/events{/privacy}", "received_events_url": "https://api.github.com/users/pjdon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-10T05:15:23Z", "updated_at": "2018-12-15T01:21:43Z", "closed_at": "2018-12-15T01:21:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "What are your thought on adding a function that splits an iterable into different sized chunks?\r\n\r\nI've been using more-itertools a lot lately, and combined windowed with accumulate in a one liner to group an iterable's items based on each group's size. I expanded it into a generator for cleanliness and better argument handling, and thought it might be a useful addition to the library.\r\n\r\n\r\n```\r\nfrom itertools import islice\r\n\r\n\r\ndef segmented(iterable, sizes):\r\n    \"\"\"Break *iterable* sequentially into lists of varying sizes, with a list\r\n    of length 'n' returned for each integer 'n' in *sizes*:\r\n\r\n        >>> list(segmented([1,2,3,4,5,6], [1,2,3]))\r\n        [[1], [2, 3], [4, 5, 6]]\r\n\r\n    If the sum of *sizes* is smaller than the length of *iterable*, then the\r\n    remaining items of *iterable* will not be returned.\r\n\r\n        >>> list(segmented([1,2,3,4,5,6], [2,3]))\r\n        [[1, 2], [3, 4, 5]]\r\n\r\n    If the sum of *sizes* is larger than the length of *iterable*, fewer items\r\n    will be returned in the iteration that overruns *iterable* and further\r\n    lists will be empty:\r\n\r\n        >>> list(segmented([1,2,3,4], [1,2,3,4]))\r\n        [[1], [2, 3], [4], []]\r\n\r\n    When a None object is encountered in *sizes*, the returned list will\r\n    contain items up to the end of *iterable* the same way that itertools.slice\r\n    does:\r\n\r\n        >>> list(segmented([1,2,3,4,5,6,7,8,9,0], [2,3,None]))\r\n        [[1, 2], [3, 4, 5], [6, 7, 8, 9, 0]]\r\n\r\n    :func:`segmented` can be useful for grouping a series of items where the\r\n    sizes of the groups are not uniform. An example would be where in a row\r\n    from a table, multiple columns represent elements of the same feature\r\n    (e.g. a point represented by x,y,z) but the format is not the same for\r\n    all columns.\r\n    \"\"\"\r\n\t\r\n    current_index = 0\r\n    for size in sizes:\r\n        if isinstance(size, int):\r\n            current_index += size\r\n            yield list(islice(iterable, current_index-size, current_index))\r\n        elif size is None:\r\n            yield list(islice(iterable, current_index, None))\r\n            return\r\n        else:\r\n            raise TypeError(\"each item in 'sizes' must be an integer or None\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/244", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/244/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/244/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/244", "id": 386369498, "node_id": "MDU6SXNzdWUzODYzNjk0OTg=", "number": 244, "title": "add constraints", "user": {"login": "cristipurdel", "id": 41154308, "node_id": "MDQ6VXNlcjQxMTU0MzA4", "avatar_url": "https://avatars0.githubusercontent.com/u/41154308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cristipurdel", "html_url": "https://github.com/cristipurdel", "followers_url": "https://api.github.com/users/cristipurdel/followers", "following_url": "https://api.github.com/users/cristipurdel/following{/other_user}", "gists_url": "https://api.github.com/users/cristipurdel/gists{/gist_id}", "starred_url": "https://api.github.com/users/cristipurdel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cristipurdel/subscriptions", "organizations_url": "https://api.github.com/users/cristipurdel/orgs", "repos_url": "https://api.github.com/users/cristipurdel/repos", "events_url": "https://api.github.com/users/cristipurdel/events{/privacy}", "received_events_url": "https://api.github.com/users/cristipurdel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-30T22:10:51Z", "updated_at": "2018-12-03T20:57:20Z", "closed_at": "2018-12-03T20:57:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following code and I am trying to put some functions/loops on it:\r\ntemp = itertools.product(range(4), repeat=100)\r\nBy the time the constraints/conditions are met, it takes way too much time.\r\nWould it be possible to add the constraints to the combinator from the beginning, instead of the brute force approach that itertools is doing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/239", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/239/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/239/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/239", "id": 383351205, "node_id": "MDU6SXNzdWUzODMzNTEyMDU=", "number": 239, "title": "add unzip", "user": {"login": "iomintz", "id": 538336, "node_id": "MDQ6VXNlcjUzODMzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/538336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iomintz", "html_url": "https://github.com/iomintz", "followers_url": "https://api.github.com/users/iomintz/followers", "following_url": "https://api.github.com/users/iomintz/following{/other_user}", "gists_url": "https://api.github.com/users/iomintz/gists{/gist_id}", "starred_url": "https://api.github.com/users/iomintz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iomintz/subscriptions", "organizations_url": "https://api.github.com/users/iomintz/orgs", "repos_url": "https://api.github.com/users/iomintz/repos", "events_url": "https://api.github.com/users/iomintz/events{/privacy}", "received_events_url": "https://api.github.com/users/iomintz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-22T01:46:24Z", "updated_at": "2018-11-27T02:05:53Z", "closed_at": "2018-11-27T02:05:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```py\r\n>>> g0, g1 = unzip(zip(range(10), range(1, 11)))\r\n>>> next(g0)\r\n0\r\n>>> next(g1)\r\n1\r\n>>> next(g1)\r\n2\r\n>>> list(g0)\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n>>> list(g1)\r\n[3, 4, 5, 6, 7, 8, 9, 10]\r\n```\r\n\r\nI tried to implement this but it turns out to be a lot harder than I thought. I managed to get a version working which steps all the generators forward when any generator is advanced, but I don't know how to do one that makes them operate independently.\r\n\r\nI guess it could be done using a `more_itertools.peek`, where each gen returned by unzip keeps track of how many times it has been advanced.\r\n\r\nThen when any gen is advanced past the farthest point in the original zipped iterable, the original zipped iterable is advanced again.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/234", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/234/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/234/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/234", "id": 369229179, "node_id": "MDU6SXNzdWUzNjkyMjkxNzk=", "number": 234, "title": "overflow error in test on 32-bit hardware", "user": {"login": "Millak", "id": 3628555, "node_id": "MDQ6VXNlcjM2Mjg1NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3628555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Millak", "html_url": "https://github.com/Millak", "followers_url": "https://api.github.com/users/Millak/followers", "following_url": "https://api.github.com/users/Millak/following{/other_user}", "gists_url": "https://api.github.com/users/Millak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Millak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Millak/subscriptions", "organizations_url": "https://api.github.com/users/Millak/orgs", "repos_url": "https://api.github.com/users/Millak/repos", "events_url": "https://api.github.com/users/Millak/events{/privacy}", "received_events_url": "https://api.github.com/users/Millak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-11T17:35:51Z", "updated_at": "2018-10-12T17:30:17Z", "closed_at": "2018-10-12T17:30:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When building on 32-bit hardware we get a consistent test failure in overflow. Happens for python-3.7.0 and python-2.7.15.\r\n\r\n ERROR: test_efficient_reversal (more_itertools.tests.test_more.RlocateTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/guix-build-python2-more-itertools-4.3.0.drv-0/more-itertools-4.3.0/more_itertools/tests/test_more.py\", line 1980, in test_efficient_reversal\r\n    iterable = range(10 ** 10)  # Is efficiently reversible\r\nOverflowError: Python int too large to convert to C long\r\n\r\n----------------------------------------------------------------------\r\nRan 358 tests in 0.619s\r\n\r\nFAILED (errors=1)\r\nTest failed: <unittest.runner.TextTestResult run=358 errors=1 failures=0>\r\nerror: Test failed: <unittest.runner.TextTestResult run=358 errors=1 failures=0>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/231", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/231/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/231/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/231", "id": 351246774, "node_id": "MDU6SXNzdWUzNTEyNDY3NzQ=", "number": 231, "title": "Any chance of changing the first_true default to None?", "user": {"login": "sk-", "id": 911768, "node_id": "MDQ6VXNlcjkxMTc2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/911768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sk-", "html_url": "https://github.com/sk-", "followers_url": "https://api.github.com/users/sk-/followers", "following_url": "https://api.github.com/users/sk-/following{/other_user}", "gists_url": "https://api.github.com/users/sk-/gists{/gist_id}", "starred_url": "https://api.github.com/users/sk-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sk-/subscriptions", "organizations_url": "https://api.github.com/users/sk-/orgs", "repos_url": "https://api.github.com/users/sk-/repos", "events_url": "https://api.github.com/users/sk-/events{/privacy}", "received_events_url": "https://api.github.com/users/sk-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-08-16T15:06:56Z", "updated_at": "2018-08-25T01:12:44Z", "closed_at": "2018-08-25T01:12:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm adding types stubs to more_itertools and one function I'm having issues with is first_true, as the default value is False instead of None.\r\n\r\nThe problem is that the return Type would be `Union[T, bool]`, which makes the following code invalid:\r\n\r\n```python\r\nelement = first_true(elements, pred=...)\r\nif element:\r\n  # do something with element\r\n```\r\n\r\nSee https://github.com/python/typeshed/issues/2390 where I ask if there's any idiom to express that.\r\n\r\nBut I don't think there is as `next` has the same issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/230", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/230/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/230/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/230", "id": 351050933, "node_id": "MDU6SXNzdWUzNTEwNTA5MzM=", "number": 230, "title": "Minor performance improvement to `ilen()`", "user": {"login": "achampion", "id": 4431181, "node_id": "MDQ6VXNlcjQ0MzExODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4431181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achampion", "html_url": "https://github.com/achampion", "followers_url": "https://api.github.com/users/achampion/followers", "following_url": "https://api.github.com/users/achampion/following{/other_user}", "gists_url": "https://api.github.com/users/achampion/gists{/gist_id}", "starred_url": "https://api.github.com/users/achampion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achampion/subscriptions", "organizations_url": "https://api.github.com/users/achampion/orgs", "repos_url": "https://api.github.com/users/achampion/repos", "events_url": "https://api.github.com/users/achampion/events{/privacy}", "received_events_url": "https://api.github.com/users/achampion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-16T04:25:54Z", "updated_at": "2018-11-25T03:47:13Z", "closed_at": "2018-11-11T00:06:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Feel free to ignore.  \r\nA potential minor performance improvement for `ilen()` for Py3 by using `zip()` with a `itertools.count()` vs. `enumerate()`:\r\n\r\n    import itertools\r\n    from collections import deque\r\n\r\n    def ilen(iterable):\r\n        counter = itertools.count()\r\n        deque(zip(iterable, counter), maxlen=0)\r\n        return next(counter)\r\n\r\nNote you have a recipe for `consume()` so this could be:\r\n\r\n    def ilen(iterable):\r\n        counter = itertools.count()\r\n        consume(zip(iterable, counter))\r\n        return next(counter)\r\n\r\n    In []:\r\n    import more_itertools as mit\r\n    %timeit mit.ilen(x for x in range(10000000) if x % 3 == 0)\r\n\r\n    Out[]:\r\n    860 ms \u00b1 14.8 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\r\n\r\n    In []:\r\n    %timeit ilen(x for x in range(10000000) if x % 3 == 0)\r\n\r\n    Out[]:\r\n    786 ms \u00b1 8.24 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\r\n\r\nThis performance improvement seems stable for various orders of magnitude, except very small `<10` where the overhead of the extra function calls outweighs any performance improvement.\r\n\r\nNote: tested on Py2 and it was unfortunately slower (with `xrange()`). Perhaps one to save when Py2 goes away.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/227", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/227/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/227/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/227", "id": 347574766, "node_id": "MDU6SXNzdWUzNDc1NzQ3NjY=", "number": 227, "title": "Subsequences", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-04T01:33:37Z", "updated_at": "2018-08-20T01:03:57Z", "closed_at": "2018-08-20T01:03:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "A [subsequence](https://en.wikipedia.org/wiki/Subsequence) is a subset of a sequence, ordered but not necessarily consecutive/contiguous.\r\n\r\nThey show up in mathematics, computer science, linguistics, and natural sciences.   There is interest in them:\r\n\r\n- [Longest Increasing Subsequence](https://stackoverflow.com/questions/2631726/how-to-determine-the-longest-increasing-subsequence-using-dynamic-programming) and [here](https://stackoverflow.com/questions/3992697/longest-increasing-subsequence)\r\n- [Longest Repeated Substring](https://stackoverflow.com/questions/11090289/find-longest-repetitive-sequence-in-a-string) and [here](https://codereview.stackexchange.com/questions/63329/finding-the-largest-repeating-substring)\r\n- [Longest Palindromic Subsequence](https://codereview.stackexchange.com/questions/161775/length-of-longest-palindrome-subsequence)\r\n\r\nThey are part of classic algorithmic problems:\r\n\r\n- [Longest Common Subsequence Problem](https://en.wikipedia.org/wiki/Longest_common_subsequence_problem)\r\n- [Longest Common Substring Problem](https://en.wikipedia.org/wiki/Longest_common_substring_problem)\r\n\r\n\r\nQ: What are thoughts on adding a tool that simply collects subsequences?\r\n\r\n# Examples\r\n\r\nHaskell offers a [`subsequences` tool](https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-List.html#v:subsequences):\r\n\r\n**Haskell**\r\n\r\n```python\r\n>>> subsequences \"abc\"\r\n[\"\",\"a\",\"b\",\"ab\",\"c\",\"ac\",\"bc\",\"abc\"]\r\n```\r\n\r\nIt turns out our [`powerset` recipe](https://more-itertools.readthedocs.io/en/stable/_modules/more_itertools/recipes.html#powerset) is akin to this tool:\r\n\r\n**Python**\r\n\r\n```python\r\n >>> list(powerset([1,2,3]))\r\n [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\r\n```\r\n\r\n**Limitations**\r\n\r\nThese tools only pertain to generic subsequences alone with limited options. \r\n\r\n- While iterating, the items cannot be altered (no `pred`)\r\n- On \"longest xyz problems,\" the longest items are at the end of the iterator (no `reverse`)\r\n- Some problems require a \"substring\" of contiguous elements, i.e. `\"ac\"` and `(1, 3)` are invalid\r\n\r\n\r\n\r\n# Implementation\r\n\r\n**Proposal**\r\n\r\nA possible implementation to handle the latter limitations might be the following:\r\n\r\n```python\r\ndef subsequences(iterable, pred=None, reverse=False, contiguous=False):\r\n    \"\"\"Return windows of all subsequences sized from `len(iterable)` to 1.\r\n\r\n    Examples\r\n    --------\r\n    >>> list(subsequences(\"abc\"))\r\n    [('a',), ('b',), ('c',), ('a', 'b'), ('a', 'c'), ('b', 'c'), ('a', 'b', 'c')]\r\n    >>> list(subsequences(\"abc\", contiguous=True))\r\n    [('a',), ('b',), ('c',), ('a', 'b'), ('b', 'c'), ('a', 'b', 'c')]\r\n    >>> list(subsequences(\"abc\", reverse=True))\r\n    [('a', 'b', 'c'), ('a', 'b'), ('b', 'c'), ('a',), ('b',), ('c',)]\r\n    \r\n    References\r\n    ----------\r\n    .. [1]: Haskell. `subsequences`. \r\n       https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-List.html#v:subsequences\r\n    .. [2]: Subsequence.  Wikipedia. https://en.wikipedia.org/wiki/Subsequence\r\n    \r\n    \"\"\"\r\n    iterable = tuple(iterable)\r\n    range_ = range(len(iterable)+1)\r\n    \r\n    if pred is None:\r\n        pred = lambda x: x\r\n\r\n    if reverse: \r\n        range_ = reversed(range_)\r\n\r\n    if contiguous:\r\n        yield from (w for n in range_ for w in mit.windowed(iterable, n) if pred(w))\r\n    else:\r\n        # Roughly equivalent to `mit.powerset(iterable)` if `reverse=False`\r\n        yield from (x for sub in (it.combinations(iterable, r) for r in range_) for x in sub if pred(x))\r\n\r\n```\r\n \r\n**Behaviors**\r\n\r\n- Naturally, it behaves like a modified powerset, yielding a traditional subsequence (including both non-contiguous and contiguous elements).\r\n- [Substrings](https://en.wikipedia.org/wiki/Substring) are possible by setting `contiguous=True`.\r\n- Unlike a strict [powerset](https://en.wikipedia.org/wiki/Power_set), the null set is dropped.  It may be argued on how to keep it.\r\n\r\nNote, I am not particular to any of these names or to this specific implementation.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/224", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/224/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/224/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/224", "id": 343827738, "node_id": "MDU6SXNzdWUzNDM4Mjc3Mzg=", "number": 224, "title": "chunked consumes nested iterators", "user": {"login": "hraban", "id": 137852, "node_id": "MDQ6VXNlcjEzNzg1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/137852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hraban", "html_url": "https://github.com/hraban", "followers_url": "https://api.github.com/users/hraban/followers", "following_url": "https://api.github.com/users/hraban/following{/other_user}", "gists_url": "https://api.github.com/users/hraban/gists{/gist_id}", "starred_url": "https://api.github.com/users/hraban/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hraban/subscriptions", "organizations_url": "https://api.github.com/users/hraban/orgs", "repos_url": "https://api.github.com/users/hraban/repos", "events_url": "https://api.github.com/users/hraban/events{/privacy}", "received_events_url": "https://api.github.com/users/hraban/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-23T23:12:10Z", "updated_at": "2018-07-31T01:38:48Z", "closed_at": "2018-07-31T01:38:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi y'all, I'm not sure if this is a feature or a bug, but it's definitely confusing (then again, that's iterators in Python for ya): it seems like `chunked` is somehow consuming nested iterators.\r\n\r\nFor example, this bit wouldn't work as (I) expected:\r\n\r\n```python\r\nmore_itertools.chunked(itertools.groupby(range(10), lambda x: x % 3 == 0))\r\n```\r\n\r\nI'd expect the sub ranges to be untouched, but it seems the generators are consumed by chunked.\r\n\r\nRunnable example in the following file:\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport itertools as it\r\nimport more_itertools as mit\r\n\r\ndef greedify(x):\r\n    \"\"\"Recursively convert any iterator to a tuple\"\"\"\r\n    if not hasattr(x, '__iter__') or isinstance(x, str):\r\n        return x\r\n    else:\r\n        return tuple(map(greedify, x))\r\n\r\ndef debug(x):\r\n    \"\"\"Iterator-aware version of pprint.pprint.\r\n\r\n    Destructive on iterators.\r\n\r\n    \"\"\"\r\n    import pprint\r\n    pprint.pprint(greedify(x))\r\n\r\ndef main():\r\n    a = it.groupby(range(10), lambda x: x % 3 == 0)\r\n    debug(a)\r\n    # Output: \r\n    # ((True, (0,)),\r\n    #  (False, (1, 2)),\r\n    #  (True, (3,)),\r\n    #  (False, (4, 5)),\r\n    #  (True, (6,)),\r\n    #  (False, (7, 8)),\r\n    #  (True, (9,)))\r\n    #\r\n    # Ok!\r\n\r\n    a = it.groupby(range(10), lambda x: x % 3 == 0)\r\n    debug(mit.chunked(a, 3))\r\n    # Output:\r\n    # (((True, ()), (False, ()), (True, (3,))),\r\n    #  ((False, ()), (True, ()), (False, (7, 8))),\r\n    #  ((True, ()),))\r\n    #\r\n    # What?\r\n\r\n    a = it.groupby(range(10), lambda x: x % 3 == 0)\r\n    debug(mit.chunked(greedify(a), 3))\r\n    # Output:\r\n    # (((True, (0,)), (False, (1, 2)), (True, (3,))),\r\n    #  ((False, (4, 5)), (True, (6,)), (False, (7, 8))),\r\n    #  ((True, (9,)),))\r\n    #\r\n    # Ok!\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nIs this expected? I'm confused by that non-greedified mit.chunked call.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/223", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/223/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/223/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/223", "id": 343800456, "node_id": "MDU6SXNzdWUzNDM4MDA0NTY=", "number": 223, "title": "Pluck?", "user": {"login": "jdunck", "id": 10229, "node_id": "MDQ6VXNlcjEwMjI5", "avatar_url": "https://avatars2.githubusercontent.com/u/10229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdunck", "html_url": "https://github.com/jdunck", "followers_url": "https://api.github.com/users/jdunck/followers", "following_url": "https://api.github.com/users/jdunck/following{/other_user}", "gists_url": "https://api.github.com/users/jdunck/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdunck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdunck/subscriptions", "organizations_url": "https://api.github.com/users/jdunck/orgs", "repos_url": "https://api.github.com/users/jdunck/repos", "events_url": "https://api.github.com/users/jdunck/events{/privacy}", "received_events_url": "https://api.github.com/users/jdunck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-07-23T21:21:41Z", "updated_at": "2018-11-08T07:13:28Z", "closed_at": "2018-07-26T18:44:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would a thing like underscore.js's `pluck` be welcomed?\r\n\r\nhttps://underscorejs.org/#pluck\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/220", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/220/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/220/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/220", "id": 337720876, "node_id": "MDU6SXNzdWUzMzc3MjA4NzY=", "number": 220, "title": "locate_seq, replace, and replace_seq", "user": {"login": "bbayles", "id": 1922815, "node_id": "MDQ6VXNlcjE5MjI4MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1922815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbayles", "html_url": "https://github.com/bbayles", "followers_url": "https://api.github.com/users/bbayles/followers", "following_url": "https://api.github.com/users/bbayles/following{/other_user}", "gists_url": "https://api.github.com/users/bbayles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbayles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbayles/subscriptions", "organizations_url": "https://api.github.com/users/bbayles/orgs", "repos_url": "https://api.github.com/users/bbayles/repos", "events_url": "https://api.github.com/users/bbayles/events{/privacy}", "received_events_url": "https://api.github.com/users/bbayles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-03T02:12:09Z", "updated_at": "2018-07-30T17:24:54Z", "closed_at": "2018-07-15T01:48:40Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I may get to vetting these properly myself, but in case anybody watching is interested in taking that up: I pushed [a branch](https://github.com/erikrose/more-itertools/compare/replace?expand=1) with three new functions:\r\n* `locate_seq`: Like `locate`, but for a sequence of items.\r\n* `replace`: Like `str.replace`, but replacing single items in iterables.\r\n* `replace_seq`: Like `replace`, but for sequences of items.\r\n\r\nIf these were proposed by someone else I think I would merge them, since they extend built-in functionality to iterables and proved to be tricky to get right.\r\n\r\nHowever, these are questions I'd like to answer:\r\n* Is there any actual need? How many StackOverflow questions are there around each? comp.lang.python threads?\r\n* Is `replace` needed if `replace_seq` is there?\r\n* What edge cases should be added in tests?\r\n* Are there better / faster implementations? Especially for `replace_seq`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/218", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/218/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/218/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/218", "id": 334277829, "node_id": "MDU6SXNzdWUzMzQyNzc4Mjk=", "number": 218, "title": "docs/_static/ not present in PyPI tarballs", "user": {"login": "sbraz", "id": 4833332, "node_id": "MDQ6VXNlcjQ4MzMzMzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4833332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbraz", "html_url": "https://github.com/sbraz", "followers_url": "https://api.github.com/users/sbraz/followers", "following_url": "https://api.github.com/users/sbraz/following{/other_user}", "gists_url": "https://api.github.com/users/sbraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbraz/subscriptions", "organizations_url": "https://api.github.com/users/sbraz/orgs", "repos_url": "https://api.github.com/users/sbraz/repos", "events_url": "https://api.github.com/users/sbraz/events{/privacy}", "received_events_url": "https://api.github.com/users/sbraz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-20T22:55:34Z", "updated_at": "2018-06-21T13:00:19Z", "closed_at": "2018-06-21T13:00:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nbuilding the docs from the PyPI release result in the following warning:\r\n```\r\ncopying static files... WARNING: html_static_path entry '/var/tmp/portage/dev-python/more-itertools-4.2.0/work/more-itertools-4.2.0/docs/_static' does not exist                                                  \r\n```\r\nYou probablby need to add this to MANIFEST.in", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/214", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/214/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/214/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/214", "id": 331351960, "node_id": "MDU6SXNzdWUzMzEzNTE5NjA=", "number": 214, "title": "Reference table to docs", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-11T21:11:44Z", "updated_at": "2018-06-16T01:50:13Z", "closed_at": "2018-06-16T01:50:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is feasible to get a reference table like the following in the docs:\r\n\r\n![2018-06-11 16_39_32-aiostream aiostream documentation](https://user-images.githubusercontent.com/10778668/41255978-415a105c-6d96-11e8-9e18-f39bcbc4b283.png)\r\n\r\nThe tools are presented in a table by category.  Clicking each tool takes you to the api docs.   \r\n\r\nWe've had a similar discussion in the past (#130) that led to categories in the docs (https://github.com/erikrose/more-itertools/pull/133, thanks @bbayles).   I think a quick table on the landing page would improve:\r\n\r\n- finding a specific tool: now I click on `API Reference`, then <kbd>Ctrl</kbd> + <kbd>F</kbd> and search by name to find details on a certain tool\r\n- seeing all tools pertaining to a category at a glance: now we click on a category and scroll through the tools until we hit the next category.\r\n\r\nFYI: the example above is from [`aiostream`](https://aiostream.readthedocs.io/en/latest/) (think `asyncio` + `itertools`).   I've also seen a table-like listing of tools in @MSeifert04's [`iteration_utilities`](https://iteration-utilities.readthedocs.io/en/latest/). Perhaps he can comment on ease of maintainability.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/205", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/205/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/205/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/205", "id": 317016803, "node_id": "MDU6SXNzdWUzMTcwMTY4MDM=", "number": 205, "title": "\"rindex\"/ \"rfind\" tool", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-23T23:23:20Z", "updated_at": "2018-05-29T01:00:11Z", "closed_at": "2018-05-29T01:00:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "From [rhettinger's challenge][3], should we consider adding a tool like  [`rindex`][1] or [`rfind`][0] to this library?  In particular, these tools find index for the last occurrence of an item.\r\n\r\n**Sample Implementations**\r\n\r\n[rhettinger's solution][5]\r\n```python\r\ndef rindex(seq, x):\r\n    return next(compress(count(len(s)-1, -1), (map(x.__eq__, reversed(s)))), -1)\r\n```\r\n\r\nmore-itertools solution\r\n```python\r\nimport more_itertools as mit\r\n\r\n\r\ndef rindex(iterable, item):\r\n    \"\"\"Return the highest index for the given item.\"\"\"\r\n    return next(mit.islice_extended(mit.locate(iterable, lambda x: x == item), -1, None))\r\n```\r\n\r\n**Uses**\r\n\r\n- [How to find the last occurrence of an item in a Python list][7]\r\n- [Equivelant to rindex for lists in Python [duplicate]][8]\r\n- [Find index of last occurrence of a substring in a string][9]\r\n- See N. Coglan's response to [this tweet][6]\r\n\r\n\r\n\r\n  [0]: https://docs.python.org/2/library/string.html#string.rfind\r\n  [1]: https://docs.python.org/2/library/string.html#string.rindex\r\n  [3]: https://twitter.com/raymondh/status/987735142016864256\r\n  [5]: https://twitter.com/raymondh/status/987835455046479872\r\n  [6]: https://twitter.com/Persaik/status/987771879866892288\r\n  [7]: https://stackoverflow.com/questions/6890170/how-to-find-the-last-occurrence-of-an-item-in-a-python-list\r\n  [8]: https://stackoverflow.com/questions/9836425/equivelant-to-rindex-for-lists-in-python\r\n  [9]: https://stackoverflow.com/questions/9572490/find-index-of-last-occurrence-of-a-substring-in-a-string?rq=1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/203", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/203/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/203/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/203", "id": 314832001, "node_id": "MDU6SXNzdWUzMTQ4MzIwMDE=", "number": 203, "title": "unexpected behavior with `groupby_transform`", "user": {"login": "meereeum", "id": 7970350, "node_id": "MDQ6VXNlcjc5NzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7970350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meereeum", "html_url": "https://github.com/meereeum", "followers_url": "https://api.github.com/users/meereeum/followers", "following_url": "https://api.github.com/users/meereeum/following{/other_user}", "gists_url": "https://api.github.com/users/meereeum/gists{/gist_id}", "starred_url": "https://api.github.com/users/meereeum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meereeum/subscriptions", "organizations_url": "https://api.github.com/users/meereeum/orgs", "repos_url": "https://api.github.com/users/meereeum/repos", "events_url": "https://api.github.com/users/meereeum/events{/privacy}", "received_events_url": "https://api.github.com/users/meereeum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-16T21:53:33Z", "updated_at": "2018-04-19T02:03:40Z", "closed_at": "2018-04-19T02:03:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "```.py\r\ngrouper = lambda l: [(k, list(g)) for k,g in groupby_transform(l, lambda tup: tup[1], lambda tup: tup[0])]\r\n\r\n> l = [(5,4), (3,4), (5,6)]\r\n> grouper(l)\r\n\r\n[(4, [5, 3]), (6, [5])]\r\n\r\n> l = [(3,4), (5,4), (5,6)]\r\n> grouper(l)\r\n\r\n[(4, [3, 5]), (6, [5])]\r\n\r\n> l = [(3,4), (5,6), (5,4)]\r\n> grouper(l)\r\n\r\n[(4, [3]), (6, [5]), (4, [5])]\r\n```\r\n\r\nunless i'm misunderstanding something fundamental about intended behavior, last function should return the same as first two..", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/197", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/197/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/197/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/197", "id": 298471667, "node_id": "MDU6SXNzdWUyOTg0NzE2Njc=", "number": 197, "title": "Reference in `circular_shifts`", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-20T04:55:44Z", "updated_at": "2018-02-21T12:47:22Z", "closed_at": "2018-02-21T12:47:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "`circular_shifts(iterable)` is a specific case of `windowed`, e.g. \r\n\r\n```python\r\nlist(it.islice(mit.windowed(it.cycle(iterable), n=len(iterable)), len(iterable)))\r\n\r\nlist(mit.windowed(mit.ncycles(iterable, n=2), n=len(iterable)))[:-1]\r\n```\r\n\r\nI suggest a reference in the `circular_shifts` docstrings to \"See also `windowed`\".\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/195", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/195/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/195/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/195", "id": 293390690, "node_id": "MDU6SXNzdWUyOTMzOTA2OTA=", "number": 195, "title": "map/reduce recipe", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-02-01T03:22:10Z", "updated_at": "2018-04-12T01:48:14Z", "closed_at": "2018-04-12T01:48:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would this [`map_reduce` recipe][0] by R. Hettinger be of interest?  Here is an example from the docstring:\r\n\r\n    >>> def even_odd(elem):                     # sample mapper\r\n    ...     if 10 <= elem <= 20:                # skip elems outside the range\r\n    ...         key = elem % 2                  # group into evens and odds\r\n    ...         return key, elem\r\n\r\n    >>> map_reduce(range(30), even_odd)         # show group members\r\n    {0: [10, 12, 14, 16, 18, 20], 1: [11, 13, 15, 17, 19]}\r\n\r\n    >>> map_reduce(range(30), even_odd, sum)    # sum each group\r\n    {0: 90, 1: 75}\r\n\r\n  [0]: https://code.activestate.com/recipes/577676-dirt-simple-mapreduce/?in=user-178123", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/181", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/181/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/181/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/181", "id": 279109817, "node_id": "MDU6SXNzdWUyNzkxMDk4MTc=", "number": 181, "title": "seekable decorator", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-12-04T19:01:14Z", "updated_at": "2017-12-27T23:29:10Z", "closed_at": "2017-12-27T23:29:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Before `seekable` further diffuses into the wild, I wanted to ask if it is feasible to give `seekable`/`peekable`-like tools the option to decorate generator functions?  Example:\r\n\r\n```python\r\nfrom itertools import count\r\n\r\n\r\n@seekable\r\ndef numbers():\r\n    \"\"\"Return an infinite iterator of numeric strings.\"\"\"\r\n    return (str(n) for n in count())\r\n\r\nit = numbers()\r\nnext(it), next(it), next(it)\r\n# ('0', '1', '2')\r\n```\r\n\r\nI am particularly interested in making normal generator functions \"reusable\" ([see last `Counter` example in the \"Generators\" section](https://pymbook.readthedocs.io/en/latest/igd.html#generators)).  The `seekable` class seems it may able to do this simply.  This is just a rough idea, so I am not partial to the example mentioned here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/179", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/179/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/179/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/179", "id": 278696956, "node_id": "MDU6SXNzdWUyNzg2OTY5NTY=", "number": 179, "title": "Fix the PyPI docs for the 4.0.0 release", "user": {"login": "bbayles", "id": 1922815, "node_id": "MDQ6VXNlcjE5MjI4MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1922815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbayles", "html_url": "https://github.com/bbayles", "followers_url": "https://api.github.com/users/bbayles/followers", "following_url": "https://api.github.com/users/bbayles/following{/other_user}", "gists_url": "https://api.github.com/users/bbayles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbayles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbayles/subscriptions", "organizations_url": "https://api.github.com/users/bbayles/orgs", "repos_url": "https://api.github.com/users/bbayles/repos", "events_url": "https://api.github.com/users/bbayles/events{/privacy}", "received_events_url": "https://api.github.com/users/bbayles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-02T16:34:14Z", "updated_at": "2017-12-03T02:54:32Z", "closed_at": "2017-12-03T02:54:32Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "[Oof](https://pypi.python.org/pypi/more-itertools/4.0.0). I think this is the `:func:` directive again - our regex doesn't catch the `.` in :func:run_length.decode.\r\n\r\nBefore PyPI had a way to manually edit things to fix an existing release, but that seems to be gone.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/166", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/166/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/166/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/166", "id": 264003900, "node_id": "MDU6SXNzdWUyNjQwMDM5MDA=", "number": 166, "title": "Iterable parameter in `windowed`", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-09T19:38:15Z", "updated_at": "2017-10-10T03:23:00Z", "closed_at": "2017-10-10T03:22:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed the signature for `windowed` included `seq`, i.e. `windowed(seq, ...)`.   I consider sequences to be \"sliceable iterables\", so I think the correct name should be iterable instead, i.e. `windowed(iterable, ...)`.\r\n\r\nFrom Python docs:\r\n\r\n*sequence*\r\n\r\n> An iterable which supports efficient **element access using integer indices via the __getitem__()** special method and defines a len() method that returns the length of the sequence. Some built-in sequence types are list, str, tuple, and unicode. Note that **dict also supports __getitem__() and __len__(), but is considered a mapping rather than a sequence** because the lookups use arbitrary immutable keys rather than integers.\r\n\r\n\r\n*iterable*\r\n\r\n> An object capable of returning its members one at a time. Examples of **iterables include all sequence types (such as list, str, and tuple) and some non-sequence types like dict**, file objects, and objects of any classes you define with an __iter__() method or with a __getitem__() method that implements Sequence semantics.\r\n\r\nThe reason I bring this up is because `sliced` requires a sequence (as well as certain Python builtins that exclude general iterables).  Since `windowed` can also be applied to non-sequences (e.g. dicts), `iterable` seems the appropriate variable name, consistent with other patterns in the source.\r\n\r\nAs far as I can tell, changing the name has no negative effect on the code as the iterable is made into an iterator and used no where else.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/164", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/164/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/164/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/164", "id": 263398423, "node_id": "MDU6SXNzdWUyNjMzOTg0MjM=", "number": 164, "title": "always_iterable treats dict as iterable", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-06T10:14:50Z", "updated_at": "2017-11-04T22:53:40Z", "closed_at": "2017-11-04T22:53:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm finally getting around to reconciling `always_iterable` in [jaraco.itertools](/jaraco/jaraco.itertools), as contributed to this project in #37 and #108.\r\n\r\nIn September last year, I discovered that one would be unlikely to want to iterate over a dictionary (or other Mapping) when using `always_iterable`, so in [jaraco.itertools 2.0](http://jaracoitertools.readthedocs.io/en/latest/history.html#id2), Mappings were treated as non-iterable. The reasoning, as [found in the docs](http://jaracoitertools.readthedocs.io/en/latest/#jaraco.itertools.always_iterable), is that a dictionary is likely to be intended as a single object rather than a sequence of keys, but also that one can readily pass iter(dict) or dict.keys() if one does want the value to be treated as iterable.\r\n\r\nIn order for more_itertools.more.always_iterable to supplant jaraco.itertools.always_iterable, I'd like for more_itertools to adopt this behavior as well.\r\n\r\nWhat do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/161", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/161/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/161/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/161", "id": 253459592, "node_id": "MDU6SXNzdWUyNTM0NTk1OTI=", "number": 161, "title": "`lstrip` vs. `dropwhile`", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-28T21:17:03Z", "updated_at": "2017-08-31T10:38:19Z", "closed_at": "2017-08-31T03:53:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I notice `more_itertools.lstrip` is similar to `itertools.dropwhile`:\r\n\r\n```python\r\nimport itertools as it\r\n\r\nimport more_itertools as mit\r\n\r\n\r\niterable = [0, None, 1, 2, 0, 3, None, 0]\r\npred = lambda x: x in {None, 0}\r\n\r\nlist(mit.lstrip(iterable, pred))\r\n# [1, 2, 0, 3, None, 0]\r\n\r\nlist(it.dropwhile(pred, iterable))\r\n# [1, 2, 0, 3, None, 0]\r\n```\r\n\r\nI recall `lstrip` is a derivative of `strip`, but It may be worth noting in the docstring the similarity between `lstrip` and `dropwhile` (see #122).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/155", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/155/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/155/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/155", "id": 250073947, "node_id": "MDU6SXNzdWUyNTAwNzM5NDc=", "number": 155, "title": "ilen returns zero inside lambda", "user": {"login": "pmatos", "id": 7911, "node_id": "MDQ6VXNlcjc5MTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmatos", "html_url": "https://github.com/pmatos", "followers_url": "https://api.github.com/users/pmatos/followers", "following_url": "https://api.github.com/users/pmatos/following{/other_user}", "gists_url": "https://api.github.com/users/pmatos/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmatos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmatos/subscriptions", "organizations_url": "https://api.github.com/users/pmatos/orgs", "repos_url": "https://api.github.com/users/pmatos/repos", "events_url": "https://api.github.com/users/pmatos/events{/privacy}", "received_events_url": "https://api.github.com/users/pmatos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-14T15:52:48Z", "updated_at": "2017-08-14T15:55:43Z", "closed_at": "2017-08-14T15:55:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am slightly confused but it seems there might be either a bug of some kind (possibly related to `more-itertools`) or a misunderstanding on my part.\r\n\r\nUnder python `3.6` shell:\r\n```\r\n>>> from itertools import islice\r\n>>> from more_itertools import ilen\r\n>>> iterable = [0, 40, 20, 30]\r\n>>> ilen(iterable)\r\n4\r\n>>> i = 0\r\n>>> slicesz=2\r\n>>> slc = islice(iterable, i, slicesz)\r\n>>> slc\r\n<itertools.islice object at 0x7fce0964c728>\r\n>>> ilen(slc)\r\n2\r\n>>> avg = lambda l: sum(l)/ilen(l)\r\n>>> avg(slc)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<stdin>\", line 1, in <lambda>\r\nZeroDivisionError: division by zero\r\n```\r\n\r\nHow can `ilen` return zero inside the `lambda`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/154", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/154/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/154/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/154", "id": 248559386, "node_id": "MDU6SXNzdWUyNDg1NTkzODY=", "number": 154, "title": "No `StopIteration` in `peekable`", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-07T23:30:16Z", "updated_at": "2017-08-08T14:21:16Z", "closed_at": "2017-08-08T14:21:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I expect the following `peekable` code to raise a `StopIteration` error, but it runs without warning:\r\n\r\n```python\r\niterable = \"A B C\".split()\r\np = mit.peekable(iterable)\r\n\r\nwhile p:\r\n    line = next(p)\r\n    print(line, end=\" \")\r\n# A B C \r\n```\r\n\r\nBy comparison, most iterators and generators I've tried raise an error:\r\n\r\n```python\r\niterable = \"A B C\".split()\r\np = iter(iterable)\r\n\r\nwhile p:\r\n    line = next(p)\r\n    print(line, end=\" \")\r\n```\r\n Output\r\n```\r\nA B C \r\n---------------------------------------------------------------------------\r\nStopIteration                             Traceback (most recent call last)\r\n<ipython-input-67-fe7c490ca45a> in <module>()\r\n      3 \r\n      4 while p:\r\n----> 5     line = next(p)\r\n      6     print(line, end=\" \")\r\n\r\nStopIteration:\r\n```\r\n\r\nNote, if replaced with `while True`, the `StopIteration` is raised as expected.   However, the sudden ending of the while loop in the first example seems like a bug as it is unclear why the loop ended.  I understand the `peek` method has an exception handler, although this method it is not directly called in the former example.  \r\n\r\nBefore investigating further, regarding the first example:\r\n\r\n1. Is it intended behavior for `peekable` not to raise a `StopIteration`?\r\n1. If so, what signals the `while` loop to end?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/151", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/151/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/151/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/151", "id": 237707282, "node_id": "MDU6SXNzdWUyMzc3MDcyODI=", "number": 151, "title": "Intersperse every n items", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-22T01:23:10Z", "updated_at": "2017-06-30T02:38:18Z", "closed_at": "2017-06-30T02:38:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "From [this SO post][1], given \r\n\r\n```python\r\nnumber = 123456789012345678901234567890\r\nexpected = \"12345 67890 12345 67890 12345 67890\"\r\n```\r\n\r\nThis looks like an opportunity for `interspearse`.  However, the present implementation \"injects\" (actually zips) one unique element between every element of the iterable.  I propose modifying `interspearse`  to inject an element between every n elements, e.g. a space every 5 characters in the `expected` string.\r\n\r\nHere is a quick modification to  [the `intersperse` code][3] adding an `n` keyword argument:\r\n\r\n```python\r\nimport itertools\r\n\r\nimport more_itertools as mit\r\n\r\n\r\ndef intersperse(e, iterable, n=1):\r\n    it = iter(mit.chunked(iterable, n))                    # dependency \r\n    filler = itertools.repeat(e)         \r\n    zipped = mit.collapse(zip(filler, it))                 # dependency\r\n    next(zipped)\r\n    return zipped\r\n```\r\n\r\nResults\r\n\r\n```python\r\nprint(list(intersperse('x', 'ABCD')))\r\nprint(list(intersperse('x', 'ABCD', 2)))\r\n# ['A', 'x', 'B', 'x', 'C', 'x', 'D']\r\n# ['A', 'B', 'x', 'C', 'D']\r\n\r\n\r\nprint(list(intersperse(None, [1,2,3])))\r\nprint(list(intersperse(None, [1,2,3], 2)))\r\n# [1, None, 2, None, 3]\r\n# [1, 2, None, 3]\r\n\r\nprint(\"\".join(intersperse(\" \", str(number), 5)))\r\n# 12345 67890 12345 67890 12345 67890\r\n\r\n```\r\nThese are minor changes, i.e. adding `chunked` and substituting `flatten` with `collapse`.  The downside is that this modified implementation depends on other tools.  I imagine the hope is to keep new recipes independent.   Before proceeding, are there any thoughts on adding a keyword, suggestions for a different implementation or desire to keep as is?\r\n\r\nRelated posts\r\n- [Insert element in Python list after every nth element][5]\r\n- [Pythonic way to insert every 2 elements in a string][6]\r\n- [How do I insert a space after a certain amount of characters ...][8]\r\n- [Python - How to add space on each 3 characters?][7]\r\n- [Merge lists in Python by placing every nth item ...][2]\r\n\r\n\r\n[1]: https://stackoverflow.com/questions/21196761/python-how-to-print-space-per-nth-char/21197057#21197057\r\n[2]: https://stackoverflow.com/questions/34692738/merge-lists-in-python-by-placing-every-nth-item-from-one-list-and-others-from-an\r\n[3]: https://github.com/erikrose/more-itertools/blob/master/more_itertools/more.py#L498\r\n[5]: https://stackoverflow.com/questions/31040525/insert-element-in-python-list-after-every-nth-element\r\n[6]: https://stackoverflow.com/questions/3258573/pythonic-way-to-insert-every-2-elements-in-a-string\r\n[7]: https://stackoverflow.com/questions/15254195/python-how-to-add-space-on-each-3-characters\r\n[8]: https://stackoverflow.com/questions/10070434/how-do-i-insert-a-space-after-a-certain-amount-of-characters-in-a-string-using-p", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/143", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/143/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/143/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/143", "id": 231054236, "node_id": "MDU6SXNzdWUyMzEwNTQyMzY=", "number": 143, "title": "ReST on PyPI page not rendering", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-05-24T14:13:11Z", "updated_at": "2017-05-25T02:12:19Z", "closed_at": "2017-05-25T02:12:19Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "https://pypi.python.org/pypi/more-itertools/ is showing the raw restructured text source code, not rendered HTML. Maybe a syntax error somewhere?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/142", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/142/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/142/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/142", "id": 230913603, "node_id": "MDU6SXNzdWUyMzA5MTM2MDM=", "number": 142, "title": "Functional Programming", "user": {"login": "BebeSparkelSparkel", "id": 10747532, "node_id": "MDQ6VXNlcjEwNzQ3NTMy", "avatar_url": "https://avatars2.githubusercontent.com/u/10747532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BebeSparkelSparkel", "html_url": "https://github.com/BebeSparkelSparkel", "followers_url": "https://api.github.com/users/BebeSparkelSparkel/followers", "following_url": "https://api.github.com/users/BebeSparkelSparkel/following{/other_user}", "gists_url": "https://api.github.com/users/BebeSparkelSparkel/gists{/gist_id}", "starred_url": "https://api.github.com/users/BebeSparkelSparkel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BebeSparkelSparkel/subscriptions", "organizations_url": "https://api.github.com/users/BebeSparkelSparkel/orgs", "repos_url": "https://api.github.com/users/BebeSparkelSparkel/repos", "events_url": "https://api.github.com/users/BebeSparkelSparkel/events{/privacy}", "received_events_url": "https://api.github.com/users/BebeSparkelSparkel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-24T03:55:47Z", "updated_at": "2017-06-01T18:11:44Z", "closed_at": "2017-06-01T02:21:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been looking for a good python functional programming library for a while now. [PyFunctional](https://github.com/EntilZha/PyFunctional) is an ok start but is lacking a lot of features that I would expect from a functional library. Most importantly it does not make reusable pipes meaning combined functions cannot be used more than once, which isn't good if the pipe is going to be used a lot.\r\nDo you know of any libraries that do allow reusable pipes?\r\nI also think that the functionality of more-itertools would be amazing if we could add them to the PyFunctional package or do something similar.\r\nLet me know what you think!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/139", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/139/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/139/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/139", "id": 229533247, "node_id": "MDU6SXNzdWUyMjk1MzMyNDc=", "number": 139, "title": "nth item", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-18T01:51:01Z", "updated_at": "2018-03-12T21:24:40Z", "closed_at": "2017-05-21T22:10:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I came across [this recipe](http://stackoverflow.com/a/8337489/4531270) by R. Hettinger:\r\n\r\n```python\r\n>>> x = [False,True,True,False,True,False,True,False,False,False,True,False,True]\r\n>>> nth_item(50, True, x)\r\n-1\r\n>>> nth_item(0, True, x)\r\n1\r\n>>> nth_item(1, True, x)\r\n2\r\n>>> nth_item(2, True, x)\r\n4\r\n>>> nth_item(3, True, x)\r\n6\r\n```\r\n\r\nCode\r\n\r\n```python\r\n>>> from itertools import compress, count, imap, islice\r\n>>> from functools import partial\r\n>>> from operator import eq\r\n\r\n>>> def nth_item(n, item, iterable):\r\n        indicies = compress(count(), imap(partial(eq, item), iterable))\r\n        return next(islice(indicies, n, None), -1)\r\n```\r\n\r\nI thought this may be a useful addition.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/136", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/136/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/136/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/136", "id": 228473113, "node_id": "MDU6SXNzdWUyMjg0NzMxMTM=", "number": 136, "title": "numeric_range with one argument", "user": {"login": "MSeifert04", "id": 14200878, "node_id": "MDQ6VXNlcjE0MjAwODc4", "avatar_url": "https://avatars2.githubusercontent.com/u/14200878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MSeifert04", "html_url": "https://github.com/MSeifert04", "followers_url": "https://api.github.com/users/MSeifert04/followers", "following_url": "https://api.github.com/users/MSeifert04/following{/other_user}", "gists_url": "https://api.github.com/users/MSeifert04/gists{/gist_id}", "starred_url": "https://api.github.com/users/MSeifert04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MSeifert04/subscriptions", "organizations_url": "https://api.github.com/users/MSeifert04/orgs", "repos_url": "https://api.github.com/users/MSeifert04/repos", "events_url": "https://api.github.com/users/MSeifert04/events{/privacy}", "received_events_url": "https://api.github.com/users/MSeifert04/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-05-13T13:24:01Z", "updated_at": "2017-05-13T19:48:07Z", "closed_at": "2017-05-13T19:48:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there any use-case for `numeric_range` with only one argument? It seems the type of the objects that are returned are solely depending on the `type` of `start` and `step`. \r\n\r\nWhen only `stop` is given (even if I use `float`s or `Decimal` as `stop`) it will always return integers. And it's a lot slower than `range`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/130", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/130/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/130/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/130", "id": 227013625, "node_id": "MDU6SXNzdWUyMjcwMTM2MjU=", "number": 130, "title": "Installation and examples in README", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-08T11:13:00Z", "updated_at": "2017-05-13T16:51:38Z", "closed_at": "2017-05-13T16:51:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I suspect the README is the first (and often the only) stop from visitors to most packages.  Through the visitor's lens, I observe the following:\r\n\r\nFirst, it's actually not clear how to install the package (from either the README or the docs).  I propose **adding a line on installation to the README**.\r\n\r\n...\r\n## Installation\r\n    > pip install more_itertools\r\n...\r\n\r\nSecond,  right now the first tool in the API docs is the new `more_itertools.adjacent`, which has a heavier docstring than traditional ones.  IMO, seeing this much text for the first tool is less inviting to newcomers trying to quickly figure out what this package does.  I suggest **adding a couple elegant examples to the README**, maybe a recipe and original, e.g. `flatten` and `chunked`.  \r\n\r\n...\r\n## Examples\r\n\r\n```python\r\n>>> import more_itertools as mit\r\n\r\n# Itertools Recipe\r\n>>> list(mit.flatten([[0, 1], [2, 3]]))\r\n[0, 1, 2, 3]\r\n\r\n# More-Itertools Original\r\n>>> list(mit.chunked([1, 2, 3, 4, 5, 6, 7], 3))\r\n[[1, 2, 3], [4, 5, 6], [7]]\r\n\r\n```\r\n...\r\n\r\nThe idea is to succinctly demonstrate up front that this package is a simple extension of `itertools`, and it is easy to use.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/129", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/129/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/129/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/129", "id": 224535474, "node_id": "MDU6SXNzdWUyMjQ1MzU0NzQ=", "number": 129, "title": "Combine peekable with spy", "user": {"login": "WilliamRusnackAtFord", "id": 27786955, "node_id": "MDQ6VXNlcjI3Nzg2OTU1", "avatar_url": "https://avatars2.githubusercontent.com/u/27786955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WilliamRusnackAtFord", "html_url": "https://github.com/WilliamRusnackAtFord", "followers_url": "https://api.github.com/users/WilliamRusnackAtFord/followers", "following_url": "https://api.github.com/users/WilliamRusnackAtFord/following{/other_user}", "gists_url": "https://api.github.com/users/WilliamRusnackAtFord/gists{/gist_id}", "starred_url": "https://api.github.com/users/WilliamRusnackAtFord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WilliamRusnackAtFord/subscriptions", "organizations_url": "https://api.github.com/users/WilliamRusnackAtFord/orgs", "repos_url": "https://api.github.com/users/WilliamRusnackAtFord/repos", "events_url": "https://api.github.com/users/WilliamRusnackAtFord/events{/privacy}", "received_events_url": "https://api.github.com/users/WilliamRusnackAtFord/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-26T17:00:00Z", "updated_at": "2017-04-26T21:24:12Z", "closed_at": "2017-04-26T21:24:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I like how peekable can look ahead and modify without affecting it's iterator and I like how spy can look ahead more than one.\r\n\r\nIt would be really nice if I could specify how many I want to look ahead with peek.\r\n\r\n```python\r\n>>> a = peekable((1,2,3,4,5))\r\n>>> a.peek(2)\r\n2\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/126", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/126/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/126/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/126", "id": 223370230, "node_id": "MDU6SXNzdWUyMjMzNzAyMzA=", "number": 126, "title": "range for floats", "user": {"login": "BebeSparkelSparkel", "id": 10747532, "node_id": "MDQ6VXNlcjEwNzQ3NTMy", "avatar_url": "https://avatars2.githubusercontent.com/u/10747532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BebeSparkelSparkel", "html_url": "https://github.com/BebeSparkelSparkel", "followers_url": "https://api.github.com/users/BebeSparkelSparkel/followers", "following_url": "https://api.github.com/users/BebeSparkelSparkel/following{/other_user}", "gists_url": "https://api.github.com/users/BebeSparkelSparkel/gists{/gist_id}", "starred_url": "https://api.github.com/users/BebeSparkelSparkel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BebeSparkelSparkel/subscriptions", "organizations_url": "https://api.github.com/users/BebeSparkelSparkel/orgs", "repos_url": "https://api.github.com/users/BebeSparkelSparkel/repos", "events_url": "https://api.github.com/users/BebeSparkelSparkel/events{/privacy}", "received_events_url": "https://api.github.com/users/BebeSparkelSparkel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-04-21T12:34:39Z", "updated_at": "2017-04-22T15:49:20Z", "closed_at": "2017-04-22T15:49:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I didn't see a float range function in the library so frange could be helpful. I also used the recommendation from itertools.count to reduce float error.\r\n\r\n> When counting with floating point numbers, better accuracy can sometimes be achieved by substituting multiplicative code such as: `(start + step * i for i in count())`.\r\n\r\n```python\r\nimport itertools, operator\r\n\r\n# frange(stop)\r\n# frange(start, stop[, step])\r\ndef frange(*args):\r\n  if len(args) == 1:\r\n    start = 0\r\n    stop = args[0]\r\n    step = 1\r\n  elif len(args) == 2:\r\n    start, stop = args\r\n    step = 1\r\n  elif len(args) == 3:\r\n    start, stop, step = args\r\n  else:\r\n    raise TypeError('frange expected at most 1 - 3 arguments, got {}.'.format(len(args)))\r\n\r\n  if start < stop and 0 < step:\r\n    compare_with = operator.lt\r\n  elif start > stop and 0 > step:\r\n    compare_with = operator.gt\r\n  else:\r\n    return\r\n\r\n  compare_with = operator.lt if start < stop else operator.gt\r\n\r\n  for step_count in itertools.count():\r\n    val = start + step * step_count\r\n    if compare_with(val, stop):\r\n      yield val\r\n    else:\r\n      break\r\n\r\n\r\nimport unittest\r\n\r\nclass Testfrange(unittest.TestCase):\r\n  def test_frange(self):\r\n    self.assertEqual(\r\n        tuple(frange(5)),\r\n        tuple( range(5))\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(frange(-5)),\r\n        tuple( range(-5))\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(frange(2, 5)),\r\n        tuple( range(2, 5))\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(frange(2, 10, 2)),\r\n        tuple( range(2, 10, 2))\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(frange(2, -5)),\r\n        tuple( range(2, -5))\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(frange(2, -10, -2)),\r\n        tuple( range(2, -10, -2))\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(frange(2, 10, -2)),\r\n        tuple( range(2, 10, -2))\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(frange(2, -10, 2)),\r\n        tuple( range(2, -10, 2))\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(frange(2.5, 4, 0.5)),\r\n        (2.5, 3, 3.5)\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(frange(2.5, 4.1, 0.5)),\r\n        (2.5, 3, 3.5, 4)\r\n      )\r\n\r\n    with self.assertRaises(TypeError):\r\n      tuple(frange())\r\n\r\n    with self.assertRaises(TypeError):\r\n      tuple(frange(1, 2, 3, 4))\r\n\r\n\r\nif __name__ == '__main__':\r\n  unittest.main()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/125", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/125/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/125/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/125", "id": 223112816, "node_id": "MDU6SXNzdWUyMjMxMTI4MTY=", "number": 125, "title": "cycle with cycle count", "user": {"login": "BebeSparkelSparkel", "id": 10747532, "node_id": "MDQ6VXNlcjEwNzQ3NTMy", "avatar_url": "https://avatars2.githubusercontent.com/u/10747532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BebeSparkelSparkel", "html_url": "https://github.com/BebeSparkelSparkel", "followers_url": "https://api.github.com/users/BebeSparkelSparkel/followers", "following_url": "https://api.github.com/users/BebeSparkelSparkel/following{/other_user}", "gists_url": "https://api.github.com/users/BebeSparkelSparkel/gists{/gist_id}", "starred_url": "https://api.github.com/users/BebeSparkelSparkel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BebeSparkelSparkel/subscriptions", "organizations_url": "https://api.github.com/users/BebeSparkelSparkel/orgs", "repos_url": "https://api.github.com/users/BebeSparkelSparkel/repos", "events_url": "https://api.github.com/users/BebeSparkelSparkel/events{/privacy}", "received_events_url": "https://api.github.com/users/BebeSparkelSparkel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-04-20T15:46:38Z", "updated_at": "2017-04-22T16:21:49Z", "closed_at": "2017-04-22T16:21:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I just found your more-itertools library and really like what's in it. I stumbled upon this because I was looking for an iterator similar to itertools.cycle that also gives the number of cycles that have been given, (cycle count, object).\r\n\r\nI have created this and think that it would be a good addition to your package. Let me know if you want this incorporated to the package.\r\n\r\n```python\r\nfrom itertools import cycle\r\n\r\ndef count_cycle(iterable):\r\n  '''\r\n  similar to itertools.cycle but give the number of cycles that\r\n  have already been given\r\n  '''\r\n  iterable = cycle(iterable)\r\n  count = 0\r\n\r\n  first = next(iterable)\r\n  first_id = id(first)\r\n\r\n  yield count, first\r\n\r\n  for item in iterable:\r\n    if id(item) == first_id:\r\n      count += 1\r\n\r\n    yield count, item\r\n\r\n\r\nimport unittest\r\n\r\nclass TestCycleCount(unittest.TestCase):\r\n  def test_count_cycle(self):\r\n    self.assertEqual(\r\n        tuple(count_cycle(())),\r\n        ()\r\n      )\r\n\r\n    self.assertEqual(\r\n        tuple(cc for i, cc in zip(range(9), count_cycle(range(3)))),\r\n        ((0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2))\r\n      )\r\n\r\nif __name__ == '__main__':\r\n  unittest.main()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/124", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/124/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/124/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/124", "id": 219708614, "node_id": "MDU6SXNzdWUyMTk3MDg2MTQ=", "number": 124, "title": "add empty or has method to peekable class", "user": {"login": "apatrushev", "id": 248408, "node_id": "MDQ6VXNlcjI0ODQwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/248408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apatrushev", "html_url": "https://github.com/apatrushev", "followers_url": "https://api.github.com/users/apatrushev/followers", "following_url": "https://api.github.com/users/apatrushev/following{/other_user}", "gists_url": "https://api.github.com/users/apatrushev/gists{/gist_id}", "starred_url": "https://api.github.com/users/apatrushev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apatrushev/subscriptions", "organizations_url": "https://api.github.com/users/apatrushev/orgs", "repos_url": "https://api.github.com/users/apatrushev/repos", "events_url": "https://api.github.com/users/apatrushev/events{/privacy}", "received_events_url": "https://api.github.com/users/apatrushev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-05T20:41:57Z", "updated_at": "2017-04-05T21:07:22Z", "closed_at": "2017-04-05T21:07:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Usually it is good to check have you anything in peekable as part of more complex checks.\r\nFor example:\r\n```python\r\nwhile p.peek(None) is not None and p.peek().type == 1:\r\n```\r\nWill be shorter and more readable as:\r\n```python\r\nwhile not p.empty() and p.peek().type == 1:\r\n```\r\nor even:\r\n```python\r\nwhile p.has() and p.peek().type == 1:\r\n# === variant\r\nwhile p.more() and p.peek().type == 1:\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/122", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/122/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/122/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/122", "id": 218733276, "node_id": "MDU6SXNzdWUyMTg3MzMyNzY=", "number": 122, "title": "`roundrobin` vs. `interleave_longest`", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-02T00:52:15Z", "updated_at": "2017-04-02T18:32:21Z", "closed_at": "2017-04-02T18:32:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently while looking at the recipes, I noticed  [`robinrobin`][1] gives similar results to [`interleave_longest`][2]:\r\n\r\n```python\r\nimport more_itertools as mit\r\n\r\niterables = ['ABC', 'D', 'EF']\r\n\r\nlist(mit.roundrobin(*iterables))\r\n# ['A', 'D', 'E', 'B', 'F', 'C']\r\n\r\nlist(mit.interleave_longest(*iterables))\r\n# ['A', 'D', 'E', 'B', 'F', 'C']\r\n```\r\n\r\nI realize `interleave_longest` was discussed among other items in #22, but it seems it's similarity to an existing recipe may have been overlooked.  Is there a rationale for keeping both tools?  \r\n\r\n  [1]: https://github.com/erikrose/more-itertools/blob/master/more_itertools/recipes.py#L256-L275\r\n  [2]: https://github.com/erikrose/more-itertools/blob/master/more_itertools/more.py#L701-L711", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/121", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/121/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/121/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/121", "id": 218656402, "node_id": "MDU6SXNzdWUyMTg2NTY0MDI=", "number": 121, "title": "The new `context` itertool is bad", "user": {"login": "NeilGirdhar", "id": 730137, "node_id": "MDQ6VXNlcjczMDEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/730137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeilGirdhar", "html_url": "https://github.com/NeilGirdhar", "followers_url": "https://api.github.com/users/NeilGirdhar/followers", "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}", "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions", "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs", "repos_url": "https://api.github.com/users/NeilGirdhar/repos", "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}", "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2017-04-01T01:29:53Z", "updated_at": "2017-04-02T18:33:59Z", "closed_at": "2017-04-02T18:33:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "The new `context` itertool tries to expose a context manager as an iterable.  This breaks the context manager manager guarantee that `__exit__` will be called.  It's not enough to tell the caller that he has to iterate over the whole iterable.  Even if there are no `break` or `return` statements in the loop, there is always the possibility of exceptions.  The whole point of context managers is to guarantee that the `__exit__` is always called when a block terminates.  This is why context managers and iterables are orthogonal concepts; in general, one cannot be made to look like the other.\r\n\r\nPlease remove `context` because it encourages people to write bad code.\r\n\r\nThere is no benefit to `context` in any case.  Even the motivating example in the documentation is just:\r\n```\r\nconsume(print(x, file=f) for f in context(file_obj) for x in it)\r\n```\r\nwhich can be written just as succinctly\r\n```\r\nwith file_obj as f:\r\n    consume(print(x, file=f) for x in it)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/116", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/116/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/116/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/116", "id": 211119687, "node_id": "MDU6SXNzdWUyMTExMTk2ODc=", "number": 116, "title": "ilen() is slow", "user": {"login": "wbolster", "id": 748944, "node_id": "MDQ6VXNlcjc0ODk0NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/748944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wbolster", "html_url": "https://github.com/wbolster", "followers_url": "https://api.github.com/users/wbolster/followers", "following_url": "https://api.github.com/users/wbolster/following{/other_user}", "gists_url": "https://api.github.com/users/wbolster/gists{/gist_id}", "starred_url": "https://api.github.com/users/wbolster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wbolster/subscriptions", "organizations_url": "https://api.github.com/users/wbolster/orgs", "repos_url": "https://api.github.com/users/wbolster/repos", "events_url": "https://api.github.com/users/wbolster/events{/privacy}", "received_events_url": "https://api.github.com/users/wbolster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-01T15:43:43Z", "updated_at": "2017-03-04T13:48:15Z", "closed_at": "2017-03-04T13:48:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "you may want to steal the `cardinality.count()` implementation from\r\nhttps://github.com/wbolster/cardinality  ;)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/114", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/114/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/114/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/114", "id": 209632819, "node_id": "MDU6SXNzdWUyMDk2MzI4MTk=", "number": 114, "title": "Consider making side_effect(file_obj=) arg more generic", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-02-23T01:15:41Z", "updated_at": "2017-03-21T13:10:22Z", "closed_at": "2017-03-21T13:10:22Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Closing a file after yielding its last line is all well and good, but I wonder: can we be more general and add power without losing much brevity?\r\n\r\n```python\r\nside_effect(log, some_file, last=lambda: some_file.close())\r\n```\r\n\r\n```python\r\nside_effect(ingest, listdir(some_dir), last=lambda: rmtree(some_dir))\r\n```\r\n\r\n@bbayles? @yardsale8?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/109", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/109/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/109/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/109", "id": 205084062, "node_id": "MDU6SXNzdWUyMDUwODQwNjI=", "number": 109, "title": "Tool suggestion: identify elements adjacent to those matching a predicate", "user": {"login": "diazona", "id": 615345, "node_id": "MDQ6VXNlcjYxNTM0NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/615345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diazona", "html_url": "https://github.com/diazona", "followers_url": "https://api.github.com/users/diazona/followers", "following_url": "https://api.github.com/users/diazona/following{/other_user}", "gists_url": "https://api.github.com/users/diazona/gists{/gist_id}", "starred_url": "https://api.github.com/users/diazona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diazona/subscriptions", "organizations_url": "https://api.github.com/users/diazona/orgs", "repos_url": "https://api.github.com/users/diazona/repos", "events_url": "https://api.github.com/users/diazona/events{/privacy}", "received_events_url": "https://api.github.com/users/diazona/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-03T06:44:00Z", "updated_at": "2017-02-20T00:58:39Z", "closed_at": "2017-02-20T00:58:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just came up with another function that I don't _think_ already exists and might make a useful addition to more-itertools: identifying elements in an iterable that match a predicate or are adjacent to those matching a predicate. As a stupid (but simple) example, suppose I want to detect which letters are vowels or adjacent to vowels in a word. The design I have in mind returns a tuple for each element in the iterable with a boolean indicating whether it is or is adjacent to a \"selected\" element, as well as the element itself.\r\n```python console\r\n>>> list(adjacent(lambda c: c in 'aeiou', 'thursday'))\r\n[(False, 't'), (True, 'h'), (True, 'u'), (True, 'r'), (False, 's'), (True, 'd'), (True, 'a'), (True, 'y')]\r\n```\r\nIn my application it's important to know where the (equivalents of the) vowel-centered groups end and begin, in addition to knowing which elements are in those groups, so I pass the result of `adjacent()` through `groupby()`. (This is akin to choosing context lines in a differ.) If I wanted an iterable of just `['h', 'u', 'r', 'd', 'a', 'y']` in that example, I could use instead use `filter()` and `map()` or a generator, i.e. `(e[1] for e in adjacent(...) if e[0])`. I think this flexibility is important.\r\n\r\nThe question I want to bring up before sending in a pull request is how to generalize this. My base implementation is the following:\r\n```python\r\ndef adjacent(predicate, iterable):\r\n    i1, i2 = tee(iterable)\r\n    selected = chain([False], map(predicate, i1), [False])\r\n    adjacent = map(any, windowed(selected, 3))\r\n    return zip(adjacent, i2)\r\n```\r\n(designed to avoid calling `predicate()` more than once per item) It's easy enough to change the number of elements of \"context\" by increasing the second argument to `windowed()`, and that would be a straightforward generalization. Is it also worthwhile to support arbitrary \"masks\" by using `stagger()` instead of `windowed()`? E.g. passing `offsets=(-1, 1)` to \"mark\" only elements which are before or after those which satisfy the predicate, leaving out the ones which do satisfy the predicate themselves? Or `offsets=(0,1,2)` to \"mark\" items which satisfy the predicate and the two that follow them?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/106", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/106/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/106/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/106", "id": 200853837, "node_id": "MDU6SXNzdWUyMDA4NTM4Mzc=", "number": 106, "title": "Request: pushback", "user": {"login": "diazona", "id": 615345, "node_id": "MDQ6VXNlcjYxNTM0NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/615345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diazona", "html_url": "https://github.com/diazona", "followers_url": "https://api.github.com/users/diazona/followers", "following_url": "https://api.github.com/users/diazona/following{/other_user}", "gists_url": "https://api.github.com/users/diazona/gists{/gist_id}", "starred_url": "https://api.github.com/users/diazona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diazona/subscriptions", "organizations_url": "https://api.github.com/users/diazona/orgs", "repos_url": "https://api.github.com/users/diazona/repos", "events_url": "https://api.github.com/users/diazona/events{/privacy}", "received_events_url": "https://api.github.com/users/diazona/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-01-15T07:19:07Z", "updated_at": "2017-01-20T19:39:06Z", "closed_at": "2017-01-20T19:39:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to suggest adding a wrapper that allows pushing a value back on to an iterator, so that the next call to `next(it)` will return the pushed value before the next element from the underlying iterable. I find myself wanting this from time to time (usually in parsing applications), and I could have sworn it was implemented somewhere standard, but I looked around and couldn't find it. Would this be a good addition to more-itertools?\r\n\r\nI do have code to offer, but I'm posing this as an issue instead of a pull request because I have a dilemma. I've come up with two implementations, one [as a generator function](https://github.com/diazona/more-itertools/tree/pushback_function)\r\n```python\r\ndef pushback(iterable, maxlen=None):\r\n    iterable = iter(iterable)\r\n    # add 1 to account for the append(None)\r\n    stack = deque(maxlen=maxlen + 1 if maxlen is not None else None)\r\n    while True:\r\n        if stack:\r\n            e = stack.pop()\r\n        else:\r\n            e = next(iterable)\r\n        sent = yield e\r\n        if sent is not None:\r\n            stack.append(sent)\r\n            stack.append(None) # dummy value to return from send()\r\n```\r\nand the other [as a class](https://github.com/diazona/more-itertools/tree/pushback_class)\r\n```python\r\nclass pushback:\r\n    def __init__(self, iterable, maxlen=None):\r\n        self.iterable = iter(iterable)\r\n        self.stack = deque(maxlen=maxlen)\r\n    def __iter__(self):\r\n        return self\r\n    def __next__(self):\r\n        return self.stack.pop() if self.stack else next(self.iterable)\r\n    def send(self, value):\r\n        self.stack.append(value)\r\n```\r\nThe function implementation is about twice as fast in my preliminary tests (using IPython)\r\n```\r\nIn [13]: %timeit list(pushback_function(range(10)))\r\n100000 loops, best of 3: 5.45 \u00b5s per loop\r\nIn [14]: %timeit list(pushback_class(range(10)))\r\n100000 loops, best of 3: 10.8 \u00b5s per loop\r\n```\r\nOn the other hand the class implementation is conceptually cleaner, and also does not need to be \"primed\" by calling `next(it)` before sending in a value with `it.send(x)`.\r\n\r\nNow, in most cases, you can prime the generator iterator without losing an item by running `it.send(next(it))`, and that could be done in a wrapper function to make it transparent to client code. But only the class implementation allows pushing in front of an empty iterable (admittedly a rather pathological use case):\r\n```python console\r\n>>> it = pushback([])\r\n>>> it.send(10)\r\n>>> list(it)\r\n[10]\r\n```\r\nSo my point is: if this is something you want for more-itertools, which implementation to use? Or is there a way to \"fix\" one of them to make it strictly better than the other, that I'm not seeing? (Or does this whole thing already exist and I wasted an evening?)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/100", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/100/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/100/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/100", "id": 197619507, "node_id": "MDU6SXNzdWUxOTc2MTk1MDc=", "number": 100, "title": "Request: Sort iterables by", "user": {"login": "clintval", "id": 4634699, "node_id": "MDQ6VXNlcjQ2MzQ2OTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4634699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clintval", "html_url": "https://github.com/clintval", "followers_url": "https://api.github.com/users/clintval/followers", "following_url": "https://api.github.com/users/clintval/following{/other_user}", "gists_url": "https://api.github.com/users/clintval/gists{/gist_id}", "starred_url": "https://api.github.com/users/clintval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clintval/subscriptions", "organizations_url": "https://api.github.com/users/clintval/orgs", "repos_url": "https://api.github.com/users/clintval/repos", "events_url": "https://api.github.com/users/clintval/events{/privacy}", "received_events_url": "https://api.github.com/users/clintval/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2016-12-26T21:01:07Z", "updated_at": "2017-01-06T10:17:06Z", "closed_at": "2017-01-04T02:39:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not sure if this is a fitting addition to `more-itertools` but it's a method I use quite often. This function sorts iterables using a defined order of priority. So you can sort iterables in concordance with a given sort pattern. I suppose it's tough to explain so here are three examples.\r\n\r\n```python\r\n# Will sort all iterables based on the ascending sort order of the first iterable\r\n>>>sort_iterables_by([['a', 'd', 'c', 'd'], [1, 3, 2, 4]], key_list=(0,))\r\n[('a', 'c', 'd', 'd'), (1, 2, 3, 4)]\r\n\r\n# Will sort all iterables based on the ascending sort order of the first iterable,\r\n# then the second iterable\r\n>>>sort_iterables_by([['d', 'd', 'd', 'c'], [4, 3, 7, 10], [1, 2, 3, 4]],\r\n                      key_list=(0, 1))\r\n[('c', 'd', 'd', 'd'), (10, 3, 4, 7), (4, 2, 1, 3)]\r\n\r\n# Will sort all iterables based on the descending sort order of the first iterable,\r\n# then the second iterable\r\n>>>sort_iterables_by([['a', 'b', 'b'], [1, 3, 2]],\r\n>>>                   key_list=(0, 1),\r\n>>>                   reverse=True))\r\n[('b', 'b', 'a'), (3, 2, 1)]\r\n```\r\nHere is the function I propose\r\n```python\r\nimport operator\r\n\r\ndef sort_iterables_by(iterables, key_list=(0,), reverse=False):\r\n\r\n    return list(zip(*sorted(zip(*iterables),\r\n                            key=operator.itemgetter(*key_list),\r\n                            reverse=reverse)))\r\n```\r\nWhat do you guys think? A useful addition? One remark is that because `zip` is used, iterables are returned trimmed to the length of the shortest iterable before sorting. An alternate form of the function could  be used with `zip_longest` although for lists with heterogeneous objects no fillvalue will make obvious sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport operator\r\nimport itertools\r\n\r\ndef sort_iterables_by(iterables, key_list=(0,), reverse=False, fillvalue=None):\r\n\r\n    return list(zip(*sorted(itertools.zip_longest(*iterables, fillvalue=fillvalue),\r\n                            key=operator.itemgetter(*key_list),\r\n                            reverse=reverse)))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/91", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/91/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/91/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/91", "id": 194806163, "node_id": "MDU6SXNzdWUxOTQ4MDYxNjM=", "number": 91, "title": "FEATURE: Stepped Sliding Window option", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "bbayles", "id": 1922815, "node_id": "MDQ6VXNlcjE5MjI4MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1922815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbayles", "html_url": "https://github.com/bbayles", "followers_url": "https://api.github.com/users/bbayles/followers", "following_url": "https://api.github.com/users/bbayles/following{/other_user}", "gists_url": "https://api.github.com/users/bbayles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbayles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbayles/subscriptions", "organizations_url": "https://api.github.com/users/bbayles/orgs", "repos_url": "https://api.github.com/users/bbayles/repos", "events_url": "https://api.github.com/users/bbayles/events{/privacy}", "received_events_url": "https://api.github.com/users/bbayles/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bbayles", "id": 1922815, "node_id": "MDQ6VXNlcjE5MjI4MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1922815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbayles", "html_url": "https://github.com/bbayles", "followers_url": "https://api.github.com/users/bbayles/followers", "following_url": "https://api.github.com/users/bbayles/following{/other_user}", "gists_url": "https://api.github.com/users/bbayles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbayles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbayles/subscriptions", "organizations_url": "https://api.github.com/users/bbayles/orgs", "repos_url": "https://api.github.com/users/bbayles/repos", "events_url": "https://api.github.com/users/bbayles/events{/privacy}", "received_events_url": "https://api.github.com/users/bbayles/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2016-12-11T01:35:46Z", "updated_at": "2016-12-18T14:27:37Z", "closed_at": "2016-12-18T14:27:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Abstract**\r\n\r\nThis feature request proposes extending functionality in `more_itertools.windowed` by producing windows separated by a given step.\r\n\r\nSliding windows are known for advancing a fixed length from one adjacent item to the next (e.g. `step=1`) continuously.  Can an option be made for implementing larger step sizes?\r\n        \r\n**Example**\r\n\r\n```python\r\n>>> from more_itertools import windowed\r\n\r\n>>> iterable = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n        \r\n# Present: Continuous Sliding\r\n>>> all_windows = windowed(iterable, 3)\r\n>>> list(all_windows)\r\n[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9), (8, 9, 10)]\r\n\r\n# Proposed: Steps\r\n>>> stepped_windows = windowed(iterable, 3, step=2)\r\n>>> list(stepped_windows)\r\n[(1, 2, 3), (3, 4, 5), (5, 6, 7), (7, 8, 9)]\r\n```\r\n\r\nBy default, the iterator returns windows spanning the length of the given iterable.  Therefore, sliding may stop abruptly for windows that are not equally divisible (e.g. leaving out item `10`).  However, if all items in the iterable are desired, there can be an option for including the tail and wrapping the results back to the head, as requested in this [SO Post](https://stackoverflow.com/questions/34359157/group-items-of-a-list-with-a-step-size-python):\r\n\r\n```python       \r\n# Proposed: Steps and Wrapping \r\n>>> stepped_windows = windowed(iterable, 3, step=2, wrap=True)\r\n>>> list(stepped_windows)\r\n[(1, 2, 3), (3, 4, 5), (5, 6, 7), (7, 8, 9), (9, 1, 2)]\r\n```\r\n**Further Considerations**\r\n\r\nI believe I have a working prototype for this implementation with passing unittests and comparable performance times that I can post here if this is a plausible feature and you are interested in further discussion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/88", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/88/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/88/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/88", "id": 193308702, "node_id": "MDU6SXNzdWUxOTMzMDg3MDI=", "number": 88, "title": "Request: Faster `all_equal` for strings", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-12-03T19:30:02Z", "updated_at": "2016-12-06T12:40:46Z", "closed_at": "2016-12-06T12:40:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Observation**\r\n\r\nI understand the code for `all_equal` derives from the [itertools recipe](https://docs.python.org/3/library/itertools.html#itertools-recipes).   This legacy implementation has the benefit of working with generic iterables.  However, I came across this [SO post](http://stackoverflow.com/a/14321721/4531270), which shows an elegant implementation for the same operation on strings, that is, verify all letters in a string are equal.\r\n\r\n```python\r\nimport itertools\r\n\r\nimport more_itertools\r\n\r\ns = \"aaaa\"\r\n\r\n%timeit more_itertools.all_equal(s)\r\n1000000 loops, best of 3: 1.1 \u00b5s per loop\r\n\r\n%timeit s == s[0] * len(s)\r\n1000000 loops, best of 3: 438 ns per loop\r\n```\r\n\r\nWe see the SO algorithm in this case is 2x-3x faster for strings.\r\n\r\n\r\n**Request**\r\n\r\nCan the SO algorithm be included in `more_itertools.all_equal` so that if a string is passed as the argument, this faster algorithm is preferred? \r\n\r\nFor example:\r\n\r\n```python\r\ndef all_equal(iterable):\r\n    \"\"\"\r\n    Returns True if all the elements are equal to each other.\r\n    \r\n    Uses a faster implementation for strings. \r\n    http://stackoverflow.com/a/14321721/4531270\r\n    \r\n        >>> all_equal('aaaa')\r\n        True\r\n        >>> all_equal('aaab')\r\n        False\r\n        >>> all_equal([1,1,1,1])\r\n        True\r\n        >>> all_equal([1,1,1,0])\r\n        False\r\n        \r\n    \"\"\"\r\n    if isinstance(iterable, str):\r\n        s = iterable\r\n        return s == s[0] * len(s)\r\n    g = itertools.groupby(iterable)\r\n    return next(g, True) and not next(g, False)\r\n```\r\n\r\n**Tests**\r\n\r\nMy local tests confirm these results:\r\n\r\n```python\r\n# New algorithm\r\nall_equal(\"aaaa\")\r\n# True\r\nall_equal(\"aaab\")\r\n# False\r\n\r\n# Legacy algorithm\r\nall_equal([1,1,1,1])\r\n# True\r\nall_equal([1,1,1,0])\r\n# False\r\n```\r\n**Performance**\r\n\r\nThere is some improvement in speed over legacy with continued benefits for longer strings.\r\n\r\n```\r\ns = \"a\"*100000\r\n\r\n# Legacy implementation\r\n%timeit -n 1000 more_itertools.all_equal(s)\r\n1000 loops, best of 3: 1.09 ms per loop\r\n    \r\n# Proposed implementation\r\n%timeit -n 1000 all_equal(s)\r\n1000 loops, best of 3: 9.64 \u00b5s per loop\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/87", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/87/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/87/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/87", "id": 192573157, "node_id": "MDU6SXNzdWUxOTI1NzMxNTc=", "number": 87, "title": "`bucket` deprecated?", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-30T14:02:52Z", "updated_at": "2016-11-30T20:13:17Z", "closed_at": "2016-11-30T20:13:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting a error trying to access `bucket`. \r\n\r\n```python\r\n>>> more_itertools.bucket(iterable, key=lambda s: s[0]) \r\n...\r\nAttributeError: module 'more_itertools' has no attribute 'bucket'\r\n```\r\n\r\nHas `bucket` been deprecated?  If so, the [latest docs](https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.bucket) need to be updated.\r\n\r\nSame for `more_itertools.collapse`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/more-itertools/more-itertools/issues/72", "repository_url": "https://api.github.com/repos/more-itertools/more-itertools", "labels_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/72/comments", "events_url": "https://api.github.com/repos/more-itertools/more-itertools/issues/72/events", "html_url": "https://github.com/more-itertools/more-itertools/issues/72", "id": 188918404, "node_id": "MDU6SXNzdWUxODg5MTg0MDQ=", "number": 72, "title": "Version of chunked that emits iterators and not lists", "user": {"login": "bbayles", "id": 1922815, "node_id": "MDQ6VXNlcjE5MjI4MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1922815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbayles", "html_url": "https://github.com/bbayles", "followers_url": "https://api.github.com/users/bbayles/followers", "following_url": "https://api.github.com/users/bbayles/following{/other_user}", "gists_url": "https://api.github.com/users/bbayles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbayles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbayles/subscriptions", "organizations_url": "https://api.github.com/users/bbayles/orgs", "repos_url": "https://api.github.com/users/bbayles/repos", "events_url": "https://api.github.com/users/bbayles/events{/privacy}", "received_events_url": "https://api.github.com/users/bbayles/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3906323, "node_id": "MDU6TGFiZWwzOTA2MzIz", "url": "https://api.github.com/repos/more-itertools/more-itertools/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-12T15:50:13Z", "updated_at": "2019-06-27T01:14:43Z", "closed_at": "2019-06-27T01:14:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "PR #56 and PR #58 both raise the idea of having a function that splits an iterator into a group of sub-iterators with a fixed length. That is, a version of `chunked()` that emits iterators instead of lists.\r\n\r\nI was hoping to be able to modify `chunked()` to do this via a parameter or something, but I think performance would suffer. The simple version from #58 isn't viable.\r\n\r\n```python\r\n>>> for func in (original, ichunked_new, ichunked_pr58):\r\n...     def stmt():\r\n...         iterable = range(2000)  # Obviously performance will vary with iterable and n\r\n...         n = 101\r\n...         all_chunks = list(func(iterable, n))\r\n...         assert len(all_chunks) == 20\r\n... \r\n...     result = timeit(stmt, number=10000)\r\n...     print(func.__name__, result)\r\noriginal 0.7484618649759796\r\nichunked_new 0.971211633994244\r\nichunked_pr58 17.300433913012967\r\n```\r\n\r\nSo I think a separate function (`ichunked`, I guess) is called for!\r\n\r\n---\r\n\r\n```python\r\nfrom itertools import chain, islice, zip_longest\r\nfrom more_itertools import consume, peekable\r\nfrom timeit import timeit\r\n\r\ndef original(iterable, n):\r\n    it = iter(iterable)\r\n    while True:\r\n        chunk = list(islice(it, n))\r\n        if not chunk:\r\n            return\r\n        yield chunk\r\n\r\n\r\ndef ichunked_pr58(iterable, n, emit_lists=True):\r\n    p = peekable(iterable)\r\n    while p:\r\n        chunk = islice(p, n)\r\n        if emit_lists:\r\n            yield list(chunk)\r\n        else:\r\n            yield chunk\r\n            consume(chunk)\r\n\r\ndef ichunked_new(iterable, n, emit_lists=True):\r\n    it = iter(iterable)\r\n    while True:\r\n        test_chunk = islice(it, n)\r\n        try:\r\n            item = next(test_chunk)\r\n        except StopIteration:\r\n            return\r\n        chunk = chain([item], test_chunk)\r\n        if emit_lists:\r\n            yield list(chunk)\r\n        else:\r\n            yield chunk\r\n            consume(test_chunk)\r\n\r\n\r\nfor func in (original, ichunked_new, ichunked_pr58):\r\n    def stmt():\r\n        iterable = range(2000)\r\n        n = 101\r\n        all_chunks = list(func(iterable, n))\r\n        assert len(all_chunks) == 20\r\n\r\n    result = timeit(stmt, number=10000)\r\n    print(func.__name__, result)\r\n```", "performed_via_github_app": null, "score": 1.0}]}