{"total_count": 805, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1854", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1854/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1854/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1854/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1854", "id": 682334947, "node_id": "MDU6SXNzdWU2ODIzMzQ5NDc=", "number": 1854, "title": "orjson dumps cannot serialized AnyUrl type", "user": {"login": "lafrinte", "id": 3665617, "node_id": "MDQ6VXNlcjM2NjU2MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3665617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrinte", "html_url": "https://github.com/lafrinte", "followers_url": "https://api.github.com/users/lafrinte/followers", "following_url": "https://api.github.com/users/lafrinte/following{/other_user}", "gists_url": "https://api.github.com/users/lafrinte/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrinte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrinte/subscriptions", "organizations_url": "https://api.github.com/users/lafrinte/orgs", "repos_url": "https://api.github.com/users/lafrinte/repos", "events_url": "https://api.github.com/users/lafrinte/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrinte/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-20T02:46:17Z", "updated_at": "2020-08-20T13:55:53Z", "closed_at": "2020-08-20T13:13:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to enable orjson dumps AnyUrl/AnyHttpUrl type?\r\n\r\nfrom the section `Exporting models` in official doc, i get the example code how to support orjson.dumps as the default json dumps function. \r\n\r\n```\r\ndef orjson_dumps(v, *, default):\r\n    # orjson.dumps returns bytes, to match standard json.dumps we need to decode\r\n    return orjson.dumps(v, default=default).decode()\r\n```\r\n\r\norjson_dumps will get a pydantic_encoder in argument `default` which seems not enable AnyUrl type. how can i enable AnyUrl or other type dumps\r\n\r\n```\r\nIn [1]: from pydantic import BaseModel, AnyHttpUrl\r\n\r\nIn [2]: import orjson\r\n\r\nIn [3]: def orjson_dumps(v, *, default):\r\n   ...:     # orjson.dumps returns bytes, to match standard json.dumps we need to decode\r\n   ...:     return orjson.dumps(v, default=default).decode()\r\n   ...:\r\n\r\nIn [4]: class ServiceRegisterModel(BaseModel):\r\n   ...:     service_name: str\r\n   ...:     address: AnyHttpUrl\r\n   ...:\r\n   ...:     class Config:\r\n   ...:         json_loads = orjson.loads\r\n   ...:         json_dumps = orjson_dumps\r\n   ...:\r\n\r\nIn [5]: model = ServiceRegisterModel(service_name='login', address='http://localhost:8080/api/login')\r\n\r\nIn [6]: model.json()\r\n---------------------------------------------------------------------------\r\nJSONEncodeError                           Traceback (most recent call last)\r\n<ipython-input-6-93ec174eb92d> in <module>\r\n----> 1 model.json()\r\n\r\n~/.pyenv/versions/3.7.5/lib/python3.7/site-packages/pydantic/main.cpython-37m-darwin.so in pydantic.main.BaseModel.json()\r\n\r\n<ipython-input-3-9dac8cfa85ff> in orjson_dumps(v, default)\r\n      1 def orjson_dumps(v, *, default):\r\n      2     # orjson.dumps returns bytes, to match standard json.dumps we need to decode\r\n----> 3     return orjson.dumps(v, default=default).decode()\r\n      4\r\n\r\nJSONEncodeError: Type is not JSON serializable: AnyHttpUrl\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1851", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1851/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1851/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1851/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1851", "id": 681664261, "node_id": "MDU6SXNzdWU2ODE2NjQyNjE=", "number": 1851, "title": "Can I make a default value in pydantic if None is passed in the field without using validators?", "user": {"login": "FyZzyss", "id": 38393787, "node_id": "MDQ6VXNlcjM4MzkzNzg3", "avatar_url": "https://avatars1.githubusercontent.com/u/38393787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FyZzyss", "html_url": "https://github.com/FyZzyss", "followers_url": "https://api.github.com/users/FyZzyss/followers", "following_url": "https://api.github.com/users/FyZzyss/following{/other_user}", "gists_url": "https://api.github.com/users/FyZzyss/gists{/gist_id}", "starred_url": "https://api.github.com/users/FyZzyss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FyZzyss/subscriptions", "organizations_url": "https://api.github.com/users/FyZzyss/orgs", "repos_url": "https://api.github.com/users/FyZzyss/repos", "events_url": "https://api.github.com/users/FyZzyss/events{/privacy}", "received_events_url": "https://api.github.com/users/FyZzyss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-19T08:50:33Z", "updated_at": "2020-08-19T14:06:00Z", "closed_at": "2020-08-19T14:06:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can I make a default value in pydantic if None is passed in the field without using validators?\r\n \r\nI have the following code, but it seems to me that the validator here is superfluous for contract_ndfl. Is there any way to do without a validator?\r\n\r\n**My code:**\r\n\r\n      class User(BaseModel):\r\n            user: int\r\n            s_name: str\r\n            contract_ndfl: Optional[int]\r\n            \r\n    \r\n           @validator('contract_ndfl')\r\n           def set_contract_ndfl(cls, v):\r\n               return v or 13\r\n\r\n**Wishful code:**\r\n\r\n    class User(BaseModel):\r\n          user: int\r\n          s_name: str\r\n          contract_ndfl: Optional[int] = 13\r\n                ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1845", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1845/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1845/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1845/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1845", "id": 680346527, "node_id": "MDU6SXNzdWU2ODAzNDY1Mjc=", "number": 1845, "title": "How to define unnecessary path parameter?", "user": {"login": "FyZzyss", "id": 38393787, "node_id": "MDQ6VXNlcjM4MzkzNzg3", "avatar_url": "https://avatars1.githubusercontent.com/u/38393787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FyZzyss", "html_url": "https://github.com/FyZzyss", "followers_url": "https://api.github.com/users/FyZzyss/followers", "following_url": "https://api.github.com/users/FyZzyss/following{/other_user}", "gists_url": "https://api.github.com/users/FyZzyss/gists{/gist_id}", "starred_url": "https://api.github.com/users/FyZzyss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FyZzyss/subscriptions", "organizations_url": "https://api.github.com/users/FyZzyss/orgs", "repos_url": "https://api.github.com/users/FyZzyss/repos", "events_url": "https://api.github.com/users/FyZzyss/events{/privacy}", "received_events_url": "https://api.github.com/users/FyZzyss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-17T16:04:01Z", "updated_at": "2020-08-19T08:49:51Z", "closed_at": "2020-08-19T08:49:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to define unnecessary path parameter. How I can do this?\r\nMy attempt:\r\n```python\r\n@router.post(\"/payments/{file_type}\", response_description='', response_model=StatsOutputList)\r\nasync def payments(stats: StatsInput, file_type: Optional[str] = Path(None)):\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1843", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1843/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1843/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1843/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1843", "id": 680216702, "node_id": "MDU6SXNzdWU2ODAyMTY3MDI=", "number": 1843, "title": "How can I correctly validate a list of dictionaries?", "user": {"login": "eceppda", "id": 1106336, "node_id": "MDQ6VXNlcjExMDYzMzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1106336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eceppda", "html_url": "https://github.com/eceppda", "followers_url": "https://api.github.com/users/eceppda/followers", "following_url": "https://api.github.com/users/eceppda/following{/other_user}", "gists_url": "https://api.github.com/users/eceppda/gists{/gist_id}", "starred_url": "https://api.github.com/users/eceppda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eceppda/subscriptions", "organizations_url": "https://api.github.com/users/eceppda/orgs", "repos_url": "https://api.github.com/users/eceppda/repos", "events_url": "https://api.github.com/users/eceppda/events{/privacy}", "received_events_url": "https://api.github.com/users/eceppda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-17T12:59:22Z", "updated_at": "2020-08-17T14:19:59Z", "closed_at": "2020-08-17T14:19:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n| => python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"\r\n             pydantic version: 1.4\r\n            pydantic compiled: False\r\n                 install path: [...]/venv/lib/python3.6/site-packages/pydantic\r\n               python version: 3.6.2 (default, Jan 16 2020, 10:16:00)  [GCC 4.2.1 Compatible Apple LLVM 11.0.0 (clang-1100.0.33.17)]\r\n                     platform: Darwin-19.5.0-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n\r\nI have a function that returns a list of dictionaries, and want the output of the function to be passed as a parameter to a pydantic model. I didn't expect either example below to fail validation, and I'm unclear why validation is failing and what I can do to correct it. \r\n\r\n\r\n```py\r\n>>> from pydantic import BaseModel\r\n>>> class ModelA(BaseModel):\r\n...     a: List[Dict]\r\n...     \r\n>>>ModelA(a=list({\"a\": \"b\"}))\r\n... \r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"[...]/venv/lib/python3.6/site-packages/pydantic/main.py\", line 283, in __init__\r\n    raise validation_error\r\npydantic.error_wrappers.ValidationError: 1 validation error for ModelA\r\na -> 0\r\n  value is not a valid dict (type=type_error.dict)\r\n```\r\n\r\n```py\r\n>>> from pydantic import BaseModel\r\n>>> class ModelB(BaseModel):\r\n...     b: List[Dict[str, str]]]\r\n...     \r\n>>>ModelB(b=list({\"b\":\"c\"}))\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"[...]/venv/lib/python3.6/site-packages/pydantic/main.py\", line 283, in __init__\r\n    raise validation_error\r\npydantic.error_wrappers.ValidationError: 1 validation error for ModelB\r\nb -> 0\r\n  value is not a valid dict (type=type_error.dict)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1818", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1818/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1818/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1818/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1818", "id": 676833341, "node_id": "MDU6SXNzdWU2NzY4MzMzNDE=", "number": 1818, "title": "can't read env_file.", "user": {"login": "kimoziiiii", "id": 8429793, "node_id": "MDQ6VXNlcjg0Mjk3OTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/8429793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimoziiiii", "html_url": "https://github.com/kimoziiiii", "followers_url": "https://api.github.com/users/kimoziiiii/followers", "following_url": "https://api.github.com/users/kimoziiiii/following{/other_user}", "gists_url": "https://api.github.com/users/kimoziiiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimoziiiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimoziiiii/subscriptions", "organizations_url": "https://api.github.com/users/kimoziiiii/orgs", "repos_url": "https://api.github.com/users/kimoziiiii/repos", "events_url": "https://api.github.com/users/kimoziiiii/events{/privacy}", "received_events_url": "https://api.github.com/users/kimoziiiii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-11T12:22:46Z", "updated_at": "2020-08-11T15:13:27Z", "closed_at": "2020-08-11T15:11:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nsoftware version:\r\n```\r\npydantic version: 1.6.1\r\npydantic compiled: False\r\ninstall path: D:\\be-scaffold-env\\Lib\\site-packages\\pydantic\r\npython version: 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)]\r\nplatform: Windows-10-10.0.16299-SP0\r\noptional deps. installed: []\r\n```\r\n### dotenv\r\nalong with following code \r\n```\r\nAPP_ENV=development\r\n```\r\n### code\r\n```py\r\nfrom pathlib import Path\r\nfrom pydantic import BaseSettings\r\nclass Settings(BaseSettings):\r\n\tTEST: str = 'fffffffffffff'\r\n\r\n\tclass Config:\r\n\t\tenv_file = Path('test.env')\r\n\t\tenv_file_encoding = 'utf-8'\r\n# setting\r\nsettings = Settings()\r\nprint(settings)\r\n# os.env\r\nprint(os.getenv('APP_ENV'))\r\n```\r\n### output\r\n```\r\nTEST='fffffffffffff'\r\nNone\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1811", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1811/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1811/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1811/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1811", "id": 675619080, "node_id": "MDU6SXNzdWU2NzU2MTkwODA=", "number": 1811, "title": "Can I use LSP with pydantic?", "user": {"login": "mcauto", "id": 15080806, "node_id": "MDQ6VXNlcjE1MDgwODA2", "avatar_url": "https://avatars2.githubusercontent.com/u/15080806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcauto", "html_url": "https://github.com/mcauto", "followers_url": "https://api.github.com/users/mcauto/followers", "following_url": "https://api.github.com/users/mcauto/following{/other_user}", "gists_url": "https://api.github.com/users/mcauto/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcauto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcauto/subscriptions", "organizations_url": "https://api.github.com/users/mcauto/orgs", "repos_url": "https://api.github.com/users/mcauto/repos", "events_url": "https://api.github.com/users/mcauto/events{/privacy}", "received_events_url": "https://api.github.com/users/mcauto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-09T01:51:23Z", "updated_at": "2020-08-10T10:37:01Z", "closed_at": "2020-08-10T10:37:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /root/projects/py/landlords-server/.venv/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.2 (default, Apr 27 2020, 15:53:34)  [GCC 9.3.0]\r\n                     platform: Linux-4.19.84-microsoft-standard-x86_64-with-glibc2.29\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your question hasn't already been answered. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your question: -->\r\n\r\n```py\r\nfrom pydantic import BaseModel\r\n\r\nclass UserInfo(BaseModel):\r\n    \"\"\" for my application \"\"\"\r\n    name: str\r\n    email: str\r\n\r\nclass GoogleUserInfo(UserInfo):\r\n    \"\"\" google account \"\"\"\r\n    sub: str\r\n    family_name: str\r\n    given_name: str\r\n    picture: str\r\n\r\nclass OtherOAuthUserInfo(UserInfo):\r\n    ...\r\n\r\ndef sign_in(user_info: UserInfo):\r\n    database.save(user_info)\r\n\r\ndef main():\r\n    google_user_info = GoogleUserInfo(...) \r\n    other_user_info = OtherOAuthUserInfo(...)\r\n    sign_in(UserInfo(google_user_info)) # error\r\n    sign_in(UserInfo(other_user_info)) # error\r\n```\r\n\r\nI want to use up-casting. but, user_info variable is GoogleUserInfo instance in sign_in function.\r\n\r\nCan I use up-casting?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1808", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1808/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1808/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1808/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1808", "id": 674255565, "node_id": "MDU6SXNzdWU2NzQyNTU1NjU=", "number": 1808, "title": "R.e Comparing variables in validators", "user": {"login": "abercon", "id": 29916909, "node_id": "MDQ6VXNlcjI5OTE2OTA5", "avatar_url": "https://avatars2.githubusercontent.com/u/29916909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abercon", "html_url": "https://github.com/abercon", "followers_url": "https://api.github.com/users/abercon/followers", "following_url": "https://api.github.com/users/abercon/following{/other_user}", "gists_url": "https://api.github.com/users/abercon/gists{/gist_id}", "starred_url": "https://api.github.com/users/abercon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abercon/subscriptions", "organizations_url": "https://api.github.com/users/abercon/orgs", "repos_url": "https://api.github.com/users/abercon/repos", "events_url": "https://api.github.com/users/abercon/events{/privacy}", "received_events_url": "https://api.github.com/users/abercon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-06T11:55:08Z", "updated_at": "2020-08-07T08:14:08Z", "closed_at": "2020-08-07T08:14:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. Apologies if this has already been asked somewhere.\r\n\r\nI have a use case where I would like to validate that the lengths of two list-like arguments are equal and I haven't been able to do this within a pydantic model. Is this possible, or do I need to move this validation outside of pydantic? If it's possible in pydantic, what is the best approach? A simplified version of the model I currently have is as follows:\r\n\r\n```\r\nimport numpy as np\r\nfrom pydantic import BaseModel, validator, PositiveInt\r\n\r\nclass InputModel(BaseModel):\r\n        sample_1: np.ndarray\r\n        sample_2: np.ndarray\r\n\r\n        @validator(\"sample1\", \"sample2\")\r\n        def parse_samples(cls, v):\r\n            # Parses samples to an ndarray\r\n            return np.ndarray(v, dtype=np.float64)\r\n\r\n# I then want to validate the following expression:\r\n# len(sample_1) == len(sample_2)\r\n\r\n        class config:\r\n            arbritrary_types_allowed = True\r\n```\r\n\r\nThanks in advance.\r\n\r\npydantic version: 1.6.1\r\npydantic compiled: True\r\ninstall path: C:\\Users\\joshw\\.conda\\envs\\htk3.6.8\\Lib\\site-packages\\pydantic\r\npython version: 3.6.8 |Anaconda, Inc.| (default, Feb 21 2019, 18:30:04) [MSC v.1916 64 bit (AMD64)]\r\nplatform: Windows-10-10.0.18362-SP0\r\noptional deps. installed: []", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1805", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1805/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1805/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1805/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1805", "id": 674005720, "node_id": "MDU6SXNzdWU2NzQwMDU3MjA=", "number": 1805, "title": "Union type during field initialization has some kind of priority", "user": {"login": "i4never", "id": 10850020, "node_id": "MDQ6VXNlcjEwODUwMDIw", "avatar_url": "https://avatars3.githubusercontent.com/u/10850020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/i4never", "html_url": "https://github.com/i4never", "followers_url": "https://api.github.com/users/i4never/followers", "following_url": "https://api.github.com/users/i4never/following{/other_user}", "gists_url": "https://api.github.com/users/i4never/gists{/gist_id}", "starred_url": "https://api.github.com/users/i4never/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/i4never/subscriptions", "organizations_url": "https://api.github.com/users/i4never/orgs", "repos_url": "https://api.github.com/users/i4never/repos", "events_url": "https://api.github.com/users/i4never/events{/privacy}", "received_events_url": "https://api.github.com/users/i4never/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-06T04:30:47Z", "updated_at": "2020-08-06T09:29:11Z", "closed_at": "2020-08-06T09:29:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n1.5.1\r\n```\r\n\r\n```py\r\nfrom pydantic import BaseModel\r\n\r\nclass A(BaseModel):\r\n    a: Union[str, int]\r\n\r\na = A(a=1)\r\nprint(a)\r\n# Out: a='1'\r\n\r\na = A(a='1')\r\nprint(a)\r\n# Out: a='1'\r\n\r\n```\r\n\r\n```py\r\nfrom pydantic import BaseModel\r\n\r\nclass A(BaseModel):\r\n    a: Union[int, str]\r\n\r\na = A(a=1)\r\nprint(a)\r\n# Out: a=1\r\n\r\na = A(a='1')\r\nprint(a)\r\n# Out: a=1\r\n```\r\n\r\nI believe `Union[str, int]` and `Union[int, str]` should be equivalent but it seems different order will lead to different result. Value of union field will be transformed to first type in Union if possible (Try `Union[float, str]` and initialize with `A(a='a')`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1802", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1802/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1802/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1802/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1802", "id": 673893579, "node_id": "MDU6SXNzdWU2NzM4OTM1Nzk=", "number": 1802, "title": "Is it possible to have arbitrary key names in pydantic?", "user": {"login": "securisec", "id": 22226823, "node_id": "MDQ6VXNlcjIyMjI2ODIz", "avatar_url": "https://avatars2.githubusercontent.com/u/22226823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/securisec", "html_url": "https://github.com/securisec", "followers_url": "https://api.github.com/users/securisec/followers", "following_url": "https://api.github.com/users/securisec/following{/other_user}", "gists_url": "https://api.github.com/users/securisec/gists{/gist_id}", "starred_url": "https://api.github.com/users/securisec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/securisec/subscriptions", "organizations_url": "https://api.github.com/users/securisec/orgs", "repos_url": "https://api.github.com/users/securisec/repos", "events_url": "https://api.github.com/users/securisec/events{/privacy}", "received_events_url": "https://api.github.com/users/securisec/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-05T22:40:02Z", "updated_at": "2020-08-06T13:52:43Z", "closed_at": "2020-08-06T13:52:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to emulate a similar behavior to typescripts interface with arbitrary key names for a `pydantic` model, but am running in to some issues. \r\n\r\nConsider the following in TS:\r\n\r\n```\r\nexport interface SNSMessageAttributes {\r\n    [name: string]: SNSMessageAttribute;\r\n}\r\n```\r\n\r\nIs it possible to achieve this in pydantic? \r\n\r\nHere is my python example code:\r\n\r\n```py\r\nfrom pydantic import BaseModel, parse_obj_as\r\nfrom typing import Optional\r\n\r\nclass Values(BaseModel):\r\n    Value: str\r\n    Type: str\r\n\r\nclass MessageAttributes(BaseModel):\r\n    ArbitraryKey: Optional[Values] # question is how can i make ArbitraryKey truly arbitrary so that anything passed here will still have the values typed to Values?\r\n\r\n\r\nclass Mymodel(BaseModel):\r\n    MessageAttributes: Optional[MessageAttributes]\r\n\r\n\r\ndata = {\"MessageAttributes\": {\"ArbitraryKey\": {\"Type\": \"String\", \"Value\": \"TestString\"}}}\r\n\r\nparsed = parse_obj_as(Mymodel, data)\r\n\r\nprint(parsed.MessageAttributes.ArbitraryKey.Value)\r\n# TestString\r\n```\r\n\r\nIn this example, the property `ArbitraryKey` can be anything. But I cant possibly hardcode all the possible key names there could be. For instance, instead of `ArbitraryKey`, what if the key name was `SomeTestKey`?\r\n\r\nI know I can use `extra = 'allow` in `Config`, but that wouldnt give the dot syntax that I can get when using `parse_obj_as`\r\n\r\nMy question is, if possible, can I do something similar to `[name: string]` in pydantic for property names?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1800", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1800/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1800/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1800/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1800", "id": 673636289, "node_id": "MDU6SXNzdWU2NzM2MzYyODk=", "number": 1800, "title": "@validator sets an item to None?", "user": {"login": "ingoogni", "id": 22236628, "node_id": "MDQ6VXNlcjIyMjM2NjI4", "avatar_url": "https://avatars1.githubusercontent.com/u/22236628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ingoogni", "html_url": "https://github.com/ingoogni", "followers_url": "https://api.github.com/users/ingoogni/followers", "following_url": "https://api.github.com/users/ingoogni/following{/other_user}", "gists_url": "https://api.github.com/users/ingoogni/gists{/gist_id}", "starred_url": "https://api.github.com/users/ingoogni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ingoogni/subscriptions", "organizations_url": "https://api.github.com/users/ingoogni/orgs", "repos_url": "https://api.github.com/users/ingoogni/repos", "events_url": "https://api.github.com/users/ingoogni/events{/privacy}", "received_events_url": "https://api.github.com/users/ingoogni/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-05T15:36:32Z", "updated_at": "2020-08-05T17:06:24Z", "closed_at": "2020-08-05T17:06:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\nWhy does `person` end up as `None`?\r\n\r\n```\r\nfrom pydantic import BaseModel, ValidationError, validator\r\n\r\nform_in = {\r\n  \"company\": \"Jcomp\", \r\n  \"person\": \"JJ de J\"\r\n}\r\n\r\nclass Form(BaseModel):\r\n  company: str\r\n  person: str\r\n\r\n  @validator('person')\r\n  def check_at_least_one(cls, v, values):\r\n    print(v)\r\n    print(values)\r\n    try:\r\n      if not v and not values['company']:\r\n        raise ValueError('at least one of company or person is needed')\r\n    except ValueError as e:\r\n      print(e)\r\n\r\nprint(Form(**form_in).dict())\r\n#JJ de J\r\n#{'company': 'Jcomp'}\r\n#{'company': 'Jcomp', 'person': None}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1799", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1799/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1799/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1799/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1799", "id": 673364253, "node_id": "MDU6SXNzdWU2NzMzNjQyNTM=", "number": 1799, "title": "How to change the field type dynamically ", "user": {"login": "jamb0ss", "id": 1442113, "node_id": "MDQ6VXNlcjE0NDIxMTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1442113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamb0ss", "html_url": "https://github.com/jamb0ss", "followers_url": "https://api.github.com/users/jamb0ss/followers", "following_url": "https://api.github.com/users/jamb0ss/following{/other_user}", "gists_url": "https://api.github.com/users/jamb0ss/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamb0ss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamb0ss/subscriptions", "organizations_url": "https://api.github.com/users/jamb0ss/orgs", "repos_url": "https://api.github.com/users/jamb0ss/repos", "events_url": "https://api.github.com/users/jamb0ss/events{/privacy}", "received_events_url": "https://api.github.com/users/jamb0ss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-05T08:39:56Z", "updated_at": "2020-08-05T09:53:47Z", "closed_at": "2020-08-05T09:53:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /usr/local/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.4 (default, Jul 19 2020, 13:42:30)  [GCC 5.4.0 20160609]\r\n                     platform: Linux-4.4.0-185-generic-x86_64-with-glibc2.17\r\n     optional deps. installed: ['typing-extensions', 'email-validator']\r\n\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your question hasn't already been answered. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your question: -->\r\n\r\n```py\r\nimport pydantic\r\nimport typing\r\n\r\nclass User(pydantic.BaseModel):\r\n    name: str = pydantic.Field(...)\r\n\r\n```\r\nI have a `User` class with the required field name, what is the right way to create a new class from it, that will have this field (actually all fields) optional. Class can contain many fields, there are dozens of classes, so I'm trying to automate this process and make them dynamically. e.g. I need this class to be created at runtime (using `create_model` or whatever)\r\n\r\n```\r\nclass CustomUser(pydantic.BaseModel):\r\n    name: typing.Optional[str] = pydantic.Field(None)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1798", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1798/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1798/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1798/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1798", "id": 673344524, "node_id": "MDU6SXNzdWU2NzMzNDQ1MjQ=", "number": 1798, "title": "error message for forbidden extra fields should name the fields", "user": {"login": "mdavis-xyz", "id": 7035647, "node_id": "MDQ6VXNlcjcwMzU2NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7035647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdavis-xyz", "html_url": "https://github.com/mdavis-xyz", "followers_url": "https://api.github.com/users/mdavis-xyz/followers", "following_url": "https://api.github.com/users/mdavis-xyz/following{/other_user}", "gists_url": "https://api.github.com/users/mdavis-xyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdavis-xyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdavis-xyz/subscriptions", "organizations_url": "https://api.github.com/users/mdavis-xyz/orgs", "repos_url": "https://api.github.com/users/mdavis-xyz/repos", "events_url": "https://api.github.com/users/mdavis-xyz/events{/privacy}", "received_events_url": "https://api.github.com/users/mdavis-xyz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-05T08:08:46Z", "updated_at": "2020-08-05T09:36:24Z", "closed_at": "2020-08-05T09:36:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature Request\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```                                                             \r\n             pydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /home/ec2-user/.local/lib/python3.6/site-packages/pydantic\r\n               python version: 3.6.10 (default, Feb 10 2020, 19:55:14)  [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]\r\n                     platform: Linux-4.14.171-105.231.amzn1.x86_64-x86_64-with-glibc2.3.4\r\n     optional deps. installed: []\r\n```\r\n\r\n```py\r\nfrom pydantic import BaseModel, ValidationError\r\n\r\nclass NoExtra(BaseModel):\r\n    class Config:\r\n        extra = 'forbid'\r\n    x: int\r\n\r\nNoExtra.parse_obj({'x': 1, 'y': 2})\r\n```\r\n\r\nCurrent behavior:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"so.py\", line 8, in <module>\r\n    NoExtra.parse_obj({'x': 1, 'y': 2})\r\n  File \"pydantic/main.py\", line 455, in pydantic.main.BaseModel.parse_obj\r\n  File \"pydantic/main.py\", line 346, in pydantic.main.BaseModel.__init__\r\npydantic.error_wrappers.ValidationError: 1 validation error for NoExtra\r\ny\r\n  extra fields not permitted (type=value_error.extra)\r\n```\r\n\r\nDesired behavior\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"so.py\", line 8, in <module>\r\n    NoExtra.parse_obj({'x': 1, 'y': 2})\r\n  File \"pydantic/main.py\", line 455, in pydantic.main.BaseModel.parse_obj\r\n  File \"pydantic/main.py\", line 346, in pydantic.main.BaseModel.__init__\r\npydantic.error_wrappers.ValidationError: 1 validation error for NoExtra\r\ny\r\n  extra fields not permitted: y (type=value_error.extra)\r\n```\r\n\r\nBeing able to identify which fields are being rejected would help me debug why my object isn't being parsed.\r\nIn this case it's obvious, but for more complex cases it's not obvious.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1792", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1792/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1792/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1792/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1792", "id": 672443974, "node_id": "MDU6SXNzdWU2NzI0NDM5NzQ=", "number": 1792, "title": "BaseSettings dict with defaults", "user": {"login": "alecgerona", "id": 6406447, "node_id": "MDQ6VXNlcjY0MDY0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6406447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecgerona", "html_url": "https://github.com/alecgerona", "followers_url": "https://api.github.com/users/alecgerona/followers", "following_url": "https://api.github.com/users/alecgerona/following{/other_user}", "gists_url": "https://api.github.com/users/alecgerona/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecgerona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecgerona/subscriptions", "organizations_url": "https://api.github.com/users/alecgerona/orgs", "repos_url": "https://api.github.com/users/alecgerona/repos", "events_url": "https://api.github.com/users/alecgerona/events{/privacy}", "received_events_url": "https://api.github.com/users/alecgerona/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-04T01:46:08Z", "updated_at": "2020-08-04T04:56:51Z", "closed_at": "2020-08-04T04:56:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.6.1\r\npydantic compiled: True\r\ninstall path: /venv/lib/python3.8/site-packages/pydantic\r\npython version: 3.8.5 (default, Jul 27 2020, 08:42:51)  [GCC 10.1.0]\r\nplatform: Linux-5.7.11-arch1-1-x86_64-with-glibc2.2.5\r\noptional deps. installed: ['email-validator', 'devtools']\r\n```\r\nHi, so I'm trying to use the `BaseSettings` feature of Pydantic and my config is not one-to-one with my env vars i.e. I combine various env vars to one dictionary in the settings class for example. \r\n\r\n```py\r\nfrom pydantic import BaseSettings, BaseModel\r\nfrom pydantic.networks import HttpUrl\r\nfrom typing import Dict\r\n\r\nclass DatabaseConfig(BaseModel):\r\n    database: str = os.environ[\"POSTGRES_DB\"]\r\n    user: str = os.environ[\"POSTGRES_USER\"]\r\n    password: str = os.environ[\"POSTGRES_PASSWORD\"]\r\n    host: str = os.environ[\"POSTGRES_HOST\"]\r\n    port: int = os.environ[\"POSTGRES_PORT\"]\r\n\r\nclass APIConfig(BaseModel):\r\n    url: HttpUrl = os.environ[\"API_URL\"]\r\n    path: Dict[str, str] = {\"default\": os.environ[\"MY_PATH\"]}\r\n    timeout: int = os.environ[\"API_TIMEOUT\"]\r\n\r\nclass APIList(BaseModel):\r\n    my_api: APIConfig\r\n\r\nclass Settings(BaseSettings):\r\n    DATABASE: DatabaseConfig = {}\r\n    API: APIList = {}\r\n```\r\nSo for `DATABASE`, pydantic complains with a Validation Error, field required if I don't put the empty `{}`. However, with `API`, even with the empty `{}` it still complains with the same error. \r\n\r\nHow can I fix this? At best I would like the functionality of \r\n```py\r\nsettings = Settings()\r\nsettings.API.my_api.url\r\n```\r\nWith the defaults handling the call to my environment variables.\r\nThanks for the awesome library. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1791", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1791/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1791/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1791/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1791", "id": 672201276, "node_id": "MDU6SXNzdWU2NzIyMDEyNzY=", "number": 1791, "title": "Detecting extra keys being provided to BaseModel", "user": {"login": "captainvera", "id": 5597178, "node_id": "MDQ6VXNlcjU1OTcxNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5597178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/captainvera", "html_url": "https://github.com/captainvera", "followers_url": "https://api.github.com/users/captainvera/followers", "following_url": "https://api.github.com/users/captainvera/following{/other_user}", "gists_url": "https://api.github.com/users/captainvera/gists{/gist_id}", "starred_url": "https://api.github.com/users/captainvera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/captainvera/subscriptions", "organizations_url": "https://api.github.com/users/captainvera/orgs", "repos_url": "https://api.github.com/users/captainvera/repos", "events_url": "https://api.github.com/users/captainvera/events{/privacy}", "received_events_url": "https://api.github.com/users/captainvera/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-03T16:37:45Z", "updated_at": "2020-08-04T15:37:15Z", "closed_at": "2020-08-04T04:46:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nHey, \r\n\r\nFirst of all, thanks for the awesome work you've done with Pydantic. We have been slowly adopting Pydantic on all our projects across my team and loving it so far.\r\n\r\nOur biggest issue so far is that we couldn't find a simple way to throw an error when erroneous keywords are passed into the BaseModel `__init__` . When working with project with very large and nested configurations it is extremely easy to make a typo when creating this configuration and this error gets silently ignored. \r\n\r\nIs there any simple way of doing this that I am unaware of? \r\n\r\n```\r\n pydantic version: 1.4\r\n            pydantic compiled: False\r\n                 install path: /Users/miguelvera/env/miniconda2/envs/mirta/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.8 | packaged by conda-forge | (default, Jul 23 2020, 03:39:37)  [Clang 10.0.0 ]\r\n                     platform: Darwin-19.4.0-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n\r\nSmall example:\r\n\r\n```py\r\nimport pydantic\r\n\r\nclass Configuration(BaseModel):\r\n    input: FilePath = 'input'\r\n    output: FilePath = 'output'\r\n\r\n\r\nif __name__ == '__main__':\r\n   args_dict = { \r\n                        \"input\"  :  '/mnt/mypath/inputs',\r\n                        \"outptu\" :  '/myotherpath/output',\r\n   } \r\n   # How can I make this throw an error for receiving a keyword that does not exist? (outptu)\r\n   Configuration(**args_dict)\r\n\r\n```\r\n\r\nThanks in advance! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1789", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1789/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1789/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1789/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1789", "id": 671622502, "node_id": "MDU6SXNzdWU2NzE2MjI1MDI=", "number": 1789, "title": "Please add parse_raw_as", "user": {"login": "jet10000", "id": 2258120, "node_id": "MDQ6VXNlcjIyNTgxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2258120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jet10000", "html_url": "https://github.com/jet10000", "followers_url": "https://api.github.com/users/jet10000/followers", "following_url": "https://api.github.com/users/jet10000/following{/other_user}", "gists_url": "https://api.github.com/users/jet10000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jet10000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jet10000/subscriptions", "organizations_url": "https://api.github.com/users/jet10000/orgs", "repos_url": "https://api.github.com/users/jet10000/repos", "events_url": "https://api.github.com/users/jet10000/events{/privacy}", "received_events_url": "https://api.github.com/users/jet10000/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-02T14:05:38Z", "updated_at": "2020-08-04T05:06:41Z", "closed_at": "2020-08-04T05:06:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to parse json string to List[User]\r\n\r\nlike `parse_obj_as(List[User], objs)`\r\n\r\nthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1784", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1784/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1784/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1784/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1784", "id": 669488514, "node_id": "MDU6SXNzdWU2Njk0ODg1MTQ=", "number": 1784, "title": "Mention pydantic IDE plugins to support the claim: \"pydantic plays nicely with your linter/IDE/brain\"", "user": {"login": "Luttik", "id": 6634187, "node_id": "MDQ6VXNlcjY2MzQxODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6634187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Luttik", "html_url": "https://github.com/Luttik", "followers_url": "https://api.github.com/users/Luttik/followers", "following_url": "https://api.github.com/users/Luttik/following{/other_user}", "gists_url": "https://api.github.com/users/Luttik/gists{/gist_id}", "starred_url": "https://api.github.com/users/Luttik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Luttik/subscriptions", "organizations_url": "https://api.github.com/users/Luttik/orgs", "repos_url": "https://api.github.com/users/Luttik/repos", "events_url": "https://api.github.com/users/Luttik/events{/privacy}", "received_events_url": "https://api.github.com/users/Luttik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-31T07:03:36Z", "updated_at": "2020-07-31T09:13:42Z", "closed_at": "2020-07-31T09:13:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Documentation Request\r\n\r\nThe second line of the readme says \"pydantic plays nicely with your linter/IDE/brain\". Id argue that, out of the box, it doesn't play nicely with at least PyCharm since the shown constructor definition is just `def __init__(__pydantic_self__, **data: Any) -> None:`. \r\n\r\nHowever, this is easily solved with the Pydantic pycharm plugin (if you know that it exists). Therefore I'd argue that you should give it a prominent role in the readme if possible with similar solutions for other prominent IDE's (most notably vscode).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1774", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1774/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1774/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1774/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1774", "id": 666961950, "node_id": "MDU6SXNzdWU2NjY5NjE5NTA=", "number": 1774, "title": "root_validator bug", "user": {"login": "tamuhey", "id": 24998666, "node_id": "MDQ6VXNlcjI0OTk4NjY2", "avatar_url": "https://avatars2.githubusercontent.com/u/24998666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamuhey", "html_url": "https://github.com/tamuhey", "followers_url": "https://api.github.com/users/tamuhey/followers", "following_url": "https://api.github.com/users/tamuhey/following{/other_user}", "gists_url": "https://api.github.com/users/tamuhey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamuhey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamuhey/subscriptions", "organizations_url": "https://api.github.com/users/tamuhey/orgs", "repos_url": "https://api.github.com/users/tamuhey/repos", "events_url": "https://api.github.com/users/tamuhey/events{/privacy}", "received_events_url": "https://api.github.com/users/tamuhey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-28T10:26:31Z", "updated_at": "2020-07-28T10:28:29Z", "closed_at": "2020-07-28T10:27:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /Users/yohei_tamura/venvs/sandbox/.venv/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.1 (default, Jan 16 2020, 21:19:27)  [Clang 10.0.1 (clang-1001.0.46.4)]\r\n                     platform: macOS-10.14.6-x86_64-i386-64bit\r\n     optional deps. installed: []\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your bug hasn't already been reported. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\n\r\n```py\r\nimport pydantic\r\nfrom typing import List\r\n\r\nclass Foo(pydantic.BaseModel):\r\n    a: List[int]\r\n    b: List[int]\r\n\r\n    @pydantic.root_validator(pre=True)\r\n    def length_check(cls, values):\r\n        a = values[\"a\"]\r\n        b = values[\"b\"]\r\n        if len(a) != len(b) + 1:\r\n            raise ValueError(\"invalid length\")\r\n\r\nd = {\"a\": [1], \"b\": []}\r\nFoo.parse_obj(d)\r\n```\r\n\r\nraises:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-1-45b68984df67> in <module>\r\n     14 \r\n     15 d = {\"a\": [1], \"b\": []}\r\n---> 16 Foo.parse_obj(d)\r\n\r\n~/venvs/sandbox/.venv/lib/python3.8/site-packages/pydantic/main.cpython-38-darwin.so in pydantic.main.BaseModel.parse_obj()\r\n\r\n~/venvs/sandbox/.venv/lib/python3.8/site-packages/pydantic/main.cpython-38-darwin.so in pydantic.main.BaseModel.__init__()\r\n\r\n~/venvs/sandbox/.venv/lib/python3.8/site-packages/pydantic/main.cpython-38-darwin.so in pydantic.main.validate_model()\r\n\r\nAttributeError: 'NoneType' object has no attribute 'get'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1773", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1773/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1773/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1773/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1773", "id": 666930387, "node_id": "MDU6SXNzdWU2NjY5MzAzODc=", "number": 1773, "title": "Nested model with Dict __root__ init behaviour", "user": {"login": "Okonos", "id": 10090021, "node_id": "MDQ6VXNlcjEwMDkwMDIx", "avatar_url": "https://avatars3.githubusercontent.com/u/10090021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Okonos", "html_url": "https://github.com/Okonos", "followers_url": "https://api.github.com/users/Okonos/followers", "following_url": "https://api.github.com/users/Okonos/following{/other_user}", "gists_url": "https://api.github.com/users/Okonos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Okonos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Okonos/subscriptions", "organizations_url": "https://api.github.com/users/Okonos/orgs", "repos_url": "https://api.github.com/users/Okonos/repos", "events_url": "https://api.github.com/users/Okonos/events{/privacy}", "received_events_url": "https://api.github.com/users/Okonos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-28T09:39:36Z", "updated_at": "2020-07-29T13:31:27Z", "closed_at": "2020-07-28T12:02:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /home/pawecich/.virtualenvs/foundation/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.2 (default, Jul 16 2020, 14:00:26)  [GCC 9.3.0]\r\n                     platform: Linux-5.4.0-42-generic-x86_64-with-glibc2.29\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your question hasn't already been answered. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your question: -->\r\n\r\nHello,\r\n\r\nI'm trying to nest a model with custom `Union[str, Dict]` root type in another model and seem to be getting some inconsistent behavior during model init. Consider following code snippet:\r\n\r\n```py\r\nfrom typing import Dict, Union\r\n\r\nfrom pydantic import BaseModel, ValidationError\r\n\r\n\r\nclass StrDict(BaseModel):\r\n    __root__: Union[str, Dict[str, str]]\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        print(f\"{kwargs=}\")\r\n        super().__init__(*args, **kwargs)\r\n\r\n\r\nclass StrDictModel(BaseModel):\r\n    d: StrDict\r\n\r\n\r\nprint(StrDictModel(d='asdf').dict())\r\nprint()\r\ntry:\r\n    print(StrDictModel(d={'k': 'v'}).dict())\r\nexcept ValidationError as e:\r\n    print(e)\r\nprint()\r\nprint(StrDictModel(d={'__root__': {'k': 'v'}}).dict())\r\n```\r\n\r\nThis outputs:\r\n```\r\nkwargs={'__root__': 'asdf'}\r\n{'d': 'asdf'}\r\n\r\nkwargs={'k': 'v'}\r\n1 validation error for Model\r\nd -> __root__\r\n  field required (type=value_error.missing)\r\n\r\nkwargs={'__root__': {'k': 'v'}}\r\n{'d': {'k': 'v'}}\r\n```\r\n\r\nIn case of passing a string, it gets nested under the `__root__` key automatically, which is not the case with the dict, which seems to require explicit nesting.\r\nIs this expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1762", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1762/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1762/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1762/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1762", "id": 665779806, "node_id": "MDU6SXNzdWU2NjU3Nzk4MDY=", "number": 1762, "title": "s/django/apps/config.py\", line 133, in create     if not issubclass(cls, AppConfig): TypeError: issubclass() arg 1 must be a class", "user": {"login": "OikoDavid", "id": 21309862, "node_id": "MDQ6VXNlcjIxMzA5ODYy", "avatar_url": "https://avatars1.githubusercontent.com/u/21309862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OikoDavid", "html_url": "https://github.com/OikoDavid", "followers_url": "https://api.github.com/users/OikoDavid/followers", "following_url": "https://api.github.com/users/OikoDavid/following{/other_user}", "gists_url": "https://api.github.com/users/OikoDavid/gists{/gist_id}", "starred_url": "https://api.github.com/users/OikoDavid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OikoDavid/subscriptions", "organizations_url": "https://api.github.com/users/OikoDavid/orgs", "repos_url": "https://api.github.com/users/OikoDavid/repos", "events_url": "https://api.github.com/users/OikoDavid/events{/privacy}", "received_events_url": "https://api.github.com/users/OikoDavid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-26T13:25:54Z", "updated_at": "2020-07-26T14:07:25Z", "closed_at": "2020-07-26T14:07:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n****views***\r\n\r\nif request.method == \"POST\":\r\n    user_form = UserForm(request.POST)\r\n    store_form = StoreForm(request.POST, request.FILES)\r\n\r\n    if user_form.is_valid() and store_form.is_valid():\r\n        new_user = User.objects.create_user(**user_form.cleaned_data)\r\n        new_store = store_form.save(commit=False)\r\n        new_store.user = new_user\r\n        new_store.save()\r\n\r\n        login(request, authenticate(\r\n             username = user_form.cleaned_data['username'],\r\n             password = user_form.cleaned_data['password']\r\n        ))\r\n        return redirect(store_home)\r\n\r\nreturn render(request, 'store/sign_up.html', {\r\n     \"user_form\": user_form,\r\n     \"store_form\": store_form\r\n})\r\n\r\nif request.method == \"POST\":\r\n    user_form = UserForm(request.POST)\r\n    store_form = StoreForm(request.POST, request.FILES)\r\n\r\n    if user_form.is_valid() and store_form.is_valid():\r\n        new_user = User.objects.create_user(**user_form.cleaned_data)\r\n        new_store = store_form.save(commit=False)\r\n        new_store.user = new_user\r\n        new_store.save()\r\n\r\n        login(request, authenticate(\r\n             username = user_form.cleaned_data['username'],\r\n             password = user_form.cleaned_data['password']\r\n        ))\r\n        return redirect(store_home)\r\n\r\nreturn render(request, 'store/sign_up.html', {\r\n     \"user_form\": user_form,\r\n     \"store_form\": store_form\r\n})\r\n\r\n****forms****\r\n\r\nclass Meta:\r\n    model = User\r\n    fields = (\"username\", \"password\", \"first_name\", \"last_name\", \"email\")\r\n\r\n****models***\r\n\r\n def __str__(self):\r\n    return self.name\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1761", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1761/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1761/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1761/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1761", "id": 665445185, "node_id": "MDU6SXNzdWU2NjU0NDUxODU=", "number": 1761, "title": "Field(default=None) overrides a field's type annotation as Optional", "user": {"login": "lsorber", "id": 4543654, "node_id": "MDQ6VXNlcjQ1NDM2NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4543654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsorber", "html_url": "https://github.com/lsorber", "followers_url": "https://api.github.com/users/lsorber/followers", "following_url": "https://api.github.com/users/lsorber/following{/other_user}", "gists_url": "https://api.github.com/users/lsorber/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsorber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsorber/subscriptions", "organizations_url": "https://api.github.com/users/lsorber/orgs", "repos_url": "https://api.github.com/users/lsorber/repos", "events_url": "https://api.github.com/users/lsorber/events{/privacy}", "received_events_url": "https://api.github.com/users/lsorber/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-24T22:13:58Z", "updated_at": "2020-07-24T23:25:44Z", "closed_at": "2020-07-24T22:32:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Output of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n            pydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /Users/.../miniconda3/envs/.../lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.3 (default, Jul  2 2020, 11:26:31)  [Clang 10.0.0 ]\r\n                     platform: macOS-10.15.6-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions', 'email-validator']\r\n```\r\n\r\nPydantic internally changes a field's type annotation from `X` to `Optional[X]` when applying `Field(default=None)`.\r\n\r\nArguably, this is a bug because it is no longer possible to choose between (the semantically different) `foo: int = Field(default=None)` and `foo: Optional[int] = Field(default=None)`. To me, the former reads as \"foo is a non-required (default=None) field that can take on non-null int values (int)\", while the latter reads as \"foo is a non-required (default=None) field that can take on nullable int values (Optional[int])\".\r\n\r\nConsider the following example:\r\n```py\r\nfrom pydantic import BaseModel, Field\r\n\r\nclass Foo(BaseModel):\r\n    foo: int = Field(default=None)\r\n\r\nFoo()  # OK: Don't expect to see a ValidationError because only supplied fields are validated.\r\nFoo(foo=None)  # Not OK: Expect to see a ValidationError because `foo` is not an `int`, but no error raised.\r\n\r\n# Why did this happen? Pydantic overrides the type of `foo` from `int` to `Optional[int]`:\r\nprint(Foo.__fields__[\"foo\"])\r\n# ModelField(name='foo', type=Optional[int], required=False, default=None)\r\n```\r\n\r\nOne workaround is to use a different sentinel value (see below). Is there a better way to specify \"non-required non-nullable fields of a given type\"?\r\n\r\n```python\r\nfrom pydantic import BaseModel, Field\r\n\r\n_missing = object()\r\n\r\nclass Foo(BaseModel):\r\n    foo: int = Field(default=_missing)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1756", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1756/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1756/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1756/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1756", "id": 664311143, "node_id": "MDU6SXNzdWU2NjQzMTExNDM=", "number": 1756, "title": "Field Object:  TypeError: __init__() got an unexpected keyword argument 'title'", "user": {"login": "rbcabreraUPM", "id": 25873303, "node_id": "MDQ6VXNlcjI1ODczMzAz", "avatar_url": "https://avatars2.githubusercontent.com/u/25873303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbcabreraUPM", "html_url": "https://github.com/rbcabreraUPM", "followers_url": "https://api.github.com/users/rbcabreraUPM/followers", "following_url": "https://api.github.com/users/rbcabreraUPM/following{/other_user}", "gists_url": "https://api.github.com/users/rbcabreraUPM/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbcabreraUPM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbcabreraUPM/subscriptions", "organizations_url": "https://api.github.com/users/rbcabreraUPM/orgs", "repos_url": "https://api.github.com/users/rbcabreraUPM/repos", "events_url": "https://api.github.com/users/rbcabreraUPM/events{/privacy}", "received_events_url": "https://api.github.com/users/rbcabreraUPM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-23T09:01:36Z", "updated_at": "2020-08-04T21:59:09Z", "closed_at": "2020-08-04T21:59:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting an error of ` TypeError: __init__() got an unexpected keyword argument 'title'`\r\n\r\nthis used to work on an older version of pydantic/fastapi.\r\n\r\nany suggestions? I am using the latest version of pydantic and fastapi\r\n```\r\nfrom pydantic import BaseModel\r\nfrom pydantic.fields import Field\r\nfrom enum import Enum\r\nfrom typing import List\r\n\r\nclass PriorityGatewaySchema(BaseModel):\r\n    gatewayName:  str = Field(..., title=\"OTP Gateway Name\")\r\n    gatewayCode:  str = Field(..., title=\"OTP Code\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1754", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1754/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1754/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1754/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1754", "id": 664069531, "node_id": "MDU6SXNzdWU2NjQwNjk1MzE=", "number": 1754, "title": "Field ordering, dynamic default values with validators and inheritance", "user": {"login": "Weissger", "id": 6883484, "node_id": "MDQ6VXNlcjY4ODM0ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6883484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Weissger", "html_url": "https://github.com/Weissger", "followers_url": "https://api.github.com/users/Weissger/followers", "following_url": "https://api.github.com/users/Weissger/following{/other_user}", "gists_url": "https://api.github.com/users/Weissger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Weissger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Weissger/subscriptions", "organizations_url": "https://api.github.com/users/Weissger/orgs", "repos_url": "https://api.github.com/users/Weissger/repos", "events_url": "https://api.github.com/users/Weissger/events{/privacy}", "received_events_url": "https://api.github.com/users/Weissger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-22T21:45:43Z", "updated_at": "2020-07-23T14:13:48Z", "closed_at": "2020-07-23T14:13:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Field ordering, dynamic default values with validators and inheritance\r\n\r\nI have a BaseModel defining a 'uri' field. This field should be provided when the model is instantiated. Another Model inheriting from my BaseModel defined fields, which could be used to construct the 'uri' field. As far as I understand for purposes like this validators can be used to construct dynamic default values as seen in the [documentation](https://pydantic-docs.helpmanual.io/usage/validators/). Nevertheless the field to be extended with a dynamic default value validator needs to be defined after the other fields used for the dynamic value creation or they won't be available in the value parameter. Due to the inheritance I unfortunately can't change the field definition order. Is there a way to access other attributes in the validator while preserving the inheritance structure? My code looks somewhat like following example:\r\n```\r\nimport pydantic\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass ModelA(BaseModel):\r\n    uri: str = ...\r\n\r\nclass ModelB(ModelA):\r\n    foo: str = ...\r\n    bar: str = \"a\"\r\n    uri: str = None\r\n\r\n    @pydantic.validator('uri', pre=False, always=True)\r\n    def default_uri(cls, v, *, values, **kwargs):\r\n        return v or \"{}#{}\".format(values['foo'], values['bar'])\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1750", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1750/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1750/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1750/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1750", "id": 663551089, "node_id": "MDU6SXNzdWU2NjM1NTEwODk=", "number": 1750, "title": "Default value validation", "user": {"login": "levsh", "id": 3469898, "node_id": "MDQ6VXNlcjM0Njk4OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3469898?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levsh", "html_url": "https://github.com/levsh", "followers_url": "https://api.github.com/users/levsh/followers", "following_url": "https://api.github.com/users/levsh/following{/other_user}", "gists_url": "https://api.github.com/users/levsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/levsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levsh/subscriptions", "organizations_url": "https://api.github.com/users/levsh/orgs", "repos_url": "https://api.github.com/users/levsh/repos", "events_url": "https://api.github.com/users/levsh/events{/privacy}", "received_events_url": "https://api.github.com/users/levsh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-22T07:47:21Z", "updated_at": "2020-07-22T08:10:05Z", "closed_at": "2020-07-22T08:10:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\n```\r\nimport typing\r\nimport pydantic\r\nimport pydantic.utils\r\nprint(pydantic.utils.version_info())\r\n\"\"\"\r\n             pydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /usr/local/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.3 (default, May 27 2020, 20:53:40)  [Clang 11.0.0 (clang-1100.0.33.17)]\r\n                     platform: macOS-10.14.6-x86_64-i386-64bit\r\n     optional deps. installed: []\r\n\"\"\"\r\n\r\n\r\nclass A(pydantic.BaseModel):\r\n    x: int\r\n    y: int\r\n     \r\n    \r\nclass B(pydantic.BaseModel):\r\n    z: typing.List[A] = pydantic.Field(['a', 'b'])\r\n\r\n\r\n# default value ['a', 'b'] for z argument is not a valid List[A] type but code below works\r\nb = B()  \r\nprint(b)    # will print z=['a', 'b']\r\nprint(b.z)  # will print ['a', 'b']\r\n        \r\n\r\n# if you are try to provide the z argument directly then ValidationError is occurs as expected     \r\nb = B(z=['a', 'b'])\r\n\r\n\"\"\"\r\n---------------------------------------------------------------------------\r\nValidationError                           Traceback (most recent call last)\r\n<ipython-input-5-455e2720ffb3> in <module>\r\n     21 \r\n     22 # if you are try to provide the z argument directly then ValidationError is occurs as expected\r\n---> 23 b = B(z=['a', 'b'])\r\n\r\n/usr/local/lib/python3.8/site-packages/pydantic/main.cpython-38-darwin.so in pydantic.main.BaseModel.__init__()\r\n\r\nValidationError: 2 validation errors for B\r\nz -> 0\r\n  value is not a valid dict (type=type_error.dict)\r\nz -> 1\r\n  value is not a valid dict (type=type_error.dict)\r\n\"\"\"\r\n```\r\n\r\nSo, what is the right way to validate default value?\r\nThank you!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1746", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1746/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1746/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1746/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1746", "id": 663126450, "node_id": "MDU6SXNzdWU2NjMxMjY0NTA=", "number": 1746, "title": "Naming of validator functions when using self-referencing models", "user": {"login": "khalo-sa", "id": 14795990, "node_id": "MDQ6VXNlcjE0Nzk1OTkw", "avatar_url": "https://avatars0.githubusercontent.com/u/14795990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khalo-sa", "html_url": "https://github.com/khalo-sa", "followers_url": "https://api.github.com/users/khalo-sa/followers", "following_url": "https://api.github.com/users/khalo-sa/following{/other_user}", "gists_url": "https://api.github.com/users/khalo-sa/gists{/gist_id}", "starred_url": "https://api.github.com/users/khalo-sa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khalo-sa/subscriptions", "organizations_url": "https://api.github.com/users/khalo-sa/orgs", "repos_url": "https://api.github.com/users/khalo-sa/repos", "events_url": "https://api.github.com/users/khalo-sa/events{/privacy}", "received_events_url": "https://api.github.com/users/khalo-sa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-21T15:55:38Z", "updated_at": "2020-07-21T18:42:11Z", "closed_at": "2020-07-21T18:42:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /home/USER/Dev/pyenv/py38/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.2 (default, Apr 27 2020, 15:53:34)  [GCC 9.3.0]\r\n                     platform: Linux-5.4.0-7634-generic-x86_64-with-glibc2.29\r\n     optional deps. installed: []\r\n\r\n```\r\n\r\nThe following code throws an exception. However, if I change the validator function's name from \"validate\" to anything else, it works. I assume that \"validate\" is used in Pydantic's source code, but I couldn't find any comment in the [validator's section of the docs](https://pydantic-docs.helpmanual.io/usage/validators/) about forbidden validator names.\r\n\r\n```py\r\nfrom pydantic import BaseModel, validator\r\nfrom typing import List\r\n\r\n\r\nclass Foo(BaseModel):\r\n    name: str\r\n\r\n    @validator('name')\r\n    def validate(cls, v):\r\n        allowed = [\"a\", \"b\"]\r\n        if v not in allowed:\r\n            raise ValueError(f\"Value {v} is not allowed\")\r\n        return v\r\n\r\n    #: The sibling of `Foo` is referenced by string\r\n    siblings: List[\"Foo\"] = None\r\n\r\n\r\nFoo.update_forward_refs()\r\n\r\nprint(Foo(name=\"a\"))\r\nprint(Foo(name=\"a\", siblings=[Foo(name=\"a\"), Foo(name=\"b\")]))\r\n\r\n\"\"\"\r\nreturns:\r\n#> name='a' sibling=None\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 21, in <module>\r\n    print(Foo(name=\"a\", sibling=Foo(name=\"b\")))\r\n  File \"pydantic/main.py\", line 346, in pydantic.main.BaseModel.__init__\r\npydantic.error_wrappers.ValidationError: 1 validation error for Foo\r\nsibling\r\n  Value 'name='b' sibling=None' is not allowed (type=value_error)\r\n\"\"\"\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1741", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1741/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1741/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1741/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1741", "id": 661378409, "node_id": "MDU6SXNzdWU2NjEzNzg0MDk=", "number": 1741, "title": "Unable to use custom config using @dataclass / deny all unknown fields", "user": {"login": "alvassin", "id": 1497444, "node_id": "MDQ6VXNlcjE0OTc0NDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1497444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvassin", "html_url": "https://github.com/alvassin", "followers_url": "https://api.github.com/users/alvassin/followers", "following_url": "https://api.github.com/users/alvassin/following{/other_user}", "gists_url": "https://api.github.com/users/alvassin/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvassin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvassin/subscriptions", "organizations_url": "https://api.github.com/users/alvassin/orgs", "repos_url": "https://api.github.com/users/alvassin/repos", "events_url": "https://api.github.com/users/alvassin/events{/privacy}", "received_events_url": "https://api.github.com/users/alvassin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-20T05:05:58Z", "updated_at": "2020-07-20T19:20:17Z", "closed_at": "2020-07-20T19:20:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to deny all unknown fields in my models. But when i tried to dig i found that it is not possible to control this behaviour (allow/deny/etc).\r\n\r\nThis works well:\r\n```py\r\nfrom pydantic import BaseModel\r\n\r\nclass Example(BaseModel):\r\n    test: str\r\n\r\nmodel = Example(test='works well')\r\n```\r\n\r\nBut when i try to use custom config as [described in docs](https://pydantic-docs.helpmanual.io/usage/model_config/) it does not work:\r\n\r\n```\r\nfrom pydantic import BaseModel, Extra\r\nfrom pydantic.dataclasses import dataclass\r\n\r\n\r\nclass MyConfig:\r\n    extra = Extra.allow\r\n\r\n\r\n@dataclass(config=MyConfig)\r\nclass Example(BaseModel):\r\n    test: str\r\n\r\nmodel = Example(test='does not work')\r\n```\r\n\r\nI see following output:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/alvassin/Work/example/t.py\", line 13, in <module>\r\n    model = Example(test='does not work')\r\n  File \"<string>\", line 3, in __init__\r\n  File \"pydantic/main.py\", line 363, in pydantic.main.BaseModel.__setattr__\r\nAttributeError: __fields_set__\r\n```\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /Users/alvassin/Work/example/env/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.7 (v3.7.7:d7c567b08f, Mar 10 2020, 02:56:16)  [Clang 6.0 (clang-600.0.57)]\r\n                     platform: Darwin-19.5.0-x86_64-i386-64bit\r\n     optional deps. installed: []\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1740", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1740/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1740/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1740/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1740", "id": 660263373, "node_id": "MDU6SXNzdWU2NjAyNjMzNzM=", "number": 1740, "title": "Generate titles for model properties (using `schema_json()`) only if explicitly provided", "user": {"login": "abunuwas", "id": 12152494, "node_id": "MDQ6VXNlcjEyMTUyNDk0", "avatar_url": "https://avatars1.githubusercontent.com/u/12152494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abunuwas", "html_url": "https://github.com/abunuwas", "followers_url": "https://api.github.com/users/abunuwas/followers", "following_url": "https://api.github.com/users/abunuwas/following{/other_user}", "gists_url": "https://api.github.com/users/abunuwas/gists{/gist_id}", "starred_url": "https://api.github.com/users/abunuwas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abunuwas/subscriptions", "organizations_url": "https://api.github.com/users/abunuwas/orgs", "repos_url": "https://api.github.com/users/abunuwas/repos", "events_url": "https://api.github.com/users/abunuwas/events{/privacy}", "received_events_url": "https://api.github.com/users/abunuwas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-18T17:09:42Z", "updated_at": "2020-07-21T14:03:18Z", "closed_at": "2020-07-21T14:03:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature Request\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.6.1\r\npydantic compiled: True\r\ninstall path: /Users/j/.local/share/virtualenvs/asfd-asdf-2c-XNDzz/lib/python3.7/site-packages/pydantic\r\npython version: 3.7.5 (default, Nov  1 2019, 02:16:32)  [Clang 11.0.0 (clang-1100.0.33.8)]\r\nplatform: Darwin-18.7.0-x86_64-i386-64bit\r\noptional deps. installed: []\r\n```\r\n---\r\n## Description\r\n\r\nWhen generating JSON schemas out of Pydantic models, all outputs come persistently with a title keyword describing each property and each model. However, as per the [JSON Schema documentation](https://json-schema.org/understanding-json-schema/reference/generic.html), the `title` keyword is not a required descriptor for a property, it's optional:\r\n\r\n>JSON Schema includes a few keywords, title, description, default, examples that aren\u2019t strictly used for validation, but are used to describe parts of a schema.\r\n**None of these \u201cannotation\u201d keywords are required**, but they are encouraged for good practice, and can make your schema \u201cself-documenting\u201d.\r\n\r\nIt should be the responsibility of the developer to include good titles for their models. Otherwise `titles` are not required, and a developer omitting a `title` may have reasons to do so. The fact that Pydantic picks up on the `title` keyword and generates a title version of the attribute or class name seems like an arbitrary behaviour. \r\n\r\n## Request\r\nWould it be possible to change the implementation to make it optional to generate JSON Schemas with titles only if developer explicitly provides a title for the attribute? \r\n\r\n---\r\nThe script:\r\ntest.py\r\n```py\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass Item(BaseModel):\r\n    attribute: str\r\n\r\n\r\nitem = Item(attribute='attribute')\r\n\r\nprint(item.schema_json())\r\n```\r\n\r\n```\r\n$ python test.py | jq\r\n```\r\n\r\n```javascript\r\n{\r\n  \"title\": \"Item\",\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"attribute\": {\r\n      \"title\": \"Attribute\",\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"required\": [\r\n    \"attribute\"\r\n  ]\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1733", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1733/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1733/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1733/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1733", "id": 659296888, "node_id": "MDU6SXNzdWU2NTkyOTY4ODg=", "number": 1733, "title": "Overriding default value makes alias go away", "user": {"login": "chbndrhnns", "id": 7534547, "node_id": "MDQ6VXNlcjc1MzQ1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7534547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chbndrhnns", "html_url": "https://github.com/chbndrhnns", "followers_url": "https://api.github.com/users/chbndrhnns/followers", "following_url": "https://api.github.com/users/chbndrhnns/following{/other_user}", "gists_url": "https://api.github.com/users/chbndrhnns/gists{/gist_id}", "starred_url": "https://api.github.com/users/chbndrhnns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chbndrhnns/subscriptions", "organizations_url": "https://api.github.com/users/chbndrhnns/orgs", "repos_url": "https://api.github.com/users/chbndrhnns/repos", "events_url": "https://api.github.com/users/chbndrhnns/events{/privacy}", "received_events_url": "https://api.github.com/users/chbndrhnns/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-17T14:21:53Z", "updated_at": "2020-07-21T13:41:35Z", "closed_at": "2020-07-21T13:41:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nWhen overriding a default of in a child model, the alias defined in the parent is lost for the child.\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.6.1\r\n            pydantic compiled: True\r\n                 install path: /Users/powerjo/dev/juice/juiceutils/.venv/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.2 (default, Apr 14 2020, 11:26:53)  [Clang 10.0.1 (clang-1001.0.46.4)]\r\n                     platform: macOS-10.14.6-x86_64-i386-64bit\r\n     optional deps. installed: ['email-validator']\r\n```\r\n\r\nExample:\r\n\r\n```py\r\nfrom pydantic import BaseModel, Field\r\n\r\n\r\nclass Parent(BaseModel):\r\n    a: int = Field('1', alias='version_a')\r\n\r\n\r\nclass Child(Parent):\r\n    a = 2\r\n\r\n\r\ndef test_override_default():\r\n    parent = Parent()\r\n    child = Child()\r\n    assert parent.dict(by_alias=True).get('version_a') == parent.a\r\n    assert child.dict(by_alias=True).get('version_a') == child.a\r\n```\r\n\r\nResult:\r\n\r\n```py\r\ndef test_override_default():\r\n        p = Parent()\r\n        c = Child()\r\n        assert p.dict(by_alias=True).get('version_a') == p.a\r\n>       assert c.dict(by_alias=True).get('version_a') == c.a\r\nE       assert None == 2\r\n\r\ntest_ov.py:16: AssertionError\r\n```\r\n\r\nMaybe related: \r\n- https://github.com/samuelcolvin/pydantic/issues/757\r\n- https://github.com/samuelcolvin/pydantic/issues/782", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1731", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1731/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1731/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1731/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1731", "id": 658122833, "node_id": "MDU6SXNzdWU2NTgxMjI4MzM=", "number": 1731, "title": "Container class validator not called when submodel fails", "user": {"login": "p3trus", "id": 1489787, "node_id": "MDQ6VXNlcjE0ODk3ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1489787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p3trus", "html_url": "https://github.com/p3trus", "followers_url": "https://api.github.com/users/p3trus/followers", "following_url": "https://api.github.com/users/p3trus/following{/other_user}", "gists_url": "https://api.github.com/users/p3trus/gists{/gist_id}", "starred_url": "https://api.github.com/users/p3trus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p3trus/subscriptions", "organizations_url": "https://api.github.com/users/p3trus/orgs", "repos_url": "https://api.github.com/users/p3trus/repos", "events_url": "https://api.github.com/users/p3trus/events{/privacy}", "received_events_url": "https://api.github.com/users/p3trus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T11:44:23Z", "updated_at": "2020-07-21T13:26:41Z", "closed_at": "2020-07-21T13:26:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Validator not called when submodel fails\r\nI was under the impression that pydantic should evaluate the whole schema and report all found errors at once, but maybe thats wrong. Let's consider the following example\r\n\r\n```py\r\nimport pydantic\r\nfrom typing import Optional, List\r\n\r\nclass Item(pydantic.BaseModel):\r\n    label: str\r\n    reference: Optional[str]\r\n        \r\n        \r\nclass Container(pydantic.BaseModel):\r\n    items: List[Item]\r\n    \r\n    @pydantic.validator('items', each_item=True)\r\n    def _validate_item(cls, v, values, config, field):\r\n        raise ValueError('Validator called even when an error occurs.')\r\n    \r\n    @pydantic.validator('items')\r\n    def _validate(cls, v, values, config, field):\r\n        raise ValueError('Validator not called when an error occurs.')\r\n        \r\n        return v\r\n\r\nexample = {\r\n    'items': [\r\n        {'label': 'A'},\r\n        {'label': ['wrong_type']}, # Error\r\n    ]\r\n}\r\n    \r\nContainer(**example)\r\n```\r\nThe container has two validators, a regular one and an `each_item` one. In this example, the second item triggers a TypeError, correctly shown in the resulting error message. \r\n\r\n```py\r\nValidationError: 2 validation errors for Container\r\nitems -> 0\r\n  Validator called even when an error occurs. (type=value_error)\r\nitems -> 1 -> label\r\n  str type expected (type=type_error.str)\r\n```\r\n\r\nAdditionally, the `_validate_item` method of the container is also called. The regular validator, however, is not. \r\nMy question is why?\r\n\r\nConversely, when the `_validate` method is marked as a prevalidator like this\r\n```py\r\n    @pydantic.validator('items', pre=True)\r\n    def _validate(cls, v, values, config, field):\r\n        raise ValueError('Validator not called when an error occurs.')\r\n        \r\n        return v\r\n```\r\nit get's called but the others are not validated. Is there a way to get all errors to show up?\r\n\r\n---\r\n\r\nFor reference:\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: C:\\Users\\mh890176\\Documents\\workspace\\RaptorSpecDB\\.env\\Lib\\site-packages\\pydantic\r\n               python version: 3.7.6 | packaged by conda-forge | (default, Jun  1 2020, 18:11:50) [MSC v.1916 64 bit (AMD64)]\r\n                     platform: Windows-10-10.0.14393-SP0\r\n     optional deps. installed: ['typing-extensions']\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1729", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1729/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1729/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1729/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1729", "id": 657603170, "node_id": "MDU6SXNzdWU2NTc2MDMxNzA=", "number": 1729, "title": "Add __post_init__ to BaseModel/non-dataclasses", "user": {"login": "jessekrubin", "id": 20122832, "node_id": "MDQ6VXNlcjIwMTIyODMy", "avatar_url": "https://avatars3.githubusercontent.com/u/20122832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jessekrubin", "html_url": "https://github.com/jessekrubin", "followers_url": "https://api.github.com/users/jessekrubin/followers", "following_url": "https://api.github.com/users/jessekrubin/following{/other_user}", "gists_url": "https://api.github.com/users/jessekrubin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jessekrubin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jessekrubin/subscriptions", "organizations_url": "https://api.github.com/users/jessekrubin/orgs", "repos_url": "https://api.github.com/users/jessekrubin/repos", "events_url": "https://api.github.com/users/jessekrubin/events{/privacy}", "received_events_url": "https://api.github.com/users/jessekrubin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-15T19:39:18Z", "updated_at": "2020-07-21T13:50:33Z", "closed_at": "2020-07-21T13:24:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be very nice if there were some sort of __post_init__ for the pydantic.BaseModel.\r\n\r\nProbably wouldn't be too much work to add either (but IDK).\r\n\r\nI can fork and pr the changes, but I would like to hear @samuelcolvin's/others thoughts before doing so", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1727", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1727/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1727/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1727/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1727", "id": 657418680, "node_id": "MDU6SXNzdWU2NTc0MTg2ODA=", "number": 1727, "title": "Using multiple BaseSettings with different prefixes", "user": {"login": "lesnek", "id": 20325169, "node_id": "MDQ6VXNlcjIwMzI1MTY5", "avatar_url": "https://avatars2.githubusercontent.com/u/20325169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lesnek", "html_url": "https://github.com/lesnek", "followers_url": "https://api.github.com/users/lesnek/followers", "following_url": "https://api.github.com/users/lesnek/following{/other_user}", "gists_url": "https://api.github.com/users/lesnek/gists{/gist_id}", "starred_url": "https://api.github.com/users/lesnek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lesnek/subscriptions", "organizations_url": "https://api.github.com/users/lesnek/orgs", "repos_url": "https://api.github.com/users/lesnek/repos", "events_url": "https://api.github.com/users/lesnek/events{/privacy}", "received_events_url": "https://api.github.com/users/lesnek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-15T14:56:39Z", "updated_at": "2020-07-21T13:24:23Z", "closed_at": "2020-07-21T13:24:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nHi, I have problem with joining multiple BaseSettings into one config. \r\n\r\nFirst I tried:\r\n```py\r\nfrom pydantic import BaseSettings\r\n\r\n\r\nclass KubectlSecrets(BaseSettings):\r\n    credentials: str\r\n    google_auth_key: str\r\n\r\n    class Config:\r\n        env_prefix = \"K8S_SECRET_\"\r\n\r\nclass Settings(KubectlSecrets):\r\n    environment: str = \"development\"\r\n    redis_db: str = \"0\"\r\n\r\n    class Config:\r\n        env_prefix = \"\"\r\n```\r\nBut this going to overwrite prefix and I cannot find k8s secrets\r\n\r\nNext I tried\r\n```py\r\nimport os\r\nfrom pydantic import BaseSettings\r\n\r\nos.environ[\"K8S_SECRET_CREDENTIALS\"] = \"dummy\"\r\nos.environ[\"K8S_SECRET_GOOGLE_AUTH_KEY\"] = \"dummy_key\"\r\nos.environ[\"ENVIRONMENT\"] = \"prod\"\r\nos.environ[\"REDIS_DB\"] = \"1\"\r\n\r\n\r\nclass KubectlSecrets(BaseSettings):\r\n    credentials: str\r\n    google_auth_key: str\r\n\r\n    class Config:\r\n        env_prefix = \"K8S_SECRET_\"\r\n\r\n\r\nclass EnvSettings(BaseSettings):\r\n    environment: str = \"development\"\r\n    redis_db: str = \"0\"\r\n\r\n\r\nclass Settings(KubectlSecrets, EnvSettings):\r\n    ...\r\n\r\n\r\nprint(KubectlSecrets())\r\nprint(EnvSettings())\r\nprint(Settings())\r\n\r\n```\r\nOutput:\r\n```\r\ncredentials='dummy' google_auth_key='dummy_key'\r\nenvironment='prod' redis_db='1'\r\nenvironment='development' redis_db='0' credentials='dummy' google_auth_key='dummy_key'\r\n```\r\nIt is again overwritten by prefix and default values are used, when there is not default val it raises error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/lesnek/Library/Application Support/JetBrains/PyCharm2020.1/scratches/scratch.py\", line 29, in <module>\r\n    print(Settings())\r\n  File \"pydantic/env_settings.py\", line 28, in pydantic.env_settings.BaseSettings.__init__\r\n  File \"pydantic/main.py\", line 338, in pydantic.main.BaseModel.__init__\r\npydantic.error_wrappers.ValidationError: 1 validation error for Settings\r\nredis_db\r\n  field required (type=value_error.missing)\r\n```\r\n\r\nIs there some best practices to join BaseSettings with different prefixes? We want it to get secrets nicely in namespace with multiple services.\r\nI know the solution to use Field, but then I have to use it everywhere (30+ envs) or write it as big dict of fields or rewrite codebase to uses multiple settings.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1726", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1726/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1726/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1726/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1726", "id": 657148456, "node_id": "MDU6SXNzdWU2NTcxNDg0NTY=", "number": 1726, "title": "Working with Django orm in nested objects ?", "user": {"login": "vitalik", "id": 95222, "node_id": "MDQ6VXNlcjk1MjIy", "avatar_url": "https://avatars3.githubusercontent.com/u/95222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitalik", "html_url": "https://github.com/vitalik", "followers_url": "https://api.github.com/users/vitalik/followers", "following_url": "https://api.github.com/users/vitalik/following{/other_user}", "gists_url": "https://api.github.com/users/vitalik/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitalik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitalik/subscriptions", "organizations_url": "https://api.github.com/users/vitalik/orgs", "repos_url": "https://api.github.com/users/vitalik/repos", "events_url": "https://api.github.com/users/vitalik/events{/privacy}", "received_events_url": "https://api.github.com/users/vitalik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-15T08:02:29Z", "updated_at": "2020-07-21T13:18:55Z", "closed_at": "2020-07-21T13:18:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's say we have Django models structure like this:\r\n\r\n```py\r\nclass Blog(models.Model):\r\n    text = models.TextField()\r\n\r\nclass Comment(models.Model):\r\n    comment = models.ForeignKey(Blog)\r\n    text = models.TextField()\r\n```\r\n\r\n```Comment ---ForeignKey----> Blog```\r\n\r\n\r\nto get get blog with it's comments you need to use `comment_set.all()` \r\n\r\n```py\r\nblog = Blog.objects.get(...\r\n\r\ncomments = blog.comment_set.all()\r\n```\r\n\r\n\r\nHow should I use pydantic to serialize blog objects with nested comments ?\r\n\r\n```py\r\n\r\nclass Comment(pydantic.BaseModel):\r\n     text: str\r\n     \r\n     class Config:\r\n             orm_mode = True\r\n\r\n\r\nclass BlogSchema(pydantic.BaseModel):\r\n      text: str\r\n      comments: List[Comment]   # <-- !!!! how to make this work automatically\r\n\r\n     class Config:\r\n             orm_mode = True\r\n\r\n\r\nblog = ... get from db...\r\ndata = BlogSchema(blog)  # <-- ! I want that comment_set.all() are called automatically and injected to BlogSchema.comments\r\n```\r\n\r\nso how to tell `comments: List[Comment] ` automatically call `comment_set.all()` ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1724", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1724/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1724/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1724/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1724", "id": 657040274, "node_id": "MDU6SXNzdWU2NTcwNDAyNzQ=", "number": 1724, "title": "how to get metaclass about Model where raise ValidationError", "user": {"login": "fronterender", "id": 19854520, "node_id": "MDQ6VXNlcjE5ODU0NTIw", "avatar_url": "https://avatars3.githubusercontent.com/u/19854520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fronterender", "html_url": "https://github.com/fronterender", "followers_url": "https://api.github.com/users/fronterender/followers", "following_url": "https://api.github.com/users/fronterender/following{/other_user}", "gists_url": "https://api.github.com/users/fronterender/gists{/gist_id}", "starred_url": "https://api.github.com/users/fronterender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fronterender/subscriptions", "organizations_url": "https://api.github.com/users/fronterender/orgs", "repos_url": "https://api.github.com/users/fronterender/repos", "events_url": "https://api.github.com/users/fronterender/events{/privacy}", "received_events_url": "https://api.github.com/users/fronterender/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-15T03:54:57Z", "updated_at": "2020-07-21T13:23:34Z", "closed_at": "2020-07-21T13:23:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "question:\r\ni want to get cls where raise ValidationError, for example\r\n.....\r\nclass User(basemodel):\r\n    name: str\r\n....\r\n@app.exception_handler(RequestValidationError)\r\ndef validation_handler(req, exc):\r\n  # how can i get the  User Model in here\r\n  return JSONResponse(content={ }, status_code=200)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1723", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1723/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1723/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1723/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1723", "id": 656778674, "node_id": "MDU6SXNzdWU2NTY3Nzg2NzQ=", "number": 1723, "title": "No way to have a proper Union[int, bool]", "user": {"login": "bentheiii", "id": 13264001, "node_id": "MDQ6VXNlcjEzMjY0MDAx", "avatar_url": "https://avatars3.githubusercontent.com/u/13264001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bentheiii", "html_url": "https://github.com/bentheiii", "followers_url": "https://api.github.com/users/bentheiii/followers", "following_url": "https://api.github.com/users/bentheiii/following{/other_user}", "gists_url": "https://api.github.com/users/bentheiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/bentheiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bentheiii/subscriptions", "organizations_url": "https://api.github.com/users/bentheiii/orgs", "repos_url": "https://api.github.com/users/bentheiii/repos", "events_url": "https://api.github.com/users/bentheiii/events{/privacy}", "received_events_url": "https://api.github.com/users/bentheiii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-14T17:29:50Z", "updated_at": "2020-07-21T13:23:10Z", "closed_at": "2020-07-21T13:23:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`\r\n```\r\n             pydantic version: 1.6\r\n            pydantic compiled: True\r\n                 install path: C:\\py_envs\\Python38\\Lib\\site-packages\\pydantic\r\n               python version: 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:37:02) [MSC v.1924 64 bit (AMD64)]\r\n                     platform: Windows-10-10.0.19041-SP0\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\nThe current method of handling `Union`s makes it impossible to specify a union of a string and an int without having no way to differentiate inputs of different types.\r\n\r\n```py\r\nfrom typing import Union\r\n\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass A(BaseModel):\r\n    x: Union[bool, int]\r\n    y: Union[int, bool]\r\n\r\n\r\na = A(x=True, y=True)\r\nprint(type(a.x), type(a.y))  # <class 'bool'> <class 'int'>\r\n\r\na = A(x=0, y=0)\r\nprint(type(a.x), type(a.y))  # <class 'bool'> <class 'int'>\r\n```\r\n\r\nThis is problematic if you want to differentiate the values dynamically by their type.\r\n\r\nA trivial solution to this (and other confusing `Union` related behavior) when coercing to a `Union`, is to check whether the input type is already one of the `Union` args and if so, perform no conversion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1722", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1722/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1722/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1722/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1722", "id": 656640870, "node_id": "MDU6SXNzdWU2NTY2NDA4NzA=", "number": 1722, "title": "Error in find_validators (issubclass() arg 1 must be a class)", "user": {"login": "jbeezley", "id": 31890, "node_id": "MDQ6VXNlcjMxODkw", "avatar_url": "https://avatars2.githubusercontent.com/u/31890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeezley", "html_url": "https://github.com/jbeezley", "followers_url": "https://api.github.com/users/jbeezley/followers", "following_url": "https://api.github.com/users/jbeezley/following{/other_user}", "gists_url": "https://api.github.com/users/jbeezley/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeezley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeezley/subscriptions", "organizations_url": "https://api.github.com/users/jbeezley/orgs", "repos_url": "https://api.github.com/users/jbeezley/repos", "events_url": "https://api.github.com/users/jbeezley/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeezley/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-14T14:07:03Z", "updated_at": "2020-07-15T19:23:20Z", "closed_at": "2020-07-15T19:23:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.6\r\n            pydantic compiled: True\r\n                 install path: <prefix>/env/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.2 (default, Apr 27 2020, 15:53:34)  [GCC 9.3.0]\r\n                     platform: Linux-5.4.0-39-generic-x86_64-with-glibc2.29\r\n     optional deps. installed: ['typing-extensions']\r\n\r\n```\r\n\r\n\r\n```py\r\nfrom typing import List\r\n\r\nfrom pydantic import BaseModel, Field, validator\r\n\r\n\r\nclass Schema(BaseModel):\r\n    foo: List[str] = Field(default_factory=list)\r\n\r\n    @validator(\"foo\", pre=True, each_item=True)\r\n    def mutate_foo(cls, v):\r\n        return f\"{v}-1\"\r\n\r\n\r\nclass Derived(Schema):\r\n    pass\r\n\r\n\r\nprint(Derived(foo=['bar']).foo)\r\n```\r\n\r\nThis results in\r\n```\r\nTraceback (most recent call last):\r\n  File \"pydantic/validators.py\", line 579, in pydantic.validators.find_validators\r\nTypeError: issubclass() arg 1 must be a class\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"ptest.py\", line 14, in <module>\r\n    class Derived(Schema):\r\n  File \"pydantic/main.py\", line 231, in pydantic.main.ModelMetaclass.__new__\r\n  File \"pydantic/fields.py\", line 523, in pydantic.fields.ModelField.populate_validators\r\n  File \"pydantic/validators.py\", line 588, in find_validators\r\nRuntimeError: error checking inheritance of typing.List[str] (type: List[str])\r\n```\r\n\r\nThis code sample works in pydantic 1.5.1.  The bug seems to rely on the combination of `default_factory`, the `@validator` method, and the subclass.  Removing any one of these causes the code to run correctly.\r\n\r\nNote: there are a few other issues with the similar error message, but they appear to be distinct from this because they apply to versions <= 1.5.1 and have slightly different stack traces.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1721", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1721/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1721/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1721/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1721", "id": 656448634, "node_id": "MDU6SXNzdWU2NTY0NDg2MzQ=", "number": 1721, "title": "Howto validate references between list items", "user": {"login": "p3trus", "id": 1489787, "node_id": "MDQ6VXNlcjE0ODk3ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1489787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p3trus", "html_url": "https://github.com/p3trus", "followers_url": "https://api.github.com/users/p3trus/followers", "following_url": "https://api.github.com/users/p3trus/following{/other_user}", "gists_url": "https://api.github.com/users/p3trus/gists{/gist_id}", "starred_url": "https://api.github.com/users/p3trus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p3trus/subscriptions", "organizations_url": "https://api.github.com/users/p3trus/orgs", "repos_url": "https://api.github.com/users/p3trus/repos", "events_url": "https://api.github.com/users/p3trus/events{/privacy}", "received_events_url": "https://api.github.com/users/p3trus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-14T08:56:23Z", "updated_at": "2020-07-16T10:34:18Z", "closed_at": "2020-07-16T10:34:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: C:\\Users\\XXXX\\Documents\\workspace\\XXXX\\.env\\Lib\\site-packages\\pydantic\r\n               python version: 3.7.6 | packaged by conda-forge | (default, Jun  1 2020, 18:11:50) [MSC v.1916 64 bit (AMD64)]\r\n                     platform: Windows-10-10.0.14393-SP0\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n\r\nI really enjoy pydantic so far but validation still troubles me. Let me briefly explain what I'd like to do using a simplified example.\r\nI have some sort of Container class which holds a list of Item classes. Each item has a label. Some items have a reference field which points to one of the labeled items. I would like to validate that all references actually exist meaning that one of the items in the container list must have that label.\r\n\r\n```py\r\n\r\nimport pydantic\r\nfrom typing import Optional, List\r\nclass Item(pydantic.BaseModel):\r\n    label: str\r\n    reference: Optional[str]\r\n        \r\n        \r\nclass Container(pydantic.BaseModel):\r\n    items: List[Item]\r\n        \r\n    @pydantic.validator('items')\r\n    def _reference_is_valid(cls, v, values, config, field):\r\n        # Should raise an exception for each incorrect reference\r\n        return v\r\n\r\nexample = {\r\n    'items': [\r\n        {'label': 'A'},\r\n        {'label': 'B', 'reference': 'F'}, # Error\r\n        {'label': 'C', 'reference': 'B'}, # Exists\r\n        {'label': 'C', 'reference': 'E'}, # Error\r\n    ]\r\n}\r\n    \r\nContainer(**example)\r\n```\r\n\r\nOf course I can do a validator and manually loop over the items and check each reference. But how would I raise multiple errors then showing which item has an incorrect reference? The ErrorWrapper, used internally would be able to track the item index of the erroneous reference via the loc parameter but I'm not sure If I should raise that from a validator.\r\n\r\nAlternatively, I could use the `each_item` parameter which would allow me to raise multiple errors but I don't know how I could access the other items to actually check. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1718", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1718/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1718/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1718/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1718", "id": 656337179, "node_id": "MDU6SXNzdWU2NTYzMzcxNzk=", "number": 1718, "title": "AttributeError: module 'pydantic.typing' has no attribute 'AnyType'", "user": {"login": "kaiwenw", "id": 24740405, "node_id": "MDQ6VXNlcjI0NzQwNDA1", "avatar_url": "https://avatars3.githubusercontent.com/u/24740405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaiwenw", "html_url": "https://github.com/kaiwenw", "followers_url": "https://api.github.com/users/kaiwenw/followers", "following_url": "https://api.github.com/users/kaiwenw/following{/other_user}", "gists_url": "https://api.github.com/users/kaiwenw/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaiwenw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaiwenw/subscriptions", "organizations_url": "https://api.github.com/users/kaiwenw/orgs", "repos_url": "https://api.github.com/users/kaiwenw/repos", "events_url": "https://api.github.com/users/kaiwenw/events{/privacy}", "received_events_url": "https://api.github.com/users/kaiwenw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-14T05:29:08Z", "updated_at": "2020-07-21T13:22:37Z", "closed_at": "2020-07-21T13:22:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "For pydantic 1.6, I cannot import pydantic.typing.AnyType anymore. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1717", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1717/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1717/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1717/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1717", "id": 656143185, "node_id": "MDU6SXNzdWU2NTYxNDMxODU=", "number": 1717, "title": "Pydantic 1.6: fields with default_factory cause parse_obj() to set fields to unparsed values", "user": {"login": "johnanthonyowens", "id": 1550786, "node_id": "MDQ6VXNlcjE1NTA3ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1550786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnanthonyowens", "html_url": "https://github.com/johnanthonyowens", "followers_url": "https://api.github.com/users/johnanthonyowens/followers", "following_url": "https://api.github.com/users/johnanthonyowens/following{/other_user}", "gists_url": "https://api.github.com/users/johnanthonyowens/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnanthonyowens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnanthonyowens/subscriptions", "organizations_url": "https://api.github.com/users/johnanthonyowens/orgs", "repos_url": "https://api.github.com/users/johnanthonyowens/repos", "events_url": "https://api.github.com/users/johnanthonyowens/events{/privacy}", "received_events_url": "https://api.github.com/users/johnanthonyowens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-13T21:14:22Z", "updated_at": "2020-07-15T19:23:19Z", "closed_at": "2020-07-15T19:23:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nThis is likely related to #1710 but does not explicitly involve validators. This would be a good candidate for a unit test to prevent future regressions.\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.6\r\npydantic compiled: True\r\ninstall path: /usr/local/lib/python3.8/site-packages/pydantic\r\npython version: 3.8.3 (default, May 16 2020, 07:08:28)  [GCC 8.3.0]\r\nplatform: Linux-4.15.0-109-generic-x86_64-with-glibc2.2.5\r\noptional deps. installed: []\r\n```\r\nHere is a self-contained example illustrating the problem:\r\n```py\r\n\r\nfrom pydantic import BaseModel, Field\r\n\r\nclass Inner(BaseModel):\r\n    val: int = Field(0)\r\n\r\nclass Outer(BaseModel):\r\n    inner_1: Inner = Field(default_factory=Inner)\r\n    inner_2: Inner = Field(Inner())\r\n\r\ndefault = Outer().dict() # default == {'inner_1': {'val': 0}, 'inner_2': {'val': 0}}\r\nparsed = Outer.parse_obj(default)\r\n\r\nprint(parsed)\r\n```\r\nIn 1.6, this prints:\r\n`inner_1={'value': 'default'} inner_2=Inner(value='default')`\r\nNote that `inner_1` is a dict, not an `Inner` object!\r\n\r\nIn 1.5.1 this prints:\r\n`inner_1=Inner(val=0) inner_2=Inner(val=0)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1715", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1715/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1715/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1715/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1715", "id": 655731632, "node_id": "MDU6SXNzdWU2NTU3MzE2MzI=", "number": 1715, "title": "Generate Aliases for Schema Extras", "user": {"login": "timbmg", "id": 11020443, "node_id": "MDQ6VXNlcjExMDIwNDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/11020443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timbmg", "html_url": "https://github.com/timbmg", "followers_url": "https://api.github.com/users/timbmg/followers", "following_url": "https://api.github.com/users/timbmg/following{/other_user}", "gists_url": "https://api.github.com/users/timbmg/gists{/gist_id}", "starred_url": "https://api.github.com/users/timbmg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timbmg/subscriptions", "organizations_url": "https://api.github.com/users/timbmg/orgs", "repos_url": "https://api.github.com/users/timbmg/repos", "events_url": "https://api.github.com/users/timbmg/events{/privacy}", "received_events_url": "https://api.github.com/users/timbmg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-13T10:16:59Z", "updated_at": "2020-07-21T13:16:13Z", "closed_at": "2020-07-21T13:16:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given that I have a schema like this:\r\n\r\n```python3\r\nfrom pydantic import BaseModel\r\n\r\ndef to_camel_case(snake_case: str):\r\n    words = snake_case.split(\"_\")\r\n    return \"\".join([words[0].lower()] + [word.capitalize() for word in words[1:]])\r\n\r\n\r\nclass CamelBaseModel(BaseModel):\r\n    class Config:\r\n        alias_generator = to_camel_case\r\n        allow_population_by_field_name = True\r\n\r\nclass MyObj(CamelBaseModel):\r\n    class Config:\r\n        extra = \"allow\"\r\n```\r\n\r\nI would like to create objects like this:\r\n```python\r\nmy_obj = MyObj(my_attr=\"test\")\r\n```\r\nwhere now the alias generation should also apply to the extra fields. In this case MyObj should have an attribute ``myAttr`\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1711", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1711/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1711/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1711/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1711", "id": 655284059, "node_id": "MDU6SXNzdWU2NTUyODQwNTk=", "number": 1711, "title": "How can I create a field with an illegal python identifier? (e.g. field is a number)", "user": {"login": "mahmoudimus", "id": 40820, "node_id": "MDQ6VXNlcjQwODIw", "avatar_url": "https://avatars2.githubusercontent.com/u/40820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoudimus", "html_url": "https://github.com/mahmoudimus", "followers_url": "https://api.github.com/users/mahmoudimus/followers", "following_url": "https://api.github.com/users/mahmoudimus/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoudimus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoudimus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoudimus/subscriptions", "organizations_url": "https://api.github.com/users/mahmoudimus/orgs", "repos_url": "https://api.github.com/users/mahmoudimus/repos", "events_url": "https://api.github.com/users/mahmoudimus/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoudimus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-11T21:40:10Z", "updated_at": "2020-07-11T21:46:29Z", "closed_at": "2020-07-11T21:46:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: $HOME/.pyenv/versions/3.8.3/envs/automate/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.3 (default, Jun 21 2020, 16:20:10)  [Clang 11.0.3 (clang-1103.0.32.62)]\r\n                     platform: macOS-10.15.5-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions', 'email-validator']\r\n```\r\n\r\nMy input is:\r\n\r\n```json\r\n{\r\n  \"result\": {\r\n    \"projects\": {\r\n      \"0\": 1594070188,\r\n      \"1\": 1594070188,\r\n      \"2\": 1594070188,\r\n      \"3\": 1594070188,\r\n      \"4\": 1594070188,\r\n      \"5\": 1594055788,\r\n      \"6\": 1594055788,\r\n      \"7\": 1594055788,\r\n      \"8\": 1594055788,\r\n      \"9\": 1593934878,\r\n      \"10\": 1593903556\r\n    }\r\n}\r\n```\r\nMy pydantic code:\r\n\r\n```py\r\nfrom __future__ import annotations\r\n\r\nfrom datetime import datetime\r\nfrom typing import Dict\r\n\r\nfrom pydantic import BaseModel\r\n\r\nclass Result(BaseModel):\r\n    projects: Dict[str, datetime]\r\n\r\nclass Model(BaseModel):\r\n    result: Result\r\n```\r\n\r\nI would like to create a `Project` class but the keys are integers which are invalid python identifiers. So, I worked around it by doing `Dict[str,datetime]`, but I really would like a class here. Is there a way to do what I want?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1710", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1710/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1710/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1710/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1710", "id": 655218232, "node_id": "MDU6SXNzdWU2NTUyMTgyMzI=", "number": 1710, "title": "Pydantic 1.6 does not validate nested models when using a default_factory", "user": {"login": "jlowin", "id": 153965, "node_id": "MDQ6VXNlcjE1Mzk2NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/153965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlowin", "html_url": "https://github.com/jlowin", "followers_url": "https://api.github.com/users/jlowin/followers", "following_url": "https://api.github.com/users/jlowin/following{/other_user}", "gists_url": "https://api.github.com/users/jlowin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlowin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlowin/subscriptions", "organizations_url": "https://api.github.com/users/jlowin/orgs", "repos_url": "https://api.github.com/users/jlowin/repos", "events_url": "https://api.github.com/users/jlowin/events{/privacy}", "received_events_url": "https://api.github.com/users/jlowin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-11T14:26:00Z", "updated_at": "2020-07-15T19:23:19Z", "closed_at": "2020-07-15T19:23:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.6\r\n            pydantic compiled: True\r\n                 install path: /usr/local/Caskroom/miniconda/base/envs/server/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.3 (default, Jul  2 2020, 11:26:31)  [Clang 10.0.0 ]\r\n                     platform: macOS-10.15.5-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n\r\nI'm aware that [validation does not apply to default values](https://github.com/samuelcolvin/pydantic/issues/1488), but it appears that it is no longer applied to *user-provided* values that have a default factory value, either. If this is expected, I'm not sure if I saw it in the documentation or changelog. \r\n\r\n```py\r\nfrom pydantic import BaseModel, Field\r\nfrom typing import List\r\n\r\nclass Child(BaseModel):\r\n    x: int\r\n\r\nclass Parent(BaseModel):\r\n    children: List[Child] = Field(default_factory=list)\r\n\r\n\r\np = Parent(children=[{'x':1}, {'y':2}])\r\n```\r\n\r\nIn Pydantic 1.5.1, an error is raised because the second child fails to validate (it is missing required value 'x')\r\n\r\nIn Pydantic 1.6, the Parent object is instantiated successfully and contains two dicts:\r\n\r\n```py\r\nprint(p)\r\n# children=[{'x': 1}, {'y': 2}]\r\n```\r\n\r\nTo avoid this and recover the expected behavior, `validate_all` must be set on the `Parent` class. However, since I'm providing the child value, I'm surprised that I had to ask for it to be validated. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1707", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1707/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1707/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1707/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1707", "id": 655133508, "node_id": "MDU6SXNzdWU2NTUxMzM1MDg=", "number": 1707, "title": "How to enforce IDE (VSCode) showing con* parameters options?", "user": {"login": "lowercase00", "id": 21188280, "node_id": "MDQ6VXNlcjIxMTg4Mjgw", "avatar_url": "https://avatars0.githubusercontent.com/u/21188280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowercase00", "html_url": "https://github.com/lowercase00", "followers_url": "https://api.github.com/users/lowercase00/followers", "following_url": "https://api.github.com/users/lowercase00/following{/other_user}", "gists_url": "https://api.github.com/users/lowercase00/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowercase00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowercase00/subscriptions", "organizations_url": "https://api.github.com/users/lowercase00/orgs", "repos_url": "https://api.github.com/users/lowercase00/repos", "events_url": "https://api.github.com/users/lowercase00/events{/privacy}", "received_events_url": "https://api.github.com/users/lowercase00/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-11T04:41:18Z", "updated_at": "2020-07-11T21:56:16Z", "closed_at": "2020-07-11T21:56:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "While working with `constr` I have to keep typing \"max_length=\" several times.\r\nIs there anyway to get the autocomplete feature on VSCode?\r\n\r\nIs this something that would need a plugin?\r\nOr am I just misconfiguring my IDE?\r\n\r\nThanks!\r\n\r\n![Screen Shot 2020-07-11 at 01 39 26](https://user-images.githubusercontent.com/21188280/87216610-a8178800-c317-11ea-8aad-f767c39b1e25.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1702", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1702/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1702/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1702/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1702", "id": 654238474, "node_id": "MDU6SXNzdWU2NTQyMzg0NzQ=", "number": 1702, "title": "add a required ports kwarg to urls", "user": {"login": "flapili", "id": 29481952, "node_id": "MDQ6VXNlcjI5NDgxOTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/29481952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flapili", "html_url": "https://github.com/flapili", "followers_url": "https://api.github.com/users/flapili/followers", "following_url": "https://api.github.com/users/flapili/following{/other_user}", "gists_url": "https://api.github.com/users/flapili/gists{/gist_id}", "starred_url": "https://api.github.com/users/flapili/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flapili/subscriptions", "organizations_url": "https://api.github.com/users/flapili/orgs", "repos_url": "https://api.github.com/users/flapili/repos", "events_url": "https://api.github.com/users/flapili/events{/privacy}", "received_events_url": "https://api.github.com/users/flapili/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-09T17:45:36Z", "updated_at": "2020-07-21T13:14:07Z", "closed_at": "2020-07-21T13:14:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Feature Request\r\n\r\nthis feature will add a possibility to force a port to urls\r\n\r\nexample of my use case:\r\n```py\r\nfrom logging.handlers import DEFAULT_TCP_LOGGING_PORT\r\nfrom pydantic import BaseSettings, Field, stricturl\r\n\r\nclass Config(BaseSettings):\r\n    TCP_logging : stricturl(allowed_schemes=[\"tcp\"], require_port=True) = f\"tcp://127.0.0.1:{DEFAULT_TCP_LOGGING_PORT}\"\r\n```\r\na other use case could be replace\r\n```py\r\nfrom pydantic import BaseSettings, Field\r\n\r\nclass Config(BaseSettings):\r\n    uvicorn_host: str = \"0.0.0.0\"\r\n    uvicorn_port: int = Field(8000, gt=0, lt=2**16)\r\n```\r\nfor\r\n```py\r\nfrom pydantic import BaseSettings, AnyHttpUrl\r\n\r\nclass Config(BaseSettings):\r\n    uvicorn_server: AnyHttpUrl(require_port=True) = \"http://0.0.0.0:8080\"\r\n```\r\n\r\nIf you think this proposition make sence I could look for a PR\r\n\r\nps: for the second use case maybe a kind of \"bindUrl\"/\"bindAddress\" could be better ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1699", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1699/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1699/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1699/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1699", "id": 654051973, "node_id": "MDU6SXNzdWU2NTQwNTE5NzM=", "number": 1699, "title": "BaseModel.json() does not use Config.json_encoders from nested models' config", "user": {"login": "mdgilene", "id": 22504060, "node_id": "MDQ6VXNlcjIyNTA0MDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/22504060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdgilene", "html_url": "https://github.com/mdgilene", "followers_url": "https://api.github.com/users/mdgilene/followers", "following_url": "https://api.github.com/users/mdgilene/following{/other_user}", "gists_url": "https://api.github.com/users/mdgilene/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdgilene/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdgilene/subscriptions", "organizations_url": "https://api.github.com/users/mdgilene/orgs", "repos_url": "https://api.github.com/users/mdgilene/repos", "events_url": "https://api.github.com/users/mdgilene/events{/privacy}", "received_events_url": "https://api.github.com/users/mdgilene/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-09T13:15:49Z", "updated_at": "2020-07-21T13:22:18Z", "closed_at": "2020-07-21T13:22:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\nWhen serializing a model, jsonable_encoder does not appear to take custom json_encoders from nested models into account.\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: D:\\projects\\test\\.venv\\Lib\\site-packages\\pydantic\r\n               python version: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\n                     platform: Windows-10-10.0.17134-SP0\r\n     optional deps. installed: []\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your bug hasn't already been reported. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\n\r\n```py\r\nfrom datetime import datetime\r\nfrom typing import List\r\n\r\nfrom bson.objectid import InvalidId, ObjectId\r\nfrom pydantic import BaseConfig, BaseModel\r\n\r\n\r\nclass OID(str):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v):\r\n        try:\r\n            return ObjectId(str(v))\r\n        except InvalidId:\r\n            raise ValueError(\"Not a valid ObjectId\")\r\n\r\n\r\nclass MongoModel(BaseModel):\r\n    class Config(BaseConfig):\r\n        allow_population_by_field_name = True\r\n        json_encoders = {\r\n            datetime: lambda dt: dt.isoformat(),\r\n            ObjectId: lambda oid: str(oid)\r\n        }\r\n\r\n    @classmethod\r\n    def from_mongo(cls, data: dict):\r\n        \"\"\"We must convert _id into \"id\". \"\"\"\r\n        if not data:\r\n            return data\r\n        id = data.pop('_id', None)\r\n        return cls(**dict(data, id=id))\r\n\r\n    def mongo(self, **kwargs):\r\n        exclude_unset = kwargs.pop('exclude_unset', True)\r\n        by_alias = kwargs.pop('by_alias', True)\r\n\r\n        parsed = self.dict(\r\n            exclude_unset=exclude_unset,\r\n            by_alias=by_alias,\r\n            **kwargs,\r\n        )\r\n\r\n        # Mongo uses `_id` as default key. We should stick to that as well.\r\n        if '_id' not in parsed and 'id' in parsed:\r\n            parsed['_id'] = parsed.pop('id')\r\n\r\n        return parsed\r\n\r\n\r\nclass User(MongoModel):\r\n    id: OID\r\n\r\n\r\nclass UserList(BaseModel):\r\n    users: List[User]\r\n\r\n\r\nuser = User(id=ObjectId())\r\nuserList = UserList(users=[user])\r\n\r\nprint(user.json())\r\nprint(userList.json())\r\n```\r\n\r\n## Output\r\n```\r\n{\"id\": \"5f0717ec4bc9d3fdd059ddb0\"}\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 67, in <module>\r\n    print('User List', userList.json())\r\n  File \"pydantic\\main.py\", line 433, in pydantic.main.BaseModel.json\r\n  File \"C:\\Anaconda3_2019.10\\lib\\json\\__init__.py\", line 238, in dumps\r\n    **kw).encode(obj)\r\n  File \"C:\\Anaconda3_2019.10\\lib\\json\\encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"C:\\Anaconda3_2019.10\\lib\\json\\encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\n  File \"pydantic\\json.py\", line 62, in pydantic.json.pydantic_encoder\r\nTypeError: Object of type 'ObjectId' is not JSON serializable\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1696", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1696/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1696/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1696/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1696", "id": 653370441, "node_id": "MDU6SXNzdWU2NTMzNzA0NDE=", "number": 1696, "title": "PydanticModel().dict(exclude_none=True) from Config class", "user": {"login": "jhagege", "id": 7504908, "node_id": "MDQ6VXNlcjc1MDQ5MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7504908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhagege", "html_url": "https://github.com/jhagege", "followers_url": "https://api.github.com/users/jhagege/followers", "following_url": "https://api.github.com/users/jhagege/following{/other_user}", "gists_url": "https://api.github.com/users/jhagege/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhagege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhagege/subscriptions", "organizations_url": "https://api.github.com/users/jhagege/orgs", "repos_url": "https://api.github.com/users/jhagege/repos", "events_url": "https://api.github.com/users/jhagege/events{/privacy}", "received_events_url": "https://api.github.com/users/jhagege/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-08T15:01:11Z", "updated_at": "2020-07-10T13:47:08Z", "closed_at": "2020-07-09T10:46:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, is it possible to use a parameter to specify to automatically use the option \"exclude_none=True\" from the Config class of a Pydantic model ?\r\n\r\nI'd like to encapsulate this logic and not require from users of the model to know about this option.\r\n\r\nThanks !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1693", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1693/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1693/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1693/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1693", "id": 652147681, "node_id": "MDU6SXNzdWU2NTIxNDc2ODE=", "number": 1693, "title": "Ways to handle dynamic schema references", "user": {"login": "phylogram", "id": 29863702, "node_id": "MDQ6VXNlcjI5ODYzNzAy", "avatar_url": "https://avatars1.githubusercontent.com/u/29863702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phylogram", "html_url": "https://github.com/phylogram", "followers_url": "https://api.github.com/users/phylogram/followers", "following_url": "https://api.github.com/users/phylogram/following{/other_user}", "gists_url": "https://api.github.com/users/phylogram/gists{/gist_id}", "starred_url": "https://api.github.com/users/phylogram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phylogram/subscriptions", "organizations_url": "https://api.github.com/users/phylogram/orgs", "repos_url": "https://api.github.com/users/phylogram/repos", "events_url": "https://api.github.com/users/phylogram/events{/privacy}", "received_events_url": "https://api.github.com/users/phylogram/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-07T09:08:45Z", "updated_at": "2020-07-21T13:11:17Z", "closed_at": "2020-07-21T13:11:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.5.1\r\npydantic compiled: True\r\ninstall path: /home/[\u2026]/anaconda3/lib/python3.7/site-packages/pydantic\r\npython version: 3.7.3 (default, Mar 27 2019, 22:11:17)  [GCC 7.3.0]\r\nplatform: Linux-5.3.0-62-generic-x86_64-with-debian-buster-sid\r\noptional deps. installed: ['typing-extensions']\r\n```\r\n_This is not the production environment - production env will be the FastApi-Docker-Container_\r\n\r\n### Behavior needed\r\n\r\nI have a graph class, which can contain arbitrary nodes, as long as they are inheriting from a distinct class and provide a schema, which fields should be used for serialization. The graph class should be (un-) serializable with all its nodes and the correct classes/fields of them.\r\n\r\n### Solution found\r\n\r\nI am migrating from marshmallow now, and this is how I solved it there: I built a wrapper class for all nodes, which create a schema at runtime. When serializing they add the name of nodes class and call the schema on the node to dump and add this dump as a property of their own dump. When unserializing they look up the name of the node, dynamically create a schema, with the schema of the node to reference as property, and so unserialization works out of the box.\r\n\r\n As far as I see, this could work in pydantic as well.\r\n\r\n### Question\r\n\r\nWould you know a better/another way to achieve the wanted behavior? Or any other thoughts on the subject :-)?\r\n\r\nThanks!\r\n\r\nPhilip", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1689", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1689/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1689/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1689/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1689", "id": 651520761, "node_id": "MDU6SXNzdWU2NTE1MjA3NjE=", "number": 1689, "title": "Get deep attribute with orm_mode", "user": {"login": "antonioIrizar", "id": 2897432, "node_id": "MDQ6VXNlcjI4OTc0MzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2897432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonioIrizar", "html_url": "https://github.com/antonioIrizar", "followers_url": "https://api.github.com/users/antonioIrizar/followers", "following_url": "https://api.github.com/users/antonioIrizar/following{/other_user}", "gists_url": "https://api.github.com/users/antonioIrizar/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonioIrizar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonioIrizar/subscriptions", "organizations_url": "https://api.github.com/users/antonioIrizar/orgs", "repos_url": "https://api.github.com/users/antonioIrizar/repos", "events_url": "https://api.github.com/users/antonioIrizar/events{/privacy}", "received_events_url": "https://api.github.com/users/antonioIrizar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-06T13:03:20Z", "updated_at": "2020-07-21T13:08:48Z", "closed_at": "2020-07-21T13:08:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\nHi!\r\n\r\nHow can I access to a deep attribute with orm_mode = True?\r\n\r\nFor example:\r\nResponse I want:\r\n\r\n```json\r\n{\r\n  \"fake_A\": 1,\r\n  \"fake_d\": \"fuzzy\"\r\n}\r\n```\r\nMy models:\r\n\r\n```py\r\nclass A:\r\n    a = 1\r\n    b = '2'\r\n\r\nclass B:\r\n    d = 'fuzzy'\r\n    c = A()\r\n```\r\n\r\n\r\nPydantic models:\r\n\r\n```py\r\n\r\nclass Fake(BaseModel):\r\n    a: int = Field(alias='fake_a') # source='c.a'  like django?\r\n    d: int = Field(alias='fake_d')\r\n\r\n     class Config:\r\n         orm_mode = True\r\n         allow_population_by_field_name = True\r\n```\r\n\r\n```py\r\nFake.from_orm(B())\r\n```\r\n\r\nOn other framekors like Django you can get the ```a``` attribute of Class A throung Class B with ```source='c.a' ```\r\n\r\nHow can I do it with Pydantic?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1685", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1685/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1685/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1685/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1685", "id": 651075941, "node_id": "MDU6SXNzdWU2NTEwNzU5NDE=", "number": 1685, "title": "how to enforce uniqueness of attributes across all instances", "user": {"login": "RafalSkolasinski", "id": 10928117, "node_id": "MDQ6VXNlcjEwOTI4MTE3", "avatar_url": "https://avatars3.githubusercontent.com/u/10928117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RafalSkolasinski", "html_url": "https://github.com/RafalSkolasinski", "followers_url": "https://api.github.com/users/RafalSkolasinski/followers", "following_url": "https://api.github.com/users/RafalSkolasinski/following{/other_user}", "gists_url": "https://api.github.com/users/RafalSkolasinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/RafalSkolasinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RafalSkolasinski/subscriptions", "organizations_url": "https://api.github.com/users/RafalSkolasinski/orgs", "repos_url": "https://api.github.com/users/RafalSkolasinski/repos", "events_url": "https://api.github.com/users/RafalSkolasinski/events{/privacy}", "received_events_url": "https://api.github.com/users/RafalSkolasinski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-05T14:02:42Z", "updated_at": "2020-07-05T19:28:45Z", "closed_at": "2020-07-05T19:28:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /home/rskolasinski/miniconda3/envs/i3-flow/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.6 | packaged by conda-forge | (default, Jun  1 2020, 18:57:50)  [GCC 7.5.0]\r\n                     platform: Linux-5.4.0-40-generic-x86_64-with-debian-bullseye-sid\r\n     optional deps. installed: []\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your question hasn't already been answered. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your question: -->\r\n\r\n```py\r\nimport pydantic\r\n\r\nclass Group(BaseModel):\r\n    name: str\r\n\r\n\r\ng1 = Group(name=\"a\")\r\ng2 = Group(name=\"a\")\r\n```\r\n\r\nI wonder if this is possible to somehow enforce uniqueness of `name` across all instances of `Group` objects.\r\n\r\nIt seems that in \"vanilla\" Python the good approach would be to use [metaclass](https://stackoverflow.com/questions/34818622/ensure-uniqueness-of-instance-attribute-in-python) approach but not sure how well it would play with `pydantic`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1684", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1684/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1684/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1684/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1684", "id": 650927403, "node_id": "MDU6SXNzdWU2NTA5Mjc0MDM=", "number": 1684, "title": "Best way to specify a default for a pydantic.HttpUrl?", "user": {"login": "abadger", "id": 209242, "node_id": "MDQ6VXNlcjIwOTI0Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/209242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abadger", "html_url": "https://github.com/abadger", "followers_url": "https://api.github.com/users/abadger/followers", "following_url": "https://api.github.com/users/abadger/following{/other_user}", "gists_url": "https://api.github.com/users/abadger/gists{/gist_id}", "starred_url": "https://api.github.com/users/abadger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abadger/subscriptions", "organizations_url": "https://api.github.com/users/abadger/orgs", "repos_url": "https://api.github.com/users/abadger/repos", "events_url": "https://api.github.com/users/abadger/events{/privacy}", "received_events_url": "https://api.github.com/users/abadger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-04T17:26:25Z", "updated_at": "2020-07-04T17:33:27Z", "closed_at": "2020-07-04T17:32:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: /home/badger/.cache/pypoetry/virtualenvs/antsibull-X-j9VvlO-py3.8/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.3 (default, Feb 26 2020, 00:00:00)  [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]\r\n                     platform: Linux-5.6.15-200.fc31.x86_64-x86_64-with-glibc2.2.5\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your question hasn't already been answered. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your question: -->\r\nWhat is the best way to specify a default for a pydantic.HttpUrl?  I was using a literal string containing the url but when mypy or pyre checked the class, it called that an error.  After some experimentation with the HttpUrl class, I found something that worked but it seems a little verbose:\r\n```py\r\nimport pydantic as p\r\nclass Test1(p.BaseModel):\r\n    pypi_url: p.HttpUrl = p.HttpUrl('https://pypi.org/', scheme='https', host='pypi.org')  # Working\r\nclass Test2(p.BaseModel):\r\n    pypi_url: p.HttpUrl = 'https://pypi.org/'  # Simple but mypy complains\r\n\r\n```\r\n```\r\n$ mypy test.py                                                                                                                                                                                       (10:23:13)\r\ntest.py:5: error: Incompatible types in assignment (expression has type \"str\", variable has type \"HttpUrl\")\r\nFound 1 error in 1 file (checked 1 source file)\r\n```\r\n\r\nIs there a better way to do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1683", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1683/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1683/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1683/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1683", "id": 650912185, "node_id": "MDU6SXNzdWU2NTA5MTIxODU=", "number": 1683, "title": "Field with dictionary key matching", "user": {"login": "tomzx", "id": 188960, "node_id": "MDQ6VXNlcjE4ODk2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/188960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomzx", "html_url": "https://github.com/tomzx", "followers_url": "https://api.github.com/users/tomzx/followers", "following_url": "https://api.github.com/users/tomzx/following{/other_user}", "gists_url": "https://api.github.com/users/tomzx/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomzx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomzx/subscriptions", "organizations_url": "https://api.github.com/users/tomzx/orgs", "repos_url": "https://api.github.com/users/tomzx/repos", "events_url": "https://api.github.com/users/tomzx/events{/privacy}", "received_events_url": "https://api.github.com/users/tomzx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-04T15:43:19Z", "updated_at": "2020-07-04T21:40:25Z", "closed_at": "2020-07-04T17:17:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: G:\\Users\\...\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\...\\Lib\\site-packages\\pydantic\r\n               python version: 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 15 2019, 00:11:34) [MSC v.1916 64 bit (AMD64)]\r\n                     platform: Windows-7-6.1.7601-SP1\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n\r\nHello!\r\n\r\nI'm trying to find how to properly implement a field that would be a dictionary with fixed keys and where the remaining keys are expected to be of another type.\r\n\r\nExample object I'd like to build\r\n```py\r\nContainer(\r\n    my_field: {\r\n        \"one_key\": \"demo\",\r\n        \"another_key\": 3,\r\n        # For explanation purposes, the remaining keys would be of the bool type\r\n        # Those keys are dynamic and thus cannot be directly typed\r\n        \"other_key\": False,\r\n        \"yet_another_key\": True,\r\n    }\r\n)\r\n```\r\n\r\nThe following code \"works\", but the additional properties are not validated since they don't have a schema defined.\r\n\r\n```py\r\nfrom pydantic import BaseModel, Extra\r\n\r\nclass Container(BaseModel):\r\n    my_field: DictWithKeyMatching\r\n\r\nclass DictWithKeyMatching(BaseModel):\r\n    one_key: str\r\n    another_key: int\r\n\r\n    class Config:\r\n        extra = Extra.allow\r\n```\r\n\r\nLooking at the [JSON schema properties documentation](https://json-schema.org/understanding-json-schema/reference/object.html#properties), what I would want is to be able to define the type applied on `additionalProperties`. I did a quick search through the code base for `additionalProperties` but it's unclear to me whether this is already supported.\r\n\r\nI thought of using\r\n```py\r\nfrom pydantic import BaseModel, Extra\r\n\r\nclass Container(BaseModel:\r\n    my_field: DictWithKeyMatching\r\n\r\nclass DictWithKeyMatching(BaseModel):\r\n    __root__: Dict[str, TypeForRemainingKeys]\r\n    one_key: str\r\n    another_key: int\r\n```\r\nbut this raises\r\n```\r\nValueError: __root__ cannot be mixed with other fields\r\n```\r\n\r\nMy question is: what is the suggested implementation approach to this problem?\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1680", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1680/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1680/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1680/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1680", "id": 650635424, "node_id": "MDU6SXNzdWU2NTA2MzU0MjQ=", "number": 1680, "title": "Mypy crashes with the pydantic mypy-plugin", "user": {"login": "Iftahh", "id": 798544, "node_id": "MDQ6VXNlcjc5ODU0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/798544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Iftahh", "html_url": "https://github.com/Iftahh", "followers_url": "https://api.github.com/users/Iftahh/followers", "following_url": "https://api.github.com/users/Iftahh/following{/other_user}", "gists_url": "https://api.github.com/users/Iftahh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Iftahh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Iftahh/subscriptions", "organizations_url": "https://api.github.com/users/Iftahh/orgs", "repos_url": "https://api.github.com/users/Iftahh/repos", "events_url": "https://api.github.com/users/Iftahh/events{/privacy}", "received_events_url": "https://api.github.com/users/Iftahh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-03T14:36:06Z", "updated_at": "2020-07-21T14:14:48Z", "closed_at": "2020-07-21T14:14:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nMypy crashes with the pydantic mypy-plugin   with assertion `AssertionError: Must not defer during final iteration`\r\n\r\nUse case:\r\nI have a bunch of \"predicate\" functions which get arguments from UI.  I wanted to add json schema and validation so I took the time and converted them from pure functions to Pydantic classes, with a __call__ method.\r\n\r\nTo get some common functionality I added a metaclass that extends `ModelMetaclass`, and a base class that all predicate classes extend (see code below).\r\n\r\nThe code works just fine  (thank you for the awesome library!)\r\n\r\nbut MyPy *with the pydanyic mypy-plugin* crashes when it reaches the class decleration  - see crash below.\r\nI would open an issue for Mypy - but it doesn't crash if I don't use the plugin so I assume its the plugin at fault.\r\n\r\n\r\n```\r\nmypy --version\r\n0.781\r\n```\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: ~/.virtualenvs/bt/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.0 (default, Jan 23 2020, 14:58:36)  [Clang 10.0.1 (clang-1001.0.46.4)]\r\n                     platform: macOS-10.14.6-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n\r\nThe Mypy crash  (output of `mypy --no-incremental --config-file=mypy.ini src --show-traceback`)\r\n```\r\nsrc/predicate_types.py:119: error: INTERNAL ERROR -- Please try using mypy master on Github:\r\nhttps://mypy.rtfd.io/en/latest/common_issues.html#using-a-development-mypy-build\r\nPlease report a bug at https://github.com/python/mypy/issues\r\nversion: 0.781\r\nTraceback (most recent call last):\r\n  File \"mypy/semanal.py\", line 4691, in accept\r\n  File \"mypy/nodes.py\", line 676, in accept\r\n  File \"mypy/semanal.py\", line 536, in visit_func_def\r\n  File \"mypy/semanal.py\", line 568, in analyze_func_def\r\n  File \"mypy/semanal.py\", line 4419, in defer\r\nAssertionError: Must not defer during final iteration\r\nsrc/predicate_types.py:119: : note: use --pdb to drop into pdb\r\n```\r\n\r\nCode:\r\n```py\r\n\r\n# common class properties at the metaclass:\r\n\r\nclass BasePredicateMetaclass(ModelMetaclass):\r\n    @property\r\n    def description(cls) -> str:\r\n        return cls.__doc__ or cls.__call__.__doc__ or \"\"\r\n\r\n    @property\r\n    def name(cls) -> str:\r\n        return camel_to_snake(cls.__name__.replace(\"Predicate\", \"\"))\r\n\r\n    @property\r\n    def possible_results(cls) -> List[str]:\r\n        return_type = cls.__call__.__annotations__.get(\"return\")\r\n        if return_type:\r\n            assert issubclass(return_type, Enum), \"Expected predicate functions to return None or Enum\"\r\n            return [rt.name for rt in return_type]\r\n        return []\r\n\r\n\r\n######### MYPY crashes on this line below ###############\r\nclass BasePredicate(GenericModel, Generic[ExecContextType], abc.ABC, metaclass=BasePredicateMetaclass):\r\n    deprecated: ClassVar[Optional[str]] = None\r\n\r\n    class Config:\r\n        allow_mutation = False\r\n        extra = Extra.forbid\r\n\r\n    @classmethod\r\n    def schema(cls, by_alias: bool = True) -> Dict[str, Any]:\r\n        _schema = super().schema(by_alias)\r\n        _schema[\"title\"] = cls.name\r\n        if cls.deprecated:\r\n            _schema[\"deprecated\"] = cls.deprecated\r\n        _schema[\"possible_results\"] = cls.possible_results\r\n        return _schema\r\n\r\n    @abc.abstractmethod\r\n    def __call__(self, execution_context: ExecContextType):\r\n        pass\r\n\r\n\r\n# the actual predicates look like this:\r\n\r\nclass XMoreThanYPredicate(BasePredicate):\r\n     x: int\r\n     y: int\r\n     def __call__(self, execution_context: ExecContext) -> YesNoResult:\r\n          return YesNoResult.yes if self.x > self.y else YesNoResult.no\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1677", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1677/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1677/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1677/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1677", "id": 649702022, "node_id": "MDU6SXNzdWU2NDk3MDIwMjI=", "number": 1677, "title": "in typing.Union giving different output for different argument order", "user": {"login": "arvindjangra1996", "id": 51368992, "node_id": "MDQ6VXNlcjUxMzY4OTky", "avatar_url": "https://avatars3.githubusercontent.com/u/51368992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arvindjangra1996", "html_url": "https://github.com/arvindjangra1996", "followers_url": "https://api.github.com/users/arvindjangra1996/followers", "following_url": "https://api.github.com/users/arvindjangra1996/following{/other_user}", "gists_url": "https://api.github.com/users/arvindjangra1996/gists{/gist_id}", "starred_url": "https://api.github.com/users/arvindjangra1996/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arvindjangra1996/subscriptions", "organizations_url": "https://api.github.com/users/arvindjangra1996/orgs", "repos_url": "https://api.github.com/users/arvindjangra1996/repos", "events_url": "https://api.github.com/users/arvindjangra1996/events{/privacy}", "received_events_url": "https://api.github.com/users/arvindjangra1996/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-02T07:26:41Z", "updated_at": "2020-07-02T16:24:16Z", "closed_at": "2020-07-02T16:24:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nHey, Thanks for the great library. \r\nI ran into an issue. Argument order in Union should not affect the output.\r\n\r\n```\r\nfrom pydantic import BaseModel  \r\nfrom typing import List, Optional, Mapping, Union, Any\r\n\r\nclass MyMessage(BaseModel):\r\n    data1 : Union[Mapping[str,Any], List[str]]\r\n    data2:  Union[List[str], Mapping[str,Any]]\r\n\r\nd = {'data1': ['ab'], 'data2': ['ab'] }\r\nmsg = MyMessage(**d)\r\nassert msg.data1 == {'a': 'b'} # <--------------------------------\r\nassert msg.data2 == ['ab'] \r\n```\r\n\r\nwhy data1 is converted into a dict ?? This should be list just like data2.\r\nAnd this is happening only when i pass a string of length 2 in data.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1676", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1676/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1676/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1676/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1676", "id": 649456372, "node_id": "MDU6SXNzdWU2NDk0NTYzNzI=", "number": 1676, "title": "Support alternative value resolution for BaseSettings", "user": {"login": "ofek", "id": 9677399, "node_id": "MDQ6VXNlcjk2NzczOTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/9677399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ofek", "html_url": "https://github.com/ofek", "followers_url": "https://api.github.com/users/ofek/followers", "following_url": "https://api.github.com/users/ofek/following{/other_user}", "gists_url": "https://api.github.com/users/ofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ofek/subscriptions", "organizations_url": "https://api.github.com/users/ofek/orgs", "repos_url": "https://api.github.com/users/ofek/repos", "events_url": "https://api.github.com/users/ofek/events{/privacy}", "received_events_url": "https://api.github.com/users/ofek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-02T00:33:59Z", "updated_at": "2020-07-21T13:30:02Z", "closed_at": "2020-07-21T09:09:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature Request\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: C:\\Users\\ofek\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\pydantic\r\n               python version: 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)]\r\n                     platform: Windows-10-10.0.19041-SP0\r\n     optional deps. installed: []\r\n```\r\n\r\nMy use case is I'm reading a toml config file and passing what is read directly to the model constructor. However, I have no way to allow users env var or .env overrides.\r\n\r\nEssentially, configs persisted to disk cannot benefit from BaseSettings. Or did I miss something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1675", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1675/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1675/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1675/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1675", "id": 649028775, "node_id": "MDU6SXNzdWU2NDkwMjg3NzU=", "number": 1675, "title": "NotDigitError should be more generic", "user": {"login": "ricardo8990", "id": 1802934, "node_id": "MDQ6VXNlcjE4MDI5MzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1802934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricardo8990", "html_url": "https://github.com/ricardo8990", "followers_url": "https://api.github.com/users/ricardo8990/followers", "following_url": "https://api.github.com/users/ricardo8990/following{/other_user}", "gists_url": "https://api.github.com/users/ricardo8990/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricardo8990/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricardo8990/subscriptions", "organizations_url": "https://api.github.com/users/ricardo8990/orgs", "repos_url": "https://api.github.com/users/ricardo8990/repos", "events_url": "https://api.github.com/users/ricardo8990/events{/privacy}", "received_events_url": "https://api.github.com/users/ricardo8990/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-01T14:29:08Z", "updated_at": "2020-07-01T15:20:12Z", "closed_at": "2020-07-01T15:20:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /Users/ricardosanchez/Documents/Projects/cuenca-validations/venv/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 23:26:24)  [Clang 6.0 (clang-600.0.57)]\r\n                     platform: Darwin-19.5.0-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your bug hasn't already been reported. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\n\r\n```py\r\nfrom pydantic import NotDigitError\r\n\r\nraise NotDigitError\r\n# pydantic.errors.NotDigitError: card number is not all digits\r\n```\r\n\r\nThe error message and code for `NotDigitError` says `card number is not all digits` and `payment_card_number.digits`. However, this error could refer to more cases than card numbers. \r\nhttps://github.com/samuelcolvin/pydantic/blob/259a1a0ff8eb9a0c4450331b9bae6730d55b9124/pydantic/errors.py#L517-L519", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1671", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1671/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1671/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1671/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1671", "id": 647739676, "node_id": "MDU6SXNzdWU2NDc3Mzk2NzY=", "number": 1671, "title": "json_encoders doesn't work for custom Types?", "user": {"login": "chespinoza", "id": 3278356, "node_id": "MDQ6VXNlcjMyNzgzNTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3278356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chespinoza", "html_url": "https://github.com/chespinoza", "followers_url": "https://api.github.com/users/chespinoza/followers", "following_url": "https://api.github.com/users/chespinoza/following{/other_user}", "gists_url": "https://api.github.com/users/chespinoza/gists{/gist_id}", "starred_url": "https://api.github.com/users/chespinoza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chespinoza/subscriptions", "organizations_url": "https://api.github.com/users/chespinoza/orgs", "repos_url": "https://api.github.com/users/chespinoza/repos", "events_url": "https://api.github.com/users/chespinoza/events{/privacy}", "received_events_url": "https://api.github.com/users/chespinoza/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-29T23:42:24Z", "updated_at": "2020-06-30T08:25:10Z", "closed_at": "2020-06-30T08:25:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\nThis is taken from the docs, I want to serialize  `DayThisYear` using `%Y%m%d` format, but it seems that the encoder doesn't work for custom types?\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /Users/christian/Library/Caches/pypoetry/virtualenvs/keepa-products-NnnmQlTQ-py3.8/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.2 (default, May 19 2020, 18:30:57)  [Clang 11.0.0 (clang-1100.0.33.17)]\r\n                     platform: macOS-10.15.4-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your question hasn't already been answered. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your question: -->\r\n\r\n```py\r\nfrom typing import Optional\r\nfrom datetime import date, timedelta\r\nfrom pydantic import BaseModel\r\nfrom pydantic.validators import int_validator\r\n\r\nclass DayThisYear(date):\r\n    \"\"\"\r\n    Contrived example of a special type of date that\r\n    takes an int and interprets it as a day in the current year\r\n    \"\"\"\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield int_validator\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v: int):\r\n        return date.today().replace(month=1, day=1) + timedelta(days=v)\r\n    \r\n\r\nclass FooModel(BaseModel):\r\n    date1: DayThisYear\r\n    date2: Optional[DayThisYear]\r\n        \r\n    class Config:\r\n        json_encoders = {\r\n            DayThisYear: lambda v: v.strftime(\"%Y%m%d\") if v else None,\r\n        }\r\n        \r\nm = FooModel(date1=300, date2=300)\r\nprint(m.json())\r\n#>{\"date1\": \"2020-10-27\", \"date2\": \"2020-10-27\"}\r\n\r\n...\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1670", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1670/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1670/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1670/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1670", "id": 647524945, "node_id": "MDU6SXNzdWU2NDc1MjQ5NDU=", "number": 1670, "title": "Is it necessary that ModelField.default is set to static value from default_factory at import time?", "user": {"login": "anentropic", "id": 147840, "node_id": "MDQ6VXNlcjE0Nzg0MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/147840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anentropic", "html_url": "https://github.com/anentropic", "followers_url": "https://api.github.com/users/anentropic/followers", "following_url": "https://api.github.com/users/anentropic/following{/other_user}", "gists_url": "https://api.github.com/users/anentropic/gists{/gist_id}", "starred_url": "https://api.github.com/users/anentropic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anentropic/subscriptions", "organizations_url": "https://api.github.com/users/anentropic/orgs", "repos_url": "https://api.github.com/users/anentropic/repos", "events_url": "https://api.github.com/users/anentropic/events{/privacy}", "received_events_url": "https://api.github.com/users/anentropic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-29T16:52:25Z", "updated_at": "2020-06-29T21:19:12Z", "closed_at": "2020-06-29T21:19:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: /virtualenvs/QajdTuIM-py3.7/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.7 (default, Jun 24 2020, 15:45:42)  [Clang 10.0.1 (clang-1001.0.46.4)]\r\n                     platform: Darwin-18.7.0-x86_64-i386-64bit\r\n     optional deps. installed: ['email-validator']\r\n```\r\n\r\nI'm trying to do some stuff with dynamically created models, one of which has a field with `Field(default_value=my_factory)`\r\n\r\nI was expecting that `my_factory` would only be called at runtime. Instead there is [code](https://github.com/samuelcolvin/pydantic/blob/329b1d3e7b32bd72a4db2d122ef0e325c5725741/pydantic/fields.py#L299) in `ModelField.infer`, which is called by `ModelMetaclass.__new__` at import time, which calls the default factory and gets a value (which presumably is never used) and sets it as the `default` on the newly created `ModelField`.\r\n\r\nThis value doesn't influence the type inference (`annotation` attr) and `default_factory` is called as expected when instantiating the model at runtime. I haven't looked any deeper in the code, but it seems like this `default` value must be unnecessary?\r\n\r\n```py\r\nfrom datetime import datetime\r\nfrom pydantic import BaseModel, field\r\n\r\nclass Model(BaseModel):\r\n    dt = Field(default_factory=datetime.now)\r\n\r\nmf = Model.__fields__['dt']\r\n# this value should never be used for anything in practice?\r\nmf.default\r\nOut[15]: datetime.datetime(2020, 6, 29, 17, 33, 20, 799276)\r\n\r\n# default_factory is called fresh for each instantiation as expected\r\nm = Model()\r\nm.dt\r\nOut[7]: datetime.datetime(2020, 6, 29, 17, 33, 26, 230211)\r\n\r\nm = Model()\r\nm.dt\r\nOut[9]: datetime.datetime(2020, 6, 29, 17, 33, 31, 790472)\r\n```\r\n\r\nIf nothing else it is a small piece of extra work that could be avoided.\r\n\r\nI'm sure I will find a workaround for what I am trying to do, which is an awkward thing where the `default_factory` returns an instance of a dynamically created model which initially doesn't exist. But that's how I noticed this quirk, maybe it can be cleaned up (or maybe has some useful purpose I haven't perceived).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1669", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1669/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1669/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1669/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1669", "id": 647503031, "node_id": "MDU6SXNzdWU2NDc1MDMwMzE=", "number": 1669, "title": "Model fields using Union annotation don't work", "user": {"login": "radeklat", "id": 7273178, "node_id": "MDQ6VXNlcjcyNzMxNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7273178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radeklat", "html_url": "https://github.com/radeklat", "followers_url": "https://api.github.com/users/radeklat/followers", "following_url": "https://api.github.com/users/radeklat/following{/other_user}", "gists_url": "https://api.github.com/users/radeklat/gists{/gist_id}", "starred_url": "https://api.github.com/users/radeklat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radeklat/subscriptions", "organizations_url": "https://api.github.com/users/radeklat/orgs", "repos_url": "https://api.github.com/users/radeklat/repos", "events_url": "https://api.github.com/users/radeklat/events{/privacy}", "received_events_url": "https://api.github.com/users/radeklat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-29T16:15:42Z", "updated_at": "2020-06-30T10:49:59Z", "closed_at": "2020-06-29T17:01:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nAccording to [the documentation](https://pydantic-docs.helpmanual.io/usage/types/#unions), when `Union` is used for model field annotation, the most specific type has to be first, in order for the field to be parsed correctly as that type.\r\n\r\nHowever, when I attempted to use `Union`, it didn't work even for seemingly basic scenarios, producing different kinds of errors. As part of this bug report, I provide a comprehensive test that check for all the different scenarios I encountered.\r\n\r\n## Motivation\r\n\r\nThis bug sources from me trying to provide `host` value to ElasticSearch client. This value can be:\r\n1. URL as a string\r\n2. List of URLs as a string\r\n3. A dictionary with `host` and `port` keys\r\n4. A list of dictionaries with `host` and `port` keys\r\n\r\nUsing `BaseSettings` or `BaseModel`, this could be expressed in an annotation as:\r\n\r\n```python\r\nfrom typing import List, Union\r\n\r\nfrom pydantic import BaseSettings, BaseModel\r\n\r\nclass HostPort(BaseModel):\r\n    host: str\r\n    port: int\r\n\r\nclass Settings(BaseSettings):\r\n    hosts: Union[List[HostPort], HostPort, List[str], str]\r\n```\r\n\r\nHowever, this implementation doesn't work. Nor do any other, less complex.\r\n\r\n## Full scenario\r\n\r\nThis produces 40 tests. I appreciate it is long and hard to read. It is meant more for reproducing the issues I observe.\r\n\r\n```python\r\nfrom typing import List, Union\r\n\r\nimport pytest\r\nfrom pydantic import BaseModel, BaseSettings, ValidationError\r\nfrom pydantic.env_settings import SettingsError\r\n\r\n\r\nclass HostPort(BaseModel):\r\n    host: str\r\n    port: int\r\n\r\n\r\nclass UnionStrModelListStrListModel(BaseSettings):\r\n    hosts: Union[str, HostPort, List[str], List[HostPort]]\r\n\r\n\r\nclass UnionListModelModelListStrStr(BaseSettings):\r\n    hosts: Union[List[HostPort], HostPort, List[str], str]\r\n\r\n\r\nclass UnionModelListModel(BaseSettings):\r\n    hosts: Union[HostPort, List[HostPort]]\r\n\r\n\r\nclass UnionStrListStr(BaseSettings):\r\n    hosts: Union[str, List[str]]\r\n\r\n\r\nclass UnionListStrStr(BaseSettings):\r\n    hosts: Union[List[str], str]\r\n\r\n\r\nclass UnionListStrListModel(BaseSettings):\r\n    hosts: Union[List[str], List[HostPort]]\r\n\r\n\r\nclass UnionStrModel(BaseSettings):\r\n    hosts: Union[str, HostPort]\r\n\r\n\r\nclass UnionModelStr(BaseSettings):\r\n    hosts: Union[HostPort, str]\r\n\r\n\r\nclass OnlyStr(BaseSettings):\r\n    hosts: str\r\n\r\n\r\nclass OnlyModel(BaseSettings):\r\n    hosts: HostPort\r\n\r\n\r\n@pytest.fixture(\r\n    params=[\r\n        pytest.param(UnionStrModelListStrListModel, id=\"Accept: Union[str, Model, List[str], List[Model]] \"),\r\n        pytest.param(UnionListModelModelListStrStr, id=\"Accept: Union[List[HostPort], HostPort, List[str], str] \"),\r\n        pytest.param(UnionModelListModel, id=\"Accept: Union[Model, List[Model]] \"),\r\n        pytest.param(UnionStrListStr, id=\"Accept: Union[str, List[str]] \"),\r\n        pytest.param(UnionListStrStr, id=\"Accept: Union[List[str], str] \"),\r\n        pytest.param(UnionListStrListModel, id=\"Accept: Union[List[str], List[Model]] \"),\r\n        pytest.param(UnionStrModel, id=\"Accept: Union[str, Model] \"),\r\n        pytest.param(UnionModelStr, id=\"Accept: Union[Model, str] \"),\r\n        pytest.param(OnlyStr, id=\"Accept: str \"),\r\n        pytest.param(OnlyModel, id=\"Accept: Model \"),\r\n    ]\r\n)\r\ndef settings(request) -> BaseSettings:\r\n    yield request.param\r\n\r\n\r\n# These combinations should results in validation error because they are not acceptable\r\nEXPECT_VALIDATION_ERRORS = {\r\n    (OnlyModel, \"List[Model]\"),\r\n    (OnlyModel, \"List[str]\"),\r\n    (UnionListStrListModel, \"Model\"),\r\n    (UnionListStrListModel, \"str\"),\r\n    (UnionModelListModel, \"List[str]\"),\r\n    (UnionModelListModel, \"str\"),\r\n}\r\n\r\n# These may result in JSON parsing error instead of validation because they expect JSON but receive a non-JSON\r\nEXPECT_JSON_PARSING_ERRORS = {\r\n    (OnlyModel, \"str\"),\r\n}\r\n\r\n# This is acceptable fallback as only `str` is annotated and thus JSON is treated as that\r\nEXPECT_JSON_PARSED_AS_STR = {(OnlyStr, \"List[Model]\"), (OnlyStr, \"Model\"), (OnlyStr, \"List[str]\")}\r\n\r\n# This is an expected fallback to str as str is the first annotated one (similar to above)\r\nEXPECT_FALLBACK_JSON_PARSED_AS_STR = {\r\n    (UnionStrModelListStrListModel, \"List[str]\"),\r\n    (UnionStrModelListStrListModel, \"Model\"),\r\n    (UnionStrModelListStrListModel, \"List[Model]\"),\r\n    (UnionStrModel, \"List[Model]\"),\r\n    (UnionStrModel, \"Model\"),\r\n    (UnionStrModel, \"List[str]\"),\r\n    (UnionStrListStr, \"List[str]\"),\r\n    (UnionStrListStr, \"List[Model]\"),\r\n    (UnionStrListStr, \"Model\"),\r\n}\r\n\r\n# The following combinations are genuinely is broken.\r\n\r\n# These combinations should be accepted but raise ValidationError instead\r\nBROKEN_PARSING_RAISING_VALIDATION_ERROR = {\r\n    # (UnionModelListModel, \"Model\"),\r\n    # (UnionModelListModel, \"List[Model]\"),\r\n    # (UnionListStrListModel, \"List[str]\"),\r\n    # (UnionListStrListModel, \"List[Model]\"),\r\n}\r\n\r\n# The combinations are accepted but wrongly parsed as a string. String is the last in the union.\r\nBROKEN_PARSING_RETURNED_AS_STR = {\r\n    # (UnionListModelModelListStrStr, \"List[str]\"),\r\n    # (UnionListModelModelListStrStr, \"Model\"),\r\n    # (UnionListModelModelListStrStr, \"List[Model]\"),\r\n    # (UnionListStrStr, \"List[str]\"),\r\n    # (UnionListStrStr, \"List[Model]\"),\r\n    # (UnionListStrStr, \"Model\"),\r\n    # (UnionModelStr, \"List[str]\"),\r\n    # (UnionModelStr, \"List[Model]\"),\r\n    # (UnionModelStr, \"Model\"),\r\n}\r\n\r\n\r\nclass TestPydantic:\r\n    @pytest.mark.parametrize(\r\n        \"input_value,expected_output,name\",\r\n        [\r\n            pytest.param(\"localhost\", \"localhost\", \"str\", id=\" Input: str\",),\r\n            pytest.param(\r\n                '[\"localhost\", \"127.0.0.1\"]', [\"localhost\", \"127.0.0.1\"], \"List[str]\", id=\" Input: List[str]\",\r\n            ),\r\n            pytest.param(\r\n                '{\"host\": \"localhost\", \"port\": 8080}',\r\n                HostPort(host=\"localhost\", port=8080),\r\n                \"Model\",\r\n                id=\" Input: Model\",\r\n            ),\r\n            pytest.param(\r\n                '[{\"host\": \"localhost\", \"port\": 8080}, {\"host\": \"127.0.0.1\", \"port\": 8081}]',\r\n                [HostPort(host=\"localhost\", port=8080), HostPort(host=\"127.0.0.1\", port=8081)],\r\n                \"List[Model]\",\r\n                id=\" Input: List[Model]\",\r\n            ),\r\n        ],\r\n    )\r\n    def test_union(self, input_value, expected_output, name, monkeypatch, settings):\r\n        monkeypatch.setenv(\"hosts\", input_value)\r\n        example = (settings, name)\r\n\r\n        if example in EXPECT_VALIDATION_ERRORS or example in BROKEN_PARSING_RAISING_VALIDATION_ERROR:\r\n            with pytest.raises(ValidationError):\r\n                settings(input_value)\r\n        elif example in EXPECT_JSON_PARSING_ERRORS:\r\n            with pytest.raises(SettingsError, match=\".*error parsing JSON for.*\"):\r\n                settings(input_value)\r\n        else:\r\n            parsed_output = settings(input_value).hosts\r\n\r\n            if (\r\n                example in EXPECT_JSON_PARSED_AS_STR\r\n                or example in EXPECT_FALLBACK_JSON_PARSED_AS_STR\r\n                or example in BROKEN_PARSING_RETURNED_AS_STR\r\n            ):\r\n                assert isinstance(parsed_output, str)\r\n            else:\r\n                assert parsed_output == expected_output, (\r\n                    f\"{parsed_output} ({parsed_output.__class__.__name__}) != \"\r\n                    f\"{expected_output} ({expected_output.__class__.__name__})\"\r\n                )\r\n```\r\n\r\n### Full scenario notes\r\n\r\nThe full scenario test above tests different combinations inside an `Union`. The results are:\r\n\r\n1. If `str` is present, any value will be parsed as a string, no matter if `str` is in the beginning of the `Union` or at the end.\r\n\r\n2. If `str` is not present, the more complex types fail validation despite being correct:\r\n    ```\r\n    E   pydantic.error_wrappers.ValidationError: 2 validation errors for UnionModelListModel\r\n    E   hosts\r\n    E     value is not a valid dict (type=type_error.dict)\r\n    E   hosts\r\n    E     value is not a valid list (type=type_error.list)\r\n    ```\r\n\r\n## Possibly related bugs\r\n\r\nhttps://github.com/samuelcolvin/pydantic/issues/453\r\nhttps://github.com/samuelcolvin/pydantic/issues/1423\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /home/rlat/repos/global-search-v2/apps/recipe-search-svc/.venv/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.2 (default, Jun 11 2020, 10:25:59)  [GCC 7.5.0]\r\n                     platform: Linux-5.3.0-59-generic-x86_64-with-glibc2.27\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your bug hasn't already been reported. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1666", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1666/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1666/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1666/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1666", "id": 646853465, "node_id": "MDU6SXNzdWU2NDY4NTM0NjU=", "number": 1666, "title": "Make hypothesis + pydantic work", "user": {"login": "MartinThoma", "id": 1658117, "node_id": "MDQ6VXNlcjE2NTgxMTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1658117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartinThoma", "html_url": "https://github.com/MartinThoma", "followers_url": "https://api.github.com/users/MartinThoma/followers", "following_url": "https://api.github.com/users/MartinThoma/following{/other_user}", "gists_url": "https://api.github.com/users/MartinThoma/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartinThoma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartinThoma/subscriptions", "organizations_url": "https://api.github.com/users/MartinThoma/orgs", "repos_url": "https://api.github.com/users/MartinThoma/repos", "events_url": "https://api.github.com/users/MartinThoma/events{/privacy}", "received_events_url": "https://api.github.com/users/MartinThoma/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-28T06:34:59Z", "updated_at": "2020-06-28T10:47:19Z", "closed_at": "2020-06-28T10:46:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature Request\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /home/moose/.pyenv/versions/3.8.1/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.1 (default, May 14 2020, 22:06:53)  [GCC 9.3.0]\r\n                     platform: Linux-5.4.0-39-generic-x86_64-with-glibc2.29\r\n     optional deps. installed: ['typing-extensions']\r\n\r\n```\r\n\r\nFirst of all: Awesome project! I like pydantic a lot, thank you for putting the effort in it :-)\r\n\r\n[hypothesis](https://github.com/HypothesisWorks/hypothesis) is a property testing framework. It generates input for the test data and helps to generate atypical inputs, e.g. for integers it could generate positive, negative, zero, int32 boundaries. This way, it keeps the test code clean and you don't forget important special cases.\r\n\r\nIt would be pretty awesome if the following would work. It should automatically generate \"Person\" objects:\r\n\r\n```python\r\nfrom typing import Optional\r\n\r\nfrom hypothesis import given\r\nfrom hypothesis.strategies import from_type\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass Adress(BaseModel):\r\n    city: str\r\n    street: str\r\n    house_number: int\r\n    postal_code: int\r\n\r\n\r\nclass Person(BaseModel):\r\n    prename: str\r\n    middlename: Optional[str]\r\n    lastname: str\r\n    address: Adress\r\n\r\n\r\n@given(from_type(Person))\r\ndef test_me(person: Person):\r\n    assert isinstance(person, Person)\r\n```\r\n\r\nAparently, pydantic does not generate correctly typed `__init__` methods ([source](https://stackoverflow.com/a/62593144/562769)). Maybe this can be fixed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1660", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1660/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1660/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1660/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1660", "id": 646599739, "node_id": "MDU6SXNzdWU2NDY1OTk3Mzk=", "number": 1660, "title": "Validating hierarchical data structures of unknown depth", "user": {"login": "codyflynnNC", "id": 18743297, "node_id": "MDQ6VXNlcjE4NzQzMjk3", "avatar_url": "https://avatars1.githubusercontent.com/u/18743297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codyflynnNC", "html_url": "https://github.com/codyflynnNC", "followers_url": "https://api.github.com/users/codyflynnNC/followers", "following_url": "https://api.github.com/users/codyflynnNC/following{/other_user}", "gists_url": "https://api.github.com/users/codyflynnNC/gists{/gist_id}", "starred_url": "https://api.github.com/users/codyflynnNC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codyflynnNC/subscriptions", "organizations_url": "https://api.github.com/users/codyflynnNC/orgs", "repos_url": "https://api.github.com/users/codyflynnNC/repos", "events_url": "https://api.github.com/users/codyflynnNC/events{/privacy}", "received_events_url": "https://api.github.com/users/codyflynnNC/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-27T03:38:09Z", "updated_at": "2020-06-29T16:46:34Z", "closed_at": "2020-06-29T16:46:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Output of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /Users/cflynn15/PycharmProjects/cara/venv/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.4 (default, Oct 12 2019, 18:55:28)  [Clang 11.0.0 (clang-1100.0.33.8)]\r\n                     platform: Darwin-18.7.0-x86_64-i386-64bit\r\n     optional deps. installed: []\r\n\r\n```\r\n\r\n# Question\r\nHello! I'm new to pydantic and am trying to figure out the best way to use a pydantic model as a response_model within fast-api. The tricky part is that the object essentially a hierarchical tree where each node has the same attributes. \r\n![Screen Shot 2020-06-26 at 23 36 09](https://user-images.githubusercontent.com/18743297/85913810-da988f80-b805-11ea-831f-03cec45eb294.png)\r\n\r\n\r\n I've read the docs on post annotations and self-referencing models but am not sure how to/If I should apply them in this case. \r\nThe data structure I want to validate looks like this:\r\n```\r\n{\r\n\t\"orgid\": 1,\r\n\t\"name\": \"SomeRootOrg\",\r\n\t\"parentid\": -1,\r\n\t\"level\": 0,\r\n\t\"id\": 0,\r\n\t\"path\": [\r\n\t\t0\r\n\t],\r\n\t\"children\": [{\r\n\t\t\t\"orgid\": 2,\r\n\t\t\t\"name\": \"SomeChildOrg\",\r\n\t\t\t\"parentid\": 1,\r\n\t\t\t\"level\": 1,\r\n\t\t\t\"id\": 1000,\r\n\t\t\t\"path\": [\r\n\t\t\t\t0,\r\n\t\t\t\t1000\r\n\t\t\t],\r\n\t\t\t\"children\": [{\r\n\t\t\t\t\t\"orgid\": 13,\r\n\t\t\t\t\t\"name\": \"AnotherChild\",\r\n\t\t\t\t\t\"parentid\": 2,\r\n\t\t\t\t\t\"level\": 2,\r\n\t\t\t\t\t\"id\": 2000,\r\n\t\t\t\t\t\"path\": [\r\n\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t1000,\r\n\t\t\t\t\t\t2000\r\n\t\t\t\t\t],\r\n\t\t\t\t\t\"children\": [{...AndSoOn...}]\r\n}\r\n```\r\n\r\nWhere the maximum depth would be 5 at this point in time. I wrote a pydantic model which can successfully validate this object however there's always the potential for org changes in the future where a new level could potentially be added. Any advice on how or If this could/should be validated through pydantic is welcome. Thanks!\r\n\r\n\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your question hasn't already been answered. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your question: -->\r\n\r\n```py\r\nfrom typing import List, Optional\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass BaseOrg(BaseModel):\r\n    orgid: int\r\n    name: str\r\n    parentid: int\r\n    level: int\r\n    id: int\r\n    path: List[int]\r\n\r\n\r\nclass Level1Org(BaseOrg):\r\n    children: Optional[List[BaseOrg]]\r\n\r\n\r\nclass Level2Org(Level1Org):\r\n    children: Optional[List[Level1Org]]\r\n\r\n\r\nclass Level3Org(Level2Org):\r\n    children: Optional[List[Level2Org]]\r\n\r\n\r\nclass Level4Org(Level3Org):\r\n    children: Optional[List[Level3Org]]\r\n\r\n\r\nclass Level5Org(Level4Org):\r\n    children: Optional[List[Level4Org]]\r\n\r\n...\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1654", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1654/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1654/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1654/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1654", "id": 643931878, "node_id": "MDU6SXNzdWU2NDM5MzE4Nzg=", "number": 1654, "title": "Url type port limit not checked", "user": {"login": "flapili", "id": 29481952, "node_id": "MDQ6VXNlcjI5NDgxOTUy", "avatar_url": "https://avatars2.githubusercontent.com/u/29481952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flapili", "html_url": "https://github.com/flapili", "followers_url": "https://api.github.com/users/flapili/followers", "following_url": "https://api.github.com/users/flapili/following{/other_user}", "gists_url": "https://api.github.com/users/flapili/gists{/gist_id}", "starred_url": "https://api.github.com/users/flapili/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flapili/subscriptions", "organizations_url": "https://api.github.com/users/flapili/orgs", "repos_url": "https://api.github.com/users/flapili/repos", "events_url": "https://api.github.com/users/flapili/events{/privacy}", "received_events_url": "https://api.github.com/users/flapili/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1391909435, "node_id": "MDU6TGFiZWwxMzkxOTA5NDM1", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/Change", "name": "Change", "color": "d4c5f9", "default": false, "description": "Suggested alteration to pydantic, not a new feature nor a bug"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-23T15:20:36Z", "updated_at": "2020-07-03T19:56:37Z", "closed_at": "2020-07-03T19:56:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\npydantic version: 1.5.1\r\npydantic compiled: False\r\ninstall path: /opt/fastapi/backend/venv/lib/python3.8/site-packages/pydantic\r\npython version: 3.8.3 (default, Jun 21 2020, 00:03:19)  [GCC 8.3.0]\r\nplatform: Linux-4.19.0-9-amd64-x86_64-with-glibc2.28\r\noptional deps. installed: ['email-validator']\r\n```\r\n\r\nHi,\r\n\r\nThe port limit is not checked by URLs types:\r\n\r\n```py\r\n>>> from pydantic import BaseModel, stricturl\r\n>>> class Test(BaseModel):\r\n\turl: stricturl(allowed_schemes=[\"tcp\"])\r\n\r\n\t\r\n>>> Test(url=\"tcp://127.0.0.1:100000000000000000000000000000\")\r\nTest(url=UrlValue('tcp://127.0.0.1:100000000000000000000000000000', scheme='tcp', host='127.0.0.1', host_type='ipv4', port='100000000000000000000000000000'))\r\n```\r\nExcepted result: raise an error,\r\n\r\nmy current workaround\r\n```py\r\n>>> from pydantic import BaseModel, stricturl, validator\r\n>>> from pydantic.networks import url_regex\r\n>>> class Test(BaseModel):\r\n\turl: stricturl(allowed_schemes=[\"tcp\"])\r\n\t@validator(\"url\")\r\n\tdef validate_port(cls, v):\r\n\t\tport = url_regex().match(v).group(\"port\")\r\n\t\tif port is None:\r\n\t\t    return v\r\n\r\n\t\tif int(port) > 2**16:\r\n\t\t\traise ValueError(\"port overflow\")\r\n\t\treturn v\r\n\r\n\t\r\n>>> Test(url=\"tcp://127.0.0.1:900000\")\r\nTraceback (most recent call last):\r\n  File \"<pyshell#84>\", line 1, in <module>\r\n    Test(url=\"tcp://127.0.0.1:900000\")\r\n  File \"pydantic\\main.py\", line 338, in pydantic.main.BaseModel.__init__\r\npydantic.error_wrappers.ValidationError: 1 validation error for Test\r\nurl\r\n  port overflow (type=value_error)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1652", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1652/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1652/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1652/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1652", "id": 643257818, "node_id": "MDU6SXNzdWU2NDMyNTc4MTg=", "number": 1652, "title": "Export mock data model", "user": {"login": "apost71", "id": 26016490, "node_id": "MDQ6VXNlcjI2MDE2NDkw", "avatar_url": "https://avatars3.githubusercontent.com/u/26016490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apost71", "html_url": "https://github.com/apost71", "followers_url": "https://api.github.com/users/apost71/followers", "following_url": "https://api.github.com/users/apost71/following{/other_user}", "gists_url": "https://api.github.com/users/apost71/gists{/gist_id}", "starred_url": "https://api.github.com/users/apost71/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apost71/subscriptions", "organizations_url": "https://api.github.com/users/apost71/orgs", "repos_url": "https://api.github.com/users/apost71/repos", "events_url": "https://api.github.com/users/apost71/events{/privacy}", "received_events_url": "https://api.github.com/users/apost71/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-22T17:51:53Z", "updated_at": "2020-06-29T15:15:03Z", "closed_at": "2020-06-29T15:15:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Export mock data model\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /Users/apost/ccde/ccml-terminus-defection/venv/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.6 (default, Dec 30 2019, 19:38:28)  [Clang 11.0.0 (clang-1100.0.33.16)]\r\n                     platform: Darwin-18.6.0-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n\r\n```\r\n\r\nI would like to be able to export a \"default\" json object for my data models that contain dummy data without needing to populate it all myself.  I would expect something like strings to be filled with `\"string\"` and ints to be filled with zeros or something along those lines.  From what I can tell this is not available, so I am posting this as a question to see if I understand correctly that this is the case, and if so I would make this a feature request.\r\n\r\nUsage would be something along these lines\r\n\r\n```py\r\nimport pydantic\r\nfrom enum import Enum\r\n\r\ndef ModelEnum(Enum, str):\r\n  A = \"A\"\r\n  B = \"B\"\r\n\r\ndef Model(pydantic.BaseModel):\r\n  string_value: str\r\n  int_value: int\r\n  enum_value: ModelEnum\r\n\r\nmock = Model.mock()\r\n```\r\n\r\nand the result would be a data model that looks something like this:\r\n\r\n```\r\n{\r\n  \"string_value\": \"string\",\r\n  \"int_value\": 0,\r\n  \"enum_value\": \"A\"\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1650", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1650/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1650/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1650/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1650", "id": 643029247, "node_id": "MDU6SXNzdWU2NDMwMjkyNDc=", "number": 1650, "title": "From simple level payload to nested Objects", "user": {"login": "alvarogf97", "id": 23174115, "node_id": "MDQ6VXNlcjIzMTc0MTE1", "avatar_url": "https://avatars2.githubusercontent.com/u/23174115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvarogf97", "html_url": "https://github.com/alvarogf97", "followers_url": "https://api.github.com/users/alvarogf97/followers", "following_url": "https://api.github.com/users/alvarogf97/following{/other_user}", "gists_url": "https://api.github.com/users/alvarogf97/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvarogf97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvarogf97/subscriptions", "organizations_url": "https://api.github.com/users/alvarogf97/orgs", "repos_url": "https://api.github.com/users/alvarogf97/repos", "events_url": "https://api.github.com/users/alvarogf97/events{/privacy}", "received_events_url": "https://api.github.com/users/alvarogf97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-22T12:26:30Z", "updated_at": "2020-06-23T14:41:44Z", "closed_at": "2020-06-23T14:41:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nHi there!\r\n\r\nI'm trying to serialize a big payload which contains all his attributes in the same level, nevertheless I want to re-organised them into nested fields, for example:\r\n\r\n**Payload**:\r\n```json\r\n{\r\n    \"field_1\": \"fake field 1\",\r\n    \"field_2\": \"fake_field 2\",\r\n    \"field_3\": \"fake_field_3\"\r\n}\r\n```\r\n\r\n**Pydantic models**\r\n```python\r\n\r\nFakeModel2(BaseModel):\r\n   field_2: str\r\n   field_3: str\r\n\r\nFakeModel1(BaseModel):\r\n    field_1: str\r\n    custom_field: FakeModel2\r\n```\r\n\r\nThre's a way to pass the source to the `FakeModel1` in order to do that, maybe something like:\r\n\r\n```python\r\n@validator('custom_field', pre=True)\r\ndef parse_custom_field(cls, value, whole_payload):\r\n    return FakeModel2(**whole_payload)\r\n```\r\n\r\nThanks!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1647", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1647/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1647/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1647/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1647", "id": 642401201, "node_id": "MDU6SXNzdWU2NDI0MDEyMDE=", "number": 1647, "title": "Argument names and types get mangled when using openapi-generator with Pydantic", "user": {"login": "jsilverpa", "id": 3375386, "node_id": "MDQ6VXNlcjMzNzUzODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3375386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsilverpa", "html_url": "https://github.com/jsilverpa", "followers_url": "https://api.github.com/users/jsilverpa/followers", "following_url": "https://api.github.com/users/jsilverpa/following{/other_user}", "gists_url": "https://api.github.com/users/jsilverpa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsilverpa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsilverpa/subscriptions", "organizations_url": "https://api.github.com/users/jsilverpa/orgs", "repos_url": "https://api.github.com/users/jsilverpa/repos", "events_url": "https://api.github.com/users/jsilverpa/events{/privacy}", "received_events_url": "https://api.github.com/users/jsilverpa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-20T15:59:38Z", "updated_at": "2020-06-21T01:08:13Z", "closed_at": "2020-06-21T01:08:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "#1154 Question\r\n\r\nI'm using Pydantic and FastAPI.  I believe this is an issue/question for Pydantic, but please point me to FastAPI if it is more related to that code.\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.5.1\r\npydantic compiled: True\r\npython version: 3.7.3 (default, Mar 27 2019, 16:54:48)  [Clang 4.0.1 (tags/RELEASE_401/final)]\r\nplatform: Darwin-19.3.0-x86_64-i386-64bit \r\noptional deps. installed: ['typing-extensions', 'email-validator']\r\n```\r\n\r\n```\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel\r\n\r\nfrom fastapi_utils.openapi import simplify_operation_ids\r\n\r\nclass Item(BaseModel):\r\n    name: str\r\n\r\napp = FastAPI()\r\n\r\n#this works\r\n@app.post(\"/items/\")\r\nasync def list_items(item1: Item):\r\n    return item1\r\n\r\n#this generates a mangled name\r\n@app.post(\"/items_bad/\")\r\nasync def list_items_bad(item1: Item, item2: Item):\r\n    return item1\r\n\r\nsimplify_operation_ids(app)\r\n\r\n```\r\n\r\n\r\nWith the example above, the generated client APIs (after using openapi-generator) look like:\r\n```\r\napi_instance.list_items(item) \r\napi_instance.list_items_bad(body_list_items_bad_items_bad_post)\r\n```\r\n\r\nI would like the 2nd API to look like\r\n```api_instance.list_items_bad(item, item)```\r\n\r\nCan someone advise on what I'm doing wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1643", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1643/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1643/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1643/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1643", "id": 641103999, "node_id": "MDU6SXNzdWU2NDExMDM5OTk=", "number": 1643, "title": "Nested models returning values empty when invalid", "user": {"login": "fsramalho", "id": 6180271, "node_id": "MDQ6VXNlcjYxODAyNzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6180271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fsramalho", "html_url": "https://github.com/fsramalho", "followers_url": "https://api.github.com/users/fsramalho/followers", "following_url": "https://api.github.com/users/fsramalho/following{/other_user}", "gists_url": "https://api.github.com/users/fsramalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/fsramalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fsramalho/subscriptions", "organizations_url": "https://api.github.com/users/fsramalho/orgs", "repos_url": "https://api.github.com/users/fsramalho/repos", "events_url": "https://api.github.com/users/fsramalho/events{/privacy}", "received_events_url": "https://api.github.com/users/fsramalho/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-18T10:43:57Z", "updated_at": "2020-06-27T18:06:21Z", "closed_at": "2020-06-27T18:06:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature Request\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: /Users/fabioramalho/CODING/open-source/pydantic/pydantic\r\n               python version: 3.6.7 (v3.6.7:6ec5cf24b7, Oct 20 2018, 03:02:14)  [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)]\r\n                     platform: Darwin-19.5.0-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions', 'email-validator', 'devtools']\r\n\r\n```\r\n\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your feature request: -->\r\n\r\n```py\r\nfrom pydantic import BaseModel, root_validator\r\n\r\nclass Bar(BaseModel):\r\n    field_1: str\r\n    field_2: str\r\n\r\n    @root_validator\r\n    def check_fields_are_equal(cls, values):\r\n        if values.get(\"field_1\") == values.get(\"field_2\"):\r\n            raise ValueError(\"`field_1` cannot be the same value as `field_2\")\r\n        return values\r\n\r\nclass Foo(BaseModel):\r\n    bar: Bar\r\n    number: int\r\n\r\n    @root_validator\r\n    def number_1_not_field_1_a(cls, values):\r\n        number = values.get(\"number\")\r\n        bar = values.get(\"bar\")\r\n\r\n        if number == 1 and if bar and bar.field_1 == \"a\":\r\n            raise ValueError(\"It is invalid `number` = 1 and `bar.field_1` = a\")\r\n\r\n        return values\r\n\r\nFoo.validate(dict(number=1, bar=dict(field_1=\"a\", field_2=\"a\")))\r\n```\r\nRunning the code above we get only one error\r\n```\r\n1 validation error for Foo\r\nbar -> __root__\r\n  `field_1` cannot be the same value as `field_2 (type=value_error)\r\n```\r\n\r\nHowever I would be expect this\r\n```\r\n2 validation errors for Foo\r\nbar -> __root__\r\n  `field_1` cannot be the same value as `field_2 (type=value_error)\r\n__root__\r\n  It is invalid `number` = 1 and `bar.field_1` = a (type=value_error)\r\n```\r\n as the root validator `number_1_not_field_1_a` condition is true.\r\n\r\nI was looking into the code and found the logic behind that behaviour\r\nhttps://github.com/samuelcolvin/pydantic/blob/master/pydantic/main.py#L899\r\n\r\nwhich seems the value will be only assigned to the field if there are no errors. In my point of view, it would not be harmful if the value is always assigned to the field since if there are errors they will be always raised, so the data will never be valid.\r\n\r\n@samuelcolvin I am keen to know your thoughts on this and I am happy to raise a PR with the small change in the `validate_model` function + tests \ud83d\ude03 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1641", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1641/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1641/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1641/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1641", "id": 640156821, "node_id": "MDU6SXNzdWU2NDAxNTY4MjE=", "number": 1641, "title": "dicussion: Potential code quality improvements", "user": {"login": "pnijhara", "id": 40136154, "node_id": "MDQ6VXNlcjQwMTM2MTU0", "avatar_url": "https://avatars0.githubusercontent.com/u/40136154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnijhara", "html_url": "https://github.com/pnijhara", "followers_url": "https://api.github.com/users/pnijhara/followers", "following_url": "https://api.github.com/users/pnijhara/following{/other_user}", "gists_url": "https://api.github.com/users/pnijhara/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnijhara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnijhara/subscriptions", "organizations_url": "https://api.github.com/users/pnijhara/orgs", "repos_url": "https://api.github.com/users/pnijhara/repos", "events_url": "https://api.github.com/users/pnijhara/events{/privacy}", "received_events_url": "https://api.github.com/users/pnijhara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-17T05:39:20Z", "updated_at": "2020-06-29T16:29:11Z", "closed_at": "2020-06-29T16:29:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "This repo was forked and then a DeepSource analysis was run on the forked repo.\r\nThere:\r\n- 235 Antipattern issues were found\r\n- 43 Bug-Risks issues were found\r\n- 63 Performance issue was found\r\n- 14 Security issues were found\r\n---\r\nOut of which 155 can be auto fixed. Some of them can be found here\r\n- https://deepsource.io/gh/pnijhara/pydantic/issue/PTC-W0018/\r\n- https://deepsource.io/gh/pnijhara/pydantic/issue/PYL-W0612/\r\n- https://deepsource.io/gh/pnijhara/pydantic/issue/BAN-B101/\r\n---\r\nIn all total number of issues are listed here - https://deepsource.io/gh/pnijhara/pydantic/\r\n\r\nLink to `.deepsource.toml` configuration file that was added to the forked repo for running DeepSource analysis can be found [here](https://github.com/pnijhara/pydantic/blob/pnijhara-patch-1/.deepsource.toml)\r\n\r\nWhich of these issues you would consider high priority, and which ones would you want to ignore or consider false-positive?\r\n\r\nYou can also activate this analysis on your own, and have it triggered on each PR, if you integrate [DeepSource](https://deepsource.io) in the repo\r\n\r\nDisclaimer: I work for DeepSource", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1640", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1640/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1640/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1640/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1640", "id": 639621733, "node_id": "MDU6SXNzdWU2Mzk2MjE3MzM=", "number": 1640, "title": "Wrong error raised in sequential validation", "user": {"login": "MischaPanch", "id": 35432522, "node_id": "MDQ6VXNlcjM1NDMyNTIy", "avatar_url": "https://avatars0.githubusercontent.com/u/35432522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MischaPanch", "html_url": "https://github.com/MischaPanch", "followers_url": "https://api.github.com/users/MischaPanch/followers", "following_url": "https://api.github.com/users/MischaPanch/following{/other_user}", "gists_url": "https://api.github.com/users/MischaPanch/gists{/gist_id}", "starred_url": "https://api.github.com/users/MischaPanch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MischaPanch/subscriptions", "organizations_url": "https://api.github.com/users/MischaPanch/orgs", "repos_url": "https://api.github.com/users/MischaPanch/repos", "events_url": "https://api.github.com/users/MischaPanch/events{/privacy}", "received_events_url": "https://api.github.com/users/MischaPanch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-16T12:23:31Z", "updated_at": "2020-06-16T14:58:12Z", "closed_at": "2020-06-16T14:22:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: .../python3.8/site-packages/pydantic\r\n               python version: 3.8.3 (default, May 19 2020, 18:47:26)  [GCC 7.3.0]\r\n                     platform: Linux-4.4.0-18362-Microsoft-x86_64-with-glibc2.10\r\n     optional deps. installed: []\r\n\r\n```\r\n\r\n\r\n```py\r\nfrom pydantic import BaseModel, validator\r\n\r\nclass Person(BaseModel):\r\n    name: str\r\n    full_name: str\r\n     \r\n    @validator(\"name\")\r\n    def _check_name(cls, v, values):\r\n        if \"John\" == v:\r\n            raise ValueError(\"John is forbidden\")\r\n        return v\r\n    \r\n    @validator(\"full_name\")\r\n    def _check_full_name(cls, v, values):\r\n        if not values[\"name\"] in v:\r\n            raise ValueError()\r\n        return v\r\n\r\n# this is fine\r\nPerson(name=\"Jane\", full_name=\"Jane Doe\")\r\n\r\n# expected \"John is forbidden\" \r\nPerson(name=\"John\", full_name=\"John Doe\")\r\n```\r\n\r\nHowever, instead of the custom defined ValueError we will get the highly confusing message\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"pydantic/main.py\", line 336, in pydantic.main.BaseModel.__init__\r\n  File \"pydantic/main.py\", line 887, in pydantic.main.validate_model\r\n  File \"pydantic/fields.py\", line 563, in pydantic.fields.ModelField.validate\r\n  File \"pydantic/fields.py\", line 711, in pydantic.fields.ModelField._apply_validators\r\n  File \"pydantic/class_validators.py\", line 282, in pydantic.class_validators._generic_validator_cls.lambda3\r\n  File \"<ipython-input-2-8caa8155fe19>\", line 16, in _check_full_name\r\n    if not values[\"name\"] in v:\r\nKeyError: 'name'\r\n```\r\nThis seems to suggest that the problem is the code validating full_name rather than an invalid name. I guess the reason is that since name validation failed, name is no longer included in the values dict when validating full_name which leads to the KeyError. The raised ValueError from name validation has been lost along the way\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1639", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1639/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1639/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1639/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1639", "id": 639593900, "node_id": "MDU6SXNzdWU2Mzk1OTM5MDA=", "number": 1639, "title": "Model that includes Json field can't be deserialized", "user": {"login": "Snakeyyy", "id": 286510, "node_id": "MDQ6VXNlcjI4NjUxMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/286510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Snakeyyy", "html_url": "https://github.com/Snakeyyy", "followers_url": "https://api.github.com/users/Snakeyyy/followers", "following_url": "https://api.github.com/users/Snakeyyy/following{/other_user}", "gists_url": "https://api.github.com/users/Snakeyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Snakeyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Snakeyyy/subscriptions", "organizations_url": "https://api.github.com/users/Snakeyyy/orgs", "repos_url": "https://api.github.com/users/Snakeyyy/repos", "events_url": "https://api.github.com/users/Snakeyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/Snakeyyy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-16T11:36:54Z", "updated_at": "2020-06-16T11:44:16Z", "closed_at": "2020-06-16T11:44:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nWhen using the output of \"BaseModel.json\" for \"BaseModel.parse_raw\" and BaseModel consists of Json field type it results in ValidationError.\r\n\r\nIMO the expected behavior is that the model should be able to deserialize itself from serialized data.\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.5.1\r\npydantic compiled: True\r\n install path: /Users/snakey/projects/liber/liber_website_back/venv/lib/python3.8/site-packages/pydantic\r\npython version: 3.8.2 (default, Apr 20 2020, 11:52:12)  [Clang 11.0.3 (clang-1103.0.32.29)]\r\nplatform: macOS-10.15.5-x86_64-i386-64bit\r\noptional deps. installed: ['email-validator']\r\n```\r\n\r\n```py\r\nfrom pydantic import BaseModel, Json\r\n\r\nclass TestModel(BaseModel):\r\n    data: Json\r\n\r\n\r\ninstance = TestModel(data='{\"x\": \"y\"}')\r\njson_data = instance.json()\r\nTestModel.parse_raw(json_data)\r\n```\r\n\r\nResults in \r\n```\r\npydantic.error_wrappers.ValidationError: 1 validation error for TestModel\r\ndata JSON object must be str, bytes or bytearray (type=type_error.json)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1638", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1638/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1638/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1638/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1638", "id": 639575136, "node_id": "MDU6SXNzdWU2Mzk1NzUxMzY=", "number": 1638, "title": "create_model from JSON Schema", "user": {"login": "BCarley", "id": 11425383, "node_id": "MDQ6VXNlcjExNDI1Mzgz", "avatar_url": "https://avatars3.githubusercontent.com/u/11425383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BCarley", "html_url": "https://github.com/BCarley", "followers_url": "https://api.github.com/users/BCarley/followers", "following_url": "https://api.github.com/users/BCarley/following{/other_user}", "gists_url": "https://api.github.com/users/BCarley/gists{/gist_id}", "starred_url": "https://api.github.com/users/BCarley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BCarley/subscriptions", "organizations_url": "https://api.github.com/users/BCarley/orgs", "repos_url": "https://api.github.com/users/BCarley/repos", "events_url": "https://api.github.com/users/BCarley/events{/privacy}", "received_events_url": "https://api.github.com/users/BCarley/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-16T11:04:16Z", "updated_at": "2020-06-16T14:21:23Z", "closed_at": "2020-06-16T12:05:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature Request\r\n\r\nI've been using a script to generate `pydantic` models from jsonschema. I think I have seen this mentioned in a few issues (#1405) and I would be keen to contribute back if I am able to.\r\n\r\nPrior to opening a pull request I thought I would put the code here for a sanity check.\r\n\r\nThe overall flow is json schema -> pydantic models -> create_model\r\n\r\n## Example Build Flow\r\n\r\n_Note that this is for illustration and will not run as is_\r\n\r\n```python\r\ndef _recursive_build(model: Object):\r\n    fields: Dict[str, tuple] = {}\r\n\r\n    for key, prop_model in model.properties.items():\r\n        default = model.default or ... if str(key) in model.required else None\r\n        fields[key] = _build_field(key, prop_model, default=default)\r\n\r\n    return create_model(\r\n        model.title or \"Schema\",\r\n        __config__=None,\r\n        __base__=None,\r\n        __module__=None,\r\n        __validators__=None,\r\n        **fields,\r\n    )\r\n\r\n\r\ndef _build_field(field_name: str, model: SchemaTypes, default: Any) -> Tuple[Any, Any]:\r\n    if model.type == \"object\":\r\n        return (\r\n            _recursive_build(model),\r\n            Field(default),\r\n        )\r\n    elif model.type == \"string\":\r\n        return (\r\n            str,\r\n            Field(\r\n                default,\r\n                title=model.title or field_name,\r\n                description=model.description,\r\n                min_length=model.minLength,\r\n                max_length=model.maxLength,\r\n                regex=model.pattern,\r\n                const=model.const,\r\n            ),\r\n        )\r\n\r\n    # continues with rest of types\r\n\r\n```\r\n\r\n## Example Schemas\r\n\r\n_Note that this is for illustration and will not run as is_\r\n\r\n```python\r\nclass SchemaBase(BaseModel):\r\n    description: Optional[str]\r\n    title: Optional[str]\r\n    default: Optional[Any]\r\n    examples: Optional[List[Any]]\r\n    enum: Optional[List[Any]]\r\n    const: Optional[Any]\r\n\r\n    class Config:\r\n        ignore_extras = True\r\n        exclude_none = True\r\n\r\n\r\nclass Format(str, Enum):\r\n    date_time = \"date-time\"\r\n    date = \"date\"\r\n    time = \"time\"\r\n\r\n\r\nclass Boolean(SchemaBase):\r\n    type: Literal[\"boolean\"]\r\n\r\n\r\nclass Object(SchemaBase):\r\n    type: Literal[\"object\"]\r\n    minProperties: Optional[int]\r\n    maxProperties: Optional[int]\r\n    required: List[str] = []\r\n    additionalProperties: Optional[bool]\r\n    properties: Dict[str, SchemaTypes]\r\n```\r\n\r\n## Example Tests\r\n\r\nThis might not be acceptable but currently for the tests I am comparing `schema()` outputs\r\n\r\n```python\r\ndef test_simple_integer():\r\n    schema = {\r\n        \"type\": \"object\",\r\n        \"title\": \"Simple Integer\",\r\n        \"properties\": {\r\n            \"foo\": {\r\n                \"title\": \"Integer\",\r\n                \"type\": \"integer\",\r\n                \"maximum\": 5,\r\n                \"minimum\": 4,\r\n                \"multipleOf\": 1,\r\n            }\r\n        },\r\n    }\r\n    assert schema == schema_to_model(schema).schema()\r\n```\r\n\r\n## Potential Issues\r\n\r\n- Not currently looking at `definitions` in json-schemas as I don't need them. I expect this would have to be offloaded to a library but that would mean adding a depency\r\n- Lots of fiddly bits that might be difficult to handle in the json schema spec might make it more effort than is worth.\r\n- The lack of a discriminator might have failed validations of the input `Schema` a bit noisy and confusing for users.\r\n- Might encourage people to use json schema rather than `pydantic` models directly.\r\n\r\nThanks! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1637", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1637/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1637/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1637/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1637", "id": 639566236, "node_id": "MDU6SXNzdWU2Mzk1NjYyMzY=", "number": 1637, "title": "What's the Preferred Way to Derive One Setting From Another?", "user": {"login": "eceppda", "id": 1106336, "node_id": "MDQ6VXNlcjExMDYzMzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1106336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eceppda", "html_url": "https://github.com/eceppda", "followers_url": "https://api.github.com/users/eceppda/followers", "following_url": "https://api.github.com/users/eceppda/following{/other_user}", "gists_url": "https://api.github.com/users/eceppda/gists{/gist_id}", "starred_url": "https://api.github.com/users/eceppda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eceppda/subscriptions", "organizations_url": "https://api.github.com/users/eceppda/orgs", "repos_url": "https://api.github.com/users/eceppda/repos", "events_url": "https://api.github.com/users/eceppda/events{/privacy}", "received_events_url": "https://api.github.com/users/eceppda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-16T10:49:02Z", "updated_at": "2020-06-16T14:35:15Z", "closed_at": "2020-06-16T12:01:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path:[...]/venv/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.3 (default, Mar 27 2019, 22:11:17)  [GCC 7.3.0]\r\n                     platform: Linux-5.4.0-26-generic-x86_64-with-debian-bullseye-sid\r\n     optional deps. installed: []\r\n\r\n```\r\n\r\nI'd like to derive one setting from another, like the following:\r\n\r\n```py\r\nfrom pydantic import BaseSettings, DirectoryPath, FilePath\r\n\r\n\r\nclass Settings(BaseSettings):\r\n\r\n    root_dir: DirectoryPath = '/foo/bar'\r\n\r\n    file_one: FilePath = f'{root_dir}/baz.txt'\r\n\r\n    file_two: FilePath = f'{root_dir}/baz.md'\r\n```\r\n\r\nThe issue here is, if I override `root_dir` with a different environment value, the derived properties remain set with the default values. I roughly understand that this is because the defaults are applied when the class is initialized and cannot be updated later. \r\n\r\nWhat is the preferred way to derive settings?\r\n\r\nI have implemented the following, but I lose `BaseModel` validation for `file_one`:\r\n\r\n```\r\nfrom pydantic import BaseSettings, DirectoryPath, FilePath\r\n\r\n\r\nclass Settings(BaseSettings):\r\n\r\n    root_dir: DirectoryPath = '/foo/bar'\r\n\r\n    @property\r\n    def file_one(self) -> FilePath:\r\n        return f'{self.root_dir}/baz.txt'\r\n```\r\n\r\nIs there a better way to do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1636", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1636/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1636/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1636/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1636", "id": 639544917, "node_id": "MDU6SXNzdWU2Mzk1NDQ5MTc=", "number": 1636, "title": "Nested color object is not converted to json", "user": {"login": "fortunto2", "id": 1236751, "node_id": "MDQ6VXNlcjEyMzY3NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1236751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fortunto2", "html_url": "https://github.com/fortunto2", "followers_url": "https://api.github.com/users/fortunto2/followers", "following_url": "https://api.github.com/users/fortunto2/following{/other_user}", "gists_url": "https://api.github.com/users/fortunto2/gists{/gist_id}", "starred_url": "https://api.github.com/users/fortunto2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fortunto2/subscriptions", "organizations_url": "https://api.github.com/users/fortunto2/orgs", "repos_url": "https://api.github.com/users/fortunto2/repos", "events_url": "https://api.github.com/users/fortunto2/events{/privacy}", "received_events_url": "https://api.github.com/users/fortunto2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-16T10:14:26Z", "updated_at": "2020-06-20T10:24:34Z", "closed_at": "2020-06-16T11:57:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nI collect an object, a list of dominant colors. \r\nAnd then I\u2019m going to save the Django 2 in the jsonfield(postgres).\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.5.1\r\n     pydantic compiled: True\r\n     python version: 3.7.3 (default, Oct  7 2019, 12:56:13)  [GCC 8.3.0]\r\n     platform: Linux-5.0.0-38-generic-x86_64-with-Ubuntu-19.04-disco\r\n     optional deps. installed: ['typing-extensions']\r\n...\r\n```\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\n\r\n```py\r\n\r\nfrom pydantic.color import Color\r\n\r\nclass DominantColor(BaseModel):\r\n    percent: int = Field(ge=0, le=100, default=None)\r\n    color: Color\r\n\r\n    @property\r\n    def rgb(self):\r\n        return self.color.as_rgb_tuple()\r\n\r\n    @property\r\n    def name(self):\r\n        return self.color.as_named()\r\n\r\nclass DominantColorList(BaseModel):\r\n    __root__: List[DominantColor]\r\n\r\nclass Features(BaseModel):\r\n    score: float = None\r\n    dom_colors: List[DominantColor] = []\r\n\r\n\r\nclass Frame(BaseEntity):\r\n    ss: int = Field(ge=0)\r\n    features: Features = {}\r\n\r\nclass FramesList(BaseEntity):\r\n    __root__: List[Frame]\r\n\r\nget_features(frame_array):\r\n\r\n  ...\r\n\r\n  dom_colors = [\r\n            {\r\n                'color': (0,0,100),\r\n                'percent': 10\r\n            },\r\n            {\r\n                'color': (0,100,100),\r\n                'percent': 20\r\n            },\r\n            {\r\n                'color': (100,0,100),\r\n                'percent': 30\r\n            },\r\n        ]\r\n\r\n        # from pydantic import parse_obj_as\r\n        # dom_colors = parse_obj_as(List[DominantColor], dom_colors)\r\n\r\n        dom_colors = DominantColorList.parse_obj(dom_colors)\r\n\r\n        _dict = {\r\n            \"score\":1\r\n            \"dom_colors\": dom_colors.dict()['__root__'],\r\n        }\r\n\r\n        features = Features(**_dict)\r\n\r\n       return features\r\n\r\nframes: List[Frame] = []\r\nframes_array: List[numpy] = []\r\n\r\nfor i, frame_array in enumerate(frames_array):\r\n\r\n       features = get_features(frame_array)\r\n\r\n        frame = Frame(\r\n            ss=key_frames[i],\r\n            features=features\r\n        )\r\n\r\n        frames.append(frame)\r\n\r\n#Django\r\nmodel.jsonfiled = FramesList.parse_obj(frames).dict()['__root__']\r\nmodel.save()\r\n```\r\nget  \r\n```\r\nTraceback (most recent call last):\r\n  File \"manage.py\", line 31, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"//venv/lib/python3.7/site-packages/django/core/management/__init__.py\", line 381, in execute_from_command_line\r\n    utility.execute()\r\n  File \"//venv/lib/python3.7/site-packages/django/core/management/__init__.py\", line 375, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"//venv/lib/python3.7/site-packages/django/core/management/base.py\", line 323, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"//venv/lib/python3.7/site-packages/django/core/management/base.py\", line 364, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"//backend/apps/files/management/commands/file.py\", line 36, in handle\r\n    file.start_processing()\r\n  File \"//venv/lib/python3.7/site-packages/django_fsm/__init__.py\", line 520, in _change_state\r\n    return fsm_meta.field.change_state(instance, func, *args, **kwargs)\r\n  File \"//venv/lib/python3.7/site-packages/django_fsm/__init__.py\", line 326, in change_state\r\n    result = method(instance, *args, **kwargs)\r\n  File \"//backend/apps/files/states.py\", line 76, in start_processing\r\n    self.ai_base()\r\n  File \"//venv/lib/python3.7/site-packages/django_fsm/__init__.py\", line 520, in _change_state\r\n    return fsm_meta.field.change_state(instance, func, *args, **kwargs)\r\n  File \"//venv/lib/python3.7/site-packages/django_fsm/__init__.py\", line 326, in change_state\r\n    result = method(instance, *args, **kwargs)\r\n  File \"//backend/apps/files/states.py\", line 150, in ai_base\r\n    res = task_ai_base(self.pk)\r\n  File \"//backend/apps/files/tasks/ai_base.py\", line 160, in task_ai_base\r\n    video_data.save()\r\n  File \"//venv/lib/python3.7/site-packages/django/db/models/base.py\", line 741, in save\r\n    force_update=force_update, update_fields=update_fields)\r\n  File \"//venv/lib/python3.7/site-packages/django/db/models/base.py\", line 779, in save_base\r\n    force_update, using, update_fields,\r\n  File \"//venv/lib/python3.7/site-packages/django/db/models/base.py\", line 851, in _save_table\r\n    forced_update)\r\n  File \"//venv/lib/python3.7/site-packages/django/db/models/base.py\", line 900, in _do_update\r\n    return filtered._update(values) > 0\r\n  File \"//venv/lib/python3.7/site-packages/django/db/models/query.py\", line 760, in _update\r\n    return query.get_compiler(self.db).execute_sql(CURSOR)\r\n  File \"//venv/lib/python3.7/site-packages/django/db/models/sql/compiler.py\", line 1469, in execute_sql\r\n    cursor = super().execute_sql(result_type)\r\n  File \"//venv/lib/python3.7/site-packages/django/db/models/sql/compiler.py\", line 1140, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"//venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 99, in execute\r\n    return super().execute(sql, params)\r\n  File \"//venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 67, in execute\r\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n  File \"//venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 76, in _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n  File \"//venv/lib/python3.7/site-packages/django/db/backends/utils.py\", line 84, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"//venv/lib/python3.7/site-packages/psycopg2/_json.py\", line 78, in getquoted\r\n    s = self.dumps(self.adapted)\r\n  File \"//venv/lib/python3.7/site-packages/django/contrib/postgres/fields/jsonb.py\", line 27, in dumps\r\n    return json.dumps(obj, **options)\r\n  File \"/usr/lib/python3.7/json/__init__.py\", line 231, in dumps\r\n    return _default_encoder.encode(obj)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 179, in default\r\n    raise TypeError(f'Object of type {o.__class__.__name__} '\r\nTypeError: Object of type Color is not JSON serializable\r\n\r\n```\r\n\r\ntry\r\n```\r\n    for frame in frames:\r\n        for color in frame.features.dom_colors:\r\n            frame.features.dom_colors = [c.color.dict() for c in frame.features.dom_colors]\r\n```\r\n\r\nget\r\n```\r\n  File \"//backend/apps/files/tasks/ai_base.py\", line 156, in task_ai_base\r\n    frame.features.dom_colors = [c.color.dict() for c in frame.features.dom_colors]\r\n  File \"//backend/apps/files/tasks/ai_base.py\", line 156, in <listcomp>\r\n    frame.features.dom_colors = [c.color.dict() for c in frame.features.dom_colors]\r\nAttributeError: 'Color' object has no attribute 'dict'\r\n```\r\nwhat am I doing wrong?)\r\nThats work very well...\r\n```\r\nclass DominantColor(BaseEntity):\r\n    percent: int = Field(ge=0, le=100, default=None)\r\n    color: Tuple[int, int, int]\r\n```\r\n\r\n\r\nand how best way to create FramesList and SegmentsList? without ugly __root__?\r\n```\r\n    video_data.frames = FramesList.parse_obj(frames).dict()['__root__']\r\n    video_data.save()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1634", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1634/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1634/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1634/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1634", "id": 638928281, "node_id": "MDU6SXNzdWU2Mzg5MjgyODE=", "number": 1634, "title": "Json field causes many unwanted type warnings in Pycharm", "user": {"login": "ChongYunPeng", "id": 9368771, "node_id": "MDQ6VXNlcjkzNjg3NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/9368771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChongYunPeng", "html_url": "https://github.com/ChongYunPeng", "followers_url": "https://api.github.com/users/ChongYunPeng/followers", "following_url": "https://api.github.com/users/ChongYunPeng/following{/other_user}", "gists_url": "https://api.github.com/users/ChongYunPeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChongYunPeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChongYunPeng/subscriptions", "organizations_url": "https://api.github.com/users/ChongYunPeng/orgs", "repos_url": "https://api.github.com/users/ChongYunPeng/repos", "events_url": "https://api.github.com/users/ChongYunPeng/events{/privacy}", "received_events_url": "https://api.github.com/users/ChongYunPeng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426503, "node_id": "MDU6TGFiZWw1OTc0MjY1MDM=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}, {"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-15T15:07:15Z", "updated_at": "2020-06-16T11:55:03Z", "closed_at": "2020-06-16T11:54:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nI was trying to use the Json field type and the IDE has been giving unwanted warnings. I wonder if this behavior is expected, and if there is any workaround other than suppressing the warning?\r\n```python\r\nfrom typing import List\r\nfrom pydantic import BaseModel, Json\r\n\r\n\r\nclass ComplexJsonModel(BaseModel):\r\n    json_obj: Json[List[int]]\r\n\r\n\r\nmodel = ComplexJsonModel(json_obj='[1, 2, 3]')       # Warning: Expected type 'Json[List[int]]', got 'str' instead \r\nfor item in model.json_obj:                          # Warning: Expected 'collections.Iterable', got 'Json[List[int]]' instead \r\n    print(item)\r\n```\r\n\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.5.1\r\npydantic compiled: True\r\ninstall path: $HOME/.pyenv/versions/3.8.0/envs/<ENV>/lib/python3.8/site-packages/pydantic\r\npython version: 3.8.0 (default, Apr  9 2020, 17:26:00)  [Clang 11.0.3 (clang-1103.0.32.29)]\r\nplatform: macOS-10.15.3-x86_64-i386-64bit\r\noptional deps. installed: []\r\n```\r\n\r\nI also have pydantic Pycharm plugin installed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1632", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1632/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1632/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1632/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1632", "id": 638356676, "node_id": "MDU6SXNzdWU2MzgzNTY2NzY=", "number": 1632, "title": "How to model an unused field?", "user": {"login": "yurikhan", "id": 238691, "node_id": "MDQ6VXNlcjIzODY5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/238691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurikhan", "html_url": "https://github.com/yurikhan", "followers_url": "https://api.github.com/users/yurikhan/followers", "following_url": "https://api.github.com/users/yurikhan/following{/other_user}", "gists_url": "https://api.github.com/users/yurikhan/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurikhan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurikhan/subscriptions", "organizations_url": "https://api.github.com/users/yurikhan/orgs", "repos_url": "https://api.github.com/users/yurikhan/repos", "events_url": "https://api.github.com/users/yurikhan/events{/privacy}", "received_events_url": "https://api.github.com/users/yurikhan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-14T13:53:33Z", "updated_at": "2020-06-16T15:53:52Z", "closed_at": "2020-06-16T12:06:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: /home/khan/.local/lib/python3.6/site-packages/pydantic\r\n               python version: 3.6.9 (default, Nov  7 2019, 10:44:02)  [GCC 8.3.0]\r\n                     platform: Linux-4.15.0-88-generic-x86_64-with-Ubuntu-18.04-bionic\r\n     optional deps. installed: ['typing-extensions', 'email-validator']\r\n```\r\n\r\nI am writing code that will consume an externally generated JSON. For simplicity, let\u2019s assume the following schema:\r\n\r\n```\r\n{\r\n  'type': 'object',\r\n  'additionalProperties': False,\r\n  'required': ['foo', 'bar'],\r\n  'properties': {\r\n    'foo': {'type': 'integer'},\r\n    'bar': {'type': 'string'}\r\n  }\r\n}\r\n```\r\n\r\nI want to validate that both required fields are present, and that no additional fields are included. To that end, I include both fields in the model and configure the model to forbid extra fields. This works:\r\n\r\n```py\r\nfrom pydantic import BaseModel, Extra\r\n\r\nclass DataModel(BaseModel):\r\n    class Config:\r\n        extra: Extra.forbid\r\n\r\n    foo: int\r\n    bar: int\r\n\r\n\r\nDataModel(**{'foo': 3, 'bar': 14})\r\n# success\r\n\r\nDataModel(**{'foo': 3})\r\n# ValidationError: 1 validation error for DataModel\r\n# bar\r\n#   field required (type=value_error.missing)\r\n\r\nDataModel(**{'foo': 3, 'bar': 14, 'baz': 15})\r\n# ValidationError: 1 validation error for DataModel\r\n# baz\r\n#   extra fields not permitted (type=value_error.extra)\r\n```\r\n\r\nFurther, my code only uses the `foo` field; `bar` is unused. I would like to document this fact to the reader and maintainer of my code. (In practice, I\u2019m using a static analyzer that complains when my classes have attributes that are never used.)\r\n\r\nThe _obvious way to do it_ is to start the attribute name with an underscore. I thought I could do that and alias it to the original name. However, this does not work:\r\n\r\n```py\r\nfrom pydantic import BaseModel, Extra, Field\r\n\r\nclass DataModel(BaseModel):\r\n    class Config:\r\n        extra: Extra.forbid\r\n\r\n    foo: int\r\n    _bar: int = Field(..., alias='bar')\r\n\r\n\r\nDataModel(**{'foo': 3, 'bar': 14})\r\n# expected: success\r\n#\r\n# observed:\r\n# ValidationError: 1 validation error for DataModel\r\n# bar\r\n#   extra fields not permitted (type=value_error.extra)\r\n\r\nDataModel(**{'foo': 3})\r\n# expected:\r\n# ValidationError: 1 validation error for DataModel\r\n# bar\r\n#   field required (type=value_error.missing)\r\n#\r\n# observed: success\r\n\r\nDataModel(**{'foo': 3, 'bar': 14, 'baz': 15})\r\n# expected:\r\n# ValidationError: 1 validation error for DataModel\r\n# baz\r\n#   extra fields not permitted (type=value_error.extra)\r\n\r\n# observed:\r\n# ValidationError: 2 validation errors for DataModel\r\n# bar\r\n#   extra fields not permitted (type=value_error.extra)\r\n# baz\r\n#   extra fields not permitted (type=value_error.extra)\r\n```\r\n\r\nI understand that the direct cause of my problem is that Pydantic [filters out][1] annotations with names starting with `_`. I do not fully understand why this filtering is needed. I believe I have read all relevant parts of the documentation, and they don\u2019t mention any model field naming restrictions.\r\n\r\n[1]: https://github.com/samuelcolvin/pydantic/blob/329b1d3e7b32bd72a4db2d122ef0e325c5725741/pydantic/main.py#L180", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1629", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1629/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1629/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1629/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1629", "id": 637981623, "node_id": "MDU6SXNzdWU2Mzc5ODE2MjM=", "number": 1629, "title": "verbose_name for pydantic Field?", "user": {"login": "jet10000", "id": 2258120, "node_id": "MDQ6VXNlcjIyNTgxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2258120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jet10000", "html_url": "https://github.com/jet10000", "followers_url": "https://api.github.com/users/jet10000/followers", "following_url": "https://api.github.com/users/jet10000/following{/other_user}", "gists_url": "https://api.github.com/users/jet10000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jet10000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jet10000/subscriptions", "organizations_url": "https://api.github.com/users/jet10000/orgs", "repos_url": "https://api.github.com/users/jet10000/repos", "events_url": "https://api.github.com/users/jet10000/events{/privacy}", "received_events_url": "https://api.github.com/users/jet10000/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T20:15:29Z", "updated_at": "2020-06-12T20:35:20Z", "closed_at": "2020-06-12T20:35:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I add a verbose name to a field", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1628", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1628/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1628/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1628/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1628", "id": 637925199, "node_id": "MDU6SXNzdWU2Mzc5MjUxOTk=", "number": 1628, "title": "parse dict to pydantic model.", "user": {"login": "LSDkk5", "id": 24493748, "node_id": "MDQ6VXNlcjI0NDkzNzQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/24493748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LSDkk5", "html_url": "https://github.com/LSDkk5", "followers_url": "https://api.github.com/users/LSDkk5/followers", "following_url": "https://api.github.com/users/LSDkk5/following{/other_user}", "gists_url": "https://api.github.com/users/LSDkk5/gists{/gist_id}", "starred_url": "https://api.github.com/users/LSDkk5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LSDkk5/subscriptions", "organizations_url": "https://api.github.com/users/LSDkk5/orgs", "repos_url": "https://api.github.com/users/LSDkk5/repos", "events_url": "https://api.github.com/users/LSDkk5/events{/privacy}", "received_events_url": "https://api.github.com/users/LSDkk5/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T18:12:30Z", "updated_at": "2020-06-12T21:08:37Z", "closed_at": "2020-06-12T21:08:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "As the title.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1626", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1626/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1626/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1626/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1626", "id": 637289150, "node_id": "MDU6SXNzdWU2MzcyODkxNTA=", "number": 1626, "title": "Empty strings are not considered null values", "user": {"login": "guiscaranse", "id": 4432205, "node_id": "MDQ6VXNlcjQ0MzIyMDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4432205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guiscaranse", "html_url": "https://github.com/guiscaranse", "followers_url": "https://api.github.com/users/guiscaranse/followers", "following_url": "https://api.github.com/users/guiscaranse/following{/other_user}", "gists_url": "https://api.github.com/users/guiscaranse/gists{/gist_id}", "starred_url": "https://api.github.com/users/guiscaranse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guiscaranse/subscriptions", "organizations_url": "https://api.github.com/users/guiscaranse/orgs", "repos_url": "https://api.github.com/users/guiscaranse/repos", "events_url": "https://api.github.com/users/guiscaranse/events{/privacy}", "received_events_url": "https://api.github.com/users/guiscaranse/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-11T20:05:29Z", "updated_at": "2020-06-11T20:12:58Z", "closed_at": "2020-06-11T20:12:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nEmpty strings does not trigger ValueErrors. If my attr is not optional why allow users to send an empty string to a field that is required and is a string?\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /home/guiscaranse/.local/share/virtualenvs/api/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.7 (default, May 30 2020, 15:17:46)  [GCC 7.5.0]\r\n                     platform: Linux-5.3.0-53-generic-x86_64-with-debian-buster-sid\r\n     optional deps. installed: ['typing-extensions', 'email-validator']\r\n```\r\n\r\nExample:\r\n```py\r\nfrom pydantic import BaseModel\r\nclass test(BaseModel):\r\n  a: str\r\n\r\n\r\ntest(a=\"\")\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1623", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1623/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1623/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1623/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1623", "id": 636270075, "node_id": "MDU6SXNzdWU2MzYyNzAwNzU=", "number": 1623, "title": "constrained set type \"conset\"", "user": {"login": "patrickkwang", "id": 1263870, "node_id": "MDQ6VXNlcjEyNjM4NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1263870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrickkwang", "html_url": "https://github.com/patrickkwang", "followers_url": "https://api.github.com/users/patrickkwang/followers", "following_url": "https://api.github.com/users/patrickkwang/following{/other_user}", "gists_url": "https://api.github.com/users/patrickkwang/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrickkwang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrickkwang/subscriptions", "organizations_url": "https://api.github.com/users/patrickkwang/orgs", "repos_url": "https://api.github.com/users/patrickkwang/repos", "events_url": "https://api.github.com/users/patrickkwang/events{/privacy}", "received_events_url": "https://api.github.com/users/patrickkwang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}, {"id": 597426505, "node_id": "MDU6TGFiZWw1OTc0MjY1MDU=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": "Pull Request welcome"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-10T13:56:26Z", "updated_at": "2020-07-03T23:45:18Z", "closed_at": "2020-07-03T23:45:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Feature Request\r\n\r\n> Is there a way to benefit from the best of both worlds: [uniqueness] from\u00a0set\u00a0and length constraints from\u00a0conlist()? - _@neimad1985 in https://github.com/samuelcolvin/pydantic/issues/1472#issue-611410387_\r\n\r\nAlso important to me is that sets are unordered.\r\n\r\n---\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: .../venv/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.1 (default, Feb 19 2020, 09:57:06)  [Clang 11.0.0 (clang-1100.0.33.17)]\r\n                     platform: macOS-10.15.5-x86_64-i386-64bit\r\n     optional deps. installed: []\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your feature hasn't been asked for before, or already implemented. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your feature request: -->\r\n\r\nExample behavior:\r\n\r\n```py\r\nfrom pydantic import conset\r\n\r\nclass ConSetModel(BaseModel):\r\n    v: conset(int, max_items=3)\r\n\r\nprint(ConSetModel(v=[1, 2, 2]).v)     # {1, 2}\r\nprint(ConSetModel(v=[1, 2, 2, 3]).v)  # {1, 2, 3}\r\nprint(ConSetModel(v=[1, 2, 3, 4]).v)  # raises ValidationError\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1622", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1622/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1622/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1622/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1622", "id": 635836057, "node_id": "MDU6SXNzdWU2MzU4MzYwNTc=", "number": 1622, "title": "Problem running Literal type example with inheritance", "user": {"login": "jackieleng", "id": 7591667, "node_id": "MDQ6VXNlcjc1OTE2Njc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7591667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackieleng", "html_url": "https://github.com/jackieleng", "followers_url": "https://api.github.com/users/jackieleng/followers", "following_url": "https://api.github.com/users/jackieleng/following{/other_user}", "gists_url": "https://api.github.com/users/jackieleng/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackieleng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackieleng/subscriptions", "organizations_url": "https://api.github.com/users/jackieleng/orgs", "repos_url": "https://api.github.com/users/jackieleng/repos", "events_url": "https://api.github.com/users/jackieleng/events{/privacy}", "received_events_url": "https://api.github.com/users/jackieleng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-10T00:14:28Z", "updated_at": "2020-06-11T14:17:27Z", "closed_at": "2020-06-11T14:17:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /mnt/c/Users/**********/env/lib/python3.6/site-packages/pydantic\r\n               python version: 3.6.9 (default, Apr 18 2020, 01:56:04)  [GCC 8.4.0]\r\n                     platform: Linux-4.4.0-18362-Microsoft-x86_64-with-Ubuntu-18.04-bionic\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your bug hasn't already been reported. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\n\r\nI'm trying to run this example from https://pydantic-docs.helpmanual.io/usage/types/#literal-type, but I'm not getting the right results. In my case everything returns as \"Dessert\" instead the correct types. The other Literal examples are running correctly. Only this one with inheritance seems to fail. I'm also running on WSL, not sure if that might be a problem.\r\n\r\n```py\r\nfrom typing import Optional, Union\r\n\r\nfrom typing_extensions import Literal\r\n\r\nfrom pydantic import BaseModel\r\n\r\nclass Dessert(BaseModel):\r\n    kind: str\r\n\r\nclass Pie(Dessert):\r\n    kind: Literal['pie']\r\n    flavor: Optional[str]\r\n\r\nclass ApplePie(Pie):\r\n    flavor: Literal['apple']\r\n\r\nclass PumpkinPie(Pie):\r\n    flavor: Literal['pumpkin']\r\n\r\nclass Meal(BaseModel):\r\n    dessert: Union[ApplePie, PumpkinPie, Pie, Dessert]\r\n\r\nprint(type(Meal(dessert={'kind': 'pie', 'flavor': 'apple'}).dessert).__name__)\r\n#> ApplePie\r\nprint(type(Meal(dessert={'kind': 'pie', 'flavor': 'pumpkin'}).dessert).__name__)\r\n#> PumpkinPie\r\nprint(type(Meal(dessert={'kind': 'pie'}).dessert).__name__)\r\n#> Pie\r\nprint(type(Meal(dessert={'kind': 'cake'}).dessert).__name__)\r\n#> Dessert\r\n```\r\n\r\nOutput is:\r\n```\r\nDessert\r\nDessert\r\nDessert\r\nDessert\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1621", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1621/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1621/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1621/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1621", "id": 635557863, "node_id": "MDU6SXNzdWU2MzU1NTc4NjM=", "number": 1621, "title": "Validator is executed open all for List in List field", "user": {"login": "cln-m4rie", "id": 16286987, "node_id": "MDQ6VXNlcjE2Mjg2OTg3", "avatar_url": "https://avatars0.githubusercontent.com/u/16286987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cln-m4rie", "html_url": "https://github.com/cln-m4rie", "followers_url": "https://api.github.com/users/cln-m4rie/followers", "following_url": "https://api.github.com/users/cln-m4rie/following{/other_user}", "gists_url": "https://api.github.com/users/cln-m4rie/gists{/gist_id}", "starred_url": "https://api.github.com/users/cln-m4rie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cln-m4rie/subscriptions", "organizations_url": "https://api.github.com/users/cln-m4rie/orgs", "repos_url": "https://api.github.com/users/cln-m4rie/repos", "events_url": "https://api.github.com/users/cln-m4rie/events{/privacy}", "received_events_url": "https://api.github.com/users/cln-m4rie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-09T15:55:11Z", "updated_at": "2020-06-09T16:30:56Z", "closed_at": "2020-06-09T16:30:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /usr/local/var/pyenv/versions/3.7.7/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.7 (default, Apr  9 2020, 18:11:03)  [Clang 11.0.3 (clang-1103.0.32.29)]\r\n                     platform: Darwin-19.5.0-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your bug hasn't already been reported. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\n\r\ncode:\r\n```py\r\nfrom typing import List\r\n\r\nfrom pydantic import BaseModel, validator\r\n\r\nclass PositionData(BaseModel):\r\n    positions: List[List[int]]\r\n\r\n    @validator(\"positions\", each_item=True)\r\n    def is_quadrangle_positions(cls, v):\r\n        if len(v) != 4:\r\n            raise ValueError(\"positions list is not quadrangle\")\r\n        return v\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    test_data = {\r\n        \"positions\": [\r\n            [0, 0, 3, 3],\r\n            [3, 3, 6, 6],\r\n        ]\r\n    }\r\n    PositionData.parse_obj(test_data)\r\n```\r\nerror:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/admin/pyproj/models.py\", line 128, in <module>\r\n    PositionData.parse_obj(test_data)\r\n  File \"pydantic/main.py\", line 447, in pydantic.main.BaseModel.parse_obj\r\n  File \"pydantic/main.py\", line 338, in pydantic.main.BaseModel.__init__\r\npydantic.error_wrappers.ValidationError: 8 validation errors for PositionData\r\npositions -> 0 -> 0\r\n  object of type 'int' has no len() (type=type_error)\r\npositions -> 0 -> 1\r\n  object of type 'int' has no len() (type=type_error)\r\npositions -> 0 -> 2\r\n  object of type 'int' has no len() (type=type_error)\r\npositions -> 0 -> 3\r\n  object of type 'int' has no len() (type=type_error)\r\npositions -> 1 -> 0\r\n  object of type 'int' has no len() (type=type_error)\r\npositions -> 1 -> 1\r\n  object of type 'int' has no len() (type=type_error)\r\npositions -> 1 -> 2\r\n  object of type 'int' has no len() (type=type_error)\r\npositions -> 1 -> 3\r\n  object of type 'int' has no len() (type=type_error)\r\n```\r\n\r\n\r\n\r\n\r\nI'm using this workaroundcode:\r\n```\r\nclass PositionData(BaseModel):\r\n    positions: List[List[int]]\r\n\r\n    @validator(\"positions\")\r\n    def is_quadrangle_positions(cls, v):\r\n        for item in v:\r\n            if len(item) != 4:\r\n                raise ValueError(\"positions list is not quadrangle\")\r\n        return v\r\n```\r\nBut I don't think this is a wise choice.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1616", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1616/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1616/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1616/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1616", "id": 635029551, "node_id": "MDU6SXNzdWU2MzUwMjk1NTE=", "number": 1616, "title": "Make ValidationError unpicklable", "user": {"login": "abadger", "id": 209242, "node_id": "MDQ6VXNlcjIwOTI0Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/209242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abadger", "html_url": "https://github.com/abadger", "followers_url": "https://api.github.com/users/abadger/followers", "following_url": "https://api.github.com/users/abadger/following{/other_user}", "gists_url": "https://api.github.com/users/abadger/gists{/gist_id}", "starred_url": "https://api.github.com/users/abadger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abadger/subscriptions", "organizations_url": "https://api.github.com/users/abadger/orgs", "repos_url": "https://api.github.com/users/abadger/repos", "events_url": "https://api.github.com/users/abadger/events{/privacy}", "received_events_url": "https://api.github.com/users/abadger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}, {"id": 597426505, "node_id": "MDU6TGFiZWw1OTc0MjY1MDU=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": "Pull Request welcome"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-09T00:57:40Z", "updated_at": "2020-06-27T18:31:24Z", "closed_at": "2020-06-27T18:31:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: /home/badger/.cache/pypoetry/virtualenvs/antsibull-F3umzYPl-py3.8/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.3 (default, Feb 26 2020, 00:00:00)  [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]\r\n                     platform: Linux-5.6.15-200.fc31.x86_64-x86_64-with-glibc2.2.5\r\n     optional deps. installed: ['typing-extensions']\r\n...\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your bug hasn't already been reported. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\n\r\n## Use case\r\nI'm going to give you two code snippets because it might not be obvious from the simplest case why I would want to do it.\r\n\r\nA simple approximation of my use case is here: https://gist.github.com/abadger/bfd55741c281ccb534f7bbc8fe9b6202\r\n\r\nI am trying to use pydantic to validate and normalize data from a large number of data sources I need to run each validation separately so that I can know which data sources are providing invalid data. I decided to split it up amongst multiple CPUs by using asyncio's run_in_executor with a ProcessPoolExecutor.  However, when the pydantic.constr validation failed, I would get a BrokenProcessPool error on everything that had been queued but not run rather than a pydantic ValidationError on the specific task which failed.\r\n\r\n## Root cause\r\n\r\nI was able to workaround the problem by catching the pydantic exception and raising a ValueError with all of the information I needed.  This lead me to the root cause: pydantic errors are not **un**picklable.  Because of that, the exception raised in the worker process is pickled there and sent back to the parent process.  The parent process attempts to unpickle it, encounters the error, and then gives the generic, unhelpful BrokenProcessPool error and cancels the other pending tasks.\r\n\r\nHere's a reproducer for the root cause:\r\n```python\r\nimport pickle\r\nfrom pydantic.errors import StrRegexError\r\n\r\np = pickle.dumps(StrRegexError(pattern='test'))\r\nprint(pickle.loads(p))\r\n\r\n# Traceback (most recent call last):\r\n#   File \"<stdin>\", line 1, in <module>\r\n# TypeError: __init__() missing 1 required positional argument: 'pattern'\r\n```\r\n\r\nLooking at the python stdlib bugtracker there are many open bugs with interactions between pickle and exceptions.  I didn't see this one so I added this: https://bugs.python.org/issue40917  Some others that might cause different bugs with pydantics exceptions:\r\n\r\n* https://bugs.python.org/issue32696\r\n* https://bugs.python.org/issue30005\r\n\r\nGiven so many potential bugs, I'm not sure if this is solvable in pydantic code or has to wait for pickle fixes.  However, if it's not solvable, adding my workaround and an explanation of what's happening to the docs would be nice.  That way searching for pydantic, ProcessPoolExecutor, pickle, multiprocessing might save the next person some time wondering why only a portion of their data was being converted.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1615", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1615/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1615/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1615/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1615", "id": 635012976, "node_id": "MDU6SXNzdWU2MzUwMTI5NzY=", "number": 1615, "title": "Add encoding to `read_env_file()`", "user": {"login": "erakli", "id": 11831470, "node_id": "MDQ6VXNlcjExODMxNDcw", "avatar_url": "https://avatars3.githubusercontent.com/u/11831470?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erakli", "html_url": "https://github.com/erakli", "followers_url": "https://api.github.com/users/erakli/followers", "following_url": "https://api.github.com/users/erakli/following{/other_user}", "gists_url": "https://api.github.com/users/erakli/gists{/gist_id}", "starred_url": "https://api.github.com/users/erakli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erakli/subscriptions", "organizations_url": "https://api.github.com/users/erakli/orgs", "repos_url": "https://api.github.com/users/erakli/repos", "events_url": "https://api.github.com/users/erakli/events{/privacy}", "received_events_url": "https://api.github.com/users/erakli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-09T00:07:45Z", "updated_at": "2020-06-11T10:04:09Z", "closed_at": "2020-06-11T10:04:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature Request\r\n\r\nOutput of `import pydantic.utils; print(pydantic.utils.version_info())`:\r\n\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n               python version: 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]\r\n                     platform: Windows-7-6.1.7601-SP1\r\n     optional deps. installed: ['email-validator']\r\n```\r\n\r\n## Description\r\n\r\nHi, there's known problem on Windows with parsing dotenv files - https://github.com/pypa/pipenv/issues/1963. `python-dotenv` would parse files with default encoding (cp1251 for Cyrillic Windows). As a result we get `\u0420\u203a\u0420\u0451\u0421\u0403\u0421\u201a 1` instead of `\u041b\u0438\u0441\u0442 1`.\r\n\r\nIt looks like [this](https://github.com/samuelcolvin/pydantic/blob/960b24a5aab7ae0631bfbfbe0047b4d8600c6012/pydantic/env_settings.py#L111) function need to fetch encoding from `Config` class somehow.\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your feature request: -->\r\n\r\n## Example\r\n\r\n`.env` file (UTF-8):\r\n\r\n```\r\nfoo=\u041b\u0438\u0441\u0442 1\r\n```\r\n\r\nCode snippet:\r\n\r\n```py\r\nimport pydantic\r\n\r\nclass Settings(pydantic.BaseSettings):\r\n    foo: str\r\n\r\n    class Config:\r\n        env_file_encoding = 'utf-8'\r\n\r\nsettings = Settings(_env_file='.env')\r\nprint(settings)\r\n# foo='\u041b\u0438\u0441\u0442 1'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1614", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1614/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1614/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1614/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1614", "id": 634818144, "node_id": "MDU6SXNzdWU2MzQ4MTgxNDQ=", "number": 1614, "title": "NameError: name 'SchemaExtraCallable' is not defined", "user": {"login": "pawamoy", "id": 3999221, "node_id": "MDQ6VXNlcjM5OTkyMjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3999221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawamoy", "html_url": "https://github.com/pawamoy", "followers_url": "https://api.github.com/users/pawamoy/followers", "following_url": "https://api.github.com/users/pawamoy/following{/other_user}", "gists_url": "https://api.github.com/users/pawamoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawamoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawamoy/subscriptions", "organizations_url": "https://api.github.com/users/pawamoy/orgs", "repos_url": "https://api.github.com/users/pawamoy/repos", "events_url": "https://api.github.com/users/pawamoy/events{/privacy}", "received_events_url": "https://api.github.com/users/pawamoy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-08T17:55:51Z", "updated_at": "2020-06-09T09:32:52Z", "closed_at": "2020-06-09T09:32:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nhttps://github.com/pawamoy/pytkdocs/pull/41/checks?check_run_id=747827745\r\n\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: /home/pawamoy/.cache/pypoetry/virtualenvs/pytkdocs-LMVK1zAi-py3.7/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.5 (default, Apr 27 2020, 16:40:42)  [GCC 9.3.0]\r\n                     platform: Linux-5.6.15-arch1-1-x86_64-with-arch\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n\r\n```py\r\n>>> import typing\r\n>>> import pydantic\r\n>>> \r\n>>> class M(pydantic.BaseModel):\r\n...     a: int\r\n... \r\n>>> typing.get_type_hints(M.__config__)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/pawamoy/.basher-packages/pyenv/pyenv/versions/3.7.5/lib/python3.7/typing.py\", line 976, in get_type_hints\r\n    value = _eval_type(value, base_globals, localns)\r\n  File \"/home/pawamoy/.basher-packages/pyenv/pyenv/versions/3.7.5/lib/python3.7/typing.py\", line 265, in _eval_type\r\n    ev_args = tuple(_eval_type(a, globalns, localns) for a in t.__args__)\r\n  File \"/home/pawamoy/.basher-packages/pyenv/pyenv/versions/3.7.5/lib/python3.7/typing.py\", line 265, in <genexpr>\r\n    ev_args = tuple(_eval_type(a, globalns, localns) for a in t.__args__)\r\n  File \"/home/pawamoy/.basher-packages/pyenv/pyenv/versions/3.7.5/lib/python3.7/typing.py\", line 263, in _eval_type\r\n    return t._evaluate(globalns, localns)\r\n  File \"/home/pawamoy/.basher-packages/pyenv/pyenv/versions/3.7.5/lib/python3.7/typing.py\", line 467, in _evaluate\r\n    eval(self.__forward_code__, globalns, localns),\r\n  File \"<string>\", line 1, in <module>\r\nNameError: name 'SchemaExtraCallable' is not defined\r\n```\r\n\r\nNow you could wonder, *\"why are you doing this?\"*, and you would be right to do so. Well, I'm writing a package that automatically introspect classes and all their members to output structured data in JSON (it's `pytkdocs`, used by `mkdocstrings` to bring autodoc for MkDocs, and `pytkdocs` tries to support Pydantic models).\r\n\r\nI'm just reporting for the sake of it. Maybe there's an easy fix? Maybe it's a bug in Python's `typing`? Maybe it's expected because `SchemaExtraCallable` is a forward ref in this context?\r\n\r\nAnyway, I'm catching the error for now, so it's fine if you want to close the issue :slightly_smiling_face: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1613", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1613/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1613/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1613/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1613", "id": 634805441, "node_id": "MDU6SXNzdWU2MzQ4MDU0NDE=", "number": 1613, "title": "Validator is executed twice for same field", "user": {"login": "matias-eb", "id": 40609067, "node_id": "MDQ6VXNlcjQwNjA5MDY3", "avatar_url": "https://avatars2.githubusercontent.com/u/40609067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matias-eb", "html_url": "https://github.com/matias-eb", "followers_url": "https://api.github.com/users/matias-eb/followers", "following_url": "https://api.github.com/users/matias-eb/following{/other_user}", "gists_url": "https://api.github.com/users/matias-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/matias-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matias-eb/subscriptions", "organizations_url": "https://api.github.com/users/matias-eb/orgs", "repos_url": "https://api.github.com/users/matias-eb/repos", "events_url": "https://api.github.com/users/matias-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/matias-eb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-08T17:33:38Z", "updated_at": "2020-06-11T09:42:27Z", "closed_at": "2020-06-11T09:42:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I using validator to change the value type from date to a specific format string date with the following code:\r\n```\r\nclass ExampleSchema(BaseModel):\r\n    birth_date: str = None\r\n\r\n    @validator(\"birth_date\", pre=True)\r\n    def parse_birth_date_to_string(cls, value: date) -> str:\r\n        if value:\r\n            return value.strftime('%d/%m/%Y')\r\n```\r\nFirst this validator receives a date and returns the date in string format but after that the validator is executed again (I don't know why) but, this time, the `value` received is the date (in string format) returned by the first execution.\r\nI don't know if that behaviour is expected or no\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1612", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1612/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1612/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1612/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1612", "id": 634671699, "node_id": "MDU6SXNzdWU2MzQ2NzE2OTk=", "number": 1612, "title": "Dynamic model creation with dynamic field names", "user": {"login": "hhsecond", "id": 13761737, "node_id": "MDQ6VXNlcjEzNzYxNzM3", "avatar_url": "https://avatars3.githubusercontent.com/u/13761737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hhsecond", "html_url": "https://github.com/hhsecond", "followers_url": "https://api.github.com/users/hhsecond/followers", "following_url": "https://api.github.com/users/hhsecond/following{/other_user}", "gists_url": "https://api.github.com/users/hhsecond/gists{/gist_id}", "starred_url": "https://api.github.com/users/hhsecond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hhsecond/subscriptions", "organizations_url": "https://api.github.com/users/hhsecond/orgs", "repos_url": "https://api.github.com/users/hhsecond/repos", "events_url": "https://api.github.com/users/hhsecond/events{/privacy}", "received_events_url": "https://api.github.com/users/hhsecond/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-08T14:34:02Z", "updated_at": "2020-06-09T02:48:22Z", "closed_at": "2020-06-09T02:48:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\nHow can I create dynamic models with dynamic field names? The [existing mechanism](https://pydantic-docs.helpmanual.io/usage/models/#dynamic-model-creation) to create dynamic models requires the field names to be pre-known, AFIK. \r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /home/hhsecond/miniconda3/envs/userve/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.3 (default, May 19 2020, 18:47:26)  [GCC 7.3.0]\r\n                     platform: Linux-5.3.0-53-generic-x86_64-with-glibc2.10\r\n     optional deps. installed: []\r\n\r\n```\r\nI was thinking something like what namedtuples do when I found there is a mechanism to create models dynamically.\r\n```py\r\nfrom pydantic import create_model\r\nfoo, bar = get_dynamic_attrib_name()\r\ncreate_model('DynamicFoobarModel', fields={foo:(str, ...), bar:123})\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1609", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1609/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1609/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1609/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1609", "id": 633334368, "node_id": "MDU6SXNzdWU2MzMzMzQzNjg=", "number": 1609, "title": "Pydantic json value is empty on Custom Enum", "user": {"login": "Bezmehrabi", "id": 46019949, "node_id": "MDQ6VXNlcjQ2MDE5OTQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/46019949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bezmehrabi", "html_url": "https://github.com/Bezmehrabi", "followers_url": "https://api.github.com/users/Bezmehrabi/followers", "following_url": "https://api.github.com/users/Bezmehrabi/following{/other_user}", "gists_url": "https://api.github.com/users/Bezmehrabi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bezmehrabi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bezmehrabi/subscriptions", "organizations_url": "https://api.github.com/users/Bezmehrabi/orgs", "repos_url": "https://api.github.com/users/Bezmehrabi/repos", "events_url": "https://api.github.com/users/Bezmehrabi/events{/privacy}", "received_events_url": "https://api.github.com/users/Bezmehrabi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-07T11:41:08Z", "updated_at": "2020-06-08T09:44:54Z", "closed_at": "2020-06-08T09:44:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Pydantic json value is empty on Custom Enum\r\n\r\nI'm working with Pydantic And I want my Enums to also have docstring.\r\n\r\nwhen I use enum.Enum The CookingModel works fine.\r\n```\r\nimport enum\r\nfrom pydantic import BaseModel, ValidationError\r\n\r\nclass DocEnum(enum.Enum):\r\n    \"\"\"Enum with docstrings support\"\"\"\r\n\r\n    def __new__(cls, value, doc=None):\r\n        \"\"\"add docstring to the member of Enum if exists\r\n\r\n        Args:\r\n            value: Enum member value\r\n            doc: Enum member docstring, None if not exists\r\n        \"\"\"\r\n        obj = str.__new__(cls)\r\n        obj._value_ = value\r\n        if doc:\r\n            obj.__doc__ = doc\r\n        return obj\r\n\r\n\r\nclass FruitEnum(str, enum.Enum):\r\n    pear = 'pear'\r\n    banana = 'banana'\r\n\r\nclass CookingModel(BaseModel):\r\n    fruit: FruitEnum\r\n\r\na = CookingModel(fruit='banana')\r\n\r\na.json()\r\n\r\n```\r\nreturns: `{\"fruit\":  \"banana\"}`\r\n\r\nbut when I change `enum.Enum` to `DocEnum`(so I can have my docstrings)\r\n```\r\nclass FruitEnum(str, DocEnum):\r\n    pear = 'pear'\r\n    banana = 'banana'\r\n```\r\nreturns: `{\"fruit\": \"\"}`\r\n\r\nhow can I fix it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1608", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1608/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1608/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1608/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1608", "id": 632937093, "node_id": "MDU6SXNzdWU2MzI5MzcwOTM=", "number": 1608, "title": "How to validate json when it's class provided in one of the fields?", "user": {"login": "AntonOvsyannikov", "id": 31636386, "node_id": "MDQ6VXNlcjMxNjM2Mzg2", "avatar_url": "https://avatars1.githubusercontent.com/u/31636386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AntonOvsyannikov", "html_url": "https://github.com/AntonOvsyannikov", "followers_url": "https://api.github.com/users/AntonOvsyannikov/followers", "following_url": "https://api.github.com/users/AntonOvsyannikov/following{/other_user}", "gists_url": "https://api.github.com/users/AntonOvsyannikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/AntonOvsyannikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AntonOvsyannikov/subscriptions", "organizations_url": "https://api.github.com/users/AntonOvsyannikov/orgs", "repos_url": "https://api.github.com/users/AntonOvsyannikov/repos", "events_url": "https://api.github.com/users/AntonOvsyannikov/events{/privacy}", "received_events_url": "https://api.github.com/users/AntonOvsyannikov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-07T02:26:01Z", "updated_at": "2020-06-09T01:09:46Z", "closed_at": "2020-06-07T23:38:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI'd like to validate jsons (as well as provide schema for FastAPI), which type (or 'kind') is described by one of its fields. I.e. we have Product, which can be Book or Computer, Book can have number of pages, and Computer can have vendor name.\r\n```\r\njson1 = { \"kind\": \"book\", \"pages\": 42 }\r\njson2 = { \"kind\": \"computer\", \"vendor\": \"apple\" }\r\n```\r\n\r\nSo I wrote the following models hierarchy:\r\n\r\n```\r\nclass Product(BaseModel):\r\n    kind: str\r\n\r\n\r\nclass Book(Product):\r\n    kind = 'book'\r\n    pages: int\r\n\r\n    @validator('kind')\r\n    def check_kind(v):\r\n        if v != 'book': raise ValueError()\r\n        return v\r\n\r\n\r\nclass Computer(Product):\r\n    kind = 'computer'\r\n    vendor: str\r\n\r\n    @validator('kind')\r\n    def check_kind(v):\r\n        if v != 'computer': raise ValueError()\r\n        return v\r\n```\r\n\r\nSo what is correct way to validate jsons with those models and get correct model class with content? Means i'd like to have some magic like this:\r\n\r\n```\r\np1 = magic(**json1) # Book(...)\r\np2 = magic(**json2) # Computer(...)\r\n```\r\n\r\nFastAPI can do this magic:\r\n\r\n```\r\napp = FastAPI()\r\n@app.get('/')\r\nasync def index(product: Union[Book, Computer]):\r\n    return product\r\ncli = TestClient(app)\r\nprint(cli.get('/', json={'kind': 'computer', 'vendor': 'apple'}).json()) # {'kind': 'computer', 'vendor': 'apple'}\r\nprint(cli.get('/', json={'kind': 'book', 'pages': 42}).json()) # {'kind': 'book', 'pages': 42}\r\n```\r\nI'd like to understand what is under the hood? If I understand correctly, it iterates over types in Union until there is no ValidationError and provide correspondent class. Can pydantic do it by itself?\r\n\r\nAlso is there more elegant way to define such models? I.e. without validators?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1606", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1606/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1606/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1606/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1606", "id": 631821542, "node_id": "MDU6SXNzdWU2MzE4MjE1NDI=", "number": 1606, "title": "Add ability to redact specified fields in when serializing models", "user": {"login": "apost71", "id": 26016490, "node_id": "MDQ6VXNlcjI2MDE2NDkw", "avatar_url": "https://avatars3.githubusercontent.com/u/26016490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apost71", "html_url": "https://github.com/apost71", "followers_url": "https://api.github.com/users/apost71/followers", "following_url": "https://api.github.com/users/apost71/following{/other_user}", "gists_url": "https://api.github.com/users/apost71/gists{/gist_id}", "starred_url": "https://api.github.com/users/apost71/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apost71/subscriptions", "organizations_url": "https://api.github.com/users/apost71/orgs", "repos_url": "https://api.github.com/users/apost71/repos", "events_url": "https://api.github.com/users/apost71/events{/privacy}", "received_events_url": "https://api.github.com/users/apost71/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-05T18:16:30Z", "updated_at": "2020-06-05T18:23:33Z", "closed_at": "2020-06-05T18:23:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature Request\r\n\r\nIt would be extremely useful to be able to redact fields when serializing data models.  This is something that would typically be used for logging purposes when handling sensitive data and it does not appear that there is an easy way to handle this right now.  The mapping to determine excluded fields during model exporting seems like a good way to specify keys that need to be redacted, so that logic could be reused to overwrite values with redacted values.\r\n\r\n\r\nBelow is an example of how I might expect this to work\r\n\r\n```py\r\nimport pydantic\r\n\r\nclass Person(BaseModel):\r\n    title: str = None\r\n    prefix: str = None\r\n    firstName: str\r\n    middleName: str = None\r\n    lastName: str\r\n    suffix: str = None\r\n    dateOfBirth: datetime.date = None\r\n\r\nperson = Person(firstName='Johnny', lastName='Appleseed', dateOfBirth='2000-01-01')\r\nperson.json(redacted={'dateOfBirth'})\r\n```\r\nand the output would look something like this:\r\n\r\n```\r\n{\r\n  \"firstName\": \"Johnny\",\r\n  \"lastName\": \"Appleseed\",\r\n  \"dateOfBirth\": \"REDACTED-datetime.date\"\r\n}\r\n```\r\n\r\nI am happy to work on this PR as well.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1603", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1603/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1603/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1603/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1603", "id": 630917584, "node_id": "MDU6SXNzdWU2MzA5MTc1ODQ=", "number": 1603, "title": "Initialize Data Mapping to Fields", "user": {"login": "daniel-butler", "id": 22578954, "node_id": "MDQ6VXNlcjIyNTc4OTU0", "avatar_url": "https://avatars2.githubusercontent.com/u/22578954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-butler", "html_url": "https://github.com/daniel-butler", "followers_url": "https://api.github.com/users/daniel-butler/followers", "following_url": "https://api.github.com/users/daniel-butler/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-butler/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-butler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-butler/subscriptions", "organizations_url": "https://api.github.com/users/daniel-butler/orgs", "repos_url": "https://api.github.com/users/daniel-butler/repos", "events_url": "https://api.github.com/users/daniel-butler/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-butler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-04T15:16:52Z", "updated_at": "2020-06-04T15:21:53Z", "closed_at": "2020-06-04T15:21:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.5.1\r\npydantic compiled: True\r\n    install path: /usr/local/lib/python3.8/site-packages/pydantic\r\npython version: 3.8.0 (default, Oct 17 2019, 05:36:36)  [GCC 8.3.0]\r\n    platform: Linux-4.19.76-linuxkit-x86_64-with-glibc2.2.5\r\noptional deps. installed: []\r\n```\r\n\r\nKeeping this as simple as possible how would I take the `given_outside_data` and convert it into the `OutsideDataModel` below? What I would like to accomplish is for pydantic to handle validating/massaging the outside data for me when I define the schema. \r\n\r\n```py\r\nimport pydantic\r\n\r\ngiven_outside_data = {\r\n    '@CreateDate': '2020-05-28T13:43:00.9160714Z',\r\n    'BatchID': 'XXXX-xxxx-xxXX-xx',\r\n    'Items': [...]\r\n}\r\n\r\nclass OutsideDataModel(pydantic.BaseModel):\r\n    create_datetime: datetime\r\n    batch_id: str\r\n    items: list\r\n\r\nOutsideDataModel(**given_outside_data)\r\n```\r\n\r\nUsing `Config.fields` in the `BaseModel` \r\n\r\n```py\r\nclass OutsideDataModel(pydantic.BaseModel):\r\n    create_datetime: datetime\r\n    batch_id: str\r\n    items: list\r\n\r\n    class Config:\r\n        fields = {'create_date': '@CreateDate', 'batch_id': 'BatchID', 'items': 'Items'}\r\n\r\n```\r\n\r\n... or specifying an `alias` in the `Field` parameter.\r\n\r\n```py\r\nclass ReturnFileFormat(pydantic.BaseModel):\r\n     create_date: datetime = pydantic.Field(alias='@CreateDate')\r\n     batch_id: str = pydantic.Field(alias='BatchID')\r\n     payments: list = pydantic.Field(alias='Payments')\r\n\r\n```\r\n\r\n... even overwriting the `__init__` method produced the same error.\r\n\r\n```py\r\nclass ReturnFileFormat(pydantic.BaseModel):\r\n     def __init_(self, response: dict):\r\n         self.create_date = response['@CreateDate']\r\n         self.batch_id = response['BatchID']\r\n         self.payments = response['Payments']\r\n     \r\n     create_date: datetime\r\n     batch_id: str\r\n     payments: list\r\n```\r\n\r\nError Message\r\n```py\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"pydantic/main.py\", line 338, in pydantic.main.BaseModel.__init__\r\npydantic.error_wrappers.ValidationError: 3 validation errors for OutsideDataModel\r\ncreate_date\r\n  field required (type=value_error.missing)\r\nbatch_id\r\n  field required (type=value_error.missing)\r\nitems\r\n  field required (type=value_error.missing)\r\n```\r\n\r\nBecause pydantic is saying the field is missing `aliasing` doesn't seem to map in the direction I'm hoping for. The `given_outside_data` could be manipulate to match the pydantic model's fields but if there is a way to handle that within the pydandic model it would be preferred. The `Items` list contains other values that could be modeled with pydantic which is why the self contained option is preferred.\r\n\r\nThank you for all of your work on the library!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1602", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1602/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1602/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1602/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1602", "id": 630902720, "node_id": "MDU6SXNzdWU2MzA5MDI3MjA=", "number": 1602, "title": "Is it possible to implement fields autogenerated?", "user": {"login": "vgonisanz", "id": 1701387, "node_id": "MDQ6VXNlcjE3MDEzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1701387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vgonisanz", "html_url": "https://github.com/vgonisanz", "followers_url": "https://api.github.com/users/vgonisanz/followers", "following_url": "https://api.github.com/users/vgonisanz/following{/other_user}", "gists_url": "https://api.github.com/users/vgonisanz/gists{/gist_id}", "starred_url": "https://api.github.com/users/vgonisanz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vgonisanz/subscriptions", "organizations_url": "https://api.github.com/users/vgonisanz/orgs", "repos_url": "https://api.github.com/users/vgonisanz/repos", "events_url": "https://api.github.com/users/vgonisanz/events{/privacy}", "received_events_url": "https://api.github.com/users/vgonisanz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-04T15:00:30Z", "updated_at": "2020-06-04T19:25:31Z", "closed_at": "2020-06-04T19:25:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /home/vgonisanz/miniconda3/envs/foo3.7/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.6 (default, Jan  8 2020, 19:59:22)  [GCC 7.3.0]\r\n                     platform: Linux-5.3.0-53-generic-x86_64-with-debian-buster-sid\r\n     optional deps. installed: []\r\n\r\n```\r\nI have a use case there I use pydantic with some fields, and also I want create a private field using another one. This is interesing, for example, to have some data and the hash of the data (autogenerated without call a funcion of the class)\r\n\r\nI didn't found a way to do this, this is a simplified example that fail:\r\n\r\n```py\r\nimport pydantic \r\nimport base64 \r\n\r\nclass Foo(pydantic.BaseModel):  \r\n    value: str  \r\n    _b64value: str = None  \r\n\r\n    @property  \r\n    def b64value(self): \r\n        if not self._b64value: \r\n            self._b64value = base64.b64encode(self.value.encode(\"utf-8\"))  \r\n        return self._b64value \r\n\r\ntest = Foo(value=\"foo\") \r\ntest.b64value # ValueError: \"Foo\" object has no field \"_b64value\"\r\n```\r\n\r\nThis approach works, but it is not optimal because it call the value each time you get it:\r\n\r\n```\r\nimport pydantic\r\nimport base64\r\n\r\nclass Foo(pydantic.BaseModel): \r\n    value: str\r\n\r\n    @property \r\n    def b64value(self): \r\n        return base64.b64encode(self.value.encode(\"utf-8\"))\r\n\r\ntest = Foo(value=\"foo\")\r\ntest.b64value # b'Zm9v'\r\n```\r\n\r\nAny tips of how do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1601", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1601/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1601/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1601/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1601", "id": 630758376, "node_id": "MDU6SXNzdWU2MzA3NTgzNzY=", "number": 1601, "title": "Updated enum errors().ctx to include value", "user": {"login": "BCarley", "id": 11425383, "node_id": "MDQ6VXNlcjExNDI1Mzgz", "avatar_url": "https://avatars3.githubusercontent.com/u/11425383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BCarley", "html_url": "https://github.com/BCarley", "followers_url": "https://api.github.com/users/BCarley/followers", "following_url": "https://api.github.com/users/BCarley/following{/other_user}", "gists_url": "https://api.github.com/users/BCarley/gists{/gist_id}", "starred_url": "https://api.github.com/users/BCarley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BCarley/subscriptions", "organizations_url": "https://api.github.com/users/BCarley/orgs", "repos_url": "https://api.github.com/users/BCarley/repos", "events_url": "https://api.github.com/users/BCarley/events{/privacy}", "received_events_url": "https://api.github.com/users/BCarley/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426504, "node_id": "MDU6TGFiZWw1OTc0MjY1MDQ=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/feature%20request", "name": "feature request", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-04T11:55:42Z", "updated_at": "2020-06-04T14:23:57Z", "closed_at": "2020-06-04T14:23:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature Request\r\n\r\nCurrently the field `enum_values` is being included with a `type_error.enum` in  `ctx`. Are there any objections to also including the value as `value` in `ctx`?\r\n\r\nThis will make it easier to display what has tripped up the parser. If you are happy with this I'll submit a pull request.\r\n\r\n```py\r\ndef test_enum_fails():\r\n    with pytest.raises(ValueError) as exc_info:\r\n        CookingModel(tool=3)\r\n    assert exc_info.value.errors() == [\r\n        {\r\n            'loc': ('tool',),\r\n            'msg': 'value is not a valid enumeration member; permitted: 1, 2',\r\n            'type': 'type_error.enum',\r\n            'ctx': {'value':3, 'enum_values': [ToolEnum.spanner, ToolEnum.wrench]},\r\n        }\r\n    ]\r\n    assert len(exc_info.value.json()) == 235\r\n```\r\n\r\nThis is an extension of #671", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1600", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1600/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1600/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1600/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1600", "id": 630616806, "node_id": "MDU6SXNzdWU2MzA2MTY4MDY=", "number": 1600, "title": "JavaScript negative timestamp are not supported", "user": {"login": "mlbiche", "id": 33522659, "node_id": "MDQ6VXNlcjMzNTIyNjU5", "avatar_url": "https://avatars2.githubusercontent.com/u/33522659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlbiche", "html_url": "https://github.com/mlbiche", "followers_url": "https://api.github.com/users/mlbiche/followers", "following_url": "https://api.github.com/users/mlbiche/following{/other_user}", "gists_url": "https://api.github.com/users/mlbiche/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlbiche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlbiche/subscriptions", "organizations_url": "https://api.github.com/users/mlbiche/orgs", "repos_url": "https://api.github.com/users/mlbiche/repos", "events_url": "https://api.github.com/users/mlbiche/events{/privacy}", "received_events_url": "https://api.github.com/users/mlbiche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-04T08:25:43Z", "updated_at": "2020-06-27T13:52:21Z", "closed_at": "2020-06-27T13:52:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Bug\r\n\r\nWhen parsing a JavaScript positive timestamp (number of milliseconds since EPOCH), pydantic parses it properly. However, for a negative JavaScript timestamp (before 1st January 1970), a `date value out of range` error is thrown.\r\n\r\n```\r\n  File \"pydantic/main.py\", line 447, in pydantic.main.BaseModel.parse_obj\r\n  File \"pydantic/main.py\", line 336, in pydantic.main.BaseModel.__init__\r\n  File \"pydantic/main.py\", line 887, in pydantic.main.validate_model\r\n  File \"pydantic/fields.py\", line 549, in pydantic.fields.ModelField.validate\r\n  File \"pydantic/fields.py\", line 704, in pydantic.fields.ModelField._validate_singleton\r\n  File \"pydantic/fields.py\", line 711, in pydantic.fields.ModelField._apply_validators\r\n  File \"pydantic/class_validators.py\", line 313, in pydantic.class_validators._generic_validator_basic.lambda11\r\n  File \"pydantic/datetime_parse.py\", line 169, in pydantic.datetime_parse.parse_datetime\r\n  File \"pydantic/datetime_parse.py\", line 80, in pydantic.datetime_parse.from_unix_seconds\r\nOverflowError: date value out of range\r\n```\r\n\r\n## Version\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /Users/thibaud/Documents/Programmation/Scopyleft/Terrapeutes/aposto-server/venv/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.3 (default, Mar  6 2020, 22:34:30)  [Clang 11.0.3 (clang-1103.0.32.29)]\r\n                     platform: Darwin-19.5.0-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions', 'email-validator']\r\n```\r\n\r\n## Code example\r\n\r\nThe following code raises the describe error (while it would correctly work with `{ \"jsTimestamp\": 1118102400000 }`).\r\n\r\n```py\r\nfrom datetime import datetime\r\n\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass MyModel(BaseModel):\r\n    jsTimestamp: datetime\r\n\r\nMyModel.parse_obj({ \"jsTimestamp\": -1118102400000 })\r\n```\r\n\r\n## Possible solution\r\n\r\nA solution would be to update the `from_unix_seconds` function in _datetime_parse.py_ to compare `seconds` with `MS_WATERSHED` as absolute value.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1599", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1599/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1599/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1599/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1599", "id": 630562370, "node_id": "MDU6SXNzdWU2MzA1NjIzNzA=", "number": 1599, "title": "How do I use Union[float, int, str] without typecasting", "user": {"login": "tanyaofei", "id": 46375450, "node_id": "MDQ6VXNlcjQ2Mzc1NDUw", "avatar_url": "https://avatars2.githubusercontent.com/u/46375450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanyaofei", "html_url": "https://github.com/tanyaofei", "followers_url": "https://api.github.com/users/tanyaofei/followers", "following_url": "https://api.github.com/users/tanyaofei/following{/other_user}", "gists_url": "https://api.github.com/users/tanyaofei/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanyaofei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanyaofei/subscriptions", "organizations_url": "https://api.github.com/users/tanyaofei/orgs", "repos_url": "https://api.github.com/users/tanyaofei/repos", "events_url": "https://api.github.com/users/tanyaofei/events{/privacy}", "received_events_url": "https://api.github.com/users/tanyaofei/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-04T06:58:25Z", "updated_at": "2020-06-04T07:28:18Z", "closed_at": "2020-06-04T07:28:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to create a field support float, int and str, but this filed will typecasting which i don't need.\r\n```Python\r\nfrom typing import Union\r\n\r\nfrom pydantic import BaseModel\r\n\r\nMyType = Union[float, int, str]\r\n\r\n\r\nclass T(BaseModel):\r\n    value: MyType\r\n\r\n\r\nt = T(value=1)\r\n\r\nprint(t.value)\r\n```\r\nI want it to be 1 instead of 1.0, how do i do that?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1594", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1594/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1594/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1594/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1594", "id": 629922234, "node_id": "MDU6SXNzdWU2Mjk5MjIyMzQ=", "number": 1594, "title": "typing.Tuple is converted to schema non-confirming to OpenAPI", "user": {"login": "MikailBag", "id": 11889433, "node_id": "MDQ6VXNlcjExODg5NDMz", "avatar_url": "https://avatars1.githubusercontent.com/u/11889433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MikailBag", "html_url": "https://github.com/MikailBag", "followers_url": "https://api.github.com/users/MikailBag/followers", "following_url": "https://api.github.com/users/MikailBag/following{/other_user}", "gists_url": "https://api.github.com/users/MikailBag/gists{/gist_id}", "starred_url": "https://api.github.com/users/MikailBag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MikailBag/subscriptions", "organizations_url": "https://api.github.com/users/MikailBag/orgs", "repos_url": "https://api.github.com/users/MikailBag/repos", "events_url": "https://api.github.com/users/MikailBag/events{/privacy}", "received_events_url": "https://api.github.com/users/MikailBag/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-03T11:35:17Z", "updated_at": "2020-06-03T13:32:42Z", "closed_at": "2020-06-03T13:32:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /home/mb/projects/jjs/venv/lib/python3.8/site-packages/pydantic\r\n               python version: 3.8.2 (default, Apr 27 2020, 15:53:34)  [GCC 9.3.0]\r\n                     platform: Linux-5.4.0-33-generic-x86_64-with-glibc2.29\r\n     optional deps. installed: []\r\n\r\n...\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your bug hasn't already been reported. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\nGiven this model\r\n```py\r\nimport typing\r\nimport pydantic\r\nimport json\r\n\r\nclass Foo(pydantic.BaseModel):\r\n    field: typing.Tuple[str, str]\r\n\r\nprint(json.dumps(Foo.schema()))\r\n```\r\nPydantic emits schema\r\n```json\r\n{\r\n    \"title\": \"Foo\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"field\": {\r\n            \"title\": \"Field\",\r\n            \"type\": \"array\",\r\n            \"items\": [\r\n                {\r\n                    \"type\": \"string\"\r\n                },\r\n                {\r\n                    \"type\": \"string\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"required\": [\r\n        \"field\"\r\n    ]\r\n}\r\n```\r\nHowever, OpenAPI specification [requires](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schemaObject) following:\r\n```\r\nitems - Value MUST be an object and not an array. Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema. items MUST be present if the type is array.\r\n```\r\nSo, spec seems to be violated.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1593", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1593/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1593/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1593/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1593", "id": 629832793, "node_id": "MDU6SXNzdWU2Mjk4MzI3OTM=", "number": 1593, "title": "When to use validator, when to use custom type?", "user": {"login": "tuukkamustonen", "id": 94327, "node_id": "MDQ6VXNlcjk0MzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/94327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuukkamustonen", "html_url": "https://github.com/tuukkamustonen", "followers_url": "https://api.github.com/users/tuukkamustonen/followers", "following_url": "https://api.github.com/users/tuukkamustonen/following{/other_user}", "gists_url": "https://api.github.com/users/tuukkamustonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuukkamustonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuukkamustonen/subscriptions", "organizations_url": "https://api.github.com/users/tuukkamustonen/orgs", "repos_url": "https://api.github.com/users/tuukkamustonen/repos", "events_url": "https://api.github.com/users/tuukkamustonen/events{/privacy}", "received_events_url": "https://api.github.com/users/tuukkamustonen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-03T09:14:16Z", "updated_at": "2020-06-03T14:02:57Z", "closed_at": "2020-06-03T14:02:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nI'm a bit confused when I should use [validator](https://pydantic-docs.helpmanual.io/usage/validators/) and when I should use [Custom Data Type](https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types), when I want to validate values _in a re-usable way_.\r\n\r\nI am new to Pydantic, sorry if this has been already documented and I missed it.\r\n\r\nValidator functions:\r\n\r\n```py\r\ndef validate_field(value):\r\n    ...\r\n    return value\r\n\r\nclass Data(BaseModel):\r\n    field: str\r\n    _validate_field: classmethod = validator('field', allow_reuse=True)(validate_field)\r\n```\r\n\r\nHere in specific, why does validator need to return value? If it's a _validator_ and not \"mutator\"?\r\n\r\nData Types:\r\n\r\n```py\r\nclass MyField(str):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v):\r\n        ...\r\n        return cls(v)\r\n\r\nclass Data(BaseModel):\r\n    field: MyField\r\n```\r\n\r\nWhich one is recommended and in which case? A validator, when you want to mix it up with several different types, and type, if it's ok to always bind it with certain type? Is that it?\r\n\r\nAlso, how do you pass in parameters for the data type? Like `field: MyField(some_param=2)`? Should you just:\r\n\r\n```py\r\ndef MyField(some_param: int = 0):\r\n    def _class(str):\r\n        @classmethod\r\n        def __get_validators__(cls):\r\n            yield cls.validate\r\n\r\n        @classmethod\r\n        def validate(cls, v):\r\n            # do something with some_param...\r\n            return cls(v)\r\n\r\n    return _class\r\n```\r\n\r\nLike this?\r\n\r\nNote: I am aware of the [constrained types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types), but in this case I need validation that is not supported out of the box.\r\n\r\n---\r\n\r\nAlso, I find both somewhat ugly. For validators, I don't like having to explicitly declare classmethods, re-typing `allow_reuse=True` and re-typing the field name (and even [this shortcut](https://github.com/samuelcolvin/pydantic/issues/940#issuecomment-569765091) feels clumsy). For custom data types, declaring `__get_validators__` seems annoying.\r\n\r\nAre there maybe improvements coming in this topic? In `marshmallow` and similar, this is how you do it:\r\n\r\n```py\r\nclass Data(Schema):\r\n    field: str = fields.Str(validate=[MyValidator()])\r\n\r\nclass MyValidator(Validator):\r\n    def __call__(self, value):\r\n        ...\r\n        return value\r\n```\r\n\r\nImo, this is less verbose?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1590", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1590/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1590/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1590/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1590", "id": 629719573, "node_id": "MDU6SXNzdWU2Mjk3MTk1NzM=", "number": 1590, "title": "Mixing pydantic model with existing classes", "user": {"login": "sadrok", "id": 12351298, "node_id": "MDQ6VXNlcjEyMzUxMjk4", "avatar_url": "https://avatars0.githubusercontent.com/u/12351298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sadrok", "html_url": "https://github.com/sadrok", "followers_url": "https://api.github.com/users/sadrok/followers", "following_url": "https://api.github.com/users/sadrok/following{/other_user}", "gists_url": "https://api.github.com/users/sadrok/gists{/gist_id}", "starred_url": "https://api.github.com/users/sadrok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sadrok/subscriptions", "organizations_url": "https://api.github.com/users/sadrok/orgs", "repos_url": "https://api.github.com/users/sadrok/repos", "events_url": "https://api.github.com/users/sadrok/events{/privacy}", "received_events_url": "https://api.github.com/users/sadrok/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-03T06:08:15Z", "updated_at": "2020-06-05T18:28:36Z", "closed_at": "2020-06-05T18:28:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /Users/francois.basson/.virtualenvs/stock-cart-service/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 23:26:24)  [Clang 6.0 (clang-600.0.57)]\r\n                     platform: Darwin-19.4.0-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\nIs there a way to load, through Pydantic schema, data into non-Pydantic objects complete with recursive loading? I wish to use Pydantic in my unit tests in setting up alarge amount of test objects from JSON but those test objects are not Pydantic models and it's too much \"effort\" right now to make them Pydantic compatible.\r\n Those objects also generally have more fields than the Pydantic version which either gets setup in the __init__ or through later means. Things that Pydantic shouldn't worry about. I only need the defined schema's values to be populated.\r\n\r\nI think essentially I want to do what ORM mode does for vanilla classes, only in reverse.\r\n\r\nAwesome and useful library though!\r\n\r\n```py\r\nfrom pydantic import typing\r\nimport pydantic\r\n\r\n\r\nclass MyOwnClassA:\r\n    _class_a_private = None\r\n    class_b_public = None\r\n\r\n    def __init__(self):\r\n        self._class_a_private = 123\r\n        self.class_b_public = 456\r\n\r\n    def my_method(self):\r\n        print(\r\n            f\"Class A private value: {self._class_a_private} and public value: {self.class_a_public}\"\r\n        )\r\n\r\n\r\nclass MyOwnClassB:\r\n    _class_b_private = None\r\n    class_b_public = None\r\n\r\n    class_a_list = None\r\n\r\n    def __init__(self):\r\n        self._class_b_private = \"abc\"\r\n        self.class_b_public = \"def\"\r\n        self.class_a_list = [MyOwnClassA()]\r\n\r\n    def my_method(self):\r\n        print(\r\n            f\"Class B private value: {self._class_b_private} and public value: {self.class_b_public}\"\r\n        )\r\n        for a in self.class_a_list:\r\n            a.my_method()\r\n\r\n\r\nclass ModelA(pydantic.BaseModel, MyOwnClassA):\r\n    class_a_public: int = None\r\n\r\n\r\nclass ModelB(pydantic.BaseModel, MyOwnClassB):\r\n    class_b_public: str = None\r\n    class_a_list: typing.List[ModelA] = None\r\n\r\ndata = {\r\n    \"class_b_public\": \"hello world\",\r\n    \"class_a_list\": [{\"class_a_public\": 555}, {\"class_a_public\": 777}],\r\n}\r\n\r\nobj = pydantic.parse_obj_as(ModelB, data)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1589", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1589/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1589/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1589/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1589", "id": 629249387, "node_id": "MDU6SXNzdWU2MjkyNDkzODc=", "number": 1589, "title": "mypy says \"Too many arguments\" when using TypeVar bounded to BaseModel", "user": {"login": "nikolaypavlov", "id": 2743635, "node_id": "MDQ6VXNlcjI3NDM2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2743635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikolaypavlov", "html_url": "https://github.com/nikolaypavlov", "followers_url": "https://api.github.com/users/nikolaypavlov/followers", "following_url": "https://api.github.com/users/nikolaypavlov/following{/other_user}", "gists_url": "https://api.github.com/users/nikolaypavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikolaypavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikolaypavlov/subscriptions", "organizations_url": "https://api.github.com/users/nikolaypavlov/orgs", "repos_url": "https://api.github.com/users/nikolaypavlov/repos", "events_url": "https://api.github.com/users/nikolaypavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/nikolaypavlov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T14:27:23Z", "updated_at": "2020-06-02T14:52:30Z", "closed_at": "2020-06-02T14:52:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n            pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /Users/quetzal/.pyenv/versions/3.7.6/envs/ml-models/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.6 (default, Mar  2 2020, 16:15:11)  [Clang 11.0.0 (clang-1100.0.33.17)]\r\n                     platform: Darwin-19.4.0-x86_64-i386-64bit\r\n     optional deps. installed: ['typing-extensions']\r\n```\r\n\r\nI'm trying to create a common config for the base model. While code works as expected `mypy` fails with `Too many arguments for \"BaseStructuredFeature\"` at `return feature_cls(**self.vector)` in the `to_structured_feature` method. Though, I'm not sure if it's `mypy` issue or `pydantic`.\r\n\r\n```py\r\nfrom abc import ABC\r\nfrom dataclasses import dataclass\r\nfrom typing import Any, Mapping, Type, TypeVar\r\n\r\nfrom pydantic import BaseModel, Extra\r\n\r\nclass BaseStructuredFeature(BaseModel, ABC):\r\n    \"\"\"Base class for all structured features\"\"\"\r\n\r\n    class Config:\r\n        allow_mutation = False      # Immutable data structures only\r\n        extra = Extra.ignore        # ignore extra attributes during initialization\r\n\r\n# Some BaseStructuredFeature implementation\r\nStructuredFeature = TypeVar('StructuredFeature', bound=BaseStructuredFeature)\r\n\r\n\r\n@dataclass\r\nclass FeatureMap:\r\n    vector: Mapping[str, Any]\r\n\r\n    def to_structured_feature(self, feature_cls: Type[StructuredFeature]) -> StructuredFeature:\r\n        \"\"\"Create a StructuredFeature from the FeatureMap given a StructuredFeature class\"\"\"\r\n        return feature_cls(**self.vector)\r\n\r\n```\r\n\r\n## Usage example\r\n\r\nThe code works as expected.\r\n\r\n```\r\nIn [2]: class SomeFeature(BaseStructuredFeature): \r\n   ...:     id: int \r\n   ...:  \r\n   ...:  \r\n   ...: FeatureMap({'id': 1}).to_structured_feature(SomeFeature)                                                                                                                                            \r\nOut[2]: SomeFeature(id=1)\r\n```\r\n\r\n## mypy config\r\n\r\n```ini\r\n[mypy]\r\nshow_column_numbers = True\r\nshow_error_context = False\r\nscripts_are_modules = True\r\nstrict_optional = True\r\nfollow_imports = silent\r\nignore_missing_imports = True\r\nwarn_unused_ignores = True\r\nwarn_redundant_casts = True\r\nplugins = pydantic.mypy\r\n\r\n[pydantic-mypy]\r\ninit_forbid_extra = True\r\ninit_typed = True\r\nwarn_required_dynamic_aliases = True\r\nwarn_untyped_fields = True\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1587", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1587/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1587/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1587/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1587", "id": 628137704, "node_id": "MDU6SXNzdWU2MjgxMzc3MDQ=", "number": 1587, "title": "How to: Customize model structure", "user": {"login": "will-e-yams", "id": 5280307, "node_id": "MDQ6VXNlcjUyODAzMDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5280307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/will-e-yams", "html_url": "https://github.com/will-e-yams", "followers_url": "https://api.github.com/users/will-e-yams/followers", "following_url": "https://api.github.com/users/will-e-yams/following{/other_user}", "gists_url": "https://api.github.com/users/will-e-yams/gists{/gist_id}", "starred_url": "https://api.github.com/users/will-e-yams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/will-e-yams/subscriptions", "organizations_url": "https://api.github.com/users/will-e-yams/orgs", "repos_url": "https://api.github.com/users/will-e-yams/repos", "events_url": "https://api.github.com/users/will-e-yams/events{/privacy}", "received_events_url": "https://api.github.com/users/will-e-yams/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-01T04:11:22Z", "updated_at": "2020-06-01T09:38:02Z", "closed_at": "2020-06-01T09:38:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\nI'm querying from a Postgres database with jsonb fields. I'd like to extract _some_ of the values from the json not keeping the bloated, nested structures. Is this possible?\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: True\r\n                 install path: /.../app/.env/lib/python3.7/site-packages/pydantic\r\n               python version: 3.7.3 (default, Mar  6 2020, 22:34:30)  [Clang 11.0.3 (clang-1103.0.32.29)]\r\n                     platform: Darwin-19.4.0-x86_64-i386-64bit\r\n     optional deps. installed: ['email-validator']\r\n```\r\n\r\n```py\r\nimport pydantic\r\n\r\nclass EntityBlob(BaseModel):\r\n    top_level_prop: str\r\n    nested_prop: ???????\r\n\r\nclass Entity(BaseModel):\r\n    title: str\r\n    created_at: datetime\r\n    updated_at: datetime\r\n    blob: EntityBlob\r\n\r\n    class Config:\r\n        orm_mode = True\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1582", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1582/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1582/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1582/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1582", "id": 627909264, "node_id": "MDU6SXNzdWU2Mjc5MDkyNjQ=", "number": 1582, "title": "Attrs benchmarks", "user": {"login": "cyberbudy", "id": 10235359, "node_id": "MDQ6VXNlcjEwMjM1MzU5", "avatar_url": "https://avatars0.githubusercontent.com/u/10235359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cyberbudy", "html_url": "https://github.com/cyberbudy", "followers_url": "https://api.github.com/users/cyberbudy/followers", "following_url": "https://api.github.com/users/cyberbudy/following{/other_user}", "gists_url": "https://api.github.com/users/cyberbudy/gists{/gist_id}", "starred_url": "https://api.github.com/users/cyberbudy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cyberbudy/subscriptions", "organizations_url": "https://api.github.com/users/cyberbudy/orgs", "repos_url": "https://api.github.com/users/cyberbudy/repos", "events_url": "https://api.github.com/users/cyberbudy/events{/privacy}", "received_events_url": "https://api.github.com/users/cyberbudy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-31T07:18:11Z", "updated_at": "2020-05-31T08:36:40Z", "closed_at": "2020-05-31T08:30:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\n\r\nI have a question about attrs-cattrs benchmark code. \r\nThe author of this article (https://stefan.sofa-rockers.org/2020/05/29/attrs-dataclasses-pydantic/) poits out that replacing `dateutil.parser.parse` function with `datetime.isoformat` increases performance of attrs in 7 times.\r\nIt may confuse people, that there code with attrs will be noticeably faster then pydantic claims to be.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1580", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1580/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1580/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1580/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1580", "id": 627530328, "node_id": "MDU6SXNzdWU2Mjc1MzAzMjg=", "number": 1580, "title": "Tests failing (1.5.1)", "user": {"login": "FFY00", "id": 11718923, "node_id": "MDQ6VXNlcjExNzE4OTIz", "avatar_url": "https://avatars0.githubusercontent.com/u/11718923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FFY00", "html_url": "https://github.com/FFY00", "followers_url": "https://api.github.com/users/FFY00/followers", "following_url": "https://api.github.com/users/FFY00/following{/other_user}", "gists_url": "https://api.github.com/users/FFY00/gists{/gist_id}", "starred_url": "https://api.github.com/users/FFY00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FFY00/subscriptions", "organizations_url": "https://api.github.com/users/FFY00/orgs", "repos_url": "https://api.github.com/users/FFY00/repos", "events_url": "https://api.github.com/users/FFY00/events{/privacy}", "received_events_url": "https://api.github.com/users/FFY00/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-29T20:49:04Z", "updated_at": "2020-05-31T13:37:32Z", "closed_at": "2020-05-31T13:37:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Building on archlinux.\r\n\r\n```\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1\r\nrootdir: /build/python-pydantic/src/pydantic-1.5.1, inifile: setup.cfg, testpaths: tests\r\ncollected 1680 items\r\n\r\ntests/test_abc.py ..                                                     [  0%]\r\ntests/test_aliases.py ..................                                 [  1%]\r\ntests/test_callable.py ....                                              [  1%]\r\ntests/test_color.py .................................................... [  4%]\r\n..................                                                       [  5%]\r\ntests/test_construction.py ....................                          [  6%]\r\ntests/test_create_model.py ..............                                [  7%]\r\ntests/test_dataclasses.py ....................................           [  9%]\r\ntests/test_datetime_parse.py ........................................... [ 12%]\r\n.......................................................................  [ 16%]\r\ntests/test_decorator.py ............                                     [ 17%]\r\ntests/test_edge_cases.py ............................................... [ 20%]\r\n.......................................................................  [ 24%]\r\ntests/test_errors.py ................                                    [ 25%]\r\ntests/test_forward_ref.py ................                               [ 26%]\r\ntests/test_generics.py ................................                  [ 28%]\r\ntests/test_json.py .......................................               [ 30%]\r\ntests/test_main.py ..................................................... [ 33%]\r\n......................                                                   [ 34%]\r\ntests/test_model_signature.py .........                                  [ 35%]\r\ntests/test_networks.py ................................................. [ 38%]\r\n..............................................................ssssssssss [ 42%]\r\nssssssssssssssssssssssssss.ss                                            [ 44%]\r\ntests/test_networks_ipaddress.py ....................................... [ 46%]\r\n........................................................................ [ 50%]\r\n.............................................                            [ 53%]\r\ntests/test_orm_mode.py ..........                                        [ 54%]\r\ntests/test_parse.py ......................                               [ 55%]\r\ntests/test_schema.py ........................................ss......... [ 58%]\r\n........................................................................ [ 62%]\r\n........................................................................ [ 67%]\r\n.......                                                                  [ 67%]\r\ntests/test_settings.py ...........................ssssssssss....         [ 70%]\r\ntests/test_tools.py ..........                                           [ 70%]\r\ntests/test_types.py .................................................... [ 73%]\r\n...........................................................ss........... [ 77%]\r\n........................................................................ [ 82%]\r\n........................................................................ [ 86%]\r\n....................ss...............                                    [ 88%]\r\ntests/test_types_payment_card_number.py ................................ [ 90%]\r\n.............                                                            [ 91%]\r\ntests/test_utils.py ....................ss.........                      [ 93%]\r\ntests/test_validators.py ............................................... [ 96%]\r\n.............F................................                           [ 98%]\r\ntests/test_validators_dataclass.py .......                               [ 99%]\r\ntests/mypy/test_mypy.py ssssssssss...                                    [100%]\r\n\r\n=================================== FAILURES ===================================\r\n_____________________ test_assert_raises_validation_error ______________________\r\n\r\n    def test_assert_raises_validation_error():\r\n        class Model(BaseModel):\r\n            a: str\r\n\r\n            @validator('a')\r\n            def check_a(cls, v):\r\n                assert v == 'a', 'invalid a'\r\n                return v\r\n\r\n        Model(a='a')\r\n\r\n        with pytest.raises(ValidationError) as exc_info:\r\n            Model(a='snap')\r\n        injected_by_pytest = \"\\nassert 'snap' == 'a'\\n  - snap\\n  + a\"\r\n>       assert exc_info.value.errors() == [\r\n            {'loc': ('a',), 'msg': f'invalid a{injected_by_pytest}', 'type': 'assertion_error'}\r\n        ]\r\nE       assert [{'loc': ('a'...rtion_error'}] == [{'loc': ('a'...rtion_error'}]\r\nE         At index 0 diff: {'loc': ('a',), 'msg': \"invalid a\\nassert 'snap' == 'a'\\n  - a\\n  + snap\", 'type': 'assertion_error'} != {'loc': ('a',), 'msg': \"invalid a\\nassert 'snap' == 'a'\\n  - snap\\n  + a\", 'type': 'assertion_error'}\r\nE         Use -v to get the full diff\r\n\r\ntests/test_validators.py:717: AssertionError\r\n=========================== short test summary info ============================\r\nFAILED tests/test_validators.py::test_assert_raises_validation_error - assert...\r\n================== 1 failed, 1613 passed, 66 skipped in 7.25s ==================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1579", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1579/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1579/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1579/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1579", "id": 627431287, "node_id": "MDU6SXNzdWU2Mjc0MzEyODc=", "number": 1579, "title": "Exclude with nested \"__all__\" does not work as expected", "user": {"login": "xspirus", "id": 34399797, "node_id": "MDQ6VXNlcjM0Mzk5Nzk3", "avatar_url": "https://avatars3.githubusercontent.com/u/34399797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xspirus", "html_url": "https://github.com/xspirus", "followers_url": "https://api.github.com/users/xspirus/followers", "following_url": "https://api.github.com/users/xspirus/following{/other_user}", "gists_url": "https://api.github.com/users/xspirus/gists{/gist_id}", "starred_url": "https://api.github.com/users/xspirus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xspirus/subscriptions", "organizations_url": "https://api.github.com/users/xspirus/orgs", "repos_url": "https://api.github.com/users/xspirus/repos", "events_url": "https://api.github.com/users/xspirus/events{/privacy}", "received_events_url": "https://api.github.com/users/xspirus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-29T17:43:10Z", "updated_at": "2020-07-11T10:28:54Z", "closed_at": "2020-07-11T10:28:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Bug\r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\n             pydantic version: 1.5.1\r\n            pydantic compiled: False\r\n                 install path: /home/spirus/projects/pydantic/pydantic\r\n               python version: 3.8.3 (default, May 17 2020, 18:15:42)  [GCC 10.1.0]\r\n                     platform: Linux-5.6.14-arch1-1-x86_64-with-glibc2.2.5\r\n     optional deps. installed: ['typing-extensions', 'email-validator', 'devtools']\r\n```\r\n<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->\r\n\r\n<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to\r\nconfirm your bug hasn't already been reported. -->\r\n\r\n<!-- Where possible please include a self-contained code snippet describing your bug: -->\r\n\r\nAs I was experimenting with `FastAPI` and `pydantic`, I thought that it would be nice to use `exclude` in order to avoid some Schema duplication (or complex inheritances). Ultimately, I came across a weird bug when trying to use exclude on nested sequences. Below is a minimal example for reproducing the bug.\r\n\r\n```py\r\nfrom typing import List\r\n\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass A(BaseModel):\r\n    a: int = 1\r\n    b: int = 2\r\n    c: int = 3\r\n\r\n\r\nclass B(BaseModel):\r\n    a: List[A]\r\n\r\n\r\nclass C(BaseModel):\r\n    b: List[B]\r\n\r\n\r\ndef test():\r\n    c = C(b=[B(a=[A()])])\r\n    print(c.dict(exclude={\"b\": {0: {\"a\": {\"__all__\": {\"c\"}}}}}))\r\n    print(c.dict(exclude={\"b\": {\"__all__\": {\"a\": {\"__all__\": {\"c\"}}}}}))\r\n    assert c.dict(exclude={\"b\": {0: {\"a\": {\"__all__\": {\"c\"}}}}}) == {\"b\": [{\"a\": [{\"a\": 1, \"b\": 2}]}]}\r\n    assert c.dict(exclude={\"b\": {\"__all__\": {\"a\": {\"__all__\": {\"c\"}}}}}) == {\"b\": [{\"a\": [{\"a\": 1, \"b\": 2}]}]}\r\n```\r\n\r\nRunning the above function with `pytest` the output is:\r\n\r\n```\r\nTest session starts (platform: linux, Python 3.8.3, pytest 5.3.5, pytest-sugar 0.9.2)\r\nrootdir: /home/spirus/projects/pydantic, inifile: setup.cfg\r\nplugins: cov-2.8.1, mock-3.1.0, sugar-0.9.2\r\ncollecting ... \r\n\r\n\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 test \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\r\n\r\n    def test():\r\n        c = C(b=[B(a=[A()])])\r\n        print(c.dict(exclude={\"b\": {0: {\"a\": {\"__all__\": {\"c\"}}}}}))\r\n        print(c.dict(exclude={\"b\": {\"__all__\": {\"a\": {\"__all__\": {\"c\"}}}}}))\r\n        assert c.dict(exclude={\"b\": {0: {\"a\": {\"__all__\": {\"c\"}}}}}) == {\"b\": [{\"a\": [{\"a\": 1, \"b\": 2}]}]}\r\n>       assert c.dict(exclude={\"b\": {\"__all__\": {\"a\": {\"__all__\": {\"c\"}}}}}) == {\"b\": [{\"a\": [{\"a\": 1, \"b\": 2}]}]}\r\nE       AssertionError: assert {'b': [{}]} == {'b': [{'a': ...1, 'b': 2}]}]}\r\nE         Differing items:\r\nE         {'b': [{}]} != {'b': [{'a': [{'a': 1, 'b': 2}]}]}\r\nE         Use -v to get the full diff\r\n\r\nexample.py:25: AssertionError\r\n------------------------------------------------------------ Captured stdout call ------------------------------------------------------------\r\n{'b': [{'a': [{'a': 1, 'b': 2}]}]}\r\n{'b': [{}]}\r\n\r\n example.py \u2a2f                                                                                                                  100% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n\r\nResults (0.05s):\r\n       1 failed\r\n         - example.py:20 test\r\n\r\n```\r\n\r\nI inspected the codebase a little bit, and found out that the bug is produced because of how [_normalize_indexes](https://github.com/samuelcolvin/pydantic/blob/0b9b308ca586432ebb05bf0a694a7c6c2ec2d9bd/pydantic/utils.py#L414), as it assumes that when the `items` is a `dict` containing the `__all__` key, then the value is considered by default to be a `set`. So calling the [`update`](https://github.com/samuelcolvin/pydantic/blob/0b9b308ca586432ebb05bf0a694a7c6c2ec2d9bd/pydantic/utils.py#L437), information may be missed.\r\n\r\nI am not certain if my usage violates how the `__all__` key should be used, but if this should have been correct, I can create a PR with a solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1577", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1577/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1577/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1577/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1577", "id": 626837288, "node_id": "MDU6SXNzdWU2MjY4MzcyODg=", "number": 1577, "title": "Correct use of @property setter for a field", "user": {"login": "umesh-timalsina", "id": 11476842, "node_id": "MDQ6VXNlcjExNDc2ODQy", "avatar_url": "https://avatars2.githubusercontent.com/u/11476842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/umesh-timalsina", "html_url": "https://github.com/umesh-timalsina", "followers_url": "https://api.github.com/users/umesh-timalsina/followers", "following_url": "https://api.github.com/users/umesh-timalsina/following{/other_user}", "gists_url": "https://api.github.com/users/umesh-timalsina/gists{/gist_id}", "starred_url": "https://api.github.com/users/umesh-timalsina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/umesh-timalsina/subscriptions", "organizations_url": "https://api.github.com/users/umesh-timalsina/orgs", "repos_url": "https://api.github.com/users/umesh-timalsina/repos", "events_url": "https://api.github.com/users/umesh-timalsina/events{/privacy}", "received_events_url": "https://api.github.com/users/umesh-timalsina/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426507, "node_id": "MDU6TGFiZWw1OTc0MjY1MDc=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-28T21:47:18Z", "updated_at": "2020-05-31T18:35:56Z", "closed_at": "2020-05-31T13:16:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Question\r\nI don't know if this justifies the use of `pydantic` here's what I want to use `pydantic` for:\r\n1. Use a set of Fileds for internal use and expose them via `@property` decorators\r\n2. Set the value of the fields from the `@property` setters. But since the `BaseModel` has an implementation for `__setattr__`, using setters for a `@property` doesn't work for me. \r\n\r\nOutput of `python -c \"import pydantic.utils; print(pydantic.utils.version_info())\"`:\r\n```\r\npydantic version: 1.5.1\r\npydantic compiled: True\r\ninstall path: /path/to/conda-env/lib/python3.7/site-packages/pydantic\r\npython version: 3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 22:33:48)  [GCC 7.3.0]\r\nplatform: Linux-5.0.0-32-generic-x86_64-with-debian-buster-sid\r\noptional deps. installed: []\r\n```\r\n\r\n```py\r\nfrom pydantic import BaseModel\r\n\r\nclass DemoClassWithInternalFields(BaseModel):\r\n    \"\"\"Class with internal Fields\"\"\"\r\n    field1_: str = 'DefaultValueForFieldOne'\r\n    field2_: int = 0\r\n        \r\n    @property\r\n    def field1(self):\r\n        return self.field1_\r\n    \r\n    @property\r\n    def field2(self):\r\n        return self.field2_\r\n    \r\n    @field1.setter\r\n    def field1(self, new_val):\r\n        self.field1_ = new_val\r\n    \r\n    @field2.setter\r\n    def field2(self, new_val):\r\n        self.field2_ = new_val\r\n    \r\n    class Config:\r\n        fields = {\r\n            'field1_': 'field1',\r\n            'field2_': 'field2'\r\n        }\r\n```\r\n```py\r\n>>> obj1 = DemoClassWithInternalFields(field1='ConstructedValue', field2=10)\r\n>>> obj1.field2 = 19  #Doesn't work\r\n\r\nsite-packages/pydantic/main.cpython-37m-x86_64-linux-gnu.so in pydantic.main.BaseModel.__setattr__()\r\n\r\nValueError: \"DemoClassWithInternalFields\" object has no field \"field2\"\r\n```\r\nThe workaround I have comeup with is to modify the `__setattr__` method with an extended config like as shown below:\r\n```py\r\nfrom pydantic import BaseModel\r\n\r\nclass DemoClassWithPropertySetters(BaseModel):\r\n    \"\"\"Class with internal Fields exposed as Properties\"\"\"\r\n    field1_: str = 'DefaultValueForFieldOne'\r\n    field2_: int = 0\r\n        \r\n    @property\r\n    def field1(self):\r\n        return self.field1_\r\n    \r\n    @property\r\n    def field2(self):\r\n        return self.field2_\r\n    \r\n    def __setattr__(self, key, val):\r\n        if key in self.__config__.alias_to_fields:\r\n            key = self.__config__.alias_to_fields[key]\r\n        super().__setattr__(key, val)\r\n    \r\n    class Config:\r\n        fields = {\r\n            'field1_': 'field1',\r\n            'field2_': 'field2'\r\n        }\r\n        \r\n        alias_to_fields = {\r\n            'field1': 'field1_',\r\n            'field2': 'field2_'\r\n        }\r\n```\r\n```py\r\n>>> obj2 = DemoClassWithPropertySetters(field1='ConstructedValue', field2=10)\r\n>>> obj2.field2 = 11   # This works\r\n>>> obj2.dict(by_alias=True)\r\n{'field1': 'ConstructedValue', 'field2': 11}\r\n```\r\nQuestions that stem from this are as follows:\r\n1. Is there a better workaround for this?\r\n2. What is the best way to expose and set values for a Field via `@properties`? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1576", "repository_url": "https://api.github.com/repos/samuelcolvin/pydantic", "labels_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1576/labels{/name}", "comments_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1576/comments", "events_url": "https://api.github.com/repos/samuelcolvin/pydantic/issues/1576/events", "html_url": "https://github.com/samuelcolvin/pydantic/issues/1576", "id": 626231675, "node_id": "MDU6SXNzdWU2MjYyMzE2NzU=", "number": 1576, "title": "Possible regression of __modify_schema__ for enum fields", "user": {"login": "therefromhere", "id": 197540, "node_id": "MDQ6VXNlcjE5NzU0MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/197540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/therefromhere", "html_url": "https://github.com/therefromhere", "followers_url": "https://api.github.com/users/therefromhere/followers", "following_url": "https://api.github.com/users/therefromhere/following{/other_user}", "gists_url": "https://api.github.com/users/therefromhere/gists{/gist_id}", "starred_url": "https://api.github.com/users/therefromhere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/therefromhere/subscriptions", "organizations_url": "https://api.github.com/users/therefromhere/orgs", "repos_url": "https://api.github.com/users/therefromhere/repos", "events_url": "https://api.github.com/users/therefromhere/events{/privacy}", "received_events_url": "https://api.github.com/users/therefromhere/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 597426502, "node_id": "MDU6TGFiZWw1OTc0MjY1MDI=", "url": "https://api.github.com/repos/samuelcolvin/pydantic/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T05:41:21Z", "updated_at": "2020-06-29T12:22:28Z", "closed_at": "2020-06-29T12:22:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Bug\r\n\r\nA side-effect of #1432 is that `__modify_schema__` on enum subclasses is still affecting the field schema, rather than the enumeration schema.\r\n\r\nI'd like it if `__modify_schema__` applied to the resulting enum model.  Does that seem reasonable?\r\n\r\nIn my use case I'm subclassing enum to add a `tsEnumNames` property, so that I could generate proper typescript enums from the resulting Json schema (using json-schema-to-typescript - see https://github.com/bcherny/json-schema-to-typescript/pull/15 ).\r\n\r\nUsing latest master 2eb62a3b2f2d345aa7b4625306331f68a7bc0fd5 (or d560c57dbcfe91e9f67782ede3e871ce19b88373 from #1562)\r\n\r\n\r\n```py\r\nimport enum\r\nimport pydantic\r\n\r\n\r\nclass TsCompatibleEnum(enum.Enum):\r\n  \"\"\"Enum subclass that adds tsEnumNames to enumeration fields\r\n  for compatibility with json-schema-to-typescript\r\n\r\n  See https://github.com/bcherny/json-schema-to-typescript/pull/15\r\n  \"\"\"\r\n  @classmethod\r\n  def __modify_schema__(cls, field_schema):\r\n    field_schema[\"tsEnumNames\"] = list(e.name for e in cls)\r\n\r\n\r\nclass MyEnum(TsCompatibleEnum):\r\n  \"\"\"Enumeration - note that the names and values are different\"\"\"\r\n  FOO = \"foo\"\r\n  BAR = \"bar\"\r\n\r\n\r\nclass MyModel(pydantic.BaseModel):\r\n  my_field: MyEnum = MyEnum.FOO\r\n\r\n\r\nprint(MyModel.schema_json(indent=2))\r\n```\r\n\r\nOutputs:\r\n\r\n```json\r\n{\r\n  \"title\": \"MyModel\",\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"my_field\": {\r\n      \"$ref\": \"#/definitions/MyEnum\",\r\n      \"tsEnumNames\": [\r\n        \"FOO\",\r\n        \"BAR\"\r\n      ]\r\n    }\r\n  },\r\n  \"definitions\": {\r\n    \"MyEnum\": {\r\n      \"title\": \"MyEnum\",\r\n      \"description\": \"Enumeration - note that the names and values are different\",\r\n      \"enum\": [\r\n        \"foo\",\r\n        \"bar\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nvs with pydantic 1.5.1:\r\n\r\n```json\r\n{\r\n  \"title\": \"MyModel\",\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"my_field\": {\r\n      \"title\": \"My Field\",\r\n      \"default\": \"foo\",\r\n      \"enum\": [\r\n        \"foo\",\r\n        \"bar\"\r\n      ],\r\n      \"tsEnumNames\": [\r\n        \"FOO\",\r\n        \"BAR\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI'd like to get this instead:\r\n\r\n```json\r\n{\r\n  \"title\": \"MyModel\",\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"my_field\": {\r\n      \"$ref\": \"#/definitions/MyEnum\"\r\n    }\r\n  },\r\n  \"definitions\": {\r\n    \"MyEnum\": {\r\n      \"title\": \"MyEnum\",\r\n      \"description\": \"Enumeration - note that the names and values are different\",\r\n      \"enum\": [\r\n        \"foo\",\r\n        \"bar\"\r\n      ],\r\n      \"tsEnumNames\": [\r\n        \"FOO\",\r\n        \"BAR\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}]}