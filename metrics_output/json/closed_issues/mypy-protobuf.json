{"total_count": 45, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/141", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/141/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/141/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/141", "id": 660851533, "node_id": "MDU6SXNzdWU2NjA4NTE1MzM=", "number": 141, "title": "What is the correct way to annotate an arbitrary enum type wrapper?", "user": {"login": "alkasm", "id": 9651002, "node_id": "MDQ6VXNlcjk2NTEwMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/9651002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alkasm", "html_url": "https://github.com/alkasm", "followers_url": "https://api.github.com/users/alkasm/followers", "following_url": "https://api.github.com/users/alkasm/following{/other_user}", "gists_url": "https://api.github.com/users/alkasm/gists{/gist_id}", "starred_url": "https://api.github.com/users/alkasm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alkasm/subscriptions", "organizations_url": "https://api.github.com/users/alkasm/orgs", "repos_url": "https://api.github.com/users/alkasm/repos", "events_url": "https://api.github.com/users/alkasm/events{/privacy}", "received_events_url": "https://api.github.com/users/alkasm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-19T13:56:24Z", "updated_at": "2020-08-22T00:30:50Z", "closed_at": "2020-08-22T00:30:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am writing a function which takes in an enum class as an argument. I have found that this works:\r\n\r\n```python\r\nfrom google.protobuf.internal import enum_type_wrapper\r\nenum_class: \"enum_type_wrapper._EnumTypeWrapper\" = my_package_pb2.SomeEnum\r\n```\r\n\r\nHowever I'd like to avoid string annotations if possible. Is there another way to do this directly? Unfortunately `enum_type_wrapper.EnumTypeWrapper` (that is, without the leading underscore) does not type check, and gives `incompatible type \"_SomeEnum\"; expected \"EnumTypeWrapper\"`.\r\n\r\nI am aware the enums annotations have changed recently; I believe I'm up to date with the current changes. I generated my annotations with mypy-protobuf 1.23 and am checking with mypy 0.782.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/127", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/127/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/127/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/127", "id": 630301107, "node_id": "MDU6SXNzdWU2MzAzMDExMDc=", "number": 127, "title": "Ambiguous import paths with mypy 0.780?", "user": {"login": "roitk", "id": 2343107, "node_id": "MDQ6VXNlcjIzNDMxMDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2343107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roitk", "html_url": "https://github.com/roitk", "followers_url": "https://api.github.com/users/roitk/followers", "following_url": "https://api.github.com/users/roitk/following{/other_user}", "gists_url": "https://api.github.com/users/roitk/gists{/gist_id}", "starred_url": "https://api.github.com/users/roitk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roitk/subscriptions", "organizations_url": "https://api.github.com/users/roitk/orgs", "repos_url": "https://api.github.com/users/roitk/repos", "events_url": "https://api.github.com/users/roitk/events{/privacy}", "received_events_url": "https://api.github.com/users/roitk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-03T20:23:24Z", "updated_at": "2020-06-04T15:28:28Z", "closed_at": "2020-06-04T15:28:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nWe currently use mypy-protobuf in a typechecking CI step for [buildgrid](https://gitlab.com/BuildGrid/buildgrid/). With the release of mypy 0.780, we began to see the following error in the CI.\r\n\r\n```\r\nbuildgrid/_protos/build/bazel/semver/semver_pb2.pyi: error: Source file found twice under different module names: 'buildgrid._protos.build.bazel.semver.semver_pb2' and 'build.bazel.semver.semver_pb2'\r\nFound 1 error in 1 file (checked 144 source files)\r\n```\r\n\r\nWe tried regenerating the `.pyi` files with the newer version of mypy, but the issue persisted, so we've had to [roll back our mypy version](https://gitlab.com/BuildGrid/buildgrid/-/merge_requests/418).\r\n\r\nSome additional information:\r\n\r\n- We noticed that the new version of mypy [shipped with a change in its import following logic](https://mypy-lang.blogspot.com/2020/06/mypy-0780-released.html). The blogpost says this was for the mypy daemon, but perhaps it's relevant for the CLI tool as well?\r\n- Our [`mypy.ini`](https://gitlab.com/BuildGrid/buildgrid/-/blob/master/mypy.ini). Notably, `buildgrid/_protos` is in the import path.\r\n- Our type-checking CI step is pretty simple; it just installs some dependencies and runs mypy on the main source folder: https://gitlab.com/BuildGrid/buildgrid/-/blob/master/.gitlab-ci.yml#L62-63\r\n\r\nI'm not sure if this is an issue with mypy, mypy-protobuf, or our configuration, so please let us know if we should post this elsewhere!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/126", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/126/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/126/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/126", "id": 628757789, "node_id": "MDU6SXNzdWU2Mjg3NTc3ODk=", "number": 126, "title": "The split enum value types break type checks when used with dataclasses", "user": {"login": "sagar-infinitus-ai", "id": 63253647, "node_id": "MDQ6VXNlcjYzMjUzNjQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/63253647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagar-infinitus-ai", "html_url": "https://github.com/sagar-infinitus-ai", "followers_url": "https://api.github.com/users/sagar-infinitus-ai/followers", "following_url": "https://api.github.com/users/sagar-infinitus-ai/following{/other_user}", "gists_url": "https://api.github.com/users/sagar-infinitus-ai/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagar-infinitus-ai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagar-infinitus-ai/subscriptions", "organizations_url": "https://api.github.com/users/sagar-infinitus-ai/orgs", "repos_url": "https://api.github.com/users/sagar-infinitus-ai/repos", "events_url": "https://api.github.com/users/sagar-infinitus-ai/events{/privacy}", "received_events_url": "https://api.github.com/users/sagar-infinitus-ai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-06-01T22:03:20Z", "updated_at": "2020-06-11T17:45:06Z", "closed_at": "2020-06-11T17:45:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Changes made in https://github.com/dropbox/mypy-protobuf/pull/120 are breaking typechecks when compiled types are used with dataclasses, or in general when enums are used as parameters or return values. \r\n\r\nQuick example: \r\nproto: \r\n```\r\nsyntax = \"proto3\";\r\n\r\npackage bikes;\r\n    \r\nenum EngineType {\r\n    TWO_STROKE = 0;\r\n    FOUR_STROKE = 1;\r\n}\r\n\r\nmessage Motorcycle {\r\n    string name = 1;\r\n    EngineType engine_type = 2;\r\n}\r\n```\r\npython: \r\n```\r\nfrom dataclasses import dataclass\r\nfrom motorcycles_pb2 import Engine, EngineType, Motorcycle\r\n\r\n@dataclass\r\nclass DemoEngine:\r\n    engine_type: EngineType\r\n    name: str\r\n\r\n    def __init__(self, engine_type: EngineType, name: str):\r\n        self.engine_type = engine_type\r\n        self.name = name\r\n\r\nd = DemoEngine(EngineType.TWO_STROKE, \"demo\")\r\n```\r\ntype check failure: \r\n```\r\nmotorcycles/__main__.py:17: error: Argument 1 to \"DemoEngine\" has incompatible type \"EngineTypeValue\"; expected \"EngineType\"\r\n```\r\nProtos compiled with protoc 3.12.2 using `python -m grpc_tools.protoc`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/118", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/118/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/118/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/118", "id": 616924561, "node_id": "MDU6SXNzdWU2MTY5MjQ1NjE=", "number": 118, "title": "Message enum attributes have incorrect type annotations", "user": {"login": "wmdrichards", "id": 1108541, "node_id": "MDQ6VXNlcjExMDg1NDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1108541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmdrichards", "html_url": "https://github.com/wmdrichards", "followers_url": "https://api.github.com/users/wmdrichards/followers", "following_url": "https://api.github.com/users/wmdrichards/following{/other_user}", "gists_url": "https://api.github.com/users/wmdrichards/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmdrichards/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmdrichards/subscriptions", "organizations_url": "https://api.github.com/users/wmdrichards/orgs", "repos_url": "https://api.github.com/users/wmdrichards/repos", "events_url": "https://api.github.com/users/wmdrichards/events{/privacy}", "received_events_url": "https://api.github.com/users/wmdrichards/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-12T20:04:59Z", "updated_at": "2020-05-29T06:27:10Z", "closed_at": "2020-05-13T07:51:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running mypy-protobuf on the following proto definition\r\n```\r\nsyntax = \"proto3\";\r\n\r\nenum Enum {\r\n  OK = 0;\r\n  NOT_OK = 1;\r\n}\r\n\r\nmessage Message {\r\n  Enum enum = 1;\r\n}\r\n```\r\nProduces a .pyi file with\r\n```\r\nclass Enum(builtin___int):\r\n    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...\r\n    @classmethod\r\n    def Name(cls, number: builtin___int) -> builtin___str: ...\r\n    @classmethod\r\n    def Value(cls, name: builtin___str) -> 'Enum': ...\r\n    @classmethod\r\n    def keys(cls) -> typing___List[builtin___str]: ...\r\n    @classmethod\r\n    def values(cls) -> typing___List['Enum']: ...\r\n    @classmethod\r\n    def items(cls) -> typing___List[typing___Tuple[builtin___str, 'Enum']]: ...\r\n    OK = typing___cast('Enum', 0)\r\n    NOT_OK = typing___cast('Enum', 1)\r\nOK = typing___cast('Enum', 0)\r\nNOT_OK = typing___cast('Enum', 1)\r\nglobal___Enum = Enum\r\n\r\nclass Message(google___protobuf___message___Message):\r\n    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...\r\n    enum = ... # type: global___Enum\r\n```\r\nwhich suggests to mypy that the enum attributes exist on the enum object e.g. that  `Message().enum.OK` is valid. In reality the generated code (using grpc_tools) has `type(Message().enum) == int`, which obviously doesn't have the `OK` attributes (or `keys`, `values` etc) and `Message().enum.OK` fails at runtime", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/117", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/117/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/117/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/117", "id": 616266031, "node_id": "MDU6SXNzdWU2MTYyNjYwMzE=", "number": 117, "title": "module.DESCRIPTOR is not supported", "user": {"login": "awbraunstein", "id": 416542, "node_id": "MDQ6VXNlcjQxNjU0Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/416542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awbraunstein", "html_url": "https://github.com/awbraunstein", "followers_url": "https://api.github.com/users/awbraunstein/followers", "following_url": "https://api.github.com/users/awbraunstein/following{/other_user}", "gists_url": "https://api.github.com/users/awbraunstein/gists{/gist_id}", "starred_url": "https://api.github.com/users/awbraunstein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awbraunstein/subscriptions", "organizations_url": "https://api.github.com/users/awbraunstein/orgs", "repos_url": "https://api.github.com/users/awbraunstein/repos", "events_url": "https://api.github.com/users/awbraunstein/events{/privacy}", "received_events_url": "https://api.github.com/users/awbraunstein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-12T00:09:10Z", "updated_at": "2020-05-13T09:22:38Z", "closed_at": "2020-05-13T09:22:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "When attempting to access the `DESCRIPTOR` attribute on a protobuf module, i get a `Module has no attribute \"DESCRIPTOR\"` error. From looking at the code, it seems we generate a `DESCRIPTOR` attributer on messages and enums, but not one for the module itself.\r\n\r\nThis should probably be generated, since it is valid syntax and is the correct way to access the `FileDescriptor` for the file that corresponds to the current pb2.py file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/116", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/116/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/116/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/116", "id": 602757911, "node_id": "MDU6SXNzdWU2MDI3NTc5MTE=", "number": 116, "title": "The global___ name mangling breaks my type check", "user": {"login": "thejohnfreeman", "id": 1133852, "node_id": "MDQ6VXNlcjExMzM4NTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1133852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thejohnfreeman", "html_url": "https://github.com/thejohnfreeman", "followers_url": "https://api.github.com/users/thejohnfreeman/followers", "following_url": "https://api.github.com/users/thejohnfreeman/following{/other_user}", "gists_url": "https://api.github.com/users/thejohnfreeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/thejohnfreeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thejohnfreeman/subscriptions", "organizations_url": "https://api.github.com/users/thejohnfreeman/orgs", "repos_url": "https://api.github.com/users/thejohnfreeman/repos", "events_url": "https://api.github.com/users/thejohnfreeman/events{/privacy}", "received_events_url": "https://api.github.com/users/thejohnfreeman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-04-19T16:21:29Z", "updated_at": "2020-06-12T00:35:06Z", "closed_at": "2020-06-12T00:35:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "With mypy-protobuf 1.19, mypy [passed](https://travis-ci.org/github/thejohnfreeman/xpring-py/jobs/667452104#L401) my code. Upgrading to mypy-protobuf 1.20 [changes](https://github.com/dropbox/mypy-protobuf/commit/dd4bff3bf99adaf3d84a3bae5760c3242ae06734#diff-b1d9a9a36e61e410b45a082d595d20e7R103-R106) the output to add some `global___` prefixes to types, [breaking](https://travis-ci.org/github/thejohnfreeman/xpring-py/jobs/676909779#L401) the type check. If I pin my dependency to 1.19, or just [strip out these prefixes](https://github.com/thejohnfreeman/xpring-py/blob/master/tasks.py#L73), mypy [passes](https://travis-ci.org/github/thejohnfreeman/xpring-py/jobs/676928193#L399) my code again. Is there another alternative? Perhaps an option to disable the name mangling?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/115", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/115/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/115/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/115", "id": 588600205, "node_id": "MDU6SXNzdWU1ODg2MDAyMDU=", "number": 115, "title": "New version on PyPI?", "user": {"login": "forestbelton", "id": 65484, "node_id": "MDQ6VXNlcjY1NDg0", "avatar_url": "https://avatars2.githubusercontent.com/u/65484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/forestbelton", "html_url": "https://github.com/forestbelton", "followers_url": "https://api.github.com/users/forestbelton/followers", "following_url": "https://api.github.com/users/forestbelton/following{/other_user}", "gists_url": "https://api.github.com/users/forestbelton/gists{/gist_id}", "starred_url": "https://api.github.com/users/forestbelton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/forestbelton/subscriptions", "organizations_url": "https://api.github.com/users/forestbelton/orgs", "repos_url": "https://api.github.com/users/forestbelton/repos", "events_url": "https://api.github.com/users/forestbelton/events{/privacy}", "received_events_url": "https://api.github.com/users/forestbelton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-26T17:35:10Z", "updated_at": "2020-04-01T22:29:45Z", "closed_at": "2020-03-29T11:24:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI was wondering when a new version would be released on PyPI. We're very much looking forward to some of the changes introduced since last release, but have had some trouble specifying a git SHA in our `requirements.txt` to point at a non-PyPI verison. Thanks so much!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/108", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/108/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/108/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/108", "id": 567287280, "node_id": "MDU6SXNzdWU1NjcyODcyODA=", "number": 108, "title": "Function is not valid as a type", "user": {"login": "forestbelton", "id": 65484, "node_id": "MDQ6VXNlcjY1NDg0", "avatar_url": "https://avatars2.githubusercontent.com/u/65484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/forestbelton", "html_url": "https://github.com/forestbelton", "followers_url": "https://api.github.com/users/forestbelton/followers", "following_url": "https://api.github.com/users/forestbelton/following{/other_user}", "gists_url": "https://api.github.com/users/forestbelton/gists{/gist_id}", "starred_url": "https://api.github.com/users/forestbelton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/forestbelton/subscriptions", "organizations_url": "https://api.github.com/users/forestbelton/orgs", "repos_url": "https://api.github.com/users/forestbelton/repos", "events_url": "https://api.github.com/users/forestbelton/events{/privacy}", "received_events_url": "https://api.github.com/users/forestbelton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-19T03:13:14Z", "updated_at": "2020-02-25T01:52:27Z", "closed_at": "2020-02-25T01:52:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThank you for this wonderful project. I'm integrating mypy with a codebase that uses protobufs and feel that this will be quite helpful in doing so!\r\n\r\nI'm able to generate the `*.pyi` type stub files along with the other definitions by invoking the following command:\r\n\r\n```\r\n$ python -m grpc_tools.protoc -I=github.com/gogo/protobuf/gogoproto -I=. \\\r\n    --python_out=generated/python \\\r\n    --grpc_python_out=generated/python \\\r\n    --mypy_out=generated/python\r\n```\r\n\r\nThe generated `*.pyi` files look correct, however when I try to run `mypy` over modules that import these definitions, I receive error messages like the following (names/line #s scrubbed):\r\n\r\n```\r\ngenerated/python/foo_pb2.pyi:123: error: Function \"Foo\" is not valid as a type\r\ngenerated/python/foo_pb2.pyi:123: note: Perhaps you need \"Callable[...]\" or a callback protocol?\r\n```\r\n\r\nInside of `foo_pb2.py`, `Foo` is defined like follows:\r\n\r\n```python\r\nFoo = _reflection.GeneratedProtocolMessageType('Foo', (_message.Message,), {\r\n  'DESCRIPTOR' : _FOO,\r\n  '__module__' : 'path.to.foo'\r\n  # @@protoc_insertion_point(class_scope:Foo)\r\n  })\r\n_sym_db.RegisterMessage(Foo)\r\n```\r\n\r\nIs there something obvious I'm doing wrong? I'm using the following versions for my dependencies:\r\n\r\n* mypy 0.761\r\n* mypy-protobuf 1.18\r\n* Python 3.6.5\r\n* python-protobuf 3.11.3\r\n\r\n```\r\n$ python -m grpc_tools.protoc --version\r\nlibprotoc 3.8.0\r\n```\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/107", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/107/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/107/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/107", "id": 564984441, "node_id": "MDU6SXNzdWU1NjQ5ODQ0NDE=", "number": 107, "title": "HasField doesn't accept dynamically generated strings", "user": {"login": "mikolajz", "id": 7243186, "node_id": "MDQ6VXNlcjcyNDMxODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/7243186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikolajz", "html_url": "https://github.com/mikolajz", "followers_url": "https://api.github.com/users/mikolajz/followers", "following_url": "https://api.github.com/users/mikolajz/following{/other_user}", "gists_url": "https://api.github.com/users/mikolajz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikolajz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikolajz/subscriptions", "organizations_url": "https://api.github.com/users/mikolajz/orgs", "repos_url": "https://api.github.com/users/mikolajz/repos", "events_url": "https://api.github.com/users/mikolajz/events{/privacy}", "received_events_url": "https://api.github.com/users/mikolajz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-13T22:19:54Z", "updated_at": "2020-02-19T06:57:11Z", "closed_at": "2020-02-14T09:41:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We started using mypy-protobuf for a bit larger codebase and hit two problems. For the first I have PR https://github.com/dropbox/mypy-protobuf/pull/106, the second is harder.\r\n\r\nmypy-protobuf create this nice Literal union to validate the parameter to HasField when it's a literal. However, when it's dynamically generated, it fails the type check (e.g., `foo.HasField(arg + \"_timestamp\")`). I don't know - is it possible to still validate the literal strings while allowing for non-literal strings as well?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/100", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/100/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/100/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/100", "id": 555737329, "node_id": "MDU6SXNzdWU1NTU3MzczMjk=", "number": 100, "title": "FromString argument type doesn't work for Python2", "user": {"login": "mikolajz", "id": 7243186, "node_id": "MDQ6VXNlcjcyNDMxODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/7243186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikolajz", "html_url": "https://github.com/mikolajz", "followers_url": "https://api.github.com/users/mikolajz/followers", "following_url": "https://api.github.com/users/mikolajz/following{/other_user}", "gists_url": "https://api.github.com/users/mikolajz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikolajz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikolajz/subscriptions", "organizations_url": "https://api.github.com/users/mikolajz/orgs", "repos_url": "https://api.github.com/users/mikolajz/repos", "events_url": "https://api.github.com/users/mikolajz/events{/privacy}", "received_events_url": "https://api.github.com/users/mikolajz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-27T17:56:49Z", "updated_at": "2020-01-29T22:32:19Z", "closed_at": "2020-01-29T21:30:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As I understand, the typeshed definition is used for the definition of the base Message class and a commit in October ([1]) changed the argument of FromString from \"Any\" to \"bytes\" in Python3 and a Union of \"bytes\", \"buffer\" and \"unicode\"(strange) in Python 2. mypy-protobuf emits bytes as the type of the argument of FromString, thus in Python2 we get lots of errors about the argument type of the subclass being more narrow that the superclass.\r\n\r\nThe code in the attachment seems to make it work. Will you want to include such a fix?\r\n\r\n[mypy-diff.txt](https://github.com/dropbox/mypy-protobuf/files/4118583/mypy-diff.txt)\r\n\r\n[1] https://github.com/python/typeshed/commit/036abc7fda9290e29d978d62b00e03b67a2a6fd1#diff-2492d636b6705e307c9cb32d169f3614", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/99", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/99/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/99/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/99", "id": 549099448, "node_id": "MDU6SXNzdWU1NDkwOTk0NDg=", "number": 99, "title": "Using within bazel?", "user": {"login": "moshe", "id": 7490448, "node_id": "MDQ6VXNlcjc0OTA0NDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7490448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moshe", "html_url": "https://github.com/moshe", "followers_url": "https://api.github.com/users/moshe/followers", "following_url": "https://api.github.com/users/moshe/following{/other_user}", "gists_url": "https://api.github.com/users/moshe/gists{/gist_id}", "starred_url": "https://api.github.com/users/moshe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moshe/subscriptions", "organizations_url": "https://api.github.com/users/moshe/orgs", "repos_url": "https://api.github.com/users/moshe/repos", "events_url": "https://api.github.com/users/moshe/events{/privacy}", "received_events_url": "https://api.github.com/users/moshe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-13T18:17:16Z", "updated_at": "2020-05-13T06:17:12Z", "closed_at": "2020-05-13T06:17:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey team\ud83d\ude4c\r\nI know dropbox is using Bazel and wanted to know if you can publish a BUILD file with mypy-protobuf as a dependency (go impl in better)\r\n\r\nThanks and really helpfull project!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/97", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/97/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/97/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/97", "id": 505102282, "node_id": "MDU6SXNzdWU1MDUxMDIyODI=", "number": 97, "title": "Incompatible types in assignment (x: SomeMessage = Message)", "user": {"login": "DaniGuardiola", "id": 8862967, "node_id": "MDQ6VXNlcjg4NjI5Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8862967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaniGuardiola", "html_url": "https://github.com/DaniGuardiola", "followers_url": "https://api.github.com/users/DaniGuardiola/followers", "following_url": "https://api.github.com/users/DaniGuardiola/following{/other_user}", "gists_url": "https://api.github.com/users/DaniGuardiola/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaniGuardiola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaniGuardiola/subscriptions", "organizations_url": "https://api.github.com/users/DaniGuardiola/orgs", "repos_url": "https://api.github.com/users/DaniGuardiola/repos", "events_url": "https://api.github.com/users/DaniGuardiola/events{/privacy}", "received_events_url": "https://api.github.com/users/DaniGuardiola/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-10T07:58:18Z", "updated_at": "2020-01-29T21:34:06Z", "closed_at": "2020-01-29T21:34:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following code:\r\n\r\n```python\r\nfrom proto.example_pb2 import SomeMessage\r\nfrom google.protobuf.message import Message\r\n\r\n\r\ndef request(...) -> Message:\r\n\t...\r\n\r\nresult: SomeMessage = request(\r\n    ...\r\n)\r\n```\r\n\r\nRequest will return a protobuf message which can vary depending on the input parameters. This is giving the following mypy error:\r\n\r\n```\r\nerror: Incompatible types in assignment (expression has type \"Message\", variable has type \"SomeMessage\")\r\n```\r\n\r\nNow, I understand why this is happening: `Message` is not assignable to `SomeMessage`. It would be valid the other way around (`SomeMessage` -> `Message`) because `SomeMessage` is a subclass of `Message`.\r\n\r\nThe reasoning behind this code is that while `request` can return any message, when I use it I already know which specific message it will return, and I want to be able to type it like this. I just don't know how to go about it.\r\n\r\nThe only solution I thought about is to use `@overload` with some `Literal` types to set the return of every message type, as it really only depends on the value a string parameter, but it seems a bit overkill. I have some other situations in my code where this happens (even without protobuf) so what I'm really asking is for help on what pattern I should be using in these kind of situations, because I'm all out of ideas.\r\n\r\nCan anyone help me figure this out?\r\n\r\nThanks :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/96", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/96/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/96/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/96", "id": 504383569, "node_id": "MDU6SXNzdWU1MDQzODM1Njk=", "number": 96, "title": "Add a Changelog and backfill w/ past improvements", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-09T03:05:41Z", "updated_at": "2020-05-13T08:55:57Z", "closed_at": "2020-05-13T08:55:57Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Thanks Kami for the idea\r\nhttps://github.com/dropbox/mypy-protobuf/commit/ba6b43ee412fdf42c59545216aae702b53539c74#commitcomment-35412280", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/86", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/86/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/86/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/86", "id": 467600883, "node_id": "MDU6SXNzdWU0Njc2MDA4ODM=", "number": 86, "title": "Add `protobuf` to setup.py ", "user": {"login": "gtalarico", "id": 9513968, "node_id": "MDQ6VXNlcjk1MTM5Njg=", "avatar_url": "https://avatars1.githubusercontent.com/u/9513968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gtalarico", "html_url": "https://github.com/gtalarico", "followers_url": "https://api.github.com/users/gtalarico/followers", "following_url": "https://api.github.com/users/gtalarico/following{/other_user}", "gists_url": "https://api.github.com/users/gtalarico/gists{/gist_id}", "starred_url": "https://api.github.com/users/gtalarico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gtalarico/subscriptions", "organizations_url": "https://api.github.com/users/gtalarico/orgs", "repos_url": "https://api.github.com/users/gtalarico/repos", "events_url": "https://api.github.com/users/gtalarico/events{/privacy}", "received_events_url": "https://api.github.com/users/gtalarico/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-12T21:06:49Z", "updated_at": "2019-07-21T16:03:09Z", "closed_at": "2019-07-21T15:57:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using mypy-protobuf, the plugin expects `pypi/protobuf` to be installed.\r\nIf it's not, the build fails:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/gtalarico/dev/repos/gtalarico/schema/.venv/bin/protoc-gen-mypy\", line 13, in <module>\r\n    import google.protobuf.descriptor_pb2 as d\r\nModuleNotFoundError: No module named 'google'\r\n--mypy_out: protoc-gen-mypy: Plugin failed with status code 1.\r\n```\r\n\r\nIf `protobuf` pkg is required, seems to me we could just add it to `setup.py` so the dependency is automatically when `mypy-protobuf` is installed\r\n\r\nThoughts? \r\n\r\n```python\r\n# setup.py\r\nsetup(\r\n    install_requires=[\"protobuf\"],\r\n    # ...\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/85", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/85/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/85/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/85", "id": 467219470, "node_id": "MDU6SXNzdWU0NjcyMTk0NzA=", "number": 85, "title": "mypy raises error on .append on repeated field", "user": {"login": "gtalarico", "id": 9513968, "node_id": "MDQ6VXNlcjk1MTM5Njg=", "avatar_url": "https://avatars1.githubusercontent.com/u/9513968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gtalarico", "html_url": "https://github.com/gtalarico", "followers_url": "https://api.github.com/users/gtalarico/followers", "following_url": "https://api.github.com/users/gtalarico/following{/other_user}", "gists_url": "https://api.github.com/users/gtalarico/gists{/gist_id}", "starred_url": "https://api.github.com/users/gtalarico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gtalarico/subscriptions", "organizations_url": "https://api.github.com/users/gtalarico/orgs", "repos_url": "https://api.github.com/users/gtalarico/repos", "events_url": "https://api.github.com/users/gtalarico/events{/privacy}", "received_events_url": "https://api.github.com/users/gtalarico/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-12T04:49:28Z", "updated_at": "2019-07-22T17:34:16Z", "closed_at": "2019-07-22T17:34:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Proto\r\n```proto\r\n# rules.proto\r\nmessage Result {\r\n  string name = 1;\r\n}\r\n\r\nmessage ResultList {\r\n  repeated Result results = 2;\r\n}\r\n```\r\n### Code\r\n```python\r\nimport rules_pb2\r\nr = Results(name=\"x\")\r\nresult_list = ResultList()\r\nresult_list.results.append(r)\r\n# Append works as expected, mypy raises: \r\n# RepeatedCompositeFieldContainer[Results]\" has no attribute \"append\" mypy(error)\r\n```\r\n\r\n\r\n### Mypy stub\r\n```python\r\nclass Results(google___protobuf___message___Message):\r\n\r\n    @property\r\n    def results(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[ResultList]: ...\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/84", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/84/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/84/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/84", "id": 465957814, "node_id": "MDU6SXNzdWU0NjU5NTc4MTQ=", "number": 84, "title": "Proposal: Enum Literals Support", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-09T19:55:38Z", "updated_at": "2020-06-06T22:43:24Z", "closed_at": "2020-06-06T22:43:24Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "See Discussion in #56 \r\n\r\nI actually think we're able to get best of both worlds here by using the mypy Literal type. This way, the typing will be indeed an int, but the int is constrained to only the legitimate values.\r\n\r\nhttps://mypy.readthedocs.io/en/latest/literal_types.html\r\n\r\nFirst attempt at a diff was #79 \r\nDiscussion after landing:\r\n\r\n@Kami\r\n> First thanks for adding enum literal support.\r\n> \r\n> This indeed seems to fix direct enum literal notation, but it breaks the `Value()` method scenario which takes a string (enum name) and returns an enum value.\r\n> \r\n> For example, with the following definition:\r\n> \r\n> ```protobuf\r\n> enum ExecutionStatus {\r\n>     REQUESTED = 0;\r\n>     SCHEDULED = 1;\r\n>     RUNNING = 2;\r\n> }\r\n> ```\r\n> \r\n> This used to work:\r\n> \r\n> ```shell\r\n> from messages_pb2 import ExecutionStatus\r\n> \r\n> status_str = 'requested'\r\n> obj.status = ExecutionStatus.Value(status_str.upper())  # this should return enum value (aka Enum type / int)\r\n> ```\r\n> \r\n> Now it returns the following error:\r\n> \r\n> ```shell\r\n> error: Incompatible return value type (got \"Union[Literal[0], Literal[1], Literal[2]]\", expected \"ExecutionStatus\")\r\n> ```\r\n> \r\n> It works fine with just the change from #81, but not with this change.\r\n> \r\n> It may also brake `Name()` and other enum class methods, but I didn't have time to dig in yet.\r\n\r\n@nipunn1313 \r\n> I poked around a bit and I believe that the issue here is that `obj.status` is typed to `ExecutionStatus`, but it would now need to be typed to `ExecutionStatus.ClosedValueType`\r\n> \r\n> since ExecutionStatus is the enum itself and `ExecutionStatus.ClosedValueType` is the type of the Values in the enum (and `ExecutionStatus.ClosedKeyType` is the type of the Keys in the enum)\r\n> \r\n> The merged PR was non-backward-compatible in that it changed the return value of Typing to literals, and move the int-y-ness of the enum to the `ClosedValueType` member.\r\n> \r\n> This is more accurate based on this example I found\r\n> \r\n> ```\r\n> enum UserFSWAction {\r\n>    UNKNOWN = 0;\r\n>    ALLOW = 1;\r\n> }\r\n> ```\r\n> \r\n> ```\r\n> >>> type(ALLOW)\r\n> <class 'int'>\r\n> >>> ALLOW\r\n> 1\r\n> >>> UserFSWAction.Name(1)\r\n> 'ALLOW'\r\n> >>> UserFSWAction.Value('ALLOW')\r\n> 1\r\n> >>> type(UserFSWAction.Value('ALLOW'))\r\n> <class 'int'>\r\n> ```\r\n> \r\n> @Kami - does that make sense directionally?\r\n> \r\n> I'll hold off on publishing to pypi until we have some alignment here. I'm ok with making a non-backward compatible change, but I'll want to have some clear changelist and bump the big version number.\r\n> \r\n> Couple more considerations for proposal\r\n> \r\n> change typing of the constants to be the ClosedValueType for better error messages\r\n> \r\n> ```\r\n> - ALLOW: typing_extensions___Literal[1]\r\n> + ALLOW: UserFSWAction.ClosedValueType\r\n> ```\r\n> \r\n> change `ClosedValueType` to just `ValueType` to simplify notation required by callers.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/82", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/82/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/82/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/82", "id": 457658161, "node_id": "MDU6SXNzdWU0NTc2NTgxNjE=", "number": 82, "title": "Plugin doesn't support all type of notations for accessing Enum values", "user": {"login": "Kami", "id": 125088, "node_id": "MDQ6VXNlcjEyNTA4OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/125088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kami", "html_url": "https://github.com/Kami", "followers_url": "https://api.github.com/users/Kami/followers", "following_url": "https://api.github.com/users/Kami/following{/other_user}", "gists_url": "https://api.github.com/users/Kami/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kami/subscriptions", "organizations_url": "https://api.github.com/users/Kami/orgs", "repos_url": "https://api.github.com/users/Kami/repos", "events_url": "https://api.github.com/users/Kami/events{/privacy}", "received_events_url": "https://api.github.com/users/Kami/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-18T19:33:48Z", "updated_at": "2019-06-18T19:45:25Z", "closed_at": "2019-06-18T19:35:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently it appears that this plugin doesn't support all type of notations for accessing Enum values.\r\n\r\nExample protobuf definition (``execution.proto``):\r\n\r\n```protobuf\r\nenum ExecutionStatus {\r\n    REQUESTED = 0;\r\n    SCHEDULED = 1;\r\n    RUNNING = 2;\r\n    SUCCEEDED = 3;\r\n    FAILED = 4;\r\n    TIMED_OUT = 5;\r\n    CANCELED = 6;\r\n}\r\n```\r\n\r\nRight now, the following ways to refer to the enum value work and don't result in a mypy error:\r\n\r\n```python\r\nimport execution_pb2\r\n\r\nexecution_pb2.REQUESTED\r\nexecution_pb2.Value('REQUESTED')\r\n...\r\n```\r\n\r\nThe problem is that the following more verbose approach (where you access the value via enum type class) returns an error:\r\n\r\n```python\r\nexecution_pb2.ExecutionStatus.REQUESTED\r\n```\r\n\r\n```bash\r\nfoo.py: error: \"Type[ExecutionStatus]\" has no attribute \"SUCCEEDED\"\r\n```\r\n\r\nThis approach is supported by the protobuf generated Python code. I also personally prefer it since it's more explicit and obvious when there are multiple top-level enum types defined in a single proto file.\r\n\r\nUsing ``Value('')`` method is also not desired since it doesn't provide any static typing guarantees - if you pass in an invalid / unsupported value, this will only be detected during run-time.\r\n\r\nI checked the generated annotations file and it looks like it only writes type hints for accessing enum values via global module level variables.\r\n\r\nFrom the generated type hints code:\r\n\r\n```python\r\nclass ExecutionStatus(int):\r\n    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...\r\n    @classmethod\r\n    def Name(cls, number: int) -> str: ...\r\n    @classmethod\r\n    def Value(cls, name: str) -> ExecutionStatus: ...\r\n    @classmethod\r\n    def keys(cls) -> typing___List[str]: ...\r\n    @classmethod\r\n    def values(cls) -> typing___List[ExecutionStatus]: ...\r\n    @classmethod\r\n    def items(cls) -> typing___List[typing___Tuple[str, ExecutionStatus]]: ...\r\nREQUESTED = typing___cast(ExecutionStatus, 0)\r\nSCHEDULED = typing___cast(ExecutionStatus, 1)\r\nRUNNING = typing___cast(ExecutionStatus, 2)\r\nSUCCEEDED = typing___cast(ExecutionStatus, 3)\r\nFAILED = typing___cast(ExecutionStatus, 4)\r\nTIMED_OUT = typing___cast(ExecutionStatus, 5)\r\nCANCELED = typing___cast(ExecutionStatus, 6)\r\n```\r\n\r\nI propose to update it so it looks like this:\r\n\r\n```python\r\nclass ExecutionStatus(int):\r\n    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...\r\n    @classmethod\r\n    def Name(cls, number: int) -> str: ...\r\n    @classmethod\r\n    def Value(cls, name: str) -> ExecutionStatus: ...\r\n    @classmethod\r\n    def keys(cls) -> typing___List[str]: ...\r\n    @classmethod\r\n    def values(cls) -> typing___List[ExecutionStatus]: ...\r\n    @classmethod\r\n    def items(cls) -> typing___List[typing___Tuple[str, ExecutionStatus]]: ...\r\n    REQUESTED = typing___cast(ExecutionStatus, 0)\r\n    SCHEDULED = typing___cast(ExecutionStatus, 1)\r\n    RUNNING = typing___cast(ExecutionStatus, 2)\r\n    SUCCEEDED = typing___cast(ExecutionStatus, 3)\r\n    FAILED = typing___cast(ExecutionStatus, 4)\r\n    TIMED_OUT = typing___cast(ExecutionStatus, 5)\r\n    CANCELED = typing___cast(ExecutionStatus, 6)\r\n\r\nREQUESTED = typing___cast(ExecutionStatus, 0)\r\nSCHEDULED = typing___cast(ExecutionStatus, 1)\r\nRUNNING = typing___cast(ExecutionStatus, 2)\r\nSUCCEEDED = typing___cast(ExecutionStatus, 3)\r\nFAILED = typing___cast(ExecutionStatus, 4)\r\nTIMED_OUT = typing___cast(ExecutionStatus, 5)\r\nCANCELED = typing___cast(ExecutionStatus, 6)\r\n```\r\n\r\nThis way those values can be access using both supported way - directly via top level variable or via enum class level variable.\r\n\r\nSomewhat related issue #56.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/80", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/80/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/80/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/80", "id": 453385273, "node_id": "MDU6SXNzdWU0NTMzODUyNzM=", "number": 80, "title": "Invalid syntax error in generated .pyi file", "user": {"login": "burk", "id": 1082217, "node_id": "MDQ6VXNlcjEwODIyMTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1082217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burk", "html_url": "https://github.com/burk", "followers_url": "https://api.github.com/users/burk/followers", "following_url": "https://api.github.com/users/burk/following{/other_user}", "gists_url": "https://api.github.com/users/burk/gists{/gist_id}", "starred_url": "https://api.github.com/users/burk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burk/subscriptions", "organizations_url": "https://api.github.com/users/burk/orgs", "repos_url": "https://api.github.com/users/burk/repos", "events_url": "https://api.github.com/users/burk/events{/privacy}", "received_events_url": "https://api.github.com/users/burk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-07T07:55:40Z", "updated_at": "2019-07-31T05:48:57Z", "closed_at": "2019-06-10T18:46:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey! I've started using your plugin, and it's working to an extent that the type hints are picked up by my IDE, which is helpful.\r\n\r\nWhen trying to run mypy on the command line I get this error however:\r\n```\r\ncom/fish/time/time_range_pb2.pyi:45: error: invalid syntax\r\n```\r\n\r\nThe relevant lines:\r\n```\r\n 42 class TimeRange(google___protobuf___message___Message):\r\n 43 \r\n 44     @property\r\n 45     def from(self) -> google___protobuf___timestamp_pb2___Timestamp: ...\r\n 46 \r\n```\r\n\r\nI'm using this command line to check the types:\r\n```\r\nmypy --ignore-missing-imports --python-version 3.7 --namespace-packages --check-untyped-defs -p fish\r\n```\r\nwhere the `com` and `fish` directories reside inside the same directory, and `fish` is importing protobufs from `com`.\r\n\r\nBefore adding the `--namespace-packages` mypy did finish, but it didn't seem like it took the types of the protobufs into account.\r\n\r\nThe protobufs are generated by\r\n```\r\npython3 -m grpc_tools.protoc -I ./proto --python_out=. --mypy_out=. --grpc_python_out=. ./proto/com/fish/*/*.proto\r\n```\r\n\r\nmypy version 0.701, Python 3.7.3\r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/75", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/75/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/75/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/75", "id": 448384421, "node_id": "MDU6SXNzdWU0NDgzODQ0MjE=", "number": 75, "title": "`run_test.sh` does not work out of a python3 virtual environment", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-24T23:24:24Z", "updated_at": "2019-05-26T07:03:07Z", "closed_at": "2019-05-26T07:03:07Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Seeing\r\n```\r\nE           AssertionError: Pattern 'Unknown field garbage.' not found in 'Protocol message SimpleProto3 has no field garbage.'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/73", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/73/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/73/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/73", "id": 448010992, "node_id": "MDU6SXNzdWU0NDgwMTA5OTI=", "number": 73, "title": "Syntax error output if a field is named 'from'", "user": {"login": "gaggle", "id": 2316447, "node_id": "MDQ6VXNlcjIzMTY0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2316447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaggle", "html_url": "https://github.com/gaggle", "followers_url": "https://api.github.com/users/gaggle/followers", "following_url": "https://api.github.com/users/gaggle/following{/other_user}", "gists_url": "https://api.github.com/users/gaggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaggle/subscriptions", "organizations_url": "https://api.github.com/users/gaggle/orgs", "repos_url": "https://api.github.com/users/gaggle/repos", "events_url": "https://api.github.com/users/gaggle/events{/privacy}", "received_events_url": "https://api.github.com/users/gaggle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-24T07:04:16Z", "updated_at": "2019-05-27T02:30:32Z", "closed_at": "2019-05-27T02:30:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "This tool generates .pyi files with syntax error when parsing a proto-file with a field named `from`. E.g. `foo.proto`:\r\n```\r\nmessage FooRequest {\r\n\tint64 from = 5;\r\n}\r\n```\r\n\r\nRunning mypy on a project with this kind of autogenerated files results in syntax error:\r\n```\r\n$ mypy\r\npackage/schemas/foo_pb2.pyi:356: error: invalid syntax\r\n```\r\n\r\nThis is because the `foo_pb2.pyi` file has this in it:\r\n```\r\nclass FooRequest(google___protobuf___message___Message):\r\n    from = ... # type: int\r\n```\r\n\r\nThe `from = ...` is invalid syntax, and so we have a problem.\r\n\r\nJust to say I've set up my mypy to ignore these files, `mypy.ini`:\r\n```\r\n[mypy]\r\n\r\n[mypy-package.schemas.*]\r\nignore_errors = True\r\n```\r\n\r\nBut this doesn't ignore syntax errors. As per https://github.com/python/mypy/issues/6897 mypy **can't** ignore syntax errors. It would be favorable if this project did not generate syntax-invalid output.\r\n\r\nI'm using versions:\r\n```\r\n$ python --version Python 3.6.7\r\nmypy==0.701\r\nmypy-protobuf==1.10\r\n```\r\n\r\nAnd here is a gist with the entire contents of the `.proto` file, the generated `.py` file (which does not have syntax errors and the problematic and unexcludable `.pyi` file:\r\nhttps://gist.github.com/gaggle/8aef6102d314936c9eb33724194682b0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/71", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/71/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/71/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/71", "id": 443075483, "node_id": "MDU6SXNzdWU0NDMwNzU0ODM=", "number": 71, "title": "Generated constructors incorrectly accept positional arguments", "user": {"login": "erictraut", "id": 7040122, "node_id": "MDQ6VXNlcjcwNDAxMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7040122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erictraut", "html_url": "https://github.com/erictraut", "followers_url": "https://api.github.com/users/erictraut/followers", "following_url": "https://api.github.com/users/erictraut/following{/other_user}", "gists_url": "https://api.github.com/users/erictraut/gists{/gist_id}", "starred_url": "https://api.github.com/users/erictraut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erictraut/subscriptions", "organizations_url": "https://api.github.com/users/erictraut/orgs", "repos_url": "https://api.github.com/users/erictraut/repos", "events_url": "https://api.github.com/users/erictraut/events{/privacy}", "received_events_url": "https://api.github.com/users/erictraut/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-05-12T07:42:05Z", "updated_at": "2019-05-26T07:18:00Z", "closed_at": "2019-05-26T07:18:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "The annotated `__init__` method generated for a protobuf message accepts positional arguments, but the underlying implementation accepts only named arguments. The first parameter after `self` should be a nameless `*` parameter. This will tell mypy and other type checkers that positional arguments are not allowed when calling the constructor.\r\n\r\nFor example, a protobuf message with a `string: name` field will generate the following annotated stub:\r\n```\r\nclass MyMessage(google___protobuf___message___Message):\r\n    name = ... # type: typing___Text\r\n\r\n    def __init__(self,\r\n        name : typing___Optional[typing___Text] = None) -> None: ...\r\n```\r\n\r\nIf callers attempt to construct this message by calling `MyMessage('bob')`, a runtime error occurs indicating that positional arguments are not allowed for this call.\r\n\r\nTo match the underlying implementation, it should be:\r\n```\r\n    def __init__(self, *,\r\n        name : typing___Optional[typing___Text] = None) -> None: ...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/65", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/65/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/65/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/65", "id": 413793357, "node_id": "MDU6SXNzdWU0MTM3OTMzNTc=", "number": 65, "title": "False positive for accessing enum \"instance fields\"", "user": {"login": "ikonst", "id": 1186084, "node_id": "MDQ6VXNlcjExODYwODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1186084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ikonst", "html_url": "https://github.com/ikonst", "followers_url": "https://api.github.com/users/ikonst/followers", "following_url": "https://api.github.com/users/ikonst/following{/other_user}", "gists_url": "https://api.github.com/users/ikonst/gists{/gist_id}", "starred_url": "https://api.github.com/users/ikonst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ikonst/subscriptions", "organizations_url": "https://api.github.com/users/ikonst/orgs", "repos_url": "https://api.github.com/users/ikonst/repos", "events_url": "https://api.github.com/users/ikonst/events{/privacy}", "received_events_url": "https://api.github.com/users/ikonst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-24T07:52:43Z", "updated_at": "2019-06-10T18:47:25Z", "closed_at": "2019-06-10T18:47:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example, let's assume a `Money` message (containing amount and currency) and a `Money.Currency` enum.\r\n\r\nThis should be valid:\r\n```py\r\nsome_money = Money()\r\nsome_money.amount = 200\r\nsome_money.currency = Money.USD\r\n```\r\nand\r\n```py\r\nsome_money.currency = Money.Currency.Value('CAD')\r\n```\r\nHowever, this should be invalid (but is currently valid):\r\n```py\r\ncad = some_money.currency.Value('CAD')\r\n```\r\n\r\nSimilarly, this is a false positive:\r\n```py\r\nMoney.Currency('CAD')\r\n```\r\nsince it finds `int.__init__` although in runtime it would result in:\r\n```\r\nTypeError: 'EnumTypeWrapper' object is not callable\r\n```\r\n\r\nOne way to solve it would be introduce a `CurrencyValue`:\r\n```py\r\nclass Money(google___protobuf___message___Message):\r\n  CurrencyValue = NewType('int')\r\n  class Currency:\r\n    DESCRIPTOR: ...\r\n    ...\r\n  USD = typing___cast(CurrencyValue, 1)\r\n  ...\r\n```\r\nThis would be a breaking change since it'll require changing any signature accepting `Money.Currency`. Also, since it exists only in the type stubs, you'd have to quote it, i.e.\r\n```\r\ndef do_something(currency: 'Money.CurrencyValue'):\r\n```\r\n\r\nAlternatively, there might be some (new?) mypy construct that allows to designate fields and functions as class-access only -- basically the same as its built-in (hardcoded, from what I could tell) support for `enum`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/62", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/62/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/62/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/62", "id": 413086410, "node_id": "MDU6SXNzdWU0MTMwODY0MTA=", "number": 62, "title": "HasField, ClearField, WhichOneof are stringly typed - mypy doesn't catch issues", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-21T19:27:52Z", "updated_at": "2019-03-25T20:33:29Z", "closed_at": "2019-02-26T02:13:53Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "```def HasField(self, field_name: Text) -> bool: ...\r\ndef ClearField(self, field_name: Text) -> None: ...\r\ndef WhichOneof(self, oneof_group) -> Optional[Text]: ...\r\n```\r\n\r\nWe could type these more strongly in mypy-protobuf using Literal, which would only allow valid field names.\r\n\r\nEg.\r\n```\r\nUnion[Literal[\"field1\"], Literal[\"field2\"]]\r\n```\r\n\r\nCurrently, if we try this in mypy-protobuf, we get errors of the format\r\n```\r\ndropbox/proto/nucleus/types_pb2.pyi:40: error: Argument 1 of \"HasField\" incompatible with supertype \"Message\"\r\n```\r\n\r\nhowever, I confirmed if we either\r\n1) remove HasField from the supertype\r\n2) mark the supertype as `Any` rather than Text\r\n\r\nthen mypy-protobuf can provide better typing on the specific instances of Message\r\n\r\nI'll propose (1) to typeshed under the argument that you can't usefully call `HasField` on a Message without some additional knowledge of the real type.\r\n\r\nThis proposal would prevent a duck-typey use case\r\n```\r\nMessage1 {\r\n   a,\r\n   b,\r\n}\r\nMessage2 {\r\n   b,\r\n   c,\r\n}\r\n```\r\n\r\n```\r\nif m.HasField(\"b\"):\r\n    quack(b)\r\n```\r\n\r\nBut if a caller is trying to ducktype, they could work around this by requiring `m` to be typed with a more specific protocol type.\r\n\r\nFor most cases, forcing HasField to be a literal will be better.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/60", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/60/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/60/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/60", "id": 398499244, "node_id": "MDU6SXNzdWUzOTg0OTkyNDQ=", "number": 60, "title": "pycharm completions are broken", "user": {"login": "AlmogCohen", "id": 3888998, "node_id": "MDQ6VXNlcjM4ODg5OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3888998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlmogCohen", "html_url": "https://github.com/AlmogCohen", "followers_url": "https://api.github.com/users/AlmogCohen/followers", "following_url": "https://api.github.com/users/AlmogCohen/following{/other_user}", "gists_url": "https://api.github.com/users/AlmogCohen/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlmogCohen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlmogCohen/subscriptions", "organizations_url": "https://api.github.com/users/AlmogCohen/orgs", "repos_url": "https://api.github.com/users/AlmogCohen/repos", "events_url": "https://api.github.com/users/AlmogCohen/events{/privacy}", "received_events_url": "https://api.github.com/users/AlmogCohen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-12T00:27:40Z", "updated_at": "2019-02-12T23:06:04Z", "closed_at": "2019-01-12T07:21:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Generating [this file](https://github.com/tetration-exchange/pol-client-java/blob/master/proto/network_enforcement/tetration_network_policy.proto) with `protoc --python_out=. --mypy_out=. tetration_network_policy.proto` on python 3.7. Python 3.6 tested with same results.\r\n\r\nThe resulting file is full of `Unresolved reference 'TetrationNetworkPolicyProto'` errors and auto-completions does not work. You can check the screenshot here: \r\n![image](https://user-images.githubusercontent.com/3888998/51066087-28dbb380-15bd-11e9-8c48-426223ec6516.png)\r\n\r\nWhen I simply delete all the `TetrationNetworkPolicyProto.` occurrences in the file, tada! All errors are gone and completions throughout the project work great. I'm not versed enough with the mechanics of python typing yet so I've had no insights for where the problem could be coming from.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/56", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/56/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/56/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/56", "id": 383964166, "node_id": "MDU6SXNzdWUzODM5NjQxNjY=", "number": 56, "title": "Mypy errors out on enum and nested types (they are mis-annotated?)", "user": {"login": "abhishekrb19", "id": 8687261, "node_id": "MDQ6VXNlcjg2ODcyNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/8687261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhishekrb19", "html_url": "https://github.com/abhishekrb19", "followers_url": "https://api.github.com/users/abhishekrb19/followers", "following_url": "https://api.github.com/users/abhishekrb19/following{/other_user}", "gists_url": "https://api.github.com/users/abhishekrb19/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhishekrb19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhishekrb19/subscriptions", "organizations_url": "https://api.github.com/users/abhishekrb19/orgs", "repos_url": "https://api.github.com/users/abhishekrb19/repos", "events_url": "https://api.github.com/users/abhishekrb19/events{/privacy}", "received_events_url": "https://api.github.com/users/abhishekrb19/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-24T06:35:54Z", "updated_at": "2019-06-10T18:43:48Z", "closed_at": "2019-06-10T18:43:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I noticed `mypy` check fails on enum and nested types usage. I tweaked the `test_generated_mypy.py` to minimally reproduce the issue. \r\n\r\n\r\n[https://github.com/dropbox/mypy-protobuf/blob/master/test/test_generated_mypy.py#L52](https://github.com/dropbox/mypy-protobuf/blob/master/test/test_generated_mypy.py#L52\r\n)\r\n\r\nPassing an enum instead:\r\n\r\n`s = Simple1(a_enum=1)\r\n`\r\n\r\nThe example runs fine though, but `mypy` complains of incompatible type. Please see error below:\r\n\r\n```\r\nmypy --py2 test/test_generated_mypy.py\r\n```\r\n> test/test_generated_mypy.py:70: error: Argument \"a_enum\" to \"Simple1\" has incompatible type \"int\"; expected \"Optional[OuterEnum]\"\r\n\r\nPlease see the type hint here:\r\nhttps://github.com/dropbox/mypy-protobuf/blob/master/test/proto/test_pb2.pyi.expected#L126\r\n\r\nShould the type hint say `int` (or `str`?) instead of the enum type (`OuterEnum` here)? Or am I missing something here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/51", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/51/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/51/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/51", "id": 369737761, "node_id": "MDU6SXNzdWUzNjk3Mzc3NjE=", "number": 51, "title": "Import from other files is broken if the imported type is not in a package", "user": {"login": "pcorpet", "id": 7937848, "node_id": "MDQ6VXNlcjc5Mzc4NDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7937848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcorpet", "html_url": "https://github.com/pcorpet", "followers_url": "https://api.github.com/users/pcorpet/followers", "following_url": "https://api.github.com/users/pcorpet/following{/other_user}", "gists_url": "https://api.github.com/users/pcorpet/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcorpet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcorpet/subscriptions", "organizations_url": "https://api.github.com/users/pcorpet/orgs", "repos_url": "https://api.github.com/users/pcorpet/repos", "events_url": "https://api.github.com/users/pcorpet/events{/privacy}", "received_events_url": "https://api.github.com/users/pcorpet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-12T23:06:54Z", "updated_at": "2018-10-17T20:21:58Z", "closed_at": "2018-10-17T20:21:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Before importing a type, the current code checks whether it's in a package and then do not import it if it's not. I'll send a fix shortly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/50", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/50/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/50/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/50", "id": 368827104, "node_id": "MDU6SXNzdWUzNjg4MjcxMDQ=", "number": 50, "title": "Any way to use with PyCharm", "user": {"login": "asyncee", "id": 701191, "node_id": "MDQ6VXNlcjcwMTE5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/701191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asyncee", "html_url": "https://github.com/asyncee", "followers_url": "https://api.github.com/users/asyncee/followers", "following_url": "https://api.github.com/users/asyncee/following{/other_user}", "gists_url": "https://api.github.com/users/asyncee/gists{/gist_id}", "starred_url": "https://api.github.com/users/asyncee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asyncee/subscriptions", "organizations_url": "https://api.github.com/users/asyncee/orgs", "repos_url": "https://api.github.com/users/asyncee/repos", "events_url": "https://api.github.com/users/asyncee/events{/privacy}", "received_events_url": "https://api.github.com/users/asyncee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-10T19:55:55Z", "updated_at": "2018-10-15T22:32:28Z", "closed_at": "2018-10-11T06:24:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, sorry for offtopic, but as PyCharm supports pyi files internally, are there known way to configure PyCharm to understand mypy-protobuf generated files? I tried to configure it, but failed, no completion achieved.\r\n\r\nThanks. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/47", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/47/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/47/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/47", "id": 366453528, "node_id": "MDU6SXNzdWUzNjY0NTM1Mjg=", "number": 47, "title": "Gate the mypy generation of generic service stubs to only appear when py_generic_services is set.", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 776028034, "node_id": "MDU6TGFiZWw3NzYwMjgwMzQ=", "url": "https://api.github.com/repos/dropbox/mypy-protobuf/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": null}, {"id": 776028033, "node_id": "MDU6TGFiZWw3NzYwMjgwMzM=", "url": "https://api.github.com/repos/dropbox/mypy-protobuf/labels/help%20wanted", "name": "help wanted", "color": "33aa3f", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-03T17:47:17Z", "updated_at": "2018-10-03T18:24:40Z", "closed_at": "2018-10-03T18:24:40Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "We should gate the generation of generic service stubs in *_pb2.py to only appear when option py_generic_services = true; is set\r\n\r\nSee\r\nhttps://developers.google.com/protocol-buffers/docs/reference/python-generated#service\r\n\r\nNote that this is different than gRPC stubs which is covered in #46 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/45", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/45/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/45/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/45", "id": 362900895, "node_id": "MDU6SXNzdWUzNjI5MDA4OTU=", "number": 45, "title": "Doesn't work with `--grpc_python_out`", "user": {"login": "samuela", "id": 226872, "node_id": "MDQ6VXNlcjIyNjg3Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/226872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samuela", "html_url": "https://github.com/samuela", "followers_url": "https://api.github.com/users/samuela/followers", "following_url": "https://api.github.com/users/samuela/following{/other_user}", "gists_url": "https://api.github.com/users/samuela/gists{/gist_id}", "starred_url": "https://api.github.com/users/samuela/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samuela/subscriptions", "organizations_url": "https://api.github.com/users/samuela/orgs", "repos_url": "https://api.github.com/users/samuela/repos", "events_url": "https://api.github.com/users/samuela/events{/privacy}", "received_events_url": "https://api.github.com/users/samuela/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-23T00:09:15Z", "updated_at": "2018-09-26T23:23:22Z", "closed_at": "2018-09-25T18:18:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "The plugin runs fine for pure protobuf files, but it seems to trip up when using gRPC:\r\n\r\n```\r\n(venv) python [master ?] -> protoc -I../protos --python_out=. --grpc_python_out=. --mypy_out=. ../protos/pingpong.proto\r\nprotoc-gen-grpc_python: program not found or is not executable\r\n--grpc_python_out: protoc-gen-grpc_python: Plugin failed with status code 1.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/43", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/43/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/43/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/43", "id": 361270901, "node_id": "MDU6SXNzdWUzNjEyNzA5MDE=", "number": 43, "title": "What is the minimum proto version and python version needed?", "user": {"login": "debraj-manna", "id": 8141860, "node_id": "MDQ6VXNlcjgxNDE4NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8141860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/debraj-manna", "html_url": "https://github.com/debraj-manna", "followers_url": "https://api.github.com/users/debraj-manna/followers", "following_url": "https://api.github.com/users/debraj-manna/following{/other_user}", "gists_url": "https://api.github.com/users/debraj-manna/gists{/gist_id}", "starred_url": "https://api.github.com/users/debraj-manna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/debraj-manna/subscriptions", "organizations_url": "https://api.github.com/users/debraj-manna/orgs", "repos_url": "https://api.github.com/users/debraj-manna/repos", "events_url": "https://api.github.com/users/debraj-manna/events{/privacy}", "received_events_url": "https://api.github.com/users/debraj-manna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-18T12:04:01Z", "updated_at": "2018-09-19T08:45:19Z", "closed_at": "2018-09-19T08:45:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "On trying to use this with proto 2.5.0 and python 2.7 I am getting the below error\r\n\r\n```\r\n  [exec] Traceback (most recent call last):\r\n     [exec]   File \"/Users/dmanna/Documents/fresh_code/github/vnera/main/main/venv/bin/protoc-gen-mypy\", line 364, in <module>\r\n     [exec]     main()\r\n     [exec]   File \"/Users/dmanna/Documents/fresh_code/github/vnera/main/main/venv/bin/protoc-gen-mypy\", line 351, in main\r\n     [exec]     generate_mypy_stubs(Descriptors(request), response, \"quiet\" in request.parameter)\r\n     [exec]   File \"/Users/dmanna/Documents/fresh_code/github/vnera/main/main/venv/bin/protoc-gen-mypy\", line 293, in generate_mypy_stubs\r\n     [exec]     pkg_writer.write_messages(fd.message_type, \"\")\r\n     [exec]   File \"/Users/dmanna/Documents/fresh_code/github/vnera/main/main/venv/bin/protoc-gen-mypy\", line 169, in write_messages\r\n     [exec]     if msg.options.map_entry:\r\n     [exec] AttributeError: 'MessageOptions' object has no attribute 'map_entry'\r\n     [exec] --mypy_out: protoc-gen-mypy: Plugin failed with status code 1.\r\n     [exec] Result: 1\r\n\r\n```\r\n\r\n- Proto Version - 2.5.0\r\n- Python Version - 2.7.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/41", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/41/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/41/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/41", "id": 357844004, "node_id": "MDU6SXNzdWUzNTc4NDQwMDQ=", "number": 41, "title": "Mypy currently does not support module import references", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-09-06T22:00:18Z", "updated_at": "2020-05-13T08:56:34Z", "closed_at": "2020-05-13T08:56:33Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "eg\r\n```\r\nimport dropbox.proto.nucleus.types_pb2\r\nfrom dropbox.proto.nucleus.types_pb2 import FileId\r\nreveal_type(FileId)\r\nreveal_type(dropbox.proto.nucleus.types_pb2.FileId)\r\n```\r\n\r\nresults in\r\n```\r\ndropbox/proto/nucleus/app_service_pb2.pyi:17: error: Revealed type is 'def (id: Union[builtins.str, None] =) -> dropbox.proto.nucleus.types_pb2.FileId'\r\ndropbox/proto/nucleus/app_service_pb2.pyi:18: error: Revealed type is 'Any'\r\n```\r\n\r\nProposed workaround is:\r\n```\r\nfrom dropbox.proto.nucleus.types_pb2 import FileId as dropbox___proto___nucleus___types_pb2___FileId\r\n```\r\n\r\nUntil mypy gains support for module imports like this (see https://github.com/python/mypy/issues/5583).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/38", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/38/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/38/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/38", "id": 350180602, "node_id": "MDU6SXNzdWUzNTAxODA2MDI=", "number": 38, "title": "Support for nested imports", "user": {"login": "ikonst", "id": 1186084, "node_id": "MDQ6VXNlcjExODYwODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1186084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ikonst", "html_url": "https://github.com/ikonst", "followers_url": "https://api.github.com/users/ikonst/followers", "following_url": "https://api.github.com/users/ikonst/following{/other_user}", "gists_url": "https://api.github.com/users/ikonst/gists{/gist_id}", "starred_url": "https://api.github.com/users/ikonst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ikonst/subscriptions", "organizations_url": "https://api.github.com/users/ikonst/orgs", "repos_url": "https://api.github.com/users/ikonst/repos", "events_url": "https://api.github.com/users/ikonst/events{/privacy}", "received_events_url": "https://api.github.com/users/ikonst/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 776028033, "node_id": "MDU6TGFiZWw3NzYwMjgwMzM=", "url": "https://api.github.com/repos/dropbox/mypy-protobuf/labels/help%20wanted", "name": "help wanted", "color": "33aa3f", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-08-13T20:25:24Z", "updated_at": "2018-12-08T20:18:00Z", "closed_at": "2018-12-08T20:17:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "What will it take to add support for nested imports? This seems to be supported in the Go version but not in Python.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/33", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/33/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/33/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/33", "id": 328727659, "node_id": "MDU6SXNzdWUzMjg3Mjc2NTk=", "number": 33, "title": "Repeated enums cause the protogen to crash", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-02T08:57:19Z", "updated_at": "2018-06-02T09:02:48Z", "closed_at": "2018-06-02T09:02:48Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently, the repeated check for mapping support crashes if the message is an enum with a KeyError", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/29", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/29/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/29/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/29", "id": 328721300, "node_id": "MDU6SXNzdWUzMjg3MjEzMDA=", "number": 29, "title": "Same message name in different packages yields broken generated code", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-02T07:12:02Z", "updated_at": "2018-06-02T07:27:44Z", "closed_at": "2018-06-02T07:27:44Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Eg\r\n\r\n```\r\npackage test;\r\n\r\nimport test2\";\r\n\r\nmessage Inner {}\r\nmessage Msg {\r\n    Inner x = 1;\r\n    test2.Inner y = 2;\r\n}\r\n```\r\n\r\nSolution would be to use fully qualified paths", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/25", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/25/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/25/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/25", "id": 328716188, "node_id": "MDU6SXNzdWUzMjg3MTYxODg=", "number": 25, "title": "Imports from google.protobuf.service are not in typeshed", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-02T05:41:33Z", "updated_at": "2018-10-03T17:58:23Z", "closed_at": "2018-10-03T17:58:23Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hence, adding a service currently will result in mypy errors.\r\n\r\nI'm working on a workaround which sets these as Any in the meantime", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/24", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/24/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/24/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/24", "id": 327130774, "node_id": "MDU6SXNzdWUzMjcxMzA3NzQ=", "number": 24, "title": "Local Imports out of nested packages are mis-annotated", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-28T23:10:37Z", "updated_at": "2018-06-02T08:33:37Z", "closed_at": "2018-06-02T08:33:37Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "From https://github.com/dropbox/mypy-protobuf/pull/18 (thanks @jcppkkk)\r\n\r\nThis PR cause mypy-protobuf generate error pyi files that fail mypy check.\r\n\r\nFor example, in https://developers.google.com/protocol-buffers/docs/reference/python-generated there is a example command:\r\n\r\nprotoc --proto_path=src --python_out=build/gen src/foo.proto src/bar/baz.proto\r\nWhat if baz.proto imports foo.proto?\r\n\r\nimport \"foo.proto\";\r\nIt generate\r\n\r\nfrom .foo_pb2 import (\r\nand fails mypy check: cannot find module named foo_pb2; The same error happens to our project after update to 1.4.\r\n\r\nThis change need to calculate relative filepath between current file to target file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/23", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/23/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/23/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/23", "id": 326341971, "node_id": "MDU6SXNzdWUzMjYzNDE5NzE=", "number": 23, "title": "Run pep8 and mypy over python/protoc-gen-mypy in continuous integration", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 776028034, "node_id": "MDU6TGFiZWw3NzYwMjgwMzQ=", "url": "https://api.github.com/repos/dropbox/mypy-protobuf/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": null}, {"id": 776028033, "node_id": "MDU6TGFiZWw3NzYwMjgwMzM=", "url": "https://api.github.com/repos/dropbox/mypy-protobuf/labels/help%20wanted", "name": "help wanted", "color": "33aa3f", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-25T00:29:18Z", "updated_at": "2020-05-13T08:57:07Z", "closed_at": "2020-05-13T08:57:07Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Make it easier to ensure contributions pass tests / mypy / formatting!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/22", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/22/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/22/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/22", "id": 326340026, "node_id": "MDU6SXNzdWUzMjYzNDAwMjY=", "number": 22, "title": "Add testing for python protoc-gen-mypy", "user": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 776028033, "node_id": "MDU6TGFiZWw3NzYwMjgwMzM=", "url": "https://api.github.com/repos/dropbox/mypy-protobuf/labels/help%20wanted", "name": "help wanted", "color": "33aa3f", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-25T00:16:27Z", "updated_at": "2018-06-02T07:02:17Z", "closed_at": "2018-06-02T07:02:16Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Generate some example protos and verify the output of the protoc-gen-mypy script\r\n- Verify output matches expected\r\n- Verify output runs through mypy (syntactically correct)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/21", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/21/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/21/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/21", "id": 324110819, "node_id": "MDU6SXNzdWUzMjQxMTA4MTk=", "number": 21, "title": "Pulling a few more active maintainers?", "user": {"login": "drather19", "id": 1282632, "node_id": "MDQ6VXNlcjEyODI2MzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1282632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drather19", "html_url": "https://github.com/drather19", "followers_url": "https://api.github.com/users/drather19/followers", "following_url": "https://api.github.com/users/drather19/following{/other_user}", "gists_url": "https://api.github.com/users/drather19/gists{/gist_id}", "starred_url": "https://api.github.com/users/drather19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drather19/subscriptions", "organizations_url": "https://api.github.com/users/drather19/orgs", "repos_url": "https://api.github.com/users/drather19/repos", "events_url": "https://api.github.com/users/drather19/events{/privacy}", "received_events_url": "https://api.github.com/users/drather19/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 776028036, "node_id": "MDU6TGFiZWw3NzYwMjgwMzY=", "url": "https://api.github.com/repos/dropbox/mypy-protobuf/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-05-17T17:10:31Z", "updated_at": "2018-05-25T00:22:51Z", "closed_at": "2018-05-25T00:22:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just curious if this repository is going to be actively maintained going forward, since it's gone somewhat stagnant. We definitely appreciate having this utility around (big quality of life improvement when using Python and gRPC/protobuf).\r\n\r\nWondering whether we should either (a.) invite in a few more active maintainers for this repo (i.e., to help review/merge PR's, etc.) or (b.) fork it and move on.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/12", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/12/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/12/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/12", "id": 313892114, "node_id": "MDU6SXNzdWUzMTM4OTIxMTQ=", "number": 12, "title": "Python version doesn't treat maps the same way as the Go version", "user": {"login": "drather19", "id": 1282632, "node_id": "MDQ6VXNlcjEyODI2MzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1282632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drather19", "html_url": "https://github.com/drather19", "followers_url": "https://api.github.com/users/drather19/followers", "following_url": "https://api.github.com/users/drather19/following{/other_user}", "gists_url": "https://api.github.com/users/drather19/gists{/gist_id}", "starred_url": "https://api.github.com/users/drather19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drather19/subscriptions", "organizations_url": "https://api.github.com/users/drather19/orgs", "repos_url": "https://api.github.com/users/drather19/repos", "events_url": "https://api.github.com/users/drather19/events{/privacy}", "received_events_url": "https://api.github.com/users/drather19/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-12T21:21:37Z", "updated_at": "2018-05-25T00:29:57Z", "closed_at": "2018-05-25T00:29:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The generated stubs in the Python version emit maps as RepeatedScalarFieldContainer types rather than as MutableMapping types as the Go version does. The latter approach (Go) seems to be correct and working.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/10", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/10/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/10/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/10", "id": 309229451, "node_id": "MDU6SXNzdWUzMDkyMjk0NTE=", "number": 10, "title": "Document maintenance/compatibility of python vs go implementation", "user": {"login": "sconover", "id": 14555, "node_id": "MDQ6VXNlcjE0NTU1", "avatar_url": "https://avatars3.githubusercontent.com/u/14555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sconover", "html_url": "https://github.com/sconover", "followers_url": "https://api.github.com/users/sconover/followers", "following_url": "https://api.github.com/users/sconover/following{/other_user}", "gists_url": "https://api.github.com/users/sconover/gists{/gist_id}", "starred_url": "https://api.github.com/users/sconover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sconover/subscriptions", "organizations_url": "https://api.github.com/users/sconover/orgs", "repos_url": "https://api.github.com/users/sconover/repos", "events_url": "https://api.github.com/users/sconover/events{/privacy}", "received_events_url": "https://api.github.com/users/sconover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-28T05:49:41Z", "updated_at": "2018-06-03T03:53:17Z", "closed_at": "2018-06-03T03:53:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm curious about (a) what the decisionmaking process / motivation was behind the creation of each implementation (including motivation for language selection), and (b) how you see the overall tech investment/support for each of these playing out over time. Will you be making an effort to keep one implementation functionally and qualitatively equivalent to the other?\r\n\r\nIf it's possible, could you also please characterize how each of these implementations is used inside dropbox?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/8", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/8/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/8/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/8", "id": 303946503, "node_id": "MDU6SXNzdWUzMDM5NDY1MDM=", "number": 8, "title": "Replace dash with underscore in file names", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 776028033, "node_id": "MDU6TGFiZWw3NzYwMjgwMzM=", "url": "https://api.github.com/repos/dropbox/mypy-protobuf/labels/help%20wanted", "name": "help wanted", "color": "33aa3f", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-09T19:03:08Z", "updated_at": "2018-05-17T21:01:51Z", "closed_at": "2018-05-17T21:01:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Protoc replaces dashes with underscore when creating python modules (i.e. `my-file.proto` will generate `my_file_pb2.py`). However, mypy-protobuf still creates `my-file_pb2.pyi`. It should probably also generate `my_file_pb2.pyi`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/7", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/7/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/7/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/7", "id": 301554593, "node_id": "MDU6SXNzdWUzMDE1NTQ1OTM=", "number": 7, "title": "mypy import RepeatedScalarFieldContainer, not found", "user": {"login": "selimyoussry", "id": 14878059, "node_id": "MDQ6VXNlcjE0ODc4MDU5", "avatar_url": "https://avatars3.githubusercontent.com/u/14878059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selimyoussry", "html_url": "https://github.com/selimyoussry", "followers_url": "https://api.github.com/users/selimyoussry/followers", "following_url": "https://api.github.com/users/selimyoussry/following{/other_user}", "gists_url": "https://api.github.com/users/selimyoussry/gists{/gist_id}", "starred_url": "https://api.github.com/users/selimyoussry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selimyoussry/subscriptions", "organizations_url": "https://api.github.com/users/selimyoussry/orgs", "repos_url": "https://api.github.com/users/selimyoussry/repos", "events_url": "https://api.github.com/users/selimyoussry/events{/privacy}", "received_events_url": "https://api.github.com/users/selimyoussry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-01T20:50:15Z", "updated_at": "2018-04-09T23:58:59Z", "closed_at": "2018-03-31T09:40:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys, great work! This is already really helpful, thanks :).\r\n\r\nI am having an issue with the generated code for `repeated` fields, I see you are using `RepeatedScalarFieldContainer` from `mypy`, but with version 0.560, I can't find it. Which version of `mypy` were you using for this to work?\r\n\r\nFor the record, in `myproto_pb2.pyi`, I am talking about the import\r\n```python\r\nfrom mypy import (\r\n    RepeatedScalarFieldContainer,\r\n)\r\n```\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/4", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/4/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/4/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/4", "id": 298936603, "node_id": "MDU6SXNzdWUyOTg5MzY2MDM=", "number": 4, "title": "Import for standard protobuf formats is wrong", "user": {"login": "nmiculinic", "id": 3183610, "node_id": "MDQ6VXNlcjMxODM2MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3183610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmiculinic", "html_url": "https://github.com/nmiculinic", "followers_url": "https://api.github.com/users/nmiculinic/followers", "following_url": "https://api.github.com/users/nmiculinic/following{/other_user}", "gists_url": "https://api.github.com/users/nmiculinic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmiculinic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmiculinic/subscriptions", "organizations_url": "https://api.github.com/users/nmiculinic/orgs", "repos_url": "https://api.github.com/users/nmiculinic/repos", "events_url": "https://api.github.com/users/nmiculinic/events{/privacy}", "received_events_url": "https://api.github.com/users/nmiculinic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-21T11:37:28Z", "updated_at": "2018-02-26T02:03:17Z", "closed_at": "2018-02-26T02:03:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Generates:\r\n\r\n```python \r\nfrom google.protobuf.timestamp import (\r\n    Timestamp,\r\n)\r\n```\r\n\r\nand it should be:\r\n```python\r\nfrom google.protobuf.timestamp_pb2 import (\r\n    Timestamp,\r\n)\r\n```\r\n\r\nsimilarly for other standard types:\r\n```python\r\nfrom google.protobuf.empty_pb2 import (\r\n    Empty,\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/2", "repository_url": "https://api.github.com/repos/dropbox/mypy-protobuf", "labels_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/2/comments", "events_url": "https://api.github.com/repos/dropbox/mypy-protobuf/issues/2/events", "html_url": "https://github.com/dropbox/mypy-protobuf/issues/2", "id": 296415502, "node_id": "MDU6SXNzdWUyOTY0MTU1MDI=", "number": 2, "title": "python2/3 incompatibility", "user": {"login": "nmiculinic", "id": 3183610, "node_id": "MDQ6VXNlcjMxODM2MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3183610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmiculinic", "html_url": "https://github.com/nmiculinic", "followers_url": "https://api.github.com/users/nmiculinic/followers", "following_url": "https://api.github.com/users/nmiculinic/following{/other_user}", "gists_url": "https://api.github.com/users/nmiculinic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmiculinic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmiculinic/subscriptions", "organizations_url": "https://api.github.com/users/nmiculinic/orgs", "repos_url": "https://api.github.com/users/nmiculinic/repos", "events_url": "https://api.github.com/users/nmiculinic/events{/privacy}", "received_events_url": "https://api.github.com/users/nmiculinic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-12T15:29:20Z", "updated_at": "2018-02-14T15:46:29Z", "closed_at": "2018-02-14T15:46:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nWriting mypy to oracle_pb2.pyi\r\nWriting mypy to types_pb2.pyi\r\nTraceback (most recent call last):\r\n  File \"/home/lpp/go/src/github.com/nmiculinic/x/.venv/bin/protoc-gen-mypy\", line 313, in <module>\r\n    main()\r\n  File \"/home/lpp/go/src/github.com/nmiculinic/x/.venv/bin/protoc-gen-mypy\", line 310, in main\r\n    sys.stdout.write(output)\r\nTypeError: write() argument must be str, not bytes\r\n--mypy_out: protoc-gen-mypy: Plugin failed with status code 1.\r\n```\r\npython is mapped to: Python 3.6.4\r\n", "performed_via_github_app": null, "score": 1.0}]}