{"total_count": 25, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/77", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/77/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/77/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/77", "id": 679592728, "node_id": "MDU6SXNzdWU2Nzk1OTI3Mjg=", "number": 77, "title": "Does 3.3.0 actually not work on Python 3.3?", "user": {"login": "mrmachine", "id": 51939, "node_id": "MDQ6VXNlcjUxOTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/51939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmachine", "html_url": "https://github.com/mrmachine", "followers_url": "https://api.github.com/users/mrmachine/followers", "following_url": "https://api.github.com/users/mrmachine/following{/other_user}", "gists_url": "https://api.github.com/users/mrmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmachine/subscriptions", "organizations_url": "https://api.github.com/users/mrmachine/orgs", "repos_url": "https://api.github.com/users/mrmachine/repos", "events_url": "https://api.github.com/users/mrmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmachine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-15T15:24:24Z", "updated_at": "2020-08-16T05:42:02Z", "closed_at": "2020-08-16T05:42:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I understand that you may no longer support Python 3.3 in this version (though it was not mentioned in the changelog), but `setup.py` explicitly prohibits installation on 3.3 via `python_requires`. Looking at the commits in that release (since 3.2.0) I can see that it was dropped from the test grid, but nothing else obviously indicates that it won't actually run on Python 3.3 (if allowed to be installed).\r\n\r\nI have an old project that still runs Python 3.3, and I'd like to use 3.3.0 (for the `cache.lock(auto_renewal=True)` convenience feature. But it seems I'll have to fork the project just to remove `python_requires`?\r\n\r\nI'd love it if `python_requires` in future versions only excluded Python versions that definitely do not work (e.g. a critical wontfix bug has been reported), rather than versions that are EOL or that you no longer want to support.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/76", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/76/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/76/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/76", "id": 665095406, "node_id": "MDU6SXNzdWU2NjUwOTU0MDY=", "number": 76, "title": "3.6 test failures", "user": {"login": "Bubu", "id": 105185, "node_id": "MDQ6VXNlcjEwNTE4NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/105185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bubu", "html_url": "https://github.com/Bubu", "followers_url": "https://api.github.com/users/Bubu/followers", "following_url": "https://api.github.com/users/Bubu/following{/other_user}", "gists_url": "https://api.github.com/users/Bubu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bubu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bubu/subscriptions", "organizations_url": "https://api.github.com/users/Bubu/orgs", "repos_url": "https://api.github.com/users/Bubu/repos", "events_url": "https://api.github.com/users/Bubu/events{/privacy}", "received_events_url": "https://api.github.com/users/Bubu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-24T11:05:48Z", "updated_at": "2020-07-24T12:53:55Z", "closed_at": "2020-07-24T12:53:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get the following test failures on 3.6. All tests pass on 3.5.\r\n```\r\n=========================================================================================================== short test summary info ===========================================================================================================\r\nFAILED tests/test_redis_lock.py::test_timeout_int_conversion[decode_responses=True-00] - redis_lock.InvalidTimeout: Timeout (0) cannot be less than or equal to 0\r\nFAILED tests/test_redis_lock.py::test_timeout_int_conversion[decode_responses=True-01] - redis_lock.InvalidTimeout: Timeout (0) cannot be less than or equal to 0\r\nFAILED tests/test_redis_lock.py::test_timeout_int_conversion[decode_responses=False-00] - redis_lock.InvalidTimeout: Timeout (0) cannot be less than or equal to 0\r\nFAILED tests/test_redis_lock.py::test_timeout_int_conversion[decode_responses=False-01] - redis_lock.InvalidTimeout: Timeout (0) cannot be less than or equal to 0\r\nFAILED tests/test_redis_lock.py::test_expire_less_than_timeout[decode_responses=True] - redis_lock.TimeoutTooLarge: Timeout (2) cannot be greater than expire (1)\r\nFAILED tests/test_redis_lock.py::test_expire_less_than_timeout[decode_responses=False] - redis_lock.TimeoutTooLarge: Timeout (2) cannot be greater than expire (1)\r\nFAILED tests/test_redis_lock.py::test_expire_int_conversion - assert 0 is None\r\nFAILED tests/test_redis_lock.py::test_borken_expires - AttributeError: 'object' object has no attribute 'evalsha'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/74", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/74/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/74/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/74", "id": 620575351, "node_id": "MDU6SXNzdWU2MjA1NzUzNTE=", "number": 74, "title": "Cannot set timeout greater than expire", "user": {"login": "frogger72", "id": 28314581, "node_id": "MDQ6VXNlcjI4MzE0NTgx", "avatar_url": "https://avatars2.githubusercontent.com/u/28314581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frogger72", "html_url": "https://github.com/frogger72", "followers_url": "https://api.github.com/users/frogger72/followers", "following_url": "https://api.github.com/users/frogger72/following{/other_user}", "gists_url": "https://api.github.com/users/frogger72/gists{/gist_id}", "starred_url": "https://api.github.com/users/frogger72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frogger72/subscriptions", "organizations_url": "https://api.github.com/users/frogger72/orgs", "repos_url": "https://api.github.com/users/frogger72/repos", "events_url": "https://api.github.com/users/frogger72/events{/privacy}", "received_events_url": "https://api.github.com/users/frogger72/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-18T23:52:50Z", "updated_at": "2020-07-23T20:28:31Z", "closed_at": "2020-07-23T20:28:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I may be missing something, but why is this prohibited, especially when there is auto_renewal which can be used with a small expire?\r\n\r\n`redis_lock.TimeoutTooLarge: Timeout (60) cannot be greater than expire (5)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/73", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/73/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/73/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/73", "id": 603896542, "node_id": "MDU6SXNzdWU2MDM4OTY1NDI=", "number": 73, "title": "Lock became infinite? ", "user": {"login": "marcinn", "id": 139032, "node_id": "MDQ6VXNlcjEzOTAzMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/139032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcinn", "html_url": "https://github.com/marcinn", "followers_url": "https://api.github.com/users/marcinn/followers", "following_url": "https://api.github.com/users/marcinn/following{/other_user}", "gists_url": "https://api.github.com/users/marcinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcinn/subscriptions", "organizations_url": "https://api.github.com/users/marcinn/orgs", "repos_url": "https://api.github.com/users/marcinn/repos", "events_url": "https://api.github.com/users/marcinn/events{/privacy}", "received_events_url": "https://api.github.com/users/marcinn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-21T10:42:31Z", "updated_at": "2020-07-24T09:49:41Z", "closed_at": "2020-07-23T20:28:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\nI have a lock defined as:\r\n```\r\n    lock = redis.Lock(\r\n        \"servicebook.tasks.emit_servicebook_notifications\",\r\n        expire=240,\r\n        auto_renewal=True\r\n    )\r\n```\r\n\r\nI'm acquiring it that way:\r\n```\r\nif lock.acquire(blocking=False):\r\n  try:\r\n    ...\r\n  finally:\r\n    lock.release()\r\n```\r\n\r\nToday our customer reported us an issue. Our background task, which relies on redis lock, was not executing. I've checked the key and I've found that:\r\n\r\n```\r\n127.0.0.1:6379> GET \"lock:servicebook.tasks.emit_servicebook_notifications\"\r\n\"GxwErhZvp2QmLvacH/pVgjGj\"\r\n127.0.0.1:6379> TTL \"lock:servicebook.tasks.emit_servicebook_notifications\"\r\n(integer) -1\r\n```\r\n\r\nThe TTL was set to infinite, so lock was always held.\r\n\r\nBefore I switched to `lock.acquire(blocking=False)` we had a code ran with `blocking=True`.  Our background tasks are  managed by RQ and sometimes they were killed due to timeout. To avoid timeouts I changed blocking=True to blocking=False. There were no other changes, upgrades nor manual changes to Redis db. \r\n\r\nI wonder how it is possible that lock automatically changed its expiration time to infinite. There is a risk that this would happen again. Any thoughts? Feel free to ask anything If I can help somehow. \r\n\r\nNOTE: We have several machines running same app servers (failover & load balancing).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/71", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/71/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/71/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/71", "id": 519016084, "node_id": "MDU6SXNzdWU1MTkwMTYwODQ=", "number": 71, "title": "Is there another race condition when a lock is released?", "user": {"login": "mt3925", "id": 7368397, "node_id": "MDQ6VXNlcjczNjgzOTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7368397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mt3925", "html_url": "https://github.com/mt3925", "followers_url": "https://api.github.com/users/mt3925/followers", "following_url": "https://api.github.com/users/mt3925/following{/other_user}", "gists_url": "https://api.github.com/users/mt3925/gists{/gist_id}", "starred_url": "https://api.github.com/users/mt3925/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mt3925/subscriptions", "organizations_url": "https://api.github.com/users/mt3925/orgs", "repos_url": "https://api.github.com/users/mt3925/repos", "events_url": "https://api.github.com/users/mt3925/events{/privacy}", "received_events_url": "https://api.github.com/users/mt3925/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-07T03:23:32Z", "updated_at": "2019-12-06T15:49:55Z", "closed_at": "2019-11-19T21:09:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/ionelmc/python-redis-lock/blob/a30bd138f0f3060cc1f51d6a377b4067fae4dda9/src/redis_lock/__init__.py#L362-L368\r\n\r\nAs shown above, the step to release the lock is 1. Execute the `UNLOCK` script 2. Execute the `_delete_signal` function.\r\nConsider a situation with two processes:\r\n- Process 1 currently holds a lock.\r\n- process 2 is ready to acquire the lock.\r\n\r\nNow, suppose that the following sequence of events unfolds:\r\n- process 2 executes the `SETNX` command to obtain the lock but does not get it.\r\n- Process 1 executes the `UNLOCK` script to release the lock.\r\n- process 1 executes the `_delete_signal` function.\r\n- process 2 executes the `BLPOP` command. It then waits for a timeout to acquire the lock again, and that's the problem.\r\n\r\nSo I wonder why there ended up with a `_delete_signal` function. Can you explain it a little bit?\r\n\r\nI think this guy's got the same problem. https://github.com/ionelmc/python-redis-lock/issues/58#issuecomment-348712157", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/64", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/64/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/64/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/64", "id": 400602447, "node_id": "MDU6SXNzdWU0MDA2MDI0NDc=", "number": 64, "title": "UnicodeDecodeError when decoding owner_id", "user": {"login": "mayli", "id": 822628, "node_id": "MDQ6VXNlcjgyMjYyOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/822628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mayli", "html_url": "https://github.com/mayli", "followers_url": "https://api.github.com/users/mayli/followers", "following_url": "https://api.github.com/users/mayli/following{/other_user}", "gists_url": "https://api.github.com/users/mayli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mayli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mayli/subscriptions", "organizations_url": "https://api.github.com/users/mayli/orgs", "repos_url": "https://api.github.com/users/mayli/repos", "events_url": "https://api.github.com/users/mayli/events{/privacy}", "received_events_url": "https://api.github.com/users/mayli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-18T07:23:07Z", "updated_at": "2019-01-19T12:10:07Z", "closed_at": "2019-01-19T12:10:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nredis_lock/__init__.py\", line 219, in get_owner_id\r\n    owner_id = owner_id.decode('ascii')\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xec in position 0: ordinal not in range(128)\r\n```\r\n\r\nIt seems to be introduced by [this commit](https://github.com/ionelmc/python-redis-lock/commit/0db66094ff470c0f685ce32294d8c8615be069fe), which will crash the new version when trying to acquire an lock holding by the old version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/62", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/62/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/62/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/62", "id": 388297536, "node_id": "MDU6SXNzdWUzODgyOTc1MzY=", "number": 62, "title": "Could we get a release?", "user": {"login": "airhorns", "id": 158950, "node_id": "MDQ6VXNlcjE1ODk1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/158950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airhorns", "html_url": "https://github.com/airhorns", "followers_url": "https://api.github.com/users/airhorns/followers", "following_url": "https://api.github.com/users/airhorns/following{/other_user}", "gists_url": "https://api.github.com/users/airhorns/gists{/gist_id}", "starred_url": "https://api.github.com/users/airhorns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airhorns/subscriptions", "organizations_url": "https://api.github.com/users/airhorns/orgs", "repos_url": "https://api.github.com/users/airhorns/repos", "events_url": "https://api.github.com/users/airhorns/events{/privacy}", "received_events_url": "https://api.github.com/users/airhorns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-06T16:38:52Z", "updated_at": "2019-01-17T10:21:38Z", "closed_at": "2019-01-17T10:21:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's super awesome that there is a real, production ready locking primitive ready to go! Thanks for building this. Went to use the `auto_renew` functionality from master in Django and sadly was unable to! Confusingly the commit adding it is actually from before the most recent release, but it was only merged recently. A new release to PyPI would allow us to use it without introducing a git dependency! \r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/57", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/57/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/57/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/57", "id": 252893104, "node_id": "MDU6SXNzdWUyNTI4OTMxMDQ=", "number": 57, "title": "Fails when use StrictRedis with decode_responses=True", "user": {"login": "tsionyx", "id": 2960061, "node_id": "MDQ6VXNlcjI5NjAwNjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2960061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsionyx", "html_url": "https://github.com/tsionyx", "followers_url": "https://api.github.com/users/tsionyx/followers", "following_url": "https://api.github.com/users/tsionyx/following{/other_user}", "gists_url": "https://api.github.com/users/tsionyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsionyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsionyx/subscriptions", "organizations_url": "https://api.github.com/users/tsionyx/orgs", "repos_url": "https://api.github.com/users/tsionyx/repos", "events_url": "https://api.github.com/users/tsionyx/events{/privacy}", "received_events_url": "https://api.github.com/users/tsionyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-08-25T12:58:19Z", "updated_at": "2019-01-12T18:34:26Z", "closed_at": "2019-01-12T18:34:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I creating a `StrictRedis` instance I always set the additional parameter [`decode_responses=True`](https://github.com/andymccurdy/redis-py/blob/03c12da10dcfd6b5fe88ccd43fccc5bcc2d067d3/CHANGES#L296). However the lock is unusable with this setting because of manipulating with raw bytes `self.id` variable. As a result I get the following error:\r\n\r\n```  \r\n    with redis_lock.Lock(name):\r\n  File \"/home/tsionyx/.virtualenvs/test/lib/python3.5/site-packages/redis_lock/__init__.py\", line 322, in __enter__\r\n    acquired = self.acquire(blocking=True)\r\n  File \"/home/tsionyx/.virtualenvs/test/lib/python3.5/site-packages/redis_lock/__init__.py\", line 211, in acquire\r\n    if self._held:\r\n  File \"/home/tsionyx/.virtualenvs/test/lib/python3.5/site-packages/redis_lock/__init__.py\", line 186, in _held\r\n    return self.id == self.get_owner_id()\r\n  File \"/home/tsionyx/.virtualenvs/test/lib/python3.5/site-packages/redis_lock/__init__.py\", line 200, in get_owner_id\r\n    return self._client.get(self._name)\r\n  File \"/home/tsionyx/.virtualenvs/test/lib/python3.5/site-packages/redis/client.py\", line 880, in get\r\n    return self.execute_command('GET', name)\r\n  File \"/home/tsionyx/.virtualenvs/test/lib/python3.5/site-packages/redis/client.py\", line 573, in execute_command\r\n    return self.parse_response(connection, command_name, **options)\r\n  File \"/home/tsionyx/.virtualenvs/test/lib/python3.5/site-packages/redis/client.py\", line 585, in parse_response\r\n    response = connection.read_response()\r\n  File \"/home/tsionyx/.virtualenvs/test/lib/python3.5/site-packages/redis/connection.py\", line 577, in read_response\r\n    response = self._parser.read_response()\r\n  File \"/home/tsionyx/.virtualenvs/test/lib/python3.5/site-packages/redis/connection.py\", line 280, in read_response\r\n    response = response.decode(self.encoding)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x9f in position 3: invalid start byte\r\n```\r\n\r\nTested on Ubuntu 16.04 LTS, Python 2.7.12 and Python 3.5.2.\r\nRemoving the `decode_responses` eliminates the problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/53", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/53/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/53/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/53", "id": 169726080, "node_id": "MDU6SXNzdWUxNjk3MjYwODA=", "number": 53, "title": "Is this implementation suitable for multiple Redis/Django nodes on Docker Cloud?", "user": {"login": "mrmachine", "id": 51939, "node_id": "MDQ6VXNlcjUxOTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/51939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmachine", "html_url": "https://github.com/mrmachine", "followers_url": "https://api.github.com/users/mrmachine/followers", "following_url": "https://api.github.com/users/mrmachine/following{/other_user}", "gists_url": "https://api.github.com/users/mrmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmachine/subscriptions", "organizations_url": "https://api.github.com/users/mrmachine/orgs", "repos_url": "https://api.github.com/users/mrmachine/repos", "events_url": "https://api.github.com/users/mrmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmachine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-06T03:00:17Z", "updated_at": "2017-05-12T00:21:38Z", "closed_at": "2017-05-12T00:21:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am deploying a project to Docker Cloud which has a Django WSGI service scaled across multiple containers/nodes and a Redis service which is currently just a single container, but might also be scaled to several across multiple nodes.\n\nDocker Cloud is configured to automatically redeploy when a new image is detected on Docker Hub. So all I need to do is push a commit to my master branch, Travis CI builds a new image, runs tests, pushes the image to Docker Hub, then Docker Cloud redeploys the Django WSGI service.\n\nThe Django WSGI service has an entrypoint script that compares the expected vs current migration state by comparing the output of `manage.py migrate --list` which is saved into the image it is built, to the output of `manage.py migrate --list` on the running container against the live database. If the output is different, I am assuming that the live database is behind the image and migrations need to be applied.\n\nWhat I need to do is ensure that only one of these Django WSGI containers actually tries to apply the migrations, (e.g. whichever container gets to it first - they are all redeployed at the same time), and all the others just wait until the first has finished applying migrations before they continue their startup.\n\nI am currently using `django_redis.cache.RedisCache` as the default cache backend. So I think I could just replace that with your version, `redis_lock.django_cache.RedisCache`, and then in a custom `safe_migrate` management command, do something like:\n\n```\nfrom django.core.cache import cache\nfrom django.core.management.commands.migrate import Command\n\n\nclass Command(Command):\n    def handle(self, *args, **kwargs):\n        with cache.lock('safe_migrate', expire=60, auto_renewal=True):\n            if actual_and_expected_migration_state_are_different():\n                super(Command, self).handle(*args, **kwargs)\n```\n\nWill this work with a single Redis container and multiple Django WSGI containers across several nodes? And will it continue to work if Redis is also scaled across multiple nodes?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/52", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/52/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/52/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/52", "id": 160388378, "node_id": "MDU6SXNzdWUxNjAzODgzNzg=", "number": 52, "title": "References to \"spinloop\" in the documentation", "user": {"login": "todofixthis", "id": 202040, "node_id": "MDQ6VXNlcjIwMjA0MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/202040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/todofixthis", "html_url": "https://github.com/todofixthis", "followers_url": "https://api.github.com/users/todofixthis/followers", "following_url": "https://api.github.com/users/todofixthis/following{/other_user}", "gists_url": "https://api.github.com/users/todofixthis/gists{/gist_id}", "starred_url": "https://api.github.com/users/todofixthis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/todofixthis/subscriptions", "organizations_url": "https://api.github.com/users/todofixthis/orgs", "repos_url": "https://api.github.com/users/todofixthis/repos", "events_url": "https://api.github.com/users/todofixthis/events{/privacy}", "received_events_url": "https://api.github.com/users/todofixthis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-15T10:24:36Z", "updated_at": "2017-09-06T02:36:15Z", "closed_at": "2017-09-06T02:36:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "In https://python-redis-lock.readthedocs.io/en/latest/readme.html#similar-projects there are several references to \"spinloop\", but I cannot for the life of me find any resources that define this term.\n\nIs there a more widely-used term that can be substituted for \"spinloop\"?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/48", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/48/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/48/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/48", "id": 150021094, "node_id": "MDU6SXNzdWUxNTAwMjEwOTQ=", "number": 48, "title": "Inconsisten usage of `_held`", "user": {"login": "AndreiPashkin", "id": 4378647, "node_id": "MDQ6VXNlcjQzNzg2NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4378647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreiPashkin", "html_url": "https://github.com/AndreiPashkin", "followers_url": "https://api.github.com/users/AndreiPashkin/followers", "following_url": "https://api.github.com/users/AndreiPashkin/following{/other_user}", "gists_url": "https://api.github.com/users/AndreiPashkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreiPashkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreiPashkin/subscriptions", "organizations_url": "https://api.github.com/users/AndreiPashkin/orgs", "repos_url": "https://api.github.com/users/AndreiPashkin/repos", "events_url": "https://api.github.com/users/AndreiPashkin/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreiPashkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-04-21T09:40:10Z", "updated_at": "2019-01-12T18:36:16Z", "closed_at": "2019-01-12T18:36:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "1) [Here](https://github.com/ionelmc/python-redis-lock/blob/0600e0e5e39b1bed4024a28b780696247cb6da40/src/redis_lock/__init__.py#L335) and [here](https://github.com/ionelmc/python-redis-lock/blob/0600e0e5e39b1bed4024a28b780696247cb6da40/src/redis_lock/__init__.py#L341) - duplicate check for case if a lock is already held - additional overhead.\n2) [Here](https://github.com/ionelmc/python-redis-lock/blob/0600e0e5e39b1bed4024a28b780696247cb6da40/src/redis_lock/__init__.py#L255) - `_held` is not used, and if not - what is the point of it's existence?\n3) [Here](https://github.com/ionelmc/python-redis-lock/blob/0600e0e5e39b1bed4024a28b780696247cb6da40/src/redis_lock/__init__.py#L207) - it is kind of duplicate, since `nx=True` is already ensures, that a lock will not override already held lock. And also it produces additional overhead, making additional call to Redis.\n\nSo `_held` produces additional calls to Redis in case of redundant checks or usage of `_held`, because `_held` calls to Redis. And it's just violates Feng Shui rules.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/47", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/47/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/47/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/47", "id": 148850353, "node_id": "MDU6SXNzdWUxNDg4NTAzNTM=", "number": 47, "title": "Replace expiration with explicit deletion", "user": {"login": "AndreiPashkin", "id": 4378647, "node_id": "MDQ6VXNlcjQzNzg2NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4378647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreiPashkin", "html_url": "https://github.com/AndreiPashkin", "followers_url": "https://api.github.com/users/AndreiPashkin/followers", "following_url": "https://api.github.com/users/AndreiPashkin/following{/other_user}", "gists_url": "https://api.github.com/users/AndreiPashkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreiPashkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreiPashkin/subscriptions", "organizations_url": "https://api.github.com/users/AndreiPashkin/orgs", "repos_url": "https://api.github.com/users/AndreiPashkin/repos", "events_url": "https://api.github.com/users/AndreiPashkin/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreiPashkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-16T12:58:54Z", "updated_at": "2016-04-16T17:13:12Z", "closed_at": "2016-04-16T17:13:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Refer to this [comment](https://github.com/ionelmc/python-redis-lock/pull/32#issuecomment-183056293)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/44", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/44/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/44/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/44", "id": 148278280, "node_id": "MDU6SXNzdWUxNDgyNzgyODA=", "number": 44, "title": "Could not acquire or release lock when create lock with id field", "user": {"login": "PeerXu", "id": 1024762, "node_id": "MDQ6VXNlcjEwMjQ3NjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1024762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeerXu", "html_url": "https://github.com/PeerXu", "followers_url": "https://api.github.com/users/PeerXu/followers", "following_url": "https://api.github.com/users/PeerXu/following{/other_user}", "gists_url": "https://api.github.com/users/PeerXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeerXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeerXu/subscriptions", "organizations_url": "https://api.github.com/users/PeerXu/orgs", "repos_url": "https://api.github.com/users/PeerXu/repos", "events_url": "https://api.github.com/users/PeerXu/events{/privacy}", "received_events_url": "https://api.github.com/users/PeerXu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-04-14T07:38:32Z", "updated_at": "2016-04-17T16:12:07Z", "closed_at": "2016-04-17T16:12:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I create a lock with id, the `_held` field forbid to acquire or release.\n`_held` should be set by `id` and redis `lock:<name>`, like:\n\n```\ndef __init__(...):\n  ...\n  if id:\n    if self.get_owner_id() == id:\n      self._held = True\n    else:\n      raise AlreadyAcquired(\"Already acquired from this Lock instance\")  # or else error?\n  ...\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/41", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/41/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/41/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/41", "id": 138311827, "node_id": "MDU6SXNzdWUxMzgzMTE4Mjc=", "number": 41, "title": "listing all locks", "user": {"login": "marcstreeter", "id": 5916490, "node_id": "MDQ6VXNlcjU5MTY0OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5916490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcstreeter", "html_url": "https://github.com/marcstreeter", "followers_url": "https://api.github.com/users/marcstreeter/followers", "following_url": "https://api.github.com/users/marcstreeter/following{/other_user}", "gists_url": "https://api.github.com/users/marcstreeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcstreeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcstreeter/subscriptions", "organizations_url": "https://api.github.com/users/marcstreeter/orgs", "repos_url": "https://api.github.com/users/marcstreeter/repos", "events_url": "https://api.github.com/users/marcstreeter/events{/privacy}", "received_events_url": "https://api.github.com/users/marcstreeter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2016-03-03T22:08:50Z", "updated_at": "2016-03-22T11:57:13Z", "closed_at": "2016-03-21T22:50:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been looking through the code and I don't see a way (short of using redis directly) to list all locks.  Further not a way to filter locks based on owner.  I'm already using this as a locking mechanism, but I want to be able to display locked items for visual feedback.  I figure that instead of using say a hostname, we'd use the client id as the owner of the lock and then be able to display locks on a per client basis.  With the current set up however it looks like each lock would have to be retrieved and then parsed to do so.  Maybe I'm reading the source wrong or attempting to use this in the wrong way.  Any advice would be appreciated.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/39", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/39/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/39/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/39", "id": 135108445, "node_id": "MDU6SXNzdWUxMzUxMDg0NDU=", "number": 39, "title": "When creating lock with given `id` check if it's held", "user": {"login": "ionelmc", "id": 129501, "node_id": "MDQ6VXNlcjEyOTUwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/129501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionelmc", "html_url": "https://github.com/ionelmc", "followers_url": "https://api.github.com/users/ionelmc/followers", "following_url": "https://api.github.com/users/ionelmc/following{/other_user}", "gists_url": "https://api.github.com/users/ionelmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionelmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionelmc/subscriptions", "organizations_url": "https://api.github.com/users/ionelmc/orgs", "repos_url": "https://api.github.com/users/ionelmc/repos", "events_url": "https://api.github.com/users/ionelmc/events{/privacy}", "received_events_url": "https://api.github.com/users/ionelmc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 181668114, "node_id": "MDU6TGFiZWwxODE2NjgxMTQ=", "url": "https://api.github.com/repos/ionelmc/python-redis-lock/labels/looking-for-a-brave-soul-to-implement-this", "name": "looking-for-a-brave-soul-to-implement-this", "color": "bfe5bf", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-02-20T18:31:23Z", "updated_at": "2016-04-17T16:12:07Z", "closed_at": "2016-04-17T16:12:07Z", "author_association": "OWNER", "active_lock_reason": null, "body": "ref: https://github.com/ionelmc/python-redis-lock/issues/25#issuecomment-186264000\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/27", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/27/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/27/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/27", "id": 119293157, "node_id": "MDU6SXNzdWUxMTkyOTMxNTc=", "number": 27, "title": "Deadlock", "user": {"login": "AndreiPashkin", "id": 4378647, "node_id": "MDQ6VXNlcjQzNzg2NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4378647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreiPashkin", "html_url": "https://github.com/AndreiPashkin", "followers_url": "https://api.github.com/users/AndreiPashkin/followers", "following_url": "https://api.github.com/users/AndreiPashkin/following{/other_user}", "gists_url": "https://api.github.com/users/AndreiPashkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreiPashkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreiPashkin/subscriptions", "organizations_url": "https://api.github.com/users/AndreiPashkin/orgs", "repos_url": "https://api.github.com/users/AndreiPashkin/repos", "events_url": "https://api.github.com/users/AndreiPashkin/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreiPashkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-28T13:07:28Z", "updated_at": "2015-11-28T13:34:00Z", "closed_at": "2015-11-28T13:33:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here is current release Lua script:\n\n``` lua\nif redis.call(\"get\", KEYS[1]) == ARGV[1] then\n    redis.call(\"del\", KEYS[2])\n    redis.call(\"lpush\", KEYS[2], 1)\n    return redis.call(\"del\", KEYS[1])\nelse\n    return 0\nend\n```\n\nAnd here is acquire Python code:\n\n``` python\nwhile busy:\n    busy = not self._client.set(self._name, self._id, nx=True, ex=self._expire)\n    if busy:\n        if timed_out:\n            return False\n        elif blocking:\n            timed_out = not self._client.blpop(self._signal, blpop_timeout)\n        else:\n            logger.debug(\"Failed to get %r.\", self._name)\n            return False\n```\n\nImagine such situation, with two workers:\n- The first one acquired the lock previously.\n- The second is blocked by `blpop()` call and waiting. \n- Then worker-1 releases the lock, and Redis starts executing the Lua script and execution point comes to `LPUSH` and Redis executes `LPUSH`. \n- After that worker-2 wakes up, tries to call `SET NX`, which doesn't succeeds, so worker-2 calls `BLPOP` again and becomes blocked. \n- Then Redis continues execution of Lua script launched by worker-1 and calls `DEL` on lock's key, but it doesn't affects worker-2. \n\nIn the result - worker-2 is blocked forever.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/26", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/26/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/26/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/26", "id": 119292642, "node_id": "MDU6SXNzdWUxMTkyOTI2NDI=", "number": 26, "title": "Improve reset/reset_all to notify all waiters", "user": {"login": "ionelmc", "id": 129501, "node_id": "MDQ6VXNlcjEyOTUwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/129501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionelmc", "html_url": "https://github.com/ionelmc", "followers_url": "https://api.github.com/users/ionelmc/followers", "following_url": "https://api.github.com/users/ionelmc/following{/other_user}", "gists_url": "https://api.github.com/users/ionelmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionelmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionelmc/subscriptions", "organizations_url": "https://api.github.com/users/ionelmc/orgs", "repos_url": "https://api.github.com/users/ionelmc/repos", "events_url": "https://api.github.com/users/ionelmc/events{/privacy}", "received_events_url": "https://api.github.com/users/ionelmc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-11-28T13:01:35Z", "updated_at": "2015-11-30T10:02:12Z", "closed_at": "2015-11-30T10:02:12Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Otherwise waiters will still be blocked after reset.\n\nAll it needs is a LPUSH and a script that does the hotloop for all the keys in `reset_all`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/25", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/25/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/25/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/25", "id": 119292525, "node_id": "MDU6SXNzdWUxMTkyOTI1MjU=", "number": 25, "title": "Remove the `force` arg from release()", "user": {"login": "ionelmc", "id": 129501, "node_id": "MDQ6VXNlcjEyOTUwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/129501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionelmc", "html_url": "https://github.com/ionelmc", "followers_url": "https://api.github.com/users/ionelmc/followers", "following_url": "https://api.github.com/users/ionelmc/following{/other_user}", "gists_url": "https://api.github.com/users/ionelmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionelmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionelmc/subscriptions", "organizations_url": "https://api.github.com/users/ionelmc/orgs", "repos_url": "https://api.github.com/users/ionelmc/repos", "events_url": "https://api.github.com/users/ionelmc/events{/privacy}", "received_events_url": "https://api.github.com/users/ionelmc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 59, "created_at": "2015-11-28T13:00:17Z", "updated_at": "2016-02-20T22:32:54Z", "closed_at": "2016-01-10T16:41:01Z", "author_association": "OWNER", "active_lock_reason": null, "body": "or something similar, eg:\n- silent=True\n- error=False\n- regardless=True\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/17", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/17/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/17/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/17", "id": 69344173, "node_id": "MDU6SXNzdWU2OTM0NDE3Mw==", "number": 17, "title": "redis-lock does not delete lock-signals", "user": {"login": "liorchen", "id": 1812356, "node_id": "MDQ6VXNlcjE4MTIzNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1812356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liorchen", "html_url": "https://github.com/liorchen", "followers_url": "https://api.github.com/users/liorchen/followers", "following_url": "https://api.github.com/users/liorchen/following{/other_user}", "gists_url": "https://api.github.com/users/liorchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/liorchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liorchen/subscriptions", "organizations_url": "https://api.github.com/users/liorchen/orgs", "repos_url": "https://api.github.com/users/liorchen/repos", "events_url": "https://api.github.com/users/liorchen/events{/privacy}", "received_events_url": "https://api.github.com/users/liorchen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-04-18T20:19:08Z", "updated_at": "2015-11-29T14:15:20Z", "closed_at": "2015-11-29T14:15:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using this library against a massive load of users.\nI can see that the library doesn't clean up lock-signal:xxx items from Redis.\n\nAm I missing something? when should be cleaned exactly? cause my Redis's memory will eventually be over..\n\nThx\nLior. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/15", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/15/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/15/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/15", "id": 59018214, "node_id": "MDU6SXNzdWU1OTAxODIxNA==", "number": 15, "title": "The infinite signal list bug", "user": {"login": "Suor", "id": 284103, "node_id": "MDQ6VXNlcjI4NDEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/284103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Suor", "html_url": "https://github.com/Suor", "followers_url": "https://api.github.com/users/Suor/followers", "following_url": "https://api.github.com/users/Suor/following{/other_user}", "gists_url": "https://api.github.com/users/Suor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Suor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Suor/subscriptions", "organizations_url": "https://api.github.com/users/Suor/orgs", "repos_url": "https://api.github.com/users/Suor/repos", "events_url": "https://api.github.com/users/Suor/events{/privacy}", "received_events_url": "https://api.github.com/users/Suor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-02-26T04:47:54Z", "updated_at": "2015-02-27T23:20:51Z", "closed_at": "2015-02-27T23:20:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I use only non-blocking acquires then nobody will consume signal list, but every process will push to it on release, so signal list will grow indefinitely.\n\nAnd mixing blocking and non-blocking locks will end up in a total nightmare.\n\nSee #14 for related bug.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/14", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/14/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/14/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/14", "id": 59017927, "node_id": "MDU6SXNzdWU1OTAxNzkyNw==", "number": 14, "title": "The orphan signal list bug", "user": {"login": "Suor", "id": 284103, "node_id": "MDQ6VXNlcjI4NDEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/284103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Suor", "html_url": "https://github.com/Suor", "followers_url": "https://api.github.com/users/Suor/followers", "following_url": "https://api.github.com/users/Suor/following{/other_user}", "gists_url": "https://api.github.com/users/Suor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Suor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Suor/subscriptions", "organizations_url": "https://api.github.com/users/Suor/orgs", "repos_url": "https://api.github.com/users/Suor/repos", "events_url": "https://api.github.com/users/Suor/events{/privacy}", "received_events_url": "https://api.github.com/users/Suor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-02-26T04:45:01Z", "updated_at": "2015-02-27T23:06:29Z", "closed_at": "2015-02-27T23:06:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Situation:\n1. Process A acquires lock.\n2. Process B blocks.\n3. Process B unblocks cause of expire (or failure).\n4. Process A releases lock and pushes to signal list.\n\nNow system is in a broken state, cause if 2 processes come again:\n1. Process A acquires lock.\n2. Process B fails to `set nx`, but doesn't block cause of orphan element in a signal list.\n\nThis could be mitigated if `set nx` command is wrapped into lua script, which deletes signal list. Rule: signal list should be empty upon acquire.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/10", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/10/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/10/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/10", "id": 52816750, "node_id": "MDU6SXNzdWU1MjgxNjc1MA==", "number": 10, "title": "Key name used by Lock doesn't comply with the `make_key` pattern used by Django's cache backend", "user": {"login": "jweyrich", "id": 206930, "node_id": "MDQ6VXNlcjIwNjkzMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/206930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweyrich", "html_url": "https://github.com/jweyrich", "followers_url": "https://api.github.com/users/jweyrich/followers", "following_url": "https://api.github.com/users/jweyrich/following{/other_user}", "gists_url": "https://api.github.com/users/jweyrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweyrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweyrich/subscriptions", "organizations_url": "https://api.github.com/users/jweyrich/orgs", "repos_url": "https://api.github.com/users/jweyrich/repos", "events_url": "https://api.github.com/users/jweyrich/events{/privacy}", "received_events_url": "https://api.github.com/users/jweyrich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2014-12-24T12:36:03Z", "updated_at": "2014-12-30T11:24:07Z", "closed_at": "2014-12-30T11:24:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sorry for bothering you so much :-)\n\nI noticed the key name used by the Lock implementation is built by hand using a simple string concatenation, specifically `'lock:'+name`. This of course creates a key with this exact name, which at first seems to be the _Correct Thing To Do_, however, the Django cache backend employs a more convoluted logic - see [Cache key transformation](https://docs.djangoproject.com/en/dev/topics/cache/#cache-key-transformation), which generates a key name like `:1:lock:name`, where `1` is a version that can be specified when creating the key, and defaults to 1 if none is informed. The backend relies on a `make_key` function that by default joins a few parts (key_prefix, version, key).\n\nThis brings a few complications when creating a lock and further querying its value. When we create it, its name is just `lock:foobar`, but when we query it using `cache.get('foobar')` or `cache.get('lock:foobar')`, it will actually query ':&lt;version&gt;:&lt;name&gt;' instead.\n\nA few suggestions that could work (I think):\n- Expose the `name` property on the `Lock` (yet, we also have signal name). Doesn't seem like a good idea though;\n- Expose a `key_func` property on the `Lock` class and invoke the function when generating the key name(s);\n- Add a kwarg to  Lock.__init__ to pass the backend instance so that it can use the exact `make_key` implementation (`reset_all` would also need it) used by the configured backend. This would act according to the configured `BACKEND` in settings, which seems like a good idea. This seems to require changes in the `RedisCache.lock` (from `django_cache.py`) method as well, otherwise we'd have to extend the `RedisCache` to pass the backend to the lock instance being created.\n\nDo you have a simpler idea?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/6", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/6/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/6/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/6", "id": 40182476, "node_id": "MDU6SXNzdWU0MDE4MjQ3Ng==", "number": 6, "title": "In some cases locks stays forever", "user": {"login": "yokotoka", "id": 1014859, "node_id": "MDQ6VXNlcjEwMTQ4NTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1014859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yokotoka", "html_url": "https://github.com/yokotoka", "followers_url": "https://api.github.com/users/yokotoka/followers", "following_url": "https://api.github.com/users/yokotoka/following{/other_user}", "gists_url": "https://api.github.com/users/yokotoka/gists{/gist_id}", "starred_url": "https://api.github.com/users/yokotoka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yokotoka/subscriptions", "organizations_url": "https://api.github.com/users/yokotoka/orgs", "repos_url": "https://api.github.com/users/yokotoka/repos", "events_url": "https://api.github.com/users/yokotoka/events{/privacy}", "received_events_url": "https://api.github.com/users/yokotoka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-08-13T18:11:47Z", "updated_at": "2014-12-23T17:35:43Z", "closed_at": "2014-12-23T17:35:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I came across situation where for some reason lock \"hung\" in redis \"forever.\" Part of the functionality of my application stopped working, until I figured out what was wrong. For some (I never found out for what it is) reason redis_lock could not do unlock, which is why function that uses it always freezes. Once I removed the lock manually from the redis-cli it worked. I'll send a patch that will partly remedy the situation by removing the locks when the application starts. But, of course, this does not solve the whole problem. Here it should be systemic solution...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/5", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/5/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/5/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/5", "id": 24282158, "node_id": "MDU6SXNzdWUyNDI4MjE1OA==", "number": 5, "title": "Can I re-use a Lock?", "user": {"login": "alanjds", "id": 155623, "node_id": "MDQ6VXNlcjE1NTYyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/155623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanjds", "html_url": "https://github.com/alanjds", "followers_url": "https://api.github.com/users/alanjds/followers", "following_url": "https://api.github.com/users/alanjds/following{/other_user}", "gists_url": "https://api.github.com/users/alanjds/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanjds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanjds/subscriptions", "organizations_url": "https://api.github.com/users/alanjds/orgs", "repos_url": "https://api.github.com/users/alanjds/repos", "events_url": "https://api.github.com/users/alanjds/events{/privacy}", "received_events_url": "https://api.github.com/users/alanjds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-12-14T00:49:20Z", "updated_at": "2013-12-14T13:35:51Z", "closed_at": "2013-12-14T02:32:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a technical reason for not be possible to re-use a Lock?\nAt the 1st sight, `__exit__()` could have a `self._tok = None` to allow this.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/2", "repository_url": "https://api.github.com/repos/ionelmc/python-redis-lock", "labels_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/2/comments", "events_url": "https://api.github.com/repos/ionelmc/python-redis-lock/issues/2/events", "html_url": "https://github.com/ionelmc/python-redis-lock/issues/2", "id": 22087383, "node_id": "MDU6SXNzdWUyMjA4NzM4Mw==", "number": 2, "title": "global name 'name' is not defined", "user": {"login": "robbyt", "id": 58051, "node_id": "MDQ6VXNlcjU4MDUx", "avatar_url": "https://avatars3.githubusercontent.com/u/58051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robbyt", "html_url": "https://github.com/robbyt", "followers_url": "https://api.github.com/users/robbyt/followers", "following_url": "https://api.github.com/users/robbyt/following{/other_user}", "gists_url": "https://api.github.com/users/robbyt/gists{/gist_id}", "starred_url": "https://api.github.com/users/robbyt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robbyt/subscriptions", "organizations_url": "https://api.github.com/users/robbyt/orgs", "repos_url": "https://api.github.com/users/robbyt/repos", "events_url": "https://api.github.com/users/robbyt/events{/privacy}", "received_events_url": "https://api.github.com/users/robbyt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-11-04T23:11:14Z", "updated_at": "2013-11-04T23:27:13Z", "closed_at": "2013-11-04T23:27:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am testing your django cache addon, and you are missing the `name` variable from here:\n\nhttps://github.com/ionelmc/python-redis-lock/blob/master/src/redis_lock/django_cache.py#L6\n", "performed_via_github_app": null, "score": 1.0}]}