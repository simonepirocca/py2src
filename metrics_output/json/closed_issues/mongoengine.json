{"total_count": 1131, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2364", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2364/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2364/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2364/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2364", "id": 671476527, "node_id": "MDU6SXNzdWU2NzE0NzY1Mjc=", "number": 2364, "title": "Do you have plan to support async/await?", "user": {"login": "timewalker08", "id": 9990104, "node_id": "MDQ6VXNlcjk5OTAxMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/9990104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timewalker08", "html_url": "https://github.com/timewalker08", "followers_url": "https://api.github.com/users/timewalker08/followers", "following_url": "https://api.github.com/users/timewalker08/following{/other_user}", "gists_url": "https://api.github.com/users/timewalker08/gists{/gist_id}", "starred_url": "https://api.github.com/users/timewalker08/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timewalker08/subscriptions", "organizations_url": "https://api.github.com/users/timewalker08/orgs", "repos_url": "https://api.github.com/users/timewalker08/repos", "events_url": "https://api.github.com/users/timewalker08/events{/privacy}", "received_events_url": "https://api.github.com/users/timewalker08/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-02T04:03:24Z", "updated_at": "2020-08-04T15:16:21Z", "closed_at": "2020-08-03T19:37:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2360", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2360/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2360/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2360/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2360", "id": 661684522, "node_id": "MDU6SXNzdWU2NjE2ODQ1MjI=", "number": 2360, "title": "AttributeError on delete", "user": {"login": "giacomofiorindo", "id": 44725514, "node_id": "MDQ6VXNlcjQ0NzI1NTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/44725514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giacomofiorindo", "html_url": "https://github.com/giacomofiorindo", "followers_url": "https://api.github.com/users/giacomofiorindo/followers", "following_url": "https://api.github.com/users/giacomofiorindo/following{/other_user}", "gists_url": "https://api.github.com/users/giacomofiorindo/gists{/gist_id}", "starred_url": "https://api.github.com/users/giacomofiorindo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giacomofiorindo/subscriptions", "organizations_url": "https://api.github.com/users/giacomofiorindo/orgs", "repos_url": "https://api.github.com/users/giacomofiorindo/repos", "events_url": "https://api.github.com/users/giacomofiorindo/events{/privacy}", "received_events_url": "https://api.github.com/users/giacomofiorindo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T11:00:41Z", "updated_at": "2020-08-03T19:37:37Z", "closed_at": "2020-08-03T19:37:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I was trying to delete something when I got this error:\r\n`AttributeError: 'DuplicateKeyError' object has no attribute 'message'`\r\n\r\nWhich is caused by (line 642 in document.py)\r\n```\r\nexcept pymongo.errors.OperationFailure as err:\r\n    message = \"Could not delete document (%s)\" % err.message\r\n```\r\nPython no longer supports the message attribute for Exceptions. It should be changed to args or _message", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2359", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2359/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2359/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2359/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2359", "id": 658625494, "node_id": "MDU6SXNzdWU2NTg2MjU0OTQ=", "number": 2359, "title": "What if?", "user": {"login": "lakshaytalkstocomputer", "id": 38259381, "node_id": "MDQ6VXNlcjM4MjU5Mzgx", "avatar_url": "https://avatars0.githubusercontent.com/u/38259381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lakshaytalkstocomputer", "html_url": "https://github.com/lakshaytalkstocomputer", "followers_url": "https://api.github.com/users/lakshaytalkstocomputer/followers", "following_url": "https://api.github.com/users/lakshaytalkstocomputer/following{/other_user}", "gists_url": "https://api.github.com/users/lakshaytalkstocomputer/gists{/gist_id}", "starred_url": "https://api.github.com/users/lakshaytalkstocomputer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lakshaytalkstocomputer/subscriptions", "organizations_url": "https://api.github.com/users/lakshaytalkstocomputer/orgs", "repos_url": "https://api.github.com/users/lakshaytalkstocomputer/repos", "events_url": "https://api.github.com/users/lakshaytalkstocomputer/events{/privacy}", "received_events_url": "https://api.github.com/users/lakshaytalkstocomputer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T22:28:28Z", "updated_at": "2020-08-11T19:42:56Z", "closed_at": "2020-08-11T19:42:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "What if i directly use mongoengine in django by :\n1) creating connection to mongodb in settings py ? \n2) creating mongoengine  documents in models.py and using them in my views? \n\nWhat would be the drawbacks and repercussions for the same? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2358", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2358/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2358/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2358/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2358", "id": 654346330, "node_id": "MDU6SXNzdWU2NTQzNDYzMzA=", "number": 2358, "title": "Understanding SortedListField?", "user": {"login": "tschm", "id": 2046079, "node_id": "MDQ6VXNlcjIwNDYwNzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2046079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschm", "html_url": "https://github.com/tschm", "followers_url": "https://api.github.com/users/tschm/followers", "following_url": "https://api.github.com/users/tschm/following{/other_user}", "gists_url": "https://api.github.com/users/tschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschm/subscriptions", "organizations_url": "https://api.github.com/users/tschm/orgs", "repos_url": "https://api.github.com/users/tschm/repos", "events_url": "https://api.github.com/users/tschm/events{/privacy}", "received_events_url": "https://api.github.com/users/tschm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-09T21:03:24Z", "updated_at": "2020-07-09T21:40:07Z", "closed_at": "2020-07-09T21:40:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "from mongoengine import *\r\nI struggle with SortedListFields. What's the difference to ListFields?\r\n\r\n```\r\nclass Comment(EmbeddedDocument):\r\n    upvotes = IntField()\r\n    def __repr__(self):\r\n        return str(self.upvotes)\r\n\r\nclass Post(Document):\r\n    comments = SortedListField(EmbeddedDocumentField(Comment), ordering=\"upvotes\")\r\n\r\ndef test_sort():\r\n    c1 = Comment(upvotes=100)\r\n    c2 = Comment(upvotes=50)\r\n    c3 = Comment(upvotes=75)\r\n\r\n    p = Post(comments=[c1,c2,c3]).save()\r\n    assert p.comments == [c2, c3, c1]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2357", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2357/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2357/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2357/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2357", "id": 648426878, "node_id": "MDU6SXNzdWU2NDg0MjY4Nzg=", "number": 2357, "title": "performing a self reference in an embedded document", "user": {"login": "spitzbubchen", "id": 1012301, "node_id": "MDQ6VXNlcjEwMTIzMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1012301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spitzbubchen", "html_url": "https://github.com/spitzbubchen", "followers_url": "https://api.github.com/users/spitzbubchen/followers", "following_url": "https://api.github.com/users/spitzbubchen/following{/other_user}", "gists_url": "https://api.github.com/users/spitzbubchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/spitzbubchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spitzbubchen/subscriptions", "organizations_url": "https://api.github.com/users/spitzbubchen/orgs", "repos_url": "https://api.github.com/users/spitzbubchen/repos", "events_url": "https://api.github.com/users/spitzbubchen/events{/privacy}", "received_events_url": "https://api.github.com/users/spitzbubchen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-30T19:10:34Z", "updated_at": "2020-08-05T19:06:16Z", "closed_at": "2020-08-05T19:06:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to have a self reference to \"Bar\" in an embedded document. If I perform the following I get the following error:\r\n\r\n> mongoengine.errors.ValidationError: ValidationError (Bar:58f22e1851fcf63df0f4f3c3) (d.A ReferenceField only accepts DBRef, LazyReference, ObjectId or documents: ['b'])\r\n\r\n```\r\nclass Foo(EmbeddedDocument):\r\n    a = StringField()\r\n    b = ReferenceField(\"self\", required=True)\r\n\r\nclass Bar(Document):\r\n    c = StringField()\r\n    d = EmbeddedDocumentListField(Foo)\r\n```\r\n\r\nIt seems that one way around this is to use `ObjectIdField()` as per https://stackoverflow.com/questions/51445481/how-to-reference-to-self-in-mongoengine, however, I was hoping for a more elegant solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2356", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2356/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2356/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2356/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2356", "id": 644704203, "node_id": "MDU6SXNzdWU2NDQ3MDQyMDM=", "number": 2356, "title": "How to get db and collection name", "user": {"login": "shaozi", "id": 417833, "node_id": "MDQ6VXNlcjQxNzgzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/417833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shaozi", "html_url": "https://github.com/shaozi", "followers_url": "https://api.github.com/users/shaozi/followers", "following_url": "https://api.github.com/users/shaozi/following{/other_user}", "gists_url": "https://api.github.com/users/shaozi/gists{/gist_id}", "starred_url": "https://api.github.com/users/shaozi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shaozi/subscriptions", "organizations_url": "https://api.github.com/users/shaozi/orgs", "repos_url": "https://api.github.com/users/shaozi/repos", "events_url": "https://api.github.com/users/shaozi/events{/privacy}", "received_events_url": "https://api.github.com/users/shaozi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-24T15:22:48Z", "updated_at": "2020-07-05T19:01:19Z", "closed_at": "2020-07-05T19:01:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nGiven a defined mongoengine document class, how can I find out programmatically the db name and collection name for that class?\r\n\r\nThanks,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2355", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2355/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2355/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2355/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2355", "id": 642359825, "node_id": "MDU6SXNzdWU2NDIzNTk4MjU=", "number": 2355, "title": "Allow set for ListField", "user": {"login": "GiovanniCardamone", "id": 5117748, "node_id": "MDQ6VXNlcjUxMTc3NDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5117748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GiovanniCardamone", "html_url": "https://github.com/GiovanniCardamone", "followers_url": "https://api.github.com/users/GiovanniCardamone/followers", "following_url": "https://api.github.com/users/GiovanniCardamone/following{/other_user}", "gists_url": "https://api.github.com/users/GiovanniCardamone/gists{/gist_id}", "starred_url": "https://api.github.com/users/GiovanniCardamone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GiovanniCardamone/subscriptions", "organizations_url": "https://api.github.com/users/GiovanniCardamone/orgs", "repos_url": "https://api.github.com/users/GiovanniCardamone/repos", "events_url": "https://api.github.com/users/GiovanniCardamone/events{/privacy}", "received_events_url": "https://api.github.com/users/GiovanniCardamone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-20T11:30:26Z", "updated_at": "2020-06-20T18:14:31Z", "closed_at": "2020-06-20T18:14:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "i need to have unique strings in one of my documents. The proper python way for handle that is using `set`, but mongoengine only offers `ListField` that wraps `list`, would be nice to have `SetField` who wraps `set` for this purpose", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2354", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2354/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2354/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2354/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2354", "id": 639967625, "node_id": "MDU6SXNzdWU2Mzk5Njc2MjU=", "number": 2354, "title": "Question: difference between register_connection() and connect()", "user": {"login": "tjboring", "id": 58706233, "node_id": "MDQ6VXNlcjU4NzA2MjMz", "avatar_url": "https://avatars0.githubusercontent.com/u/58706233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjboring", "html_url": "https://github.com/tjboring", "followers_url": "https://api.github.com/users/tjboring/followers", "following_url": "https://api.github.com/users/tjboring/following{/other_user}", "gists_url": "https://api.github.com/users/tjboring/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjboring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjboring/subscriptions", "organizations_url": "https://api.github.com/users/tjboring/orgs", "repos_url": "https://api.github.com/users/tjboring/repos", "events_url": "https://api.github.com/users/tjboring/events{/privacy}", "received_events_url": "https://api.github.com/users/tjboring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-16T20:57:58Z", "updated_at": "2020-06-16T21:19:54Z", "closed_at": "2020-06-16T21:19:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I'm working on a codebase that uses mongoengine, and I'm trying to figure out how the connection call(s) work.\r\n\r\nI can't find anywhere in the codebase that is calling `mongoengine.connect()`, but there is a call to `mongoengine.register_connection()`. Looking at the mongoengine source, it looks like all `register_connection()` is doing is registering connection settings. I don't see anywhere that it's actually making a call to `connect()` or any other methods that might result in a connection.\r\n\r\nMoreover, I've attempted to follow the logic of this codebase by making the same calls manually in ipython:\r\n\r\n```\r\nIn [1]: import mongoengine\r\n\r\nIn [2]: mongoengine.register_connection(alias='local', db='devAnalyzerDB', host='localhost')\r\n\r\nIn [3]: from app.models.service import Service\r\ns = Service.objects()\r\nMongoEngineConnectionError: You have not defined a default connection\r\n```\r\n\r\nAm I reading the mongoengine source correctly, and that `register_connection()` is NOT making any connection but just recording connection settings? Or am I misunderstanding something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2352", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2352/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2352/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2352/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2352", "id": 637972339, "node_id": "MDU6SXNzdWU2Mzc5NzIzMzk=", "number": 2352, "title": "Can I retrieve the _id field from a document containing both _id and id?", "user": {"login": "bvasiles", "id": 1917728, "node_id": "MDQ6VXNlcjE5MTc3Mjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1917728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvasiles", "html_url": "https://github.com/bvasiles", "followers_url": "https://api.github.com/users/bvasiles/followers", "following_url": "https://api.github.com/users/bvasiles/following{/other_user}", "gists_url": "https://api.github.com/users/bvasiles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvasiles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvasiles/subscriptions", "organizations_url": "https://api.github.com/users/bvasiles/orgs", "repos_url": "https://api.github.com/users/bvasiles/repos", "events_url": "https://api.github.com/users/bvasiles/events{/privacy}", "received_events_url": "https://api.github.com/users/bvasiles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T19:54:35Z", "updated_at": "2020-08-12T20:05:33Z", "closed_at": "2020-08-12T20:05:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to query a mongodb collection with documents containing both an `_id` and and `id` field (I know this is not an ideal db design, but I don't own the db).\r\n\r\nIs there a way to access the `_id` field using MongoEngine (in Flask)?\r\n\r\n`doc['id']` returns the `id` field and `doc['_id']` throws a KeyError.\r\n\r\nThanks a lot for a very nice package!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2351", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2351/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2351/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2351/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2351", "id": 636786828, "node_id": "MDU6SXNzdWU2MzY3ODY4Mjg=", "number": 2351, "title": "Can't empty filed which had value", "user": {"login": "alexjolig", "id": 8559877, "node_id": "MDQ6VXNlcjg1NTk4Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8559877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexjolig", "html_url": "https://github.com/alexjolig", "followers_url": "https://api.github.com/users/alexjolig/followers", "following_url": "https://api.github.com/users/alexjolig/following{/other_user}", "gists_url": "https://api.github.com/users/alexjolig/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexjolig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexjolig/subscriptions", "organizations_url": "https://api.github.com/users/alexjolig/orgs", "repos_url": "https://api.github.com/users/alexjolig/repos", "events_url": "https://api.github.com/users/alexjolig/events{/privacy}", "received_events_url": "https://api.github.com/users/alexjolig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-11T07:28:54Z", "updated_at": "2020-06-17T07:12:39Z", "closed_at": "2020-06-13T06:08:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a collection with some fields. All of them have values. Then I try to empty one.\r\n`comp = Component.objects(name=\"user-latest-purchases\").first()`\r\n`comp.more_link = \"\"`\r\n`comp.save()`\r\nThis will remove `more_link` field from the document. But when I try to read the `more_link` value next time, instead of showing null, None or \"\", it will return the value before making it empty.\r\nFor example if `more_link`'s value was `100`, and I clear the value, next time I read it it still returns `100.`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2345", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2345/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2345/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2345/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2345", "id": 631542064, "node_id": "MDU6SXNzdWU2MzE1NDIwNjQ=", "number": 2345, "title": "Experiments with SeriesField and FrameField", "user": {"login": "tschm", "id": 2046079, "node_id": "MDQ6VXNlcjIwNDYwNzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2046079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschm", "html_url": "https://github.com/tschm", "followers_url": "https://api.github.com/users/tschm/followers", "following_url": "https://api.github.com/users/tschm/following{/other_user}", "gists_url": "https://api.github.com/users/tschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschm/subscriptions", "organizations_url": "https://api.github.com/users/tschm/orgs", "repos_url": "https://api.github.com/users/tschm/repos", "events_url": "https://api.github.com/users/tschm/events{/privacy}", "received_events_url": "https://api.github.com/users/tschm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-05T12:08:22Z", "updated_at": "2020-06-05T19:00:59Z", "closed_at": "2020-06-05T19:00:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I tried to implement a fields for Pandas objects, e.g.\r\n\r\n```\r\nimport pandas as pd\r\nfrom mongoengine.base import BaseField\r\n\r\n\r\nclass PandasField(BaseField):\r\n    def __init__(self, **kwargs):\r\n        super(PandasField, self).__init__(**kwargs)\r\n\r\n    def __set__(self, instance, value):\r\n        if value is not None:\r\n            value = self.to_python(value)\r\n        super(PandasField, self).__set__(instance, value)\r\n\r\n    def __get__(self, instance, owner):\r\n        x = super(PandasField, self).__get__(instance, owner)\r\n        if x is not None:\r\n            x = self.to_mongo(x)\r\n\r\n        return x\r\n\r\n\r\nclass SeriesField(PandasField):\r\n    def to_python(self, value):\r\n        if isinstance(value, str):\r\n            return value\r\n        assert isinstance(value, pd.Series), \"The type is {}\".format(type(value))\r\n        return value.to_json(orient=\"split\")\r\n\r\n    def to_mongo(self, value):\r\n        return pd.read_json(value, orient=\"split\", typ=\"series\")\r\n\r\n\r\nclass FrameField(PandasField):\r\n    def to_python(self, value):\r\n        if isinstance(value, str):\r\n            return value\r\n        assert isinstance(value, pd.DataFrame), \"The type is {}\".format(type(value))\r\n        return value.to_json(orient=\"table\")\r\n\r\n    def to_mongo(self, value):\r\n        return pd.read_json(value, orient=\"table\", typ=\"frame\")\r\n```\r\n\r\nThis is still very much a learning experience but the idea is simple and somewhat borrowed from the big arctic project. Convert the pandas objects into json strings. However, I get bson problems once I try to store the documents, e.g.\r\n\r\n```\r\nimport pandas.testing as pt\r\nimport pytest\r\nfrom mongoengine import Document, connect\r\n\r\nfrom antarctic.PandasFields import SeriesField, FrameField\r\nfrom test.config import read_pd\r\n\r\nclient = connect(db=\"test\", host=\"mongomock://localhost\")\r\n\r\n\r\nclass Singer(Document):\r\n    close = SeriesField()\r\n    prices = FrameField()\r\n\r\n\r\ndef test_series():\r\n    s = Singer()\r\n    ts = read_pd(\"ts.csv\", squeeze=True, index_col=0, parse_dates=True)\r\n    s.close = ts\r\n    s.save()\r\n    pt.assert_series_equal(s.close, ts)\r\n\r\n    s = Singer(close=ts).save()\r\n    pt.assert_series_equal(s.close, ts)\r\n\r\n    with pytest.raises(AssertionError):\r\n        s.close = 6.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2343", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2343/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2343/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2343/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2343", "id": 630843856, "node_id": "MDU6SXNzdWU2MzA4NDM4NTY=", "number": 2343, "title": "DictField is not working when there's no 'default' alias", "user": {"login": "sznowak13", "id": 39801541, "node_id": "MDQ6VXNlcjM5ODAxNTQx", "avatar_url": "https://avatars2.githubusercontent.com/u/39801541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sznowak13", "html_url": "https://github.com/sznowak13", "followers_url": "https://api.github.com/users/sznowak13/followers", "following_url": "https://api.github.com/users/sznowak13/following{/other_user}", "gists_url": "https://api.github.com/users/sznowak13/gists{/gist_id}", "starred_url": "https://api.github.com/users/sznowak13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sznowak13/subscriptions", "organizations_url": "https://api.github.com/users/sznowak13/orgs", "repos_url": "https://api.github.com/users/sznowak13/repos", "events_url": "https://api.github.com/users/sznowak13/events{/privacy}", "received_events_url": "https://api.github.com/users/sznowak13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-04T13:51:00Z", "updated_at": "2020-06-05T09:33:13Z", "closed_at": "2020-06-05T09:33:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nwhile developing an application I stumbled upon a very bizarre error running unit tests after changing some things in  the data models.\r\n`mongoengine.connection.ConnectionFailure: You have not defined a default connection`\r\nWell, the error was not wrong, I dont have a 'default' alias defined in my connections, but I was a bit surprised that the error occurred after some model changes. The changes were rather harmless, most of them were field names, but I also changed ListFiled on one model to DictField.\r\nThat was the first time I used DictField in this application and that's why the error occurred now and not earlier.\r\n\r\nThe problem is in `DictField.validate()` method:\r\n![obraz](https://user-images.githubusercontent.com/39801541/83763115-ac95b480-a678-11ea-9280-b28ef73473e6.png)\r\n![obraz](https://user-images.githubusercontent.com/39801541/83763351-e36bca80-a678-11ea-9355-e5f288664d95.png)\r\nAnd deeper in `get_connection()`:\r\n![obraz](https://user-images.githubusercontent.com/39801541/83763266-cdf6a080-a678-11ea-8254-60da1ad3f7f4.png)\r\nAs you can see, `get_mongo_version()` uses 'default' alias for the default connection, which is OK, as long you have a default connection defined. I have defined two connections both with non-default aliases and it bit me hard, I was looking for a problem way longer then I should have.\r\n\r\nOfc, the simplest solution is to define a default connection, but maybe there should an option to set the 'default' alias? Or DictField should try to connect to the Document db_alias?\r\n\r\nSteps to reproduce:\r\n```python\r\nfrom mongoengine import connect\r\nfrom mongoengine import Document, DictField\r\n\r\nmongo_connect = connect(db='mongodb',\r\n                        alias=\"non-default-db\")\r\n\r\n\r\nclass MyDocument(Document):\r\n    meta = {'db_alias': 'non-default-db', 'collection': 'new_col', }\r\n    d_field = DictField()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    w = MyDocument(d_field={\"dict\": \"field\"})\r\n    w.save()\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2341", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2341/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2341/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2341/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2341", "id": 628405380, "node_id": "MDU6SXNzdWU2Mjg0MDUzODA=", "number": 2341, "title": "How to define class itself as the class member variable?", "user": {"login": "SkipperJK", "id": 16733627, "node_id": "MDQ6VXNlcjE2NzMzNjI3", "avatar_url": "https://avatars2.githubusercontent.com/u/16733627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkipperJK", "html_url": "https://github.com/SkipperJK", "followers_url": "https://api.github.com/users/SkipperJK/followers", "following_url": "https://api.github.com/users/SkipperJK/following{/other_user}", "gists_url": "https://api.github.com/users/SkipperJK/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkipperJK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkipperJK/subscriptions", "organizations_url": "https://api.github.com/users/SkipperJK/orgs", "repos_url": "https://api.github.com/users/SkipperJK/repos", "events_url": "https://api.github.com/users/SkipperJK/events{/privacy}", "received_events_url": "https://api.github.com/users/SkipperJK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-01T12:35:41Z", "updated_at": "2020-06-03T05:46:12Z", "closed_at": "2020-06-03T05:45:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to define class itself as the class member variable, such as:\r\n```\r\nclass Word(EmbeddedDocument):\r\n\r\n    id = IntField()\r\n    head_word = EmbeddedDocumentField(Word)  \r\n    dependency = StringField()\r\n```\r\nbut it arise `NameError: name 'Word' is not defined` when I define the head_word variable as the Word class ifself.\r\nHow can I do that? Thank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2340", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2340/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2340/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2340/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2340", "id": 627812469, "node_id": "MDU6SXNzdWU2Mjc4MTI0Njk=", "number": 2340, "title": "connot set a value to Dynamic key", "user": {"login": "ravitejaEunimart", "id": 55280400, "node_id": "MDQ6VXNlcjU1MjgwNDAw", "avatar_url": "https://avatars0.githubusercontent.com/u/55280400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ravitejaEunimart", "html_url": "https://github.com/ravitejaEunimart", "followers_url": "https://api.github.com/users/ravitejaEunimart/followers", "following_url": "https://api.github.com/users/ravitejaEunimart/following{/other_user}", "gists_url": "https://api.github.com/users/ravitejaEunimart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ravitejaEunimart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ravitejaEunimart/subscriptions", "organizations_url": "https://api.github.com/users/ravitejaEunimart/orgs", "repos_url": "https://api.github.com/users/ravitejaEunimart/repos", "events_url": "https://api.github.com/users/ravitejaEunimart/events{/privacy}", "received_events_url": "https://api.github.com/users/ravitejaEunimart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-30T20:21:39Z", "updated_at": "2020-06-14T20:09:10Z", "closed_at": "2020-06-14T20:09:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2338", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2338/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2338/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2338/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2338", "id": 626940649, "node_id": "MDU6SXNzdWU2MjY5NDA2NDk=", "number": 2338, "title": "DateField initializing all date times to 00:00:00 on update", "user": {"login": "enjoys-sashimi", "id": 63182053, "node_id": "MDQ6VXNlcjYzMTgyMDUz", "avatar_url": "https://avatars1.githubusercontent.com/u/63182053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enjoys-sashimi", "html_url": "https://github.com/enjoys-sashimi", "followers_url": "https://api.github.com/users/enjoys-sashimi/followers", "following_url": "https://api.github.com/users/enjoys-sashimi/following{/other_user}", "gists_url": "https://api.github.com/users/enjoys-sashimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/enjoys-sashimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enjoys-sashimi/subscriptions", "organizations_url": "https://api.github.com/users/enjoys-sashimi/orgs", "repos_url": "https://api.github.com/users/enjoys-sashimi/repos", "events_url": "https://api.github.com/users/enjoys-sashimi/events{/privacy}", "received_events_url": "https://api.github.com/users/enjoys-sashimi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-29T01:50:00Z", "updated_at": "2020-05-30T02:47:13Z", "closed_at": "2020-05-30T02:47:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason when I store date-time objects using mongoengine it turns all of the time values to 00:00:00\r\n\r\nI'm using `datetime.datetime.now(timezone.utc)` to get Aware UTC times, an example of how I'm updating time:\r\n```\r\nQuestion.objects(file_name=question.file_name).update_one(inc__total_scans=1, last_scanned=datetime.now(timezone.utc))\r\nquestion.reload()\r\n```\r\nMy DateField is declared by:\r\n```\r\nlast_scanned = DateField(db_field=\"last_scanned\", default=datetime(1,1,1))\r\n```\r\n\r\nThe problem isn't in Python; logging my datetimes before inserting them shows the correct values in my log files, it's when they get pushed to the database do they have all the times initialized to zero.\r\n\r\nThe actual dates look fine, an example below:\r\n\r\npython log:\r\n```\r\n2020-05-29 01:39:34.463330+00:00\r\n```\r\nDatabase entry:\r\n```\r\n2020-05-29T00:00:00.000+00:00\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2334", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2334/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2334/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2334/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2334", "id": 625073429, "node_id": "MDU6SXNzdWU2MjUwNzM0Mjk=", "number": 2334, "title": "Creating computed fields in Document models", "user": {"login": "haripriyan", "id": 5412113, "node_id": "MDQ6VXNlcjU0MTIxMTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5412113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haripriyan", "html_url": "https://github.com/haripriyan", "followers_url": "https://api.github.com/users/haripriyan/followers", "following_url": "https://api.github.com/users/haripriyan/following{/other_user}", "gists_url": "https://api.github.com/users/haripriyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/haripriyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haripriyan/subscriptions", "organizations_url": "https://api.github.com/users/haripriyan/orgs", "repos_url": "https://api.github.com/users/haripriyan/repos", "events_url": "https://api.github.com/users/haripriyan/events{/privacy}", "received_events_url": "https://api.github.com/users/haripriyan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-26T17:54:09Z", "updated_at": "2020-05-28T10:59:18Z", "closed_at": "2020-05-26T20:51:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to create computed fields in the Document models, but looks like there's no apparent way of doing it via mongoengine.\r\n\r\nThis fields needs to read only. That is while reading the Documents, I want to compute certain additional fields and send it back to the consumer. I do not intend to persist the computed value back to document.\r\n\r\nThis is what I am trying to do:\r\n```\r\nclass User(Document):\r\n    email = StringField(required=True)\r\n    first_name = StringField(max_length=50)\r\n    last_name = StringField(max_length=50)\r\n   \r\n    full_name = <ComputedField>()\r\n```\r\n\r\nWhat I did try is to create a **CustomField** whose _to_python_ method i had used to implement the appending logic that I want. \r\nSomething like this:\r\n```\r\nclass CustomField(BaseField):\r\n    def __init__(self, value='', **kwargs):\r\n        self.value = value\r\n        super().__init__(**kwargs)\r\n\r\n    def to_mongo(self, value):\r\n        raise NotImplementedError\r\n\r\n    def to_python(self, value):\r\n        return self.owner_document.first_name + self.owner_document.last_name\r\n```\r\n\r\nBut I still have to map a `db_field` to the CustomField for it to be called. And I cannot have multiple fields referring to the same db_field or else I am thrown an `InvalidDocumentError` exception.\r\n\r\nIs there a better way to do it?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2332", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2332/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2332/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2332/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2332", "id": 622112223, "node_id": "MDU6SXNzdWU2MjIxMTIyMjM=", "number": 2332, "title": "clone() drops the read_concern property", "user": {"login": "abarto", "id": 5585302, "node_id": "MDQ6VXNlcjU1ODUzMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5585302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abarto", "html_url": "https://github.com/abarto", "followers_url": "https://api.github.com/users/abarto/followers", "following_url": "https://api.github.com/users/abarto/following{/other_user}", "gists_url": "https://api.github.com/users/abarto/gists{/gist_id}", "starred_url": "https://api.github.com/users/abarto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abarto/subscriptions", "organizations_url": "https://api.github.com/users/abarto/orgs", "repos_url": "https://api.github.com/users/abarto/repos", "events_url": "https://api.github.com/users/abarto/events{/privacy}", "received_events_url": "https://api.github.com/users/abarto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-20T22:02:43Z", "updated_at": "2020-05-23T21:22:56Z", "closed_at": "2020-05-23T21:22:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We forgot to include \"_read_concern\" to copy_props on BaseQuerySet._clone_into which causes the queryset to drop the read_concern on all operations that use clone().", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2328", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2328/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2328/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2328/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2328", "id": 620785471, "node_id": "MDU6SXNzdWU2MjA3ODU0NzE=", "number": 2328, "title": "Mongomock doesn't support \"where\" clause", "user": {"login": "kurthaegeman", "id": 47026821, "node_id": "MDQ6VXNlcjQ3MDI2ODIx", "avatar_url": "https://avatars1.githubusercontent.com/u/47026821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurthaegeman", "html_url": "https://github.com/kurthaegeman", "followers_url": "https://api.github.com/users/kurthaegeman/followers", "following_url": "https://api.github.com/users/kurthaegeman/following{/other_user}", "gists_url": "https://api.github.com/users/kurthaegeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurthaegeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurthaegeman/subscriptions", "organizations_url": "https://api.github.com/users/kurthaegeman/orgs", "repos_url": "https://api.github.com/users/kurthaegeman/repos", "events_url": "https://api.github.com/users/kurthaegeman/events{/privacy}", "received_events_url": "https://api.github.com/users/kurthaegeman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-19T08:33:01Z", "updated_at": "2020-05-23T21:27:16Z", "closed_at": "2020-05-23T21:27:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unit testing with mongomock, Mongoengine v0.19.1:\r\n\r\n```python\r\n>>> connect(\"mongoenginetest\", host=\"mongomock://localhost\")\r\nmongomock.MongoClient('localhost', 27017)\r\n>>> class IntPair(Document):\r\n...   fielda = IntField()\r\n...   fieldb = IntField()\r\n...\r\n>>> a = IntPair(fielda=1, fieldb=1)\r\n>>> b = IntPair(fielda=1, fieldb=2)\r\n>>> c = IntPair(fielda=2, fieldb=1)\r\n>>> a.save()\r\n<IntPair: IntPair object>\r\n>>> b.save()\r\n<IntPair: IntPair object>\r\n>>> c.save()\r\n<IntPair: IntPair object>\r\n>>>\r\n>>> query = IntPair.objects.where('this[~fielda] >= this[~fieldb]')\r\n>>> results = list(query)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/project/venv/lib/python3.8/site-packages/mongoengine/queryset/queryset.py\", line 64, in __len__\r\n    list(self._iter_results())\r\n  File \"/project/venv/lib/python3.8/site-packages/mongoengine/queryset/queryset.py\", line 112, in _iter_results\r\n    self._populate_cache()\r\n  File \"/project/venv/lib/python3.8/site-packages/mongoengine/queryset/queryset.py\", line 131, in _populate_cache\r\n    self._result_cache.append(six.next(self))\r\n  File \"/project/venv/lib/python3.8/site-packages/mongoengine/queryset/base.py\", line 1574, in __next__\r\n    raw_doc = six.next(self._cursor)\r\n  File \"/project/venv/lib/python3.8/site-packages/mongoengine/queryset/base.py\", line 1655, in _cursor\r\n    self._cursor_obj.where(where_clause)\r\nAttributeError: 'Cursor' object has no attribute 'where'\r\n```\r\n\r\n\r\nWorks without issues on an actual MongoDB instance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2327", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2327/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2327/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2327/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2327", "id": 619927508, "node_id": "MDU6SXNzdWU2MTk5Mjc1MDg=", "number": 2327, "title": "how to get random documents?", "user": {"login": "autodataming", "id": 7656130, "node_id": "MDQ6VXNlcjc2NTYxMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7656130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/autodataming", "html_url": "https://github.com/autodataming", "followers_url": "https://api.github.com/users/autodataming/followers", "following_url": "https://api.github.com/users/autodataming/following{/other_user}", "gists_url": "https://api.github.com/users/autodataming/gists{/gist_id}", "starred_url": "https://api.github.com/users/autodataming/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/autodataming/subscriptions", "organizations_url": "https://api.github.com/users/autodataming/orgs", "repos_url": "https://api.github.com/users/autodataming/repos", "events_url": "https://api.github.com/users/autodataming/events{/privacy}", "received_events_url": "https://api.github.com/users/autodataming/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-18T05:47:47Z", "updated_at": "2020-05-18T22:09:58Z", "closed_at": "2020-05-18T22:09:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I will to get 10 random documents?\r\n\r\n```py\r\ndb.mycoll.aggregate([{ $sample: { size: 10 } }])\r\n```\r\n\r\ndoes Mongoengiene has similiar API?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2324", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2324/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2324/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2324/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2324", "id": 616433042, "node_id": "MDU6SXNzdWU2MTY0MzMwNDI=", "number": 2324, "title": "v0.20.0 TypeError: 'Collection' object is not callable in set_read_write_concern", "user": {"login": "kurthaegeman", "id": 47026821, "node_id": "MDQ6VXNlcjQ3MDI2ODIx", "avatar_url": "https://avatars1.githubusercontent.com/u/47026821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurthaegeman", "html_url": "https://github.com/kurthaegeman", "followers_url": "https://api.github.com/users/kurthaegeman/followers", "following_url": "https://api.github.com/users/kurthaegeman/following{/other_user}", "gists_url": "https://api.github.com/users/kurthaegeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurthaegeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurthaegeman/subscriptions", "organizations_url": "https://api.github.com/users/kurthaegeman/orgs", "repos_url": "https://api.github.com/users/kurthaegeman/repos", "events_url": "https://api.github.com/users/kurthaegeman/events{/privacy}", "received_events_url": "https://api.github.com/users/kurthaegeman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-05-12T07:38:40Z", "updated_at": "2020-06-11T06:24:45Z", "closed_at": "2020-05-23T21:29:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "On v0.19.1, this works:\r\n```python\r\nfrom mongoengine import *\r\nclass User(Document):\r\n    name = StringField()\r\n    \r\nconnect(\"mongoenginetest\", host=\"mongomock://localhost\")\r\nUser.objects(name=\"Eric\").update(name=\"John\")\r\n```\r\n\r\nOn the newly released v0.20.0, this fails with\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Users/kurt/Dropbox/Python/CALEA/calea-processor/venv/lib/python3.8/site-packages/mongoengine/queryset/base.py\", line 540, in update\r\n    with set_read_write_concern(\r\n  File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py\", line 113, in __enter__\r\n    return next(self.gen)\r\n  File \"/Users/kurt/Dropbox/Python/CALEA/calea-processor/venv/lib/python3.8/site-packages/mongoengine/context_managers.py\", line 270, in set_read_write_concern\r\n    combined_read_concerns = dict(collection.read_concern.document.items())\r\nTypeError: 'Collection' object is not callable\r\n```\r\n\r\nIt also fails when using an explicit `$set` modifier operator with v0.20.0.\r\n```python\r\nUser.objects(name=\"Eric\").update(set__name=\"John\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2322", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2322/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2322/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2322/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2322", "id": 613019738, "node_id": "MDU6SXNzdWU2MTMwMTk3Mzg=", "number": 2322, "title": "LookupError when  delete document that has ReferenceField", "user": {"login": "hadan", "id": 304129, "node_id": "MDQ6VXNlcjMwNDEyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/304129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hadan", "html_url": "https://github.com/hadan", "followers_url": "https://api.github.com/users/hadan/followers", "following_url": "https://api.github.com/users/hadan/following{/other_user}", "gists_url": "https://api.github.com/users/hadan/gists{/gist_id}", "starred_url": "https://api.github.com/users/hadan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hadan/subscriptions", "organizations_url": "https://api.github.com/users/hadan/orgs", "repos_url": "https://api.github.com/users/hadan/repos", "events_url": "https://api.github.com/users/hadan/events{/privacy}", "received_events_url": "https://api.github.com/users/hadan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-06T03:06:28Z", "updated_at": "2020-05-23T21:30:47Z", "closed_at": "2020-05-23T21:30:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\nI found bizzare behaviour while I am working with mongoDB 4.2 using python 3.7 and library mongoengine 0.18.2. So, I want to delete a document that has reference field in it, but I got lookup error.\r\nHere's the illustration\r\nODM:\r\n\r\n```\r\nfrom mongoengine import Document\r\nfrom mongoengine.fields import *\r\n\r\nclass Myparent(Document):\r\n  fieldfoo1 = IntField()\r\n  fieldbar = IntField()\r\n\r\n\r\nclass Mychild(Document):\r\n  fieldfoo2 = StringField()\r\n  myparent = ReferenceField('Myparent')\r\n```\r\nHere's how I created the MyChild document:\r\n```\r\nparent_item = Parent.objects.get(id=222222)\r\nitem = MyChild()\r\nitem.fieldfoo2 = 'foo'\r\nitem.myparent = parent_item\r\nitem.save() # ex. objectid 123456\r\n```\r\n\r\nHere's how I want to delete:\r\n```\r\nmyc = MyChild.objects.get(id=123456)\r\nmyc.delete()\r\n```\r\n\r\nI got this error:\r\n```\r\nFile \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/transform.py\", line 60, in query\r\n    fields = _doc_cls._lookup_field(parts)\r\nFile \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/base/document.py\", line 1032, in _lookup_field\r\n    raise LookUpError('Cannot resolve field \"%s\"' % field_name)\r\nmongoengine.errors.LookUpError: Cannot resolve field \"myparent\"\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/document.py\", line 618, in delete\r\n    **self._object_key).delete(write_concern=write_concern, _from_doc_delete=True)\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/base.py\", line 472, in delete\r\n    if refs.count() > 0:\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/queryset.py\", line 133, in count\r\n    return super(QuerySet, self).count(with_limit_and_skip)\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/base.py\", line 398, in count\r\n    count = self._cursor.count(with_limit_and_skip=with_limit_and_skip)\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/base.py\", line 1558, in _cursor\r\n    self._cursor_obj = self._collection.find(self._query,\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/base.py\", line 1604, in _query\r\n    self._mongo_query = self._query_obj.to_query(self._document)\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/visitor.py\", line 89, in to_query\r\n    query = query.accept(QueryCompilerVisitor(document))\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/visitor.py\", line 162, in accept\r\n    return visitor.visit_query(self)\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/visitor.py\", line 78, in visit_query\r\n    return transform.query(self.document, **query.query)\r\n  File \"/mydir/venvpy37/lib/python3.7/site-packages/mongoengine/queryset/transform.py\", line 62, in query\r\n    raise InvalidQueryError(e)\r\nmongoengine.errors.InvalidQueryError: Cannot resolve field \"myparent\"\r\n```\r\nHope you guys have a clue\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2321", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2321/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2321/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2321/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2321", "id": 611373591, "node_id": "MDU6SXNzdWU2MTEzNzM1OTE=", "number": 2321, "title": "order_by(\"createdAt\") with $date does not work", "user": {"login": "tiavina-mika", "id": 42656064, "node_id": "MDQ6VXNlcjQyNjU2MDY0", "avatar_url": "https://avatars0.githubusercontent.com/u/42656064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tiavina-mika", "html_url": "https://github.com/tiavina-mika", "followers_url": "https://api.github.com/users/tiavina-mika/followers", "following_url": "https://api.github.com/users/tiavina-mika/following{/other_user}", "gists_url": "https://api.github.com/users/tiavina-mika/gists{/gist_id}", "starred_url": "https://api.github.com/users/tiavina-mika/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tiavina-mika/subscriptions", "organizations_url": "https://api.github.com/users/tiavina-mika/orgs", "repos_url": "https://api.github.com/users/tiavina-mika/repos", "events_url": "https://api.github.com/users/tiavina-mika/events{/privacy}", "received_events_url": "https://api.github.com/users/tiavina-mika/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-03T09:48:04Z", "updated_at": "2020-05-26T21:04:19Z", "closed_at": "2020-05-26T21:04:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this structure:\r\n`\r\n      \"createdAt\": {\r\n        \"$date\": 1588508384639\r\n      },\r\n`\r\nI have tried oreder_by(\"-createdAt\") and oreder_by(\"-createdAt.$date\") but neither does not work. \r\nWhat's the solution to sort by createdAt date?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2318", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2318/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2318/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2318/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2318", "id": 610662801, "node_id": "MDU6SXNzdWU2MTA2NjI4MDE=", "number": 2318, "title": "Default value not woking", "user": {"login": "dilless", "id": 12136712, "node_id": "MDQ6VXNlcjEyMTM2NzEy", "avatar_url": "https://avatars1.githubusercontent.com/u/12136712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dilless", "html_url": "https://github.com/dilless", "followers_url": "https://api.github.com/users/dilless/followers", "following_url": "https://api.github.com/users/dilless/following{/other_user}", "gists_url": "https://api.github.com/users/dilless/gists{/gist_id}", "starred_url": "https://api.github.com/users/dilless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dilless/subscriptions", "organizations_url": "https://api.github.com/users/dilless/orgs", "repos_url": "https://api.github.com/users/dilless/repos", "events_url": "https://api.github.com/users/dilless/events{/privacy}", "received_events_url": "https://api.github.com/users/dilless/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-01T09:27:39Z", "updated_at": "2020-05-01T09:36:11Z", "closed_at": "2020-05-01T09:36:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2317", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2317/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2317/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2317/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2317", "id": 608944496, "node_id": "MDU6SXNzdWU2MDg5NDQ0OTY=", "number": 2317, "title": "Documents including DictField cannot be saved if there is no default collection", "user": {"login": "arman00", "id": 23243866, "node_id": "MDQ6VXNlcjIzMjQzODY2", "avatar_url": "https://avatars2.githubusercontent.com/u/23243866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arman00", "html_url": "https://github.com/arman00", "followers_url": "https://api.github.com/users/arman00/followers", "following_url": "https://api.github.com/users/arman00/following{/other_user}", "gists_url": "https://api.github.com/users/arman00/gists{/gist_id}", "starred_url": "https://api.github.com/users/arman00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arman00/subscriptions", "organizations_url": "https://api.github.com/users/arman00/orgs", "repos_url": "https://api.github.com/users/arman00/repos", "events_url": "https://api.github.com/users/arman00/events{/privacy}", "received_events_url": "https://api.github.com/users/arman00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-29T10:27:19Z", "updated_at": "2020-05-02T13:34:18Z", "closed_at": "2020-04-30T15:36:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I save a document which includes a DictField, I always encounter the error:\r\n`mongoengine.connection.ConnectionFailure: You have not defined a default connection`. \r\n\r\nSo far, it has been only with DictField (I've tried several other fields, though not every one of them).\r\n\r\nThis happens because I connect using custom aliases to work with multiple databases simultaneously. My work around for this bug is just to open an extra dummy default connection (i.e., to have `alias=\"default\"`). When I debug, I see that this bug might be in retrieving the version in mongodb_support.py, since the default argument of get_connection is `alias=DEFAULT_CONNECTION_NAME`.\r\n\r\n`version_list = get_connection().server_info()[\"versionArray\"][:2]  # e.g: (3, 2)`\r\n\r\nTo reproduce:\r\n\r\n\r\n    my_alias = 'alias-dummy'\r\n    me.connect('mongoengine_dictfield_bug', host='localhost', port=27017, alias=my_alias)\r\n\r\n    class DictDoc(me.Document):\r\n        meta = dict(db_alias=my_alias)\r\n        val1 = me.DictField()\r\n        val2 = me.StringField()\r\n\r\n    doc = DictDoc()\r\n    doc.save()\r\n\r\n\r\n\r\nThanks for this great library!!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2316", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2316/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2316/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2316/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2316", "id": 608462479, "node_id": "MDU6SXNzdWU2MDg0NjI0Nzk=", "number": 2316, "title": "TypeError: Instantiating a document with positional arguments is not supported.", "user": {"login": "shwetankverma", "id": 11815328, "node_id": "MDQ6VXNlcjExODE1MzI4", "avatar_url": "https://avatars3.githubusercontent.com/u/11815328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shwetankverma", "html_url": "https://github.com/shwetankverma", "followers_url": "https://api.github.com/users/shwetankverma/followers", "following_url": "https://api.github.com/users/shwetankverma/following{/other_user}", "gists_url": "https://api.github.com/users/shwetankverma/gists{/gist_id}", "starred_url": "https://api.github.com/users/shwetankverma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shwetankverma/subscriptions", "organizations_url": "https://api.github.com/users/shwetankverma/orgs", "repos_url": "https://api.github.com/users/shwetankverma/repos", "events_url": "https://api.github.com/users/shwetankverma/events{/privacy}", "received_events_url": "https://api.github.com/users/shwetankverma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-28T16:44:59Z", "updated_at": "2020-04-30T15:16:20Z", "closed_at": "2020-04-30T15:16:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have created Document Definition as -\r\n```\r\nclass Post(Document):\r\n    title = StringField(required=True, max_length=200)\r\n    content = StringField(required=True)\r\n    author = StringField(required=True, max_length=50)\r\n    published = DateTimeField(default=datetime.datetime.now)\r\n```\r\n\r\nand I am inserting data from json file --\r\n\r\n```\r\ndata_json = json.load(data_file)\r\npost_1 = Post(data_file)\r\npost_1.save()\r\n```\r\n\r\nI am getting error as -\r\n\r\n> TypeError: Instantiating a document with positional arguments is not supported. Please use `field_name=value` keyword arguments.\r\n\r\nIs there no support to pass json file?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2312", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2312/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2312/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2312/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2312", "id": 606971254, "node_id": "MDU6SXNzdWU2MDY5NzEyNTQ=", "number": 2312, "title": "BooleanField error on False value", "user": {"login": "losewin", "id": 14087762, "node_id": "MDQ6VXNlcjE0MDg3NzYy", "avatar_url": "https://avatars3.githubusercontent.com/u/14087762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/losewin", "html_url": "https://github.com/losewin", "followers_url": "https://api.github.com/users/losewin/followers", "following_url": "https://api.github.com/users/losewin/following{/other_user}", "gists_url": "https://api.github.com/users/losewin/gists{/gist_id}", "starred_url": "https://api.github.com/users/losewin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/losewin/subscriptions", "organizations_url": "https://api.github.com/users/losewin/orgs", "repos_url": "https://api.github.com/users/losewin/repos", "events_url": "https://api.github.com/users/losewin/events{/privacy}", "received_events_url": "https://api.github.com/users/losewin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-26T09:56:53Z", "updated_at": "2020-04-30T22:01:49Z", "closed_at": "2020-04-30T22:01:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello guys, does someone bump into this error on version `0.19.1`\r\nI read already on other article but seems like this error should only occur on version lower than 0.19.1 and I thought this issue was already been fixed or did I do something wrong on my model?\r\n\r\n```python\r\nclass Cart(Document):\r\n\tid=SequenceField(required=True, primary_key=True)\r\n\tname=StringField(required=True)\r\n\r\n\tagency=StringField(required=True)\r\n\towner=ObjectIdField(required=True)\r\n\tactive=BooleanField(default=False)\r\n\r\n\tcreated_at=DateTimeField(default=datetime.datetime.utcnow())\r\n\r\n\t@property\r\n\tdef get_created_at(self):\r\n\t\treturn helper.localtime(self.created_at)\r\n\t\r\n\r\n\tmeta={'collection':'cart'}\r\n```\r\n\r\nIs this error part of my mistake?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2311", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2311/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2311/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2311/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2311", "id": 606917803, "node_id": "MDU6SXNzdWU2MDY5MTc4MDM=", "number": 2311, "title": "Strange behavior of .limit(0)", "user": {"login": "Ricky-Hao", "id": 14084342, "node_id": "MDQ6VXNlcjE0MDg0MzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/14084342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ricky-Hao", "html_url": "https://github.com/Ricky-Hao", "followers_url": "https://api.github.com/users/Ricky-Hao/followers", "following_url": "https://api.github.com/users/Ricky-Hao/following{/other_user}", "gists_url": "https://api.github.com/users/Ricky-Hao/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ricky-Hao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ricky-Hao/subscriptions", "organizations_url": "https://api.github.com/users/Ricky-Hao/orgs", "repos_url": "https://api.github.com/users/Ricky-Hao/repos", "events_url": "https://api.github.com/users/Ricky-Hao/events{/privacy}", "received_events_url": "https://api.github.com/users/Ricky-Hao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-26T04:45:35Z", "updated_at": "2020-05-27T07:43:36Z", "closed_at": "2020-05-27T07:43:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Code\r\n```python\r\nfrom mongoengine import connect, Document, IntField\r\n\r\nclass T(Document):\r\n    t = IntField()\r\n\r\nif __name__ == '__main__':\r\n    connect(host='mongomock://localhost')\r\n    list(T(t=i).save() for i in range(20))\r\n    cursor = T.objects().limit(0)\r\n    print(len(cursor))\r\n```\r\n\r\n## Result\r\n```\r\n0\r\n```\r\n\r\n## Expect Result\r\n```\r\n20\r\n```\r\n\r\n## Strange thing\r\nIn file `queryset\\base.py:824`, if `queryset`'s cursor object has already been created( seems it contains 20 Object), the result is `20`.\r\nBut if `queryset._cursor_obj` is None, the result will be `0`.\r\n![image](https://user-images.githubusercontent.com/14084342/80298110-b5fb4980-87bb-11ea-9beb-deb94777a3ba.png)\r\n![image](https://user-images.githubusercontent.com/14084342/80298118-c7445600-87bb-11ea-83fd-3b8b91f2e348.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2307", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2307/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2307/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2307/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2307", "id": 602497359, "node_id": "MDU6SXNzdWU2MDI0OTczNTk=", "number": 2307, "title": "Field not found in Document - Document does not seem to be saving: mongoengine.errors.FieldDoesNotExist: The fields \"{'ip_address'}\" do not exist on the document \"User\"", "user": {"login": "TokyoSamurai", "id": 63678066, "node_id": "MDQ6VXNlcjYzNjc4MDY2", "avatar_url": "https://avatars3.githubusercontent.com/u/63678066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TokyoSamurai", "html_url": "https://github.com/TokyoSamurai", "followers_url": "https://api.github.com/users/TokyoSamurai/followers", "following_url": "https://api.github.com/users/TokyoSamurai/following{/other_user}", "gists_url": "https://api.github.com/users/TokyoSamurai/gists{/gist_id}", "starred_url": "https://api.github.com/users/TokyoSamurai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TokyoSamurai/subscriptions", "organizations_url": "https://api.github.com/users/TokyoSamurai/orgs", "repos_url": "https://api.github.com/users/TokyoSamurai/repos", "events_url": "https://api.github.com/users/TokyoSamurai/events{/privacy}", "received_events_url": "https://api.github.com/users/TokyoSamurai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-18T16:24:28Z", "updated_at": "2020-04-19T16:39:12Z", "closed_at": "2020-04-19T16:39:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to do things with my User document, such as: `print(User.objects)`\r\nIt raises: \r\n`mongoengine.errors.FieldDoesNotExist: The fields \"{'ip_address'}\" do not exist on the document \"User\"`\r\n\r\nBut my document is:\r\n\r\n`connect('mongotest2')`\r\n\r\n`class User(Document):`\r\n    `email = EmailField(unique=True, required=True)`\r\n    `password = StringField(required=True)`\r\n    `admin = BooleanField(default=False)`\r\n   ` registered = BooleanField(default=False)`\r\n    `date_created = DateTimeField(default=datetime.utcnow)`\r\n    `loggedIn = IntField(required=True)`\r\n    `ip_addresses = StringField(required=False)` *<---- ip_address field*\r\n    `Info = StringField()`\r\n\r\nThe ip_address field exists, is the python file not saving?\r\nIf anyone could help me I would greatly appreciate it, thank you for the work that you do.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2306", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2306/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2306/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2306/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2306", "id": 601511813, "node_id": "MDU6SXNzdWU2MDE1MTE4MTM=", "number": 2306, "title": "name = CustomerInfo.objects(email=\"email\").name | AttributeError: 'QuerySet' object has no attribute 'name' --- What is the correct way to find an object, and get data from it", "user": {"login": "TokyoSamurai", "id": 63678066, "node_id": "MDQ6VXNlcjYzNjc4MDY2", "avatar_url": "https://avatars3.githubusercontent.com/u/63678066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TokyoSamurai", "html_url": "https://github.com/TokyoSamurai", "followers_url": "https://api.github.com/users/TokyoSamurai/followers", "following_url": "https://api.github.com/users/TokyoSamurai/following{/other_user}", "gists_url": "https://api.github.com/users/TokyoSamurai/gists{/gist_id}", "starred_url": "https://api.github.com/users/TokyoSamurai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TokyoSamurai/subscriptions", "organizations_url": "https://api.github.com/users/TokyoSamurai/orgs", "repos_url": "https://api.github.com/users/TokyoSamurai/repos", "events_url": "https://api.github.com/users/TokyoSamurai/events{/privacy}", "received_events_url": "https://api.github.com/users/TokyoSamurai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-16T21:44:50Z", "updated_at": "2020-04-18T15:12:45Z", "closed_at": "2020-04-18T15:12:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I do:\r\n`name = CustomerInfo.objects(email=\"email\").name\r\n\r\nprint(name)`\r\n\r\nIt raises: `AttributeError: 'QuerySet' object has no attribute 'name'`\r\n\r\nI want to find the object or data set with the email \"email\", and then get the name from that data set.\r\nThis is my document:\r\n`class CustomerInfo(Document):\r\n    email = EmailField(required=True, unique=True)\r\n    name = StringField(required=True)\r\n    lastName = StringField(required=True)\r\n    zipCode = IntField(required=True, unique=False)\r\n    address = StringField(required=True)\r\n    phoneNumber = IntField(unique=True)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2305", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2305/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2305/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2305/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2305", "id": 597596643, "node_id": "MDU6SXNzdWU1OTc1OTY2NDM=", "number": 2305, "title": "Setting variables during __init__() freezes them forever", "user": {"login": "burchill", "id": 14200655, "node_id": "MDQ6VXNlcjE0MjAwNjU1", "avatar_url": "https://avatars1.githubusercontent.com/u/14200655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burchill", "html_url": "https://github.com/burchill", "followers_url": "https://api.github.com/users/burchill/followers", "following_url": "https://api.github.com/users/burchill/following{/other_user}", "gists_url": "https://api.github.com/users/burchill/gists{/gist_id}", "starred_url": "https://api.github.com/users/burchill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burchill/subscriptions", "organizations_url": "https://api.github.com/users/burchill/orgs", "repos_url": "https://api.github.com/users/burchill/repos", "events_url": "https://api.github.com/users/burchill/events{/privacy}", "received_events_url": "https://api.github.com/users/burchill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-09T22:47:02Z", "updated_at": "2020-04-14T19:45:42Z", "closed_at": "2020-04-14T19:45:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "After spending hours debugging some of my code, I realized that whenever I set a document's fields in `__init__()` they became locked in and could never change.  Not only is this behavior incredibly unexpected, but no functions seem to give any explicit indication of this behavior.  For example, when I try to `update()` or `modify()` the fields I had set in `__init__()`, they return as if they *had* updated the fields (though they actually haven't).\r\n\r\nI can see that there might be good-ish reasons for this behavior, but you might want to have some warnings raised when mongoengine tries to update these un-updateable fields, or at the very least mention this in the docs somewhere.\r\n\r\nAs an aside, is there any way to set initial values in `__init__()` without getting this behavior?\r\n\r\nHere's a minimal example:\r\n\r\n```python\r\nclass User(Document):\r\n    b  = BooleanField(default=False)\r\n    b2 = BooleanField(default=False)\r\n    \r\n    def __init__(self, **kwargs):\r\n        super(Document, self).__init__(**kwargs)\r\n        self.b=True\r\n        \r\nuser = User().save()\r\nUser.objects().first().modify(set__b=True)\r\nUser.objects().first().modify(set__b2=True)\r\n# Didn't update\r\nUser.objects().first().b\r\n# Did update\r\nUser.objects().first().b2\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2303", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2303/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2303/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2303/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2303", "id": 595714801, "node_id": "MDU6SXNzdWU1OTU3MTQ4MDE=", "number": 2303, "title": "No module named 'service' inspite of being installed service", "user": {"login": "smeet-kothari", "id": 53287228, "node_id": "MDQ6VXNlcjUzMjg3MjI4", "avatar_url": "https://avatars2.githubusercontent.com/u/53287228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smeet-kothari", "html_url": "https://github.com/smeet-kothari", "followers_url": "https://api.github.com/users/smeet-kothari/followers", "following_url": "https://api.github.com/users/smeet-kothari/following{/other_user}", "gists_url": "https://api.github.com/users/smeet-kothari/gists{/gist_id}", "starred_url": "https://api.github.com/users/smeet-kothari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smeet-kothari/subscriptions", "organizations_url": "https://api.github.com/users/smeet-kothari/orgs", "repos_url": "https://api.github.com/users/smeet-kothari/repos", "events_url": "https://api.github.com/users/smeet-kothari/events{/privacy}", "received_events_url": "https://api.github.com/users/smeet-kothari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-07T09:10:08Z", "updated_at": "2020-04-25T20:03:43Z", "closed_at": "2020-04-25T20:03:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "[import mongoengiene as mg\r\nimport service.data_service as svc\r\n\r\nmongo_setup.global_int()\r\n\r\ndef Register():\r\n    print('-----------------------------------------------------GET REGISTERED HERE-----------------------------------')\r\n    name = input('Please Enter your Name')\r\n    primary_email = input('Please Enter Your Email')\r\n    psd = input('Please Enter password To stay safe')\r\n    \r\n    b = find_account_by_mail(primary_email)\r\n    if(b):\r\n        print(\"Already Exist\")\r\n    else:\r\n        state.active_account = svc.create_account( name, primary_email, psd)\r\n        print('Thank You')](url)\r\n\r\n\r\n'''\r\nLec 15:- Creating acc.\r\nconnect('project1', username='webapp', password='pwd123', authentication_source='admin')\r\n'''\r\nLearning From Michael Kennedy Sir on his Course On Udemy", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2300", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2300/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2300/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2300/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2300", "id": 594662238, "node_id": "MDU6SXNzdWU1OTQ2NjIyMzg=", "number": 2300, "title": "How to convert Aggregation to list of Mongoengine objects?", "user": {"login": "youmee", "id": 1927138, "node_id": "MDQ6VXNlcjE5MjcxMzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1927138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/youmee", "html_url": "https://github.com/youmee", "followers_url": "https://api.github.com/users/youmee/followers", "following_url": "https://api.github.com/users/youmee/following{/other_user}", "gists_url": "https://api.github.com/users/youmee/gists{/gist_id}", "starred_url": "https://api.github.com/users/youmee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/youmee/subscriptions", "organizations_url": "https://api.github.com/users/youmee/orgs", "repos_url": "https://api.github.com/users/youmee/repos", "events_url": "https://api.github.com/users/youmee/events{/privacy}", "received_events_url": "https://api.github.com/users/youmee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-05T21:45:24Z", "updated_at": "2020-05-26T22:01:41Z", "closed_at": "2020-05-26T22:01:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to convert aggregation results to Mongoengine Document objects (models)?\r\nFor now I do it that way:\r\n```python\r\nfrom bson.json_util import dumps\r\n# pipeline aggregation somewhere here\r\nresults = MyModel.objects.aggregate(*pipeline)\r\nobjects = [MyModel.from_json(dumps(dict_object)) for dict_object in results]\r\n```\r\nIs there any better way to do that? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2293", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2293/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2293/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2293/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2293", "id": 588246598, "node_id": "MDU6SXNzdWU1ODgyNDY1OTg=", "number": 2293, "title": "ValidationError (TableOrder2:None) (Invalid embedded document instance provided to an EmbeddedDocumentField: ['orders'])", "user": {"login": "ash-perfect", "id": 20687023, "node_id": "MDQ6VXNlcjIwNjg3MDIz", "avatar_url": "https://avatars2.githubusercontent.com/u/20687023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ash-perfect", "html_url": "https://github.com/ash-perfect", "followers_url": "https://api.github.com/users/ash-perfect/followers", "following_url": "https://api.github.com/users/ash-perfect/following{/other_user}", "gists_url": "https://api.github.com/users/ash-perfect/gists{/gist_id}", "starred_url": "https://api.github.com/users/ash-perfect/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ash-perfect/subscriptions", "organizations_url": "https://api.github.com/users/ash-perfect/orgs", "repos_url": "https://api.github.com/users/ash-perfect/repos", "events_url": "https://api.github.com/users/ash-perfect/events{/privacy}", "received_events_url": "https://api.github.com/users/ash-perfect/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-26T08:38:38Z", "updated_at": "2020-04-25T20:09:40Z", "closed_at": "2020-04-25T20:09:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "The order of defining classes is giving an error, it shouldn't right?\r\n\r\n```\r\nclass Order2(EmbeddedDocument):\r\n    pass\r\n\r\nclass TableOrder2(Document):\r\n    table = ReferenceField(Table)\r\n    orders = ListField(EmbeddedDocumentField(Order2))\r\n    timestamp = DateTimeField(default=datetime.datetime.now())\r\n    \r\nclass Order2(EmbeddedDocument):\r\n    food1 = StringField()\r\n    food2=StringField()\r\n\r\n\r\nto2 = TableOrder2(table=Table.objects[10].to_dbref())\r\nto2.orders.append(Order2(food1='asdfs',food2='vfvfv'))\r\n\r\nto2.save()\r\n```\r\nThis gives \r\n\r\n> ValidationError: ValidationError (TableOrder2:None) (Invalid embedded document instance provided to an EmbeddedDocumentField: ['orders'])\r\n\r\nWhereas if I change the order of declaration, i can save it without any error.\r\n\r\n```\r\nclass Order2(EmbeddedDocument):\r\n    pass\r\n\r\nclass Order2(EmbeddedDocument):\r\n    food1 = StringField()\r\n    food2=StringField()\r\n\r\nclass TableOrder2(Document):\r\n    table = ReferenceField(Table)\r\n    orders = ListField(EmbeddedDocumentField(Order2))\r\n    timestamp = DateTimeField(default=datetime.datetime.now())\r\n    \r\n\r\n\r\nto2 = TableOrder2(table=Table.objects[10].to_dbref())\r\nto2.orders.append(Order2(food1='asdfs',food2='vfvfv'))\r\n\r\nto2.save()\r\n```\r\nThis works.\r\nAm I doing something wrong or is this a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2292", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2292/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2292/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2292/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2292", "id": 587268391, "node_id": "MDU6SXNzdWU1ODcyNjgzOTE=", "number": 2292, "title": "reverse_cascade_rule=NULLIFY for ReferenceField deletes whole field", "user": {"login": "karipov", "id": 19636264, "node_id": "MDQ6VXNlcjE5NjM2MjY0", "avatar_url": "https://avatars3.githubusercontent.com/u/19636264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karipov", "html_url": "https://github.com/karipov", "followers_url": "https://api.github.com/users/karipov/followers", "following_url": "https://api.github.com/users/karipov/following{/other_user}", "gists_url": "https://api.github.com/users/karipov/gists{/gist_id}", "starred_url": "https://api.github.com/users/karipov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karipov/subscriptions", "organizations_url": "https://api.github.com/users/karipov/orgs", "repos_url": "https://api.github.com/users/karipov/repos", "events_url": "https://api.github.com/users/karipov/events{/privacy}", "received_events_url": "https://api.github.com/users/karipov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-24T20:45:46Z", "updated_at": "2020-03-24T22:05:11Z", "closed_at": "2020-03-24T21:28:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have mongoengine classes roughly defined as such:\r\n```python\r\nfrom mongoengine import *\r\n\r\nclass User(Document):\r\n    user_id = IntField(required=True, unique=True)\r\n    email = StringField(required=True)\r\n\r\nclass Channel(Document):\r\n    title = StringField(required=True)\r\n    subbed = ListField(ReferenceField(User, reverse_delete_rule=NULLIFY), default=list)\r\n```\r\nIn my code I create instances of these classes and relate them something like:\r\n```python3\r\nuser1 = User(user_id=77, email=\"77@ex.com\").save()\r\nuser2 = User(user_id=66, email=\"66@ex.com\").save()\r\n\r\nchan1 = Channel(title=\"Global News\")\r\nchan1.subbed.extend([user1, user2])\r\nchan1.save()\r\n\r\nuser1.delete() # launches the reverse_delete_rule \r\n```\r\nFollowing this piece of code, to me it is only logical that deleting the `user1` object will nullify any references made to it (docs: `NULLIFY (1) - Updates the reference to null.`) in the `chan1` document and produce the following __expected__ raw MongoDB data:\r\n```\r\n{\r\n    \"_id\" : ObjectId(\"5e1ee3c4055cf2d5c7d0e954\"),\r\n    \"title\" : \"Global News\",\r\n    \"subbed\" : [ \r\n        ObjectId(\"user with id 66\")\r\n    ]\r\n}\r\n```\r\nHowever, what happens instead is that the whole field gets deleted, along with the second user's `user2` reference:\r\n```\r\n{\r\n    \"_id\" : ObjectId(\"5e1ee3c4055cf2d5c7d0e954\"),\r\n    \"title\" : \"Global News\",\r\n}\r\n```\r\nWhy is this the case? Is this intended? Can I do something about it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2291", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2291/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2291/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2291/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2291", "id": 586882958, "node_id": "MDU6SXNzdWU1ODY4ODI5NTg=", "number": 2291, "title": "Feat: Customizable dict and json conversion methods", "user": {"login": "bjoluc", "id": 25661029, "node_id": "MDQ6VXNlcjI1NjYxMDI5", "avatar_url": "https://avatars0.githubusercontent.com/u/25661029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjoluc", "html_url": "https://github.com/bjoluc", "followers_url": "https://api.github.com/users/bjoluc/followers", "following_url": "https://api.github.com/users/bjoluc/following{/other_user}", "gists_url": "https://api.github.com/users/bjoluc/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjoluc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjoluc/subscriptions", "organizations_url": "https://api.github.com/users/bjoluc/orgs", "repos_url": "https://api.github.com/users/bjoluc/repos", "events_url": "https://api.github.com/users/bjoluc/events{/privacy}", "received_events_url": "https://api.github.com/users/bjoluc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-24T11:16:35Z", "updated_at": "2020-06-01T21:06:43Z", "closed_at": "2020-06-01T21:06:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I implemented a little (<80 LOC) helper library and would be willing to work on integrating its features into MongoEngine if there is any interest in this. If not, I will consider publishing it as an external package. Here's the details:\r\n\r\nA frequent use case in my application is to modify `to_pymongo()`'s return value by\r\n* Converting certain field's values with custom functions\r\n* Excluding certain fields from serialization\r\n* Renaming certain fields in the output dict\r\n\r\nHere's how my extension currently does it (regardless of field type):\r\n * Custom conversion function: ```id = UuidField(custom_json=str)``` (especially useful for dates)\r\n * Changing the field name: ```name = StringField(custom_json=\"myName\")```\r\n * Both of the previous functionalities together: ```id = UuidField(custom_json=(\"theId\", str))```\r\n * Hiding a field: ```password_hash = BinaryField(custom_json=CustomJsonRules.HIDDEN)```\r\n\r\nThis allows users to include custom serialization logic for fields (via their own functions) and makes serialization of documents highly customizable. Additional `CustomJsonRules` would also make sense to control dereferencing.\r\n\r\nCurrently, my implementation provides two external methods `to_custom_dict` and `to_custom_json`, but a Document-method-based (or even Field-based?) integration into MongoEngine would be a beautiful thing. It could also be integrated with #2101.\r\nIssues approached by this may include #549, #1281, #1745, #1780, #1970, and #2030.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2289", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2289/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2289/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2289/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2289", "id": 586242172, "node_id": "MDU6SXNzdWU1ODYyNDIxNzI=", "number": 2289, "title": "strict applied even if false", "user": {"login": "nautilor", "id": 9730983, "node_id": "MDQ6VXNlcjk3MzA5ODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9730983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nautilor", "html_url": "https://github.com/nautilor", "followers_url": "https://api.github.com/users/nautilor/followers", "following_url": "https://api.github.com/users/nautilor/following{/other_user}", "gists_url": "https://api.github.com/users/nautilor/gists{/gist_id}", "starred_url": "https://api.github.com/users/nautilor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nautilor/subscriptions", "organizations_url": "https://api.github.com/users/nautilor/orgs", "repos_url": "https://api.github.com/users/nautilor/repos", "events_url": "https://api.github.com/users/nautilor/events{/privacy}", "received_events_url": "https://api.github.com/users/nautilor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-23T14:15:01Z", "updated_at": "2020-03-23T15:38:44Z", "closed_at": "2020-03-23T15:38:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Document defined like this\r\n\r\n\r\n    class BaseModel(Document):\r\n        meta = {'allow_inheritance': True,\r\n                'abstract': True,\r\n                 'strict': False}\r\n        creation_date = DateField(default=datetime.now())\r\n\r\n\r\n    class Game(BaseModel):\r\n        meta = {'strict': False}\r\n        game_id = IntField()\r\n        publisher_id = IntField()\r\n        type = StringField()\r\n        year = StringField()\r\n        month = StringField()\r\n        day = StringField()\r\n        boxart_url = StringField()\r\n\r\n\r\nnow when i run something like\r\n\r\n    res = requests.get(API_URL).content\r\n    res = json.loads(res)\r\n    game = Game(**res)\r\n\r\nI receive `mongoengine.errors.FieldDoesNotExist: The fields \"{...}\"  do not exist on the document \"Game\"` with all the fields not declared on the document\r\n\r\nAll I wanted to do is to ignore all the fields not declared inside `Game`\r\n\r\nthe version of mongoengine I am using `0.19.1`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2282", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2282/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2282/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2282/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2282", "id": 582270514, "node_id": "MDU6SXNzdWU1ODIyNzA1MTQ=", "number": 2282, "title": "Renaming of \"_cls\" key", "user": {"login": "msanders70", "id": 16937349, "node_id": "MDQ6VXNlcjE2OTM3MzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/16937349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msanders70", "html_url": "https://github.com/msanders70", "followers_url": "https://api.github.com/users/msanders70/followers", "following_url": "https://api.github.com/users/msanders70/following{/other_user}", "gists_url": "https://api.github.com/users/msanders70/gists{/gist_id}", "starred_url": "https://api.github.com/users/msanders70/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msanders70/subscriptions", "organizations_url": "https://api.github.com/users/msanders70/orgs", "repos_url": "https://api.github.com/users/msanders70/repos", "events_url": "https://api.github.com/users/msanders70/events{/privacy}", "received_events_url": "https://api.github.com/users/msanders70/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-16T12:51:16Z", "updated_at": "2020-04-02T15:15:51Z", "closed_at": "2020-03-17T09:16:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nfor schema inheritance with polymorphic models (allow_inheritance=True) the field \"_cls\" will be added to the saved document. This field contains by default the class name, but can be overridden by:\r\n\r\nclass MyDocument(mongoengine.Document):\r\n    def __init__(self, **kwargs):\r\n        kwargs['_cls'] = 'MyOtherDocument'\r\n        super().__init__(**kwargs)\r\n\r\nSo far so good.\r\n\r\nIn the mongoose ODM for Javascript this is called a discriminator, by default it's \"__t\" (instead of \"_cls\" in mongoengine). But mongoose offers the possibility to rename this key \"__t\" by setting a \"descriminatorKey\" property.\r\n\r\n1) Does mongoengine offers this possibility of renaming the discriminator key too?\r\n\r\n2) When setting the value for \"_cls\" to something different than the class name (as mentioned above), querying the collection fails, because \"_cls\" will be added to the query using the class name, no chance to set it differently. Any hint for that?\r\n\r\nBest regards.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2280", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2280/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2280/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2280/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2280", "id": 579055295, "node_id": "MDU6SXNzdWU1NzkwNTUyOTU=", "number": 2280, "title": "ReferenceField reference object with dict description", "user": {"login": "ksmoore17", "id": 33409847, "node_id": "MDQ6VXNlcjMzNDA5ODQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/33409847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksmoore17", "html_url": "https://github.com/ksmoore17", "followers_url": "https://api.github.com/users/ksmoore17/followers", "following_url": "https://api.github.com/users/ksmoore17/following{/other_user}", "gists_url": "https://api.github.com/users/ksmoore17/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksmoore17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksmoore17/subscriptions", "organizations_url": "https://api.github.com/users/ksmoore17/orgs", "repos_url": "https://api.github.com/users/ksmoore17/repos", "events_url": "https://api.github.com/users/ksmoore17/events{/privacy}", "received_events_url": "https://api.github.com/users/ksmoore17/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-11T07:14:01Z", "updated_at": "2020-03-15T20:36:53Z", "closed_at": "2020-03-15T10:26:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think it would be useful for ReferenceFields to be able to take a dict describing the model for reference instead of requiring the the referenced object itself or the id of this object. Currently, I have to make another explicit query on the referenced collection to get an instance of the object I want to reference.\r\n\r\nWith models:\r\n```\r\nclass Team(Document):\r\n    name = StringField(unique=True)\r\n\r\nclass User(Document):\r\n    username = StringField(unique=True)\r\n    team = ReferenceField('Team')\r\n\r\nteam_dict = {\r\n    'name': 'team1'\r\n}\r\n```\r\nAssuming the keys in `team_dict` represent a unique index of the target reference model.\r\nHow I'd do this now:\r\n```\r\nt = Team.objects.get(**team_dict)\r\nu = User(username='ksmoore17', team=t)\r\n```\r\n\r\nSuggested:\r\n```\r\nu = User(username='ksmoore17', team=team_dict)\r\n```\r\nWhich throws this error when trying to interact with the referenced object as `u.team`\r\n```\r\nmongoengine.errors.DoesNotExist: Trying to dereference unknown document DBRef('teams', {'name': 'team1'})\r\n```\r\n\r\nI'm just suggesting to essentially shift the `t = Team.objects.get(**team_dict)` line into the `Document.__init__()` behind the `User` call for all reference fields. This could happen in `validate()` as well where it tries to convert the dict to a DBRef or ObjectID if it's not one already (on first validation).\r\n\r\nCurrently I have to import a model to query for it in the case where I receive a description of a reference document in a JSON post body, for example. I could also write a clean function that handles this referencing query, but it would be specific to each document type.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2277", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2277/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2277/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2277/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2277", "id": 574428188, "node_id": "MDU6SXNzdWU1NzQ0MjgxODg=", "number": 2277, "title": "document save trigger twice", "user": {"login": "alibaltschun", "id": 15415988, "node_id": "MDQ6VXNlcjE1NDE1OTg4", "avatar_url": "https://avatars3.githubusercontent.com/u/15415988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alibaltschun", "html_url": "https://github.com/alibaltschun", "followers_url": "https://api.github.com/users/alibaltschun/followers", "following_url": "https://api.github.com/users/alibaltschun/following{/other_user}", "gists_url": "https://api.github.com/users/alibaltschun/gists{/gist_id}", "starred_url": "https://api.github.com/users/alibaltschun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alibaltschun/subscriptions", "organizations_url": "https://api.github.com/users/alibaltschun/orgs", "repos_url": "https://api.github.com/users/alibaltschun/repos", "events_url": "https://api.github.com/users/alibaltschun/events{/privacy}", "received_events_url": "https://api.github.com/users/alibaltschun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-03T05:36:27Z", "updated_at": "2020-03-24T19:59:34Z", "closed_at": "2020-03-11T07:58:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "hello, i have a problem with document.save()\r\nwhile iam not call object.save(), the program not save data to mongo.\r\nbut while i tried object.save(), that trigger twice and create two document.\r\n\r\nmodels.py\r\n> class User(Document):\r\n>     name = StringField(required=True)\r\n>     embankments = ListField(ReferenceField(Embankment))\r\n>     email = EmailField(required=True, unique=True)\r\n>     password = StringField(required=True)\r\n\r\n\r\ndatabase.py -> db_setup()\r\n> user = User(name=\"test1\",\r\n>                 email=\"test2@gmail.com\",\r\n>                 password=\"test123\",\r\n>                 embankments=[embankment1, embankment2])\r\n>     user.save()\r\n\r\nmongoenine : 0.19.1\r\npython : 3.6.9\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2274", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2274/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2274/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2274/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2274", "id": 569715328, "node_id": "MDU6SXNzdWU1Njk3MTUzMjg=", "number": 2274, "title": "InvalidationError in Document of EmbeddedDocument of EmbeddedDocuemntListField", "user": {"login": "kimjj81", "id": 795278, "node_id": "MDQ6VXNlcjc5NTI3OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/795278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimjj81", "html_url": "https://github.com/kimjj81", "followers_url": "https://api.github.com/users/kimjj81/followers", "following_url": "https://api.github.com/users/kimjj81/following{/other_user}", "gists_url": "https://api.github.com/users/kimjj81/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimjj81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimjj81/subscriptions", "organizations_url": "https://api.github.com/users/kimjj81/orgs", "repos_url": "https://api.github.com/users/kimjj81/repos", "events_url": "https://api.github.com/users/kimjj81/events{/privacy}", "received_events_url": "https://api.github.com/users/kimjj81/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-24T08:54:57Z", "updated_at": "2020-02-26T08:02:38Z", "closed_at": "2020-02-26T08:02:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "from datetime import datetime\r\n\r\nclass SensorType(Document):\r\n    uid = IntField(unique=True)\r\n    name = StringField(max_length=50)\r\n\r\nclass SensorMeasure(EmbeddedDocument):\r\n    value = FloatField(null=True)\r\n    sensor_type = ReferenceField('SensorType',dbref=True)\r\n\r\nclass SensorMeasureEntry(Document):\r\n    timestamp = DateTiemField()\r\n    measurements = EmbeddedDocumentListField(SensorMeasure)\r\n\r\ndt = datetime.now()\r\nst = SensorType(uid=1,name='Temperature')\r\nm = SensorMeasure(value=12.3,st)\r\n\r\nentry = SensorMeasureEntry.objects(timestamp=ts)\r\nentry.update(timestamp=ts,upsert=True)\r\nentry.update(push_all__measurement=[m],upsert=True)\r\n\r\n> Traceback (most recent call last):\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/base/fields.py\", line 517, in to_mongo\r\n>     return ObjectId(six.text_type(value))\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/bson/objectid.py\", line 110, in __init__\r\n>     self.__validate(oid)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/bson/objectid.py\", line 213, in __validate\r\n>     _raise_invalid_id(oid)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/bson/objectid.py\", line 40, in _raise_invalid_id\r\n>     \" or a 24-character hex string\" % oid)\r\n> bson.errors.InvalidId: \"[ObjectId('5e531c513c14fe6e4570e50c')]\" is not a valid ObjectId, it must be a 12-byte input or a 24-character hex string\r\n> \r\nDuring handling of the above exception, another excep\r\n\r\n> tion occurred:\r\n> \r\n> Traceback (most recent call last):\r\n>   File \"<console>\", line 1, in <module>\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/core/mongo_models.py\", line 65, in push_measurements\r\n>     entry.update(push_all__measurements=sensormeasures,upsert=True)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/queryset/base.py\", line 521, in update\r\n>     update = transform.update(queryset._document, **update)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/queryset/transform.py\", line 321, in update\r\n>     value = [field.prepare_query_value(op, v) for v in value]\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/queryset/transform.py\", line 321, in <listcomp>\r\n>     value = [field.prepare_query_value(op, v) for v in value]\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/fields.py\", line 971, in prepare_query_value\r\n>     return self.field.prepare_query_value(op, value)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/fields.py\", line 790, in prepare_query_value\r\n>     return self.to_mongo(value)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/fields.py\", line 759, in to_mongo\r\n>     return self.document_type.to_mongo(value, use_db_field, fields)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/document.py\", line 98, in to_mongo\r\n>     data = super(EmbeddedDocument, self).to_mongo(*args, **kwargs)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/base/document.py\", line 379, in to_mongo\r\n>     value = field.to_mongo(value, **ex_vars)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/fields.py\", line 1279, in to_mongo\r\n>     id_ = id_field.to_mongo(id_)\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/base/fields.py\", line 520, in to_mongo\r\n>     self.error(six.text_type(e))\r\n>   File \"/Users/kimjeongjin/Repository/litmus_nuevo_server/backend/myevnv/lib/python3.7/site-packages/mongoengine/base/fields.py\", line 180, in error\r\n>     raise ValidationError(message, errors=errors, field_name=field_name)\r\n> mongoengine.errors.ValidationError: \"[ObjectId('5e531c513c14fe6e4570e50c')]\" is not a valid ObjectId, it must be a 12-byte input or a 24-character hex string\r\n\r\n[ObjectId('5e531c513c14fe6e4570e50c')] is a SensorType instance (variable st).\r\nIn /mongoengine/base/fields.py, six. 516 line\r\n\r\n> return ObjectId(six.text_type(value))\r\nI think it should return just id string, but sixt.text_type returns \"[ObjectId(.......)]\", \r\n\r\n\r\nWhat should I do?\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2273", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2273/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2273/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2273/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2273", "id": 569386727, "node_id": "MDU6SXNzdWU1NjkzODY3Mjc=", "number": 2273, "title": " ValidationError on nested Documents", "user": {"login": "ostwalprasad", "id": 18458949, "node_id": "MDQ6VXNlcjE4NDU4OTQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/18458949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ostwalprasad", "html_url": "https://github.com/ostwalprasad", "followers_url": "https://api.github.com/users/ostwalprasad/followers", "following_url": "https://api.github.com/users/ostwalprasad/following{/other_user}", "gists_url": "https://api.github.com/users/ostwalprasad/gists{/gist_id}", "starred_url": "https://api.github.com/users/ostwalprasad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ostwalprasad/subscriptions", "organizations_url": "https://api.github.com/users/ostwalprasad/orgs", "repos_url": "https://api.github.com/users/ostwalprasad/repos", "events_url": "https://api.github.com/users/ostwalprasad/events{/privacy}", "received_events_url": "https://api.github.com/users/ostwalprasad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-22T20:08:30Z", "updated_at": "2020-02-24T16:03:43Z", "closed_at": "2020-02-24T16:03:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm creating nested level documents with two levels(Embedded Document inside Embedded Document)\r\n\r\nHere's the code:\r\n\r\n```\r\nclass CommentDetails(EmbeddedDocument):\r\n    name = StringField()\r\n    category = StringField()\r\n        \r\nclass Comment(EmbeddedDocument):\r\n    content = StringField()\r\n    comments = ListField(EmbeddedDocumentField(CommentDetails))\r\n    \r\nclass Page(Document):\r\n    comments = ListField(EmbeddedDocumentField(Comment))\r\n    \r\ncomment1 = Comment(content='Good work!',comments=CommentDetails(name='John',category='fashion'))\r\ncomment2 = Comment(content='Nice article!',comments=CommentDetails(name='Mike',category='tech'))\r\n\r\npage = Page(comments=[comment1, comment2])\r\npage.save()\r\n```\r\n\r\n\r\nIt gives following error on running:\r\n\r\n> ValidationError: ValidationError (Page:None) (comments.Only lists and tuples may be used in a list field 1.comments.Only lists and tuples may be used in a list field: ['comments'])\r\n\r\nI tried with single nested document and it works, but not quite sure why it is not working for two levels.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2270", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2270/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2270/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2270/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2270", "id": 568810422, "node_id": "MDU6SXNzdWU1Njg4MTA0MjI=", "number": 2270, "title": "Signal senders from Base Document Class", "user": {"login": "alchemistake", "id": 9083268, "node_id": "MDQ6VXNlcjkwODMyNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/9083268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alchemistake", "html_url": "https://github.com/alchemistake", "followers_url": "https://api.github.com/users/alchemistake/followers", "following_url": "https://api.github.com/users/alchemistake/following{/other_user}", "gists_url": "https://api.github.com/users/alchemistake/gists{/gist_id}", "starred_url": "https://api.github.com/users/alchemistake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alchemistake/subscriptions", "organizations_url": "https://api.github.com/users/alchemistake/orgs", "repos_url": "https://api.github.com/users/alchemistake/repos", "events_url": "https://api.github.com/users/alchemistake/events{/privacy}", "received_events_url": "https://api.github.com/users/alchemistake/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-21T08:31:27Z", "updated_at": "2020-03-16T09:11:03Z", "closed_at": "2020-03-16T09:11:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a abstract class in our codebase that is expanded by many documents. There is a post_save procedure we want to add to every single one of the documents that expands the base class.\r\nIs there a way to do it?\r\n\r\nDo I need to add `signals.post_save.connect`every doc we have which will decrease maintainability on our side, I don't want to break the whole system I'm working on.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2268", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2268/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2268/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2268/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2268", "id": 565526273, "node_id": "MDU6SXNzdWU1NjU1MjYyNzM=", "number": 2268, "title": "Add support for $elemMatch projection operator.", "user": {"login": "abarto", "id": 5585302, "node_id": "MDQ6VXNlcjU1ODUzMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5585302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abarto", "html_url": "https://github.com/abarto", "followers_url": "https://api.github.com/users/abarto/followers", "following_url": "https://api.github.com/users/abarto/following{/other_user}", "gists_url": "https://api.github.com/users/abarto/gists{/gist_id}", "starred_url": "https://api.github.com/users/abarto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abarto/subscriptions", "organizations_url": "https://api.github.com/users/abarto/orgs", "repos_url": "https://api.github.com/users/abarto/repos", "events_url": "https://api.github.com/users/abarto/events{/privacy}", "received_events_url": "https://api.github.com/users/abarto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-14T19:53:19Z", "updated_at": "2020-03-15T21:25:08Z", "closed_at": "2020-03-15T21:25:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We should add support for the $elemMatch projection operator, the same way we do for $slice. PR https://github.com/MongoEngine/mongoengine/pull/2267 is a proposed solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2266", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2266/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2266/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2266/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2266", "id": 565407402, "node_id": "MDU6SXNzdWU1NjU0MDc0MDI=", "number": 2266, "title": "replaceOne support?", "user": {"login": "Julian-Nash", "id": 32070547, "node_id": "MDQ6VXNlcjMyMDcwNTQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/32070547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian-Nash", "html_url": "https://github.com/Julian-Nash", "followers_url": "https://api.github.com/users/Julian-Nash/followers", "following_url": "https://api.github.com/users/Julian-Nash/following{/other_user}", "gists_url": "https://api.github.com/users/Julian-Nash/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian-Nash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian-Nash/subscriptions", "organizations_url": "https://api.github.com/users/Julian-Nash/orgs", "repos_url": "https://api.github.com/users/Julian-Nash/repos", "events_url": "https://api.github.com/users/Julian-Nash/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian-Nash/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-14T15:47:24Z", "updated_at": "2020-03-15T19:51:04Z", "closed_at": "2020-03-15T19:50:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies for posting this here, but I'm unable to find anything analogous to mongodb's `db.collection.replaceOne` function in MongoEngine.\r\n\r\nIs this supported? Am I missing something in the documentation?\r\n\r\nCheers \ud83d\udc7e\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2263", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2263/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2263/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2263/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2263", "id": 559622704, "node_id": "MDU6SXNzdWU1NTk2MjI3MDQ=", "number": 2263, "title": "Bug: Combining raw and regular filter for the same field produces wrong result on DynamicDocuments", "user": {"login": "Pacu2", "id": 21290461, "node_id": "MDQ6VXNlcjIxMjkwNDYx", "avatar_url": "https://avatars3.githubusercontent.com/u/21290461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pacu2", "html_url": "https://github.com/Pacu2", "followers_url": "https://api.github.com/users/Pacu2/followers", "following_url": "https://api.github.com/users/Pacu2/following{/other_user}", "gists_url": "https://api.github.com/users/Pacu2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pacu2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pacu2/subscriptions", "organizations_url": "https://api.github.com/users/Pacu2/orgs", "repos_url": "https://api.github.com/users/Pacu2/repos", "events_url": "https://api.github.com/users/Pacu2/events{/privacy}", "received_events_url": "https://api.github.com/users/Pacu2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-04T10:25:07Z", "updated_at": "2020-03-03T22:48:33Z", "closed_at": "2020-03-03T22:48:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When combining `__raw__` and regular queries for the same field of DynamicDocument, the wrong result is returned. It seems like the `__raw__` part of the query is ignored in such a case. \r\n\r\nConsider an example below. \r\n```\r\nimport mongoengine as db\r\nfrom pymongo import MongoClient\r\n\r\nclient = MongoClient()\r\ndb.connect(\"test\", host=client.HOST, port=client.PORT)\r\n\r\nclass Example(db.DynamicDocument):\r\n    id = db.StringField(primary_key=True)\r\n\r\nExample(id=\"1\", test=\"foo\").save()\r\nExample(id=\"2\", test=\"bar\").save()\r\n\r\nprint(Example.objects.filter(db.Q(__raw__={\"test\": \"foo\"}) & db.Q(__raw__={\"test\": \"bar\"})))\r\nprint(Example.objects.filter(db.Q(test=\"foo\") & db.Q(test=\"bar\")))\r\nprint(Example.objects.filter(db.Q(__raw__={\"test\": \"foo\"}) & db.Q(test=\"bar\")))\r\nprint(Example.objects.filter(test=\"bar\", __raw__={\"test\": \"foo\"}))\r\n\r\n[]\r\n[]\r\n[<Example: Example object>]\r\n[<Example: Example object>]\r\n\r\n\r\n\r\nExample.objects.filter(test=\"bar\", __raw__={\"test\": \"foo\"})[0].test\r\n'bar'\r\nExample.objects.filter(__raw__={\"test\": \"foo\"}, test=\"bar\")[0].test\r\n'bar'\r\nExample.objects.filter(__raw__={\"test\": \"bar\"}, test=\"foo\")[0].test\r\n'foo'\r\nExample.objects.filter(test=\"foo\", __raw__={\"test\": \"bar\"})[0].test\r\n'foo'\r\n```\r\nTested on mongoengine 0.18.2 & 0.19.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2262", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2262/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2262/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2262/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2262", "id": 558216945, "node_id": "MDU6SXNzdWU1NTgyMTY5NDU=", "number": 2262, "title": "Deprecation warning due to invalid escape sequences in Python 3.8", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-31T15:59:16Z", "updated_at": "2020-03-15T20:16:55Z", "closed_at": "2020-03-15T20:16:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfind . -iname '*.py'  | xargs -P 4 -I{} python3.8 -Wall -m py_compile {}\r\n\r\n./mongoengine/document.py:59: DeprecationWarning: invalid escape sequence \\ \r\n  \"\"\"A :class:`~mongoengine.Document` that isn't stored in its own\r\n./mongoengine/queryset/base.py:695: DeprecationWarning: invalid escape sequence \\ \r\n  \"\"\"Retrieve a set of documents by their ids.\r\n./mongoengine/queryset/base.py:1142: DeprecationWarning: invalid escape sequence \\ \r\n  \"\"\"Return an explain plan record for the\r\n./tests/fields/test_complex_datetime_field.py:68: DeprecationWarning: invalid escape sequence \\d\r\n  re.match(\"^\\d{4},\\d{2},\\d{2},\\d{2},\\d{2},\\d{2},\\d{6}$\", stored)\r\n./tests/fields/test_complex_datetime_field.py:77: DeprecationWarning: invalid escape sequence \\d\r\n  re.match(\"^\\d{4}.\\d{2}.\\d{2}.\\d{2}.\\d{2}.\\d{2}.\\d{6}$\", stored) is not None\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2259", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2259/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2259/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2259/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2259", "id": 557540882, "node_id": "MDU6SXNzdWU1NTc1NDA4ODI=", "number": 2259, "title": "Translation from dictionary to model", "user": {"login": "hellocoldworld", "id": 47581948, "node_id": "MDQ6VXNlcjQ3NTgxOTQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/47581948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellocoldworld", "html_url": "https://github.com/hellocoldworld", "followers_url": "https://api.github.com/users/hellocoldworld/followers", "following_url": "https://api.github.com/users/hellocoldworld/following{/other_user}", "gists_url": "https://api.github.com/users/hellocoldworld/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellocoldworld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellocoldworld/subscriptions", "organizations_url": "https://api.github.com/users/hellocoldworld/orgs", "repos_url": "https://api.github.com/users/hellocoldworld/repos", "events_url": "https://api.github.com/users/hellocoldworld/events{/privacy}", "received_events_url": "https://api.github.com/users/hellocoldworld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-30T14:44:42Z", "updated_at": "2020-02-11T20:17:32Z", "closed_at": "2020-02-11T20:17:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm a developer in a brand new project and I wish mongoengine had the following aptitudes\r\n - Validate model in every update\r\n- Fields to update are stored in key - value dictionaries.\r\n\r\nSince I need the model to be validated in every update, i can't use `obj_model.update(**obj_dict)` and this extremely important to consider using mongoengine or other framework. So I was trying to update the models using only the `save` method. But this carries the problem of manipulating a model based on a dict. For scalar fields this is trivial, and for embedded document seems to be enough with a recursive function. But for `EmbeddedDocumentListField` and `ListField`'s I can't find a workaround, and seems not very straight-forward.\r\n\r\nThus far my function something like this\r\n```python\r\ndef _update_model(obj_dict, obj_model):\r\n    for k, v in obj_dict.items():\r\n        if hasattr(obj_model, k):\r\n            if isinstance(v, dict):\r\n                obj_model[k] = _update_model(v, obj_model[k])\r\n            if isinstance(v, list):\r\n                for i, v1 in enumerate(v):\r\n                    # Each v1 is either a field in a ListField or a\r\n                    # dict representing an embedded document\r\n                    pass\r\n            else:\r\n                obj_model[k] = v\r\n    return obj_model\r\n```\r\n\r\nAnd in the second case Im'm simply lost. Can you help me? Or do you know any alternative of doing this in mongoengine?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2258", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2258/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2258/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2258/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2258", "id": 556820397, "node_id": "MDU6SXNzdWU1NTY4MjAzOTc=", "number": 2258, "title": "Mongoengine and inheritance", "user": {"login": "tschm", "id": 2046079, "node_id": "MDQ6VXNlcjIwNDYwNzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2046079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschm", "html_url": "https://github.com/tschm", "followers_url": "https://api.github.com/users/tschm/followers", "following_url": "https://api.github.com/users/tschm/following{/other_user}", "gists_url": "https://api.github.com/users/tschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschm/subscriptions", "organizations_url": "https://api.github.com/users/tschm/orgs", "repos_url": "https://api.github.com/users/tschm/repos", "events_url": "https://api.github.com/users/tschm/events{/privacy}", "received_events_url": "https://api.github.com/users/tschm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-29T12:07:27Z", "updated_at": "2020-06-05T12:43:52Z", "closed_at": "2020-06-05T12:43:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have compiled a little nonsense example:\r\n\r\n```\r\nfrom mongoengine import *\r\n\r\nclass PandasDocument(DynamicDocument):\r\n    meta = {'allow_inheritance': True}\r\n    name = StringField(max_length=200, required=True, unique=True)\r\n\r\nclass User(PandasDocument):\r\n    figi = StringField(unique=True)\r\n\r\n\r\nclass Page(PandasDocument):\r\n    content = StringField(unique=True)\r\n    authors = ListField(ReferenceField(User))\r\n\r\n    @property\r\n    def figis(self):\r\n        return [c.figi for c in self.authors]\r\n```\r\nSo, like in the documentation I have Pages und Users. Each Page can have multiple users as authors. However, here both Page and User are children of the PandasDocument which has a name field. I then run a little test using mongomock:\r\n\r\n```\r\ndef test_person():\r\n    connect(alias=\"default\", host=\"mongomock://localhost\", db=\"test\")\r\n\r\n    bob = User(name=\"Bob Jones\", figi=\"A\").save()\r\n    john = User(name=\"John Smith\", figi=\"B\").save()\r\n\r\n    Page(name=\"A\", content=\"Test Page\", authors=[bob, john]).save()\r\n    Page(name=\"B\", content=\"Another Page\", authors=[john]).save()\r\n\r\n    # Find all pages Bob authored\r\n    Page.objects(authors__in=[bob])\r\n\r\n    # Find all pages that both Bob and John have authored\r\n    Page.objects(authors__all=[bob, john])\r\n        #assert False\r\n\r\n    disconnect()\r\n```\r\n\r\nThis results in a problem with the index \r\n\r\n```\r\nself = Collection(Database(mongomock.MongoClient('localhost', 27017), 'test'), 'pandas_document')\r\nkey_or_list = [('content', 1)], cache_for = 300, session = None\r\nkwargs = {'background': False}, index_list = [('content', 1)], is_unique = True\r\nis_sparse = False, index_name = 'content_1'\r\nindex_dict = {'key': [('content', 1)], 'unique': True}, indexed = {(None,)}\r\nindexed_list = []\r\n\r\n    def create_index(self, key_or_list, cache_for=300, session=None, **kwargs):\r\n        if session:\r\n            raise NotImplementedError('Mongomock does not handle sessions yet')\r\n        index_list = helpers.create_index_list(key_or_list)\r\n        is_unique = kwargs.pop('unique', False)\r\n        is_sparse = kwargs.pop('sparse', False)\r\n    \r\n        index_name = kwargs.pop('name', helpers.gen_index_name(index_list))\r\n        index_dict = {'key': index_list}\r\n        if is_sparse:\r\n            index_dict['sparse'] = True\r\n    \r\n        # Check that documents already verify the uniquess of this new index.\r\n        if is_unique:\r\n            index_dict['unique'] = True\r\n            indexed = set()\r\n            indexed_list = []\r\n            for doc in self._store.documents:\r\n                index = []\r\n                for key, unused_order in index_list:\r\n                    try:\r\n                        index.append(helpers.get_value_by_dot(doc, key))\r\n                    except KeyError:\r\n                        if is_sparse:\r\n                            continue\r\n                        index.append(None)\r\n                if is_sparse and not index:\r\n                    continue\r\n                index = tuple(index)\r\n                try:\r\n                    if index in indexed:\r\n>                       raise DuplicateKeyError('E11000 Duplicate Key Error', 11000)\r\nE                       pymongo.errors.DuplicateKeyError: E11000 Duplicate Key Error\r\n\r\n/opt/conda/lib/python3.7/site-packages/mongomock/collection.py:1396: DuplicateKeyError\r\n```\r\nSo I guess I have to remove the unique requirement for name from the PandasDocument and push into the index definition for the children? Do I miss something? Stupid idea?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2257", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2257/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2257/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2257/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2257", "id": 556274510, "node_id": "MDU6SXNzdWU1NTYyNzQ1MTA=", "number": 2257, "title": "Bson encode error on ReferenceField with custom key", "user": {"login": "EloiZalczer", "id": 6155302, "node_id": "MDQ6VXNlcjYxNTUzMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6155302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EloiZalczer", "html_url": "https://github.com/EloiZalczer", "followers_url": "https://api.github.com/users/EloiZalczer/followers", "following_url": "https://api.github.com/users/EloiZalczer/following{/other_user}", "gists_url": "https://api.github.com/users/EloiZalczer/gists{/gist_id}", "starred_url": "https://api.github.com/users/EloiZalczer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EloiZalczer/subscriptions", "organizations_url": "https://api.github.com/users/EloiZalczer/orgs", "repos_url": "https://api.github.com/users/EloiZalczer/repos", "events_url": "https://api.github.com/users/EloiZalczer/events{/privacy}", "received_events_url": "https://api.github.com/users/EloiZalczer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-28T15:12:12Z", "updated_at": "2020-01-29T09:13:44Z", "closed_at": "2020-01-29T09:13:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI want to have a reference in a master object, and a custom primary key in the referenced objects. When trying to recover the referenced documents, I get a bson encode error.\r\n\r\nI have the following code snippet:\r\n```\r\nimport mongoengine as me\r\n\r\n\r\nclass Key(me.EmbeddedDocument):\r\n    name = me.StringField()\r\n    revision = me.IntField()\r\n\r\n    def __hash__(self):\r\n        return hash((self.name, self.revision))\r\n\r\n\r\nclass B(me.Document):\r\n    key = me.EmbeddedDocumentField(Key, primary_key=True)\r\n    comment = me.StringField()\r\n\r\n\r\nclass A(me.Document):\r\n    description = me.StringField()\r\n    b = me.ReferenceField(B)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    db = me.connect('Test', host=\"mongodb://localhost/test\")\r\n\r\n    a = A(description=\"description\")\r\n\r\n    b = B(comment=\"comment\", key={\"name\": \"name\", \"revision\": 0})\r\n    b.save()\r\n\r\n    a.b = b\r\n\r\n    a.save()\r\n\r\n    b = B.objects().first()\r\n    print(b.key.revision)\r\n\r\n    a = A.objects().first()\r\n\r\n    print(a.b.key.revision)\r\n```\r\n\r\nThe output I get is : \r\n```\r\n0\r\nTraceback (most recent call last):\r\n  File \".\\debug_instrument.py\", line 39, in <module>\r\n    print(a.b[\"name\"].key.revision)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\mongoengine\\base\\fields.py\", line 314, in __get__\r\n    name=self.name,\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\mongoengine\\dereference.py\", line 99, in __call__\r\n    self.object_map = self._fetch_objects(doc_type=doc_type)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\mongoengine\\dereference.py\", line 191, in _fetch_objects\r\n    for ref in references:\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pymongo\\cursor.py\", line 1225, in next\r\n    if len(self.__data) or self._refresh():\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pymongo\\cursor.py\", line 1140, in _refresh\r\n    self.__send_message(q)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pymongo\\cursor.py\", line 954, in __send_message\r\n    operation, exhaust=self.__exhaust, address=self.__address)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pymongo\\mongo_client.py\", line 1177, in _send_message_with_response\r\n    exhaust)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pymongo\\mongo_client.py\", line 1188, in _reset_on_error\r\n    return func(*args, **kwargs)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pymongo\\server.py\", line 94, in send_message_with_response\r\n    set_slave_okay, sock_info, use_find_cmd)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pymongo\\message.py\", line 321, in get_message\r\n    ctx=sock_info.compression_context)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pymongo\\message.py\", line 678, in _op_msg\r\n    flags, command, identifier, docs, check_keys, opts)\r\nbson.errors.InvalidDocument: cannot encode object: <Key: Key object>, of type: <class '__main__.Key'>\r\n```\r\n\r\nObviously, when I do B.objects() I don't get an error. However, when I try to recover instances of B from A, I get this error. Is that an unsupported case? Or do I have to create a custom BSON encoder? If so, how could I do that?\r\n\r\nmongoengine version == 0.19.1\r\npymongo version == 3.8.0\r\npython 3.7.4", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2255", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2255/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2255/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2255/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2255", "id": 554825251, "node_id": "MDU6SXNzdWU1NTQ4MjUyNTE=", "number": 2255, "title": "Allow setting read_concern", "user": {"login": "abarto", "id": 5585302, "node_id": "MDQ6VXNlcjU1ODUzMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5585302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abarto", "html_url": "https://github.com/abarto", "followers_url": "https://api.github.com/users/abarto/followers", "following_url": "https://api.github.com/users/abarto/following{/other_user}", "gists_url": "https://api.github.com/users/abarto/gists{/gist_id}", "starred_url": "https://api.github.com/users/abarto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abarto/subscriptions", "organizations_url": "https://api.github.com/users/abarto/orgs", "repos_url": "https://api.github.com/users/abarto/repos", "events_url": "https://api.github.com/users/abarto/events{/privacy}", "received_events_url": "https://api.github.com/users/abarto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-24T16:13:22Z", "updated_at": "2020-04-26T20:57:57Z", "closed_at": "2020-04-26T20:57:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now it's not possible to set the read_concern of a collection through MongoEngine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2253", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2253/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2253/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2253/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2253", "id": 554437179, "node_id": "MDU6SXNzdWU1NTQ0MzcxNzk=", "number": 2253, "title": "ComplexDateTimeField fails unexpectedly if an invalid string is set", "user": {"login": "bagerard", "id": 11854690, "node_id": "MDQ6VXNlcjExODU0Njkw", "avatar_url": "https://avatars0.githubusercontent.com/u/11854690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bagerard", "html_url": "https://github.com/bagerard", "followers_url": "https://api.github.com/users/bagerard/followers", "following_url": "https://api.github.com/users/bagerard/following{/other_user}", "gists_url": "https://api.github.com/users/bagerard/gists{/gist_id}", "starred_url": "https://api.github.com/users/bagerard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bagerard/subscriptions", "organizations_url": "https://api.github.com/users/bagerard/orgs", "repos_url": "https://api.github.com/users/bagerard/repos", "events_url": "https://api.github.com/users/bagerard/events{/privacy}", "received_events_url": "https://api.github.com/users/bagerard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-23T22:12:19Z", "updated_at": "2020-04-25T20:17:21Z", "closed_at": "2020-04-25T20:17:21Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "```\r\nIn [1]: from mongoengine import *\r\n\r\nIn [2]: connect()\r\nOut[2]: MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True, read_preference=Primary())\r\n\r\nIn [3]: class Visit(Document):\r\n   ...:     timestamp = ComplexDateTimeField()\r\n   ...:     \r\n\r\nIn [4]: Visit(timestamp='yolo')\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-4-51965e337718> in <module>()\r\n----> 1 Visit(timestamp='yolo').save()\r\n\r\n/home/bgerard/dev/mongoengine/mongoengine/base/document.py in __init__(self, *args, **values)\r\n    137                         if field and not isinstance(field, FileField):\r\n    138                             value = field.to_python(value)\r\n--> 139                     setattr(self, key, value)\r\n    140                 else:\r\n    141                     self._data[key] = value\r\n\r\n/home/bgerard/dev/mongoengine/mongoengine/base/document.py in __setattr__(self, name, value)\r\n    213             super(BaseDocument, self).__setattr__(\"_created\", False)\r\n    214 \r\n--> 215         super(BaseDocument, self).__setattr__(name, value)\r\n    216 \r\n    217     def __getstate__(self):\r\n\r\n/home/bgerard/dev/mongoengine/mongoengine/fields.py in __set__(self, instance, value)\r\n    684         value = instance._data[self.name]\r\n    685         if value is not None:\r\n--> 686             instance._data[self.name] = self._convert_from_datetime(value)\r\n    687 \r\n    688     def validate(self, value):\r\n\r\n/home/bgerard/dev/mongoengine/mongoengine/fields.py in _convert_from_datetime(self, val)\r\n    655         '2011,06,08,20,26,24,092284'\r\n    656         \"\"\"\r\n--> 657         return val.strftime(self.format)\r\n    658 \r\n    659     def _convert_from_string(self, data):\r\n\r\nAttributeError: 'str' object has no attribute 'strftime'\r\n```\r\nTo mimic the behavior of other fields, it should fail only when .save/validate are called", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2250", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2250/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2250/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2250/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2250", "id": 552937969, "node_id": "MDU6SXNzdWU1NTI5Mzc5Njk=", "number": 2250, "title": "[HELP WANTED]Connection fails with `no attribute 'DatabaseWrapper'` error", "user": {"login": "eunos-1128", "id": 21062531, "node_id": "MDQ6VXNlcjIxMDYyNTMx", "avatar_url": "https://avatars1.githubusercontent.com/u/21062531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eunos-1128", "html_url": "https://github.com/eunos-1128", "followers_url": "https://api.github.com/users/eunos-1128/followers", "following_url": "https://api.github.com/users/eunos-1128/following{/other_user}", "gists_url": "https://api.github.com/users/eunos-1128/gists{/gist_id}", "starred_url": "https://api.github.com/users/eunos-1128/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eunos-1128/subscriptions", "organizations_url": "https://api.github.com/users/eunos-1128/orgs", "repos_url": "https://api.github.com/users/eunos-1128/repos", "events_url": "https://api.github.com/users/eunos-1128/events{/privacy}", "received_events_url": "https://api.github.com/users/eunos-1128/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-21T15:10:14Z", "updated_at": "2020-03-16T15:08:50Z", "closed_at": "2020-03-15T20:11:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to connect to DB using mongoengine in my project utilizing Django REST framework(so also with mongoengine-rest-framework)\r\n\r\nBut it always fail for `no attribute 'DatabaseWrapper'` error.\r\nI have no idea how to deal with it though I searched for ways.\r\n\r\n- python==3.6.5\r\n- Django==2.2.3\r\n- mongoengine==0.19.1\r\n- pymongo==3.10.1\r\n\r\nAny help would be appreciated!\r\n\r\n```\r\nfrom mongoengine import connect\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'mongoengine',\r\n        'ENFORCE_SCHEMA': False,\r\n        'NAME': 'mongotest',\r\n        'HOST': 'localhost',\r\n        'PORT': 27017\r\n    }\r\n}\r\n\r\nconnect(DATABASES['default']['NAME'])\r\n```\r\n\r\n```\r\nWatching for file changes with StatReloader\r\nException in thread django-main-thread:\r\nTraceback (most recent call last):\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/threading.py\", line 916, in _bootstrap_inner\r\n    self.run()\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/threading.py\", line 864, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/utils/autoreload.py\", line 54, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/core/management/commands/runserver.py\", line 109, in inner_run\r\n    autoreload.raise_last_exception()\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/utils/autoreload.py\", line 77, in raise_last_exception\r\n    raise _exception[1]\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/core/management/__init__.py\", line 337, in execute\r\n    autoreload.check_errors(django.setup)()\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/utils/autoreload.py\", line 54, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/apps/registry.py\", line 114, in populate\r\n    app_config.import_models()\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/apps/config.py\", line 211, in import_models\r\n    self.models_module = import_module(models_module_name)\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/contrib/auth/models.py\", line 2, in <module>\r\n    from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/contrib/auth/base_user.py\", line 47, in <module>\r\n    class AbstractBaseUser(models.Model):\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/db/models/base.py\", line 117, in __new__\r\n    new_class.add_to_class('_meta', Options(meta, app_label))\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/db/models/base.py\", line 321, in add_to_class\r\n    value.contribute_to_class(cls, name)\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/db/models/options.py\", line 204, in contribute_to_class\r\n    self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/db/__init__.py\", line 28, in __getattr__\r\n    return getattr(connections[DEFAULT_DB_ALIAS], item)\r\n  File \"/home/masa_u/.pyenv/versions/3.6.5/lib/python3.6/site-packages/django/db/utils.py\", line 202, in __getitem__\r\n    conn = backend.DatabaseWrapper(db, alias)\r\nAttributeError: module 'mongoengine.base' has no attribute 'DatabaseWrapper'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2249", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2249/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2249/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2249/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2249", "id": 552183988, "node_id": "MDU6SXNzdWU1NTIxODM5ODg=", "number": 2249, "title": "It keeps creating new connection. ", "user": {"login": "FavorMylikes", "id": 16064851, "node_id": "MDQ6VXNlcjE2MDY0ODUx", "avatar_url": "https://avatars0.githubusercontent.com/u/16064851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FavorMylikes", "html_url": "https://github.com/FavorMylikes", "followers_url": "https://api.github.com/users/FavorMylikes/followers", "following_url": "https://api.github.com/users/FavorMylikes/following{/other_user}", "gists_url": "https://api.github.com/users/FavorMylikes/gists{/gist_id}", "starred_url": "https://api.github.com/users/FavorMylikes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FavorMylikes/subscriptions", "organizations_url": "https://api.github.com/users/FavorMylikes/orgs", "repos_url": "https://api.github.com/users/FavorMylikes/repos", "events_url": "https://api.github.com/users/FavorMylikes/events{/privacy}", "received_events_url": "https://api.github.com/users/FavorMylikes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-20T09:44:56Z", "updated_at": "2020-03-15T20:11:46Z", "closed_at": "2020-03-15T20:11:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n2020-01-20T16:33:35.201+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:40603 #1247 (30 connections now open)\r\n2020-01-20T16:33:35.202+0800 I  NETWORK  [conn1247] received client metadata from *.*.*.*:40603 conn1247: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:33:35.479+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:40605 #1248 (31 connections now open)\r\n2020-01-20T16:33:35.479+0800 I  NETWORK  [conn1248] received client metadata from *.*.*.*:40605 conn1248: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:33:58.380+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:4341 #1249 (32 connections now open)\r\n2020-01-20T16:33:58.380+0800 I  NETWORK  [conn1249] received client metadata from *.*.*.*:4341 conn1249: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:33:58.668+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:4343 #1250 (33 connections now open)\r\n2020-01-20T16:33:58.669+0800 I  NETWORK  [conn1250] received client metadata from *.*.*.*:4343 conn1250: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:34:21.554+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:11307 #1251 (34 connections now open)\r\n2020-01-20T16:34:21.555+0800 I  NETWORK  [conn1251] received client metadata from *.*.*.*:11307 conn1251: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:34:21.831+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:50592 #1252 (35 connections now open)\r\n2020-01-20T16:34:21.832+0800 I  NETWORK  [conn1252] received client metadata from *.*.*.*:50592 conn1252: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:34:44.728+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:48388 #1253 (36 connections now open)\r\n2020-01-20T16:34:44.729+0800 I  NETWORK  [conn1253] received client metadata from *.*.*.*:48388 conn1253: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:34:45.012+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:20336 #1254 (37 connections now open)\r\n2020-01-20T16:34:45.012+0800 I  NETWORK  [conn1254] received client metadata from *.*.*.*:20336 conn1254: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:35:07.907+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:48898 #1255 (38 connections now open)\r\n2020-01-20T16:35:07.908+0800 I  NETWORK  [conn1255] received client metadata from *.*.*.*:48898 conn1255: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:35:08.192+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:10154 #1256 (39 connections now open)\r\n2020-01-20T16:35:08.192+0800 I  NETWORK  [conn1256] received client metadata from *.*.*.*:10154 conn1256: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:35:25.194+0800 I  NETWORK  [conn1224] end connection *.*.*.*:16926 (38 connections now open)\r\n2020-01-20T16:35:31.118+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:48934 #1257 (39 connections now open)\r\n2020-01-20T16:35:31.118+0800 I  NETWORK  [conn1257] received client metadata from *.*.*.*:48934 conn1257: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:35:31.375+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:6646 #1258 (40 connections now open)\r\n2020-01-20T16:35:31.376+0800 I  NETWORK  [conn1258] received client metadata from *.*.*.*:6646 conn1258: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:35:48.106+0800 I  NETWORK  [conn1230] end connection *.*.*.*:18209 (39 connections now open)\r\n2020-01-20T16:35:49.002+0800 I  NETWORK  [conn1228] end connection *.*.*.*:21315 (38 connections now open)\r\n2020-01-20T16:35:54.310+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:1670 #1259 (39 connections now open)\r\n2020-01-20T16:35:54.311+0800 I  NETWORK  [conn1259] received client metadata from *.*.*.*:1670 conn1259: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n2020-01-20T16:35:54.564+0800 I  NETWORK  [listener] connection accepted from *.*.*.*:44254 #1260 (40 connections now open)\r\n2020-01-20T16:35:54.565+0800 I  NETWORK  [conn1260] received client metadata from *.*.*.*:44254 conn1260: { driver: { name: \"PyMongo\", version: \"3.10.1\" }, os: { type: \"Linux\", name: \"Linux\", architecture: \"x86_64\", version: \"4.15.0-72-generic\" }, platform: \"CPython 3.6.10.final.0\" }\r\n```\r\n\r\nMy client needs 4 or more minutes to get data", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2247", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2247/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2247/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2247/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2247", "id": 551947788, "node_id": "MDU6SXNzdWU1NTE5NDc3ODg=", "number": 2247, "title": "Why near is not working as expected?", "user": {"login": "anilwarbhe", "id": 47546834, "node_id": "MDQ6VXNlcjQ3NTQ2ODM0", "avatar_url": "https://avatars2.githubusercontent.com/u/47546834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anilwarbhe", "html_url": "https://github.com/anilwarbhe", "followers_url": "https://api.github.com/users/anilwarbhe/followers", "following_url": "https://api.github.com/users/anilwarbhe/following{/other_user}", "gists_url": "https://api.github.com/users/anilwarbhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/anilwarbhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anilwarbhe/subscriptions", "organizations_url": "https://api.github.com/users/anilwarbhe/orgs", "repos_url": "https://api.github.com/users/anilwarbhe/repos", "events_url": "https://api.github.com/users/anilwarbhe/events{/privacy}", "received_events_url": "https://api.github.com/users/anilwarbhe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-19T16:30:49Z", "updated_at": "2020-01-21T06:14:03Z", "closed_at": "2020-01-21T06:14:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following query gives me the current result in MongoDB\r\ndb.getCollection('posts').find({loc : { $near : {$geometry: { type: \"Point\",  coordinates: [82.23, 19.15]}} }})\r\n\r\nBut when I use Mongoengine\r\nposts = PostsModel.objects(loc__near=[82, 19])\r\n\r\nDoes not return the result as expected\r\n\r\nIn my **posts** collection I have a field **loc** (Which is a PointField with **2dsphere** index)\r\n\r\nAm I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2239", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2239/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2239/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2239/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2239", "id": 545604482, "node_id": "MDU6SXNzdWU1NDU2MDQ0ODI=", "number": 2239, "title": "DictField validate failed without default connection", "user": {"login": "Ricky-Hao", "id": 14084342, "node_id": "MDQ6VXNlcjE0MDg0MzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/14084342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ricky-Hao", "html_url": "https://github.com/Ricky-Hao", "followers_url": "https://api.github.com/users/Ricky-Hao/followers", "following_url": "https://api.github.com/users/Ricky-Hao/following{/other_user}", "gists_url": "https://api.github.com/users/Ricky-Hao/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ricky-Hao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ricky-Hao/subscriptions", "organizations_url": "https://api.github.com/users/Ricky-Hao/orgs", "repos_url": "https://api.github.com/users/Ricky-Hao/repos", "events_url": "https://api.github.com/users/Ricky-Hao/events{/privacy}", "received_events_url": "https://api.github.com/users/Ricky-Hao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-06T08:27:27Z", "updated_at": "2020-03-17T19:26:55Z", "closed_at": "2020-03-17T19:26:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "If only use `db_alias` without setting `default connect`, `DictField` validate failed.\r\n```python\r\nclass TestDict(Document):\r\n    data = DictField()\r\n\r\n    meta = {\r\n        'db_alias': 'alias_1'\r\n    }\r\n\r\nd = TestDict(data={'a': 1})\r\nd.save()\r\n```\r\nException:\r\n```python\r\nmongoengine.connection.ConnectionFailure: You have not defined a default connection\r\n```\r\n\r\nCause:\r\nhttps://github.com/MongoEngine/mongoengine/blob/1cc20c97707c722c34c7bd6deec2a0aad406fd34/mongoengine/fields.py#L1091\r\n```python\r\n    def validate(self, value):\r\n        \"\"\"Make sure that a list of valid fields is being used.\"\"\"\r\n        if not isinstance(value, dict):\r\n            self.error(\"Only dictionaries may be used in a DictField\")\r\n\r\n        if key_not_string(value):\r\n            msg = \"Invalid dictionary key - documents must have only string keys\"\r\n            self.error(msg)\r\n\r\n        curr_mongo_ver = get_mongodb_version()\r\n\r\n        if curr_mongo_ver < MONGODB_36 and key_has_dot_or_dollar(value):\r\n            self.error(\r\n                'Invalid dictionary key name - keys may not contain \".\"'\r\n                ' or startswith \"$\" characters'\r\n            )\r\n        elif curr_mongo_ver >= MONGODB_36 and key_starts_with_dollar(value):\r\n            self.error(\r\n                'Invalid dictionary key name - keys may not startswith \"$\" characters'\r\n            )\r\n        super(DictField, self).validate(value)\r\n```\r\nDictField need to use `default` connection to check mongodb version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2236", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2236/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2236/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2236/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2236", "id": 545395844, "node_id": "MDU6SXNzdWU1NDUzOTU4NDQ=", "number": 2236, "title": "Fix simple typo: thorougly -> thoroughly", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-05T09:48:15Z", "updated_at": "2020-01-05T10:17:50Z", "closed_at": "2020-01-05T10:17:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in docs/upgrade.rst.\nShould read `thoroughly` rather than `thorougly`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2235", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2235/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2235/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2235/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2235", "id": 545281985, "node_id": "MDU6SXNzdWU1NDUyODE5ODU=", "number": 2235, "title": "Create a list constant of available languages for text indexes", "user": {"login": "karipov", "id": 19636264, "node_id": "MDQ6VXNlcjE5NjM2MjY0", "avatar_url": "https://avatars3.githubusercontent.com/u/19636264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karipov", "html_url": "https://github.com/karipov", "followers_url": "https://api.github.com/users/karipov/followers", "following_url": "https://api.github.com/users/karipov/following{/other_user}", "gists_url": "https://api.github.com/users/karipov/gists{/gist_id}", "starred_url": "https://api.github.com/users/karipov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karipov/subscriptions", "organizations_url": "https://api.github.com/users/karipov/orgs", "repos_url": "https://api.github.com/users/karipov/repos", "events_url": "https://api.github.com/users/karipov/events{/privacy}", "received_events_url": "https://api.github.com/users/karipov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-04T12:55:17Z", "updated_at": "2020-01-07T21:06:22Z", "closed_at": "2020-01-07T21:06:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think it'd be beneficial to include all language codes and language names supported by mongoDB as constant lists instead of just pointing people to the original website, as done here:\r\n\r\nhttp://docs.mongoengine.org/apireference.html#mongoengine.queryset.QuerySet.search_text\r\n\r\nThese constants can be included in the mongoengine/queryset/base.py, [alongside delete rules](https://github.com/MongoEngine/mongoengine/blob/b3dbb87c3c394cab5708bd321f58932d0c6b1063/mongoengine/queryset/base.py#L42), or a separate small file could be created. Please let me know if that's a good idea, and I'll submit a quick pull request.\r\n\r\ne.g./\r\n```python\r\nLANGUAGE_CODES = ['en', 'fr', 'ru', '...']\r\nLANGUAGE_NAMES = ['english', 'french', 'russian', '...']\r\n\r\n#\u00a0or use tuples even\r\nLANGUAGES = (('english', 'en'), ('french', 'fr'), ('russian', 'ru'), ('...', '...'))\r\n```\r\n\r\nIt's of primary interest because when inserting a language I have to verify it's valid, and have to create this list myself, but imo this could apply in many cases where language detection is used and the detected iso codes may not be supported by MongoDB.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2234", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2234/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2234/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2234/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2234", "id": 544988335, "node_id": "MDU6SXNzdWU1NDQ5ODgzMzU=", "number": 2234, "title": "Drop support for Python 2", "user": {"login": "bagerard", "id": 11854690, "node_id": "MDQ6VXNlcjExODU0Njkw", "avatar_url": "https://avatars0.githubusercontent.com/u/11854690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bagerard", "html_url": "https://github.com/bagerard", "followers_url": "https://api.github.com/users/bagerard/followers", "following_url": "https://api.github.com/users/bagerard/following{/other_user}", "gists_url": "https://api.github.com/users/bagerard/gists{/gist_id}", "starred_url": "https://api.github.com/users/bagerard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bagerard/subscriptions", "organizations_url": "https://api.github.com/users/bagerard/orgs", "repos_url": "https://api.github.com/users/bagerard/repos", "events_url": "https://api.github.com/users/bagerard/events{/privacy}", "received_events_url": "https://api.github.com/users/bagerard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-03T13:14:06Z", "updated_at": "2020-04-25T12:22:24Z", "closed_at": "2020-04-25T12:22:24Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Python2 recently reached end of life and many major libraries will stop supporting it. Pillow for instance, just did the move. Some work (PR still pending) was done to improve the 2 & 3 compatibility of the codebase but I believe its worth dropping the support for Python2 and start embracing Python3 entirely (f-strings, type hints, etc).\r\n@wojcikstefan @erdenezul any objection?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2226", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2226/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2226/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2226/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2226", "id": 542657880, "node_id": "MDU6SXNzdWU1NDI2NTc4ODA=", "number": 2226, "title": "Run travis against Python 3.8", "user": {"login": "bagerard", "id": 11854690, "node_id": "MDQ6VXNlcjExODU0Njkw", "avatar_url": "https://avatars0.githubusercontent.com/u/11854690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bagerard", "html_url": "https://github.com/bagerard", "followers_url": "https://api.github.com/users/bagerard/followers", "following_url": "https://api.github.com/users/bagerard/following{/other_user}", "gists_url": "https://api.github.com/users/bagerard/gists{/gist_id}", "starred_url": "https://api.github.com/users/bagerard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bagerard/subscriptions", "organizations_url": "https://api.github.com/users/bagerard/orgs", "repos_url": "https://api.github.com/users/bagerard/repos", "events_url": "https://api.github.com/users/bagerard/events{/privacy}", "received_events_url": "https://api.github.com/users/bagerard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-26T20:01:17Z", "updated_at": "2019-12-27T06:05:13Z", "closed_at": "2019-12-27T06:05:13Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2225", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2225/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2225/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2225/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2225", "id": 542126978, "node_id": "MDU6SXNzdWU1NDIxMjY5Nzg=", "number": 2225, "title": "ImportError cannot import name MongoEngineConnectionError since last release", "user": {"login": "victorherbemontagne", "id": 20753024, "node_id": "MDQ6VXNlcjIwNzUzMDI0", "avatar_url": "https://avatars1.githubusercontent.com/u/20753024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victorherbemontagne", "html_url": "https://github.com/victorherbemontagne", "followers_url": "https://api.github.com/users/victorherbemontagne/followers", "following_url": "https://api.github.com/users/victorherbemontagne/following{/other_user}", "gists_url": "https://api.github.com/users/victorherbemontagne/gists{/gist_id}", "starred_url": "https://api.github.com/users/victorherbemontagne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victorherbemontagne/subscriptions", "organizations_url": "https://api.github.com/users/victorherbemontagne/orgs", "repos_url": "https://api.github.com/users/victorherbemontagne/repos", "events_url": "https://api.github.com/users/victorherbemontagne/events{/privacy}", "received_events_url": "https://api.github.com/users/victorherbemontagne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-24T13:18:35Z", "updated_at": "2019-12-24T13:28:22Z", "closed_at": "2019-12-24T13:28:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am working on a project involving Mongoengine and since the last release (5h ago or something) I have an import error when I am trying to use mongoengine inside a Docker container.\r\nMore precisely, my line\r\n`from mongoengine.connection import get_connection, MongoEngineConnectionError`\r\n\r\nraise an `ImportError cannot import name MongoEngineConnectionError.`\r\n\r\nI downgraded the package to the last release (0.18.2) and it is working normally.\r\n\r\nI am very new to this package so I am just pointing to this error, not sure if this is only coming from the new version.\r\n\r\nI am working on windows 10 family and the lib was downloaded from pypi inside the Python3.6 image of Docker (linux). \r\n\r\nI stay at your disposal if you need further debugging or for reproducibility details.\r\n\r\nCheers\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2223", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2223/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2223/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2223/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2223", "id": 540008458, "node_id": "MDU6SXNzdWU1NDAwMDg0NTg=", "number": 2223, "title": "order_by using *args/list does not work", "user": {"login": "AndreMPCosta", "id": 3736805, "node_id": "MDQ6VXNlcjM3MzY4MDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3736805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreMPCosta", "html_url": "https://github.com/AndreMPCosta", "followers_url": "https://api.github.com/users/AndreMPCosta/followers", "following_url": "https://api.github.com/users/AndreMPCosta/following{/other_user}", "gists_url": "https://api.github.com/users/AndreMPCosta/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreMPCosta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreMPCosta/subscriptions", "organizations_url": "https://api.github.com/users/AndreMPCosta/orgs", "repos_url": "https://api.github.com/users/AndreMPCosta/repos", "events_url": "https://api.github.com/users/AndreMPCosta/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreMPCosta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-19T00:56:37Z", "updated_at": "2019-12-20T21:56:18Z", "closed_at": "2019-12-20T21:56:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently if you try to pass multiple keys via order_by using a list (useful for *args, for example) you get this:\r\n\r\n**AttributeError: 'list' object has no attribute 'replace'**\r\n\r\nbecause the list isn't being unpacked in this line (base.py:1103):\r\n\r\n`new_ordering = queryset._get_order_by(keys)`\r\n\r\nPossible workarounds:\r\n\r\n`new_ordering = queryset._get_order_by(*keys) if isinstance(keys, List) else \\\r\n            queryset._get_order_by(keys)` \r\n\r\nor when order_by is called:\r\n\r\n`objects.order_by(*tuple(*args))`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2220", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2220/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2220/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2220/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2220", "id": 538428921, "node_id": "MDU6SXNzdWU1Mzg0Mjg5MjE=", "number": 2220, "title": "New release", "user": {"login": "ZEROF", "id": 2687905, "node_id": "MDQ6VXNlcjI2ODc5MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2687905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZEROF", "html_url": "https://github.com/ZEROF", "followers_url": "https://api.github.com/users/ZEROF/followers", "following_url": "https://api.github.com/users/ZEROF/following{/other_user}", "gists_url": "https://api.github.com/users/ZEROF/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZEROF/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZEROF/subscriptions", "organizations_url": "https://api.github.com/users/ZEROF/orgs", "repos_url": "https://api.github.com/users/ZEROF/repos", "events_url": "https://api.github.com/users/ZEROF/events{/privacy}", "received_events_url": "https://api.github.com/users/ZEROF/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-16T13:58:24Z", "updated_at": "2019-12-23T14:14:03Z", "closed_at": "2019-12-22T17:46:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen is coming new release, because I can't update to mongodb 4.2 because of this: https://github.com/MongoEngine/mongoengine/pull/2160/commits/47f8a126ca167cb8fe020e3cc5604b155dfcdebc.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2219", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2219/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2219/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2219/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2219", "id": 538286622, "node_id": "MDU6SXNzdWU1MzgyODY2MjI=", "number": 2219, "title": "DeprecationWarning: count is deprecated", "user": {"login": "yeexy", "id": 51102488, "node_id": "MDQ6VXNlcjUxMTAyNDg4", "avatar_url": "https://avatars0.githubusercontent.com/u/51102488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeexy", "html_url": "https://github.com/yeexy", "followers_url": "https://api.github.com/users/yeexy/followers", "following_url": "https://api.github.com/users/yeexy/following{/other_user}", "gists_url": "https://api.github.com/users/yeexy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeexy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeexy/subscriptions", "organizations_url": "https://api.github.com/users/yeexy/orgs", "repos_url": "https://api.github.com/users/yeexy/repos", "events_url": "https://api.github.com/users/yeexy/events{/privacy}", "received_events_url": "https://api.github.com/users/yeexy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-16T09:25:31Z", "updated_at": "2020-08-12T20:18:03Z", "closed_at": "2020-08-12T20:18:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI encountered this problem using pymongo 3.9.0 and mongoengine 0.18.2:\r\n~~~bash\r\nmongoengine/queryset/base.py:398: DeprecationWarning: count is deprecated. Use Collection.count_documents instead.\r\n~~~\r\nBecause in pymongo3.7.0, count was deprecated and count_documents method was added. However, my leader asked to upgrade the project to the latest version and 0 warnings. I used pymongo3.9.0, but there were so many warnings that I had to reduce the pymongo version to 3.6.1,I have no other good idea.\r\nCould you add some code,like this:\r\n~~~python\r\nreturn count_documents() if PYMONGO_VERSION >= 3.7 else count()\r\n~~~\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2218", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2218/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2218/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2218/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2218", "id": 537888622, "node_id": "MDU6SXNzdWU1Mzc4ODg2MjI=", "number": 2218, "title": "Is there a way to declare a class that can be inherited both in Document and EmbeddedDocument?", "user": {"login": "shizidushu", "id": 13694980, "node_id": "MDQ6VXNlcjEzNjk0OTgw", "avatar_url": "https://avatars2.githubusercontent.com/u/13694980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shizidushu", "html_url": "https://github.com/shizidushu", "followers_url": "https://api.github.com/users/shizidushu/followers", "following_url": "https://api.github.com/users/shizidushu/following{/other_user}", "gists_url": "https://api.github.com/users/shizidushu/gists{/gist_id}", "starred_url": "https://api.github.com/users/shizidushu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shizidushu/subscriptions", "organizations_url": "https://api.github.com/users/shizidushu/orgs", "repos_url": "https://api.github.com/users/shizidushu/repos", "events_url": "https://api.github.com/users/shizidushu/events{/privacy}", "received_events_url": "https://api.github.com/users/shizidushu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-14T09:06:43Z", "updated_at": "2019-12-14T15:43:24Z", "closed_at": "2019-12-14T15:43:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to declare a class that can be inherited both in Document and EmbeddedDocument?\r\n\r\n```python\r\nclass ProductBase(Document):\r\n    sku = StringField()\r\n    title = StringField()\r\n    link = URLField()\r\n    image_link = URLField()\r\n    price = FloatField()\r\n\r\n    meta = {'allow_inheritance': True}\r\n\r\n\r\nclass Product(ProductBase):\r\n    brand = StringField()\r\n    model = StringField()\r\n\r\n    meta = {'allow_inheritance': True}\r\n\r\n\r\nclass RelatedProduct(EmbeddedDocument):\r\n    relation = StringField()\r\n    products = EmbeddedDocumentListField(Product)  # Product is not EmbeddedDocument!\r\n\r\n\r\nclass LinkedProduct(Product):\r\n    link_date = DateTimeField()\r\n    related_product = EmbeddedDocumentListField(RelatedProduct)\r\n```\r\n\r\nI don't want to declare ProductBase and Product again with `EmbeddedDocument` class to avoid code duplication.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2209", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2209/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2209/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2209/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2209", "id": 532999619, "node_id": "MDU6SXNzdWU1MzI5OTk2MTk=", "number": 2209, "title": "Implement __bool__ on Q and QCombination", "user": {"login": "Pacu2", "id": 21290461, "node_id": "MDQ6VXNlcjIxMjkwNDYx", "avatar_url": "https://avatars3.githubusercontent.com/u/21290461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pacu2", "html_url": "https://github.com/Pacu2", "followers_url": "https://api.github.com/users/Pacu2/followers", "following_url": "https://api.github.com/users/Pacu2/following{/other_user}", "gists_url": "https://api.github.com/users/Pacu2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pacu2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pacu2/subscriptions", "organizations_url": "https://api.github.com/users/Pacu2/orgs", "repos_url": "https://api.github.com/users/Pacu2/repos", "events_url": "https://api.github.com/users/Pacu2/events{/privacy}", "received_events_url": "https://api.github.com/users/Pacu2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-04T23:20:11Z", "updated_at": "2019-12-13T19:53:34Z", "closed_at": "2019-12-13T19:53:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "At this moment, there's an `empty` property implemented on `QNode`, `Q` and `QCombination`. \r\n\r\nTo check whenever a filter is empty, one need to do:\r\n```\r\nif Q(name=\"John\").empty:\r\n    return\r\n```\r\n\r\nI think that a more pythonic way would be to parse filter to bool, so we can just check it as:\r\n```\r\nif not Q(name=\"John\"):\r\n    return\r\n```\r\n\r\nExamples given might not be real-life, but just imagine the filter was built dynamically by some other function. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2207", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2207/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2207/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2207/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2207", "id": 532463141, "node_id": "MDU6SXNzdWU1MzI0NjMxNDE=", "number": 2207, "title": "Field names with dots are rejected even for Mongo 3.6+", "user": {"login": "hdantas", "id": 1424659, "node_id": "MDQ6VXNlcjE0MjQ2NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1424659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdantas", "html_url": "https://github.com/hdantas", "followers_url": "https://api.github.com/users/hdantas/followers", "following_url": "https://api.github.com/users/hdantas/following{/other_user}", "gists_url": "https://api.github.com/users/hdantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdantas/subscriptions", "organizations_url": "https://api.github.com/users/hdantas/orgs", "repos_url": "https://api.github.com/users/hdantas/repos", "events_url": "https://api.github.com/users/hdantas/events{/privacy}", "received_events_url": "https://api.github.com/users/hdantas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-04T05:41:51Z", "updated_at": "2020-01-11T22:30:17Z", "closed_at": "2020-01-11T22:30:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Starting with Mongo 3.6 field names with dots and dollar signs (except at the start) are supported by the server ([link to docs](https://docs.mongodb.com/manual/core/document/#field-names)) however `mongoengine` raises `ValidationError`s if you actually try to use it (_e.g._ `t.est`). This is related to https://github.com/MongoEngine/mongoengine/issues/1594\r\n\r\nThe `key_has_dot_or_dollar` function seems to be the culprit as it doesn't take the mongo version into account. \r\n\r\nhttps://github.com/MongoEngine/mongoengine/blob/138e759161380097c10421265920ff4cf431352c/mongoengine/fields.py#L1043-L1051\r\n\r\nIdeally, we would be able to apply the same logic to validate the top-level field names but it's not clear to me the Mongo runtime is available at the class definition time. So I suppose we can only improve the validation for `DictField`s. Below is the relevant code snippet that I don't think can be updated to take into account the runtime version.\r\n\r\nhttps://github.com/MongoEngine/mongoengine/blob/138e759161380097c10421265920ff4cf431352c/mongoengine/base/fields.py#L100-L109", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2206", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2206/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2206/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2206/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2206", "id": 531951628, "node_id": "MDU6SXNzdWU1MzE5NTE2Mjg=", "number": 2206, "title": "Python3.8 with Mongoengine report TypeError", "user": {"login": "kasheemlew", "id": 14333766, "node_id": "MDQ6VXNlcjE0MzMzNzY2", "avatar_url": "https://avatars3.githubusercontent.com/u/14333766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kasheemlew", "html_url": "https://github.com/kasheemlew", "followers_url": "https://api.github.com/users/kasheemlew/followers", "following_url": "https://api.github.com/users/kasheemlew/following{/other_user}", "gists_url": "https://api.github.com/users/kasheemlew/gists{/gist_id}", "starred_url": "https://api.github.com/users/kasheemlew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kasheemlew/subscriptions", "organizations_url": "https://api.github.com/users/kasheemlew/orgs", "repos_url": "https://api.github.com/users/kasheemlew/repos", "events_url": "https://api.github.com/users/kasheemlew/events{/privacy}", "received_events_url": "https://api.github.com/users/kasheemlew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-03T12:31:01Z", "updated_at": "2019-12-23T23:27:05Z", "closed_at": "2019-12-23T23:27:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "pipenv with python3.8 installed mongoengine \r\n\r\nClass definition\r\n\r\n```python\r\nfrom mongoengine import *\r\n\r\nclass Title(Document):\r\n    value = StringField()\r\n    name = StringField()\r\n```\r\n\r\nscript: \r\n```python\r\nkwargs = {'value': 'test value', 'name': 'test name'}\r\nTitle(value=kwargs['value'], name=kwargs=['name']) \r\n```\r\n\r\nend up with this error:\r\n\r\n```python\r\n  File \".venv/lib/python3.8/site-packages/mongoengine/base/document.py\", line 88\r\n, in __init__\r\n    self._fields.keys() + ['id', 'pk', '_cls', '_text_score'])\r\n```\r\n\r\nI downgrade python to 3.7 as a temporary solution.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2205", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2205/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2205/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2205/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2205", "id": 531719120, "node_id": "MDU6SXNzdWU1MzE3MTkxMjA=", "number": 2205, "title": "How to achive sorting or order by fields string value?", "user": {"login": "anilwarbhe", "id": 47546834, "node_id": "MDQ6VXNlcjQ3NTQ2ODM0", "avatar_url": "https://avatars2.githubusercontent.com/u/47546834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anilwarbhe", "html_url": "https://github.com/anilwarbhe", "followers_url": "https://api.github.com/users/anilwarbhe/followers", "following_url": "https://api.github.com/users/anilwarbhe/following{/other_user}", "gists_url": "https://api.github.com/users/anilwarbhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/anilwarbhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anilwarbhe/subscriptions", "organizations_url": "https://api.github.com/users/anilwarbhe/orgs", "repos_url": "https://api.github.com/users/anilwarbhe/repos", "events_url": "https://api.github.com/users/anilwarbhe/events{/privacy}", "received_events_url": "https://api.github.com/users/anilwarbhe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-03T04:53:02Z", "updated_at": "2019-12-08T20:14:52Z", "closed_at": "2019-12-08T20:14:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say, I've got the following collection \"cities\" that looks like this:\r\n```\r\n+----+-------------+\r\n| ID | city        |\r\n+----+-------------+\r\n| 1 | Nagpur       |\r\n+----+-------------+\r\n| 2 | Mumbai       |\r\n+----+-------------+\r\n| 3 | Hyderabad    |\r\n+----+-------------+\r\n| 4 | Mumbai       |\r\n+----+-------------+\r\n```\r\n\r\nWhat I would like is to print out all the **city** in order. However, I would first of all like the values \"Mumbai\" to be right at the top. In other words, the output should be as follows: \r\nMumbai, Mumbai, Hyderabad, Nagpur.\r\nNow if I want **Nagpur** to be at the top then the result should be: Nagpur, Hyderabad, Mumbai, Mumbai\r\n**OR in other words: I do not want city field ordered in ASCENDING or DESCENDING but with a perticular Value of city at TOP.**\r\nMongoengines' order_by can sort can not achieve this. Please help, how to achieve this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2203", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2203/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2203/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2203/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2203", "id": 531599701, "node_id": "MDU6SXNzdWU1MzE1OTk3MDE=", "number": 2203, "title": "Add ability to compare Q objects", "user": {"login": "Pacu2", "id": 21290461, "node_id": "MDQ6VXNlcjIxMjkwNDYx", "avatar_url": "https://avatars3.githubusercontent.com/u/21290461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pacu2", "html_url": "https://github.com/Pacu2", "followers_url": "https://api.github.com/users/Pacu2/followers", "following_url": "https://api.github.com/users/Pacu2/following{/other_user}", "gists_url": "https://api.github.com/users/Pacu2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pacu2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pacu2/subscriptions", "organizations_url": "https://api.github.com/users/Pacu2/orgs", "repos_url": "https://api.github.com/users/Pacu2/repos", "events_url": "https://api.github.com/users/Pacu2/events{/privacy}", "received_events_url": "https://api.github.com/users/Pacu2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-02T23:12:04Z", "updated_at": "2019-12-04T19:58:05Z", "closed_at": "2019-12-04T19:58:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be convenient to have the ability to compare Q objects, at this moment, the following line will fail:\r\n\r\n```\r\nQ(name=\"john\") == Q(name=\"john\")\r\n```\r\n\r\nProbably it's just a matter of introducing the `__eq__` method on Q. \r\n\r\neg. \r\n```\r\nclass Q(QNode):\r\n    ...\r\n\r\n    def __eq__(self, other):\r\n        return self.__class__ == other.__class__ and self.query == other.query\r\n```\r\nIt would be beneficial in tests when one builds a query dynamically, and want to ensure the proper result is returned.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2200", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2200/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2200/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2200/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2200", "id": 529088380, "node_id": "MDU6SXNzdWU1MjkwODgzODA=", "number": 2200, "title": "how to order_by a property field?", "user": {"login": "cllen", "id": 24822166, "node_id": "MDQ6VXNlcjI0ODIyMTY2", "avatar_url": "https://avatars3.githubusercontent.com/u/24822166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cllen", "html_url": "https://github.com/cllen", "followers_url": "https://api.github.com/users/cllen/followers", "following_url": "https://api.github.com/users/cllen/following{/other_user}", "gists_url": "https://api.github.com/users/cllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/cllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cllen/subscriptions", "organizations_url": "https://api.github.com/users/cllen/orgs", "repos_url": "https://api.github.com/users/cllen/repos", "events_url": "https://api.github.com/users/cllen/events{/privacy}", "received_events_url": "https://api.github.com/users/cllen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-27T03:14:47Z", "updated_at": "2019-12-01T20:15:16Z", "closed_at": "2019-12-01T20:15:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "the model code:\r\n```\r\nclass UserModel(db.Model):\r\n    @property\r\n    def sortkey(self):\r\n        return random.randint(1,10)\r\n```\r\nthe invoking code:\r\n`users = UserModel.objects.all().order_by('-sortkey')`\r\n\r\nbut it doesn't work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2197", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2197/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2197/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2197/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2197", "id": 524894303, "node_id": "MDU6SXNzdWU1MjQ4OTQzMDM=", "number": 2197, "title": "How to print or log real executed query statements", "user": {"login": "zhanghaofei", "id": 14348610, "node_id": "MDQ6VXNlcjE0MzQ4NjEw", "avatar_url": "https://avatars0.githubusercontent.com/u/14348610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhanghaofei", "html_url": "https://github.com/zhanghaofei", "followers_url": "https://api.github.com/users/zhanghaofei/followers", "following_url": "https://api.github.com/users/zhanghaofei/following{/other_user}", "gists_url": "https://api.github.com/users/zhanghaofei/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhanghaofei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhanghaofei/subscriptions", "organizations_url": "https://api.github.com/users/zhanghaofei/orgs", "repos_url": "https://api.github.com/users/zhanghaofei/repos", "events_url": "https://api.github.com/users/zhanghaofei/events{/privacy}", "received_events_url": "https://api.github.com/users/zhanghaofei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-19T09:50:42Z", "updated_at": "2019-12-01T20:16:50Z", "closed_at": "2019-12-01T20:16:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to print or log real executed query statements, such as django insert, query and other SQL statements will be logged", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2196", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2196/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2196/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2196/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2196", "id": 524894218, "node_id": "MDU6SXNzdWU1MjQ4OTQyMTg=", "number": 2196, "title": "How to print or log real executed query statements", "user": {"login": "zhanghaofei", "id": 14348610, "node_id": "MDQ6VXNlcjE0MzQ4NjEw", "avatar_url": "https://avatars0.githubusercontent.com/u/14348610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhanghaofei", "html_url": "https://github.com/zhanghaofei", "followers_url": "https://api.github.com/users/zhanghaofei/followers", "following_url": "https://api.github.com/users/zhanghaofei/following{/other_user}", "gists_url": "https://api.github.com/users/zhanghaofei/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhanghaofei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhanghaofei/subscriptions", "organizations_url": "https://api.github.com/users/zhanghaofei/orgs", "repos_url": "https://api.github.com/users/zhanghaofei/repos", "events_url": "https://api.github.com/users/zhanghaofei/events{/privacy}", "received_events_url": "https://api.github.com/users/zhanghaofei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-19T09:50:33Z", "updated_at": "2019-12-01T20:17:34Z", "closed_at": "2019-12-01T20:17:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to print or log real executed query statements, such as django insert, query and other SQL statements will be logged", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2194", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2194/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2194/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2194/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2194", "id": 524467073, "node_id": "MDU6SXNzdWU1MjQ0NjcwNzM=", "number": 2194, "title": "Add alias argument in query_counter", "user": {"login": "EloiZalczer", "id": 6155302, "node_id": "MDQ6VXNlcjYxNTUzMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6155302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EloiZalczer", "html_url": "https://github.com/EloiZalczer", "followers_url": "https://api.github.com/users/EloiZalczer/followers", "following_url": "https://api.github.com/users/EloiZalczer/following{/other_user}", "gists_url": "https://api.github.com/users/EloiZalczer/gists{/gist_id}", "starred_url": "https://api.github.com/users/EloiZalczer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EloiZalczer/subscriptions", "organizations_url": "https://api.github.com/users/EloiZalczer/orgs", "repos_url": "https://api.github.com/users/EloiZalczer/repos", "events_url": "https://api.github.com/users/EloiZalczer/events{/privacy}", "received_events_url": "https://api.github.com/users/EloiZalczer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-18T16:12:22Z", "updated_at": "2019-12-04T20:50:42Z", "closed_at": "2019-12-04T20:50:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "The context_managers.query_counter constructor currently does not accept any arguments.\r\n\r\nIn my case, I define custom aliases and do not use the default one. When instantiating a query_counter, it calls get_db with no arguments which means that it tries to get the default alias, and throws the following exception:\r\n`mongoengine.connection.MongoEngineConnectionError: You have not defined a default connection`\r\n\r\nThis problem is easily solved by adding an \"alias\" parameter in the constructor for query_counter. I can push a PR if you are interested.\r\n\r\nThanks !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2186", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2186/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2186/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2186/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2186", "id": 513451947, "node_id": "MDU6SXNzdWU1MTM0NTE5NDc=", "number": 2186, "title": "Question ? how to get next and previous document", "user": {"login": "bekab95", "id": 17232189, "node_id": "MDQ6VXNlcjE3MjMyMTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/17232189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bekab95", "html_url": "https://github.com/bekab95", "followers_url": "https://api.github.com/users/bekab95/followers", "following_url": "https://api.github.com/users/bekab95/following{/other_user}", "gists_url": "https://api.github.com/users/bekab95/gists{/gist_id}", "starred_url": "https://api.github.com/users/bekab95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bekab95/subscriptions", "organizations_url": "https://api.github.com/users/bekab95/orgs", "repos_url": "https://api.github.com/users/bekab95/repos", "events_url": "https://api.github.com/users/bekab95/events{/privacy}", "received_events_url": "https://api.github.com/users/bekab95/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-28T17:33:15Z", "updated_at": "2019-10-29T09:51:17Z", "closed_at": "2019-10-28T20:28:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I get next and previous documents ?\r\nfor example if I find One document in collection and need to get next and prev documents", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2183", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2183/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2183/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2183/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2183", "id": 508046093, "node_id": "MDU6SXNzdWU1MDgwNDYwOTM=", "number": 2183, "title": "Document how it is possible to use pymongo.monitoring to log all queries", "user": {"login": "bagerard", "id": 11854690, "node_id": "MDQ6VXNlcjExODU0Njkw", "avatar_url": "https://avatars0.githubusercontent.com/u/11854690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bagerard", "html_url": "https://github.com/bagerard", "followers_url": "https://api.github.com/users/bagerard/followers", "following_url": "https://api.github.com/users/bagerard/following{/other_user}", "gists_url": "https://api.github.com/users/bagerard/gists{/gist_id}", "starred_url": "https://api.github.com/users/bagerard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bagerard/subscriptions", "organizations_url": "https://api.github.com/users/bagerard/orgs", "repos_url": "https://api.github.com/users/bagerard/repos", "events_url": "https://api.github.com/users/bagerard/events{/privacy}", "received_events_url": "https://api.github.com/users/bagerard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204222428, "node_id": "MDU6TGFiZWwyMDQyMjI0Mjg=", "url": "https://api.github.com/repos/MongoEngine/mongoengine/labels/Documentation", "name": "Documentation", "color": "c5def5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-16T19:15:22Z", "updated_at": "2019-10-21T12:07:43Z", "closed_at": "2019-10-21T12:07:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I wasn't aware of it but I recently heard about pymongo.monitoring by checking this [SO](https://stackoverflow.com/a/58412086/6203472) post. Since it's a common request, I'd suggest to document how it can be used with MongoEngine in the docs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2181", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2181/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2181/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2181/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2181", "id": 507960658, "node_id": "MDU6SXNzdWU1MDc5NjA2NTg=", "number": 2181, "title": "Inconsistent Behavior of __eq__ for EmbeddedDocuments with LazyReferenceFields", "user": {"login": "daewok", "id": 1280766, "node_id": "MDQ6VXNlcjEyODA3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1280766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daewok", "html_url": "https://github.com/daewok", "followers_url": "https://api.github.com/users/daewok/followers", "following_url": "https://api.github.com/users/daewok/following{/other_user}", "gists_url": "https://api.github.com/users/daewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/daewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daewok/subscriptions", "organizations_url": "https://api.github.com/users/daewok/orgs", "repos_url": "https://api.github.com/users/daewok/repos", "events_url": "https://api.github.com/users/daewok/events{/privacy}", "received_events_url": "https://api.github.com/users/daewok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-16T16:28:15Z", "updated_at": "2019-12-16T22:57:50Z", "closed_at": "2019-12-16T22:57:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you try to compare two EmbeddedDocuments that contain a LazyReferenceField, sometimes they are equal and sometimes they are not, depending on what's been done with the EmbeddedDocument. This occurs because the LazyReferenceField stores the ObjectId in the EmbeddedDocument's `_data` field instead of a DBRef, until the field is accessed explicitly, at which point it is replaced with a LazyReference.\r\n\r\nA simple test case that shows this is below.\r\n\r\n```python\r\nclass Job(EmbeddedDocument):\r\n    boss = LazyReferenceField('Person')\r\n\r\nclass Person(Document):\r\n    job = EmbeddedDocumentField(Job)\r\n\r\nPerson.drop_collection()\r\n\r\nboss = Person()\r\nworker = Person(job=Job(boss=boss))\r\nboss.save()\r\nworker.save()\r\n\r\nworker1 = Person.objects.get(id=worker.id)\r\n\r\nprint(worker1.job == worker.job)\r\nprint(worker1.job.boss)\r\nprint(worker1.job == worker.job)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2180", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2180/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2180/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2180/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2180", "id": 507788837, "node_id": "MDU6SXNzdWU1MDc3ODg4Mzc=", "number": 2180, "title": "Print queryset fails with a vague error", "user": {"login": "jaisharma639", "id": 8330173, "node_id": "MDQ6VXNlcjgzMzAxNzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/8330173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaisharma639", "html_url": "https://github.com/jaisharma639", "followers_url": "https://api.github.com/users/jaisharma639/followers", "following_url": "https://api.github.com/users/jaisharma639/following{/other_user}", "gists_url": "https://api.github.com/users/jaisharma639/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaisharma639/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaisharma639/subscriptions", "organizations_url": "https://api.github.com/users/jaisharma639/orgs", "repos_url": "https://api.github.com/users/jaisharma639/repos", "events_url": "https://api.github.com/users/jaisharma639/events{/privacy}", "received_events_url": "https://api.github.com/users/jaisharma639/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-16T11:25:25Z", "updated_at": "2019-11-08T20:27:18Z", "closed_at": "2019-11-08T20:27:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following fails to print in python3. Note that is_active is of type mongoengine.BooleanField\r\n\r\n`user_details = Users.objects.filter(is_active=True)`\r\n`print(\"users details\", user_details)`\r\n\r\nThe error is:\r\n`mongoengine.errors.InvalidDocumentError: Invalid data to create a `Users` instance.\r\ntype - The source SON object needs to be of type 'dict'\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2179", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2179/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2179/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2179/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2179", "id": 507785854, "node_id": "MDU6SXNzdWU1MDc3ODU4NTQ=", "number": 2179, "title": "use multi threading connect different db", "user": {"login": "zhimingzhang123", "id": 31529120, "node_id": "MDQ6VXNlcjMxNTI5MTIw", "avatar_url": "https://avatars2.githubusercontent.com/u/31529120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhimingzhang123", "html_url": "https://github.com/zhimingzhang123", "followers_url": "https://api.github.com/users/zhimingzhang123/followers", "following_url": "https://api.github.com/users/zhimingzhang123/following{/other_user}", "gists_url": "https://api.github.com/users/zhimingzhang123/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhimingzhang123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhimingzhang123/subscriptions", "organizations_url": "https://api.github.com/users/zhimingzhang123/orgs", "repos_url": "https://api.github.com/users/zhimingzhang123/repos", "events_url": "https://api.github.com/users/zhimingzhang123/events{/privacy}", "received_events_url": "https://api.github.com/users/zhimingzhang123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-16T11:19:09Z", "updated_at": "2019-10-28T21:36:12Z", "closed_at": "2019-10-28T21:36:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I want to use multi threading fetch data to save different db,  this is a very simple demo, I hope you can give me some help.\r\n\r\n```python\r\nimport threading, time\r\nfrom mongoengine import connect, Document, StringField\r\n\r\n\r\nclass DB1(Document):\r\n    name = StringField()\r\n\r\n\r\nclass DB2(Document):\r\n    name = StringField()\r\n\r\n\r\nclass DB3(Document):\r\n    name = StringField()\r\n\r\n\r\nmongo_config1 = {'db': 'DB1', 'username': None, 'password': None}\r\nmongo_config2 = {'db': 'DB2', 'username': None, 'password': None}\r\nmongo_config3 = {'db': 'DB3', 'username': None, 'password': None}\r\n\r\n\r\ndef write_db(config, db):\r\n    alias = config.get('db')\r\n    connect(**config, alias=alias)\r\n    db(name='test-name').save()\r\n\r\n\r\nthreading_list = []\r\n\r\nth1 = threading.Thread(target=write_db, args=(mongo_config1, DB1))\r\nth2 = threading.Thread(target=write_db, args=(mongo_config2, DB2))\r\nth3 = threading.Thread(target=write_db, args=(mongo_config3, DB3))\r\n\r\nth1.start()\r\ntime.sleep(1)\r\nth2.start()\r\ntime.sleep(1)\r\nth3.start()\r\nthreading_list.append(th1)\r\nthreading_list.append(th2)\r\nthreading_list.append(th3)\r\n\r\nfor i in threading_list:\r\n    i.join()\r\n```\r\nthe error told me `mongoengine.connection.MongoEngineConnectionError: You have not defined a default connection`\r\nthanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2178", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2178/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2178/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2178/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2178", "id": 507238471, "node_id": "MDU6SXNzdWU1MDcyMzg0NzE=", "number": 2178, "title": "Error with ReferenceField in EmbeddedDocument", "user": {"login": "EloiZalczer", "id": 6155302, "node_id": "MDQ6VXNlcjYxNTUzMDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6155302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EloiZalczer", "html_url": "https://github.com/EloiZalczer", "followers_url": "https://api.github.com/users/EloiZalczer/followers", "following_url": "https://api.github.com/users/EloiZalczer/following{/other_user}", "gists_url": "https://api.github.com/users/EloiZalczer/gists{/gist_id}", "starred_url": "https://api.github.com/users/EloiZalczer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EloiZalczer/subscriptions", "organizations_url": "https://api.github.com/users/EloiZalczer/orgs", "repos_url": "https://api.github.com/users/EloiZalczer/repos", "events_url": "https://api.github.com/users/EloiZalczer/events{/privacy}", "received_events_url": "https://api.github.com/users/EloiZalczer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 774310, "node_id": "MDU6TGFiZWw3NzQzMTA=", "url": "https://api.github.com/repos/MongoEngine/mongoengine/labels/Awaiting%20Response", "name": "Awaiting Response", "color": "c2e0c6", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-15T13:16:53Z", "updated_at": "2019-10-29T08:42:06Z", "closed_at": "2019-10-29T08:42:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a code snippet that looks like the following:\r\n\r\n```\r\nclass Foo(EmbeddedDocument):\r\n    a = StringField()\r\n    b = ListField(ReferenceField(Baz))\r\n    c = ReferenceField(Baz)\r\n\r\nclass Bar(Document):\r\n    a= StringField()\r\n    b= StringField()\r\n    c= ListField(EmbeddedDocumentField(Foo))\r\n\r\n    meta = {'allow_inheritance': True}\r\n    meta = {'collection': 'bar'}\r\n```\r\n\r\nI don't get any issue when creating my object or saving it.\r\n\r\nHowever, when I query the object and try to access it using the following code:\r\n```\r\nbar = Bar.objects().first()\r\nprint(bar.c)\r\n```\r\n\r\nI get the following error\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \".\\description\\run.py\", line 81, in <module>\r\n    print(bar.c)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\mongoengine\\fields.py\", line 860, in __get__\r\n    return super(ListField, self).__get__(instance, owner)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\mongoengine\\base\\fields.py\", line 319, in __get__\r\n    value, max_depth=1, instance=instance, name=self.name\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\mongoengine\\dereference.py\", line 92, in __call__\r\n    self.object_map = self._fetch_objects(doc_type=doc_type)\r\n  File \"C:\\Users\\ezalczer\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\mongoengine\\dereference.py\", line 171, in _fetch_objects\r\n    references = doc_type._get_db()[collection].find({'_id': {'$in': refs}})\r\nAttributeError: 'EmbeddedDocumentField' object has no attribute '_get_db'\r\n```\r\n\r\nThis only happens if the field c is filled in the Foo class. If this field is empty and the b list has elements, the error does not happen.\r\n\r\nIs this a bug or am I doing something wrong ? \r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2167", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2167/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2167/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2167/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2167", "id": 497322960, "node_id": "MDU6SXNzdWU0OTczMjI5NjA=", "number": 2167, "title": "BaseDocument __init__ description improved for PyCharm code inspection", "user": {"login": "yhhsteven", "id": 20384261, "node_id": "MDQ6VXNlcjIwMzg0MjYx", "avatar_url": "https://avatars2.githubusercontent.com/u/20384261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yhhsteven", "html_url": "https://github.com/yhhsteven", "followers_url": "https://api.github.com/users/yhhsteven/followers", "following_url": "https://api.github.com/users/yhhsteven/following{/other_user}", "gists_url": "https://api.github.com/users/yhhsteven/gists{/gist_id}", "starred_url": "https://api.github.com/users/yhhsteven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yhhsteven/subscriptions", "organizations_url": "https://api.github.com/users/yhhsteven/orgs", "repos_url": "https://api.github.com/users/yhhsteven/repos", "events_url": "https://api.github.com/users/yhhsteven/events{/privacy}", "received_events_url": "https://api.github.com/users/yhhsteven/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-23T20:53:45Z", "updated_at": "2019-10-21T12:06:53Z", "closed_at": "2019-10-21T12:06:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "In PyCharm (2019.2), it gives inspection warning \"Expected type dict; got str instead\" for codes like:\r\n\r\n`User(email='ross@example.com')`\r\n\r\nSuggested change:\r\n\r\n**base/document.py**\r\n`:param **dict** values: A dictionary of keys and values for the document.`\r\nby removing \"dict\" type\r\n`:param values: A dictionary of keys and values for the document.`\r\n\r\nIt helps inspection to display normally.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2164", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2164/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2164/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2164/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2164", "id": 492751124, "node_id": "MDU6SXNzdWU0OTI3NTExMjQ=", "number": 2164, "title": "How to Prevent SQL Injection Attacks", "user": {"login": "hh8shyy", "id": 3446260, "node_id": "MDQ6VXNlcjM0NDYyNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3446260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hh8shyy", "html_url": "https://github.com/hh8shyy", "followers_url": "https://api.github.com/users/hh8shyy/followers", "following_url": "https://api.github.com/users/hh8shyy/following{/other_user}", "gists_url": "https://api.github.com/users/hh8shyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/hh8shyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hh8shyy/subscriptions", "organizations_url": "https://api.github.com/users/hh8shyy/orgs", "repos_url": "https://api.github.com/users/hh8shyy/repos", "events_url": "https://api.github.com/users/hh8shyy/events{/privacy}", "received_events_url": "https://api.github.com/users/hh8shyy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-12T11:38:52Z", "updated_at": "2019-09-15T20:22:38Z", "closed_at": "2019-09-15T20:22:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Use this module, How to Prevent SQL Injection Attacks?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2162", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2162/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2162/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2162/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2162", "id": 489751769, "node_id": "MDU6SXNzdWU0ODk3NTE3Njk=", "number": 2162, "title": "Querying Document using QuerySet objects() returns a Type error", "user": {"login": "codeninja55", "id": 24749967, "node_id": "MDQ6VXNlcjI0NzQ5OTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/24749967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codeninja55", "html_url": "https://github.com/codeninja55", "followers_url": "https://api.github.com/users/codeninja55/followers", "following_url": "https://api.github.com/users/codeninja55/following{/other_user}", "gists_url": "https://api.github.com/users/codeninja55/gists{/gist_id}", "starred_url": "https://api.github.com/users/codeninja55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codeninja55/subscriptions", "organizations_url": "https://api.github.com/users/codeninja55/orgs", "repos_url": "https://api.github.com/users/codeninja55/repos", "events_url": "https://api.github.com/users/codeninja55/events{/privacy}", "received_events_url": "https://api.github.com/users/codeninja55/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-05T13:20:17Z", "updated_at": "2019-09-06T18:41:07Z", "closed_at": "2019-09-05T13:41:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say I have a Document:\r\n\r\n```python\r\nclass User(Document):\r\n    email = EmailField(required=True, unique=True)\r\n    password = StringField(default=None, max_length=64, null=False, min_length=6)\r\n```\r\n\r\nIn my Flask view for login, I am doing a simple `User.objects(email=email)` and I get the following errors.\r\n\r\n```\r\nFile \"/opt/conda/lib/python3.7/site-packages/flask/app.py\", line 1813, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/opt/conda/lib/python3.7/site-packages/flask/app.py\", line 1799, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/usr/src/app/sim_api/resources/auth.py\", line 311, in login\r\n    user = User.objects.get(email=email)\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/queryset/base.py\", line 266, in get\r\n    result = six.next(queryset)\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/queryset/base.py\", line 1492, in __next__\r\n    only_fields=self.only_fields)\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/base/document.py\", line 722, in _from_son\r\n    else field.to_python(value))\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/base/fields.py\", line 350, in to_python\r\n    for key, item in list(value.items())}\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/base/fields.py\", line 350, in <dictcomp>\r\n    for key, item in list(value.items())}\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/fields.py\", line 687, in to_python\r\n    return self.document_type._from_son(value, _auto_dereference=self._auto_dereference)\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/base/document.py\", line 722, in _from_son\r\n    else field.to_python(value))\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/base/fields.py\", line 350, in to_python\r\n    for key, item in list(value.items())}\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/base/fields.py\", line 350, in <dictcomp>\r\n    for key, item in list(value.items())}\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/fields.py\", line 687, in to_python\r\n    return self.document_type._from_son(value, _auto_dereference=self._auto_dereference)\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/base/document.py\", line 722, in _from_son\r\n    else field.to_python(value))\r\n  File \"/opt/conda/lib/python3.7/site-packages/mongoengine/fields.py\", line 346, in to_python\r\n    value = float(value)\r\nTypeError: float() argument must be a string or a number, not 'dict'\r\n```\r\n\r\nDoes anyone possibly know why MongoEngine is causing this as I cannot seem to find why I would need a float. \r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2161", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2161/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2161/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2161/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2161", "id": 489569578, "node_id": "MDU6SXNzdWU0ODk1Njk1Nzg=", "number": 2161, "title": "Document the .aggregate with a tutorial", "user": {"login": "bagerard", "id": 11854690, "node_id": "MDQ6VXNlcjExODU0Njkw", "avatar_url": "https://avatars0.githubusercontent.com/u/11854690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bagerard", "html_url": "https://github.com/bagerard", "followers_url": "https://api.github.com/users/bagerard/followers", "following_url": "https://api.github.com/users/bagerard/following{/other_user}", "gists_url": "https://api.github.com/users/bagerard/gists{/gist_id}", "starred_url": "https://api.github.com/users/bagerard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bagerard/subscriptions", "organizations_url": "https://api.github.com/users/bagerard/orgs", "repos_url": "https://api.github.com/users/bagerard/repos", "events_url": "https://api.github.com/users/bagerard/events{/privacy}", "received_events_url": "https://api.github.com/users/bagerard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204222428, "node_id": "MDU6TGFiZWwyMDQyMjI0Mjg=", "url": "https://api.github.com/repos/MongoEngine/mongoengine/labels/Documentation", "name": "Documentation", "color": "c5def5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-05T07:10:28Z", "updated_at": "2019-09-17T19:07:43Z", "closed_at": "2019-09-17T19:07:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently the only place documenting the .aggregate on readthedocs is the API Reference, aggregation being an important feature of mongodb, it could be worth to make it more visible with a tutorial", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2158", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2158/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2158/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2158/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2158", "id": 487232289, "node_id": "MDU6SXNzdWU0ODcyMzIyODk=", "number": 2158, "title": "Is it possible to use session and transaction in mongoengine?", "user": {"login": "lonelywm", "id": 3522643, "node_id": "MDQ6VXNlcjM1MjI2NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3522643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lonelywm", "html_url": "https://github.com/lonelywm", "followers_url": "https://api.github.com/users/lonelywm/followers", "following_url": "https://api.github.com/users/lonelywm/following{/other_user}", "gists_url": "https://api.github.com/users/lonelywm/gists{/gist_id}", "starred_url": "https://api.github.com/users/lonelywm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lonelywm/subscriptions", "organizations_url": "https://api.github.com/users/lonelywm/orgs", "repos_url": "https://api.github.com/users/lonelywm/repos", "events_url": "https://api.github.com/users/lonelywm/events{/privacy}", "received_events_url": "https://api.github.com/users/lonelywm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-30T00:37:37Z", "updated_at": "2019-10-01T20:22:11Z", "closed_at": "2019-09-29T13:51:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw as you mentioned in #1936  and #2061 that had added a special session para in document's save function, but in the newest version of 0.18.2 I didn't find it. So what is the best practice to use transaction or can I directly use pymongo's session and transcation?\r\n\u00b2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2155", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2155/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2155/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2155/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2155", "id": 486221670, "node_id": "MDU6SXNzdWU0ODYyMjE2NzA=", "number": 2155, "title": "Document the backing driver in ReadTheDocs", "user": {"login": "Fjolnir-Dvorak", "id": 6683555, "node_id": "MDQ6VXNlcjY2ODM1NTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6683555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fjolnir-Dvorak", "html_url": "https://github.com/Fjolnir-Dvorak", "followers_url": "https://api.github.com/users/Fjolnir-Dvorak/followers", "following_url": "https://api.github.com/users/Fjolnir-Dvorak/following{/other_user}", "gists_url": "https://api.github.com/users/Fjolnir-Dvorak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fjolnir-Dvorak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fjolnir-Dvorak/subscriptions", "organizations_url": "https://api.github.com/users/Fjolnir-Dvorak/orgs", "repos_url": "https://api.github.com/users/Fjolnir-Dvorak/repos", "events_url": "https://api.github.com/users/Fjolnir-Dvorak/events{/privacy}", "received_events_url": "https://api.github.com/users/Fjolnir-Dvorak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204222428, "node_id": "MDU6TGFiZWwyMDQyMjI0Mjg=", "url": "https://api.github.com/repos/MongoEngine/mongoengine/labels/Documentation", "name": "Documentation", "color": "c5def5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-28T08:06:00Z", "updated_at": "2019-10-16T18:34:27Z", "closed_at": "2019-10-16T18:34:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you please add documentation to ReadTheDocs that you only support pymongo version x+ and that support for motor in the future is very unlikely? It was very unclear to me which driver this library uses and whether it is compatible to my code or not which was not possible to answer for sure reading your documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2152", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2152/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2152/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2152/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2152", "id": 483355959, "node_id": "MDU6SXNzdWU0ODMzNTU5NTk=", "number": 2152, "title": "Misleading error message on bulkwrite", "user": {"login": "erdenezul", "id": 176678, "node_id": "MDQ6VXNlcjE3NjY3OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/176678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erdenezul", "html_url": "https://github.com/erdenezul", "followers_url": "https://api.github.com/users/erdenezul/followers", "following_url": "https://api.github.com/users/erdenezul/following{/other_user}", "gists_url": "https://api.github.com/users/erdenezul/gists{/gist_id}", "starred_url": "https://api.github.com/users/erdenezul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erdenezul/subscriptions", "organizations_url": "https://api.github.com/users/erdenezul/orgs", "repos_url": "https://api.github.com/users/erdenezul/repos", "events_url": "https://api.github.com/users/erdenezul/events{/privacy}", "received_events_url": "https://api.github.com/users/erdenezul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-21T11:10:39Z", "updated_at": "2019-09-04T07:42:11Z", "closed_at": "2019-09-04T07:42:11Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Error message was like `Document must not have _id value before bulk write.`. But it was misleading. Because of that, I have wasted my one day to debugging data. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2151", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2151/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2151/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2151/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2151", "id": 483284442, "node_id": "MDU6SXNzdWU0ODMyODQ0NDI=", "number": 2151, "title": "how to create empty collection like modelCls.objects.create()", "user": {"login": "sunhk25", "id": 10083429, "node_id": "MDQ6VXNlcjEwMDgzNDI5", "avatar_url": "https://avatars1.githubusercontent.com/u/10083429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunhk25", "html_url": "https://github.com/sunhk25", "followers_url": "https://api.github.com/users/sunhk25/followers", "following_url": "https://api.github.com/users/sunhk25/following{/other_user}", "gists_url": "https://api.github.com/users/sunhk25/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunhk25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunhk25/subscriptions", "organizations_url": "https://api.github.com/users/sunhk25/orgs", "repos_url": "https://api.github.com/users/sunhk25/repos", "events_url": "https://api.github.com/users/sunhk25/events{/privacy}", "received_events_url": "https://api.github.com/users/sunhk25/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-21T08:48:20Z", "updated_at": "2019-09-02T19:33:20Z", "closed_at": "2019-09-02T19:31:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I only need a empty collection, Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2150", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2150/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2150/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2150/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2150", "id": 483219079, "node_id": "MDU6SXNzdWU0ODMyMTkwNzk=", "number": 2150, "title": "connect() cant accept more parameters for kwargs ", "user": {"login": "gopipofficial", "id": 18674571, "node_id": "MDQ6VXNlcjE4Njc0NTcx", "avatar_url": "https://avatars1.githubusercontent.com/u/18674571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gopipofficial", "html_url": "https://github.com/gopipofficial", "followers_url": "https://api.github.com/users/gopipofficial/followers", "following_url": "https://api.github.com/users/gopipofficial/following{/other_user}", "gists_url": "https://api.github.com/users/gopipofficial/gists{/gist_id}", "starred_url": "https://api.github.com/users/gopipofficial/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gopipofficial/subscriptions", "organizations_url": "https://api.github.com/users/gopipofficial/orgs", "repos_url": "https://api.github.com/users/gopipofficial/repos", "events_url": "https://api.github.com/users/gopipofficial/events{/privacy}", "received_events_url": "https://api.github.com/users/gopipofficial/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-21T06:11:29Z", "updated_at": "2019-09-02T13:25:30Z", "closed_at": "2019-08-28T12:30:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "when I pass arguments to connect method it throws error like accepts two parameter passed 5 \r\nex: \r\nworks fine when I pass\r\nconnect(username=\"asdf\", password=\"asdfa\", host=\"123\", port=\"23423\")\r\n\r\nbut doesnt work when I pass those values from a variable \r\n\r\nusername=\"asdf\"\r\npassword=\"asdfa\"\r\nhost=\"123\"\r\nport=\"23423\"\r\n\r\nconnect(username, password, host, port)\r\n\r\nthe above line throws the specified exception", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2148", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2148/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2148/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2148/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2148", "id": 482743330, "node_id": "MDU6SXNzdWU0ODI3NDMzMzA=", "number": 2148, "title": "MongoDB 4.2: mongoengine.errors.OperationError: Update failed (BSON field 'no_cursor_timeout' is an unknown field.)", "user": {"login": "crunk1", "id": 1885442, "node_id": "MDQ6VXNlcjE4ODU0NDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1885442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crunk1", "html_url": "https://github.com/crunk1", "followers_url": "https://api.github.com/users/crunk1/followers", "following_url": "https://api.github.com/users/crunk1/following{/other_user}", "gists_url": "https://api.github.com/users/crunk1/gists{/gist_id}", "starred_url": "https://api.github.com/users/crunk1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crunk1/subscriptions", "organizations_url": "https://api.github.com/users/crunk1/orgs", "repos_url": "https://api.github.com/users/crunk1/repos", "events_url": "https://api.github.com/users/crunk1/events{/privacy}", "received_events_url": "https://api.github.com/users/crunk1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-20T09:19:23Z", "updated_at": "2019-09-11T20:09:56Z", "closed_at": "2019-09-11T20:09:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nmongoengine.errors.OperationError: Update failed (BSON field 'no_cursor_timeout' is an unknown field.)\r\n    at modify (/opt/python3.7/lib/python3.7/site-packages/mongoengine/queryset/base.py:650)\r\n```\r\n\r\nSorry, don't have exact steps to repro this. Caught this as we were trying out 4.2 and I'm busy reverting back to 4.0 :)\r\n\r\nSome basic info:\r\npython: 3.7.4\r\nmongoengine: 0.18.2\r\npymongo: 3.9.0\r\n\r\nError does not appear when running against server 4.0.12.\r\nUpon upgrading to 4.2, error starts popping up during update queries.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2143", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2143/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2143/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2143/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2143", "id": 477763196, "node_id": "MDU6SXNzdWU0Nzc3NjMxOTY=", "number": 2143, "title": "Is there any options to echo command send to server for debug?", "user": {"login": "imfht", "id": 15059493, "node_id": "MDQ6VXNlcjE1MDU5NDkz", "avatar_url": "https://avatars2.githubusercontent.com/u/15059493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imfht", "html_url": "https://github.com/imfht", "followers_url": "https://api.github.com/users/imfht/followers", "following_url": "https://api.github.com/users/imfht/following{/other_user}", "gists_url": "https://api.github.com/users/imfht/gists{/gist_id}", "starred_url": "https://api.github.com/users/imfht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imfht/subscriptions", "organizations_url": "https://api.github.com/users/imfht/orgs", "repos_url": "https://api.github.com/users/imfht/repos", "events_url": "https://api.github.com/users/imfht/events{/privacy}", "received_events_url": "https://api.github.com/users/imfht/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-07T07:50:08Z", "updated_at": "2019-08-23T09:34:06Z", "closed_at": "2019-08-23T09:34:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello: \r\n    I'm using mongoengine but it caused some profile problem. So I wanner know what command is sent to my server. \r\n   sqlalchemy has an option `echo`, when set to true. sqlalchemy will echo executed sql. does mongoengine support this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2142", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2142/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2142/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2142/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2142", "id": 476845301, "node_id": "MDU6SXNzdWU0NzY4NDUzMDE=", "number": 2142, "title": "object.save() crash without any error massage but throw exception in try-catch", "user": {"login": "XDavidT", "id": 38883783, "node_id": "MDQ6VXNlcjM4ODgzNzgz", "avatar_url": "https://avatars1.githubusercontent.com/u/38883783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XDavidT", "html_url": "https://github.com/XDavidT", "followers_url": "https://api.github.com/users/XDavidT/followers", "following_url": "https://api.github.com/users/XDavidT/following{/other_user}", "gists_url": "https://api.github.com/users/XDavidT/gists{/gist_id}", "starred_url": "https://api.github.com/users/XDavidT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XDavidT/subscriptions", "organizations_url": "https://api.github.com/users/XDavidT/orgs", "repos_url": "https://api.github.com/users/XDavidT/repos", "events_url": "https://api.github.com/users/XDavidT/events{/privacy}", "received_events_url": "https://api.github.com/users/XDavidT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-05T12:58:39Z", "updated_at": "2019-08-05T15:16:50Z", "closed_at": "2019-08-05T15:16:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I start using in test environment, and all works fine.\r\nWhen I got to large project and using it in my server, I put the object.save() in try-catch to understand that the problem is there.\r\nEvery time I get to .save(), program skip to exception and don't throw any error.\r\nIs there any return value ? any status I can get ? more details ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2141", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2141/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2141/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2141/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2141", "id": 473008313, "node_id": "MDU6SXNzdWU0NzMwMDgzMTM=", "number": 2141, "title": "Increasing memory usage and query time very high", "user": {"login": "nixon1333", "id": 1893934, "node_id": "MDQ6VXNlcjE4OTM5MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1893934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixon1333", "html_url": "https://github.com/nixon1333", "followers_url": "https://api.github.com/users/nixon1333/followers", "following_url": "https://api.github.com/users/nixon1333/following{/other_user}", "gists_url": "https://api.github.com/users/nixon1333/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixon1333/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixon1333/subscriptions", "organizations_url": "https://api.github.com/users/nixon1333/orgs", "repos_url": "https://api.github.com/users/nixon1333/repos", "events_url": "https://api.github.com/users/nixon1333/events{/privacy}", "received_events_url": "https://api.github.com/users/nixon1333/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-25T18:27:21Z", "updated_at": "2019-07-26T11:36:35Z", "closed_at": "2019-07-26T11:36:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n So this is my function\r\n\r\n```\r\n    def getInfo():\r\n        now = datetime.datetime.now()\r\n        times = datetime.datetime.now()\r\n        print(times)\r\n        query = ObjsCan.objects.filter(\r\n            (\r\n                    (Q(a_count=None) | Q(a_count__gte=1)) &\r\n                    (Q(a_id=None) | Q(a_id=0) | Q(a_id=2)) &\r\n                    (Q(a_group=None)) | (Q(a_group__in=Gp.objects.filter(a_type='a', is_active=True,\r\n                                                                                  ids__in=[str(1)])))\r\n            ),\r\n            is_active=True,\r\n            start_date__lte=now,\r\n            expire_date__gte=now,\r\n        )\r\n        print(\"After query\", datetime.datetime.now() - times)\r\n        data = query.no_cache()\r\n        print(\"after no caching\", datetime.datetime.now() - times)\r\n        data.to_json()\r\n        print(\"after listing\", datetime.datetime.now() - times)\r\n        data = query.order_by('priority')[(0) * 10:(1)]\r\n        print(\"After order by\", datetime.datetime.now() - times)\r\n```\r\n\r\nif i call this function this is what happens every time\r\n```\r\n2019-07-21 00:09:47.477147\r\nAfter query 0:00:00.194826\r\nafter no caching 0:00:00.194956\r\nafter listing 0:00:11.362277\r\nAfter order by 0:00:11.362362\r\n```\r\n\r\nThe actual mongo query is  less than 1 sec but the `to_json()` is taking more than 11 sec. What would be the issue :( \r\nUsing `mongoengine==0.16.2`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2138", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2138/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2138/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2138/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2138", "id": 470972582, "node_id": "MDU6SXNzdWU0NzA5NzI1ODI=", "number": 2138, "title": "Index with name: ... exists with different options", "user": {"login": "FabianGoettl", "id": 24296280, "node_id": "MDQ6VXNlcjI0Mjk2Mjgw", "avatar_url": "https://avatars0.githubusercontent.com/u/24296280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianGoettl", "html_url": "https://github.com/FabianGoettl", "followers_url": "https://api.github.com/users/FabianGoettl/followers", "following_url": "https://api.github.com/users/FabianGoettl/following{/other_user}", "gists_url": "https://api.github.com/users/FabianGoettl/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianGoettl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianGoettl/subscriptions", "organizations_url": "https://api.github.com/users/FabianGoettl/orgs", "repos_url": "https://api.github.com/users/FabianGoettl/repos", "events_url": "https://api.github.com/users/FabianGoettl/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianGoettl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-22T08:52:54Z", "updated_at": "2019-08-20T13:05:53Z", "closed_at": "2019-08-20T13:05:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following document, which specifies multiple indexes:\r\n\r\n```\r\nclass MeasurementHead(Document):\r\n    variables = EmbeddedDocumentListField(VariableDefinition)\r\n    placeholder1= IntField()\r\n    placeholder2= IntField()\r\n\r\n    meta = {\r\n        'indexes': [\r\n            'variables.name',\r\n            'placeholder1',\r\n            'placeholder2',\r\n            ('placeholder1', 'placeholder2'),\r\n        ]\r\n    }\r\n```\r\n\r\nNow I have upgraded from mongoengine 0.17.0 to 0.18.1 and get the following error, when I try to store a new document:\r\n> pymongo.errors.OperationFailure: Index with name: **INDEXNAME** already exists with different options\r\n\r\nHave the index options changed between the versions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2133", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2133/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2133/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2133/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2133", "id": 467950615, "node_id": "MDU6SXNzdWU0Njc5NTA2MTU=", "number": 2133, "title": "Get ReferenceField data return None", "user": {"login": "teamhide", "id": 8403122, "node_id": "MDQ6VXNlcjg0MDMxMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8403122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teamhide", "html_url": "https://github.com/teamhide", "followers_url": "https://api.github.com/users/teamhide/followers", "following_url": "https://api.github.com/users/teamhide/following{/other_user}", "gists_url": "https://api.github.com/users/teamhide/gists{/gist_id}", "starred_url": "https://api.github.com/users/teamhide/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teamhide/subscriptions", "organizations_url": "https://api.github.com/users/teamhide/orgs", "repos_url": "https://api.github.com/users/teamhide/repos", "events_url": "https://api.github.com/users/teamhide/events{/privacy}", "received_events_url": "https://api.github.com/users/teamhide/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-15T05:46:13Z", "updated_at": "2019-07-21T05:37:11Z", "closed_at": "2019-07-21T05:37:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have two models.\r\n\r\n**Comment**\r\n\r\n```\r\nclass Comment(Document):\r\n    comment_id = SequenceField()\r\n    post = ReferenceField('Post')\r\n    body = StringField()\r\n```\r\n\r\n**Post**\r\n\r\n```\r\nclass Post(Document):\r\n    post_id = SequenceField()\r\n    body = StringField()\r\n    comment = ReferenceField('Comment', reverse_delete_rule=CASCADE)\r\n```\r\n\r\nAnd created post and comment.\r\n\r\n```\r\npost = Post(body='first body').save()\r\nComment(body='first comment', post=post).save()\r\n```\r\n\r\nTo fetch post's comment, I executed below code.\r\n\r\n```\r\npost = Post.objects(body='first body').first()\r\nprint(post.comment)\r\n```\r\n\r\nBut it printed `None`\r\n\r\nHere is a look at the actual database:\r\n\r\n```\r\n> db.comment.find()\r\n{ \"_id\" : ObjectId(\"5d2c12341b48d90a9a335d10\"), \"comment_id\" : 1, \"post\" : ObjectId(\"5d2c12341b48d90a9a335d0f\"), \"body\" : \"first comment\" }\r\n> db.post.find()\r\n{ \"_id\" : ObjectId(\"5d2c12341b48d90a9a335d0f\"), \"post_id\" : 1, \"body\" : \"first body\" }\r\n```\r\n\r\nI wonder that, how can get all the documents on the post model?\r\n\r\nIs it impossible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2132", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2132/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2132/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2132/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2132", "id": 467446307, "node_id": "MDU6SXNzdWU0Njc0NDYzMDc=", "number": 2132, "title": "How to have EmbeddedDocuments in a Map?", "user": {"login": "mojimi", "id": 10172340, "node_id": "MDQ6VXNlcjEwMTcyMzQw", "avatar_url": "https://avatars2.githubusercontent.com/u/10172340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mojimi", "html_url": "https://github.com/mojimi", "followers_url": "https://api.github.com/users/mojimi/followers", "following_url": "https://api.github.com/users/mojimi/following{/other_user}", "gists_url": "https://api.github.com/users/mojimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mojimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mojimi/subscriptions", "organizations_url": "https://api.github.com/users/mojimi/orgs", "repos_url": "https://api.github.com/users/mojimi/repos", "events_url": "https://api.github.com/users/mojimi/events{/privacy}", "received_events_url": "https://api.github.com/users/mojimi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-12T14:31:42Z", "updated_at": "2019-07-15T17:22:18Z", "closed_at": "2019-07-15T13:25:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "First, how does EmbeddeDocumentListField works behinds the scene? Is it a normal list or a map?\r\n\r\nAnd how can I have EmbeddedDocuments that are queried by key? For example :\r\n\r\n```python\r\nclass User(Document):\r\n  invoices = MapField(ReferenceField('Invoice'))\r\n```\r\n\r\nAlso, what's the difference between GenericEmbeddedDocument, MapField, and DictField? As far as I know in MongoDB these are all Embedded Documents/objects\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2130", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2130/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2130/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2130/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2130", "id": 467381712, "node_id": "MDU6SXNzdWU0NjczODE3MTI=", "number": 2130, "title": "Default database not set if host is mongomock", "user": {"login": "NMFR", "id": 13484940, "node_id": "MDQ6VXNlcjEzNDg0OTQw", "avatar_url": "https://avatars3.githubusercontent.com/u/13484940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NMFR", "html_url": "https://github.com/NMFR", "followers_url": "https://api.github.com/users/NMFR/followers", "following_url": "https://api.github.com/users/NMFR/following{/other_user}", "gists_url": "https://api.github.com/users/NMFR/gists{/gist_id}", "starred_url": "https://api.github.com/users/NMFR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NMFR/subscriptions", "organizations_url": "https://api.github.com/users/NMFR/orgs", "repos_url": "https://api.github.com/users/NMFR/repos", "events_url": "https://api.github.com/users/NMFR/events{/privacy}", "received_events_url": "https://api.github.com/users/NMFR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-12T12:13:17Z", "updated_at": "2019-07-22T09:56:57Z", "closed_at": "2019-07-22T09:56:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When passing host `mongomock://localhost/some-default-database` to `connect` the default database will be `test` instead of `some-default-database`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2128", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2128/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2128/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2128/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2128", "id": 466268820, "node_id": "MDU6SXNzdWU0NjYyNjg4MjA=", "number": 2128, "title": "how to delete a field in a document?", "user": {"login": "cmdedj", "id": 19429921, "node_id": "MDQ6VXNlcjE5NDI5OTIx", "avatar_url": "https://avatars1.githubusercontent.com/u/19429921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmdedj", "html_url": "https://github.com/cmdedj", "followers_url": "https://api.github.com/users/cmdedj/followers", "following_url": "https://api.github.com/users/cmdedj/following{/other_user}", "gists_url": "https://api.github.com/users/cmdedj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmdedj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmdedj/subscriptions", "organizations_url": "https://api.github.com/users/cmdedj/orgs", "repos_url": "https://api.github.com/users/cmdedj/repos", "events_url": "https://api.github.com/users/cmdedj/events{/privacy}", "received_events_url": "https://api.github.com/users/cmdedj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-07-10T12:02:05Z", "updated_at": "2019-07-15T03:35:39Z", "closed_at": "2019-07-15T03:31:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "one document in db\r\n```\r\n{\r\n    \"_id\": ObjectId(\"5d25c7998742685c658ea9a7\"),\r\n    \"lang\": \"hi\",\r\n    \"title\": \"miao\",\r\n    \"en_title\": \"miao\",\r\n    \"created_at\": ISODate(\"2019-07-10T11:10:17.621Z\"),\r\n    \"creator\": \"cmdedj\",\r\n    \"last_edit_at\": ISODate(\"2019-07-10T11:10:17.619Z\"),\r\n    \"seq_id\": NumberInt(\"439\"),\r\n    \"search_titles\": [ ],\r\n    \"alias\": [ ],\r\n    \"enable_clean_outdate\": true\r\n}\r\n```\r\n\r\nhow to delete lang field ?\r\n```\r\n{\r\n    \"_id\": ObjectId(\"5d25c7998742685c658ea9a7\"),\r\n    \"title\": \"miao\",\r\n    \"en_title\": \"miao\",\r\n    \"created_at\": ISODate(\"2019-07-10T11:10:17.621Z\"),\r\n    \"creator\": \"cmdedj\",\r\n    \"last_edit_at\": ISODate(\"2019-07-10T11:10:17.619Z\"),\r\n    \"seq_id\": NumberInt(\"439\"),\r\n    \"search_titles\": [ ],\r\n    \"alias\": [ ],\r\n    \"enable_clean_outdate\": true\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2124", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2124/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2124/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2124/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2124", "id": 465199098, "node_id": "MDU6SXNzdWU0NjUxOTkwOTg=", "number": 2124, "title": "Collection Name PascalCase?", "user": {"login": "sonu247", "id": 33275626, "node_id": "MDQ6VXNlcjMzMjc1NjI2", "avatar_url": "https://avatars0.githubusercontent.com/u/33275626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonu247", "html_url": "https://github.com/sonu247", "followers_url": "https://api.github.com/users/sonu247/followers", "following_url": "https://api.github.com/users/sonu247/following{/other_user}", "gists_url": "https://api.github.com/users/sonu247/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonu247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonu247/subscriptions", "organizations_url": "https://api.github.com/users/sonu247/orgs", "repos_url": "https://api.github.com/users/sonu247/repos", "events_url": "https://api.github.com/users/sonu247/events{/privacy}", "received_events_url": "https://api.github.com/users/sonu247/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-08T11:16:37Z", "updated_at": "2019-07-09T11:50:09Z", "closed_at": "2019-07-09T11:49:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am already having a database in which collection names are `PascalCase`, I've to use that database only, but when I created the model and tried to fetch data with model name `UserAccount` but when I insert a document in the collection it created a collection as `user_account`. How can I handle such a situation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2123", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2123/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2123/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2123/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2123", "id": 465163632, "node_id": "MDU6SXNzdWU0NjUxNjM2MzI=", "number": 2123, "title": "Read The Docs documentation still shows 0.16.3 as the latest release", "user": {"login": "krnekhelesh", "id": 761845, "node_id": "MDQ6VXNlcjc2MTg0NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/761845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krnekhelesh", "html_url": "https://github.com/krnekhelesh", "followers_url": "https://api.github.com/users/krnekhelesh/followers", "following_url": "https://api.github.com/users/krnekhelesh/following{/other_user}", "gists_url": "https://api.github.com/users/krnekhelesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/krnekhelesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krnekhelesh/subscriptions", "organizations_url": "https://api.github.com/users/krnekhelesh/orgs", "repos_url": "https://api.github.com/users/krnekhelesh/repos", "events_url": "https://api.github.com/users/krnekhelesh/events{/privacy}", "received_events_url": "https://api.github.com/users/krnekhelesh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-08T09:55:01Z", "updated_at": "2019-07-11T04:32:45Z", "closed_at": "2019-07-11T04:32:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the [Read The Docs documentation changelog](http://docs.mongoengine.org/changelog.html) the latest release is **v0.16.3** which was released 8 months ago. The subsequent releases from 0.17- 0.18.2 are not visible in the documentation changelog. \r\n\r\nThis gave us the false impression that we were on the latest release as we pin the versions in our requirements.txt file to ensure testing as a team is easier and predictable. Can the documentation be updated? Also, on a related note, are the API documentations also outdated?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2122", "repository_url": "https://api.github.com/repos/MongoEngine/mongoengine", "labels_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2122/labels{/name}", "comments_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2122/comments", "events_url": "https://api.github.com/repos/MongoEngine/mongoengine/issues/2122/events", "html_url": "https://github.com/MongoEngine/mongoengine/issues/2122", "id": 465077717, "node_id": "MDU6SXNzdWU0NjUwNzc3MTc=", "number": 2122, "title": "how can i search in a multi-embedded model?", "user": {"login": "cmdedj", "id": 19429921, "node_id": "MDQ6VXNlcjE5NDI5OTIx", "avatar_url": "https://avatars1.githubusercontent.com/u/19429921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmdedj", "html_url": "https://github.com/cmdedj", "followers_url": "https://api.github.com/users/cmdedj/followers", "following_url": "https://api.github.com/users/cmdedj/following{/other_user}", "gists_url": "https://api.github.com/users/cmdedj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmdedj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmdedj/subscriptions", "organizations_url": "https://api.github.com/users/cmdedj/orgs", "repos_url": "https://api.github.com/users/cmdedj/repos", "events_url": "https://api.github.com/users/cmdedj/events{/privacy}", "received_events_url": "https://api.github.com/users/cmdedj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-08T06:32:21Z", "updated_at": "2019-07-15T03:28:45Z", "closed_at": "2019-07-14T21:00:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "this is my multi-embedded model, now i know the mongoid, category_group_name and user_group_name, how can i search the matched document only contain usergroupinfo.\r\n\r\n```\r\nclass UserGroupInfo(EmbeddedDocument):\r\n    user_group_name = StringField()\r\n    push_time = DateTimeField()\r\n    status = IntField(default=0)\r\n    s3_path = StringField()\r\n\r\n\r\nclass CategoryGroupInfo(EmbeddedDocument):\r\n    category_group_name = StringField()\r\n    user_group_infos = ListField(EmbeddedDocumentField(UserGroupInfo))\r\n\r\n\r\nclass GroupPushTableModel(Document):\r\n    lang = StringField()\r\n    create_at = DateTimeField(default=arrow.utcnow().naive)\r\n    category_group_infos = ListField(EmbeddedDocumentField(CategoryGroupInfo))\r\n```\r\n\r\ni want to get the result \r\n```\r\n{\r\n    \"user_group_name\":  \"xxx\",\r\n    \"push_time\": \"xxx\",\r\n    \"status\": 0,\r\n    \"s3_path\": \"xxx\"\r\n}\r\n```\r\n\r\nnot that result\r\n```\r\n    {\r\n        \"_id\": \"xxx\",\r\n        \"lang\": \"xxx\",\r\n        \"category_group_infos\" : [\r\n         {\r\n             \"category_group_name\": \"xxx\",\r\n             \"user_group_infos\": [\r\n                   \"user_group_name\": \"xxx\",\r\n                   \"push_time\": \"xxx\",\r\n                   \"status\": 0,\r\n                   \"s3_path\": \"xxx\"\r\n             ]\r\n         }\r\n        ]\r\n    }\r\n```\r\n\r\ncan you tell me how to search and get such result\r\nthank you", "performed_via_github_app": null, "score": 1.0}]}