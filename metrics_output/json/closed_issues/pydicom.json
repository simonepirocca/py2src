{"total_count": 619, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pydicom/pydicom/issues/1162", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1162/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1162/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1162/events", "html_url": "https://github.com/pydicom/pydicom/issues/1162", "id": 669100283, "node_id": "MDU6SXNzdWU2NjkxMDAyODM=", "number": 1162, "title": "dicom data displaying problem", "user": {"login": "longswordinhand", "id": 11819209, "node_id": "MDQ6VXNlcjExODE5MjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/11819209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longswordinhand", "html_url": "https://github.com/longswordinhand", "followers_url": "https://api.github.com/users/longswordinhand/followers", "following_url": "https://api.github.com/users/longswordinhand/following{/other_user}", "gists_url": "https://api.github.com/users/longswordinhand/gists{/gist_id}", "starred_url": "https://api.github.com/users/longswordinhand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longswordinhand/subscriptions", "organizations_url": "https://api.github.com/users/longswordinhand/orgs", "repos_url": "https://api.github.com/users/longswordinhand/repos", "events_url": "https://api.github.com/users/longswordinhand/events{/privacy}", "received_events_url": "https://api.github.com/users/longswordinhand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-30T19:10:36Z", "updated_at": "2020-07-30T22:41:00Z", "closed_at": "2020-07-30T22:37:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I load the dicom file with multiple slices and display it using the function in OpenCV. However, the color of image is wrongly displayed. I am wondering if I made wrong color order. Here is my code. Thanks a lot.\r\n\r\nframe_rgb = self.dicom_video_file.pixel_array[0]\r\nframe_bgr = cv2.cvtColor(frame_rgb, cv2.COLOR_RGB2BGR)\r\nret, jpeg = cv2.imencode('.jpg', frame_bgr)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1161", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1161/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1161/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1161/events", "html_url": "https://github.com/pydicom/pydicom/issues/1161", "id": 667433661, "node_id": "MDU6SXNzdWU2Njc0MzM2NjE=", "number": 1161, "title": "Editing valid tags within DICOMs that contain tags outside of the DataDictionary", "user": {"login": "kalebdfischer", "id": 48722029, "node_id": "MDQ6VXNlcjQ4NzIyMDI5", "avatar_url": "https://avatars2.githubusercontent.com/u/48722029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalebdfischer", "html_url": "https://github.com/kalebdfischer", "followers_url": "https://api.github.com/users/kalebdfischer/followers", "following_url": "https://api.github.com/users/kalebdfischer/following{/other_user}", "gists_url": "https://api.github.com/users/kalebdfischer/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalebdfischer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalebdfischer/subscriptions", "organizations_url": "https://api.github.com/users/kalebdfischer/orgs", "repos_url": "https://api.github.com/users/kalebdfischer/repos", "events_url": "https://api.github.com/users/kalebdfischer/events{/privacy}", "received_events_url": "https://api.github.com/users/kalebdfischer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-28T22:58:46Z", "updated_at": "2020-08-03T22:27:31Z", "closed_at": "2020-08-03T22:27:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have DICOM files with various unknown tags ( (0040, 0044), for example) that raise when I try to do anything with the datasets for these files. How does one edit known/valid tags and save the result with the unknown tag data intact? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1154", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1154/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1154/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1154/events", "html_url": "https://github.com/pydicom/pydicom/issues/1154", "id": 662927564, "node_id": "MDU6SXNzdWU2NjI5Mjc1NjQ=", "number": 1154, "title": "colored overlay contours", "user": {"login": "kurmukovai", "id": 14237010, "node_id": "MDQ6VXNlcjE0MjM3MDEw", "avatar_url": "https://avatars1.githubusercontent.com/u/14237010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurmukovai", "html_url": "https://github.com/kurmukovai", "followers_url": "https://api.github.com/users/kurmukovai/followers", "following_url": "https://api.github.com/users/kurmukovai/following{/other_user}", "gists_url": "https://api.github.com/users/kurmukovai/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurmukovai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurmukovai/subscriptions", "organizations_url": "https://api.github.com/users/kurmukovai/orgs", "repos_url": "https://api.github.com/users/kurmukovai/repos", "events_url": "https://api.github.com/users/kurmukovai/events{/privacy}", "received_events_url": "https://api.github.com/users/kurmukovai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-21T11:50:23Z", "updated_at": "2020-07-21T12:00:11Z", "closed_at": "2020-07-21T12:00:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to produce a **colored** overlay with contouring ROIs and be able to switch this overlay on/off. As far as I understand DICOM overlays do not support color, is there any other way to embed colored contours into a DICOM without direct editing of the `pixel_array`?\r\n\r\nExample picture I want to get\r\n\r\n![Screenshot from 2020-07-21 14-44-22](https://user-images.githubusercontent.com/14237010/88051473-5665cd80-cb61-11ea-9673-3f9d18dc15a8.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1153", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1153/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1153/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1153/events", "html_url": "https://github.com/pydicom/pydicom/issues/1153", "id": 662451169, "node_id": "MDU6SXNzdWU2NjI0NTExNjk=", "number": 1153, "title": "GDCM < v2.8.8 fails to get pixel data when using a file-like", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-21T01:27:15Z", "updated_at": "2020-07-22T12:15:57Z", "closed_at": "2020-07-22T12:15:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```python\r\n>>> import gdcm\r\n>>> gdcm.Version_GetVersion()\r\n'2.8.4'\r\n>>> from pydicom import __version__\r\n>>> __version__\r\n'2.1.0.dev0'\r\n>>> from pydicom import dcmread\r\n>>> from pydicom.data import get_testdata_file\r\n>>> from io import BytesIO\r\n>>> with open(get_testdata_file(\"JPEG2000.dcm\", 'rb') as f:\r\n...     bs = BytesIO(f.read())\r\n... \r\n>>> ds = dcmread(bs)\r\n>>> arr = ds.pixel_array\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".../pydicom/dataset.py\", line 1613, in pixel_array\r\n    self.convert_pixel_data()\r\n  File \".../pydicom/dataset.py\", line 1322, in convert_pixel_data\r\n    self._convert_pixel_data_without_handler()\r\n  File \".../pydicom/dataset.py\", line 1432, in _convert_pixel_data_without_handler\r\n    raise last_exception\r\n  File \".../pydicom/dataset.py\", line 1412, in _convert_pixel_data_without_handler\r\n    self._do_pixel_data_conversion(handler)\r\n  File \".../pydicom/dataset.py\", line 1439, in _do_pixel_data_conversion\r\n    arr = handler.get_pixeldata(self)\r\n  File \".../pydicom/pixel_data_handlers/gdcm_handler.py\", line 209, in get_pixeldata\r\n    gdcm_image_reader = create_image_reader(dicom_dataset.filename)\r\n  File \".../pydicom/pixel_data_handlers/gdcm_handler.py\", line 177, in create_image_reader\r\n    image_reader.SetFileName(filename)\r\n  File \".../python3.6/site-packages/gdcmswig.py\", line 7959, in SetFileName\r\n    return _gdcmswig.Reader_SetFileName(self, filename_native)\r\nTypeError: in method 'Reader_SetFileName', argument 2 of type 'char const *'\r\n```\r\nIssue occurs because the `dicom_dataset.filename` is a BytesIO instance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1149", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1149/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1149/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1149/events", "html_url": "https://github.com/pydicom/pydicom/issues/1149", "id": 659397093, "node_id": "MDU6SXNzdWU2NTkzOTcwOTM=", "number": 1149, "title": "J2K Pixel Data is not decoded correctly when Pixel Representation doesn't match J2K sign", "user": {"login": "amirbar", "id": 6403606, "node_id": "MDQ6VXNlcjY0MDM2MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6403606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amirbar", "html_url": "https://github.com/amirbar", "followers_url": "https://api.github.com/users/amirbar/followers", "following_url": "https://api.github.com/users/amirbar/following{/other_user}", "gists_url": "https://api.github.com/users/amirbar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amirbar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amirbar/subscriptions", "organizations_url": "https://api.github.com/users/amirbar/orgs", "repos_url": "https://api.github.com/users/amirbar/repos", "events_url": "https://api.github.com/users/amirbar/events{/privacy}", "received_events_url": "https://api.github.com/users/amirbar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-17T16:23:43Z", "updated_at": "2020-08-07T05:34:36Z", "closed_at": "2020-08-07T05:34:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nDCM pixel_data is not decoded correctly. The resulting pixels are clearly in the wrong range (see image)\r\n![image](https://user-images.githubusercontent.com/6403606/87807693-6e5dea00-c80d-11ea-872f-cd51d776c2ab.png)\r\n\r\nLooking at few interesting dicom tags:\r\n1. `RescaleIntercept = 0`\r\n2. `RescaleSlope = 1`\r\n3. `PixelRepresentation = 1`\r\n4. TransferSytntax is JPEG2000Lossless.\r\n5. `BitsStored = 13`\r\n6. `HighBit = 12`\r\n7. `BitsAllocated = 16`\r\n\r\nIt seems that like based on PixelRepresentation, the data should already be in int16 and the Rescale values imply there shouldn't be any change applied to the input data. However, the resulting values are clearly wrong.\r\n\r\n**Expected behavior**\r\nWhen loaded using Horos viewer, this is the result (showing default window):\r\n![image](https://user-images.githubusercontent.com/6403606/87808638-eb3d9380-c80e-11ea-86e3-d506f39ea2c7.png)\r\n\r\n**Steps To Reproduce**\r\n[mydcm.dcm.zip](https://github.com/pydicom/pydicom/files/4938866/mydcm.dcm.zip)\r\n\r\nUnzip the attached dicom and run the following code:\r\n```python\r\nimport pydicom\r\nfrom matplotlib import pyplot as plt\r\n\r\ndcm = pydicom.dcmread(\"mydcm.dcm\")\r\narr = pydicom.pixel_data_handlers.util.apply_voi_lut(dcm.pixel_array, dcm)\r\nplt.imshow(arr, cmap='gray')\r\n```\r\nor alternatively,\r\n\r\n use `apply_modality_lut` to view the expected HU scale values.\r\n\r\n\r\n**Environment**\r\nmodule       | version\r\n------       | -------\r\nplatform     | Linux-5.3.0-28-generic-x86_64-with-Ubuntu-16.04-xenial\r\nPython       | 3.6.10 (default, Dec 19 2019, 23:04:32)  [GCC 5.4.0 20160609]\r\npydicom      | 2.1.0.dev0\r\ngdcm         | 3.0.4\r\njpeg_ls      | _module not found_\r\nnumpy        | 1.16.3\r\nPIL          | 4.3.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1148", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1148/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1148/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1148/events", "html_url": "https://github.com/pydicom/pydicom/issues/1148", "id": 658183159, "node_id": "MDU6SXNzdWU2NTgxODMxNTk=", "number": 1148, "title": "importing pydicom after installing libgdcm-tools rise AttributeError", "user": {"login": "fnemmi-tonic", "id": 45993457, "node_id": "MDQ6VXNlcjQ1OTkzNDU3", "avatar_url": "https://avatars3.githubusercontent.com/u/45993457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnemmi-tonic", "html_url": "https://github.com/fnemmi-tonic", "followers_url": "https://api.github.com/users/fnemmi-tonic/followers", "following_url": "https://api.github.com/users/fnemmi-tonic/following{/other_user}", "gists_url": "https://api.github.com/users/fnemmi-tonic/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnemmi-tonic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnemmi-tonic/subscriptions", "organizations_url": "https://api.github.com/users/fnemmi-tonic/orgs", "repos_url": "https://api.github.com/users/fnemmi-tonic/repos", "events_url": "https://api.github.com/users/fnemmi-tonic/events{/privacy}", "received_events_url": "https://api.github.com/users/fnemmi-tonic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-16T13:09:21Z", "updated_at": "2020-07-20T08:44:43Z", "closed_at": "2020-07-20T07:33:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "After having installed libgdcm-tools (2.6.6-3) on my system (via `apt install libgdcm-tools`) I am not longer able to import pydicom in Python. When running `import pydicom as pdc` I got the following error\r\n\r\n`AttributeError: module 'gdcm' has no attribute 'DataElement'`.\r\n\r\nRemoving libgdcm-tools does not solve the issue.\r\n\r\nI am working with Python 3.7 and pydicom 2.0.0 in Ubuntu 18.04.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1146", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1146/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1146/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1146/events", "html_url": "https://github.com/pydicom/pydicom/issues/1146", "id": 657303235, "node_id": "MDU6SXNzdWU2NTczMDMyMzU=", "number": 1146, "title": "Dataset.copy returns an empty dict", "user": {"login": "rdebroiz", "id": 3714876, "node_id": "MDQ6VXNlcjM3MTQ4NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3714876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdebroiz", "html_url": "https://github.com/rdebroiz", "followers_url": "https://api.github.com/users/rdebroiz/followers", "following_url": "https://api.github.com/users/rdebroiz/following{/other_user}", "gists_url": "https://api.github.com/users/rdebroiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdebroiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdebroiz/subscriptions", "organizations_url": "https://api.github.com/users/rdebroiz/orgs", "repos_url": "https://api.github.com/users/rdebroiz/repos", "events_url": "https://api.github.com/users/rdebroiz/events{/privacy}", "received_events_url": "https://api.github.com/users/rdebroiz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 28, "created_at": "2020-07-15T12:14:44Z", "updated_at": "2020-07-19T19:11:01Z", "closed_at": "2020-07-19T19:11:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nCall to Dataset.copy on an instance of a Dataset object returns an empty python dict.\r\n\r\n**Expected behavior**\r\nA shallow copy of the callee\r\n\r\n**Steps To Reproduce**\r\n```python\r\n>>> from pydicom import Dataset\r\n>>> ds = Dataset()\r\n>>> ds.PatientName = \"Jhon^Doe\"\r\n>>> ds\r\n(0010, 0010) Patient's Name                      PN: 'Jhon^Doe'\r\n>>> ds_copy = ds.copy()\r\n>>> ds_copy\r\n{}\r\n>>> \r\n```\r\n\r\n\r\n**Your environment**\r\n```python\r\n>>> import platform, sys, pydicom\r\n>>> print(platform.platform(),\r\n...       \"\\nPython\", sys.version,\r\n...       \"\\npydicom\", pydicom.__version__)\r\nLinux-5.4.0-40-generic-x86_64-with-debian-bullseye-sid \r\nPython 3.7.6 (default, May 20 2020, 16:52:50) \r\n[GCC 9.3.0] \r\npydicom 1.4.2\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1144", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1144/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1144/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1144/events", "html_url": "https://github.com/pydicom/pydicom/issues/1144", "id": 655393816, "node_id": "MDU6SXNzdWU2NTUzOTM4MTY=", "number": 1144, "title": "Creating A Mask For A Dicom File", "user": {"login": "Itzikwa", "id": 62543034, "node_id": "MDQ6VXNlcjYyNTQzMDM0", "avatar_url": "https://avatars0.githubusercontent.com/u/62543034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Itzikwa", "html_url": "https://github.com/Itzikwa", "followers_url": "https://api.github.com/users/Itzikwa/followers", "following_url": "https://api.github.com/users/Itzikwa/following{/other_user}", "gists_url": "https://api.github.com/users/Itzikwa/gists{/gist_id}", "starred_url": "https://api.github.com/users/Itzikwa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Itzikwa/subscriptions", "organizations_url": "https://api.github.com/users/Itzikwa/orgs", "repos_url": "https://api.github.com/users/Itzikwa/repos", "events_url": "https://api.github.com/users/Itzikwa/events{/privacy}", "received_events_url": "https://api.github.com/users/Itzikwa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-07-12T12:45:27Z", "updated_at": "2020-07-19T22:39:39Z", "closed_at": "2020-07-19T22:39:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have numpy array (dtype = int16) which contains 0 and 1 represting a mask for a specific dicom file. I want to create a new dicom which has the same metadata as the original file, but obviously has different Pixel data.\r\nI tried to run this simple code:\r\n`ds.PixelData = new_data.tobytes()`\r\n\r\nbut when I tried to save the file, I got this error:\r\n```python\r\nValueError: With tag (7fe0, 0010) got exception: (7FE0,0010) Pixel Data has an undefined length indicating that it's compressed, but the data isn't encapsulated as required. See pydicom.encaps.encapsulate() for more information\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\group2\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pydicom\\tag.py\", line 27, in tag_in_exception\r\n    yield\r\n  File \"c:\\users\\group2\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pydicom\\filewriter.py\", line 552, in write_dataset\r\n    write_data_element(fp, dataset.get_item(tag), dataset_encoding)\r\n  File \"c:\\users\\group2\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pydicom\\filewriter.py\", line 493, in write_data_element\r\n    raise ValueError(\r\nValueError: (7FE0,0010) Pixel Data has an undefined length indicating that it's compressed, but the data isn't encapsulated as required. See pydicom.encaps.encapsulate() for more information\r\n```\r\n\r\nI tried tu use encapsulate function and it wasn't work either.  hope than someone will be able to help here...\r\n\r\nCheers, Itzik", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1142", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1142/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1142/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1142/events", "html_url": "https://github.com/pydicom/pydicom/issues/1142", "id": 654433756, "node_id": "MDU6SXNzdWU2NTQ0MzM3NTY=", "number": 1142, "title": "GDCM handler to decode pixel data", "user": {"login": "NargesSayah", "id": 11834132, "node_id": "MDQ6VXNlcjExODM0MTMy", "avatar_url": "https://avatars2.githubusercontent.com/u/11834132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NargesSayah", "html_url": "https://github.com/NargesSayah", "followers_url": "https://api.github.com/users/NargesSayah/followers", "following_url": "https://api.github.com/users/NargesSayah/following{/other_user}", "gists_url": "https://api.github.com/users/NargesSayah/gists{/gist_id}", "starred_url": "https://api.github.com/users/NargesSayah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NargesSayah/subscriptions", "organizations_url": "https://api.github.com/users/NargesSayah/orgs", "repos_url": "https://api.github.com/users/NargesSayah/repos", "events_url": "https://api.github.com/users/NargesSayah/events{/privacy}", "received_events_url": "https://api.github.com/users/NargesSayah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501234, "node_id": "MDU6TGFiZWw2MzUwMTIzNA==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-10T00:50:10Z", "updated_at": "2020-07-14T23:05:19Z", "closed_at": "2020-07-14T23:05:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to read and plot some DICOM files using Pydicom and GDCM handler, but I get an error although I have GDCM installed on my system (mac os x) through conda:\r\n`$ conda install gdcm -c conda-forge`\r\nAnd this is what I get:\r\n> RuntimeError: The following handlers are available to decode the pixel data however they are missing required dependencies: GDCM (req. GDCM)\r\n\r\nThis error was raised when calling pixel_array() to decode the pixel data.\r\nSo, I specified the handler name by overwriting the dataset.py (passed handler_name='gdcm' as an input to convert_pixel_data) but still, I get:\r\n> RuntimeError: The pixel data handler 'gdcm' is not available on your system. Please refer to the pydicom documentation for information on installing needed packages.\r\n\r\nI checked Pydicom documentation but found nothing about how to fix this on mac.\r\n(Python 3.6.5 & pydicom 2.0.0)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1140", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1140/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1140/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1140/events", "html_url": "https://github.com/pydicom/pydicom/issues/1140", "id": 651435973, "node_id": "MDU6SXNzdWU2NTE0MzU5NzM=", "number": 1140, "title": "Error reading encapsulated pixel data that contains embedded sequence delimiter", "user": {"login": "blairconrad", "id": 3275797, "node_id": "MDQ6VXNlcjMyNzU3OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3275797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blairconrad", "html_url": "https://github.com/blairconrad", "followers_url": "https://api.github.com/users/blairconrad/followers", "following_url": "https://api.github.com/users/blairconrad/following{/other_user}", "gists_url": "https://api.github.com/users/blairconrad/gists{/gist_id}", "starred_url": "https://api.github.com/users/blairconrad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blairconrad/subscriptions", "organizations_url": "https://api.github.com/users/blairconrad/orgs", "repos_url": "https://api.github.com/users/blairconrad/repos", "events_url": "https://api.github.com/users/blairconrad/events{/privacy}", "received_events_url": "https://api.github.com/users/blairconrad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-06T10:40:42Z", "updated_at": "2020-07-25T04:10:04Z", "closed_at": "2020-07-25T04:10:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen reading a DICOM file that includes encapsulated pixel data as described in [A.4 Transfer Syntaxes For Encapsulation of Encoded Pixel Data](http://dicom.nema.org/medical/dicom/current/output/chtml/part05/sect_A.4.html), that is \r\n1. (7FE0,0010) has VR OB with length 0xFFFFFFFF and\r\n2. there's at least one data stream fragment beginning with a tag (FFFE,E000) _with an explicit length_\r\n\r\nif the data fragment contains 4 consecutive bytes FE FF DD E0, which would be how the terminating Sequence Delimiter Item tag would appear, the `fileutil.read_undefined_length_value` method considers the fragment to end at the delimiter, issuing a debug message (if debug messages are enabled):\r\n\r\n> Expected 4 zero bytes after undefined length delimiter at pos _WXYZ_\r\n\r\nAfter that, the pixel data element's value's length is short, cut off at the point the Sequence Delimiter Item appears, and attempts to access the dataset via various methods, such as `print`ing it, or using `walk` result in the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"D:\\Sandbox\\pydicom\\pydicom\\dataelem.py\", line 735, in DataElement_from_raw\r\n    value = convert_value(VR, raw, encoding)\r\n  File \"D:\\Sandbox\\pydicom\\pydicom\\values.py\", line 623, in convert_value\r\n    raise NotImplementedError(message)\r\nNotImplementedError: Unknown Value Representation '0x01 0x00'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"D:\\Sandbox\\pydicom\\repro.py\", line 6, in <module>\r\n    print(str(ds))\r\n  File \"D:\\Sandbox\\pydicom\\pydicom\\dataset.py\", line 1951, in __str__\r\n    return self._pretty_str()\r\n  File \"D:\\Sandbox\\pydicom\\pydicom\\dataset.py\", line 1705, in _pretty_str\r\n    for data_element in self:\r\n  File \"D:\\Sandbox\\pydicom\\pydicom\\dataset.py\", line 1136, in __iter__\r\n    yield self[tag]\r\n  File \"D:\\Sandbox\\pydicom\\pydicom\\dataset.py\", line 861, in __getitem__\r\n    self[tag] = DataElement_from_raw(data_elem, character_set)\r\n  File \"D:\\Sandbox\\pydicom\\pydicom\\dataelem.py\", line 737, in DataElement_from_raw\r\n    raise NotImplementedError(\"{0:s} in tag {1!r}\".format(str(e), raw.tag))\r\nNotImplementedError: Unknown Value Representation '0x01 0x00' in tag (0000, 0000)\r\n```\r\n\r\n**Expected behavior**\r\nThe pixel data fragment would be read in its entirety.\r\n\r\n**Steps To Reproduce**\r\nDiscovered when opening a patient's Video Endoscopic Image (1.2.840.10008.5.1.4.1.1.77.1.1.1), which I can't share because of PHI concerns, and also it's quite large. Simulating by editing `JPEG2000.dcm` from the test files. See [JPEG2000-embedded-sequence-delimiter.zip](https://github.com/pydicom/pydicom/files/4876404/JPEG2000-embedded-sequence-delimiter.zip). After extracting, run \r\n\r\n```python\r\nimport pydicom\r\n\r\nds = pydicom.dcmread(\"JPEG2000-embedded-sequence-delimiter.dcm\")\r\nprint(str(ds))\r\n# or examine the length of the value of the pixel data - it's 22 instead of 266.\r\n```\r\n\r\nI've also added #1141 with a new failing test, [test_filereader.test_read_encoded_pixel_data_with_embedded_sequence_delimiter](https://github.com/pydicom/pydicom/pull/1141/files#diff-f60cc3ecdf985e487a46cc14cecb2d01R493-R500).\r\n\r\n**Your environment**\r\nmodule       | version\r\n------       | -------\r\nplatform     | Windows-10-10.0.18362-SP0\r\nPython       | 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 22:45:29) [MSC v.1916 32 bit (Intel)]\r\npydicom      | 2.0.0\r\ngdcm         | _module not found_\r\njpeg_ls      | _module not found_\r\nnumpy        | 1.18.5\r\nPIL          | 7.0.0\r\n\r\n\r\nAlso occurs with current pydicom code:\r\n\r\nmodule       | version\r\n------       | -------\r\nplatform     | Windows-10-10.0.18362-SP0\r\nPython       | 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:20:19) [MSC v.1925 32 bit (Intel)]\r\npydicom      | 2.1.0.dev0 (b9fb05c177b685bf683f7f57b2d57374eb7d882d)\r\ngdcm         | _module not found_\r\njpeg_ls      | _module not found_\r\nnumpy        | _module not found_\r\nPIL          | _module not found_\r\n\r\n(And I really enjoyed using `py -m pydicom.env_info` to report that!)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1138", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1138/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1138/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1138/events", "html_url": "https://github.com/pydicom/pydicom/issues/1138", "id": 643735780, "node_id": "MDU6SXNzdWU2NDM3MzU3ODA=", "number": 1138, "title": "Problem appending to Contour Sequence without assignment issues", "user": {"login": "ctorti", "id": 26715524, "node_id": "MDQ6VXNlcjI2NzE1NTI0", "avatar_url": "https://avatars2.githubusercontent.com/u/26715524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctorti", "html_url": "https://github.com/ctorti", "followers_url": "https://api.github.com/users/ctorti/followers", "following_url": "https://api.github.com/users/ctorti/following{/other_user}", "gists_url": "https://api.github.com/users/ctorti/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctorti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctorti/subscriptions", "organizations_url": "https://api.github.com/users/ctorti/orgs", "repos_url": "https://api.github.com/users/ctorti/repos", "events_url": "https://api.github.com/users/ctorti/events{/privacy}", "received_events_url": "https://api.github.com/users/ctorti/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-23T10:46:52Z", "updated_at": "2020-06-26T09:21:02Z", "closed_at": "2020-06-23T11:59:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI understand that the Sequence class is a sub-class of Python's lists (as described [here](https://github.com/pydicom/pydicom/issues/249)).  \r\n\r\nI've made modifications to the ContourData in an RTStruct file, requiring me to either add additional or remove items from the ContourSequence and ContourImageSequence.  To achieve the latter I simply use .pop() without issues.\r\n\r\nThe problem is when it comes to adding an entry.  I start by copying the original ROI object to use it as a template:\r\n\r\n`import pydicom`\r\n`import copy`\r\n\r\n`NewRoi = copy.deepcopy(OrigRoi)`\r\n\r\nThen simply append the last item to the list of sequences N number of times:\r\n\r\n`for i in range(N):`\r\n`            NewRoi.ReferencedFrameOfReferenceSequence[0]\\`\r\n`            .RTReferencedStudySequence[0].RTReferencedSeriesSequence[0]\\`\r\n`            .ContourImageSequence\\`\r\n`            .append(NewRoi.ReferencedFrameOfReferenceSequence[0]\\`\r\n`            .RTReferencedStudySequence[0].RTReferencedSeriesSequence[0]\\`\r\n`            .ContourImageSequence[-1])`\r\n\r\n`            NewRoi.ROIContourSequence[0].ContourSequence\\`\r\n`            .append(NewRoi.ROIContourSequence[0].ContourSequence[-1])`\r\n\r\n(Apologies for the loss of indentation - I'm not sure how to maintain indentation using the \"Insert code\" option.)\r\n\r\nAlthough the above adds to the sequence lists when I later modify the values of the various items within the sequences (in a for loop), after modifying the last item (the one that was added for the case `N = 1`), the previous items are re-assigned in the same way.\r\n\r\nSo it seems that the behaviour is not quite the same as with lists;\r\n\r\n`list = [1, 2, 3]`\r\n\r\n`list.append(list[-1])`\r\n\r\n`for i in range(len(list)):`\r\n`    list[i] = (i+1)*10`\r\n\r\nI get:\r\n\r\n> [10, 20, 30, 40]\r\n\r\nAs expected.  Yet:\r\n\r\n`temp = copy.deepcopy(OrigRoi.ROIContourSequence[0].ContourSequence)`\r\n\r\n`print('\\n\\nLast item before append:\\n\\n', temp[-1])`\r\n\r\n> (3006, 0016)  Contour Image Sequence   1 item(s)  \r\n   (0008, 1150) Referenced SOP Class UID            UI: MR Image Storage\r\n   (0008, 1155) Referenced SOP Instance UID         UI: 1.3.6.1.4.1.14519.5.2.1.7009.2402.370321359787998577166142075824\r\n   (0008, 1160) Referenced Frame Number             IS: \"1\"\r\n   \r\n\r\n> (3006, 0042) Contour Geometric Type              CS: 'CLOSED_PLANAR'\r\n> (3006, 0046) Number of Contour Points            IS: \"99\"\r\n> (3006, 0048) Contour Number                      IS: \"5\"\r\n> (3006, 0050) Contour Data                        DS: Array of 297 elements\r\n\r\n`temp.append(temp[-1])`\r\n\r\n`print('\\n\\nLast two items after append:\\n\\n', temp[-2:])`\r\n\r\n> [(3006, 0016)  Contour Image Sequence   1 item(s) \r\n   (0008, 1150) Referenced SOP Class UID            UI: MR Image Storage\r\n   (0008, 1155) Referenced SOP Instance UID         UI: 1.3.6.1.4.1.14519.5.2.1.7009.2402.370321359787998577166142075824\r\n   (0008, 1160) Referenced Frame Number             IS: \"1\"\r\n  \r\n\r\n> (3006, 0042) Contour Geometric Type              CS: 'CLOSED_PLANAR'\r\n> (3006, 0046) Number of Contour Points            IS: \"99\"\r\n> (3006, 0048) Contour Number                      IS: \"5\"\r\n> (3006, 0050) Contour Data                        DS: Array of 297 elements, (3006, 0016)  Contour Image Sequence   1 item(s) \r\n\r\n>  (0008, 1150) Referenced SOP Class UID            UI: MR Image Storage\r\n   (0008, 1155) Referenced SOP Instance UID         UI: 1.3.6.1.4.1.14519.5.2.1.7009.2402.370321359787998577166142075824\r\n   (0008, 1160) Referenced Frame Number             IS: \"1\"\r\n  \r\n\r\n> (3006, 0042) Contour Geometric Type              CS: 'CLOSED_PLANAR'\r\n> (3006, 0046) Number of Contour Points            IS: \"99\"\r\n> (3006, 0048) Contour Number                      IS: \"5\"\r\n> (3006, 0050) Contour Data                        DS: Array of 297 elements]\r\n\r\n`temp[5].NumberOfContourPoints = \"1\"`\r\n`temp[5].ContourNumber = \"6\"`\r\n`temp[5].ContourData = [\"0\", \"0\", \"0\"]`\r\n\r\n`print('\\n\\nLast two items after modification:\\n\\n', temp[-2:])`\r\n\r\n>  [(3006, 0016)  Contour Image Sequence   1 item(s)\r\n   (0008, 1150) Referenced SOP Class UID            UI: MR Image Storage\r\n   (0008, 1155) Referenced SOP Instance UID         UI: 1.3.6.1.4.1.14519.5.2.1.7009.2402.370321359787998577166142075824\r\n   (0008, 1160) Referenced Frame Number             IS: \"1\"\r\n \r\n\r\n> (3006, 0042) Contour Geometric Type              CS: 'CLOSED_PLANAR'\r\n\r\n> (3006, 0046) Number of Contour Points            IS: \"1\"\r\n\r\n> (3006, 0048) Contour Number                      IS: \"6\"\r\n\r\n> (3006, 0050) Contour Data                        DS: ['0', '0', '0'], (3006, 0016)  Contour Image Sequence   1 item(s)\r\n    (0008, 1150) Referenced SOP Class UID            UI: MR Image Storage\r\n    (0008, 1155) Referenced SOP Instance UID         UI: 1.3.6.1.4.1.14519.5.2.1.7009.2402.370321359787998577166142075824\r\n    (0008, 1160) Referenced Frame Number             IS: \"1\"\r\n\r\n> (3006, 0042) Contour Geometric Type              CS: 'CLOSED_PLANAR'\r\n> (3006, 0046) Number of Contour Points            IS: \"1\"\r\n> (3006, 0048) Contour Number                      IS: \"6\"\r\n> (3006, 0050) Contour Data                        DS: ['0', '0', '0']]\r\n\r\nWill I need to take a different approach?\r\n\r\nThanks very much.\r\n\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1127", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1127/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1127/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1127/events", "html_url": "https://github.com/pydicom/pydicom/issues/1127", "id": 638072797, "node_id": "MDU6SXNzdWU2MzgwNzI3OTc=", "number": 1127, "title": "Add pylibjpeg to the pixel data handlers?", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-13T01:36:07Z", "updated_at": "2020-07-21T00:15:19Z", "closed_at": "2020-07-21T00:15:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "So I've gotten [pylibjpeg ](https://github.com/pydicom/pylibjpeg) and its plugins to the stage where it supports decoding all the (non-retired) JPEG transfer syntaxes. @darcymason what do you think about adding a proper handler for it to pydicom?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1125", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1125/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1125/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1125/events", "html_url": "https://github.com/pydicom/pydicom/issues/1125", "id": 637689347, "node_id": "MDU6SXNzdWU2Mzc2ODkzNDc=", "number": 1125, "title": "how to read MRI dicom files?", "user": {"login": "anxingle", "id": 8489818, "node_id": "MDQ6VXNlcjg0ODk4MTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/8489818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anxingle", "html_url": "https://github.com/anxingle", "followers_url": "https://api.github.com/users/anxingle/followers", "following_url": "https://api.github.com/users/anxingle/following{/other_user}", "gists_url": "https://api.github.com/users/anxingle/gists{/gist_id}", "starred_url": "https://api.github.com/users/anxingle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anxingle/subscriptions", "organizations_url": "https://api.github.com/users/anxingle/orgs", "repos_url": "https://api.github.com/users/anxingle/repos", "events_url": "https://api.github.com/users/anxingle/events{/privacy}", "received_events_url": "https://api.github.com/users/anxingle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-12T11:36:36Z", "updated_at": "2020-06-19T06:53:46Z", "closed_at": "2020-06-19T06:53:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some MRI images, and I want to read data from dicom files.\r\n\r\nIt works for CT image, but fails to MRI image.\r\n\r\n```\r\n# U = m*SV + b\r\n# where U is in output units, m is the rescale slope, SV is the stored value, and b is the rescale intercept.\r\nds = pydicom.dcmread('./test.dcm')\r\nd = ds.pixel_array*ds.RescaleSlope + ds.RescaleIntercept\r\nd = np.clip(d, -160, 240)\r\nd = (d + 800)*255.0/400\r\nd = d.astype(np.uint8)\r\ncv2.imwrite(\"a2.bmp\", d2)\r\n```\r\n\r\nWhat is the  linear transformation  function corresponding to the CT?\r\n\r\n\r\n\r\n>Note that RecaleSlope / RescaleIntercept are mandatory only for some kinds of images (mostly CT, PET), and the example code is for CT images (you probably know this anyway).\r\n>If you are not sure that all your images are of this kind, or if some CT images may lack the tags, you have to make sure that the tag is actually there, for example:\r\n>```python\r\n>    # Convert to Hounsfield units (HU)\r\n>    intercept = scans[0].RescaleIntercept if 'RescaleIntercept' in scans[0] else -1024\r\n>    slope = scans[0].RescaleSlope if 'RescaleSlope' in scans[0] else 1\r\n>```\r\n>(note that these defaults are for CT images)\r\n\r\n_Originally posted by @mrbean-bremen in https://github.com/pydicom/pydicom/issues/818#issuecomment-472939203_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1119", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1119/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1119/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1119/events", "html_url": "https://github.com/pydicom/pydicom/issues/1119", "id": 629926940, "node_id": "MDU6SXNzdWU2Mjk5MjY5NDA=", "number": 1119, "title": "test_handler_util fails with numpy 1.19", "user": {"login": "alcir", "id": 3286123, "node_id": "MDQ6VXNlcjMyODYxMjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3286123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alcir", "html_url": "https://github.com/alcir", "followers_url": "https://api.github.com/users/alcir/followers", "following_url": "https://api.github.com/users/alcir/following{/other_user}", "gists_url": "https://api.github.com/users/alcir/gists{/gist_id}", "starred_url": "https://api.github.com/users/alcir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alcir/subscriptions", "organizations_url": "https://api.github.com/users/alcir/orgs", "repos_url": "https://api.github.com/users/alcir/repos", "events_url": "https://api.github.com/users/alcir/events{/privacy}", "received_events_url": "https://api.github.com/users/alcir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 644270811, "node_id": "MDU6TGFiZWw2NDQyNzA4MTE=", "url": "https://api.github.com/repos/pydicom/pydicom/labels/housekeeping", "name": "housekeeping", "color": "f9d0c4", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-03T11:43:06Z", "updated_at": "2020-06-23T01:06:49Z", "closed_at": "2020-06-23T01:06:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n=================================== FAILURES ===================================\r\n_____________ TestNumpy_PaletteColor.test_invalid_bit_depth_raises _____________\r\n\r\nself = <pydicom.tests.test_handler_util.TestNumpy_PaletteColor object at 0x7f017d5c1df0>\r\n\r\n    def test_invalid_bit_depth_raises(self):\r\n        \"\"\"Test that an invalid bit depth raises an exception.\"\"\"\r\n        ds = dcmread(PAL_08_256_0_16_1F)\r\n        ds.RedPaletteColorLookupTableDescriptor[2] = 15\r\n        msg = (\r\n            r'data type \"uint15\" not understood'\r\n        )\r\n        with pytest.raises(TypeError, match=msg):\r\n>           apply_color_lut(ds.pixel_array, ds)\r\n\r\npydicom/tests/test_handler_util.py:951: \r\n...\r\nself = <pydicom.tests.test_handler_util.TestNumpy_PaletteColor object at 0x7f017d5c1df0>\r\n\r\n    def test_invalid_bit_depth_raises(self):\r\n        \"\"\"Test that an invalid bit depth raises an exception.\"\"\"\r\n        ds = dcmread(PAL_08_256_0_16_1F)\r\n        ds.RedPaletteColorLookupTableDescriptor[2] = 15\r\n        msg = (\r\n            r'data type \"uint15\" not understood'\r\n        )\r\n        with pytest.raises(TypeError, match=msg):\r\n>           apply_color_lut(ds.pixel_array, ds)\r\nE           AssertionError: Pattern 'data type \"uint15\" not understood' does not match \"data type 'uint15' not understood\"\r\n\r\npydicom/tests/test_handler_util.py:951: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1118", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1118/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1118/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1118/events", "html_url": "https://github.com/pydicom/pydicom/issues/1118", "id": 629490471, "node_id": "MDU6SXNzdWU2Mjk0OTA0NzE=", "number": 1118, "title": "Trouble in converting from Dicom to jpg", "user": {"login": "Itzikwa", "id": 62543034, "node_id": "MDQ6VXNlcjYyNTQzMDM0", "avatar_url": "https://avatars0.githubusercontent.com/u/62543034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Itzikwa", "html_url": "https://github.com/Itzikwa", "followers_url": "https://api.github.com/users/Itzikwa/followers", "following_url": "https://api.github.com/users/Itzikwa/following{/other_user}", "gists_url": "https://api.github.com/users/Itzikwa/gists{/gist_id}", "starred_url": "https://api.github.com/users/Itzikwa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Itzikwa/subscriptions", "organizations_url": "https://api.github.com/users/Itzikwa/orgs", "repos_url": "https://api.github.com/users/Itzikwa/repos", "events_url": "https://api.github.com/users/Itzikwa/events{/privacy}", "received_events_url": "https://api.github.com/users/Itzikwa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-02T20:25:41Z", "updated_at": "2020-06-12T02:30:12Z", "closed_at": "2020-06-12T02:30:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI tried to convert some dicom files to jpg format using the code that shown here https://github.com/pydicom/pydicom/issues/352, but something got worng and the results are very strange...\r\n\r\n<img width=\"672\" alt=\"screen shot\" src=\"https://user-images.githubusercontent.com/62543034/83565682-7e548f80-a527-11ea-9bbb-71af5d425800.PNG\">\r\n\r\n<img width=\"376\" alt=\"converted\" src=\"https://user-images.githubusercontent.com/62543034/83566123-2b2f0c80-a528-11ea-88c2-f373437b7491.PNG\">\r\n\r\nif anyone has idea what can be done to fix that...\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1113", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1113/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1113/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1113/events", "html_url": "https://github.com/pydicom/pydicom/issues/1113", "id": 625690365, "node_id": "MDU6SXNzdWU2MjU2OTAzNjU=", "number": 1113, "title": "Test Suite / CI improvements", "user": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 152529316, "node_id": "MDU6TGFiZWwxNTI1MjkzMTY=", "url": "https://api.github.com/repos/pydicom/pydicom/labels/Documentation", "name": "Documentation", "color": "009800", "default": false, "description": null}, {"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 644270811, "node_id": "MDU6TGFiZWw2NDQyNzA4MTE=", "url": "https://api.github.com/repos/pydicom/pydicom/labels/housekeeping", "name": "housekeeping", "color": "f9d0c4", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pydicom/pydicom/milestones/8", "html_url": "https://github.com/pydicom/pydicom/milestone/8", "labels_url": "https://api.github.com/repos/pydicom/pydicom/milestones/8/labels", "id": 5436788, "node_id": "MDk6TWlsZXN0b25lNTQzNjc4OA==", "number": 8, "title": "v2.1", "description": null, "creator": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "open_issues": 3, "closed_issues": 3, "state": "open", "created_at": "2020-05-18T20:27:16Z", "updated_at": "2020-08-02T22:48:44Z", "due_on": null, "closed_at": null}, "comments": 12, "created_at": "2020-05-27T13:19:15Z", "updated_at": "2020-07-14T00:15:51Z", "closed_at": "2020-07-14T00:15:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Now that v2.0 is out, I'd like to take another look at the test suite -- for speed and for other reasons.\r\n\r\nSome thoughts:\r\n* would still like to improve the time it takes on a PR to get all CI passed (see previous work in #928 and PR #930)\r\n* explore github actions - I've used this in another repo and it has worked well.\r\n* move many test files to a separate store as discussed in #1111 \r\n* as per my comment in #1111, lots of tests could change to small Datasets rather than reading a whole file\r\n\r\nAlso, in terms of documentation\r\n* would like to pull the sphinx builds into a better flow also.\r\n* there are a number of warnings in sphinx we should address\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1112", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1112/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1112/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1112/events", "html_url": "https://github.com/pydicom/pydicom/issues/1112", "id": 625522003, "node_id": "MDU6SXNzdWU2MjU1MjIwMDM=", "number": 1112, "title": "Using your test data files in another open source project", "user": {"login": "robyoung", "id": 14287, "node_id": "MDQ6VXNlcjE0Mjg3", "avatar_url": "https://avatars3.githubusercontent.com/u/14287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robyoung", "html_url": "https://github.com/robyoung", "followers_url": "https://api.github.com/users/robyoung/followers", "following_url": "https://api.github.com/users/robyoung/following{/other_user}", "gists_url": "https://api.github.com/users/robyoung/gists{/gist_id}", "starred_url": "https://api.github.com/users/robyoung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robyoung/subscriptions", "organizations_url": "https://api.github.com/users/robyoung/orgs", "repos_url": "https://api.github.com/users/robyoung/repos", "events_url": "https://api.github.com/users/robyoung/events{/privacy}", "received_events_url": "https://api.github.com/users/robyoung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-27T09:12:50Z", "updated_at": "2020-05-30T21:34:31Z", "closed_at": "2020-05-30T21:34:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it ok to use the [test files](https://github.com/pydicom/pydicom/tree/master/pydicom/data/test_files) in this project for testing another open source DICOM project? If so, is it enough to reference this project and it's licence in the other project?\r\n\r\nThe first project I am hoping to use them in initially is [dicom-rs](https://github.com/Enet4/dicom-rs). I have no connection with that project other than wanting to get a broader test suite on it.\r\n\r\nFurther down the line I would like to put together something comparing various DICOM libraries and a suite of test files would be really useful for that as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1111", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1111/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1111/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1111/events", "html_url": "https://github.com/pydicom/pydicom/issues/1111", "id": 625513460, "node_id": "MDU6SXNzdWU2MjU1MTM0NjA=", "number": 1111, "title": "Package size", "user": {"login": "SimonBiggs", "id": 6559099, "node_id": "MDQ6VXNlcjY1NTkwOTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6559099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonBiggs", "html_url": "https://github.com/SimonBiggs", "followers_url": "https://api.github.com/users/SimonBiggs/followers", "following_url": "https://api.github.com/users/SimonBiggs/following{/other_user}", "gists_url": "https://api.github.com/users/SimonBiggs/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonBiggs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonBiggs/subscriptions", "organizations_url": "https://api.github.com/users/SimonBiggs/orgs", "repos_url": "https://api.github.com/users/SimonBiggs/repos", "events_url": "https://api.github.com/users/SimonBiggs/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonBiggs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pydicom/pydicom/milestones/8", "html_url": "https://github.com/pydicom/pydicom/milestone/8", "labels_url": "https://api.github.com/repos/pydicom/pydicom/milestones/8/labels", "id": 5436788, "node_id": "MDk6TWlsZXN0b25lNTQzNjc4OA==", "number": 8, "title": "v2.1", "description": null, "creator": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "open_issues": 3, "closed_issues": 3, "state": "open", "created_at": "2020-05-18T20:27:16Z", "updated_at": "2020-08-02T22:48:44Z", "due_on": null, "closed_at": null}, "comments": 11, "created_at": "2020-05-27T09:01:10Z", "updated_at": "2020-07-20T01:20:01Z", "closed_at": "2020-07-20T01:20:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "pydicom 1.4.2 is 35 MB, for comparison pydicom 0.9.9 was 400 kB, and all of scipy is 28 MB.\n\nI'm quite keen to use pydicom within pyodide, and in that environment package size is very important. Might it be possible to trim the release package back to its slim historical roots?\n\nIf it helps, within pymedphys, when I want to distribute large files with my package I have been hosting them on Zenodo for free and then downloading and caching them to the user's home directory on demand. Code for that is in and around https://github.com/pymedphys/pymedphys/blob/master/pymedphys/_data/download.py. Feel free to vendor that code into pydicom if you think that may be a helpful approach.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1109", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1109/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1109/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1109/events", "html_url": "https://github.com/pydicom/pydicom/issues/1109", "id": 622784060, "node_id": "MDU6SXNzdWU2MjI3ODQwNjA=", "number": 1109, "title": "pydicom change PixelData of DICOM File", "user": {"login": "Alex97schmid-zeiss", "id": 63061479, "node_id": "MDQ6VXNlcjYzMDYxNDc5", "avatar_url": "https://avatars3.githubusercontent.com/u/63061479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alex97schmid-zeiss", "html_url": "https://github.com/Alex97schmid-zeiss", "followers_url": "https://api.github.com/users/Alex97schmid-zeiss/followers", "following_url": "https://api.github.com/users/Alex97schmid-zeiss/following{/other_user}", "gists_url": "https://api.github.com/users/Alex97schmid-zeiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alex97schmid-zeiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alex97schmid-zeiss/subscriptions", "organizations_url": "https://api.github.com/users/Alex97schmid-zeiss/orgs", "repos_url": "https://api.github.com/users/Alex97schmid-zeiss/repos", "events_url": "https://api.github.com/users/Alex97schmid-zeiss/events{/privacy}", "received_events_url": "https://api.github.com/users/Alex97schmid-zeiss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-21T20:58:22Z", "updated_at": "2020-06-16T23:43:44Z", "closed_at": "2020-06-16T23:43:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, I am currently trying to change the PixelData of my DICOM file, because I want to take over all tags from this DICOM file.\r\nThe DICOM file looks like this:\r\n```\r\n(0008, 0005) Specific Character Set              CS: 'ISO_IR 192'\r\n(0008, 0008) Image Type                          CS: ['ORIGINAL', 'PRIMARY']\r\n(0008, 0012) Instance Creation Date              DA: '20200317'\r\n(0008, 0013) Instance Creation Time              TM: '110158.699'\r\n(0008, 0016) SOP Class UID                       UI: VL Microscopic Image Storage\r\n(0008, 0018) SOP Instance UID                    UI: 1.2.276.0.75.2.7.30.1.3.200317105525366.0.110625\r\n(0008, 0020) Study Date                          DA: '20200317'\r\n(0008, 0021) Series Date                         DA: '20200317'\r\n(0008, 0022) Acquisition Date                    DA: '20200317'\r\n(0008, 0023) Content Date                        DA: '20200317'\r\n(0008, 002a) Acquisition DateTime                DT: '20200317105522'\r\n(0008, 0030) Study Time                          TM: '105414'\r\n(0008, 0031) Series Time                         TM: '105414'\r\n(0008, 0032) Acquisition Time                    TM: '105522'\r\n(0008, 0033) Content Time                        TM: '105522'\r\n(0008, 0050) Accession Number                    SH: ''\r\n(0008, 0060) Modality                            CS: 'GM'\r\n(0008, 0070) Manufacturer                        LO: 'Carl Zeiss Meditec'\r\n(0008, 0090) Referring Physician's Name          PN: ''\r\n(0008, 1010) Station Name                        SH: 'CONVIVO'\r\n(0008, 103e) Series Description                  LO: 'Confocal Image'\r\n(0008, 1090) Manufacturer's Model Name           LO: 'CONVIVO'\r\n(0010, 0010) Patient's Name                      PN: 'ANONYMOUS'\r\n(0010, 0020) Patient ID                          LO: 'ANOMYMOUS'\r\n(0010, 0030) Patient's Birth Date                DA: '19500101'\r\n(0010, 0040) Patient's Sex                       CS: 'M'\r\n(0018, 1000) Device Serial Number                LO: '6918000000'\r\n(0018, 1020) Software Versions                   LO: ['', '', '']\r\n(0018, 9004) Content Qualification               CS: 'RESEARCH'\r\n(0020, 000d) Study Instance UID                  UI: 1.2.276.0.75.2.7.30.1.1.200317105409527.0.110622\r\n(0020, 000e) Series Instance UID                 UI: 1.2.276.0.75.2.7.30.1.2.200317105412359.0.110623\r\n(0020, 0010) Study ID                            SH: 'COVO-94a1271d21'\r\n(0020, 0011) Series Number                       IS: \"2\"\r\n(0020, 0013) Instance Number                     IS: \"1\"\r\n(0020, 0020) Patient Orientation                 CS: ''\r\n(0020, 4000) Image Comments                      LT: 'FocusDepth:0;Laser:0;AutoBrightness:On;Brightness:73;Gain:0;Filter:0;Scanresolution: 1920x1080;SpotCounter:0;SpotColor:#ffffff;'\r\n(0028, 0002) Samples per Pixel                   US: 3\r\n(0028, 0004) Photometric Interpretation          CS: 'YBR_FULL_422'\r\n(0028, 0006) Planar Configuration                US: 0\r\n(0028, 0010) Rows                                US: 1080\r\n(0028, 0011) Columns                             US: 1920\r\n(0028, 0100) Bits Allocated                      US: 8\r\n(0028, 0101) Bits Stored                         US: 8\r\n(0028, 0102) High Bit                            US: 7\r\n(0028, 0103) Pixel Representation                US: 0\r\n(0028, 0301) Burned In Annotation                CS: 'NO'\r\n(0028, 2110) Lossy Image Compression             CS: '01'\r\n(0040, 0555)  Acquisition Context Sequence   0 item(s) ---- \r\n(2201, 0010) Private Creator                     LO: '99CZM_NIM_INTERNAL_01'\r\n(2201, 1000) Private tag data                    LT: 'VlMicroscopicImage'\r\n(2201, 1001) Private tag data                    LT: '2.13'\r\n(7fe0, 0010) Pixel Data                          OB: Array of 625376 elements\r\n```\r\n\r\nTo change the pixel data I load a new image (1920, 1080, 3):\r\n\r\n```python\r\npixel_array = Image.open(\"path\") \r\ntest_file = dcmread(\"path\") \r\ntest_file.PixelData = pixel_array.tostring() \r\ntest_file.saveas(\"test.dcm\")`\r\n```\r\n\r\nUnfortunately I get an error:\r\n```\r\nValueError: (7FE0,0010) Pixel Data has an undefined length indicating that it's compressed, but the data isn't encapsulated as required. See pydicom.encaps.encapsulate () for more information\r\n```\r\nI cannot interpret this error, the image that I am loading is not compressed. In comparison is:\r\nOriginal: PixelData. - (OB) Array of 625376 elements\r\nNew image: PixelData - (OB) Array of 2073600 Elements\r\n\r\n\r\nThank you for your help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1105", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1105/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1105/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1105/events", "html_url": "https://github.com/pydicom/pydicom/issues/1105", "id": 620544252, "node_id": "MDU6SXNzdWU2MjA1NDQyNTI=", "number": 1105, "title": "SeriesDescription with `\\` in value get parsed as list", "user": {"login": "NPann", "id": 6107897, "node_id": "MDQ6VXNlcjYxMDc4OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6107897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NPann", "html_url": "https://github.com/NPann", "followers_url": "https://api.github.com/users/NPann/followers", "following_url": "https://api.github.com/users/NPann/following{/other_user}", "gists_url": "https://api.github.com/users/NPann/gists{/gist_id}", "starred_url": "https://api.github.com/users/NPann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NPann/subscriptions", "organizations_url": "https://api.github.com/users/NPann/orgs", "repos_url": "https://api.github.com/users/NPann/repos", "events_url": "https://api.github.com/users/NPann/events{/privacy}", "received_events_url": "https://api.github.com/users/NPann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-18T22:27:59Z", "updated_at": "2020-05-18T23:03:14Z", "closed_at": "2020-05-18T23:03:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nSeriesDescription with `\\` in value get converted to list\r\n\r\n**Expected behavior**\r\nSeriesDescription with `\\` in value remains string\r\n\r\n**Steps To Reproduce**\r\n```\r\nimport pydicom\r\nfrom pydicom.data import get_testdata_files\r\ndcm_path = get_testdata_files()[0]\r\ndcm = pydicom.read_file(dcm_path)\r\nsd = 'Lung 2.5 venous\\Axial.Ref CE  Axial'\r\ndcm.SeriesDescription = sd\r\nassert dcm.SeriesDescription == sd  # raises\r\n```\r\n\r\n**Your environment**\r\nDarwin-18.7.0-x86_64-i386-64bit \r\nPython 3.7.5 (default, Oct 25 2019, 10:52:18) \r\n[Clang 4.0.1 (tags/RELEASE_401/final)] \r\npydicom 1.4.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1103", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1103/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1103/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1103/events", "html_url": "https://github.com/pydicom/pydicom/issues/1103", "id": 619373033, "node_id": "MDU6SXNzdWU2MTkzNzMwMzM=", "number": 1103, "title": "Make PersonName3 iterable", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-16T04:09:34Z", "updated_at": "2020-07-23T00:48:31Z", "closed_at": "2020-07-23T00:48:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```python\r\nfrom pydicom import Dataset\r\n\r\nds = Dataset()\r\nds.PatientName = 'SomeName'\r\n\r\n'S' in ds.PatientName\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: argument of type 'PersonName3' is not iterable\r\n```\r\n\r\nI'm not really sure if this is intentional or if PN elements should support `str` methods. And yes I know I can `str(ds.PatientName)` but it's a bit silly, especially when I keep having to write exceptions to my element iterators just for PN elements.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1102", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1102/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1102/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1102/events", "html_url": "https://github.com/pydicom/pydicom/issues/1102", "id": 617724584, "node_id": "MDU6SXNzdWU2MTc3MjQ1ODQ=", "number": 1102, "title": "Enable to fetch File Meta Information", "user": {"login": "rameez707", "id": 55708510, "node_id": "MDQ6VXNlcjU1NzA4NTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/55708510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rameez707", "html_url": "https://github.com/rameez707", "followers_url": "https://api.github.com/users/rameez707/followers", "following_url": "https://api.github.com/users/rameez707/following{/other_user}", "gists_url": "https://api.github.com/users/rameez707/gists{/gist_id}", "starred_url": "https://api.github.com/users/rameez707/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rameez707/subscriptions", "organizations_url": "https://api.github.com/users/rameez707/orgs", "repos_url": "https://api.github.com/users/rameez707/repos", "events_url": "https://api.github.com/users/rameez707/events{/privacy}", "received_events_url": "https://api.github.com/users/rameez707/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T20:13:33Z", "updated_at": "2020-05-14T07:52:44Z", "closed_at": "2020-05-14T07:52:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nEnable to fetch File Meta Information \r\n\r\n**Expected behavior**\r\nWant to fetch File Meta Information and Pixel_Array from Monaco TPS  by Elekta using\r\nds = pydicom.read_file(filename, force=True)\r\n\r\n**Steps To Reproduce**\r\nDownload sample dcm file from\r\nhttps://drive.google.com/open?id=1dK3qbrJXDL88ySKgYg6hVUsF9-Z3A2CY\r\nfilename = [Downloaded file path]\r\nds = pydicom.read_file(filename, force=True)\r\naz = ds.file_meta.TransferSyntaxUID\r\n\r\n**Your environment**\r\nWindows-10-10.0.18362-SP0 \r\nPython 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)] \r\npydicom 1.4.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1101", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1101/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1101/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1101/events", "html_url": "https://github.com/pydicom/pydicom/issues/1101", "id": 617707772, "node_id": "MDU6SXNzdWU2MTc3MDc3NzI=", "number": 1101, "title": "Enable to fetch File Meta Information", "user": {"login": "rameez707", "id": 55708510, "node_id": "MDQ6VXNlcjU1NzA4NTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/55708510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rameez707", "html_url": "https://github.com/rameez707", "followers_url": "https://api.github.com/users/rameez707/followers", "following_url": "https://api.github.com/users/rameez707/following{/other_user}", "gists_url": "https://api.github.com/users/rameez707/gists{/gist_id}", "starred_url": "https://api.github.com/users/rameez707/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rameez707/subscriptions", "organizations_url": "https://api.github.com/users/rameez707/orgs", "repos_url": "https://api.github.com/users/rameez707/repos", "events_url": "https://api.github.com/users/rameez707/events{/privacy}", "received_events_url": "https://api.github.com/users/rameez707/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-13T19:44:41Z", "updated_at": "2020-05-13T20:15:09Z", "closed_at": "2020-05-13T20:15:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**Expected behavior**\r\nWhat you expected to happen (please include a reference to the DICOM standard\r\nif relevant).\r\n\r\n**Steps To Reproduce**\r\nHow to reproduce the issue. Please include a minimum working code sample, the\r\ntraceback (if any) and the anonymized DICOM dataset (if relevant).\r\n\r\n**Your environment**\r\nIf you're using **pydicom 2 or later**, please use the `pydicom.env_info`\r\nmodule to gather information about your environment and paste it in the issue:\r\n\r\n```bash\r\n$ python -m pydicom.env_info\r\n```\r\n\r\nFor **pydicom 1.x**, please run the following code snippet and paste the\r\noutput.\r\n\r\n```python\r\nimport platform, sys, pydicom\r\nprint(platform.platform(),\r\n      \"\\nPython\", sys.version,\r\n      \"\\npydicom\", pydicom.__version__)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1100", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1100/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1100/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1100/events", "html_url": "https://github.com/pydicom/pydicom/issues/1100", "id": 616871945, "node_id": "MDU6SXNzdWU2MTY4NzE5NDU=", "number": 1100, "title": "reading CT RS file get Unknown DICOM tag (0008, 0123) - can't look up VR", "user": {"login": "SylwekFr", "id": 47174755, "node_id": "MDQ6VXNlcjQ3MTc0NzU1", "avatar_url": "https://avatars0.githubusercontent.com/u/47174755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylwekFr", "html_url": "https://github.com/SylwekFr", "followers_url": "https://api.github.com/users/SylwekFr/followers", "following_url": "https://api.github.com/users/SylwekFr/following{/other_user}", "gists_url": "https://api.github.com/users/SylwekFr/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylwekFr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylwekFr/subscriptions", "organizations_url": "https://api.github.com/users/SylwekFr/orgs", "repos_url": "https://api.github.com/users/SylwekFr/repos", "events_url": "https://api.github.com/users/SylwekFr/events{/privacy}", "received_events_url": "https://api.github.com/users/SylwekFr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-12T18:35:44Z", "updated_at": "2020-05-13T07:24:03Z", "closed_at": "2020-05-13T07:23:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\nI use other issue for \"help needed\"\r\nI am trying to read a RS file (attached to the issue) from CT-Scan i use : \r\n`dicom.read_file(file)` \r\nwhere file is defined as my RS file.\r\nand i get the error :\r\n\r\n> KeyError(\"Unknown DICOM tag {0:s} - can't look up VR\".format(str(raw.tag)))\r\n> KeyError: \"Unknown DICOM tag (0008, 0123) - can't look up VR\"\r\n\r\nI have this error from dataelem.py and when I use debugger there in the method DataElement_from_raw i see that VR='UI' (to be honest I don't know what does it mean)\r\n\r\n[RS.1.2.246.352.221.48486377177484865766316913625815075459.dcm.zip](https://github.com/pydicom/pydicom/files/4617745/RS.1.2.246.352.221.48486377177484865766316913625815075459.dcm.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1097", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1097/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1097/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1097/events", "html_url": "https://github.com/pydicom/pydicom/issues/1097", "id": 613833214, "node_id": "MDU6SXNzdWU2MTM4MzMyMTQ=", "number": 1097, "title": "Unexpected behavior on re-adding a private tag to a dataset after remove_private_tags", "user": {"login": "eeilon79", "id": 30146312, "node_id": "MDQ6VXNlcjMwMTQ2MzEy", "avatar_url": "https://avatars1.githubusercontent.com/u/30146312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eeilon79", "html_url": "https://github.com/eeilon79", "followers_url": "https://api.github.com/users/eeilon79/followers", "following_url": "https://api.github.com/users/eeilon79/following{/other_user}", "gists_url": "https://api.github.com/users/eeilon79/gists{/gist_id}", "starred_url": "https://api.github.com/users/eeilon79/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eeilon79/subscriptions", "organizations_url": "https://api.github.com/users/eeilon79/orgs", "repos_url": "https://api.github.com/users/eeilon79/repos", "events_url": "https://api.github.com/users/eeilon79/events{/privacy}", "received_events_url": "https://api.github.com/users/eeilon79/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-07T07:21:47Z", "updated_at": "2020-05-12T20:16:39Z", "closed_at": "2020-05-12T20:16:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've encountered this issue while trying to write a solution to #1087.\r\nI'm trying to add a past private tag to a dataset that had all his private tags removed with remove_private_tags. It leads to a single element update - just the private tag data. No private creator element is added. Also, the private tag is updated on the second free block rather than the first - that's supposed to be free after remove_private_tags.\r\nIt seems the dataset preserves some information on past private creators blocks even after remove_private_tags. \r\n\r\nI expect that a private creator element would be (re-)created if I'm trying to add a private tag, and that it would created on the first available place in the private group.\r\n\r\nReproducing code:\r\n```\r\nfrom pydicom import Dataset\r\n\r\nds = Dataset()\r\nblock = ds.private_block(0x000b, 'dog^1', create=True)\r\nblock.add_new(0x01, \"SH\", \"Border Collie\")\r\nblock = ds.private_block(0x000b, 'dog^2', create=True)\r\nblock.add_new(0x01, \"SH\", \"Poodle\")\r\n\r\nds.remove_private_tags()\r\nblock = ds.private_block(0x000b, 'dog^2', create=True)\r\nblock.add_new(0x01, \"SH\", \"Poodle\")\r\nprint(ds)\r\n\r\n```\r\nOutput:\r\n```\r\n(000b, 1101) Private tag data                    SH: 'Poodle'`\r\n```\r\n\r\nAa far as I understand, output should be:\r\n```\r\n(000b, 0010) Private Creator                     LO: 'dog^2'\r\n(000b, 1001) Private tag data                    SH: 'Poodle'\r\n```\r\n\r\nMy environment (Running with docker from PyCharm):\r\nLinux-4.15.0-74-generic-x86_64-with-debian-buster-sid\r\nPython 3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 19:07:31)\r\n[GCC 7.3.0]\r\npydicom 2.0.0.dev\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1092", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1092/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1092/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1092/events", "html_url": "https://github.com/pydicom/pydicom/issues/1092", "id": 611076802, "node_id": "MDU6SXNzdWU2MTEwNzY4MDI=", "number": 1092, "title": "config.use_DS_decimal doesn't work with new elements", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-02T00:59:31Z", "updated_at": "2020-06-22T04:40:21Z", "closed_at": "2020-06-22T04:40:21Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Describe the bug**\r\nWith the config option `use_DS_decimal = True` I expect new elements created in a Dataset to be `DSdecimal`, but they always end up as `DSfloat` instead.\r\n```python\r\nfrom pydicom import config\r\nfrom pydicom.dataset import Dataset\r\nfrom pydicom.valuerep import DSdecimal\r\n\r\nconfig.use_DS_decimal = True\r\nds = Dataset()\r\nds.EventElapsedTimes = \"1.2345\"\r\ntype(ds.EventElapsedTimes)  # DSfloat\r\nassert isinstance(ds.EventElapsedTimes, DSdecimal)  # AssertionError\r\n```\r\n\r\nPython 3.6, current `master`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1088", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1088/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1088/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1088/events", "html_url": "https://github.com/pydicom/pydicom/issues/1088", "id": 610357340, "node_id": "MDU6SXNzdWU2MTAzNTczNDA=", "number": 1088, "title": "Support for DICOM files with implicit VR file meta? ", "user": {"login": "kogrady87", "id": 61035847, "node_id": "MDQ6VXNlcjYxMDM1ODQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/61035847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kogrady87", "html_url": "https://github.com/kogrady87", "followers_url": "https://api.github.com/users/kogrady87/followers", "following_url": "https://api.github.com/users/kogrady87/following{/other_user}", "gists_url": "https://api.github.com/users/kogrady87/gists{/gist_id}", "starred_url": "https://api.github.com/users/kogrady87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kogrady87/subscriptions", "organizations_url": "https://api.github.com/users/kogrady87/orgs", "repos_url": "https://api.github.com/users/kogrady87/repos", "events_url": "https://api.github.com/users/kogrady87/events{/privacy}", "received_events_url": "https://api.github.com/users/kogrady87/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-30T20:15:37Z", "updated_at": "2020-05-04T00:54:42Z", "closed_at": "2020-05-04T00:54:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I googled this error and came across a similar title (#503). I seem to have a similar issue? Any suggestions would be very helpful. I've included an anonymized DICOM plan file. \r\n\r\nThank you!\r\n\r\n```python\r\ndataset =    \r\n[anonymized.zip](https://github.com/pydicom/pydicom/files/4560946/anonymized.zip)\r\n\r\npydicom.dcmread('anonymized.dcm')\r\nTraceback (most recent call last):\r\n  File \"C:\\Python37\\lib\\site-packages\\pydicom\\dataelem.py\", line 757, in DataElement_from_raw\r\n    value = convert_value(VR, raw, encoding)\r\n  File \"C:\\Python37\\lib\\site-packages\\pydicom\\values.py\", line 575, in convert_value\r\n    raise NotImplementedError(message)\r\nNotImplementedError: Unknown Value Representation '0x00 0x00'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<pyshell#1>\", line 1, in <module>\r\n    dataset = pydicom.dcmread('\\\\\\\\njesgv7k1\\\\alignrtarchive\\\\AlignRT Dispatcher\\\\ApprovalDicomFiles\\\\anonymized.dcm')\r\n  File \"C:\\Python37\\lib\\site-packages\\pydicom\\filereader.py\", line 871, in dcmread\r\n    force=force, specific_tags=specific_tags)\r\n  File \"C:\\Python37\\lib\\site-packages\\pydicom\\filereader.py\", line 688, in read_partial\r\n    transfer_syntax = file_meta_dataset.get(\"TransferSyntaxUID\")\r\n  File \"C:\\Python37\\lib\\site-packages\\pydicom\\dataset.py\", line 694, in get\r\n    return getattr(self, key)\r\n  File \"C:\\Python37\\lib\\site-packages\\pydicom\\dataset.py\", line 776, in __getattr__\r\n    return self[tag].value\r\n  File \"C:\\Python37\\lib\\site-packages\\pydicom\\dataset.py\", line 873, in __getitem__\r\n    self[tag] = DataElement_from_raw(data_elem, character_set)\r\n  File \"C:\\Python37\\lib\\site-packages\\pydicom\\dataelem.py\", line 759, in DataElement_from_raw\r\n    raise NotImplementedError(\"{0:s} in tag {1!r}\".format(str(e), raw.tag))\r\nNotImplementedError: Unknown Value Representation '0x00 0x00' in tag (0002, 0010)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1086", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1086/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1086/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1086/events", "html_url": "https://github.com/pydicom/pydicom/issues/1086", "id": 609854419, "node_id": "MDU6SXNzdWU2MDk4NTQ0MTk=", "number": 1086, "title": "Write deflated content when called Transfer Syntax is Deflated Explicit VR Little Endian", "user": {"login": "blairconrad", "id": 3275797, "node_id": "MDQ6VXNlcjMyNzU3OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3275797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blairconrad", "html_url": "https://github.com/blairconrad", "followers_url": "https://api.github.com/users/blairconrad/followers", "following_url": "https://api.github.com/users/blairconrad/following{/other_user}", "gists_url": "https://api.github.com/users/blairconrad/gists{/gist_id}", "starred_url": "https://api.github.com/users/blairconrad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blairconrad/subscriptions", "organizations_url": "https://api.github.com/users/blairconrad/orgs", "repos_url": "https://api.github.com/users/blairconrad/repos", "events_url": "https://api.github.com/users/blairconrad/events{/privacy}", "received_events_url": "https://api.github.com/users/blairconrad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-30T11:34:07Z", "updated_at": "2020-05-04T11:24:55Z", "closed_at": "2020-05-04T11:24:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nAfter using `dcmread` to read a deflated .dcm file created from pydicom's [CT_small.dcm sample](https://github.com/pydicom/pydicom/blob/v1.4.2/pydicom/data/test_files/CT_small.dcm), with the following file meta information\r\n```\r\n(0002, 0000) File Meta Information Group Length  UL: 178\r\n(0002, 0001) File Meta Information Version       OB: b'\\x00\\x01'\r\n(0002, 0002) Media Storage SOP Class UID         UI: CT Image Storage\r\n(0002, 0003) Media Storage SOP Instance UID      UI: 1.3.6.1.4.1.5962.1.1.1.1.1.20040119072730.12322\r\n(0002, 0010) Transfer Syntax UID                 UI: Deflated Explicit VR Little Endian\r\n(0002, 0012) Implementation Class UID            UI: 1.2.40.0.13.1.1\r\n(0002, 0013) Implementation Version Name         SH: 'dcm4che-2.0'\r\n```\r\n\r\nI use `save_as` to save the file. The output file has an unaltered file meta information section, but the group 8 elements and beyond are not written in deflated format, instead appearing to be LEE. In particular, the specific character set element is easily readable from a hex representation of the file, rather than appearing as gobbledygook like one would expect from a deflated stream.\r\n\r\n**Expected behavior**\r\nThe bulk of the DCM to be written as Deflated Explicit VR Little Endian or the Transfer Syntax UID to be saved with a value that reflects the actual format of the DCM\r\n\r\n**Steps To Reproduce**\r\n```python\r\n\u276f py\r\n>>> # CT_small_deflated.dcm is CT_small.dcm, deflated using dcm2dcm\r\n>>> ds = pydicom.dcmread(\"CT_small_deflated.dcm\")\r\n\r\n>>> ds.save_as(\"ds_like_orig.dcm\", write_like_original=True)\r\n>>> pydicom.dcmread(\"ds_like_orig.dcm\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\blairyat\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\pydicom\\filereader.py\", line 869, in dcmread\r\n    dataset = read_partial(fp, stop_when, defer_size=defer_size,\r\n  File \"C:\\Users\\blairyat\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\pydicom\\filereader.py\", line 729, in read_partial\r\n    unzipped = zlib.decompress(zipped, -zlib.MAX_WBITS)\r\nzlib.error: Error -3 while decompressing data: invalid stored block lengths\r\n\r\n>>> ds.save_as(\"ds_not_like_orig.dcm\", write_like_original=False)\r\n>>> pydicom.dcmread(\"ds_not_like_orig.dcm\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\blairyat\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\pydicom\\filereader.py\", line 869, in dcmread\r\n    dataset = read_partial(fp, stop_when, defer_size=defer_size,\r\n  File \"C:\\Users\\blairyat\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\pydicom\\filereader.py\", line 729, in read_partial\r\n    unzipped = zlib.decompress(zipped, -zlib.MAX_WBITS)\r\nzlib.error: Error -3 while decompressing data: invalid stored block lengths\r\n```\r\n\r\n**Your environment**\r\nPlease run the following and paste the output.\r\n```powershell\r\n\u276f py -c \"import platform; print(platform.platform())\"\r\nWindows-10-10.0.18362-SP0\r\n\r\n\u276f py -c \"import sys; print('Python ', sys.version)\"\r\nPython  3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)]\r\n\r\n\u276f py -c \"import pydicom; print('pydicom ', pydicom.__version__)\"\r\npydicom  1.4.2\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1084", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1084/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1084/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1084/events", "html_url": "https://github.com/pydicom/pydicom/issues/1084", "id": 607572462, "node_id": "MDU6SXNzdWU2MDc1NzI0NjI=", "number": 1084, "title": "Convert Multiframe Images to DICOM File", "user": {"login": "Alex97schmid-zeiss", "id": 63061479, "node_id": "MDQ6VXNlcjYzMDYxNDc5", "avatar_url": "https://avatars3.githubusercontent.com/u/63061479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alex97schmid-zeiss", "html_url": "https://github.com/Alex97schmid-zeiss", "followers_url": "https://api.github.com/users/Alex97schmid-zeiss/followers", "following_url": "https://api.github.com/users/Alex97schmid-zeiss/following{/other_user}", "gists_url": "https://api.github.com/users/Alex97schmid-zeiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alex97schmid-zeiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alex97schmid-zeiss/subscriptions", "organizations_url": "https://api.github.com/users/Alex97schmid-zeiss/orgs", "repos_url": "https://api.github.com/users/Alex97schmid-zeiss/repos", "events_url": "https://api.github.com/users/Alex97schmid-zeiss/events{/privacy}", "received_events_url": "https://api.github.com/users/Alex97schmid-zeiss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-27T13:57:02Z", "updated_at": "2020-06-16T23:48:49Z", "closed_at": "2020-06-16T23:48:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, I\u00b4m currently trying to convert a series of medical images to one single DICOM file. \r\nI have already managed to read a single image(tiff), convert it and save it again(DICOM). \r\nHowever, I can't do this with multiframe images. \r\n\r\nMy current framework is the following: I read every single image as an array (cv2_array). Then I convert the input arrays to a compressed byte_list. Finally I save the DICOM file again with ds.PixelData = encapsulate ([frame1, frame2 ..].\r\n\r\nIf I now open the DICOM file, only a white image is visible. In addition, (ds.pixel_array).shape = (1,1920,1080). So only one single image is saved. Can someone tell me why not all images are saved?\r\n\r\nThanks a lot for your help ! \r\n\r\n\r\n`\r\n\r\n    def write_dicom(pixel_array,filename):\r\n \r\n    #pixel_array: 2D numpy ndarray.\r\n    #filename: string name for the output file.\r\n\r\n    file_meta = Dataset()\r\n    file_meta.MediaStorageSOPClassUID = 'Secondary Capture Image Storage'\r\n    file_meta.MediaStorageSOPInstanceUID = '1.3.6.1.4.1.9590.100.1.1.111165684411017669021768385720736873780'\r\n    file_meta.ImplementationClassUID = '1.3.6.1.4.1.9590.100.1.0.100.4.0'\r\n\r\n    ds = FileDataset(filename, {},file_meta = file_meta,preamble=b'\\0'*128)\r\n    ds.Modality = 'OT'\r\n\r\n    ds.ContentDate = str(datetime.date.today()).replace('-','')\r\n    ds.ContentTime = str(time.time())\r\n    ds.StudyInstanceUID =  '1.3.6.1.4.1.9590.100.1.1.124313977412360175234271287472804872093'\r\n    ds.SeriesInstanceUID = '1.3.6.1.4.1.9590.100.1.1.369231118011061003403421859172643143649'\r\n    ds.SOPInstanceUID =    '1.3.6.1.4.1.9590.100.1.1.111165684411017669021768385720736873780'\r\n    ds.is_little_endian = True\r\n    ds.is_implicit_VR = True\r\n    ds.SOPClassUID = SecondaryCaptureImageStorage\r\n    ds.SecondaryCaptureDeviceManufctur = 'Python 3.7'\r\n\r\n    ## These are the necessary imaging components of the FileDataset object.\r\n    ds.SamplesPerPixel = 1\r\n    ds.PhotometricInterpretation = \"MONOCHROME1\"\r\n    ds.PixelRepresentation = 0\r\n    ds.PlanarConfiguration = 0\r\n    ds.HighBit = 15\r\n    ds.BitsStored = 16\r\n    ds.BitsAllocated = 16\r\n    ds.SmallestImagePixelValue = b'\\\\x00\\\\x00'\r\n    ds.LargestImagePixelValue = b'\\\\xff\\\\xff'\r\n    ds.Columns = pixel_array[0].shape[1]\r\n    ds.Rows = pixel_array[0].shape[0]\r\n\r\n    ds.file_meta.TransferSyntaxUID = JPEGExtended\r\n\r\n    # convert the multiframe image into single frames (Required for compression)\r\n    imagelist = []\r\n    for i in range(len(pixel_array)):\r\n        imagelist.append(Image.fromarray(pixel_array[i]))\r\n    print(len(imagelist))\r\n\r\n    #create compressed images\r\n    byte_list = []\r\n    for frame in imagelist:\r\n        output = io.BytesIO()\r\n        frame.save(output, format=\"tiff\")\r\n        byte_list.append(output.getvalue())\r\n\r\n    frame1 = byte_list[0]\r\n    frame2 = byte_list[1]\r\n    frame3 = byte_list[2]\r\n\r\n    #safe byte-list frames\r\n    ds.PixelData = pydicom.encaps.encapsulate([frame1 , frame2 , frame3])\r\n\r\n    ds['PixelData'].is_undefined_length = True\r\n    ds.save_as(filename, write_like_original=False)\r\n\r\n\r\n\r\n\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1082", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1082/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1082/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1082/events", "html_url": "https://github.com/pydicom/pydicom/issues/1082", "id": 606960358, "node_id": "MDU6SXNzdWU2MDY5NjAzNTg=", "number": 1082, "title": "Keeping private element name during an update", "user": {"login": "eeilon79", "id": 30146312, "node_id": "MDQ6VXNlcjMwMTQ2MzEy", "avatar_url": "https://avatars1.githubusercontent.com/u/30146312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eeilon79", "html_url": "https://github.com/eeilon79", "followers_url": "https://api.github.com/users/eeilon79/followers", "following_url": "https://api.github.com/users/eeilon79/following{/other_user}", "gists_url": "https://api.github.com/users/eeilon79/gists{/gist_id}", "starred_url": "https://api.github.com/users/eeilon79/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eeilon79/subscriptions", "organizations_url": "https://api.github.com/users/eeilon79/orgs", "repos_url": "https://api.github.com/users/eeilon79/repos", "events_url": "https://api.github.com/users/eeilon79/events{/privacy}", "received_events_url": "https://api.github.com/users/eeilon79/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-26T09:00:32Z", "updated_at": "2020-04-28T18:29:23Z", "closed_at": "2020-04-28T18:29:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Disclaimer - I'm new to dicom and pydicom and my issue could be just a rookie mistake/misuse of the package. \r\n\r\nUsing PrivateBlock.add_new method to update an existing private element value leads to an omission of the descriptive element name in favor of a general, non descriptive name (\"Private tag data\", see code example below). \r\nThe same general name is given when adding a new element (despite the fact that the proper name exists in the private dictionary after the application of add_private_dict_entries).\r\n\r\nI do not see a reason to change element name at all during private element update. At the very least, there should be a way to update private element value without touching the name (maybe there is and I'm just not familiar with it?). \r\nAs for new private elements, their name should fit their name in the private dictionary, if available. But I'm aware this might be far more complicated than not omitting existing element names.  \r\n\r\nCode example:    \r\n\r\n```\r\nfrom pydicom import dcmread\r\nfrom pydicom.data import get_testdata_files\r\n\r\n\r\nct_filename = get_testdata_files(\"CT_small\")[0]\r\nds = dcmread(ct_filename)\r\nblock = ds.private_block(0x11, 'GEMS_PATI_01', create=True)\r\nprint(ds[0x11, 0x1010])\r\nblock.add_new(0x10, 'SS', 1)\r\nprint(ds[0x11, 0x1010])\r\n```\r\n\r\nOutput:\r\n```\r\n(0011, 1010) [Patient Status]                    SS: 0\r\n(0011, 1010) Private tag data                    SS: 1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1081", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1081/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1081/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1081/events", "html_url": "https://github.com/pydicom/pydicom/issues/1081", "id": 606150066, "node_id": "MDU6SXNzdWU2MDYxNTAwNjY=", "number": 1081, "title": "No support for pathlib.Path", "user": {"login": "dov", "id": 338235, "node_id": "MDQ6VXNlcjMzODIzNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/338235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dov", "html_url": "https://github.com/dov", "followers_url": "https://api.github.com/users/dov/followers", "following_url": "https://api.github.com/users/dov/following{/other_user}", "gists_url": "https://api.github.com/users/dov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dov/subscriptions", "organizations_url": "https://api.github.com/users/dov/orgs", "repos_url": "https://api.github.com/users/dov/repos", "events_url": "https://api.github.com/users/dov/events{/privacy}", "received_events_url": "https://api.github.com/users/dov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501232, "node_id": "MDU6TGFiZWw2MzUwMTIzMg==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-24T08:48:39Z", "updated_at": "2020-05-04T00:54:24Z", "closed_at": "2020-05-04T00:54:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nTrying to read an image with where the file path given by a `pathlib.Path` object fails with the stacktrace:\r\n\r\n```\r\n  File \"read-dataset.py\", line 26, in <module>\r\n    ds = pydicom.dcmread(output_dir/f)\r\n  File \"/usr/local/lib/python3.7/site-packages/pydicom/filereader.py\", line 880, in dcmread\r\n    force=force, specific_tags=specific_tags)\r\n  File \"/usr/local/lib/python3.7/site-packages/pydicom/filereader.py\", line 682, in read_partial\r\n    preamble = read_preamble(fileobj, force)\r\n  File \"/usr/local/lib/python3.7/site-packages/pydicom/filereader.py\", line 620, in read_preamble\r\n    preamble = fp.read(128)\r\nAttributeError: 'PosixPath' object has no attribute 'read'\r\n\r\n```\r\n**Expected behavior**\r\nThe image should be read\r\n\r\n**Steps To Reproduce**\r\n\r\n```python\r\nimport pydicom\r\nfrom pathlib import Path\r\n\r\ninput_dir = Path('.')\r\nds = pydicom.dcmread(input_dir/\"img.dcm\")\r\n# Can be worked around by doing\r\n# ds = pydicom.dcmread(str(input_dir/\"img.dcm\"))\r\n```\r\n**Your environment**\r\nPlease run the following and paste the output.\r\n```bash\r\n$ python -c \"import platform; print(platform.platform())\"\r\n$ python -c \"import sys; print('Python ', sys.version)\"\r\n$ python -c \"import pydicom; print('pydicom ', pydicom.__version__)\"\r\n```\r\n```\r\nLinux-5.5.15-200.fc31.x86_64-x86_64-with-fedora-31-Thirty_One\r\nPython  3.7.6 (default, Jan 30 2020, 09:44:41)\r\n[GCC 9.2.1 20190827 (Red Hat 9.2.1-1)]\r\npydicom  1.2.2\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1078", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1078/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1078/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1078/events", "html_url": "https://github.com/pydicom/pydicom/issues/1078", "id": 605303211, "node_id": "MDU6SXNzdWU2MDUzMDMyMTE=", "number": 1078, "title": "Dataset.private_block inconsistent behavior with create=True", "user": {"login": "eeilon79", "id": 30146312, "node_id": "MDQ6VXNlcjMwMTQ2MzEy", "avatar_url": "https://avatars1.githubusercontent.com/u/30146312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eeilon79", "html_url": "https://github.com/eeilon79", "followers_url": "https://api.github.com/users/eeilon79/followers", "following_url": "https://api.github.com/users/eeilon79/following{/other_user}", "gists_url": "https://api.github.com/users/eeilon79/gists{/gist_id}", "starred_url": "https://api.github.com/users/eeilon79/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eeilon79/subscriptions", "organizations_url": "https://api.github.com/users/eeilon79/orgs", "repos_url": "https://api.github.com/users/eeilon79/repos", "events_url": "https://api.github.com/users/eeilon79/events{/privacy}", "received_events_url": "https://api.github.com/users/eeilon79/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-23T07:24:59Z", "updated_at": "2020-04-24T23:33:35Z", "closed_at": "2020-04-24T23:33:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using Dataset.private_block to get a private block for an available private creator with the flag create=True yields inconsistent behavior. Sometimes it recognizes the available private creator and sometimes it does not and adds a new tag for it.  \r\n\r\nI [expect](https://pydicom.github.io/pydicom/dev/reference/generated/pydicom.dataset.Dataset.html#pydicom.dataset.Dataset.private_block) Dataset.private_block(group_number, private_creator, create=True) would recognize an available private_creator if present in a dicom file and would not add a new tag for it. \r\n\r\nReproduction code:\r\n\r\n```\r\nfrom pydicom import dcmread\r\nfrom pydicom.data import get_testdata_files\r\n\r\nct_filename = get_testdata_files(\"CT_small\")[0]\r\nds = dcmread(ct_filename)\r\nblock = ds.private_block(0x11, 'GEMS_PATI_01', create=True)\r\n\r\nds.private_creators(0x11)\r\nds.private_creators(0x11)[0] == ds.private_creators(0x11)[1]\r\n```\r\n\r\nOutput is:\r\n```\r\n['GEMS_PATI_01', 'GEMS_PATI_01']\r\nTrue\r\n```\r\n\r\nWorking with other files, I've seen this behavior is not consistent. Sometimes I would get the expected results. I have not tested it enough for the specific file above.\r\n\r\nMy environment (Running with docker from PyCharm):\r\nLinux-4.15.0-74-generic-x86_64-with-debian-buster-sid\r\nPython  3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 19:07:31)\r\n[GCC 7.3.0]\r\npydicom  1.4.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1077", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1077/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1077/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1077/events", "html_url": "https://github.com/pydicom/pydicom/issues/1077", "id": 601862960, "node_id": "MDU6SXNzdWU2MDE4NjI5NjA=", "number": 1077, "title": "Transform uint16 to float32 Dicom", "user": {"login": "Angioedema02", "id": 63725273, "node_id": "MDQ6VXNlcjYzNzI1Mjcz", "avatar_url": "https://avatars3.githubusercontent.com/u/63725273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Angioedema02", "html_url": "https://github.com/Angioedema02", "followers_url": "https://api.github.com/users/Angioedema02/followers", "following_url": "https://api.github.com/users/Angioedema02/following{/other_user}", "gists_url": "https://api.github.com/users/Angioedema02/gists{/gist_id}", "starred_url": "https://api.github.com/users/Angioedema02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Angioedema02/subscriptions", "organizations_url": "https://api.github.com/users/Angioedema02/orgs", "repos_url": "https://api.github.com/users/Angioedema02/repos", "events_url": "https://api.github.com/users/Angioedema02/events{/privacy}", "received_events_url": "https://api.github.com/users/Angioedema02/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-17T10:15:51Z", "updated_at": "2020-04-23T07:49:25Z", "closed_at": "2020-04-23T07:49:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI want to transform uint16 to float32 Dicom. This test seems simple, but in reality I want to do some calculations on it and after whrite it in float32, to not loose data. I do not arrived to save it, so I decide to have a more simple test, read, transform and save it.  I have done a lot of tests, each on two cases : \r\n- First, I read the initial uint16 Dicom, transform it and save it. But, if I read the documentation, PixelData may have to manage the float array. But it seems it is not the case, the image is wrong, all white, visualy with wrong data inside... So I decide to work with FloatPixelData, alone, but I have an error that says it need data in PixelData. Okay,I set both, the PixelData contains the float32 in bytes and the FloatPixelData the float32 (flatten then listed, only way do not have an error about the type), but the final image is visualy wrong, all white.\r\n- So I decide to test with this second way : I try to create a new dicom and so a new ds object. I have set the minimum (maybe some tags are missing ? or wrong ? or too much ?). I set the PixelData only, I have a result, close to the original, not the same, and I cannot check values (see bellow why). If I set only FloatPixelData, no error, but I can read the Dicom with another soft ... If I set the both, the result is similar to set only PixelData.\r\n\r\nTo visualize the result, first I have used Image J, but float value are very wird. If I put the same array if txt image and read raw data, data are okay. If I save like a tiff, data are okay too. But ImageJ seems do not manage float value for dicom (and @scaramallion confirm it in a post). I decide to try with MicroDicom, but the original image is not right visualy and I cannot see values... And tiff image is wrong (and right with image j) Maybe, it is because of the dicom reader, I do not know ...\r\n\r\nFollowing, you will find the code : \r\n\r\n`\r\n            first_ds = pydicom.dcmread(os.path.join(firstDicomDir,filename))\r\n            first_array = first_ds.pixel_array.astype(np.float32)\r\n            \r\n            ##only for second option to initialize the new ds object##\r\n            meta = Dataset()\r\n            meta.MediaStorageSOPClassUID = first_ds.file_meta.MediaStorageSOPClassUID\r\n            meta.MediaStorageSOPInstanceUID = first_ds.file_meta.MediaStorageSOPInstanceUID\r\n            meta.TransferSyntaxUID = \"1.2.840.10008.1.2\"#first_ds.file_meta.TransferSyntaxUID\r\n            \r\n            ds = FileDataset(os.path.join(dicomPath,filename), {}, file_meta=meta, preamble=None)\r\n           ####\r\n           ##From here, this test is with new ds, but tests are also done with first_ds\r\n            ds.is_little_endian = True\r\n            ds.is_implicit_VR = True\r\n            ds.BitsStored = 28\r\n            ds.BitsAllocated = 32\r\n            ds.SamplesPerPixel = first_ds.SamplesPerPixel\r\n            ds.HighBit = 27\r\n            ds.Rows = first_array.shape[0]\r\n            ds.Columns = first_array.shape[1]\r\n            first_ds.SmallestImagePixelValue = int(round(first_array.min()))\r\n            first_ds[0x00280106].VR = 'US'\r\n            first_ds.LargestImagePixelValue = int(round(first_array.max()))\r\n            first_ds[0x00280107].VR = 'US'\r\n            ds.PixelRepresentation = 0\r\n\r\n            ds.PixelData = first_array.tobytes()\r\n            ds.FloatPixelData = first_array.flatten().tolist()\r\n\r\n            ##I have tried to way to save it, same result\r\n            #first_ds.save_as(os.path.join(dicomPath,filename),False)\r\n            pydicom.dcmwrite(os.path.join(dicomPath,filename), ds, False)\r\n\r\n`\r\n@scaramallion, I have tried your [fix](https://github.com/pydicom/pydicom/pull/1076/commits/bf37ea72edc73e36f1911ef367ad34da9c76748b)if I take the original dicom and chaging this line ds.FloatPixelData = first_array.flatten().tolist() by ds.FloatPixelData = first_array.tobytes(), I have this error: AttributeError: Unable to convert the pixel data: one of Pixel Data, Float Pixel Data or Double Float Pixel Data must be present in the dataset. For the new dicom, the result is not changing with the last version, visualy, but like I have written, I do not know if it is the external reader.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1075", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1075/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1075/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1075/events", "html_url": "https://github.com/pydicom/pydicom/issues/1075", "id": 601627692, "node_id": "MDU6SXNzdWU2MDE2Mjc2OTI=", "number": 1075, "title": "Error writing values with VR OF", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-17T00:52:32Z", "updated_at": "2020-04-19T08:32:19Z", "closed_at": "2020-04-19T08:32:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "[Related to this comment](https://github.com/pydicom/pydicom/issues/452#issuecomment-614038937) (I think)\r\n\r\n```python\r\nfrom pydicom.dataset import Dataset\r\nds = Dataset()\r\nds.is_little_endian = True\r\nds.is_implicit_VR = True\r\nds.FloatPixelData = b'\\x00\\x00\\x00\\x00'\r\nds.save_as('out.dcm')\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \".../pydicom/filewriter.py\", line 228, in write_numbers\r\n    value.append  # works only if list, not if string or number\r\nAttributeError: 'bytes' object has no attribute 'append'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \".../pydicom/filewriter.py\", line 230, in write_numbers\r\n    fp.write(pack(format_string, value))\r\nstruct.error: required argument is not a float\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \".../pydicom/tag.py\", line 27, in tag_in_exception\r\n    yield\r\n  File \".../pydicom/filewriter.py\", line 543, in write_dataset\r\n    write_data_element(fp, dataset.get_item(tag), dataset_encoding)\r\n  File \".../pydicom/filewriter.py\", line 472, in write_data_element\r\n    writer_function(buffer, data_element, writer_param)\r\n  File \".../pydicom/filewriter.py\", line 236, in write_numbers\r\n    \"{0}\\nfor data_element:\\n{1}\".format(str(e), str(data_element)))\r\nOSError: required argument is not a float\r\nfor data_element:\r\n(7fe0, 0008) Float Pixel Data                    OF: b'\\x00\\x00\\x00\\x00'\r\n\r\n[skip]\r\n```\r\n[Error in filewriter](https://github.com/pydicom/pydicom/blob/master/pydicom/filewriter.py#L1007) using `write_numbers` instead of `write_OBvalue`/`write_OWvalue`. Looks like it's been wrong [since 2008](https://github.com/pydicom/pydicom/commit/5d3ea61ffe6877ae79267bf233f258c07c726998). I'm a bit surprised it hasn't come up before.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1073", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1073/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1073/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1073/events", "html_url": "https://github.com/pydicom/pydicom/issues/1073", "id": 601235049, "node_id": "MDU6SXNzdWU2MDEyMzUwNDk=", "number": 1073, "title": "ValueError when running apply_voi_lut function", "user": {"login": "aisosalo", "id": 34138494, "node_id": "MDQ6VXNlcjM0MTM4NDk0", "avatar_url": "https://avatars3.githubusercontent.com/u/34138494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aisosalo", "html_url": "https://github.com/aisosalo", "followers_url": "https://api.github.com/users/aisosalo/followers", "following_url": "https://api.github.com/users/aisosalo/following{/other_user}", "gists_url": "https://api.github.com/users/aisosalo/gists{/gist_id}", "starred_url": "https://api.github.com/users/aisosalo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aisosalo/subscriptions", "organizations_url": "https://api.github.com/users/aisosalo/orgs", "repos_url": "https://api.github.com/users/aisosalo/repos", "events_url": "https://api.github.com/users/aisosalo/events{/privacy}", "received_events_url": "https://api.github.com/users/aisosalo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-04-16T16:39:10Z", "updated_at": "2020-04-26T22:57:48Z", "closed_at": "2020-04-26T22:57:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are working with mammography data and came across a set of files for which an error is produced when using the `pydicom` function `apply_voi_lut` in `pixel_data_handlers` [referring to this line here](https://github.com/pydicom/pydicom/blob/caf0db105ddf389ff5025937fd5f3aa1e61e85e7/pydicom/pixel_data_handlers/util.py#L319):\r\n```\r\nlut_data = np.asarray(item.LUTData, dtype=dtype)\r\n```\r\n\r\nThe following error message is given:\r\n```\r\nError using _asarray>asarray (line 85)\r\nValueError: invalid literal for int() with base 10: \r\nb'\\x00\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x00\\x01\\x\r\n```\r\n\r\nDataset information does not seem to give indications what might be different with those specific files producing the above error. We are not at the moment able to provide more details about the contents of `(0028, 3006) LUT Data` in those cases when the error is issued, but we can look this piece of information up later if it helps. (We cannot provide a sample DICOM file, as it is patient data.) As a side note, for majority of our files, `apply_voi_lut` function works just fine.\r\n\r\nOur system configuration is as follows:\r\n```\r\nWindows-10-10.0.17763-SP0\r\nPython 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]\r\nnumpy 1.18.1\r\npydicom 1.4.2\r\n```\r\n\r\nWe are running the Python function in question within a Matlab script:\r\n```\r\nds = py.pydicom.dcmread(filepath);\r\ndicom_utils = py.importlib.import_module('pydicom.pixel_data_handlers.util');\r\nimg = dicom_utils.apply_voi_lut(ds.pixel_array.copy(), ds);\r\nimg = img.uint16;\r\n```\r\n\r\nCan you provide guidance?\r\n\r\nThere has already been a brief discussion about this issue with @darcymason.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1072", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1072/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1072/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1072/events", "html_url": "https://github.com/pydicom/pydicom/issues/1072", "id": 586293816, "node_id": "MDU6SXNzdWU1ODYyOTM4MTY=", "number": 1072, "title": "Can't Import PyDicom", "user": {"login": "AdamCuellar", "id": 40183888, "node_id": "MDQ6VXNlcjQwMTgzODg4", "avatar_url": "https://avatars1.githubusercontent.com/u/40183888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdamCuellar", "html_url": "https://github.com/AdamCuellar", "followers_url": "https://api.github.com/users/AdamCuellar/followers", "following_url": "https://api.github.com/users/AdamCuellar/following{/other_user}", "gists_url": "https://api.github.com/users/AdamCuellar/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdamCuellar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdamCuellar/subscriptions", "organizations_url": "https://api.github.com/users/AdamCuellar/orgs", "repos_url": "https://api.github.com/users/AdamCuellar/repos", "events_url": "https://api.github.com/users/AdamCuellar/events{/privacy}", "received_events_url": "https://api.github.com/users/AdamCuellar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501234, "node_id": "MDU6TGFiZWw2MzUwMTIzNA==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-23T15:25:18Z", "updated_at": "2020-03-23T22:16:26Z", "closed_at": "2020-03-23T16:49:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following error occurs when importing the package:\r\n\r\nI've tried updating numpy to no avail.\r\n\r\n```Traceback (most recent call last):\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pydicom/__init__.py\", line 32, in <module>\r\n    from pydicom.dataelem import DataElement\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pydicom/dataelem.py\", line 16, in <module>\r\n    from pydicom import config  # don't import datetime_conversion directly\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pydicom/config.py\", line 103, in <module>\r\n    import pydicom.overlay_data_handlers.numpy_handler as overlay_np  # noqa\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pydicom/overlay_data_handlers/numpy_handler.py\", line 47, in <module>\r\n    from pydicom.pixel_data_handlers.numpy_handler import unpack_bits\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pydicom/pixel_data_handlers/numpy_handler.py\", line 52, in <module>\r\n    import numpy as np\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/__init__.py\", line 152, in <module>\r\n    from . import random\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/random/__init__.py\", line 181, in <module>\r\n    from . import _pickle\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/random/_pickle.py\", line 1, in <module>\r\n    from .mtrand import RandomState\r\n  File \"_bit_generator.pxd\", line 14, in init numpy.random.mtrand\r\n  File \"_bit_generator.pyx\", line 255, in init numpy.random._bit_generator\r\nAttributeError: type object 'numpy.random._bit_generator.SeedSequence' has no attribute '__reduce_cython__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1068", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1068/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1068/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1068/events", "html_url": "https://github.com/pydicom/pydicom/issues/1068", "id": 580937072, "node_id": "MDU6SXNzdWU1ODA5MzcwNzI=", "number": 1068, "title": "apply_color_lut() incorrect exception when missing RedPaletteColorLUTDescriptor", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-13T23:47:33Z", "updated_at": "2020-03-14T21:16:50Z", "closed_at": "2020-03-14T21:16:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Describe the bug**\r\n`AttributeError` when used on a dataset without `RedPaletteColorLookupTableDescriptor `\r\n\r\n**Expected behavior**\r\nShould raise `ValueError` for consistency with later exceptions\r\n\r\n**Steps To Reproduce**\r\n```python\r\nfrom pydicom.pixel_data_handlers.util import apply_color_lut\r\nds = dcmread(\"CT_small.dcm\")\r\narr = ds.apply_color_lut(arr, ds)\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".../pydicom/pixel_data_handlers/util.py\", line 116, in apply_color_lut\r\n    lut_desc = ds.RedPaletteColorLookupTableDescriptor\r\n  File \".../pydicom/dataset.py\", line 768, in __getattr__\r\n    return object.__getattribute__(self, name)\r\nAttributeError: 'FileDataset' object has no attribute 'RedPaletteColorLookupTableDescriptor'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1066", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1066/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1066/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1066/events", "html_url": "https://github.com/pydicom/pydicom/issues/1066", "id": 580261912, "node_id": "MDU6SXNzdWU1ODAyNjE5MTI=", "number": 1066, "title": "Multi-Frame: one frame shape issue", "user": {"login": "Soft953", "id": 17318529, "node_id": "MDQ6VXNlcjE3MzE4NTI5", "avatar_url": "https://avatars0.githubusercontent.com/u/17318529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soft953", "html_url": "https://github.com/Soft953", "followers_url": "https://api.github.com/users/Soft953/followers", "following_url": "https://api.github.com/users/Soft953/following{/other_user}", "gists_url": "https://api.github.com/users/Soft953/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soft953/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soft953/subscriptions", "organizations_url": "https://api.github.com/users/Soft953/orgs", "repos_url": "https://api.github.com/users/Soft953/repos", "events_url": "https://api.github.com/users/Soft953/events{/privacy}", "received_events_url": "https://api.github.com/users/Soft953/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-12T22:36:16Z", "updated_at": "2020-03-13T12:59:20Z", "closed_at": "2020-03-13T12:59:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nAccording to the DICOM reference : \r\n\r\nThe total number of frames contained within a Multi-frame Image is conveyed in the Number of Frames (0028,0008). Number of Frames (0028,0008) shall have a value greater than zero.\r\n\r\n[http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.6.html](url)\r\n\r\nBut in reshape_array, one frame is a different case then n frames (with n>1).\r\nThis is a problem because it create pixel_array of shape (ds.Rows, ds.Columns) instead of (1, ds.Rows, ds.Columns).\r\n\r\n[https://github.com/pydicom/pydicom/blob/30ac743bcaedbc06f0e0d5cef590cb173756eb2d/pydicom/pixel_data_handlers/util.py#L924](url)\r\n\r\n**Expected behavior**\r\n\r\nShould expect 3 dim pixel_array when I got one frame, instead of 2 dim.\r\nCreate pixel_array of shape (ds.Rows, ds.Columns) instead of (1, ds.Rows, ds.Columns) when \r\nnr_frames == 1\r\n\r\n[http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.6.html](url)\r\n\r\n**Steps To Reproduce**\r\n`\r\nimport pydicom\r\nimport numpy as np\r\n\r\ntest_file = pydicom.data.get_testdata_files('eCT_Supplemental.dcm')[0]\r\ndcm = pydicom.read_file(test_file)\r\narr = dcm.pixel_array\r\narr = arr[0].reshape((1, 512, 512))\r\ndcm.NumberOfFrames = 1\r\nprint(arr, arr.shape)\r\ndcm.PixelData = arr.tobytes()\r\nprint(dcm.pixel_array.shape) #(512, 5125) instead of (1, 512, 512)\r\n`\r\n\r\n**Your environment**\r\nPlease run the following and paste the output.\r\n```bash\r\n$ python -c \"import platform; print(platform.platform())\"\r\n$ python -c \"import sys; print('Python ', sys.version)\"\r\n$ python -c \"import pydicom; print('pydicom ', pydicom.__version__)\"\r\n```\r\n\r\nDarwin-19.3.0-x86_64-i386-64bit\r\nPython  3.7.6 (default, Dec 30 2019, 19:38:26) \r\n[Clang 11.0.0 (clang-1100.0.33.16)]\r\npydicom  1.4.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1064", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1064/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1064/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1064/events", "html_url": "https://github.com/pydicom/pydicom/issues/1064", "id": 573920907, "node_id": "MDU6SXNzdWU1NzM5MjA5MDc=", "number": 1064, "title": "JPEG2000 Lossless with Read DICOM in Python 3.7", "user": {"login": "yohset95", "id": 54476840, "node_id": "MDQ6VXNlcjU0NDc2ODQw", "avatar_url": "https://avatars3.githubusercontent.com/u/54476840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yohset95", "html_url": "https://github.com/yohset95", "followers_url": "https://api.github.com/users/yohset95/followers", "following_url": "https://api.github.com/users/yohset95/following{/other_user}", "gists_url": "https://api.github.com/users/yohset95/gists{/gist_id}", "starred_url": "https://api.github.com/users/yohset95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yohset95/subscriptions", "organizations_url": "https://api.github.com/users/yohset95/orgs", "repos_url": "https://api.github.com/users/yohset95/repos", "events_url": "https://api.github.com/users/yohset95/events{/privacy}", "received_events_url": "https://api.github.com/users/yohset95/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-02T11:48:37Z", "updated_at": "2020-03-24T01:44:37Z", "closed_at": "2020-03-24T01:44:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my Python 3.7, I want to read DICOM. But I face this notification:\r\n\r\n> NotImplementedError: this transfer syntax JPEG 2000 Image Compression (Lossless Only), can not be read because Pillow lacks the jpeg 2000 decoder plugin.\r\n\r\nI've tried [this](https://stackoverflow.com/questions/50725792/no-available-image-handler-could-decode-this-transfer-syntax-jpeg-lossless-when) solution, but anaconda prompt gives me this:\r\n\r\n> failed\r\n> \r\n> UnsatisfiableError: The following specifications were found to be in conflict: - gdcm -> python=3.6 -> python_abi=[build=*_cp36m] -> pypy[version='<0a0'] - python=3.7\r\n> \r\n> Use \"conda search --info\" to see the dependencies for each package.\r\n\r\nI've used `conda install gdcm -c conda-forge` to install GDCM but the failed notification is same as above.\r\n\r\nWhat should I do?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1061", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1061/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1061/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1061/events", "html_url": "https://github.com/pydicom/pydicom/issues/1061", "id": 571134425, "node_id": "MDU6SXNzdWU1NzExMzQ0MjU=", "number": 1061, "title": "Calling dcm.pixel_array.tobytes() results in RuntimeError for missing handlers, dependancies GDCM", "user": {"login": "Chumbaloo", "id": 13964651, "node_id": "MDQ6VXNlcjEzOTY0NjUx", "avatar_url": "https://avatars1.githubusercontent.com/u/13964651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chumbaloo", "html_url": "https://github.com/Chumbaloo", "followers_url": "https://api.github.com/users/Chumbaloo/followers", "following_url": "https://api.github.com/users/Chumbaloo/following{/other_user}", "gists_url": "https://api.github.com/users/Chumbaloo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chumbaloo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chumbaloo/subscriptions", "organizations_url": "https://api.github.com/users/Chumbaloo/orgs", "repos_url": "https://api.github.com/users/Chumbaloo/repos", "events_url": "https://api.github.com/users/Chumbaloo/events{/privacy}", "received_events_url": "https://api.github.com/users/Chumbaloo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2020-02-26T07:53:53Z", "updated_at": "2020-03-28T04:23:02Z", "closed_at": "2020-03-28T04:23:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen using version 1.4.2 of pydicom, I load a dicom file, and then try to get the byte representation of the pixel_array using the .tobytes() method I get a RuntimeError. This behaviour does not occur when using pydicom verison 1.3.2.\r\n\r\n\r\n**Expected behavior**\r\nNot raise the RuntimeError.\r\n\r\n**Steps To Reproduce**\r\nminimum code:\r\n\r\n```\r\nimport pydicom\r\n\r\ndcm = pydicom.dcmread('filename.dcm')\r\nfoo = dcm.pixel_array.tobytes()\r\n```\r\n\r\n\r\nTraceback:\r\n\r\n\r\n```\r\n    def _convert_pixel_data_without_handler(self):\r\n        \"\"\"Convert the pixel data using the first matching handler.\r\n        See :meth:`~Dataset.convert_pixel_data` for more information.\r\n        \"\"\"\r\n        # Find all possible handlers that support the transfer syntax\r\n        transfer_syntax = self.file_meta.TransferSyntaxUID\r\n        possible_handlers = [\r\n            hh for hh in pydicom.config.pixel_data_handlers\r\n            if hh.supports_transfer_syntax(transfer_syntax)\r\n        ]\r\n    \r\n        # No handlers support the transfer syntax\r\n        if not possible_handlers:\r\n            raise NotImplementedError(\r\n                \"Unable to decode pixel data with a transfer syntax UID of \"\r\n                \"'{0}' ({1}) as there are no pixel data handlers \"\r\n                \"available that support it. Please see the pydicom \"\r\n                \"documentation for information on supported transfer syntaxes \"\r\n                .format(transfer_syntax, transfer_syntax.name)\r\n            )\r\n    \r\n        # Handlers that both support the transfer syntax and have their\r\n        #   dependencies met\r\n        available_handlers = [hh for hh in possible_handlers if\r\n                              hh.is_available()]\r\n    \r\n        # There are handlers that support the transfer syntax but none of them\r\n        #   can be used as missing dependencies\r\n        if not available_handlers:\r\n            # For each of the possible handlers we want to find which\r\n            #   dependencies are missing\r\n            msg = (\r\n                \"The following handlers are available to decode the pixel \"\r\n                \"data however they are missing required dependencies: \"\r\n            )\r\n            pkg_msg = []\r\n            for hh in possible_handlers:\r\n                hh_deps = hh.DEPENDENCIES\r\n                # Missing packages\r\n                missing = [dd for dd in hh_deps if have_package(dd) is None]\r\n                # Package names\r\n                names = [hh_deps[name][1] for name in missing]\r\n                pkg_msg.append(\r\n                    \"{} (req. {})\"\r\n                    .format(hh.HANDLER_NAME, ', '.join(names))\r\n                )\r\n    \r\n>           raise RuntimeError(msg + ', '.join(pkg_msg))\r\nE           RuntimeError: The following handlers are available to decode the pixel data however they are missing required dependencies: GDCM (req. GDCM)\r\n```\r\n\r\n**Your environment**\r\nPlease run the following and paste the output.\r\n```bash\r\n$ python -c \"import platform; print(platform.platform())\"\r\n$ python -c \"import sys; print('Python ', sys.version)\"\r\n$ python -c \"import pydicom; print('pydicom ', pydicom.__version__)\"\r\n```\r\n\r\nDarwin-19.3.0-x86_64-i386-64bit\r\nPython  3.7.6 (default, Dec 30 2019, 19:38:26) \r\n[Clang 11.0.0 (clang-1100.0.33.16)]\r\npydicom  1.4.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1057", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1057/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1057/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1057/events", "html_url": "https://github.com/pydicom/pydicom/issues/1057", "id": 568234860, "node_id": "MDU6SXNzdWU1NjgyMzQ4NjA=", "number": 1057, "title": "pixel_array of dcm", "user": {"login": "dschandana", "id": 32296872, "node_id": "MDQ6VXNlcjMyMjk2ODcy", "avatar_url": "https://avatars3.githubusercontent.com/u/32296872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dschandana", "html_url": "https://github.com/dschandana", "followers_url": "https://api.github.com/users/dschandana/followers", "following_url": "https://api.github.com/users/dschandana/following{/other_user}", "gists_url": "https://api.github.com/users/dschandana/gists{/gist_id}", "starred_url": "https://api.github.com/users/dschandana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dschandana/subscriptions", "organizations_url": "https://api.github.com/users/dschandana/orgs", "repos_url": "https://api.github.com/users/dschandana/repos", "events_url": "https://api.github.com/users/dschandana/events{/privacy}", "received_events_url": "https://api.github.com/users/dschandana/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501232, "node_id": "MDU6TGFiZWw2MzUwMTIzMg==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}, {"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-20T11:29:08Z", "updated_at": "2020-02-21T22:27:42Z", "closed_at": "2020-02-21T22:27:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n**Describe the issue**\r\nI am trying to get pixel_array from a dcm file. I can read it using \r\n`>> data = pydicom.dcmread(\"image-000001.dcm\")`\r\n\r\nI can see Pixel Data using \r\n`>> data.PixelData`\r\n\r\nHowever, when I want to convert the pixelData to a numpy array using\r\n`>> data.pixel_array`\r\nI encounter with an error as \r\n`\"OSError: cannot identify image file <_io.BytesIO object at ...>\"`\r\n\r\n**Expected behavior**\r\nI expect it to give a numpy array\r\n\r\n**Steps To Reproduce**\r\nHow to reproduce the issue. Please include:\r\n1. A minimum working code sample\r\n`>> data = pydicom.dcmread(\"image-000001.dcm\")`\r\n`>> data.PixelData`\r\n`>> data.pixel_array`\r\n2. The traceback \r\n\r\n---------------------------------------------------------------------------\r\nOSError Traceback (most recent call last)\r\n<ipython-input-64-5bbd4b291ec3> in <module>()\r\n----> 1 data.pixel_array\r\n\r\n............/.local/lib/python3.6/site-packages/pydicom/dataset.py in pixel_array(self)\r\n   1621             :class:`numpy.ndarray`.\r\n   1622         \"\"\"\r\n-> 1623         self.convert_pixel_data()\r\n   1624         return self._pixel_array\r\n   1625 \r\n\r\n............/.local/lib/python3.6/site-packages/pydicom/dataset.py in convert_pixel_data(self, handler_name)\r\n   1330             self._convert_pixel_data_using_handler(handler_name)\r\n   1331         else:\r\n-> 1332             self._convert_pixel_data_without_handler()\r\n   1333 \r\n   1334     def _convert_pixel_data_using_handler(self, name):\r\n\r\n............/.local/lib/python3.6/site-packages/pydicom/dataset.py in _convert_pixel_data_without_handler(self)\r\n   1440             .format(\", \".join([str(hh) for hh in available_handlers]))\r\n   1441         )\r\n-> 1442         raise last_exception\r\n   1443 \r\n   1444     def _do_pixel_data_conversion(self, handler):\r\n\r\n............/.local/lib/python3.6/site-packages/pydicom/dataset.py in _convert_pixel_data_without_handler(self)\r\n   1420         for handler in available_handlers:\r\n   1421             try:\r\n-> 1422                 self._do_pixel_data_conversion(handler)\r\n   1423                 return\r\n   1424             except Exception as exc:\r\n\r\n............/.local/lib/python3.6/site-packages/pydicom/dataset.py in _do_pixel_data_conversion(self, handler)\r\n   1447         # Use the handler to get a 1D numpy array of the pixel data\r\n   1448         # Will raise an exception if no pixel data element\r\n-> 1449         arr = handler.get_pixeldata(self)\r\n   1450         self._pixel_array = reshape_pixel_array(self, arr)\r\n   1451 \r\n\r\n............/.local/lib/python3.6/site-packages/pydicom/pixel_data_handlers/pillow_handler.py in get_pixeldata(ds)\r\n    165         # single compressed frame\r\n    166         pixel_data = defragment_data(ds.PixelData)\r\n--> 167         im = Image.open(io.BytesIO(pixel_data))\r\n    168         if 'YBR' in ds.PhotometricInterpretation:\r\n    169             im.draft('YCbCr', (ds.Rows, ds.Columns))\r\n\r\n/usr/lib/python3/dist-packages/PIL/Image.py in open(fp, mode)\r\n   2588         fp.close()\r\n   2589     raise IOError(\"cannot identify image file %r\"\r\n-> 2590                   % (filename if filename else fp))\r\n   2591 \r\n   2592 #\r\n\r\nOSError: cannot identify image file <_io.BytesIO object at 0x7ffa8f2d2eb8>\r\n\r\n\r\n3. Which of the following packages are available and their versions:\r\n  * Numpy - 1.18.1\r\n  * Pillow - 5.1.0\r\n\r\n4. The anonymized DICOM dataset: [Click here: /series_000001/image-000001.dcm](https://www.dicomlibrary.com?requestType=WADO&studyUID=1.2.826.0.1.3680043.8.1055.1.20111103111148288.98361414.79379639&manage=02ef8f31ea86a45cfce6eb297c274598)\r\n\r\n**My environment**\r\nLinux-5.3.0-40-generic-x86_64-with-Ubuntu-18.04-bionic\r\nPython3  3.6.9 (default, Nov  7 2019, 10:44:02)  [GCC 8.3.0]\r\npydicom  1.4.1\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1056", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1056/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1056/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1056/events", "html_url": "https://github.com/pydicom/pydicom/issues/1056", "id": 568217208, "node_id": "MDU6SXNzdWU1NjgyMTcyMDg=", "number": 1056, "title": "Invalid link upon 'import dicom'", "user": {"login": "leesei", "id": 544400, "node_id": "MDQ6VXNlcjU0NDQwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/544400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leesei", "html_url": "https://github.com/leesei", "followers_url": "https://api.github.com/users/leesei/followers", "following_url": "https://api.github.com/users/leesei/following{/other_user}", "gists_url": "https://api.github.com/users/leesei/gists{/gist_id}", "starred_url": "https://api.github.com/users/leesei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leesei/subscriptions", "organizations_url": "https://api.github.com/users/leesei/orgs", "repos_url": "https://api.github.com/users/leesei/repos", "events_url": "https://api.github.com/users/leesei/events{/privacy}", "received_events_url": "https://api.github.com/users/leesei/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 152529316, "node_id": "MDU6TGFiZWwxNTI1MjkzMTY=", "url": "https://api.github.com/repos/pydicom/pydicom/labels/Documentation", "name": "Documentation", "color": "009800", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-20T10:57:37Z", "updated_at": "2020-02-20T15:10:35Z", "closed_at": "2020-02-20T15:10:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/pydicom/pydicom/blob/master/dicom.py#L8\r\n\r\nhttps://pydicom.github.io/pydicom/stable/transition_to_pydicom1.html is invalid\r\nUpon a bit of Googling, I think this is the new like:\r\nhttps://github.com/pydicom/pydicom/wiki/Porting-to-pydicom-1.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1055", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1055/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1055/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1055/events", "html_url": "https://github.com/pydicom/pydicom/issues/1055", "id": 567859817, "node_id": "MDU6SXNzdWU1Njc4NTk4MTc=", "number": 1055, "title": "DICOMs parsed successfully with dcmread in 1.3.0 cannot be parsed in 1.4x (appears to be issue with SpecificCharacterSet)", "user": {"login": "kalebdfischer", "id": 48722029, "node_id": "MDQ6VXNlcjQ4NzIyMDI5", "avatar_url": "https://avatars2.githubusercontent.com/u/48722029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalebdfischer", "html_url": "https://github.com/kalebdfischer", "followers_url": "https://api.github.com/users/kalebdfischer/followers", "following_url": "https://api.github.com/users/kalebdfischer/following{/other_user}", "gists_url": "https://api.github.com/users/kalebdfischer/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalebdfischer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalebdfischer/subscriptions", "organizations_url": "https://api.github.com/users/kalebdfischer/orgs", "repos_url": "https://api.github.com/users/kalebdfischer/repos", "events_url": "https://api.github.com/users/kalebdfischer/events{/privacy}", "received_events_url": "https://api.github.com/users/kalebdfischer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501232, "node_id": "MDU6TGFiZWw2MzUwMTIzMg==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-19T21:30:44Z", "updated_at": "2020-02-24T00:46:55Z", "closed_at": "2020-02-24T00:46:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\nWhen using version 1.4's  pydicom.dcmread() on a DICOM file that was previously parsed successfully with 1.3.0, the following exception is logged instead:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"~/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py\", line 3267, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-6-2d90b8f3ca9c>\", line 1, in <module>\r\n    dcm2 = pydicom.dcmread('~/Documents/problem_ISO_IR_100.dcm')\r\n  File \"~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py\", line 879, in dcmread\r\n    force=force, specific_tags=specific_tags)\r\n  File \"~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py\", line 753, in read_partial\r\n    specific_tags=specific_tags)\r\n  File \"~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py\", line 378, in read_dataset\r\n    raw_data_element = next(de_gen)\r\n  File \"~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py\", line 242, in data_element_generator\r\n    is_little_endian, length, encoding)\r\n  File \"~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py\", line 422, in read_sequence\r\n    encoding, offset)\r\n  File \"~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py\", line 466, in read_sequence_item\r\n    at_top_level=False)\r\n  File \"~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py\", line 378, in read_dataset\r\n    raw_data_element = next(de_gen)\r\n  File \"~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py\", line 208, in data_element_generator\r\n    encoding = convert_string(value, is_little_endian)\r\n  File \"~/anaconda3/lib/python3.7/site-packages/pydicom/values.py\", line 370, in convert_string\r\n    byte_string = byte_string.decode(default_encoding)\r\nAttributeError: 'NoneType' object has no attribute 'decode'\r\n```\r\n\r\n\r\n**Expected behavior**\r\nWhat you expected to happen (please include a reference to the DICOM standard\r\nif relevant).\r\n\r\n**Steps To Reproduce**\r\nHow to reproduce the issue. Please include a minimum working code sample, the\r\ntraceback (if any) and the anonymized DICOM dataset (if relevant).\r\n\r\nWe cannot provide the file due to HIPAA. However, more than happy to get the information you need about the file and here I will describe some forensics that I have performed.\r\n\r\nIf `SpecificCharacterSet `and `ReferencedPerformedProcedureStepSequence` attributes are removed with 1.3.0 and saved, we the exception is no longer raised. \r\n\r\nThe exception is also raised when for the original file, the following is run:\r\n`pydicom.dcmread(<file_path>, specific_tags=['SpecificCharacterSet'])`\r\n\r\n**Your environment**\r\nPlease run the following and paste the output.\r\n\r\n```bash\r\n$ python -c \"import platform; print(platform.platform())\"\r\n\r\nOSX, various linux docker containers\r\n\r\n$ python -c \"import sys; print('Python ', sys.version)\"\r\n\r\nPython  3.7.3 (default, Mar 27 2019, 09:23:15) \r\n[Clang 10.0.1 (clang-1001.0.46.3)]\r\n\r\n$ python -c \"import pydicom; print('pydicom ', pydicom.__version__)\"\r\npydicom  1.4.1\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1054", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1054/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1054/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1054/events", "html_url": "https://github.com/pydicom/pydicom/issues/1054", "id": 566913634, "node_id": "MDU6SXNzdWU1NjY5MTM2MzQ=", "number": 1054, "title": "Color overlay data", "user": {"login": "allgrom", "id": 17882065, "node_id": "MDQ6VXNlcjE3ODgyMDY1", "avatar_url": "https://avatars0.githubusercontent.com/u/17882065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allgrom", "html_url": "https://github.com/allgrom", "followers_url": "https://api.github.com/users/allgrom/followers", "following_url": "https://api.github.com/users/allgrom/following{/other_user}", "gists_url": "https://api.github.com/users/allgrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/allgrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allgrom/subscriptions", "organizations_url": "https://api.github.com/users/allgrom/orgs", "repos_url": "https://api.github.com/users/allgrom/repos", "events_url": "https://api.github.com/users/allgrom/events{/privacy}", "received_events_url": "https://api.github.com/users/allgrom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-18T14:02:35Z", "updated_at": "2020-02-29T15:14:20Z", "closed_at": "2020-02-29T15:14:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nIs it possible to create color overlay data?\r\nFor example, for overlaying heatmaps on dicom.\r\n\r\nI've already read about [overlays](http://dicom.nema.org/dicom/2013/output/chtml/part03/sect_C.9.html) and I know that it is not supported, but there may be some options.\r\n\r\nSomething like this.\r\n![photo_2020-02-18_15-59-20](https://user-images.githubusercontent.com/17882065/74742560-de247480-526f-11ea-9f1b-54c604c7659a.jpg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1053", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1053/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1053/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1053/events", "html_url": "https://github.com/pydicom/pydicom/issues/1053", "id": 566626903, "node_id": "MDU6SXNzdWU1NjY2MjY5MDM=", "number": 1053, "title": "JPEG Lossless not supported by Pillow", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-18T03:44:33Z", "updated_at": "2020-03-02T23:18:43Z", "closed_at": "2020-02-21T22:27:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Describe the bug**\r\nJPEG Lossless images aren't supported by Pillow, but we have them as such.\r\n\r\nThe IJG's `libjpeg`, the backend used by Pillow doesn't actually support JPEG Lossless (1.2.840.10008.1.2.4.57 and 1.2.840.10008.1.2.4.70), no matter the bit depth. We should remove support and update the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1049", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1049/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1049/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1049/events", "html_url": "https://github.com/pydicom/pydicom/issues/1049", "id": 562473228, "node_id": "MDU6SXNzdWU1NjI0NzMyMjg=", "number": 1049, "title": "LUT Descriptor tag with no value yields TypeError", "user": {"login": "deeuu", "id": 4244379, "node_id": "MDQ6VXNlcjQyNDQzNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4244379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deeuu", "html_url": "https://github.com/deeuu", "followers_url": "https://api.github.com/users/deeuu/followers", "following_url": "https://api.github.com/users/deeuu/following{/other_user}", "gists_url": "https://api.github.com/users/deeuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/deeuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deeuu/subscriptions", "organizations_url": "https://api.github.com/users/deeuu/orgs", "repos_url": "https://api.github.com/users/deeuu/repos", "events_url": "https://api.github.com/users/deeuu/events{/privacy}", "received_events_url": "https://api.github.com/users/deeuu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-10T10:41:34Z", "updated_at": "2020-02-10T22:38:49Z", "closed_at": "2020-02-10T12:02:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI have a DICOM image with the following tag (copied from ImageJ)\r\n\r\n```\r\n0028,1101  Red Palette Color Lookup Table Descriptor: \r\n```\r\n\r\nwhich corresponds to the raw data element, produced by [`DataElement_from_raw`](https://github.com/pydicom/pydicom/blob/v1.4.1/pydicom/dataelem.py#L699):\r\n```\r\nRawDataElement(tag=(0028, 1101), VR='US', length=0, value=None, value_tell=1850, is_implicit_VR=False, is_little_endian=True)\r\n```\r\n\r\nBecause this tag is matched by the [LUT Descriptor tags](https://github.com/pydicom/pydicom/blob/v1.4.1/pydicom/dataelem.py#L696) and the value is empty (`None`), the [following line](https://github.com/pydicom/pydicom/blob/v1.4.1/pydicom/dataelem.py#L761):\r\n```\r\nif raw.tag in _LUT_DESCRIPTOR_TAGS and value[0] < 0:\r\n```\r\nresults in \r\n```\r\nTypeError: 'NoneType' object is not subscriptable\r\n```\r\n\r\n**Expected behavior**\r\n\r\nGiven that I discovered this by parsing what seems to be a set of faulty DICOMs (mangled pixel data), I'm not sure if an error should be raised if the colour attribute value is not provided.\r\n\r\nHowever, given that `value` can be `None` for other tags, the simple fix is\r\n\r\n```python\r\ntry:\r\n    if raw.tag in _LUT_DESCRIPTOR_TAGS and value[0] < 0:\r\n        # We only fix the first value as the third value is 8 or 16\r\n        value[0] += 65536\r\nexcept TypeError:\r\n    pass\r\n```\r\n\r\n(or test if `value` is iterable).\r\n\r\n**Your environment**\r\n```\r\nDarwin-19.3.0-x86_64-i386-64bit\r\nPython  3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 22:05:27)\r\n[Clang 9.0.1 ]\r\npydicom  1.4.1\r\n```\r\n\r\nMany thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1047", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1047/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1047/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1047/events", "html_url": "https://github.com/pydicom/pydicom/issues/1047", "id": 562201752, "node_id": "MDU6SXNzdWU1NjIyMDE3NTI=", "number": 1047, "title": "dcmread cannot handle pathlib.Path objects", "user": {"login": "hackermd", "id": 6855297, "node_id": "MDQ6VXNlcjY4NTUyOTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6855297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackermd", "html_url": "https://github.com/hackermd", "followers_url": "https://api.github.com/users/hackermd/followers", "following_url": "https://api.github.com/users/hackermd/following{/other_user}", "gists_url": "https://api.github.com/users/hackermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackermd/subscriptions", "organizations_url": "https://api.github.com/users/hackermd/orgs", "repos_url": "https://api.github.com/users/hackermd/repos", "events_url": "https://api.github.com/users/hackermd/events{/privacy}", "received_events_url": "https://api.github.com/users/hackermd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "mrbean-bremen", "id": 4623701, "node_id": "MDQ6VXNlcjQ2MjM3MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4623701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrbean-bremen", "html_url": "https://github.com/mrbean-bremen", "followers_url": "https://api.github.com/users/mrbean-bremen/followers", "following_url": "https://api.github.com/users/mrbean-bremen/following{/other_user}", "gists_url": "https://api.github.com/users/mrbean-bremen/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrbean-bremen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrbean-bremen/subscriptions", "organizations_url": "https://api.github.com/users/mrbean-bremen/orgs", "repos_url": "https://api.github.com/users/mrbean-bremen/repos", "events_url": "https://api.github.com/users/mrbean-bremen/events{/privacy}", "received_events_url": "https://api.github.com/users/mrbean-bremen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mrbean-bremen", "id": 4623701, "node_id": "MDQ6VXNlcjQ2MjM3MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4623701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrbean-bremen", "html_url": "https://github.com/mrbean-bremen", "followers_url": "https://api.github.com/users/mrbean-bremen/followers", "following_url": "https://api.github.com/users/mrbean-bremen/following{/other_user}", "gists_url": "https://api.github.com/users/mrbean-bremen/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrbean-bremen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrbean-bremen/subscriptions", "organizations_url": "https://api.github.com/users/mrbean-bremen/orgs", "repos_url": "https://api.github.com/users/mrbean-bremen/repos", "events_url": "https://api.github.com/users/mrbean-bremen/events{/privacy}", "received_events_url": "https://api.github.com/users/mrbean-bremen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-02-09T16:24:01Z", "updated_at": "2020-02-10T18:56:54Z", "closed_at": "2020-02-10T18:56:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe `dcmread()` currently fails when passed an instance of `pathlib.Path`. The problem is the following line:\r\nhttps://github.com/pydicom/pydicom/blob/8b0bbaf92d7a8218ceb94dedbee3a0463c5123e3/pydicom/filereader.py#L832\r\n\r\n**Expected behavior**\r\n`dcmread()` should open and read the file to which the `pathlib.Path` object points.\r\n\r\nThe line above should probably be:\r\n```python\r\nif isinstance(fp, (str, Path)):\r\n````\r\n\r\n**Steps To Reproduce**\r\n```python\r\nfrom pathlib import Path\r\nfrom pydicom.filereader import dcmread\r\n\r\ndcm_filepath = Path('path/to/file')\r\ndcmread(dcm_filepath)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1046", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1046/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1046/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1046/events", "html_url": "https://github.com/pydicom/pydicom/issues/1046", "id": 562150652, "node_id": "MDU6SXNzdWU1NjIxNTA2NTI=", "number": 1046, "title": "How Can I Add Jpeg2KImagePlugin to Decompress a Dicom File", "user": {"login": "MOAMSA", "id": 22676054, "node_id": "MDQ6VXNlcjIyNjc2MDU0", "avatar_url": "https://avatars0.githubusercontent.com/u/22676054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MOAMSA", "html_url": "https://github.com/MOAMSA", "followers_url": "https://api.github.com/users/MOAMSA/followers", "following_url": "https://api.github.com/users/MOAMSA/following{/other_user}", "gists_url": "https://api.github.com/users/MOAMSA/gists{/gist_id}", "starred_url": "https://api.github.com/users/MOAMSA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MOAMSA/subscriptions", "organizations_url": "https://api.github.com/users/MOAMSA/orgs", "repos_url": "https://api.github.com/users/MOAMSA/repos", "events_url": "https://api.github.com/users/MOAMSA/events{/privacy}", "received_events_url": "https://api.github.com/users/MOAMSA/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2020-02-09T09:46:06Z", "updated_at": "2020-03-24T01:46:54Z", "closed_at": "2020-03-24T01:46:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I used pillow to decompress a dicom file, and got the below Error:\r\n\r\n**NotImplementedError: this transfer syntax JPEG 2000 Image Compression, can not be read because Pillow lacks the jpeg 2000 decoder plugin**\r\n\r\n* python Version: 3.7.3, pydicom Version: 1.4.1, Pillow Version: 6.1, on Windows 7 \r\n* The Transfer Syntax UID is 1.2.840.10008.1.2.4.91\r\n* Photometric Interpretation= MONOCHROME2\r\n\r\n**Code:**\r\n`ds = read_file(\"test.DCM\")`\r\n`ds.decompress(handler_name='pillow')`\r\n`ds= ds.pixel_array `\r\n\r\nHow can I add the **Jpeg plugin 2000**? Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1044", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1044/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1044/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1044/events", "html_url": "https://github.com/pydicom/pydicom/issues/1044", "id": 559940724, "node_id": "MDU6SXNzdWU1NTk5NDA3MjQ=", "number": 1044, "title": "Getting Started link on Github page is broken", "user": {"login": "danielsbridges", "id": 60663795, "node_id": "MDQ6VXNlcjYwNjYzNzk1", "avatar_url": "https://avatars0.githubusercontent.com/u/60663795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielsbridges", "html_url": "https://github.com/danielsbridges", "followers_url": "https://api.github.com/users/danielsbridges/followers", "following_url": "https://api.github.com/users/danielsbridges/following{/other_user}", "gists_url": "https://api.github.com/users/danielsbridges/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielsbridges/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielsbridges/subscriptions", "organizations_url": "https://api.github.com/users/danielsbridges/orgs", "repos_url": "https://api.github.com/users/danielsbridges/repos", "events_url": "https://api.github.com/users/danielsbridges/events{/privacy}", "received_events_url": "https://api.github.com/users/danielsbridges/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 152529316, "node_id": "MDU6TGFiZWwxNTI1MjkzMTY=", "url": "https://api.github.com/repos/pydicom/pydicom/labels/Documentation", "name": "Documentation", "color": "009800", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-04T19:48:58Z", "updated_at": "2020-02-04T22:52:06Z", "closed_at": "2020-02-04T22:52:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I click [the Getting Started link](https://pydicom.github.io/pydicom/stable/getting_started.html), I get a 'File not found' error from Github. Consequently I am unable to get started!\r\n\r\nShould this link be updated to [your dev page](https://pydicom.github.io/pydicom/dev/)? (It apparently has [the installation instructions](https://pydicom.github.io/pydicom/dev/tutorials/installation.html) I've been looking for...)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1043", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1043/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1043/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1043/events", "html_url": "https://github.com/pydicom/pydicom/issues/1043", "id": 559742195, "node_id": "MDU6SXNzdWU1NTk3NDIxOTU=", "number": 1043, "title": "Opening Dicom without (0008,0005) tag", "user": {"login": "sbialkowski-pixel", "id": 60385441, "node_id": "MDQ6VXNlcjYwMzg1NDQx", "avatar_url": "https://avatars2.githubusercontent.com/u/60385441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbialkowski-pixel", "html_url": "https://github.com/sbialkowski-pixel", "followers_url": "https://api.github.com/users/sbialkowski-pixel/followers", "following_url": "https://api.github.com/users/sbialkowski-pixel/following{/other_user}", "gists_url": "https://api.github.com/users/sbialkowski-pixel/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbialkowski-pixel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbialkowski-pixel/subscriptions", "organizations_url": "https://api.github.com/users/sbialkowski-pixel/orgs", "repos_url": "https://api.github.com/users/sbialkowski-pixel/repos", "events_url": "https://api.github.com/users/sbialkowski-pixel/events{/privacy}", "received_events_url": "https://api.github.com/users/sbialkowski-pixel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-04T14:06:28Z", "updated_at": "2020-02-05T07:34:29Z", "closed_at": "2020-02-05T07:34:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I struggling problem with opening DICOM files when (0008,0005) tag is empty.\r\n\r\nI'm getting this error:\r\n\r\n```\r\n~/anaconda3/envs/py3.7/lib/python3.7/site-packages/pydicom/filereader.py in data_element_generator(fp, is_implicit_VR, is_little_endian, stop_when, defer_size, encoding, specific_tags)\r\n    206             if tag == BaseTag(0x00080005):\r\n    207                 from pydicom.values import convert_string\r\n--> 208                 encoding = convert_string(value, is_little_endian)\r\n    209                 # Store the encoding value in the generator\r\n    210                 # for use with future elements (SQs)\r\n\r\n~/anaconda3/envs/py3.7/lib/python3.7/site-packages/pydicom/values.py in convert_string(byte_string, is_little_endian, struct_format)\r\n    368     \"\"\"\r\n    369     if not in_py2:\r\n--> 370         byte_string = byte_string.decode(default_encoding)\r\n    371     return MultiString(byte_string)\r\n    372 \r\n\r\nAttributeError: 'NoneType' object has no attribute 'decode'\r\n```\r\nI've try solution from #820 and #816, with callback:\r\n```\r\ndef bad_tsyn_callback(raw_elem, **kwargs):\r\n    if raw_elem.tag == 0x00080005:\r\n        return_val = raw_elem._replace(value=b'ISO_IR 6')\r\n    else:\r\n        return_val = raw_elem\r\n    return return_val\r\n\r\nfrom pydicom import config\r\nimport pydicom\r\nconfig.data_element_callback = bad_tsyn_callback\r\n```\r\nand the I've try to read file by standard dcmread:\r\n```ds = pydicom.dcmread(str(path), stop_before_pixels=True)```\r\nBut still same NoneType error. How should I proceed with this type of file ?\r\n\r\nBest Sebastian.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1042", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1042/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1042/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1042/events", "html_url": "https://github.com/pydicom/pydicom/issues/1042", "id": 557461171, "node_id": "MDU6SXNzdWU1NTc0NjExNzE=", "number": 1042, "title": "Error writing datasets with SingleCollimationWidth", "user": {"login": "vsaase", "id": 378021, "node_id": "MDQ6VXNlcjM3ODAyMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/378021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsaase", "html_url": "https://github.com/vsaase", "followers_url": "https://api.github.com/users/vsaase/followers", "following_url": "https://api.github.com/users/vsaase/following{/other_user}", "gists_url": "https://api.github.com/users/vsaase/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsaase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsaase/subscriptions", "organizations_url": "https://api.github.com/users/vsaase/orgs", "repos_url": "https://api.github.com/users/vsaase/repos", "events_url": "https://api.github.com/users/vsaase/events{/privacy}", "received_events_url": "https://api.github.com/users/vsaase/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-01-30T12:28:21Z", "updated_at": "2020-02-15T19:07:11Z", "closed_at": "2020-02-15T19:07:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n```\r\nTypeError: With tag (0018, 9306) got exception: string indices must be integers\r\nTraceback (most recent call last):\r\n  File \"/Users/arzt/src/pydicom/pydicom/tag.py\", line 30, in tag_in_exception\r\n    yield\r\n  File \"/Users/arzt/src/pydicom/pydicom/filewriter.py\", line 555, in write_dataset\r\n    write_data_element(fp, dataset.get_item(tag), dataset_encoding)\r\n  File \"/Users/arzt/src/pydicom/pydicom/filewriter.py\", line 482, in write_data_element\r\n    writer_function(buffer, data_element, writer_param)\r\n  File \"/Users/arzt/src/pydicom/pydicom/filewriter.py\", line 222, in write_numbers\r\n    endianChar = '><' [fp.is_little_endian]\r\nTypeError: string indices must be integers\r\n```\r\n\r\n**Expected behavior**\r\nfile is written\r\n\r\n**Steps To Reproduce**\r\n\r\n```\r\nimport pydicom\r\nd = pydicom.Dataset()\r\nd.SingleCollimationWidth = 1.0\r\npydicom.dcmwrite(\"d\", d)\r\n```\r\n\r\n**Your environment**\r\nDarwin-18.7.0-x86_64-i386-64bit\r\nPython  3.7.5 (default, Nov  6 2019, 09:01:45) \r\npydicom  2.0.0.dev0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1041", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1041/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1041/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1041/events", "html_url": "https://github.com/pydicom/pydicom/issues/1041", "id": 556884434, "node_id": "MDU6SXNzdWU1NTY4ODQ0MzQ=", "number": 1041, "title": "pydicom release 2.0", "user": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 644270811, "node_id": "MDU6TGFiZWw2NDQyNzA4MTE=", "url": "https://api.github.com/repos/pydicom/pydicom/labels/housekeeping", "name": "housekeeping", "color": "f9d0c4", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydicom/pydicom/milestones/6", "html_url": "https://github.com/pydicom/pydicom/milestone/6", "labels_url": "https://api.github.com/repos/pydicom/pydicom/milestones/6/labels", "id": 4451084, "node_id": "MDk6TWlsZXN0b25lNDQ1MTA4NA==", "number": 6, "title": "v2.0", "description": "Main focus is on pixel data handling - memmap, deferred reading, tightening up issues with decompressing images.", "creator": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 9, "state": "open", "created_at": "2019-06-29T19:05:41Z", "updated_at": "2020-06-16T23:50:40Z", "due_on": "2020-04-30T07:00:00Z", "closed_at": null}, "comments": 9, "created_at": "2020-01-29T14:06:12Z", "updated_at": "2020-06-16T23:50:40Z", "closed_at": "2020-06-16T23:50:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Starting this one early, but can keep track of ongoing issues, and new discussions as needed.  I suspect we will come across many parts of code that can be refactored since Python 2 dropped.\r\n\r\n- [x] Remove Python 2 compatibility code (#1040)\r\n- [x] Remove deprecated functions, etc.\r\n  - [x] Remove `dataelem.IsMultiValue`\r\n  - [x] Deprecate `valuerep.PersonName3` in favour of `PersonName`\r\n- [ ] ~~Default empty values to `None` for non-SQ and `[]` for SQ~~\r\n- [x] In classes, remove subclassing from `object`\r\n\r\n### Release check list ([more information](https://github.com/pydicom/pydicom/wiki/Pydicom-Release-Checklist))\r\n- [x] go through issues and close, assign to this version, or assign to future versions\r\n- [x] ensure deprecated classes, functions, etc. scheduled for removal have been removed\r\n- [x] update to newest DICOM standard\r\n- [x] go through PRs to see which can be pulled in before release\r\n- [x] update Release Notes by going through revision history, and add release notes file to index.rst\r\n- [x] update the version in `pydicom/_version.py` to release\r\n- [x] check in the changes and create a branch and a GitHub release\r\n- [x] get the new DOI at https://zenodo.org/account/settings/github/repository/pydicom/pydicom),\r\n      and update the README.md in the release branch\r\n- [x] publish on PyPi\r\n- [x] update documentation version on GitHub Pages\r\n- [x] update the version in `pydicom/_version.py` in master to next development version (major.minor.0.dev0),\r\n      and update the DOI in the README.md\r\n- [x] merge auto-generated PR in conda-forge pydicom-feedstock\r\n- [x] announce on pydicom google group\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1038", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1038/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1038/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1038/events", "html_url": "https://github.com/pydicom/pydicom/issues/1038", "id": 552870423, "node_id": "MDU6SXNzdWU1NTI4NzA0MjM=", "number": 1038, "title": "Exception \"'NoneType' object has no attribute 'decode'\" when character set is empty.", "user": {"login": "micjuel", "id": 60139650, "node_id": "MDQ6VXNlcjYwMTM5NjUw", "avatar_url": "https://avatars1.githubusercontent.com/u/60139650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/micjuel", "html_url": "https://github.com/micjuel", "followers_url": "https://api.github.com/users/micjuel/followers", "following_url": "https://api.github.com/users/micjuel/following{/other_user}", "gists_url": "https://api.github.com/users/micjuel/gists{/gist_id}", "starred_url": "https://api.github.com/users/micjuel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/micjuel/subscriptions", "organizations_url": "https://api.github.com/users/micjuel/orgs", "repos_url": "https://api.github.com/users/micjuel/repos", "events_url": "https://api.github.com/users/micjuel/events{/privacy}", "received_events_url": "https://api.github.com/users/micjuel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-21T13:16:23Z", "updated_at": "2020-02-24T00:31:30Z", "closed_at": "2020-01-21T22:28:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nIf Transfer Syntax UID(0002,0010) is \"1.2.840.10008.1.2\" (LEI) and Character Set(0008,0005) is empty (that is assuming \"ISO-IR 6\"), there is an exception (\"'NoneType' object has no attribute 'decode'\").\r\n\r\n**Expected behavior**\r\nNo exception. Defaulting to ISO-IR 6. \r\n\r\n**Steps To Reproduce**\r\nUse the attached dcm file and run : \r\n```python\r\nds = pydicom.dcmread(\"empty_charset_LEI.dcm\") \r\n```\r\n\r\nTraceback:\r\n```\r\nException has occurred: AttributeError\r\n'NoneType' object has no attribute 'decode'\r\n  File \"C:\\Program Files\\Python38\\Lib\\site-packages\\pydicom\\values.py\", line 370, in convert_string\r\n    byte_string = byte_string.decode(default_encoding)\r\n  File \"C:\\Program Files\\Python38\\Lib\\site-packages\\pydicom\\filereader.py\", line 208, in data_element_generator\r\n    encoding = convert_string(value, is_little_endian)\r\n  File \"C:\\Program Files\\Python38\\Lib\\site-packages\\pydicom\\filereader.py\", line 378, in read_dataset\r\n    raw_data_element = next(de_gen)\r\n  File \"C:\\Program Files\\Python38\\Lib\\site-packages\\pydicom\\filereader.py\", line 751, in read_partial\r\n    dataset = read_dataset(fileobj, is_implicit_VR, is_little_endian,\r\n  File \"C:\\Program Files\\Python38\\Lib\\site-packages\\pydicom\\filereader.py\", line 878, in dcmread\r\n    dataset = read_partial(fp, stop_when, defer_size=defer_size,\r\n  File \"D:\\test_dicom.py\", line 57, in <module>\r\n    ds = pydicom.dcmread(filename)\r\n```\r\n\r\n**Your environment**\r\nWindows-10-10.0.18362-SP0\r\nPython  3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)]\r\npydicom  1.4.1\r\n\r\n[empty_charset_LEI.zip](https://github.com/pydicom/pydicom/files/4091163/empty_charset_LEI.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1035", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1035/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1035/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1035/events", "html_url": "https://github.com/pydicom/pydicom/issues/1035", "id": 552238269, "node_id": "MDU6SXNzdWU1NTIyMzgyNjk=", "number": 1035, "title": "Very slow access to whole slide images due to in-memory conversion of whole image", "user": {"login": "maubreville", "id": 10051592, "node_id": "MDQ6VXNlcjEwMDUxNTky", "avatar_url": "https://avatars1.githubusercontent.com/u/10051592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maubreville", "html_url": "https://github.com/maubreville", "followers_url": "https://api.github.com/users/maubreville/followers", "following_url": "https://api.github.com/users/maubreville/following{/other_user}", "gists_url": "https://api.github.com/users/maubreville/gists{/gist_id}", "starred_url": "https://api.github.com/users/maubreville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maubreville/subscriptions", "organizations_url": "https://api.github.com/users/maubreville/orgs", "repos_url": "https://api.github.com/users/maubreville/repos", "events_url": "https://api.github.com/users/maubreville/events{/privacy}", "received_events_url": "https://api.github.com/users/maubreville/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-01-20T11:22:26Z", "updated_at": "2020-01-20T21:41:39Z", "closed_at": "2020-01-20T21:41:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "As pointed out in the DICOM Whole Slide Imaging standard, the main advantage of whole slide images (WSI) is that they provide quick access to very big images. I converted one such WSI to DICOM using wsi2dcm (https://github.com/GoogleCloudPlatform/wsi-to-dicom-converter), and tried to access the pixel data using pydicom.\r\n\r\nHowever, using the pixel_data property for the first time takes a very very long time, since the complete numpy array is built up in-memory. This somewhat defeats the purpose of a whole-slide-image, despite for server use cases with loads and loads of memory. \r\n\r\nAs I understand, the tile images are stored in sequences that are somewhat a binary chunk that is parsed by decode_data_sequence() (which does not take up so much time), and then all single lossy-compressed images are loaded. It would be highly desirable to have a random-access-enabled method for WSI image access (my main use case is the training and inference of machine learning models).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1030", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1030/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1030/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1030/events", "html_url": "https://github.com/pydicom/pydicom/issues/1030", "id": 550949820, "node_id": "MDU6SXNzdWU1NTA5NDk4MjA=", "number": 1030, "title": "Crash writing DICOM with 1.4.0", "user": {"login": "efahl", "id": 36704995, "node_id": "MDQ6VXNlcjM2NzA0OTk1", "avatar_url": "https://avatars3.githubusercontent.com/u/36704995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/efahl", "html_url": "https://github.com/efahl", "followers_url": "https://api.github.com/users/efahl/followers", "following_url": "https://api.github.com/users/efahl/following{/other_user}", "gists_url": "https://api.github.com/users/efahl/gists{/gist_id}", "starred_url": "https://api.github.com/users/efahl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/efahl/subscriptions", "organizations_url": "https://api.github.com/users/efahl/orgs", "repos_url": "https://api.github.com/users/efahl/repos", "events_url": "https://api.github.com/users/efahl/events{/privacy}", "received_events_url": "https://api.github.com/users/efahl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-16T17:25:59Z", "updated_at": "2020-01-21T15:50:22Z", "closed_at": "2020-01-17T21:01:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "pydicom 1.4.0\r\nWindows-10-10.0.18362-SP0\r\nPython  3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]\r\nGDCM 3.0.2\r\nPillow 7.0.0\r\n\r\nType error raises when writing file with pydicom 1.4.0, works in 1.3.0.\r\n\r\n```\r\nds = pydicom.read_file('fail2404.anon.dcm')\r\n#print(ds.get((0x0040, 0x0275)))\r\nds.save_as('bort.dcm')\r\n```\r\n\r\nInterestingly, the crash goes away if the offending tag is accessed (uncomment the print and then the `save_as` works fine).\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\tag.py\", line 30, in tag_in_exception\r\n    yield\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\filewriter.py\", line 555, in write_dataset\r\n    write_data_element(fp, dataset.get_item(tag), dataset_encoding)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\filewriter.py\", line 463, in write_data_element\r\n    buffer.write(data_element.value)\r\nTypeError: a bytes-like object is required, not 'list'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./pydcmbug.py\", line 7, in <module>\r\n    ds.save_as('bort.dcm')\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\dataset.py\", line 1810, in save_as\r\n    pydicom.dcmwrite(filename, self, write_like_original)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\filewriter.py\", line 946, in dcmwrite\r\n    write_dataset(fp, get_item(dataset, slice(0x00010000, None)))\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\filewriter.py\", line 555, in write_dataset\r\n    write_data_element(fp, dataset.get_item(tag), dataset_encoding)\r\n  File \"C:\\Program Files\\Python37\\lib\\contextlib.py\", line 130, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\tag.py\", line 37, in tag_in_exception\r\n    raise type(ex)(msg)\r\nTypeError: With tag (0040, 0275) got exception: a bytes-like object is required, not 'list'\r\nTraceback (most recent call last):\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\tag.py\", line 30, in tag_in_exception\r\n    yield\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\filewriter.py\", line 555, in write_dataset\r\n    write_data_element(fp, dataset.get_item(tag), dataset_encoding)\r\n  File \"C:\\Program Files\\Python37\\lib\\site-packages\\pydicom\\filewriter.py\", line 463, in write_data_element\r\n    buffer.write(data_element.value)\r\nTypeError: a bytes-like object is required, not 'list'\r\n```\r\n\r\n[fail.zip](https://github.com/pydicom/pydicom/files/4072693/fail.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1029", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1029/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1029/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1029/events", "html_url": "https://github.com/pydicom/pydicom/issues/1029", "id": 550537688, "node_id": "MDU6SXNzdWU1NTA1Mzc2ODg=", "number": 1029, "title": "to_json does not work with binary data in pixel_array", "user": {"login": "Chumbaloo", "id": 13964651, "node_id": "MDQ6VXNlcjEzOTY0NjUx", "avatar_url": "https://avatars1.githubusercontent.com/u/13964651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chumbaloo", "html_url": "https://github.com/Chumbaloo", "followers_url": "https://api.github.com/users/Chumbaloo/followers", "following_url": "https://api.github.com/users/Chumbaloo/following{/other_user}", "gists_url": "https://api.github.com/users/Chumbaloo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chumbaloo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chumbaloo/subscriptions", "organizations_url": "https://api.github.com/users/Chumbaloo/orgs", "repos_url": "https://api.github.com/users/Chumbaloo/repos", "events_url": "https://api.github.com/users/Chumbaloo/events{/privacy}", "received_events_url": "https://api.github.com/users/Chumbaloo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-01-16T02:33:29Z", "updated_at": "2020-01-17T22:28:37Z", "closed_at": "2020-01-17T22:28:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the issue**\r\nLoading a dicom file and then performing a to_json() on it does not work with binary data in pixel_array.\r\n\r\n\r\n\r\n**Expected behavior**\r\nI would have expected that a base64 conversion is first performed on the binary data and then encoded to json. \r\n\r\n**Steps To Reproduce**\r\nHow to reproduce the issue. Please include:\r\n1. A minimum working code sample\r\n\r\nimport pydicom\r\nds = pydicom.dcmread('path_to_file')\r\noutput = ds.to_json()\r\n\r\n\r\n2. The traceback (if one occurred)\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/.virtualenvs/my_env/lib/python3.7/site-packages/pydicom/dataset.py\", line 2003, in to_json\r\n    dump_handler=dump_handler\r\n  File \"/.virtualenvs/my_env/lib/python3.7/site-packages/pydicom/dataset.py\", line 1889, in _data_element_to_json\r\n    binary_value = data_element.value.encode('utf-8')\r\nAttributeError: 'bytes' object has no attribute 'encode'\r\n\r\n\r\n3. Which of the following packages are available and their versions:\r\n  * Numpy\r\nnumpy==1.17.2\r\n  * Pillow\r\nPillow==6.1.0\r\n  * JPEG-LS\r\n  * GDCM\r\n4. The anonymized DICOM dataset (if possible).\r\n\r\n**Your environment**\r\nPlease run the following and paste the output.\r\n```bash\r\n$ python -c \"import platform; print(platform.platform())\"\r\nDarwin-19.2.0-x86_64-i386-64bit\r\n$ python -c \"import sys; print('Python ', sys.version)\"\r\nPython  3.7.6 (default, Dec 30 2019, 19:38:26) \r\n[Clang 11.0.0 (clang-1100.0.33.16)]\r\n$ python -c \"import pydicom; print('pydicom ', pydicom.__version__)\"\r\npydicom  1.3.0\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1022", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1022/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1022/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1022/events", "html_url": "https://github.com/pydicom/pydicom/issues/1022", "id": 547721360, "node_id": "MDU6SXNzdWU1NDc3MjEzNjA=", "number": 1022, "title": "PiP Package", "user": {"login": "thageesan", "id": 8099662, "node_id": "MDQ6VXNlcjgwOTk2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/8099662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thageesan", "html_url": "https://github.com/thageesan", "followers_url": "https://api.github.com/users/thageesan/followers", "following_url": "https://api.github.com/users/thageesan/following{/other_user}", "gists_url": "https://api.github.com/users/thageesan/gists{/gist_id}", "starred_url": "https://api.github.com/users/thageesan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thageesan/subscriptions", "organizations_url": "https://api.github.com/users/thageesan/orgs", "repos_url": "https://api.github.com/users/thageesan/repos", "events_url": "https://api.github.com/users/thageesan/events{/privacy}", "received_events_url": "https://api.github.com/users/thageesan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-09T21:02:58Z", "updated_at": "2020-01-12T11:43:55Z", "closed_at": "2020-01-12T11:43:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "@darcymason I'm in the process of updating a project.  I noticed that there are two pip packages that point to this repo (dicom & pydicom).  Is it safe to assume that the dicom package is an older version of the latest version of pydicom?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1019", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1019/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1019/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1019/events", "html_url": "https://github.com/pydicom/pydicom/issues/1019", "id": 544474811, "node_id": "MDU6SXNzdWU1NDQ0NzQ4MTE=", "number": 1019, "title": "How to create a valid dataset for writing to disk?", "user": {"login": "razorx89", "id": 15977832, "node_id": "MDQ6VXNlcjE1OTc3ODMy", "avatar_url": "https://avatars2.githubusercontent.com/u/15977832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/razorx89", "html_url": "https://github.com/razorx89", "followers_url": "https://api.github.com/users/razorx89/followers", "following_url": "https://api.github.com/users/razorx89/following{/other_user}", "gists_url": "https://api.github.com/users/razorx89/gists{/gist_id}", "starred_url": "https://api.github.com/users/razorx89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/razorx89/subscriptions", "organizations_url": "https://api.github.com/users/razorx89/orgs", "repos_url": "https://api.github.com/users/razorx89/repos", "events_url": "https://api.github.com/users/razorx89/events{/privacy}", "received_events_url": "https://api.github.com/users/razorx89/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-02T07:33:08Z", "updated_at": "2020-01-02T12:22:38Z", "closed_at": "2020-01-02T12:22:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to create writable and valid DICOMs from scratch and I think there is a little bit of confusion on how to build the dataset from scratch. The [documentation for writing a DICOM dataset](https://pydicom.github.io/pydicom/stable/auto_examples/input_output/plot_write_dicom.html) only works for such a simple case. As soon as you add pixel data you would get an error for missing `TransferSyntaxUID`.\r\n\r\n```python\r\nimport pydicom\r\nimport pydicom._storage_sopclass_uids\r\n\r\nds = pydicom.Dataset()\r\nds.MediaStorageSOPClassUID = pydicom._storage_sopclass_uids.SegmentationStorage\r\nds.MediaStorageSOPInstanceUID = pydicom.uid.generate_uid()\r\nds = pydicom.FileDataset(None, pydicom.Dataset(), file_meta=ds, is_implicit_VR=False, is_little_endian=True)\r\nds.save_as('/tmp/foo.dcm')  # success, but invalid\r\npydicom.dataset.validate_file_meta(ds.file_meta)  # error: TransferSyntaxUID is needed\r\nds.fix_meta_info()  # error: TransferSyntaxUID is needed\r\nds.TransferSyntaxUID = pydicom.uid.ExplicitVRLittleEndian  # duplication to already specified properties\r\nds.fix_meta_info()  # success\r\n```\r\nA few questions/proposals regarding this snippet:\r\n1) Wouldn't it make sense to create an empty dataset if the second argument of FileDataset is `None`? If it is `None`, further assignments will fail with \"Argument of type 'NoneType' is not iterable\".\r\n2) It would be less verbose, if the first and second argument would be `None` by default as well.\r\n3) Why is `TransferSyntaxUID` not set, since `is_implicit` and `is_little_endian` are already set? Shouldn't the properties be coupled with `TransferSyntaxUID`? Changing one of those should automatically change the `TransferSyntaxUID`.\r\n4) Shouldn't `validate_file_meta` be called when a FileDataset is constructed with a `file_meta` dataset?\r\n5) `fix_meta_info` sets the `TransferSyntaxUID`, but only handles three of four cases. `ExplicitVRLittleEndian` isn't handled and therefore the validation fails.\r\n6) It is possible to get an inconsistent state by supplying a `file_meta` dataset with `TransferSyntaxUID` set and providing different `is_implicit_vr` and `is_little_endian` values.\r\n\r\nI think calling `fix_meta_info` on a provided `file_meta` argument with correctly handling the `TransferSyntaxUID` would reduce most of the confusion. Currenty, the code feels a bit verbose and messy.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1016", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1016/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1016/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1016/events", "html_url": "https://github.com/pydicom/pydicom/issues/1016", "id": 544307628, "node_id": "MDU6SXNzdWU1NDQzMDc2Mjg=", "number": 1016, "title": "Add support for missing VRs", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-01T04:15:33Z", "updated_at": "2020-01-01T12:40:44Z", "closed_at": "2020-01-01T12:40:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Missing: OV, SV, UV\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1013", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1013/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1013/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1013/events", "html_url": "https://github.com/pydicom/pydicom/issues/1013", "id": 543998558, "node_id": "MDU6SXNzdWU1NDM5OTg1NTg=", "number": 1013, "title": "Update DICOM tags to newest standard", "user": {"login": "razorx89", "id": 15977832, "node_id": "MDQ6VXNlcjE1OTc3ODMy", "avatar_url": "https://avatars2.githubusercontent.com/u/15977832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/razorx89", "html_url": "https://github.com/razorx89", "followers_url": "https://api.github.com/users/razorx89/followers", "following_url": "https://api.github.com/users/razorx89/following{/other_user}", "gists_url": "https://api.github.com/users/razorx89/gists{/gist_id}", "starred_url": "https://api.github.com/users/razorx89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/razorx89/subscriptions", "organizations_url": "https://api.github.com/users/razorx89/orgs", "repos_url": "https://api.github.com/users/razorx89/repos", "events_url": "https://api.github.com/users/razorx89/events{/privacy}", "received_events_url": "https://api.github.com/users/razorx89/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-30T20:14:46Z", "updated_at": "2019-12-30T21:53:11Z", "closed_at": "2019-12-30T21:53:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "The DICOM data dictionary seems quite old and newer tags are missing. Could you please update it to 2019 for the next release?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1007", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1007/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1007/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1007/events", "html_url": "https://github.com/pydicom/pydicom/issues/1007", "id": 543047681, "node_id": "MDU6SXNzdWU1NDMwNDc2ODE=", "number": 1007, "title": "Warn when attempting to save unencapsulated compressed datasets", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-28T02:38:27Z", "updated_at": "2019-12-28T22:46:16Z", "closed_at": "2019-12-28T21:39:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nAnother common gotcha with saving compressed pixel data is that it first needs to be encapsulated.\r\n\r\n**Describe the solution you'd like**\r\nI think we should add a simple check when saving that looks to see whether or not Pixel Data has been encapsulated when the transfer syntax is compressed. If not then the user should get a warning (because maybe that was their intention).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1006", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1006/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1006/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1006/events", "html_url": "https://github.com/pydicom/pydicom/issues/1006", "id": 543047157, "node_id": "MDU6SXNzdWU1NDMwNDcxNTc=", "number": 1006, "title": "PixelData.is_undefined_length should be set implicitly when saving", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-28T02:34:28Z", "updated_at": "2019-12-30T17:26:57Z", "closed_at": "2019-12-30T17:26:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nA common gotcha with saving compressed data is that `PixelData.is_undefined_length` needs to be set to ``True``. \r\n\r\n**Describe the solution you'd like**\r\nI think we should do one of the following when `TransferSyntaxUID.is_compressed != PixelData.is_undefined_length`:\r\n1. Warn the user that `is_undefined_length` needs to be set correctly.\r\n2. If the transfer syntax is compressed, set `is_undefined_length` to `True` (and vice versa)\r\n\r\nI prefer option 2 since then users only have to worry about setting the transfer syntax correctly, rather than both transfer syntax and `is_undefined_length`. `is_undefined_length` is also a pydicom implementation detail rather than a DICOM issue", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1004", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1004/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1004/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1004/events", "html_url": "https://github.com/pydicom/pydicom/issues/1004", "id": 542698592, "node_id": "MDU6SXNzdWU1NDI2OTg1OTI=", "number": 1004, "title": "DicomDir raises exception if no PATIENT record found", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-27T00:08:24Z", "updated_at": "2019-12-27T07:21:17Z", "closed_at": "2019-12-27T07:21:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Describe the bug**\r\nAn exception is raised if no PATIENT record is found for a DICOMDIR, but the [DICOM Standard](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_F.3.2.2.html) for Basic Directory Storage says `DirectoryRecordSequence` contains zero or more items.\r\n\r\nIts [also possible](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_F.5.html) for a DICOMDIR to not have a PATIENT record.\r\n\r\n**Expected behavior**\r\nNo exception, should be able to read an empty DICOMDIR.\r\n\r\n**Steps To Reproduce**\r\n```python\r\nfrom pydicom import dcmread\r\nfrom pydicom.data import get_testdata_file\r\n\r\nds = dcmread(get_testdata_file('DICOMDIR'))\r\nds.DirectoryRecordSequence = []\r\nds.save_as('empty.dcm')\r\n\r\n# raises exception\r\nds = dcmread('empty.dcm')\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"../pydicom/pydicom/filereader.py\", line 877, in dcmread\r\n    force=force, specific_tags=specific_tags)\r\n  File \"../pydicom/pydicom/filereader.py\", line 767, in read_partial\r\n    is_implicit_VR, is_little_endian)\r\n  File \"../pydicom/pydicom/dicomdir.py\", line 87, in __init__\r\n    self.parse_records()\r\n  File \"../pydicom/pydicom/dicomdir.py\", line 135, in parse_records\r\n    raise InvalidDicomError('Missing PATIENT record(s) in DICOMDIR')\r\npydicom.errors.InvalidDicomError: Missing PATIENT record(s) in DICOMDIR\r\n```\r\n\r\n**Your environment**\r\nCurrent master 657ee36\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/1003", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/1003/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/1003/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/1003/events", "html_url": "https://github.com/pydicom/pydicom/issues/1003", "id": 542353181, "node_id": "MDU6SXNzdWU1NDIzNTMxODE=", "number": 1003, "title": "Saving compressed dicom file", "user": {"login": "mayafreiman", "id": 58734271, "node_id": "MDQ6VXNlcjU4NzM0Mjcx", "avatar_url": "https://avatars2.githubusercontent.com/u/58734271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mayafreiman", "html_url": "https://github.com/mayafreiman", "followers_url": "https://api.github.com/users/mayafreiman/followers", "following_url": "https://api.github.com/users/mayafreiman/following{/other_user}", "gists_url": "https://api.github.com/users/mayafreiman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mayafreiman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mayafreiman/subscriptions", "organizations_url": "https://api.github.com/users/mayafreiman/orgs", "repos_url": "https://api.github.com/users/mayafreiman/repos", "events_url": "https://api.github.com/users/mayafreiman/events{/privacy}", "received_events_url": "https://api.github.com/users/mayafreiman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-25T14:54:57Z", "updated_at": "2019-12-26T11:25:33Z", "closed_at": "2019-12-26T11:25:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that when using save_dicom() the file is being decompressed. \r\nThis was added in issue #738 \r\nThis is causing the file size to sometime be 10 times larger than the original.\r\nI tried using encapsulate to compress the file back but could not file any examples/information on how to use this feature.\r\nCan you please provide more details on it. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/999", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/999/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/999/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/999/events", "html_url": "https://github.com/pydicom/pydicom/issues/999", "id": 541360909, "node_id": "MDU6SXNzdWU1NDEzNjA5MDk=", "number": 999, "title": "Heuristic for Explicit VR acting in sequence datasets", "user": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pydicom/pydicom/milestones/4", "html_url": "https://github.com/pydicom/pydicom/milestone/4", "labels_url": "https://api.github.com/repos/pydicom/pydicom/milestones/4/labels", "id": 4352159, "node_id": "MDk6TWlsZXN0b25lNDM1MjE1OQ==", "number": 4, "title": "v1.4", "description": "", "creator": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 20, "state": "open", "created_at": "2019-05-27T14:06:35Z", "updated_at": "2020-03-24T01:50:31Z", "due_on": "2019-12-25T08:00:00Z", "closed_at": null}, "comments": 1, "created_at": "2019-12-21T19:19:40Z", "updated_at": "2019-12-21T21:00:50Z", "closed_at": "2019-12-21T21:00:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Describe the bug**\r\nThere is a check to confirm implicit VR by looking for two ascii characters and switching to explicit with a warning (#823).  It was thought this was safe because length in first data elements would not be that large.  However, in sequence item datasets this may not be true.\r\n\r\nNoted in google group conversation at https://groups.google.com/forum/#!topic/pydicom/VUmvUYmQxc0 (note that the title of that thread is not correct. that was not the problem).\r\n\r\nTest demonstrating it and fix already done - PR to follow shortly.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/998", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/998/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/998/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/998/events", "html_url": "https://github.com/pydicom/pydicom/issues/998", "id": 540788394, "node_id": "MDU6SXNzdWU1NDA3ODgzOTQ=", "number": 998, "title": "How to get encapsulated pdf from DICOM File and save as pdf  (dicom2pdf)", "user": {"login": "ERIPECH", "id": 14799333, "node_id": "MDQ6VXNlcjE0Nzk5MzMz", "avatar_url": "https://avatars3.githubusercontent.com/u/14799333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ERIPECH", "html_url": "https://github.com/ERIPECH", "followers_url": "https://api.github.com/users/ERIPECH/followers", "following_url": "https://api.github.com/users/ERIPECH/following{/other_user}", "gists_url": "https://api.github.com/users/ERIPECH/gists{/gist_id}", "starred_url": "https://api.github.com/users/ERIPECH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ERIPECH/subscriptions", "organizations_url": "https://api.github.com/users/ERIPECH/orgs", "repos_url": "https://api.github.com/users/ERIPECH/repos", "events_url": "https://api.github.com/users/ERIPECH/events{/privacy}", "received_events_url": "https://api.github.com/users/ERIPECH/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-20T06:10:11Z", "updated_at": "2019-12-20T12:47:16Z", "closed_at": "2019-12-20T12:47:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could you please provide sample code how to extract encapsulated pdf and save it as document. - ((Code in https://pydicom.github.io/pydicom/stable/_modules/pydicom/filereader.html didnt helped me) - Many thanks - BR Erich\r\n\r\nhere is a sample file: https://ufile.io/7sxwrvkg\r\n\r\nImportant: I want to READ the Dicom File (and not to write  DICOM)!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/994", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/994/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/994/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/994/events", "html_url": "https://github.com/pydicom/pydicom/issues/994", "id": 538316019, "node_id": "MDU6SXNzdWU1MzgzMTYwMTk=", "number": 994, "title": "Memory leaks when accessing sequence tags with Dataset.__getattr__.", "user": {"login": "bestrauc", "id": 6814712, "node_id": "MDQ6VXNlcjY4MTQ3MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6814712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bestrauc", "html_url": "https://github.com/bestrauc", "followers_url": "https://api.github.com/users/bestrauc/followers", "following_url": "https://api.github.com/users/bestrauc/following{/other_user}", "gists_url": "https://api.github.com/users/bestrauc/gists{/gist_id}", "starred_url": "https://api.github.com/users/bestrauc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bestrauc/subscriptions", "organizations_url": "https://api.github.com/users/bestrauc/orgs", "repos_url": "https://api.github.com/users/bestrauc/repos", "events_url": "https://api.github.com/users/bestrauc/events{/privacy}", "received_events_url": "https://api.github.com/users/bestrauc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydicom/pydicom/milestones/4", "html_url": "https://github.com/pydicom/pydicom/milestone/4", "labels_url": "https://api.github.com/repos/pydicom/pydicom/milestones/4/labels", "id": 4352159, "node_id": "MDk6TWlsZXN0b25lNDM1MjE1OQ==", "number": 4, "title": "v1.4", "description": "", "creator": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 20, "state": "open", "created_at": "2019-05-27T14:06:35Z", "updated_at": "2020-03-24T01:50:31Z", "due_on": "2019-12-25T08:00:00Z", "closed_at": null}, "comments": 3, "created_at": "2019-12-16T10:19:12Z", "updated_at": "2019-12-19T21:41:14Z", "closed_at": "2019-12-19T21:41:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nAccessing sequences via `Dataset.__getattr__` seems to leak memory. The bug occurred for me when I was processing many DICOMs and manipulating some tags contained in sequences and each leaked a bit of memory, ultimately crashing the process.\r\n\r\n**Expected behavior**\r\nMemory should not leak. It works correctly when you replace the `__getattr__` call with `__getitem__` (by manually constructing the necessary tag beforehand).\r\n\r\nWithout being an expert in the codebase, one difference I think that could explain it is that `__getattr__` sets `value.parent = self` for sequences while `__getitem__` doesn't seem to do that. Maybe this loop of references somehow confuses Python's garbage collection?\r\n\r\n**Steps To Reproduce**\r\nThis increases the memory consumption of the Python process by about 700 MB on my machine. The DICOM file I've tested it with is 27MB and has one item in `SourceImageSequence`. Note that the memory leak plateaus after a while in this example, maybe because it's the same file. In my actual workflow when iterating over many different files, the process filled all memory and crashed.\r\n\r\n```python\r\nimport pydicom\r\nfor i in range(100):\r\n  dcm = pydicom.dcmread(\"my_dicom.dcm\")\r\n  test = dcm.SourceImageSequence\r\n```\r\n\r\nFor comparison, this keeps the memory constant. `(0x0008, 0x2112)` is `SourceImageSequence`: \r\n\r\n```python\r\nimport pydicom\r\nimport pydicom.tag\r\nfor i in range(100):\r\n  dcm = pydicom.dcmread(\"my_dicom.dcm\")\r\n  test = dcm[pydicom.tag.TupleTag((0x0008, 0x2112))]\r\n```\r\n\r\n**Your environment**\r\n\r\n```bash\r\nLinux-4.15.0-72-generic-x86_64-with-Ubuntu-18.04-bionic\r\nPython  3.6.8 (default, Jan 14 2019, 11:02:34)\r\npydicom  1.3.0\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/988", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/988/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/988/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/988/events", "html_url": "https://github.com/pydicom/pydicom/issues/988", "id": 535310766, "node_id": "MDU6SXNzdWU1MzUzMTA3NjY=", "number": 988, "title": "Dicom Attribute Type missing from dictionary", "user": {"login": "NPann", "id": 6107897, "node_id": "MDQ6VXNlcjYxMDc4OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6107897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NPann", "html_url": "https://github.com/NPann", "followers_url": "https://api.github.com/users/NPann/followers", "following_url": "https://api.github.com/users/NPann/following{/other_user}", "gists_url": "https://api.github.com/users/NPann/gists{/gist_id}", "starred_url": "https://api.github.com/users/NPann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NPann/subscriptions", "organizations_url": "https://api.github.com/users/NPann/orgs", "repos_url": "https://api.github.com/users/NPann/repos", "events_url": "https://api.github.com/users/NPann/events{/privacy}", "received_events_url": "https://api.github.com/users/NPann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-09T20:54:59Z", "updated_at": "2019-12-09T23:06:50Z", "closed_at": "2019-12-09T23:06:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI was wondering if there were any plan to add the Type of the Dicom attribute to the pydicom dictionary. \r\n\r\n**Problem**\r\nWhen trying to write a de-identifier following Dicom standard, one needs to know the Dicom Type of the attribute (e.g. depending on Type, certain attributes cannot be remove, some needs to be replace with a zero lenght value, other with a non-zero length value, see http://dicom.nema.org/medical/dicom/current/output/html/part15.html#table_E.1-1 for full description). The Type of the attribute is currently not stored in the pydicom dictionary.\r\n\r\n**Possible solution**\r\nExtend pydicom dictionary to store Type attribute. This info is stored in NEMA part 3 at the module level (e.g. http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.6.html#sect_C.7.6.1)\r\nXML could be parsed the same way (I guess?) from docbook http://dicom.nema.org/medical/dicom/current/source/docbook/part06/part06.xml.\r\n\r\nAny thoughts and/or foreseen issue in the implementation? \r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/986", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/986/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/986/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/986/events", "html_url": "https://github.com/pydicom/pydicom/issues/986", "id": 532671908, "node_id": "MDU6SXNzdWU1MzI2NzE5MDg=", "number": 986, "title": "How to: from 2 DICOM files take 2nd one and make it overlay for the first?", "user": {"login": "gladomat", "id": 17472969, "node_id": "MDQ6VXNlcjE3NDcyOTY5", "avatar_url": "https://avatars1.githubusercontent.com/u/17472969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gladomat", "html_url": "https://github.com/gladomat", "followers_url": "https://api.github.com/users/gladomat/followers", "following_url": "https://api.github.com/users/gladomat/following{/other_user}", "gists_url": "https://api.github.com/users/gladomat/gists{/gist_id}", "starred_url": "https://api.github.com/users/gladomat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gladomat/subscriptions", "organizations_url": "https://api.github.com/users/gladomat/orgs", "repos_url": "https://api.github.com/users/gladomat/repos", "events_url": "https://api.github.com/users/gladomat/events{/privacy}", "received_events_url": "https://api.github.com/users/gladomat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-04T13:06:33Z", "updated_at": "2019-12-06T14:10:47Z", "closed_at": "2019-12-04T13:49:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to add an overlay to an already exhisting DICOM file. The idea is to have an original image, a segmantation of the original, and to add an overlay to the original image from the segmentation. Both images have the same dimension. I can't seem to be able to do it. The result is a garbled repeating pattern. I don't quite understand what I'm doing, so this is just an attempt. Any help is appreciated.\r\n\r\nHere's a little bit of code I tried.\r\n\r\n```\r\nimport numpy as np\r\nimport pydicom\r\nimport matplotlib.pyplot as plt\r\n\r\norig = pydicom.dcmread(\"IM-0001-0084.dcm\")\r\nover = pydicom.dcmread(\"segm_IM-0001-0084.dcm\")\r\n\r\n# original\r\nim_data_orig = orig[0x7fe00010].value\r\nrows_orig = orig[0x00280010].value\r\ncols_orig = orig[0x00280011].value\r\n\r\n# segmented\r\nim_data_over = over.pixel_array\r\n# binarize segmented\r\nim_data_over = np.where(im_data_over > 0, 1, 0)\r\nim_data_over = im_data_over.astype('uint8')\r\nim_data_over_bytes = im_data_over.tobytes()\r\ndescrip = 'segmentation'\r\n\r\n# Overlay fields\r\n# filling in only Type 1 (mandatory) fields\r\norig.add_new([0x6000, 0x0010], 'US', rows_orig)  # Overlay Rows\r\norig.add_new([0x6000, 0x0011], 'US', cols_orig)  # Overlay Columns\r\norig.add_new([0x6000, 0x0015], 'US', 1)          # Overlay number of frames\r\norig.add_new([0x6000, 0x0022], 'LO', descrip)    # Overlay description\r\norig.add_new([0x6000, 0x0040], 'CS', 'G')        # Overlay Type ('R','G'), ROI or Graphics\r\norig.add_new([0x6000, 0x0050], 'SS', [1, 1])     # Overlay Origin\r\norig.add_new([0x6000, 0x0051], 'US', 1)          # Image Frame Origin \r\norig.add_new([0x6000, 0x0100], 'US', 1)          # Overlay Bits Allocated, mandatory fixed value = 1!!\r\norig.add_new([0x6000, 0x0102], 'US', 0)          # Overlay Bit Position, mandatory fixed value = 0!!\r\norig.add_new([0x6000, 0x1001], 'CS', 'mask')     # Overlay Activation Layer\r\norig.add_new([0x6000, 0x3000], 'OW', im_data_over_bytes)  # PixelData\r\n\r\norig.save_as(\"orig_with_overlay.dcm\")\r\n```\r\nThe result looks like this:\r\n![image](https://user-images.githubusercontent.com/17472969/70144485-4ff01780-169e-11ea-9448-5cc47b9418fd.png)\r\n\r\nEdit: removed DICOMs. Sorry, they're not mine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/981", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/981/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/981/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/981/events", "html_url": "https://github.com/pydicom/pydicom/issues/981", "id": 530583374, "node_id": "MDU6SXNzdWU1MzA1ODMzNzQ=", "number": 981, "title": "AttributeError while reading Dicomdir", "user": {"login": "mrbean-bremen", "id": 4623701, "node_id": "MDQ6VXNlcjQ2MjM3MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4623701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrbean-bremen", "html_url": "https://github.com/mrbean-bremen", "followers_url": "https://api.github.com/users/mrbean-bremen/followers", "following_url": "https://api.github.com/users/mrbean-bremen/following{/other_user}", "gists_url": "https://api.github.com/users/mrbean-bremen/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrbean-bremen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrbean-bremen/subscriptions", "organizations_url": "https://api.github.com/users/mrbean-bremen/orgs", "repos_url": "https://api.github.com/users/mrbean-bremen/repos", "events_url": "https://api.github.com/users/mrbean-bremen/events{/privacy}", "received_events_url": "https://api.github.com/users/mrbean-bremen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "mrbean-bremen", "id": 4623701, "node_id": "MDQ6VXNlcjQ2MjM3MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4623701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrbean-bremen", "html_url": "https://github.com/mrbean-bremen", "followers_url": "https://api.github.com/users/mrbean-bremen/followers", "following_url": "https://api.github.com/users/mrbean-bremen/following{/other_user}", "gists_url": "https://api.github.com/users/mrbean-bremen/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrbean-bremen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrbean-bremen/subscriptions", "organizations_url": "https://api.github.com/users/mrbean-bremen/orgs", "repos_url": "https://api.github.com/users/mrbean-bremen/repos", "events_url": "https://api.github.com/users/mrbean-bremen/events{/privacy}", "received_events_url": "https://api.github.com/users/mrbean-bremen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mrbean-bremen", "id": 4623701, "node_id": "MDQ6VXNlcjQ2MjM3MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4623701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrbean-bremen", "html_url": "https://github.com/mrbean-bremen", "followers_url": "https://api.github.com/users/mrbean-bremen/followers", "following_url": "https://api.github.com/users/mrbean-bremen/following{/other_user}", "gists_url": "https://api.github.com/users/mrbean-bremen/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrbean-bremen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrbean-bremen/subscriptions", "organizations_url": "https://api.github.com/users/mrbean-bremen/orgs", "repos_url": "https://api.github.com/users/mrbean-bremen/repos", "events_url": "https://api.github.com/users/mrbean-bremen/events{/privacy}", "received_events_url": "https://api.github.com/users/mrbean-bremen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-11-30T14:07:57Z", "updated_at": "2019-12-01T19:26:31Z", "closed_at": "2019-12-01T19:26:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a spin-off of #9.\r\n\r\n_@dskwarek commented on 30 Jul_:\r\n\r\nI have got the following issue when I try to read dicom dir file.  I can open it with Radiant DICOM viewer without problems. \r\nTraceback (most recent call last):\r\n  File \"<root>/PycharmProjects/dicom/dicom.py\", line 11, in <module>\r\n    dicom_dir = read_dicomdir(filepath)\r\n  File \"<root>\\Anaconda3\\envs\\aneurysm_train\\lib\\site-packages\\pydicom\\filereader.py\", line 883, in read_dicomdir\r\n    ds = dcmread(filename)\r\n  File \"<root>\\Anaconda3\\envs\\aneurysm_train\\lib\\site-packages\\pydicom\\filereader.py\", line 850, in dcmread\r\n    force=force, specific_tags=specific_tags)\r\n  File \"<root>\\Anaconda3\\envs\\aneurysm_train\\lib\\site-packages\\pydicom\\filereader.py\", line 741, in read_partial\r\n    is_implicit_VR, is_little_endian)\r\n  File \"<root>\\Anaconda3\\envs\\aneurysm_train\\lib\\site-packages\\pydicom\\dicomdir.py\", line 57, in __init__\r\n    self.parse_records()\r\n  File \"<root>\\Anaconda3\\envs\\aneurysm_train\\lib\\site-packages\\pydicom\\dicomdir.py\", line 93, in parse_records\r\n    child_offset = record.OffsetOfReferencedLowerLevelDirectoryEntity\r\n  File \"<root>\\Anaconda3\\envs\\aneurysm_train\\lib\\site-packages\\pydicom\\dataset.py\", line 745, in __getattr__\r\n    return object.__getattribute__(self, name)\r\nAttributeError: 'Dataset' object has no attribute 'OffsetOfReferencedLowerLevelDirectoryEntity'\r\n\r\n_@mrbean-bremen commented on 30 Jul_:\r\n\r\nHm, `OffsetOfReferencedLowerLevelDirectoryEntity` is a type 1 attribute that shall be present, but we probably shall check for its existence anyway before accessing it.\r\nCan you share the DICOMDIR file in question?\r\nIf this is not possible, we can probably just manipulate a test file by removing some of the tags... should be sufficient to test a fix.\r\n\r\n_@mrbean-bremen commented on 31 Jul:_\r\n\r\nOk, I have trouble to create a valid DICOMDIR with missing tags. Can you possible provide an anonymized version of a DICOMDIR file? (or probably the DICOMDIR of anonymized data). I would rather make sure my assumptions about the data structure are correct before attempting a fix...\r\n\r\n_@dskwarek commented on 31 Jul:_\r\n\r\nI will try to anonymize it and and will send when ready.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/978", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/978/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/978/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/978/events", "html_url": "https://github.com/pydicom/pydicom/issues/978", "id": 529105910, "node_id": "MDU6SXNzdWU1MjkxMDU5MTA=", "number": 978, "title": "how to convert OB array to numpy array?", "user": {"login": "ystsaan", "id": 39684363, "node_id": "MDQ6VXNlcjM5Njg0MzYz", "avatar_url": "https://avatars0.githubusercontent.com/u/39684363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ystsaan", "html_url": "https://github.com/ystsaan", "followers_url": "https://api.github.com/users/ystsaan/followers", "following_url": "https://api.github.com/users/ystsaan/following{/other_user}", "gists_url": "https://api.github.com/users/ystsaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ystsaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ystsaan/subscriptions", "organizations_url": "https://api.github.com/users/ystsaan/orgs", "repos_url": "https://api.github.com/users/ystsaan/repos", "events_url": "https://api.github.com/users/ystsaan/events{/privacy}", "received_events_url": "https://api.github.com/users/ystsaan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-27T04:21:57Z", "updated_at": "2019-11-28T07:05:50Z", "closed_at": "2019-11-28T07:05:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI read a dicom file by pydicom. The `dataset.pixel_array.shape `output `(708, 1016, 3)` but when I tried to access the data stored in the dicom file by its tag(7fe0, 0010) using `dataset[0x7fe0,0x0010][0].value`, pycharm output strange characters as follows:\r\n```\r\n\u0001 \ufffd\ufffd\ufffd\ufffd \u0010JFIF \u0001\u0001  \u0001 \u0001  \ufffd\ufffd -Intel(R) JPEG Library, version [2.0.18.50] \ufffd\ufffd C \u0002\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0001\u0001\u0002\u0002\u0002\u0002\u0002\u0004\u0003\u0002\u0002\u0002\u0002\u0005\u0004\u0004\u0003\u0004\u0006\u0005\u0006\u0006\u0006\u0005\u0006\u0006\u0006\u0007\u0006\u0007\t\u0007\u0006\t\r\n...\r\n```\r\n\r\nPixel Data part in dataset is like:\r\n`(7fe0, 0010) Pixel Data                          OB: Array of 69112 elements`\r\nAnd there is discrepency between 2157984(708x1016x3) and the number of elements in the OB Array above in Pixel Data. I know it might be tranfer syntax which caused this discrepency but how to convert the OB array stored in Pixel Data to the correct numpy array with shape` (708, 1016, 3)`, i.e., which function to use on the  `dataset[0x7fe0,0x0010][0].value` to convert it to the target numpy array?\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/977", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/977/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/977/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/977/events", "html_url": "https://github.com/pydicom/pydicom/issues/977", "id": 528974187, "node_id": "MDU6SXNzdWU1Mjg5NzQxODc=", "number": 977, "title": "Spacing in DICOM keys", "user": {"login": "IntegralProgrammer", "id": 5349728, "node_id": "MDQ6VXNlcjUzNDk3Mjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5349728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntegralProgrammer", "html_url": "https://github.com/IntegralProgrammer", "followers_url": "https://api.github.com/users/IntegralProgrammer/followers", "following_url": "https://api.github.com/users/IntegralProgrammer/following{/other_user}", "gists_url": "https://api.github.com/users/IntegralProgrammer/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntegralProgrammer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntegralProgrammer/subscriptions", "organizations_url": "https://api.github.com/users/IntegralProgrammer/orgs", "repos_url": "https://api.github.com/users/IntegralProgrammer/repos", "events_url": "https://api.github.com/users/IntegralProgrammer/events{/privacy}", "received_events_url": "https://api.github.com/users/IntegralProgrammer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-26T21:11:56Z", "updated_at": "2019-11-27T22:50:49Z", "closed_at": "2019-11-27T22:50:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a DICOM image (such as https://github.com/aim-sk/aim-platform/blob/master/image-archive/images/sample/MR-MONO2-16-knee.dcm) is opened and the `iterall()` method is called on it, fields with spaced words are returned (ie. `Instance Number`). Yet, when the `get` method is called with these names, they return None. If the space is removed (ie. `InstanceNumber`) proper data is returned.\r\n\r\nUsing the provided DICOM image, the following demonstrates this issue;\r\n\r\n```python\r\nimport pydicom\r\n\r\ntest_dcm = pydicom.dcmread(\"MR-MONO2-16-knee.dcm\")\r\nfor field in test_dcm.iterall():\r\n  if field.name in [\"Instance Number\", \"InstanceNumber\"]:\r\n    print(field.name)\r\n\r\n#Only \"Instance Number\" is printed\r\n\r\nprint(test_dcm.get(\"Instance Number\"))\r\n#Prints None\r\n\r\nprint(test_dcm.get(\"InstanceNumber\"))\r\n#Prints 9\r\n```\r\n\r\nIs this expected behavior, or is there something that can be done so that the value obtained from `field.name` can be passed to the `get()` method?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/976", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/976/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/976/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/976/events", "html_url": "https://github.com/pydicom/pydicom/issues/976", "id": 528890777, "node_id": "MDU6SXNzdWU1Mjg4OTA3Nzc=", "number": 976, "title": "Pydicom release 1.4", "user": {"login": "mrbean-bremen", "id": 4623701, "node_id": "MDQ6VXNlcjQ2MjM3MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4623701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrbean-bremen", "html_url": "https://github.com/mrbean-bremen", "followers_url": "https://api.github.com/users/mrbean-bremen/followers", "following_url": "https://api.github.com/users/mrbean-bremen/following{/other_user}", "gists_url": "https://api.github.com/users/mrbean-bremen/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrbean-bremen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrbean-bremen/subscriptions", "organizations_url": "https://api.github.com/users/mrbean-bremen/orgs", "repos_url": "https://api.github.com/users/mrbean-bremen/repos", "events_url": "https://api.github.com/users/mrbean-bremen/events{/privacy}", "received_events_url": "https://api.github.com/users/mrbean-bremen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 644270811, "node_id": "MDU6TGFiZWw2NDQyNzA4MTE=", "url": "https://api.github.com/repos/pydicom/pydicom/labels/housekeeping", "name": "housekeeping", "color": "f9d0c4", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pydicom/pydicom/milestones/4", "html_url": "https://github.com/pydicom/pydicom/milestone/4", "labels_url": "https://api.github.com/repos/pydicom/pydicom/milestones/4/labels", "id": 4352159, "node_id": "MDk6TWlsZXN0b25lNDM1MjE1OQ==", "number": 4, "title": "v1.4", "description": "", "creator": {"login": "darcymason", "id": 61110, "node_id": "MDQ6VXNlcjYxMTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/61110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darcymason", "html_url": "https://github.com/darcymason", "followers_url": "https://api.github.com/users/darcymason/followers", "following_url": "https://api.github.com/users/darcymason/following{/other_user}", "gists_url": "https://api.github.com/users/darcymason/gists{/gist_id}", "starred_url": "https://api.github.com/users/darcymason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darcymason/subscriptions", "organizations_url": "https://api.github.com/users/darcymason/orgs", "repos_url": "https://api.github.com/users/darcymason/repos", "events_url": "https://api.github.com/users/darcymason/events{/privacy}", "received_events_url": "https://api.github.com/users/darcymason/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 20, "state": "open", "created_at": "2019-05-27T14:06:35Z", "updated_at": "2020-03-24T01:50:31Z", "due_on": "2019-12-25T08:00:00Z", "closed_at": null}, "comments": 36, "created_at": "2019-11-26T18:08:42Z", "updated_at": "2020-03-24T01:50:31Z", "closed_at": "2020-03-24T01:50:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The 1.4 release is scheduled for December, so we may start to prepare it, especially regarding the issues to be fixed for the release. \r\n\r\n### Release check list ([more information](https://github.com/pydicom/pydicom/wiki/Pydicom-Release-Checklist))\r\n- [x] go through issues and close, assign to this version, or assign to future versions\r\n- [x] go through PRs to see which can be pulled in before release\r\n- [x] update Release Notes by going through revision history\r\n- [x] update the version in `pydicom/_version.py` to release\r\n- [x] check in the changes and create a branch and a GitHub release\r\n- [x] get the new DOI at https://zenodo.org/account/settings/github/repository/pydicom/pydicom),\r\n      and update the README.md in the release branch\r\n- [x] publish on PyPi\r\n- [x] update documentation version on GitHub Pages\r\n- [x] update the version in `pydicom/_version.py` in master to next development version (major.minor.0.dev0),\r\n      and update the DOI in the README.md\r\n- [x] merge auto-generated PR in conda-forge pydicom-feedstock\r\n- [ ] announce on pydicom google group\r\n\r\n### List of issues tagged for 1.4 release \r\n(with my usual 2 \u20ac cents added)\r\n- [x] ~#881 File_meta - there is ongoing work on that in #885 by @darcymason~ v2.0\r\n- [x] ~#148 Error when write dicom with Ironpython: this is difficult without pytest working there, not sure who can handle this~ - closed as not a bug\r\n- [x] #277 Programmatically Find Corrupt Files: this is about propagating an EOF exception in strict mode, trivial fix if wanted :heavy_check_mark:\r\n- [x] #285 Document use of Datasets without files: probably just another small example in the documentation, can be easily done :heavy_check_mark:\r\n- [x] #456 performance/time_tests has hardcoded paths: not really important, best done by @darcymason as he uses this code, but milestone can easily be moved :heavy_check_mark: \r\n- [x] #483 Difference of data_element_generator in filereader and util.leandread: this needs only a docstring update, so can be done easily :heavy_check_mark:\r\n- [x] #537 Choose image handlers explicitly: given the trouble with different handlers, this would be helpful, I think - @darcymason, can you check if your last suggestion is still valid?  :heavy_check_mark:\r\n- [x]  #685 Generators in encaps don't handle single fragment per frame correctly with no BOT value - there is a rather old PR #688 - handled by @scaramallion - new PR #997 \u2714\ufe0f \r\n- [x] #693 Wrong jpeg 2000 image from pillow handler - PR #1001 \u2714\ufe0f \r\n- [x] ~#790 Clarify pydicom-contrib versus examples in pydicom: this is a request for discussion, that makes sense, but is not relevant for the release IMHO~ - removed milestone\r\n- [x] #822 Handling DICOMDIR files with records in reverse-hierarchical order: trivial fix, ~I actually did this some time ago~ - confused this with another issue, but the fix has been provided, it is merely a matter of finding/generating test data, maybe I will have a look :heavy_check_mark: \r\n- [x] ~#826 Wrong RGB values when using pixel_array: unclear, probably a Pillow issue, and missing feedback - would remove this from the list~ addressed via documentation - s\r\n- [x] #848 Dicomdir should warn if not explicit VR little endian - easily done :heavy_check_mark:\r\n- [x] PR #824 / #1012 Implementation of structured reporting \u2714\ufe0f \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/975", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/975/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/975/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/975/events", "html_url": "https://github.com/pydicom/pydicom/issues/975", "id": 526943401, "node_id": "MDU6SXNzdWU1MjY5NDM0MDE=", "number": 975, "title": "Can not identify image pixel_array", "user": {"login": "doraemonlei", "id": 19258114, "node_id": "MDQ6VXNlcjE5MjU4MTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/19258114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doraemonlei", "html_url": "https://github.com/doraemonlei", "followers_url": "https://api.github.com/users/doraemonlei/followers", "following_url": "https://api.github.com/users/doraemonlei/following{/other_user}", "gists_url": "https://api.github.com/users/doraemonlei/gists{/gist_id}", "starred_url": "https://api.github.com/users/doraemonlei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doraemonlei/subscriptions", "organizations_url": "https://api.github.com/users/doraemonlei/orgs", "repos_url": "https://api.github.com/users/doraemonlei/repos", "events_url": "https://api.github.com/users/doraemonlei/events{/privacy}", "received_events_url": "https://api.github.com/users/doraemonlei/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-22T02:05:26Z", "updated_at": "2019-12-13T01:25:57Z", "closed_at": "2019-12-13T01:25:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to procure the pixel_array while trying to add MRI/CT slices to an array, and I'm getting an error that tells me that the image file is not being identified.\r\n\r\nThis is the line where it's erroring out:\r\nds.pixel_array\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nOSError                                   Traceback (most recent call last)\r\ne:\\workspace\\env_lung\\lib\\site-packages\\pydicom\\pixel_data_handlers\\pillow_handler.py in get_pixeldata(dicom_dataset)\r\n    196                 fio = io.BytesIO(pixel_data)\r\n--> 197                 decompressed_image = Image.open(fio)\r\n    198             except IOError as e:\r\n\r\ne:\\workspace\\env_lung\\lib\\site-packages\\PIL\\Image.py in open(fp, mode)\r\n   2817         warnings.warn(message)\r\n-> 2818     raise IOError(\"cannot identify image file %r\" % (filename if filename else fp))\r\n   2819 \r\n\r\nOSError: cannot identify image file <_io.BytesIO object at 0x00000293FE022B48>\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nNotImplementedError                       Traceback (most recent call last)\r\n<ipython-input-17-967c46e3e5fc> in <module>\r\n----> 1 ds.pixel_array\r\n\r\ne:\\workspace\\env_lung\\lib\\site-packages\\pydicom\\dataset.py in pixel_array(self)\r\n   1360             The Pixel Data (7FE0,0010) as a NumPy ndarray.\r\n   1361         \"\"\"\r\n-> 1362         self.convert_pixel_data()\r\n   1363         return self._pixel_array\r\n   1364 \r\n\r\ne:\\workspace\\env_lung\\lib\\site-packages\\pydicom\\dataset.py in convert_pixel_data(self)\r\n   1306         )\r\n   1307 \r\n-> 1308         raise last_exception\r\n   1309 \r\n   1310     def decompress(self):\r\n\r\ne:\\workspace\\env_lung\\lib\\site-packages\\pydicom\\dataset.py in convert_pixel_data(self)\r\n   1274             try:\r\n   1275                 # Use the handler to get a 1D numpy array of the pixel data\r\n-> 1276                 arr = handler.get_pixeldata(self)\r\n   1277                 self._pixel_array = reshape_pixel_array(self, arr)\r\n   1278 \r\n\r\ne:\\workspace\\env_lung\\lib\\site-packages\\pydicom\\pixel_data_handlers\\pillow_handler.py in get_pixeldata(dicom_dataset)\r\n    197                 decompressed_image = Image.open(fio)\r\n    198             except IOError as e:\r\n--> 199                 raise NotImplementedError(e.strerror)\r\n    200             UncompressedPixelData.extend(decompressed_image.tobytes())\r\n    201     except Exception:\r\n\r\nNotImplementedError: None\r\n```\r\n\r\n\r\n\r\n**Steps To Reproduce**\r\nHow to install GDCM in win10\uff1f\r\n\r\n**Your environment**\r\nWindows-10-10.0.17134-SP0\r\nPython  3.6.6 (v3.6.6:4cf1f54eb7, Jun 27 2018, 03:37:03) [MSC v.1900 64 bit (AMD64)]\r\npydicom  1.3.0\r\nAny help would be greatly appreciated. This is numpy code on a jupyter notebook.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/973", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/973/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/973/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/973/events", "html_url": "https://github.com/pydicom/pydicom/issues/973", "id": 523309779, "node_id": "MDU6SXNzdWU1MjMzMDk3Nzk=", "number": 973, "title": "test failure: TestWriteFile.testListItemWriteBack for python 3.8", "user": {"login": "hubutui", "id": 2948593, "node_id": "MDQ6VXNlcjI5NDg1OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2948593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hubutui", "html_url": "https://github.com/hubutui", "followers_url": "https://api.github.com/users/hubutui/followers", "following_url": "https://api.github.com/users/hubutui/following{/other_user}", "gists_url": "https://api.github.com/users/hubutui/gists{/gist_id}", "starred_url": "https://api.github.com/users/hubutui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hubutui/subscriptions", "organizations_url": "https://api.github.com/users/hubutui/orgs", "repos_url": "https://api.github.com/users/hubutui/repos", "events_url": "https://api.github.com/users/hubutui/events{/privacy}", "received_events_url": "https://api.github.com/users/hubutui/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 63501232, "node_id": "MDU6TGFiZWw2MzUwMTIzMg==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-15T07:47:01Z", "updated_at": "2019-11-16T11:54:15Z", "closed_at": "2019-11-16T11:54:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n`TestWriteFile.testListItemWriteBack` fails for python 3.8 on ArchLinux\r\n\r\n**Steps To Reproduce**\r\n1. An ArchLinux environment with `devtools` installed.\r\n2. download [PKGBUILD](https://github.com/archlinuxcn/repo/blob/master/archlinuxcn/python-pydicom/PKGBUILD)\r\n3. run `extra-x86_64-build`.\r\n\r\n**Your environment**\r\nPlease run the following and paste the output.\r\n```bash\r\n$ python -c \"import platform; print(platform.platform())\"\r\n$ python -c \"import sys; print('Python ', sys.version)\"\r\n$ python -c \"import pydicom; print('pydicom ', pydicom.__version__)\"\r\n```\r\n```\r\nLinux-5.3.11-arch1-1-x86_64-with-glibc2.2.5\r\nPython  3.8.0 (default, Oct 23 2019, 18:51:26) \r\n[GCC 9.2.0]\r\n```\r\npydicom 1.3.0. The complete build log: [python-pydicom.log](https://github.com/pydicom/pydicom/files/3850327/python-pydicom.log)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/971", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/971/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/971/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/971/events", "html_url": "https://github.com/pydicom/pydicom/issues/971", "id": 521029673, "node_id": "MDU6SXNzdWU1MjEwMjk2NzM=", "number": 971, "title": "Dataset.from_json does not pass bulk_data_uri_handler to DataElement.from_json", "user": {"login": "kwijk", "id": 12728041, "node_id": "MDQ6VXNlcjEyNzI4MDQx", "avatar_url": "https://avatars2.githubusercontent.com/u/12728041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwijk", "html_url": "https://github.com/kwijk", "followers_url": "https://api.github.com/users/kwijk/followers", "following_url": "https://api.github.com/users/kwijk/following{/other_user}", "gists_url": "https://api.github.com/users/kwijk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwijk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwijk/subscriptions", "organizations_url": "https://api.github.com/users/kwijk/orgs", "repos_url": "https://api.github.com/users/kwijk/repos", "events_url": "https://api.github.com/users/kwijk/events{/privacy}", "received_events_url": "https://api.github.com/users/kwijk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-11T15:30:51Z", "updated_at": "2019-11-19T12:55:21Z", "closed_at": "2019-11-19T12:55:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI need to convert dicomweb based json to pydicom dataset. The json contains BulkURI to a server storing them. I can pass a bulk_data_uri_handler to pydicom.Dataset.from_json(), but it is not used. \r\n\r\n**Expected behavior**\r\nThe bulkdata reader is used to download to bulk data.\r\n\r\n**Steps To Reproduce**\r\n```\r\nfrom pydicom import Dataset, DataElement, tag\r\nimport json\r\n\r\ndef bulk_data_reader(value):\r\n    print('download url: {}'.format(value))\r\n\r\ndef test1(self):\r\n    json_data = {\"00081190\": {\"vr\": \"UT\",\"Value\": [\"https://a.dummy.url\"]}}\r\n\r\n    # does not pass on bulk_data_reader\r\n    ds = Dataset().from_json(json.dumps(json_data), bulk_data_reader)\r\n\r\n    DataElement(tag.Tag(0x00081190), 'UT', 'https://a.dummy.url').from_json(\r\n        ds,\r\n        tag=tag.Tag(0x00081190),\r\n        vr='UT',\r\n        value='https://another.dummy.url',\r\n        value_key='BulkDataURI',\r\n        bulk_data_uri_handler=bulk_data_reader)\r\n```\r\n\r\nThe fix should be very easy. In Dataset.from_json pass the bulk data reader object to the call to DataElement.\r\n\r\n**Your environment**\r\npydicom 1.3.0, python 3.7, ubuntu 19.10\r\n\r\n```bash\r\n$ python -c \"import platform; print(platform.platform())\"\r\nLinux-5.3.0-19-generic-x86_64-with-Ubuntu-19.10-eoan\r\n\r\n$ python -c \"import sys; print('Python ', sys.version)\"\r\nPython  3.7.3 (default, Apr  3 2019, 05:39:12) \r\n[GCC 8.3.0]\r\n\r\n$ python -c \"import pydicom; print('pydicom ', pydicom.__version__)\"\r\npydicom  1.3.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/970", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/970/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/970/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/970/events", "html_url": "https://github.com/pydicom/pydicom/issues/970", "id": 519617688, "node_id": "MDU6SXNzdWU1MTk2MTc2ODg=", "number": 970, "title": "Possible convert failure due to strict check", "user": {"login": "iPsych", "id": 28276515, "node_id": "MDQ6VXNlcjI4Mjc2NTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/28276515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iPsych", "html_url": "https://github.com/iPsych", "followers_url": "https://api.github.com/users/iPsych/followers", "following_url": "https://api.github.com/users/iPsych/following{/other_user}", "gists_url": "https://api.github.com/users/iPsych/gists{/gist_id}", "starred_url": "https://api.github.com/users/iPsych/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iPsych/subscriptions", "organizations_url": "https://api.github.com/users/iPsych/orgs", "repos_url": "https://api.github.com/users/iPsych/repos", "events_url": "https://api.github.com/users/iPsych/events{/privacy}", "received_events_url": "https://api.github.com/users/iPsych/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-08T02:12:13Z", "updated_at": "2019-12-07T05:24:22Z", "closed_at": "2019-12-07T05:24:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "For same fMRI dicom series acquired from Siemens scanner, below error shows up, in both 1.1, 1.3, 1.4_dev compiled from source. \r\n\r\n```\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/pydicom/dataset.py\", line 816, in __getitem__\r\nKeyError: (0029, 1020)\r\n```\r\n\r\nI guess it's from strict dicom check, since, dcm2nii also shows log.\r\nIt seems some DICOM metadata was disappeared during the image saved and extracted from hospital image server. Is there any possibility to 'loosen' the checking to proceed?\r\n\r\n```\r\nChris Rorden's dcm2nii :: 1JUNE2015 32bit BSD License\r\nConverting ...\r\nData will be exported to ...\r\nValidating 150 potential DICOM images.\r\nFFFE,E000,Image Fragment [0@780]= Offset780 Length0\r\n...\r\nFFFE,E000,Image Fragment [0@780]= Offset780 Length0\r\nFound 150 DICOM images.\r\nConverting 150/150  volumes: 150\r\n1.dcm->20150821_1454277pSpRCCaCAplpps002a001.nii\r\n brightest voxel was 1447: data will be saved as 16-bit signed integer.\r\nSaving \r\nConversion completed in 786 ms\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/968", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/968/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/968/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/968/events", "html_url": "https://github.com/pydicom/pydicom/issues/968", "id": 518314493, "node_id": "MDU6SXNzdWU1MTgzMTQ0OTM=", "number": 968, "title": "Error when openning compressed DICOM file", "user": {"login": "cnaaq", "id": 16402967, "node_id": "MDQ6VXNlcjE2NDAyOTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/16402967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cnaaq", "html_url": "https://github.com/cnaaq", "followers_url": "https://api.github.com/users/cnaaq/followers", "following_url": "https://api.github.com/users/cnaaq/following{/other_user}", "gists_url": "https://api.github.com/users/cnaaq/gists{/gist_id}", "starred_url": "https://api.github.com/users/cnaaq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cnaaq/subscriptions", "organizations_url": "https://api.github.com/users/cnaaq/orgs", "repos_url": "https://api.github.com/users/cnaaq/repos", "events_url": "https://api.github.com/users/cnaaq/events{/privacy}", "received_events_url": "https://api.github.com/users/cnaaq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-06T08:25:37Z", "updated_at": "2019-11-07T04:06:10Z", "closed_at": "2019-11-07T04:06:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a ``dcm`` file that can be opened by ``pydicom`` with no problem. However when I compress it using ``gdcmconv`` (like ``gdcmconv --j2k origin.dcm compressed.dcm``), I cannot open it in pydicom any more. I get the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\cq\\.conda\\envs\\streaming37\\lib\\site-packages\\pydicom\\charset.py\", line 625, in convert_encodings\r\n    py_encodings.append(python_encoding[encoding])\r\nKeyError: 73\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\cq\\.conda\\envs\\streaming37\\lib\\site-packages\\pydicom\\filereader.py\", line 850, in dcmread\r\n    force=force, specific_tags=specific_tags)\r\n  File \"C:\\Users\\cq\\.conda\\envs\\streaming37\\lib\\site-packages\\pydicom\\filereader.py\", line 728, in read_partial\r\n    specific_tags=specific_tags)\r\n  File \"C:\\Users\\cq\\.conda\\envs\\streaming37\\lib\\site-packages\\pydicom\\filereader.py\", line 382, in read_dataset\r\n    encoding = convert_encodings(char_set)\r\n  File \"C:\\Users\\cq\\.conda\\envs\\streaming37\\lib\\site-packages\\pydicom\\charset.py\", line 628, in convert_encodings\r\n    _python_encoding_for_corrected_encoding(encoding))\r\n  File \"C:\\Users\\cq\\.conda\\envs\\streaming37\\lib\\site-packages\\pydicom\\charset.py\", line 647, in _python_encoding_for_corrected_encoding\r\n    if re.match('^ISO[^_]IR', encoding) is not None:\r\n  File \"C:\\Users\\cq\\.conda\\envs\\streaming37\\lib\\re.py\", line 172, in match\r\n    return _compile(pattern, flags).match(string)\r\nTypeError: expected string or bytes-like object\r\n```\r\n\r\nThe same error happens when I try to decompress it again using the flag ``--raw``.\r\nAm I doing something wrong? Or is it a problem with ``pydicom``?\r\nI tried to open the file in a DICOM viewer and it worked!\r\n\r\n(python: 3.6.7 - pydicom: 1.3.0)\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/967", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/967/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/967/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/967/events", "html_url": "https://github.com/pydicom/pydicom/issues/967", "id": 517674034, "node_id": "MDU6SXNzdWU1MTc2NzQwMzQ=", "number": 967, "title": "Issues with HRCT images", "user": {"login": "MicheleZak", "id": 6943529, "node_id": "MDQ6VXNlcjY5NDM1Mjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6943529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicheleZak", "html_url": "https://github.com/MicheleZak", "followers_url": "https://api.github.com/users/MicheleZak/followers", "following_url": "https://api.github.com/users/MicheleZak/following{/other_user}", "gists_url": "https://api.github.com/users/MicheleZak/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicheleZak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicheleZak/subscriptions", "organizations_url": "https://api.github.com/users/MicheleZak/orgs", "repos_url": "https://api.github.com/users/MicheleZak/repos", "events_url": "https://api.github.com/users/MicheleZak/events{/privacy}", "received_events_url": "https://api.github.com/users/MicheleZak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-05T10:11:02Z", "updated_at": "2019-11-07T09:53:53Z", "closed_at": "2019-11-07T09:53:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello guys,\r\n\r\nI got some high resolution computed tomography (HRCT) studies which are not displayed as expected. The dicom files are from a \"LightSpeed VCT\" asset.\r\n\r\n\r\nHere's the link to the study on dicomlibrary, on which, I think, the images are displayed correctly:\r\nhttps://www.dicomlibrary.com?study=1.2.826.0.1.3680043.8.1055.1.20191104185916632.189252767.7426759\r\n\r\nThe link to download the study:\r\nhttps://www.dicomlibrary.com?requestType=WADO&studyUID=1.2.826.0.1.3680043.8.1055.1.20191104185916632.189252767.7426759&manage=502e9d54f0077815db6a2b9e4a534e08\r\n\r\nAnd here's a screenshot of the images on my viewer.\r\n![Screenshot_2019-11-05 Exam Viewer](https://user-images.githubusercontent.com/6943529/68198704-dbea2300-ffbc-11e9-8662-da540ad7e801.png)\r\n\r\n\r\n\r\nDo you have any idea of what the issue could be?\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/966", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/966/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/966/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/966/events", "html_url": "https://github.com/pydicom/pydicom/issues/966", "id": 516561866, "node_id": "MDU6SXNzdWU1MTY1NjE4NjY=", "number": 966, "title": "pixel_array is read as broken values", "user": {"login": "seilna", "id": 11758953, "node_id": "MDQ6VXNlcjExNzU4OTUz", "avatar_url": "https://avatars0.githubusercontent.com/u/11758953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seilna", "html_url": "https://github.com/seilna", "followers_url": "https://api.github.com/users/seilna/followers", "following_url": "https://api.github.com/users/seilna/following{/other_user}", "gists_url": "https://api.github.com/users/seilna/gists{/gist_id}", "starred_url": "https://api.github.com/users/seilna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seilna/subscriptions", "organizations_url": "https://api.github.com/users/seilna/orgs", "repos_url": "https://api.github.com/users/seilna/repos", "events_url": "https://api.github.com/users/seilna/events{/privacy}", "received_events_url": "https://api.github.com/users/seilna/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-02T10:31:36Z", "updated_at": "2019-12-27T03:00:45Z", "closed_at": "2019-11-19T12:57:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the issue**\r\nI want to access pixel data from the dicom file below. It opens successfully in dicom viewers such as [horos](https://horosproject.org/) or [dwv](https://ivmartel.github.io/dwv-jqmobile/demo/stable/index.html ),  but if I use pydicom to access pixel data from the dicom file, the pixel value will be read as **all zero values**.\r\n\r\n**Expected behavior**\r\nRead pixel array without broken pixel value.\r\n\r\n**Steps To Reproduce**\r\nHow to reproduce the issue. Please include:\r\n1. A minimum working code sample\r\n```python\r\nimport pydicom\r\nx = pydicom.dcmread(\u2018dcm_path.dcm\u2019)\r\npixel = x.pixel_array\r\nprint(pixel.min(), pixel.mean(), pixel.max())\r\n>>> 0, 0.0, 0\r\n```\r\n3. The traceback (if one occurred)\r\n```\r\nStream too short, expected SOT\r\nFailed to decode tile 1/1\r\n```\r\n\r\n4. Which of the following packages are available and their versions:\r\n  * Numpy == 1.16.5\r\n  * Pillow == 6.2.0\r\n  * GDCM == 2.8.9\r\n  \r\n 5. The anonymized DICOM dataset (if possible).\r\nhttps://drive.google.com/file/d/1QEDbjcK09cxqxflJkOvqBUIHgTJbtBaa/view?usp=sharing\r\n\r\n**Your environment**\r\nPlease run the following and paste the output.\r\n```bash\r\n$ python -c \"import platform; print(platform.platform())\"\r\n>>> Linux-4.4.0-87-generic-x86_64-with-debian-stretch-sid\r\n$ python -c \"import sys; print('Python ', sys.version)\"\r\n>>> Python  3.7.4 (default, Aug 13 2019, 20:35:49)\r\n[GCC 7.3.0]\r\n$ python -c \"import pydicom; print('pydicom ', pydicom.__version__)\"\r\n>>> pydicom  1.4.0.dev0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/964", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/964/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/964/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/964/events", "html_url": "https://github.com/pydicom/pydicom/issues/964", "id": 515669438, "node_id": "MDU6SXNzdWU1MTU2Njk0Mzg=", "number": 964, "title": "Empty data elements with value representation SQ are set to None", "user": {"login": "hackermd", "id": 6855297, "node_id": "MDQ6VXNlcjY4NTUyOTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6855297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackermd", "html_url": "https://github.com/hackermd", "followers_url": "https://api.github.com/users/hackermd/followers", "following_url": "https://api.github.com/users/hackermd/following{/other_user}", "gists_url": "https://api.github.com/users/hackermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackermd/subscriptions", "organizations_url": "https://api.github.com/users/hackermd/orgs", "repos_url": "https://api.github.com/users/hackermd/repos", "events_url": "https://api.github.com/users/hackermd/events{/privacy}", "received_events_url": "https://api.github.com/users/hackermd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-31T18:58:37Z", "updated_at": "2019-11-04T00:45:03Z", "closed_at": "2019-11-04T00:45:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nIn the current `master`, empty data elements are not read correctly from files. The attribute value is set to `None` instead of `[]`.\r\n\r\n**Expected behavior**\r\nCreate empty list `[]` for empty sequence, i.e., a sequence with zero items.\r\n\r\n**Steps To Reproduce**\r\n```python\r\nimport pydicom\r\nds = pydicom.Dataset()\r\nds.AcquisitionContextSequence = []\r\nprint(ds)\r\nds.is_little_endian = True\r\nds.is_implicit_VR = True\r\nds.save_as('/tmp/test.dcm')\r\n\r\nreloaded_ds = pydicom.dcmread('/tmp/test.dcm', force=True)\r\nprint(reloaded_ds)\r\n```\r\nThis prints:\r\n```\r\n(0040, 0555)  Acquisition Context Sequence   0 item(s) ----\r\n...\r\nTypeError: With tag (0040, 0555) got exception: object of type 'NoneType' has no len()\r\nTraceback (most recent call last):\r\n  File \"/private/tmp/pydicom/pydicom/tag.py\", line 30, in tag_in_exception\r\n    yield\r\n  File \"/private/tmp/pydicom/pydicom/dataset.py\", line 1599, in _pretty_str\r\n    len(data_element.value)))\r\nTypeError: object of type 'NoneType' has no len()\r\n```\r\n\r\n**Your environment**\r\n```\r\nDarwin-18.6.0-x86_64-i386-64bit\r\nPython  3.7.3 (default, Mar 27 2019, 09:23:15)\r\n[Clang 10.0.1 (clang-1001.0.46.3)]\r\npydicom  1.4.0.dev0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/963", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/963/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/963/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/963/events", "html_url": "https://github.com/pydicom/pydicom/issues/963", "id": 514316802, "node_id": "MDU6SXNzdWU1MTQzMTY4MDI=", "number": 963, "title": "Adding new attribute to a Dataset", "user": {"login": "richard-moss", "id": 32492992, "node_id": "MDQ6VXNlcjMyNDkyOTky", "avatar_url": "https://avatars2.githubusercontent.com/u/32492992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richard-moss", "html_url": "https://github.com/richard-moss", "followers_url": "https://api.github.com/users/richard-moss/followers", "following_url": "https://api.github.com/users/richard-moss/following{/other_user}", "gists_url": "https://api.github.com/users/richard-moss/gists{/gist_id}", "starred_url": "https://api.github.com/users/richard-moss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richard-moss/subscriptions", "organizations_url": "https://api.github.com/users/richard-moss/orgs", "repos_url": "https://api.github.com/users/richard-moss/repos", "events_url": "https://api.github.com/users/richard-moss/events{/privacy}", "received_events_url": "https://api.github.com/users/richard-moss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-30T00:31:34Z", "updated_at": "2019-11-24T13:24:17Z", "closed_at": "2019-11-15T19:58:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\n**Background**\r\n\r\nI've been using Datasets and then adding my own attributes directly to the Datasets to store additional info that I need for my app, so like:\r\n\r\n```\r\ndcm = dcmread('/tmp/1.dcm')\r\ndcm.file_name = '/tmp/1.dcm'\r\n```\r\n\r\nHowever when I did this previously I ran into the 1.3 bug with pickling datasets, as I was passing the Datasets into multiprocessing, which was failing with 1.3 due to the pickling failing.\r\nSo I've moved temporarily back to 1.2 until 1.3.1 is out.\r\n\r\nIn 1.2, multiprocessing (ie pickling) works fine.  But, in this case, when i pass the datasets into multiprocessing (ie pickle then depickle in the new processes) _my added attributes are missing._\r\n\r\n**So my questions are**\r\n\r\n**a)** Am I an idiot adding attributes that way, and instead I should be sub-classing Dataset?  (I'm fairly new to python, so I just too the quick/dirty approach)\r\n\r\n**b)** Would the above approach (manually adding attributes on the fly) work with pickling in 1.3.x (in which case I'll just pull the latest master instead of using 1.2.2)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/962", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/962/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/962/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/962/events", "html_url": "https://github.com/pydicom/pydicom/issues/962", "id": 510385574, "node_id": "MDU6SXNzdWU1MTAzODU1NzQ=", "number": 962, "title": "Question: Creating RLE encoded dataset", "user": {"login": "richardbeare", "id": 780449, "node_id": "MDQ6VXNlcjc4MDQ0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/780449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richardbeare", "html_url": "https://github.com/richardbeare", "followers_url": "https://api.github.com/users/richardbeare/followers", "following_url": "https://api.github.com/users/richardbeare/following{/other_user}", "gists_url": "https://api.github.com/users/richardbeare/gists{/gist_id}", "starred_url": "https://api.github.com/users/richardbeare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richardbeare/subscriptions", "organizations_url": "https://api.github.com/users/richardbeare/orgs", "repos_url": "https://api.github.com/users/richardbeare/repos", "events_url": "https://api.github.com/users/richardbeare/events{/privacy}", "received_events_url": "https://api.github.com/users/richardbeare/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-22T01:47:42Z", "updated_at": "2019-12-12T08:07:52Z", "closed_at": "2019-12-07T04:20:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm attempting to convert manual segmentation results to the form required by a 3rd party display tool. The data is read correctly by pydicom and converted to the correct shape, so the rle decoders do the right thing. I can get my data into the correct numpy form and call the frame encoding step. However I'm struggling to set up the correct structure to produce the following style of pixel data, as reported by gdcmdump:\r\n```bash\r\n(7fe0,0010) OB                                                    # u/l,1 Pixel Data\r\n  (fffe,e000) ?? 00\\00\\00\\00\\26\\07\\00\\00\\56\\0e\\00\\00\\8c\\15\\00\\00\\c4\\1c\\00\\00\\fe\\23\\00\\00\\3c\\2b\\00\\00\\7e\\32\\00\\00         # 68,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1822,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1832,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1838,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1840,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1842,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1846,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1850,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1850,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1852,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1856,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1860,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1860,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1858,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1852,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1848,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1838,1 Item\r\n  (fffe,e000) ?? 01\\00\\00\\00\\40\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00         # 1822,1 Item\r\n(fffe,e0dd) 0\r\n\r\n```\r\nAppears to be some kind of funny nested structure, but I can't see how to create it.\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/961", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/961/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/961/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/961/events", "html_url": "https://github.com/pydicom/pydicom/issues/961", "id": 509753645, "node_id": "MDU6SXNzdWU1MDk3NTM2NDU=", "number": 961, "title": "RT structure", "user": {"login": "Moonslicer18", "id": 45058698, "node_id": "MDQ6VXNlcjQ1MDU4Njk4", "avatar_url": "https://avatars0.githubusercontent.com/u/45058698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Moonslicer18", "html_url": "https://github.com/Moonslicer18", "followers_url": "https://api.github.com/users/Moonslicer18/followers", "following_url": "https://api.github.com/users/Moonslicer18/following{/other_user}", "gists_url": "https://api.github.com/users/Moonslicer18/gists{/gist_id}", "starred_url": "https://api.github.com/users/Moonslicer18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Moonslicer18/subscriptions", "organizations_url": "https://api.github.com/users/Moonslicer18/orgs", "repos_url": "https://api.github.com/users/Moonslicer18/repos", "events_url": "https://api.github.com/users/Moonslicer18/events{/privacy}", "received_events_url": "https://api.github.com/users/Moonslicer18/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-21T06:18:07Z", "updated_at": "2019-12-07T04:21:31Z", "closed_at": "2019-12-07T04:21:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to ask how to use pydicom to read the contour coordinates of radiotherapy target area", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/959", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/959/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/959/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/959/events", "html_url": "https://github.com/pydicom/pydicom/issues/959", "id": 508178439, "node_id": "MDU6SXNzdWU1MDgxNzg0Mzk=", "number": 959, "title": "Conda builds failing", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 644270811, "node_id": "MDU6TGFiZWw2NDQyNzA4MTE=", "url": "https://api.github.com/repos/pydicom/pydicom/labels/housekeeping", "name": "housekeeping", "color": "f9d0c4", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-17T01:19:39Z", "updated_at": "2019-10-21T01:06:20Z", "closed_at": "2019-10-21T01:06:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "[Example](https://travis-ci.org/pydicom/pydicom/jobs/598666823)\r\n```\r\nRemoveError: 'setuptools' is a dependency of conda and cannot be removed from\r\nconda's operating environment.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/957", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/957/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/957/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/957/events", "html_url": "https://github.com/pydicom/pydicom/issues/957", "id": 506404747, "node_id": "MDU6SXNzdWU1MDY0MDQ3NDc=", "number": 957, "title": "Can not identify image file", "user": {"login": "bilal938", "id": 25253897, "node_id": "MDQ6VXNlcjI1MjUzODk3", "avatar_url": "https://avatars3.githubusercontent.com/u/25253897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bilal938", "html_url": "https://github.com/bilal938", "followers_url": "https://api.github.com/users/bilal938/followers", "following_url": "https://api.github.com/users/bilal938/following{/other_user}", "gists_url": "https://api.github.com/users/bilal938/gists{/gist_id}", "starred_url": "https://api.github.com/users/bilal938/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bilal938/subscriptions", "organizations_url": "https://api.github.com/users/bilal938/orgs", "repos_url": "https://api.github.com/users/bilal938/repos", "events_url": "https://api.github.com/users/bilal938/events{/privacy}", "received_events_url": "https://api.github.com/users/bilal938/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-14T00:34:33Z", "updated_at": "2019-12-15T00:40:05Z", "closed_at": "2019-12-15T00:40:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to procure the pixel_array while trying to add MRI/CT slices to an array, and I'm getting an error that tells me that the image file is not being identified.\r\n\r\nThis is the line where it's erroring out:\r\nimg = convert_mri_slices_to_numpy_array(ordered_slices_list=ordered_ct_slices, image_format='dcm', output = 'stack')\r\n\r\nThis is the error message:\r\n```\r\nOSError                                   Traceback (most recent call last)\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/pixel_data_handlers/pillow_handler.py in get_pixeldata(dicom_dataset)\r\n    196                 fio = io.BytesIO(pixel_data)\r\n--> 197                 decompressed_image = Image.open(fio)\r\n    198             except IOError as e:\r\n\r\n~/anaconda3/lib/python3.7/site-packages/PIL/Image.py in open(fp, mode)\r\n   2656     raise IOError(\"cannot identify image file %r\"\r\n-> 2657                   % (filename if filename else fp))\r\n   2658 \r\n\r\nOSError: cannot identify image file <_io.BytesIO object at 0x7fe2a6f30af0>\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nNotImplementedError                       Traceback (most recent call last)\r\n<ipython-input-59-fea4a62c6f9b> in <module>\r\n     10 slice_metadata['n_slices'] = len(ordered_ct_slices)\r\n     11 \r\n---> 12 img = convert_mri_slices_to_numpy_array(ordered_slices_list=ordered_ct_slices, image_format='dcm', output = 'stack')\r\n     13 \r\n     14 # Save img as numpy_array.hdf file (use deepdish library)\r\n\r\n<ipython-input-54-3d21df29d1c8> in convert_mri_slices_to_numpy_array(ordered_slices_list, image_format, output)\r\n     40 \r\n     41     try:\r\n---> 42         if   image_format == 'dcm': arrays_list = [np.array(s.pixel_array) for s in ordered_slices_list]\r\n     43         elif image_format == 'nii': arrays_list = [np.array(s.dataobj)     for s in ordered_slices_list]\r\n     44         elif image_format == 'tif': arrays_list = [np.array(s)             for s in ordered_slices_list]\r\n\r\n<ipython-input-54-3d21df29d1c8> in <listcomp>(.0)\r\n     40 \r\n     41     try:\r\n---> 42         if   image_format == 'dcm': arrays_list = [np.array(s.pixel_array) for s in ordered_slices_list]\r\n     43         elif image_format == 'nii': arrays_list = [np.array(s.dataobj)     for s in ordered_slices_list]\r\n     44         elif image_format == 'tif': arrays_list = [np.array(s)             for s in ordered_slices_list]\r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/dataset.py in pixel_array(self)\r\n   1348             The Pixel Data (7FE0,0010) as a NumPy ndarray.\r\n   1349         \"\"\"\r\n-> 1350         self.convert_pixel_data()\r\n   1351         return self._pixel_array\r\n   1352 \r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/dataset.py in convert_pixel_data(self)\r\n   1294         )\r\n   1295 \r\n-> 1296         raise last_exception\r\n   1297 \r\n   1298     def decompress(self):\r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/dataset.py in convert_pixel_data(self)\r\n   1262             try:\r\n   1263                 # Use the handler to get a 1D numpy array of the pixel data\r\n-> 1264                 arr = handler.get_pixeldata(self)\r\n   1265                 self._pixel_array = reshape_pixel_array(self, arr)\r\n   1266 \r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/pixel_data_handlers/pillow_handler.py in get_pixeldata(dicom_dataset)\r\n    197                 decompressed_image = Image.open(fio)\r\n    198             except IOError as e:\r\n--> 199                 raise NotImplementedError(e.strerror)\r\n    200             UncompressedPixelData.extend(decompressed_image.tobytes())\r\n    201     except Exception:\r\n\r\nNotImplementedError: None\r\n```\r\n\r\nI'm running Pydicom 1.4.0 on Python 3.7. Any help would be greatly appreciated. This is numpy code on a jupyter notebook.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/954", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/954/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/954/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/954/events", "html_url": "https://github.com/pydicom/pydicom/issues/954", "id": 497601695, "node_id": "MDU6SXNzdWU0OTc2MDE2OTU=", "number": 954, "title": "Issue handling pixel_array", "user": {"login": "szullino", "id": 34679302, "node_id": "MDQ6VXNlcjM0Njc5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/34679302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szullino", "html_url": "https://github.com/szullino", "followers_url": "https://api.github.com/users/szullino/followers", "following_url": "https://api.github.com/users/szullino/following{/other_user}", "gists_url": "https://api.github.com/users/szullino/gists{/gist_id}", "starred_url": "https://api.github.com/users/szullino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szullino/subscriptions", "organizations_url": "https://api.github.com/users/szullino/orgs", "repos_url": "https://api.github.com/users/szullino/repos", "events_url": "https://api.github.com/users/szullino/events{/privacy}", "received_events_url": "https://api.github.com/users/szullino/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-24T10:31:56Z", "updated_at": "2019-09-24T14:04:51Z", "closed_at": "2019-09-24T14:04:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\n**Describe the issue**\r\nI encountered a problem handling the pixel_data array using pydicom 1.2.0. Everything worked fine with pydicom 1.0.2.\r\n\r\n**Expected behavior**\r\nMy raw image matrix is 128x128x60, so I would expect pixel_data to be 983040. \r\nThe script reads the raw binary file according to image precision (_32BIT_SGN_INT) and endianness (Little Endian):\r\n\r\n```\r\nraw_data = open(dseq_file, 'rb')\r\nimg_data_precision = np.fromfile(raw_data, dtype=data_precision)\r\n```\r\n\r\nThen, `image_data_precision` is multiplied by a slope, rescaled and cast to integer.\r\n\r\n```\r\nimg_data_corrected = img_data_precision*slope\r\nfactor = ((2**16)-1)/(np.amax(img_data_corrected))\r\nimg_float = img_data_corrected * factor\r\nimg = np.array(img_float,np.uint16)\r\n```\r\n\r\nThe size of `img` array is still what it should be (983040).\r\n\r\n\r\n**Steps To Reproduce**\r\nOther parameters I assigned that might help:\r\n```\r\nds.PixelRepresentation = 0\r\nds.BitsAllocated = 16\r\nds.BitsStored = 16\r\nds.HighBit = 15\r\nds.Columns = 128\r\nds.Rows = 128\r\nds.NumberOfFrames = 60\r\nds.PixelData = img\r\n```\r\nThe traceback (if one occurred)\r\n\r\nI got this error when assigning the raw image vector (`img`) to `ds.PixelData`, whose size is 983040:\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-21-c2d25db68747>\", line 367, in <module>\r\n    for layer in ds.pixel_array:\r\n\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pydicom\\dataset.py\", line 901, in pixel_array\r\n    self.convert_pixel_data()\r\n\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pydicom\\dataset.py\", line 847, in convert_pixel_data\r\n    raise last_exception\r\n\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pydicom\\dataset.py\", line 815, in convert_pixel_data\r\n    arr = handler.get_pixeldata(self)\r\n\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pydicom\\pixel_data_handlers\\numpy_handler.py\", line 307, in get_pixeldata\r\n    .format(actual_length, expected_len + expected_len % 2)\r\n\r\nValueError: The length of the pixel data in the dataset doesn't match the expected amount (983040 vs. 1966080 bytes). The dataset may be corrupted or there may be an issue with the pixel data handler.\r\n```\r\n**How we tried to fix the error**\r\nWe understood that the tool compares the expected length in bytes with the real length in pixels.\r\nTo make it work we fixed this issue by modifying `numpy_handler.py` at line 297:\r\n\r\n`expected_len = get_expected_length(ds)`\r\n\r\nTo this:\r\n\r\n`expected_len = get_expected_length(ds,unit=\"pixels\")`\r\n\r\nas the original function is by default used with unit=\"bytes\".\r\n\r\n3. Which of the following packages are available and their versions:\r\n  * Numpy version is 1.17.2\r\n\r\n\r\n**My environment**\r\nWindows-10-10.0.17763-SP0, but the same issue occurs with Ubuntu 16.04\r\nPython  3.7.4\r\npydicom  1.2.0 and 1.3.0\r\n\r\nThanks for helping.\r\nSara", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/953", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/953/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/953/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/953/events", "html_url": "https://github.com/pydicom/pydicom/issues/953", "id": 497243931, "node_id": "MDU6SXNzdWU0OTcyNDM5MzE=", "number": 953, "title": "Copying only the metadata from one DICOM to another", "user": {"login": "jamie-alnasir", "id": 9116333, "node_id": "MDQ6VXNlcjkxMTYzMzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9116333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamie-alnasir", "html_url": "https://github.com/jamie-alnasir", "followers_url": "https://api.github.com/users/jamie-alnasir/followers", "following_url": "https://api.github.com/users/jamie-alnasir/following{/other_user}", "gists_url": "https://api.github.com/users/jamie-alnasir/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamie-alnasir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamie-alnasir/subscriptions", "organizations_url": "https://api.github.com/users/jamie-alnasir/orgs", "repos_url": "https://api.github.com/users/jamie-alnasir/repos", "events_url": "https://api.github.com/users/jamie-alnasir/events{/privacy}", "received_events_url": "https://api.github.com/users/jamie-alnasir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-09-23T18:01:01Z", "updated_at": "2019-09-26T09:44:48Z", "closed_at": "2019-09-26T09:44:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi again, sorry to be a nuisance. I am trying to copy the DICOM metadata from a source DICOM, to a totally new DICOM which will contain new Pixel data. I've tried to copy the data set elements into a dictionary using the callback function, and then write them back.\r\n\r\nTo Copy:\r\n\r\n```\r\n # Use inner callback function to capture the tags and their corresponding\r\n    # values present in the metadata\r\n    dictTags = {};\r\n    def _callback(dataset, data_element):\r\n      dictTags[data_element.tag] = data_element;\r\n\r\n    ds.walk(_callback)\r\n```\r\nTo Write to the new DICOM:\r\n\r\n```\r\n  if (dictTags is not None):\r\n    for t in dictTags.keys():\r\n      ds[t] = dictTags[t];\r\n```\r\n\r\nBut when I try to restore the data, I get a DICOM header not readable error. I've also tried selectively restoring certain tags from the dictionary using the group ID hex code (which also doesn't work). The reason i need to do this is I'm not sure which tags will be set in the source DICOM, so I need to copy them all.\r\n\r\nI'd be most grateful if you could show how to correctly set DICOM header tags from a dictionary.\r\n\r\nMany thanks,\r\nJamie\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/951", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/951/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/951/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/951/events", "html_url": "https://github.com/pydicom/pydicom/issues/951", "id": 496090975, "node_id": "MDU6SXNzdWU0OTYwOTA5NzU=", "number": 951, "title": "Unable to pickle modified datasets", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-20T01:01:30Z", "updated_at": "2019-09-25T06:37:25Z", "closed_at": "2019-09-25T06:37:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Describe the bug**\r\nI'm unable to pickle a modified dataset read from file.\r\n\r\n**Expected behavior**\r\nI should be able to pickle modified datasets.\r\n\r\n**Steps To Reproduce**\r\nThis works:\r\n```python\r\nimport pickle\r\nfrom pydicom import dcmread\r\nfrom pydicom.data import get_testdata_files\r\n\r\nfname = get_testdata_files('CT_small.dcm')[0]\r\nds = dcmread(fname)\r\nwith open('example.pickle', 'wb') as fp:\r\n    pickle.dump(ds, fp)\r\n```\r\n\r\nThis doesn't:\r\n```python\r\nimport pickle\r\nfrom pydicom import dcmread\r\nfrom pydicom.data import get_testdata_files\r\n\r\nfname = get_testdata_files('CT_small.dcm')[0]\r\nds = dcmread(fname)\r\nds.PixelSpacing = ['1', '1']\r\nwith open('example.pickle', 'wb') as fp:\r\n    pickle.dump(ds, fp)\r\n```\r\nException:\r\n```\r\nTraceback (most recent call last):\r\n  File \"./test_pickle.py\", line 27, in <module>\r\n    pickle.dump(ds, fp)\r\nAttributeError: Can't pickle local object 'DataElement._convert_value.<locals>.<lambda>'\r\n```\r\n\r\n**Your environment**\r\nUbuntu 18.04, Python 2.7.15, 3.5.7 and 3.6.5, current master.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/950", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/950/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/950/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/950/events", "html_url": "https://github.com/pydicom/pydicom/issues/950", "id": 495126568, "node_id": "MDU6SXNzdWU0OTUxMjY1Njg=", "number": 950, "title": "Help! Converting Monochrome JPEG to DICOM", "user": {"login": "jamie-alnasir", "id": 9116333, "node_id": "MDQ6VXNlcjkxMTYzMzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9116333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamie-alnasir", "html_url": "https://github.com/jamie-alnasir", "followers_url": "https://api.github.com/users/jamie-alnasir/followers", "following_url": "https://api.github.com/users/jamie-alnasir/following{/other_user}", "gists_url": "https://api.github.com/users/jamie-alnasir/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamie-alnasir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamie-alnasir/subscriptions", "organizations_url": "https://api.github.com/users/jamie-alnasir/orgs", "repos_url": "https://api.github.com/users/jamie-alnasir/repos", "events_url": "https://api.github.com/users/jamie-alnasir/events{/privacy}", "received_events_url": "https://api.github.com/users/jamie-alnasir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-18T10:10:41Z", "updated_at": "2019-09-20T13:21:40Z", "closed_at": "2019-09-20T13:21:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI'm having trouble converting a JPEG into DICOM using Pydicom. The JPG was originally extracted from a monochrome, medical imaging DICOM file and an AI algorithm applied. The jpeg displays correctly in all viewers. When I apply the code below (to convert the JPG to DICOM) I get an image which appears interlaced (lots of horizontal lines through it) and the wrong scale (although the correct width and height, only a corner is shown).\r\n\r\nThe code I have is as follows:\r\n\r\n```import os.path\r\nfrom pydicom.uid import ImplicitVRLittleEndian\r\nfrom pydicom.dataset import Dataset, FileDataset\r\nimport cv2\r\nimport datetime\r\n\r\n# Create the metadata for the dataset\r\nfile_meta = Dataset()\r\nfile_meta.TransferSyntaxUID = ImplicitVRLittleEndian\r\nfile_meta.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.2'\r\nfile_meta.MediaStorageSOPInstanceUID = '1.2.3'\r\nfile_meta.ImplementationClassUID = '1.2.3.4'\r\n\r\n# Create the dataset\r\nds = FileDataset(\"Test4.dcm\", {}, file_meta=file_meta, preamble=b'\\x00'*128)\r\n\r\n# Add some of the data elements\r\nds.PatientName = \"Dicom^Anony\"\r\nds.PatientID = \"123456\"\r\n\r\n# Set the transfer syntax\r\nds.is_little_endian = True\r\nds.is_implicit_VR = True\r\n\r\n# Set creation date/time\r\ndt = datetime.datetime.now()\r\nds.ContentDate = dt.strftime('%Y%m%d')\r\ntimeStr = dt.strftime('%H%M%S.%f')  # long format with micro seconds\r\nds.ContentTime = timeStr\r\n\r\n# Read in the JPG file\r\nimg = cv2.imread(\"TestImage.jpg\");\r\n\r\n# Get the numpy array\r\narr = img\r\n\r\n# (8-bit pixels, black and white)\r\nds.Rows, ds.Columns, dummy = arr.shape\r\nds.PhotometricInterpretation = \"MONOCHROME1\"\r\nds.SamplesPerPixel = 1\r\nds.BitsStored = 8\r\nds.BitsAllocated = 8\r\nds.HighBit = 7\r\nds.PixelRepresentation = 0\r\n\r\n# Reassign back to the image data\r\nds.PixelData = arr.tobytes()\r\n\r\n# Save DICOM\r\nds.save_as(\"Test4.dcm\")```\r\n\r\nHelp on this would be greatly appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/949", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/949/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/949/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/949/events", "html_url": "https://github.com/pydicom/pydicom/issues/949", "id": 494170598, "node_id": "MDU6SXNzdWU0OTQxNzA1OTg=", "number": 949, "title": "I don't understand how to use bulk data handlers with `.to_json`", "user": {"login": "nush-1qb", "id": 14079635, "node_id": "MDQ6VXNlcjE0MDc5NjM1", "avatar_url": "https://avatars3.githubusercontent.com/u/14079635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nush-1qb", "html_url": "https://github.com/nush-1qb", "followers_url": "https://api.github.com/users/nush-1qb/followers", "following_url": "https://api.github.com/users/nush-1qb/following{/other_user}", "gists_url": "https://api.github.com/users/nush-1qb/gists{/gist_id}", "starred_url": "https://api.github.com/users/nush-1qb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nush-1qb/subscriptions", "organizations_url": "https://api.github.com/users/nush-1qb/orgs", "repos_url": "https://api.github.com/users/nush-1qb/repos", "events_url": "https://api.github.com/users/nush-1qb/events{/privacy}", "received_events_url": "https://api.github.com/users/nush-1qb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-16T17:05:24Z", "updated_at": "2019-09-16T19:29:23Z", "closed_at": "2019-09-16T19:29:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to convert a pydicom dataset into JSON, but I don't know what I am supposed to pass as the `bulk_data_element_handler` argument into `.to_json`\r\n\r\n```\r\nimport pydicom\r\nfrom pydicom.pixel_data_handlers import numpy_handler\r\n\r\nds = pydicom.dcmread('test_input.dcm')\r\ndsj = ds.to_json(bulk_data_element_handler=numpy_handler)\r\n```\r\n\r\nThis doesn't work, obviously, because numpy_handler is a module. So what am I supposed to pass in?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/947", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/947/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/947/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/947/events", "html_url": "https://github.com/pydicom/pydicom/issues/947", "id": 492452932, "node_id": "MDU6SXNzdWU0OTI0NTI5MzI=", "number": 947, "title": "Error when using pickle on a dataset", "user": {"login": "tboutelier", "id": 22190926, "node_id": "MDQ6VXNlcjIyMTkwOTI2", "avatar_url": "https://avatars3.githubusercontent.com/u/22190926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tboutelier", "html_url": "https://github.com/tboutelier", "followers_url": "https://api.github.com/users/tboutelier/followers", "following_url": "https://api.github.com/users/tboutelier/following{/other_user}", "gists_url": "https://api.github.com/users/tboutelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/tboutelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tboutelier/subscriptions", "organizations_url": "https://api.github.com/users/tboutelier/orgs", "repos_url": "https://api.github.com/users/tboutelier/repos", "events_url": "https://api.github.com/users/tboutelier/events{/privacy}", "received_events_url": "https://api.github.com/users/tboutelier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-09-11T20:33:25Z", "updated_at": "2019-09-17T01:34:22Z", "closed_at": "2019-09-17T01:34:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am using python 3.6.8, with Pydicom version 1.3.0, on Windows 10.\r\nI have an error when I try to save and load a dataset using the pickle format.\r\nI manage (no error) to save the dataset using pickle.dump() function, but I get an error when I try to load it. Here is the code:\r\n\r\n````python\r\nimport pydicom\r\nimport pickle\r\n\r\ndcmname='C:\\\\toto\\IM-0511-0001.dcm' # path to the DICOM file\r\nds=pydicom.dcmread(dcmname) # load the DICOM file and obtain a dataset\r\n\r\nfilename='C:\\\\toto\\dcm.pkl' # Name of the file where the pickle data will be saved\r\nf=open(filename,'wb'); # open the file\r\npickle.dump({'ds': ds}, f); # save the dataset\r\nf.close(); # close the file\r\n\r\nf=open(filename,'rb'); # open the file\r\nobj=pickle.load(f); # load the pickle file\r\nf.close(); # close the file\r\n````\r\nI get the following error\r\n````python\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"C:\\toto\\.conda\\envs\\marvelous\\lib\\site-packages\\pydicom\\dataset.py\", line 1649, in __setitem__\r\n    self._dict[tag] = data_element\r\n  File \"C:\\toto\\.conda\\envs\\my_env\\lib\\site-packages\\pydicom\\dataset.py\", line 741, in __getattr__\r\n    return object.__getattribute__(self, name)\r\nAttributeError: 'Dataset' object has no attribute '_dict'\r\n````\r\nI found a workaround by setting the [protocol ](https://docs.python.org/3.6/library/pickle.html#pickle.DEFAULT_PROTOCOL) option of the `pickle.dump()` function to a value lower or equal than 1:\r\n````python\r\nimport pydicom\r\nimport pickle\r\n\r\ndcmname='C:\\\\toto\\IM-0511-0001.dcm' # path to the DICOM file\r\nds=pydicom.dcmread(dcmname) # load the DICOM file and obtain a dataset\r\n\r\nfilename='C:\\\\toto\\dcm.pkl' # Name of the file where the pickle data will be saved\r\nf=open(filename,'wb'); # open the file\r\npickle.dump({'ds': ds}, f, protocol=1); # save the dataset\r\nf.close(); # close the file\r\n\r\nf=open(filename,'rb'); # open the file\r\nobj=pickle.load(f); # load the pickle file\r\nf.close(); # close the file\r\n````\r\nOther protocol value does not work (3, the default value, and 4), while I would like to continue to be able to use the default value of the protocol.\r\n\r\nI think that the problem was not existing on previous release of Pydicom, so I guess that it appeared with version 1.3.0. \r\n\r\nI am sorry that I cannot share a DICOM file with you, but I have the problem with all my dicom files. I would be interested to know if someone else experienced the same problem.\r\n\r\nThanks!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/946", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/946/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/946/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/946/events", "html_url": "https://github.com/pydicom/pydicom/issues/946", "id": 490823106, "node_id": "MDU6SXNzdWU0OTA4MjMxMDY=", "number": 946, "title": "Pydicom save_as(file) numpy.int64 error", "user": {"login": "raluca-san", "id": 20581812, "node_id": "MDQ6VXNlcjIwNTgxODEy", "avatar_url": "https://avatars3.githubusercontent.com/u/20581812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raluca-san", "html_url": "https://github.com/raluca-san", "followers_url": "https://api.github.com/users/raluca-san/followers", "following_url": "https://api.github.com/users/raluca-san/following{/other_user}", "gists_url": "https://api.github.com/users/raluca-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/raluca-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raluca-san/subscriptions", "organizations_url": "https://api.github.com/users/raluca-san/orgs", "repos_url": "https://api.github.com/users/raluca-san/repos", "events_url": "https://api.github.com/users/raluca-san/events{/privacy}", "received_events_url": "https://api.github.com/users/raluca-san/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-08T23:31:18Z", "updated_at": "2019-09-09T08:55:46Z", "closed_at": "2019-09-09T08:55:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n```\r\n[  File \"C:\\develop\\python-util-scripts\\venv\\lib\\site-packages\\pydicom\\filewriter.py\", line 341, in _format_DA\r\n    return val.strftime(\"%Y%m%d\")\r\nAttributeError: 'numpy.int64' object has no attribute 'strftime'\r\nAttributeError: With tag (0010, 0030) got exception: 'numpy.int64' object has no attribute 'strftime'](url)\r\n```\r\n\r\n**Expected behavior**\r\nI would like to save a dicom file to disk after modifying the patient_id, patient_name and patient_dob. something like this\r\n```python\r\ndataset_segm.PatientName = \"MAV-B01\"\r\ndataset_segm.PatientID = \"B01\"\r\ndataset_segm.PatientBirthDate = \"19420101\"\r\ndataset_segm.InstitutionName = \"None\"\r\ndataset_segm.InstitutionAddress = \"None\"\r\n# dataset_segm.SliceLocation = dataset_segm.ImagePositionPatient[2]\r\ndataset_segm.SOPInstanceUID = uid.generate_uid()\r\ndataset_segm.SeriesInstanceUID = SeriesInstanceUID_segmentation\r\ndataset_segm.InstanceNumber = k \r\ndataset_segm.SeriesNumber = 51\r\nk += 1  # increase the instance number\r\ndataset_segm.save_as(dcm_file)  # save to disk\r\n```\r\n\r\n**Your environment**\r\nWindows-10-10.0.18362-SP0\r\nPython  3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]\r\npydicom  1.2.2\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/945", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/945/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/945/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/945/events", "html_url": "https://github.com/pydicom/pydicom/issues/945", "id": 490568943, "node_id": "MDU6SXNzdWU0OTA1Njg5NDM=", "number": 945, "title": "Dataset.decode wipes names that are already decoded", "user": {"login": "RemiTorracinta", "id": 1400774, "node_id": "MDQ6VXNlcjE0MDA3NzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1400774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RemiTorracinta", "html_url": "https://github.com/RemiTorracinta", "followers_url": "https://api.github.com/users/RemiTorracinta/followers", "following_url": "https://api.github.com/users/RemiTorracinta/following{/other_user}", "gists_url": "https://api.github.com/users/RemiTorracinta/gists{/gist_id}", "starred_url": "https://api.github.com/users/RemiTorracinta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RemiTorracinta/subscriptions", "organizations_url": "https://api.github.com/users/RemiTorracinta/orgs", "repos_url": "https://api.github.com/users/RemiTorracinta/repos", "events_url": "https://api.github.com/users/RemiTorracinta/events{/privacy}", "received_events_url": "https://api.github.com/users/RemiTorracinta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501234, "node_id": "MDU6TGFiZWw2MzUwMTIzNA==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-07T00:30:03Z", "updated_at": "2019-09-08T13:04:36Z", "closed_at": "2019-09-08T02:47:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\ndecoding a dataset containing a name which is already a (decoded) python3 string results in an empty string.\r\n\r\n**Expected behavior**\r\nI'm not sure if the expected behavior here is clearly defined. `decode` should probably idempotently do nothing to it. That is its behavior with other VRs (eg replacing with StudyDescription below works fine).\r\n\r\n**Steps To Reproduce**\r\n```python\r\nimport pydicom\r\n\r\nds = pydicom.dataset.Dataset()\r\nds.PatientName = \"Test^Firstname\"\r\nds.decode()\r\nassert ds.PatientName == \"Test^Firstname\", \"Woops! patient name: %r\" % ds.PatientName\r\n```\r\n\r\n**Your environment**\r\n\r\nDarwin-18.5.0-x86_64-i386-64bit\r\n\r\nPython  3.6.4 (default, May 15 2019, 14:25:51)\r\n[GCC 4.2.1 Compatible Apple LLVM 10.0.1 (clang-1001.0.46.4)]\r\n\r\npydicom  1.3.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/942", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/942/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/942/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/942/events", "html_url": "https://github.com/pydicom/pydicom/issues/942", "id": 488032842, "node_id": "MDU6SXNzdWU0ODgwMzI4NDI=", "number": 942, "title": "LUT Descriptor values don't follow standard", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-02T07:06:48Z", "updated_at": "2019-09-29T21:18:04Z", "closed_at": "2019-09-29T21:18:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "**Describe the bug**\r\n(0028,3002) [LUT Descriptor](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.11.html#sect_C.11.1.1) has VM = 3, with value as `[number of entries in LUT, first stored pixel value mapped, LUT entry bit depth]`. The VR for the element is ambiguous and may be US or SS depending on the value of (0028,0103) Pixel Representation, however this only affects the second value, not the first or last which are always US.\r\n\r\nThe problem is that a Pixel Representation value of 1 (i.e. 2s complement) gives a LUT Descriptor value 1 as signed when it should always be unsigned.\r\n\r\n> Since LUT Descriptor (0028,3002) is multi-valued, in an Explicit VR Transfer Syntax, only one value representation (US or SS) may be specified, even though the first and third values are always by definition interpreted as unsigned. The explicit VR actually used is dictated by the VR needed to represent the second value, which will be consistent with Pixel Representation (0028,0103).\r\n\r\nAlso affects Red/Green/Blue Palette Color Lookup Table Descriptor.\r\n\r\n**Steps To Reproduce**\r\n```python\r\nfrom pydicom import dcmread\r\nfrom pydicom.filebase import DicomBytesIO\r\n\r\n# Explicit VR: SS\r\nlut = b'\\x28\\x00\\x02\\x30\\x53\\x53\\x06\\x00\\x00\\xf5\\x00\\xf8\\x10\\x00'\r\n\r\nbs = DicomBytesIO(lut)\r\nbs.is_little_endian = True\r\nbs.is_implicit_VR = False\r\n\r\nds = dcmread(bs, force=True)\r\nassert ds.LUTDescriptor == [62720, -2048, 16]\r\n```\r\n\r\n**Your environment**\r\nAffects current `master`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/941", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/941/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/941/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/941/events", "html_url": "https://github.com/pydicom/pydicom/issues/941", "id": 486226832, "node_id": "MDU6SXNzdWU0ODYyMjY4MzI=", "number": 941, "title": "Is it possible to add graphic layer with multiple annotations?", "user": {"login": "GavrielHabib123", "id": 37382469, "node_id": "MDQ6VXNlcjM3MzgyNDY5", "avatar_url": "https://avatars2.githubusercontent.com/u/37382469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GavrielHabib123", "html_url": "https://github.com/GavrielHabib123", "followers_url": "https://api.github.com/users/GavrielHabib123/followers", "following_url": "https://api.github.com/users/GavrielHabib123/following{/other_user}", "gists_url": "https://api.github.com/users/GavrielHabib123/gists{/gist_id}", "starred_url": "https://api.github.com/users/GavrielHabib123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GavrielHabib123/subscriptions", "organizations_url": "https://api.github.com/users/GavrielHabib123/orgs", "repos_url": "https://api.github.com/users/GavrielHabib123/repos", "events_url": "https://api.github.com/users/GavrielHabib123/events{/privacy}", "received_events_url": "https://api.github.com/users/GavrielHabib123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-28T08:17:42Z", "updated_at": "2019-10-23T22:59:11Z", "closed_at": "2019-10-23T22:59:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\nI'm trying to add a graphic layer to a given dicom. I want to add multiple bounding boxes that could then be displayed over the image. Each one of the bounding boxes has a score, so I want to add text beside each. \r\n\r\nSomething like that:\r\n![image](https://user-images.githubusercontent.com/37382469/63838088-5bd48b00-c985-11e9-9202-802c0e302c63.png)\r\n\r\nIf I understood well, so for one bbox I can do the following:\r\n\r\n`ds_processed = dicom.dcmread(dcm_path)           \r\nds_processed.add_new(0x700010, 'FL', bbox[0:2])\r\nds_processed.add_new(0x700011, 'FL', bbox[2:4])`\r\n\r\nBut I still didn't understand how to add multiple bboxes (without overriding the previous), and how to add text.\r\n\r\nThanks!\r\nGavriel\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/940", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/940/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/940/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/940/events", "html_url": "https://github.com/pydicom/pydicom/issues/940", "id": 484387484, "node_id": "MDU6SXNzdWU0ODQzODc0ODQ=", "number": 940, "title": "Embedded Null character", "user": {"login": "oliverzzm", "id": 30902598, "node_id": "MDQ6VXNlcjMwOTAyNTk4", "avatar_url": "https://avatars1.githubusercontent.com/u/30902598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oliverzzm", "html_url": "https://github.com/oliverzzm", "followers_url": "https://api.github.com/users/oliverzzm/followers", "following_url": "https://api.github.com/users/oliverzzm/following{/other_user}", "gists_url": "https://api.github.com/users/oliverzzm/gists{/gist_id}", "starred_url": "https://api.github.com/users/oliverzzm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oliverzzm/subscriptions", "organizations_url": "https://api.github.com/users/oliverzzm/orgs", "repos_url": "https://api.github.com/users/oliverzzm/repos", "events_url": "https://api.github.com/users/oliverzzm/events{/privacy}", "received_events_url": "https://api.github.com/users/oliverzzm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-08-23T08:03:16Z", "updated_at": "2019-09-06T12:02:04Z", "closed_at": "2019-09-06T12:02:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!-- Instructions For Filing a Bug: https://github.com/pydicom/pydicom/blob/master/CONTRIBUTING.md#filing-bugs -->\r\n\r\n#### Description\r\n<!-- Example: Attribute Error thrown when printing (0x0010, 0x0020) patient Id> 0-->\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/charset.py in convert_encodings(encodings)\r\n    624         try:\r\n--> 625             py_encodings.append(python_encoding[encoding])\r\n    626         except KeyError:\r\n\r\nKeyError: 'ISO_IR 100\\x00'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-12-605c3c3edcf4> in <module>\r\n      4 print(filename)\r\n      5 dcm = pydicom.dcmread(filename,force=True)\r\n----> 6 dcm = pydicom.dcmread('/home/zhuzhemin/XrayKeyPoints/data/10-31-13_11H18M20_3674972_FACE_0_SC.dcm',force=True)\r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py in dcmread(fp, defer_size, stop_before_pixels, force, specific_tags)\r\n    848     try:\r\n    849         dataset = read_partial(fp, stop_when, defer_size=defer_size,\r\n--> 850                                force=force, specific_tags=specific_tags)\r\n    851     finally:\r\n    852         if not caller_owns_file:\r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py in read_partial(fileobj, stop_when, defer_size, force, specific_tags)\r\n    726         dataset = read_dataset(fileobj, is_implicit_VR, is_little_endian,\r\n    727                                stop_when=stop_when, defer_size=defer_size,\r\n--> 728                                specific_tags=specific_tags)\r\n    729     except EOFError:\r\n    730         pass  # error already logged in read_dataset\r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py in read_dataset(fp, is_implicit_VR, is_little_endian, bytelength, stop_when, defer_size, parent_encoding, specific_tags)\r\n    361     try:\r\n    362         while (bytelength is None) or (fp.tell() - fp_start < bytelength):\r\n--> 363             raw_data_element = next(de_gen)\r\n    364             # Read data elements. Stop on some errors, but return what was read\r\n    365             tag = raw_data_element.tag\r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/filereader.py in data_element_generator(fp, is_implicit_VR, is_little_endian, stop_when, defer_size, encoding, specific_tags)\r\n    203                 # Store the encoding value in the generator\r\n    204                 # for use with future elements (SQs)\r\n--> 205                 encoding = convert_encodings(encoding)\r\n    206 \r\n    207             yield RawDataElement(tag, VR, length, value, value_tell,\r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/charset.py in convert_encodings(encodings)\r\n    626         except KeyError:\r\n    627             py_encodings.append(\r\n--> 628                 _python_encoding_for_corrected_encoding(encoding))\r\n    629 \r\n    630     if len(encodings) > 1:\r\n\r\n~/anaconda3/lib/python3.7/site-packages/pydicom/charset.py in _python_encoding_for_corrected_encoding(encoding)\r\n    664     # fallback: assume that it is already a python encoding\r\n    665     try:\r\n--> 666         codecs.lookup(encoding)\r\n    667         return encoding\r\n    668     except LookupError:\r\n\r\nValueError: embedded null character\r\n#### Steps/Code to Reproduce\r\n<!--\r\nExample:\r\n```py\r\nfrom io import BytesIO\r\nfrom pydicom import dcmread\r\n\r\nbytestream = b'\\x02\\x00\\x02\\x00\\x55\\x49\\x16\\x00\\x31\\x2e\\x32\\x2e\\x38\\x34\\x30\\x2e\\x31' \\\r\n             b'\\x30\\x30\\x30\\x38\\x2e\\x35\\x2e\\x31\\x2e\\x31\\x2e\\x39\\x00\\x02\\x00\\x10\\x00' \\\r\n             b'\\x55\\x49\\x12\\x00\\x31\\x2e\\x32\\x2e\\x38\\x34\\x30\\x2e\\x31\\x30\\x30\\x30\\x38' \\\r\n             b'\\x2e\\x31\\x2e\\x32\\x00\\x20\\x20\\x10\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x20\\x20' \\\r\n             b'\\x20\\x00\\x06\\x00\\x00\\x00\\x4e\\x4f\\x52\\x4d\\x41\\x4c'\r\n\r\nfp = BytesIO(bytestream)\r\nds = dcmread(fp, force=True)\r\n\r\nprint(ds.PatientID)\r\n```\r\nIf the code is too long, feel free to put it in a public gist and link\r\nit in the issue: https://gist.github.com\r\n\r\nWhen possible use pydicom testing examples to reproduce the errors. Otherwise, provide\r\nan anonymous version of the data in order to replicate the errors.\r\n-->\r\nimport pydicom\r\ndcm = pydicom.dcmread('/home/zhuzhemin/XrayKeyPoints/data/10-31-13_11H18M20_3674972_FACE_0_SC.dcm')\r\n\r\n#### Expected Results\r\n<!-- Please paste or describe the expected results.\r\nExample: No error is thrown and the name of the patient is printed.-->\r\nNo error\r\nI used dcmread function in matlab to read the same file and it was ok. So it should not be the problem of the file.\r\n#### Actual Results\r\n<!-- Please paste or specifically describe the actual output or traceback.\r\n(Use %xmode to deactivate ipython's trace beautifier)\r\nExample: ```AttributeError: 'FileDataset' object has no attribute 'PatientID'```\r\n-->\r\nError: Embedded Null character\r\n#### Versions\r\n<!--\r\nPlease run the following snippet and paste the output below.\r\nimport platform; print(platform.platform())\r\nimport sys; print(\"Python\", sys.version)\r\nimport pydicom; print(\"pydicom\", pydicom.__version__)\r\n-->\r\n1.3.0\r\n\r\n<!-- Thanks for contributing! -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/939", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/939/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/939/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/939/events", "html_url": "https://github.com/pydicom/pydicom/issues/939", "id": 483815333, "node_id": "MDU6SXNzdWU0ODM4MTUzMzM=", "number": 939, "title": "PNG to DICOM with pydicom", "user": {"login": "changyushun", "id": 16750027, "node_id": "MDQ6VXNlcjE2NzUwMDI3", "avatar_url": "https://avatars1.githubusercontent.com/u/16750027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changyushun", "html_url": "https://github.com/changyushun", "followers_url": "https://api.github.com/users/changyushun/followers", "following_url": "https://api.github.com/users/changyushun/following{/other_user}", "gists_url": "https://api.github.com/users/changyushun/gists{/gist_id}", "starred_url": "https://api.github.com/users/changyushun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changyushun/subscriptions", "organizations_url": "https://api.github.com/users/changyushun/orgs", "repos_url": "https://api.github.com/users/changyushun/repos", "events_url": "https://api.github.com/users/changyushun/events{/privacy}", "received_events_url": "https://api.github.com/users/changyushun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}, {"id": 63501235, "node_id": "MDU6TGFiZWw2MzUwMTIzNQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-08-22T07:21:02Z", "updated_at": "2019-09-19T17:49:49Z", "closed_at": "2019-09-19T17:49:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "suppose have png or jpg file and replace the pixel data in dataset. how to do that use  pydicom\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/937", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/937/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/937/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/937/events", "html_url": "https://github.com/pydicom/pydicom/issues/937", "id": 483678104, "node_id": "MDU6SXNzdWU0ODM2NzgxMDQ=", "number": 937, "title": "[python 3.8] failing tests: various issues but \"max recursion depth reached\" seems to be one", "user": {"login": "sanjayankur31", "id": 102575, "node_id": "MDQ6VXNlcjEwMjU3NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/102575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanjayankur31", "html_url": "https://github.com/sanjayankur31", "followers_url": "https://api.github.com/users/sanjayankur31/followers", "following_url": "https://api.github.com/users/sanjayankur31/following{/other_user}", "gists_url": "https://api.github.com/users/sanjayankur31/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanjayankur31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanjayankur31/subscriptions", "organizations_url": "https://api.github.com/users/sanjayankur31/orgs", "repos_url": "https://api.github.com/users/sanjayankur31/repos", "events_url": "https://api.github.com/users/sanjayankur31/events{/privacy}", "received_events_url": "https://api.github.com/users/sanjayankur31/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501231, "node_id": "MDU6TGFiZWw2MzUwMTIzMQ==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-21T22:16:33Z", "updated_at": "2019-08-22T12:50:04Z", "closed_at": "2019-08-22T12:50:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Description\r\nFedora is beginning to test python packages against python 3.8. Pydicom builds but tests fail with errors.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```\r\npython setup.py build\r\npython setup.py install\r\npytest\r\n```\r\n\r\nThe complete build log is attached. It includes the complete build process. The root log is also attached. These are the versions of other python libraries that are in use:\r\n\r\n```\r\npython3-dateutil-1:2.8.0-5.fc32.noarch\r\npython3-devel-3.8.0~b3-4.fc32.x86_64\r\npython3-numpy-1:1.17.0-3.fc32.x86_64\r\npython3-numpydoc-0.9.1-3.fc32.noarch\r\npython3-pytest-4.6.5-3.fc32.noarch\r\npython3-setuptools-41.0.1-8.fc32.noarch\r\npython3-six-1.12.0-5.fc32.noarch\r\n```\r\n\r\n[build-log.txt](https://github.com/pydicom/pydicom/files/3527558/build-log.txt)\r\n[root-log.txt](https://github.com/pydicom/pydicom/files/3527559/root-log.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydicom/pydicom/issues/934", "repository_url": "https://api.github.com/repos/pydicom/pydicom", "labels_url": "https://api.github.com/repos/pydicom/pydicom/issues/934/labels{/name}", "comments_url": "https://api.github.com/repos/pydicom/pydicom/issues/934/comments", "events_url": "https://api.github.com/repos/pydicom/pydicom/issues/934/events", "html_url": "https://github.com/pydicom/pydicom/issues/934", "id": 482691418, "node_id": "MDU6SXNzdWU0ODI2OTE0MTg=", "number": 934, "title": "Dataset.pixel_array doesn't change unless PixelData does", "user": {"login": "scaramallion", "id": 10226372, "node_id": "MDQ6VXNlcjEwMjI2Mzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10226372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scaramallion", "html_url": "https://github.com/scaramallion", "followers_url": "https://api.github.com/users/scaramallion/followers", "following_url": "https://api.github.com/users/scaramallion/following{/other_user}", "gists_url": "https://api.github.com/users/scaramallion/gists{/gist_id}", "starred_url": "https://api.github.com/users/scaramallion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scaramallion/subscriptions", "organizations_url": "https://api.github.com/users/scaramallion/orgs", "repos_url": "https://api.github.com/users/scaramallion/repos", "events_url": "https://api.github.com/users/scaramallion/events{/privacy}", "received_events_url": "https://api.github.com/users/scaramallion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63501233, "node_id": "MDU6TGFiZWw2MzUwMTIzMw==", "url": "https://api.github.com/repos/pydicom/pydicom/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 1516342791, "node_id": "MDU6TGFiZWwxNTE2MzQyNzkx", "url": "https://api.github.com/repos/pydicom/pydicom/labels/pixel-data", "name": "pixel-data", "color": "a1e81e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-20T07:29:00Z", "updated_at": "2019-12-19T22:32:29Z", "closed_at": "2019-12-19T22:32:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "#### Description\r\nCurrently `ds.pixel_array` produces a numpy array that depends on element values for Rows, Columns, Samples Per Pixel, etc, however the code for `ds.pixel_array` only changes the returned array if the value for `ds.PixelData` changes. This may lead to confusion/undesirable behaviour if the values for related elements are changed after `ds.pixel_array` is called but not the underlying pixel data.\r\n\r\nI can't think of any real use cases except maybe in an interactive session when debugging a non-conformant dataset, but I suggest we change the way `Dataset._pixel_id` is calculated so that it takes into account changes in related elements as well.\r\n", "performed_via_github_app": null, "score": 1.0}]}