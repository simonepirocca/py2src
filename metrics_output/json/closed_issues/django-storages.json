{"total_count": 338, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jschneier/django-storages/issues/914", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/914/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/914/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/914/events", "html_url": "https://github.com/jschneier/django-storages/issues/914", "id": 676840305, "node_id": "MDU6SXNzdWU2NzY4NDAzMDU=", "number": 914, "title": "credentials error on connect to google cloud storage", "user": {"login": "weiztech", "id": 7445136, "node_id": "MDQ6VXNlcjc0NDUxMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7445136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiztech", "html_url": "https://github.com/weiztech", "followers_url": "https://api.github.com/users/weiztech/followers", "following_url": "https://api.github.com/users/weiztech/following{/other_user}", "gists_url": "https://api.github.com/users/weiztech/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiztech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiztech/subscriptions", "organizations_url": "https://api.github.com/users/weiztech/orgs", "repos_url": "https://api.github.com/users/weiztech/repos", "events_url": "https://api.github.com/users/weiztech/events{/privacy}", "received_events_url": "https://api.github.com/users/weiztech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-11T12:34:02Z", "updated_at": "2020-08-12T08:43:59Z", "closed_at": "2020-08-12T08:43:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have django settings for `google cloud` like below \r\n\r\n```\r\nfrom google.oauth2 import service_account\r\n\r\nGOOGLE_APPLICATION_CREDENTIALS = \"path to json\"\r\nDEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'\r\nGS_BUCKET_NAME = 'xxx'\r\nGS_PROJECT_ID = 'xxxx'\r\nGS_CREDENTIALS = service_account.Credentials.from_service_account_file(\r\n    GOOGLE_APPLICATION_CREDENTIALS\r\n)\r\n```\r\n\r\nto check if it integrated properly, I checked using django `shell` using this code\r\n\r\n```\r\nfrom django.core.files.storage import default_storage\r\n\r\n# credentials found\r\nprint(default.credentials)\r\n\r\n# but error on check the bucket\r\ndefault_storage.bucket\r\n```\r\nError output\r\n\r\n```\r\nenv/lib/python3.7/site-packages/storages/backends/gcloud.py in bucket(self)\r\n    139     def bucket(self):\r\n    140         if self._bucket is None:\r\n--> 141             self._bucket = self._get_or_create_bucket(self.bucket_name)\r\n    142         return self._bucket\r\n    143 \r\n\r\nenv/lib/python3.7/site-packages/storages/backends/gcloud.py in _get_or_create_bucket(self, name)\r\n    147         doesn't exist.\r\n    148         \"\"\"\r\n--> 149         bucket = self.client.bucket(name)\r\n    150         if self.auto_create_bucket:\r\n    151             try:\r\n\r\nenv/lib/python3.7/site-packages/storages/backends/gcloud.py in client(self)\r\n    132             self._client = Client(\r\n    133                 project=self.project_id,\r\n--> 134                 credentials=self.credentials\r\n    135             )\r\n    136         return self._client\r\n\r\nenv/lib/python3.7/site-packages/google/cloud/storage/client.py in __init__(self, project, credentials, _http, client_info, client_options)\r\n    109             project = None\r\n    110         super(Client, self).__init__(\r\n--> 111             project=project, credentials=credentials, _http=_http\r\n    112         )\r\n    113 \r\n\r\nenv/lib/python3.7/site-packages/google/cloud/client.py in __init__(self, project, credentials, client_options, _http)\r\n    248     def __init__(self, project=None, credentials=None, client_options=None, _http=None):\r\n    249         _ClientProjectMixin.__init__(self, project=project)\r\n--> 250         Client.__init__(self, credentials=credentials, client_options=client_options, _http=_http)\r\n\r\nenv/lib/python3.7/site-packages/google/cloud/client.py in __init__(self, credentials, _http, client_options)\r\n    134             client_options = google.api_core.client_options.ClientOptions()\r\n    135 \r\n--> 136         if credentials and client_options.credentials_file:\r\n    137             raise google.api_core.exceptions.DuplicateCredentialArgs(\r\n    138                 \"'credentials' and 'client_options.credentials_file' are mutually exclusive.\")\r\n\r\nAttributeError: 'ClientOptions' object has no attribute 'credentials_file'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/882", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/882/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/882/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/882/events", "html_url": "https://github.com/jschneier/django-storages/issues/882", "id": 609854368, "node_id": "MDU6SXNzdWU2MDk4NTQzNjg=", "number": 882, "title": "default_storage raises `AttributeError: File was not opened in read mode.`  When saving file opened in wb mode", "user": {"login": "veris-neerajdhiman", "id": 15321333, "node_id": "MDQ6VXNlcjE1MzIxMzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/15321333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veris-neerajdhiman", "html_url": "https://github.com/veris-neerajdhiman", "followers_url": "https://api.github.com/users/veris-neerajdhiman/followers", "following_url": "https://api.github.com/users/veris-neerajdhiman/following{/other_user}", "gists_url": "https://api.github.com/users/veris-neerajdhiman/gists{/gist_id}", "starred_url": "https://api.github.com/users/veris-neerajdhiman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veris-neerajdhiman/subscriptions", "organizations_url": "https://api.github.com/users/veris-neerajdhiman/orgs", "repos_url": "https://api.github.com/users/veris-neerajdhiman/repos", "events_url": "https://api.github.com/users/veris-neerajdhiman/events{/privacy}", "received_events_url": "https://api.github.com/users/veris-neerajdhiman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-30T11:34:03Z", "updated_at": "2020-05-01T11:31:49Z", "closed_at": "2020-05-01T11:31:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently I did Django and all libs upgrade to latest ones and this default storage started throwing error when saving the file.  For static files storage I am using S3.\r\n\r\nFile opened : `workbook = xlsxwriter.Workbook(default_storage.open(path, 'wb'))`\r\n\r\nFile saved : `default_storage.save(path, workbook.filename)`\r\n\r\nworkbook.filename is  `S3Boto3StorageFile Instance <S3Boto3StorageFile: my-path.xlsx>`\r\n\r\nlib version : `django-storages==1.9.1`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/881", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/881/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/881/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/881/events", "html_url": "https://github.com/jschneier/django-storages/issues/881", "id": 609035915, "node_id": "MDU6SXNzdWU2MDkwMzU5MTU=", "number": 881, "title": "Scaling up with asynchronous writes/uploads?", "user": {"login": "nodje", "id": 75604, "node_id": "MDQ6VXNlcjc1NjA0", "avatar_url": "https://avatars1.githubusercontent.com/u/75604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodje", "html_url": "https://github.com/nodje", "followers_url": "https://api.github.com/users/nodje/followers", "following_url": "https://api.github.com/users/nodje/following{/other_user}", "gists_url": "https://api.github.com/users/nodje/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodje/subscriptions", "organizations_url": "https://api.github.com/users/nodje/orgs", "repos_url": "https://api.github.com/users/nodje/repos", "events_url": "https://api.github.com/users/nodje/events{/privacy}", "received_events_url": "https://api.github.com/users/nodje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T12:57:11Z", "updated_at": "2020-05-14T02:06:55Z", "closed_at": "2020-05-14T02:06:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I stumble upon your s3 implementation and it strikes me as a lot more refined that what we have produced!\r\n\r\nThat being said, I may be wrong but I haven't seen anything that would process the write/uploads to the cloud asynchronous.\r\n\r\nWe do massive amounts of files upload and doing it asynchronously using some queuing system seems to be the right thing to do.\r\nAnd I think we could easily use the the `default_storage` class and have write operations executed through a queuing system.\r\n\r\nBut what about FileField usage? I'm not sure how I could make this asynchronous.\r\nI mean what if I have many users all upload at the same time, each uploads is blocking so it'd better go in to a new Thread or be send to a job queue.\r\n\r\nAm I totally wrong here? Wouldn't this benefit from having some async processing solution backed in? Thread management or be pluggable to a queuing system?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/872", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/872/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/872/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/872/events", "html_url": "https://github.com/jschneier/django-storages/issues/872", "id": 598693173, "node_id": "MDU6SXNzdWU1OTg2OTMxNzM=", "number": 872, "title": "How to replace file with same name instead of renaming? ", "user": {"login": "petriichuk", "id": 11599136, "node_id": "MDQ6VXNlcjExNTk5MTM2", "avatar_url": "https://avatars1.githubusercontent.com/u/11599136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petriichuk", "html_url": "https://github.com/petriichuk", "followers_url": "https://api.github.com/users/petriichuk/followers", "following_url": "https://api.github.com/users/petriichuk/following{/other_user}", "gists_url": "https://api.github.com/users/petriichuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/petriichuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petriichuk/subscriptions", "organizations_url": "https://api.github.com/users/petriichuk/orgs", "repos_url": "https://api.github.com/users/petriichuk/repos", "events_url": "https://api.github.com/users/petriichuk/events{/privacy}", "received_events_url": "https://api.github.com/users/petriichuk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-13T05:58:14Z", "updated_at": "2020-04-18T08:08:55Z", "closed_at": "2020-04-18T08:08:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Uploading multiple times test.dump, instead of replacing I am getting test_7Z1e6rm.dump\r\n(in https://github.com/django-dbbackup/django-dbbackup)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/870", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/870/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/870/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/870/events", "html_url": "https://github.com/jschneier/django-storages/issues/870", "id": 597100958, "node_id": "MDU6SXNzdWU1OTcxMDA5NTg=", "number": 870, "title": "How about adding generate url for post in s3?", "user": {"login": "kwangsooshin", "id": 29035439, "node_id": "MDQ6VXNlcjI5MDM1NDM5", "avatar_url": "https://avatars3.githubusercontent.com/u/29035439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwangsooshin", "html_url": "https://github.com/kwangsooshin", "followers_url": "https://api.github.com/users/kwangsooshin/followers", "following_url": "https://api.github.com/users/kwangsooshin/following{/other_user}", "gists_url": "https://api.github.com/users/kwangsooshin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwangsooshin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwangsooshin/subscriptions", "organizations_url": "https://api.github.com/users/kwangsooshin/orgs", "repos_url": "https://api.github.com/users/kwangsooshin/repos", "events_url": "https://api.github.com/users/kwangsooshin/events{/privacy}", "received_events_url": "https://api.github.com/users/kwangsooshin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-09T08:07:31Z", "updated_at": "2020-04-27T00:18:39Z", "closed_at": "2020-04-27T00:18:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nI think a function is required to generate url using generate_presented_post inside the S3Boto3Storage class.\r\n\r\nWe need to discuss this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/869", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/869/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/869/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/869/events", "html_url": "https://github.com/jschneier/django-storages/issues/869", "id": 594577382, "node_id": "MDU6SXNzdWU1OTQ1NzczODI=", "number": 869, "title": "\"\"Unicode-objects must be encoded before hashing\" when i try upload a .m3u8 file using storages|s3 instead local storage. ", "user": {"login": "flakesrc", "id": 42384773, "node_id": "MDQ6VXNlcjQyMzg0Nzcz", "avatar_url": "https://avatars1.githubusercontent.com/u/42384773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flakesrc", "html_url": "https://github.com/flakesrc", "followers_url": "https://api.github.com/users/flakesrc/followers", "following_url": "https://api.github.com/users/flakesrc/following{/other_user}", "gists_url": "https://api.github.com/users/flakesrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/flakesrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flakesrc/subscriptions", "organizations_url": "https://api.github.com/users/flakesrc/orgs", "repos_url": "https://api.github.com/users/flakesrc/repos", "events_url": "https://api.github.com/users/flakesrc/events{/privacy}", "received_events_url": "https://api.github.com/users/flakesrc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-05T17:52:16Z", "updated_at": "2020-04-05T18:17:47Z", "closed_at": "2020-04-05T18:17:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\n**COMPLETE CODE AND SETTINGS IN THE END OF THE FILE**\r\n**the upload works when i add the .m3u8 file directly in the aws s3 site**\r\n\r\nI was able to send the video normally to my local machine, but when I changed the storage settings, I just started getting this error.\r\n\r\nThe error points to the line where the code is\r\n```\r\ninstance.file.save(file_name_m3u8, file_m3u8)\r\n```\r\n\r\nAnd then immediately points to\r\n\r\n```\r\n     .../python3.8/site-packages/storages/backends/s3boto3.py\r\n    ...\r\n    obj.upload_fileobj(content, ExtraArgs=params) \r\n    ...\r\n```\r\n\r\nMy file object `file_m3u8` is:\r\n\r\n```\r\n    file_object  \r\n    <_io.TextIOWrapper name='/tmp/media/lectures/first_video_2/2020-04-04_16-11-20.m3u8' mode='r' encoding='UTF-8'>\r\n```\r\nExample:\r\n```\r\n    from django.db.models.signals import post_save\r\n    from django.dispatch import receiver\r\n    from django.core.files import File\r\n    from .models import Lecture\r\n  \r\n    \r\n    @receiver(post_save, sender=Lecture) \r\n    def handle_video_upload (sender, instance, created, ** kwargs):\r\n             with open (  \r\n    \"/tmp/media/lectures/first_video_2/2020-04-04_16-11-20.m3u8\", \"r\") as file_object:\r\n                 file_m3u8 = File (\r\n                     name = \"media/lectures/first_video_2/2020-04-04_16-11-20.m3u8\",\r\n                     file = file_object)\r\n                 instance.file.save (\"2020-04-04_16-11-20.m3u8\", file_m3u8)\r\n```\r\n\r\nI'm using django-storages and settings this in my settings.py file:\r\n\r\n```\r\nSTATICFILES_STORAGE = \"django.contrib.staticfiles.storage.ManifestStaticFilesStorage\"\r\nDEFAULT_FILE_STORAGE = \"storages.backends.s3boto3.S3Boto3Storage\"\r\nAWS_ACCESS_KEY_ID = config(\"AWS_ACCESS_KEY_ID\")\r\nAWS_SECRET_ACCESS_KEY = config(\"AWS_SECRET_ACCESS_KEY\")\r\nAWS_STORAGE_BUCKET_NAME = config(\"AWS_STORAGE_BUCKET_NAME\")\r\n\r\nCLOUDFRONT_ID = config(\"CLOUDFRONT_ID\")\r\nCLOUDFRONT_DOMAIN = f\"{CLOUDFRONT_ID}.cloudfront.net\"\r\nAWS_S3_CUSTOM_DOMAIN = f\"{CLOUDFRONT_ID}.cloudfront.net\"\r\n```\r\n\r\n**Expected behavior**\r\ni expect that the file will be uploaded normally\r\n\r\n**Debug logs**\r\nterminal output:\r\n\r\n```\r\n[05/Apr/2020 17:42:30] \"GET /admin/jsi18n/ HTTP/1.1\" 200 7275\r\n/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/storages/backends/s3boto3.py:340: UserWarning: The default behavior of S3Boto3Storage is insecure and will change in django-storages 1.10. By default files and new buckets are saved with an ACL of 'public-read' (globally publicly readable). Version 1.10 will default to using the bucket's ACL. To opt into the new behavior set AWS_DEFAULT_ACL = None, otherwise to silence this warning explicitly set AWS_DEFAULT_ACL.\r\n  warnings.warn(\r\n[05/Apr/2020 17:42:32] \"GET /admin/lectures/lecture/5/change/ HTTP/1.1\" 200 6712\r\n[05/Apr/2020 17:42:32] \"GET /admin/jsi18n/ HTTP/1.1\" 200 7275\r\n/tmp/media/lectures/first_video_2/2020-04-04_16-11-20.m3u8\r\n2020-04-04_16-11-20.m3u8\r\nInternal Server Error: /admin/lectures/lecture/5/change/\r\nTraceback (most recent call last):\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 607, in wrapper\r\n    return self.admin_site.admin_view(view)(*args, **kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\r\n    response = view_func(request, *args, **kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/views/decorators/cache.py\", line 44, in _wrapped_view_func\r\n    response = view_func(request, *args, **kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/contrib/admin/sites.py\", line 231, in inner\r\n    return view(request, *args, **kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1641, in change_view\r\n    return self.changeform_view(request, object_id, form_url, extra_context)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/utils/decorators.py\", line 43, in _wrapper\r\n    return bound_method(*args, **kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\r\n    response = view_func(request, *args, **kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1522, in changeform_view\r\n    return self._changeform_view(request, object_id, form_url, extra_context)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1565, in _changeform_view\r\n    self.save_model(request, new_object, form, not add)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1081, in save_model\r\n    obj.save()\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/db/models/base.py\", line 745, in save\r\n    self.save_base(using=using, force_insert=force_insert,\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/db/models/base.py\", line 793, in save_base\r\n    post_save.send(\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/dispatch/dispatcher.py\", line 173, in send\r\n    return [\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/dispatch/dispatcher.py\", line 174, in <listcomp>\r\n    (receiver, receiver(signal=self, sender=sender, **named))\r\n  File \"/home/marcos/geeknoon/geeknoon_server/lectures/signals.py\", line 90, in handle_video_upload\r\n    instance.file.save(file_name_m3u8, file_m3u8)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/db/models/fields/files.py\", line 87, in save\r\n    self.name = self.storage.save(name, content, max_length=self.field.max_length)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/django/core/files/storage.py\", line 52, in save\r\n    return self._save(name, content)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/storages/backends/s3boto3.py\", line 547, in _save\r\n    obj.upload_fileobj(content, ExtraArgs=params)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/boto3/s3/inject.py\", line 619, in object_upload_fileobj\r\n    return self.meta.client.upload_fileobj(\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/boto3/s3/inject.py\", line 539, in upload_fileobj\r\n    return future.result()\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/s3transfer/futures.py\", line 106, in result\r\n    return self._coordinator.result()\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/s3transfer/futures.py\", line 265, in result\r\n    raise self._exception\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/s3transfer/tasks.py\", line 126, in __call__\r\n    return self._execute_main(kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/s3transfer/tasks.py\", line 150, in _execute_main\r\n    return_value = self._main(**kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/s3transfer/upload.py\", line 692, in _main\r\n    client.put_object(Bucket=bucket, Key=key, Body=body, **extra_args)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/botocore/client.py\", line 316, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/botocore/client.py\", line 602, in _make_api_call\r\n    handler, event_response = self.meta.events.emit_until_response(\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/botocore/hooks.py\", line 360, in emit_until_response\r\n    return self._emitter.emit_until_response(aliased_event_name, **kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/botocore/hooks.py\", line 243, in emit_until_response\r\n    responses = self._emit(event_name, kwargs, stop_on_response=True)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/botocore/handlers.py\", line 216, in conditionally_calculate_md5\r\n    calculate_md5(params, **kwargs)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/botocore/handlers.py\", line 194, in calculate_md5\r\n    binary_md5 = _calculate_md5_from_file(body)\r\n  File \"/home/marcos/.local/share/virtualenvs/geeknoon_server-HmoJlbqP/lib/python3.8/site-packages/botocore/handlers.py\", line 208, in _calculate_md5_from_file\r\n    md5.update(chunk)\r\nTypeError: Unicode-objects must be encoded before hashing\r\n[05/Apr/2020 17:42:39] \"POST /admin/lectures/lecture/5/change/ HTTP/1.1\" 500 249595\r\n```\r\n\r\n## Complete code in signals.py:\r\n\r\n```\r\nimport subprocess\r\nimport os\r\nfrom django.db.models.signals import post_save\r\nfrom django.dispatch import receiver\r\nfrom django.core.files import File\r\nfrom pathlib import Path\r\nfrom .models import Lecture\r\n\r\n@receiver(post_save, sender=Lecture)\r\ndef handle_video_upload(sender, instance, created, **kwargs):\r\n\r\n    file_relative_path = Path(instance.file.name)\r\n    file_suffix = file_relative_path.suffix\r\n\r\n    if not file_suffix == '.m3u8' and instance.file_type == \"V\":\r\n        file_relative_dir = os.path.dirname(instance.file.name)\r\n\r\n        file_relative_path_m3u8 = file_relative_path.with_suffix(\".m3u8\")\r\n        file_name_m3u8 = file_relative_path_m3u8.name\r\n\r\n        file_tmp_local_dir = f\"/tmp/{file_relative_dir}\"\r\n        file_tmp_local_output = f\"{file_tmp_local_dir}/{file_name_m3u8}\"\r\n        file_cloudfront_url = instance.file.url\r\n\r\n        subprocess.run(['mkdir', '-p', file_tmp_local_dir])\r\n\r\n        subprocess.run([\r\n            \"ffmpeg\",\r\n            \"-i\",\r\n            file_cloudfront_url,\r\n            \"-f\",\r\n            \"hls\",\r\n            file_tmp_local_output,\r\n            '-loglevel',\r\n            'quiet'\r\n        ])\r\n\r\n        <comment: update the file with the new .m3u8 file>\r\n        with open(file_tmp_local_output, \"r\") as file_object:\r\n            print(file_tmp_local_output)\r\n            print(file_name_m3u8)\r\n            file_m3u8 = File(name=file_relative_path_m3u8, file=file_object)\r\n            instance.file.save(file_name_m3u8, file_m3u8)\r\n            subprocess.run([\"rm\", \"-r\", file_tmp_local_dir])\r\n\r\n        boto3.set_stream_logger('')\r\n```\r\n\r\nAll relevant settings.py vars:\r\n\r\n```\r\nINSTALLED_APPS = [\r\n    \"storages\",\r\n]\r\n\r\nSTATICFILES_FINDERS = [\r\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\r\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\r\n]\r\nSTATIC_ROOT = BASE_DIR.joinpath(\"local\", \"static\")\r\nMEDIA_ROOT = BASE_DIR.joinpath(\"local\", \"media\")\r\n\r\nSTATICFILES_STORAGE = \"django.contrib.staticfiles.storage.ManifestStaticFilesStorage\"\r\nDEFAULT_FILE_STORAGE = \"storages.backends.s3boto3.S3Boto3Storage\"\r\nAWS_ACCESS_KEY_ID = config(\"AWS_ACCESS_KEY_ID\")\r\nAWS_SECRET_ACCESS_KEY = config(\"AWS_SECRET_ACCESS_KEY\")\r\nAWS_STORAGE_BUCKET_NAME = config(\"AWS_STORAGE_BUCKET_NAME\")\r\nCLOUDFRONT_ID = config(\"CLOUDFRONT_ID\")\r\nCLOUDFRONT_DOMAIN = f\"{CLOUDFRONT_ID}.cloudfront.net\"\r\nAWS_S3_CUSTOM_DOMAIN = f\"{CLOUDFRONT_ID}.cloudfront.net\"\r\n```\r\n\r\nWhat i trying? \r\nConvert .mkv|.mp4 videos etc after upload, and set the new .m3u8 file in the file field in my model.\r\n\r\nI check if this process is needed by checking the file_type and checking if the file was converted by checking if the suffix is the .m3u8.\r\n\r\nMy model relevant code:\r\n\r\n```\r\nfrom django.db import models\r\nfrom base_models import CommomInfo # with updated, created and uuid fields\r\n\r\ndef lecture_file_path(instance, filename):\r\n    return f\"media/lectures/{instance.slug}/{filename}\"\r\n\r\n\r\nclass Lecture(CommomInfo):\r\n    FILE_TYPE_CHOICES = ((\"V\", \"Video\"), (\"P\", \"PDF\"))\r\n    file = models.FileField(upload_to=lecture_file_path)\r\n    file_type = models.CharField(\r\n        max_length=1,\r\n        choices=FILE_TYPE_CHOICES,\r\n        default=\"V\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/863", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/863/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/863/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/863/events", "html_url": "https://github.com/jschneier/django-storages/issues/863", "id": 583098941, "node_id": "MDU6SXNzdWU1ODMwOTg5NDE=", "number": 863, "title": "FileField.save() appears to be failing silently using S3Boto3Storage", "user": {"login": "nthall", "id": 632670, "node_id": "MDQ6VXNlcjYzMjY3MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/632670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nthall", "html_url": "https://github.com/nthall", "followers_url": "https://api.github.com/users/nthall/followers", "following_url": "https://api.github.com/users/nthall/following{/other_user}", "gists_url": "https://api.github.com/users/nthall/gists{/gist_id}", "starred_url": "https://api.github.com/users/nthall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nthall/subscriptions", "organizations_url": "https://api.github.com/users/nthall/orgs", "repos_url": "https://api.github.com/users/nthall/repos", "events_url": "https://api.github.com/users/nthall/events{/privacy}", "received_events_url": "https://api.github.com/users/nthall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-17T15:30:27Z", "updated_at": "2020-04-06T15:08:46Z", "closed_at": "2020-04-06T15:08:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using django-storages 1.9.1, python 3.6.8, django 1.11.18, and boto3 1.10.45. My app includes a model which generates a file and saves it to a FileField. I'm using S3Boto3Storage as my backend. When I try to do `instance.file_field.save(filename, file_obj)`, there is no error, but if I then check `instance.file_field` it is None. However the file does get uploaded to the correct place in S3. To have the file accessible as expected, after `instance.file_field.save()` I'm additionally assigning `instance.file_field.name = filename` and saving the model instance again. This \"works,\" but it feels clunky and doesn't seem right. I cannot figure out whether I am doing something wrong, or if the issue lies somewhere else.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/862", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/862/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/862/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/862/events", "html_url": "https://github.com/jschneier/django-storages/issues/862", "id": 581693916, "node_id": "MDU6SXNzdWU1ODE2OTM5MTY=", "number": 862, "title": "AWS_S3_CUSTOM_DOMAIN with AWS_S3_USE_SECURE_URLS=False", "user": {"login": "jbothma", "id": 235801, "node_id": "MDQ6VXNlcjIzNTgwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/235801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbothma", "html_url": "https://github.com/jbothma", "followers_url": "https://api.github.com/users/jbothma/followers", "following_url": "https://api.github.com/users/jbothma/following{/other_user}", "gists_url": "https://api.github.com/users/jbothma/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbothma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbothma/subscriptions", "organizations_url": "https://api.github.com/users/jbothma/orgs", "repos_url": "https://api.github.com/users/jbothma/repos", "events_url": "https://api.github.com/users/jbothma/events{/privacy}", "received_events_url": "https://api.github.com/users/jbothma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-15T14:22:37Z", "updated_at": "2020-03-15T15:45:07Z", "closed_at": "2020-03-15T15:45:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to use S3 in production and minio in dev and test with docker-compose.\r\n\r\nI can get that to work with\r\n```\r\nAWS_S3_ENDPOINT_URL=http://minio:9000\r\nAWS_S3_SECURE_URLS=True\r\n```\r\nand an entry in my hosts file pointing `minio` at `127.0.0.1`with image URLs being `http://minio:9000/...`\r\n\r\nI'd prefer not to require developers to set up hosts file entries though.\r\n\r\nWhen I set `AWS_S3_CUSTOM_DOMAIN=\"localhost:9000\"` and expose the minio port to the host in docker-compose, the URLs get the `https` scheme.\r\n\r\nHow can I make it generate `http` URLs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/861", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/861/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/861/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/861/events", "html_url": "https://github.com/jschneier/django-storages/issues/861", "id": 581422709, "node_id": "MDU6SXNzdWU1ODE0MjI3MDk=", "number": 861, "title": "azure_storage.py => TypeError: __init__() got an unexpected keyword argument 'token_credential'", "user": {"login": "ernestocasanova", "id": 22716864, "node_id": "MDQ6VXNlcjIyNzE2ODY0", "avatar_url": "https://avatars1.githubusercontent.com/u/22716864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ernestocasanova", "html_url": "https://github.com/ernestocasanova", "followers_url": "https://api.github.com/users/ernestocasanova/followers", "following_url": "https://api.github.com/users/ernestocasanova/following{/other_user}", "gists_url": "https://api.github.com/users/ernestocasanova/gists{/gist_id}", "starred_url": "https://api.github.com/users/ernestocasanova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ernestocasanova/subscriptions", "organizations_url": "https://api.github.com/users/ernestocasanova/orgs", "repos_url": "https://api.github.com/users/ernestocasanova/repos", "events_url": "https://api.github.com/users/ernestocasanova/events{/privacy}", "received_events_url": "https://api.github.com/users/ernestocasanova/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-14T23:45:53Z", "updated_at": "2020-03-17T00:45:41Z", "closed_at": "2020-03-17T00:45:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I'm facing one issue with this package. I'm currently using Azure container to serve my static and media files, but the next error happens every time I install the package.\r\n\r\nError: \\env\\lib\\site-packages\\storages\\backends\\azure_storage.py\", line 163, in _blob_service\r\n    endpoint_suffix=self.endpoint_suffix)\r\nTypeError: __init__() got an unexpected keyword argument 'token_credential'\r\n\r\nTo fix i need removing/comment the line 162 => **token_credential=self.token_credential,**\r\n\r\nI'm running with Django 2.2.5 and Python 3.6 (64-bit). Any idea for the reason that this happen?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/853", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/853/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/853/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/853/events", "html_url": "https://github.com/jschneier/django-storages/issues/853", "id": 576596899, "node_id": "MDU6SXNzdWU1NzY1OTY4OTk=", "number": 853, "title": "Add support to specify `http_method` on `storage.url`", "user": {"login": "humitos", "id": 244656, "node_id": "MDQ6VXNlcjI0NDY1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/244656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humitos", "html_url": "https://github.com/humitos", "followers_url": "https://api.github.com/users/humitos/followers", "following_url": "https://api.github.com/users/humitos/following{/other_user}", "gists_url": "https://api.github.com/users/humitos/gists{/gist_id}", "starred_url": "https://api.github.com/users/humitos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humitos/subscriptions", "organizations_url": "https://api.github.com/users/humitos/orgs", "repos_url": "https://api.github.com/users/humitos/repos", "events_url": "https://api.github.com/users/humitos/events{/privacy}", "received_events_url": "https://api.github.com/users/humitos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-05T23:41:03Z", "updated_at": "2020-03-06T01:04:05Z", "closed_at": "2020-03-06T01:04:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using AWS S3 backend storage, `storage.url` uses [`generate_presigned_url`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.generate_presigned_url) behind the scenes to generate a valid URL with the querystring attribute required to access directly to the file with a proper signature and more.\r\n\r\nS3 signature is based on HTTP method and since `storage.url` is not passing the `HttpMethod` to `generate_presigned_url`, it uses the \"method's model\" by default (which in this case is GET because of `get_object`).\r\n\r\nIt would be good if `storage.url` could accept `http_method` (defaulting to GET) in a similar way as it accept `parameters` and `expire` and [pass it along to `generate_presigned_url`](https://github.com/jschneier/django-storages/blob/master/storages/backends/s3boto3.py#L683-L684) so `storage.url` can return valid URLs when using other HTTP methods different than GET.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/851", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/851/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/851/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/851/events", "html_url": "https://github.com/jschneier/django-storages/issues/851", "id": 574924307, "node_id": "MDU6SXNzdWU1NzQ5MjQzMDc=", "number": 851, "title": "Subclassing SFTPStorage", "user": {"login": "DoctorJohn", "id": 14076775, "node_id": "MDQ6VXNlcjE0MDc2Nzc1", "avatar_url": "https://avatars1.githubusercontent.com/u/14076775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DoctorJohn", "html_url": "https://github.com/DoctorJohn", "followers_url": "https://api.github.com/users/DoctorJohn/followers", "following_url": "https://api.github.com/users/DoctorJohn/following{/other_user}", "gists_url": "https://api.github.com/users/DoctorJohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/DoctorJohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DoctorJohn/subscriptions", "organizations_url": "https://api.github.com/users/DoctorJohn/orgs", "repos_url": "https://api.github.com/users/DoctorJohn/repos", "events_url": "https://api.github.com/users/DoctorJohn/events{/privacy}", "received_events_url": "https://api.github.com/users/DoctorJohn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-03T20:33:31Z", "updated_at": "2020-04-27T15:02:52Z", "closed_at": "2020-04-27T15:02:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to subclass the SFTPStorage class so that I can have multiple SFTP backends. That's already conveniently possible with most of the other backends, as their settings can be provided using class variables.\r\n\r\nThe SFTPStorage class, however, only works with global settings or parameters passed to it's `__init__` method. Thus subclassing requires overriding `__init__`, which doesn't feel as clean as providing class variables.\r\n\r\nIs this intended? Otherwise I could create an PR which would adjust the SFTPStorage to allow convenient subclassing similar to the other backends.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/849", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/849/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/849/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/849/events", "html_url": "https://github.com/jschneier/django-storages/issues/849", "id": 574377593, "node_id": "MDU6SXNzdWU1NzQzNzc1OTM=", "number": 849, "title": "Django 3.0 - No module names 'django.utils.six'", "user": {"login": "python-force", "id": 770676, "node_id": "MDQ6VXNlcjc3MDY3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/770676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/python-force", "html_url": "https://github.com/python-force", "followers_url": "https://api.github.com/users/python-force/followers", "following_url": "https://api.github.com/users/python-force/following{/other_user}", "gists_url": "https://api.github.com/users/python-force/gists{/gist_id}", "starred_url": "https://api.github.com/users/python-force/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/python-force/subscriptions", "organizations_url": "https://api.github.com/users/python-force/orgs", "repos_url": "https://api.github.com/users/python-force/repos", "events_url": "https://api.github.com/users/python-force/events{/privacy}", "received_events_url": "https://api.github.com/users/python-force/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-03T02:41:40Z", "updated_at": "2020-04-14T02:32:09Z", "closed_at": "2020-04-14T02:32:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Six was removed in Django 3.0\r\n\r\nhttps://github.com/jschneier/django-storages/blob/master/storages/backends/s3boto3.py\r\n`from django.utils.six.moves.urllib import parse as urlparse`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/848", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/848/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/848/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/848/events", "html_url": "https://github.com/jschneier/django-storages/issues/848", "id": 573427858, "node_id": "MDU6SXNzdWU1NzM0Mjc4NTg=", "number": 848, "title": "Image not being deleted from Google Cloud Storage", "user": {"login": "deadpyxel", "id": 8644691, "node_id": "MDQ6VXNlcjg2NDQ2OTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8644691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deadpyxel", "html_url": "https://github.com/deadpyxel", "followers_url": "https://api.github.com/users/deadpyxel/followers", "following_url": "https://api.github.com/users/deadpyxel/following{/other_user}", "gists_url": "https://api.github.com/users/deadpyxel/gists{/gist_id}", "starred_url": "https://api.github.com/users/deadpyxel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deadpyxel/subscriptions", "organizations_url": "https://api.github.com/users/deadpyxel/orgs", "repos_url": "https://api.github.com/users/deadpyxel/repos", "events_url": "https://api.github.com/users/deadpyxel/events{/privacy}", "received_events_url": "https://api.github.com/users/deadpyxel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-29T23:08:59Z", "updated_at": "2020-04-27T01:33:24Z", "closed_at": "2020-04-27T00:23:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, first, thanks for the awesome library you built.\r\n\r\nI'm developing a Django Rest Framework API using your library to handle file upload and using TDD to develop my API. \r\n\r\nIn your documentation you say `Deleting an object deletes the file it uses, if there are no other objects still using that file`, so once the tearDown occurs, the file should be deleted from GCP too as I understood.\r\n\r\nThis is not happening, and since I can upload files fine, I wonder if this is misconfiguration or an edge case with unit testing. This is an example of the unit test I'm running:\r\n```python\r\ndef test_can_attach_file_to_ticket(self):\r\n        url = reverse(\"ticket-details\", kwargs={\"pk\": self.dummy_ticket.pk})\r\n        image = generate_dummy_image()\r\n        data = {\"attachments\": image}\r\n\r\n        response = self.client.patch(url, data, format=\"multipart\")\r\n\r\n        self.assertEqual(\r\n            response.status_code,\r\n            status.HTTP_200_OK,\r\n            msg=f\"Error: Response code was {response.status_code}, {response.content}\",\r\n        )\r\n        self.assertIn(\"attachments\", response.json())\r\n        self.assertEquals(response.json()[\"attachments\"], image)\r\n```\r\n`generate_dummy_image` is a function that just generates a simple 50x50 image to test the upload. The field `attachments` right now holds only one image, but later will be converted to an Array field, that will store at max 5 images. Just so you know, upload is fine, is the removal that is giving me trouble. I also tested removal with a DELETE request, and the file stays there.\r\n\r\nI also tried to create a `tearDown`:\r\n```python\r\ndef tearDown(self):\r\n    for ticket in Ticket.objects.all():\r\n        ticket.delete()\r\n```\r\n\r\nSo I am in need of some guidance. Sorry if this is a very basic error by me.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/844", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/844/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/844/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/844/events", "html_url": "https://github.com/jschneier/django-storages/issues/844", "id": 572587347, "node_id": "MDU6SXNzdWU1NzI1ODczNDc=", "number": 844, "title": "Fix simple typo: specifiy -> specify", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-28T07:51:12Z", "updated_at": "2020-02-28T07:58:34Z", "closed_at": "2020-02-28T07:58:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in docs/backends/amazon-S3.rst.\nShould read `specify` rather than `specifiy`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/835", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/835/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/835/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/835/events", "html_url": "https://github.com/jschneier/django-storages/issues/835", "id": 562982063, "node_id": "MDU6SXNzdWU1NjI5ODIwNjM=", "number": 835, "title": "SFTPStorage silently swallows exception for connection failures", "user": {"login": "pansapiens", "id": 39485, "node_id": "MDQ6VXNlcjM5NDg1", "avatar_url": "https://avatars2.githubusercontent.com/u/39485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pansapiens", "html_url": "https://github.com/pansapiens", "followers_url": "https://api.github.com/users/pansapiens/followers", "following_url": "https://api.github.com/users/pansapiens/following{/other_user}", "gists_url": "https://api.github.com/users/pansapiens/gists{/gist_id}", "starred_url": "https://api.github.com/users/pansapiens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pansapiens/subscriptions", "organizations_url": "https://api.github.com/users/pansapiens/orgs", "repos_url": "https://api.github.com/users/pansapiens/repos", "events_url": "https://api.github.com/users/pansapiens/events{/privacy}", "received_events_url": "https://api.github.com/users/pansapiens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T05:12:13Z", "updated_at": "2020-02-15T22:02:08Z", "closed_at": "2020-02-15T22:02:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Specifically: https://github.com/jschneier/django-storages/blob/ec9579b48606517a489bb79a869c78462c322422/storages/backends/sftpstorage.py#L81-L82\r\n\r\nWouldn't it be better to raise the exception to allow it to be handled by calling code ?\r\nIt's been causing issues in my use case, since there's no easy way to handle connection failure to SFTP servers that are offline.\r\n\r\neg attempting to connect to a server that doesn't exist:\r\n```python\r\nfrom storages.backends.sftpstorage import SFTPStorage\r\n\r\nparams = dict(port=22,\r\n              username='root',\r\n              password='hunter')\r\nstorage = SFTPStorage(host='does-not.exist-domain.example.com', params=params)\r\nstorage._connect()\r\nstorage.sftp\r\n```\r\n\r\nOutputs:\r\n```\r\n[Errno -2] Name or service not known\r\n[Errno -2] Name or service not known\r\n```\r\n\r\nrather than raising an exception.\r\n\r\nI can work around this issue by calling these private methods before attempting to use the `SFTPStorage` instance, but it's more of a hacky workaround:\r\n```\r\nstorage._connect()  # so that ._ssh exists\r\n # will raise an exception if connection fails\r\nstorage._ssh.connect(storage._host, **storage._params)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/834", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/834/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/834/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/834/events", "html_url": "https://github.com/jschneier/django-storages/issues/834", "id": 562398931, "node_id": "MDU6SXNzdWU1NjIzOTg5MzE=", "number": 834, "title": "How to delete file or path ?", "user": {"login": "hongquanvn1998", "id": 46532368, "node_id": "MDQ6VXNlcjQ2NTMyMzY4", "avatar_url": "https://avatars1.githubusercontent.com/u/46532368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hongquanvn1998", "html_url": "https://github.com/hongquanvn1998", "followers_url": "https://api.github.com/users/hongquanvn1998/followers", "following_url": "https://api.github.com/users/hongquanvn1998/following{/other_user}", "gists_url": "https://api.github.com/users/hongquanvn1998/gists{/gist_id}", "starred_url": "https://api.github.com/users/hongquanvn1998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hongquanvn1998/subscriptions", "organizations_url": "https://api.github.com/users/hongquanvn1998/orgs", "repos_url": "https://api.github.com/users/hongquanvn1998/repos", "events_url": "https://api.github.com/users/hongquanvn1998/events{/privacy}", "received_events_url": "https://api.github.com/users/hongquanvn1998/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-10T08:25:04Z", "updated_at": "2020-04-18T15:52:37Z", "closed_at": "2020-04-18T15:52:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see function delete in lib. But i don't know set name in function. so What is name in function ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/831", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/831/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/831/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/831/events", "html_url": "https://github.com/jschneier/django-storages/issues/831", "id": 559146655, "node_id": "MDU6SXNzdWU1NTkxNDY2NTU=", "number": 831, "title": "s3boto3 backend throws exception when attempting to close file opened in read mode since V1.9", "user": {"login": "mark4prime", "id": 27282069, "node_id": "MDQ6VXNlcjI3MjgyMDY5", "avatar_url": "https://avatars0.githubusercontent.com/u/27282069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark4prime", "html_url": "https://github.com/mark4prime", "followers_url": "https://api.github.com/users/mark4prime/followers", "following_url": "https://api.github.com/users/mark4prime/following{/other_user}", "gists_url": "https://api.github.com/users/mark4prime/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark4prime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark4prime/subscriptions", "organizations_url": "https://api.github.com/users/mark4prime/orgs", "repos_url": "https://api.github.com/users/mark4prime/repos", "events_url": "https://api.github.com/users/mark4prime/events{/privacy}", "received_events_url": "https://api.github.com/users/mark4prime/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-03T15:12:47Z", "updated_at": "2020-02-04T09:16:37Z", "closed_at": "2020-02-04T06:43:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since V1.9 it is now impossible to close a file opened in read mode using s3boto3 backend.\r\n\r\nThe culprit appears to be the _create_empty_on_close() method that has been added in this version which is called when no data has been written to the file. This asserts that 'w' is contained in the mode of the file which is obviously not present when opening a file for reading.\r\n\r\n```\r\ndef _create_empty_on_close(self):\r\n        \"\"\"\r\n        Attempt to create an empty file for this key when this File is closed if no bytes\r\n        have been written and no object already exists on S3 for this key.\r\n        This behavior is meant to mimic the behavior of Django's builtin FileSystemStorage,\r\n        where files are always created after they are opened in write mode:\r\n            f = storage.open(\"file.txt\", mode=\"w\")\r\n            f.close()\r\n        \"\"\"\r\n        assert \"w\" in self._mode\r\n        assert self._raw_bytes_written == 0\r\n\r\n        try:\r\n            # Check if the object exists on the server; if so, don't do anything\r\n            self.obj.load()\r\n        except ClientError as err:\r\n            if err.response[\"ResponseMetadata\"][\"HTTPStatusCode\"] == 404:\r\n                self.obj.put(\r\n                    Body=b\"\", **self._storage._get_write_parameters(self.obj.key)\r\n                )\r\n            else:\r\n                raise\r\n```\r\nExample:\r\n\r\n### settings.py\r\n```\r\n\"\"\"\r\nDjango settings for django_storages_test project.\r\n\r\nGenerated by 'django-admin startproject' using Django 3.0.3.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/3.0/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/3.0/ref/settings/\r\n\"\"\"\r\n\r\nimport os\r\n\r\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = '=nc0!k1%0b(v7k!s27no)yo+gf=awni74)&crh(ngd1(v3-zjl'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'storages',\r\n    'django_storages_test',\r\n    'boto3'\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'django_storages_test.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [os.path.join(BASE_DIR, 'templates')]\r\n        ,\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'django_storages_test.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_L10N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\r\n\r\nSTATIC_URL = '/static/'\r\n\r\n# storages settings\r\nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\r\nAWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']\r\nAWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']\r\nAWS_STORAGE_BUCKET_NAME = 'django-storages-test'\r\nAWS_S3_REGION_NAME = 'eu-west-1'\r\n```\r\n### models.py\r\n```\r\nfrom django.db import models\r\n\r\n\r\nclass Foo(models.Model):\r\n    foo_file = models.FileField()\r\n\r\n```\r\n\r\n### usage\r\n```\r\nfrom django_storages_test import models\r\nfrom django.core.files.base import ContentFile\r\nfoo = models.Foo.objects.create()\r\nfoo.foo_file.save('foo.txt', ContentFile(b'some text'))\r\n/Pycharm/Envs/django_storages_test/lib/python3.7/site-packages/storages/backends/s3boto3.py:341: UserWarning: The default behavior of S3Boto3Storage is insecure and will change in django-storages 1.10. By default files and new buckets are saved with an ACL of 'public-read' (globally publicly readable). Version 1.10 will default to using the bucket's ACL. To opt into the new behavior set AWS_DEFAULT_ACL = None, otherwise to silence this warning explicitly set AWS_DEFAULT_ACL.\r\n  \"The default behavior of S3Boto3Storage is insecure and will change \"\r\nfoo.foo_file.open()\r\n<FieldFile: foo.txt>\r\nfoo.foo_file.close()\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Pycharm/Envs/django_storages_test/lib/python3.7/site-packages/django/db/models/fields/files.py\", line 123, in close\r\n    file.close()\r\n  File \"/Pycharm/Envs/django_storages_test/lib/python3.7/site-packages/storages/backends/s3boto3.py\", line 194, in close\r\n    self._create_empty_on_close()\r\n  File \"/Pycharm/Envs/django_storages_test/lib/python3.7/site-packages/storages/backends/s3boto3.py\", line 166, in _create_empty_on_close\r\n    assert \"w\" in self._mode\r\nAssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/823", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/823/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/823/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/823/events", "html_url": "https://github.com/jschneier/django-storages/issues/823", "id": 557816208, "node_id": "MDU6SXNzdWU1NTc4MTYyMDg=", "number": 823, "title": "Cannot create multiple directories on Windows", "user": {"login": "abatkins", "id": 4325449, "node_id": "MDQ6VXNlcjQzMjU0NDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4325449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abatkins", "html_url": "https://github.com/abatkins", "followers_url": "https://api.github.com/users/abatkins/followers", "following_url": "https://api.github.com/users/abatkins/following{/other_user}", "gists_url": "https://api.github.com/users/abatkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/abatkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abatkins/subscriptions", "organizations_url": "https://api.github.com/users/abatkins/orgs", "repos_url": "https://api.github.com/users/abatkins/repos", "events_url": "https://api.github.com/users/abatkins/events{/privacy}", "received_events_url": "https://api.github.com/users/abatkins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-30T23:21:01Z", "updated_at": "2020-02-02T05:15:42Z", "closed_at": "2020-02-02T05:15:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Current code is not OS agnostic.\r\nReplace: `path.split('/')`  \r\nwith: `os.path.split(path)`\r\n\r\nhttps://github.com/jschneier/django-storages/blob/1ba084640238725c9ea28e43fe099578a9df9a98/storages/backends/ftp.py#L112", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/819", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/819/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/819/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/819/events", "html_url": "https://github.com/jschneier/django-storages/issues/819", "id": 554872095, "node_id": "MDU6SXNzdWU1NTQ4NzIwOTU=", "number": 819, "title": "How to override content-disposition for S3 Backend?", "user": {"login": "bmbouter", "id": 180319, "node_id": "MDQ6VXNlcjE4MDMxOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/180319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmbouter", "html_url": "https://github.com/bmbouter", "followers_url": "https://api.github.com/users/bmbouter/followers", "following_url": "https://api.github.com/users/bmbouter/following{/other_user}", "gists_url": "https://api.github.com/users/bmbouter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmbouter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmbouter/subscriptions", "organizations_url": "https://api.github.com/users/bmbouter/orgs", "repos_url": "https://api.github.com/users/bmbouter/repos", "events_url": "https://api.github.com/users/bmbouter/events{/privacy}", "received_events_url": "https://api.github.com/users/bmbouter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-24T17:51:32Z", "updated_at": "2020-02-03T06:41:20Z", "closed_at": "2020-02-03T06:41:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Our django app stores file in a content addressable storage layout so the filename on disk is not the filename our users think of it as. We know both filenames. What would you recommend for us to configure our app's use of django-storages to set the Content-Disposition header for Amazon S3 backends?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/817", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/817/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/817/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/817/events", "html_url": "https://github.com/jschneier/django-storages/issues/817", "id": 551771185, "node_id": "MDU6SXNzdWU1NTE3NzExODU=", "number": 817, "title": "dropbox storages pattern error", "user": {"login": "maharshi-b", "id": 42892220, "node_id": "MDQ6VXNlcjQyODkyMjIw", "avatar_url": "https://avatars2.githubusercontent.com/u/42892220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maharshi-b", "html_url": "https://github.com/maharshi-b", "followers_url": "https://api.github.com/users/maharshi-b/followers", "following_url": "https://api.github.com/users/maharshi-b/following{/other_user}", "gists_url": "https://api.github.com/users/maharshi-b/gists{/gist_id}", "starred_url": "https://api.github.com/users/maharshi-b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maharshi-b/subscriptions", "organizations_url": "https://api.github.com/users/maharshi-b/orgs", "repos_url": "https://api.github.com/users/maharshi-b/repos", "events_url": "https://api.github.com/users/maharshi-b/events{/privacy}", "received_events_url": "https://api.github.com/users/maharshi-b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-18T13:42:59Z", "updated_at": "2020-01-20T17:53:34Z", "closed_at": "2020-01-20T17:53:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is my  settings code\r\nDEFAULT_FILE_STORAGE = 'storages.backends.dropbox.DropBoxStorage'\r\nDROPBOX_OAUTH2_TOKEN = \"my token\"\r\nDROPBOX_ROOT_PATH = \"Apps/Djangoproject\"\r\n\r\nValidationError:  did not match pattern '(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)'\r\nhow to solve this  issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/808", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/808/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/808/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/808/events", "html_url": "https://github.com/jschneier/django-storages/issues/808", "id": 544181418, "node_id": "MDU6SXNzdWU1NDQxODE0MTg=", "number": 808, "title": "\"Server failed to authenticate the request\" Azure backend", "user": {"login": "richardARPANET", "id": 38049750, "node_id": "MDQ6VXNlcjM4MDQ5NzUw", "avatar_url": "https://avatars3.githubusercontent.com/u/38049750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richardARPANET", "html_url": "https://github.com/richardARPANET", "followers_url": "https://api.github.com/users/richardARPANET/followers", "following_url": "https://api.github.com/users/richardARPANET/following{/other_user}", "gists_url": "https://api.github.com/users/richardARPANET/gists{/gist_id}", "starred_url": "https://api.github.com/users/richardARPANET/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richardARPANET/subscriptions", "organizations_url": "https://api.github.com/users/richardARPANET/orgs", "repos_url": "https://api.github.com/users/richardARPANET/repos", "events_url": "https://api.github.com/users/richardARPANET/events{/privacy}", "received_events_url": "https://api.github.com/users/richardARPANET/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-31T12:46:48Z", "updated_at": "2019-12-31T12:57:37Z", "closed_at": "2019-12-31T12:57:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 3.7.4\r\n\r\n\r\n```\r\ndjango-storages==1.8  # i also tried master on github \r\nazure-storage-blob==2.1.0\r\n```\r\n\r\n```\r\n2019-12-31 12:31:06,977 - health-check - ERROR - unavailable: Unknown exception\r\nTraceback (most recent call last):\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/health_check/storage/backends.py\", line 65, in check_status\r\n    file_name = self.check_save(file_name, file_content)\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/health_check/storage/backends.py\", line 43, in check_save\r\n    file_name, ContentFile(content=file_content)\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/django/core/files/storage.py\", line 51, in save\r\n    name = self.get_available_name(name, max_length=max_length)\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/src/django-storages/storages/backends/azure_storage.py\", line 215, in get_available_name\r\n    return super(AzureStorage, self).get_available_name(name, max_length)\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/django/core/files/storage.py\", line 82, in get_available_name\r\n    while self.exists(name) or (max_length and len(name) > max_length):\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/src/django-storages/storages/backends/azure_storage.py\", line 221, in exists\r\n    timeout=self.timeout)\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/azure/storage/blob/baseblobservice.py\", line 1763, in exists\r\n    _dont_fail_not_exist(ex)\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/azure/storage/common/_error.py\", line 97, in _dont_fail_not_exist\r\n    raise error\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/azure/storage/blob/baseblobservice.py\", line 1759, in exists\r\n    self._perform_request(request, expected_errors=expected_errors)\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/azure/storage/common/storageclient.py\", line 446, in _perform_request\r\n    raise ex\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/azure/storage/common/storageclient.py\", line 374, in _perform_request\r\n    raise ex\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/azure/storage/common/storageclient.py\", line 360, in _perform_request\r\n    HTTPError(response.status, response.message, response.headers, response.body))\r\n  File \"/home/work/.pyenv/versions/3.7.4/envs/data-samples-service/lib/python3.7/site-packages/azure/storage/common/_error.py\", line 115, in _http_error_handler\r\n    raise ex\r\nazure.common.AzureHttpError: Server failed to authenticate the request. Make sure the value of Authorization header is formed correctly including the signature. ErrorCode: AuthenticationFailed\r\n```\r\n\r\nI'm using https://github.com/KristianOellegaard/django-health-check\r\n\r\nWhich uses django-storages. When using a valid tested account key and the following django settings. Note that I have tried using the `az` cli tool with these params and it works fine, so the issue is the Python code.\r\n\r\nThe below key is mine with alphanumeric chars replaced with x\r\n\r\n```\r\nAZURE_ACCOUNT_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxxxxxxxxxxx+xxxxxxx/xxx+x==\r\nAZURE_ACCOUNT_NAME=exampleaccount\r\nAZURE_CONTAINER=example\r\nAZURE_CUSTOM_DOMAIN=example.blob.core.windows.net\r\n```\r\n\r\nAm i doing something wrong/any ideas?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/806", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/806/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/806/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/806/events", "html_url": "https://github.com/jschneier/django-storages/issues/806", "id": 541309810, "node_id": "MDU6SXNzdWU1NDEzMDk4MTA=", "number": 806, "title": "RemovedInDjango40Warning: force_text() is deprecated in favor of force_str()", "user": {"login": "loozhengyuan", "id": 3350651, "node_id": "MDQ6VXNlcjMzNTA2NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3350651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loozhengyuan", "html_url": "https://github.com/loozhengyuan", "followers_url": "https://api.github.com/users/loozhengyuan/followers", "following_url": "https://api.github.com/users/loozhengyuan/following{/other_user}", "gists_url": "https://api.github.com/users/loozhengyuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/loozhengyuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loozhengyuan/subscriptions", "organizations_url": "https://api.github.com/users/loozhengyuan/orgs", "repos_url": "https://api.github.com/users/loozhengyuan/repos", "events_url": "https://api.github.com/users/loozhengyuan/events{/privacy}", "received_events_url": "https://api.github.com/users/loozhengyuan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-21T10:10:17Z", "updated_at": "2020-06-06T01:37:18Z", "closed_at": "2020-06-06T01:37:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "After recently upgrading to Django 3.0, I started to receive deprecation warnings for `force_text()`. As noted in the [release notes](https://docs.djangoproject.com/en/3.0/releases/3.0/#django-utils-encoding-force-text-and-smart-text):\r\n\r\n> **`django.utils.encoding.force_text()` and `smart_text()`**\r\n> The `smart_text()` and `force_text()` aliases (since Django 2.0) of `smart_str()` and `force_str()` are deprecated. Ignore this deprecation if your code supports Python 2 as the behavior of `smart_str()` and `force_str()` is different there.\r\n\r\nI noted that `django-storages` still supports Python 2.7, but I'm not sure if support for it is going to be dropped soon or otherwise. If we're interested to address this, i'll be more than happy to follow up with a PR.\r\n\r\nEDIT: Python 2.7 will be [unsupported after January 1, 2020](https://www.python.org/doc/sunset-python-2/).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/804", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/804/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/804/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/804/events", "html_url": "https://github.com/jschneier/django-storages/issues/804", "id": 540817025, "node_id": "MDU6SXNzdWU1NDA4MTcwMjU=", "number": 804, "title": "folder creation feature", "user": {"login": "lijoev", "id": 19813885, "node_id": "MDQ6VXNlcjE5ODEzODg1", "avatar_url": "https://avatars0.githubusercontent.com/u/19813885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lijoev", "html_url": "https://github.com/lijoev", "followers_url": "https://api.github.com/users/lijoev/followers", "following_url": "https://api.github.com/users/lijoev/following{/other_user}", "gists_url": "https://api.github.com/users/lijoev/gists{/gist_id}", "starred_url": "https://api.github.com/users/lijoev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lijoev/subscriptions", "organizations_url": "https://api.github.com/users/lijoev/orgs", "repos_url": "https://api.github.com/users/lijoev/repos", "events_url": "https://api.github.com/users/lijoev/events{/privacy}", "received_events_url": "https://api.github.com/users/lijoev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-20T07:15:37Z", "updated_at": "2020-02-03T05:37:57Z", "closed_at": "2020-02-03T05:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to create folder using django-storages in s3. I could upload files to s3 using django-storage but i could not do it for folder. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/797", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/797/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/797/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/797/events", "html_url": "https://github.com/jschneier/django-storages/issues/797", "id": 530665096, "node_id": "MDU6SXNzdWU1MzA2NjUwOTY=", "number": 797, "title": "Get S3 url but cannot find the uploaded file", "user": {"login": "django-dream", "id": 57606701, "node_id": "MDQ6VXNlcjU3NjA2NzAx", "avatar_url": "https://avatars1.githubusercontent.com/u/57606701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/django-dream", "html_url": "https://github.com/django-dream", "followers_url": "https://api.github.com/users/django-dream/followers", "following_url": "https://api.github.com/users/django-dream/following{/other_user}", "gists_url": "https://api.github.com/users/django-dream/gists{/gist_id}", "starred_url": "https://api.github.com/users/django-dream/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/django-dream/subscriptions", "organizations_url": "https://api.github.com/users/django-dream/orgs", "repos_url": "https://api.github.com/users/django-dream/repos", "events_url": "https://api.github.com/users/django-dream/events{/privacy}", "received_events_url": "https://api.github.com/users/django-dream/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-01T03:47:49Z", "updated_at": "2019-12-01T06:09:27Z", "closed_at": "2019-12-01T06:09:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/796", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/796/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/796/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/796/events", "html_url": "https://github.com/jschneier/django-storages/issues/796", "id": 530463927, "node_id": "MDU6SXNzdWU1MzA0NjM5Mjc=", "number": 796, "title": "Development files uploaded to production", "user": {"login": "JimmyVT", "id": 2736269, "node_id": "MDQ6VXNlcjI3MzYyNjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2736269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JimmyVT", "html_url": "https://github.com/JimmyVT", "followers_url": "https://api.github.com/users/JimmyVT/followers", "following_url": "https://api.github.com/users/JimmyVT/following{/other_user}", "gists_url": "https://api.github.com/users/JimmyVT/gists{/gist_id}", "starred_url": "https://api.github.com/users/JimmyVT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JimmyVT/subscriptions", "organizations_url": "https://api.github.com/users/JimmyVT/orgs", "repos_url": "https://api.github.com/users/JimmyVT/repos", "events_url": "https://api.github.com/users/JimmyVT/events{/privacy}", "received_events_url": "https://api.github.com/users/JimmyVT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-29T19:02:39Z", "updated_at": "2019-12-01T23:41:23Z", "closed_at": "2019-12-01T23:41:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi !\r\n\r\nI've just installed django-storages[google] on my development machine. Everything works fine, but I noticed that the files I upload on develoment are actually uploaded to my production bucket.\r\n\r\nIs this normal behavior? Are there special settings for development?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/795", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/795/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/795/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/795/events", "html_url": "https://github.com/jschneier/django-storages/issues/795", "id": 530390304, "node_id": "MDU6SXNzdWU1MzAzOTAzMDQ=", "number": 795, "title": "EndpointConnectionError", "user": {"login": "Ouradze", "id": 5817781, "node_id": "MDQ6VXNlcjU4MTc3ODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5817781?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ouradze", "html_url": "https://github.com/Ouradze", "followers_url": "https://api.github.com/users/Ouradze/followers", "following_url": "https://api.github.com/users/Ouradze/following{/other_user}", "gists_url": "https://api.github.com/users/Ouradze/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ouradze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ouradze/subscriptions", "organizations_url": "https://api.github.com/users/Ouradze/orgs", "repos_url": "https://api.github.com/users/Ouradze/repos", "events_url": "https://api.github.com/users/Ouradze/events{/privacy}", "received_events_url": "https://api.github.com/users/Ouradze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-29T15:06:44Z", "updated_at": "2019-12-03T17:04:14Z", "closed_at": "2019-12-03T17:04:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nSorry for the noise but I think I am missing something and I can't find my solution. When running my collectstatic, I get the following error:\r\n`botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: \"http://localhost:1212/test/static/gis/css/ol3.css\"`\r\n\r\nHere is the following setup:\r\n\r\n**docker-compose.yaml**\r\n```yaml\r\n. . .\r\n  s3server:\r\n    image: scality/s3server:latest\r\n    restart: unless-stopped\r\n    ports:\r\n      - \"1212:8000\"\r\n    volumes:\r\n      - s3data:/usr/src/app/localData\r\n      - s3metadata:/usr/src/app/localMetadata\r\n    environment:\r\n      SCALITY_ACCESS_KEY_ID: newAccessKey\r\n      SCALITY_SECRET_ACCESS_KEY: newSecretKey\r\n      SSL: \"FALSE\"\r\n```\r\n**settings.py**\r\n```python\r\n# AWS settings\r\nAWS_ACCESS_KEY_ID = env.str('AWS_ACCESS_KEY_ID')\r\nAWS_SECRET_ACCESS_KEY = env.str('AWS_SECRET_ACCESS_KEY')\r\nAWS_S3_REGION_NAME = env.str('AWS_S3_REGION_NAME')\r\nAWS_STORAGE_BUCKET_NAME = env.str('AWS_STORAGE_BUCKET_NAME')\r\nAWS_S3_ENDPOINT_URL = env.str('AWS_S3_ENDPOINT_URL')\r\nAWS_DEFAULT_ACL = None\r\nAWS_S3_OBJECT_PARAMETERS = {\r\n    'CacheControl': 'max-age=86400',\r\n}\r\nAWS_QUERYSTRING_AUTH = False\r\n\r\n# s3 static settings\r\nAWS_STATIC_LOCATION = 'static'\r\nSTATIC_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STATIC_LOCATION}/'\r\nSTATICFILES_STORAGE = 'backend.storages.StaticStorage'\r\n\r\n# s3 media settings\r\nAWS_MEDIA_LOCATION = 'media'\r\nMEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_MEDIA_LOCATION}/'\r\nDEFAULT_FILE_STORAGE = 'backend.storages.PublicMediaStorage'\r\n```\r\n\r\n**dev.env**\r\n```ini\r\nAWS_STORAGE_BUCKET_NAME=test\r\nAWS_ACCESS_KEY_ID=newAccessKey \r\nAWS_SECRET_ACCESS_KEY=newSecretKey\r\nAWS_S3_REGION_NAME=us-east-1\r\nAWS_S3_ENDPOINT_URL=http://localhost:1212\r\n```\r\n\r\n**backend/storages.py**\r\n```python\r\nclass StaticStorage(S3Boto3Storage):\r\n    location = settings.AWS_STATIC_LOCATION\r\n    default_acl = \"public-read\"\r\n\r\n\r\nclass PublicMediaStorage(S3Boto3Storage):\r\n    location = settings.AWS_MEDIA_LOCATION\r\n    default_acl = 'public-read'\r\n    file_overwrite = False\r\n```\r\n\r\nI really don't understand why as the following script works just fine:\r\n\r\n**script.py**\r\n```python\r\nimport logging\r\nimport boto3\r\nfrom botocore.exceptions import ClientError\r\n\r\ns3_client = boto3.client(\r\n    's3',\r\n    aws_access_key_id=\"newAccessKey\",\r\n    aws_secret_access_key=\"newSecretKey\",\r\n    endpoint_url='http://localhost:1212',\r\n    region_name=\"us-east-1\",\r\n)\r\n\r\ndef create_bucket(bucket_name):\r\n    try:\r\n        s3_client.create_bucket(\r\n            Bucket=bucket_name,\r\n            CreateBucketConfiguration={'LocationConstraint': \"us-east-1\"},\r\n        )\r\n    except ClientError as e:\r\n        logging.error(e)\r\n        return False\r\n    return True\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    create_bucket(\"test\", region=\"us-east-1\")\r\n\r\n    response = s3_client.list_buckets()\r\n\r\n    # Output the bucket names\r\n    print('Existing buckets:')\r\n    for bucket in response['Buckets']:\r\n        print(f'  {bucket[\"Name\"]}')\r\n\r\n    response = s3_client.upload_file(\r\n        \"backend/tests/test_image.jpg\",\r\n        \"test\",\r\n        \"static/test_image\",\r\n    )\r\n    s3_client.download_file('test', 'static/test_image', 'toto.jpg')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/794", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/794/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/794/events", "html_url": "https://github.com/jschneier/django-storages/issues/794", "id": 524799907, "node_id": "MDU6SXNzdWU1MjQ3OTk5MDc=", "number": 794, "title": "Segmentation fault (core dumped)", "user": {"login": "anuj9196", "id": 6560085, "node_id": "MDQ6VXNlcjY1NjAwODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6560085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anuj9196", "html_url": "https://github.com/anuj9196", "followers_url": "https://api.github.com/users/anuj9196/followers", "following_url": "https://api.github.com/users/anuj9196/following{/other_user}", "gists_url": "https://api.github.com/users/anuj9196/gists{/gist_id}", "starred_url": "https://api.github.com/users/anuj9196/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anuj9196/subscriptions", "organizations_url": "https://api.github.com/users/anuj9196/orgs", "repos_url": "https://api.github.com/users/anuj9196/repos", "events_url": "https://api.github.com/users/anuj9196/events{/privacy}", "received_events_url": "https://api.github.com/users/anuj9196/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-19T06:20:07Z", "updated_at": "2020-03-24T16:08:07Z", "closed_at": "2020-03-24T16:08:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using this in **django 2.x**.\r\n\r\nWhile executing the `sample_test`, from `manage.py shell` everything works fine and `sample_test` file was created in the S3 bucket. But, while reading the file content, it gives following error and terminates the console.\r\n```\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nMy console log\r\n```\r\nIn [1]: from django.core.files.storage import default_storage                                                                                                                                                                                  \r\n\r\nIn [2]: default_storage.exists('storage_test')                                                                                                                                                                                                 \r\nOut[2]: False\r\n\r\nIn [3]: file = default_storage.open('storage_test', 'w')                                                                                                                                                                                       \r\n\r\nIn [4]: file.write('storage content')                                                                                                                                                                                                          \r\nOut[4]: 15\r\n\r\nIn [5]: file.close()                                                                                                                                                                                                                           \r\n\r\nIn [6]: default_storage.exists('storage_test')                                                                                                                                                                                                 \r\nOut[6]: True\r\n\r\nIn [7]: file = default_storage.open('storage_test', 'r')                                                                                                                                                                                       \r\n\r\nIn [8]: file.read()                                                                                                                                                                                                                            \r\nSegmentation fault (core dumped)\r\n```\r\n\r\nI tried with following configuration \r\n```\r\nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\r\nAWS_STORAGE_BUCKET_NAME = os.environ.get('S3_STORAGE', 'my-bucket')\r\nAWS_DEFAULT_ACL = 'public-read'\r\nAWS_AUTO_CREATE_BUCKET = True\r\nAWS_BUCKET_ACL = 'public-read'\r\nAWS_S3_ENCRYPTION = True\r\nAWS_S3_FILE_OVERWRITE = False\r\nAWS_S3_USE_SSL = True\r\n```\r\n\r\nThe `my-bucket` Bucket is created automatically, files are being created inside the bucket but `read()` gives the same error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/790", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/790/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/790/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/790/events", "html_url": "https://github.com/jschneier/django-storages/issues/790", "id": 524000916, "node_id": "MDU6SXNzdWU1MjQwMDA5MTY=", "number": 790, "title": ".", "user": {"login": "niccolomineo", "id": 5409469, "node_id": "MDQ6VXNlcjU0MDk0Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5409469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niccolomineo", "html_url": "https://github.com/niccolomineo", "followers_url": "https://api.github.com/users/niccolomineo/followers", "following_url": "https://api.github.com/users/niccolomineo/following{/other_user}", "gists_url": "https://api.github.com/users/niccolomineo/gists{/gist_id}", "starred_url": "https://api.github.com/users/niccolomineo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niccolomineo/subscriptions", "organizations_url": "https://api.github.com/users/niccolomineo/orgs", "repos_url": "https://api.github.com/users/niccolomineo/repos", "events_url": "https://api.github.com/users/niccolomineo/events{/privacy}", "received_events_url": "https://api.github.com/users/niccolomineo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-17T15:24:35Z", "updated_at": "2019-11-17T19:04:54Z", "closed_at": "2019-11-17T19:04:54Z", "author_association": "NONE", "active_lock_reason": null, "body": ".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/789", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/789/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/789/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/789/events", "html_url": "https://github.com/jschneier/django-storages/issues/789", "id": 523496169, "node_id": "MDU6SXNzdWU1MjM0OTYxNjk=", "number": 789, "title": "Multiple S3 Buckets", "user": {"login": "steverecio", "id": 978415, "node_id": "MDQ6VXNlcjk3ODQxNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/978415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steverecio", "html_url": "https://github.com/steverecio", "followers_url": "https://api.github.com/users/steverecio/followers", "following_url": "https://api.github.com/users/steverecio/following{/other_user}", "gists_url": "https://api.github.com/users/steverecio/gists{/gist_id}", "starred_url": "https://api.github.com/users/steverecio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steverecio/subscriptions", "organizations_url": "https://api.github.com/users/steverecio/orgs", "repos_url": "https://api.github.com/users/steverecio/repos", "events_url": "https://api.github.com/users/steverecio/events{/privacy}", "received_events_url": "https://api.github.com/users/steverecio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-15T14:19:58Z", "updated_at": "2019-11-18T02:44:27Z", "closed_at": "2019-11-18T02:27:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to create two separate s3 buckets? One with public-read and one set to private? Some files uploaded I need to proxy through my server for security reasons (private bucket) and another that I'd like to serve the files directly from s3 (public bucket). What's the best way to do that?\r\n\r\nI see `AWS_STORAGE_BUCKET_NAME` takes a string and not a list so it seems like there's only one bucket that you can use with django-storages?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/788", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/788/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/788/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/788/events", "html_url": "https://github.com/jschneier/django-storages/issues/788", "id": 521323259, "node_id": "MDU6SXNzdWU1MjEzMjMyNTk=", "number": 788, "title": "AWS EC2 500 error: \"ModuleNotFoundError: No module named 'storages'\"", "user": {"login": "django-dream", "id": 57606701, "node_id": "MDQ6VXNlcjU3NjA2NzAx", "avatar_url": "https://avatars1.githubusercontent.com/u/57606701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/django-dream", "html_url": "https://github.com/django-dream", "followers_url": "https://api.github.com/users/django-dream/followers", "following_url": "https://api.github.com/users/django-dream/following{/other_user}", "gists_url": "https://api.github.com/users/django-dream/gists{/gist_id}", "starred_url": "https://api.github.com/users/django-dream/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/django-dream/subscriptions", "organizations_url": "https://api.github.com/users/django-dream/orgs", "repos_url": "https://api.github.com/users/django-dream/repos", "events_url": "https://api.github.com/users/django-dream/events{/privacy}", "received_events_url": "https://api.github.com/users/django-dream/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-12T04:37:35Z", "updated_at": "2019-11-12T04:48:18Z", "closed_at": "2019-11-12T04:48:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/787", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/787/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/787/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/787/events", "html_url": "https://github.com/jschneier/django-storages/issues/787", "id": 519553679, "node_id": "MDU6SXNzdWU1MTk1NTM2Nzk=", "number": 787, "title": "azure backend relies on azure.common which is not a requirement", "user": {"login": "domdinicola", "id": 2621572, "node_id": "MDQ6VXNlcjI2MjE1NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2621572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domdinicola", "html_url": "https://github.com/domdinicola", "followers_url": "https://api.github.com/users/domdinicola/followers", "following_url": "https://api.github.com/users/domdinicola/following{/other_user}", "gists_url": "https://api.github.com/users/domdinicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/domdinicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domdinicola/subscriptions", "organizations_url": "https://api.github.com/users/domdinicola/orgs", "repos_url": "https://api.github.com/users/domdinicola/repos", "events_url": "https://api.github.com/users/domdinicola/events{/privacy}", "received_events_url": "https://api.github.com/users/domdinicola/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-07T22:38:43Z", "updated_at": "2019-11-18T04:47:05Z", "closed_at": "2019-11-18T04:47:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "azure.common import AzureMissingResourceHttpError\r\n```\r\n File \"/root/code/src/etools/libraries/azure_storage_backend.py\", line 6, in <module>\r\n    from storages.backends.azure_storage import AzureStorage\r\n  File \"/root/code/.tox/d22/lib/python3.7/site-packages/storages/backends/azure_storage.py\", line 7, in <module>\r\n    from azure.common import AzureMissingResourceHttpError\r\nModuleNotFoundError: No module named 'azure.common'\r\n````\r\n\r\nfor now i added azure-common as requirement please advice..\r\nmaybe we should use azure.core exceptions", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/783", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/783/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/783/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/783/events", "html_url": "https://github.com/jschneier/django-storages/issues/783", "id": 515843260, "node_id": "MDU6SXNzdWU1MTU4NDMyNjA=", "number": 783, "title": "Setting GS_DEFAULT_ACL to 'publicRead' returns a 400 Bad Request", "user": {"login": "ryanovas", "id": 5014918, "node_id": "MDQ6VXNlcjUwMTQ5MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5014918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryanovas", "html_url": "https://github.com/ryanovas", "followers_url": "https://api.github.com/users/ryanovas/followers", "following_url": "https://api.github.com/users/ryanovas/following{/other_user}", "gists_url": "https://api.github.com/users/ryanovas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryanovas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryanovas/subscriptions", "organizations_url": "https://api.github.com/users/ryanovas/orgs", "repos_url": "https://api.github.com/users/ryanovas/repos", "events_url": "https://api.github.com/users/ryanovas/events{/privacy}", "received_events_url": "https://api.github.com/users/ryanovas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-01T00:39:08Z", "updated_at": "2020-02-29T21:25:40Z", "closed_at": "2020-02-29T21:25:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I'm just trying to get my urls to stop expiring. My bucket on Google is set to public read, and if I remove the query parameters from the url of an expired link then it loads fine. I read the documentation that said to set GS_DEFAULT_ACL = 'publicRead' to return urls without the expiry. So I tried this and now I get 400 errors from the google library whenever I try to upload a file. Here is my code, followed by the error I get:\r\n\r\n**This is my settings.py**\r\n```\r\n# Django Storages Config to use Google Cloud\r\nfrom google.oauth2 import service_account\r\n\r\nGS_BUCKET_NAME = 'bucket-name'\r\nDEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'\r\nGS_PROJECT_ID = 'project-id'\r\nGS_DEFAULT_ACL = 'publicRead'\r\nGS_CREDENTIALS = service_account.Credentials.from_service_account_file(\r\n    os.path.join(BASE_DIR, 'assets/auth/google-storage.json')\r\n)\r\n```\r\n**Here is the model in question (though all file uploads fail not just this one):**\r\n\r\n```\r\ndef path_and_rename_rdoc(instance, filename):\r\n    ext = filename.split('.')[-1]\r\n    filename = '{}.{}'.format(uuid4().hex, ext)\r\n    return os.path.join('document_images', filename)\r\n\r\ndef validate_file_extension(value):\r\n    ext = os.path.splitext(value.name)[1]\r\n    valid_extensions = ['.jpg','.png','.svg']\r\n    if not ext in valid_extensions:\r\n        raise ValidationError('File not supported!')\r\n\r\nclass RequiredDocument(models.Model):\r\n    image = models.FileField(upload_to=path_and_rename_rdoc, null=False, validators=[validate_file_extension])\r\n```\r\n**and here's the error:**\r\n\r\n`google.api_core.exceptions.BadRequest: 400 POST https://www.googleapis.com/upload/storage/v1/b/bucket-name/o?uploadType=multipart&predefinedAcl=publicRead: ('Request failed with status code', 400, 'Expected one of', <HTTPStatus.OK: 200>)\r\n`\r\n\r\nI must be doing something dumb and not realizing it, as it works fine if I remove GS_DEFAULT_ACL. It just has expiring links even though the bucket is public. I'm using version 1.7.2, and my service account has Storage Admin permissions.\r\n\r\nThanks for the help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/781", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/781/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/781/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/781/events", "html_url": "https://github.com/jschneier/django-storages/issues/781", "id": 510134338, "node_id": "MDU6SXNzdWU1MTAxMzQzMzg=", "number": 781, "title": "Static tag generating query string params", "user": {"login": "b99andla", "id": 8145201, "node_id": "MDQ6VXNlcjgxNDUyMDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8145201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b99andla", "html_url": "https://github.com/b99andla", "followers_url": "https://api.github.com/users/b99andla/followers", "following_url": "https://api.github.com/users/b99andla/following{/other_user}", "gists_url": "https://api.github.com/users/b99andla/gists{/gist_id}", "starred_url": "https://api.github.com/users/b99andla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b99andla/subscriptions", "organizations_url": "https://api.github.com/users/b99andla/orgs", "repos_url": "https://api.github.com/users/b99andla/repos", "events_url": "https://api.github.com/users/b99andla/events{/privacy}", "received_events_url": "https://api.github.com/users/b99andla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-21T17:17:13Z", "updated_at": "2019-10-21T17:25:06Z", "closed_at": "2019-10-21T17:25:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, my webpage generates file that includes the access tokens when using the static tag in django to link to my static files\r\n\r\n`<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/main.css' %}\">`\r\n\r\nRight now its generating:\r\n\r\n> https://******.digitaloceanspaces.com/fpl/static/css/main.css?AWSAccessKeyId=&Signature=%3D&Expires=1571503012\r\n\r\nin my html\r\n\r\nMy settings for static files in production:\r\n\r\n```\r\nAWS_ACCESS_KEY_ID = '***' \r\nAWS_SECRET_ACCESS_KEY = '****' \r\nAWS_STORAGE_BUCKET_NAME= '***' \r\nAWS_S3_ENDPOINT_URL = 'https://*****.digitaloceanspaces.com' AWS_S3_OBJECT_PARAMETERS = {\r\n    'CacheControl': 'max-age=86400', } \r\nAWS_LOCATION = 'static'\r\n\r\nSTATIC_URL = 'http://***.***.***' \r\nSTATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\r\n```\r\nHow can i change the settings to make it link to my static storage without the query params?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/779", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/779/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/779/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/779/events", "html_url": "https://github.com/jschneier/django-storages/issues/779", "id": 508843890, "node_id": "MDU6SXNzdWU1MDg4NDM4OTA=", "number": 779, "title": "Files are not given unique names when using with google clouds storage bucket.", "user": {"login": "deepak013", "id": 18129127, "node_id": "MDQ6VXNlcjE4MTI5MTI3", "avatar_url": "https://avatars2.githubusercontent.com/u/18129127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deepak013", "html_url": "https://github.com/deepak013", "followers_url": "https://api.github.com/users/deepak013/followers", "following_url": "https://api.github.com/users/deepak013/following{/other_user}", "gists_url": "https://api.github.com/users/deepak013/gists{/gist_id}", "starred_url": "https://api.github.com/users/deepak013/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deepak013/subscriptions", "organizations_url": "https://api.github.com/users/deepak013/orgs", "repos_url": "https://api.github.com/users/deepak013/repos", "events_url": "https://api.github.com/users/deepak013/events{/privacy}", "received_events_url": "https://api.github.com/users/deepak013/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T04:14:15Z", "updated_at": "2020-02-02T23:46:00Z", "closed_at": "2020-02-02T23:46:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I am trying to upload two different files with same name,its just replacing old file with new one instead of giving new unique name to file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/776", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/776/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/776/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/776/events", "html_url": "https://github.com/jschneier/django-storages/issues/776", "id": 506025995, "node_id": "MDU6SXNzdWU1MDYwMjU5OTU=", "number": 776, "title": "Include ImportError information in ImproperlyConfigured error raised in s3boto3.py", "user": {"login": "OddBloke", "id": 62736, "node_id": "MDQ6VXNlcjYyNzM2", "avatar_url": "https://avatars1.githubusercontent.com/u/62736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OddBloke", "html_url": "https://github.com/OddBloke", "followers_url": "https://api.github.com/users/OddBloke/followers", "following_url": "https://api.github.com/users/OddBloke/following{/other_user}", "gists_url": "https://api.github.com/users/OddBloke/gists{/gist_id}", "starred_url": "https://api.github.com/users/OddBloke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OddBloke/subscriptions", "organizations_url": "https://api.github.com/users/OddBloke/orgs", "repos_url": "https://api.github.com/users/OddBloke/repos", "events_url": "https://api.github.com/users/OddBloke/events{/privacy}", "received_events_url": "https://api.github.com/users/OddBloke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-11T19:40:50Z", "updated_at": "2019-11-20T17:21:22Z", "closed_at": "2019-11-18T05:16:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently debugging an environment where we're seeing the `ImproperlyConfigured` error raised when importing the various boto libraries that `s3boto3.py` needs to function. It would be easier to debug based on the traceback if the `ImproperlyConfigured` error included some information about the `ImportError` that caused it.\r\n\r\n(As it is now, we have to enter the environment in question and do some manual importing in a Python shell to work out which one it is. Not the worst, but certainly not as good as including it in my logs.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/775", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/775/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/775/events", "html_url": "https://github.com/jschneier/django-storages/issues/775", "id": 505570348, "node_id": "MDU6SXNzdWU1MDU1NzAzNDg=", "number": 775, "title": "Add custom domain option for Google Cloud", "user": {"login": "mlockett42", "id": 5838777, "node_id": "MDQ6VXNlcjU4Mzg3Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5838777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlockett42", "html_url": "https://github.com/mlockett42", "followers_url": "https://api.github.com/users/mlockett42/followers", "following_url": "https://api.github.com/users/mlockett42/following{/other_user}", "gists_url": "https://api.github.com/users/mlockett42/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlockett42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlockett42/subscriptions", "organizations_url": "https://api.github.com/users/mlockett42/orgs", "repos_url": "https://api.github.com/users/mlockett42/repos", "events_url": "https://api.github.com/users/mlockett42/events{/privacy}", "received_events_url": "https://api.github.com/users/mlockett42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-11T00:09:09Z", "updated_at": "2020-02-02T23:47:14Z", "closed_at": "2020-02-02T23:47:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "An equivalent of `AWS_S3_CUSTOM_DOMAIN` but for Google Cloud would be super useful to me.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/772", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/772/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/772/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/772/events", "html_url": "https://github.com/jschneier/django-storages/issues/772", "id": 502931584, "node_id": "MDU6SXNzdWU1MDI5MzE1ODQ=", "number": 772, "title": "SFTP Storage ", "user": {"login": "jamalroger", "id": 36031772, "node_id": "MDQ6VXNlcjM2MDMxNzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/36031772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamalroger", "html_url": "https://github.com/jamalroger", "followers_url": "https://api.github.com/users/jamalroger/followers", "following_url": "https://api.github.com/users/jamalroger/following{/other_user}", "gists_url": "https://api.github.com/users/jamalroger/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamalroger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamalroger/subscriptions", "organizations_url": "https://api.github.com/users/jamalroger/orgs", "repos_url": "https://api.github.com/users/jamalroger/repos", "events_url": "https://api.github.com/users/jamalroger/events{/privacy}", "received_events_url": "https://api.github.com/users/jamalroger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-05T07:56:53Z", "updated_at": "2020-02-03T07:57:34Z", "closed_at": "2020-02-03T05:38:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi guys \r\n\r\ni have read the documentation but this  isn't enough to understand how to work with sftp \r\n\r\ncould you please expland more how to work with sftp storage  ??\r\ni have add to setting this params but not working\r\n\r\n` DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\r\n\r\n STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\r\n\r\n SFTP_STORAGE_HOST='host'\r\n\r\n SFTP_STORAGE_ROOT='/home/jamal/'\r\n\r\n SFTP_STORAGE_PARAMS={\r\n 'username':'jamal',\r\n 'password':'xxxxx'\r\n}\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/768", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/768/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/768/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/768/events", "html_url": "https://github.com/jschneier/django-storages/issues/768", "id": 499547955, "node_id": "MDU6SXNzdWU0OTk1NDc5NTU=", "number": 768, "title": "Digital ocean media files is private by default", "user": {"login": "stefanitsky", "id": 22547214, "node_id": "MDQ6VXNlcjIyNTQ3MjE0", "avatar_url": "https://avatars3.githubusercontent.com/u/22547214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefanitsky", "html_url": "https://github.com/stefanitsky", "followers_url": "https://api.github.com/users/stefanitsky/followers", "following_url": "https://api.github.com/users/stefanitsky/following{/other_user}", "gists_url": "https://api.github.com/users/stefanitsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefanitsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefanitsky/subscriptions", "organizations_url": "https://api.github.com/users/stefanitsky/orgs", "repos_url": "https://api.github.com/users/stefanitsky/repos", "events_url": "https://api.github.com/users/stefanitsky/events{/privacy}", "received_events_url": "https://api.github.com/users/stefanitsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-27T16:52:57Z", "updated_at": "2019-10-02T11:50:42Z", "closed_at": "2019-10-02T11:50:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I found a bug (maybe) https://github.com/pydanny/cookiecutter-django/issues/1878#thread-subscription-status. I cant upload media files to the digital ocean space with public rights, it's always private by default. I tried to override class attributes like `default-acl`, but nothing changed. I will be glad to see any ideas about that problem.\r\n\r\nMEDIA settings:\r\n```python\r\nclass MediaRootS3Boto3Storage(S3Boto3Storage):\r\n    location = \"media\"\r\n    default_acl = \"public-read\"\r\n\r\n\r\n# endregion\r\nDEFAULT_FILE_STORAGE = \"config.settings.production.MediaRootS3Boto3Storage\"\r\nMEDIA_URL = f\"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/media/\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/763", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/763/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/763/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/763/events", "html_url": "https://github.com/jschneier/django-storages/issues/763", "id": 495473107, "node_id": "MDU6SXNzdWU0OTU0NzMxMDc=", "number": 763, "title": "bucket name ignored in request url with Digital Ocean", "user": {"login": "xDHILEx", "id": 4491843, "node_id": "MDQ6VXNlcjQ0OTE4NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4491843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xDHILEx", "html_url": "https://github.com/xDHILEx", "followers_url": "https://api.github.com/users/xDHILEx/followers", "following_url": "https://api.github.com/users/xDHILEx/following{/other_user}", "gists_url": "https://api.github.com/users/xDHILEx/gists{/gist_id}", "starred_url": "https://api.github.com/users/xDHILEx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xDHILEx/subscriptions", "organizations_url": "https://api.github.com/users/xDHILEx/orgs", "repos_url": "https://api.github.com/users/xDHILEx/repos", "events_url": "https://api.github.com/users/xDHILEx/events{/privacy}", "received_events_url": "https://api.github.com/users/xDHILEx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-18T21:53:06Z", "updated_at": "2019-09-20T13:58:10Z", "closed_at": "2019-09-20T13:58:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "#395 \r\n\r\nI'm running into an issue with the `AWS_STORAGE_BUCKET_NAME` being ignored in the request url using Digital Ocean Spaces.\r\n\r\nAs a workaround for static files, I've hardcoded the bucket name in my `StaticStorage`'s location (the same works in `AWS_LOCATION` if using the base `S3BotoStorage` class), as adding `AWS_STORAGE_BUCKET_NAME` to `STATIC_URL` formatted string does nothing.\r\n\r\nHowever, attempting to do the same for my `PublicMediaStorage` class results in another folder being created with the same name (mybucket/mybucket/media/...) on Digital Ocean, and is still ignored in the request url.\r\n\r\nrequirements.txt\r\n\r\n```beautifulsoup4==4.6.0\r\nboto3==1.9.230\r\nbotocore==1.12.230\r\ncertifi==2019.9.11\r\nchardet==3.0.4\r\nDjango==2.2.5\r\ndjango-cors-headers==3.1.0\r\ndjango-modelcluster==4.4\r\ndjango-storages==1.7.2\r\ndjango-taggit==0.24.0\r\ndjango-treebeard==4.3\r\ndjangorestframework==3.10.3\r\ndocutils==0.15.2\r\ndraftjs-exporter==2.1.6\r\nhtml5lib==1.0.1\r\nidna==2.8\r\njmespath==0.9.4\r\nPillow==6.1.0\r\npsycopg2==2.8.3\r\npython-dateutil==2.8.0\r\npytz==2019.2\r\nrequests==2.22.0\r\ns3transfer==0.2.1\r\nsix==1.12.0\r\nsqlparse==0.3.0\r\nUnidecode==1.1.1\r\nurllib3==1.25.3\r\nuWSGI==2.0.18\r\nwagtail==2.6.1\r\nwebencodings==0.5.1\r\nWillow==1.1\r\n```\r\n \r\nsettings.py\r\n\r\n```# Digital Ocean\r\nAWS_ACCESS_KEY_ID = \r\nAWS_SECRET_ACCESS_KEY = \r\n\r\nAWS_STORAGE_BUCKET_NAME = 'my-bucket'\r\nAWS_S3_ENDPOINT_URL = 'https://my-bucket.nyc3.digitaloceanspaces.com'\r\nAWS_S3_CUSTOM_DOMAIN = 'static.example.com'\r\nAWS_S3_OBJECT_PARAMETERS = {\r\n    'CacheControl': 'max-age=86400',\r\n}\r\nAWS_LOCATION = 'static'\r\nPUBLIC_MEDIA_LOCATION = 'media'\r\nAWS_DEFAULT_ACL = 'public-read'\r\n\r\nSTATICFILES_STORAGE = 'mysite.storage_backends.StaticStorage'\r\n\r\nSTATIC_URL = '{}/{}/'.format(AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)\r\nSTATIC_ROOT = 'static/'\r\n\r\nDEFAULT_FILE_STORAGE = 'mysite.storage_backends.PublicMediaStorage'\r\n\r\nMEDIA_URL = '{}/{}/'.format(AWS_S3_CUSTOM_DOMAIN, PUBLIC_MEDIA_LOCATION)\r\nMEDIA_ROOT = 'media/'\r\n```\r\n\r\nstorage_backends.py\r\n\r\n```\r\nfrom storages.backends.s3boto3 import S3Boto3Storage\r\nfrom django.conf import settings\r\n\r\nclass StaticStorage(S3Boto3Storage):\r\n    location = 'my-bucket/static'\r\n    default_acl = 'public-read'\r\n\r\nclass PublicMediaStorage(S3Boto3Storage):\r\n    location = 'media'\r\n    default_acl = 'public-read'\r\n    file_overwrite = False\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/761", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/761/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/761/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/761/events", "html_url": "https://github.com/jschneier/django-storages/issues/761", "id": 495149733, "node_id": "MDU6SXNzdWU0OTUxNDk3MzM=", "number": 761, "title": "Dropbox base path / should be an empty string", "user": {"login": "XaviTorello", "id": 8709244, "node_id": "MDQ6VXNlcjg3MDkyNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/8709244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XaviTorello", "html_url": "https://github.com/XaviTorello", "followers_url": "https://api.github.com/users/XaviTorello/followers", "following_url": "https://api.github.com/users/XaviTorello/following{/other_user}", "gists_url": "https://api.github.com/users/XaviTorello/gists{/gist_id}", "starred_url": "https://api.github.com/users/XaviTorello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XaviTorello/subscriptions", "organizations_url": "https://api.github.com/users/XaviTorello/orgs", "repos_url": "https://api.github.com/users/XaviTorello/repos", "events_url": "https://api.github.com/users/XaviTorello/events{/privacy}", "received_events_url": "https://api.github.com/users/XaviTorello/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-18T10:54:31Z", "updated_at": "2020-01-06T04:23:27Z", "closed_at": "2020-01-06T04:23:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using `django-storages` `1.7.2`, a base path (`'/`) is provided, the Dropbox API is rejecting it:\r\n\r\n```\r\n  File \"/usr/local/lib/python3.7/site-packages/dbbackup/storage.py\", line 78, in list_directory\r\n    return self.storage.listdir(path)[1]\r\n  File \"/usr/local/lib/python3.7/site-packages/storages/backends/dropbox.py\", line 99, in listdir\r\n    metadata = self.client.files_list_folder(full_path)\r\n  File \"/usr/local/lib/python3.7/site-packages/dropbox/base.py\", line 1744, in files_list_folder\r\n    None,\r\n  File \"/usr/local/lib/python3.7/site-packages/dropbox/dropbox.py\", line 274, in request\r\n    timeout=timeout)\r\n  File \"/usr/local/lib/python3.7/site-packages/dropbox/dropbox.py\", line 365, in request_json_string_with_retry\r\n    timeout=timeout)\r\n  File \"/usr/local/lib/python3.7/site-packages/dropbox/dropbox.py\", line 456, in request_json_string\r\n    raise BadInputError(request_id, r.text)\r\ndropbox.exceptions.BadInputError: BadInputError('XXXXXXXXXXXXXXXXXXXX', 'Error in call to API function \"files/list_folder\": request body: path: Specify the root folder as an empty string rather than as \"/\".')\r\n```\r\n\r\nAs the error says it should be an empty string rather than as '/'.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/758", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/758/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/758/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/758/events", "html_url": "https://github.com/jschneier/django-storages/issues/758", "id": 491641879, "node_id": "MDU6SXNzdWU0OTE2NDE4Nzk=", "number": 758, "title": "Support django 3.0", "user": {"login": "yukihira1992", "id": 25164598, "node_id": "MDQ6VXNlcjI1MTY0NTk4", "avatar_url": "https://avatars1.githubusercontent.com/u/25164598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yukihira1992", "html_url": "https://github.com/yukihira1992", "followers_url": "https://api.github.com/users/yukihira1992/followers", "following_url": "https://api.github.com/users/yukihira1992/following{/other_user}", "gists_url": "https://api.github.com/users/yukihira1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/yukihira1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yukihira1992/subscriptions", "organizations_url": "https://api.github.com/users/yukihira1992/orgs", "repos_url": "https://api.github.com/users/yukihira1992/repos", "events_url": "https://api.github.com/users/yukihira1992/events{/privacy}", "received_events_url": "https://api.github.com/users/yukihira1992/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-10T12:29:38Z", "updated_at": "2019-09-10T17:32:14Z", "closed_at": "2019-09-10T17:32:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried django-storages 1.7.2 with [Django 3.0a1](https://pypi.org/project/Django/3.0a1/).\r\nI found that django-storage uses the _**django.utils.six**_ module which [will be removed in django 3.0](https://docs.djangoproject.com/en/dev/releases/3.0/#removed-private-python-2-compatibility-apis).\r\n\r\n> django.utils.six - Remove usage of this vendored library or switch to [six](https://pypi.org/project/six/).\r\n\r\nThe module was used in the following places:\r\n- storages\r\n  - backends\r\n    - s3boto3.py\r\n    - apache_libcloud.py\r\n    - sftpstorage.py\r\n    - ftp.py\r\n- tests\r\n  - test_s3boto.py\r\n  - test_s3boto3.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/748", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/748/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/748/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/748/events", "html_url": "https://github.com/jschneier/django-storages/issues/748", "id": 490732759, "node_id": "MDU6SXNzdWU0OTA3MzI3NTk=", "number": 748, "title": "S3 custom domain should be based on bucket name", "user": {"login": "rivernews", "id": 15918424, "node_id": "MDQ6VXNlcjE1OTE4NDI0", "avatar_url": "https://avatars1.githubusercontent.com/u/15918424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rivernews", "html_url": "https://github.com/rivernews", "followers_url": "https://api.github.com/users/rivernews/followers", "following_url": "https://api.github.com/users/rivernews/following{/other_user}", "gists_url": "https://api.github.com/users/rivernews/gists{/gist_id}", "starred_url": "https://api.github.com/users/rivernews/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rivernews/subscriptions", "organizations_url": "https://api.github.com/users/rivernews/orgs", "repos_url": "https://api.github.com/users/rivernews/repos", "events_url": "https://api.github.com/users/rivernews/events{/privacy}", "received_events_url": "https://api.github.com/users/rivernews/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161076983, "node_id": "MDU6TGFiZWwxNjEwNzY5ODM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/s3boto", "name": "s3boto", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-08T09:36:59Z", "updated_at": "2020-02-03T07:46:50Z", "closed_at": "2020-02-03T07:46:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I override the class `S3Boto3Storage` to create my own custom storage like below\r\n\r\n```python\r\nclass MediaStorage(S3Boto3Storage):\r\n    bucket_name = 'my-media-bucket'\r\n```\r\n\r\nI was expecting the file url generated by my custom storage `MediaStorage` will honor the bucket name and give the correct file url when I do the following:\r\n\r\n```python\r\nmedia_storage = MediaStorage()\r\nmedia_storage.save(additional_path, file_obj)\r\nfile_url = media_storage.url(additional_path)\r\n```\r\n\r\nHowever, the generated `file_url` gives me a 404. When I look into the url, it did not use the bucket name of `MediaStorage` in domain name. After I looked at the implementation of the class `S3Boto3Storage`, the url is indeed not using `bucket_name` to generate url, and instead it always uses `settings.AWS_S3_CUSTOM_DOMAIN`, which I already set for my static file storage.\r\n\r\nI can see that the file is uploaded on S3, and the url S3 generated for the file is like `https://my-media-bucket.s3.amazonaws.com/path/to/the/file/`. I was expecting when I override `bucket_name`, the storage should use the bucket name to generate the url.\r\n\r\nI'm wondering is there any reason not to use bucket name to generate the url, or set the custom domain?\r\n\r\nI'm thinking of in class `S3Boto3Storage`, `def __init__`, let `custom_domain` honor `bucket_name` during the initialization. There're two ways I can think of:\r\n1. Set `custom_domain` to `self.custom_domain = '{}.s3.amazonaws.com'.format(self.bucket_name)`\r\n2. Replace the lowest level subdomain of `custom_domain` by `bucket_name`, if custom_domain is set.\r\n\r\nIf any of these sounds good, I can create a PR, but just want to make sure if there's any consideration for the current behavior or concern about the change beforehand. Thank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/744", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/744/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/744/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/744/events", "html_url": "https://github.com/jschneier/django-storages/issues/744", "id": 486776609, "node_id": "MDU6SXNzdWU0ODY3NzY2MDk=", "number": 744, "title": "Multiple buckets for Google cloud storage", "user": {"login": "sr6033", "id": 15799589, "node_id": "MDQ6VXNlcjE1Nzk5NTg5", "avatar_url": "https://avatars3.githubusercontent.com/u/15799589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sr6033", "html_url": "https://github.com/sr6033", "followers_url": "https://api.github.com/users/sr6033/followers", "following_url": "https://api.github.com/users/sr6033/following{/other_user}", "gists_url": "https://api.github.com/users/sr6033/gists{/gist_id}", "starred_url": "https://api.github.com/users/sr6033/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sr6033/subscriptions", "organizations_url": "https://api.github.com/users/sr6033/orgs", "repos_url": "https://api.github.com/users/sr6033/repos", "events_url": "https://api.github.com/users/sr6033/events{/privacy}", "received_events_url": "https://api.github.com/users/sr6033/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-29T07:03:27Z", "updated_at": "2019-08-30T10:25:16Z", "closed_at": "2019-08-29T15:40:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to access multiple buckets in GCS. Something like the below done in AWS:\r\n```\r\nfrom django.db import models\r\nfrom storages.backends.s3boto import S3BotoStorage\r\n\r\nclass MyModel(models.Model):\r\n    file_1 = models.FileField() # Uses default storage\r\n    file_2 = models.FileField(storage=S3BotoStorage(bucket='other-bucket')) # another bucket that I need\r\n``` \r\n\r\nI have been trying the below, but the default storage `GS_BUCKET_NAME` is not getting overridden:\r\n```\r\nfile = models.FileField(storage=GoogleCloudStorage(bucket='crm-param-staging-temporary-files'), upload_to='reports', max_length=256)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/743", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/743/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/743/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/743/events", "html_url": "https://github.com/jschneier/django-storages/issues/743", "id": 486137157, "node_id": "MDU6SXNzdWU0ODYxMzcxNTc=", "number": 743, "title": "Stale data in S3 entries after file is deleted", "user": {"login": "Chris7", "id": 963909, "node_id": "MDQ6VXNlcjk2MzkwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/963909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chris7", "html_url": "https://github.com/Chris7", "followers_url": "https://api.github.com/users/Chris7/followers", "following_url": "https://api.github.com/users/Chris7/following{/other_user}", "gists_url": "https://api.github.com/users/Chris7/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chris7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chris7/subscriptions", "organizations_url": "https://api.github.com/users/Chris7/orgs", "repos_url": "https://api.github.com/users/Chris7/repos", "events_url": "https://api.github.com/users/Chris7/events{/privacy}", "received_events_url": "https://api.github.com/users/Chris7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-28T03:14:38Z", "updated_at": "2019-09-08T21:23:48Z", "closed_at": "2019-09-08T21:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a file is deleted, the entry persists in `entries`, resulting in stale information about files that may be deleted or replaced.\r\n\r\nI came across this behavior when looking at the last modified time of assets I have replaced.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/742", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/742/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/742/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/742/events", "html_url": "https://github.com/jschneier/django-storages/issues/742", "id": 485915880, "node_id": "MDU6SXNzdWU0ODU5MTU4ODA=", "number": 742, "title": "Is there a way to put prefixes in filenames? (AWS S3)", "user": {"login": "funcho", "id": 9370954, "node_id": "MDQ6VXNlcjkzNzA5NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9370954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funcho", "html_url": "https://github.com/funcho", "followers_url": "https://api.github.com/users/funcho/followers", "following_url": "https://api.github.com/users/funcho/following{/other_user}", "gists_url": "https://api.github.com/users/funcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/funcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funcho/subscriptions", "organizations_url": "https://api.github.com/users/funcho/orgs", "repos_url": "https://api.github.com/users/funcho/repos", "events_url": "https://api.github.com/users/funcho/events{/privacy}", "received_events_url": "https://api.github.com/users/funcho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-27T16:37:25Z", "updated_at": "2019-09-01T20:18:46Z", "closed_at": "2019-09-01T20:18:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to config (or override some method) each filename to save in AWS S3 with prefixes (e.g.: model name  + Id). Is there a way to do it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/739", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/739/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/739/events", "html_url": "https://github.com/jschneier/django-storages/issues/739", "id": 484621360, "node_id": "MDU6SXNzdWU0ODQ2MjEzNjA=", "number": 739, "title": "Setting GS_DEFAULT_ACL to 'publicRead' returns a 400 Bad Request", "user": {"login": "danemco", "id": 972993, "node_id": "MDQ6VXNlcjk3Mjk5Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/972993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danemco", "html_url": "https://github.com/danemco", "followers_url": "https://api.github.com/users/danemco/followers", "following_url": "https://api.github.com/users/danemco/following{/other_user}", "gists_url": "https://api.github.com/users/danemco/gists{/gist_id}", "starred_url": "https://api.github.com/users/danemco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danemco/subscriptions", "organizations_url": "https://api.github.com/users/danemco/orgs", "repos_url": "https://api.github.com/users/danemco/repos", "events_url": "https://api.github.com/users/danemco/events{/privacy}", "received_events_url": "https://api.github.com/users/danemco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-23T16:49:21Z", "updated_at": "2019-08-23T16:54:50Z", "closed_at": "2019-08-23T16:54:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the django-storages documentation, if you don't want a signature / expiration or something like that on your URLs, you should set the GS_DEFAULT_ACL setting in settings.py to `publicRead`. However, when setting it to `publicRead`, I get this error response:\r\n\r\n```\r\nGSResponseError: GSResponseError: 400 Bad Request <?xml version='1.0' encoding='UTF-8'?><Error><Code>InvalidArgument</Code><Message>Invalid argument.</Message><Details>Invalid canned acl: publicRead</Details></Error>\r\n```\r\n\r\nWhen I instead set the value to `public-read` (instead of publicRead), I don't get that error, but django-storages still returns the path to the file with the querystring. I think it's doing so because of this line in the code (storages/backends/gcloud.py, line 269:\r\n\r\n        if self.default_acl == 'publicRead':\r\n\r\nShould it be the following instead?\r\n\r\n        if self.default_acl == 'publicRead' or self.default_acl == 'public-read':\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/731", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/731/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/731/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/731/events", "html_url": "https://github.com/jschneier/django-storages/issues/731", "id": 474585161, "node_id": "MDU6SXNzdWU0NzQ1ODUxNjE=", "number": 731, "title": "edit upload file with azure", "user": {"login": "ThanhTuNguyen", "id": 6112544, "node_id": "MDQ6VXNlcjYxMTI1NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6112544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThanhTuNguyen", "html_url": "https://github.com/ThanhTuNguyen", "followers_url": "https://api.github.com/users/ThanhTuNguyen/followers", "following_url": "https://api.github.com/users/ThanhTuNguyen/following{/other_user}", "gists_url": "https://api.github.com/users/ThanhTuNguyen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThanhTuNguyen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThanhTuNguyen/subscriptions", "organizations_url": "https://api.github.com/users/ThanhTuNguyen/orgs", "repos_url": "https://api.github.com/users/ThanhTuNguyen/repos", "events_url": "https://api.github.com/users/ThanhTuNguyen/events{/privacy}", "received_events_url": "https://api.github.com/users/ThanhTuNguyen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-30T13:27:51Z", "updated_at": "2019-09-01T20:29:29Z", "closed_at": "2019-09-01T20:29:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi there.\r\n\r\nI'm working in a project which people can change their avatar in the client, but i can not do this with azure (i can do everything in admin but not in frontend) how can i do it\r\n```\r\n\r\ndef ProfileSettingsView(request):\r\n    form = forms.UserModifyForm(request.POST or None, instance=request.user)\r\n    if request.method == 'POST':\r\n        form = forms.UserModifyForm(request.POST, request.FILES, instance=request.user)\r\n        if form.is_valid():\r\n            form.save()\r\n\r\n    return render(request, 'accounts/profile_settings.html', {'form': form})\r\n```\r\n\r\nis django-storage support this", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/730", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/730/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/730/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/730/events", "html_url": "https://github.com/jschneier/django-storages/issues/730", "id": 474018316, "node_id": "MDU6SXNzdWU0NzQwMTgzMTY=", "number": 730, "title": "A new release on PyPI", "user": {"login": "ShalbafZadeh", "id": 4537866, "node_id": "MDQ6VXNlcjQ1Mzc4NjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4537866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShalbafZadeh", "html_url": "https://github.com/ShalbafZadeh", "followers_url": "https://api.github.com/users/ShalbafZadeh/followers", "following_url": "https://api.github.com/users/ShalbafZadeh/following{/other_user}", "gists_url": "https://api.github.com/users/ShalbafZadeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShalbafZadeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShalbafZadeh/subscriptions", "organizations_url": "https://api.github.com/users/ShalbafZadeh/orgs", "repos_url": "https://api.github.com/users/ShalbafZadeh/repos", "events_url": "https://api.github.com/users/ShalbafZadeh/events{/privacy}", "received_events_url": "https://api.github.com/users/ShalbafZadeh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-29T12:16:54Z", "updated_at": "2019-09-10T08:20:15Z", "closed_at": "2019-09-10T08:20:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "it's almost a year from last release on PyPI . \r\nit would be great if we could have a new release on PyPI.\r\n\r\nthank you very much for your effort on this project ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/729", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/729/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/729/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/729/events", "html_url": "https://github.com/jschneier/django-storages/issues/729", "id": 473620533, "node_id": "MDU6SXNzdWU0NzM2MjA1MzM=", "number": 729, "title": "Get screenshot of mp4", "user": {"login": "elcolie", "id": 18206728, "node_id": "MDQ6VXNlcjE4MjA2NzI4", "avatar_url": "https://avatars0.githubusercontent.com/u/18206728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elcolie", "html_url": "https://github.com/elcolie", "followers_url": "https://api.github.com/users/elcolie/followers", "following_url": "https://api.github.com/users/elcolie/following{/other_user}", "gists_url": "https://api.github.com/users/elcolie/gists{/gist_id}", "starred_url": "https://api.github.com/users/elcolie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elcolie/subscriptions", "organizations_url": "https://api.github.com/users/elcolie/orgs", "repos_url": "https://api.github.com/users/elcolie/repos", "events_url": "https://api.github.com/users/elcolie/events{/privacy}", "received_events_url": "https://api.github.com/users/elcolie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-27T09:33:47Z", "updated_at": "2019-09-01T21:16:55Z", "closed_at": "2019-09-01T21:16:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using `django-storage` in production server it has no local. Then I can't get the `video_length nor screenshot` because I have to access to `path` in the disk\r\n\r\n```bash\r\nipdb> instance.video\r\n<FieldFile: videos/something.flv_360p_j5GJ19m.mp4>\r\nipdb> instance.video.path\r\n*** NotImplementedError: This backend doesn't support absolute paths.\r\nipdb> dir(instance.video)\r\n['DEFAULT_CHUNK_SIZE', '__bool__', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_committed', '_del_file', '_file', '_get_file', '_require_file', '_set_file', 'chunks', 'close', 'closed', 'delete', 'encoding', 'field', 'file', 'fileno', 'flush', 'instance', 'isatty', 'multiple_chunks', 'name', 'newlines', 'open', 'path', 'read', 'readable', 'readinto', 'readline', 'readlines', 'save', 'seek', 'seekable', 'size', 'storage', 'tell', 'truncate', 'url', 'writable', 'write', 'writelines']\r\nipdb> instance.video.file\r\n<S3Boto3StorageFile: videos/something.flv_360p_j5GJ19m.mp4>\r\nipdb> video_length = clean_duration(get_length(instance.video.file))\r\n*** TypeError: expected str, bytes or os.PathLike object, not S3Boto3StorageFile\r\n```\r\n\r\n**Question**\r\nHow to get access a file and pass it as a argument when I use `django-storages`?\r\n\r\n**Original question:**\r\nhttps://stackoverflow.com/questions/57230814/how-to-get-thumbnail-of-mp4-when-upload-it-with-django-storages", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/726", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/726/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/726/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/726/events", "html_url": "https://github.com/jschneier/django-storages/issues/726", "id": 469239963, "node_id": "MDU6SXNzdWU0NjkyMzk5NjM=", "number": 726, "title": "The request signature we calculated does not match the signature you provided.", "user": {"login": "mandala21", "id": 20716489, "node_id": "MDQ6VXNlcjIwNzE2NDg5", "avatar_url": "https://avatars1.githubusercontent.com/u/20716489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mandala21", "html_url": "https://github.com/mandala21", "followers_url": "https://api.github.com/users/mandala21/followers", "following_url": "https://api.github.com/users/mandala21/following{/other_user}", "gists_url": "https://api.github.com/users/mandala21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mandala21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mandala21/subscriptions", "organizations_url": "https://api.github.com/users/mandala21/orgs", "repos_url": "https://api.github.com/users/mandala21/repos", "events_url": "https://api.github.com/users/mandala21/events{/privacy}", "received_events_url": "https://api.github.com/users/mandala21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-17T14:13:50Z", "updated_at": "2019-07-17T14:20:14Z", "closed_at": "2019-07-17T14:20:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Erro when i try get image for show in template html. I use sa-east-1\r\n\r\nquery string:?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJIQSU4EVXV6ZYTFA%2F20190717%2Fsa-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190717T140653Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=ef88cdfb66877b7f0034b516311c13b0a4bb47a1faf3fc4ae5f0b130453499cf\r\n\r\nerror \r\n\r\n```\r\n<Error>\r\n    <Code>SignatureDoesNotMatch</Code>\r\n    <Message>\r\nThe request signature we calculated does not match the signature you provided. Check your key and signing method.\r\n    </Message>\r\n    <AWSAccessKeyId>AKIAJIQSU4EVXV6ZYTFA</AWSAccessKeyId>\r\n    <StringToSign>\r\nAWS4-HMAC-SHA256 20190717T140653Z 20190717/sa-east-1/s3/aws4_request 3c07fb252dc092fced9771b77cccae03c74aeec0e326e261181074fbb959534b\r\n    </StringToSign>\r\n    <SignatureProvided>\r\nef88cdfb66877b7f0034b516311c13b0a4bb47a1faf3fc4ae5f0b130453499cf\r\n    </SignatureProvided>\r\n    <StringToSignBytes>\r\n41 57 53 34 2d 48 4d 41 43 2d 53 48 41 32 35 36 0a 32 30 31 39 30 37 31 37 54 31 34 30 36 35 33 5a 0a 32 30 31 39 30 37 31 37 2f 73 61 2d 65 61 73 74 2d 31 2f 73 33 2f 61 77 73 34 5f 72 65 71 75 65 73 74 0a 33 63 30 37 66 62 32 35 32 64 63 30 39 32 66 63 65 64 39 37 37 31 62 37 37 63 63 63 61 65 30 33 63 37 34 61 65 65 63 30 65 33 32 36 65 32 36 31 31 38 31 30 37 34 66 62 62 39 35 39 35 33 34 62\r\n    </StringToSignBytes>\r\n    <CanonicalRequest>\r\nGET /media/protecar/vistorias/1537896667.4194415.jpg X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJIQSU4EVXV6ZYTFA%2F20190717%2Fsa-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190717T140653Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host host:protecar.s3.amazonaws.com host UNSIGNED-PAYLOAD\r\n    </CanonicalRequest>\r\n    <CanonicalRequestBytes>\r\n47 45 54 0a 2f 6d 65 64 69 61 2f 70 72 6f 74 65 63 61 72 2f 76 69 73 74 6f 72 69 61 73 2f 31 35 33 37 38 39 36 36 36 37 2e 34 31 39 34 34 31 35 2e 6a 70 67 0a 58 2d 41 6d 7a 2d 41 6c 67 6f 72 69 74 68 6d 3d 41 57 53 34 2d 48 4d 41 43 2d 53 48 41 32 35 36 26 58 2d 41 6d 7a 2d 43 72 65 64 65 6e 74 69 61 6c 3d 41 4b 49 41 4a 49 51 53 55 34 45 56 58 56 36 5a 59 54 46 41 25 32 46 32 30 31 39 30 37 31 37 25 32 46 73 61 2d 65 61 73 74 2d 31 25 32 46 73 33 25 32 46 61 77 73 34 5f 72 65 71 75 65 73 74 26 58 2d 41 6d 7a 2d 44 61 74 65 3d 32 30 31 39 30 37 31 37 54 31 34 30 36 35 33 5a 26 58 2d 41 6d 7a 2d 45 78 70 69 72 65 73 3d 33 36 30 30 26 58 2d 41 6d 7a 2d 53 69 67 6e 65 64 48 65 61 64 65 72 73 3d 68 6f 73 74 0a 68 6f 73 74 3a 70 72 6f 74 65 63 61 72 2e 73 33 2e 61 6d 61 7a 6f 6e 61 77 73 2e 63 6f 6d 0a 0a 68 6f 73 74 0a 55 4e 53 49 47 4e 45 44 2d 50 41 59 4c 4f 41 44\r\n    </CanonicalRequestBytes>\r\n    <RequestId>BF108113964F982E</RequestId>\r\n    <HostId>\r\n6KeQya9qBu92p/NauHWMd4Qq6N4Q0+q21iKWabgiZehmPT89jMtdov6S9MMHUjoFANtgzk0OmEo=\r\n    </HostId>\r\n</Error>\r\n\r\n```\r\nDjango==1.10\r\nboto3==1.9.188\r\ndjango-storages==1.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/725", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/725/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/725/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/725/events", "html_url": "https://github.com/jschneier/django-storages/issues/725", "id": 468195658, "node_id": "MDU6SXNzdWU0NjgxOTU2NTg=", "number": 725, "title": "Potential race condition in `collectstatic` ", "user": {"login": "jroblak", "id": 1679799, "node_id": "MDQ6VXNlcjE2Nzk3OTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1679799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroblak", "html_url": "https://github.com/jroblak", "followers_url": "https://api.github.com/users/jroblak/followers", "following_url": "https://api.github.com/users/jroblak/following{/other_user}", "gists_url": "https://api.github.com/users/jroblak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroblak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroblak/subscriptions", "organizations_url": "https://api.github.com/users/jroblak/orgs", "repos_url": "https://api.github.com/users/jroblak/repos", "events_url": "https://api.github.com/users/jroblak/events{/privacy}", "received_events_url": "https://api.github.com/users/jroblak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-15T15:33:51Z", "updated_at": "2019-07-24T20:48:01Z", "closed_at": "2019-07-24T20:48:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an issue that I'm having trouble reproducing on demand, but it's happening relatively frequently.\r\n\r\nOur staging application is deployed to many times throughout the day, often very rapidly, _and_ it has multiple instances of load balanced Django applications running. Because it's staging, for conveinence, our deploy scripts run `collectstatic` when the Django container comes online. This means that there could be several `collectstatic` instances running at once.\r\n\r\nI could see how this might be a problem, but the issue I'm seeing doesn't match what I'd expect. What ends up happening is that sometimes, one or more of the containers will be loading assets from a previous release. \r\n\r\nAny ideas on why this may be happening, and if its a bug with django-storages, or a mis-use on our end?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/722", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/722/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/722/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/722/events", "html_url": "https://github.com/jschneier/django-storages/issues/722", "id": 464815220, "node_id": "MDU6SXNzdWU0NjQ4MTUyMjA=", "number": 722, "title": "NoSuchKey error", "user": {"login": "sometimescool22", "id": 20865218, "node_id": "MDQ6VXNlcjIwODY1MjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/20865218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sometimescool22", "html_url": "https://github.com/sometimescool22", "followers_url": "https://api.github.com/users/sometimescool22/followers", "following_url": "https://api.github.com/users/sometimescool22/following{/other_user}", "gists_url": "https://api.github.com/users/sometimescool22/gists{/gist_id}", "starred_url": "https://api.github.com/users/sometimescool22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sometimescool22/subscriptions", "organizations_url": "https://api.github.com/users/sometimescool22/orgs", "repos_url": "https://api.github.com/users/sometimescool22/repos", "events_url": "https://api.github.com/users/sometimescool22/events{/privacy}", "received_events_url": "https://api.github.com/users/sometimescool22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-06T04:09:39Z", "updated_at": "2019-07-10T17:41:11Z", "closed_at": "2019-07-10T17:41:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys, I'm trying to upload images. Here's my settings:\r\n\r\n```\r\nAWS_ACCESS_KEY_ID = \"\"\r\nAWS_SECRET_ACCESS_KEY = \"\"\r\nAWS_STORAGE_BUCKET_NAME = \"\"\r\nAWS_BUCKET_ACL = \"public-read\"\r\nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\r\nAWS_QUERYSTRING_AUTH = False\r\nAWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME\r\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\r\nAWS_LOCATION = 'media'\r\nSTATIC_URL = '/static/'\r\nSTATIC_ROOT = os.path.join(PROJECT_DIR, 'static')\r\nMEDIA_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)\r\nAWS_DEFAULT_ACL = \"public-read\"\r\n```\r\n\r\nI'm using an ImageField. When doing field.image.url, it returns an s3 url, but I get NoSuchKey.\r\n\r\nfor more file info see my [stack overflow](https://stackoverflow.com/questions/56911105/django-storages-not-uploading-images-getting-nosuchkey-aws-s3) question\r\n\r\nthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/719", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/719/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/719/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/719/events", "html_url": "https://github.com/jschneier/django-storages/issues/719", "id": 461704981, "node_id": "MDU6SXNzdWU0NjE3MDQ5ODE=", "number": 719, "title": "django-storages is not working with latest boto3/botocore", "user": {"login": "mvbrn", "id": 21321875, "node_id": "MDQ6VXNlcjIxMzIxODc1", "avatar_url": "https://avatars3.githubusercontent.com/u/21321875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvbrn", "html_url": "https://github.com/mvbrn", "followers_url": "https://api.github.com/users/mvbrn/followers", "following_url": "https://api.github.com/users/mvbrn/following{/other_user}", "gists_url": "https://api.github.com/users/mvbrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvbrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvbrn/subscriptions", "organizations_url": "https://api.github.com/users/mvbrn/orgs", "repos_url": "https://api.github.com/users/mvbrn/repos", "events_url": "https://api.github.com/users/mvbrn/events{/privacy}", "received_events_url": "https://api.github.com/users/mvbrn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161076983, "node_id": "MDU6TGFiZWwxNjEwNzY5ODM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/s3boto", "name": "s3boto", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-27T19:17:32Z", "updated_at": "2020-02-03T06:09:05Z", "closed_at": "2020-02-03T06:09:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "boto3==1.9.176\r\nbotocore==1.12.176\r\ndjango-storages==1.7.1\r\n\r\nWith those versions django-storages raises \"ImproperlyConfigured: Could not load Boto3's S3 bindings. See https://github.com/boto/boto3\"\r\n\r\nWith pinned boto3==1.9.129 and botocore==1.12.129 works just fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/714", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/714/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/714/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/714/events", "html_url": "https://github.com/jschneier/django-storages/issues/714", "id": 452281375, "node_id": "MDU6SXNzdWU0NTIyODEzNzU=", "number": 714, "title": "Exception Value: 'FileMetadata' object is not subscriptable with Dropbox backend", "user": {"login": "math-a3k", "id": 31518918, "node_id": "MDQ6VXNlcjMxNTE4OTE4", "avatar_url": "https://avatars1.githubusercontent.com/u/31518918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/math-a3k", "html_url": "https://github.com/math-a3k", "followers_url": "https://api.github.com/users/math-a3k/followers", "following_url": "https://api.github.com/users/math-a3k/following{/other_user}", "gists_url": "https://api.github.com/users/math-a3k/gists{/gist_id}", "starred_url": "https://api.github.com/users/math-a3k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/math-a3k/subscriptions", "organizations_url": "https://api.github.com/users/math-a3k/orgs", "repos_url": "https://api.github.com/users/math-a3k/repos", "events_url": "https://api.github.com/users/math-a3k/events{/privacy}", "received_events_url": "https://api.github.com/users/math-a3k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-05T01:58:07Z", "updated_at": "2019-07-15T06:04:58Z", "closed_at": "2019-07-15T06:04:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using:\r\n```\r\nDjango==2.2.1\r\ndjango-storages==1.7.1\r\ndropbox==9.3.0\r\nwagtail==2.5.1\r\n```\r\nAfter uploading a document, the document is uploaded to Dropbox correctly, but when trying to retrieve the file it shows the following traceback:\r\n\r\n```\r\nTraceback:\r\n\r\nFile \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/core/handlers/exception.py\" in inner\r\n  34.             response = get_response(request)\r\n\r\nFile \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/core/handlers/base.py\" in _get_response\r\n  115.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/core/handlers/base.py\" in _get_response\r\n  113.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/wagtail/documents/views/serve.py\" in serve\r\n  70.         response['Content-Length'] = doc.file.size\r\n\r\nFile \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/fields/files.py\" in size\r\n  69.         return self.storage.size(self.name)\r\n\r\nFile \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/storages/backends/dropbox.py\" in size\r\n  93.         return metadata['bytes']\r\n\r\nException Type: TypeError at /documents/1/Tips\r\nException Value: 'FileMetadata' object is not subscriptable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/713", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/713/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/713/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/713/events", "html_url": "https://github.com/jschneier/django-storages/issues/713", "id": 452279389, "node_id": "MDU6SXNzdWU0NTIyNzkzODk=", "number": 713, "title": "TypeError: expected str, bytes or os.PathLike object, not ImageFieldFile with Dropbox backend", "user": {"login": "math-a3k", "id": 31518918, "node_id": "MDQ6VXNlcjMxNTE4OTE4", "avatar_url": "https://avatars1.githubusercontent.com/u/31518918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/math-a3k", "html_url": "https://github.com/math-a3k", "followers_url": "https://api.github.com/users/math-a3k/followers", "following_url": "https://api.github.com/users/math-a3k/following{/other_user}", "gists_url": "https://api.github.com/users/math-a3k/gists{/gist_id}", "starred_url": "https://api.github.com/users/math-a3k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/math-a3k/subscriptions", "organizations_url": "https://api.github.com/users/math-a3k/orgs", "repos_url": "https://api.github.com/users/math-a3k/repos", "events_url": "https://api.github.com/users/math-a3k/events{/privacy}", "received_events_url": "https://api.github.com/users/math-a3k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-05T01:47:51Z", "updated_at": "2019-07-15T06:04:24Z", "closed_at": "2019-07-15T06:04:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using:\r\n```\r\nDjango==2.2.1\r\ndjango-storages==1.7.1\r\ndropbox==9.3.0\r\nwagtail==2.5.1\r\n```\r\nAfter uploading an image, a TypeError is raised (traceback follows). The image gets uploaded to Dropbox, so the problem seems to be when it comes to retrieve the info of the file from Django. The S3 backend works with the same stack, so I guess this is specific to the Dropbox backend.\r\n```\r\nInternal Server Error: /admin/images/multiple/add/\r\nTraceback (most recent call last):\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/views/decorators/cache.py\", line 44, in _wrapped_view_func\r\n    response = view_func(request, *args, **kwargs)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/wagtail/admin/urls/__init__.py\", line 102, in wrapper\r\n    return view_func(request, *args, **kwargs)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/wagtail/admin/decorators.py\", line 34, in decorated_view\r\n    return view_func(request, *args, **kwargs)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/wagtail/admin/utils.py\", line 151, in wrapped_view_func\r\n    return view_func(request, *args, **kwargs)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/views/decorators/vary.py\", line 20, in inner_func\r\n    response = func(*args, **kwargs)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/wagtail/images/views/multiple.py\", line 74, in add\r\n    image.save()\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/base.py\", line 741, in save\r\n    force_update=force_update, update_fields=update_fields)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/base.py\", line 779, in save_base\r\n    force_update, using, update_fields,\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/base.py\", line 870, in _save_table\r\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/base.py\", line 908, in _do_insert\r\n    using=using, raw=raw)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/manager.py\", line 82, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/query.py\", line 1186, in _insert\r\n    return query.get_compiler(using=using).execute_sql(return_id)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/sql/compiler.py\", line 1334, in execute_sql\r\n    for sql, params in self.as_sql():\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/sql/compiler.py\", line 1278, in as_sql\r\n    for obj in self.query.objs\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/sql/compiler.py\", line 1278, in <listcomp>\r\n    for obj in self.query.objs\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/sql/compiler.py\", line 1277, in <listcomp>\r\n    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/sql/compiler.py\", line 1228, in pre_save_val\r\n    return field.pre_save(obj, add=True)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/fields/files.py\", line 288, in pre_save\r\n    file.save(file.name, file.file, save=False)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/fields/files.py\", line 88, in save\r\n    setattr(self.instance, self.field.name, self.name)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/fields/files.py\", line 346, in __set__\r\n    self.field.update_dimension_fields(instance, force=True)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/db/models/fields/files.py\", line 449, in update_dimension_fields\r\n    width = file.width\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/core/files/images.py\", line 19, in width\r\n    return self._get_image_dimensions()[0]\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/core/files/images.py\", line 29, in _get_image_dimensions\r\n    self._dimensions_cache = get_image_dimensions(self, close=close)\r\n  File \"/home/bot/code/conuruinca/venv/lib/python3.7/site-packages/django/core/files/images.py\", line 47, in get_image_dimensions\r\n    file = open(file_or_path, 'rb')\r\nTypeError: expected str, bytes or os.PathLike object, not ImageFieldFile\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/712", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/712/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/712/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/712/events", "html_url": "https://github.com/jschneier/django-storages/issues/712", "id": 451621075, "node_id": "MDU6SXNzdWU0NTE2MjEwNzU=", "number": 712, "title": "Upload Large File to S3", "user": {"login": "steverecio", "id": 978415, "node_id": "MDQ6VXNlcjk3ODQxNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/978415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steverecio", "html_url": "https://github.com/steverecio", "followers_url": "https://api.github.com/users/steverecio/followers", "following_url": "https://api.github.com/users/steverecio/following{/other_user}", "gists_url": "https://api.github.com/users/steverecio/gists{/gist_id}", "starred_url": "https://api.github.com/users/steverecio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steverecio/subscriptions", "organizations_url": "https://api.github.com/users/steverecio/orgs", "repos_url": "https://api.github.com/users/steverecio/repos", "events_url": "https://api.github.com/users/steverecio/events{/privacy}", "received_events_url": "https://api.github.com/users/steverecio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161076983, "node_id": "MDU6TGFiZWwxNjEwNzY5ODM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/s3boto", "name": "s3boto", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-03T18:18:08Z", "updated_at": "2019-09-11T04:58:30Z", "closed_at": "2019-09-11T04:41:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Has anyone integrated the S3Boto3Storage backend with a direct to s3 upload? I'm currently chunking uploads to an EFS drive with the https://github.com/juliomalegria/django-chunked-upload library and then asyncronously using django-storages to commit the file to s3. However, the EFS drive latency is incredibly slow, even with provisioned throughput.\r\n\r\nDoes anyone have any experience mixing this library with in-browser direct to s3 uploads? Alternatively, has anyone managed to use this library with a file chunking API? I can't simply append to the FileField since s3 doesn't support append operations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/705", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/705/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/705/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/705/events", "html_url": "https://github.com/jschneier/django-storages/issues/705", "id": 445462461, "node_id": "MDU6SXNzdWU0NDU0NjI0NjE=", "number": 705, "title": "Invalid sas_token was generated", "user": {"login": "fortune", "id": 44498, "node_id": "MDQ6VXNlcjQ0NDk4", "avatar_url": "https://avatars2.githubusercontent.com/u/44498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fortune", "html_url": "https://github.com/fortune", "followers_url": "https://api.github.com/users/fortune/followers", "following_url": "https://api.github.com/users/fortune/following{/other_user}", "gists_url": "https://api.github.com/users/fortune/gists{/gist_id}", "starred_url": "https://api.github.com/users/fortune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fortune/subscriptions", "organizations_url": "https://api.github.com/users/fortune/orgs", "repos_url": "https://api.github.com/users/fortune/repos", "events_url": "https://api.github.com/users/fortune/events{/privacy}", "received_events_url": "https://api.github.com/users/fortune/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-17T14:11:46Z", "updated_at": "2019-07-19T07:40:13Z", "closed_at": "2019-07-19T07:40:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/jschneier/django-storages/blob/b441b74a17a46eb87ee4b10f60774b9a080c0fe1/storages/backends/azure_storage.py#L260\r\n\r\nI think this should be corrected as follows.\r\n\r\nsas_token = self.service.generate_blob_shared_access_signature(\r\n                self.azure_container, name, permission=BlobPermissions.READ, expiry=self._expire_at(expire))\r\n\r\n\r\nThis problem is caused by\r\nhttps://github.com/Azure/azure-storage-python/issues/595\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/704", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/704/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/704/events", "html_url": "https://github.com/jschneier/django-storages/issues/704", "id": 444654303, "node_id": "MDU6SXNzdWU0NDQ2NTQzMDM=", "number": 704, "title": "Azure broken by upstream version bump", "user": {"login": "taymonbeal", "id": 1991427, "node_id": "MDQ6VXNlcjE5OTE0Mjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1991427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taymonbeal", "html_url": "https://github.com/taymonbeal", "followers_url": "https://api.github.com/users/taymonbeal/followers", "following_url": "https://api.github.com/users/taymonbeal/following{/other_user}", "gists_url": "https://api.github.com/users/taymonbeal/gists{/gist_id}", "starred_url": "https://api.github.com/users/taymonbeal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taymonbeal/subscriptions", "organizations_url": "https://api.github.com/users/taymonbeal/orgs", "repos_url": "https://api.github.com/users/taymonbeal/repos", "events_url": "https://api.github.com/users/taymonbeal/events{/privacy}", "received_events_url": "https://api.github.com/users/taymonbeal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-15T21:30:40Z", "updated_at": "2019-07-19T07:41:32Z", "closed_at": "2019-07-19T07:41:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "All URLs now return 403s. See Azure/azure-storage-python#595 for an explanation of why.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/702", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/702/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/702/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/702/events", "html_url": "https://github.com/jschneier/django-storages/issues/702", "id": 444316222, "node_id": "MDU6SXNzdWU0NDQzMTYyMjI=", "number": 702, "title": "Retry on Google upload 503", "user": {"login": "Natim", "id": 229453, "node_id": "MDQ6VXNlcjIyOTQ1Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/229453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Natim", "html_url": "https://github.com/Natim", "followers_url": "https://api.github.com/users/Natim/followers", "following_url": "https://api.github.com/users/Natim/following{/other_user}", "gists_url": "https://api.github.com/users/Natim/gists{/gist_id}", "starred_url": "https://api.github.com/users/Natim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Natim/subscriptions", "organizations_url": "https://api.github.com/users/Natim/orgs", "repos_url": "https://api.github.com/users/Natim/repos", "events_url": "https://api.github.com/users/Natim/events{/privacy}", "received_events_url": "https://api.github.com/users/Natim/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 619992670, "node_id": "MDU6TGFiZWw2MTk5OTI2NzA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/google", "name": "google", "color": "d93f0b", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-15T08:57:04Z", "updated_at": "2019-05-16T09:06:16Z", "closed_at": "2019-05-15T13:20:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Lately we started to get a lot of 503 on Google Storage.\r\nThe model.save() method raises and creates a 500 on our end.\r\nIs there a way to retry a couple of time in case the storage api raises a 503?\r\n\r\n```\r\nFile \"/usr/local/lib/python3.7/site-packages/storages/backends/gcloud.py\", line 180, in _save\r\n    file.blob.acl.save_predefined(self.default_acl)\r\nFile \"/usr/local/lib/python3.7/site-packages/google/cloud/_http.py\", line 319, in api_request\r\n    raise exceptions.from_http_response(response)\r\ngoogle.api_core.exceptions.ServiceUnavailable: 503 GET https://www.googleapis.com/storage/v1/b/bucket-id/o/uploads%2F74db120f-0a8e-5646-ef5a-30154e9f6deb_O15V4hn.jpg/acl: Backend Error\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/700", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/700/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/700/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/700/events", "html_url": "https://github.com/jschneier/django-storages/issues/700", "id": 443563540, "node_id": "MDU6SXNzdWU0NDM1NjM1NDA=", "number": 700, "title": "Upload using HTTP POST", "user": {"login": "fabiancastano", "id": 26494134, "node_id": "MDQ6VXNlcjI2NDk0MTM0", "avatar_url": "https://avatars1.githubusercontent.com/u/26494134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabiancastano", "html_url": "https://github.com/fabiancastano", "followers_url": "https://api.github.com/users/fabiancastano/followers", "following_url": "https://api.github.com/users/fabiancastano/following{/other_user}", "gists_url": "https://api.github.com/users/fabiancastano/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabiancastano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabiancastano/subscriptions", "organizations_url": "https://api.github.com/users/fabiancastano/orgs", "repos_url": "https://api.github.com/users/fabiancastano/repos", "events_url": "https://api.github.com/users/fabiancastano/events{/privacy}", "received_events_url": "https://api.github.com/users/fabiancastano/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-13T19:28:57Z", "updated_at": "2019-05-14T07:43:26Z", "closed_at": "2019-05-14T07:43:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear sirs, I try django-storages and it is very easy and efective way to integrate django and a storage service like amazon s3, give you congrutulations for this hard work.\r\n\r\nBut for my project I had to use uploads from client side, like amazon direct post. Because django-storages can not upload directly to amazon s3 like Direct Post Amazon s3*, for example: always upload file first to the tmp folder of Operative System; But we can no permit this performanse, because direct upload no overchargin our server VPS or Any server and this is work best between client side and amazon s3 service, my server is cold of work. It is fine. \r\n\r\nMy questions is if django-storages can uplaod directly from client side: like direct post. \r\n\r\nOnly inconvenient in Javascrip in direct form post upload is that api key is exposing.  \r\n\r\n*https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html\r\n\r\nPd: I can upload a file direct post s3 bucket image in Javascript, and in the view django I can \"save\" a file with URL and simulate like we upload before. Too I have ussing django-storages for all side config to server static and media files. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/699", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/699/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/699/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/699/events", "html_url": "https://github.com/jschneier/django-storages/issues/699", "id": 443370934, "node_id": "MDU6SXNzdWU0NDMzNzA5MzQ=", "number": 699, "title": "django-storages, dropbox and windows path issue ", "user": {"login": "AliPolat", "id": 1778756, "node_id": "MDQ6VXNlcjE3Nzg3NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1778756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AliPolat", "html_url": "https://github.com/AliPolat", "followers_url": "https://api.github.com/users/AliPolat/followers", "following_url": "https://api.github.com/users/AliPolat/following{/other_user}", "gists_url": "https://api.github.com/users/AliPolat/gists{/gist_id}", "starred_url": "https://api.github.com/users/AliPolat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AliPolat/subscriptions", "organizations_url": "https://api.github.com/users/AliPolat/orgs", "repos_url": "https://api.github.com/users/AliPolat/repos", "events_url": "https://api.github.com/users/AliPolat/events{/privacy}", "received_events_url": "https://api.github.com/users/AliPolat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 155591935, "node_id": "MDU6TGFiZWwxNTU1OTE5MzU=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 619992760, "node_id": "MDU6TGFiZWw2MTk5OTI3NjA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/dropbox", "name": "dropbox", "color": "0052cc", "default": false, "description": null}, {"id": 155591936, "node_id": "MDU6TGFiZWwxNTU1OTE5MzY=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-13T12:27:45Z", "updated_at": "2019-05-13T13:43:53Z", "closed_at": "2019-05-13T13:43:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Help please :\r\n\r\nException Type: | ValidationError\r\n'D:/home/site/wwwroot/media/urunler/Koala.jpg' did not match pattern '(/(.\\|[\\r\\n])*\\|id:.*)\\|(rev:[0-9a-f]{9,})\\|(ns:[0-9]+(/.*)?)'\r\n\r\n#617 (comment)\r\n\r\nI have the exact same configuration and the same problem. Is there any way to bypass the windows path issue other than migrating to linux?\r\n\r\nMy environment\r\npython 3.6\r\ndjango 2.1\r\ndropbox for media files\r\nazure for deployment\r\nwindows for iis", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/696", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/696/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/696/events", "html_url": "https://github.com/jschneier/django-storages/issues/696", "id": 441166482, "node_id": "MDU6SXNzdWU0NDExNjY0ODI=", "number": 696, "title": "S3 retrieve upload advance", "user": {"login": "millerf", "id": 790558, "node_id": "MDQ6VXNlcjc5MDU1OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/790558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/millerf", "html_url": "https://github.com/millerf", "followers_url": "https://api.github.com/users/millerf/followers", "following_url": "https://api.github.com/users/millerf/following{/other_user}", "gists_url": "https://api.github.com/users/millerf/gists{/gist_id}", "starred_url": "https://api.github.com/users/millerf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/millerf/subscriptions", "organizations_url": "https://api.github.com/users/millerf/orgs", "repos_url": "https://api.github.com/users/millerf/repos", "events_url": "https://api.github.com/users/millerf/events{/privacy}", "received_events_url": "https://api.github.com/users/millerf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 155591940, "node_id": "MDU6TGFiZWwxNTU1OTE5NDA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-07T10:50:25Z", "updated_at": "2019-09-11T04:58:18Z", "closed_at": "2019-09-11T04:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI was wondering if there was an elegant way to retrieve the upload advance when saving the file to S3 for large files?\r\n\r\nThey seem to be sent in `multipart` so I am sure there is a way, but I don't want to dig into this before knowing if it was somehow implemented in `storage` already...\r\n\r\nthanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/695", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/695/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/695/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/695/events", "html_url": "https://github.com/jschneier/django-storages/issues/695", "id": 439980929, "node_id": "MDU6SXNzdWU0Mzk5ODA5Mjk=", "number": 695, "title": "AWS bill is huge", "user": {"login": "naglalakk", "id": 1476867, "node_id": "MDQ6VXNlcjE0NzY4Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1476867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naglalakk", "html_url": "https://github.com/naglalakk", "followers_url": "https://api.github.com/users/naglalakk/followers", "following_url": "https://api.github.com/users/naglalakk/following{/other_user}", "gists_url": "https://api.github.com/users/naglalakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/naglalakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naglalakk/subscriptions", "organizations_url": "https://api.github.com/users/naglalakk/orgs", "repos_url": "https://api.github.com/users/naglalakk/repos", "events_url": "https://api.github.com/users/naglalakk/events{/privacy}", "received_events_url": "https://api.github.com/users/naglalakk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-03T10:17:15Z", "updated_at": "2019-05-04T10:11:26Z", "closed_at": "2019-05-04T10:11:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just got a bill from AWS for data transfer of 1,054.510 GB lol.\r\nHow is this possible? This is my config\r\n\r\n```\r\n# STORAGES\r\n# ------------------------------------------------------------------------------\r\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\r\nAWS_DEFAULT_ACL=None\r\nAWS_PRELOAD_METADATA=True\r\nAWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')\r\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\r\nAWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')\r\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\r\nAWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')\r\nAWS_S3_CUSTOM_DOMAIN    = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME\r\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\r\nAWS_QUERYSTRING_AUTH = False\r\n# DO NOT change these unless you know what you're doing.\r\n_AWS_EXPIRY = 60 * 60 * 24 * 7\r\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\r\nAWS_S3_OBJECT_PARAMETERS = {\r\n    'CacheControl': f'max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate',\r\n}\r\n```\r\n\r\nI don't even have that many static files but I notice that everytime I do collectstatic it goes through every single file even if it's not modified. Is there anything in my settings that I could add that would prevent this? I thought AWS_PRELOAD_METADATA would do this. I mean the only thing that would explain this bill is that all static files are being uploaded every single time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/694", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/694/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/694/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/694/events", "html_url": "https://github.com/jschneier/django-storages/issues/694", "id": 438667987, "node_id": "MDU6SXNzdWU0Mzg2Njc5ODc=", "number": 694, "title": "GS_FILE_OVERWRITE = False ignored", "user": {"login": "ekimia", "id": 357513, "node_id": "MDQ6VXNlcjM1NzUxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/357513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekimia", "html_url": "https://github.com/ekimia", "followers_url": "https://api.github.com/users/ekimia/followers", "following_url": "https://api.github.com/users/ekimia/following{/other_user}", "gists_url": "https://api.github.com/users/ekimia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekimia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekimia/subscriptions", "organizations_url": "https://api.github.com/users/ekimia/orgs", "repos_url": "https://api.github.com/users/ekimia/repos", "events_url": "https://api.github.com/users/ekimia/events{/privacy}", "received_events_url": "https://api.github.com/users/ekimia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-30T08:55:39Z", "updated_at": "2019-04-30T08:56:03Z", "closed_at": "2019-04-30T08:56:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "using 1.7.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/690", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/690/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/690/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/690/events", "html_url": "https://github.com/jschneier/django-storages/issues/690", "id": 433870557, "node_id": "MDU6SXNzdWU0MzM4NzA1NTc=", "number": 690, "title": "ImportError: cannot import name 'check_location'", "user": {"login": "dezmaeth", "id": 995012, "node_id": "MDQ6VXNlcjk5NTAxMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/995012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dezmaeth", "html_url": "https://github.com/dezmaeth", "followers_url": "https://api.github.com/users/dezmaeth/followers", "following_url": "https://api.github.com/users/dezmaeth/following{/other_user}", "gists_url": "https://api.github.com/users/dezmaeth/gists{/gist_id}", "starred_url": "https://api.github.com/users/dezmaeth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dezmaeth/subscriptions", "organizations_url": "https://api.github.com/users/dezmaeth/orgs", "repos_url": "https://api.github.com/users/dezmaeth/repos", "events_url": "https://api.github.com/users/dezmaeth/events{/privacy}", "received_events_url": "https://api.github.com/users/dezmaeth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 619992670, "node_id": "MDU6TGFiZWw2MTk5OTI2NzA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/google", "name": "google", "color": "d93f0b", "default": false, "description": null}, {"id": 1110809221, "node_id": "MDU6TGFiZWwxMTEwODA5MjIx", "url": "https://api.github.com/repos/jschneier/django-storages/labels/need%20more%20info", "name": "need more info", "color": "b22e2c", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-16T16:20:04Z", "updated_at": "2019-05-13T13:42:48Z", "closed_at": "2019-05-13T13:42:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Im having an issue on import the library\r\n\r\n**ImportError: cannot import name 'check_location'**\r\n\r\nRef. https://github.com/jschneier/django-storages/blob/a8764ff58501e15b8dc08941cb8c7cb4a607022c/storages/backends/gcloud.py#L13\r\n\r\nStacktrace\r\n> ImportError: cannot import name 'check_location'\r\n>   File \"django/core/handlers/exception.py\", line 34, in inner\r\n>     response = get_response(request)\r\n>   File \"django/core/handlers/base.py\", line 156, in _get_response\r\n>     response = self.process_exception_by_middleware(e, request)\r\n>   File \"django/core/handlers/base.py\", line 154, in _get_response\r\n>     response = response.render()\r\n>   File \"django/template/response.py\", line 106, in render\r\n>     self.content = self.rendered_content\r\n>   File \"django/template/response.py\", line 83, in rendered_content\r\n>     content = template.render(context, self._request)\r\n>   File \"django/template/backends/django.py\", line 61, in render\r\n>     return self.template.render(context)\r\n>   File \"django/template/base.py\", line 171, in render\r\n>     return self._render(context)\r\n>   File \"django/template/base.py\", line 163, in _render\r\n>     return self.nodelist.render(context)\r\n>   File \"django/template/base.py\", line 937, in render\r\n>     bit = node.render_annotated(context)\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/loader_tags.py\", line 150, in render\r\n>     return compiled_parent._render(context)\r\n>   File \"django/template/base.py\", line 163, in _render\r\n>     return self.nodelist.render(context)\r\n>   File \"django/template/base.py\", line 937, in render\r\n>     bit = node.render_annotated(context)\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/loader_tags.py\", line 150, in render\r\n>     return compiled_parent._render(context)\r\n>   File \"django/template/base.py\", line 163, in _render\r\n>     return self.nodelist.render(context)\r\n>   File \"django/template/base.py\", line 937, in render\r\n>     bit = node.render_annotated(context)\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/loader_tags.py\", line 62, in render\r\n>     result = block.nodelist.render(context)\r\n>   File \"django/template/base.py\", line 937, in render\r\n>     bit = node.render_annotated(context)\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/loader_tags.py\", line 62, in render\r\n>     result = block.nodelist.render(context)\r\n>   File \"django/template/base.py\", line 937, in render\r\n>     bit = node.render_annotated(context)\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/defaulttags.py\", line 209, in render\r\n>     nodelist.append(node.render_annotated(context))\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/loader_tags.py\", line 188, in render\r\n>     return template.render(context)\r\n>   File \"django/template/base.py\", line 173, in render\r\n>     return self._render(context)\r\n>   File \"django/template/base.py\", line 163, in _render\r\n>     return self.nodelist.render(context)\r\n>   File \"django/template/base.py\", line 937, in render\r\n>     bit = node.render_annotated(context)\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/defaulttags.py\", line 209, in render\r\n>     nodelist.append(node.render_annotated(context))\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/defaulttags.py\", line 209, in render\r\n>     nodelist.append(node.render_annotated(context))\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/defaulttags.py\", line 309, in render\r\n>     return nodelist.render(context)\r\n>   File \"django/template/base.py\", line 937, in render\r\n>     bit = node.render_annotated(context)\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/defaulttags.py\", line 309, in render\r\n>     return nodelist.render(context)\r\n>   File \"django/template/base.py\", line 937, in render\r\n>     bit = node.render_annotated(context)\r\n>   File \"django/template/base.py\", line 904, in render_annotated\r\n>     return self.render(context)\r\n>   File \"django/template/base.py\", line 993, in render\r\n>     return render_value_in_context(output, context)\r\n>   File \"django/template/base.py\", line 972, in render_value_in_context\r\n>     value = str(value)\r\n>   File \"django/utils/html.py\", line 397, in <lambda>\r\n>     klass.__str__ = lambda self: mark_safe(klass_str(self))\r\n>   File \"django/forms/boundfield.py\", line 33, in __str__\r\n>     return self.as_widget()\r\n>   File \"django/forms/boundfield.py\", line 93, in as_widget\r\n>     renderer=self.form.renderer,\r\n>   File \"django/forms/widgets.py\", line 229, in render\r\n>     context = self.get_context(name, value, attrs)\r\n>   File \"django/forms/widgets.py\", line 415, in get_context\r\n>     context = super().get_context(name, value, attrs)\r\n>   File \"django/forms/widgets.py\", line 281, in get_context\r\n>     context = super().get_context(name, value, attrs)\r\n>   File \"django/forms/widgets.py\", line 221, in get_context\r\n>     'value': self.format_value(value),\r\n>   File \"django/forms/widgets.py\", line 411, in format_value\r\n>     if self.is_initial(value):\r\n>   File \"django/forms/widgets.py\", line 405, in is_initial\r\n>     return bool(value and getattr(value, 'url', False))\r\n>   File \"django/db/models/fields/files.py\", line 62, in url\r\n>     return self.storage.url(self.name)\r\n>   File \"django/utils/functional.py\", line 213, in inner\r\n>     self._setup()\r\n>   File \"django/core/files/storage.py\", line 361, in _setup\r\n>     self._wrapped = get_storage_class()()\r\n>   File \"django/core/files/storage.py\", line 356, in get_storage_class\r\n>     return import_string(import_path or settings.DEFAULT_FILE_STORAGE)\r\n>   File \"django/utils/module_loading.py\", line 17, in import_string\r\n>     module = import_module(module_path)\r\n>   File \"importlib/__init__.py\", line 126, in import_module\r\n>     return _bootstrap._gcd_import(name[level:], package, level)\r\n>   File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n>   File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n>   File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n>   File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n>   File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n>   File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n>   File \"config/backend/storage.py\", line 13, in <module>\r\n>     from storages.backends.gcloud import GoogleCloudStorage\r\n>   File \"storages/backends/gcloud.py\", line 12, in <module>\r\n>     from storages.utils import (\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/689", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/689/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/689/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/689/events", "html_url": "https://github.com/jschneier/django-storages/issues/689", "id": 430772796, "node_id": "MDU6SXNzdWU0MzA3NzI3OTY=", "number": 689, "title": "dropbox.stone_validators.ValidationError", "user": {"login": "jhondoedo", "id": 48849802, "node_id": "MDQ6VXNlcjQ4ODQ5ODAy", "avatar_url": "https://avatars2.githubusercontent.com/u/48849802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhondoedo", "html_url": "https://github.com/jhondoedo", "followers_url": "https://api.github.com/users/jhondoedo/followers", "following_url": "https://api.github.com/users/jhondoedo/following{/other_user}", "gists_url": "https://api.github.com/users/jhondoedo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhondoedo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhondoedo/subscriptions", "organizations_url": "https://api.github.com/users/jhondoedo/orgs", "repos_url": "https://api.github.com/users/jhondoedo/repos", "events_url": "https://api.github.com/users/jhondoedo/events{/privacy}", "received_events_url": "https://api.github.com/users/jhondoedo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 619992760, "node_id": "MDU6TGFiZWw2MTk5OTI3NjA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/dropbox", "name": "dropbox", "color": "0052cc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-09T05:24:27Z", "updated_at": "2020-04-15T13:49:52Z", "closed_at": "2019-09-08T03:10:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "**setting.py**\r\n\r\n```\r\nDEFAULT_FILE_STORAGE = 'storages.backends.dropbox.DropBoxStorage'\r\nDROPBOX_OAUTH2_TOKEN = 'token'\r\nDROPBOX_ROOT_PATH = '/media/'\r\n```\r\n\r\n\r\n**model.py**\r\n\r\n```\r\nlogo = models.ImageField(upload_to=r'logo/%Y/%m/')\r\nimage = models.ImageField(upload_to=r'photos/%Y/%m/',\r\n help_text='Image size: Width=1080 pixel. Height=1920 pixel',)\r\n```\r\n\r\n\r\n**error**\r\n\r\nRequest Method: | POST\r\n\r\nRequest URL: | http://127.0.0.1:8000/add\r\n\r\nDjango Version: | 2.1.8\r\n\r\nException Type: | ValidationError\r\n\r\nException Value: | 'D:/media/10506738_10150004552801856_220367501106153455_o.jpg' did not match pattern '(/(.\\|[\\r\\n])*\\|id:.*)\\|(rev:[0-9a-f]{9,})\\|(ns:[0-9]+(/.*)?)'\r\n\r\n\r\n**console**\r\n\r\ndropbox.stone_validators.ValidationError: 'D:/media/10506738_10150004552801856_220367501106153455_o.jpg' did not match pattern '(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)'\r\n\r\n\r\n@ZuluPro I can't figure out why this error is happening?  Is the current Dropbox API compatible ?\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/687", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/687/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/687/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/687/events", "html_url": "https://github.com/jschneier/django-storages/issues/687", "id": 430083005, "node_id": "MDU6SXNzdWU0MzAwODMwMDU=", "number": 687, "title": "Please use AWS4-HMAC-SHA256 error in django-storages@1.4.1", "user": {"login": "vaibhavmule", "id": 6290791, "node_id": "MDQ6VXNlcjYyOTA3OTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6290791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaibhavmule", "html_url": "https://github.com/vaibhavmule", "followers_url": "https://api.github.com/users/vaibhavmule/followers", "following_url": "https://api.github.com/users/vaibhavmule/following{/other_user}", "gists_url": "https://api.github.com/users/vaibhavmule/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaibhavmule/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaibhavmule/subscriptions", "organizations_url": "https://api.github.com/users/vaibhavmule/orgs", "repos_url": "https://api.github.com/users/vaibhavmule/repos", "events_url": "https://api.github.com/users/vaibhavmule/events{/privacy}", "received_events_url": "https://api.github.com/users/vaibhavmule/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161076983, "node_id": "MDU6TGFiZWwxNjEwNzY5ODM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/s3boto", "name": "s3boto", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-04-06T22:24:59Z", "updated_at": "2020-08-10T19:12:56Z", "closed_at": "2019-05-10T13:57:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "i am getting this error: The authorization mechanism you have provided is not supported. Please use AWS4-HMAC-SHA256.\r\n\r\nI am using Django - 1.6.7, boto- 2.49.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/686", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/686/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/686/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/686/events", "html_url": "https://github.com/jschneier/django-storages/issues/686", "id": 429022106, "node_id": "MDU6SXNzdWU0MjkwMjIxMDY=", "number": 686, "title": "S3Boto3Storage url method is undocumented", "user": {"login": "szpsz", "id": 13379420, "node_id": "MDQ6VXNlcjEzMzc5NDIw", "avatar_url": "https://avatars3.githubusercontent.com/u/13379420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szpsz", "html_url": "https://github.com/szpsz", "followers_url": "https://api.github.com/users/szpsz/followers", "following_url": "https://api.github.com/users/szpsz/following{/other_user}", "gists_url": "https://api.github.com/users/szpsz/gists{/gist_id}", "starred_url": "https://api.github.com/users/szpsz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szpsz/subscriptions", "organizations_url": "https://api.github.com/users/szpsz/orgs", "repos_url": "https://api.github.com/users/szpsz/repos", "events_url": "https://api.github.com/users/szpsz/events{/privacy}", "received_events_url": "https://api.github.com/users/szpsz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-03T23:49:47Z", "updated_at": "2019-05-10T14:01:13Z", "closed_at": "2019-05-10T14:01:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "S3Boto3Storage url method used for generating presigned urls is not documented either in docs nor in code. It is quite hard to get information that generating presigned urls through this library is possible. I think that this information might be very helpful for developers using this library because it is probably one of few functions which they will intend to use manually. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/685", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/685/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/685/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/685/events", "html_url": "https://github.com/jschneier/django-storages/issues/685", "id": 426650791, "node_id": "MDU6SXNzdWU0MjY2NTA3OTE=", "number": 685, "title": "Document AWS S3 IAM Permissions", "user": {"login": "irasnyd", "id": 11426176, "node_id": "MDQ6VXNlcjExNDI2MTc2", "avatar_url": "https://avatars0.githubusercontent.com/u/11426176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irasnyd", "html_url": "https://github.com/irasnyd", "followers_url": "https://api.github.com/users/irasnyd/followers", "following_url": "https://api.github.com/users/irasnyd/following{/other_user}", "gists_url": "https://api.github.com/users/irasnyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/irasnyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irasnyd/subscriptions", "organizations_url": "https://api.github.com/users/irasnyd/orgs", "repos_url": "https://api.github.com/users/irasnyd/repos", "events_url": "https://api.github.com/users/irasnyd/events{/privacy}", "received_events_url": "https://api.github.com/users/irasnyd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 959329733, "node_id": "MDU6TGFiZWw5NTkzMjk3MzM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/documentation", "name": "documentation", "color": "018417", "default": true, "description": ""}, {"id": 161076983, "node_id": "MDU6TGFiZWwxNjEwNzY5ODM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/s3boto", "name": "s3boto", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-28T18:40:36Z", "updated_at": "2019-05-16T05:29:27Z", "closed_at": "2019-05-16T05:29:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Which AWS IAM permissions are needed for Django Storages to work with an AWS S3 Bucket? This isn't documented anywhere that I can find. This is where I expected to find a list of the necessary permissions: https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/682", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/682/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/682/events", "html_url": "https://github.com/jschneier/django-storages/issues/682", "id": 421810122, "node_id": "MDU6SXNzdWU0MjE4MTAxMjI=", "number": 682, "title": "Incorrect urls generated for S3 assets", "user": {"login": "gregbrowndev", "id": 9559655, "node_id": "MDQ6VXNlcjk1NTk2NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9559655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregbrowndev", "html_url": "https://github.com/gregbrowndev", "followers_url": "https://api.github.com/users/gregbrowndev/followers", "following_url": "https://api.github.com/users/gregbrowndev/following{/other_user}", "gists_url": "https://api.github.com/users/gregbrowndev/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregbrowndev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregbrowndev/subscriptions", "organizations_url": "https://api.github.com/users/gregbrowndev/orgs", "repos_url": "https://api.github.com/users/gregbrowndev/repos", "events_url": "https://api.github.com/users/gregbrowndev/events{/privacy}", "received_events_url": "https://api.github.com/users/gregbrowndev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-16T14:00:19Z", "updated_at": "2019-03-16T14:17:20Z", "closed_at": "2019-03-16T14:17:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm experiencing a problem where the URLs to assets stored on a Europe/London S3 bucket  are not being generated correctly. For example:\r\n\r\nhttps://s3.amazonaws.com/mybucket/static/wagtailadmin/css/normalize.css\r\n\r\nResulting in such errors in the browser:\r\n\r\n> Cross-Origin Read Blocking (CORB) blocked cross-origin response <URL> with MIME type application/xml. See <URL> for more details.\r\n\r\nand when you try to access the url:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Error>\r\n   <Code>PermanentRedirect</Code>\r\n   <Message>The bucket you are attempting to access must be addressed using the specified endpoint. Please send all future requests to this endpoint.</Message>\r\n   <Endpoint>mybucket.s3.amazonaws.com</Endpoint>\r\n   <Bucket>mybucket</Bucket>\r\n   <RequestId>4EA2572A163846F7</RequestId>\r\n   <HostId>+l38ZBh/hDscROXzeWdNfldQtcQm1ZPVq4sNZAZKQKwGHLv7MDRW4H0sf0I3pijD1T0j4oSE6E=</HostId>\r\n</Error>\r\n```\r\n\r\nThe correct url to the file would be _https://mybucket.s3.amazonaws.com/static/wagtailadmin/css/normalize.css_.\r\n\r\nMy project uses vanilla settings generated by [django-cookiecutter](https://github.com/pydanny/cookiecutter-django):\r\n\r\n```\r\n# STORAGES\r\n# ------------------------------------------------------------------------------\r\nINSTALLED_APPS += ['storages']  # noqa F405\r\nAWS_ACCESS_KEY_ID = env('DJANGO_AWS_ACCESS_KEY_ID')\r\nAWS_SECRET_ACCESS_KEY = env('DJANGO_AWS_SECRET_ACCESS_KEY')\r\nAWS_STORAGE_BUCKET_NAME = env('DJANGO_AWS_STORAGE_BUCKET_NAME')\r\nAWS_QUERYSTRING_AUTH = False\r\n_AWS_EXPIRY = 60 * 60 * 24 * 7\r\nAWS_S3_OBJECT_PARAMETERS = {\r\n    'CacheControl': f'max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate',\r\n}\r\nAWS_DEFAULT_ACL = 'public-read'  # TODO - not sure if this is ideal\r\n\r\n# STATIC\r\n# ------------------------\r\n\r\nSTATICFILES_STORAGE = 'config.settings.production.StaticRootS3Boto3Storage'\r\nSTATIC_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/static/'\r\n\r\n# MEDIA\r\n# ------------------------------------------------------------------------------\r\n\r\nfrom storages.backends.s3boto3 import S3Boto3Storage  # noqa E402\r\n\r\n\r\nclass StaticRootS3Boto3Storage(S3Boto3Storage):\r\n    location = 'static'\r\n\r\n\r\nclass MediaRootS3Boto3Storage(S3Boto3Storage):\r\n    location = 'media'\r\n    file_overwrite = False\r\n\r\n\r\nDEFAULT_FILE_STORAGE = 'config.settings.production.MediaRootS3Boto3Storage'\r\nMEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/media/'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/680", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/680/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/680/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/680/events", "html_url": "https://github.com/jschneier/django-storages/issues/680", "id": 418018941, "node_id": "MDU6SXNzdWU0MTgwMTg5NDE=", "number": 680, "title": "Azure backend pulls broad and outdated dependencies", "user": {"login": "tiloc", "id": 16414047, "node_id": "MDQ6VXNlcjE2NDE0MDQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/16414047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tiloc", "html_url": "https://github.com/tiloc", "followers_url": "https://api.github.com/users/tiloc/followers", "following_url": "https://api.github.com/users/tiloc/following{/other_user}", "gists_url": "https://api.github.com/users/tiloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/tiloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tiloc/subscriptions", "organizations_url": "https://api.github.com/users/tiloc/orgs", "repos_url": "https://api.github.com/users/tiloc/repos", "events_url": "https://api.github.com/users/tiloc/events{/privacy}", "received_events_url": "https://api.github.com/users/tiloc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-06T21:32:42Z", "updated_at": "2019-03-27T03:20:10Z", "closed_at": "2019-03-27T03:20:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am struggling getting the Azure backend to work with my other code, due to its dependencies. It pulls in the \"azure\" package, which is a wrapper to pull in a wide range of Azure SDKs. It hasn't been updated in quite a bit and thus conflicts with some of my code which has newer Azure SDK dependencies. It also pulls in much more than seems to be needed for the storage backend.\r\nCould this be limited to use the \"azure-common\" package instead? Aside from \"azure-storage-blob\" this seems to be the only dependency which is really required.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/679", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/679/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/679/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/679/events", "html_url": "https://github.com/jschneier/django-storages/issues/679", "id": 416890027, "node_id": "MDU6SXNzdWU0MTY4OTAwMjc=", "number": 679, "title": "Separate URLs for collectstatic and viewing", "user": {"login": "nihaals", "id": 18350092, "node_id": "MDQ6VXNlcjE4MzUwMDky", "avatar_url": "https://avatars2.githubusercontent.com/u/18350092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nihaals", "html_url": "https://github.com/nihaals", "followers_url": "https://api.github.com/users/nihaals/followers", "following_url": "https://api.github.com/users/nihaals/following{/other_user}", "gists_url": "https://api.github.com/users/nihaals/gists{/gist_id}", "starred_url": "https://api.github.com/users/nihaals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nihaals/subscriptions", "organizations_url": "https://api.github.com/users/nihaals/orgs", "repos_url": "https://api.github.com/users/nihaals/repos", "events_url": "https://api.github.com/users/nihaals/events{/privacy}", "received_events_url": "https://api.github.com/users/nihaals/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-04T16:41:05Z", "updated_at": "2019-03-08T23:07:56Z", "closed_at": "2019-03-08T23:07:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have my S3 bucket connected to CloudFlare and have set my `AWS_S3_ENDPOINT_URL` to my domain that has a CNAME for the CloudFlare distribution.\r\nWhen I run collectstatic, the library tries to delete an old file, but as my CloudFlare distribution is set for only GET and HEAD requests, it errors (`botocore.exceptions.ClientError: An error occurred (403) when calling the DeleteObject operation: Forbidden`). Is there a way for me to use the normal S3 URL for `collectstatic` and use the custom URL when I reference the files in a template?\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/677", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/677/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/677/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/677/events", "html_url": "https://github.com/jschneier/django-storages/issues/677", "id": 416688917, "node_id": "MDU6SXNzdWU0MTY2ODg5MTc=", "number": 677, "title": "SSLError: [SSL] malloc failure (_ssl.c:2990)     /    AWS S3", "user": {"login": "gotexis", "id": 38595828, "node_id": "MDQ6VXNlcjM4NTk1ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/38595828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gotexis", "html_url": "https://github.com/gotexis", "followers_url": "https://api.github.com/users/gotexis/followers", "following_url": "https://api.github.com/users/gotexis/following{/other_user}", "gists_url": "https://api.github.com/users/gotexis/gists{/gist_id}", "starred_url": "https://api.github.com/users/gotexis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gotexis/subscriptions", "organizations_url": "https://api.github.com/users/gotexis/orgs", "repos_url": "https://api.github.com/users/gotexis/repos", "events_url": "https://api.github.com/users/gotexis/events{/privacy}", "received_events_url": "https://api.github.com/users/gotexis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161076983, "node_id": "MDU6TGFiZWwxNjEwNzY5ODM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/s3boto", "name": "s3boto", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-04T08:40:48Z", "updated_at": "2019-09-08T03:10:31Z", "closed_at": "2019-09-08T03:10:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "My rig:\r\n\r\nPython 3.7.2\r\nDjango 2.1.7\r\nBOTO3 1.9.106\r\nbotocore 1.12.106\r\ndj-storages 1.7.1\r\n\r\nHmmmm\r\nWhat to do...\r\nI have turned off use_ssl for now just to make it work...\r\nLet's see what happens....\r\nHopefully it can work without SSL\r\notherwise my site is fucked...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/674", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/674/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/674/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/674/events", "html_url": "https://github.com/jschneier/django-storages/issues/674", "id": 415256088, "node_id": "MDU6SXNzdWU0MTUyNTYwODg=", "number": 674, "title": "Cache Control in Azure", "user": {"login": "davidfischer", "id": 185043, "node_id": "MDQ6VXNlcjE4NTA0Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/185043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidfischer", "html_url": "https://github.com/davidfischer", "followers_url": "https://api.github.com/users/davidfischer/followers", "following_url": "https://api.github.com/users/davidfischer/following{/other_user}", "gists_url": "https://api.github.com/users/davidfischer/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidfischer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidfischer/subscriptions", "organizations_url": "https://api.github.com/users/davidfischer/orgs", "repos_url": "https://api.github.com/users/davidfischer/repos", "events_url": "https://api.github.com/users/davidfischer/events{/privacy}", "received_events_url": "https://api.github.com/users/davidfischer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 619992512, "node_id": "MDU6TGFiZWw2MTk5OTI1MTI=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/azure", "name": "azure", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-27T18:04:48Z", "updated_at": "2019-11-18T06:45:10Z", "closed_at": "2019-11-18T06:45:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice to be able to set the cache control for a file going to Azure. Normally this would [happen here](https://github.com/jschneier/django-storages/blob/efcad7f6b39b79ef2ef5810c38e48065d04b1c8f/storages/backends/azure_storage.py#L240-L242).\r\n\r\nI haven't thought through whether it should be overridable on a per file basis or a setting for the storage class. The latter is more similar to how things work for S3, I believe (`AWS_HEADERS`, `AWS_S3_OBJECT_PARAMETERS`)\r\n\r\nThere's some prior discussion in #323.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/673", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/673/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/673/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/673/events", "html_url": "https://github.com/jschneier/django-storages/issues/673", "id": 414745408, "node_id": "MDU6SXNzdWU0MTQ3NDU0MDg=", "number": 673, "title": "SAS support for azure storge", "user": {"login": "cxplanet", "id": 20700, "node_id": "MDQ6VXNlcjIwNzAw", "avatar_url": "https://avatars2.githubusercontent.com/u/20700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxplanet", "html_url": "https://github.com/cxplanet", "followers_url": "https://api.github.com/users/cxplanet/followers", "following_url": "https://api.github.com/users/cxplanet/following{/other_user}", "gists_url": "https://api.github.com/users/cxplanet/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxplanet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxplanet/subscriptions", "organizations_url": "https://api.github.com/users/cxplanet/orgs", "repos_url": "https://api.github.com/users/cxplanet/repos", "events_url": "https://api.github.com/users/cxplanet/events{/privacy}", "received_events_url": "https://api.github.com/users/cxplanet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 619992512, "node_id": "MDU6TGFiZWw2MTk5OTI1MTI=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/azure", "name": "azure", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-26T18:05:39Z", "updated_at": "2019-09-11T05:05:36Z", "closed_at": "2019-09-11T05:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "As a feature request, it would be great to instantiate the AzureStorage class with a SAS url, instead of root credentials, to allow users to limit the exposure of the root credentials.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/669", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/669/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/669/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/669/events", "html_url": "https://github.com/jschneier/django-storages/issues/669", "id": 411251453, "node_id": "MDU6SXNzdWU0MTEyNTE0NTM=", "number": 669, "title": "Can't access files stored in GCloud with query params", "user": {"login": "casoetan", "id": 1047316, "node_id": "MDQ6VXNlcjEwNDczMTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/casoetan", "html_url": "https://github.com/casoetan", "followers_url": "https://api.github.com/users/casoetan/followers", "following_url": "https://api.github.com/users/casoetan/following{/other_user}", "gists_url": "https://api.github.com/users/casoetan/gists{/gist_id}", "starred_url": "https://api.github.com/users/casoetan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/casoetan/subscriptions", "organizations_url": "https://api.github.com/users/casoetan/orgs", "repos_url": "https://api.github.com/users/casoetan/repos", "events_url": "https://api.github.com/users/casoetan/events{/privacy}", "received_events_url": "https://api.github.com/users/casoetan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-17T23:43:29Z", "updated_at": "2019-02-18T00:09:56Z", "closed_at": "2019-02-18T00:09:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a public GCloud storage and have set `GS_DEFAULT_ACL` to `publicRead`.\r\n\r\nI can access all files except those with query strings like\r\n\r\n`https://storage.googleapis.com/.../css/icons/fonts/icons.ttf?415d6s`\r\n\r\nThese\r\n`https://storage.googleapis.com/.../css/jquery?v=1.0.1`\r\nare fine\r\n\r\nI don't think this is Google cause access those from the browser seem fine.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/667", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/667/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/667/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/667/events", "html_url": "https://github.com/jschneier/django-storages/issues/667", "id": 409189018, "node_id": "MDU6SXNzdWU0MDkxODkwMTg=", "number": 667, "title": "django-storages s3 storage not working with Django ImageField", "user": {"login": "IronnMaiden", "id": 46795469, "node_id": "MDQ6VXNlcjQ2Nzk1NDY5", "avatar_url": "https://avatars1.githubusercontent.com/u/46795469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IronnMaiden", "html_url": "https://github.com/IronnMaiden", "followers_url": "https://api.github.com/users/IronnMaiden/followers", "following_url": "https://api.github.com/users/IronnMaiden/following{/other_user}", "gists_url": "https://api.github.com/users/IronnMaiden/gists{/gist_id}", "starred_url": "https://api.github.com/users/IronnMaiden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IronnMaiden/subscriptions", "organizations_url": "https://api.github.com/users/IronnMaiden/orgs", "repos_url": "https://api.github.com/users/IronnMaiden/repos", "events_url": "https://api.github.com/users/IronnMaiden/events{/privacy}", "received_events_url": "https://api.github.com/users/IronnMaiden/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 155591940, "node_id": "MDU6TGFiZWwxNTU1OTE5NDA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-12T09:01:45Z", "updated_at": "2019-09-08T18:00:20Z", "closed_at": "2019-09-08T18:00:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using django storages for maintaining uploads in S3 and using django-rest-framework along side it.\r\nHere is the issue that is coming when is try handling multipart upload -\r\n\r\n> [12/Feb/2019 14:22:46] ERROR [kyros.error_handler:74] File was not opened in read mode.\r\nTraceback (most recent call last):\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/rest_framework/views.py\", line 492, in dispatch\r\n    response = handler(request, *args, **kwargs)\r\n  File \"/Users/tamoghnabiswas/workspace/kyros_server/users/views.py\", line 526, in patch\r\n    return generics.RetrieveUpdateAPIView.patch(self, request, *args, **kwargs)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/rest_framework/generics.py\", line 260, in patch\r\n    return self.partial_update(request, *args, **kwargs)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/rest_framework/mixins.py\", line 84, in partial_update\r\n    return self.update(request, *args, **kwargs)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/rest_framework/mixins.py\", line 69, in update\r\n    serializer.is_valid(raise_exception=True)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/rest_framework/serializers.py\", line 236, in is_valid\r\n    self._validated_data = self.run_validation(self.initial_data)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/rest_framework/serializers.py\", line 434, in run_validation\r\n    value = self.to_internal_value(data)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/rest_framework/serializers.py\", line 491, in to_internal_value\r\n    validated_value = field.run_validation(primitive_value)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/rest_framework/fields.py\", line 536, in run_validation\r\n    value = self.to_internal_value(data)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/rest_framework/fields.py\", line 1594, in to_internal_value\r\n    return django_field.clean(file_object)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/django/forms/fields.py\", line 584, in clean\r\n    return super().clean(data)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/django/forms/fields.py\", line 147, in clean\r\n    value = self.to_python(value)\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/django/forms/fields.py\", line 621, in to_python\r\n    file = BytesIO(data.read())\r\n  File \"/Users/tamoghnabiswas/.virtualenvs/kyros/lib/python3.6/site-packages/storages/backends/s3boto3.py\", line 111, in read\r\n    raise AttributeError(\"File was not opened in read mode.\")\r\n\r\nThe code and settings are as follows -\r\nviews.py\r\n\r\n`from rest_framework.parsers import MultiPartParser, JSONParser, FileUploadParser\r\nfrom utils.cache.mixins import NoCacheMixin, PrivateCacheMixin, PublicCacheMixin\r\n\r\nclass UserProfileDetail(PublicCacheMixin, generics.RetrieveUpdateAPIView):\r\n    queryset = UserProfile.objects.all()\r\n    parser_classes = (JSONParser, MultiPartParser,)\r\n    serializer_class = UserProfileSerializer\r\n    permission_classes = [\r\n        # permissions.IsAuthenticated,\r\n        # kh_permissions.IsOwnerAdminOrReadOnly\r\n    ]\r\n    cache_timeout = 30\r\n\r\n    def is_self(self):\r\n        return self.kwargs['pk'] in [e.user_id for e in self.request.user.profiles.all()]\r\n\r\n    def post(self, request, *args, **kwargs):\r\n        if 'user_img_full' in request.data and request.user.is_doctor:\r\n            response = generics.RetrieveUpdateAPIView.patch(self, request, *args, **kwargs)\r\n            if response.data['is_default'] and self.is_self():\r\n                user_img_full = response.data['user_img_full']\r\n                user_img_thumb = response.data['user_img_thumb']\r\n                request.user.doctor.user_img_full = user_img_full\r\n                request.user.doctor.user_img_thumb = user_img_thumb\r\n                request.user.doctor.save()\r\n            return response\r\n        if 'user_img_full' in request.data:\r\n            return generics.RetrieveUpdateAPIView.patch(self, request, *args, **kwargs)\r\n        return Response({\"status\" : \"Work\"}, status=status.HTTP_200_OK)\r\n\r\n    def patch(self, request, *args, **kwargs):\r\n        # if image is being uploaded, copy the image url to doctor profile\r\n        if 'user_img' in request.data and request.user.is_doctor:\r\n            response = generics.RetrieveUpdateAPIView.patch(self, request, *args, **kwargs)\r\n            if response.data['is_default'] and self.is_self():\r\n                user_img = response.data['user_img']\r\n                request.user.doctor.user_img = user_img\r\n                request.user.doctor.save()\r\n            return response\r\n        if 'user_img_full' in request.data and request.user.is_doctor:\r\n            response = generics.RetrieveUpdateAPIView.patch(self, request, *args, **kwargs)\r\n            if response.data['is_default'] and self.is_self():\r\n                user_img_full = response.data['user_img_full']\r\n                user_img_thumb = response.data['user_img_thumb']\r\n                request.user.doctor.user_img_full = user_img_full\r\n                request.user.doctor.user_img_thumb = user_img_thumb\r\n                request.user.doctor.save()\r\n            return response\r\n        elif 'first_name' in request.data:\r\n            response = generics.RetrieveUpdateAPIView.patch(self, request, *args, **kwargs)\r\n            # if response['user_id'] in request.user.profiles\r\n            if self.is_self():\r\n                name = [e for e in request.data.get('first_name', '').split(' ') if e]\r\n                f_name = request.user.first_name\r\n                l_name = request.user.last_name\r\n                if name:\r\n                    f_name = name[0]\r\n                    l_name = (' '.join(name[1:])+request.data.get('last_name', ' ')).strip() if len(name)>1 else \\\r\n                        request.data.get('last_name', ' ')\r\n                    if response.data['is_default']:\r\n                        normalize_user_name(request.user, f_name, l_name)\r\n                response.data['first_name'] = f_name\r\n                response.data['last_name'] = l_name\r\n            return response\r\n        else:\r\n            return generics.RetrieveUpdateAPIView.patch(self, request, *args, **kwargs)`\r\n\r\nmodels.py -\r\n`class UserProfile(models.Model):\r\n    user_id = models.CharField(max_length=100,\r\n                               primary_key=True, editable=False)\r\n    first_name = models.CharField(max_length=100, null=True, blank=True, default=' ')\r\n    last_name = models.CharField(max_length=100, null=True, blank=True, default=' ')\r\n    sex = models.CharField(max_length=2, null=True, blank=True,\r\n                           choices=((\"M\", \"MALE\"), (\"F\", \"FEMALE\"), (\"O\", \"OTHER\")))\r\n    dob = models.DateField(\"Date of Birth\",\r\n                           null=True, blank=True)\r\n    blood_group = models.CharField(max_length=5, default=\"\",\r\n                                   null=True, blank=True,\r\n                                   choices=((\"O+\", \"O+\"), (\"O-\", \"O-\"),\r\n                                            (\"B+\", \"B+\"), (\"B-\", \"B-\"),\r\n                                            (\"AB+\", \"AB+\"), (\"AB-\", \"AB-\"),\r\n                                            (\"A+\", \"A+\"), (\"A-\", \"A-\")))\r\n\r\n    address_line1 = models.CharField(max_length=100, blank=True, null=True)\r\n    address_line2 = models.CharField(max_length=100, blank=True, null=True)\r\n    city = models.CharField(max_length=20, blank=True, null=True)\r\n    country = models.CharField(max_length=20, blank=True, null=True)\r\n    pin_code = models.CharField(max_length=6, blank=True, null=True)\r\n    marital_status = models.CharField(max_length=10, null=True, blank=True,\r\n                                      choices=((\"Married\", \"Married\"),\r\n                                               (\"Unmarried\", \"Unmarried\")))\r\n\r\n    is_default = models.BooleanField(default=False)\r\n\r\n    alternate_contact_name_1 = models.CharField(max_length=50, null=True, blank=True)\r\n    alternate_contact_type_1 = models.CharField(max_length=50, null=True, blank=True)\r\n    alternate_contact_number_1 = models.CharField(max_length=15, null=True, blank=True)\r\n\r\n    alternate_contact_name_2 = models.CharField(max_length=50, null=True, blank=True)\r\n    alternate_contact_type_2 = models.CharField(max_length=50, null=True, blank=True)\r\n    alternate_contact_number_2 = models.CharField(max_length=15, null=True, blank=True)\r\n\r\n    created_date = models.DateTimeField(auto_now_add=True)\r\n    last_modified = models.DateTimeField(auto_now=True)\r\n\r\n    user_img = ProcessedImageField(upload_to=user_directory_path,\r\n                                   processors=[SmartResize(100, 100)],\r\n                                   format='PNG',\r\n                                   options={'quality': 60}, blank=True, null=True)\r\n    user_img_full = ProcessedImageField(upload_to=user_directory_path_full_image,\r\n                                        processors=[SmartResize(960, 1280)],\r\n                                        format='PNG',\r\n                                        options={'quality': 99}, blank=True, null=True)\r\n    user_img_thumb = ImageSpecField(source='user_img_full',\r\n                                    format='PNG',\r\n                                    options={'quality': 70},\r\n                                    processors=[SmartResize(100, 100)])\r\n\r\n    height_ft = models.IntegerField(default=0)\r\n    height_inch = models.IntegerField(default=0)\r\n    allergies = models.CharField(max_length=100,\r\n                                 blank=True, null=True)\r\n    weight = models.IntegerField(default=0)\r\n    misc_data = pg_fields.HStoreField(null=True, blank=True)\r\n\r\n    def display_name(self):\r\n        return \"%s %s\" % (safe_str(self.first_name), safe_str(self.last_name))\r\n\r\n    def __unicode__(self):\r\n        return self.display_name()\r\n\r\n    def __str__(self):\r\n        return self.display_name()\r\n\r\n    def save(self, *args, **kwargs):\r\n        if not self.pk:\r\n            self.pk = generate_user_id()\r\n        super(UserProfile, self).save(*args, **kwargs)`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/662", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/662/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/662/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/662/events", "html_url": "https://github.com/jschneier/django-storages/issues/662", "id": 407213352, "node_id": "MDU6SXNzdWU0MDcyMTMzNTI=", "number": 662, "title": "InvalidAccessKeyId when running on AWS Lambda, deploy by Zappa", "user": {"login": "thesunlover", "id": 6734600, "node_id": "MDQ6VXNlcjY3MzQ2MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/6734600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thesunlover", "html_url": "https://github.com/thesunlover", "followers_url": "https://api.github.com/users/thesunlover/followers", "following_url": "https://api.github.com/users/thesunlover/following{/other_user}", "gists_url": "https://api.github.com/users/thesunlover/gists{/gist_id}", "starred_url": "https://api.github.com/users/thesunlover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thesunlover/subscriptions", "organizations_url": "https://api.github.com/users/thesunlover/orgs", "repos_url": "https://api.github.com/users/thesunlover/repos", "events_url": "https://api.github.com/users/thesunlover/events{/privacy}", "received_events_url": "https://api.github.com/users/thesunlover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-06T12:31:17Z", "updated_at": "2019-02-06T13:51:44Z", "closed_at": "2019-02-06T13:51:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does django-storages set the  x-amz-security-token header while uploading files to s3 ?\r\nAs it is said in AWS docs it is required:\r\n\r\n> Using Temporary Security Credentials\r\n> If you are signing your request using temporary security credentials (see Making Requests), you must include the corresponding security token in your request by adding the x-amz-security-token header.\r\n> \r\n> When you obtain temporary security credentials using the AWS Security Token Service API, the response includes temporary security credentials and a session token. You provide the session token value in the x-amz-security-token header when you send requests to Amazon S3. For information about the AWS Security Token Service API provided by IAM, go to Action in the AWS Security Token Service API Reference Guide .\r\n\r\n\r\nI am having this issue from time to time since 3 month and can't find the reason:\r\n#606 sounds to be similar issue\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/var/task/handler.py\", line 580, in lambda_handler\r\n  return LambdaHandler.lambda_handler(event, context)\r\n  File \"/var/task/handler.py\", line 248, in lambda_handler\r\n  return handler.handler(event, context)\r\n  File \"/var/task/handler.py\", line 373, in handler\r\n  return self.run_function(app_function, event, context)\r\n  File \"/var/task/handler.py\", line 287, in run_function\r\n  result = app_function(event, context)\r\n  File \"/var/task/fishdata/importers/fisher_import.py\", line 77, in lambda_import_honduran\r\n  import_fishers(state)\r\n  File \"/var/task/fishdata/importers/fisher_import.py\", line 170, in import_fishers\r\n  process_licenses_page(arguments_pack, selection_pack)\r\n  File \"/var/task/fishdata/importers/fisher_import.py\", line 199, in process_licenses_page\r\n  process_license(serialized)\r\n  File \"/var/task/fishdata/importers/fisher_import.py\", line 508, in process_license\r\n  name_to_save, img_file, save=True)\r\n  File \"/var/task/django/db/models/fields/files.py\", line 87, in save\r\n  self.name = self.storage.save(name, content, max_length=self.field.max_length)\r\n  File \"/var/task/django/core/files/storage.py\", line 49, in save\r\n  return self._save(name, content)\r\n  File \"/var/task/storages/backends/s3boto3.py\", line 506, in _save\r\n  self._save_content(obj, content, parameters=parameters)\r\n  File \"/var/task/storages/backends/s3boto3.py\", line 521, in _save_content\r\n  obj.upload_fileobj(content, ExtraArgs=put_parameters)\r\n  File \"/var/runtime/boto3/s3/inject.py\", line 621, in object_upload_fileobj\r\n  ExtraArgs=ExtraArgs, Callback=Callback, Config=Config)\r\n  File \"/var/runtime/boto3/s3/inject.py\", line 539, in upload_fileobj\r\n  return future.result()\r\n  File \"/var/runtime/s3transfer/futures.py\", line 73, in result\r\n  return self._coordinator.result()\r\n  File \"/var/runtime/s3transfer/futures.py\", line 233, in result\r\n  raise self._exception\r\n  File \"/var/runtime/s3transfer/tasks.py\", line 126, in __call__\r\n  return self._execute_main(kwargs)\r\n  File \"/var/runtime/s3transfer/tasks.py\", line 150, in _execute_main\r\n  return_value = self._main(**kwargs)\r\n  File \"/var/runtime/s3transfer/upload.py\", line 692, in _main\r\n  client.put_object(Bucket=bucket, Key=key, Body=body, **extra_args)\r\n  File \"/var/runtime/botocore/client.py\", line 314, in _api_call\r\n  return self._make_api_call(operation_name, kwargs)\r\n  File \"/var/runtime/botocore/client.py\", line 612, in _make_api_call\r\n  raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (InvalidAccessKeyId) when calling the PutObject operation: The AWS Access Key Id you provided does not exist in our records.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/660", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/660/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/660/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/660/events", "html_url": "https://github.com/jschneier/django-storages/issues/660", "id": 404482023, "node_id": "MDU6SXNzdWU0MDQ0ODIwMjM=", "number": 660, "title": "Setting metadata for Google Storage", "user": {"login": "RRaideRR", "id": 3411292, "node_id": "MDQ6VXNlcjM0MTEyOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3411292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RRaideRR", "html_url": "https://github.com/RRaideRR", "followers_url": "https://api.github.com/users/RRaideRR/followers", "following_url": "https://api.github.com/users/RRaideRR/following{/other_user}", "gists_url": "https://api.github.com/users/RRaideRR/gists{/gist_id}", "starred_url": "https://api.github.com/users/RRaideRR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RRaideRR/subscriptions", "organizations_url": "https://api.github.com/users/RRaideRR/orgs", "repos_url": "https://api.github.com/users/RRaideRR/repos", "events_url": "https://api.github.com/users/RRaideRR/events{/privacy}", "received_events_url": "https://api.github.com/users/RRaideRR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-29T20:54:32Z", "updated_at": "2019-02-07T09:27:25Z", "closed_at": "2019-01-29T20:56:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there,\r\n\r\nis there a possibility to set certain metadata for uploading a file (e.g. Content-Disposition)?\r\n\r\nCould anyone give me a hint in which direction I should look here?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/659", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/659/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/659/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/659/events", "html_url": "https://github.com/jschneier/django-storages/issues/659", "id": 403417395, "node_id": "MDU6SXNzdWU0MDM0MTczOTU=", "number": 659, "title": "Passing params to Storages in constructor", "user": {"login": "chickahoona", "id": 8075146, "node_id": "MDQ6VXNlcjgwNzUxNDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8075146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chickahoona", "html_url": "https://github.com/chickahoona", "followers_url": "https://api.github.com/users/chickahoona/followers", "following_url": "https://api.github.com/users/chickahoona/following{/other_user}", "gists_url": "https://api.github.com/users/chickahoona/gists{/gist_id}", "starred_url": "https://api.github.com/users/chickahoona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chickahoona/subscriptions", "organizations_url": "https://api.github.com/users/chickahoona/orgs", "repos_url": "https://api.github.com/users/chickahoona/repos", "events_url": "https://api.github.com/users/chickahoona/events{/privacy}", "received_events_url": "https://api.github.com/users/chickahoona/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-26T07:44:19Z", "updated_at": "2019-01-26T07:49:44Z", "closed_at": "2019-01-26T07:49:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Im currently implementing django storages and would like to pass all the parameters in the constructor, similar to the Django's normal FileSystemStorage implementation here:\r\n\r\nhttps://github.com/django/django/blob/master/django/core/files/storage.py#L178", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/655", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/655/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/655/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/655/events", "html_url": "https://github.com/jschneier/django-storages/issues/655", "id": 401740601, "node_id": "MDU6SXNzdWU0MDE3NDA2MDE=", "number": 655, "title": "Google storages encodes slashes by default - breaks relative urls in static assets", "user": {"login": "NDevox", "id": 6662648, "node_id": "MDQ6VXNlcjY2NjI2NDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6662648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NDevox", "html_url": "https://github.com/NDevox", "followers_url": "https://api.github.com/users/NDevox/followers", "following_url": "https://api.github.com/users/NDevox/following{/other_user}", "gists_url": "https://api.github.com/users/NDevox/gists{/gist_id}", "starred_url": "https://api.github.com/users/NDevox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NDevox/subscriptions", "organizations_url": "https://api.github.com/users/NDevox/orgs", "repos_url": "https://api.github.com/users/NDevox/repos", "events_url": "https://api.github.com/users/NDevox/events{/privacy}", "received_events_url": "https://api.github.com/users/NDevox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 619992670, "node_id": "MDU6TGFiZWw2MTk5OTI2NzA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/google", "name": "google", "color": "d93f0b", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-22T12:25:14Z", "updated_at": "2019-09-10T06:25:40Z", "closed_at": "2019-09-10T06:25:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the default behaviour when getting URLs from the google-cloud-storage library is to encode the URL, including slashes.\r\n\r\nThis is documented by google here: https://cloud.google.com/storage/docs/json_api/#encoding\r\n\r\nAs far as I know the reasoning is because buckets in google are actually flat structures and directories don't really exist - it's just naming conventions.\r\n\r\nHowever your browser still interprets it as using directories and behaves accordingly.\r\n\r\nAs a result, specifically with static files - this creates a bug.\r\n\r\nIn a CSS file I will often have relative urls pointing at things such as images or fonts.\r\n\r\nThey will look like:\r\n\r\n```css\r\n// static/css/main.css\r\n@font-face {\r\n  font-family: \"my-font\";\r\n  src: url(../font/my-font.ttf);\r\n}\r\n```\r\n\r\nAs the file I'm in is currently at `https://storage.googleapis.com/my-bucket/static/css/main.css` I would expect the resultant relative url to point to `https://storage.googleapis.com/my-bucket/static/font/my-font.ttf`.\r\n\r\nBut GCS encodes the url to `https://storage.googleapis.com/my-bucket/static%2fcss%2fmain.css` so the resultant relative url actually points to `https://storage.googleapis.com/static/font/my-font.ttf` which is clearly wrong.\r\n\r\nI'd like to propose a setting which triggers URLs to stop encoding slashes. This could be done with a simple:\r\n\r\n```python\r\nif not settings.GS_ENCODE_SLASHES:\r\n    url = url.replace('%2F', '/')\r\n```\r\n\r\naround [here](https://github.com/jschneier/django-storages/blob/master/storages/backends/gcloud.py#L266).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/652", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/652/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/652/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/652/events", "html_url": "https://github.com/jschneier/django-storages/issues/652", "id": 400168333, "node_id": "MDU6SXNzdWU0MDAxNjgzMzM=", "number": 652, "title": "glusterfs support plan", "user": {"login": "wahello", "id": 3362049, "node_id": "MDQ6VXNlcjMzNjIwNDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3362049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wahello", "html_url": "https://github.com/wahello", "followers_url": "https://api.github.com/users/wahello/followers", "following_url": "https://api.github.com/users/wahello/following{/other_user}", "gists_url": "https://api.github.com/users/wahello/gists{/gist_id}", "starred_url": "https://api.github.com/users/wahello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wahello/subscriptions", "organizations_url": "https://api.github.com/users/wahello/orgs", "repos_url": "https://api.github.com/users/wahello/repos", "events_url": "https://api.github.com/users/wahello/events{/privacy}", "received_events_url": "https://api.github.com/users/wahello/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-17T08:49:41Z", "updated_at": "2019-01-17T15:06:00Z", "closed_at": "2019-01-17T15:06:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any plan for [glusterfs](https://github.com/gluster/glusterfs) storage?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/651", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/651/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/651/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/651/events", "html_url": "https://github.com/jschneier/django-storages/issues/651", "id": 400091863, "node_id": "MDU6SXNzdWU0MDAwOTE4NjM=", "number": 651, "title": "Random google storage images expiry not working", "user": {"login": "andrewfam", "id": 1430616, "node_id": "MDQ6VXNlcjE0MzA2MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1430616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewfam", "html_url": "https://github.com/andrewfam", "followers_url": "https://api.github.com/users/andrewfam/followers", "following_url": "https://api.github.com/users/andrewfam/following{/other_user}", "gists_url": "https://api.github.com/users/andrewfam/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewfam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewfam/subscriptions", "organizations_url": "https://api.github.com/users/andrewfam/orgs", "repos_url": "https://api.github.com/users/andrewfam/repos", "events_url": "https://api.github.com/users/andrewfam/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewfam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 619992670, "node_id": "MDU6TGFiZWw2MTk5OTI2NzA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/google", "name": "google", "color": "d93f0b", "default": false, "description": null}, {"id": 155591940, "node_id": "MDU6TGFiZWwxNTU1OTE5NDA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-17T03:09:32Z", "updated_at": "2019-05-10T14:03:27Z", "closed_at": "2019-05-10T14:03:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://www.dataprotectionmgmt.com/\r\n\r\nI'm noticing that for some of my users using Chrome, even after the image expires, the url does not update and leaves a blank image there. Using 1.7.1 \r\n\r\n![0105ae10-27d2-4067-9c46-ff227d1c3214](https://user-images.githubusercontent.com/1430616/51293107-3f17c280-1a48-11e9-9d01-9aa054751f6e.jpg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/650", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/650/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/650/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/650/events", "html_url": "https://github.com/jschneier/django-storages/issues/650", "id": 399843466, "node_id": "MDU6SXNzdWUzOTk4NDM0NjY=", "number": 650, "title": "Google Cloud only for one field?", "user": {"login": "aztrock", "id": 4043932, "node_id": "MDQ6VXNlcjQwNDM5MzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4043932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aztrock", "html_url": "https://github.com/aztrock", "followers_url": "https://api.github.com/users/aztrock/followers", "following_url": "https://api.github.com/users/aztrock/following{/other_user}", "gists_url": "https://api.github.com/users/aztrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/aztrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aztrock/subscriptions", "organizations_url": "https://api.github.com/users/aztrock/orgs", "repos_url": "https://api.github.com/users/aztrock/repos", "events_url": "https://api.github.com/users/aztrock/events{/privacy}", "received_events_url": "https://api.github.com/users/aztrock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-16T14:50:10Z", "updated_at": "2019-01-16T15:16:56Z", "closed_at": "2019-01-16T15:16:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "is it possible to define single FileField google storage?\r\nfor example\r\n\r\n```\r\n    img = models.ImageField(\r\n        upload_to=\"img/%y/%m/\",\r\n        blank=True,\r\n        null=True,\r\n        storage='storages.backends.gcloud.Storage'\r\n    )\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/647", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/647/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/647/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/647/events", "html_url": "https://github.com/jschneier/django-storages/issues/647", "id": 398066047, "node_id": "MDU6SXNzdWUzOTgwNjYwNDc=", "number": 647, "title": "Using Javascript to upload to Google Cloud Storage", "user": {"login": "log-wood", "id": 36985519, "node_id": "MDQ6VXNlcjM2OTg1NTE5", "avatar_url": "https://avatars2.githubusercontent.com/u/36985519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/log-wood", "html_url": "https://github.com/log-wood", "followers_url": "https://api.github.com/users/log-wood/followers", "following_url": "https://api.github.com/users/log-wood/following{/other_user}", "gists_url": "https://api.github.com/users/log-wood/gists{/gist_id}", "starred_url": "https://api.github.com/users/log-wood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/log-wood/subscriptions", "organizations_url": "https://api.github.com/users/log-wood/orgs", "repos_url": "https://api.github.com/users/log-wood/repos", "events_url": "https://api.github.com/users/log-wood/events{/privacy}", "received_events_url": "https://api.github.com/users/log-wood/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 619992670, "node_id": "MDU6TGFiZWw2MTk5OTI2NzA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/google", "name": "google", "color": "d93f0b", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-10T23:44:17Z", "updated_at": "2019-01-24T10:13:53Z", "closed_at": "2019-01-11T23:03:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using django-storages as my default file storage. I have a script that uploads videos directly from the client to google cloud storage. Is there any way to associate this file to a FileField without downloading and reuploading the file. Thank you for any help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/644", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/644/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/644/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/644/events", "html_url": "https://github.com/jschneier/django-storages/issues/644", "id": 394388705, "node_id": "MDU6SXNzdWUzOTQzODg3MDU=", "number": 644, "title": "Suddenly cannot see my attachments anymore [Google Cloud Storage]", "user": {"login": "iwalucas", "id": 3654783, "node_id": "MDQ6VXNlcjM2NTQ3ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3654783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iwalucas", "html_url": "https://github.com/iwalucas", "followers_url": "https://api.github.com/users/iwalucas/followers", "following_url": "https://api.github.com/users/iwalucas/following{/other_user}", "gists_url": "https://api.github.com/users/iwalucas/gists{/gist_id}", "starred_url": "https://api.github.com/users/iwalucas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iwalucas/subscriptions", "organizations_url": "https://api.github.com/users/iwalucas/orgs", "repos_url": "https://api.github.com/users/iwalucas/repos", "events_url": "https://api.github.com/users/iwalucas/events{/privacy}", "received_events_url": "https://api.github.com/users/iwalucas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 155591935, "node_id": "MDU6TGFiZWwxNTU1OTE5MzU=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 619992670, "node_id": "MDU6TGFiZWw2MTk5OTI2NzA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/google", "name": "google", "color": "d93f0b", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-27T12:59:37Z", "updated_at": "2019-01-20T03:37:10Z", "closed_at": "2019-01-20T03:37:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am using the django-storage with google buckets for a time now. A few days ago I noticed it started not showing me the links to download the attachments anymore. I can upload, and see it on google storage, but not through my django application, its like I havent even uploaded it.\r\n\r\nI am on Google App Engine - Standard env.\r\n\r\nAny idea on why this is happening?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/643", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/643/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/643/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/643/events", "html_url": "https://github.com/jschneier/django-storages/issues/643", "id": 393265814, "node_id": "MDU6SXNzdWUzOTMyNjU4MTQ=", "number": 643, "title": "custom domain for azure", "user": {"login": "danielpomas", "id": 42745795, "node_id": "MDQ6VXNlcjQyNzQ1Nzk1", "avatar_url": "https://avatars1.githubusercontent.com/u/42745795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielpomas", "html_url": "https://github.com/danielpomas", "followers_url": "https://api.github.com/users/danielpomas/followers", "following_url": "https://api.github.com/users/danielpomas/following{/other_user}", "gists_url": "https://api.github.com/users/danielpomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielpomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielpomas/subscriptions", "organizations_url": "https://api.github.com/users/danielpomas/orgs", "repos_url": "https://api.github.com/users/danielpomas/repos", "events_url": "https://api.github.com/users/danielpomas/events{/privacy}", "received_events_url": "https://api.github.com/users/danielpomas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 619992512, "node_id": "MDU6TGFiZWw2MTk5OTI1MTI=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/azure", "name": "azure", "color": "1d76db", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-21T00:42:03Z", "updated_at": "2019-09-09T05:09:16Z", "closed_at": "2019-09-09T05:09:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looking at the sdk it does look like the functionality does exist to be able to provide a custom domain but I don't see it in Django-Storages.\r\n\r\nReason why I need this is I have a site where I have a download link to some audio files that are stored on azure but browsers don't automatically download something that is not on the same domain\r\n\r\nAm I missing something or is it not available?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/642", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/642/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/642/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/642/events", "html_url": "https://github.com/jschneier/django-storages/issues/642", "id": 393180197, "node_id": "MDU6SXNzdWUzOTMxODAxOTc=", "number": 642, "title": "issue auto creating a bucket that previously existed?", "user": {"login": "tisdall", "id": 4029388, "node_id": "MDQ6VXNlcjQwMjkzODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4029388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tisdall", "html_url": "https://github.com/tisdall", "followers_url": "https://api.github.com/users/tisdall/followers", "following_url": "https://api.github.com/users/tisdall/following{/other_user}", "gists_url": "https://api.github.com/users/tisdall/gists{/gist_id}", "starred_url": "https://api.github.com/users/tisdall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tisdall/subscriptions", "organizations_url": "https://api.github.com/users/tisdall/orgs", "repos_url": "https://api.github.com/users/tisdall/repos", "events_url": "https://api.github.com/users/tisdall/events{/privacy}", "received_events_url": "https://api.github.com/users/tisdall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161076983, "node_id": "MDU6TGFiZWwxNjEwNzY5ODM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/s3boto", "name": "s3boto", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-20T19:24:46Z", "updated_at": "2020-02-02T23:49:58Z", "closed_at": "2020-02-02T23:49:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I set `AWS_DEFAULT_ACL` to `None` as recommended and am trying to figure out how to set the default ACL on the bucket to 'public-read'.  I can't seem to figure it out in the UI so I tried having django-storages make the bucket for me by setting `AWS_AUTO_CREATE_BUCKET = True` and `AWS_BUCKET_ACL = 'public-read'`.  Instead of success I got a \"bad request\" error.\r\n\r\nI tried again by changing the bucket name slightly and then it worked...  Is it not possible to recreate a deleted bucket through the API?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/640", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/640/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/640/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/640/events", "html_url": "https://github.com/jschneier/django-storages/issues/640", "id": 392981131, "node_id": "MDU6SXNzdWUzOTI5ODExMzE=", "number": 640, "title": "GoogleCloud Storage not respecting ACL setting when using default_storage class Django", "user": {"login": "mj8894", "id": 13601088, "node_id": "MDQ6VXNlcjEzNjAxMDg4", "avatar_url": "https://avatars3.githubusercontent.com/u/13601088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj8894", "html_url": "https://github.com/mj8894", "followers_url": "https://api.github.com/users/mj8894/followers", "following_url": "https://api.github.com/users/mj8894/following{/other_user}", "gists_url": "https://api.github.com/users/mj8894/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj8894/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj8894/subscriptions", "organizations_url": "https://api.github.com/users/mj8894/orgs", "repos_url": "https://api.github.com/users/mj8894/repos", "events_url": "https://api.github.com/users/mj8894/events{/privacy}", "received_events_url": "https://api.github.com/users/mj8894/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 155591935, "node_id": "MDU6TGFiZWwxNTU1OTE5MzU=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 619992670, "node_id": "MDU6TGFiZWw2MTk5OTI2NzA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/google", "name": "google", "color": "d93f0b", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-20T10:27:17Z", "updated_at": "2019-09-10T07:35:15Z", "closed_at": "2019-09-10T07:35:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using default_storage class to write a file to google bucket, it is created as projectPrivate even if the acl setting is publicRead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/638", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/638/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/638/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/638/events", "html_url": "https://github.com/jschneier/django-storages/issues/638", "id": 392847743, "node_id": "MDU6SXNzdWUzOTI4NDc3NDM=", "number": 638, "title": "AWS_DEFAULT_ACL will be 'private' if set to None", "user": {"login": "kokinomura", "id": 5786672, "node_id": "MDQ6VXNlcjU3ODY2NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5786672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kokinomura", "html_url": "https://github.com/kokinomura", "followers_url": "https://api.github.com/users/kokinomura/followers", "following_url": "https://api.github.com/users/kokinomura/following{/other_user}", "gists_url": "https://api.github.com/users/kokinomura/gists{/gist_id}", "starred_url": "https://api.github.com/users/kokinomura/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kokinomura/subscriptions", "organizations_url": "https://api.github.com/users/kokinomura/orgs", "repos_url": "https://api.github.com/users/kokinomura/repos", "events_url": "https://api.github.com/users/kokinomura/events{/privacy}", "received_events_url": "https://api.github.com/users/kokinomura/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161076983, "node_id": "MDU6TGFiZWwxNjEwNzY5ODM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/s3boto", "name": "s3boto", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-20T01:23:28Z", "updated_at": "2019-09-08T17:59:37Z", "closed_at": "2019-09-08T17:59:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Document](https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html?highlight=aws_default_acl) says \"If set to None then all files will inherit the bucket\u2019s ACL.\", but objects' ACL are set to 'private'. \r\n\r\nAs far as I know, django-storages has no code to inherit the bucket's ACL and the default ACL of S3 is 'private'.\r\nhttps://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/637", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/637/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/637/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/637/events", "html_url": "https://github.com/jschneier/django-storages/issues/637", "id": 392362147, "node_id": "MDU6SXNzdWUzOTIzNjIxNDc=", "number": 637, "title": "boto3 settings can't be configured when using django-storages settings", "user": {"login": "danielsailes", "id": 3973944, "node_id": "MDQ6VXNlcjM5NzM5NDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3973944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielsailes", "html_url": "https://github.com/danielsailes", "followers_url": "https://api.github.com/users/danielsailes/followers", "following_url": "https://api.github.com/users/danielsailes/following{/other_user}", "gists_url": "https://api.github.com/users/danielsailes/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielsailes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielsailes/subscriptions", "organizations_url": "https://api.github.com/users/danielsailes/orgs", "repos_url": "https://api.github.com/users/danielsailes/repos", "events_url": "https://api.github.com/users/danielsailes/events{/privacy}", "received_events_url": "https://api.github.com/users/danielsailes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 161076983, "node_id": "MDU6TGFiZWwxNjEwNzY5ODM=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/s3boto", "name": "s3boto", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-18T22:26:51Z", "updated_at": "2019-09-11T06:58:19Z", "closed_at": "2019-09-11T06:58:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nRecently had an issue where i had to rebuild my local environment. in doing so, for some reason django-storages and boto3 aren't working anymore. Any ideas as to why?\r\n\r\n(I had custom locations for the Media and Static following these instructions: https://www.caktusgroup.com/blog/2014/11/10/Using-Amazon-S3-to-store-your-Django-sites-static-and-media-files/ - yet i can't find any documentation to find out why these may or may not work any more)\r\n\r\n```\r\nAWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com:443' % AWS_STORAGE_BUCKET_NAME\r\n\r\n\r\nAWS_S3_OBJECT_PARAMETERS = {  # see http://developer.yahoo.com/performance/rules.html#expires\r\n    'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',\r\n    'Cache-Control': 'max-age=94608000',\r\n}\r\n\r\nMEDIAFILES_LOCATION = 'media'\r\nMEDIA_URL = \"https://%s/%s/\" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)\r\nDEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\r\n\r\nSTATICFILES_LOCATION = 'static'\r\nSTATIC_URL = \"https://%s/%s/\" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)\r\nSTATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\r\n```\r\n\r\n\r\ngetting out this error consistently and not sure why. Am i missing some kind of dependency to work with these plugins?\r\n\r\n```  File \"/Users/daniel/Library/Python/2.7/lib/python/site-packages/storages/backends/s3boto3.py\", line 22, in <module>\r\n    raise ImproperlyConfigured(\"Could not load Boto3's S3 bindings.\\n\"\r\ndjango.core.exceptions.ImproperlyConfigured: Could not load Boto3's S3 bindings.\r\nSee https://github.com/boto/boto3```\r\n\r\nAny help appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/635", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/635/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/635/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/635/events", "html_url": "https://github.com/jschneier/django-storages/issues/635", "id": 391103889, "node_id": "MDU6SXNzdWUzOTExMDM4ODk=", "number": 635, "title": "GCP and NamedTemporaryFile: file-like object only had 0 bytes remaining.", "user": {"login": "elnygren", "id": 6632349, "node_id": "MDQ6VXNlcjY2MzIzNDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6632349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elnygren", "html_url": "https://github.com/elnygren", "followers_url": "https://api.github.com/users/elnygren/followers", "following_url": "https://api.github.com/users/elnygren/following{/other_user}", "gists_url": "https://api.github.com/users/elnygren/gists{/gist_id}", "starred_url": "https://api.github.com/users/elnygren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elnygren/subscriptions", "organizations_url": "https://api.github.com/users/elnygren/orgs", "repos_url": "https://api.github.com/users/elnygren/repos", "events_url": "https://api.github.com/users/elnygren/events{/privacy}", "received_events_url": "https://api.github.com/users/elnygren/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-14T13:06:22Z", "updated_at": "2018-12-14T14:03:57Z", "closed_at": "2018-12-14T14:03:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python3\r\nimport tempfile\r\nimport requests\r\nfrom django.core import files\r\n\r\ndef process_image(url):\r\n    \"\"\"Process a single image.\"\"\"\r\n    r = requests.get(url, stream=True)\r\n    file_name = url.split('/')[-1]\r\n    \r\n    # read response stream into lf\r\n    lf = tempfile.NamedTemporaryFile()\r\n    for block in r.iter_content(1024 * 8):\r\n        if not block:\r\n            break\r\n        lf.write(block)\r\n    lf.flush()\r\n\r\n    # save to google cloud\r\n    media_image = BrandMediaImage()\r\n    media_image.image.save(file_name, files.File(lf), save=False) # error here\r\n    media_image.save()\r\n```\r\n\r\nError:\r\n\r\n```\r\n  File \"/app/apps/jobs/management/commands/mycommand.py\", line 89, in process_image\r\n    media_image.image.save(file_name, files.File(lf), save=False)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/models/fields/files.py\", line 87, in save\r\n    self.name = self.storage.save(name, content, max_length=self.field.max_length)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/files/storage.py\", line 49, in save\r\n    return self._save(name, content)\r\n  File \"/usr/local/lib/python3.6/site-packages/storages/backends/gcloud.py\", line 167, in _save\r\n    content_type=file.mime_type)\r\n  File \"/usr/local/lib/python3.6/site-packages/google/cloud/storage/blob.py\", line 975, in upload_from_file\r\n    size, num_retries, predefined_acl)\r\n  File \"/usr/local/lib/python3.6/site-packages/google/cloud/storage/blob.py\", line 888, in _do_upload\r\n    size, num_retries, predefined_acl)\r\n  File \"/usr/local/lib/python3.6/site-packages/google/cloud/storage/blob.py\", line 683, in _do_multipart_upload\r\n    raise ValueError(msg)\r\nValueError: Size 37319 was specified but the file-like object only had 0 bytes remaining.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/633", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/633/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/633/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/633/events", "html_url": "https://github.com/jschneier/django-storages/issues/633", "id": 389890776, "node_id": "MDU6SXNzdWUzODk4OTA3NzY=", "number": 633, "title": "S3Boto3Storage: Getting rid of orphaned files when not overwriting", "user": {"login": "sushifan", "id": 13437904, "node_id": "MDQ6VXNlcjEzNDM3OTA0", "avatar_url": "https://avatars3.githubusercontent.com/u/13437904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sushifan", "html_url": "https://github.com/sushifan", "followers_url": "https://api.github.com/users/sushifan/followers", "following_url": "https://api.github.com/users/sushifan/following{/other_user}", "gists_url": "https://api.github.com/users/sushifan/gists{/gist_id}", "starred_url": "https://api.github.com/users/sushifan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sushifan/subscriptions", "organizations_url": "https://api.github.com/users/sushifan/orgs", "repos_url": "https://api.github.com/users/sushifan/repos", "events_url": "https://api.github.com/users/sushifan/events{/privacy}", "received_events_url": "https://api.github.com/users/sushifan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-11T18:15:31Z", "updated_at": "2019-03-27T03:32:21Z", "closed_at": "2019-03-27T03:32:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Has anyone come up with a good solution (when AWS_S3_FILE_OVERWRITE = False) to automatically get rid of the otherwise orphaned previous files?  I like the random char appending feature (this way the client knows when a file has changed), but can't afford to have my S3 bucket full of old, unused images.  Thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/629", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/629/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/629/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/629/events", "html_url": "https://github.com/jschneier/django-storages/issues/629", "id": 377958420, "node_id": "MDU6SXNzdWUzNzc5NTg0MjA=", "number": 629, "title": "AWS_S3_MAX_MEMORY_SIZE unit document wanted", "user": {"login": "phuctm97", "id": 25026967, "node_id": "MDQ6VXNlcjI1MDI2OTY3", "avatar_url": "https://avatars2.githubusercontent.com/u/25026967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phuctm97", "html_url": "https://github.com/phuctm97", "followers_url": "https://api.github.com/users/phuctm97/followers", "following_url": "https://api.github.com/users/phuctm97/following{/other_user}", "gists_url": "https://api.github.com/users/phuctm97/gists{/gist_id}", "starred_url": "https://api.github.com/users/phuctm97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phuctm97/subscriptions", "organizations_url": "https://api.github.com/users/phuctm97/orgs", "repos_url": "https://api.github.com/users/phuctm97/repos", "events_url": "https://api.github.com/users/phuctm97/events{/privacy}", "received_events_url": "https://api.github.com/users/phuctm97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-06T17:38:44Z", "updated_at": "2018-11-28T02:36:05Z", "closed_at": "2018-11-28T02:36:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "AWS_S3_MAX_MEMORY_SIZE value uses which storage unit?\r\n\r\nTo set 2.5MB:\r\nAWS_S3_MAX_MEMORY_SIZE = 2000000\r\nAWS_S3_MAX_MEMORY_SIZE = '2.5M'\r\n\r\nPlease document this. Thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/628", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/628/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/628/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/628/events", "html_url": "https://github.com/jschneier/django-storages/issues/628", "id": 377197897, "node_id": "MDU6SXNzdWUzNzcxOTc4OTc=", "number": 628, "title": "Adding handling of media files to the documentation", "user": {"login": "kasperj93", "id": 23654707, "node_id": "MDQ6VXNlcjIzNjU0NzA3", "avatar_url": "https://avatars2.githubusercontent.com/u/23654707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kasperj93", "html_url": "https://github.com/kasperj93", "followers_url": "https://api.github.com/users/kasperj93/followers", "following_url": "https://api.github.com/users/kasperj93/following{/other_user}", "gists_url": "https://api.github.com/users/kasperj93/gists{/gist_id}", "starred_url": "https://api.github.com/users/kasperj93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kasperj93/subscriptions", "organizations_url": "https://api.github.com/users/kasperj93/orgs", "repos_url": "https://api.github.com/users/kasperj93/repos", "events_url": "https://api.github.com/users/kasperj93/events{/privacy}", "received_events_url": "https://api.github.com/users/kasperj93/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-11-04T21:41:52Z", "updated_at": "2019-01-11T18:42:14Z", "closed_at": "2019-01-11T18:42:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to add documentation to the handling of media files?\r\n\r\nIt would have been really helpful in my case:\r\n\r\nFrom @elnygren 's post on stackoverflow: https://stackoverflow.com/questions/34247702/configure-django-and-google-cloud-storage \r\nand answer to https://github.com/jschneier/django-storages/issues/491\r\nI struggled a lot with handling media files between a django website on an appengine and static files in google cloud storage (both static markup files and media files). After a long try, I finally managed to succeed with the following settings.\r\n\r\nCredit to @elnygren!\r\nIn my settings.py I include the following:\r\n```\r\nDEFAULT_FILE_STORAGE = 'config.storage_backends.GoogleCloudMediaStorage'\r\nSTATICFILES_STORAGE = 'config.storage_backends.GoogleCloudStaticStorage'\r\nGS_PROJECT_ID = '<project-id>'\r\nGS_MEDIA_BUCKET_NAME = '<media-bucket-name>'\r\nGS_STATIC_BUCKET_NAME = '<static-bucket-name>'\r\nSTATIC_URL = 'https://storage.googleapis.com/{}/'.format(GS_STATIC_BUCKET_NAME)\r\nMEDIA_URL = 'https://storage.googleapis.com/{}/'.format(GS_MEDIA_BUCKET_NAME)\r\nGS_DEFAULT_ACL = 'private'  # makes the files to private\r\n```\r\n\r\nCredit to @elnygren!\r\nCreating a folder in the root directoy named 'config' I inserted the following 'storage_backends.py' file:\r\n  ```\r\n  \"\"\"\r\n    GoogleCloudStorage extensions suitable for handing Django's\r\n    Static and Media files.\r\n\r\n    Requires following settings:\r\n    MEDIA_URL, GS_MEDIA_BUCKET_NAME\r\n    STATIC_URL, GS_STATIC_BUCKET_NAME\r\n\r\n    In addition to\r\n    https://django-storages.readthedocs.io/en/latest/backends/gcloud.html\r\n    \"\"\"\r\n    from django.conf import settings\r\n    from storages.backends.gcloud import GoogleCloudStorage\r\n    from storages.utils import setting\r\n    from urllib.parse import urljoin\r\n\r\n\r\n    class GoogleCloudMediaStorage(GoogleCloudStorage):\r\n        \"\"\"GoogleCloudStorage suitable for Django's Media files.\"\"\"\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            if not settings.MEDIA_URL:\r\n                raise Exception('MEDIA_URL has not been configured')\r\n            kwargs['bucket_name'] = setting('GS_MEDIA_BUCKET_NAME', strict=True)\r\n            super(GoogleCloudMediaStorage, self).__init__(*args, **kwargs)\r\n\r\n        def url(self, name):\r\n            \"\"\".url that doesn't call Google.\"\"\"\r\n            return urljoin(settings.MEDIA_URL, name)\r\n\r\n\r\n    class GoogleCloudStaticStorage(GoogleCloudStorage):\r\n        \"\"\"GoogleCloudStorage suitable for Django's Static files\"\"\"\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            if not settings.STATIC_URL:\r\n                raise Exception('STATIC_URL has not been configured')\r\n```\r\n\r\nApp engine already instantiate GOOGLE_APPLICATION_CREDENTIALS so for development, I added: \r\n`os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/path/to/service_account.json\"`\r\nin my \"dev settings\"\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/622", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/622/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/622/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/622/events", "html_url": "https://github.com/jschneier/django-storages/issues/622", "id": 373882129, "node_id": "MDU6SXNzdWUzNzM4ODIxMjk=", "number": 622, "title": "pre-signed url from s3boto3.storage.url is not working", "user": {"login": "charlesverdad", "id": 382186, "node_id": "MDQ6VXNlcjM4MjE4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/382186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlesverdad", "html_url": "https://github.com/charlesverdad", "followers_url": "https://api.github.com/users/charlesverdad/followers", "following_url": "https://api.github.com/users/charlesverdad/following{/other_user}", "gists_url": "https://api.github.com/users/charlesverdad/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlesverdad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlesverdad/subscriptions", "organizations_url": "https://api.github.com/users/charlesverdad/orgs", "repos_url": "https://api.github.com/users/charlesverdad/repos", "events_url": "https://api.github.com/users/charlesverdad/events{/privacy}", "received_events_url": "https://api.github.com/users/charlesverdad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-25T10:36:42Z", "updated_at": "2018-10-26T16:04:57Z", "closed_at": "2018-10-26T16:04:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following code:\r\n\r\n```py\r\nclass PrivateAssetStorage(S3Boto3Storage):\r\n    location = settings.AWS_PRIVATE_ASSET_LOCATION\r\n    default_acl = 'private'\r\n    file_overwrite = False\r\n\r\nclass Document(models.Model):\r\n    ...\r\n    upload = models.FileField(storage=PublicMediaStorage())\r\n```\r\n\r\nThe file upload works. But when trying to get the document's url, I end up with:\r\n\r\n```py\r\n>>> d = Document.objects.last()\r\n>>> d.upload.url\r\n'https://mywebsite-assets.sgp1.digitaloceanspaces.com/development/media/private/blah.txt'\r\n>>> d.upload.storage.url(d.upload.name)\r\n'https://mywebsite-assets.sgp1.digitaloceanspaces.com/development/media/private/blah.txt'\r\n```\r\n\r\nBut I am expecting a presigned url that can access private files (and also expires).\r\nI can generate one using:\r\n\r\n```py\r\n>>> d.upload.storage.bucket.meta.client.generate_presigned_url('get_object', Params={'Bucket': 'mywebsite-assets', 'Key': 'development/test/blah.txt'})\r\n'https://sgp1.digitaloceanspaces.com/mywebsite-assets/development/test/blah.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=HCAMV7YxxxZKD4EFEDWK%2F20181025%2Fsgp1%2Fs3%2Faws4_request&X-Amz-Date=20181025T101729Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=509539b8f412d1ddd3f056e69cba5274d2aaad7db6bccb3dc04de6c821bef00f'\r\n```\r\n\r\nI think the problem is with the `generate_presigned_url` call in `s3boto3.storage.url`. It only passes the file name to the \"Key\" parameter; without the location.\r\n\r\n`storages/backends/s3boto3.py`:\r\n\r\n```py\r\n        params['Bucket'] = self.bucket.name\r\n        params['Key'] = self._encode_name(name)\r\n        url = self.bucket.meta.client.generate_presigned_url('get_object', Params=params,\r\n                                                             ExpiresIn=expire)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/621", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/621/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/621/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/621/events", "html_url": "https://github.com/jschneier/django-storages/issues/621", "id": 373544717, "node_id": "MDU6SXNzdWUzNzM1NDQ3MTc=", "number": 621, "title": "django-storage with dropbox breaks browser cache", "user": {"login": "JoabMendes", "id": 829669, "node_id": "MDQ6VXNlcjgyOTY2OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/829669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoabMendes", "html_url": "https://github.com/JoabMendes", "followers_url": "https://api.github.com/users/JoabMendes/followers", "following_url": "https://api.github.com/users/JoabMendes/following{/other_user}", "gists_url": "https://api.github.com/users/JoabMendes/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoabMendes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoabMendes/subscriptions", "organizations_url": "https://api.github.com/users/JoabMendes/orgs", "repos_url": "https://api.github.com/users/JoabMendes/repos", "events_url": "https://api.github.com/users/JoabMendes/events{/privacy}", "received_events_url": "https://api.github.com/users/JoabMendes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 155591935, "node_id": "MDU6TGFiZWwxNTU1OTE5MzU=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 619992760, "node_id": "MDU6TGFiZWw2MTk5OTI3NjA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/dropbox", "name": "dropbox", "color": "0052cc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-24T15:33:05Z", "updated_at": "2018-10-25T13:56:26Z", "closed_at": "2018-10-25T13:56:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm facing the same issue decribed [here](https://stackoverflow.com/questions/15668443/django-storage-with-s3-boto-break-browser-cache) but instead of amazon storage, I'm using the dropbox option. The current configuration works for a while with my cache configuration (cache_page), but after a while all the media files return 404 till I clear the cache again.\r\n\r\nIs there any specific configuration for Dropbox or using `AWS_QUERYSTRING_AUTH = False` will also work?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/620", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/620/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/620/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/620/events", "html_url": "https://github.com/jschneier/django-storages/issues/620", "id": 373421394, "node_id": "MDU6SXNzdWUzNzM0MjEzOTQ=", "number": 620, "title": "AttributeError in DropboxFile", "user": {"login": "MichaelPak", "id": 1166992, "node_id": "MDQ6VXNlcjExNjY5OTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1166992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelPak", "html_url": "https://github.com/MichaelPak", "followers_url": "https://api.github.com/users/MichaelPak/followers", "following_url": "https://api.github.com/users/MichaelPak/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelPak/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelPak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelPak/subscriptions", "organizations_url": "https://api.github.com/users/MichaelPak/orgs", "repos_url": "https://api.github.com/users/MichaelPak/repos", "events_url": "https://api.github.com/users/MichaelPak/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelPak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 155591935, "node_id": "MDU6TGFiZWwxNTU1OTE5MzU=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 619992760, "node_id": "MDU6TGFiZWw2MTk5OTI3NjA=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/dropbox", "name": "dropbox", "color": "0052cc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-24T10:49:41Z", "updated_at": "2019-07-15T06:05:03Z", "closed_at": "2019-07-15T06:05:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "`Version 1.7.1`\r\n\r\nTrying to get bytes from `DropboxFile`. It has property `file`:\r\n```python\r\n@property\r\ndef file(self):\r\n    if not hasattr(self, '_file'):\r\n        response = self._storage.client.files_download(self.name)\r\n        self._file = SpooledTemporaryFile()\r\n        copyfileobj(response, self._file)\r\n        self._file.seek(0)\r\n    return self._file\r\n```\r\nBut `response` is a tuple of objects `Response` and` FileMetadata`, so I'm getting next error:\r\n```\r\n  File \"/.../myapp/mailing.py\", line 50, in distribute\r\n    part.set_payload(offer_file.file.read())\r\n  File \"/.../python3.6/site-packages/django/core/files/utils.py\", line 16, in <lambda>\r\n    read = property(lambda self: self.file.read)\r\n  File \"/.../python3.6/site-packages/django/core/files/utils.py\", line 16, in <lambda>\r\n    read = property(lambda self: self.file.read)\r\n  File \"/.../python3.6/site-packages/storages/backends/dropbox.py\", line 45, in file\r\n    copyfileobj(response, self._file)\r\n  File \"/.../python3.6/shutil.py\", line 79, in copyfileobj\r\n    buf = fsrc.read(length)\r\nAttributeError: 'tuple' object has no attribute 'read'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/617", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/617/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/617/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/617/events", "html_url": "https://github.com/jschneier/django-storages/issues/617", "id": 370841318, "node_id": "MDU6SXNzdWUzNzA4NDEzMTg=", "number": 617, "title": "Help wanted: Use dropbox storage with my django admin.", "user": {"login": "JoabMendes", "id": 829669, "node_id": "MDQ6VXNlcjgyOTY2OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/829669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoabMendes", "html_url": "https://github.com/JoabMendes", "followers_url": "https://api.github.com/users/JoabMendes/followers", "following_url": "https://api.github.com/users/JoabMendes/following{/other_user}", "gists_url": "https://api.github.com/users/JoabMendes/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoabMendes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoabMendes/subscriptions", "organizations_url": "https://api.github.com/users/JoabMendes/orgs", "repos_url": "https://api.github.com/users/JoabMendes/repos", "events_url": "https://api.github.com/users/JoabMendes/events{/privacy}", "received_events_url": "https://api.github.com/users/JoabMendes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-16T23:37:49Z", "updated_at": "2019-05-13T12:28:57Z", "closed_at": "2018-10-17T00:31:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I followed the docs for [dropbox storage](https://django-storages.readthedocs.io/en/latest/backends/dropbox.html#settings) with the following config:\r\n\r\nMy current settings.py file has:\r\n\r\n```py\r\n# Dropbox media file storage\r\n\r\nDEFAULT_FILE_STORAGE = 'storages.backends.dropbox.DropBoxStorage'\r\nDROPBOX_OAUTH2_TOKEN = '<my_access_key>'\r\nDROPBOX_ROOT_PATH = 'ygks_media_files' # Folder I defined on my dropbox app\r\n```\r\n\r\nI kept the old configuration for media files I had before, that are:\r\n\r\n```py\r\n# settings.py\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\").replace('\\\\', '/')\r\n```\r\n\r\n```py\r\n# urls.py\r\nurlpatterns = [# ... my urls\r\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n```\r\n\r\nAnd the models classes I have, that need file upload are set like:\r\n\r\n```\r\n    photo = models.FileField(\r\n        storage=FileSystemStorage(location=settings.MEDIA_ROOT),\r\n        upload_to='member_photo',\r\n        blank=False,\r\n        null=False,\r\n        default='',\r\n        verbose_name='Banner image (1800\u2006x\u20061200)'\r\n    )\r\n```\r\nI deployed those settings (I'm using heroku) and after creating an instance of that model, the file wasn't in the dropbox or anything after.\r\n\r\nIs there any configuration I have to set up on my models or settings to make this package work with the default django admin site? Should I change the `FileSystemStorage` class to something else?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jschneier/django-storages/issues/614", "repository_url": "https://api.github.com/repos/jschneier/django-storages", "labels_url": "https://api.github.com/repos/jschneier/django-storages/issues/614/labels{/name}", "comments_url": "https://api.github.com/repos/jschneier/django-storages/issues/614/comments", "events_url": "https://api.github.com/repos/jschneier/django-storages/issues/614/events", "html_url": "https://github.com/jschneier/django-storages/issues/614", "id": 368597080, "node_id": "MDU6SXNzdWUzNjg1OTcwODA=", "number": 614, "title": "Is support for WebDAV on the roadmap?", "user": {"login": "LaundroMat", "id": 42320, "node_id": "MDQ6VXNlcjQyMzIw", "avatar_url": "https://avatars1.githubusercontent.com/u/42320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaundroMat", "html_url": "https://github.com/LaundroMat", "followers_url": "https://api.github.com/users/LaundroMat/followers", "following_url": "https://api.github.com/users/LaundroMat/following{/other_user}", "gists_url": "https://api.github.com/users/LaundroMat/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaundroMat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaundroMat/subscriptions", "organizations_url": "https://api.github.com/users/LaundroMat/orgs", "repos_url": "https://api.github.com/users/LaundroMat/repos", "events_url": "https://api.github.com/users/LaundroMat/events{/privacy}", "received_events_url": "https://api.github.com/users/LaundroMat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 954622394, "node_id": "MDU6TGFiZWw5NTQ2MjIzOTQ=", "url": "https://api.github.com/repos/jschneier/django-storages/labels/feature%20request", "name": "feature request", "color": "4d099b", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-10T10:23:27Z", "updated_at": "2018-10-12T09:45:45Z", "closed_at": "2018-10-12T09:44:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that the packages that allow Django to store static files on a WebDAV server are no longer maintained. (See https://github.com/sirmmo/django-webdav and https://github.com/marazmiki/django-webdav-storage)\r\n\r\nIs support for WebDAV on the roadmap  of django-storages?", "performed_via_github_app": null, "score": 1.0}]}