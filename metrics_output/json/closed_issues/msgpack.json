{"total_count": 207, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/435", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/435/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/435/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/435", "id": 664852572, "node_id": "MDU6SXNzdWU2NjQ4NTI1NzI=", "number": 435, "title": "Cython Packer requires datetime tzinfo, Python fallback does not", "user": {"login": "paolieri", "id": 1083642, "node_id": "MDQ6VXNlcjEwODM2NDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1083642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paolieri", "html_url": "https://github.com/paolieri", "followers_url": "https://api.github.com/users/paolieri/followers", "following_url": "https://api.github.com/users/paolieri/following{/other_user}", "gists_url": "https://api.github.com/users/paolieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/paolieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paolieri/subscriptions", "organizations_url": "https://api.github.com/users/paolieri/orgs", "repos_url": "https://api.github.com/users/paolieri/repos", "events_url": "https://api.github.com/users/paolieri/events{/privacy}", "received_events_url": "https://api.github.com/users/paolieri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-24T00:59:16Z", "updated_at": "2020-07-24T07:47:13Z", "closed_at": "2020-07-24T07:29:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "With msgpack 1.0.0, this works:\r\n\r\n```\r\nimport msgpack\r\nfrom msgpack.fallback import Packer\r\nimport datetime\r\n\r\ndt = datetime.datetime(2020, 7, 24, 0, 37, 28, 190432,\r\n                       tzinfo=datetime.timezone.utc)\r\n\r\npacked = Packer(datetime=True).pack(dt)\r\nprint(msgpack.unpackb(packed, timestamp=3))\r\n\r\npacked = msgpack.Packer(datetime=True).pack(dt)\r\nprint(msgpack.unpackb(packed, timestamp=3))\r\n```\r\n\r\nBut, without tzinfo, the Cython version fails:\r\n\r\n```\r\nimport msgpack\r\nfrom msgpack.fallback import Packer\r\nimport datetime\r\n\r\ndt = datetime.datetime(2020, 7, 24, 0, 37, 28, 190432)\r\n\r\npacked = Packer(datetime=True).pack(dt)\r\nprint(msgpack.unpackb(packed, timestamp=3))\r\n\r\npacked = msgpack.Packer(datetime=True).pack(dt)\r\nprint(msgpack.unpackb(packed, timestamp=3))\r\n```\r\n\r\n```\r\n2020-07-24 07:37:28.190432+00:00\r\nTraceback (most recent call last):\r\n  File \"test_msgpack.py\", line 10, in <module>\r\n    packed = msgpack.Packer(datetime=True).pack(dt)\r\n  File \"msgpack/_packer.pyx\", line 286, in msgpack._cmsgpack.Packer.pack\r\n  File \"msgpack/_packer.pyx\", line 292, in msgpack._cmsgpack.Packer.pack\r\n  File \"msgpack/_packer.pyx\", line 289, in msgpack._cmsgpack.Packer.pack\r\n  File \"msgpack/_packer.pyx\", line 283, in msgpack._cmsgpack.Packer._pack\r\nTypeError: can not serialize 'datetime.datetime' object\r\n```\r\n\r\nShould we make the Python fallback implementation stricter? I can create a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/431", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/431/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/431/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/431", "id": 659247507, "node_id": "MDU6SXNzdWU2NTkyNDc1MDc=", "number": 431, "title": "Cannot serialize the object of class", "user": {"login": "AtticusYang", "id": 6511712, "node_id": "MDQ6VXNlcjY1MTE3MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6511712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AtticusYang", "html_url": "https://github.com/AtticusYang", "followers_url": "https://api.github.com/users/AtticusYang/followers", "following_url": "https://api.github.com/users/AtticusYang/following{/other_user}", "gists_url": "https://api.github.com/users/AtticusYang/gists{/gist_id}", "starred_url": "https://api.github.com/users/AtticusYang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AtticusYang/subscriptions", "organizations_url": "https://api.github.com/users/AtticusYang/orgs", "repos_url": "https://api.github.com/users/AtticusYang/repos", "events_url": "https://api.github.com/users/AtticusYang/events{/privacy}", "received_events_url": "https://api.github.com/users/AtticusYang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-17T13:13:57Z", "updated_at": "2020-07-21T09:08:19Z", "closed_at": "2020-07-18T08:04:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "i want to serialize the object of self defined class, but give an error tips, should i define a  serialize method?\r\n\r\n```\r\nclass Person(object):\r\n    def __init__(self, id, name):\r\n        self.id = id\r\n        self.name = name\r\n\r\n    def __str__(self):\r\n        return 'id: {}, name:{}'.format(self.id, self.name)\r\n\r\nperson = Person(100, 'charles')\r\nprint(person)\r\n\r\n```\r\n\r\nerror tips,\r\n    raise TypeError(\"Cannot serialize %r\" % (obj, ))\r\nTypeError: Cannot serialize <__main__.Person object at 0x7f8984b5e160>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/430", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/430/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/430/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/430", "id": 647213840, "node_id": "MDU6SXNzdWU2NDcyMTM4NDA=", "number": 430, "title": "Mark 1.0.0 as a release on Github", "user": {"login": "tasn", "id": 108670, "node_id": "MDQ6VXNlcjEwODY3MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/108670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tasn", "html_url": "https://github.com/tasn", "followers_url": "https://api.github.com/users/tasn/followers", "following_url": "https://api.github.com/users/tasn/following{/other_user}", "gists_url": "https://api.github.com/users/tasn/gists{/gist_id}", "starred_url": "https://api.github.com/users/tasn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tasn/subscriptions", "organizations_url": "https://api.github.com/users/tasn/orgs", "repos_url": "https://api.github.com/users/tasn/repos", "events_url": "https://api.github.com/users/tasn/events{/privacy}", "received_events_url": "https://api.github.com/users/tasn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-29T08:19:43Z", "updated_at": "2020-06-29T08:33:13Z", "closed_at": "2020-06-29T08:26:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Github currently shows the latest release as 0.6.1 because 1.0.0 is only marked as a tag and not as a github release.\r\n\r\nI found it very confusing that I had 1.0.0 installed locally while the release here was 0.6.1 and I thought I may have gotten the wrong package.\r\n\r\nPlease consider marking the 1.0.0 as a release here too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/426", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/426/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/426/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/426", "id": 630834244, "node_id": "MDU6SXNzdWU2MzA4MzQyNDQ=", "number": 426, "title": "tell() is incorrect after read_bytes()", "user": {"login": "eddyashton", "id": 6000239, "node_id": "MDQ6VXNlcjYwMDAyMzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6000239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyashton", "html_url": "https://github.com/eddyashton", "followers_url": "https://api.github.com/users/eddyashton/followers", "following_url": "https://api.github.com/users/eddyashton/following{/other_user}", "gists_url": "https://api.github.com/users/eddyashton/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyashton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyashton/subscriptions", "organizations_url": "https://api.github.com/users/eddyashton/orgs", "repos_url": "https://api.github.com/users/eddyashton/repos", "events_url": "https://api.github.com/users/eddyashton/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyashton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-04T13:39:26Z", "updated_at": "2020-06-08T03:14:53Z", "closed_at": "2020-06-08T03:14:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the default `._cmsgpack` implementation of an `Unpacker`, you will get the wrong answer if you call `tell()` after `read_bytes()`. Here's a simple repro:\r\n\r\n```\r\nimport msgpack\r\nfrom io import BytesIO\r\nbuf = BytesIO(b'my data')\r\nu = msgpack.Unpacker(buf)\r\nprint(u.tell())\r\nu.read_bytes(5)\r\nprint(u.tell())\r\n```\r\n\r\nAfter calling `u.read_bytes(5)`, `u.tell()` will still return 0. It looks like the `stream_offset` in `_unpacker.pyx` should be advanced in `read_bytes()`, but is currently only advanced by `_unpack()`.\r\n\r\nNote that this works correctly in the `.fallback` implementation, so a quick workaround is to use `import msgpack.fallback as msgpack`, but I assume this is much slower than the C implementation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/425", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/425/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/425/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/425", "id": 623451713, "node_id": "MDU6SXNzdWU2MjM0NTE3MTM=", "number": 425, "title": "ReadTheDocs out-of-date?", "user": {"login": "jakirkham", "id": 3019665, "node_id": "MDQ6VXNlcjMwMTk2NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakirkham", "html_url": "https://github.com/jakirkham", "followers_url": "https://api.github.com/users/jakirkham/followers", "following_url": "https://api.github.com/users/jakirkham/following{/other_user}", "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions", "organizations_url": "https://api.github.com/users/jakirkham/orgs", "repos_url": "https://api.github.com/users/jakirkham/repos", "events_url": "https://api.github.com/users/jakirkham/events{/privacy}", "received_events_url": "https://api.github.com/users/jakirkham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-22T20:04:08Z", "updated_at": "2020-05-23T17:15:05Z", "closed_at": "2020-05-23T17:15:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "When visiting [the ReadTheDocs page]( https://msgpack-python.readthedocs.io/en/latest/ ), it appears to show 0.5 despite several releases of msgpack-python since. Would be good to have an update of the ReadTheDocs page.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/424", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/424/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/424/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/424", "id": 619508181, "node_id": "MDU6SXNzdWU2MTk1MDgxODE=", "number": 424, "title": "Incompatibility with Python 3.8 breaks many packages", "user": {"login": "skuzzymiglet", "id": 42312436, "node_id": "MDQ6VXNlcjQyMzEyNDM2", "avatar_url": "https://avatars2.githubusercontent.com/u/42312436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skuzzymiglet", "html_url": "https://github.com/skuzzymiglet", "followers_url": "https://api.github.com/users/skuzzymiglet/followers", "following_url": "https://api.github.com/users/skuzzymiglet/following{/other_user}", "gists_url": "https://api.github.com/users/skuzzymiglet/gists{/gist_id}", "starred_url": "https://api.github.com/users/skuzzymiglet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skuzzymiglet/subscriptions", "organizations_url": "https://api.github.com/users/skuzzymiglet/orgs", "repos_url": "https://api.github.com/users/skuzzymiglet/repos", "events_url": "https://api.github.com/users/skuzzymiglet/events{/privacy}", "received_events_url": "https://api.github.com/users/skuzzymiglet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-16T16:20:21Z", "updated_at": "2020-05-16T16:34:41Z", "closed_at": "2020-05-16T16:34:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "`msgpack` issues cause errors in serveral places:\r\n\r\n+ pip install\r\n+ Neovim Python host\r\n+ YouComplete\r\n+ many others\r\n\r\nSee https://stackoverflow.com/questions/61227373/pip-msgpack-error-while-installing-requirements and https://pastebin.com/aTTwyrML for info on pip failing.\r\n\r\nI think this issue is critical as it causes breakage across the Python ecosystem", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/422", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/422/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/422/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/422", "id": 598625529, "node_id": "MDU6SXNzdWU1OTg2MjU1Mjk=", "number": 422, "title": "change tuple as dict key behavior of strict_map_key=False  use_list=True in unpackb", "user": {"login": "ssolari", "id": 1182784, "node_id": "MDQ6VXNlcjExODI3ODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1182784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssolari", "html_url": "https://github.com/ssolari", "followers_url": "https://api.github.com/users/ssolari/followers", "following_url": "https://api.github.com/users/ssolari/following{/other_user}", "gists_url": "https://api.github.com/users/ssolari/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssolari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssolari/subscriptions", "organizations_url": "https://api.github.com/users/ssolari/orgs", "repos_url": "https://api.github.com/users/ssolari/repos", "events_url": "https://api.github.com/users/ssolari/events{/privacy}", "received_events_url": "https://api.github.com/users/ssolari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-13T02:04:11Z", "updated_at": "2020-04-13T20:20:03Z", "closed_at": "2020-04-13T02:56:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "This may only be a question for discussion, but personally I think the default behavior of unpackb under the condition where ```strict_map_key=False``` and ```use_list=True``` should work differently.\r\n \r\nThe following will throw an error:\r\n```python\r\nd = {(1, 2, 3): 'tuple_key'}\r\npacked_bytes = msgpack.packb(d, use_bin_type=True)\r\nunpacked_dict = msgpack.unpackb(packed_bytes, strict_map_key=False, use_list=True)\r\n```\r\nI understand that ```use_list=True``` implies that all returned lists should be 'lists'.    However, it can NEVER be the case that a mutable (unhashable) object should ever be the key to a dictionary.  In the case with ```strict_map_key=True```, of course this should throw an error, however, when ```strict_map_key=False``` it is implied that there will be other types of hashable (immutable) keys, like a tuple.\r\n\r\nI think in this one case it makes a lot of sense to automatically convert any 'list/tuple' to a tuple if it is a key (how could it even have been passed to packb if it wasn't a tuple in the first place?).    Then all other lists would be returned as lists.    In our usage of msgpack, we always want to return ```use_list=True```, but in our use case there can be tuples as keys to dictionaries.  So this forces us to always pass ```use_list=False```, which requires checking and conversion of all returned tuples back to lists.\r\n\r\nI think changing this behavior could be beneficial to many use cases and I don't see how changing this default behavior would cause issues (backward or forward) nor confusion, but maybe i'm missing something as well. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/421", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/421/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/421/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/421", "id": 594526214, "node_id": "MDU6SXNzdWU1OTQ1MjYyMTQ=", "number": 421, "title": "is libxxhash.so.0 a required library? ", "user": {"login": "jjgalvez", "id": 5430012, "node_id": "MDQ6VXNlcjU0MzAwMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5430012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjgalvez", "html_url": "https://github.com/jjgalvez", "followers_url": "https://api.github.com/users/jjgalvez/followers", "following_url": "https://api.github.com/users/jjgalvez/following{/other_user}", "gists_url": "https://api.github.com/users/jjgalvez/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjgalvez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjgalvez/subscriptions", "organizations_url": "https://api.github.com/users/jjgalvez/orgs", "repos_url": "https://api.github.com/users/jjgalvez/repos", "events_url": "https://api.github.com/users/jjgalvez/events{/privacy}", "received_events_url": "https://api.github.com/users/jjgalvez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-05T15:53:20Z", "updated_at": "2020-04-06T03:08:44Z", "closed_at": "2020-04-06T03:08:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "is libxxhash.so.0 a required library? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/420", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/420/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/420/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/420/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/420", "id": 592507747, "node_id": "MDU6SXNzdWU1OTI1MDc3NDc=", "number": 420, "title": "How can I encode with Python 2 and decode it with Python 3", "user": {"login": "NassiHarel", "id": 9460060, "node_id": "MDQ6VXNlcjk0NjAwNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9460060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NassiHarel", "html_url": "https://github.com/NassiHarel", "followers_url": "https://api.github.com/users/NassiHarel/followers", "following_url": "https://api.github.com/users/NassiHarel/following{/other_user}", "gists_url": "https://api.github.com/users/NassiHarel/gists{/gist_id}", "starred_url": "https://api.github.com/users/NassiHarel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NassiHarel/subscriptions", "organizations_url": "https://api.github.com/users/NassiHarel/orgs", "repos_url": "https://api.github.com/users/NassiHarel/repos", "events_url": "https://api.github.com/users/NassiHarel/events{/privacy}", "received_events_url": "https://api.github.com/users/NassiHarel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-02T10:02:04Z", "updated_at": "2020-04-03T00:18:01Z", "closed_at": "2020-04-03T00:18:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/419", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/419/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/419/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/419", "id": 592343067, "node_id": "MDU6SXNzdWU1OTIzNDMwNjc=", "number": 419, "title": "Support little endian", "user": {"login": "stalkerg", "id": 1853716, "node_id": "MDQ6VXNlcjE4NTM3MTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1853716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stalkerg", "html_url": "https://github.com/stalkerg", "followers_url": "https://api.github.com/users/stalkerg/followers", "following_url": "https://api.github.com/users/stalkerg/following{/other_user}", "gists_url": "https://api.github.com/users/stalkerg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stalkerg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stalkerg/subscriptions", "organizations_url": "https://api.github.com/users/stalkerg/orgs", "repos_url": "https://api.github.com/users/stalkerg/repos", "events_url": "https://api.github.com/users/stalkerg/events{/privacy}", "received_events_url": "https://api.github.com/users/stalkerg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-02T04:06:21Z", "updated_at": "2020-04-02T09:29:27Z", "closed_at": "2020-04-02T04:55:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, main C library supports chooses between little endian and big endian just by define like MSGPACK_ENDIAN_LITTLE_BYTE. \r\nHow I can do the same for msgpack-python? \r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/418", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/418/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/418/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/418", "id": 585265470, "node_id": "MDU6SXNzdWU1ODUyNjU0NzA=", "number": 418, "title": "msgpack will pack tuples as keys, but seems not able to unpack them", "user": {"login": "cdgriffith", "id": 3275435, "node_id": "MDQ6VXNlcjMyNzU0MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3275435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdgriffith", "html_url": "https://github.com/cdgriffith", "followers_url": "https://api.github.com/users/cdgriffith/followers", "following_url": "https://api.github.com/users/cdgriffith/following{/other_user}", "gists_url": "https://api.github.com/users/cdgriffith/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdgriffith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdgriffith/subscriptions", "organizations_url": "https://api.github.com/users/cdgriffith/orgs", "repos_url": "https://api.github.com/users/cdgriffith/repos", "events_url": "https://api.github.com/users/cdgriffith/events{/privacy}", "received_events_url": "https://api.github.com/users/cdgriffith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-20T18:51:39Z", "updated_at": "2020-03-21T14:12:22Z", "closed_at": "2020-03-21T14:12:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Ran into this issue while trying to pack up dictionaries that used tuples as keys. \r\n\r\n```\r\nimport msgpack\r\npacked = msgpack.packb({(1,2): 'value'})\r\n# b'\\x81\\x92\\x01\\x02\\xa5value'\r\n\r\nmsgpack.unpackb(packed, strict_map_key=False)\r\n# TypeError: unhashable type: 'list'\r\n```\r\n\r\nI understand that it might not be to spec to be able to unpack them like this, but then it seems necessary to raise an error on packing if you know it will be unpackable.  \r\n\r\nWhile it is possible to use `use_list=False` to be able to unpack them, it will then change the types of all values that were lists into tuples, which is undesirable.  I imagine it would be better to automatically assume any keys that were packed as arrays must have been tuples to begin with as all dictionary keys must be hashable? \r\n\r\nThanks! \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/417", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/417/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/417/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/417", "id": 583684867, "node_id": "MDU6SXNzdWU1ODM2ODQ4Njc=", "number": 417, "title": "Killed by OOM killer when unpacking invalid data with use_list=False", "user": {"login": "garyvdm", "id": 352175, "node_id": "MDQ6VXNlcjM1MjE3NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/352175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garyvdm", "html_url": "https://github.com/garyvdm", "followers_url": "https://api.github.com/users/garyvdm/followers", "following_url": "https://api.github.com/users/garyvdm/following{/other_user}", "gists_url": "https://api.github.com/users/garyvdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/garyvdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garyvdm/subscriptions", "organizations_url": "https://api.github.com/users/garyvdm/orgs", "repos_url": "https://api.github.com/users/garyvdm/repos", "events_url": "https://api.github.com/users/garyvdm/events{/privacy}", "received_events_url": "https://api.github.com/users/garyvdm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-18T12:14:04Z", "updated_at": "2020-03-19T08:35:07Z", "closed_at": "2020-03-19T08:35:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "This uses up all the memory, and the process gets killed by the OOM killer:\r\n\r\n```\r\nmsgpack.unpackb(b'\\x9f\\xfdt\\xf7\\xddt\\xff\\xfd\\xbd', use_list=False)\r\n```\r\nThe data is invalid msgpack data. If you run `use_list=True`, it correctly raises a `UnpackValueError`, but takes a long time to run.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/415", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/415/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/415/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/415/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/415", "id": 579332522, "node_id": "MDU6SXNzdWU1NzkzMzI1MjI=", "number": 415, "title": "c++ packed data leads to unpack error in python", "user": {"login": "RGring", "id": 19685020, "node_id": "MDQ6VXNlcjE5Njg1MDIw", "avatar_url": "https://avatars2.githubusercontent.com/u/19685020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RGring", "html_url": "https://github.com/RGring", "followers_url": "https://api.github.com/users/RGring/followers", "following_url": "https://api.github.com/users/RGring/following{/other_user}", "gists_url": "https://api.github.com/users/RGring/gists{/gist_id}", "starred_url": "https://api.github.com/users/RGring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RGring/subscriptions", "organizations_url": "https://api.github.com/users/RGring/orgs", "repos_url": "https://api.github.com/users/RGring/repos", "events_url": "https://api.github.com/users/RGring/events{/privacy}", "received_events_url": "https://api.github.com/users/RGring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-11T15:04:58Z", "updated_at": "2020-03-24T08:40:52Z", "closed_at": "2020-03-24T08:40:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nFollowing situation.\r\nNode1: Packing an object with msgpack in c++ and sending the data.\r\nNode2: Receiving the data and unpacking in python (msgpack.unpackb(payload)). Problem: ValueError gets raised with message \"Unpack failed: incomplete input\".\r\n\r\nI discovered that I only get the Exception e.g, when I pack data with a floating point members. But it also occurs, when I have nested objects.\r\n\r\nWhen I unpack the data in C++, it works fine.\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/413", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/413/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/413/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/413/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/413", "id": 568883039, "node_id": "MDU6SXNzdWU1Njg4ODMwMzk=", "number": 413, "title": "Should `pip install` donwload msgpack 1 for Python 2?", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T10:54:04Z", "updated_at": "2020-02-21T16:49:25Z", "closed_at": "2020-02-21T16:49:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nNow that Python 2 is officialy unsupported by msgpack, should  `setup(...)` include `python_requires=\">=3\"`? Otherwise, running `pip install msgpack` on Python 2 installs an incompatible version.\r\n\r\nEncountered this while working on `joblib's` CI:\r\njoblib/joblib#1015", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/412", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/412/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/412/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/412", "id": 568236895, "node_id": "MDU6SXNzdWU1NjgyMzY4OTU=", "number": 412, "title": "[1.0.0] Loading fails for dictionary that have tuple of tuples as keys", "user": {"login": "lucventurini", "id": 8897821, "node_id": "MDQ6VXNlcjg4OTc4MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/8897821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucventurini", "html_url": "https://github.com/lucventurini", "followers_url": "https://api.github.com/users/lucventurini/followers", "following_url": "https://api.github.com/users/lucventurini/following{/other_user}", "gists_url": "https://api.github.com/users/lucventurini/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucventurini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucventurini/subscriptions", "organizations_url": "https://api.github.com/users/lucventurini/orgs", "repos_url": "https://api.github.com/users/lucventurini/repos", "events_url": "https://api.github.com/users/lucventurini/events{/privacy}", "received_events_url": "https://api.github.com/users/lucventurini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-20T11:32:57Z", "updated_at": "2020-02-20T11:37:22Z", "closed_at": "2020-02-20T11:37:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "To reproduce:\r\n\r\n```\r\n>>> msgpack.loads(msgpack.dumps({((10, 20), (20, 30)): 10}))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"msgpack/_unpacker.pyx\", line 195, in msgpack._cmsgpack.unpackb\r\nValueError: list is not allowed for map key\r\n```\r\n\r\nIs there any workaround for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/411", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/411/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/411/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/411", "id": 567755875, "node_id": "MDU6SXNzdWU1Njc3NTU4NzU=", "number": 411, "title": "loose of compatibility to 0.6.2 and not data validation Dict[int, int]", "user": {"login": "ChameleonRed", "id": 1080880, "node_id": "MDQ6VXNlcjEwODA4ODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1080880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChameleonRed", "html_url": "https://github.com/ChameleonRed", "followers_url": "https://api.github.com/users/ChameleonRed/followers", "following_url": "https://api.github.com/users/ChameleonRed/following{/other_user}", "gists_url": "https://api.github.com/users/ChameleonRed/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChameleonRed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChameleonRed/subscriptions", "organizations_url": "https://api.github.com/users/ChameleonRed/orgs", "repos_url": "https://api.github.com/users/ChameleonRed/repos", "events_url": "https://api.github.com/users/ChameleonRed/events{/privacy}", "received_events_url": "https://api.github.com/users/ChameleonRed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-02-19T18:28:40Z", "updated_at": "2020-02-20T00:57:21Z", "closed_at": "2020-02-20T00:57:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wrote encoder/decoder module some years ago using you msgpack module and I found that version 1.0.0 is broken compatibility with previous version.\r\n\r\nMy enconder/decoder is serializing Python objects - now can not do it.\r\n\r\nI prepare some testing code which show problem:\r\n\r\n```\r\nimport msgpack\r\n\r\nx = {\r\n    1: 1\r\n}\r\n\r\ns = msgpack.dumps(x)\r\ny = msgpack.loads(s)\r\n```\r\n\r\nBefore version 1.0.0 there was not problem and I could use such dict to pack/dump Python object.\r\nI was using it to:\r\n\r\n```\r\n__MODULE_NAME = 1\r\n__CLASS_NAME = 2\r\n...\r\n\r\nencodes {\r\n__MODULE_NAME: 'MyClass',\r\n__CLASS_NAME  'my_module',\r\n...\r\n}\r\n```\r\nNow it not works because decoder not works.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/410", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/410/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/410/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/410/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/410", "id": 567272159, "node_id": "MDU6SXNzdWU1NjcyNzIxNTk=", "number": 410, "title": "Allow int map keys with strict_map_key", "user": {"login": "HelloZeroNet", "id": 10350359, "node_id": "MDQ6VXNlcjEwMzUwMzU5", "avatar_url": "https://avatars0.githubusercontent.com/u/10350359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HelloZeroNet", "html_url": "https://github.com/HelloZeroNet", "followers_url": "https://api.github.com/users/HelloZeroNet/followers", "following_url": "https://api.github.com/users/HelloZeroNet/following{/other_user}", "gists_url": "https://api.github.com/users/HelloZeroNet/gists{/gist_id}", "starred_url": "https://api.github.com/users/HelloZeroNet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HelloZeroNet/subscriptions", "organizations_url": "https://api.github.com/users/HelloZeroNet/orgs", "repos_url": "https://api.github.com/users/HelloZeroNet/repos", "events_url": "https://api.github.com/users/HelloZeroNet/events{/privacy}", "received_events_url": "https://api.github.com/users/HelloZeroNet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-19T02:18:53Z", "updated_at": "2020-02-20T01:03:45Z", "closed_at": "2020-02-19T02:32:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\nimport msgpack\r\n\r\nraw = msgpack.packb({1234: \"ok\"})\r\nmsgpack.unpackb(raw)\r\n> ValueError: int is not allowed for map key\r\n```\r\n\r\nIs there any reason not to allow int as map keys?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/401", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/401/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/401/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/401", "id": 553456472, "node_id": "MDU6SXNzdWU1NTM0NTY0NzI=", "number": 401, "title": "Advanced unpacking control example broken", "user": {"login": "pryg-skok", "id": 2445484, "node_id": "MDQ6VXNlcjI0NDU0ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2445484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pryg-skok", "html_url": "https://github.com/pryg-skok", "followers_url": "https://api.github.com/users/pryg-skok/followers", "following_url": "https://api.github.com/users/pryg-skok/following{/other_user}", "gists_url": "https://api.github.com/users/pryg-skok/gists{/gist_id}", "starred_url": "https://api.github.com/users/pryg-skok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pryg-skok/subscriptions", "organizations_url": "https://api.github.com/users/pryg-skok/orgs", "repos_url": "https://api.github.com/users/pryg-skok/repos", "events_url": "https://api.github.com/users/pryg-skok/events{/privacy}", "received_events_url": "https://api.github.com/users/pryg-skok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-22T10:44:42Z", "updated_at": "2020-02-06T11:29:59Z", "closed_at": "2020-02-06T11:29:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIt seems that example of advanced unpacking control is no working with latest git (and pypi also): https://github.com/msgpack/msgpack-python#advanced-unpacking-control\r\n\r\nFor example `unpacker.skip(bytestream.write)` do not have input parameters. \r\n\r\nAlso I wonder is it possible to unpack part of bytestream (by skipping some headers) and then unpack another part of same message in different part of code by accessing to the same unpacker object? It seems that in current implementation it's not possible and all that I can do is to unpack origin bytestream again and again with different parameters (fields of bytestream I need to access to). Probably it could be achievable if `.skip()` method return skipped part of bytestream, or unpacker class store unpacked fields with data and bytestream within itself and unpack bytestream when one need to access fields from there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/400", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/400/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/400/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/400/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/400", "id": 545219907, "node_id": "MDU6SXNzdWU1NDUyMTk5MDc=", "number": 400, "title": "Add object_kwargs_hook", "user": {"login": "randallpittman", "id": 7116641, "node_id": "MDQ6VXNlcjcxMTY2NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7116641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randallpittman", "html_url": "https://github.com/randallpittman", "followers_url": "https://api.github.com/users/randallpittman/followers", "following_url": "https://api.github.com/users/randallpittman/following{/other_user}", "gists_url": "https://api.github.com/users/randallpittman/gists{/gist_id}", "starred_url": "https://api.github.com/users/randallpittman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randallpittman/subscriptions", "organizations_url": "https://api.github.com/users/randallpittman/orgs", "repos_url": "https://api.github.com/users/randallpittman/repos", "events_url": "https://api.github.com/users/randallpittman/events{/privacy}", "received_events_url": "https://api.github.com/users/randallpittman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-04T00:53:39Z", "updated_at": "2020-01-07T17:35:57Z", "closed_at": "2020-01-04T03:38:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just an idea, no sure if you think it's worthwhile.\r\n\r\nAdd an unpacking option `object_kwargs_hook` or `object_kv_hook` to support directly unpacking a map into a callable that takes `key: value` argument, such as a dataclass.\r\n\r\nThe workaround is just using `object_hook=lambda x: MyDataclass(**x)`, which isn't too bad, so this isn't a major need, but then again perhaps it is low-hanging fruit too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/398", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/398/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/398/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/398", "id": 542374444, "node_id": "MDU6SXNzdWU1NDIzNzQ0NDQ=", "number": 398, "title": "Implement restricted profiles", "user": {"login": "traverseda", "id": 2125828, "node_id": "MDQ6VXNlcjIxMjU4Mjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2125828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/traverseda", "html_url": "https://github.com/traverseda", "followers_url": "https://api.github.com/users/traverseda/followers", "following_url": "https://api.github.com/users/traverseda/following{/other_user}", "gists_url": "https://api.github.com/users/traverseda/gists{/gist_id}", "starred_url": "https://api.github.com/users/traverseda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/traverseda/subscriptions", "organizations_url": "https://api.github.com/users/traverseda/orgs", "repos_url": "https://api.github.com/users/traverseda/repos", "events_url": "https://api.github.com/users/traverseda/events{/privacy}", "received_events_url": "https://api.github.com/users/traverseda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-25T18:37:22Z", "updated_at": "2019-12-25T18:47:07Z", "closed_at": "2019-12-25T18:40:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "As mentioned in the spec: https://github.com/msgpack/msgpack/blob/master/spec.md#profile", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/397", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/397/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/397/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/397/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/397", "id": 542367942, "node_id": "MDU6SXNzdWU1NDIzNjc5NDI=", "number": 397, "title": "Restricted Profiles", "user": {"login": "traverseda", "id": 2125828, "node_id": "MDQ6VXNlcjIxMjU4Mjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2125828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/traverseda", "html_url": "https://github.com/traverseda", "followers_url": "https://api.github.com/users/traverseda/followers", "following_url": "https://api.github.com/users/traverseda/following{/other_user}", "gists_url": "https://api.github.com/users/traverseda/gists{/gist_id}", "starred_url": "https://api.github.com/users/traverseda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/traverseda/subscriptions", "organizations_url": "https://api.github.com/users/traverseda/orgs", "repos_url": "https://api.github.com/users/traverseda/repos", "events_url": "https://api.github.com/users/traverseda/events{/privacy}", "received_events_url": "https://api.github.com/users/traverseda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-25T17:12:18Z", "updated_at": "2019-12-25T17:39:39Z", "closed_at": "2019-12-25T17:39:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need a variant of msgpack that will only pack/unpack immutable python types.\r\n\r\nIn order to do this I need msgpack to raise an exception when it tries to encode/decode a map. Is there any way to do this with the current implementation? I know profiles are mentioned in the spec.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/389", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/389/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/389/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/389", "id": 533923428, "node_id": "MDU6SXNzdWU1MzM5MjM0Mjg=", "number": 389, "title": "Packer: Change strict_types default to True.", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 14596241, "node_id": "MDU6TGFiZWwxNDU5NjI0MQ==", "url": "https://api.github.com/repos/msgpack/msgpack-python/labels/1.0", "name": "1.0", "color": "d7e102", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-06T12:00:19Z", "updated_at": "2019-12-09T11:53:26Z", "closed_at": "2019-12-09T11:53:26Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Because:\r\n\r\n* Better performance\r\n* Users can customize how subclasses are serialized using`default`.  (e.g. namedtuple)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/372", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/372/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/372/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/372", "id": 518488373, "node_id": "MDU6SXNzdWU1MTg0ODgzNzM=", "number": 372, "title": "msgpack unpacking does not memoize string keys", "user": {"login": "cfbolz", "id": 85942, "node_id": "MDQ6VXNlcjg1OTQy", "avatar_url": "https://avatars3.githubusercontent.com/u/85942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cfbolz", "html_url": "https://github.com/cfbolz", "followers_url": "https://api.github.com/users/cfbolz/followers", "following_url": "https://api.github.com/users/cfbolz/following{/other_user}", "gists_url": "https://api.github.com/users/cfbolz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cfbolz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cfbolz/subscriptions", "organizations_url": "https://api.github.com/users/cfbolz/orgs", "repos_url": "https://api.github.com/users/cfbolz/repos", "events_url": "https://api.github.com/users/cfbolz/events{/privacy}", "received_events_url": "https://api.github.com/users/cfbolz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-06T13:56:21Z", "updated_at": "2019-12-03T12:18:18Z", "closed_at": "2019-12-03T12:18:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "In most large msgpack messages, the same kind of object repeats many times, therefore the same keys appear again and again. Many json decoders exploit this and memoize/intern strings, to reduce the memory use of the resulting message and also to reduce decoding time, see for example in [PyPy](https://morepypy.blogspot.com/2019/10/pypys-new-json-parser.html). Would there be interest in implementing this feature in msgpack? I'd be happy to do the implementation work, if so.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/368", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/368/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/368/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/368/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/368", "id": 484918793, "node_id": "MDU6SXNzdWU0ODQ5MTg3OTM=", "number": 368, "title": "[bug] msgpack.packb(data).decode() fails. It appears bytes are windows-1253 encoding, but method docblock says default is utf-8. decodewindows-1253\") works", "user": {"login": "idchlife", "id": 4563032, "node_id": "MDQ6VXNlcjQ1NjMwMzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4563032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/idchlife", "html_url": "https://github.com/idchlife", "followers_url": "https://api.github.com/users/idchlife/followers", "following_url": "https://api.github.com/users/idchlife/following{/other_user}", "gists_url": "https://api.github.com/users/idchlife/gists{/gist_id}", "starred_url": "https://api.github.com/users/idchlife/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/idchlife/subscriptions", "organizations_url": "https://api.github.com/users/idchlife/orgs", "repos_url": "https://api.github.com/users/idchlife/repos", "events_url": "https://api.github.com/users/idchlife/events{/privacy}", "received_events_url": "https://api.github.com/users/idchlife/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-25T11:10:32Z", "updated_at": "2019-09-12T14:21:40Z", "closed_at": "2019-08-26T07:05:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I suspect this is a bug, since normal behaviour with .decode() throws error about encoding problem (cannot be decoded to \"utf-8\").", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/367", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/367/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/367/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/367", "id": 482808313, "node_id": "MDU6SXNzdWU0ODI4MDgzMTM=", "number": 367, "title": "OS X wheels", "user": {"login": "Suor", "id": 284103, "node_id": "MDQ6VXNlcjI4NDEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/284103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Suor", "html_url": "https://github.com/Suor", "followers_url": "https://api.github.com/users/Suor/followers", "following_url": "https://api.github.com/users/Suor/following{/other_user}", "gists_url": "https://api.github.com/users/Suor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Suor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Suor/subscriptions", "organizations_url": "https://api.github.com/users/Suor/orgs", "repos_url": "https://api.github.com/users/Suor/repos", "events_url": "https://api.github.com/users/Suor/events{/privacy}", "received_events_url": "https://api.github.com/users/Suor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-20T11:39:35Z", "updated_at": "2019-10-09T08:48:07Z", "closed_at": "2019-10-09T08:48:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there plans to add them?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/366", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/366/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/366/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/366", "id": 482441684, "node_id": "MDU6SXNzdWU0ODI0NDE2ODQ=", "number": 366, "title": "Django and msgpack 0.6 can not serialize 'ExtType' object", "user": {"login": "JBKahn", "id": 2654653, "node_id": "MDQ6VXNlcjI2NTQ2NTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2654653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JBKahn", "html_url": "https://github.com/JBKahn", "followers_url": "https://api.github.com/users/JBKahn/followers", "following_url": "https://api.github.com/users/JBKahn/following{/other_user}", "gists_url": "https://api.github.com/users/JBKahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/JBKahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JBKahn/subscriptions", "organizations_url": "https://api.github.com/users/JBKahn/orgs", "repos_url": "https://api.github.com/users/JBKahn/repos", "events_url": "https://api.github.com/users/JBKahn/events{/privacy}", "received_events_url": "https://api.github.com/users/JBKahn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T17:42:50Z", "updated_at": "2019-08-19T18:11:34Z", "closed_at": "2019-08-19T18:11:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the following code\r\n```python\r\nimport msgpack\r\nimport enum\r\nfrom importlib import import_module\r\n\r\ndef default(obj):\r\n    if issubclass(type(obj), enum.Enum):\r\n        components = (obj.__module__, obj.__class__.__name__, obj.value)\r\n        return msgpack.ExtType(42, msgpack.packb(components, use_bin_type=True))\r\n    raise TypeError(\"Unknown type: %r\" % (obj,))\r\n\r\ndef ext_hook(code, data):\r\n    if code == 42:\r\n        module, class_name, value = msgpack.unpackb(data, raw=False)\r\n        if isinstance(module, bytes):\r\n            module = module.decode()\r\n        if isinstance(class_name, bytes):\r\n            class_name = class_name.decode()\r\n        obj = getattr(import_module(module), class_name)(value)\r\n        return obj\r\n    return msgpack.ExtType(code, data)\r\n\r\n\r\nclass Garbo(enum.Enum):\r\n    thing = 1\r\n```\r\n\r\nThis works fine in the shell:\r\n\r\n```python\r\nIn [2]: data = {'a': Garbo.thing}\r\n   ...: packed = msgpack.packb(data, strict_types=True, default=default, use_bin_type=True)\r\n   ...: unpacked = msgpack.unpackb(packed, ext_hook=ext_hook, raw=False)\r\n   ...:\r\n   ...: assert data == unpacked\r\n\r\nIn [3]:\r\n\r\nIn [3]: data\r\nOut[3]: {'a': <Garbo.thing: 1>}\r\n\r\nIn [4]: unpacked\r\nOut[4]: {'a': <Garbo.thing: 1>}\r\n```\r\n\r\nI wrote this on msgpack 0.5.6 but upgrading to 0.6.0 this works except inside my django process where it raises this:\r\n```python\r\nIn [3]: packed = msgpack.packb(data, strict_types=True, default=default, use_bin_type=True)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-53de700462f7> in <module>\r\n----> 1 packed = msgpack.packb(data, strict_types=True, default=default, use_bin_type=True)\r\n\r\n/usr/local/lib/python3.7/site-packages/msgpack/__init__.py in packb(o, **kwargs)\r\n     44     See :class:`Packer` for options.\r\n     45     \"\"\"\r\n---> 46     return Packer(**kwargs).pack(o)\r\n     47\r\n     48\r\n\r\nmsgpack/_packer.pyx in msgpack._cmsgpack.Packer.pack()\r\n\r\nmsgpack/_packer.pyx in msgpack._cmsgpack.Packer.pack()\r\n\r\nmsgpack/_packer.pyx in msgpack._cmsgpack.Packer.pack()\r\n\r\nmsgpack/_packer.pyx in msgpack._cmsgpack.Packer._pack()\r\n\r\nmsgpack/_packer.pyx in msgpack._cmsgpack.Packer._pack()\r\n\r\nTypeError: can not serialize 'ExtType' object\r\n```\r\n\r\nI know this is entirely something in my setup but I'm not sure the best way to debug this and was hoping you've seen something similar before?\r\n\r\nNote: this does work with `MSGPACK_PUREPYTHON=true` which would be easier to debug if it didn't.\r\n\r\nSince it's hitting this it means I have an issue with the switch statement:\r\nhttps://github.com/msgpack/msgpack-python/blob/v0.6.0/msgpack/_packer.pyx#L245-L279\r\n\r\nAlthough this is true inside the shell where it's not working:\r\n```python\r\nIn [4]: type(msgpack.ExtType(code=42, data=b'1')) is msgpack.ExtType\r\nOut[4]: True\r\n```\r\n\r\nI think it's caused by https://github.com/DataDog/dd-trace-py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/361", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/361/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/361/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/361", "id": 464226392, "node_id": "MDU6SXNzdWU0NjQyMjYzOTI=", "number": 361, "title": "how to use python3.6 unpack msgpack file with C++ struct", "user": {"login": "wuqiong1992", "id": 21216325, "node_id": "MDQ6VXNlcjIxMjE2MzI1", "avatar_url": "https://avatars0.githubusercontent.com/u/21216325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wuqiong1992", "html_url": "https://github.com/wuqiong1992", "followers_url": "https://api.github.com/users/wuqiong1992/followers", "following_url": "https://api.github.com/users/wuqiong1992/following{/other_user}", "gists_url": "https://api.github.com/users/wuqiong1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/wuqiong1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wuqiong1992/subscriptions", "organizations_url": "https://api.github.com/users/wuqiong1992/orgs", "repos_url": "https://api.github.com/users/wuqiong1992/repos", "events_url": "https://api.github.com/users/wuqiong1992/events{/privacy}", "received_events_url": "https://api.github.com/users/wuqiong1992/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-04T11:54:48Z", "updated_at": "2019-09-19T11:42:34Z", "closed_at": "2019-09-19T11:42:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/360", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/360/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/360/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/360", "id": 456582229, "node_id": "MDU6SXNzdWU0NTY1ODIyMjk=", "number": 360, "title": "msgpack imposes the size limit on the field: ValueError: 1398490 exceeds max_bin_len(1048576)", "user": {"login": "yurivict", "id": 271906, "node_id": "MDQ6VXNlcjI3MTkwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/271906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurivict", "html_url": "https://github.com/yurivict", "followers_url": "https://api.github.com/users/yurivict/followers", "following_url": "https://api.github.com/users/yurivict/following{/other_user}", "gists_url": "https://api.github.com/users/yurivict/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurivict/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurivict/subscriptions", "organizations_url": "https://api.github.com/users/yurivict/orgs", "repos_url": "https://api.github.com/users/yurivict/repos", "events_url": "https://api.github.com/users/yurivict/events{/privacy}", "received_events_url": "https://api.github.com/users/yurivict/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-15T22:38:47Z", "updated_at": "2019-06-16T09:13:12Z", "closed_at": "2019-06-16T09:13:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I discovered it in the ```veles``` project, see https://github.com/codilime/veles/issues/446\r\n\r\npy36-msgpack-0.6.1\r\nFreeBSD 12\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/359", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/359/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/359/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/359", "id": 452563473, "node_id": "MDU6SXNzdWU0NTI1NjM0NzM=", "number": 359, "title": "Why do FormatError and StackError derive from two exception classes?", "user": {"login": "stinos", "id": 1902997, "node_id": "MDQ6VXNlcjE5MDI5OTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1902997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stinos", "html_url": "https://github.com/stinos", "followers_url": "https://api.github.com/users/stinos/followers", "following_url": "https://api.github.com/users/stinos/following{/other_user}", "gists_url": "https://api.github.com/users/stinos/gists{/gist_id}", "starred_url": "https://api.github.com/users/stinos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stinos/subscriptions", "organizations_url": "https://api.github.com/users/stinos/orgs", "repos_url": "https://api.github.com/users/stinos/repos", "events_url": "https://api.github.com/users/stinos/events{/privacy}", "received_events_url": "https://api.github.com/users/stinos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-05T15:20:53Z", "updated_at": "2019-09-19T13:13:36Z", "closed_at": "2019-09-19T13:13:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looking at the code I didn't immediately find a reason why these should inherit both `ValueError` and `UnpackException` whereas the other exceptions used all inherit just one type. And the comments state multiple times to catch `Exception` if one wants to catch all exceptions so that kind of defeats the purpose? I can make a PR to derive from just one of then, `UnpackException` I guess, unless it's somehow required to also derive from `ValueError`?\r\n\r\nReason for asking: we're using MicroPython which doesn't support multiple inheritance but for the rest the fallback implementation works fine, so if we don't care about performance and just need a working msgpack implementation it would be convenient if we could use this one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/358", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/358/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/358/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/358", "id": 448832869, "node_id": "MDU6SXNzdWU0NDg4MzI4Njk=", "number": 358, "title": "ValueError: 22035 exceeds max_array_len(576)", "user": {"login": "playcode001", "id": 5078044, "node_id": "MDQ6VXNlcjUwNzgwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5078044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/playcode001", "html_url": "https://github.com/playcode001", "followers_url": "https://api.github.com/users/playcode001/followers", "following_url": "https://api.github.com/users/playcode001/following{/other_user}", "gists_url": "https://api.github.com/users/playcode001/gists{/gist_id}", "starred_url": "https://api.github.com/users/playcode001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/playcode001/subscriptions", "organizations_url": "https://api.github.com/users/playcode001/orgs", "repos_url": "https://api.github.com/users/playcode001/repos", "events_url": "https://api.github.com/users/playcode001/events{/privacy}", "received_events_url": "https://api.github.com/users/playcode001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-27T12:28:19Z", "updated_at": "2019-05-27T14:36:19Z", "closed_at": "2019-05-27T12:32:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "ValueError: 22035 exceeds max_array_len(576)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/356", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/356/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/356/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/356", "id": 442579233, "node_id": "MDU6SXNzdWU0NDI1NzkyMzM=", "number": 356, "title": "RFC: use relative imports instead of absolute?", "user": {"login": "FelixSchwarz", "id": 212753, "node_id": "MDQ6VXNlcjIxMjc1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/212753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixSchwarz", "html_url": "https://github.com/FelixSchwarz", "followers_url": "https://api.github.com/users/FelixSchwarz/followers", "following_url": "https://api.github.com/users/FelixSchwarz/following{/other_user}", "gists_url": "https://api.github.com/users/FelixSchwarz/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixSchwarz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixSchwarz/subscriptions", "organizations_url": "https://api.github.com/users/FelixSchwarz/orgs", "repos_url": "https://api.github.com/users/FelixSchwarz/repos", "events_url": "https://api.github.com/users/FelixSchwarz/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixSchwarz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-10T07:33:40Z", "updated_at": "2019-05-10T11:21:20Z", "closed_at": "2019-05-10T11:21:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently msgpack uses absolute imports for its modules, e.g.:\r\n\r\n    if os.environ.get('MSGPACK_PUREPYTHON'):\r\n        from msgpack.fallback import Packer, unpackb, Unpacker\r\n    else:\r\n        try:\r\n            from msgpack._cmsgpack import Packer, unpackb, Unpacker\r\n        except ImportError:\r\n            from msgpack.fallback import Packer, unpackb, Unpacker\r\n\r\nRecently I worked on bundling msgpack inside another project to work around an incompatible system-wide install of msgpack (Fedora 30, borgbackup requires msgpack 0.5.6 but F30 ships 0.6.1).\r\n\r\nOne thing which made bundling a lot easier was to use relative imports in msgpack:\r\n\r\n    if os.environ.get('MSGPACK_PUREPYTHON'):\r\n        from .fallback import Packer, unpackb, Unpacker\r\n    else:\r\n        try:\r\n            from ._cmsgpack import Packer, unpackb, Unpacker\r\n        except ImportError:\r\n            from .fallback import Packer, unpackb, Unpacker\r\n\r\nThat way I could copy msgpack's code to another location and it would not use the system-wide install.\r\n\r\nI could create a PR if you would be interesting in merging this. Otherwise I'll carry some local patches for Fedora until we can drop the bundling.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/355", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/355/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/355/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/355", "id": 438495892, "node_id": "MDU6SXNzdWU0Mzg0OTU4OTI=", "number": 355, "title": "Disabling garbage collector", "user": {"login": "seanthegreat7", "id": 41807347, "node_id": "MDQ6VXNlcjQxODA3MzQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/41807347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanthegreat7", "html_url": "https://github.com/seanthegreat7", "followers_url": "https://api.github.com/users/seanthegreat7/followers", "following_url": "https://api.github.com/users/seanthegreat7/following{/other_user}", "gists_url": "https://api.github.com/users/seanthegreat7/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanthegreat7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanthegreat7/subscriptions", "organizations_url": "https://api.github.com/users/seanthegreat7/orgs", "repos_url": "https://api.github.com/users/seanthegreat7/repos", "events_url": "https://api.github.com/users/seanthegreat7/events{/privacy}", "received_events_url": "https://api.github.com/users/seanthegreat7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-29T20:34:46Z", "updated_at": "2019-04-30T01:47:21Z", "closed_at": "2019-04-30T01:47:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the \"Note about performance\" part of the read me, you mention we can disable garbage collector while unpacking large items. I have three questions.\r\n\r\n1- Should I enable it afterwards?\r\n2- How big of a difference it makes?\r\n3- How big of a message is considered big in your context? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/354", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/354/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/354/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/354", "id": 433709521, "node_id": "MDU6SXNzdWU0MzM3MDk1MjE=", "number": 354, "title": "Building cmsgpack for alpine", "user": {"login": "pdscopes", "id": 13329586, "node_id": "MDQ6VXNlcjEzMzI5NTg2", "avatar_url": "https://avatars2.githubusercontent.com/u/13329586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pdscopes", "html_url": "https://github.com/pdscopes", "followers_url": "https://api.github.com/users/pdscopes/followers", "following_url": "https://api.github.com/users/pdscopes/following{/other_user}", "gists_url": "https://api.github.com/users/pdscopes/gists{/gist_id}", "starred_url": "https://api.github.com/users/pdscopes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pdscopes/subscriptions", "organizations_url": "https://api.github.com/users/pdscopes/orgs", "repos_url": "https://api.github.com/users/pdscopes/repos", "events_url": "https://api.github.com/users/pdscopes/events{/privacy}", "received_events_url": "https://api.github.com/users/pdscopes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-16T10:40:57Z", "updated_at": "2019-04-16T10:48:08Z", "closed_at": "2019-04-16T10:48:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using msgpack in a python alpine docker image and I would like to use `msgpack._cmsgpack` rather than `msgpack.fallback` for the obvious performance benefits.\r\n\r\nI install msgpack using `pip install msgpack>=0.6.1`. If I install msgpack on a debian based linux server `msgpack._cmsgpack` is available.\r\n\r\nHow would I go about making `msgpack._cmsgpack` available in alpine?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/353", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/353/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/353/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/353", "id": 424760557, "node_id": "MDU6SXNzdWU0MjQ3NjA1NTc=", "number": 353, "title": "dill vs msgpack", "user": {"login": "QGB", "id": 8005654, "node_id": "MDQ6VXNlcjgwMDU2NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/8005654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QGB", "html_url": "https://github.com/QGB", "followers_url": "https://api.github.com/users/QGB/followers", "following_url": "https://api.github.com/users/QGB/following{/other_user}", "gists_url": "https://api.github.com/users/QGB/gists{/gist_id}", "starred_url": "https://api.github.com/users/QGB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QGB/subscriptions", "organizations_url": "https://api.github.com/users/QGB/orgs", "repos_url": "https://api.github.com/users/QGB/repos", "events_url": "https://api.github.com/users/QGB/events{/privacy}", "received_events_url": "https://api.github.com/users/QGB/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-25T07:34:51Z", "updated_at": "2019-03-25T07:39:41Z", "closed_at": "2019-03-25T07:39:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "In [51]: def ref(a):\r\n    ...:     a=a.group()\r\n    ...:     print(len(a))\r\n    ...:     a=int(a)\r\n    ...:     a=a/1000\r\n    ...:     return U.stime(a)\r\n    ...:\r\n\r\nIn [52]:\r\n\r\nIn [52]: msgpack.packb(ref)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-52-6b95b7322fe6> in <module>()\r\n----> 1 msgpack.packb(ref)\r\n\r\nE:\\QGB\\Anaconda3\\lib\\site-packages\\msgpack\\__init__.py in packb(o, **kwargs)\r\n     45     See :class:`Packer` for options.\r\n     46     \"\"\"\r\n---> 47     return Packer(**kwargs).pack(o)\r\n     48\r\n     49 # alias for compatibility to simplejson/marshal/pickle.\r\n\r\nmsgpack/_packer.pyx in msgpack._packer.Packer.pack (msgpack/_packer.cpp:3661)()\r\n\r\nmsgpack/_packer.pyx in msgpack._packer.Packer.pack (msgpack/_packer.cpp:3503)()\r\n\r\nmsgpack/_packer.pyx in msgpack._packer.Packer._pack (msgpack/_packer.cpp:3382)()\r\n\r\nTypeError: can't serialize <function ref at 0x00000164F1EC0400>\r\n\r\nIn [53]:\r\n\r\nIn [53]:\r\n\r\nIn [53]: F.dill_dump ref\r\n-------> F.dill_dump(ref)\r\nOut[53]: b'cdill.dill\\n_create_function\\np0\\n(cdill.dill\\n_load_type\\np1\\n(VCodeType\\np2\\ntp3\\nRp4\\n(L1L\\nL0L\\nL1L\\nL3L\\nL67L\\ncdill.dill\\n_get_attr\\np5\\n(cdill.dill\\n_import_module\\np6\\n(V_codecs\\np7\\ntp8\\nRp9\\nVencode\\np10\\ntp11\\nRp12\\n(V|\\x00j\\x00\\x83\\x00}\\x00t\\x01t\\x02|\\x00\\x83\\x01\\x83\\x01\\x01\\x00t\\x03|\\x00\\x83\\x01}\\x00|\\x00d\\x01\\x1b\\x00}\\x00t\\x04j\\x05|\\x00\\x83\\x01S\\x00\\np13\\nVlatin1\\np14\\ntp15\\nRp16\\n(NL1000L\\ntp17\\n(Vgroup\\np18\\nVprint\\np19\\nVlen\\np20\\nVint\\np21\\nVU\\np22\\nVstime\\np23\\ntp24\\n(Va\\np25\\ntp26\\nV<ipython-input-51-c72a40e269ab>\\np27\\nVref\\np28\\nL1L\\ng12\\n(V\\x00\\x01\\x08\\x01\\x0c\\x01\\x08\\x01\\x08\\x01\\np29\\ng14\\ntp30\\nRp31\\n(t(ttp32\\nRp33\\nc__builtin__\\n__main__\\ng28\\nNN(dp34\\ntp35\\nRp36\\n.'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/352", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/352/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/352/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/352", "id": 424325213, "node_id": "MDU6SXNzdWU0MjQzMjUyMTM=", "number": 352, "title": "Broken fallback implementation of Unpacker.read_bytes", "user": {"login": "jmuchemb", "id": 11165223, "node_id": "MDQ6VXNlcjExMTY1MjIz", "avatar_url": "https://avatars1.githubusercontent.com/u/11165223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmuchemb", "html_url": "https://github.com/jmuchemb", "followers_url": "https://api.github.com/users/jmuchemb/followers", "following_url": "https://api.github.com/users/jmuchemb/following{/other_user}", "gists_url": "https://api.github.com/users/jmuchemb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmuchemb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmuchemb/subscriptions", "organizations_url": "https://api.github.com/users/jmuchemb/orgs", "repos_url": "https://api.github.com/users/jmuchemb/repos", "events_url": "https://api.github.com/users/jmuchemb/events{/privacy}", "received_events_url": "https://api.github.com/users/jmuchemb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-22T17:38:33Z", "updated_at": "2019-12-06T12:16:28Z", "closed_at": "2019-12-06T12:16:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>>> from msgpack import *\r\n>>> u = Unpacker(); u.feed('x'); u.read_bytes(1)\r\n'x'\r\n>>> u.next()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"msgpack/_unpacker.pyx\", line 562, in msgpack._cmsgpack.Unpacker.__next__\r\n  File \"msgpack/_unpacker.pyx\", line 489, in msgpack._cmsgpack.Unpacker._unpack\r\nStopIteration: No more data to unpack.\r\n>>> u.feed('\\1'); u.next()\r\n1\r\n```\r\nSo far so good. Now with fallback impl\u00e9mentation:\r\n```\r\n>>> from msgpack.fallback import *\r\n>>> u = Unpacker(); u.feed('x'); u.read_bytes(1)\r\nbytearray(b'x')\r\n>>> u.next()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/dist-packages/msgpack/fallback.py\", line 690, in __next__\r\n    raise StopIteration\r\nStopIteration\r\n>>> u.feed('\\1'); u.next()\r\n120\r\n```\r\nSomething seems to be wrongly reset on StopIteration.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/351", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/351/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/351/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/351", "id": 424181736, "node_id": "MDU6SXNzdWU0MjQxODE3MzY=", "number": 351, "title": " s = s.encode('utf8')  UnicodeEncodeError: 'utf-8' codec can't encode character '\\udce9' in position 180: surrogates not allowed", "user": {"login": "Ibtiheel", "id": 36708784, "node_id": "MDQ6VXNlcjM2NzA4Nzg0", "avatar_url": "https://avatars0.githubusercontent.com/u/36708784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ibtiheel", "html_url": "https://github.com/Ibtiheel", "followers_url": "https://api.github.com/users/Ibtiheel/followers", "following_url": "https://api.github.com/users/Ibtiheel/following{/other_user}", "gists_url": "https://api.github.com/users/Ibtiheel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ibtiheel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ibtiheel/subscriptions", "organizations_url": "https://api.github.com/users/Ibtiheel/orgs", "repos_url": "https://api.github.com/users/Ibtiheel/repos", "events_url": "https://api.github.com/users/Ibtiheel/events{/privacy}", "received_events_url": "https://api.github.com/users/Ibtiheel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-22T12:16:50Z", "updated_at": "2019-03-22T12:22:36Z", "closed_at": "2019-03-22T12:22:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I faced this problem while running the code,it's my first time using tensorflow and i'm not familiar with it :(  could anyone help me ! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/350", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/350/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/350/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/350", "id": 422979056, "node_id": "MDU6SXNzdWU0MjI5NzkwNTY=", "number": 350, "title": "SignalR - Websocket + MessagePack (JSON)", "user": {"login": "thzois", "id": 12307950, "node_id": "MDQ6VXNlcjEyMzA3OTUw", "avatar_url": "https://avatars0.githubusercontent.com/u/12307950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thzois", "html_url": "https://github.com/thzois", "followers_url": "https://api.github.com/users/thzois/followers", "following_url": "https://api.github.com/users/thzois/following{/other_user}", "gists_url": "https://api.github.com/users/thzois/gists{/gist_id}", "starred_url": "https://api.github.com/users/thzois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thzois/subscriptions", "organizations_url": "https://api.github.com/users/thzois/orgs", "repos_url": "https://api.github.com/users/thzois/repos", "events_url": "https://api.github.com/users/thzois/events{/privacy}", "received_events_url": "https://api.github.com/users/thzois/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-19T22:16:31Z", "updated_at": "2019-09-19T11:48:17Z", "closed_at": "2019-09-19T11:48:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have configured my SignalR server (in .NET core) to use MessagePack for the hub and I am using Websocket in Python for the communication. Everything works perfectly if I specify as protocol (json) in handshake and I am not using MessagePack. \r\nI am also able to print the message in response.\r\n\r\n```\r\ndef encode_json(obj):\r\n    return json.dumps(obj) + chr(0x1E)\r\n\r\ndef ws_on_message(ws, message: str):\r\n     print(message)\r\n\r\ndef ws_on_open(ws):\r\n    ws.send(encode_json({\r\n        \"protocol\": \"json\",\r\n        \"version\": 1\r\n    }))\r\n\r\n    x = encode_json({\r\n        \"type\": 1,\r\n        \"target\": \"SendMessage\",\r\n        \"arguments\": [\"Hello\", \"World\"]\r\n    }) \r\n    \r\n    ws.send(x)\r\n```\r\nWhen I try to use MessagePack, I am specifying in the handshake as protocol (messagepack) and I use packb and unpackb. However, when I try to print the response `error from callback <function ws_on_message at 0x109641c80>: unpack(b) received extra data.`. The communication regardless the printing of the response, terminates unexpectedly. \r\n\r\n```\r\ndef encode_json(obj):\r\n    return json.dumps(obj) + chr(0x1E)\r\n\r\ndef ws_on_message(ws, message: str):\r\n    #print(\"Received from SignalR: \", msgpack.unpackb(message, raw=False))\r\n    print(message)\r\n\r\ndef ws_on_open(ws):\r\n    ws.send(encode_json({\r\n        \"protocol\": \"messagepack\",\r\n        \"version\": 1\r\n    }))\r\n\r\n    #Try 1\r\n    x = encode_json({\r\n        \"type\": 1,\r\n        \"target\": \"SendMessage\",\r\n        \"arguments\": [\"Hello\", \"World\"]\r\n    })\r\n\r\n   #Try 2\r\n    x = {\r\n        \"type\": 1,\r\n        \"target\": \"SendMessage\",\r\n        \"arguments\": [\"Hello\", \"World\"]\r\n    }\r\n    ws.send(msgpack.packb(x, use_bin_type=True))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/349", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/349/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/349/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/349", "id": 413991033, "node_id": "MDU6SXNzdWU0MTM5OTEwMzM=", "number": 349, "title": "lmdb", "user": {"login": "Solacex", "id": 12868455, "node_id": "MDQ6VXNlcjEyODY4NDU1", "avatar_url": "https://avatars1.githubusercontent.com/u/12868455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Solacex", "html_url": "https://github.com/Solacex", "followers_url": "https://api.github.com/users/Solacex/followers", "following_url": "https://api.github.com/users/Solacex/following{/other_user}", "gists_url": "https://api.github.com/users/Solacex/gists{/gist_id}", "starred_url": "https://api.github.com/users/Solacex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Solacex/subscriptions", "organizations_url": "https://api.github.com/users/Solacex/orgs", "repos_url": "https://api.github.com/users/Solacex/repos", "events_url": "https://api.github.com/users/Solacex/events{/privacy}", "received_events_url": "https://api.github.com/users/Solacex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-25T08:43:32Z", "updated_at": "2019-02-25T08:43:41Z", "closed_at": "2019-02-25T08:43:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/345", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/345/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/345/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/345", "id": 407467574, "node_id": "MDU6SXNzdWU0MDc0Njc1NzQ=", "number": 345, "title": "[BUG] msgpack.unpackb() behavior is inconsistent with Unpacker() arguments", "user": {"login": "vEpiphyte", "id": 26100278, "node_id": "MDQ6VXNlcjI2MTAwMjc4", "avatar_url": "https://avatars2.githubusercontent.com/u/26100278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vEpiphyte", "html_url": "https://github.com/vEpiphyte", "followers_url": "https://api.github.com/users/vEpiphyte/followers", "following_url": "https://api.github.com/users/vEpiphyte/following{/other_user}", "gists_url": "https://api.github.com/users/vEpiphyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/vEpiphyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vEpiphyte/subscriptions", "organizations_url": "https://api.github.com/users/vEpiphyte/orgs", "repos_url": "https://api.github.com/users/vEpiphyte/repos", "events_url": "https://api.github.com/users/vEpiphyte/events{/privacy}", "received_events_url": "https://api.github.com/users/vEpiphyte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-06T22:50:31Z", "updated_at": "2019-02-08T07:08:10Z", "closed_at": "2019-02-06T23:19:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am in the process of moving my application from msgpack=0.5.x to 0.6.x.  One of my requirements is to handle large data, so I need to be able to provide a large value for `max_buffer_size` when unpacking data. \r\n\r\nI encountered two issues the the msgpack.unpackb() implementations (both in cython and in the fallback python).\r\n\r\nIn the cython implementation, the `max_buffer_size` argument is not supported, so the arguments I would pass to a Unpacker object can not be used there.\r\n\r\nIn the fallback implementation, the `max_buffer_size` argument is interpreted from the input size, and so a kwargs value containing it causes two copies of the same argument to be passed to the fallback Unpacker.\r\n\r\nFrom the API documentation for unpackb(), I would expect these arguments to be passed through blindly.  Link to documentation: https://msgpack-python.readthedocs.io/en/latest/api.html#msgpack.unpack\r\n\r\nI've also attached a set of test code that can be used to demonstrate this issue.\r\n\r\n```\r\nimport traceback\r\n\r\nimport msgpack\r\nimport msgpack.fallback as m_fallback\r\n\r\n# Version check\r\nassert msgpack.version in ((0, 6, 1),)\r\n\r\n# Packer and unpacker args to replicate my environment\r\npacker_kwargs = {\r\n    'use_bin_type': True,\r\n    'unicode_errors': 'surrogatepass',\r\n}\r\n\r\nunpacker_kwargs = {\r\n    'raw': False,\r\n    'use_list': False,\r\n    'max_buffer_size': 2**32-1,  # <------- The important argument\r\n    'unicode_errors': 'surrogatepass'\r\n}\r\n\r\n# Ensure we're using cython\r\npakr = msgpack.Packer(**packer_kwargs)\r\nassert isinstance(pakr, m_fallback.Packer) == False\r\n\r\n# Make a unpacker\r\nunpk = msgpack.Unpacker(**unpacker_kwargs)\r\n\r\n# Constants for making a large struct\r\nkibibyte = 1024\r\nmebibyte = 1024 * kibibyte\r\n\r\nbig_string = mebibyte * 129 * 'V'\r\n\r\nstruct = ('test', {'key': big_string})\r\n\r\n# Pack the struct with msgpack - packing doesn't have any size constraints\r\npacked_data = pakr.pack(struct)\r\n\r\n# Unpack the data with the Unpacker we made earlier and ensure we got the equal object back\r\nunpk.feed(packed_data)\r\nunpacked_struct = unpk.unpack()\r\nassert struct == unpacked_struct\r\n\r\n# Now, try unpacking the data with msgpack.unpackb().\r\ntry:\r\n    msgpack.unpackb(packed_data, **unpacker_kwargs)\r\nexcept TypeError as e:\r\n    print('Exception when unpacking data with msgpack.unpackb() from cython, printing traceback')\r\n    traceback.print_exc()\r\n    assert \"unpackb() got an unexpected keyword argument 'max_buffer_size'\" in str(e)\r\nelse:\r\n    # If we don't raise, this assertion fails...\r\n    assert 1 == 0\r\n\r\n# msgpack.loads would also fail, as it is an alias for unpackb()\r\ntry:\r\n    msgpack.loads(packed_data, **unpacker_kwargs)\r\nexcept TypeError as e:\r\n    assert \"unpackb() got an unexpected keyword argument 'max_buffer_size'\" in str(e)\r\nelse:\r\n    # If we don't raise, this assertion fails...\r\n    assert 1 == 0\r\n\r\n# We can also try the fallback implementation in pure python\r\n\r\n# The msgpack.fallback.Unpacker class works\r\nfallback_unpk = m_fallback.Unpacker(**unpacker_kwargs)\r\nfallback_unpk.feed(packed_data)\r\nfallback_unpacked_struct = fallback_unpk.unpack()\r\nassert struct == fallback_unpacked_struct\r\n\r\n# The fallback implementation does not have loads; but has unpackb available\r\n# msgpack.fallback.unpackb fails in a different fashion\r\ntry:\r\n    m_fallback.unpackb(packed_data, **unpacker_kwargs)\r\nexcept TypeError as e:\r\n    print('Exception when unpacking data with msgpack.fallback.unpackb(), printing traceback')\r\n    traceback.print_exc()\r\n    assert \"type object got multiple values for keyword argument 'max_buffer_size'\" in str(e)\r\nelse:\r\n    # If we don't raise, this assertion fails...\r\n    assert 1 == 0\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/344", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/344/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/344/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/344", "id": 406446268, "node_id": "MDU6SXNzdWU0MDY0NDYyNjg=", "number": 344, "title": "Python 3 support for numpy.int64", "user": {"login": "fersarr", "id": 3913371, "node_id": "MDQ6VXNlcjM5MTMzNzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3913371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fersarr", "html_url": "https://github.com/fersarr", "followers_url": "https://api.github.com/users/fersarr/followers", "following_url": "https://api.github.com/users/fersarr/following{/other_user}", "gists_url": "https://api.github.com/users/fersarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fersarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fersarr/subscriptions", "organizations_url": "https://api.github.com/users/fersarr/orgs", "repos_url": "https://api.github.com/users/fersarr/repos", "events_url": "https://api.github.com/users/fersarr/events{/privacy}", "received_events_url": "https://api.github.com/users/fersarr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-02-04T17:52:17Z", "updated_at": "2020-04-21T14:54:42Z", "closed_at": "2019-02-05T01:34:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think this line:\r\nhttps://github.com/msgpack/msgpack-python/blob/381c2eff5f8ee0b8669fd6daf1fd1ecaffe7c931/msgpack/fallback.py#L15\r\n\r\nshould include `numpy.int64`, because in `Python 3`, `numpy.int64` is no longer a class of `int`. Read more about that here: http://numpy-discussion.10968.n7.nabble.com/Python-3-and-isinstance-np-int64-42-int-td40531.html\r\n\r\nPreviously, In `Python 2`, we were able to do:\r\n```\r\n>>> msgpack.packb([np.int64(3)], encoding='utf-8')\r\n'\\x91\\x03'\r\n```\r\nbut in `Python 3`:\r\n\r\n```\r\nmsgpack.packb([np.int64(3)], encoding='utf-8')\r\n...\r\nFile \"/users/is/ahlpypi/medusa_egg_cache/36-1/m/msgpack_python-0.5.4-py3.6-linux-x86_64.egg/msgpack/fallback.py\", line 848, in _pack                                                                                                                _serialisation.py:98 (0 hits)\r\n    raise TypeError(\"Cannot serialize %r\" % (obj, ))                                                                                                                                                                                                  test_hdf5_pytable.py:297 (0 hits)\r\nTypeError: Cannot serialize 3\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/343", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/343/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/343/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/343", "id": 405966382, "node_id": "MDU6SXNzdWU0MDU5NjYzODI=", "number": 343, "title": "Typo in the latest changelog?", "user": {"login": "bastelfreak", "id": 341866, "node_id": "MDQ6VXNlcjM0MTg2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/341866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bastelfreak", "html_url": "https://github.com/bastelfreak", "followers_url": "https://api.github.com/users/bastelfreak/followers", "following_url": "https://api.github.com/users/bastelfreak/following{/other_user}", "gists_url": "https://api.github.com/users/bastelfreak/gists{/gist_id}", "starred_url": "https://api.github.com/users/bastelfreak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bastelfreak/subscriptions", "organizations_url": "https://api.github.com/users/bastelfreak/orgs", "repos_url": "https://api.github.com/users/bastelfreak/repos", "events_url": "https://api.github.com/users/bastelfreak/events{/privacy}", "received_events_url": "https://api.github.com/users/bastelfreak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-02T09:26:57Z", "updated_at": "2019-02-04T03:08:55Z", "closed_at": "2019-02-04T03:08:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey people!\r\nfirst of all, thanks for the great software!\r\nI read the changelog for the 0.6.1 release. It says:\r\n\r\n> This release is for mitigating pain caused by v0.6.1 ...\r\n\r\nI assume that the v0.6.1 release fixes issues from the v0.6.0 release?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/341", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/341/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/341/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/341", "id": 399864966, "node_id": "MDU6SXNzdWUzOTk4NjQ5NjY=", "number": 341, "title": "msgpack.fallback.Packer.pack is not thread safe", "user": {"login": "yaccz", "id": 455474, "node_id": "MDQ6VXNlcjQ1NTQ3NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/455474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaccz", "html_url": "https://github.com/yaccz", "followers_url": "https://api.github.com/users/yaccz/followers", "following_url": "https://api.github.com/users/yaccz/following{/other_user}", "gists_url": "https://api.github.com/users/yaccz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaccz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaccz/subscriptions", "organizations_url": "https://api.github.com/users/yaccz/orgs", "repos_url": "https://api.github.com/users/yaccz/repos", "events_url": "https://api.github.com/users/yaccz/events{/privacy}", "received_events_url": "https://api.github.com/users/yaccz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-16T15:35:21Z", "updated_at": "2019-01-17T05:04:19Z", "closed_at": "2019-01-17T05:04:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "msgpack.fallback.Packer.pack is not thread safe while the cython implementation seems to be by acquiring GIL. This may be a difference at least worth mentioning somewhere.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/339", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/339/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/339/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/339", "id": 394640086, "node_id": "MDU6SXNzdWUzOTQ2NDAwODY=", "number": 339, "title": "serialization of 64-bit floats broken on iOS ARM 32-bit", "user": {"login": "ivytin", "id": 6918813, "node_id": "MDQ6VXNlcjY5MTg4MTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6918813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivytin", "html_url": "https://github.com/ivytin", "followers_url": "https://api.github.com/users/ivytin/followers", "following_url": "https://api.github.com/users/ivytin/following{/other_user}", "gists_url": "https://api.github.com/users/ivytin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivytin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivytin/subscriptions", "organizations_url": "https://api.github.com/users/ivytin/orgs", "repos_url": "https://api.github.com/users/ivytin/repos", "events_url": "https://api.github.com/users/ivytin/events{/privacy}", "received_events_url": "https://api.github.com/users/ivytin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-28T13:43:48Z", "updated_at": "2019-01-07T12:10:41Z", "closed_at": "2019-01-07T12:10:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "The same [problem](https://github.com/msgpack/msgpack-c/pull/270/commits/2f9912a012391ecb967bfa951b82190b425cefab) has been solved  in msgpack-c, but still exists in msgpack-python.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/338", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/338/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/338/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/338/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/338", "id": 390906569, "node_id": "MDU6SXNzdWUzOTA5MDY1Njk=", "number": 338, "title": "How to increase max_array_len", "user": {"login": "teamatbotticelli", "id": 31136046, "node_id": "MDQ6VXNlcjMxMTM2MDQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/31136046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teamatbotticelli", "html_url": "https://github.com/teamatbotticelli", "followers_url": "https://api.github.com/users/teamatbotticelli/followers", "following_url": "https://api.github.com/users/teamatbotticelli/following{/other_user}", "gists_url": "https://api.github.com/users/teamatbotticelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/teamatbotticelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teamatbotticelli/subscriptions", "organizations_url": "https://api.github.com/users/teamatbotticelli/orgs", "repos_url": "https://api.github.com/users/teamatbotticelli/repos", "events_url": "https://api.github.com/users/teamatbotticelli/events{/privacy}", "received_events_url": "https://api.github.com/users/teamatbotticelli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-13T23:37:47Z", "updated_at": "2019-01-28T08:11:41Z", "closed_at": "2018-12-13T23:41:32Z", "author_association": "NONE", "active_lock_reason": "too heated", "body": "Hello,\r\n\r\nI upgraded from 0.5.x to 0.6.x and somewhere in the middle the option max_array_len has been reduced from 2^32 -1 to 128*1024. My application now breaks because the generated lists are too big.\r\n\r\nIs there any way to set the option from within my application? Something like msgpack.max_array_len = xxx ?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/337", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/337/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/337/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/337", "id": 387812781, "node_id": "MDU6SXNzdWUzODc4MTI3ODE=", "number": 337, "title": "PyPi package hash mismatch", "user": {"login": "ntrepid8", "id": 482948, "node_id": "MDQ6VXNlcjQ4Mjk0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/482948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ntrepid8", "html_url": "https://github.com/ntrepid8", "followers_url": "https://api.github.com/users/ntrepid8/followers", "following_url": "https://api.github.com/users/ntrepid8/following{/other_user}", "gists_url": "https://api.github.com/users/ntrepid8/gists{/gist_id}", "starred_url": "https://api.github.com/users/ntrepid8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ntrepid8/subscriptions", "organizations_url": "https://api.github.com/users/ntrepid8/orgs", "repos_url": "https://api.github.com/users/ntrepid8/repos", "events_url": "https://api.github.com/users/ntrepid8/events{/privacy}", "received_events_url": "https://api.github.com/users/ntrepid8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-05T15:34:30Z", "updated_at": "2018-12-05T16:00:31Z", "closed_at": "2018-12-05T15:53:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `pipenv` to install dependencies and my builds just started throwing hash mismatch errors:\r\n\r\n```\r\n[pipenv.exceptions.InstallError]: ['THESE PACKAGES DO NOT MATCH THE HASHES FROM THE REQUIREMENTS FILE. If you have updated the package versions, please update the hashes. Otherwise, examine the package contents carefully; someone may have tampered with them.', '    msgpack==0.6.0 from https://files.pythonhosted.org/packages/49/15/1857b4d250ca780c1ee3238ba7cd7ded5aeb1df27ed5d039a2034cd69a96/msgpack-0.6.0-cp27-cp27mu-manylinux1_x86_64.whl#sha256=8d0af8d64198e4b4f942a15ea9cb0dd9c4a0bd3e4e2ba57425e108bdbd4c3a0f (from -r /tmp/pipenv-3B8qWq-requirements/pipenv-gl3LBE-requirement.txt (line 1)):', '        Expected sha256 102802a9433dcf36f939b632cce9dea87310b2f163bb37ffc8bc343677726e88', '        Expected     or 64abc6bf3a2ac301702f5760f4e6e227d0fd4d84d9014ef9a40faa9d43365259', '        Expected     or 72259661a83f8b08ef6ee83927ce4937f841226735824af5b10a536d886eeb36', '        Expected     or 85f1342b9d7549dd3daf494100d47a3dc7daae703cdbfc2c9ee7bbdc8a492cba', '        Expected     or 8ce9f88b6cb75d74eda2a5522e5c2e5ec0f17fd78605d6502abb61f46b306865', '        Expected     or 9936ce3a530ca78db60b6631003b5f4ba383cfb1d9830a27d1b5c61857226e2f', '        Expected     or cb4e228f3d93779a1d77a1e9d72759b79dfa2975c1a5bd2a090eaa98239fa4b1', '             Got        8d0af8d64198e4b4f942a15ea9cb0dd9c4a0bd3e4e2ba57425e108bdbd4c3a0f']\r\n```\r\n\r\nIt looks like the original release for `0.6.0` happened on 2018-11-30 but some of the files were updated on 2018-12-04. I looked around but did not see any explanation for the new packages. Since `pipenv` is throwing a warning about tampering I thought I should check:\r\n> someone may have tampered with them\r\n\r\n![selection_100](https://user-images.githubusercontent.com/482948/49524196-4fe5ed80-f879-11e8-8f77-477524f28a56.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/336", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/336/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/336/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/336", "id": 386589001, "node_id": "MDU6SXNzdWUzODY1ODkwMDE=", "number": 336, "title": "Better buffer protocol support", "user": {"login": "jakirkham", "id": 3019665, "node_id": "MDQ6VXNlcjMwMTk2NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakirkham", "html_url": "https://github.com/jakirkham", "followers_url": "https://api.github.com/users/jakirkham/followers", "following_url": "https://api.github.com/users/jakirkham/following{/other_user}", "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions", "organizations_url": "https://api.github.com/users/jakirkham/orgs", "repos_url": "https://api.github.com/users/jakirkham/repos", "events_url": "https://api.github.com/users/jakirkham/events{/privacy}", "received_events_url": "https://api.github.com/users/jakirkham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-02T19:08:00Z", "updated_at": "2018-12-02T22:43:10Z", "closed_at": "2018-12-02T22:43:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would be nice if `packb` and friends were able to handle more complex buffers. Namely if it could handle buffers with types other than `uint8` like `PyObject*`. Also handling a shape would be nice. This can be handy when passing in a NumPy array of `object` type to `packb`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/335", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/335/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/335/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/335", "id": 386256859, "node_id": "MDU6SXNzdWUzODYyNTY4NTk=", "number": 335, "title": "No manylinux wheels for 0.6.0?", "user": {"login": "jessecarbon", "id": 20824912, "node_id": "MDQ6VXNlcjIwODI0OTEy", "avatar_url": "https://avatars1.githubusercontent.com/u/20824912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jessecarbon", "html_url": "https://github.com/jessecarbon", "followers_url": "https://api.github.com/users/jessecarbon/followers", "following_url": "https://api.github.com/users/jessecarbon/following{/other_user}", "gists_url": "https://api.github.com/users/jessecarbon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jessecarbon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jessecarbon/subscriptions", "organizations_url": "https://api.github.com/users/jessecarbon/orgs", "repos_url": "https://api.github.com/users/jessecarbon/repos", "events_url": "https://api.github.com/users/jessecarbon/events{/privacy}", "received_events_url": "https://api.github.com/users/jessecarbon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-30T16:24:14Z", "updated_at": "2018-12-04T08:36:23Z", "closed_at": "2018-12-04T08:36:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pypi has `manylinux` [wheels for `msgpack` up to `0.5.6`](https://pypi.org/project/msgpack/0.5.6/#files), however there are only [windows wheels for `0.6.0`](https://pypi.org/project/msgpack/0.6.0/#files). I realize this was released today, just wondering if there will be `manylinux` wheels, since it takes a bit longer to install without them.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/333", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/333/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/333/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/333/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/333", "id": 384324997, "node_id": "MDU6SXNzdWUzODQzMjQ5OTc=", "number": 333, "title": "Cython bindings not working", "user": {"login": "trololo88", "id": 1215423, "node_id": "MDQ6VXNlcjEyMTU0MjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1215423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trololo88", "html_url": "https://github.com/trololo88", "followers_url": "https://api.github.com/users/trololo88/followers", "following_url": "https://api.github.com/users/trololo88/following{/other_user}", "gists_url": "https://api.github.com/users/trololo88/gists{/gist_id}", "starred_url": "https://api.github.com/users/trololo88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trololo88/subscriptions", "organizations_url": "https://api.github.com/users/trololo88/orgs", "repos_url": "https://api.github.com/users/trololo88/repos", "events_url": "https://api.github.com/users/trololo88/events{/privacy}", "received_events_url": "https://api.github.com/users/trololo88/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-26T13:13:54Z", "updated_at": "2018-11-26T15:01:21Z", "closed_at": "2018-11-26T14:59:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Cython bindings doesn't work, works only in fallback mode.\r\nTested with this line from `msgpack.__init__.py`:\r\n\r\n`from msgpack._packer import Packer`\r\n\r\nGetting this error:\r\n\r\n`ModuleNotFoundError: No module named 'msgpack._packer'`\r\n\r\nI understand this means than fallback mode will be used.\r\nTested on python versions 2.7, 3.7\r\n\r\ngcc throws some deprecation warnings, but no errors.\r\n\r\nSteps to reproduce:\r\n```\r\n# get code\r\ngit clone https://github.com/msgpack/msgpack-python ~/msgpack-python\r\ncd ~/msgpack-python\r\ngit checkout 5.6.0\r\n\r\n# setup venv\r\nvirtualenv3 ~/venv\r\n\r\n# from requirements.txt\r\n~/venv/bin/pip install Cython==0.27.3\r\n\r\n# install \r\n~/venv/bin/python setup.py install\r\n\r\n# test\r\n~/venv/bin/python -c \"from msgpack._packer import Packer\"\r\n\r\n# error\r\n# ModuleNotFoundError: No module named 'msgpack._packer'\r\n```\r\n\r\n\r\nbuild log:\r\n\r\n```\r\nrunning build\r\nrunning build_py\r\ncreating build\r\ncreating build/lib.linux-x86_64-3.7\r\ncreating build/lib.linux-x86_64-3.7/msgpack\r\ncopying msgpack/_version.py -> build/lib.linux-x86_64-3.7/msgpack\r\ncopying msgpack/fallback.py -> build/lib.linux-x86_64-3.7/msgpack\r\ncopying msgpack/exceptions.py -> build/lib.linux-x86_64-3.7/msgpack\r\ncopying msgpack/__init__.py -> build/lib.linux-x86_64-3.7/msgpack\r\nrunning build_ext\r\nbuilding 'msgpack._packer' extension\r\ncreating build/temp.linux-x86_64-3.7\r\ncreating build/temp.linux-x86_64-3.7/msgpack\r\ngcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -march=x86-64 -mtune=generic -O3 -pipe -fstack-protector-strong -fno-plt -flto=4 -fuse-linker-plugin -ffat-lto-objects -flto-partition=none -g -march=x86-64 -mtune=generic -O3 -pipe -fstack-protector-strong -fno-plt -march=x86-64 -mtune=generic -O3 -pipe -fstack-protector-strong -fno-plt -fPIC -D__LITTLE_ENDIAN__=1 -I. -I/usr/include/python3.7m -c msgpack/_packer.cpp -o build/temp.linux-x86_64-3.7/msgpack/_packer.o\r\ng++ -pthread -shared -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -flto=4 -fuse-linker-plugin -ffat-lto-objects -flto-partition=none -g -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now build/temp.linux-x86_64-3.7/msgpack/_packer.o -L/usr/lib -lpython3.7m -o build/lib.linux-x86_64-3.7/msgpack/_packer.cpython-37m-x86_64-linux-gnu.so\r\nbuilding 'msgpack._unpacker' extension\r\ngcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -march=x86-64 -mtune=generic -O3 -pipe -fstack-protector-strong -fno-plt -flto=4 -fuse-linker-plugin -ffat-lto-objects -flto-partition=none -g -march=x86-64 -mtune=generic -O3 -pipe -fstack-protector-strong -fno-plt -march=x86-64 -mtune=generic -O3 -pipe -fstack-protector-strong -fno-plt -fPIC -D__LITTLE_ENDIAN__=1 -I. -I/usr/include/python3.7m -c msgpack/_unpacker.cpp -o build/temp.linux-x86_64-3.7/msgpack/_unpacker.o\r\nmsgpack/_unpacker.cpp: In function \u2018int __pyx_f_7msgpack_9_unpacker_get_data_from_buffer(PyObject*, Py_buffer*, char**, Py_ssize_t*, int*)\u2019:\r\nmsgpack/_unpacker.cpp:2198:100: warning: \u2018int PyObject_AsReadBuffer(PyObject*, const void**, Py_ssize_t*)\u2019 is deprecated [-Wdeprecated-declarations]\r\n     __pyx_t_2 = PyObject_AsReadBuffer(__pyx_v_obj, ((void const **)__pyx_v_buf), __pyx_v_buffer_len); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 152, __pyx_L1_error)\r\n                                                                                                    ^\r\nIn file included from /usr/include/python3.7m/Python.h:128,\r\n                 from msgpack/_unpacker.cpp:4:\r\n/usr/include/python3.7m/abstract.h:489:17: note: declared here\r\n PyAPI_FUNC(int) PyObject_AsReadBuffer(PyObject *obj,\r\n                 ^~~~~~~~~~~~~~~~~~~~~\r\nmsgpack/_unpacker.cpp:2198:100: warning: \u2018int PyObject_AsReadBuffer(PyObject*, const void**, Py_ssize_t*)\u2019 is deprecated [-Wdeprecated-declarations]\r\n     __pyx_t_2 = PyObject_AsReadBuffer(__pyx_v_obj, ((void const **)__pyx_v_buf), __pyx_v_buffer_len); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 152, __pyx_L1_error)\r\n                                                                                                    ^\r\nIn file included from /usr/include/python3.7m/Python.h:128,\r\n                 from msgpack/_unpacker.cpp:4:\r\n/usr/include/python3.7m/abstract.h:489:17: note: declared here\r\n PyAPI_FUNC(int) PyObject_AsReadBuffer(PyObject *obj,\r\n                 ^~~~~~~~~~~~~~~~~~~~~\r\ng++ -pthread -shared -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now -flto=4 -fuse-linker-plugin -ffat-lto-objects -flto-partition=none -g -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now build/temp.linux-x86_64-3.7/msgpack/_unpacker.o -L/usr/lib -lpython3.7m -o build/lib.linux-x86_64-3.7/msgpack/_unpacker.cpython-37m-x86_64-linux-gnu.so\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/326", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/326/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/326/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/326", "id": 379848602, "node_id": "MDU6SXNzdWUzNzk4NDg2MDI=", "number": 326, "title": "Choosing float / double packing precision for each field", "user": {"login": "mz8i", "id": 36160844, "node_id": "MDQ6VXNlcjM2MTYwODQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/36160844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mz8i", "html_url": "https://github.com/mz8i", "followers_url": "https://api.github.com/users/mz8i/followers", "following_url": "https://api.github.com/users/mz8i/following{/other_user}", "gists_url": "https://api.github.com/users/mz8i/gists{/gist_id}", "starred_url": "https://api.github.com/users/mz8i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mz8i/subscriptions", "organizations_url": "https://api.github.com/users/mz8i/orgs", "repos_url": "https://api.github.com/users/mz8i/repos", "events_url": "https://api.github.com/users/mz8i/events{/privacy}", "received_events_url": "https://api.github.com/users/mz8i/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-12T16:14:45Z", "updated_at": "2018-11-12T16:27:06Z", "closed_at": "2018-11-12T16:27:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it at all possible to determine whether a floating-point number should be serialised in `packb` as a float or a double?\r\nThe `use_single_float` parameter can force a single-precision serialisation for all fields. For bandwidth reasons I would like to use this for all fields in my data structure apart from one, which I would like to keep as a double-precision float. Is this possible with the current API?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/325", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/325/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/325/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/325", "id": 379752305, "node_id": "MDU6SXNzdWUzNzk3NTIzMDU=", "number": 325, "title": "[RFC] Unpacker: deprecate file_like, and add callback or iter instead.", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-12T12:21:17Z", "updated_at": "2019-12-05T12:23:38Z", "closed_at": "2019-12-05T12:23:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`Unpacker(file)` is a handy tool for stream unpacking from file-like object.\r\nBut it introduces many complexities to `Unpacker` class.\r\n\r\nTo make Unpacker more simple, let's split \"read from file\" feature out from Unpacker.\r\nThis feature can be implemented in a utility class.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/324", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/324/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/324/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/324", "id": 379175061, "node_id": "MDU6SXNzdWUzNzkxNzUwNjE=", "number": 324, "title": "Add msgpack specific exception types", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-09T14:06:58Z", "updated_at": "2018-11-20T04:12:49Z", "closed_at": "2018-11-20T04:12:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### Unpacker\r\n\r\nInvalidSequence -- it's not msgpack.\r\nNestLimitExceeded -- too nested.\r\n\r\nany more ?\r\n\r\n### Packer\r\n\r\nany?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/318", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/318/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/318/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/318", "id": 378648684, "node_id": "MDU6SXNzdWUzNzg2NDg2ODQ=", "number": 318, "title": "Why `raw=False` still return byte dict?", "user": {"login": "hustlibraco", "id": 5344453, "node_id": "MDQ6VXNlcjUzNDQ0NTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5344453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hustlibraco", "html_url": "https://github.com/hustlibraco", "followers_url": "https://api.github.com/users/hustlibraco/followers", "following_url": "https://api.github.com/users/hustlibraco/following{/other_user}", "gists_url": "https://api.github.com/users/hustlibraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hustlibraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hustlibraco/subscriptions", "organizations_url": "https://api.github.com/users/hustlibraco/orgs", "repos_url": "https://api.github.com/users/hustlibraco/repos", "events_url": "https://api.github.com/users/hustlibraco/events{/privacy}", "received_events_url": "https://api.github.com/users/hustlibraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-08T09:37:28Z", "updated_at": "2018-11-08T09:47:43Z", "closed_at": "2018-11-08T09:47:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nIn [20]: x = {b'result': b'success', b'token': b'TEMPQtdfg3Kee4KjwR1Yo7lprSwSVsUU'}                                                                                                                               \r\n\r\nIn [21]: msgpack.packb(x, use_bin_type=True)                                                                                                                                                                      \r\nOut[21]: b'\\x82\\xc4\\x06result\\xc4\\x07success\\xc4\\x05token\\xc4 TEMPQtdfg3Kee4KjwR1Yo7lprSwSVsUU'\r\n\r\nIn [22]: msgpack.unpackb(_, raw=False)                                                                                                                                                                            \r\nOut[22]: {b'result': b'success', b'token': b'TEMPQtdfg3Kee4KjwR1Yo7lprSwSVsUU'}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/316", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/316/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/316/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/316", "id": 372623623, "node_id": "MDU6SXNzdWUzNzI2MjM2MjM=", "number": 316, "title": "Add support for Timestamp extension", "user": {"login": "brandond", "id": 370103, "node_id": "MDQ6VXNlcjM3MDEwMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/370103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandond", "html_url": "https://github.com/brandond", "followers_url": "https://api.github.com/users/brandond/followers", "following_url": "https://api.github.com/users/brandond/following{/other_user}", "gists_url": "https://api.github.com/users/brandond/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandond/subscriptions", "organizations_url": "https://api.github.com/users/brandond/orgs", "repos_url": "https://api.github.com/users/brandond/repos", "events_url": "https://api.github.com/users/brandond/events{/privacy}", "received_events_url": "https://api.github.com/users/brandond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-22T17:44:51Z", "updated_at": "2019-12-05T12:24:58Z", "closed_at": "2019-12-05T12:24:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Timestamp extension was added to msgpack spec in https://github.com/msgpack/msgpack/commit/40e3d3db8985528d41a0ded1f9581cede270ec95 over a year ago.\r\nSample pure python code to serialize/deserialize from datetime was provided in #252, but rejected due to lack of TZ offset support in the timestamp extension.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/313", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/313/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/313/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/313/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/313", "id": 366259349, "node_id": "MDU6SXNzdWUzNjYyNTkzNDk=", "number": 313, "title": "unpacker: Add raw_as_bytes option and deprecate encoding, errors option.", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-03T09:56:19Z", "updated_at": "2018-10-03T11:14:38Z", "closed_at": "2018-10-03T11:14:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/312", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/312/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/312/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/312", "id": 366259322, "node_id": "MDU6SXNzdWUzNjYyNTkzMjI=", "number": 312, "title": "packer: deprecate encoding and unicode_errors option", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-03T09:56:14Z", "updated_at": "2018-10-03T11:14:55Z", "closed_at": "2018-10-03T11:14:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/311", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/311/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/311/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/311", "id": 366259260, "node_id": "MDU6SXNzdWUzNjYyNTkyNjA=", "number": 311, "title": "Remove some exception types", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-03T09:56:03Z", "updated_at": "2018-11-11T17:19:01Z", "closed_at": "2018-11-11T17:19:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "ref: #233", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/308", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/308/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/308/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/308", "id": 343171633, "node_id": "MDU6SXNzdWUzNDMxNzE2MzM=", "number": 308, "title": "This is an exciting wheel! Much mach faster than json! Thank you guys~!", "user": {"login": "echo-ray", "id": 26795238, "node_id": "MDQ6VXNlcjI2Nzk1MjM4", "avatar_url": "https://avatars0.githubusercontent.com/u/26795238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echo-ray", "html_url": "https://github.com/echo-ray", "followers_url": "https://api.github.com/users/echo-ray/followers", "following_url": "https://api.github.com/users/echo-ray/following{/other_user}", "gists_url": "https://api.github.com/users/echo-ray/gists{/gist_id}", "starred_url": "https://api.github.com/users/echo-ray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echo-ray/subscriptions", "organizations_url": "https://api.github.com/users/echo-ray/orgs", "repos_url": "https://api.github.com/users/echo-ray/repos", "events_url": "https://api.github.com/users/echo-ray/events{/privacy}", "received_events_url": "https://api.github.com/users/echo-ray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-20T16:30:14Z", "updated_at": "2018-07-20T16:33:09Z", "closed_at": "2018-07-20T16:30:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "`json.dumps` & `loads` data takes a lot of time  before write and after read with Redis.\r\nAnd `msgpack.pack`&`unpack` is just amazing fast!\r\nAnd I also don't need to worry about the float precision problem in ujson. \r\nIt`s great~!!\r\n\r\nI opened this issue just wanna say my thanks !!!\r\n(And I would say sorry if bothered you guys)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/306", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/306/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/306/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/306", "id": 340960987, "node_id": "MDU6SXNzdWUzNDA5NjA5ODc=", "number": 306, "title": "reintroduce Python 3.4 support?", "user": {"login": "FelixSchwarz", "id": 212753, "node_id": "MDQ6VXNlcjIxMjc1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/212753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixSchwarz", "html_url": "https://github.com/FelixSchwarz", "followers_url": "https://api.github.com/users/FelixSchwarz/followers", "following_url": "https://api.github.com/users/FelixSchwarz/following{/other_user}", "gists_url": "https://api.github.com/users/FelixSchwarz/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixSchwarz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixSchwarz/subscriptions", "organizations_url": "https://api.github.com/users/FelixSchwarz/orgs", "repos_url": "https://api.github.com/users/FelixSchwarz/repos", "events_url": "https://api.github.com/users/FelixSchwarz/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixSchwarz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-07-13T10:10:01Z", "updated_at": "2018-07-13T11:37:03Z", "closed_at": "2018-07-13T11:08:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In #249 testing for Python 3.4 was removed (together with Python 2.6 and 3.3). Due to some unfortunate events msgpack 0.5.6 landed in Fedora EPEL 7 (RHEL/CentOS 7) and broke borgbackup which uses Pyton 3.4 there.\r\n\r\nIssue #249 contains some [statistics](https://github.com/msgpack/msgpack-python/pull/249#issuecomment-341258286) which show that Python 3.4 usage was not that much lower than 3.5/3.6 (about 2.9% vs. 6.2% vs. 6.6%).\r\n\r\nIs there any chance we could reintroduce Python 3.4 support in msgpack or did you encounter too many issues with that version of Python?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/305", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/305/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/305/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/305", "id": 337409477, "node_id": "MDU6SXNzdWUzMzc0MDk0Nzc=", "number": 305, "title": "Kwargs default/object_hook ignored for tuple/list?", "user": {"login": "h-vetinari", "id": 33685575, "node_id": "MDQ6VXNlcjMzNjg1NTc1", "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-vetinari", "html_url": "https://github.com/h-vetinari", "followers_url": "https://api.github.com/users/h-vetinari/followers", "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}", "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions", "organizations_url": "https://api.github.com/users/h-vetinari/orgs", "repos_url": "https://api.github.com/users/h-vetinari/repos", "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}", "received_events_url": "https://api.github.com/users/h-vetinari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-02T08:03:40Z", "updated_at": "2018-07-02T09:05:02Z", "closed_at": "2018-07-02T08:07:50Z", "author_association": "NONE", "active_lock_reason": "too heated", "body": "I understand that `msgpack` has a single array-type, that both `tuple` and `list` both get mapped to (and that this is the reason for the `use_list`-kwarg).\r\n\r\nHowever, the `list/tuple` distinction is essential in Python, and one can't fully emulate the other (e.g. `tuple` is hashable, `list` isn't; `list` has an `.append`-method, `tuple` doesn't). For this reason, I *need* to reconstruct tuples and lists correctly, e.g. `[(1, 'a'), (2, 'b'), (3, 'c')]` -- actually, arbitrary nestings of `tuple/list/dict`.\r\n\r\nCurrently (v0.5.6), this does not work:\r\n```\r\norig = [(1, 'a'), (2, 'b'), (3, 'c')]\r\npacked = msgpack.packb(orig, use_bin_type=True)\r\npacked\r\n# b'\\x93\\x92\\x01\\xa1a\\x92\\x02\\xa1b\\x92\\x03\\xa1c'\r\n\r\nunpacked = msgpack.unpackb(packed, raw=False)\r\nunpacked\r\n# [[1, 'a'], [2, 'b'], [3, 'c']]\r\nunpacked == orig\r\n# False\r\n\r\nunpacked = msgpack.unpackb(packed, use_list=False, raw=False)\r\nunpacked\r\n# ((1, 'a'), (2, 'b'), (3, 'c'))\r\nunpacked == orig\r\n# False\r\n```\r\n\r\nSo now to the actual question - I thought I could use the `default/object_hook` keywords to help me out, but this does not work for `list/tuple`, even though it *does* work for sets (and all the types covered by `pandas.io.packer.encode/decode`).\r\n\r\n```\r\ndef encode(obj):\r\n    if isinstance(obj, (list, set, tuple)):\r\n        return {'t': type(obj).__name__, # type\r\n                'v': tuple(obj)} # values\r\n    return obj\r\n\r\ndef decode(obj):\r\n    otype = obj.get('t', None)\r\n    if otype is None:\r\n        return obj\r\n    elif otype == 'tuple':\r\n        return obj['v']\r\n    elif otype == 'list':\r\n        return list(obj['v'])\r\n    elif otype == 'set':\r\n        return set(obj['v'])\r\n    else:\r\n        return obj\r\n\r\n### works for set\r\norig = [{1, 'a'}, {2, 'b'}, {3, 'c'}]\r\npacked = msgpack.packb(orig, default=encode, use_bin_type=True)\r\npacked\r\n# b'\\x93\\x82\\xa1t\\xa3set\\xa1v\\x92\\x01\\xa1a\\x82\\xa1t\\xa3set\\xa1v\\x92\\xa1b\\x02\\x82\\xa1t\\xa3set\\xa1v\\x92\\x03\\xa1c'\r\n\r\nunpacked = msgpack.unpackb(packed, object_hook=decode, raw=False)\r\nunpacked == orig\r\n# True\r\n\r\n### but does not work for tuple/list\r\norig = [(1, 'a'), (2, 'b'), (3, 'c')]\r\npacked = msgpack.packb(orig, default=encode, use_bin_type=True)\r\npacked # no change!\r\n# b'\\x93\\x92\\x01\\xa1a\\x92\\x02\\xa1b\\x92\\x03\\xa1c'\r\n\r\nunpacked = msgpack.unpackb(packed, object_hook=decode, raw=False)\r\nunpacked\r\n# [[1, 'a'], [2, 'b'], [3, 'c']]\r\nunpacked == orig\r\n# False\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/303", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/303/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/303/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/303", "id": 333651569, "node_id": "MDU6SXNzdWUzMzM2NTE1Njk=", "number": 303, "title": "TypeError can't concat memoryview to bytearray", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-19T12:35:42Z", "updated_at": "2018-07-06T03:40:34Z", "closed_at": "2018-07-06T03:40:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Attempting to run pip on Jython 2.7.1, I run into the error reported in pypa/pip#5296.\r\n\r\nTraceback points at msgpack as the culprit. Here's the tail of it:\r\n\r\n```\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/requests/sessions.py\", line 618, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/cachecontrol/adapter.py\", line 42, in send\r\n    cached_response = self.controller.cached_request(request)\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/cachecontrol/adapter.py\", line 42, in send\r\n    cached_response = self.controller.cached_request(request)\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/cachecontrol/controller.py\", line 137, in cached_request\r\n    resp = self.serializer.loads(request, cache_data)\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/cachecontrol/serialize.py\", line 98, in loads\r\n    return getattr(self, \"_loads_v{0}\".format(ver))(request, data)\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/cachecontrol/serialize.py\", line 98, in loads\r\n    return getattr(self, \"_loads_v{0}\".format(ver))(request, data)\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/cachecontrol/serialize.py\", line 190, in _loads_v4\r\n    cached = msgpack.loads(data, encoding='utf-8')\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/cachecontrol/serialize.py\", line 190, in _loads_v4\r\n    cached = msgpack.loads(data, encoding='utf-8')\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/msgpack/fallback.py\", line 119, in unpackb\r\n    unpacker.feed(packed)\r\n  File \"/usr/local/Cellar/jython/2.7.1/libexec/Lib/site-packages/pip/_vendor/msgpack/fallback.py\", line 298, in feed\r\n    self._buffer += view\r\nTypeError: can't concat memoryview to bytearray\r\n```\r\n\r\nIt would be nice to see this fixed, as jython is hobbled without a working pip.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/302", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/302/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/302/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/302", "id": 322735589, "node_id": "MDU6SXNzdWUzMjI3MzU1ODk=", "number": 302, "title": "Optionally control packing as int or uint", "user": {"login": "itaiin", "id": 3061360, "node_id": "MDQ6VXNlcjMwNjEzNjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3061360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itaiin", "html_url": "https://github.com/itaiin", "followers_url": "https://api.github.com/users/itaiin/followers", "following_url": "https://api.github.com/users/itaiin/following{/other_user}", "gists_url": "https://api.github.com/users/itaiin/gists{/gist_id}", "starred_url": "https://api.github.com/users/itaiin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itaiin/subscriptions", "organizations_url": "https://api.github.com/users/itaiin/orgs", "repos_url": "https://api.github.com/users/itaiin/repos", "events_url": "https://api.github.com/users/itaiin/events{/privacy}", "received_events_url": "https://api.github.com/users/itaiin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-14T09:21:45Z", "updated_at": "2018-05-14T09:47:20Z", "closed_at": "2018-05-14T09:39:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "A little context:\r\nI am writing a piece of code which supposed to send epoch timestamps to a service (Metrictank) encoded in msgpack.\r\nThe problem is this: the recieving software is written in golang and expects these timestamps strictly as an `int`, but `msgpack-python` is encoding them as `uint`, since the values are obviously positive. \r\n\r\nI searched documentation as well as the msgpack-python code but haven't been able to find a way to control this encoding. for example some sort of  `EnforceType` class that can wrap the value with a desired code when absolutely needed?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/301", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/301/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/301/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/301/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/301", "id": 317641586, "node_id": "MDU6SXNzdWUzMTc2NDE1ODY=", "number": 301, "title": "Package rename broke saltstack on FreeBSD", "user": {"login": "tylerburns", "id": 1830390, "node_id": "MDQ6VXNlcjE4MzAzOTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1830390?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerburns", "html_url": "https://github.com/tylerburns", "followers_url": "https://api.github.com/users/tylerburns/followers", "following_url": "https://api.github.com/users/tylerburns/following{/other_user}", "gists_url": "https://api.github.com/users/tylerburns/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerburns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerburns/subscriptions", "organizations_url": "https://api.github.com/users/tylerburns/orgs", "repos_url": "https://api.github.com/users/tylerburns/repos", "events_url": "https://api.github.com/users/tylerburns/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerburns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-25T14:00:50Z", "updated_at": "2018-10-02T12:41:16Z", "closed_at": "2018-10-02T12:41:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Renaming the package to just msgpack is causing saltstack on FreeBSD to refuse to run because it thinks the package isn't there. I'm sure a lot of folks would appreciate it if this were added to the change log.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/299", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/299/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/299/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/299/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/299", "id": 314331718, "node_id": "MDU6SXNzdWUzMTQzMzE3MTg=", "number": 299, "title": "TypeError on Python 2.7.3, as seen with pip 10 on debian wheezy", "user": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-14T14:07:11Z", "updated_at": "2018-05-26T15:55:10Z", "closed_at": "2018-05-26T15:55:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nException:\r\nTraceback (most recent call last):\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/basecommand.py\", line 228, in main\r\n    status = self.run(options, args)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/commands/install.py\", line 291, in run\r\n    resolver.resolve(requirement_set)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/resolve.py\", line 103, in resolve\r\n    self._resolve_one(requirement_set, req)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/resolve.py\", line 257, in _resolve_one\r\n    abstract_dist = self._get_abstract_dist_for(req_to_install)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/resolve.py\", line 210, in _get_abstract_dist_for\r\n    self.require_hashes\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/operations/prepare.py\", line 243, in prepare_linked_requirement\r\n    req.populate_link(finder, upgrade_allowed, require_hashes)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/req/req_install.py\", line 307, in populate_link\r\n    self.link = finder.find_requirement(self, upgrade)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/index.py\", line 484, in find_requirement\r\n    all_candidates = self.find_all_candidates(req.name)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/index.py\", line 442, in find_all_candidates\r\n    for page in self._get_pages(url_locations, project_name):\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/index.py\", line 587, in _get_pages\r\n    page = self._get_page(location)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/index.py\", line 705, in _get_page\r\n    return HTMLPage.get_page(link, session=self.session)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/index.py\", line 814, in get_page\r\n    \"Cache-Control\": \"max-age=600\",\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/requests/sessions.py\", line 521, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_internal/download.py\", line 397, in request\r\n    return super(PipSession, self).request(method, url, *args, **kwargs)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/requests/sessions.py\", line 508, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/requests/sessions.py\", line 618, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/cachecontrol/adapter.py\", line 42, in send\r\n    cached_response = self.controller.cached_request(request)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/cachecontrol/controller.py\", line 137, in cached_request\r\n    resp = self.serializer.loads(request, cache_data)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/cachecontrol/serialize.py\", line 98, in loads\r\n    return getattr(self, \"_loads_v{0}\".format(ver))(request, data)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/cachecontrol/serialize.py\", line 190, in _loads_v4\r\n    cached = msgpack.loads(data, encoding='utf-8')\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/msgpack/fallback.py\", line 121, in unpackb\r\n    ret = unpacker._unpack()\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/msgpack/fallback.py\", line 600, in _unpack\r\n    ret[key] = self._unpack(EX_CONSTRUCT)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/msgpack/fallback.py\", line 600, in _unpack\r\n    ret[key] = self._unpack(EX_CONSTRUCT)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/msgpack/fallback.py\", line 560, in _unpack\r\n    typ, n, obj = self._read_header(execute)\r\n  File \"/var/jenkins_home/workspace/3610-6MJAZQSTTEPICPG/cryptography/.tox/py27/local/lib/python2.7/site-packages/pip/_vendor/msgpack/fallback.py\", line 391, in _read_header\r\n    n = struct.unpack_from(\">H\", self._buffer, self._buff_i)[0]\r\nTypeError: unpack_from() argument 1 must be string or read-only buffer, not bytearray\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/298", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/298/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/298/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/298", "id": 313106782, "node_id": "MDU6SXNzdWUzMTMxMDY3ODI=", "number": 298, "title": "only pre-releases on github-releases", "user": {"login": "ThomasWaldmann", "id": 356103, "node_id": "MDQ6VXNlcjM1NjEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/356103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThomasWaldmann", "html_url": "https://github.com/ThomasWaldmann", "followers_url": "https://api.github.com/users/ThomasWaldmann/followers", "following_url": "https://api.github.com/users/ThomasWaldmann/following{/other_user}", "gists_url": "https://api.github.com/users/ThomasWaldmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThomasWaldmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThomasWaldmann/subscriptions", "organizations_url": "https://api.github.com/users/ThomasWaldmann/orgs", "repos_url": "https://api.github.com/users/ThomasWaldmann/repos", "events_url": "https://api.github.com/users/ThomasWaldmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ThomasWaldmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-10T22:08:33Z", "updated_at": "2018-04-11T09:59:58Z", "closed_at": "2018-04-11T06:04:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "just noticed that all 0.5.x stuff on github releases is marked as pre-release and only 0.4.6 is marked as \"latest release\".\r\n\r\nhttps://github.com/msgpack/msgpack-python/releases\r\n\r\nis this on purpose?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/297", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/297/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/297/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/297", "id": 308677934, "node_id": "MDU6SXNzdWUzMDg2Nzc5MzQ=", "number": 297, "title": "Cannot import PackOverflowError python 3.6.4_4", "user": {"login": "candland", "id": 7587, "node_id": "MDQ6VXNlcjc1ODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/candland", "html_url": "https://github.com/candland", "followers_url": "https://api.github.com/users/candland/followers", "following_url": "https://api.github.com/users/candland/following{/other_user}", "gists_url": "https://api.github.com/users/candland/gists{/gist_id}", "starred_url": "https://api.github.com/users/candland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/candland/subscriptions", "organizations_url": "https://api.github.com/users/candland/orgs", "repos_url": "https://api.github.com/users/candland/repos", "events_url": "https://api.github.com/users/candland/events{/privacy}", "received_events_url": "https://api.github.com/users/candland/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-26T18:07:00Z", "updated_at": "2018-03-26T19:37:40Z", "closed_at": "2018-03-26T19:37:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "On OSX 10.12.6\r\nPython3 installed w/ brew.\r\n\r\n```bash\r\n`--> python3\r\nPython 3.6.4 (default, Mar 22 2018, 14:11:17)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import msgpack\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/msgpack/__init__.py\", line 25, in <module>\r\n    from msgpack._packer import Packer\r\n  File \"msgpack/_packer.pyx\", line 8, in init msgpack._packer\r\nImportError: cannot import name PackOverflowError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/site-packages/msgpack/__init__.py\", line 28, in <module>\r\n    from msgpack.fallback import Packer, unpackb, Unpacker\r\n  File \"/usr/local/lib/python3.6/site-packages/msgpack/fallback.py\", line 52, in <module>\r\n    from msgpack.exceptions import (\r\nImportError: cannot import name 'PackOverflowError'\r\n```\r\nI'm probably missing something. Appreciate any suggestions to getting this working.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/296", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/296/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/296/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/296", "id": 306377562, "node_id": "MDU6SXNzdWUzMDYzNzc1NjI=", "number": 296, "title": "Option for restrict map keys", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-19T08:56:43Z", "updated_at": "2018-11-30T02:47:40Z", "closed_at": "2018-11-30T02:47:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "While msgpack spec doesn't prohibit any map keys, some languages allows only str as map keys.\r\nSo it's recommended for cross language compatibility.\r\n\r\nFor packer, it is useful to detect (unexpected) bin keys.\r\nFor unpacker, it is important to prevent \"hashdos\" attack too.\r\n\r\n* 0.6: Add `strict_map_key` option to packer and unpacker.  False by default.\r\n* 1.0: Make it true by default.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/295", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/295/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/295/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/295/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/295", "id": 306375932, "node_id": "MDU6SXNzdWUzMDYzNzU5MzI=", "number": 295, "title": "Change default decoder limits", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-03-19T08:50:49Z", "updated_at": "2019-01-29T04:53:38Z", "closed_at": "2018-11-08T13:21:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Current default limits seems too large.  It can cause DoS attack.\r\nChange default value to more safe value.\r\n\r\nCurrent plan is \"about 1MiB on amd64 system\".\r\n\r\n* `max_bin_len`: 1024*1024\r\n* `max_str_len`: 1024*1024\r\n* `max_array_len`: 1024*1024/8  (each pointer has 8 bytes)\r\n* `max_map_len`: 1024*1024/32  (8byte key,hash,value, and some extra space)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/294", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/294/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/294/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/294", "id": 303166497, "node_id": "MDU6SXNzdWUzMDMxNjY0OTc=", "number": 294, "title": "msgpack-python 0.5.6 missing on pypi", "user": {"login": "ThomasWaldmann", "id": 356103, "node_id": "MDQ6VXNlcjM1NjEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/356103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThomasWaldmann", "html_url": "https://github.com/ThomasWaldmann", "followers_url": "https://api.github.com/users/ThomasWaldmann/followers", "following_url": "https://api.github.com/users/ThomasWaldmann/following{/other_user}", "gists_url": "https://api.github.com/users/ThomasWaldmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThomasWaldmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThomasWaldmann/subscriptions", "organizations_url": "https://api.github.com/users/ThomasWaldmann/orgs", "repos_url": "https://api.github.com/users/ThomasWaldmann/repos", "events_url": "https://api.github.com/users/ThomasWaldmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ThomasWaldmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-07T16:26:19Z", "updated_at": "2018-03-10T10:21:51Z", "closed_at": "2018-03-10T10:21:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "is that known / intended?\r\n\r\nmsgpack 0.5.6 is there, but msgpack-python is at 0.5.5.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/293", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/293/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/293/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/293", "id": 301994409, "node_id": "MDU6SXNzdWUzMDE5OTQ0MDk=", "number": 293, "title": "Longer unicode strings dumped as str 16 instead of str 8 when using use_bin_type=False", "user": {"login": "vytas7", "id": 3430939, "node_id": "MDQ6VXNlcjM0MzA5Mzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3430939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vytas7", "html_url": "https://github.com/vytas7", "followers_url": "https://api.github.com/users/vytas7/followers", "following_url": "https://api.github.com/users/vytas7/following{/other_user}", "gists_url": "https://api.github.com/users/vytas7/gists{/gist_id}", "starred_url": "https://api.github.com/users/vytas7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vytas7/subscriptions", "organizations_url": "https://api.github.com/users/vytas7/orgs", "repos_url": "https://api.github.com/users/vytas7/repos", "events_url": "https://api.github.com/users/vytas7/events{/privacy}", "received_events_url": "https://api.github.com/users/vytas7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-03T12:27:47Z", "updated_at": "2018-03-07T05:28:54Z", "closed_at": "2018-03-07T05:23:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using Python 3.5.2 and msgpack-0.5.6 from PyPi, longer (but not as long that they would require ``str 16``) unicode strings get erroneously dumped as ``str 16`` depending on ``use_bin_type`` value unless I misunderstood something.\r\n\r\nConsider a following test scenario:\r\n```python\r\n>>> import msgpack\r\n>>> msgpack.version\r\n(0, 5, 6)\r\n>>> S = 'short'\r\n>>> type(S)\r\n<class 'str'>\r\n>>> msgpack.packb(S)\r\nb'\\xa5short'\r\n>>> msgpack.packb(S, use_bin_type=True)\r\nb'\\xa5short'\r\n>>> msgpack.packb(S, use_bin_type=False)\r\nb'\\xa5short'\r\n>>> assert msgpack.packb(S, use_bin_type=True) == msgpack.packb(S, use_bin_type=False)\r\n>>> S = 'this is a bit longer string'\r\n>>> len(S)\r\n27\r\n>>> assert msgpack.packb(S, use_bin_type=True) == msgpack.packb(S, use_bin_type=False)\r\n```\r\n\r\nSo far so good, everything works as expected. Our string gets dumped as a ``fixstr`` regardless of ``use_bin_type`` value.\r\n\r\nNow let us continue the same test session by crossing the ``fixstr`` border:\r\n\r\n```python\r\n>>> S = 'this is a bit longer string / 01234567890ABCDEF'\r\n>>> len(S)\r\n47\r\n>>> assert msgpack.packb(S, use_bin_type=True) == msgpack.packb(S, use_bin_type=False)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAssertionError\r\n>>> msgpack.packb(S, use_bin_type=True)\r\nb'\\xd9/this is a bit longer string / 01234567890ABCDEF'\r\n>>> msgpack.packb(S, use_bin_type=False)\r\nb'\\xda\\x00/this is a bit longer string / 01234567890ABCDEF'\r\n```\r\n\r\nAs I understand, ``use_bin_type=False`` leads to wrong representation as ``str 16``.\r\n\r\nIt is not a problem *per se* when serializing and deserializing, but it follow recommendation in *MessagePack* specification which states:\r\n\r\n> If an object can be represented in multiple possible output formats, serializers SHOULD use the format which represents the data in the smallest number of bytes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/292", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/292/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/292/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/292", "id": 300637403, "node_id": "MDU6SXNzdWUzMDA2Mzc0MDM=", "number": 292, "title": "how to print to screen the msg packed value", "user": {"login": "avnerbarr", "id": 2404795, "node_id": "MDQ6VXNlcjI0MDQ3OTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2404795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avnerbarr", "html_url": "https://github.com/avnerbarr", "followers_url": "https://api.github.com/users/avnerbarr/followers", "following_url": "https://api.github.com/users/avnerbarr/following{/other_user}", "gists_url": "https://api.github.com/users/avnerbarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/avnerbarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avnerbarr/subscriptions", "organizations_url": "https://api.github.com/users/avnerbarr/orgs", "repos_url": "https://api.github.com/users/avnerbarr/repos", "events_url": "https://api.github.com/users/avnerbarr/events{/privacy}", "received_events_url": "https://api.github.com/users/avnerbarr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-27T13:50:02Z", "updated_at": "2018-02-27T14:14:48Z", "closed_at": "2018-02-27T14:14:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am msg packing a long like so:\r\n```python\r\nres = msgpack.packb(-3283790942618870526)\r\n```\r\nbut when I print it to screen I get gibberish characters:\r\n\r\n```python\r\nprint(res)\r\n\ufffd\ufffdm\ufffd\ufffd4\ufffd\ufffd\r\n```\r\n\r\n\r\nIf I do the same from the python interpreter shell it looks as I would expect:\r\n\r\n```\r\n>>> import msgpack\r\n>>> msgpack.packb(-3283790942618870526)\r\n'\\xd3\\xd2m\\xa1\\x894\\x8e\\x9d\\x02' <<<<<<<<<<< This is good!\r\n```\r\n\r\nHow can I print from a script so that it will look like it does from the interpreter?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/291", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/291/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/291/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/291", "id": 299949850, "node_id": "MDU6SXNzdWUyOTk5NDk4NTA=", "number": 291, "title": "Proper way to recover unprocessed data from the Unpacker object", "user": {"login": "HelloZeroNet", "id": 10350359, "node_id": "MDQ6VXNlcjEwMzUwMzU5", "avatar_url": "https://avatars0.githubusercontent.com/u/10350359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HelloZeroNet", "html_url": "https://github.com/HelloZeroNet", "followers_url": "https://api.github.com/users/HelloZeroNet/followers", "following_url": "https://api.github.com/users/HelloZeroNet/following{/other_user}", "gists_url": "https://api.github.com/users/HelloZeroNet/gists{/gist_id}", "starred_url": "https://api.github.com/users/HelloZeroNet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HelloZeroNet/subscriptions", "organizations_url": "https://api.github.com/users/HelloZeroNet/orgs", "repos_url": "https://api.github.com/users/HelloZeroNet/repos", "events_url": "https://api.github.com/users/HelloZeroNet/events{/privacy}", "received_events_url": "https://api.github.com/users/HelloZeroNet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-24T15:43:54Z", "updated_at": "2018-02-24T16:43:17Z", "closed_at": "2018-02-24T16:43:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "We using a msgpack based network protocol, in a p2p application.\r\n\r\nBy default, we feed all incoming data from the socket to the Unpacker object, but when it receives a `start_stream` command it starts reading the socket directly to save memory/cpu.\r\n\r\nTo do this when we receive a `start_stream` command we have to recover the unprocessed data from the unpacker with `unpacker.read_bytes(len(unpacker._buffer) - unpacker._buff_i)`\r\n\r\nPreviously we used `len(self.unpacker._buffer) - self.unpacker.tell()` (stopped working at 0.5.5+) and `self.unpacker._fb_buf_n - self.unpacker._fb_buf_o` (stopped working at 0.5.0) to get the number of bytes left in the unpacker.\r\n\r\nTo avoid problems in the future it would be nice to do this without messing with internal variables.\r\n\r\nSimplified version of the protocol:\r\n```py\r\nimport StringIO\r\nimport msgpack\r\nimport msgpack.fallback\r\n\r\ndummy_socket = StringIO.StringIO()\r\ndummy_socket.write(msgpack.packb({\"cmd\": \"start_stream\", \"stream_length\": 100}))\r\ndummy_socket.write(\"A\" * 100) # Content of a big file\r\ndummy_socket.write(msgpack.packb({\"cmd\": \"other_command\"}))\r\ndummy_socket.seek(0)\r\n\r\nunpacker = msgpack.fallback.Unpacker()\r\nwhile True:\r\n    data = dummy_socket.read(64)\r\n    if not data:\r\n        break\r\n\r\n    unpacker.feed(data)\r\n    for req in unpacker:\r\n        print \"New request\", req\r\n        if req[\"cmd\"] == \"start_stream\":\r\n            print \"Start streaming %s bytes\" % req[\"stream_length\"]\r\n            file_content = \"\"\r\n            streaming_left = req[\"stream_length\"]\r\n\r\n            unpacker_unprocessed_bytes = len(unpacker._buffer) - unpacker._buff_i\r\n            print \"Unprocessed left in unpacker: %s bytes\" % unpacker_unprocessed_bytes\r\n            file_content += unpacker.read_bytes(min(streaming_left, unpacker_unprocessed_bytes))\r\n            streaming_left -= unpacker_unprocessed_bytes\r\n\r\n            file_content += dummy_socket.read(streaming_left)\r\n            unpacker._consume()\r\n\r\n            print \"Received file content size: %s bytes\" % len(file_content)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/287", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/287/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/287/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/287", "id": 299566260, "node_id": "MDU6SXNzdWUyOTk1NjYyNjA=", "number": 287, "title": "Unpacker dict parsing error in 0.5.5", "user": {"login": "HelloZeroNet", "id": 10350359, "node_id": "MDQ6VXNlcjEwMzUwMzU5", "avatar_url": "https://avatars0.githubusercontent.com/u/10350359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HelloZeroNet", "html_url": "https://github.com/HelloZeroNet", "followers_url": "https://api.github.com/users/HelloZeroNet/followers", "following_url": "https://api.github.com/users/HelloZeroNet/following{/other_user}", "gists_url": "https://api.github.com/users/HelloZeroNet/gists{/gist_id}", "starred_url": "https://api.github.com/users/HelloZeroNet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HelloZeroNet/subscriptions", "organizations_url": "https://api.github.com/users/HelloZeroNet/orgs", "repos_url": "https://api.github.com/users/HelloZeroNet/repos", "events_url": "https://api.github.com/users/HelloZeroNet/events{/privacy}", "received_events_url": "https://api.github.com/users/HelloZeroNet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-23T01:12:10Z", "updated_at": "2018-02-23T02:52:49Z", "closed_at": "2018-02-23T02:52:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since version 0.5.5 the pure-python unpacker fails to unpack dict objects if it's already parsed a dict before:\r\n\r\n```py\r\nimport msgpack\r\n\r\nprint msgpack.version\r\n\r\ndatas = ['\\x85', '\\xa4body', '\\xc5\\x116', \"A\" * 4406, '\\xa2to', '\\x01', '\\xa3cmd', '\\xa8response', '\\xa8location', '\\xcd\\x116', '\\xa4size', '\\xcd\\x116']\r\n\r\n# Works: Parse data with unpackb\r\nassert len(msgpack.unpackb(\"\".join(datas)).keys()) == 5\r\nprint \"Unpackb OK\"\r\n\r\n# Works: Feed data with unpacker\r\nunpacker = msgpack.fallback.Unpacker()\r\nfor data in datas:\r\n\tunpacker.feed(data)\r\n\tfor message in unpacker:\r\n\t\tassert len(message.keys()) == 5\r\nprint \"Feed OK\"\r\n\r\n# Fails: Feed data with unpacker after previous data\r\nunpacker = msgpack.fallback.Unpacker()\r\nunpacker.feed(msgpack.packb({\"cmd\": \"getFile\"}))\r\nfor message in unpacker:\r\n\tassert len(message.keys()) == 1\r\n\r\nfor data in datas:\r\n\tunpacker.feed(data)\r\n\tfor message in unpacker:\r\n\t\tif type(message) is not dict:\r\n\t\t\tprint \"Invalid message:\", message\r\n\t\tassert len(message.keys()) == 5\r\nprint \"Multi feed OK\"\r\n\r\nprint \"All OK\"\r\n```\r\n\r\nOutput Python 2.7.13 + msgpack 0.5.5:\r\n```\r\n(0, 5, 5)\r\nUnpackb OK\r\nFeed OK\r\nInvalid message: body\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 30, in <module>\r\n    assert len(message.keys()) == 5\r\nAttributeError: 'str' object has no attribute 'keys'\r\n```\r\n\r\nOutput Python 2.7.13 + msgpack 0.5.4 (and all version before)\r\n```\r\n(0, 5, 4)\r\nUnpackb OK\r\nFeed OK\r\nMulti feed OK\r\nAll OK\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/285", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/285/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/285/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/285/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/285", "id": 298250407, "node_id": "MDU6SXNzdWUyOTgyNTA0MDc=", "number": 285, "title": "_unpacker.pyx:unpack is missing \"raw\" as keyword argument", "user": {"login": "kilroy42", "id": 8652997, "node_id": "MDQ6VXNlcjg2NTI5OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8652997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kilroy42", "html_url": "https://github.com/kilroy42", "followers_url": "https://api.github.com/users/kilroy42/followers", "following_url": "https://api.github.com/users/kilroy42/following{/other_user}", "gists_url": "https://api.github.com/users/kilroy42/gists{/gist_id}", "starred_url": "https://api.github.com/users/kilroy42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kilroy42/subscriptions", "organizations_url": "https://api.github.com/users/kilroy42/orgs", "repos_url": "https://api.github.com/users/kilroy42/repos", "events_url": "https://api.github.com/users/kilroy42/events{/privacy}", "received_events_url": "https://api.github.com/users/kilroy42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-19T11:58:42Z", "updated_at": "2018-02-21T15:55:32Z", "closed_at": "2018-02-21T15:55:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "unpackb has \"raw\" option whereas unpack is missing this (pyx version only, Python fallback.py is fine)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/283", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/283/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/283/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/283", "id": 296117231, "node_id": "MDU6SXNzdWUyOTYxMTcyMzE=", "number": 283, "title": "memory leak in the pure python Unpacker (when using .feed())", "user": {"login": "ThomasWaldmann", "id": 356103, "node_id": "MDQ6VXNlcjM1NjEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/356103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThomasWaldmann", "html_url": "https://github.com/ThomasWaldmann", "followers_url": "https://api.github.com/users/ThomasWaldmann/followers", "following_url": "https://api.github.com/users/ThomasWaldmann/following{/other_user}", "gists_url": "https://api.github.com/users/ThomasWaldmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThomasWaldmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThomasWaldmann/subscriptions", "organizations_url": "https://api.github.com/users/ThomasWaldmann/orgs", "repos_url": "https://api.github.com/users/ThomasWaldmann/repos", "events_url": "https://api.github.com/users/ThomasWaldmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ThomasWaldmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-02-10T17:22:40Z", "updated_at": "2018-04-11T05:58:00Z", "closed_at": "2018-02-16T07:35:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "see there: https://github.com/borgbackup/borg/issues/3573\r\n\r\ni had a quick look at the code and somehow i only found places where it grows self._buffer (e.g. in Unpacker.feed), but no place where it shrinks it. did i overlook something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/281", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/281/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/281/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/281/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/281", "id": 294926069, "node_id": "MDU6SXNzdWUyOTQ5MjYwNjk=", "number": 281, "title": "Unclear type mapping with both packb/unpackb, especially with mixed type sequences", "user": {"login": "rwarren", "id": 2751728, "node_id": "MDQ6VXNlcjI3NTE3Mjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2751728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rwarren", "html_url": "https://github.com/rwarren", "followers_url": "https://api.github.com/users/rwarren/followers", "following_url": "https://api.github.com/users/rwarren/following{/other_user}", "gists_url": "https://api.github.com/users/rwarren/gists{/gist_id}", "starred_url": "https://api.github.com/users/rwarren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rwarren/subscriptions", "organizations_url": "https://api.github.com/users/rwarren/orgs", "repos_url": "https://api.github.com/users/rwarren/repos", "events_url": "https://api.github.com/users/rwarren/events{/privacy}", "received_events_url": "https://api.github.com/users/rwarren/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-06T21:53:10Z", "updated_at": "2018-02-08T05:06:15Z", "closed_at": "2018-02-07T01:32:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Problem:\r\n\r\nThe current/packing unpacking situation is confusing and complex when it comes to dealing with the different binary and string types that will be packed to, or unpacked from, the MessagePack \"_str format family_\" and \"_bin format family_\" data types. It is difficult to determine the correct combination for a satisfactory type mapping in all situations.\r\n\r\nIn addition, the current `msgpack-python` (now `msgpack`) implementations do not have a solution (in either direction) for dealing with data containers that contain both string and binary data types.\r\n\r\nFor example (on the unpacking/deserialization side), the following byte sequence defines a MessagePack array that contains two elements: a unicode snowman character in utf-8, and an arbitrary byte sequence of [0x00, 0x01, 0x02]:\r\n\r\n```\r\ndata = b'\\x92\\xa3\\xe2\\x98\\x83\\xc4\\x03\\x00\\x01\\x02'\r\n```\r\nWhat possible combination of `msgpack.unpackb` kwargs can _properly_ unpack this to a two element list containing a python string and a suitable binary type (like `bytearray` in Python 2, and `bytes` in Python 3)? Conversely, how would you generate such a MessagePack structure from python (aside from direct generation as above)?\r\n\r\n## Proposal:\r\n\r\nRather than having a collection of effectivey global switches that can be sent to `packb`/`unpackb` (for example: `raw_as_bytes` and `use_bin_type`), it would be better if there were a method for defining an explicit typemap that would be used at a per-element level, and which defined the type mappings to use for both `packb` (from python to the MessagePack protocol) and `unpackb` (from MessagePack to python).\r\n\r\nFor example, it would be great if `msgpack.unpackb(data_bytes, typemap='ideal'`) would get the \"ideal\" behaviour I outline in the tables further below. When using the `typemap` switch, packing/unpacking could then work in a per-element way, rather than having issues with mixed-type sequences like the global switches currently do. Possible `typemap` values could be similar to in the columns defined further below: `('ideal', '0.4', '0.5', 'default')`, or somesuch, where `default` would be the default value, and currently equate to `typemap='0.5'`. It would also be illegal (raising `ValueError`) to specify kwargs like `raw_as_bytes` together with a `typemap` specification). I think this proposal will resolve any potential compatibility issues.\r\n\r\nThis `typemap` kwarg behaviour should be bidirectional. Specifically, there should also be a similar possibility for `msgpack.packb(data, typemap=`ideal`).\r\n\r\nIn addition (with the exception of python 2 `str` and `bytearray` ambiguity) it should _always_ be the case that `unpackb(packb(v)) == v`. This is currently _not_ true with available `msgpack` python versions.\r\n\r\n## Explicit Type Mapping Tables\r\n\r\nThe type mapping situation for msgpack bin and str (current, and \"ideal\") are covered in the tables below, covering the current situation for different `msgpack` versions, as well as my proposed `ideal` mapping.\r\n\r\nNote that, in the tables below:\r\n* PackType == `mp_str` refers to the \"str format family\", with leading (`101XXXXX`, `0xd9`, `0xda`, `0xdb`)\r\n* PackType == `mp_bin` refers to the \"bin format family\", with lead bits in (`0xc4`, `0xc5`, `0xc6`)\r\n* The \"PackType (_ideal_)\" column indicates what I personally think the accurate pack/unpack targets should be for each type.\r\n* `packb`/`unpackb` results for versions \"< 0.5.x\" and \">= 0.5.x\" are what you get with default values for all global kwarg switches like `raw_as_bytes`\r\n* I have intentionally not referenced the types where the mapping is (in my opinion) extremely clear, for example:\r\n  * msgpack `nil format` \u21d4 `None`\r\n  * msgpack `bool format` \u21d4 `bool`\r\n  * msgpack `int format family` \u21d4 `int`\r\n  * msgpack `float format family` \u21d4 `float`\r\n  * msgpack `array format family` \u21d4 `list`\r\n    * aside: I'd prefer an immutable tuple here, although map/dict targets have to be mutable so consistency is an issue\r\n  * msgpack `map format family` \u21d4 `dict`\r\n\r\n### Python 2 packing/serialization behaviour\r\n| Python2 type | PackType (_ideal_) | PackType (<0.5.x) | PackType (>=0.5.x) | Comment |\r\n| --- | --- | --- | --- | --- |\r\n| `str`           | `mp_bin` | `mp_str` | `mp_str` | `str` is really bytes in python 2 |\r\n| `unicode`   | `mp_str` | `mp_str` | `mp_str` | Should always encode to utf8 |\r\n| `bytearray` | `mp_bin` | ERROR | `mp_str` | If this doesn't go to `mp_bin`, what does? See notes below on the ERROR case (which was good) |\r\n\r\n\\* In the case of the ERROR for `msgpack` < 0.5.x, this was actually extremely useful, since it resulted an the `default` callback being invoked where you could specifically manage `bytearray` (since msgpack-python itself did not). Now that 0.5.x silently encodes `bytearray` to `mp_str`, this is no longer possible. This is actually the problem that triggered me to raise this issue (after an update to 0.5.x broke a build).\r\n\r\n### Python 2 unpacking/deserialization behaviour\r\n| Msgpack type | Python2 type (_ideal_) | Python2 type (<0.5.x) | Python2 type (>=0.5.x) | Comment |\r\n| --- | --- | --- | --- | --- |\r\n| `mp_str` | `unicode` | `str` | `str` | Should always decode assuming utf8 |\r\n| `mp_bin` | `str` | `str` | `str` |  `bytearray` would actually be a more literal/ideal unpack target, but is unfamiliar to most (and is mutable) |\r\n\r\n### Python 3 packing/serialization behaviour\r\n| Python3 type | PackType (_ideal_) | PackType (<0.5.x) | PackType (>=0.5.x) | Comment |\r\n| --- | --- | --- | --- | --- |\r\n| `str`        | `mp_str` | `mp_str` | `mp_str` | Always encode with utf8 |\r\n| `bytes`   | `mp_bin` | `mp_str` | `mp_str` |  |\r\n\r\n### Python 3 unpacking/deserialization behaviour\r\n| Python3 type | PackType (ideal) | PackType (<0.5.x) | PackType (>=0.5.x) | Comment |\r\n| --- | --- | --- | --- | --- |\r\n| `mp_str` | `str` | `bytes` | `bytes` | The default conversion to `bytes` is particularly confusing |\r\n| `mp_bin` | `bytes` | `bytes` | `bytes` |  |\r\n\r\n## References\r\nThere are some other issues related to this that are worth referencing here:\r\n* #191 -- regarding backwards compatibility issues moving towards 1.0\r\n* #99 -- an old issue about properly decoding string types\r\n* #224 -- an issue specifically about serializing `bytearray`\r\n* [msgpack #121](https://github.com/msgpack/msgpack/issues/121) -- an old/length issue (now closed) about differentiating between raw binary data and strings\r\n\r\n\r\nI decide to make a new issue, since this is a general proposal about A) explicitly clarifying type mapping in both directions between msgpack and python, and B) it explicitly covers both bin and str msgpack formats (in msgpack terminology) as well as both python str/bytes cases.\r\n \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/280", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/280/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/280/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/280/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/280", "id": 294671599, "node_id": "MDU6SXNzdWUyOTQ2NzE1OTk=", "number": 280, "title": "update msgpack-python package on pypi", "user": {"login": "ThomasWaldmann", "id": 356103, "node_id": "MDQ6VXNlcjM1NjEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/356103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThomasWaldmann", "html_url": "https://github.com/ThomasWaldmann", "followers_url": "https://api.github.com/users/ThomasWaldmann/followers", "following_url": "https://api.github.com/users/ThomasWaldmann/following{/other_user}", "gists_url": "https://api.github.com/users/ThomasWaldmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThomasWaldmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThomasWaldmann/subscriptions", "organizations_url": "https://api.github.com/users/ThomasWaldmann/orgs", "repos_url": "https://api.github.com/users/ThomasWaldmann/repos", "events_url": "https://api.github.com/users/ThomasWaldmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ThomasWaldmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-06T08:31:51Z", "updated_at": "2018-02-06T10:42:04Z", "closed_at": "2018-02-06T10:04:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "on pypi, there is still the broken msgpack-python 0.5.2 and it breaks our CI tests.\r\n\r\nso, please update the package to whatever never version that works.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/275", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/275/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/275/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/275", "id": 287831223, "node_id": "MDU6SXNzdWUyODc4MzEyMjM=", "number": 275, "title": "[RFC] Prevent upgrading to msgpack 1.0 on Python 2", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 14596241, "node_id": "MDU6TGFiZWwxNDU5NjI0MQ==", "url": "https://api.github.com/repos/msgpack/msgpack-python/labels/1.0", "name": "1.0", "color": "d7e102", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-11T15:58:08Z", "updated_at": "2019-12-06T08:27:00Z", "closed_at": "2019-12-06T08:27:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "From msgpack 1.0, I will change default behavior to use new msgpack spec.\r\n\r\nIt means `packb([\"hello\", \"world\"])` produces array of two bin data, not str on Python 2.\r\nWho Python 2 user needs such breaking change?\r\n\r\nMy idea is adding `requires-python>=3.5` metadata to msgpack 1.0, while keep tested\r\nwith Python 2.  User want msgpack 1.0 can use `pip --ignore-requires-python`` option.\r\n(see pypa/pip#3864)\r\n\r\nMaybe, msgpack 1.1 will really drop Python 2 support.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/273", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/273/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/273/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/273", "id": 287745400, "node_id": "MDU6SXNzdWUyODc3NDU0MDA=", "number": 273, "title": "[RFC] \"raw_as_bytes\" is bad name because \"raw\" is legacy name", "user": {"login": "methane", "id": 199592, "node_id": "MDQ6VXNlcjE5OTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/199592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/methane", "html_url": "https://github.com/methane", "followers_url": "https://api.github.com/users/methane/followers", "following_url": "https://api.github.com/users/methane/following{/other_user}", "gists_url": "https://api.github.com/users/methane/gists{/gist_id}", "starred_url": "https://api.github.com/users/methane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/methane/subscriptions", "organizations_url": "https://api.github.com/users/methane/orgs", "repos_url": "https://api.github.com/users/methane/repos", "events_url": "https://api.github.com/users/methane/events{/privacy}", "received_events_url": "https://api.github.com/users/methane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-11T11:00:49Z", "updated_at": "2018-01-12T10:22:37Z", "closed_at": "2018-01-12T10:22:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Since I had been inactive for months, I forgot new spec renamed \"raw\" type as \"str\".\r\n\r\nNaming new option as \"raw_as_bytes\" is bad idea.\r\nLuckily, I didn't release it yet.\r\n\r\nLet's rename the option name, but what name?\r\nIt should be short and clear, and based on Python 3 and new spec.\r\n\r\n* decode\r\n* decode_str\r\n* str\r\n* raw (`raw=True` returns bytes, and `raw=False` returns str/unicode)\r\n\r\nFor now, I prefer `raw`.  Any opinion?\r\n\r\nOr should I stop removing `encoding` option?\r\nI want support only UTF-8, and I don't want to use encoding name because\r\nI should canonicalize the name.  (utf_8, utf8, utf-8, UTF-8, etc...)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/270", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/270/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/270/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/270", "id": 287107982, "node_id": "MDU6SXNzdWUyODcxMDc5ODI=", "number": 270, "title": "use_bin_type - confusing future hint", "user": {"login": "ThomasWaldmann", "id": 356103, "node_id": "MDQ6VXNlcjM1NjEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/356103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThomasWaldmann", "html_url": "https://github.com/ThomasWaldmann", "followers_url": "https://api.github.com/users/ThomasWaldmann/followers", "following_url": "https://api.github.com/users/ThomasWaldmann/following{/other_user}", "gists_url": "https://api.github.com/users/ThomasWaldmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThomasWaldmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThomasWaldmann/subscriptions", "organizations_url": "https://api.github.com/users/ThomasWaldmann/orgs", "repos_url": "https://api.github.com/users/ThomasWaldmann/repos", "events_url": "https://api.github.com/users/ThomasWaldmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ThomasWaldmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2018-01-09T14:30:27Z", "updated_at": "2018-02-04T19:12:26Z", "closed_at": "2018-02-04T18:34:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nstring and binary type\r\n\r\nEarly versions of msgpack didn't distinguish string and binary types (like Python 1).\r\n```\r\nEhrm, did you really mean Python 1.x here or rather 2.x?\r\n\r\n```\r\nThe type for representing both string and binary types was named raw.\r\n\r\nFor backward compatibility reasons, msgpack-python will still default all\r\nstrings to byte strings, unless you specify the use_bin_type=True option\r\nin the packer.\r\n```\r\nSo that means the current default is still False (or rather 0, from the code).\r\n\r\n```\r\nIf you do so, it will use a non-standard type called bin to serialize byte arrays,\r\nand raw becomes to mean str. If you want to distinguish bin and raw in the\r\nunpacker, specify encoding='utf-8'.\r\n\r\nIn future version, default value of ``use_bin_type`` will be changed to ``False``.\r\n```\r\nDid you mean `True` here?\r\n\r\n```\r\nTo avoid this change will break your code, you must specify it explicitly even when you want to use old format.\r\n```\r\n\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/268", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/268/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/268/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/268", "id": 287092189, "node_id": "MDU6SXNzdWUyODcwOTIxODk=", "number": 268, "title": "package rename issues with msgpack 0.5.0", "user": {"login": "ThomasWaldmann", "id": 356103, "node_id": "MDQ6VXNlcjM1NjEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/356103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThomasWaldmann", "html_url": "https://github.com/ThomasWaldmann", "followers_url": "https://api.github.com/users/ThomasWaldmann/followers", "following_url": "https://api.github.com/users/ThomasWaldmann/following{/other_user}", "gists_url": "https://api.github.com/users/ThomasWaldmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThomasWaldmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThomasWaldmann/subscriptions", "organizations_url": "https://api.github.com/users/ThomasWaldmann/orgs", "repos_url": "https://api.github.com/users/ThomasWaldmann/repos", "events_url": "https://api.github.com/users/ThomasWaldmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ThomasWaldmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-01-09T13:41:10Z", "updated_at": "2018-01-10T06:54:10Z", "closed_at": "2018-01-10T06:54:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/borgbackup/borg/issues/3515\r\n\r\nI've seen the transition package you've made, but somehow it seems to not work as expected (or at least not for everybody).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/266", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/266/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/266/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/266", "id": 286884415, "node_id": "MDU6SXNzdWUyODY4ODQ0MTU=", "number": 266, "title": "Updating from msgpack-python from 0.4.2 to 0.5.0 produces a unusable library", "user": {"login": "vEpiphyte", "id": 26100278, "node_id": "MDQ6VXNlcjI2MTAwMjc4", "avatar_url": "https://avatars2.githubusercontent.com/u/26100278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vEpiphyte", "html_url": "https://github.com/vEpiphyte", "followers_url": "https://api.github.com/users/vEpiphyte/followers", "following_url": "https://api.github.com/users/vEpiphyte/following{/other_user}", "gists_url": "https://api.github.com/users/vEpiphyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/vEpiphyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vEpiphyte/subscriptions", "organizations_url": "https://api.github.com/users/vEpiphyte/orgs", "repos_url": "https://api.github.com/users/vEpiphyte/repos", "events_url": "https://api.github.com/users/vEpiphyte/events{/privacy}", "received_events_url": "https://api.github.com/users/vEpiphyte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-08T20:57:41Z", "updated_at": "2018-01-09T14:58:59Z", "closed_at": "2018-01-09T02:41:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Installing msgpack-python 0.5.0 from pip produces a non-working msgpack installation.\r\nIt appears the installation of msgpack=0.5.0 from msgpack-python 0.5.0 isn't actually installing msgpack.\r\nInstalling msgpack==0.5.0 works fine.\r\n\r\nSteps to reproduce (using pyenv):\r\n```\r\npyenv virtualenv --copies 3.6.1 msgpack_test\r\npyenv shell msgpack_test\r\npython -m pip install msgpack-python==0.4.2\r\npython -m pip install msgpack-python==0.5.0\r\n```\r\n\r\nImporting msgpack then fails\r\n```\r\npython -c \"import msgpack\"\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'msgpack'``\r\n```\r\n\r\nChecking the site packages directory between package installations shows the msgpack package \r\n code is disspearing\r\n```\r\n\r\n(msgpack_test) someuser@someplace:~$ ls ~/.pyenv/versions/msgpack_test/lib/python3.6/site-packages/msgpack*\r\n/home/someuser/.pyenv/versions/msgpack_test/lib/python3.6/site-packages/msgpack:\r\nexceptions.py  fallback.py  __init__.py  _packer.cpython-36m-x86_64-linux-gnu.so  __pycache__  _unpacker.cpython-36m-x86_64-linux-gnu.so  _version.py\r\n\r\n/home/someuser/.pyenv/versions/msgpack_test/lib/python3.6/site-packages/msgpack_python-0.4.2.dist-info:\r\nDESCRIPTION.rst  INSTALLER  METADATA  metadata.json  RECORD  top_level.txt  WHEEL\r\n\r\n(msgpack_test) someuser@someplace:~$ python -m pip install msgpack-python==0.5.0\r\nCollecting msgpack-python==0.5.0\r\n  Using cached msgpack_python-0.5.0-py3-none-any.whl\r\nCollecting msgpack>=0.5 (from msgpack-python==0.5.0)\r\nInstalling collected packages: msgpack, msgpack-python\r\n  Found existing installation: msgpack-python 0.4.2\r\n    Uninstalling msgpack-python-0.4.2:\r\n      Successfully uninstalled msgpack-python-0.4.2\r\nSuccessfully installed msgpack-0.5.0 msgpack-python-0.5.0\r\n\r\n(msgpack_test) someuser@someplace:~$ ls ~/.pyenv/versions/msgpack_test/lib/python3.6/site-packages/msgpack*\r\n/home/someuser/.pyenv/versions/msgpack_test/lib/python3.6/site-packages/msgpack-0.5.0.dist-info:\r\nDESCRIPTION.rst  INSTALLER  METADATA  metadata.json  RECORD  top_level.txt  WHEEL\r\n\r\n/home/someuser/.pyenv/versions/msgpack_test/lib/python3.6/site-packages/msgpack_python-0.5.0.dist-info:\r\nDESCRIPTION.rst  INSTALLER  METADATA  metadata.json  RECORD  top_level.txt  WHEEL\r\n\r\n\r\n(msgpack_test) someuser@someplace:~$ ls ~/.pyenv/versions/msgpack_test/lib/python3.6/site-packages/msgpack*\r\n/home/someuser/.pyenv/versions/msgpack_test/lib/python3.6/site-packages/msgpack-0.5.0.dist-info:\r\nDESCRIPTION.rst  INSTALLER  METADATA  metadata.json  RECORD  top_level.txt  WHEEL\r\n\r\n/home/someuser/.pyenv/versions/msgpack_test/lib/python3.6/site-packages/msgpack_python-0.5.0.dist-info:\r\nDESCRIPTION.rst  INSTALLER  METADATA  metadata.json  RECORD  top_level.txt  WHEEL\r\n```\r\n\r\nPip is using version 9.0.1.\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/261", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/261/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/261/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/261", "id": 285914292, "node_id": "MDU6SXNzdWUyODU5MTQyOTI=", "number": 261, "title": "Failing the installation (python3.6, linux 86-64)", "user": {"login": "Andreypnfrv", "id": 26162177, "node_id": "MDQ6VXNlcjI2MTYyMTc3", "avatar_url": "https://avatars1.githubusercontent.com/u/26162177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreypnfrv", "html_url": "https://github.com/Andreypnfrv", "followers_url": "https://api.github.com/users/Andreypnfrv/followers", "following_url": "https://api.github.com/users/Andreypnfrv/following{/other_user}", "gists_url": "https://api.github.com/users/Andreypnfrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreypnfrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreypnfrv/subscriptions", "organizations_url": "https://api.github.com/users/Andreypnfrv/orgs", "repos_url": "https://api.github.com/users/Andreypnfrv/repos", "events_url": "https://api.github.com/users/Andreypnfrv/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreypnfrv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-04T08:35:31Z", "updated_at": "2018-01-11T08:10:13Z", "closed_at": "2018-01-11T08:10:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not good at submitting issues, but I'll try.\r\nTrying to install with pip on python3.6 (inside Docker Container)\r\n\r\n```\r\n Running setup.py install for msgpack-python: finished with status 'error'\r\n    Complete output from command /usr/local/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-1mp926uq/msgpack-python/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-fo_8m_ck-record/install-record.txt --single-version-externally-managed --compile:\r\n    running install\r\n    running build\r\n    running build_py\r\n    creating build\r\n    creating build/lib.linux-x86_64-3.6\r\n    creating build/lib.linux-x86_64-3.6/msgpack\r\n    copying msgpack/__init__.py -> build/lib.linux-x86_64-3.6/msgpack\r\n    copying msgpack/_version.py -> build/lib.linux-x86_64-3.6/msgpack\r\n    copying msgpack/fallback.py -> build/lib.linux-x86_64-3.6/msgpack\r\n    copying msgpack/exceptions.py -> build/lib.linux-x86_64-3.6/msgpack\r\n    running build_ext\r\n    building 'msgpack._packer' extension\r\n    creating build/temp.linux-x86_64-3.6\r\n    creating build/temp.linux-x86_64-3.6/msgpack\r\n    gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -D__LITTLE_ENDIAN__=1 -I. -I/usr/local/include/python3.6m -c msgpack/_packer.cpp -o build/temp.linux-x86_64-3.6/msgpack/_packer.o\r\n    cc1plus: warning: command line option \u2018-Wstrict-prototypes\u2019 is valid for C/ObjC but not for C++\r\n    \r\n    ----------------------------------------\r\nCommand \"/usr/local/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-1mp926uq/msgpack-python/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-fo_8m_ck-record/install-record.txt --single-version-externally-managed --compile\" failed with error code -9 in /tmp/pip-build-1mp926uq/msgpack-python/\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/259", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/259/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/259/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/259", "id": 280237685, "node_id": "MDU6SXNzdWUyODAyMzc2ODU=", "number": 259, "title": "Unpacker.read_bytes behaves unpredictably with a size of -1 / support for reading all outstanding bytes?", "user": {"login": "RR2DO2", "id": 1216739, "node_id": "MDQ6VXNlcjEyMTY3Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1216739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RR2DO2", "html_url": "https://github.com/RR2DO2", "followers_url": "https://api.github.com/users/RR2DO2/followers", "following_url": "https://api.github.com/users/RR2DO2/following{/other_user}", "gists_url": "https://api.github.com/users/RR2DO2/gists{/gist_id}", "starred_url": "https://api.github.com/users/RR2DO2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RR2DO2/subscriptions", "organizations_url": "https://api.github.com/users/RR2DO2/orgs", "repos_url": "https://api.github.com/users/RR2DO2/repos", "events_url": "https://api.github.com/users/RR2DO2/events{/privacy}", "received_events_url": "https://api.github.com/users/RR2DO2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-07T18:48:41Z", "updated_at": "2018-11-12T11:02:18Z", "closed_at": "2018-11-12T11:02:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some python read() methods take -1 as a parameter to return all remaining bytes in a stream/buffer. While msgpack's Unpacker read_bytes isn't explicitly documented as supporting this, it used to accept -1.\r\n\r\nThis lead to various corruptions though; the c implementation would not return all bytes. At least with 0.4.8 it now raises an error stating -1 is invalid (side-effect of calling the CPython related methods to obtain a size_t).\r\n\r\nThe fallback method however still accepts -1, but returns bad data in this case.\r\n\r\nOur current workaround is to use read_bytes(sys.maxint) to obtain any other bytes from the reader passed into Unpacker, however this only works in the c implementation. The fallback returns OutOfData since there aren't that many bytes available.\r\n\r\nThere are a few things that likely should be done. read_bytes should behave consistently between the c and fallback implementations. Passing -1 into any implementation should not corrupt any internal state or return invalid data. Finally, having a dedicated Unpacker.read() that would return all data in the reader still outstanding would be invaluable.\r\n\r\nNot sure if help would appreciated in writing a patch for this? Also not sure why there is no .read() method already - instead of the less standard read_bytes?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/258", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/258/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/258/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/258", "id": 273918835, "node_id": "MDU6SXNzdWUyNzM5MTg4MzU=", "number": 258, "title": "msgpack serialization errors do not reset internal buffers", "user": {"login": "vEpiphyte", "id": 26100278, "node_id": "MDQ6VXNlcjI2MTAwMjc4", "avatar_url": "https://avatars2.githubusercontent.com/u/26100278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vEpiphyte", "html_url": "https://github.com/vEpiphyte", "followers_url": "https://api.github.com/users/vEpiphyte/followers", "following_url": "https://api.github.com/users/vEpiphyte/following{/other_user}", "gists_url": "https://api.github.com/users/vEpiphyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/vEpiphyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vEpiphyte/subscriptions", "organizations_url": "https://api.github.com/users/vEpiphyte/orgs", "repos_url": "https://api.github.com/users/vEpiphyte/repos", "events_url": "https://api.github.com/users/vEpiphyte/events{/privacy}", "received_events_url": "https://api.github.com/users/vEpiphyte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-14T19:45:23Z", "updated_at": "2017-12-21T12:30:22Z", "closed_at": "2017-12-21T12:30:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a serialization error occurs in a Packer object due to a invalid type being serialized, this does not clear the Packer's internal buffer.  This can lead to the situation where the reuse of a Packer object can cause extraneous data to be presented to a user.  Example code which demonstrates this behavior in both the cython packer and the fallback backer.\r\n\r\nIn addition, the cython packer and the fallback packer produce different messages in their TypeErrors.\r\n\r\n```\r\nimport msgpack\r\nimport msgpack.fallback as m_fallback\r\n\r\npakr = msgpack.Packer(use_bin_type=True, encoding='utf8')\r\nfallback_pakr = m_fallback.Packer(use_bin_type=True, encoding='utf8')\r\n# Ensure we are testing both packer objects\r\nassert type(pakr) != type(fallback_pakr)\r\n\r\npackers = [pakr, fallback_pakr]\r\n\r\nbad_tufo = (\r\n    'hehe',\r\n    {\r\n        'k1': 1,\r\n        'k2': set([1, 2])  # This is a set and cannot be serialized\r\n    }\r\n)\r\n\r\ngood_tufo = (\r\n    'hehe',\r\n    {\r\n        'k1': 1,\r\n        'k2': (1, 2)\r\n    }\r\n)\r\n\r\nweird_tufo = (\r\n    'hehe',\r\n    {\r\n        'k1': 1,\r\n        'k2': (\r\n            'hehe',\r\n            {\r\n                'k1': 1,\r\n                'k2': (1, 2)\r\n            }\r\n        )\r\n    }\r\n)\r\n\r\nfor p in packers:\r\n    try:\r\n        buf = p.pack(bad_tufo)\r\n    except TypeError as e:\r\n        # cython and pure python packers have different error messages.\r\n        assert \"can't serialize\" in str(e) or \"Cannot serialize\" in str(e)\r\n\r\nret = []\r\nfor p in packers:\r\n    try:\r\n        buf = p.pack(good_tufo)\r\n        ret.append(buf)\r\n    except Exception:\r\n        raise\r\n\r\nfor buf in ret:\r\n    obj = msgpack.unpackb(buf, encoding='utf8', use_list=False)\r\n    # We have a unpacked object which is the combination of part of one object\r\n    # and the entirety of a second object\r\n    assert obj == weird_tufo\r\n```\r\n\r\nIs this the intended behavior of the Packer objects or a implementation error?  The documentation here http://msgpack-python.readthedocs.io/en/latest/api.html does not list any expected behavior one way or the other.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/257", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/257/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/257/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/257", "id": 272935095, "node_id": "MDU6SXNzdWUyNzI5MzUwOTU=", "number": 257, "title": "cannot msgpack a structure that includes a pandas Dataframe", "user": {"login": "vegabook", "id": 3780883, "node_id": "MDQ6VXNlcjM3ODA4ODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3780883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vegabook", "html_url": "https://github.com/vegabook", "followers_url": "https://api.github.com/users/vegabook/followers", "following_url": "https://api.github.com/users/vegabook/following{/other_user}", "gists_url": "https://api.github.com/users/vegabook/gists{/gist_id}", "starred_url": "https://api.github.com/users/vegabook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vegabook/subscriptions", "organizations_url": "https://api.github.com/users/vegabook/orgs", "repos_url": "https://api.github.com/users/vegabook/repos", "events_url": "https://api.github.com/users/vegabook/events{/privacy}", "received_events_url": "https://api.github.com/users/vegabook/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-10T13:39:01Z", "updated_at": "2017-11-16T04:46:48Z", "closed_at": "2017-11-15T07:02:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am writing a python memoizer and mspack is so much faster than pickle. \r\n\r\nProblem is for data structures such as a simple list, that I can usually msgpack in one go, even if they include a numpy array (using msgpack-numpy), if that data structure includes a pandas I am out of luck. This is despite the fact that pandas itself does msgpack via pd.read_msgpack, and pd.to_msgpack. \r\n\r\nIs there any way that I can patch msgpack, just like numpy-msgpack does, to do pandas in the same way? \r\n\r\nHere is an illustration of the problem:\r\n\r\n```\r\nimport msgpack\r\nimport msgpack_numpy as m\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nm.patch()   # enable msgpack on numpy\r\n\r\n\r\nxx = [\"123\", 1, 2, 3, np.random.rand(3)] # heterogenous including numpy\r\nmm = msgpack.unpackb(msgpack.packb(xx))\r\nprint([xx[x] == mm[x] for x in range(len(xx))]) # all good. packs and unpacks beautifully\r\n\r\nxx \r\n\r\nyy = [\"123\", pd.DataFrame([1, 2, 3])]\r\npp = [x.to_msgpack() if isinstance(x, pd.DataFrame) else msgpack.packb(x) for x in yy] # no problemo, but how to decode?\r\nprint(\"done pp\")\r\npp = msgpack.packb(yy) # problemo\r\n```\r\n\r\nNow I could mess around with creating my own serializer / deserializer using flags for when things must go back to pandas, but as you can probably imagine, it would be a mess and very inefficient by comparison with msgpack's awesome native speed. Any hints? Pandas is becoming really popular. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/256", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/256/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/256/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/256", "id": 270621275, "node_id": "MDU6SXNzdWUyNzA2MjEyNzU=", "number": 256, "title": "`long` packing errors in python 2.7.3", "user": {"login": "HoverHell", "id": 229945, "node_id": "MDQ6VXNlcjIyOTk0NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/229945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HoverHell", "html_url": "https://github.com/HoverHell", "followers_url": "https://api.github.com/users/HoverHell/followers", "following_url": "https://api.github.com/users/HoverHell/following{/other_user}", "gists_url": "https://api.github.com/users/HoverHell/gists{/gist_id}", "starred_url": "https://api.github.com/users/HoverHell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HoverHell/subscriptions", "organizations_url": "https://api.github.com/users/HoverHell/orgs", "repos_url": "https://api.github.com/users/HoverHell/repos", "events_url": "https://api.github.com/users/HoverHell/events{/privacy}", "received_events_url": "https://api.github.com/users/HoverHell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-02T11:34:18Z", "updated_at": "2018-04-24T17:58:23Z", "closed_at": "2017-11-02T11:44:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "    >>> d = long(1456174800000); msgpack.loads(msgpack.dumps(d)) == d\r\n    False\r\n\r\nUsing python 2.7.3, msgpack-python 0.4.7 or 0.4.8.\r\n\r\nThis error does not happen in msgpack-python 0.4.6, nor in python 2.7.12 msgpack-python 0.4.8.\r\n\r\nInternally:\r\n\r\n    >>> msgpack.dumps(long(1456174800000))\r\n    '\\xce\\x05d\\x1c\\x80'\r\n\r\nfor some reason, int32 is used.\r\n\r\nAt the same time,\r\n\r\n    >>> msgpack.dumps(int(1456174800000))\r\n    '\\xcf\\x00\\x00\\x01S\\n\\xc8\\x1c\\x80'\r\n\r\n`int` with the same value works correctly.\r\n\r\nAdditionally, #71 mentions that large integers should raise an error; however, that does not happen (python 2.7.3, msgpack-python 0.4.8):\r\n\r\n    >>> d = long(14561748000000000000000000000000000000); msgpack.loads(msgpack.dumps(d)) == d\r\n    False\r\n\r\nAgain, works correctly in python 2.7.12", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/255", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/255/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/255/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/255", "id": 268997126, "node_id": "MDU6SXNzdWUyNjg5OTcxMjY=", "number": 255, "title": "pip install silently installs from source without the cython modules on cpython 3.6", "user": {"login": "RonnyPfannschmidt", "id": 156838, "node_id": "MDQ6VXNlcjE1NjgzOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RonnyPfannschmidt", "html_url": "https://github.com/RonnyPfannschmidt", "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers", "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}", "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}", "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions", "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs", "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos", "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}", "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-27T06:04:53Z", "updated_at": "2017-10-27T07:30:52Z", "closed_at": "2017-10-27T06:49:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "while trying to install borg i noted that msgpack is installed from source and without using cython\r\nthe docs/readme have no details on how to propperly install", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/254", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/254/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/254/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/254", "id": 268007396, "node_id": "MDU6SXNzdWUyNjgwMDczOTY=", "number": 254, "title": "Decoding fails for readonly buffer.", "user": {"login": "gsuyashs", "id": 15890674, "node_id": "MDQ6VXNlcjE1ODkwNjc0", "avatar_url": "https://avatars0.githubusercontent.com/u/15890674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsuyashs", "html_url": "https://github.com/gsuyashs", "followers_url": "https://api.github.com/users/gsuyashs/followers", "following_url": "https://api.github.com/users/gsuyashs/following{/other_user}", "gists_url": "https://api.github.com/users/gsuyashs/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsuyashs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsuyashs/subscriptions", "organizations_url": "https://api.github.com/users/gsuyashs/orgs", "repos_url": "https://api.github.com/users/gsuyashs/repos", "events_url": "https://api.github.com/users/gsuyashs/events{/privacy}", "received_events_url": "https://api.github.com/users/gsuyashs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-24T12:12:11Z", "updated_at": "2018-01-11T08:10:34Z", "closed_at": "2018-01-11T08:10:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>>> import msgpack\r\n>>> msgpack.version\r\n(0, 4, 8)\r\n>>> msgpack.dumps(buffer(\"suyash\",0,3))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/site-packages/msgpack/__init__.py\", line 47, in packb\r\n    return Packer(**kwargs).pack(o)\r\n  File \"msgpack/_packer.pyx\", line 231, in msgpack._packer.Packer.pack (msgpack/_packer.cpp:3661)\r\n  File \"msgpack/_packer.pyx\", line 233, in msgpack._packer.Packer.pack (msgpack/_packer.cpp:3503)\r\n  File \"msgpack/_packer.pyx\", line 228, in msgpack._packer.Packer._pack (msgpack/_packer.cpp:3382)\r\nTypeError: can't serialize <read-only buffer for 0x6ffffdeeb40, size 3, offset 0 at 0x6ffffdf00f0>\r\n```\r\n\r\nIn case of python native (de)serialization module ``marshal`` works fine with ``buffer``\r\n```\r\n>>> import marshal\r\n>>> marshal.dumps(buffer(\"suyash\",0,-1))\r\n's\\x06\\x00\\x00\\x00suyash'\r\n>>>\r\n>>> marshal.loads(_)\r\n'suyash'\r\n>>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/252", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/252/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/252/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/252", "id": 265553729, "node_id": "MDU6SXNzdWUyNjU1NTM3Mjk=", "number": 252, "title": "Support serializing datetime objects", "user": {"login": "gappleto97", "id": 1554778, "node_id": "MDQ6VXNlcjE1NTQ3Nzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1554778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gappleto97", "html_url": "https://github.com/gappleto97", "followers_url": "https://api.github.com/users/gappleto97/followers", "following_url": "https://api.github.com/users/gappleto97/following{/other_user}", "gists_url": "https://api.github.com/users/gappleto97/gists{/gist_id}", "starred_url": "https://api.github.com/users/gappleto97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gappleto97/subscriptions", "organizations_url": "https://api.github.com/users/gappleto97/orgs", "repos_url": "https://api.github.com/users/gappleto97/repos", "events_url": "https://api.github.com/users/gappleto97/events{/privacy}", "received_events_url": "https://api.github.com/users/gappleto97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 14596241, "node_id": "MDU6TGFiZWwxNDU5NjI0MQ==", "url": "https://api.github.com/repos/msgpack/msgpack-python/labels/1.0", "name": "1.0", "color": "d7e102", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2017-10-15T08:01:05Z", "updated_at": "2019-12-11T14:48:17Z", "closed_at": "2019-12-11T14:48:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since timestamps are now a part of the msgpack spec, shouldn't this library support serializing them?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/245", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/245/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/245/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/245", "id": 261437248, "node_id": "MDU6SXNzdWUyNjE0MzcyNDg=", "number": 245, "title": "Can't serialize tuples with strict_types", "user": {"login": "lbolla", "id": 20991, "node_id": "MDQ6VXNlcjIwOTkx", "avatar_url": "https://avatars3.githubusercontent.com/u/20991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbolla", "html_url": "https://github.com/lbolla", "followers_url": "https://api.github.com/users/lbolla/followers", "following_url": "https://api.github.com/users/lbolla/following{/other_user}", "gists_url": "https://api.github.com/users/lbolla/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbolla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbolla/subscriptions", "organizations_url": "https://api.github.com/users/lbolla/orgs", "repos_url": "https://api.github.com/users/lbolla/repos", "events_url": "https://api.github.com/users/lbolla/events{/privacy}", "received_events_url": "https://api.github.com/users/lbolla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-28T19:41:07Z", "updated_at": "2017-09-29T09:42:29Z", "closed_at": "2017-09-29T07:29:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using `strict_types=True`, serializing tuples fails:\r\n\r\n    >>> msgpack.dumps((1,2, 3), strict_types=True)\r\n    ....\r\n    TypeError: can't serialize (1, 2, 3)\r\n\r\n(Using \"tip\" version of msgpack.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/244", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/244/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/244/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/244", "id": 261377740, "node_id": "MDU6SXNzdWUyNjEzNzc3NDA=", "number": 244, "title": "release schedule", "user": {"login": "vEpiphyte", "id": 26100278, "node_id": "MDQ6VXNlcjI2MTAwMjc4", "avatar_url": "https://avatars2.githubusercontent.com/u/26100278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vEpiphyte", "html_url": "https://github.com/vEpiphyte", "followers_url": "https://api.github.com/users/vEpiphyte/followers", "following_url": "https://api.github.com/users/vEpiphyte/following{/other_user}", "gists_url": "https://api.github.com/users/vEpiphyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/vEpiphyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vEpiphyte/subscriptions", "organizations_url": "https://api.github.com/users/vEpiphyte/orgs", "repos_url": "https://api.github.com/users/vEpiphyte/repos", "events_url": "https://api.github.com/users/vEpiphyte/events{/privacy}", "received_events_url": "https://api.github.com/users/vEpiphyte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-28T16:14:10Z", "updated_at": "2018-01-06T18:12:08Z", "closed_at": "2018-01-06T18:12:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a plan for a next release of msgpack-python?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/243", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/243/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/243/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/243", "id": 254803579, "node_id": "MDU6SXNzdWUyNTQ4MDM1Nzk=", "number": 243, "title": "Unpacking using 'unpackb()' is slow when passing parameter \"encoding='utf-8'\"", "user": {"login": "roniemartinez", "id": 2573537, "node_id": "MDQ6VXNlcjI1NzM1Mzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2573537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roniemartinez", "html_url": "https://github.com/roniemartinez", "followers_url": "https://api.github.com/users/roniemartinez/followers", "following_url": "https://api.github.com/users/roniemartinez/following{/other_user}", "gists_url": "https://api.github.com/users/roniemartinez/gists{/gist_id}", "starred_url": "https://api.github.com/users/roniemartinez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roniemartinez/subscriptions", "organizations_url": "https://api.github.com/users/roniemartinez/orgs", "repos_url": "https://api.github.com/users/roniemartinez/repos", "events_url": "https://api.github.com/users/roniemartinez/events{/privacy}", "received_events_url": "https://api.github.com/users/roniemartinez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-02T10:29:32Z", "updated_at": "2018-01-11T08:12:24Z", "closed_at": "2018-01-11T08:12:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI was looking for JSON alternative and since I have experience working with msgpack (in C/C++) I thought I'll give this library a try.\r\n\r\nThis [feature](https://github.com/msgpack/msgpack-python#string-and-binary-type) is very handy.\r\nHowever, this is very slow compared to JSON decoders (like ujson) which makes it impractical for applications that requires a \"little more speed\". I can tell that the speed drop is caused by byte decoding.\r\n\r\nI believe this library requires an increase in performance.\r\n\r\nCheers!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/241", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/241/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/241/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/241", "id": 253637801, "node_id": "MDU6SXNzdWUyNTM2Mzc4MDE=", "number": 241, "title": "Packing for sets and frozen sets", "user": {"login": "Tinche", "id": 1909233, "node_id": "MDQ6VXNlcjE5MDkyMzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1909233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tinche", "html_url": "https://github.com/Tinche", "followers_url": "https://api.github.com/users/Tinche/followers", "following_url": "https://api.github.com/users/Tinche/following{/other_user}", "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions", "organizations_url": "https://api.github.com/users/Tinche/orgs", "repos_url": "https://api.github.com/users/Tinche/repos", "events_url": "https://api.github.com/users/Tinche/events{/privacy}", "received_events_url": "https://api.github.com/users/Tinche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-29T12:23:40Z", "updated_at": "2017-08-29T12:25:18Z", "closed_at": "2017-08-29T12:25:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nwould you accept a PR adding support for serializing Python sets and frozensets into msgpack arrays?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/239", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/239/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/239/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/239", "id": 251473492, "node_id": "MDU6SXNzdWUyNTE0NzM0OTI=", "number": 239, "title": "Out-of-memory failures results in confusing or non-sensible tracebacks.", "user": {"login": "fake-name", "id": 1401239, "node_id": "MDQ6VXNlcjE0MDEyMzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1401239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fake-name", "html_url": "https://github.com/fake-name", "followers_url": "https://api.github.com/users/fake-name/followers", "following_url": "https://api.github.com/users/fake-name/following{/other_user}", "gists_url": "https://api.github.com/users/fake-name/gists{/gist_id}", "starred_url": "https://api.github.com/users/fake-name/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fake-name/subscriptions", "organizations_url": "https://api.github.com/users/fake-name/orgs", "repos_url": "https://api.github.com/users/fake-name/repos", "events_url": "https://api.github.com/users/fake-name/events{/privacy}", "received_events_url": "https://api.github.com/users/fake-name/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-08-20T08:01:40Z", "updated_at": "2018-01-11T08:13:30Z", "closed_at": "2018-01-11T08:13:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been tracking down an issue I've encountered on 512 MB VPSes (virtual private servers), and it's appears to be coming from `msgpack`:\r\n\r\n```\r\n File \"/scraper/client.py\", line 336, in partial_capture\r\n    self.put_message_chunked(response, connector)\r\n  File \"/scraper/client.py\", line 443, in put_message_chunked\r\n    message_bytes = msgpack.packb(message, use_bin_type=True)\r\n  File \"/scraper/venv/lib/python3.4/site-packages/msgpack/__init__.py\", line 47, in packb\r\n    return Packer(**kwargs).pack(o)\r\nSystemError: error return without exception set\r\n```\r\n\r\nThis can be replicated pretty easily. In a VM with 512 MB RAM and no swap:\r\n\r\n```\r\ndurr@memtest:~$ python3\r\nPython 3.5.2 (default, Nov 17 2016, 17:05:23)\r\n[GCC 5.4.0 20160609] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import os\r\n>>> import msgpack\r\n>>> data = os.urandom(1024 * 1024 * 175)\r\n>>> message_bytes = msgpack.packb(data, use_bin_type=True)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.5/dist-packages/msgpack/__init__.py\", line 47, in packb\r\n    return Packer(**kwargs).pack(o)\r\nSystemError: <built-in method pack of msgpack._packer.Packer object at 0x7f11af1e27b8> returned NULL without setting an error\r\n\r\n```\r\n\r\nI think the minor traceback differences are due to python differences - 3.4 for the original traceback, 3.5 for the example.\r\n\r\nIn any event, ideally the packer should raise something like a custom sub-class of `MemoryError` rather then an apparently broken SystemError, but at least documenting that *packing* a message can result in a failure might be nice too.\r\n\r\n\r\nInterestingly enough, the fallback version seems to use much less memory, and produce the expected `MemoryError` on failure.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/238", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/238/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/238/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/238", "id": 247653992, "node_id": "MDU6SXNzdWUyNDc2NTM5OTI=", "number": 238, "title": "Please add manylinux1_x86_64 wheels", "user": {"login": "apollo13", "id": 81547, "node_id": "MDQ6VXNlcjgxNTQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/81547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apollo13", "html_url": "https://github.com/apollo13", "followers_url": "https://api.github.com/users/apollo13/followers", "following_url": "https://api.github.com/users/apollo13/following{/other_user}", "gists_url": "https://api.github.com/users/apollo13/gists{/gist_id}", "starred_url": "https://api.github.com/users/apollo13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apollo13/subscriptions", "organizations_url": "https://api.github.com/users/apollo13/orgs", "repos_url": "https://api.github.com/users/apollo13/repos", "events_url": "https://api.github.com/users/apollo13/events{/privacy}", "received_events_url": "https://api.github.com/users/apollo13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-03T09:58:19Z", "updated_at": "2018-01-09T09:26:48Z", "closed_at": "2018-01-09T09:24:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Most linux platforms nowadays are 64 bit, would be great to have wheels for that too and not just i686. They did exist for 0.4.7 but apparently got lost for 0.4.8", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/237", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/237/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/237/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/237", "id": 247071994, "node_id": "MDU6SXNzdWUyNDcwNzE5OTQ=", "number": 237, "title": "Fail to install msgpack-python for  python 3.6.0", "user": {"login": "godspeedgld", "id": 11922170, "node_id": "MDQ6VXNlcjExOTIyMTcw", "avatar_url": "https://avatars2.githubusercontent.com/u/11922170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godspeedgld", "html_url": "https://github.com/godspeedgld", "followers_url": "https://api.github.com/users/godspeedgld/followers", "following_url": "https://api.github.com/users/godspeedgld/following{/other_user}", "gists_url": "https://api.github.com/users/godspeedgld/gists{/gist_id}", "starred_url": "https://api.github.com/users/godspeedgld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godspeedgld/subscriptions", "organizations_url": "https://api.github.com/users/godspeedgld/orgs", "repos_url": "https://api.github.com/users/godspeedgld/repos", "events_url": "https://api.github.com/users/godspeedgld/events{/privacy}", "received_events_url": "https://api.github.com/users/godspeedgld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-01T13:37:41Z", "updated_at": "2017-08-02T12:36:26Z", "closed_at": "2017-08-02T12:36:26Z", "author_association": "NONE", "active_lock_reason": null, "body": " using pip3 install msgpack-python. \r\n\r\nI get error: \r\n\r\nException:\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\godspeed\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\pip\\compat\\__init__.py\", line 73, in console_to_str\r\n    return s.decode(sys.__stdout__.encoding)\r\n\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xa1 in position 116: invalid start byte\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/235", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/235/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/235/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/235", "id": 244905503, "node_id": "MDU6SXNzdWUyNDQ5MDU1MDM=", "number": 235, "title": "New release?", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-23T11:52:50Z", "updated_at": "2017-07-24T07:10:00Z", "closed_at": "2017-07-24T07:10:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The last MsgPack release was made on 2016 and a few new features were added.\r\nShould we release a new version?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/234", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/234/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/234/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/234", "id": 244896284, "node_id": "MDU6SXNzdWUyNDQ4OTYyODQ=", "number": 234, "title": "Decoding empty string fails with encoding='u8'", "user": {"login": "marningmol", "id": 9976095, "node_id": "MDQ6VXNlcjk5NzYwOTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9976095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marningmol", "html_url": "https://github.com/marningmol", "followers_url": "https://api.github.com/users/marningmol/followers", "following_url": "https://api.github.com/users/marningmol/following{/other_user}", "gists_url": "https://api.github.com/users/marningmol/gists{/gist_id}", "starred_url": "https://api.github.com/users/marningmol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marningmol/subscriptions", "organizations_url": "https://api.github.com/users/marningmol/orgs", "repos_url": "https://api.github.com/users/marningmol/repos", "events_url": "https://api.github.com/users/marningmol/events{/privacy}", "received_events_url": "https://api.github.com/users/marningmol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-23T08:17:01Z", "updated_at": "2017-12-21T11:46:14Z", "closed_at": "2017-12-21T11:46:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "`>>> msgpack.version`\r\n`(0, 4, 8)`\r\n\r\n`>>> msgpack.unpackb(msgpack.packb(\"foo\", encoding='u8'), encoding='u8')`\r\n`'foo'`\r\n\r\n`>>> msgpack.unpackb(msgpack.packb(\"\", encoding='u8'), encoding='u8')`\r\n\r\nmsgpack/_unpacker.pyx in msgpack._unpacker.unpackb (msgpack/_unpacker.cpp:139)()\r\nValueError: PyMemoryView_FromBuffer(): info->buf must not be NULL\r\n\r\n`>>> msgpack.unpackb(msgpack.packb(\"\"), encoding='u8')`\r\n\r\nmsgpack/_unpacker.pyx in msgpack._unpacker.unpackb (msgpack/_unpacker.cpp:139)()\r\nValueError: PyMemoryView_FromBuffer(): info->buf must not be NULL\r\n\r\n\r\nBasically you can't unpack b'\\xa0' if you provide encoding.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/233", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/233/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/233/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/233", "id": 240242392, "node_id": "MDU6SXNzdWUyNDAyNDIzOTI=", "number": 233, "title": "exception hierarchy and its future", "user": {"login": "ThomasWaldmann", "id": 356103, "node_id": "MDQ6VXNlcjM1NjEwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/356103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThomasWaldmann", "html_url": "https://github.com/ThomasWaldmann", "followers_url": "https://api.github.com/users/ThomasWaldmann/followers", "following_url": "https://api.github.com/users/ThomasWaldmann/following{/other_user}", "gists_url": "https://api.github.com/users/ThomasWaldmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThomasWaldmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThomasWaldmann/subscriptions", "organizations_url": "https://api.github.com/users/ThomasWaldmann/orgs", "repos_url": "https://api.github.com/users/ThomasWaldmann/repos", "events_url": "https://api.github.com/users/ThomasWaldmann/events{/privacy}", "received_events_url": "https://api.github.com/users/ThomasWaldmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2017-07-03T18:40:17Z", "updated_at": "2018-11-09T13:13:34Z", "closed_at": "2018-11-09T13:13:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "http://msgpack-python.readthedocs.io/en/latest/api.html#exceptions\r\n\r\nFor the upper layer(s) of the current msgpack exception hierarchy, it states that:\r\n```\r\nDeprecated. Use Exception instead to catch all exception during packing.\r\n```\r\nor\r\n```\r\nDeprecated. Use ValueError instead.\r\n```\r\n\r\nI am not sure why that is deprecated, for me this feels backwards.\r\n\r\nThere are quite a lot of normal use cases where one wants to catch all msgpack exceptions, but one can't just catch `Exception` (or `ValueError`).\r\n\r\nFor example, look at this, taken from borgbackup code:\r\n\r\n```\r\ntry:\r\n    with IntegrityCheckedFile(hints_path, write=False, integrity_data=integrity_data) as fd:\r\n        hints = msgpack.unpack(fd)\r\nexcept (msgpack.UnpackException, FileNotFoundError, FileIntegrityError) as e: \r\n    ... # the file is not there / is crap, rebuild it.\r\n```\r\n\r\nSo, if I'ld use `Exception` there, it would also catch all sorts of unspecific issues in the `IntegrityCheckedFile` code - that's a bad idea.\r\n\r\nOf course one could work around by having an additional inner try/except and reraise some specific custom exception, but why not just keep UnpackException for such cases?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/msgpack/msgpack-python/issues/231", "repository_url": "https://api.github.com/repos/msgpack/msgpack-python", "labels_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/231/comments", "events_url": "https://api.github.com/repos/msgpack/msgpack-python/issues/231/events", "html_url": "https://github.com/msgpack/msgpack-python/issues/231", "id": 236587870, "node_id": "MDU6SXNzdWUyMzY1ODc4NzA=", "number": 231, "title": "Incorrect Serialization for Python long types", "user": {"login": "ankitpatel96", "id": 8731662, "node_id": "MDQ6VXNlcjg3MzE2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8731662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ankitpatel96", "html_url": "https://github.com/ankitpatel96", "followers_url": "https://api.github.com/users/ankitpatel96/followers", "following_url": "https://api.github.com/users/ankitpatel96/following{/other_user}", "gists_url": "https://api.github.com/users/ankitpatel96/gists{/gist_id}", "starred_url": "https://api.github.com/users/ankitpatel96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ankitpatel96/subscriptions", "organizations_url": "https://api.github.com/users/ankitpatel96/orgs", "repos_url": "https://api.github.com/users/ankitpatel96/repos", "events_url": "https://api.github.com/users/ankitpatel96/events{/privacy}", "received_events_url": "https://api.github.com/users/ankitpatel96/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-16T20:35:24Z", "updated_at": "2017-06-16T23:31:23Z", "closed_at": "2017-06-16T23:31:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, I found some pretty bizarre behavior with serializing longs\r\nReproduction:\r\nPython 2.7.3\r\nMsgpack-python v0.4.8 (pure python version)\r\n```python\r\nq = 0xffff+1\r\nv = long(0xffff+1)\r\n\r\nencoded = msgpack.packb(q) \r\ndecoded = msgpack.unpackb(encoded)\r\nself.assertEqual(q, decoded) # works fine \r\n\r\nencoded = msgpack.packb(v) \r\ndecoded = msgpack.unpackb(encoded)\r\nself.assertEqual(v, decoded) #throws assert error\r\nAssertionError: 65536L != 0\r\n```\r\nNote that this choice of 0xffff+1 is a deliberate choice - if you set both numbers to 0xffff it works fine.\r\nYou can also trigger this with pretty much any number above 0xffff casted or created as a long as far as i can tell.  One last clue that might help with debugging:\r\n```python\r\nv = long(0xffff+2)\r\nencoded = msgpack.packb(v) \r\ndecoded = msgpack.unpackb(encoded)\r\nself.assertEqual(v, decoded) #throws assert error\r\nAssertionError: 65537L != 1\r\n```", "performed_via_github_app": null, "score": 1.0}]}