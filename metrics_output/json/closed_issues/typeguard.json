{"total_count": 98, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/agronholm/typeguard/issues/140", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/140/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/140/events", "html_url": "https://github.com/agronholm/typeguard/issues/140", "id": 665854455, "node_id": "MDU6SXNzdWU2NjU4NTQ0NTU=", "number": 140, "title": "question: use to check type compatibility?", "user": {"login": "shaunc", "id": 193170, "node_id": "MDQ6VXNlcjE5MzE3MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/193170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shaunc", "html_url": "https://github.com/shaunc", "followers_url": "https://api.github.com/users/shaunc/followers", "following_url": "https://api.github.com/users/shaunc/following{/other_user}", "gists_url": "https://api.github.com/users/shaunc/gists{/gist_id}", "starred_url": "https://api.github.com/users/shaunc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shaunc/subscriptions", "organizations_url": "https://api.github.com/users/shaunc/orgs", "repos_url": "https://api.github.com/users/shaunc/repos", "events_url": "https://api.github.com/users/shaunc/events{/privacy}", "received_events_url": "https://api.github.com/users/shaunc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323139, "node_id": "MDU6TGFiZWwzMDQzMjMxMzk=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2020-07-26T20:29:48Z", "updated_at": "2020-07-28T09:02:08Z", "closed_at": "2020-07-26T21:18:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am writing a distributed execution system, in which messages are sent among task nodes implemented by python functions. Before they are run, the flow graph is \"compiled\". During this step, I would like to check types of messages. \r\n\r\nI can get the type annotation of a message from both sender and receiver, and am searching for a way to check if these two types are compatible with one another. (In particular, if a message created by the sender will be of the type expected by the receiver, if the sender respects the type annotation.) Can I do this with typeguard? An example or pointer to the docs would be much appreciated if it is possible. If not, any suggestions as to another package that can help me?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/138", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/138/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/138/events", "html_url": "https://github.com/agronholm/typeguard/issues/138", "id": 655470507, "node_id": "MDU6SXNzdWU2NTU0NzA1MDc=", "number": 138, "title": "TypeError: 'type' object is not subscriptable with subprocess.CompletedProcess[str]", "user": {"login": "cjolowicz", "id": 653941, "node_id": "MDQ6VXNlcjY1Mzk0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/653941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjolowicz", "html_url": "https://github.com/cjolowicz", "followers_url": "https://api.github.com/users/cjolowicz/followers", "following_url": "https://api.github.com/users/cjolowicz/following{/other_user}", "gists_url": "https://api.github.com/users/cjolowicz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjolowicz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjolowicz/subscriptions", "organizations_url": "https://api.github.com/users/cjolowicz/orgs", "repos_url": "https://api.github.com/users/cjolowicz/repos", "events_url": "https://api.github.com/users/cjolowicz/events{/privacy}", "received_events_url": "https://api.github.com/users/cjolowicz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323139, "node_id": "MDU6TGFiZWwzMDQzMjMxMzk=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-12T20:27:21Z", "updated_at": "2020-07-15T20:58:27Z", "closed_at": "2020-07-12T22:01:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "The type annotations provided for subprocess by typeshed define CompletedProcess as a generic type, even though it is a simple class in the standard library. This can be made to work with `from future import __annotations__` a.k.a postponed type evaluation ([PEP 563]). Unfortunately, it does not currently work with typeguard.\r\n\r\n[PEP 563]: https://www.python.org/dev/peps/pep-0563/\r\n\r\n**Without typeguard:**\r\n\r\n```python\r\nfrom future import __annotations__\r\nimport subprocess\r\n\r\ndef foo() -> subprocess.CompletedProcess[str]:\r\n    return subprocess.run([\"true\"], text=True)\r\n\r\nfoo()\r\n```\r\n\r\nWith the future import, the code runs without exceptions. Without the future import, the code raises `TypeError: 'type' object is not subscriptable`.\r\n\r\n**With typeguard:**\r\n\r\n```python\r\nfrom future import __annotations__\r\nimport subprocess\r\n\r\nfrom typeguard import typechecked\r\n\r\n@typechecked\r\ndef foo() -> subprocess.CompletedProcess[str]:\r\n    return subprocess.run([\"true\"], text=True)\r\n\r\nfoo()\r\n```\r\n\r\nThis raises `TypeError: 'type' object is not subscriptable` even with the future import.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"foo-typeguard.py\", line 10, in <module>\r\n    foo()\r\n  File \"path/to/venv/lib/python3.8/site-packages/typeguard/__init__.py\", line 838, in wrapper\r\n    memo = _CallMemo(python_func, _localns, args=args, kwargs=kwargs)\r\n  File \"path/to/venv/lib/python3.8/site-packages/typeguard/__init__.py\", line 112, in __init__\r\n    hints = get_type_hints(func, localns=frame_locals)\r\n  File \"/Users/cjolowicz/.pyenv/versions/3.8.3/lib/python3.8/typing.py\", line 1264, in get_type_hints\r\n    value = _eval_type(value, globalns, localns)\r\n  File \"/Users/cjolowicz/.pyenv/versions/3.8.3/lib/python3.8/typing.py\", line 270, in _eval_type\r\n    return t._evaluate(globalns, localns)\r\n  File \"/Users/cjolowicz/.pyenv/versions/3.8.3/lib/python3.8/typing.py\", line 518, in _evaluate\r\n    eval(self.__forward_code__, globalns, localns),\r\n  File \"<string>\", line 1, in <module>\r\nTypeError: 'type' object is not subscriptable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/137", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/137/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/137/events", "html_url": "https://github.com/agronholm/typeguard/issues/137", "id": 654851509, "node_id": "MDU6SXNzdWU2NTQ4NTE1MDk=", "number": 137, "title": "@typechecked passes when bool is passed to int or float annotated parameter", "user": {"login": "snk4tr", "id": 24959314, "node_id": "MDQ6VXNlcjI0OTU5MzE0", "avatar_url": "https://avatars3.githubusercontent.com/u/24959314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snk4tr", "html_url": "https://github.com/snk4tr", "followers_url": "https://api.github.com/users/snk4tr/followers", "following_url": "https://api.github.com/users/snk4tr/following{/other_user}", "gists_url": "https://api.github.com/users/snk4tr/gists{/gist_id}", "starred_url": "https://api.github.com/users/snk4tr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snk4tr/subscriptions", "organizations_url": "https://api.github.com/users/snk4tr/orgs", "repos_url": "https://api.github.com/users/snk4tr/repos", "events_url": "https://api.github.com/users/snk4tr/events{/privacy}", "received_events_url": "https://api.github.com/users/snk4tr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-10T15:14:23Z", "updated_at": "2020-07-11T17:29:22Z", "closed_at": "2020-07-11T17:29:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n`typechecked` check passes when should not in cases when:\r\n- parameter is annotated with `int` or `float` type annotation\r\n- `bool` value is passes\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Install `typeguard==2.9.1`\r\n2. Run the following code snippet:\r\n```python\r\nfrom typeguard import typechecked\r\n\r\n@typechecked\r\ndef foo(a: float) -> None:\r\n    pass\r\n\r\nfoo(True)\r\n```\r\n\r\n**Expected behavior**\r\nTypeError is raised\r\n\r\n**Screenshots**\r\n\r\n<img width=\"1019\" alt=\"image\" src=\"https://user-images.githubusercontent.com/24959314/87169789-230d7e00-c2d9-11ea-8abb-c65de8bb9bfd.png\">\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/135", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/135/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/135/events", "html_url": "https://github.com/agronholm/typeguard/issues/135", "id": 635509466, "node_id": "MDU6SXNzdWU2MzU1MDk0NjY=", "number": 135, "title": "Forward refs not resolved correctly after updating to >=2.9.0", "user": {"login": "hlynurf", "id": 7755904, "node_id": "MDQ6VXNlcjc3NTU5MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7755904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hlynurf", "html_url": "https://github.com/hlynurf", "followers_url": "https://api.github.com/users/hlynurf/followers", "following_url": "https://api.github.com/users/hlynurf/following{/other_user}", "gists_url": "https://api.github.com/users/hlynurf/gists{/gist_id}", "starred_url": "https://api.github.com/users/hlynurf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hlynurf/subscriptions", "organizations_url": "https://api.github.com/users/hlynurf/orgs", "repos_url": "https://api.github.com/users/hlynurf/repos", "events_url": "https://api.github.com/users/hlynurf/events{/privacy}", "received_events_url": "https://api.github.com/users/hlynurf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-09T14:57:43Z", "updated_at": "2020-06-09T17:59:35Z", "closed_at": "2020-06-09T17:59:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "After updating to 2.9.1 forward refs are not being resolved correctly when typeguard is called from another file. Below is a minimal example I tried to come up with (will look a bit stupid). The error \r\n\r\n`test_typeguard.py`\r\n```python\r\nfrom typing import List, Union\r\n\r\nimport typeguard\r\n\r\nfrom test_helper import test_type\r\n\r\n\r\nclass ListOfValues(object):\r\n\tdef __init__(self, items: List['Value']) -> None:\r\n\t\tself.items = items\r\n\r\n\r\nclass Value(object):\r\n\tdef __init__(self, name: str) -> None:\r\n\t\tself.name = name\r\n\r\n\r\nobj = ListOfValues([])\r\ntest_type(obj, Union['Value', ListOfValues])\r\n```\r\n`test_helper.py`\r\n```python\r\nimport typeguard\r\n\r\n\r\ndef test_type(obj, type_):\r\n\ttypeguard.check_type('a', obj, type_)\r\n```\r\nRunning this gives me the error \r\n```\r\nTraceback (most recent call last):\r\n  File \"test_typeguard.py\", line 19, in <module>\r\n    test_type(obj, Union['Value', ListOfValues])\r\n  File \"/home/hlynur/code/dohop/test_helper.py\", line 5, in test_type\r\n    typeguard.check_type('a', obj, type_)\r\n  File \"/home/hlynur/.config/dohop/tools_venv3/lib/python3.7/site-packages/typeguard/__init__.py\", line 593, in check_type\r\n    checker_func(argname, value, expected_type, memo)\r\n  File \"/home/hlynur/.config/dohop/tools_venv3/lib/python3.7/site-packages/typeguard/__init__.py\", line 410, in check_union\r\n    check_type(argname, value, type_, memo)\r\n  File \"/home/hlynur/.config/dohop/tools_venv3/lib/python3.7/site-packages/typeguard/__init__.py\", line 588, in check_type\r\n    expected_type = resolve_forwardref(expected_type, memo)\r\n  File \"/home/hlynur/.config/dohop/tools_venv3/lib/python3.7/site-packages/typeguard/__init__.py\", line 166, in resolve_forwardref\r\n    return evaluate_forwardref(maybe_ref, memo.globals, memo.locals)\r\n  File \"/home/hlynur/.pyenv/versions/3.7.4/lib/python3.7/typing.py\", line 467, in _evaluate\r\n    eval(self.__forward_code__, globalns, localns),\r\n  File \"<string>\", line 1, in <module>\r\nNameError: name 'Value' is not defined\r\n```\r\nThe forward reference to Value is not evaluated correctly in this case.\r\nThe error does not occur in versions < 2.9.0 and the error does not occur if the helper function is inside test_typeguard.py. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/134", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/134/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/134/events", "html_url": "https://github.com/agronholm/typeguard/issues/134", "id": 632791196, "node_id": "MDU6SXNzdWU2MzI3OTExOTY=", "number": 134, "title": "Python 3.7: ImportError: cannot import name 'Literal' from 'typing'", "user": {"login": "lgeiger", "id": 13285808, "node_id": "MDQ6VXNlcjEzMjg1ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/13285808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgeiger", "html_url": "https://github.com/lgeiger", "followers_url": "https://api.github.com/users/lgeiger/followers", "following_url": "https://api.github.com/users/lgeiger/following{/other_user}", "gists_url": "https://api.github.com/users/lgeiger/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgeiger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgeiger/subscriptions", "organizations_url": "https://api.github.com/users/lgeiger/orgs", "repos_url": "https://api.github.com/users/lgeiger/repos", "events_url": "https://api.github.com/users/lgeiger/events{/privacy}", "received_events_url": "https://api.github.com/users/lgeiger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-06T22:58:53Z", "updated_at": "2020-06-07T09:32:01Z", "closed_at": "2020-06-07T08:04:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just noticed in [one of our CI builds](https://github.com/larq/compute-engine/pull/399/checks?check_run_id=745958478#step:5:32)  that c6fa51ce3cc63b217f74e9fe761ec46e7a87bda9 broke support for Python 3.7 in cases where `typing_extensions` isn't installed on the system since `Literal` was only introduced in Python 3.8:\r\nhttps://github.com/agronholm/typeguard/blob/0cdef35c5d6314dd807479bdb521386774902494/typeguard/__init__.py#L24-L27\r\n\r\nProbably the easiest way to fix this would be to add `typing_extensions` as an requirement to `setup.py` for Python <=3.7 or to make the use of `Literal` inside `typeguard` optional.\r\n@agronholm what do you think would be the best fix for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/133", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/133/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/133/events", "html_url": "https://github.com/agronholm/typeguard/issues/133", "id": 630719996, "node_id": "MDU6SXNzdWU2MzA3MTk5OTY=", "number": 133, "title": "Deactivating typeguard through environment variable or similar?", "user": {"login": "s-m-e", "id": 16851110, "node_id": "MDQ6VXNlcjE2ODUxMTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/16851110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s-m-e", "html_url": "https://github.com/s-m-e", "followers_url": "https://api.github.com/users/s-m-e/followers", "following_url": "https://api.github.com/users/s-m-e/following{/other_user}", "gists_url": "https://api.github.com/users/s-m-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/s-m-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s-m-e/subscriptions", "organizations_url": "https://api.github.com/users/s-m-e/orgs", "repos_url": "https://api.github.com/users/s-m-e/repos", "events_url": "https://api.github.com/users/s-m-e/events{/privacy}", "received_events_url": "https://api.github.com/users/s-m-e/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323139, "node_id": "MDU6TGFiZWwzMDQzMjMxMzk=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-04T10:54:04Z", "updated_at": "2020-06-04T11:23:17Z", "closed_at": "2020-06-04T11:18:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great tool, thanks for building it!\r\n\r\nQuestion: I have been adding `typeguard` to a larger project by decorating classes with `@typeguard.typechecked`. It works like a charm and certainly helps with testing, but it also has an impressively negative performance impact.\r\n\r\nIs it possible to deactivate `typeguard` through an environment variable for e.g. production deployments (similar to `-OO` in Python for deactivating `assert` statements)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/131", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/131/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/131/events", "html_url": "https://github.com/agronholm/typeguard/issues/131", "id": 629599596, "node_id": "MDU6SXNzdWU2Mjk1OTk1OTY=", "number": 131, "title": "Functions with NoReturn return types fail to type check", "user": {"login": "rfrowe", "id": 14118605, "node_id": "MDQ6VXNlcjE0MTE4NjA1", "avatar_url": "https://avatars3.githubusercontent.com/u/14118605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfrowe", "html_url": "https://github.com/rfrowe", "followers_url": "https://api.github.com/users/rfrowe/followers", "following_url": "https://api.github.com/users/rfrowe/following{/other_user}", "gists_url": "https://api.github.com/users/rfrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfrowe/subscriptions", "organizations_url": "https://api.github.com/users/rfrowe/orgs", "repos_url": "https://api.github.com/users/rfrowe/repos", "events_url": "https://api.github.com/users/rfrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/rfrowe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-03T00:19:53Z", "updated_at": "2020-06-03T09:09:10Z", "closed_at": "2020-06-03T09:09:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Reproduction\r\n```python3\r\n>>> from typing import NoReturn\r\n>>> from typeguard import typechecked\r\n\r\n>>> @typechecked\r\n>>> def foo() -> NoReturn:\r\n>>>    pass\r\n\r\n>>> foo()\r\n# AttributeError: '_SpecialForm' object has no attribute '__values__'\r\n```\r\n\r\n## Expected Behavior \r\n\r\nPasses type checking. (Although, maybe, it should fail because `NoReturn` shouldn't return but that's another conversation).\r\n\r\n## Cause\r\n\r\n#114 \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/130", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/130/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/130/events", "html_url": "https://github.com/agronholm/typeguard/issues/130", "id": 626096727, "node_id": "MDU6SXNzdWU2MjYwOTY3Mjc=", "number": 130, "title": "ForwardRefs fail to resolve inside TypedDicts", "user": {"login": "rfrowe", "id": 14118605, "node_id": "MDQ6VXNlcjE0MTE4NjA1", "avatar_url": "https://avatars3.githubusercontent.com/u/14118605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfrowe", "html_url": "https://github.com/rfrowe", "followers_url": "https://api.github.com/users/rfrowe/followers", "following_url": "https://api.github.com/users/rfrowe/following{/other_user}", "gists_url": "https://api.github.com/users/rfrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfrowe/subscriptions", "organizations_url": "https://api.github.com/users/rfrowe/orgs", "repos_url": "https://api.github.com/users/rfrowe/repos", "events_url": "https://api.github.com/users/rfrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/rfrowe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-27T23:11:02Z", "updated_at": "2020-06-03T12:47:17Z", "closed_at": "2020-06-03T12:47:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Problem\r\n\r\nAll value types which are or contain `ForwardRef`s will always pass type checking.\r\n\r\n## Reproduction\r\n\r\n```python3\r\n>>> from typing import TypedDict, Tuple, Union\r\n>>> Foo = Union[float, int, Tuple['Foo', ...]]\r\n>>> class Bar(TypedDict):\r\n    x: float\r\n    y: Foo\r\n>>> check_type('test', (1, 2, 'a'), Foo)  # Fails due to issue #62.\r\n>>>\r\n>>> @typechecked\r\ndef check_is_foo(obj: Foo):\r\n    pass\r\n>>> check_is_foo((1, 2, 'a'))\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    check_is_foo((1, 2, 'a'))\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 809, in wrapper\r\n    check_argument_types(memo)\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 670, in check_argument_types\r\n    raise exc from None\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 668, in check_argument_types\r\n    check_type(description, value, expected_type, memo)\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 566, in check_type\r\n    checker_func(argname, value, expected_type, memo)\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 409, in check_union\r\n    raise TypeError('type of {} must be one of ({}); got {} instead'.\r\nTypeError: type of argument \"obj\" must be one of (float, int, Tuple); got tuple instead\r\n>>>\r\n>>>\r\n>>> @typechecked\r\ndef check_is_bar(obj: Bar):\r\n    pass\r\n\r\n>>> check_is_bar({'x': 1.0, 'y': (1, 2, 'a')})\r\n>>>\r\n```\r\n\r\n## Expected Behavior\r\n\r\n`type of dict item \"y[2]\" for argument \"obj\" must be one of (float, int, Tuple); got str instead`\r\n\r\n## Cause\r\n\r\nThe memo is never passed to the recursive `check_type` call in `check_typed_dict`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/129", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/129/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/129/events", "html_url": "https://github.com/agronholm/typeguard/issues/129", "id": 626088551, "node_id": "MDU6SXNzdWU2MjYwODg1NTE=", "number": 129, "title": "Type checking fails for >=doubly nested recursive types", "user": {"login": "rfrowe", "id": 14118605, "node_id": "MDQ6VXNlcjE0MTE4NjA1", "avatar_url": "https://avatars3.githubusercontent.com/u/14118605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfrowe", "html_url": "https://github.com/rfrowe", "followers_url": "https://api.github.com/users/rfrowe/followers", "following_url": "https://api.github.com/users/rfrowe/following{/other_user}", "gists_url": "https://api.github.com/users/rfrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfrowe/subscriptions", "organizations_url": "https://api.github.com/users/rfrowe/orgs", "repos_url": "https://api.github.com/users/rfrowe/repos", "events_url": "https://api.github.com/users/rfrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/rfrowe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-27T22:53:31Z", "updated_at": "2020-06-06T10:14:40Z", "closed_at": "2020-06-06T10:14:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Problem\r\n\r\nRecursive types are not checked correctly and typing is not enforced beyond (I believe) the first level of nesting.\r\n\r\n## Reproduction\r\n```python3\r\n>>> from typing import Union, List, Dict\r\n>>> from typeguard import check_type, typechecked\r\n>>>\r\n>>> JSONType = Union[str, int, float, bool, None, List['JSONType'], Dict[str, 'JSONType']]\r\n>>>\r\n>>> # check_type('test', (1,2,3), JSONType)           # this fails correctly becau\r\n>>> illegal = {'abc': (1,2,3)}\r\n>>> check_type('test', illegal, JSONType)  # but this does not throw an\r\n>>>\r\n>>> @typechecked\r\ndef test_is_json(obj: JSONType):\r\n     pass\r\n>>> test_is_json(illegal)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    test_is_json(illegal)\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 809, in wrapper\r\n    check_argument_types(memo)\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 670, in check_argument_types\r\n    raise exc from None\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 668, in check_argument_types\r\n    check_type(description, value, expected_type, memo)\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 566, in check_type\r\n    checker_func(argname, value, expected_type, memo)\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 409, in check_union\r\n    raise TypeError('type of {} must be one of ({}); got {} instead'.\r\nTypeError: type of argument \"obj\" must be one of (str, int, float, bool, NoneType, List, Dict); got dict instead\r\n>>> test_is_json([1, 2, {'3': {'4': (1,2,3)}}])\r\n>>>\r\n```\r\n\r\n## Expected Behavior\r\n\r\n`TypeError: type of argument \"obj\" must be one of (str, int, float, bool, NoneType, List, Dict); got dict instead`\r\n\r\n## Cause\r\n\r\nIt seems that `ForwardRef`s are only evaluated once. The type of `obj` in `foo` is:\r\n```python3\r\nUnion[str, int, float, bool, None, List['JSONType'], Dict[str, 'JSONType']]\r\n```\r\n\r\nHowever, during the `check_argument_types` call, `obj`'s `expected_type` is:\r\n```python3\r\ntyping.Union[str, int, float, bool, NoneType, typing.List[typing.Union[str, int, float, bool, NoneType, typing.List[ForwardRef('JSONType')], typing.Dict[str, ForwardRef('JSONType')]]], typing.Dict[str, typing.Union[str, int, float, bool, NoneType, typing.List[ForwardRef('JSONType')], typing.Dict[str, ForwardRef('JSONType')]]]]\r\n```\r\n\r\nHere we can see that the `'JSONType'` `ForwardRef` has been evaluated once. When presented with a more-than-doubly-nested value, the `ForwardRef`s won't be resolved and default to `Any` as per #62.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/128", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/128/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/128/events", "html_url": "https://github.com/agronholm/typeguard/issues/128", "id": 626056249, "node_id": "MDU6SXNzdWU2MjYwNTYyNDk=", "number": 128, "title": "TypeError improperly raised when using nested Literal types", "user": {"login": "rfrowe", "id": 14118605, "node_id": "MDQ6VXNlcjE0MTE4NjA1", "avatar_url": "https://avatars3.githubusercontent.com/u/14118605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfrowe", "html_url": "https://github.com/rfrowe", "followers_url": "https://api.github.com/users/rfrowe/followers", "following_url": "https://api.github.com/users/rfrowe/following{/other_user}", "gists_url": "https://api.github.com/users/rfrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfrowe/subscriptions", "organizations_url": "https://api.github.com/users/rfrowe/orgs", "repos_url": "https://api.github.com/users/rfrowe/repos", "events_url": "https://api.github.com/users/rfrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/rfrowe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-27T21:49:01Z", "updated_at": "2020-06-02T22:52:51Z", "closed_at": "2020-06-02T20:05:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Problem\r\n\r\nWhen using a `Literal` type nested within `Union`, the wrong `TypeError` is raised on illegal values.\r\n\r\n## Reproduction\r\n\r\n```python3\r\n>>> from typeguard import check_type\r\n>>> from typing import Literal, Union\r\n>>> check_type('foo', 'foo', Union[float, Literal['bar'])\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 668, in check_argument_types\r\n    check_type(description, value, expected_type, memo)\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 566, in check_type\r\n    checker_func(argname, value, expected_type, memo)\r\n  File \"/usr/local/lib/python3.8/dist-packages/typeguard/__init__.py\", line 408, in check_union\r\n    typelist = ', '.join(get_type_name(t) for t in union_params)\r\nTypeError: sequence item 1: expected str instance, NoneType found\r\n```\r\n\r\n## Expected Behavior\r\n\r\n`TypeError: type of foo must be one of (float, Literal['bar']); got 'foo' instead`\r\n\r\nor\r\n\r\n`TypeError: type of foo must be one of (float, 'bar'); got 'foo' instead`\r\n\r\n## Cause\r\n\r\nIt seems `Literal` defines neither `__name__` nor `_name` so `get_type_name` returns `None`, which then raises a `TypeError` during `str.join`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/126", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/126/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/126/events", "html_url": "https://github.com/agronholm/typeguard/issues/126", "id": 622118005, "node_id": "MDU6SXNzdWU2MjIxMTgwMDU=", "number": 126, "title": "Flake8 tests fail on master", "user": {"login": "rfrowe", "id": 14118605, "node_id": "MDQ6VXNlcjE0MTE4NjA1", "avatar_url": "https://avatars3.githubusercontent.com/u/14118605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfrowe", "html_url": "https://github.com/rfrowe", "followers_url": "https://api.github.com/users/rfrowe/followers", "following_url": "https://api.github.com/users/rfrowe/following{/other_user}", "gists_url": "https://api.github.com/users/rfrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfrowe/subscriptions", "organizations_url": "https://api.github.com/users/rfrowe/orgs", "repos_url": "https://api.github.com/users/rfrowe/repos", "events_url": "https://api.github.com/users/rfrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/rfrowe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-20T22:16:03Z", "updated_at": "2020-05-21T09:42:22Z", "closed_at": "2020-05-21T09:42:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Flake8 tox tests fail on master as of now.\r\n\r\n## Logs\r\n```\r\nTOXENV=flake8 tox\r\nflake8 create: /private/tmp/typeguard/.tox/flake8\r\nflake8 installdeps: flake8\r\nflake8 installed: flake8==3.8.1,importlib-metadata==1.6.0,mccabe==0.6.1,pycodestyle==2.6.0,pyflakes==2.2.0,zipp==3.1.0\r\nflake8 run-test-pre: PYTHONHASHSEED='1419916053'\r\nflake8 run-test: commands[0] | flake8 typeguard.py tests\r\ntypeguard.py:0:1: E902 FileNotFoundError: [Errno 2] No such file or directory: 'typeguard.py'\r\nERROR: InvocationError for command /private/tmp/typeguard/.tox/flake8/bin/flake8 typeguard.py tests (exited with code 1)\r\n___________________________________ summary ____________________________________\r\nERROR:   flake8: commands failed\r\n```\r\n\r\n## Reproduction:\r\n```bash\r\n$ git clone https://github.com/agronholm/typeguard.git\r\n$ cd typeguard\r\n$ TOXENV=flake8 tox\r\n```\r\n\r\n## Cause\r\nMaster was last tested using `flake8==3.7.9`, however tox is automatically installinig `3.8.1`.\r\n\r\nAs it turns out, `flake8 typeguard.py` does nothing and this was a bug in `flake8==3.7.9`. You can invoke `flake8` with any arguments that are not Python files or packages and it will exit with success. The proper command, `flake8 typeguard` in fact shows that linting errors have made it into master:\r\n\r\n```\r\n$ flake8 typeguard\r\ntypeguard/__init__.py:32:5: F401 'typing._Protocol as Protocol' imported but unused\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/123", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/123/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/123/events", "html_url": "https://github.com/agronholm/typeguard/issues/123", "id": 612021740, "node_id": "MDU6SXNzdWU2MTIwMjE3NDA=", "number": 123, "title": "PEP 563 -- Postponed Evaluation of Annotations", "user": {"login": "slide333333", "id": 16817793, "node_id": "MDQ6VXNlcjE2ODE3Nzkz", "avatar_url": "https://avatars0.githubusercontent.com/u/16817793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slide333333", "html_url": "https://github.com/slide333333", "followers_url": "https://api.github.com/users/slide333333/followers", "following_url": "https://api.github.com/users/slide333333/following{/other_user}", "gists_url": "https://api.github.com/users/slide333333/gists{/gist_id}", "starred_url": "https://api.github.com/users/slide333333/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slide333333/subscriptions", "organizations_url": "https://api.github.com/users/slide333333/orgs", "repos_url": "https://api.github.com/users/slide333333/repos", "events_url": "https://api.github.com/users/slide333333/events{/privacy}", "received_events_url": "https://api.github.com/users/slide333333/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T16:54:40Z", "updated_at": "2020-06-03T12:48:21Z", "closed_at": "2020-06-03T12:48:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following example:\r\n```\r\nfrom __future__ import annotations  # PEP 563\r\n\r\nfrom typing import TypedDict\r\n\r\nclass Point2D(TypedDict):\r\n    x: float\r\n    y: float\r\n```\r\n\r\nDue to the `__future__` import `Point2D.__annotations__` now contains `{'x': ForwardRef('float'), 'y': ForwardRef('float')}` instead of `{'x': float, 'y': float}`.\r\n\r\nAs a consequence the type checking for any `TypedDict` attributes is not working any more. For example:\r\n`check_type('Point2D', {'x': 3, 'y': 'not a float'}, Point2D)` does not raise.\r\n\r\nThis is somehow related to https://github.com/agronholm/typeguard/issues/62.\r\n\r\nEdit:\r\nAs stated in PEP 563 the solution would be to just call `typing.get_type_hints` to evaluate the expressions:\r\n\r\n> For code that uses type hints, the typing.get_type_hints(obj, globalns=None, localns=None) function correctly evaluates expressions back from its string form. Note that all valid code currently using __annotations__ should already be doing that since a type annotation can be expressed as a string literal.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/122", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/122/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/122/events", "html_url": "https://github.com/agronholm/typeguard/issues/122", "id": 608581813, "node_id": "MDU6SXNzdWU2MDg1ODE4MTM=", "number": 122, "title": "check_type raises TypeError when validating typing.AnyStr ", "user": {"login": "JoaoReisBelo", "id": 6893620, "node_id": "MDQ6VXNlcjY4OTM2MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6893620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoReisBelo", "html_url": "https://github.com/JoaoReisBelo", "followers_url": "https://api.github.com/users/JoaoReisBelo/followers", "following_url": "https://api.github.com/users/JoaoReisBelo/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoReisBelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoReisBelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoReisBelo/subscriptions", "organizations_url": "https://api.github.com/users/JoaoReisBelo/orgs", "repos_url": "https://api.github.com/users/JoaoReisBelo/repos", "events_url": "https://api.github.com/users/JoaoReisBelo/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoReisBelo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-28T20:08:03Z", "updated_at": "2020-06-02T16:12:28Z", "closed_at": "2020-06-02T16:12:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "check_type raises a TypeError when validating typing.AnyStr, @typechecked validates it perfectly.\r\n\r\nFull error message: \"TypeError: encountered a TypeVar but a call memo was not provided\"\r\n\r\nExample code:\r\n\r\n```python3\r\nfrom typeguard import typechecked, check_type\r\nimport typing\r\n@typechecked\r\ndef test_AnyStr(value: typing.AnyStr):\r\n    print(\"So far so good...\")\r\n    check_type('Test', value, typing.AnyStr)\r\n    \r\ntest_AnyStr(\"Test\")\r\n```\r\n\r\nIt prints \"So far so good...\", meaning typechecked worked and then raises: \r\n\r\nError message:\r\n```\r\n/opt/conda/envs/rova_dev/lib/python3.7/site-packages/typeguard/__init__.py in check_type(argname, value, expected_type, memo)\r\n    599     elif isinstance(expected_type, TypeVar):\r\n    600         # Only happens on < 3.6\r\n--> 601         check_typevar(argname, value, expected_type, memo)\r\n    602     elif (isfunction(expected_type) and\r\n    603             getattr(expected_type, \"__module__\", None) == \"typing\" and\r\n\r\n/opt/conda/envs/rova_dev/lib/python3.7/site-packages/typeguard/__init__.py in check_typevar(argname, value, typevar, memo, subclass_check)\r\n    434                   subclass_check: bool = False) -> None:\r\n    435     if memo is None:\r\n--> 436         raise TypeError('encountered a TypeVar but a call memo was not provided')\r\n    437 \r\n    438     bound_type = resolve_forwardref(memo.typevars.get(typevar, typevar.__bound__), memo)\r\n\r\nTypeError: encountered a TypeVar but a call memo was not provided\r\n```\r\nAm I doing something wrong?\r\n\r\npython version 3.7.6\r\ntypeguard version 2.7.0\r\n\r\nthanks for your great work,\r\nJ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/119", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/119/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/119/events", "html_url": "https://github.com/agronholm/typeguard/issues/119", "id": 588489004, "node_id": "MDU6SXNzdWU1ODg0ODkwMDQ=", "number": 119, "title": "Support for Python 2 type comments", "user": {"login": "rmorshea", "id": 4041990, "node_id": "MDQ6VXNlcjQwNDE5OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4041990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmorshea", "html_url": "https://github.com/rmorshea", "followers_url": "https://api.github.com/users/rmorshea/followers", "following_url": "https://api.github.com/users/rmorshea/following{/other_user}", "gists_url": "https://api.github.com/users/rmorshea/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmorshea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmorshea/subscriptions", "organizations_url": "https://api.github.com/users/rmorshea/orgs", "repos_url": "https://api.github.com/users/rmorshea/repos", "events_url": "https://api.github.com/users/rmorshea/events{/privacy}", "received_events_url": "https://api.github.com/users/rmorshea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-26T15:02:26Z", "updated_at": "2020-03-26T16:05:57Z", "closed_at": "2020-03-26T15:04:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Support for Python 2's type comments might have been purposefully omitted, but if not, it would be great to see. Here's an implementation from a competing project that could be used for inspiration:\r\n\r\n- https://github.com/Stewori/pytypes/blob/master/pytypes/typecomment_parser.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/117", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/117/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/117/events", "html_url": "https://github.com/agronholm/typeguard/issues/117", "id": 586083563, "node_id": "MDU6SXNzdWU1ODYwODM1NjM=", "number": 117, "title": "runtime overhead", "user": {"login": "albanie", "id": 4395064, "node_id": "MDQ6VXNlcjQzOTUwNjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4395064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albanie", "html_url": "https://github.com/albanie", "followers_url": "https://api.github.com/users/albanie/followers", "following_url": "https://api.github.com/users/albanie/following{/other_user}", "gists_url": "https://api.github.com/users/albanie/gists{/gist_id}", "starred_url": "https://api.github.com/users/albanie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albanie/subscriptions", "organizations_url": "https://api.github.com/users/albanie/orgs", "repos_url": "https://api.github.com/users/albanie/repos", "events_url": "https://api.github.com/users/albanie/events{/privacy}", "received_events_url": "https://api.github.com/users/albanie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323139, "node_id": "MDU6TGFiZWwzMDQzMjMxMzk=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-23T10:04:32Z", "updated_at": "2020-03-23T16:24:14Z", "closed_at": "2020-03-23T16:24:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there any timing/profiling benchmarks to assess runtime overhead?  Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/116", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/116/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/116/events", "html_url": "https://github.com/agronholm/typeguard/issues/116", "id": 577515294, "node_id": "MDU6SXNzdWU1Nzc1MTUyOTQ=", "number": 116, "title": "Add brief description to docs", "user": {"login": "joernheissler", "id": 865592, "node_id": "MDQ6VXNlcjg2NTU5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/865592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joernheissler", "html_url": "https://github.com/joernheissler", "followers_url": "https://api.github.com/users/joernheissler/followers", "following_url": "https://api.github.com/users/joernheissler/following{/other_user}", "gists_url": "https://api.github.com/users/joernheissler/gists{/gist_id}", "starred_url": "https://api.github.com/users/joernheissler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joernheissler/subscriptions", "organizations_url": "https://api.github.com/users/joernheissler/orgs", "repos_url": "https://api.github.com/users/joernheissler/repos", "events_url": "https://api.github.com/users/joernheissler/events{/privacy}", "received_events_url": "https://api.github.com/users/joernheissler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-08T15:08:45Z", "updated_at": "2020-06-03T03:45:50Z", "closed_at": "2020-06-02T20:26:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When opening <https://typeguard.readthedocs.io/>, it is completely unclear what a `typeguard` is.\r\nCould you please add a brief description so strangers will understand what the library does?\r\n\r\nThanks :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/115", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/115/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/115/events", "html_url": "https://github.com/agronholm/typeguard/issues/115", "id": 576503488, "node_id": "MDU6SXNzdWU1NzY1MDM0ODg=", "number": 115, "title": "Typeguard and MyPy disagree about ContextManagers", "user": {"login": "prescod", "id": 22091, "node_id": "MDQ6VXNlcjIyMDkx", "avatar_url": "https://avatars1.githubusercontent.com/u/22091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prescod", "html_url": "https://github.com/prescod", "followers_url": "https://api.github.com/users/prescod/followers", "following_url": "https://api.github.com/users/prescod/following{/other_user}", "gists_url": "https://api.github.com/users/prescod/gists{/gist_id}", "starred_url": "https://api.github.com/users/prescod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prescod/subscriptions", "organizations_url": "https://api.github.com/users/prescod/orgs", "repos_url": "https://api.github.com/users/prescod/repos", "events_url": "https://api.github.com/users/prescod/events{/privacy}", "received_events_url": "https://api.github.com/users/prescod/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323140, "node_id": "MDU6TGFiZWwzMDQzMjMxNDA=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-05T20:12:50Z", "updated_at": "2020-08-15T20:51:52Z", "closed_at": "2020-06-02T20:03:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given this code:\r\n\r\n```\r\nfrom typing import ContextManager, Generator\r\nfrom contextlib import contextmanager\r\n\r\n\r\n@contextmanager\r\ndef foo() -> ContextManager[str]:\r\n    yield \"Hello\"\r\n\r\n\r\n@contextmanager\r\ndef bar() -> Generator[str, None, None]:\r\n    yield \"Hello\"\r\n\r\n\r\ndef main():\r\n    foo()\r\n    bar()\r\n```\r\n\r\nMypy dislikes `foo`\r\n\r\n```\r\ncode_to_check.py:5: error: The return type of a generator function should be \"Generator\" or one of its supertypes\r\ncode_to_check.py:5: error: Argument 1 to \"contextmanager\" has incompatible type \"Callable[[], ContextManager[str]]\"; expected \"Callable[..., Iterator[<nothing>]]\"\r\n```\r\n\r\nTypeguard dislikes `bar`\r\n\r\n```\r\n  File \"type_check.py\", line 6, in <module>\r\n    code_to_check.main()\r\n  File \"/Users/pprescod/code/CumulusCI/code_to_check.py\", line 17, in main\r\n    bar()\r\n  File \"/Users/pprescod/.venvs/CCI-37/lib/python3.7/site-packages/typeguard/__init__.py\", line 811, in wrapper\r\n    check_return_type(retval, memo)\r\n  File \"/Users/pprescod/.venvs/CCI-37/lib/python3.7/site-packages/typeguard/__init__.py\", line 635, in check_return_type\r\n    raise exc from None\r\n  File \"/Users/pprescod/.venvs/CCI-37/lib/python3.7/site-packages/typeguard/__init__.py\", line 633, in check_return_type\r\n    check_type('the return value', retval, memo.type_hints['return'], memo)\r\n  File \"/Users/pprescod/.venvs/CCI-37/lib/python3.7/site-packages/typeguard/__init__.py\", line 568, in check_type\r\n    check_type(argname, value, origin_type, memo)\r\n  File \"/Users/pprescod/.venvs/CCI-37/lib/python3.7/site-packages/typeguard/__init__.py\", line 598, in check_type\r\n    format(argname, qualified_name(expected_type), qualified_name(value)))\r\nTypeError: type of the return value must be collections.abc.Generator; got contextlib._GeneratorContextManager instead\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/113", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/113/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/113/events", "html_url": "https://github.com/agronholm/typeguard/issues/113", "id": 574297061, "node_id": "MDU6SXNzdWU1NzQyOTcwNjE=", "number": 113, "title": "TypeError when checking Union containing Literal type", "user": {"login": "rfrowe", "id": 14118605, "node_id": "MDQ6VXNlcjE0MTE4NjA1", "avatar_url": "https://avatars3.githubusercontent.com/u/14118605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfrowe", "html_url": "https://github.com/rfrowe", "followers_url": "https://api.github.com/users/rfrowe/followers", "following_url": "https://api.github.com/users/rfrowe/following{/other_user}", "gists_url": "https://api.github.com/users/rfrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfrowe/subscriptions", "organizations_url": "https://api.github.com/users/rfrowe/orgs", "repos_url": "https://api.github.com/users/rfrowe/repos", "events_url": "https://api.github.com/users/rfrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/rfrowe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-02T22:43:40Z", "updated_at": "2020-06-02T22:53:51Z", "closed_at": "2020-06-02T19:50:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When type checking a value against a union containing a literal type, a TypeError is encountered when constructing the correct TypeError message.\r\n\r\n## Reproduction\r\n```python3\r\nfrom typing import Literal, Union\r\nfrom typeguard import check_type\r\n\r\nFooBar = Union[int, Literal['one', 'two', 'three']]\r\ncheck_type('repro', 'ome', FooBar)\r\n``` \r\n\r\n## Behavior\r\n### Expected\r\nThe expected error message here is undefined but should be something like:\r\n```\r\nTypeError: type of repro must be one of (Literal['one', 'two', 'three'], int); got 'ome' instead\r\n```\r\n\r\n### Actual\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".../python3.8/site-packages/typeguard/__init__.py\", line 566, in check_type\r\n    checker_func(argname, value, expected_type, memo)\r\n  File \".../python3.8/site-packages/typeguard/__init__.py\", line 408, in check_union\r\n    typelist = ', '.join(get_type_name(t) for t in union_params)\r\nTypeError: sequence item 1: expected str instance, NoneType found\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/112", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/112/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/112/events", "html_url": "https://github.com/agronholm/typeguard/issues/112", "id": 572773773, "node_id": "MDU6SXNzdWU1NzI3NzM3NzM=", "number": 112, "title": "Typechecking for `typing.Union` or `typing.Iterable` is not working", "user": {"login": "kipstakkr", "id": 30400177, "node_id": "MDQ6VXNlcjMwNDAwMTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/30400177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kipstakkr", "html_url": "https://github.com/kipstakkr", "followers_url": "https://api.github.com/users/kipstakkr/followers", "following_url": "https://api.github.com/users/kipstakkr/following{/other_user}", "gists_url": "https://api.github.com/users/kipstakkr/gists{/gist_id}", "starred_url": "https://api.github.com/users/kipstakkr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kipstakkr/subscriptions", "organizations_url": "https://api.github.com/users/kipstakkr/orgs", "repos_url": "https://api.github.com/users/kipstakkr/repos", "events_url": "https://api.github.com/users/kipstakkr/events{/privacy}", "received_events_url": "https://api.github.com/users/kipstakkr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-28T14:01:31Z", "updated_at": "2020-03-01T15:14:54Z", "closed_at": "2020-03-01T15:14:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am trying to use the `typeguard.check_argument_types()` in my method in which one of the arguments has a type `Iterable[str]` or `Union[List[str], Tuple[str], Set[str]]`. Both were working for lists, but when I try to use it for tuples or sets it is throwing error stating\r\n```\r\ntype of argument \"x\" must be one of (List, NoneType); got tuple instead\r\n```\r\n\r\nI don't whether I am doing something wrong, or if the method does not account for `Union` or `Iterable` types. Please help me with this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/111", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/111/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/111/events", "html_url": "https://github.com/agronholm/typeguard/issues/111", "id": 559741659, "node_id": "MDU6SXNzdWU1NTk3NDE2NTk=", "number": 111, "title": "Autograph is incompatible with typeguard", "user": {"login": "gabrieldemarmiesse", "id": 12891691, "node_id": "MDQ6VXNlcjEyODkxNjkx", "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabrieldemarmiesse", "html_url": "https://github.com/gabrieldemarmiesse", "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers", "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}", "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions", "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs", "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos", "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}", "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-04T14:05:34Z", "updated_at": "2020-06-02T20:06:19Z", "closed_at": "2020-06-02T20:06:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, it's surely not the job of typeguard to change anything to be compatible, I'm just leaving the issue here in case somebody were to have the same issue and was looking for the reason.\r\n\r\nThe original issue is in the tensorflow repository: https://github.com/tensorflow/tensorflow/issues/36462\r\n\r\nAnd thanks for this awesome tool!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/107", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/107/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/107/events", "html_url": "https://github.com/agronholm/typeguard/issues/107", "id": 554664164, "node_id": "MDU6SXNzdWU1NTQ2NjQxNjQ=", "number": 107, "title": "The typechecked decorator hides arguments from inspect", "user": {"login": "gabrieldemarmiesse", "id": 12891691, "node_id": "MDQ6VXNlcjEyODkxNjkx", "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabrieldemarmiesse", "html_url": "https://github.com/gabrieldemarmiesse", "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers", "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}", "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions", "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs", "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos", "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}", "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323140, "node_id": "MDU6TGFiZWwzMDQzMjMxNDA=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-24T10:45:29Z", "updated_at": "2020-01-24T11:34:12Z", "closed_at": "2020-01-24T11:15:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "We would like in tensorflow addons to use typechecked in the public API. We would also like to check that new contributors don't forget to add the types when adding new functions. The probem is that we can't implement this check since typechecked doesn't play nice with inspect:\r\n\r\n```python\r\nimport inspect\r\nfrom typeguard import typechecked\r\n\r\ndef my_func(a: int, b: str):\r\n    pass\r\n\r\nprint(inspect.getfullargspec(my_func).args)\r\n\r\nmy_func = typechecked(my_func)\r\n\r\nprint(inspect.getfullargspec(my_func).args)\r\n```\r\n\r\n```\r\n['a', 'b']\r\n[]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/104", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/104/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/104/events", "html_url": "https://github.com/agronholm/typeguard/issues/104", "id": 542853121, "node_id": "MDU6SXNzdWU1NDI4NTMxMjE=", "number": 104, "title": "Protocol-related performance regression", "user": {"login": "arnimarj", "id": 143150, "node_id": "MDQ6VXNlcjE0MzE1MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/143150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnimarj", "html_url": "https://github.com/arnimarj", "followers_url": "https://api.github.com/users/arnimarj/followers", "following_url": "https://api.github.com/users/arnimarj/following{/other_user}", "gists_url": "https://api.github.com/users/arnimarj/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnimarj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnimarj/subscriptions", "organizations_url": "https://api.github.com/users/arnimarj/orgs", "repos_url": "https://api.github.com/users/arnimarj/repos", "events_url": "https://api.github.com/users/arnimarj/events{/privacy}", "received_events_url": "https://api.github.com/users/arnimarj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-27T12:03:22Z", "updated_at": "2019-12-27T15:09:10Z", "closed_at": "2019-12-27T14:55:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWe recently rolled out the 2.7.0 release of typeguard across our infrastructure, and noticed an interesting performance regression w.r.t. 2.6.1. We've narrowed it down to the new protocol support, and in particular the call to `inspect.getattr_static`.\r\n\r\nA small example to demonstrate:\r\n\r\n```bash\r\n$ pip install -q typeguard==2.6.1\r\n$ python guard.py\r\nT: 3.40 seconds\r\nversion: 2.6.1\r\n$ \r\n$ pip install -q typeguard==2.7.0\r\n$ python guard.py \r\nT: 11.15 seconds\r\nversion: 2.7.0\r\n```\r\n\r\n`guard.py`:\r\n\r\n```python\r\nimport attr\r\nimport time\r\nimport typeguard\r\n\r\n\r\n@attr.s\r\nclass MyTypedClass:\r\n\ta: str = attr.ib()\r\n\tb: str = attr.ib()\r\n\tc: int = attr.ib()\r\n\r\n\tdef __attrs_post_init__(self) -> None:\r\n\t\tTypecheckAttrInstance(self)\r\n\r\n\r\ndef TypecheckAttrInstance(obj):\r\n\tassert(attr.has(obj))\r\n\r\n\tfor a in attr.fields(type(obj)):\r\n\t\tvalue = getattr(obj, a.name)\r\n\t\ttypeguard.check_type(a.name, value, a.type)\r\n\r\n\r\ndef main():\r\n\tt_0 = time.monotonic()\r\n\r\n\tfor _ in range(10**5 * 4):\r\n\t\tMyTypedClass(a='foo', b='bar', c=42)\r\n\r\n\tprint(f'T: {time.monotonic() - t_0:.2f} seconds')\r\n\tprint(f'version: {_typeguard_version()}')\r\n\r\n\r\ndef _typeguard_version():\r\n\tfrom pip._internal.utils.misc import get_installed_distributions\r\n\r\n\tfor p in get_installed_distributions():\r\n\t\tif 'typeguard' in str(p):\r\n\t\t\treturn p.version\r\n\r\n\traise ValueError\r\n\r\n\r\nif __name__ == '__main__':\r\n\tmain()\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/103", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/103/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/103/events", "html_url": "https://github.com/agronholm/typeguard/issues/103", "id": 542212123, "node_id": "MDU6SXNzdWU1NDIyMTIxMjM=", "number": 103, "title": "Error when call decorator without parameters", "user": {"login": "vd2org", "id": 33198864, "node_id": "MDQ6VXNlcjMzMTk4ODY0", "avatar_url": "https://avatars3.githubusercontent.com/u/33198864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vd2org", "html_url": "https://github.com/vd2org", "followers_url": "https://api.github.com/users/vd2org/followers", "following_url": "https://api.github.com/users/vd2org/following{/other_user}", "gists_url": "https://api.github.com/users/vd2org/gists{/gist_id}", "starred_url": "https://api.github.com/users/vd2org/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vd2org/subscriptions", "organizations_url": "https://api.github.com/users/vd2org/orgs", "repos_url": "https://api.github.com/users/vd2org/repos", "events_url": "https://api.github.com/users/vd2org/events{/privacy}", "received_events_url": "https://api.github.com/users/vd2org/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-24T21:38:23Z", "updated_at": "2019-12-25T15:53:45Z", "closed_at": "2019-12-25T15:53:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Called `typechecked` decorator without parameters returns `None` when run in **optimised** mode but on **debug** mode works ok.  \r\n\r\n```python\r\n# typeguard-2.7.0\r\n\r\nfrom typeguard import typechecked\r\n\r\n# good\r\n@typechecked\r\ndef foo() -> str:\r\n    return 'foo'\r\n\r\n# good\r\n@typechecked(always=True)\r\ndef bar() -> str:\r\n    return \"bar\"\r\n\r\n# error here if I call python with -O, python 3.8.0\r\n@typechecked()\r\ndef baz() -> str:\r\n    return \"baz\"\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/102", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/102/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/102/events", "html_url": "https://github.com/agronholm/typeguard/issues/102", "id": 541384499, "node_id": "MDU6SXNzdWU1NDEzODQ0OTk=", "number": 102, "title": "Possibility to check types of elements of an iterable directly", "user": {"login": "jsh9", "id": 25124332, "node_id": "MDQ6VXNlcjI1MTI0MzMy", "avatar_url": "https://avatars0.githubusercontent.com/u/25124332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsh9", "html_url": "https://github.com/jsh9", "followers_url": "https://api.github.com/users/jsh9/followers", "following_url": "https://api.github.com/users/jsh9/following{/other_user}", "gists_url": "https://api.github.com/users/jsh9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsh9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsh9/subscriptions", "organizations_url": "https://api.github.com/users/jsh9/orgs", "repos_url": "https://api.github.com/users/jsh9/repos", "events_url": "https://api.github.com/users/jsh9/events{/privacy}", "received_events_url": "https://api.github.com/users/jsh9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-21T23:21:21Z", "updated_at": "2020-03-02T07:09:15Z", "closed_at": "2020-03-02T07:09:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Even though we can specify something like `List[int]` or `Sequence[float]`, for some other common array-like data types (such as numpy array, or pandas Series), it is difficult to do so. (Neither numpy array or pandas Series is a `collections.abc.Sequence` yet.)\r\n\r\nSo I wonder if you can add a `check_element_type()` function that checks the type of each element of an iterable?\r\n\r\nIt can have the following signature:\r\n```python\r\ndef check_element_type(arg_name, iterable, expected_type):\r\n    ...\r\n```\r\n\r\nAlternatively, is it possible to enforce type checking of `Iterable[something]`? For example, currently, this following case doesn't raise an error:\r\n\r\n```python\r\n@typeguard.typechecked\r\ndef func1(x: Iterable[int]):\r\n    print(x)\r\n\r\nfunc1([1, 2, 3.4])  # doesn't raise any error\r\n```\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/101", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/101/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/101/events", "html_url": "https://github.com/agronholm/typeguard/issues/101", "id": 540341124, "node_id": "MDU6SXNzdWU1NDAzNDExMjQ=", "number": 101, "title": "check_type does not check required fields when mixing required and non-required fields in TypedDict", "user": {"login": "ksaaskil", "id": 11660974, "node_id": "MDQ6VXNlcjExNjYwOTc0", "avatar_url": "https://avatars1.githubusercontent.com/u/11660974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksaaskil", "html_url": "https://github.com/ksaaskil", "followers_url": "https://api.github.com/users/ksaaskil/followers", "following_url": "https://api.github.com/users/ksaaskil/following{/other_user}", "gists_url": "https://api.github.com/users/ksaaskil/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksaaskil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksaaskil/subscriptions", "organizations_url": "https://api.github.com/users/ksaaskil/orgs", "repos_url": "https://api.github.com/users/ksaaskil/repos", "events_url": "https://api.github.com/users/ksaaskil/events{/privacy}", "received_events_url": "https://api.github.com/users/ksaaskil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323140, "node_id": "MDU6TGFiZWwzMDQzMjMxNDA=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-19T14:17:21Z", "updated_at": "2020-06-02T20:47:22Z", "closed_at": "2020-06-02T20:46:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thanks for the awesome library! A recent fix for an issue (https://github.com/agronholm/typeguard/issues/94) added support for totality in `TypedDict`, thanks for that! I'm trying to mix required and non-required fields in `TypedDict` as instructed in [mypy documentation](https://mypy.readthedocs.io/en/latest/more_types.html#mixing-required-and-non-required-items):\r\n```python\r\nclass MovieBase(TypedDict):\r\n    name: str\r\n    year: int\r\n\r\nclass Movie(MovieBase, total=False):\r\n    based_on: str\r\n```\r\nThis definition should make `name` and `year` required fields in `Movie`. \r\n\r\nHowever, `check_type` does not seem to complain if those are missing:\r\n```python\r\nfrom typeguard import check_type\r\n\r\nmovie = Movie()   # Missing `name` and `year` , type-checker complains\r\ncheck_type(\"movie\", movie, Movie)  # Does not raise error but it should?\r\n```\r\nAny idea what might be wrong here? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/99", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/99/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/99/events", "html_url": "https://github.com/agronholm/typeguard/issues/99", "id": 538222109, "node_id": "MDU6SXNzdWU1MzgyMjIxMDk=", "number": 99, "title": "New Protocol support in 2.7.0 breaks pytest-typeguard for some codebases", "user": {"login": "jtbeach", "id": 12853460, "node_id": "MDQ6VXNlcjEyODUzNDYw", "avatar_url": "https://avatars0.githubusercontent.com/u/12853460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtbeach", "html_url": "https://github.com/jtbeach", "followers_url": "https://api.github.com/users/jtbeach/followers", "following_url": "https://api.github.com/users/jtbeach/following{/other_user}", "gists_url": "https://api.github.com/users/jtbeach/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtbeach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtbeach/subscriptions", "organizations_url": "https://api.github.com/users/jtbeach/orgs", "repos_url": "https://api.github.com/users/jtbeach/repos", "events_url": "https://api.github.com/users/jtbeach/events{/privacy}", "received_events_url": "https://api.github.com/users/jtbeach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-16T06:59:08Z", "updated_at": "2020-06-04T21:35:10Z", "closed_at": "2020-06-04T15:33:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there,\r\n\r\nWith my codebase I run tests with pytest-typeguard to catch runtime type errors -- when I try to upgrade in 2.7.0, I get the following errors with my Protocol subclasses because I would need to decorate them with `@runtime`. This is emitted by the `issubclass` check -- the metaclass for protocols implement a subclass hook. An example error is:\r\n\r\n```\r\n TypeError: Instance and class checks can only be used with @runtime protocols\r\n```\r\n\r\nI went ahead and decorated my Protocol subclasses with this, but I then get further errors when I because subclass checking only works with Protocol subclasses where all members are callable. I have some where I have variables as well as methods. If I simply decorate with @runtime, I then get an error:\r\n\r\n```\r\nTypeError: Protocols with non-method members don't support issubclass()\r\n```\r\n\r\nOne idea I had would be to use `isinstance` rather than `issubclass` in the check.\r\n\r\nNote I use Python 3.7 and import `Protocol` from `typing_extensions`.\r\n\r\nI'm happy to raise a PR if you could provide some guidance as to what you think the desired behaviour is here. At the moment, we can't use pytest-typeguard on our codebase in 2.7.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/98", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/98/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/98/events", "html_url": "https://github.com/agronholm/typeguard/issues/98", "id": 538025320, "node_id": "MDU6SXNzdWU1MzgwMjUzMjA=", "number": 98, "title": "Inconsistent behavior when handling float/int", "user": {"login": "jsh9", "id": 25124332, "node_id": "MDQ6VXNlcjI1MTI0MzMy", "avatar_url": "https://avatars0.githubusercontent.com/u/25124332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsh9", "html_url": "https://github.com/jsh9", "followers_url": "https://api.github.com/users/jsh9/followers", "following_url": "https://api.github.com/users/jsh9/following{/other_user}", "gists_url": "https://api.github.com/users/jsh9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsh9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsh9/subscriptions", "organizations_url": "https://api.github.com/users/jsh9/orgs", "repos_url": "https://api.github.com/users/jsh9/repos", "events_url": "https://api.github.com/users/jsh9/events{/privacy}", "received_events_url": "https://api.github.com/users/jsh9/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-15T09:30:15Z", "updated_at": "2019-12-15T21:42:25Z", "closed_at": "2019-12-15T10:25:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've found that the `int` type in `List[int]` is correctly enforced, but not the `int` type in `Dict[str, int]`. Here is an example to reproduce my observation:\r\n\r\n```python\r\nfrom typeguard import typechecked\r\nfrom typing import Dict, List\r\n\r\n@typechecked\r\ndef func(a: List[int], b: Dict[str, float]) -> bool:\r\n    return True\r\n\r\nfunc([1, 2], {'a': 1, 'b': 2.0})  # should have failed, but didn't\r\nfunc([1, 2.0], {'a': 1, 'b': 2})  # failed, as expected\r\n```\r\n\r\nIs this behavior a bug, or a feature?\r\n\r\nThanks! (Btw, awesome package!)\r\n\r\n(My Python version is 3.7.3.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/96", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/96/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/96/events", "html_url": "https://github.com/agronholm/typeguard/issues/96", "id": 530458703, "node_id": "MDU6SXNzdWU1MzA0NTg3MDM=", "number": 96, "title": "Difficult to use typeguard and MagicMock", "user": {"login": "prescod", "id": 22091, "node_id": "MDQ6VXNlcjIyMDkx", "avatar_url": "https://avatars1.githubusercontent.com/u/22091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prescod", "html_url": "https://github.com/prescod", "followers_url": "https://api.github.com/users/prescod/followers", "following_url": "https://api.github.com/users/prescod/following{/other_user}", "gists_url": "https://api.github.com/users/prescod/gists{/gist_id}", "starred_url": "https://api.github.com/users/prescod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prescod/subscriptions", "organizations_url": "https://api.github.com/users/prescod/orgs", "repos_url": "https://api.github.com/users/prescod/repos", "events_url": "https://api.github.com/users/prescod/events{/privacy}", "received_events_url": "https://api.github.com/users/prescod/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323136, "node_id": "MDU6TGFiZWwzMDQzMjMxMzY=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-29T18:36:28Z", "updated_at": "2020-06-02T19:51:53Z", "closed_at": "2020-06-02T19:51:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Thanks for TypeGuard! I love it. Much better way to ease into type checking than MyPy.\r\n\r\nI've found a workaround, but might it make sense to allow MagicMocks to pass type argument and return type checks (not necessarily programming isinstance checks)?\r\n\r\nMy workaround is a \"Mockable\" generic type. It kind of adds noise to the code, though.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/94", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/94/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/94/events", "html_url": "https://github.com/agronholm/typeguard/issues/94", "id": 528253798, "node_id": "MDU6SXNzdWU1MjgyNTM3OTg=", "number": 94, "title": "Support for totality in TypedDict checks", "user": {"login": "alexminerdesigns", "id": 474635, "node_id": "MDQ6VXNlcjQ3NDYzNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/474635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexminerdesigns", "html_url": "https://github.com/alexminerdesigns", "followers_url": "https://api.github.com/users/alexminerdesigns/followers", "following_url": "https://api.github.com/users/alexminerdesigns/following{/other_user}", "gists_url": "https://api.github.com/users/alexminerdesigns/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexminerdesigns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexminerdesigns/subscriptions", "organizations_url": "https://api.github.com/users/alexminerdesigns/orgs", "repos_url": "https://api.github.com/users/alexminerdesigns/repos", "events_url": "https://api.github.com/users/alexminerdesigns/events{/privacy}", "received_events_url": "https://api.github.com/users/alexminerdesigns/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-25T18:15:23Z", "updated_at": "2019-12-03T17:15:11Z", "closed_at": "2019-11-26T15:30:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears that typeguard currently doesn't support totality in the TypedDict check.\r\n\r\n```\r\nfrom typing import TypedDict\r\nfrom typeguard import check_type\r\n\r\nclass DoesNotRequireAllFieldsToBePresent(TypedDict, total=False):\r\n  fieldA: str\r\n  fieldB: str\r\n\r\ncheck_type('TotalityTest', {'fieldA': 'abcd'}, DoesNotRequireAllFieldsToBePresent)\r\n```\r\n\r\nThe above line should pass validation, but instead ignores the totality override and raises 'TypeError: the required key \"fieldB\" is missing for TotalityTest'\r\n\r\nSince totality is a part of [PEP-589](https://www.python.org/dev/peps/pep-0589/#totality), it would be great to add typeguard support for fields that are not required to be present.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/92", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/92/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/92/events", "html_url": "https://github.com/agronholm/typeguard/issues/92", "id": 521953008, "node_id": "MDU6SXNzdWU1MjE5NTMwMDg=", "number": 92, "title": "Dict typechecking behaviour with no args does not correspond to Dict[Any, Any]", "user": {"login": "jtbeach", "id": 12853460, "node_id": "MDQ6VXNlcjEyODUzNDYw", "avatar_url": "https://avatars0.githubusercontent.com/u/12853460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtbeach", "html_url": "https://github.com/jtbeach", "followers_url": "https://api.github.com/users/jtbeach/followers", "following_url": "https://api.github.com/users/jtbeach/following{/other_user}", "gists_url": "https://api.github.com/users/jtbeach/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtbeach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtbeach/subscriptions", "organizations_url": "https://api.github.com/users/jtbeach/orgs", "repos_url": "https://api.github.com/users/jtbeach/repos", "events_url": "https://api.github.com/users/jtbeach/events{/privacy}", "received_events_url": "https://api.github.com/users/jtbeach/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-13T04:31:25Z", "updated_at": "2019-11-17T23:38:51Z", "closed_at": "2019-11-17T13:14:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not sure if this behaviour is intended or not, but it does differ from mypy.\r\n\r\nIf I declare an argument or return value as just `Dict`, I usually intend that to mean `Dict[Any, Any]`. This seems to correspond to what mypy is doing.\r\n\r\nWhat typeguard seems to do is determine the type of the keys and values from the first item in the dict if the types are initially unbound.\r\n\r\nThe practical implication of this is that unless all your values are of the same type, you need to explicitly specify to type as `Dict[str, Any]`. This is a very common issue in parsed JSON for example where some values are int, lists dicts, etc.\r\n\r\nJust wondering if this is intended behaviour or a bug? It certainly makes writing type annotations unnecessarily verbose IMO.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/91", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/91/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/91/events", "html_url": "https://github.com/agronholm/typeguard/issues/91", "id": 520526429, "node_id": "MDU6SXNzdWU1MjA1MjY0Mjk=", "number": 91, "title": "*args is not flexible enough", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-11-09T23:11:53Z", "updated_at": "2019-11-10T18:50:51Z", "closed_at": "2019-11-10T13:58:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n\r\n`TypeGuardTest.py`:\r\n```python3\r\nfrom typeguard.importhook import install_import_hook\r\n\r\ninstall_import_hook('Test')\r\n\r\nimport Test\r\n```\r\n\r\n`Test.py`:\r\n```python3\r\nclass A:\r\n    def __init__(self, x: int, y: str):\r\n        print(\"OK\")\r\n\r\n    @classmethod\r\n    def f(cls, *args) -> 'A':\r\n        return cls(*args)\r\n\r\nclass B(A):\r\n    def __init__(self, y: str):\r\n        super().__init__(111, y)\r\n\r\nB.f('abc')\r\n```\r\nproduces the following output:\r\n```python3\r\n$ python3 Test.py\r\nOK\r\n$ python3 TypeGuardTest.py\r\nTraceback (most recent call last):\r\n  File \"TypeGuardTest.py\", line 5, in <module>\r\n    import Test\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"Test.py\", line 13, in <module>\r\n    B.f('abc')\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/__init__.py\", line 737, in wrapper\r\n    retval = func(*args, **kwargs)\r\n  File \"Test.py\", line 7, in f\r\n    return cls(*args)\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/__init__.py\", line 735, in wrapper\r\n    memo = _CallMemo(python_func, args=args, kwargs=kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/__init__.py\", line 80, in __init__\r\n    self.arguments = self.signature.bind(*args, **kwargs).arguments\r\n  File \"/usr/lib/python3.6/inspect.py\", line 2997, in bind\r\n    return args[0]._bind(args[1:], kwargs)\r\n  File \"/usr/lib/python3.6/inspect.py\", line 2912, in _bind\r\n    raise TypeError(msg) from None\r\nTypeError: missing a required argument: 'y'\r\n```\r\n\r\nOn `master` branch, d6d14cf.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/90", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/90/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/90/events", "html_url": "https://github.com/agronholm/typeguard/issues/90", "id": 520448831, "node_id": "MDU6SXNzdWU1MjA0NDg4MzE=", "number": 90, "title": "Import hook crashes on pkg_resources", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-11-09T14:55:33Z", "updated_at": "2019-11-12T12:45:43Z", "closed_at": "2019-11-10T11:45:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n```python3\r\nfrom typeguard.importhook import install_import_hook\r\n\r\ninstall_import_hook('')\r\n\r\nimport pkg_resources\r\n```\r\nproduces the following output:\r\n```python3\r\n$ python3 Test.py \r\nTraceback (most recent call last):\r\n  File \"Test.py\", line 5, in <module>\r\n    import pkg_resources\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 77, in <module>\r\n    __import__('pkg_resources.extern.packaging.requirements')\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/requirements.py\", line 9, in <module>\r\n    from pkg_resources.extern.pyparsing import stringStart, stringEnd, originalTextFor, ParseException\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 656, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 626, in _load_backward_compatible\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/extern/__init__.py\", line 43, in load_module\r\n    __import__(extant)\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py\", line 5353, in <module>\r\n    class pyparsing_common:\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/__init__.py\", line 721, in typechecked\r\n    if callable(attr) and attr.__qualname__.startswith(prefix):\r\nAttributeError: 'Combine' object has no attribute '__qualname__'\r\nError in sys.excepthook:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3/dist-packages/apport_python_hook.py\", line 63, in apport_excepthook\r\n    from apport.fileutils import likely_packaged, get_recent_crashes\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/apport/__init__.py\", line 5, in <module>\r\n    from apport.report import Report\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/apport/report.py\", line 28, in <module>\r\n    import problem_report\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/problem_report.py\", line 16, in <module>\r\n    from email.mime.multipart import MIMEMultipart\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3.6/email/mime/multipart.py\", line 9, in <module>\r\n    from email.mime.base import MIMEBase\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3.6/email/mime/base.py\", line 9, in <module>\r\n    import email.policy\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3.6/email/policy.py\", line 26, in <module>\r\n    class EmailPolicy(Policy):\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/__init__.py\", line 721, in typechecked\r\n    if callable(attr) and attr.__qualname__.startswith(prefix):\r\nAttributeError: 'HeaderRegistry' object has no attribute '__qualname__'\r\n\r\nOriginal exception was:\r\nTraceback (most recent call last):\r\n  File \"Test.py\", line 5, in <module>\r\n    import pkg_resources\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 77, in <module>\r\n    __import__('pkg_resources.extern.packaging.requirements')\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/_vendor/packaging/requirements.py\", line 9, in <module>\r\n    from pkg_resources.extern.pyparsing import stringStart, stringEnd, originalTextFor, ParseException\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 656, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 626, in _load_backward_compatible\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/extern/__init__.py\", line 43, in load_module\r\n    __import__(extant)\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/importhook.py\", line 82, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/_vendor/pyparsing.py\", line 5353, in <module>\r\n    class pyparsing_common:\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard-2.6.0.post5-py3.6.egg/typeguard/__init__.py\", line 721, in typechecked\r\n    if callable(attr) and attr.__qualname__.startswith(prefix):\r\nAttributeError: 'Combine' object has no attribute '__qualname__'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/89", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/89/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/89/events", "html_url": "https://github.com/agronholm/typeguard/issues/89", "id": 519640219, "node_id": "MDU6SXNzdWU1MTk2NDAyMTk=", "number": 89, "title": "Import hook fails on @functools.lru_cache", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-08T03:27:58Z", "updated_at": "2019-11-08T20:36:33Z", "closed_at": "2019-11-08T13:04:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n\r\n`TypeGuardTest.py`:\r\n```python3\r\nfrom typeguard.importhook import install_import_hook\r\n\r\ninstall_import_hook('Test')\r\n\r\nimport Test\r\n```\r\n\r\n`Test.py`:\r\n```python3\r\nfrom functools import lru_cache\r\n\r\n@lru_cache()\r\ndef f() -> None:\r\n    print(\"OK\")\r\n\r\nf()\r\n```\r\nproduces the following output:\r\n```python3\r\n$ python3 Test.py \r\nOK\r\n$ python3 TypeGuardTest.py \r\nTraceback (most recent call last):\r\n  File \"TypeGuardTest.py\", line 5, in <module>\r\n    import Test\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"Test.py\", line 4, in <module>\r\n    def f() -> None:\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py\", line 759, in typechecked\r\n    if func.__code__ is not wrapper.__code__:\r\nAttributeError: 'functools._lru_cache_wrapper' object has no attribute '__code__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/88", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/88/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/88/events", "html_url": "https://github.com/agronholm/typeguard/issues/88", "id": 519628440, "node_id": "MDU6SXNzdWU1MTk2Mjg0NDA=", "number": 88, "title": "Import hook doesn't work with metaclasses", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-08T02:52:57Z", "updated_at": "2019-11-08T20:29:59Z", "closed_at": "2019-11-08T12:25:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n\r\n`TypeGuardTest.py`:\r\n```python3\r\nfrom typeguard.importhook import install_import_hook\r\n\r\ninstall_import_hook('Test')\r\n\r\nimport Test\r\n```\r\n\r\n`Test.py`:\r\n```python3\r\nclass Metaclass(type):\r\n    pass\r\n\r\nclass Class(metaclass = Metaclass):\r\n    def f(self) -> None:\r\n        print(\"OK\")\r\n\r\nClass().f()\r\n```\r\nproduces the following output:\r\n```python3\r\n$ python3 TypeGuardTest.py \r\nTraceback (most recent call last):\r\n  File \"TypeGuardTest.py\", line 5, in <module>\r\n    import Test\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"Test.py\", line 1, in <module>\r\n    class Metaclass(type):\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py\", line 720, in typechecked\r\n    attr = getattr(func, key)\r\nAttributeError: __abstractmethods__\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/87", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/87/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/87/events", "html_url": "https://github.com/agronholm/typeguard/issues/87", "id": 519622728, "node_id": "MDU6SXNzdWU1MTk2MjI3Mjg=", "number": 87, "title": "absolute_import error when importing a namespace package", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-08T02:30:22Z", "updated_at": "2019-11-09T14:55:55Z", "closed_at": "2019-11-08T12:18:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n\r\n`Test.py`:\r\n```python3\r\nfrom typeguard.importhook import install_import_hook, TypeguardFinder\r\n\r\nclass AllModulesFinder(TypeguardFinder):\r\n    def should_instrument(self, moduleName: str) -> bool:\r\n        return True\r\n\r\ninstall_import_hook('', cls = AllModulesFinder)\r\n\r\nimport A\r\n```\r\n\r\n`A/__init__.py`:\r\n```python3\r\n__import__('pkg_resources').declare_namespace(__name__)\r\n```\r\nproduces the following output:\r\n```python3\r\n$ python3 Test.py\r\nTraceback (most recent call last):\r\n  File \"Test.py\", line 9, in <module>\r\n    import A\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"A/__init__.py\", line 1, in <module>\r\n    __import__('pkg_resources').declare_namespace(__name__)\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"<frozen importlib._bootstrap_external>\", line 674, in exec_module\r\n  File \"<frozen importlib._bootstrap_external>\", line 781, in get_code\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 75, in source_to_code\r\n    dont_inherit=True, optimize=_optimize)\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 14, in _call_with_frames_removed\r\n    return f(*args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 18\r\n    from __future__ import absolute_import\r\n    ^\r\nSyntaxError: from __future__ imports must occur at the beginning of the file\r\nError in sys.excepthook:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3/dist-packages/apport_python_hook.py\", line 63, in apport_excepthook\r\n    from apport.fileutils import likely_packaged, get_recent_crashes\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/apport/__init__.py\", line 5, in <module>\r\n    from apport.report import Report\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/apport/report.py\", line 28, in <module>\r\n    import problem_report\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3/dist-packages/problem_report.py\", line 16, in <module>\r\n    from email.mime.multipart import MIMEMultipart\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3.6/email/mime/multipart.py\", line 9, in <module>\r\n    from email.mime.base import MIMEBase\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3.6/email/mime/base.py\", line 9, in <module>\r\n    import email.policy\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"/usr/lib/python3.6/email/policy.py\", line 26, in <module>\r\n    class EmailPolicy(Policy):\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py\", line 721, in typechecked\r\n    if callable(attr) and attr.__qualname__.startswith(prefix):\r\nAttributeError: 'HeaderRegistry' object has no attribute '__qualname__'\r\n\r\nOriginal exception was:\r\nTraceback (most recent call last):\r\n  File \"Test.py\", line 9, in <module>\r\n    import A\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"A/__init__.py\", line 1, in <module>\r\n    __import__('pkg_resources').declare_namespace(__name__)\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 80, in exec_module\r\n    return super().exec_module(module)\r\n  File \"<frozen importlib._bootstrap_external>\", line 674, in exec_module\r\n  File \"<frozen importlib._bootstrap_external>\", line 781, in get_code\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 75, in source_to_code\r\n    dont_inherit=True, optimize=_optimize)\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/importhook.py\", line 14, in _call_with_frames_removed\r\n    return f(*args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 18\r\n    from __future__ import absolute_import\r\n    ^\r\nSyntaxError: from __future__ imports must occur at the beginning of the file\r\n```\r\n\r\nPython 3.6.8, typeguard 2.6.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/86", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/86/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/86/events", "html_url": "https://github.com/agronholm/typeguard/issues/86", "id": 519614919, "node_id": "MDU6SXNzdWU1MTk2MTQ5MTk=", "number": 86, "title": "Doc: CustomFinder.should_instrument() declaration is wrong", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-08T02:01:45Z", "updated_at": "2019-11-08T23:22:05Z", "closed_at": "2019-11-08T11:37:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "In https://typeguard.readthedocs.io/en/latest/index.html#using-the-import-hook\r\nthe `CustomFinder.should_instrument()` declaration now is\r\n```python3\r\ndef should_instrument(module_name: str):\r\n```\r\nwhile it should be:\r\n```python3\r\ndef should_instrument(self, module_name: str) -> bool:\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/83", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/83/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/83/events", "html_url": "https://github.com/agronholm/typeguard/issues/83", "id": 502610771, "node_id": "MDU6SXNzdWU1MDI2MTA3NzE=", "number": 83, "title": "Strange warning at return SupportsInt", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-10-04T12:33:29Z", "updated_at": "2019-12-11T13:43:46Z", "closed_at": "2019-11-26T19:28:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n```python3\r\nfrom typing import SupportsInt\r\n\r\nfrom typeguard import TypeChecker\r\n\r\ndef f() -> SupportsInt:\r\n    return 5\r\n\r\nwith TypeChecker(('__main__',)):\r\n    f()\r\n```\r\nproduces the following output:\r\n```python3\r\n$ python3 Test.py \r\n/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:932: TypeWarning: [MainThread] return from __main__.f() at Test.py:6: Protocols cannot be used with isinstance().\r\n  warn(TypeWarning(memo, event, frame, exc))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/81", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/81/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/81/events", "html_url": "https://github.com/agronholm/typeguard/issues/81", "id": 498864054, "node_id": "MDU6SXNzdWU0OTg4NjQwNTQ=", "number": 81, "title": "Yield type inferred incorrectly in nested Generators", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-09-26T12:50:05Z", "updated_at": "2019-11-10T19:43:05Z", "closed_at": "2019-11-09T11:44:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n```python3\r\nfrom typing import Generator\r\n\r\nfrom typeguard import TypeChecker\r\n\r\ndef a() -> Generator[str, None, None]:\r\n    yield \"OK\"\r\n\r\ndef b() -> Generator[Generator[str, None, None], None, None]:\r\n    yield a()\r\n    yield a()\r\n\r\nwith TypeChecker('__main__'):\r\n    for f in b():\r\n        print(next(f))\r\n```\r\nproduces the following output:\r\n```python3\r\n$ python3 Test.py \r\nOK\r\n/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:932: TypeWarning: [MainThread] return from __main__.b() at Test.py:10: type of yielded value must be str; got generator instead\r\n  warn(TypeWarning(memo, event, frame, exc))\r\nOK\r\n```\r\nNote that the problem occurs only at the second `yield`, but not at the first one.\r\n\r\nThis is an old issue that I'm observing for some time, but I thought it to be a consequence of #77, but #77 is fixed now in v2.5.1, but this issue still persists.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/80", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/80/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/80/events", "html_url": "https://github.com/agronholm/typeguard/issues/80", "id": 498261946, "node_id": "MDU6SXNzdWU0OTgyNjE5NDY=", "number": 80, "title": "ValueError on generator expressions", "user": {"login": "gtors", "id": 9943520, "node_id": "MDQ6VXNlcjk5NDM1MjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9943520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gtors", "html_url": "https://github.com/gtors", "followers_url": "https://api.github.com/users/gtors/followers", "following_url": "https://api.github.com/users/gtors/following{/other_user}", "gists_url": "https://api.github.com/users/gtors/gists{/gist_id}", "starred_url": "https://api.github.com/users/gtors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gtors/subscriptions", "organizations_url": "https://api.github.com/users/gtors/orgs", "repos_url": "https://api.github.com/users/gtors/repos", "events_url": "https://api.github.com/users/gtors/events{/privacy}", "received_events_url": "https://api.github.com/users/gtors/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-25T12:43:41Z", "updated_at": "2019-09-26T08:11:41Z", "closed_at": "2019-09-26T07:26:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "typeguard == 2.5.0\r\npython == 3.7.4\r\n\r\n```\r\nIn [1]: import typeguard\r\n\r\nIn [2]: from typing import *\r\n\r\nIn [3]: @typeguard.typechecked\r\n   ...: def x() -> Iterable[int]:\r\n   ...:     return (x*2 for x in range(10))\r\n   ...:\r\n\r\nIn [4]: x()\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-4-08f9d0828de0> in <module>\r\n----> 1 x()\r\n\r\n~/.local/share/virtualenvs/backend-IMNkev1j/lib/python3.7/site-packages/typeguard/__init__.py in wrapper(*args, **kwargs)\r\n    704         check_return_type(retval, memo)\r\n    705         if inspect.isgenerator(retval):\r\n--> 706             return TypeCheckedGenerator(retval, memo)\r\n    707         else:\r\n    708             return retval\r\n\r\n~/.local/share/virtualenvs/backend-IMNkev1j/lib/python3.7/site-packages/typeguard/__init__.py in __init__(self, wrapped, memo)\r\n    597         self.__memo = memo\r\n    598         self.__yield_type, self.__send_type, self.__return_type = \\\r\n--> 599             memo.type_hints['return'].__args__\r\n    600         self.__initialized = False\r\n    601\r\n\r\nValueError: not enough values to unpack (expected 3, got 1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/79", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/79/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/79/events", "html_url": "https://github.com/agronholm/typeguard/issues/79", "id": 493556849, "node_id": "MDU6SXNzdWU0OTM1NTY4NDk=", "number": 79, "title": "TypeError(TypeError(...)) exception raised", "user": {"login": "russok", "id": 10139466, "node_id": "MDQ6VXNlcjEwMTM5NDY2", "avatar_url": "https://avatars1.githubusercontent.com/u/10139466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/russok", "html_url": "https://github.com/russok", "followers_url": "https://api.github.com/users/russok/followers", "following_url": "https://api.github.com/users/russok/following{/other_user}", "gists_url": "https://api.github.com/users/russok/gists{/gist_id}", "starred_url": "https://api.github.com/users/russok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/russok/subscriptions", "organizations_url": "https://api.github.com/users/russok/orgs", "repos_url": "https://api.github.com/users/russok/repos", "events_url": "https://api.github.com/users/russok/events{/privacy}", "received_events_url": "https://api.github.com/users/russok/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-13T23:59:06Z", "updated_at": "2019-09-14T07:24:24Z", "closed_at": "2019-09-14T07:24:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "see pull  request #78", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/77", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/77/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/77/events", "html_url": "https://github.com/agronholm/typeguard/issues/77", "id": 486342004, "node_id": "MDU6SXNzdWU0ODYzNDIwMDQ=", "number": 77, "title": "send() to Iterator produces strange warning", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-28T12:09:48Z", "updated_at": "2019-09-15T18:13:58Z", "closed_at": "2019-09-15T18:13:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n```python3\r\nfrom typing import Iterator\r\n\r\nfrom typeguard import TypeChecker\r\n\r\ndef f() -> Iterator[str]:\r\n    yield \"OK\"\r\n\r\nwith TypeChecker('__main__'):\r\n    print(f().send(None))\r\n```\r\nworks fine, but produces the following warning from `mypy`:\r\n```python3\r\nTest.py:9:11: error: \"Iterator[str]\" has no attribute \"send\"\r\n```\r\nwhich is understandable, but also produces a weird warning from `typeguard`:\r\n```python3\r\n/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:916: TypeWarning: [MainThread] return from __main__.f() at Test.py:6: type of yielded value must be collections.abc.Iterator; got str instead\r\n```\r\nIt looks to me like the warning itself is needed, but the \"must\" and \"got\" types are wrong.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/75", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/75/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/75/events", "html_url": "https://github.com/agronholm/typeguard/issues/75", "id": 480840898, "node_id": "MDU6SXNzdWU0ODA4NDA4OTg=", "number": 75, "title": "Forward references cannot be used with issubclass()", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-08-14T19:07:07Z", "updated_at": "2019-11-17T13:14:02Z", "closed_at": "2019-11-17T13:14:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n```python3\r\nfrom typing import TypeVar\r\n\r\nfrom typeguard import TypeChecker\r\n\r\nclass A:\r\n    pass\r\n\r\nT = TypeVar('T', bound = 'A')\r\n\r\ndef f(a: T) -> None:\r\n    pass\r\n\r\nwith TypeChecker('__main__'):\r\n    f(A())\r\n```\r\ndisplays the following warning:\r\n```python3\r\n$ python3 Test.py\r\n/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:694: TypeWarning: [MainThread] call to __main__.f() from Test.py:14: Forward references cannot be used with issubclass().\r\n  warn(TypeWarning(memo, event, frame, exc))\r\n```\r\nIn `bound` annotation, if `'A'` (quoted) is replaced with `A` (unquoted), the warning disappears.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/74", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/74/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/74/events", "html_url": "https://github.com/agronholm/typeguard/issues/74", "id": 480243362, "node_id": "MDU6SXNzdWU0ODAyNDMzNjI=", "number": 74, "title": "String annotations of inner classes are not parsed correcly", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-13T16:10:20Z", "updated_at": "2019-11-10T19:44:16Z", "closed_at": "2019-11-10T11:03:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n```python3\r\nfrom typeguard import TypeChecker\r\n\r\nclass Outer:\r\n    class Inner:\r\n        pass\r\n\r\n    def f(self) -> 'Inner':\r\n        return self.Inner()\r\n\r\nwith TypeChecker(('__main__')):\r\n    Outer().f()\r\n    print(\"OK\")\r\n```\r\nfails as follows:\r\n```python3\r\n$ python3 Test.py\r\n/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:657: UserWarning: the system profiling hook has changed unexpectedly\r\n  warn('the system profiling hook has changed unexpectedly')\r\nTraceback (most recent call last):\r\n  File \"Test.py\", line 11, in <module>\r\n    Outer().f()\r\n  File \"Test.py\", line 7, in f\r\n    def f(self) -> 'Inner':\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py\", line 690, in __call__\r\n    memo = self._call_memos[frame] = _CallMemo(func, frame)\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py\", line 55, in __init__\r\n    hints = get_type_hints(func)\r\n  File \"/usr/lib/python3.6/typing.py\", line 1543, in get_type_hints\r\n    value = _eval_type(value, globalns, localns)\r\n  File \"/usr/lib/python3.6/typing.py\", line 350, in _eval_type\r\n    return t._eval_type(globalns, localns)\r\n  File \"/usr/lib/python3.6/typing.py\", line 245, in _eval_type\r\n    eval(self.__forward_code__, globalns, localns),\r\n  File \"<string>\", line 1, in <module>\r\nNameError: name 'Inner' is not defined\r\n```\r\nIt starts working if return type annotation to `f()` is changed to just `Inner` (unquoted), but it breaks tools that are not fully annotation-aware, like `pylint`:\r\n```python3\r\npylint3 Test.py\r\n************* Module Test\r\nTest.py:7: [E0602(undefined-variable), Outer.f] Undefined variable 'Inner'\r\n```\r\nEverything (`python3`, `pylint`, `mypy`, `typeguard`) works fine if return type annotation to `f()` is changed to `'Outer.Inner'` (quoted), but that doesn't look like a proper solution.\r\n\r\nIt seems that `'Inner'` (quoted) should work for `typeguard` as soon as plain `Inner` (unquoted) works.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/73", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/73/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/73/events", "html_url": "https://github.com/agronholm/typeguard/issues/73", "id": 479048696, "node_id": "MDU6SXNzdWU0NzkwNDg2OTY=", "number": 73, "title": "Listing modules to check manually is inconvenient", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-08-09T15:37:30Z", "updated_at": "2019-08-14T19:52:27Z", "closed_at": "2019-08-11T17:07:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "For now to specify which code has to be checked I have to specify a list of modules as a parameter to `TypeChecker()` constructor.\r\n\r\nIf the code base to be checked is large, that list may grow up to hundreds of elements.\r\n\r\nProviding such a list becomes extra work that not everybody wants to do.\r\n\r\nPersonally I would prefer some or all of the following improvements:\r\n\r\n- Providing a special option meaning \"check everything\" and maybe \"check everything except the standart library\".\r\n\r\n- Using some microlanguage in the modules list, like `MyModule*` meaning all modules whose names start with `MyModule`.\r\n\r\n- Allowing to use regexps instead or together with strings in the module list, which easily allows checking everything or specifying the modules needed in a more concise way.\r\n\r\n- Allowing to use a single regexp instead of list of modules.\r\n\r\n- Allowing to use a callback instead of list of modules, that would take a module name as a parameter and return a `True` value if that module is to be checked.\r\n\r\n- To reduce performance load on iterating the list, calling callbacks or resolving regexps, it may be worth adding internal cache of modules to be checked (and not to be checked), like `Dict[str, bool]`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/72", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/72/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/72/events", "html_url": "https://github.com/agronholm/typeguard/issues/72", "id": 478018432, "node_id": "MDU6SXNzdWU0NzgwMTg0MzI=", "number": 72, "title": "`bytearray` is not treated as compatible with `bytes`", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-07T16:08:12Z", "updated_at": "2019-08-08T13:13:14Z", "closed_at": "2019-08-08T13:12:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "While strictly speaking `bytes` and `bytearray` are not exactly compatible, for practical reasons it seems appropriate to allow to pass `bytearray` wherever `bytes` is expected.\r\n\r\nSee https://github.com/python/typing/issues/552 for details.\r\n\r\n```python\r\nfrom typeguard import TypeChecker\r\n\r\ndef f(b: bytes) -> None:\r\n    print(\"OK\")\r\n\r\nwith TypeChecker('__main__'):\r\n    f(bytearray())\r\n```\r\n\r\n```python\r\n$ mypy Test.py \r\n$ python3 Test.py \r\n/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:694: TypeWarning: [MainThread] call to __main__.f() from Test.py:7: type of argument \"b\" must be bytes; got bytearray instead\r\n  warn(TypeWarning(memo, event, frame, exc))\r\nOK\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/71", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/71/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/71/events", "html_url": "https://github.com/agronholm/typeguard/issues/71", "id": 477988405, "node_id": "MDU6SXNzdWU0Nzc5ODg0MDU=", "number": 71, "title": "Type[Any] causes false warning", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-07T15:10:31Z", "updated_at": "2019-08-08T13:11:42Z", "closed_at": "2019-08-08T11:25:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "When `Type[Any]` is used as an argument type, passing a valid class object causes the following false warning: `Any cannot be used with issubclass()`.\r\n\r\n```python3\r\nfrom typing import Any, Type\r\n\r\nfrom typeguard import TypeChecker\r\n\r\ndef f(c: Type[Any]) -> None:\r\n    print(c.__name__)\r\n\r\nwith TypeChecker('__main__'):\r\n    f(str)\r\n```\r\n\r\n```python3\r\n$ mypy Test.py\r\n$ python3 Test.py\r\n/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:694: TypeWarning: [MainThread] call to __main__.f() from Test.py:9: Any cannot be used with issubclass().\r\n  warn(TypeWarning(memo, event, frame, exc))\r\nstr\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/70", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/70/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/70/events", "html_url": "https://github.com/agronholm/typeguard/issues/70", "id": 477956544, "node_id": "MDU6SXNzdWU0Nzc5NTY1NDQ=", "number": 70, "title": "Quoted annotations do not work in cyclic imports", "user": {"login": "jolaf", "id": 1728382, "node_id": "MDQ6VXNlcjE3MjgzODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1728382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jolaf", "html_url": "https://github.com/jolaf", "followers_url": "https://api.github.com/users/jolaf/followers", "following_url": "https://api.github.com/users/jolaf/following{/other_user}", "gists_url": "https://api.github.com/users/jolaf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jolaf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jolaf/subscriptions", "organizations_url": "https://api.github.com/users/jolaf/orgs", "repos_url": "https://api.github.com/users/jolaf/repos", "events_url": "https://api.github.com/users/jolaf/events{/privacy}", "received_events_url": "https://api.github.com/users/jolaf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2019-08-07T14:15:32Z", "updated_at": "2019-08-11T16:27:53Z", "closed_at": "2019-08-11T15:15:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python usually doesn't allow cyclic imports, but they're sometimes necessary for proper static type annotations. When that is the case, the cyclic import is guarded by `if TYPE_CHECKING:` and annotations for types imported from such a module are quoted like strings to avoid errors at runtime. That's a standard practice recommended by `mypy` developers.\r\n\r\nHowever, any program that uses this approach to annotations seems incompatible with `typeguard`.\r\nConsider this example:\r\n\r\n**A.py:**\r\n```python3\r\nfrom typeguard import TypeChecker\r\n\r\nfrom B import B\r\n\r\nclass A:\r\n    def f(self, b: B) -> None:\r\n        b.f(self)\r\n\r\nwith TypeChecker(('__main__', 'A', 'B')):\r\n    A().f(B())\r\n```\r\n\r\n**B.py:**\r\n```python3\r\nfrom typing import TYPE_CHECKING\r\n\r\nif TYPE_CHECKING:\r\n    from A import A\r\n\r\nclass B:\r\n    def f(self, a: 'A') -> None:\r\n        print(\"OK\")\r\n```\r\n\r\nIf `typeguard` is disabled, the program performs fairly well as it is in fact absolutely correct in runtime, and also correct from `mypy` point of view:\r\n\r\n```python\r\n$ mypy A.py B.py\r\n$ python3 A.py \r\nOK\r\n```\r\n\r\nHowever if it is run with `typeguard`, the following fatal exception occurs:\r\n```python\r\n$ python3 A.py \r\n/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py:657: UserWarning: the system profiling hook has changed unexpectedly\r\n  warn('the system profiling hook has changed unexpectedly')\r\nTraceback (most recent call last):\r\n  File \"A.py\", line 10, in <module>\r\n    A().f(B())\r\n  File \"A.py\", line 7, in f\r\n    b.f(self)\r\n  File \"/home/vmz/git/userfe/B.py\", line 7, in f\r\n    def f(self, a: 'A') -> None:\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py\", line 690, in __call__\r\n    memo = self._call_memos[frame] = _CallMemo(func, frame)\r\n  File \"/usr/local/lib/python3.6/dist-packages/typeguard/__init__.py\", line 55, in __init__\r\n    hints = get_type_hints(func)\r\n  File \"/usr/lib/python3.6/typing.py\", line 1543, in get_type_hints\r\n    value = _eval_type(value, globalns, localns)\r\n  File \"/usr/lib/python3.6/typing.py\", line 350, in _eval_type\r\n    return t._eval_type(globalns, localns)\r\n  File \"/usr/lib/python3.6/typing.py\", line 245, in _eval_type\r\n    eval(self.__forward_code__, globalns, localns),\r\n  File \"<string>\", line 1, in <module>\r\nNameError: name 'A' is not defined\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/68", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/68/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/68/events", "html_url": "https://github.com/agronholm/typeguard/issues/68", "id": 477290486, "node_id": "MDU6SXNzdWU0NzcyOTA0ODY=", "number": 68, "title": "`TypeChecker` reports return type mismatch when exception is raised", "user": {"login": "niosHD", "id": 1627467, "node_id": "MDQ6VXNlcjE2Mjc0Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1627467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niosHD", "html_url": "https://github.com/niosHD", "followers_url": "https://api.github.com/users/niosHD/followers", "following_url": "https://api.github.com/users/niosHD/following{/other_user}", "gists_url": "https://api.github.com/users/niosHD/gists{/gist_id}", "starred_url": "https://api.github.com/users/niosHD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niosHD/subscriptions", "organizations_url": "https://api.github.com/users/niosHD/orgs", "repos_url": "https://api.github.com/users/niosHD/repos", "events_url": "https://api.github.com/users/niosHD/events{/privacy}", "received_events_url": "https://api.github.com/users/niosHD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-06T10:08:53Z", "updated_at": "2019-08-08T11:59:59Z", "closed_at": "2019-08-08T11:59:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I currently use typeguard's `TypeChecker` to non-intrusively test one of my python projects and it works quite nicely in general. However, I noticed that exceptions seem to trip up the checking. I reduced the problem to the following example:\r\n\r\n~~~python3\r\nfrom typeguard import TypeChecker\r\n\r\n\r\ndef foo(arg: int) -> int:\r\n    if arg > 10:\r\n        raise Exception()\r\n    return 42\r\n\r\n\r\nchecker = TypeChecker(__name__)\r\nchecker.start()\r\n\r\nfoo(5)\r\nfoo(12)\r\n~~~\r\nExecuting this snippet gives me, besides the exception, the following return type mismatch warning: `TypeWarning: [MainThread] return from __main__.foo() at tgdemo.py:6: type of the return value must be int; got NoneType instead`\r\n\r\nIs this a bug in the `TypeChecker`? The `typechecked` decorator at least does not complain about mismatching return values when an exception is raised.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/66", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/66/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/66/events", "html_url": "https://github.com/agronholm/typeguard/issues/66", "id": 467899189, "node_id": "MDU6SXNzdWU0Njc4OTkxODk=", "number": 66, "title": "2.4.0 packaging is broken", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-15T00:00:47Z", "updated_at": "2019-07-15T08:22:28Z", "closed_at": "2019-07-15T08:22:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `setup.cfg` still talks about a `py_modules`, which implies a `typeguard.py`, but it's now a package `typeguard`.\r\n\r\nAnd indeed:\r\n\r\n```\r\n$ pip install typeguard\r\nCollecting typeguard\r\n  Downloading https://files.pythonhosted.org/packages/41/fb/a154c25102e4f1d2444cba8d6f20b87902\r\n8cbfdb71edc91771ef841ced34/typeguard-2.4.0-py3-none-any.whl                                  \r\nInstalling collected packages: typeguard\r\nSuccessfully installed typeguard-2.4.0\r\n$ python\r\nPython 3.7.3 (default, May 11 2019, 00:38:04) \r\n[GCC 9.1.1 20190503 (Red Hat 9.1.1-1)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import typeguard\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'typeguard'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/64", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/64/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/64/events", "html_url": "https://github.com/agronholm/typeguard/issues/64", "id": 467359167, "node_id": "MDU6SXNzdWU0NjczNTkxNjc=", "number": 64, "title": "Literal types not supported", "user": {"login": "pirate", "id": 511499, "node_id": "MDQ6VXNlcjUxMTQ5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/511499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pirate", "html_url": "https://github.com/pirate", "followers_url": "https://api.github.com/users/pirate/followers", "following_url": "https://api.github.com/users/pirate/following{/other_user}", "gists_url": "https://api.github.com/users/pirate/gists{/gist_id}", "starred_url": "https://api.github.com/users/pirate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pirate/subscriptions", "organizations_url": "https://api.github.com/users/pirate/orgs", "repos_url": "https://api.github.com/users/pirate/repos", "events_url": "https://api.github.com/users/pirate/events{/privacy}", "received_events_url": "https://api.github.com/users/pirate/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-12T11:14:01Z", "updated_at": "2019-07-14T15:07:27Z", "closed_at": "2019-07-14T10:25:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It looks like `Literal` types currently aren't checked by `typeguard`.\r\n\r\nhttps://mypy.readthedocs.io/en/latest/literal_types.html\r\n\r\n```python\r\nfrom typeguard import check_type\r\nfrom typing_extensions import Literal\r\n\r\ncheck_type('test', 123, Literal[1234])  # passes even though incorrect\r\n```\r\n\r\nI don't think this would be too hard to implement, maybe something like this:\r\n\r\n```python\r\nif isinstance(expected_type, Literal):\r\n    expected_value = expected_type.__args__[0]\r\n    assert value == expected_value\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/62", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/62/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/62/events", "html_url": "https://github.com/agronholm/typeguard/issues/62", "id": 467210659, "node_id": "MDU6SXNzdWU0NjcyMTA2NTk=", "number": 62, "title": "Forward references and recursive types can be be checked correctly without falling back to Any", "user": {"login": "pirate", "id": 511499, "node_id": "MDQ6VXNlcjUxMTQ5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/511499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pirate", "html_url": "https://github.com/pirate", "followers_url": "https://api.github.com/users/pirate/followers", "following_url": "https://api.github.com/users/pirate/following{/other_user}", "gists_url": "https://api.github.com/users/pirate/gists{/gist_id}", "starred_url": "https://api.github.com/users/pirate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pirate/subscriptions", "organizations_url": "https://api.github.com/users/pirate/orgs", "repos_url": "https://api.github.com/users/pirate/repos", "events_url": "https://api.github.com/users/pirate/events{/privacy}", "received_events_url": "https://api.github.com/users/pirate/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1700848143, "node_id": "MDU6TGFiZWwxNzAwODQ4MTQz", "url": "https://api.github.com/repos/agronholm/typeguard/labels/needs%20more%20info", "name": "needs more info", "color": "fbca04", "default": false, "description": "Development cannot proceed before requested information has been provided"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-12T04:05:17Z", "updated_at": "2020-06-06T10:14:40Z", "closed_at": "2020-06-06T10:14:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "First of all, this library is awesome, it's the best runtime type checking library we've tried out of several, thanks for all your hard work on it! It supports python 3.7 and provides an easy-to-use `check_type` function that's a great drop-in replacement for `assert isinstance`, something the other libraries we tried struggled with.\r\n\r\nIt appears `typeguard` doesn't support recursive type / forward reference type checking.  This is somewhat expected given it's not officially supported in `mypy` yet.\r\n\r\n```python\r\nfrom typing import Union, List, Dict\r\nfrom typeguard import check_type\r\n\r\nJSONType = Union[str, int, float, bool, None, List['JSONType'], Dict[str, 'JSONType']]\r\n\r\ncheck_type('test', (1,2,3), JSONType)           # this fails correctly because `Tuple` is not in the `Union`\r\ncheck_type('test', {'abc': (1,2,3)}, JSONType)  # but this does not throw an error, it passes even though the subtype is incorrect\r\n```\r\nIt looks like it's evaluating `List['JSONType']` as `List[Any]` and `Dict[str, 'JSONType']]` as `Dict[str, Any]` when checking instead of using `ForwardRef._evaluate(...)` to check the actual type.\r\n\r\nLack of support for recursive types is a known issue with `mypy` in general, it's not yet implemented though it's been slated to be added in the future:\r\n - https://github.com/python/mypy/issues/731\r\n - https://github.com/python/typing/issues/182\r\n\r\n**But because `typeguard` has the benefit of executing at runtime, it can actually check these correctly even when `mypy` cant provide it natively at compile-time.**\r\nThis might even be possible already at compile time, but I haven't dug through enough of the `mypy` source yet to tell.\r\nTo accomplish this at runtime, `typeguard` just has to resolve `ForwardRef` types to their actual types (e.g. `\"JSONType\"` -> `JSONType`), and this will allow forward reference and recursive types to be checked correctly!\r\n```python\r\n# this code goes somewhere inside of typeguard's runtime type checker function\r\n\r\nimport sys\r\nimport inspect\r\nfrom typing import ForwardRef, Type, Any\r\n\r\ndef check_type(name: str, type_hint: Type, value: Any) -> None:\r\n    ...\r\n\r\n    if isinstance(type_hint, ForwardRef):\r\n        # get caller's scope to evaluate types in\r\n        frame = sys._getframe(1)\r\n        caller_globals, caller_locals = frame.f_globals, frame.f_locals\r\n\r\n        # ForwardRef provides a built-in way to evaluate to the actual type, you just\r\n        # have to pass it the available types it can evaluate to in `globals()` `locals()`\r\n        # e.g. in our example:\r\n        #     type_hint = type_hint._evaluate({}, {'JSONType': JSONType})\r\n        type_hint = type_hint._evaluate(caller_globals, caller_locals)\r\n\r\n    ...\r\n```\r\n---\r\n\r\nUnrelated minor gripe: One room for possible improvement is that the error message for variables with invalid subtypes imply the top level type `dict` is incorrect, when in fact it's a value several levels deep that has an incorrect type `tuple`:\r\n```diff\r\n- TypeError: type of test must be one of (str, int, float, bool, NoneType, Dict, List); got dict instead\r\n+ TypeError: type of test must be one of (str, int, float, bool, NoneType, Dict, List); got dict containing a tuple instead\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/61", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/61/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/61/events", "html_url": "https://github.com/agronholm/typeguard/issues/61", "id": 452415117, "node_id": "MDU6SXNzdWU0NTI0MTUxMTc=", "number": 61, "title": "Thread safety on dataclass type annotations", "user": {"login": "Josh-Ring-jisc", "id": 29859996, "node_id": "MDQ6VXNlcjI5ODU5OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/29859996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Josh-Ring-jisc", "html_url": "https://github.com/Josh-Ring-jisc", "followers_url": "https://api.github.com/users/Josh-Ring-jisc/followers", "following_url": "https://api.github.com/users/Josh-Ring-jisc/following{/other_user}", "gists_url": "https://api.github.com/users/Josh-Ring-jisc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Josh-Ring-jisc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Josh-Ring-jisc/subscriptions", "organizations_url": "https://api.github.com/users/Josh-Ring-jisc/orgs", "repos_url": "https://api.github.com/users/Josh-Ring-jisc/repos", "events_url": "https://api.github.com/users/Josh-Ring-jisc/events{/privacy}", "received_events_url": "https://api.github.com/users/Josh-Ring-jisc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-06-05T09:59:38Z", "updated_at": "2019-06-05T10:30:11Z", "closed_at": "2019-06-05T10:30:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Python version:** Python 3.7.2\r\n**Typeguard:** 2.3.1\r\n**OS:** Ubuntu 19.04\r\n**Arch:** 64bit\r\n\r\n## Issue:\r\nThe following code will fail **only if** typeguard's `@typechecked` is annotated on the dataclass.\r\n\r\n## Related issues:\r\nthis is likely related to what was fixed in V2.3.1\r\n\r\n>**2.3.1** (2019-04-12)\r\n>- Fixed thread safety issue with the type hints cache (PR by Kelsey Francis)\r\n\r\n## Example code:\r\n\r\n\r\n\r\n```\r\nfrom typeguard import typechecked\r\nimport concurrent.futures\r\nimport math\r\nfrom dataclasses import dataclass\r\nfrom typing import Dict, Any\r\n\r\nPRIMES = [\r\n    112272535095293,\r\n    112582705942171,\r\n    112272535095293,\r\n    115280095190773,\r\n    115797848077099,\r\n    1099726899285419]\r\n\r\n\r\n## Type checking this dataclass causes the parallel region to freeze and be unable to complete\r\n## If @typechecked is omitted then this problem will not be present\r\n@typechecked\r\n@dataclass\r\nclass data_class:\r\n    a: int\r\n    b: int = 0\r\n\r\n\r\n@typechecked\r\ndef is_prime(args : Dict[str,Any]) -> bool:\r\n    n = args.get('n')\r\n    dc = args.get('dc')\r\n    \r\n    print(dc)\r\n    \r\n    if n % 2 == 0:\r\n        return False\r\n\r\n    sqrt_n = int(math.floor(math.sqrt(n)))\r\n    for i in range(3, sqrt_n + 1, 2):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\n\r\n     \r\n\r\nif __name__ == '__main__':\r\n\r\n    with concurrent.futures.ProcessPoolExecutor() as executor:\r\n        \r\n        futures_tasks = []\r\n        for number in PRIMES:\r\n            futures_tasks.append( executor.submit(is_prime, {'n':number, \r\n                                                             'dc' : data_class(a=1, b=2)}\r\n                                                 )\r\n                                )\r\n        \r\n        for future, number in zip(concurrent.futures.as_completed(futures_tasks), PRIMES):\r\n            print(\"The number: {}, is it prime? {}\".format(number, future.result()))\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/60", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/60/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/60/events", "html_url": "https://github.com/agronholm/typeguard/issues/60", "id": 441211897, "node_id": "MDU6SXNzdWU0NDEyMTE4OTc=", "number": 60, "title": "Untyped decorator makes function \"f\" untyped", "user": {"login": "kshpytsya", "id": 1846126, "node_id": "MDQ6VXNlcjE4NDYxMjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1846126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kshpytsya", "html_url": "https://github.com/kshpytsya", "followers_url": "https://api.github.com/users/kshpytsya/followers", "following_url": "https://api.github.com/users/kshpytsya/following{/other_user}", "gists_url": "https://api.github.com/users/kshpytsya/gists{/gist_id}", "starred_url": "https://api.github.com/users/kshpytsya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kshpytsya/subscriptions", "organizations_url": "https://api.github.com/users/kshpytsya/orgs", "repos_url": "https://api.github.com/users/kshpytsya/repos", "events_url": "https://api.github.com/users/kshpytsya/events{/privacy}", "received_events_url": "https://api.github.com/users/kshpytsya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323136, "node_id": "MDU6TGFiZWwzMDQzMjMxMzY=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-07T12:43:45Z", "updated_at": "2019-06-07T06:52:24Z", "closed_at": "2019-05-19T12:06:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please add `py.typed` marker to the package, as described [here](https://mypy.readthedocs.io/en/latest/installed_packages.html#making-pep-561-compatible-packages).\r\n\r\nWithout this, the following code\r\n\r\n```py\r\nfrom typeguard import typechecked\r\n\r\n@typechecked\r\ndef f() -> None:\r\n   pass\r\n```\r\n\r\nproduces the following when checked with `mypy`:\r\n\r\n```\r\n$ mypy --python-executable venv-typeguard/bin/python --strict example.py\r\nexample.py:1: error: Cannot find module named 'typeguard'\r\nexample.py:1: note: See https://mypy.readthedocs.io/en/latest/running_mypy.html#missing-imports\r\nexample.py:4: error: Untyped decorator makes function \"f\" untyped\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/58", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/58/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/58/events", "html_url": "https://github.com/agronholm/typeguard/issues/58", "id": 417014745, "node_id": "MDU6SXNzdWU0MTcwMTQ3NDU=", "number": 58, "title": "Allow implicit Awaitable for async functions", "user": {"login": "koliyo", "id": 770348, "node_id": "MDQ6VXNlcjc3MDM0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/770348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koliyo", "html_url": "https://github.com/koliyo", "followers_url": "https://api.github.com/users/koliyo/followers", "following_url": "https://api.github.com/users/koliyo/following{/other_user}", "gists_url": "https://api.github.com/users/koliyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/koliyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koliyo/subscriptions", "organizations_url": "https://api.github.com/users/koliyo/orgs", "repos_url": "https://api.github.com/users/koliyo/repos", "events_url": "https://api.github.com/users/koliyo/events{/privacy}", "received_events_url": "https://api.github.com/users/koliyo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-04T22:07:24Z", "updated_at": "2019-03-06T12:05:57Z", "closed_at": "2019-03-06T12:05:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "For an API with lots of async functions it becomes a bit messy with `Awaitable` declarations for all return values. Would it be possible to have a flag to allow implicit `Awaitable` for the return type in async functions?\r\n\r\nIf the function is tagged `async`, the `Awaitable` is a bit redundant and could be inferred by the `async` declaration.\r\n\r\neg\r\n\r\n```py\r\n@typechecked\r\nasync def foo() -> Awaitable[str]:\r\n    return await getSomeString()\r\n```\r\n\r\ncould then be written\r\n\r\n```py\r\n@typechecked\r\nasync def foo() -> str:\r\n    return await getSomeString()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/57", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/57/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/57/events", "html_url": "https://github.com/agronholm/typeguard/issues/57", "id": 415307346, "node_id": "MDU6SXNzdWU0MTUzMDczNDY=", "number": 57, "title": "Externally defined class functions, unable to typecheck accepting an argument of type of the parent class", "user": {"login": "Josh-Ring-jisc", "id": 29859996, "node_id": "MDQ6VXNlcjI5ODU5OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/29859996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Josh-Ring-jisc", "html_url": "https://github.com/Josh-Ring-jisc", "followers_url": "https://api.github.com/users/Josh-Ring-jisc/followers", "following_url": "https://api.github.com/users/Josh-Ring-jisc/following{/other_user}", "gists_url": "https://api.github.com/users/Josh-Ring-jisc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Josh-Ring-jisc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Josh-Ring-jisc/subscriptions", "organizations_url": "https://api.github.com/users/Josh-Ring-jisc/orgs", "repos_url": "https://api.github.com/users/Josh-Ring-jisc/repos", "events_url": "https://api.github.com/users/Josh-Ring-jisc/events{/privacy}", "received_events_url": "https://api.github.com/users/Josh-Ring-jisc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-02-27T20:15:41Z", "updated_at": "2019-02-28T10:19:34Z", "closed_at": "2019-02-28T10:19:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is related to this general issue: https://github.com/python/typing/issues/105\r\n\r\nI have classes which are large and the make the situation manageable I have defined the class function in separate files and add these functions to the class on class initialisation.\r\n\r\nI want these functions to have arguments the same type as the class of which they are a part, so I can compare two instances of the same class in multiple ways. \r\n\r\nAccording to the discussion in: https://github.com/python/typing/issues/105\r\nthis is the best practice method (for static type checking), but unfortunately this does not work for me in Python 3.7.2 with runtime checking, as provided by typeguard. It can work when the functions are all in the same file as the class, but doing this makes those files unmanageable in size.\r\n\r\n## Inside the **external_file.py**\r\n```python\r\n\r\nfrom typing import TYPE_CHECKING\r\nfrom typeguard import typechecked\r\n\r\nif TYPE_CHECKING:\r\n    from test_class_file import test_class\r\n\r\n@typechecked\r\ndef large_function(self, test_class_instance : 'test_class') -> None:\r\n    \"\"\"Do some comparison on the class instances\"\"\"\r\n    \r\n    if test_class_instance.arg1 == self.arg1:\r\n    \tprint(\"The values of arg1 matched\")\r\n    else:\r\n    \tprint(\"The values of arg1 did not match\")\r\n```\r\n\r\n\r\n## Inside the class definition file **test_class_file.py**\r\n```python\r\nfrom typeguard import typechecked\r\nfrom external_file import large_function\r\n\r\n\r\nclass test_class():\r\n    \r\n    @typechecked\r\n    def __init__(self, arg1 : str) -> None:\r\n        \"\"\"Init which includes externally defined large_function\"\"\"\r\n        self.arg1 = arg1\r\n\r\n        # Modify the class to add this externally defined function to all instances\r\n        test_class.large_function = large_function    \r\n        \r\n    '''    \r\n    # defined in the same file, this function works, if imported it fails\r\n    # comment out the part in the init which inserts it into the class to test the below\r\n    @typechecked\r\n    def large_function(self, test_class_instance : 'test_class') -> None:\r\n        \"\"\"Do some comparison on the class instances\"\"\"\r\n        \r\n        if test_class_instance.arg1 == self.arg1:\r\n            print(\"The values of arg1 matched\")\r\n        else:\r\n            print(\"The values of arg1 did not match\")\r\n    '''\r\n        \r\ninstance = test_class(arg1 = 'some_data')\r\ninstance2 = test_class(arg1 = 'some_data')\r\n\r\n# Let's compare these class instances\r\ninstance.large_function(test_class_instance=instance2)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/56", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/56/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/56/events", "html_url": "https://github.com/agronholm/typeguard/issues/56", "id": 401824479, "node_id": "MDU6SXNzdWU0MDE4MjQ0Nzk=", "number": 56, "title": "Conda packaging", "user": {"login": "itamarst", "id": 3266662, "node_id": "MDQ6VXNlcjMyNjY2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3266662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itamarst", "html_url": "https://github.com/itamarst", "followers_url": "https://api.github.com/users/itamarst/followers", "following_url": "https://api.github.com/users/itamarst/following{/other_user}", "gists_url": "https://api.github.com/users/itamarst/gists{/gist_id}", "starred_url": "https://api.github.com/users/itamarst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itamarst/subscriptions", "organizations_url": "https://api.github.com/users/itamarst/orgs", "repos_url": "https://api.github.com/users/itamarst/repos", "events_url": "https://api.github.com/users/itamarst/events{/privacy}", "received_events_url": "https://api.github.com/users/itamarst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-01-22T15:41:01Z", "updated_at": "2019-01-27T20:22:40Z", "closed_at": "2019-01-27T14:36:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm about to open a PR for conda-forge packaging of `typeguard`. It would be useful if you were a maintainer as well, so you can updates conda packages as soon as there is a new release. Any problems with adding you as maintainer?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/55", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/55/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/55/events", "html_url": "https://github.com/agronholm/typeguard/issues/55", "id": 392076242, "node_id": "MDU6SXNzdWUzOTIwNzYyNDI=", "number": 55, "title": "io.BytesIO not matches to IO[bytes] and BinaryIO", "user": {"login": "gtors", "id": 9943520, "node_id": "MDQ6VXNlcjk5NDM1MjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9943520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gtors", "html_url": "https://github.com/gtors", "followers_url": "https://api.github.com/users/gtors/followers", "following_url": "https://api.github.com/users/gtors/following{/other_user}", "gists_url": "https://api.github.com/users/gtors/gists{/gist_id}", "starred_url": "https://api.github.com/users/gtors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gtors/subscriptions", "organizations_url": "https://api.github.com/users/gtors/orgs", "repos_url": "https://api.github.com/users/gtors/repos", "events_url": "https://api.github.com/users/gtors/events{/privacy}", "received_events_url": "https://api.github.com/users/gtors/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-18T09:54:44Z", "updated_at": "2018-12-29T22:20:06Z", "closed_at": "2018-12-29T22:20:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 3.7.1\r\nTypeguard 2.2.2\r\n\r\nTraceback:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.local/share/virtualenvs/x-FhuHazVu/lib/python3.7/site-packages/typeguard.py\", line 394, in check_type\r\n    check_type(argname, value, origin_type, memo)\r\n  File \"/home/user/.local/share/virtualenvs/x-FhuHazVu/lib/python3.7/site-packages/typeguard.py\", line 413, in check_type\r\n    format(argname, qualified_name(expected_type), qualified_name(value)))\r\nTypeError: type of x must be IO; got _io.BytesIO instead\r\n```\r\n\r\nExamples:\r\n```\r\nimport io\r\nimport typeguard\r\nfrom typing import IO, BinaryIO\r\n\r\nbuf = io.BytesIO()\r\n\r\ntypeguard.check_type('x', buf, IO[bytes]) # Failed\r\ntypeguard.check_type('x', buf, BinaryIO) # Failed\r\n\r\n@typeguard.typechecked\r\ndef foo(a: IO[bytes]):\r\n    pass\r\nfoo(buf) # Failed\r\n\r\n# But... \r\ntypeguard.check_type('x', buf, BinaryIO()) # Passed\r\ntypeguard.check_type('x', buf, IO[bytes]()) # Passed\r\n\r\n@typeguard.typechecked\r\ndef bar(a: IO[bytes]()):\r\n    pass\r\n\r\nbar(buf) # Passed\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/54", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/54/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/54/events", "html_url": "https://github.com/agronholm/typeguard/issues/54", "id": 389232489, "node_id": "MDU6SXNzdWUzODkyMzI0ODk=", "number": 54, "title": "Disable type checking on production", "user": {"login": "orsinium", "id": 9638362, "node_id": "MDQ6VXNlcjk2MzgzNjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9638362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orsinium", "html_url": "https://github.com/orsinium", "followers_url": "https://api.github.com/users/orsinium/followers", "following_url": "https://api.github.com/users/orsinium/following{/other_user}", "gists_url": "https://api.github.com/users/orsinium/gists{/gist_id}", "starred_url": "https://api.github.com/users/orsinium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orsinium/subscriptions", "organizations_url": "https://api.github.com/users/orsinium/orgs", "repos_url": "https://api.github.com/users/orsinium/repos", "events_url": "https://api.github.com/users/orsinium/events{/privacy}", "received_events_url": "https://api.github.com/users/orsinium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323139, "node_id": "MDU6TGFiZWwzMDQzMjMxMzk=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-10T10:23:18Z", "updated_at": "2018-12-10T10:29:23Z", "closed_at": "2018-12-10T10:29:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for cool library!\r\n\r\nIt will be useful to be able to disable type checking via parameter for decorator:\r\n\r\n```python\r\n@typechecked(enabled=__DEBUG__)\r\ndef some_function(a: int, b: float, c: str, *args: str) -> bool:\r\n    ...\r\n```\r\n\r\nReasoning: type checking at runtime has huge overhead that have to be avoided on production, but it very useful at dev environment. We should be able to separate this environments.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/53", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/53/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/53/events", "html_url": "https://github.com/agronholm/typeguard/issues/53", "id": 388113944, "node_id": "MDU6SXNzdWUzODgxMTM5NDQ=", "number": 53, "title": "typechecked Tuple type invalid type check", "user": {"login": "GiovanniCardamone", "id": 5117748, "node_id": "MDQ6VXNlcjUxMTc3NDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5117748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GiovanniCardamone", "html_url": "https://github.com/GiovanniCardamone", "followers_url": "https://api.github.com/users/GiovanniCardamone/followers", "following_url": "https://api.github.com/users/GiovanniCardamone/following{/other_user}", "gists_url": "https://api.github.com/users/GiovanniCardamone/gists{/gist_id}", "starred_url": "https://api.github.com/users/GiovanniCardamone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GiovanniCardamone/subscriptions", "organizations_url": "https://api.github.com/users/GiovanniCardamone/orgs", "repos_url": "https://api.github.com/users/GiovanniCardamone/repos", "events_url": "https://api.github.com/users/GiovanniCardamone/events{/privacy}", "received_events_url": "https://api.github.com/users/GiovanniCardamone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-06T08:55:44Z", "updated_at": "2019-05-19T11:52:12Z", "closed_at": "2019-05-19T11:52:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "typeguard==2.2.2\r\n\r\nUsing `@typechecked` as decorator from a class i'm trying to pass a string, or a Tuple[str].\r\n\r\ni defined my type in this way:\r\n```\r\nDocPath = Optional[Union[str, Tuple[str]]]\r\n```\r\n\r\nand the signature of my function is this:\r\n```\r\n@typechecked\r\ndef path (self, path: Union[DocPath, AnotherTypeWhereICanExtractThePath] = undefined):\r\n```\r\n\r\nbut running this method with a tuple as parameter for path, cause TypeError Exception.\r\n\r\n```\r\n  File \"/home/step/Workspace/XXX/.venv/lib/python3.7/site-packages/typeguard.py\", line 462, in check_argument_types\r\n    raise TypeError(exc) from None\r\nTypeError: type of argument \"path\" must be one of (str, Tuple, NoneType); got tuple instead\r\n```\r\n\r\nNot sure if is a bug, or i am trying to mix too many types", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/51", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/51/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/51/events", "html_url": "https://github.com/agronholm/typeguard/issues/51", "id": 374061555, "node_id": "MDU6SXNzdWUzNzQwNjE1NTU=", "number": 51, "title": "Support common usage of Optional.", "user": {"login": "tot0", "id": 1692218, "node_id": "MDQ6VXNlcjE2OTIyMTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1692218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tot0", "html_url": "https://github.com/tot0", "followers_url": "https://api.github.com/users/tot0/followers", "following_url": "https://api.github.com/users/tot0/following{/other_user}", "gists_url": "https://api.github.com/users/tot0/gists{/gist_id}", "starred_url": "https://api.github.com/users/tot0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tot0/subscriptions", "organizations_url": "https://api.github.com/users/tot0/orgs", "repos_url": "https://api.github.com/users/tot0/repos", "events_url": "https://api.github.com/users/tot0/events{/privacy}", "received_events_url": "https://api.github.com/users/tot0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-25T17:53:55Z", "updated_at": "2019-07-14T10:16:49Z", "closed_at": "2019-07-14T10:16:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems, at least in my experience, that a common pattern for Optional arguments is to provide a default value of `None` and then, optionally, add the `Optional[]` qualifier. This results in the expected type of the argument being `Union[some_type, None]`. This can result in a weird `TypeError` though due to the way `Union` is handled for type checking. For example:\r\n\r\n```python\r\n@typechecked\r\ndef func(arg: Optional[List[str]] = None):\r\n    pass\r\n```\r\nThis function if used like this:\r\n```python\r\nfunc(['value', None])\r\n```\r\nresults in this `TypeError`:\r\n```python\r\nTypeError: type of argument \"arg\" must be one of (List, NoneType); got list instead\r\n```\r\nThis doesn't really indicate the actual reason this passed list doesn't match the type requirements of func.\r\n\r\nGiven this pattern of having the actual expected type, or None indicating it was not passed, seems common I propose special casing the handling of `Union[some_type, None]`. The actual value of the argument can be checked against `None` and if it isn't None then the proper type check against `some_type` is performed. Otherwise if it is `None`, then no further checking needs to happen.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/49", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/49/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/49/events", "html_url": "https://github.com/agronholm/typeguard/issues/49", "id": 367567260, "node_id": "MDU6SXNzdWUzNjc1NjcyNjA=", "number": 49, "title": "NamedTuple arguments are not checked by the `@typechecked` annotation?", "user": {"login": "kkom", "id": 5056119, "node_id": "MDQ6VXNlcjUwNTYxMTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5056119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kkom", "html_url": "https://github.com/kkom", "followers_url": "https://api.github.com/users/kkom/followers", "following_url": "https://api.github.com/users/kkom/following{/other_user}", "gists_url": "https://api.github.com/users/kkom/gists{/gist_id}", "starred_url": "https://api.github.com/users/kkom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kkom/subscriptions", "organizations_url": "https://api.github.com/users/kkom/orgs", "repos_url": "https://api.github.com/users/kkom/repos", "events_url": "https://api.github.com/users/kkom/events{/privacy}", "received_events_url": "https://api.github.com/users/kkom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-10-07T15:54:06Z", "updated_at": "2018-11-20T10:05:06Z", "closed_at": "2018-11-16T05:53:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, thanks a lot for writing this awesome framework, I find it to be the best way to gradually introducing typing to a Python codebase! I have one problem with it though...\r\n\r\n**Problem:** I cannot get arguments that are derived from `NamedTuple` to be checked by the `@typechecked` annotation\r\n\r\n**Minimal reproducible example:**\r\n\r\n```\r\nfrom typeguard import typechecked\r\nfrom typing import NamedTuple\r\n\r\n@typechecked\r\nclass MyNamedTuple(NamedTuple):\r\n    my_field: str\r\n\r\n@typechecked\r\ndef print_tuple(t: MyNamedTuple) -> None:\r\n    print(\"type of the argument is {}, note that it should be {}\".format(\r\n        type(t),\r\n        type(MyNamedTuple(\"example\")),\r\n    ))\r\n\r\n# this works as it should\r\nt_good = MyNamedTuple('a string')\r\n\r\n# this works as it should\r\nprint_tuple(t_good)\r\n\r\n# BUG: I think this should fail, but it works at runtime!\r\nprint_tuple(1)\r\n\r\n# just to show that the runtime typechecker sometimes works\r\nt_bad = MyNamedTuple(1)\r\n```\r\n\r\nRunning it:\r\n\r\n```\r\n~ # python3 example.py \r\ntype of the argument is <class '__main__.MyNamedTuple'>, note that it should be <class '__main__.MyNamedTuple'>\r\ntype of the argument is <class 'int'>, note that it should be <class '__main__.MyNamedTuple'>\r\nTraceback (most recent call last):\r\n  File \"example.py\", line 26, in <module>\r\n    t_bad = MyNamedTuple(1)\r\n  File \"/usr/local/lib/python3.7/site-packages/typeguard.py\", line 493, in wrapper\r\n    check_argument_types(memo)\r\n  File \"/usr/local/lib/python3.7/site-packages/typeguard.py\", line 462, in check_argument_types\r\n    raise TypeError(exc) from None\r\nTypeError: type of argument \"my_field\" must be str; got int instead\r\n~ # pip freeze\r\ntypeguard==2.2.2\r\n~ # python3 --version\r\nPython 3.7.0\r\n```\r\n\r\nIs this a bug, a limitation, or am I using the framework in a wrong way? I would appreciate any kind of help!\r\n\r\nThanks!\r\n\r\nKonrad", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/47", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/47/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/47/events", "html_url": "https://github.com/agronholm/typeguard/issues/47", "id": 360682772, "node_id": "MDU6SXNzdWUzNjA2ODI3NzI=", "number": 47, "title": "check_type doesn't work for the empty tuple type", "user": {"login": "lubieowoce", "id": 13698226, "node_id": "MDQ6VXNlcjEzNjk4MjI2", "avatar_url": "https://avatars1.githubusercontent.com/u/13698226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lubieowoce", "html_url": "https://github.com/lubieowoce", "followers_url": "https://api.github.com/users/lubieowoce/followers", "following_url": "https://api.github.com/users/lubieowoce/following{/other_user}", "gists_url": "https://api.github.com/users/lubieowoce/gists{/gist_id}", "starred_url": "https://api.github.com/users/lubieowoce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lubieowoce/subscriptions", "organizations_url": "https://api.github.com/users/lubieowoce/orgs", "repos_url": "https://api.github.com/users/lubieowoce/repos", "events_url": "https://api.github.com/users/lubieowoce/events{/privacy}", "received_events_url": "https://api.github.com/users/lubieowoce/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-16T22:00:00Z", "updated_at": "2019-05-19T12:06:35Z", "closed_at": "2019-05-19T12:06:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "## `typeguard.check_type('x', (), typing.Tuple[()])` should succeed, but raises a TypeError instead\r\n\r\nAccording to the `mypy` [docs](https://mypy.readthedocs.io/en/latest/builtin_types.html), the empty tuple `()` has type `typing.Tuple[()]`. (I couldn't find anything on this in the `typing` docs, but since Guido reviewed and merged [the commit](https://github.com/python/mypy/commit/71332d5857b36f4fa7e389bf9bf2c95776cd26f0) to `mypy's` docs ,  `Tuple[()]` seems like the official way to do it.)\r\n\r\nOn my machine, `check_type('x', (), Tuple[()])` does this:\r\n```python\r\n>>> from typing import Tuple\r\n>>> from typeguard import check_type\r\n>>> check_type('x', (), Tuple[()])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\lubieowoce\\.virtualenvs\\sumtype-PdEpNsgZ\\lib\\site-packages\\typeguard.py\", line 392, in check_type\r\n    checker_func(argname, value, expected_type, memo)\r\n  File \"C:\\Users\\lubieowoce\\.virtualenvs\\sumtype-PdEpNsgZ\\lib\\site-packages\\typeguard.py\", line 256, in check_tuple\r\n    .format(argname, len(tuple_params), len(value)))\r\nTypeError: x has wrong number of elements (expected 1, got 0 instead)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/46", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/46/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/46/events", "html_url": "https://github.com/agronholm/typeguard/issues/46", "id": 359769475, "node_id": "MDU6SXNzdWUzNTk3Njk0NzU=", "number": 46, "title": "Provide class decorator", "user": {"login": "koliyo", "id": 770348, "node_id": "MDQ6VXNlcjc3MDM0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/770348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koliyo", "html_url": "https://github.com/koliyo", "followers_url": "https://api.github.com/users/koliyo/followers", "following_url": "https://api.github.com/users/koliyo/following{/other_user}", "gists_url": "https://api.github.com/users/koliyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/koliyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koliyo/subscriptions", "organizations_url": "https://api.github.com/users/koliyo/orgs", "repos_url": "https://api.github.com/users/koliyo/repos", "events_url": "https://api.github.com/users/koliyo/events{/privacy}", "received_events_url": "https://api.github.com/users/koliyo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323136, "node_id": "MDU6TGFiZWwzMDQzMjMxMzY=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-13T07:10:17Z", "updated_at": "2019-08-11T21:27:04Z", "closed_at": "2019-08-11T21:27:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you so much for this library! Really valuable to implement solid python code!\r\n\r\nI want to request a class decorator that would add typechecking to all methods of a class. Is that feasable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/45", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/45/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/45/events", "html_url": "https://github.com/agronholm/typeguard/issues/45", "id": 359767092, "node_id": "MDU6SXNzdWUzNTk3NjcwOTI=", "number": 45, "title": "Does not work with stacked decorators", "user": {"login": "koliyo", "id": 770348, "node_id": "MDQ6VXNlcjc3MDM0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/770348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koliyo", "html_url": "https://github.com/koliyo", "followers_url": "https://api.github.com/users/koliyo/followers", "following_url": "https://api.github.com/users/koliyo/following{/other_user}", "gists_url": "https://api.github.com/users/koliyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/koliyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koliyo/subscriptions", "organizations_url": "https://api.github.com/users/koliyo/orgs", "repos_url": "https://api.github.com/users/koliyo/repos", "events_url": "https://api.github.com/users/koliyo/events{/privacy}", "received_events_url": "https://api.github.com/users/koliyo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-13T07:00:47Z", "updated_at": "2018-09-13T09:22:06Z", "closed_at": "2018-09-13T09:22:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if this is fault of typeguard, but this does not work\r\n```python\r\n    @typechecked\r\n    @staticmethod\r\n    def myMethod(path: str):\r\n```\r\nI'm getting\r\n```\r\nAttributeError: 'staticmethod' object has no attribute '__module__'\r\n```\r\n\r\nchanging the order resolves the issue\r\n```python\r\n    @staticmethod\r\n    @typechecked\r\n    def myMethod(path: str):\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/43", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/43/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/43/events", "html_url": "https://github.com/agronholm/typeguard/issues/43", "id": 349626535, "node_id": "MDU6SXNzdWUzNDk2MjY1MzU=", "number": 43, "title": "TypeVar constraints only work for concrete types and not something like typing.Collection", "user": {"login": "dalejung", "id": 610115, "node_id": "MDQ6VXNlcjYxMDExNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dalejung", "html_url": "https://github.com/dalejung", "followers_url": "https://api.github.com/users/dalejung/followers", "following_url": "https://api.github.com/users/dalejung/following{/other_user}", "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}", "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions", "organizations_url": "https://api.github.com/users/dalejung/orgs", "repos_url": "https://api.github.com/users/dalejung/repos", "events_url": "https://api.github.com/users/dalejung/events{/privacy}", "received_events_url": "https://api.github.com/users/dalejung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-10T19:09:42Z", "updated_at": "2019-11-27T08:00:58Z", "closed_at": "2019-11-27T08:00:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n    @pytest.mark.xfail(reason=\"TypeVar uses `in` for constraint check\")\r\n    def test_typevar_constraints_typing_type(self):\r\n        T = TypeVar('T', int, Collection)\r\n\r\n        def foo(a: T, b: T):\r\n            assert check_argument_types()\r\n\r\n        foo([1, 2], 'bb')\r\n```\r\n\r\nRan across it when looking into #41. Let me know if you want me to PR that xfail test", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/41", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/41/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/41/events", "html_url": "https://github.com/agronholm/typeguard/issues/41", "id": 349620379, "node_id": "MDU6SXNzdWUzNDk2MjAzNzk=", "number": 41, "title": "typing.* types do not have __name__ and they error when generating messages.", "user": {"login": "dalejung", "id": 610115, "node_id": "MDQ6VXNlcjYxMDExNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dalejung", "html_url": "https://github.com/dalejung", "followers_url": "https://api.github.com/users/dalejung/followers", "following_url": "https://api.github.com/users/dalejung/following{/other_user}", "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}", "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions", "organizations_url": "https://api.github.com/users/dalejung/orgs", "repos_url": "https://api.github.com/users/dalejung/repos", "events_url": "https://api.github.com/users/dalejung/events{/privacy}", "received_events_url": "https://api.github.com/users/dalejung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-10T18:48:32Z", "updated_at": "2018-08-10T20:04:01Z", "closed_at": "2018-08-10T20:04:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n        T = TypeVar('T', int, Collection)\r\n        def foo(a: T, b: T):\r\n            assert check_argument_types()\r\n\r\n        with pytest.raises(TypeError):\r\n            foo('aa', 'bb')\r\n```\r\n\r\nShouldn't fail but does since `Collection.__name__` does not exist.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/40", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/40/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/40/events", "html_url": "https://github.com/agronholm/typeguard/issues/40", "id": 346702951, "node_id": "MDU6SXNzdWUzNDY3MDI5NTE=", "number": 40, "title": "Q: How to avoid double type-checking when calling super()?", "user": {"login": "strohel", "id": 145366, "node_id": "MDQ6VXNlcjE0NTM2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/145366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/strohel", "html_url": "https://github.com/strohel", "followers_url": "https://api.github.com/users/strohel/followers", "following_url": "https://api.github.com/users/strohel/following{/other_user}", "gists_url": "https://api.github.com/users/strohel/gists{/gist_id}", "starred_url": "https://api.github.com/users/strohel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/strohel/subscriptions", "organizations_url": "https://api.github.com/users/strohel/orgs", "repos_url": "https://api.github.com/users/strohel/repos", "events_url": "https://api.github.com/users/strohel/events{/privacy}", "received_events_url": "https://api.github.com/users/strohel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323139, "node_id": "MDU6TGFiZWwzMDQzMjMxMzk=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-01T17:50:29Z", "updated_at": "2018-08-04T09:04:23Z", "closed_at": "2018-08-04T09:04:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is mainly a request for comments rather than an issue report.\r\n\r\nWe have code like this:\r\n```python\r\nAuxFileDict = Dict[str, bytes]\r\nMaskedBandWithMetaDict = Dict[str, MaskedBandWithMeta]\r\n\r\nclass A:\r\n\r\n    @typechecked\r\n    def __init__(self, band_map: MaskedBandWithMetaDict,\r\n                 aux_files: AuxFileDict, extent: dict):\r\n        ...\r\n\r\nclass B(A):\r\n\r\n    @typechecked\r\n    def __init__(self, band_map: MaskedBandWithMetaDict,\r\n                 aux_files: AuxFileDict, extent: dict,\r\n                 bandless_metadata: BandlessSceneMetadata):\r\n        super().__init__(band_map, aux_files, extent)\r\n        ...\r\n```\r\n\r\nIf I understand this correctly, type-checks on `band_map`, `aux_files`, `extent` are executed twice if one does `b = B(band_map, aux_files, extent, bandless_metadata)` - once on `B.__init__()` and once on `A.__init__()`\r\n\r\nIs there some reasonable way to avoid this? I can drop type annotations on the \"shared\" parameters of `B.__init__()`, but then I loose documentation and IDE goodies. Or perhaps the performance overhead would not be that bad in this case? (the checked dicts have just a couple of elements)\r\n\r\nCC @Indy2222, @mathewcohle, @asgeirrr.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/38", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/38/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/38/events", "html_url": "https://github.com/agronholm/typeguard/issues/38", "id": 345669309, "node_id": "MDU6SXNzdWUzNDU2NjkzMDk=", "number": 38, "title": "_CallMemo is not using the scope in which the function call is declared", "user": {"login": "obeleh", "id": 174411, "node_id": "MDQ6VXNlcjE3NDQxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/174411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obeleh", "html_url": "https://github.com/obeleh", "followers_url": "https://api.github.com/users/obeleh/followers", "following_url": "https://api.github.com/users/obeleh/following{/other_user}", "gists_url": "https://api.github.com/users/obeleh/gists{/gist_id}", "starred_url": "https://api.github.com/users/obeleh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obeleh/subscriptions", "organizations_url": "https://api.github.com/users/obeleh/orgs", "repos_url": "https://api.github.com/users/obeleh/repos", "events_url": "https://api.github.com/users/obeleh/events{/privacy}", "received_events_url": "https://api.github.com/users/obeleh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-30T08:58:36Z", "updated_at": "2019-08-08T13:24:27Z", "closed_at": "2019-07-14T10:12:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following snippet helps explaining my issue:\r\n\r\n```python\r\nfrom typeguard import typechecked\r\n\r\ndef tst():\r\n    class A:\r\n\r\n        @typechecked\r\n        def clone(self) -> 'A':\r\n            return A()\r\n\r\n\r\n    val = A().clone()\r\n    assert isinstance(val, A)\r\n\r\ntst()\r\n```\r\n\r\nThis makes sure that the class A is not available at module level because it is defined inside the function. This will result in the following stack trace:\r\n\r\n```\r\nConnected to pydev debugger (build 182.3684.100)\r\nTraceback (most recent call last):\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/pydevd.py\", line 1664, in <module>\r\n    main()\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/pydevd.py\", line 1658, in main\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/pydevd.py\", line 1068, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_imps/_pydev_execfile.py\", line 18, in execfile\r\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\r\n  File \"/Users/sjuul/workspace/typeguard/bla.py\", line 14, in <module>\r\n    tst()\r\n  File \"/Users/sjuul/workspace/typeguard/bla.py\", line 11, in tst\r\n    val = A().clone()\r\n  File \"/Users/sjuul/workspace/typeguard/typeguard.py\", line 489, in wrapper\r\n    memo = _CallMemo(func, args=args, kwargs=kwargs)\r\n  File \"/Users/sjuul/workspace/typeguard/typeguard.py\", line 47, in __init__\r\n    hints = get_type_hints(func)\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py\", line 1001, in get_type_hints\r\n    value = _eval_type(value, globalns, localns)\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py\", line 260, in _eval_type\r\n    return t._evaluate(globalns, localns)\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/typing.py\", line 464, in _evaluate\r\n    eval(self.__forward_code__, globalns, localns),\r\n  File \"<string>\", line 1, in <module>\r\nNameError: name 'A' is not defined\r\n```\r\n\r\nThe function `hints = get_type_hints(func)` cannot find the forward reference  `'A'` this is because typeguard using the current context and should use the context in which the function is defined in. This fixes it (I'll add a PR after)\r\n\r\n```python\r\nframe = inspect.stack()[2].frame\r\nhints = get_type_hints(func, localns=frame.f_locals, globalns=frame.f_globals)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/37", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/37/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/37/events", "html_url": "https://github.com/agronholm/typeguard/issues/37", "id": 344368980, "node_id": "MDU6SXNzdWUzNDQzNjg5ODA=", "number": 37, "title": "Releasing a new version?", "user": {"login": "dahlia", "id": 12431, "node_id": "MDQ6VXNlcjEyNDMx", "avatar_url": "https://avatars1.githubusercontent.com/u/12431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dahlia", "html_url": "https://github.com/dahlia", "followers_url": "https://api.github.com/users/dahlia/followers", "following_url": "https://api.github.com/users/dahlia/following{/other_user}", "gists_url": "https://api.github.com/users/dahlia/gists{/gist_id}", "starred_url": "https://api.github.com/users/dahlia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dahlia/subscriptions", "organizations_url": "https://api.github.com/users/dahlia/orgs", "repos_url": "https://api.github.com/users/dahlia/repos", "events_url": "https://api.github.com/users/dahlia/events{/privacy}", "received_events_url": "https://api.github.com/users/dahlia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-25T09:42:01Z", "updated_at": "2018-08-12T19:30:06Z", "closed_at": "2018-08-12T19:30:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "The latest released version on PyPI (2.2.0) does not work well with Python 3.7.  There seem several unreleased patch commits to be compatible with Python 3.7.  Could you release a new version including these patches?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/36", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/36/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/36/events", "html_url": "https://github.com/agronholm/typeguard/issues/36", "id": 342316796, "node_id": "MDU6SXNzdWUzNDIzMTY3OTY=", "number": 36, "title": "@typechecked ignores parameters with default arg", "user": {"login": "zopyx", "id": 594239, "node_id": "MDQ6VXNlcjU5NDIzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/594239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zopyx", "html_url": "https://github.com/zopyx", "followers_url": "https://api.github.com/users/zopyx/followers", "following_url": "https://api.github.com/users/zopyx/following{/other_user}", "gists_url": "https://api.github.com/users/zopyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zopyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zopyx/subscriptions", "organizations_url": "https://api.github.com/users/zopyx/orgs", "repos_url": "https://api.github.com/users/zopyx/repos", "events_url": "https://api.github.com/users/zopyx/events{/privacy}", "received_events_url": "https://api.github.com/users/zopyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-07-18T12:57:19Z", "updated_at": "2018-07-19T11:37:17Z", "closed_at": "2018-07-18T14:01:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n\r\nfrom typeguard import typechecked\r\nimport typing\r\n\r\n\r\nclass X:\r\n    pass\r\n\r\n\r\n@typechecked\r\ndef foo(a: typing.Dict[X, int]={}):\r\n    pass\r\n\r\n\r\nfoo(a={X():2})\r\nfoo(a={2:2})\r\n```\r\n\r\nThis code is supposed to throw an exception for the second `foo()` call. But no error is being raised.\r\nIf you removed the default paramter `{}` then the check raises an exception.\r\n\r\nBug or feature?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/35", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/35/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/35/events", "html_url": "https://github.com/agronholm/typeguard/issues/35", "id": 339465821, "node_id": "MDU6SXNzdWUzMzk0NjU4MjE=", "number": 35, "title": "typing.Collection not checked on Python 3.7", "user": {"login": "JoseKilo", "id": 4922058, "node_id": "MDQ6VXNlcjQ5MjIwNTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4922058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoseKilo", "html_url": "https://github.com/JoseKilo", "followers_url": "https://api.github.com/users/JoseKilo/followers", "following_url": "https://api.github.com/users/JoseKilo/following{/other_user}", "gists_url": "https://api.github.com/users/JoseKilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoseKilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoseKilo/subscriptions", "organizations_url": "https://api.github.com/users/JoseKilo/orgs", "repos_url": "https://api.github.com/users/JoseKilo/repos", "events_url": "https://api.github.com/users/JoseKilo/events{/privacy}", "received_events_url": "https://api.github.com/users/JoseKilo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-09T14:09:54Z", "updated_at": "2018-07-19T13:12:11Z", "closed_at": "2018-07-19T13:12:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using this code\r\n\r\n```python\r\nimport typing\r\n\r\nfrom typeguard import typechecked\r\n\r\n\r\n@typechecked\r\ndef foo(collection: typing.Collection) -> None:\r\n    pass\r\n\r\n\r\nif __name__ == '__main__':\r\n    foo(True)\r\n```\r\n\r\nOn python3.6 I get the following error, as expected:\r\n\r\n```\r\nTypeError: type of argument \"collection\" must be collections.abc.Collection; got bool instead\r\n```\r\n\r\nBut, on Python3.7, nothing happens.\r\n\r\nI think what changed was `inspect.isclass(typing.Collection)` which returns `True` on python3.6 and `False` on python3.7, and it skips this check https://github.com/agronholm/typeguard/blob/master/typeguard.py#L382 .", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/34", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/34/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/34/events", "html_url": "https://github.com/agronholm/typeguard/issues/34", "id": 330013163, "node_id": "MDU6SXNzdWUzMzAwMTMxNjM=", "number": 34, "title": "Bug: Exceptions not handled correctly", "user": {"login": "jkpubsrc", "id": 25060709, "node_id": "MDQ6VXNlcjI1MDYwNzA5", "avatar_url": "https://avatars0.githubusercontent.com/u/25060709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkpubsrc", "html_url": "https://github.com/jkpubsrc", "followers_url": "https://api.github.com/users/jkpubsrc/followers", "following_url": "https://api.github.com/users/jkpubsrc/following{/other_user}", "gists_url": "https://api.github.com/users/jkpubsrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkpubsrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkpubsrc/subscriptions", "organizations_url": "https://api.github.com/users/jkpubsrc/orgs", "repos_url": "https://api.github.com/users/jkpubsrc/repos", "events_url": "https://api.github.com/users/jkpubsrc/events{/privacy}", "received_events_url": "https://api.github.com/users/jkpubsrc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-06T20:05:49Z", "updated_at": "2018-07-08T11:57:13Z", "closed_at": "2018-07-08T11:57:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Situation:\r\n\r\nI've a function here with return value constraint `List[xyz]`. This function throws an Exception for some reason.\r\n\r\nEncountered Behavior:\r\n\r\n`typeguard` complains that the return value of this function is `None`.\r\n\r\nExpected Behavior:\r\n\r\nThe exception should be let through. `typeguard` should not consume that exception.\r\n\r\nDetails:\r\n\r\nI conclude that there is a bug because if I modify the return value constraint from `List[xyz]` to `Union[List[xyz], None]` everything works fine. In that modified case the Exception from within that function is not swallowed but raised correctly. To my understanding exceptions should never be swallowed if they are raised. Return type checking should be performed only if no exception is raised. Exceptions should have priority here: No data is not returned anyway if an exception is raised within a function. So no return type checking should be performed if `typeguard` encounters an exception.\r\n\r\nI guess some kind of very minor change within the code could fix that problem? Despite of such a minor glitch `typeguard` works quite well!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/32", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/32/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/32/events", "html_url": "https://github.com/agronholm/typeguard/issues/32", "id": 324690361, "node_id": "MDU6SXNzdWUzMjQ2OTAzNjE=", "number": 32, "title": "typing.NewType not checked", "user": {"login": "reinhrst", "id": 1173730, "node_id": "MDQ6VXNlcjExNzM3MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1173730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reinhrst", "html_url": "https://github.com/reinhrst", "followers_url": "https://api.github.com/users/reinhrst/followers", "following_url": "https://api.github.com/users/reinhrst/following{/other_user}", "gists_url": "https://api.github.com/users/reinhrst/gists{/gist_id}", "starred_url": "https://api.github.com/users/reinhrst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reinhrst/subscriptions", "organizations_url": "https://api.github.com/users/reinhrst/orgs", "repos_url": "https://api.github.com/users/reinhrst/repos", "events_url": "https://api.github.com/users/reinhrst/events{/privacy}", "received_events_url": "https://api.github.com/users/reinhrst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-20T07:38:52Z", "updated_at": "2018-07-08T13:56:09Z", "closed_at": "2018-07-08T13:56:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Everything noted as typing.NewType is ignored for a typecheck. E.g.\r\n\r\n```\r\n        myint = NewType(\"myint\", int)\r\n        def foo(a: myint):\r\n            assert check_argument_types()\r\n\r\n        foo(\"a\")  # should raise error, but does not\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/31", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/31/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/31/events", "html_url": "https://github.com/agronholm/typeguard/issues/31", "id": 310290381, "node_id": "MDU6SXNzdWUzMTAyOTAzODE=", "number": 31, "title": "Django example?", "user": {"login": "skorokithakis", "id": 23648, "node_id": "MDQ6VXNlcjIzNjQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/23648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skorokithakis", "html_url": "https://github.com/skorokithakis", "followers_url": "https://api.github.com/users/skorokithakis/followers", "following_url": "https://api.github.com/users/skorokithakis/following{/other_user}", "gists_url": "https://api.github.com/users/skorokithakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/skorokithakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skorokithakis/subscriptions", "organizations_url": "https://api.github.com/users/skorokithakis/orgs", "repos_url": "https://api.github.com/users/skorokithakis/repos", "events_url": "https://api.github.com/users/skorokithakis/events{/privacy}", "received_events_url": "https://api.github.com/users/skorokithakis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-01T03:28:16Z", "updated_at": "2018-11-16T07:37:30Z", "closed_at": "2018-11-16T07:37:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there an elegant way to have typeguard check all types when running Django? I tried the third method (running the entire project under typeguard from `manage.py`) but the application just froze at startup.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/29", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/29/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/29/events", "html_url": "https://github.com/agronholm/typeguard/issues/29", "id": 296072584, "node_id": "MDU6SXNzdWUyOTYwNzI1ODQ=", "number": 29, "title": "function name not displayed", "user": {"login": "clouds56", "id": 730813, "node_id": "MDQ6VXNlcjczMDgxMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/730813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clouds56", "html_url": "https://github.com/clouds56", "followers_url": "https://api.github.com/users/clouds56/followers", "following_url": "https://api.github.com/users/clouds56/following{/other_user}", "gists_url": "https://api.github.com/users/clouds56/gists{/gist_id}", "starred_url": "https://api.github.com/users/clouds56/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clouds56/subscriptions", "organizations_url": "https://api.github.com/users/clouds56/orgs", "repos_url": "https://api.github.com/users/clouds56/repos", "events_url": "https://api.github.com/users/clouds56/events{/privacy}", "received_events_url": "https://api.github.com/users/clouds56/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-10T04:25:50Z", "updated_at": "2018-07-19T13:12:10Z", "closed_at": "2018-07-19T13:12:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/agronholm/typeguard/blob/master/typeguard.py#L432\r\n```\r\ndescription = 'argument \"{}\"'.format(argname, memo.func_name)\r\n```\r\nmissing something here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/28", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/28/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/28/events", "html_url": "https://github.com/agronholm/typeguard/issues/28", "id": 285692650, "node_id": "MDU6SXNzdWUyODU2OTI2NTA=", "number": 28, "title": "[FR] hide stacktrace info from typeguard", "user": {"login": "Cologler", "id": 10906962, "node_id": "MDQ6VXNlcjEwOTA2OTYy", "avatar_url": "https://avatars0.githubusercontent.com/u/10906962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cologler", "html_url": "https://github.com/Cologler", "followers_url": "https://api.github.com/users/Cologler/followers", "following_url": "https://api.github.com/users/Cologler/following{/other_user}", "gists_url": "https://api.github.com/users/Cologler/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cologler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cologler/subscriptions", "organizations_url": "https://api.github.com/users/Cologler/orgs", "repos_url": "https://api.github.com/users/Cologler/repos", "events_url": "https://api.github.com/users/Cologler/events{/privacy}", "received_events_url": "https://api.github.com/users/Cologler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323136, "node_id": "MDU6TGFiZWwzMDQzMjMxMzY=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-01-03T13:51:09Z", "updated_at": "2018-07-19T13:12:11Z", "closed_at": "2018-07-19T13:12:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is possible replace from\r\n\r\n``` py\r\n    @wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        memo = _CallMemo(func, args=args, kwargs=kwargs)\r\n        check_argument_types(memo)\r\n        retval = func(*args, **kwargs)\r\n        check_return_type(retval, memo)\r\n        return retval\r\n```\r\n\r\nto\r\n\r\n``` py\r\n    @wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        memo = _CallMemo(func, args=args, kwargs=kwargs)\r\n        try:\r\n            check_argument_types(memo)\r\n        except TypeError as err:\r\n            raise TypeError(err)\r\n        retval = func(*args, **kwargs)\r\n        try:\r\n            check_return_type(retval, memo)\r\n        except TypeError as err:\r\n            raise TypeError(err)\r\n        return retval\r\n```\r\n\r\nfor hide stacktrace info from typeguard.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/26", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/26/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/26/events", "html_url": "https://github.com/agronholm/typeguard/issues/26", "id": 274835382, "node_id": "MDU6SXNzdWUyNzQ4MzUzODI=", "number": 26, "title": "Issues with PyCharm debugger", "user": {"login": "i3v", "id": 920364, "node_id": "MDQ6VXNlcjkyMDM2NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/920364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/i3v", "html_url": "https://github.com/i3v", "followers_url": "https://api.github.com/users/i3v/followers", "following_url": "https://api.github.com/users/i3v/following{/other_user}", "gists_url": "https://api.github.com/users/i3v/gists{/gist_id}", "starred_url": "https://api.github.com/users/i3v/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/i3v/subscriptions", "organizations_url": "https://api.github.com/users/i3v/orgs", "repos_url": "https://api.github.com/users/i3v/repos", "events_url": "https://api.github.com/users/i3v/events{/privacy}", "received_events_url": "https://api.github.com/users/i3v/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-11-17T11:28:07Z", "updated_at": "2018-07-22T18:54:10Z", "closed_at": "2018-07-22T18:36:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following simple example fail with recent PyCharm versions:\r\n```\r\nfrom typeguard import check_argument_types\r\n\r\n\r\ndef run(x: int):\r\n    assert check_argument_types()\r\n    print(x)      # <--- place a breakpoint here and run debug\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    run(1)\r\n    # run(1.0)    # uncomment & run normally to make sure it correctly detects incorrect type\r\n  }\r\n}\r\n```\r\nThe error message I get is \r\n\r\n```\r\nC:\\ProgramFiles\\Anaconda\\envs\\general_py36\\python.exe \"C:\\Program Files\\JetBrains\\PyCharm 2017.2\\helpers\\pydev\\pydevd.py\" --multiproc --qt-support=auto --client 127.0.0.1 --port 55659 --file W:/tests/PyTests/typeguard_in_debug/check_args_in_debug.py\r\npydev debugger: process 18164 is connecting\r\n\r\nConnected to pydev debugger (build 172.3968.37)\r\nTraceback (most recent call last):\r\n  File \"C:\\Program Files\\JetBrains\\PyCharm 2017.2\\helpers\\pydev\\pydevd.py\", line 1599, in <module>\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"C:\\Program Files\\JetBrains\\PyCharm 2017.2\\helpers\\pydev\\pydevd.py\", line 1026, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File \"C:\\Program Files\\JetBrains\\PyCharm 2017.2\\helpers\\pydev\\_pydev_imps\\_pydev_execfile.py\", line 18, in execfile\r\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\r\n  File \"W:/tests/PyTests/typeguard_in_debug/check_args_in_debug.py\", line 10, in <module>\r\n    run(1)\r\n  File \"W:/tests/PyTests/typeguard_in_debug/check_args_in_debug.py\", line 5, in run\r\n    assert check_argument_types()\r\n  File \"C:\\ProgramFiles\\Anaconda\\envs\\general_py36\\lib\\site-packages\\typeguard.py\", line 421, in check_argument_types\r\n    memo = _CallMemo(func, frame)\r\n  File \"C:\\ProgramFiles\\Anaconda\\envs\\general_py36\\lib\\site-packages\\typeguard.py\", line 46, in __init__\r\n    self.func_name = function_name(func)\r\n  File \"C:\\ProgramFiles\\Anaconda\\envs\\general_py36\\lib\\site-packages\\typeguard.py\", line 130, in function_name\r\n    module = func.__module__\r\nAttributeError: 'NoneType' object has no attribute '__module__'\r\n\r\nProcess finished with exit code 1\r\n```\r\nI've already [reported](https://youtrack.jetbrains.com/issue/PY-26612) it on their bug tracker.\r\nLuckily, they've left an option to fallback to the previous debugger mechanism (the `PYDEVD_USE_FRAME_EVAL` trick).\r\n\r\nI'd like to report this here as well, just in case. I've still not looked into the code and I'm not sure whether or not it is possible to modify typeguard code so that it would work with JetBrains' debugger.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/25", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/25/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/25/events", "html_url": "https://github.com/agronholm/typeguard/issues/25", "id": 272733636, "node_id": "MDU6SXNzdWUyNzI3MzM2MzY=", "number": 25, "title": "check_type doesn't raise ValueError if expected_type is not a type", "user": {"login": "Kentzo", "id": 88809, "node_id": "MDQ6VXNlcjg4ODA5", "avatar_url": "https://avatars1.githubusercontent.com/u/88809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kentzo", "html_url": "https://github.com/Kentzo", "followers_url": "https://api.github.com/users/Kentzo/followers", "following_url": "https://api.github.com/users/Kentzo/following{/other_user}", "gists_url": "https://api.github.com/users/Kentzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kentzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kentzo/subscriptions", "organizations_url": "https://api.github.com/users/Kentzo/orgs", "repos_url": "https://api.github.com/users/Kentzo/repos", "events_url": "https://api.github.com/users/Kentzo/events{/privacy}", "received_events_url": "https://api.github.com/users/Kentzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-09T21:40:28Z", "updated_at": "2018-01-03T20:46:52Z", "closed_at": "2018-01-03T20:46:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Shouldn't `check_type` raise an error if typeguard cannot recognize it as a type instead of silently exiting?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/24", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/24/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/24/events", "html_url": "https://github.com/agronholm/typeguard/issues/24", "id": 272477303, "node_id": "MDU6SXNzdWUyNzI0NzczMDM=", "number": 24, "title": "Modify check_type to work without memo", "user": {"login": "Kentzo", "id": 88809, "node_id": "MDQ6VXNlcjg4ODA5", "avatar_url": "https://avatars1.githubusercontent.com/u/88809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kentzo", "html_url": "https://github.com/Kentzo", "followers_url": "https://api.github.com/users/Kentzo/followers", "following_url": "https://api.github.com/users/Kentzo/following{/other_user}", "gists_url": "https://api.github.com/users/Kentzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kentzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kentzo/subscriptions", "organizations_url": "https://api.github.com/users/Kentzo/orgs", "repos_url": "https://api.github.com/users/Kentzo/repos", "events_url": "https://api.github.com/users/Kentzo/events{/privacy}", "received_events_url": "https://api.github.com/users/Kentzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 39, "created_at": "2017-11-09T08:29:05Z", "updated_at": "2018-07-19T13:12:11Z", "closed_at": "2018-07-19T13:12:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my project I would like to check arbitrary object against PEP 484 definition.\r\n`check_type` seems to be what I need, but it requires a memo object which I do not have in my use case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/23", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/23/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/23/events", "html_url": "https://github.com/agronholm/typeguard/issues/23", "id": 270710600, "node_id": "MDU6SXNzdWUyNzA3MTA2MDA=", "number": 23, "title": "int values should be accepted for float parameters ?", "user": {"login": "nicoulaj", "id": 3162, "node_id": "MDQ6VXNlcjMxNjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoulaj", "html_url": "https://github.com/nicoulaj", "followers_url": "https://api.github.com/users/nicoulaj/followers", "following_url": "https://api.github.com/users/nicoulaj/following{/other_user}", "gists_url": "https://api.github.com/users/nicoulaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoulaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoulaj/subscriptions", "organizations_url": "https://api.github.com/users/nicoulaj/orgs", "repos_url": "https://api.github.com/users/nicoulaj/repos", "events_url": "https://api.github.com/users/nicoulaj/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoulaj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-02T16:03:45Z", "updated_at": "2017-11-18T14:57:09Z", "closed_at": "2017-11-18T14:57:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "PEP 484 says [here](https://www.python.org/dev/peps/pep-0484/#id27):\r\n\r\n> when an argument is annotated as having type float, an argument of type int is acceptable\r\n\r\nTypeguard 2.1.3 reports this is a typing error.\r\n\r\nSample code:\r\n```\r\nfrom warnings import filterwarnings\r\nfrom typeguard import TypeChecker, TypeWarning\r\n\r\ndef my_method(a: float) -> None:\r\n    pass\r\n\r\ndef test_01():\r\n    filterwarnings('error', category=TypeWarning)\r\n    with TypeChecker(['tests']):\r\n        my_method(a=2)\r\n```\r\n\r\n(same applies to `complex`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/22", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/22/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/22/events", "html_url": "https://github.com/agronholm/typeguard/issues/22", "id": 255006430, "node_id": "MDU6SXNzdWUyNTUwMDY0MzA=", "number": 22, "title": "Optional[Union[str, date, datetime]] doesn't work if argument passed in ", "user": {"login": "ztane", "id": 704200, "node_id": "MDQ6VXNlcjcwNDIwMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/704200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztane", "html_url": "https://github.com/ztane", "followers_url": "https://api.github.com/users/ztane/followers", "following_url": "https://api.github.com/users/ztane/following{/other_user}", "gists_url": "https://api.github.com/users/ztane/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztane/subscriptions", "organizations_url": "https://api.github.com/users/ztane/orgs", "repos_url": "https://api.github.com/users/ztane/repos", "events_url": "https://api.github.com/users/ztane/events{/privacy}", "received_events_url": "https://api.github.com/users/ztane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-09-04T10:55:08Z", "updated_at": "2017-11-18T14:10:58Z", "closed_at": "2017-11-18T14:10:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The union bug manifests itself if the union is optional.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/19", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/19/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/19/events", "html_url": "https://github.com/agronholm/typeguard/issues/19", "id": 231462391, "node_id": "MDU6SXNzdWUyMzE0NjIzOTE=", "number": 19, "title": "Error message not as explicit for Tuple when it is in an Union", "user": {"login": "ether42", "id": 3048933, "node_id": "MDQ6VXNlcjMwNDg5MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3048933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ether42", "html_url": "https://github.com/ether42", "followers_url": "https://api.github.com/users/ether42/followers", "following_url": "https://api.github.com/users/ether42/following{/other_user}", "gists_url": "https://api.github.com/users/ether42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ether42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ether42/subscriptions", "organizations_url": "https://api.github.com/users/ether42/orgs", "repos_url": "https://api.github.com/users/ether42/repos", "events_url": "https://api.github.com/users/ether42/events{/privacy}", "received_events_url": "https://api.github.com/users/ether42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-25T21:16:51Z", "updated_at": "2019-07-14T10:16:59Z", "closed_at": "2019-07-14T10:16:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sadly, the helpful message obtained for a mismatching `Tuple` length is not shown when the `Tuple` is used inside an `Union`.\r\n\r\nVersion used:\r\n```shell\r\npip show typeguard\r\nName: typeguard\r\nVersion: 2.1.3\r\n...\r\n```\r\n\r\nCommented example:\r\n```python\r\nfrom typing import Union, Tuple\r\nfrom typeguard import typechecked\r\n\r\n@typechecked\r\ndef example1(param: Tuple[int, int, int]) -> None:\r\n    return None\r\n\r\n@typechecked\r\ndef example2(param: Union[int, Tuple[int, int, int]]) -> None:\r\n    return None\r\n\r\n#example1((42, 42)) # TypeError: argument \"param\" has wrong number of elements (expected 3, got 2 instead)\r\nexample2((42, 42)) # TypeError: type of argument \"param\" must be one of (int, Tuple); got tuple instead\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/18", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/18/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/18/events", "html_url": "https://github.com/agronholm/typeguard/issues/18", "id": 230999178, "node_id": "MDU6SXNzdWUyMzA5OTkxNzg=", "number": 18, "title": "About performance", "user": {"login": "Gr1N", "id": 1087619, "node_id": "MDQ6VXNlcjEwODc2MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1087619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gr1N", "html_url": "https://github.com/Gr1N", "followers_url": "https://api.github.com/users/Gr1N/followers", "following_url": "https://api.github.com/users/Gr1N/following{/other_user}", "gists_url": "https://api.github.com/users/Gr1N/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gr1N/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gr1N/subscriptions", "organizations_url": "https://api.github.com/users/Gr1N/orgs", "repos_url": "https://api.github.com/users/Gr1N/repos", "events_url": "https://api.github.com/users/Gr1N/events{/privacy}", "received_events_url": "https://api.github.com/users/Gr1N/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323139, "node_id": "MDU6TGFiZWwzMDQzMjMxMzk=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-05-24T10:51:35Z", "updated_at": "2017-05-24T16:52:07Z", "closed_at": "2017-05-24T16:48:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nThanks for the project, looks very good and interesting.\r\nI want to ask you some questions about performance: do you have any metrics (or thoughts) how usage of `typechecked` or `TypeChecker` affects on performance? And do you use your library in production or this just a prototype for fun?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/17", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/17/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/17/events", "html_url": "https://github.com/agronholm/typeguard/issues/17", "id": 227285609, "node_id": "MDU6SXNzdWUyMjcyODU2MDk=", "number": 17, "title": "None in Tuple is not checked", "user": {"login": "smarie", "id": 3236794, "node_id": "MDQ6VXNlcjMyMzY3OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3236794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smarie", "html_url": "https://github.com/smarie", "followers_url": "https://api.github.com/users/smarie/followers", "following_url": "https://api.github.com/users/smarie/following{/other_user}", "gists_url": "https://api.github.com/users/smarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/smarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smarie/subscriptions", "organizations_url": "https://api.github.com/users/smarie/orgs", "repos_url": "https://api.github.com/users/smarie/repos", "events_url": "https://api.github.com/users/smarie/events{/privacy}", "received_events_url": "https://api.github.com/users/smarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-09T08:18:51Z", "updated_at": "2018-07-19T11:36:43Z", "closed_at": "2018-07-19T11:36:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there,\r\nWhile comparing this library with other type checkers such as [enforce](https://github.com/RussBaz/enforce) and [typecheck-decorator](https://github.com/prechelt/typecheck-decorator) I found this bug:\r\n\r\n```python\r\nfrom typeguard import typechecked\r\n\r\n@typechecked\r\ndef method(a: Tuple[str, int] = ('hello', 1)) -> int:\r\n    if a is None:\r\n        return a\r\n    else:\r\n        print(a[0])\r\n        return a[1]\r\n\r\ntry:\r\n    method(None)\r\nexcept TypeError:\r\n    print('None for the whole tuple is correctly handled')\r\n\r\ntry:\r\n    method((None, 0))\r\n    raise Exception('error None not checked inside tuple!')\r\nexcept TypeError:\r\n    pass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/16", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/16/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/16/events", "html_url": "https://github.com/agronholm/typeguard/issues/16", "id": 221105024, "node_id": "MDU6SXNzdWUyMjExMDUwMjQ=", "number": 16, "title": "`# type: ignore` comment is not respected", "user": {"login": "mihaic", "id": 165546, "node_id": "MDQ6VXNlcjE2NTU0Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/165546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mihaic", "html_url": "https://github.com/mihaic", "followers_url": "https://api.github.com/users/mihaic/followers", "following_url": "https://api.github.com/users/mihaic/following{/other_user}", "gists_url": "https://api.github.com/users/mihaic/gists{/gist_id}", "starred_url": "https://api.github.com/users/mihaic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mihaic/subscriptions", "organizations_url": "https://api.github.com/users/mihaic/orgs", "repos_url": "https://api.github.com/users/mihaic/repos", "events_url": "https://api.github.com/users/mihaic/events{/privacy}", "received_events_url": "https://api.github.com/users/mihaic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323136, "node_id": "MDU6TGFiZWwzMDQzMjMxMzY=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-11T23:02:22Z", "updated_at": "2018-07-08T11:59:21Z", "closed_at": "2018-07-08T11:59:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "[PEP 484](https://www.python.org/dev/peps/pep-0484/#type-comments) states:\r\n\"A # type: ignore comment on a line by itself is equivalent to adding an inline # type: ignore to each line until the end of the current indented block. At top indentation level this has effect of disabling type checking until the end of file.\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/15", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/15/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/15/events", "html_url": "https://github.com/agronholm/typeguard/issues/15", "id": 221097721, "node_id": "MDU6SXNzdWUyMjEwOTc3MjE=", "number": 15, "title": "Generator annotations are not interpreted according to PEP 484", "user": {"login": "mihaic", "id": 165546, "node_id": "MDQ6VXNlcjE2NTU0Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/165546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mihaic", "html_url": "https://github.com/mihaic", "followers_url": "https://api.github.com/users/mihaic/followers", "following_url": "https://api.github.com/users/mihaic/following{/other_user}", "gists_url": "https://api.github.com/users/mihaic/gists{/gist_id}", "starred_url": "https://api.github.com/users/mihaic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mihaic/subscriptions", "organizations_url": "https://api.github.com/users/mihaic/orgs", "repos_url": "https://api.github.com/users/mihaic/repos", "events_url": "https://api.github.com/users/mihaic/events{/privacy}", "received_events_url": "https://api.github.com/users/mihaic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323136, "node_id": "MDU6TGFiZWwzMDQzMjMxMzY=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-04-11T22:21:44Z", "updated_at": "2019-08-28T19:14:50Z", "closed_at": "2019-08-08T11:19:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Try this example:\r\n\r\n```python\r\nfrom typing import Generator, no_type_check\r\nfrom warnings import filterwarnings\r\n\r\nfrom typeguard import TypeChecker, TypeWarning\r\n\r\n\r\ndef generator_example() -> Generator[int, None, None]:\r\n    for i in range(3):\r\n        yield i\r\n\r\n\r\ndef main() -> None:\r\n    filterwarnings(\"error\", category=TypeWarning)\r\n    checker = TypeChecker(\"__main__\")\r\n    checker.start()\r\n    results = generator_example()\r\n    for result in results:\r\n        print(result)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nI get:\r\n```typeguard.TypeWarning: [MainThread] return from __main__.generator_example() at generator_fail.py:9: type of the return value must be collections.abc.Generator; got int instead```\r\n\r\nAs a workaround, I decorate generators with `@no_type_check`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/14", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/14/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/14/events", "html_url": "https://github.com/agronholm/typeguard/issues/14", "id": 213702485, "node_id": "MDU6SXNzdWUyMTM3MDI0ODU=", "number": 14, "title": "Wrong args on 2.1.2 version", "user": {"login": "ipdae", "id": 3193043, "node_id": "MDQ6VXNlcjMxOTMwNDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3193043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipdae", "html_url": "https://github.com/ipdae", "followers_url": "https://api.github.com/users/ipdae/followers", "following_url": "https://api.github.com/users/ipdae/following{/other_user}", "gists_url": "https://api.github.com/users/ipdae/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipdae/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipdae/subscriptions", "organizations_url": "https://api.github.com/users/ipdae/orgs", "repos_url": "https://api.github.com/users/ipdae/repos", "events_url": "https://api.github.com/users/ipdae/events{/privacy}", "received_events_url": "https://api.github.com/users/ipdae/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-13T08:39:38Z", "updated_at": "2017-03-13T11:09:30Z", "closed_at": "2017-03-13T08:55:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport typing\r\n\r\nfrom typeguard import typecheked\r\n\r\n@typecheked\r\ndef test(t:typing.Tuple[str, Node]):\r\n    pass\r\n\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/app.py\", line 2000, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/sqlalchemy_imageattach/stores/fs.py\", line 226, in app\r\n    return _app(environ, start_response)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/sqlalchemy_imageattach/stores/fs.py\", line 283, in __call__\r\n    return self.app(environ, start_response)\r\n  File \"/Users/ung/dodo-ads/ads/web/wsgi.py\", line 119, in __call__\r\n    return self.app(environ, start_response)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/sassutils/wsgi.py\", line 162, in __call__\r\n    return self.app(environ, start_response)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/app.py\", line 1991, in wsgi_app\r\n    response = self.make_response(self.handle_exception(e))\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/app.py\", line 1567, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/_compat.py\", line 33, in reraise\r\n    raise value\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/app.py\", line 1988, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/app.py\", line 1641, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/app.py\", line 1544, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/_compat.py\", line 33, in reraise\r\n    raise value\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/app.py\", line 1639, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/app.py\", line 1625, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/Users/ung/dodo-ads/ads/web/oauth.py\", line 53, in decorator\r\n    return f(*args, **kwargs)\r\n  File \"/Users/ung/dodo-ads/ads/web/admin.py\", line 70, in list_channels\r\n    return render_template('admin/list_channels.html', channels=channels)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/templating.py\", line 134, in render_template\r\n    context, ctx.app)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/flask/templating.py\", line 116, in _render\r\n    rv = template.render(context)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/jinja2/environment.py\", line 989, in render\r\n    return self.environment.handle_exception(exc_info, True)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/jinja2/environment.py\", line 754, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/jinja2/_compat.py\", line 37, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/Users/ung/dodo-ads/ads/web/templates/admin/list_channels.html\", line 1, in top-level template code\r\n    {% extends 'admin/layout.html' %}\r\n  File \"/Users/ung/dodo-ads/ads/web/templates/admin/layout.html\", line 1, in top-level template code\r\n    {% extends 'layout.html' %}\r\n  File \"/Users/ung/dodo-ads/ads/web/templates/layout.html\", line 97, in top-level template code\r\n    {% block sidebar %}\r\n  File \"/Users/ung/dodo-ads/ads/web/templates/layout.html\", line 98, in block \"sidebar\"\r\n    {% for label, link in list_sitemap() if link.has_permission() %}\r\n  File \"/Users/ung/dodo-ads/ads/web/sitemap.py\", line 62, in list_sitemap\r\n    'admin.targets',\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/typeguard.py\", line 457, in wrapper\r\n    check_argument_types(memo)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/typeguard.py\", line 426, in check_argument_types\r\n    check_type(description, value, expected_type, memo)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/typeguard.py\", line 377, in check_type\r\n    check_tuple(argname, value, expected_type, memo)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/typeguard.py\", line 257, in check_tuple\r\n    check_type('{}[{}]'.format(argname, i), element, element_type, memo)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/typeguard.py\", line 373, in check_type\r\n    checker_func(argname, value, expected_type, memo)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/typeguard.py\", line 213, in check_sequence\r\n    check_type('{}[{}]'.format(argname, i), v, value_type, memo)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/typeguard.py\", line 377, in check_type\r\n    check_tuple(argname, value, expected_type, memo)\r\n  File \"/Users/ung/.venvs/ads/lib/python3.5/site-packages/typeguard.py\", line 240, in check_tuple\r\n    format(argname, qualified_name(value)))\r\nTypeError: type of argument \"nodes\"[0][0] must be a tuple; got str instead\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/13", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/13/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/13/events", "html_url": "https://github.com/agronholm/typeguard/issues/13", "id": 209056230, "node_id": "MDU6SXNzdWUyMDkwNTYyMzA=", "number": 13, "title": "Support typechecking of AbstractSet", "user": {"login": "ipdae", "id": 3193043, "node_id": "MDQ6VXNlcjMxOTMwNDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3193043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipdae", "html_url": "https://github.com/ipdae", "followers_url": "https://api.github.com/users/ipdae/followers", "following_url": "https://api.github.com/users/ipdae/following{/other_user}", "gists_url": "https://api.github.com/users/ipdae/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipdae/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipdae/subscriptions", "organizations_url": "https://api.github.com/users/ipdae/orgs", "repos_url": "https://api.github.com/users/ipdae/repos", "events_url": "https://api.github.com/users/ipdae/events{/privacy}", "received_events_url": "https://api.github.com/users/ipdae/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323136, "node_id": "MDU6TGFiZWwzMDQzMjMxMzY=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-21T06:46:07Z", "updated_at": "2019-11-27T08:50:06Z", "closed_at": "2019-11-27T08:50:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport typing\r\nimport uuid\r\n\r\nfrom pytest import raises\r\nfrom typeguard import typechecked\r\n\r\n@typechecked\r\ndef check(v: typing.AbstractSet[uuid.UUID]):\r\n    pass\r\n\r\nwith raises(TypeError):\r\n    check({str(uuid.uuid4())})\r\n```\r\n\r\n```python\r\nResults (4.85s):\r\n       1 failed\r\n         - /Users/ung/tests/services/customer_test.py:125: Failed: DID NOT RAISE <class 'TypeError'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/11", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/11/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/11/events", "html_url": "https://github.com/agronholm/typeguard/issues/11", "id": 205100650, "node_id": "MDU6SXNzdWUyMDUxMDA2NTA=", "number": 11, "title": "Union[str, Sequence[T]] denies strings", "user": {"login": "dahlia", "id": 12431, "node_id": "MDQ6VXNlcjEyNDMx", "avatar_url": "https://avatars1.githubusercontent.com/u/12431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dahlia", "html_url": "https://github.com/dahlia", "followers_url": "https://api.github.com/users/dahlia/followers", "following_url": "https://api.github.com/users/dahlia/following{/other_user}", "gists_url": "https://api.github.com/users/dahlia/gists{/gist_id}", "starred_url": "https://api.github.com/users/dahlia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dahlia/subscriptions", "organizations_url": "https://api.github.com/users/dahlia/orgs", "repos_url": "https://api.github.com/users/dahlia/repos", "events_url": "https://api.github.com/users/dahlia/events{/privacy}", "received_events_url": "https://api.github.com/users/dahlia/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-03T08:45:38Z", "updated_at": "2017-03-12T20:07:46Z", "closed_at": "2017-03-12T20:07:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "`Union[str, Sequence[T]]` (where `T` is not `str`) denies strings:\r\n\r\n```python\r\nfrom typing import Sequence, Union\r\n\r\nfrom typeguard import typechecked\r\n\r\n\r\n@typechecked\r\ndef check_union_sequence(v: Union[str, Sequence[int]]):\r\n    pass\r\n\r\n\r\ncheck_union_sequence('test')\r\n```\r\n\r\nThe last call should pass without `TypeError`, but it actually doesn't:\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"t.py\", line 11, in <module>\r\n    check_union_sequence('test')\r\n  File \"/Users/dahlia/.virtualenvs/store-service/lib/python3.5/site-packages/typeguard.py\", line 450, in wrapper\r\n    check_argument_types(memo)\r\n  File \"/Users/dahlia/.virtualenvs/store-service/lib/python3.5/site-packages/typeguard.py\", line 419, in check_argument_types\r\n    check_type(description, value, expected_type, memo)\r\n  File \"/Users/dahlia/.virtualenvs/store-service/lib/python3.5/site-packages/typeguard.py\", line 366, in check_type\r\n    checker_func(argname, value, expected_type, memo)\r\n  File \"/Users/dahlia/.virtualenvs/store-service/lib/python3.5/site-packages/typeguard.py\", line 204, in check_sequence\r\n    check_type('{}[{}]'.format(argname, i), v, value_type, memo)\r\n  File \"/Users/dahlia/.virtualenvs/store-service/lib/python3.5/site-packages/typeguard.py\", line 382, in check_type\r\n    format(argname, qualified_name(expected_type), qualified_name(value)))\r\nTypeError: type of argument \"v\"[0] must be int; got str instead\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/10", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/10/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/10/events", "html_url": "https://github.com/agronholm/typeguard/issues/10", "id": 203999155, "node_id": "MDU6SXNzdWUyMDM5OTkxNTU=", "number": 10, "title": "*args and **kwargs not according to PEP 484", "user": {"login": "jlibovicky", "id": 1221979, "node_id": "MDQ6VXNlcjEyMjE5Nzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1221979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlibovicky", "html_url": "https://github.com/jlibovicky", "followers_url": "https://api.github.com/users/jlibovicky/followers", "following_url": "https://api.github.com/users/jlibovicky/following{/other_user}", "gists_url": "https://api.github.com/users/jlibovicky/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlibovicky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlibovicky/subscriptions", "organizations_url": "https://api.github.com/users/jlibovicky/orgs", "repos_url": "https://api.github.com/users/jlibovicky/repos", "events_url": "https://api.github.com/users/jlibovicky/events{/privacy}", "received_events_url": "https://api.github.com/users/jlibovicky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-30T12:36:42Z", "updated_at": "2017-03-12T19:44:08Z", "closed_at": "2017-03-12T19:44:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, [PEP 484](https://www.python.org/dev/peps/pep-0484/#arbitrary-argument-lists-and-default-argument-values) says `*args` and `**kwargs` (e.g., `**kwargs: int`) should by annotated only by their value types and the type of the resulting dict (e.g., `Dict[str, int]`) should be deduced. \r\n\r\n`check_argument_types()`, however, required the dict in the annotation which makes it impossible to [mypy](http://mypy-lang.org/) for static type checking and typeguard at the same time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/9", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/9/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/9/events", "html_url": "https://github.com/agronholm/typeguard/issues/9", "id": 202323588, "node_id": "MDU6SXNzdWUyMDIzMjM1ODg=", "number": 9, "title": "sphinx-autodoc-typehints: NameError: name 'ConcatOperator' is not defined", "user": {"login": "kingspp", "id": 6322488, "node_id": "MDQ6VXNlcjYzMjI0ODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6322488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kingspp", "html_url": "https://github.com/kingspp", "followers_url": "https://api.github.com/users/kingspp/followers", "following_url": "https://api.github.com/users/kingspp/following{/other_user}", "gists_url": "https://api.github.com/users/kingspp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kingspp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kingspp/subscriptions", "organizations_url": "https://api.github.com/users/kingspp/orgs", "repos_url": "https://api.github.com/users/kingspp/repos", "events_url": "https://api.github.com/users/kingspp/events{/privacy}", "received_events_url": "https://api.github.com/users/kingspp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323138, "node_id": "MDU6TGFiZWwzMDQzMjMxMzg=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-21T16:05:04Z", "updated_at": "2017-01-21T16:16:58Z", "closed_at": "2017-01-21T16:16:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "sphinx-autodoc-typehints build fails due to the use of `@typechecked()` decorator\r\n\r\n```python\r\nfrom typeguard import typechecked\r\n\r\nclass ConcatOperator(Operator):\r\n    @strict_type\r\n    def __init__(self, ...):\r\n        super().__init__(name=name)\r\n        pass\r\n\r\n    @typechecked()\r\n    def create_operator(self, model_name:str, operator_id:int) -> 'ConcatOperator':\r\n        self.model_name = model_name\r\n        self.operator_id = operator_id\r\n        self.validate()\r\n        return self\r\n\r\n    def validate(self):\r\n        pass\r\n```\r\n\r\n[Stacktrace](http://pastebin.com/XiaNM4zs)\r\n\r\n@agronholm Typeguard is a simple yet effective library. But the above issue still persists with the use of your lib for type checking", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/8", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/8/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/8/events", "html_url": "https://github.com/agronholm/typeguard/issues/8", "id": 198665790, "node_id": "MDU6SXNzdWUxOTg2NjU3OTA=", "number": 8, "title": "Occasional error in weakref", "user": {"login": "youknowone", "id": 69878, "node_id": "MDQ6VXNlcjY5ODc4", "avatar_url": "https://avatars1.githubusercontent.com/u/69878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/youknowone", "html_url": "https://github.com/youknowone", "followers_url": "https://api.github.com/users/youknowone/followers", "following_url": "https://api.github.com/users/youknowone/following{/other_user}", "gists_url": "https://api.github.com/users/youknowone/gists{/gist_id}", "starred_url": "https://api.github.com/users/youknowone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/youknowone/subscriptions", "organizations_url": "https://api.github.com/users/youknowone/orgs", "repos_url": "https://api.github.com/users/youknowone/repos", "events_url": "https://api.github.com/users/youknowone/events{/privacy}", "received_events_url": "https://api.github.com/users/youknowone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-04T09:40:14Z", "updated_at": "2017-04-21T20:28:38Z", "closed_at": "2017-03-12T19:44:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I\r\n```\r\nException ignored in: <function _removeHandlerRef at 0x10b2e8620>\r\nTraceback (most recent call last):\r\n  File \"/Users/username/.pyenv/versions/3.6.0/lib/python3.6/logging/__init__.py\", line 728, in _removeHandlerRef\r\n  File \"/Users/username/venv/lib/python3.6/site-packages/typeguard.py\", line 589, in __call__\r\n  File \"/Users/username/venv/lib/python3.6/site-packages/typeguard.py\", line 81, in find_function\r\n  File \"/Users/username/venv/lib/python3.6/weakref.py\", line 400, in get\r\nTypeError: 'NoneType' object is not callable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/7", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/7/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/7/events", "html_url": "https://github.com/agronholm/typeguard/issues/7", "id": 193213629, "node_id": "MDU6SXNzdWUxOTMyMTM2Mjk=", "number": 7, "title": "Support for NamedTuple", "user": {"login": "ruxi", "id": 6733446, "node_id": "MDQ6VXNlcjY3MzM0NDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/6733446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruxi", "html_url": "https://github.com/ruxi", "followers_url": "https://api.github.com/users/ruxi/followers", "following_url": "https://api.github.com/users/ruxi/following{/other_user}", "gists_url": "https://api.github.com/users/ruxi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruxi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruxi/subscriptions", "organizations_url": "https://api.github.com/users/ruxi/orgs", "repos_url": "https://api.github.com/users/ruxi/repos", "events_url": "https://api.github.com/users/ruxi/events{/privacy}", "received_events_url": "https://api.github.com/users/ruxi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-02T20:44:50Z", "updated_at": "2016-12-10T10:07:50Z", "closed_at": "2016-12-10T10:07:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I was just wondering if NamedTuples are supported? Or if there is plans to support NamedTuples in the future. I would like to do this:\r\n\r\n    Employee = typing.NamedTuple(\"Employee\", [(\"name\", str), (\"id\", int)] )\r\n\r\n    @typeguard.typechecked\r\n    def foo(bar:Employee):\r\n        pass  \r\n\r\n    foo(Employee('bob', 1))\r\n\r\nCurrently, running the above example results in an AttributeError\r\n\r\nHere is the output:\r\n    https://gist.github.com/ruxi/17d934768aa9404ca99fac2cb1d2a1e2\r\n    ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/6", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/6/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/6/events", "html_url": "https://github.com/agronholm/typeguard/issues/6", "id": 185832062, "node_id": "MDU6SXNzdWUxODU4MzIwNjI=", "number": 6, "title": "Have you tested with the new typing.py yet?", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-28T03:42:25Z", "updated_at": "2016-12-10T10:07:50Z", "closed_at": "2016-12-10T10:07:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "While Python 3.6 is in beta we're changing the way typing.py represents types. I can't make any promises that it'll stay stable until the 4th beta (after all PEP 484 is still provisional) but I figured I should give you a heads up that we're changing things around. You can follow the fun in our repo: https://github.com/python/typing/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/5", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/5/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/5/events", "html_url": "https://github.com/agronholm/typeguard/issues/5", "id": 176558293, "node_id": "MDU6SXNzdWUxNzY1NTgyOTM=", "number": 5, "title": "Check for \"None\" return type", "user": {"login": "wizzardx", "id": 1143852, "node_id": "MDQ6VXNlcjExNDM4NTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1143852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wizzardx", "html_url": "https://github.com/wizzardx", "followers_url": "https://api.github.com/users/wizzardx/followers", "following_url": "https://api.github.com/users/wizzardx/following{/other_user}", "gists_url": "https://api.github.com/users/wizzardx/gists{/gist_id}", "starred_url": "https://api.github.com/users/wizzardx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wizzardx/subscriptions", "organizations_url": "https://api.github.com/users/wizzardx/orgs", "repos_url": "https://api.github.com/users/wizzardx/repos", "events_url": "https://api.github.com/users/wizzardx/events{/privacy}", "received_events_url": "https://api.github.com/users/wizzardx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-13T06:14:28Z", "updated_at": "2016-09-14T16:57:53Z", "closed_at": "2016-09-13T20:04:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "This code passes runtime checks, but should fail:\n\n``` python\n#!/usr/bin/env python3\n\nfrom typeguard import typechecked\n\n\n@typechecked\ndef main() -> None:\n    return 'asdf'\n\n\nif __name__ == '__main__':\n    main()\n```\n\nMain is defined as having no return type according to PEP 484:\n\nhttps://www.python.org/dev/peps/pep-0484/#using-none\n\nRuntime type checking does work if you define main like this:\n\n``` python\n@typechecked\ndef main() -> type(None):\n    return 'asdf'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/3", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/3/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/3/events", "html_url": "https://github.com/agronholm/typeguard/issues/3", "id": 173538723, "node_id": "MDU6SXNzdWUxNzM1Mzg3MjM=", "number": 3, "title": "Suggestion: check_return_type()", "user": {"login": "mikenerone", "id": 795059, "node_id": "MDQ6VXNlcjc5NTA1OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/795059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikenerone", "html_url": "https://github.com/mikenerone", "followers_url": "https://api.github.com/users/mikenerone/followers", "following_url": "https://api.github.com/users/mikenerone/following{/other_user}", "gists_url": "https://api.github.com/users/mikenerone/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikenerone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikenerone/subscriptions", "organizations_url": "https://api.github.com/users/mikenerone/orgs", "repos_url": "https://api.github.com/users/mikenerone/repos", "events_url": "https://api.github.com/users/mikenerone/events{/privacy}", "received_events_url": "https://api.github.com/users/mikenerone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323136, "node_id": "MDU6TGFiZWwzMDQzMjMxMzY=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-08-26T20:37:29Z", "updated_at": "2019-08-26T20:26:25Z", "closed_at": "2019-08-26T20:26:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "For cases where a developer wishes to avoid the extra frame of the `@typechecked` decorator but would still like to check the return value, `typeguard` could provide a `check_return_type()` function to call directly before `return`ing, similar to `check_argument_types()`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/2", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/2/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/2/events", "html_url": "https://github.com/agronholm/typeguard/issues/2", "id": 162638221, "node_id": "MDU6SXNzdWUxNjI2MzgyMjE=", "number": 2, "title": "check_callable import raises on python 3.5.1+", "user": {"login": "ether42", "id": 3048933, "node_id": "MDQ6VXNlcjMwNDg5MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3048933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ether42", "html_url": "https://github.com/ether42", "followers_url": "https://api.github.com/users/ether42/followers", "following_url": "https://api.github.com/users/ether42/following{/other_user}", "gists_url": "https://api.github.com/users/ether42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ether42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ether42/subscriptions", "organizations_url": "https://api.github.com/users/ether42/orgs", "repos_url": "https://api.github.com/users/ether42/repos", "events_url": "https://api.github.com/users/ether42/events{/privacy}", "received_events_url": "https://api.github.com/users/ether42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323134, "node_id": "MDU6TGFiZWwzMDQzMjMxMzQ=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-06-28T09:12:00Z", "updated_at": "2016-06-28T21:17:31Z", "closed_at": "2016-06-28T21:16:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm new to the type annotation system introduced in Python 3 and I tried to start a simple project (using asphalt, which in turns uses typeguard) on Debian stretch and it will traceback when importing from typeguard.\nI also tried to compile the provided Python 3.5 & 3.6 tarballs from here: https://www.python.org/downloads/source/\n\n``` shell\npython3.5 --version\nPython 3.5.1+\n```\n\nThe asphalt project is doing a simple\n\n``` python\nfrom asphalt.core.main import *\n```\n\nWhich will do\n\n``` python\nfrom typeguard import check_argument_types\n```\n\nWhich will provoke the following traceback:\n\n```\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \".../tmpvenv/lib/python3.5/site-packages/typeguard.py\", line 37, in <module>\n    def check_callable(argname: str, value, expected_type, typevars_memo: Dict[TypeVar, type]) -> None:\n  File \"/usr/lib/python3.5/typing.py\", line 1018, in __getitem__\n    tvars = _type_vars(params)\n  File \"/usr/lib/python3.5/typing.py\", line 282, in _type_vars\n    _get_type_vars(types, tvars)\n  File \"/usr/lib/python3.5/typing.py\", line 277, in _get_type_vars\n    t._get_type_vars(tvars)\nTypeError: _get_type_vars() missing 1 required positional argument: 'tvars'\n```\n\nHowever, it works as expected with a Python 3 on Ubuntu that I got from the ppa https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes (it seems there wasn't any `_get_type_vars` function in this version):\n\n``` shell\npython3.5 --version\nPython 3.5.1\n```\n\nDo you known if this is the expected behavior?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/agronholm/typeguard/issues/1", "repository_url": "https://api.github.com/repos/agronholm/typeguard", "labels_url": "https://api.github.com/repos/agronholm/typeguard/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/agronholm/typeguard/issues/1/comments", "events_url": "https://api.github.com/repos/agronholm/typeguard/issues/1/events", "html_url": "https://github.com/agronholm/typeguard/issues/1", "id": 127158061, "node_id": "MDU6SXNzdWUxMjcxNTgwNjE=", "number": 1, "title": "Check all called functions at runtime", "user": {"login": "The-Compiler", "id": 625793, "node_id": "MDQ6VXNlcjYyNTc5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/625793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/The-Compiler", "html_url": "https://github.com/The-Compiler", "followers_url": "https://api.github.com/users/The-Compiler/followers", "following_url": "https://api.github.com/users/The-Compiler/following{/other_user}", "gists_url": "https://api.github.com/users/The-Compiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/The-Compiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/The-Compiler/subscriptions", "organizations_url": "https://api.github.com/users/The-Compiler/orgs", "repos_url": "https://api.github.com/users/The-Compiler/repos", "events_url": "https://api.github.com/users/The-Compiler/events{/privacy}", "received_events_url": "https://api.github.com/users/The-Compiler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 304323136, "node_id": "MDU6TGFiZWwzMDQzMjMxMzY=", "url": "https://api.github.com/repos/agronholm/typeguard/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-01-18T05:47:15Z", "updated_at": "2016-12-18T09:22:34Z", "closed_at": "2016-12-10T16:13:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "When adding type hints to some bigger project with good test coverage, it'd be nice to be able to typecheck _anything_ which is called and annotated rather than doing so selectively.\n\nThis would be possible using an import hook or `sys.settrace` possibly.\n\nI'm aware this is rather \"weird\" and breaks e.g. debuggers, but I imagine it as a separate \"mode\" you run your tests under selectively, similar to how people e.g. run tests without coverage locally (for speed), and with coverage on a CI.\n\nI might work on this myself once I start using type annotations in my project, but it might take me a few months since there's more important stuff to do first :wink:\n", "performed_via_github_app": null, "score": 1.0}]}