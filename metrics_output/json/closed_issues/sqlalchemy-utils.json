{"total_count": 136, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/466", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/466/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/466/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/466", "id": 667903084, "node_id": "MDU6SXNzdWU2Njc5MDMwODQ=", "number": 466, "title": "Read the Docs is out of date", "user": {"login": "altendky", "id": 543719, "node_id": "MDQ6VXNlcjU0MzcxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/543719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altendky", "html_url": "https://github.com/altendky", "followers_url": "https://api.github.com/users/altendky/followers", "following_url": "https://api.github.com/users/altendky/following{/other_user}", "gists_url": "https://api.github.com/users/altendky/gists{/gist_id}", "starred_url": "https://api.github.com/users/altendky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altendky/subscriptions", "organizations_url": "https://api.github.com/users/altendky/orgs", "repos_url": "https://api.github.com/users/altendky/repos", "events_url": "https://api.github.com/users/altendky/events{/privacy}", "received_events_url": "https://api.github.com/users/altendky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-29T14:45:43Z", "updated_at": "2020-08-03T07:15:16Z", "closed_at": "2020-08-03T07:15:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Last Read the Docs build was 1 year and 7 months ago:\r\nhttps://readthedocs.org/projects/sqlalchemy-utils/builds/\r\n\r\nThere have been 15 releases since then:\r\nhttps://pypi.org/project/SQLAlchemy-Utils/#history\r\n\r\nThis was specifically run into when someone try the first example in the `analyze()` docs and we had to dig into the source to figure out it had been removed entirely.\r\n\r\nhttps://sqlalchemy-utils.readthedocs.io/en/latest/database_helpers.html#analyze\r\n\r\nI would generally expect RTD to build every main branch commit and publish that under latest as well as the most recent release being available under stable and older versions available as their version number.  If help would be useful in addressing this, let me know.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/455", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/455/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/455/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/455", "id": 644150829, "node_id": "MDU6SXNzdWU2NDQxNTA4Mjk=", "number": 455, "title": "Observers do not work correctly with lazy='dynamic' relationships", "user": {"login": "kkinder", "id": 1115018, "node_id": "MDQ6VXNlcjExMTUwMTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1115018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kkinder", "html_url": "https://github.com/kkinder", "followers_url": "https://api.github.com/users/kkinder/followers", "following_url": "https://api.github.com/users/kkinder/following{/other_user}", "gists_url": "https://api.github.com/users/kkinder/gists{/gist_id}", "starred_url": "https://api.github.com/users/kkinder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kkinder/subscriptions", "organizations_url": "https://api.github.com/users/kkinder/orgs", "repos_url": "https://api.github.com/users/kkinder/repos", "events_url": "https://api.github.com/users/kkinder/events{/privacy}", "received_events_url": "https://api.github.com/users/kkinder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-23T21:14:07Z", "updated_at": "2020-07-02T07:09:19Z", "closed_at": "2020-07-02T07:09:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider this relatively simple example of using observers with a dynamic loader relationship:\r\n\r\n```python\r\nimport sqlalchemy as sa\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker, dynamic_loader\r\nfrom sqlalchemy_utils import observes\r\n\r\nengine = create_engine('sqlite:///:memory:', echo=True)\r\n\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\nBase = declarative_base()\r\n\r\n\r\nclass Director(Base):\r\n    __tablename__ = 'director'\r\n    id = sa.Column(sa.Integer, primary_key=True)\r\n    name = sa.Column(sa.String)\r\n    movies = dynamic_loader('Movie', back_populates='director')\r\n\r\n\r\nclass Movie(Base):\r\n    __tablename__ = 'movie'\r\n    id = sa.Column(sa.Integer, primary_key=True)\r\n    name = sa.Column(sa.String)\r\n    director_id = sa.Column(sa.Integer, sa.ForeignKey(Director.id))\r\n    director = sa.orm.relationship(Director, back_populates='movies')\r\n\r\n    @observes('director')\r\n    def director_observer(self, director):\r\n        print('Observing', director)\r\n\r\n\r\nBase.metadata.create_all(engine)\r\n\r\nsteven = Director(name='Steven Spielberg')\r\nsession.add(steven)\r\njaws = Movie(name='Jaws')\r\nsession.add(jaws)\r\nsession.commit()\r\n```\r\n\r\nIf you run this script as it's written, you'll get this exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 40, in <module>\r\n    session.commit()\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 1042, in commit\r\n    self.transaction.commit()\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 504, in commit\r\n    self._prepare_impl()\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 483, in _prepare_impl\r\n    self.session.flush()\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 2523, in flush\r\n    self._flush(objects)\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 2552, in _flush\r\n    self.dispatch.before_flush(self, flush_context, objects)\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy/event/attr.py\", line 261, in __call__\r\n    fn(*args, **kw)\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy_utils/observer.py\", line 309, in invoke_callbacks\r\n    for (root_obj, func, objects) in args:\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy_utils/observer.py\", line 276, in gather_callback_args\r\n    for root_obj in root_objs:\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy/orm/dynamic.py\", line 304, in __iter__\r\n    sess = self.session\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy/orm/dynamic.py\", line 295, in session\r\n    sess.flush()\r\n  File \"/home/kkinder/.local/share/virtualenvs/lazy-dynamic-example-0Uqoh3Di/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 2517, in flush\r\n    raise sa_exc.InvalidRequestError(\"Session is already flushing\")\r\nsqlalchemy.exc.InvalidRequestError: Session is already flushing\r\n```\r\n\r\nI did find someone who [raised this on Stack Overflow](https://stackoverflow.com/questions/31062150/session-is-already-flushing-when-i-use-observes), and an answer mentions not using lazy='dynamic', but seeing as how that's a normal usage of SQLAlchemy, I'm inclined to think this is perhaps a bug.\r\n\r\nThoughts?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/449", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/449/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/449/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/449", "id": 620473263, "node_id": "MDU6SXNzdWU2MjA0NzMyNjM=", "number": 449, "title": "unable to update rows in MySql", "user": {"login": "NexPlex", "id": 34607168, "node_id": "MDQ6VXNlcjM0NjA3MTY4", "avatar_url": "https://avatars0.githubusercontent.com/u/34607168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NexPlex", "html_url": "https://github.com/NexPlex", "followers_url": "https://api.github.com/users/NexPlex/followers", "following_url": "https://api.github.com/users/NexPlex/following{/other_user}", "gists_url": "https://api.github.com/users/NexPlex/gists{/gist_id}", "starred_url": "https://api.github.com/users/NexPlex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NexPlex/subscriptions", "organizations_url": "https://api.github.com/users/NexPlex/orgs", "repos_url": "https://api.github.com/users/NexPlex/repos", "events_url": "https://api.github.com/users/NexPlex/events{/privacy}", "received_events_url": "https://api.github.com/users/NexPlex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-18T20:07:56Z", "updated_at": "2020-05-18T20:29:12Z", "closed_at": "2020-05-18T20:27:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I'm not able to update rows in tables with EncryptedType\r\n\r\nhere is how I create a record\r\n``` python\r\nclass Base(db.Model):\r\n    \"\"\"Base class for all the tables.\r\n\r\n    Consists of two default columns `created_at` and `modified_at` .\r\n    \"\"\"\r\n    __abstract__ = True\r\n    id = db.Column(db.Integer, nullable=False, primary_key=True)\r\n    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())\r\n    modified_at = db.Column(db.DateTime,\r\n                            default=db.func.current_timestamp(),\r\n                            onupdate=db.func.current_timestamp())\r\n    active = db.Column(db.Boolean(), default=True)\r\n    def toDict(self):\r\n        return {c.key: getattrOnType(self, c) for c in inspect(self).mapper.column_attrs}\r\n\r\nclass AppCredentials(Base):\r\n    __tablename__ = \"appCredentials\"\r\n\r\n    client_id = Column(EncryptedType(String,\r\n                                    secret_key,\r\n                                    AesEngine,\r\n                                    'pkcs5'))\r\n    client_secret = Column(EncryptedType(String,\r\n                                        secret_key,\r\n                                        AesEngine,\r\n                                        'pkcs5'))\r\n    friendly_name = Column(EncryptedType(String,\r\n                                       secret_key,\r\n                                       AesEngine,\r\n                                       'pkcs5'))\r\n\r\n    name = Column(EncryptedType(String,\r\n                                       secret_key,\r\n                                       AesEngine,\r\n                                       'pkcs5'))\r\n    owner = Column(EncryptedType(String,\r\n                                 secret_key,\r\n                                 AesEngine,\r\n                                 'pkcs5'))\r\n\r\n    mode = Column(EncryptedType(String,\r\n                                 secret_key,\r\n                                 AesEngine,\r\n                                 'pkcs5'))\r\n\r\n    region = Column(EncryptedType(String,\r\n                                 secret_key,\r\n                                 AesEngine,\r\n                                 'pkcs5'))\r\n\r\n\r\n    newAppCredentials1 = AppCredentials(name = 'TWILIO_ACCOUNT',\r\n                                    client_id = current_app.config['TWILIO_ACCOUNT_SID'],\r\n                                    client_secret = current_app.config['TWILIO_AUTH_TOKEN'],\r\n                                    owner = 'TWILiO',\r\n                                    mode = 'prod')\r\n db.session.add_all([newAppCredentials1])\r\n    db.session.commit()\r\n```\r\nRecord is good. Now for the update:\r\n\r\n```python\r\n    credentials = db.session.query(AppCredentials).filter(\r\n        AppCredentials.name == 'PAYPAL_ACCOUNT').filter(\r\n        AppCredentials.owner == 'PAYPAL').filter(\r\n        AppCredentials.mode == 'live').first()\r\n\r\n    credentials.client_id = 'some test data'\r\n    db.session.commit()\r\n\r\n`````\r\n\r\nNo Errors. The data does not change. here is the SQL log.\r\n\r\n\r\nLOG\r\nINFO:sqlalchemy.engine.base.Engine:{'param_1': 13}\r\n2020-05-18 13:02:03 [INFO    ] [sqlalchemy.engine.base.Engine._e:1208] {'param_1': 13}\r\nINFO:sqlalchemy.engine.base.Engine:SELECT `appCredentials`.id AS `appCredentials_id`, `appCredentials`.created_at AS `appCredentials_created_at`, `appCredentials`.modified_at AS `appCredentials_modified_at`, `appCredentials`.active AS `appCredentials_active`, `appCredentials`.client_id AS `appCredentials_client_id`, `appCredentials`.client_secret AS `appCredentials_client_secret`, `appCredentials`.friendly_name AS `appCredentials_friendly_name`, `appCredentials`.name AS `appCredentials_name`, `appCredentials`.owner AS `appCredentials_owner`, `appCredentials`.mode AS `appCredentials_mode`, `appCredentials`.region AS `appCredentials_region` \r\nFROM `appCredentials` \r\nWHERE `appCredentials`.name = %(name_1)s AND `appCredentials`.owner = %(owner_1)s AND `appCredentials`.mode = %(mode_1)s \r\n LIMIT %(param_1)s\r\n2020-05-18 13:02:03,828 INFO sqlalchemy.engine.base.Engine SELECT `appCredentials`.id AS `appCredentials_id`, `appCredentials`.created_at AS `appCredentials_created_at`, `appCredentials`.modified_at AS `appCredentials_modified_at`, `appCredentials`.active AS `appCredentials_active`, `appCredentials`.client_id AS `appCredentials_client_id`, `appCredentials`.client_secret AS `appCredentials_client_secret`, `appCredentials`.friendly_name AS `appCredentials_friendly_name`, `appCredentials`.name AS `appCredentials_name`, `appCredentials`.owner AS `appCredentials_owner`, `appCredentials`.mode AS `appCredentials_mode`, `appCredentials`.region AS `appCredentials_region` \r\nFROM `appCredentials` \r\nWHERE `appCredentials`.name = %(name_1)s AND `appCredentials`.owner = %(owner_1)s AND `appCredentials`.mode = %(mode_1)s \r\n2020-05-18 13:02:03 [INFO    ] [sqlalchemy.engine.base.Engine._e:1203] SELECT `appCredentials`.id AS `appCredentials_id`, `appCredentials`.created_at AS `appCredentials_created_at`, `appCredentials`.modified_at AS `appCredentials_modified_at`, `appCredentials`.active AS `appCredentials_active`, `appCredentials`.client_id AS `appCredentials_client_id`, `appCredentials`.client_secret AS `appCredentials_client_secret`, `appCredentials`.friendly_name AS `appCredentials_friendly_name`, `appCredentials`.name AS `appCredentials_name`, `appCredentials`.owner AS `appCredentials_owner`, `appCredentials`.mode AS `appCredentials_mode`, `appCredentials`.region AS `appCredentials_region` \r\n LIMIT %(param_1)s\r\n2020-05-18 13:02:03,829 INFO sqlalchemy.engine.base.Engine {'name_1': 'WNkw/RGLnhKDBq+U1LQK/Q==', 'owner_1': 'xN/Ctj+KHSrRycjSCxjIoQ==', 'mode_1': '3GatSkkXuXAVLgBw6tym3Q==', 'param_1': 1}\r\nFROM `appCredentials` \r\nWHERE `appCredentials`.name = %(name_1)s AND `appCredentials`.owner = %(owner_1)s AND `appCredentials`.mode = %(mode_1)s \r\n LIMIT %(param_1)s\r\nINFO:sqlalchemy.engine.base.Engine:{'name_1': 'WNkw/RGLnhKDBq+U1LQK/Q==', 'owner_1': 'xN/Ctj+KHSrRycjSCxjIoQ==', 'mode_1': '3GatSkkXuXAVLgBw6tym3Q==', 'param_1': 1}\r\n2020-05-18 13:02:03 [INFO    ] [sqlalchemy.engine.base.Engine._e:1208] {'name_1': 'WNkw/RGLnhKDBq+U1LQK/Q==', 'owner_1': 'xN/Ctj+KHSrRycjSCxjIoQ==', 'mode_1': '3GatSkkXuXAVLgBw6tym3Q==', 'param_1': 1}\r\nINFO:sqlalchemy.engine.base.Engine:\r\n\r\n**UPDATE** `appCredentials` SET modified_at=CURRENT_TIMESTAMP, client_id=%(client_id)s WHERE `appCredentials`.id = %(appCredentials_id)s\r\n2020-05-18 13:02:08,348 INFO sqlalchemy.engine.base.Engine UPDATE `appCredentials` SET modified_at=CURRENT_TIMESTAMP, client_id=%(client_id)s WHERE `appCredentials`.id = %(appCredentials_id)s\r\n2020-05-18 13:02:08,350 INFO sqlalchemy.engine.base.Engine {'client_id': 'v7emN6vrN9MJf0YqaCsk+g==', 'appCredentials_id': 7}\r\n2020-05-18 13:02:08 [INFO    ] \r\n\r\n[sqlalchemy.engine.base.Engine._e:1203] \r\n**UPDATE** `appCredentials` SET modified_at=CURRENT_TIMESTAMP, client_id=%(client_id)s WHERE `appCredentials`.id = %(appCredentials_id)s\r\nINFO:sqlalchemy.engine.base.Engine:{'client_id': 'v7emN6vrN9MJf0YqaCsk+g==', 'appCredentials_id': 7}\r\n\r\n2020-05-18 13:02:08 [INFO    ] [sqlalchemy.engine.base.Engine._e:1208] {'client_id': 'v7emN6vrN9MJf0YqaCsk+g==', 'appCredentials_id': 7}\r\nINFO:sqlalchemy.engine.base.Engine:\r\n\r\nCOMMIT\r\n2020-05-18 13:02:08,394 INFO sqlalchemy.engine.base.Engine COMMIT\r\n2020-05-18 13:02:08 [INFO    ] [sqlalchemy.engine.base.Engine._c:753] COMMIT", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/448", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/448/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/448/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/448", "id": 619776499, "node_id": "MDU6SXNzdWU2MTk3NzY0OTk=", "number": 448, "title": "add psycopg2cffi compatibility", "user": {"login": "DominicBurkart", "id": 1351120, "node_id": "MDQ6VXNlcjEzNTExMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1351120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DominicBurkart", "html_url": "https://github.com/DominicBurkart", "followers_url": "https://api.github.com/users/DominicBurkart/followers", "following_url": "https://api.github.com/users/DominicBurkart/following{/other_user}", "gists_url": "https://api.github.com/users/DominicBurkart/gists{/gist_id}", "starred_url": "https://api.github.com/users/DominicBurkart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DominicBurkart/subscriptions", "organizations_url": "https://api.github.com/users/DominicBurkart/orgs", "repos_url": "https://api.github.com/users/DominicBurkart/repos", "events_url": "https://api.github.com/users/DominicBurkart/events{/privacy}", "received_events_url": "https://api.github.com/users/DominicBurkart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-17T19:12:23Z", "updated_at": "2020-05-28T07:33:06Z", "closed_at": "2020-05-28T07:33:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "issue type: feature request\r\nsize: see [pr](https://github.com/kvesteri/sqlalchemy-utils/pull/447)\r\n\r\n\ud83d\udc4b hello,\r\n\r\nI wanted to use psycopg2cffi for add pypy support for a [project](https://github.com/DominicBurkart/wikipedia-revisions) that uses this library. The functions needed are `create_database` and `drop_database`. It seems like supporting psycopg2cffi [may not be prio](https://github.com/kvesteri/sqlalchemy-utils/issues/350), but I wasn't sure. In case it is, I wrote support for psycopg2cffi here: https://github.com/kvesteri/sqlalchemy-utils/pull/446\r\n\r\nEither way, thank you for making and maintaining this library; the ergonomics are great, and the test was super easy to add!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/436", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/436/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/436/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/436", "id": 600653269, "node_id": "MDU6SXNzdWU2MDA2NTMyNjk=", "number": 436, "title": "Support dictionary input in CompositeType", "user": {"login": "cozos", "id": 2646862, "node_id": "MDQ6VXNlcjI2NDY4NjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2646862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cozos", "html_url": "https://github.com/cozos", "followers_url": "https://api.github.com/users/cozos/followers", "following_url": "https://api.github.com/users/cozos/following{/other_user}", "gists_url": "https://api.github.com/users/cozos/gists{/gist_id}", "starred_url": "https://api.github.com/users/cozos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cozos/subscriptions", "organizations_url": "https://api.github.com/users/cozos/orgs", "repos_url": "https://api.github.com/users/cozos/repos", "events_url": "https://api.github.com/users/cozos/events{/privacy}", "received_events_url": "https://api.github.com/users/cozos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-15T23:48:06Z", "updated_at": "2020-05-04T05:38:24Z", "closed_at": "2020-05-04T05:38:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently when creating a `CompositeType`, you can either pass in a tuple:\r\n\r\n```py\r\naccount1 = Account()\r\naccount1.balance = ('USD', 15)\r\n```\r\n\r\nor instantiate it with `type_cls`:\r\n\r\n```py\r\naccount2 = Account()\r\naccount2.balance = MoneyType.type_cls('USD', 15)\r\n```\r\n\r\nI would like to be able to pass in a dictionary for better integration with [Marshmallow](https://marshmallow-sqlalchemy.readthedocs.io/en/latest/index.html)\r\n\r\nSo hopefully this should be possible now:\r\n\r\n```py\r\naccount1 = Account()\r\naccount1.balance = {'currency': 'USD', 'balance': 15}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/425", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/425/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/425/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/425", "id": 581517011, "node_id": "MDU6SXNzdWU1ODE1MTcwMTE=", "number": 425, "title": "EnryptedType in python3 and postgres fails with 'string argument without an encoding'", "user": {"login": "aicioara", "id": 3248682, "node_id": "MDQ6VXNlcjMyNDg2ODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3248682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aicioara", "html_url": "https://github.com/aicioara", "followers_url": "https://api.github.com/users/aicioara/followers", "following_url": "https://api.github.com/users/aicioara/following{/other_user}", "gists_url": "https://api.github.com/users/aicioara/gists{/gist_id}", "starred_url": "https://api.github.com/users/aicioara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aicioara/subscriptions", "organizations_url": "https://api.github.com/users/aicioara/orgs", "repos_url": "https://api.github.com/users/aicioara/repos", "events_url": "https://api.github.com/users/aicioara/events{/privacy}", "received_events_url": "https://api.github.com/users/aicioara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-15T04:58:35Z", "updated_at": "2020-05-03T17:59:58Z", "closed_at": "2020-05-03T17:59:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When querying a record with a column of EncryptedType in python3.7 with a MySQL backend and packages\r\n\r\n- SQLAlchemy==1.3.15\r\n- SQLAlchemy-Utils==0.36.1\r\n- psycopg2-binary==2.8.4\r\n\r\nThe query fails with TypeError: 'string argument without an encoding'.\r\n\r\nThe issue appears to be that EncryptedType has an impl of LargeBinary which in python3 processes the returned value with the command\r\n\r\nThis issue is a duplicate of https://github.com/kvesteri/sqlalchemy-utils/issues/366. It appears that the original author of #366 closed the issue because they resolved their issue in the short term by using a different driver, but this issue is reproducible in `psycopg2-binary==2.8.4` which is a popular choice for postgres.\r\n\r\nThis is happening because a string gets converted to bytes in python3 without specifying the encoding inside sqlalchemy's `_Bytes` type (base of `LargeBytes`)\r\n\r\nhttps://github.com/sqlalchemy/sqlalchemy/blob/7c6bdc9f0d279be40d6f53b68a3a448b2ccfb73f/lib/sqlalchemy/sql/sqltypes.py#L929\r\n\r\n```python\r\ndef process(value):\r\n    if value is not None:\r\n        value = bytes(value)\r\n    return value\r\n```\r\n\r\nIf we manually fix that issue in sqlalchemy, we run into another problem\r\n\r\n```\r\n  File \"/Users/aicioara/dev/python/motuz/venv/lib/python3.7/site-packages/sqlalchemy_utils/types/encrypted/encrypted_type.py\", line 119, in decrypt\r\n    decrypted = base64.b64decode(value)\r\n  File \"/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/base64.py\", line 87, in b64decode\r\n    return binascii.a2b_base64(s)\r\nbinascii.Error: Invalid base64-encoded string: number of data characters (49) cannot be 1 more than a multiple of 4\r\n```\r\n\r\nIt looks like an encrypted key such as\r\n\r\n```\r\nu4l3U4adiXfWV0vbD5C6kQ==\r\n```\r\n\r\nGets transformed into\r\n\r\n```\r\n<psycopg2.extensions.Binary object at 0x10c9d7a80>\r\n\r\n# where\r\n# .__str__() == \"'u4l3U4adiXfWV0vbD5C6kQ=='::bytea\"\r\n```\r\n\r\nAnd gets saved into the database as\r\n\r\n```\r\n\\x75346c33553461646958665756307662443543366b513d3d\r\n```\r\n\r\nWhich looks like it's some base16 encoding of the ASCII value of `u4l3U4adiXfWV0vbD5C6kQ==`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/419", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/419/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/419/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/419", "id": 568269873, "node_id": "MDU6SXNzdWU1NjgyNjk4NzM=", "number": 419, "title": "views are not registered in the metadata leading to problems with create_all, drop_all", "user": {"login": "volkerjaenisch", "id": 2539336, "node_id": "MDQ6VXNlcjI1MzkzMzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2539336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/volkerjaenisch", "html_url": "https://github.com/volkerjaenisch", "followers_url": "https://api.github.com/users/volkerjaenisch/followers", "following_url": "https://api.github.com/users/volkerjaenisch/following{/other_user}", "gists_url": "https://api.github.com/users/volkerjaenisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/volkerjaenisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/volkerjaenisch/subscriptions", "organizations_url": "https://api.github.com/users/volkerjaenisch/orgs", "repos_url": "https://api.github.com/users/volkerjaenisch/repos", "events_url": "https://api.github.com/users/volkerjaenisch/events{/privacy}", "received_events_url": "https://api.github.com/users/volkerjaenisch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-20T12:35:54Z", "updated_at": "2020-02-20T14:18:05Z", "closed_at": "2020-02-20T14:18:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think there is a problem in view.py (Line 155)\r\n\r\n```\r\n    table = create_table_from_selectable(\r\n        name=name,\r\n        selectable=selectable,\r\n        metadata=None\r\n    )\r\n```\r\n\r\n`metadata=None`\r\nshould be read\r\n`metadata=metadata`\r\n\r\nThis bug prevents the view to be registered in the correct metadata therefore leading to follow up errors, e.g. with create_all, drop_all.\r\n\r\nHow to reproduce:\r\n\r\n```\r\nview2 = create_view('xxx, stmt, Base.metadata)\r\n\r\nclass XXXTable(Base):\r\n    __tablename__ = 'xxx'\r\n    __table__ = view2\r\n\r\nprint( Base.metadata.tables)\r\n```\r\nTable XXX is not included in the metadata.\r\nWhen I change view.py (158) to metadata=metadata the view is registered correctly as a table.\r\n\r\nThis bug may also be the cause for #396\r\n\r\nCheers,\r\nVolker", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/387", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/387/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/387/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/387/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/387", "id": 473497154, "node_id": "MDU6SXNzdWU0NzM0OTcxNTQ=", "number": 387, "title": "Possible to use Timestamp class with automap?", "user": {"login": "flewellyn", "id": 29442917, "node_id": "MDQ6VXNlcjI5NDQyOTE3", "avatar_url": "https://avatars3.githubusercontent.com/u/29442917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flewellyn", "html_url": "https://github.com/flewellyn", "followers_url": "https://api.github.com/users/flewellyn/followers", "following_url": "https://api.github.com/users/flewellyn/following{/other_user}", "gists_url": "https://api.github.com/users/flewellyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/flewellyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flewellyn/subscriptions", "organizations_url": "https://api.github.com/users/flewellyn/orgs", "repos_url": "https://api.github.com/users/flewellyn/repos", "events_url": "https://api.github.com/users/flewellyn/events{/privacy}", "received_events_url": "https://api.github.com/users/flewellyn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-26T19:10:02Z", "updated_at": "2019-09-05T19:47:35Z", "closed_at": "2019-09-05T19:47:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is this a viable idea?  I can't guarantee that a reflected database will have \"created\" and \"updated\" columns in every table in the schema.  Is there a way I could use some sort of metadata in the database (possibly in a control table) to instruct the mixin to bind its behavior to different columns?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/383", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/383/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/383/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/383", "id": 471113703, "node_id": "MDU6SXNzdWU0NzExMTM3MDM=", "number": 383, "title": "Latest sqlalchemy beta removes `_literal_as_text`", "user": {"login": "pazembrz", "id": 41995670, "node_id": "MDQ6VXNlcjQxOTk1Njcw", "avatar_url": "https://avatars0.githubusercontent.com/u/41995670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pazembrz", "html_url": "https://github.com/pazembrz", "followers_url": "https://api.github.com/users/pazembrz/followers", "following_url": "https://api.github.com/users/pazembrz/following{/other_user}", "gists_url": "https://api.github.com/users/pazembrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pazembrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pazembrz/subscriptions", "organizations_url": "https://api.github.com/users/pazembrz/orgs", "repos_url": "https://api.github.com/users/pazembrz/repos", "events_url": "https://api.github.com/users/pazembrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pazembrz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-22T14:02:10Z", "updated_at": "2019-12-08T17:42:59Z", "closed_at": "2019-12-08T17:42:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "sqlalchemy-utils are failing with latest (beta) sqlalchemy:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/src/invenio-db/invenio_db/__init__.py\", line 93, in <module>\r\n    from .ext import InvenioDB\r\n  File \"/home/src/invenio-db/invenio_db/ext.py\", line 18, in <module>\r\n    from sqlalchemy_utils.functions import get_class_by_table\r\n  File \"/home/envs/db/src/sqlalchemy-utils/sqlalchemy_utils/__init__.py\", line 1, in <module>\r\n    from .aggregates import aggregated  # noqa\r\n  File \"/home/envs/db/src/sqlalchemy-utils/sqlalchemy_utils/aggregates.py\", line 372, in <module>\r\n    from .functions.orm import get_column_key\r\n  File \"/home/envs/db/src/sqlalchemy-utils/sqlalchemy_utils/functions/__init__.py\", line 1, in <module>\r\n    from .database import (  # noqa\r\n  File \"/home/envs/db/src/sqlalchemy-utils/sqlalchemy_utils/functions/database.py\", line 13, in <module>\r\n    from ..expressions import explain_analyze\r\n  File \"/home/envs/db/src/sqlalchemy-utils/sqlalchemy_utils/expressions.py\", line 4, in <module>\r\n    from sqlalchemy.sql.expression import (\r\nImportError: cannot import name '_literal_as_text'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/374", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/374/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/374/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/374", "id": 449791809, "node_id": "MDU6SXNzdWU0NDk3OTE4MDk=", "number": 374, "title": "Importing SQLAlchemy-Utils with SQLAlchemy 1.3.4 emits a warning", "user": {"login": "m-aciek", "id": 9288014, "node_id": "MDQ6VXNlcjkyODgwMTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/9288014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-aciek", "html_url": "https://github.com/m-aciek", "followers_url": "https://api.github.com/users/m-aciek/followers", "following_url": "https://api.github.com/users/m-aciek/following{/other_user}", "gists_url": "https://api.github.com/users/m-aciek/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-aciek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-aciek/subscriptions", "organizations_url": "https://api.github.com/users/m-aciek/orgs", "repos_url": "https://api.github.com/users/m-aciek/repos", "events_url": "https://api.github.com/users/m-aciek/events{/privacy}", "received_events_url": "https://api.github.com/users/m-aciek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-29T12:56:07Z", "updated_at": "2019-06-10T12:09:04Z", "closed_at": "2019-06-10T12:09:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n>>> import sqlalchemy\r\n>>> import sqlalchemy_utils\r\n/.../site-packages/sqlalchemy/sql/functions.py:68: SAWarning: The GenericFunction 'array_agg' is already registered and is going to be overriden.\r\n  \"is going to be overriden.\".format(identifier))\r\n```\r\n\r\nIs it possible for SQLAlchemy-Utils to register the function at some other name or register it without the warning?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/366", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/366/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/366/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/366", "id": 421193781, "node_id": "MDU6SXNzdWU0MjExOTM3ODE=", "number": 366, "title": "EnryptedType in python3 and MySQL fails with 'string argument without an encoding'", "user": {"login": "mklassen", "id": 1391926, "node_id": "MDQ6VXNlcjEzOTE5MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1391926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mklassen", "html_url": "https://github.com/mklassen", "followers_url": "https://api.github.com/users/mklassen/followers", "following_url": "https://api.github.com/users/mklassen/following{/other_user}", "gists_url": "https://api.github.com/users/mklassen/gists{/gist_id}", "starred_url": "https://api.github.com/users/mklassen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mklassen/subscriptions", "organizations_url": "https://api.github.com/users/mklassen/orgs", "repos_url": "https://api.github.com/users/mklassen/repos", "events_url": "https://api.github.com/users/mklassen/events{/privacy}", "received_events_url": "https://api.github.com/users/mklassen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-14T19:02:44Z", "updated_at": "2020-03-15T04:07:09Z", "closed_at": "2019-03-14T21:17:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "When querying a record with a column of EncryptedType in python3.7 with a MySQL backend and packages \r\n- SQLAlchemy==1.3.1\r\n- SQLAlchemy-Utils==0.33.11\r\n- mysql-connector-python==8.0.15\r\n\r\nThe query fails with TypeError: 'string argument without an encoding'.\r\n\r\nThe issue appears to be that EncryptedType has an `impl` of LargeBinary which in python3 processes the returned value with the command\r\n```\r\nvalue = bytes(value)\r\n```\r\nHowever the value is an Unicode string and therefore the above call is not valid. The following code reproduces the error\r\n\r\n```python\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy import Column, Unicode, create_engine, Integer\r\nfrom sqlalchemy_utils import EncryptedType\r\nfrom sqlalchemy.orm import sessionmaker\r\nfrom sqlalchemy_utils.types.encrypted.encrypted_type import AesGcmEngine\r\n\r\nBase = declarative_base()\r\nclass MyTable(Base):\r\n    __tablename__ = 'test'\r\n    id = Column('table_id', Integer, primary_key=True)\r\n    field = Column('field', EncryptedType(Unicode(250), 'secret', AesGcmEngine, 'pkcs5'))\r\nengine = create_engine('mysql+mysqlconnector://user:password@localhost/scratch?charset=utf8')\r\nBase.metadata.create_all(engine)\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\nsession.add(MyTable(field='to encrypt'))\r\nsession.commit()\r\nsession.query(MyTable).all()\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/tester.py\", line 28, in <module>\r\n    session.query(MyTable).all()\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/orm/query.py\", line 3161, in all\r\n    return list(self)\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/orm/loading.py\", line 105, in instances\r\n    util.raise_from_cause(err)\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 383, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 129, in reraise\r\n    raise value\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/orm/loading.py\", line 85, in instances\r\n    rows = [proc(row) for row in fetch]\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/orm/loading.py\", line 85, in <listcomp>\r\n    rows = [proc(row) for row in fetch]\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/orm/loading.py\", line 572, in _instance\r\n    populators,\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/orm/loading.py\", line 693, in _populate_full\r\n    dict_[key] = getter(row)\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/sql/type_api.py\", line 1247, in process\r\n    return process_value(impl_processor(value), dialect)\r\n  File \"/tmp/python/lib/python3.7/site-packages/sqlalchemy/sql/sqltypes.py\", line 943, in process\r\n    value = bytes(value)\r\nTypeError: string argument without an encoding\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/360", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/360/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/360/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/360", "id": 404352164, "node_id": "MDU6SXNzdWU0MDQzNTIxNjQ=", "number": 360, "title": "Should Country be orderable?", "user": {"login": "TrilceAC", "id": 11046271, "node_id": "MDQ6VXNlcjExMDQ2Mjcx", "avatar_url": "https://avatars1.githubusercontent.com/u/11046271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TrilceAC", "html_url": "https://github.com/TrilceAC", "followers_url": "https://api.github.com/users/TrilceAC/followers", "following_url": "https://api.github.com/users/TrilceAC/following{/other_user}", "gists_url": "https://api.github.com/users/TrilceAC/gists{/gist_id}", "starred_url": "https://api.github.com/users/TrilceAC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TrilceAC/subscriptions", "organizations_url": "https://api.github.com/users/TrilceAC/orgs", "repos_url": "https://api.github.com/users/TrilceAC/repos", "events_url": "https://api.github.com/users/TrilceAC/events{/privacy}", "received_events_url": "https://api.github.com/users/TrilceAC/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-29T15:41:01Z", "updated_at": "2019-02-05T06:57:24Z", "closed_at": "2019-02-05T06:57:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Suppose that your models must support Persons which might have many Nationalities and you decide to proceed using a `Person` class and another `Nationality` class to represent the nationalities of persons by means of a foreign key column to the person id and a CountryType column to represent the related nacionality:\r\n\r\n```\r\nclass Persona(Model):\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    name = Column(Unicode(35), nullable=False, index=True)\r\n    surname = Column(Unicode(35), nullable=False, index=True)\r\n\r\nclass Nationality(Model):\r\n    person_id = Column(Integer,\r\n                        ForeignKey('person.id',\r\n                                   ondelete='CASCADE'),\r\n                        primary_key=True,\r\n                        index=True)\r\n\r\n    person = relationship(\r\n        'Person',\r\n        backref=backref(\r\n            'nationalities',\r\n            cascade='all, delete-orphan'\r\n        )\r\n    )\r\n\r\n    country = Column(CountryType, primary_key=True, index=True)\r\n\r\n```\r\nNo orphan is desired, therefore `ondelete='CASCADE'` is used on the foreign key, as well as `cascade='all, delete-orphan'` is used on the relationship.\r\n\r\nSuppose that john is added and commited:\r\n\r\n```\r\n>>>john = Person(name='John', surname='Doe', nationalities=[Nationality(country='ES'), Nationality(country='EU')])\r\n>>>db.session.add(john)\r\n>>>db.session.commit()\r\n\r\n```\r\nAt this point, if one tries to delete `john`, the behaviour would depend on whether the object is loaded on the session or not. If the object is not loaded, the deletion will succeed, because the RDBMS is in charge of deleting the related rows and it knows how to do that:\r\n\r\n```\r\n>>>db.session.delete(john)\r\n>>>db.session.commit()\r\n\r\n```\r\nBut if the object is loaded in the session, a `TypeError: unorderable types: Country() < Country()` exception raises:\r\n\r\n```\r\n>>># Remember to recreate john if you deleted it!!!\r\n>>>john\r\n<Person(3, 'John Doe')>\r\n>>># Calling john loads it from the database.\r\n>>> db.session.delete(john)\r\n>>> db.session.commit()\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/scoping.py\", line 153, in do\r\n    return getattr(self.registry(), name)(*args, **kwargs)\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/session.py\", line 943, in commit\r\n    self.transaction.commit()\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/session.py\", line 467, in commit\r\n    self._prepare_impl()\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/session.py\", line 447, in _prepare_impl\r\n    self.session.flush()\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/session.py\", line 2254, in flush\r\n    self._flush(objects)\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/session.py\", line 2381, in _flush\r\n    transaction.rollback(_capture_exception=True)\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/util/langhelpers.py\", line 66, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/util/compat.py\", line 249, in reraise\r\n    raise value\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/session.py\", line 2345, in _flush\r\n    flush_context.execute()\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/unitofwork.py\", line 395, in execute\r\n    rec.execute(self)\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/unitofwork.py\", line 597, in execute\r\n    uow\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/persistence.py\", line 250, in delete_obj\r\n    uowtransaction))\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/persistence.py\", line 364, in _organize_states_for_delete\r\n    states):\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/persistence.py\", line 1258, in _connections_for_states\r\n    for state in _sort_states(states):\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/orm/persistence.py\", line 1280, in _sort_states\r\n    sorted(persistent, key=lambda q: q.key[1])\r\nTypeError: unorderable types: Country() < Country()\r\n\r\n```\r\n\r\nIt seems that SQLAlchemy needs to know how to order Country objects, but Country is not orderable. Should methods like `__lt__` be implemented in `Country`? Which criteria should be used? Maybe alphabetically comparing Country.code?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/352", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/352/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/352/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/352", "id": 386613689, "node_id": "MDU6SXNzdWUzODY2MTM2ODk=", "number": 352, "title": "Question regarding internationalization", "user": {"login": "Dimbreath", "id": 1474840, "node_id": "MDQ6VXNlcjE0NzQ4NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1474840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dimbreath", "html_url": "https://github.com/Dimbreath", "followers_url": "https://api.github.com/users/Dimbreath/followers", "following_url": "https://api.github.com/users/Dimbreath/following{/other_user}", "gists_url": "https://api.github.com/users/Dimbreath/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dimbreath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dimbreath/subscriptions", "organizations_url": "https://api.github.com/users/Dimbreath/orgs", "repos_url": "https://api.github.com/users/Dimbreath/repos", "events_url": "https://api.github.com/users/Dimbreath/events{/privacy}", "received_events_url": "https://api.github.com/users/Dimbreath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-02T23:33:25Z", "updated_at": "2018-12-03T07:38:23Z", "closed_at": "2018-12-03T07:38:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been taking a look at the example provided at: https://sqlalchemy-utils.readthedocs.io/en/latest/internationalization.html\r\n\r\n    session.query(Article).filter(Article.name['en'] == 'Some article')\r\n\r\nI've tried code similar to this to no avail, I get:\r\n  \r\n    NotImplementedError: Operator 'getitem' is not supported on this expression\r\n\r\nHere's my code: https://gist.github.com/Dimbreath/3e3655c412bdc4aff8d8fb7a597977ce\r\n\r\nIt happens on the query line.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/347", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/347/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/347/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/347", "id": 376083471, "node_id": "MDU6SXNzdWUzNzYwODM0NzE=", "number": 347, "title": "Doesn't support shortcodes in PhoneNumberType", "user": {"login": "anandtripathi5", "id": 10723482, "node_id": "MDQ6VXNlcjEwNzIzNDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/10723482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anandtripathi5", "html_url": "https://github.com/anandtripathi5", "followers_url": "https://api.github.com/users/anandtripathi5/followers", "following_url": "https://api.github.com/users/anandtripathi5/following{/other_user}", "gists_url": "https://api.github.com/users/anandtripathi5/gists{/gist_id}", "starred_url": "https://api.github.com/users/anandtripathi5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anandtripathi5/subscriptions", "organizations_url": "https://api.github.com/users/anandtripathi5/orgs", "repos_url": "https://api.github.com/users/anandtripathi5/repos", "events_url": "https://api.github.com/users/anandtripathi5/events{/privacy}", "received_events_url": "https://api.github.com/users/anandtripathi5/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-31T17:41:12Z", "updated_at": "2018-11-19T12:14:40Z", "closed_at": "2018-11-19T12:14:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "PhoneNumberType of column in SQLalchemy models doesn't support short-codes and toll-free.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/343", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/343/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/343/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/343", "id": 359829338, "node_id": "MDU6SXNzdWUzNTk4MjkzMzg=", "number": 343, "title": "Different latest version (0.33.4) shown on PyPi", "user": {"login": "wodow", "id": 1140873, "node_id": "MDQ6VXNlcjExNDA4NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1140873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wodow", "html_url": "https://github.com/wodow", "followers_url": "https://api.github.com/users/wodow/followers", "following_url": "https://api.github.com/users/wodow/following{/other_user}", "gists_url": "https://api.github.com/users/wodow/gists{/gist_id}", "starred_url": "https://api.github.com/users/wodow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wodow/subscriptions", "organizations_url": "https://api.github.com/users/wodow/orgs", "repos_url": "https://api.github.com/users/wodow/repos", "events_url": "https://api.github.com/users/wodow/events{/privacy}", "received_events_url": "https://api.github.com/users/wodow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-13T10:08:12Z", "updated_at": "2018-10-01T08:43:06Z", "closed_at": "2018-10-01T08:43:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://pypi.org/project/SQLAlchemy-Utils/#history shows version 0.33.4 as the latest, whilst the `CHANGES.rst` and `__init__.py` both shows 0.33.3.\r\n\r\nIs 0.33.4 an imposter or have I missed where it came from?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/342", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/342/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/342/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/342", "id": 359595036, "node_id": "MDU6SXNzdWUzNTk1OTUwMzY=", "number": 342, "title": "return self.context.hash(value.secret).encode('utf8') sqlalchemy.exc.StatementError: (exceptions.AttributeError) 'CryptContext' object has no attribute 'hash'", "user": {"login": "StanSilas", "id": 10617538, "node_id": "MDQ6VXNlcjEwNjE3NTM4", "avatar_url": "https://avatars2.githubusercontent.com/u/10617538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StanSilas", "html_url": "https://github.com/StanSilas", "followers_url": "https://api.github.com/users/StanSilas/followers", "following_url": "https://api.github.com/users/StanSilas/following{/other_user}", "gists_url": "https://api.github.com/users/StanSilas/gists{/gist_id}", "starred_url": "https://api.github.com/users/StanSilas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StanSilas/subscriptions", "organizations_url": "https://api.github.com/users/StanSilas/orgs", "repos_url": "https://api.github.com/users/StanSilas/repos", "events_url": "https://api.github.com/users/StanSilas/events{/privacy}", "received_events_url": "https://api.github.com/users/StanSilas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-12T18:14:05Z", "updated_at": "2018-10-13T21:35:02Z", "closed_at": "2018-09-19T17:13:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have \r\n ```\r\npip show SQLAlchemy\r\nName: SQLAlchemy\r\nVersion: 1.1.4\r\n```\r\nand \r\n ``` \r\n pip show passlib\r\nName: passlib\r\nVersion: 1.6.2\r\n```\r\n```\r\n pip show SQLAlchemy-Utils\r\nName: SQLAlchemy-Utils\r\nVersion: 0.33.4\r\n\r\n```\r\n\r\nPlease help me understand what is causing this:\r\n ```\r\n>`**return self.context.hash(value.secret).encode('utf8') sqlalchemy.exc.StatementError: (exceptions.AttributeError) 'CryptContext' object has no attribute 'hash'** `\r\n```\r\nand this is the corresponding line of code related to above bug:\r\n```  def process_bind_param(self, value, dialect):\r\n        if isinstance(value, Password):\r\n            # If were given a password secret; hash it.\r\n            if value.secret is not None:\r\n                return self.context.hash(value.secret).encode('utf8')```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/336", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/336/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/336/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/336", "id": 346678689, "node_id": "MDU6SXNzdWUzNDY2Nzg2ODk=", "number": 336, "title": "Add ArrayOfEnum type", "user": {"login": "izissise", "id": 2104672, "node_id": "MDQ6VXNlcjIxMDQ2NzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2104672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izissise", "html_url": "https://github.com/izissise", "followers_url": "https://api.github.com/users/izissise/followers", "following_url": "https://api.github.com/users/izissise/following{/other_user}", "gists_url": "https://api.github.com/users/izissise/gists{/gist_id}", "starred_url": "https://api.github.com/users/izissise/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izissise/subscriptions", "organizations_url": "https://api.github.com/users/izissise/orgs", "repos_url": "https://api.github.com/users/izissise/repos", "events_url": "https://api.github.com/users/izissise/events{/privacy}", "received_events_url": "https://api.github.com/users/izissise/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-01T16:40:22Z", "updated_at": "2018-10-14T07:00:30Z", "closed_at": "2018-10-14T07:00:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "The sqlalchemy [docs](http://docs.sqlalchemy.org/en/latest/dialects/postgresql.html#using-enum-with-array) propose an implementation of ArrayOfEnum type, it would be great that it be added to sqlalchemy-utils.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/332", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/332/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/332/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/332", "id": 340561399, "node_id": "MDU6SXNzdWUzNDA1NjEzOTk=", "number": 332, "title": "Cannot use Country name property without flask-babel", "user": {"login": "aveuiller", "id": 4600261, "node_id": "MDQ6VXNlcjQ2MDAyNjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4600261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aveuiller", "html_url": "https://github.com/aveuiller", "followers_url": "https://api.github.com/users/aveuiller/followers", "following_url": "https://api.github.com/users/aveuiller/following{/other_user}", "gists_url": "https://api.github.com/users/aveuiller/gists{/gist_id}", "starred_url": "https://api.github.com/users/aveuiller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aveuiller/subscriptions", "organizations_url": "https://api.github.com/users/aveuiller/orgs", "repos_url": "https://api.github.com/users/aveuiller/repos", "events_url": "https://api.github.com/users/aveuiller/events{/privacy}", "received_events_url": "https://api.github.com/users/aveuiller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-12T09:35:25Z", "updated_at": "2018-12-27T11:39:59Z", "closed_at": "2018-12-27T11:39:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, \r\n\r\nI have some issues while using the Country type from your library. Some simple property call will throw errors even though I only miss optional dependencies (or no dependency at all).\r\n\r\n See this sample code:\r\n```\r\n# In a new virtualenv\r\n$ pip install -e .\r\n$ python\r\nPython 2.7 (r27:82500, May 28 2018, 14:40:35)\r\n>>> from sqlalchemy_utils import Country\r\n>>> Country(\"FR\").name\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"sqlalchemy_utils/primitives/country.py\", line 57, in __init__\r\n    self.validate(code_or_country)\r\n  File \"sqlalchemy_utils/primitives/country.py\", line 74, in validate\r\n    i18n.babel.Locale('en').territories[code]\r\nAttributeError: 'NoneType' object has no attribute 'Locale'\r\n\r\n# [...]\r\n\r\n$ pip install -e .[babel]\r\n$ python\r\nPython 2.7 (r27:82500, May 28 2018, 14:40:35)\r\n>>> from sqlalchemy_utils import Country\r\n>>> Country(\"FR\").name\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"sqlalchemy_utils/primitives/country.py\", line 69, in name\r\n    return i18n.get_locale().territories[self.code]\r\n  File \"sqlalchemy_utils/i18n.py\", line 20, in get_locale\r\n    'Could not load get_locale function from Flask-Babel. Either '\r\nsqlalchemy_utils.exceptions.ImproperlyConfigured: Could not load get_locale function from Flask-Babel. Either install Flask-Babel or make a similar function and override it in this module.\r\n```\r\n\r\nIn the first case, since you can't validate your Country without babel, I suggest it could become a required dependency, or deactivate the validation if `babel is None`.\r\n\r\nIn the second case, I do not necessarily want to rely on `flask-babel` to retrieve my locale through a request:\r\nhttps://github.com/kvesteri/sqlalchemy-utils/blob/abf6e65f8a2f7ad98326b5cc2e152b8584230392/sqlalchemy_utils/i18n.py#L15-L23\r\n\r\n So it could be great to add a _working_ fallback behaviour, as you already do in some tests: \r\nhttps://github.com/kvesteri/sqlalchemy-utils/blob/abf6e65f8a2f7ad98326b5cc2e152b8584230392/tests/types/test_currency.py#L9\r\n\r\n\r\nIf you agree with those changes, I can provide you a PR fixing those issues. What do you think about it ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/331", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/331/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/331/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/331", "id": 338251878, "node_id": "MDU6SXNzdWUzMzgyNTE4Nzg=", "number": 331, "title": "Any plan to support graphql?", "user": {"login": "wahello", "id": 3362049, "node_id": "MDQ6VXNlcjMzNjIwNDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3362049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wahello", "html_url": "https://github.com/wahello", "followers_url": "https://api.github.com/users/wahello/followers", "following_url": "https://api.github.com/users/wahello/following{/other_user}", "gists_url": "https://api.github.com/users/wahello/gists{/gist_id}", "starred_url": "https://api.github.com/users/wahello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wahello/subscriptions", "organizations_url": "https://api.github.com/users/wahello/orgs", "repos_url": "https://api.github.com/users/wahello/repos", "events_url": "https://api.github.com/users/wahello/events{/privacy}", "received_events_url": "https://api.github.com/users/wahello/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-04T12:13:13Z", "updated_at": "2018-07-08T07:38:20Z", "closed_at": "2018-07-08T07:38:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Any plan to support graphql?\r\nIs there any plan to support [graphene-sqlalchemy](https://github.com/graphql-python/graphene-sqlalchemy)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/318", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/318/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/318/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/318", "id": 310226130, "node_id": "MDU6SXNzdWUzMTAyMjYxMzA=", "number": 318, "title": "JSON for SQLite ", "user": {"login": "jan-janssen", "id": 3854739, "node_id": "MDQ6VXNlcjM4NTQ3Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3854739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jan-janssen", "html_url": "https://github.com/jan-janssen", "followers_url": "https://api.github.com/users/jan-janssen/followers", "following_url": "https://api.github.com/users/jan-janssen/following{/other_user}", "gists_url": "https://api.github.com/users/jan-janssen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jan-janssen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jan-janssen/subscriptions", "organizations_url": "https://api.github.com/users/jan-janssen/orgs", "repos_url": "https://api.github.com/users/jan-janssen/repos", "events_url": "https://api.github.com/users/jan-janssen/events{/privacy}", "received_events_url": "https://api.github.com/users/jan-janssen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-31T09:11:20Z", "updated_at": "2018-03-31T09:32:08Z", "closed_at": "2018-03-31T09:32:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try to extend the JSONType to support the Postgres syntax of in querying for an item inside the JSON: \r\n\r\n```\r\nimport sqlalchemy.types as types\r\nimport six\r\nfrom sqlalchemy import UnicodeText\r\nfrom sqlalchemy import Column, Integer, Text, create_engine, MetaData\r\nfrom sqlalchemy.ext.declarative import declarative_base  \r\nfrom sqlalchemy.orm import sessionmaker\r\nfrom sqlalchemy import Table, table\r\nfrom sqlalchemy import Column, Integer, Text  \r\nimport json  \r\n\r\n\r\n# https://sqlalchemy-utils.readthedocs.io/en/latest/data_types.html#module-sqlalchemy_utils.types.json\r\nclass JSONType(types.TypeDecorator):\r\n    \"\"\"\r\n    JSONType offers way of saving JSON data structures to database. On\r\n    PostgreSQL the underlying implementation of this data type is 'json' while\r\n    on other databases its simply 'text'.\r\n\r\n    ::\r\n\r\n\r\n        from sqlalchemy_utils import JSONType\r\n\r\n\r\n        class Product(Base):\r\n            __tablename__ = 'product'\r\n            id = sa.Column(sa.Integer, autoincrement=True)\r\n            name = sa.Column(sa.Unicode(50))\r\n            details = sa.Column(JSONType)\r\n\r\n\r\n        product = Product()\r\n        product.details = {\r\n            'color': 'red',\r\n            'type': 'car',\r\n            'max-speed': '400 mph'\r\n        }\r\n        session.commit()\r\n    \"\"\"\r\n    impl = UnicodeText\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        if json is None:\r\n            raise ImproperlyConfigured(\r\n                'JSONType needs anyjson package installed.'\r\n            )\r\n        super(JSONType, self).__init__(*args, **kwargs)\r\n\r\n    def load_dialect_impl(self, dialect):\r\n        if dialect.name == 'postgresql':\r\n            # Use the native JSON type.\r\n            if has_postgres_json:\r\n                return dialect.type_descriptor(JSON())\r\n            else:\r\n                return dialect.type_descriptor(PostgresJSONType())\r\n        else:\r\n            return dialect.type_descriptor(self.impl)\r\n\r\n    def process_bind_param(self, value, dialect):\r\n        if dialect.name == 'postgresql' and has_postgres_json:\r\n            return value\r\n        if value is not None:\r\n            value = six.text_type(json.dumps(value))\r\n        return value\r\n\r\n    def process_result_value(self, value, dialect):\r\n        if dialect.name == 'postgresql':\r\n            return value\r\n        if value is not None:\r\n            value = json.loads(value)\r\n        return value\r\n\r\n\r\nconnection_string = 'sqlite:///sqlite.db'\r\ndb = create_engine(connection_string)  \r\nengine = db.connect()  \r\nmeta = MetaData(engine) \r\nTable(\"jsontable\", meta,  \r\n      Column('id', Integer),\r\n      Column('name', Text),\r\n      Column('email', Text),\r\n      Column('doc', JSONType))\r\nmeta.create_all()  \r\nj_table = table(\r\n        \"jsontable\", Column('id', Integer),\r\n        Column('name', Text),\r\n        Column('email', Text),\r\n        Column('doc', JSONType))\r\nstatement = j_table.insert().values(\r\n        id=3,\r\n        name=\"Mr. Params\",\r\n        email=\"use@params.com\",\r\n        doc={\r\n            \"dialect\": \"params\",\r\n            \"address\": {\"street\": \"Main St.\", \"zip\": 12345},\r\n        },\r\n    )\r\nengine.execute(statement)\r\nfind_user = j_table.select().where(j_table.c.name == \"Mr. Params\")\r\nprint(engine.execute(find_user).fetchone())\r\n\r\nfind_zip = j_table.select().where(\r\n        j_table.c.doc[\r\n            ('address', 'zip') # specify the path as a tuple/list of keys\r\n        ].cast(\r\n            sqlalchemy.Integer # zip codes are stored as numbers, cast the query\r\n        ) == 12345) # finally, the zip we're looking for\r\n\r\nprint(engine.execute(find_zip).fetchone())\r\n\r\n```\r\n\r\n\r\nI get the following error message: \r\n`NotImplementedError: Operator 'getitem' is not supported on this expression`\r\n\r\nSo it seems I have to extend `JSONType.Comparator `like it is done in: https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/sql/sqltypes.py \r\n\r\nBasically what I want to do is loading the full dictionary from SQLite as text then convert it and answer the sqlalchemy query, so any tip or hint would be very much appreciated.\r\n\r\nIt seems like an official patch is on the way:\r\n- https://gerrit.sqlalchemy.org/#/c/zzzeek/sqlalchemy/+/706/\r\n- https://github.com/zzzeek/sqlalchemy/pull/434", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/317", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/317/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/317/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/317/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/317", "id": 310207813, "node_id": "MDU6SXNzdWUzMTAyMDc4MTM=", "number": 317, "title": "how can I  query and filter ScalarListType", "user": {"login": "yogurfrul", "id": 25316372, "node_id": "MDQ6VXNlcjI1MzE2Mzcy", "avatar_url": "https://avatars3.githubusercontent.com/u/25316372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yogurfrul", "html_url": "https://github.com/yogurfrul", "followers_url": "https://api.github.com/users/yogurfrul/followers", "following_url": "https://api.github.com/users/yogurfrul/following{/other_user}", "gists_url": "https://api.github.com/users/yogurfrul/gists{/gist_id}", "starred_url": "https://api.github.com/users/yogurfrul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yogurfrul/subscriptions", "organizations_url": "https://api.github.com/users/yogurfrul/orgs", "repos_url": "https://api.github.com/users/yogurfrul/repos", "events_url": "https://api.github.com/users/yogurfrul/events{/privacy}", "received_events_url": "https://api.github.com/users/yogurfrul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-31T03:13:05Z", "updated_at": "2018-09-20T07:36:53Z", "closed_at": "2018-09-20T07:36:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "`\r\nfrom sqlalchemy_utils import ScalarListType\r\n`\r\n`class Foo():\r\n`\r\n    ` id = db.Column(db.Integer, primary_key=True)`\r\n    ` list = db.Column(ScalarListType(int))\r\n`\r\n\r\n\r\n I can get the  label as an int list , querying the foo by id\r\n`\r\n        foo = Foo.query.filter(Foo.id==1).first()`\r\n       ` foo.list is int list like [0, 0, 1, 0],\r\n`\r\n\r\n\r\nbut how can I  get the id by  querying by list[3]==1\r\nI can't find any clue\uff0chelp me please\uff01", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/306", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/306/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/306/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/306", "id": 293259864, "node_id": "MDU6SXNzdWUyOTMyNTk4NjQ=", "number": 306, "title": "SQLite database_exists does not check for format of file", "user": {"login": "sdementen", "id": 1304950, "node_id": "MDQ6VXNlcjEzMDQ5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1304950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdementen", "html_url": "https://github.com/sdementen", "followers_url": "https://api.github.com/users/sdementen/followers", "following_url": "https://api.github.com/users/sdementen/following{/other_user}", "gists_url": "https://api.github.com/users/sdementen/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdementen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdementen/subscriptions", "organizations_url": "https://api.github.com/users/sdementen/orgs", "repos_url": "https://api.github.com/users/sdementen/repos", "events_url": "https://api.github.com/users/sdementen/events{/privacy}", "received_events_url": "https://api.github.com/users/sdementen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-31T18:14:04Z", "updated_at": "2018-12-04T13:35:23Z", "closed_at": "2018-12-04T13:35:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using database_exists on a SQLite://somefile, if somefile exists, it returns True even if the file is not a SQLite file.\r\nIt could check at the start of the file for the string \"SQLite format 3\" (see 1.2 on http://www.sqlite.org/fileformat.html)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/303", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/303/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/303/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/303", "id": 291028918, "node_id": "MDU6SXNzdWUyOTEwMjg5MTg=", "number": 303, "title": "pg8000 support for create_database", "user": {"login": "alecbz", "id": 92369, "node_id": "MDQ6VXNlcjkyMzY5", "avatar_url": "https://avatars1.githubusercontent.com/u/92369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecbz", "html_url": "https://github.com/alecbz", "followers_url": "https://api.github.com/users/alecbz/followers", "following_url": "https://api.github.com/users/alecbz/following{/other_user}", "gists_url": "https://api.github.com/users/alecbz/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecbz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecbz/subscriptions", "organizations_url": "https://api.github.com/users/alecbz/orgs", "repos_url": "https://api.github.com/users/alecbz/repos", "events_url": "https://api.github.com/users/alecbz/events{/privacy}", "received_events_url": "https://api.github.com/users/alecbz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-23T23:18:04Z", "updated_at": "2019-01-13T14:13:03Z", "closed_at": "2019-01-13T14:13:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "`create_database` has a check for `engine.driver == 'psycopg2'`, which it then uses to enable autocommit for the engine, which (AFAIK) avoids an error about trying to issue CREATE DATABASE from within a transaction. Something similar (see https://github.com/zzzeek/sqlalchemy/pull/88) needs to be done for pg8000 to avoid the same issue.\r\n\r\nhttps://github.com/kvesteri/sqlalchemy-utils/blob/master/sqlalchemy_utils/functions/database.py#L540", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/300", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/300/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/300/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/300", "id": 285154093, "node_id": "MDU6SXNzdWUyODUxNTQwOTM=", "number": 300, "title": "New Data Type for file names", "user": {"login": "CharlyJazz", "id": 12489333, "node_id": "MDQ6VXNlcjEyNDg5MzMz", "avatar_url": "https://avatars0.githubusercontent.com/u/12489333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CharlyJazz", "html_url": "https://github.com/CharlyJazz", "followers_url": "https://api.github.com/users/CharlyJazz/followers", "following_url": "https://api.github.com/users/CharlyJazz/following{/other_user}", "gists_url": "https://api.github.com/users/CharlyJazz/gists{/gist_id}", "starred_url": "https://api.github.com/users/CharlyJazz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CharlyJazz/subscriptions", "organizations_url": "https://api.github.com/users/CharlyJazz/orgs", "repos_url": "https://api.github.com/users/CharlyJazz/repos", "events_url": "https://api.github.com/users/CharlyJazz/events{/privacy}", "received_events_url": "https://api.github.com/users/CharlyJazz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-29T20:55:04Z", "updated_at": "2018-01-01T00:37:50Z", "closed_at": "2018-01-01T00:37:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to add a new Data Type for file names to the library?\r\n\r\n```\r\nformats_allow = [\"txt\", \"py\", \"js\", \"php\", \"json\"]\r\n\r\nclass Snippet(Model, Timestamp):\r\n    __tablename__ = 'snippet'\r\n    id          = Column(db.Integer, primary_key=True)\r\n    filename    = Column(Filename(allow=formats_allow), nullable=False) # filename.py\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/290", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/290/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/290/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/290", "id": 264953118, "node_id": "MDU6SXNzdWUyNjQ5NTMxMTg=", "number": 290, "title": "Not updating existing translated columns when no locale is given / current locale is used", "user": {"login": "GrxE", "id": 26411033, "node_id": "MDQ6VXNlcjI2NDExMDMz", "avatar_url": "https://avatars1.githubusercontent.com/u/26411033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrxE", "html_url": "https://github.com/GrxE", "followers_url": "https://api.github.com/users/GrxE/followers", "following_url": "https://api.github.com/users/GrxE/following{/other_user}", "gists_url": "https://api.github.com/users/GrxE/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrxE/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrxE/subscriptions", "organizations_url": "https://api.github.com/users/GrxE/orgs", "repos_url": "https://api.github.com/users/GrxE/repos", "events_url": "https://api.github.com/users/GrxE/events{/privacy}", "received_events_url": "https://api.github.com/users/GrxE/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-12T14:00:05Z", "updated_at": "2018-02-08T22:30:52Z", "closed_at": "2018-02-08T22:30:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "When updating translated columns with existing entries, the session is not aware of the modified data. When committed, no UPDATE is issued to write the changes to the DB. If the entry/locale has to be created, the data ends up correctly in the DB.\r\nI solved this by adding \r\n`flag_modified(obj, attr.key)`\r\nbefore returning the setter in the `setter_factory` of `TranslationHybrid` in file `i18n.py`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/288", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/288/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/288/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/288", "id": 263740353, "node_id": "MDU6SXNzdWUyNjM3NDAzNTM=", "number": 288, "title": "create_database doesn't close session", "user": {"login": "rmb938", "id": 544545, "node_id": "MDQ6VXNlcjU0NDU0NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/544545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmb938", "html_url": "https://github.com/rmb938", "followers_url": "https://api.github.com/users/rmb938/followers", "following_url": "https://api.github.com/users/rmb938/following{/other_user}", "gists_url": "https://api.github.com/users/rmb938/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmb938/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmb938/subscriptions", "organizations_url": "https://api.github.com/users/rmb938/orgs", "repos_url": "https://api.github.com/users/rmb938/repos", "events_url": "https://api.github.com/users/rmb938/events{/privacy}", "received_events_url": "https://api.github.com/users/rmb938/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-08T18:30:21Z", "updated_at": "2017-11-11T17:05:14Z", "closed_at": "2017-11-11T17:05:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "When creating multiple databases based on the same template pgsql errors with:\r\n\r\n```\r\npostgres_1  | ERROR:  source database \"template1\" is being accessed by other users\r\npostgres_1  | DETAIL:  There is 1 other session using the database.\r\npostgres_1  | STATEMENT:  CREATE DATABASE \"right\" ENCODING 'utf8' TEMPLATE template1\r\n```\r\n\r\nMy python code:\r\n\r\n```\r\ncreate_database(uri_left, template=\"template1\")\r\ncreate_database(uri_right, template=\"template1\")\r\n```\r\n\r\nLooking at the code it looks like the engine is never closed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/278", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/278/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/278/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/278", "id": 242972262, "node_id": "MDU6SXNzdWUyNDI5NzIyNjI=", "number": 278, "title": "sqlalchemy_utils.types.uuid.UUIDType doesn't accept length=16", "user": {"login": "daym", "id": 7755349, "node_id": "MDQ6VXNlcjc3NTUzNDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7755349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daym", "html_url": "https://github.com/daym", "followers_url": "https://api.github.com/users/daym/followers", "following_url": "https://api.github.com/users/daym/following{/other_user}", "gists_url": "https://api.github.com/users/daym/gists{/gist_id}", "starred_url": "https://api.github.com/users/daym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daym/subscriptions", "organizations_url": "https://api.github.com/users/daym/orgs", "repos_url": "https://api.github.com/users/daym/repos", "events_url": "https://api.github.com/users/daym/events{/privacy}", "received_events_url": "https://api.github.com/users/daym/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-14T11:31:58Z", "updated_at": "2017-07-14T13:10:17Z", "closed_at": "2017-07-14T13:09:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Alembic generates `sqlalchemy_utils.types.uuid.UUIDType(length=16)` for UUIDs. What do you think about accepting `length=16` in the `UUIDType` constructor?\r\n\r\nOr would it be better to change alembic not to do that for special types?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/276", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/276/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/276/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/276/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/276", "id": 238221430, "node_id": "MDU6SXNzdWUyMzgyMjE0MzA=", "number": 276, "title": "ChoiceTypes", "user": {"login": "ben-mvi", "id": 29545529, "node_id": "MDQ6VXNlcjI5NTQ1NTI5", "avatar_url": "https://avatars3.githubusercontent.com/u/29545529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben-mvi", "html_url": "https://github.com/ben-mvi", "followers_url": "https://api.github.com/users/ben-mvi/followers", "following_url": "https://api.github.com/users/ben-mvi/following{/other_user}", "gists_url": "https://api.github.com/users/ben-mvi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben-mvi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben-mvi/subscriptions", "organizations_url": "https://api.github.com/users/ben-mvi/orgs", "repos_url": "https://api.github.com/users/ben-mvi/repos", "events_url": "https://api.github.com/users/ben-mvi/events{/privacy}", "received_events_url": "https://api.github.com/users/ben-mvi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-23T18:35:48Z", "updated_at": "2018-10-14T07:01:19Z", "closed_at": "2018-10-14T07:01:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have a choice list like this:\r\n\r\n```\r\nSTATUS_CHOICES = [\r\n    ('new', 'New'),\r\n    ('active', 'Active'),\r\n    ('inactive', 'Inactive'),\r\n    ('banned', 'Banned'),\r\n]\r\n```\r\n\r\nI created the column like this:\r\n\r\n`status = db.Column(sqlalchemy_utils.ChoiceType(STATUS_CHOICES, impl=db.String()))\r\n`\r\n\r\nnow when I call my API it outputs with `\"status\": \"Choice(code=active, value=Active)\"`\r\n\r\nI would rather it output put like this `\"status\":\"Active\"`\r\n\r\nI would appreciate any advice thank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/275", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/275/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/275/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/275", "id": 238132022, "node_id": "MDU6SXNzdWUyMzgxMzIwMjI=", "number": 275, "title": "UnicodeDecodeError in sqlalchemy_utils.types.encrypted", "user": {"login": "xrmx", "id": 12932, "node_id": "MDQ6VXNlcjEyOTMy", "avatar_url": "https://avatars1.githubusercontent.com/u/12932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xrmx", "html_url": "https://github.com/xrmx", "followers_url": "https://api.github.com/users/xrmx/followers", "following_url": "https://api.github.com/users/xrmx/following{/other_user}", "gists_url": "https://api.github.com/users/xrmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/xrmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xrmx/subscriptions", "organizations_url": "https://api.github.com/users/xrmx/orgs", "repos_url": "https://api.github.com/users/xrmx/repos", "events_url": "https://api.github.com/users/xrmx/events{/privacy}", "received_events_url": "https://api.github.com/users/xrmx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-23T12:45:02Z", "updated_at": "2017-09-01T06:57:49Z", "closed_at": "2017-09-01T06:57:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With 0.32.14 and python 3.4 we hit this on superset (https://github.com/airbnb/superset/issues/2600):\r\n```\r\n  File \"/venv/lib/python3.4/site-packages/sqlalchemy_utils/types/encrypted.py\", line 262, in process_result_value\r\n    decrypted_value = self.engine.decrypt(value)\r\n  File \"/venv/lib/python3.4/site-packages/sqlalchemy_utils/types/encrypted.py\", line 90, in decrypt\r\n    decrypted = decrypted.decode('utf-8')\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1 in position 2: invalid continuation byte\r\n```\r\n\r\nAny hint on what could be wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/273", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/273/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/273/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/273", "id": 231760501, "node_id": "MDU6SXNzdWUyMzE3NjA1MDE=", "number": 273, "title": "JSONType for Postgres save as a JSONB instead of JSON", "user": {"login": "Auha", "id": 578086, "node_id": "MDQ6VXNlcjU3ODA4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/578086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Auha", "html_url": "https://github.com/Auha", "followers_url": "https://api.github.com/users/Auha/followers", "following_url": "https://api.github.com/users/Auha/following{/other_user}", "gists_url": "https://api.github.com/users/Auha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Auha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Auha/subscriptions", "organizations_url": "https://api.github.com/users/Auha/orgs", "repos_url": "https://api.github.com/users/Auha/repos", "events_url": "https://api.github.com/users/Auha/events{/privacy}", "received_events_url": "https://api.github.com/users/Auha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-27T00:15:35Z", "updated_at": "2017-10-10T20:07:58Z", "closed_at": "2017-06-03T14:14:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "For the `JSONType` is saved as a `json` type on Postgres. Is there a way to make it save as a `jsonb` type instead? \r\n\r\nI know that for some legacy applications and some other situations there are advantages to saving things as `json`, but there should be some sort of option to save things as `jsonb` in the application. \r\n\r\nI am willing to do a pull request if there is some sort of design of the API. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/272", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/272/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/272/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/272", "id": 231727441, "node_id": "MDU6SXNzdWUyMzE3Mjc0NDE=", "number": 272, "title": "JSONType does not update properly", "user": {"login": "danqing", "id": 5134133, "node_id": "MDQ6VXNlcjUxMzQxMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5134133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danqing", "html_url": "https://github.com/danqing", "followers_url": "https://api.github.com/users/danqing/followers", "following_url": "https://api.github.com/users/danqing/following{/other_user}", "gists_url": "https://api.github.com/users/danqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/danqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danqing/subscriptions", "organizations_url": "https://api.github.com/users/danqing/orgs", "repos_url": "https://api.github.com/users/danqing/repos", "events_url": "https://api.github.com/users/danqing/events{/privacy}", "received_events_url": "https://api.github.com/users/danqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-26T20:28:24Z", "updated_at": "2017-05-26T22:36:29Z", "closed_at": "2017-05-26T22:36:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say I have a field called json_field, I'm observing the following:\r\n\r\n```py\r\nclass SomeObject():\r\n\r\n    json_field = JSONType()\r\n\r\no = SomeObject()\r\no.json_field = {'hello': 'world'}\r\nsave(o)  # save to database\r\no.json_field  # {'hello': 'world'}\r\n\r\no.json_field['goodbye'] = 'world'\r\no.json_field  # {'hello': 'world', 'goodbye': 'world'}\r\nsave(o)  # save to database\r\no.json_field  # {'hello': 'world'} ???\r\n```\r\n\r\nIs this a bug, or is there anything I need to do to have a `JSONType` properly persist itself?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/271", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/271/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/271/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/271", "id": 225551446, "node_id": "MDU6SXNzdWUyMjU1NTE0NDY=", "number": 271, "title": "CompositeType seems broken", "user": {"login": "econoraptor", "id": 13039999, "node_id": "MDQ6VXNlcjEzMDM5OTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/13039999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/econoraptor", "html_url": "https://github.com/econoraptor", "followers_url": "https://api.github.com/users/econoraptor/followers", "following_url": "https://api.github.com/users/econoraptor/following{/other_user}", "gists_url": "https://api.github.com/users/econoraptor/gists{/gist_id}", "starred_url": "https://api.github.com/users/econoraptor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/econoraptor/subscriptions", "organizations_url": "https://api.github.com/users/econoraptor/orgs", "repos_url": "https://api.github.com/users/econoraptor/repos", "events_url": "https://api.github.com/users/econoraptor/events{/privacy}", "received_events_url": "https://api.github.com/users/econoraptor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-01T23:15:13Z", "updated_at": "2017-05-04T07:24:49Z", "closed_at": "2017-05-04T07:24:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Nevermind, I think I was just using it incorrectly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/268", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/268/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/268/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/268", "id": 217505007, "node_id": "MDU6SXNzdWUyMTc1MDUwMDc=", "number": 268, "title": "DeprecationWarning passlib.context.CryptContext.encrypt", "user": {"login": "JoostvDoorn", "id": 1589858, "node_id": "MDQ6VXNlcjE1ODk4NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1589858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoostvDoorn", "html_url": "https://github.com/JoostvDoorn", "followers_url": "https://api.github.com/users/JoostvDoorn/followers", "following_url": "https://api.github.com/users/JoostvDoorn/following{/other_user}", "gists_url": "https://api.github.com/users/JoostvDoorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoostvDoorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoostvDoorn/subscriptions", "organizations_url": "https://api.github.com/users/JoostvDoorn/orgs", "repos_url": "https://api.github.com/users/JoostvDoorn/repos", "events_url": "https://api.github.com/users/JoostvDoorn/events{/privacy}", "received_events_url": "https://api.github.com/users/JoostvDoorn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-28T09:49:50Z", "updated_at": "2018-09-11T07:52:45Z", "closed_at": "2018-09-11T07:52:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "encrypt was deprecated in favor of hash, see:\r\nhttps://bitbucket.org/ecollins/passlib/commits/1f7421b35b750a8f47cb0a8a2e208a839feb5e4f\r\n\r\n```\r\npassword.py:210: DeprecationWarning: the method passlib.context.CryptContext.encrypt()\r\nis deprecated as of Passlib 1.7, and will be removed in Passlib 2.0, use\r\nCryptContext.hash() instead.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/265", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/265/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/265/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/265", "id": 215546320, "node_id": "MDU6SXNzdWUyMTU1NDYzMjA=", "number": 265, "title": "0.32.13 is missing on PyPI", "user": {"login": "jacquerie", "id": 381280, "node_id": "MDQ6VXNlcjM4MTI4MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/381280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacquerie", "html_url": "https://github.com/jacquerie", "followers_url": "https://api.github.com/users/jacquerie/followers", "following_url": "https://api.github.com/users/jacquerie/following{/other_user}", "gists_url": "https://api.github.com/users/jacquerie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacquerie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacquerie/subscriptions", "organizations_url": "https://api.github.com/users/jacquerie/orgs", "repos_url": "https://api.github.com/users/jacquerie/repos", "events_url": "https://api.github.com/users/jacquerie/events{/privacy}", "received_events_url": "https://api.github.com/users/jacquerie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-20T20:31:50Z", "updated_at": "2017-03-21T14:57:39Z", "closed_at": "2017-03-21T14:56:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi @kvesteri, thanks for your useful library.\r\n\r\nA few days ago you tagged a new release on GitHub (https://github.com/kvesteri/sqlalchemy-utils/releases/tag/0.32.13), but it's currently not on PyPI: https://pypi.python.org/pypi/SQLAlchemy-Utils/0.32.13. Was this intentional?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/260", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/260/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/260/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/260", "id": 200358353, "node_id": "MDU6SXNzdWUyMDAzNTgzNTM=", "number": 260, "title": "NameError: name 'sqlalchemy_utils' is not defined", "user": {"login": "vladimirmyshkovski", "id": 12729789, "node_id": "MDQ6VXNlcjEyNzI5Nzg5", "avatar_url": "https://avatars0.githubusercontent.com/u/12729789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vladimirmyshkovski", "html_url": "https://github.com/vladimirmyshkovski", "followers_url": "https://api.github.com/users/vladimirmyshkovski/followers", "following_url": "https://api.github.com/users/vladimirmyshkovski/following{/other_user}", "gists_url": "https://api.github.com/users/vladimirmyshkovski/gists{/gist_id}", "starred_url": "https://api.github.com/users/vladimirmyshkovski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vladimirmyshkovski/subscriptions", "organizations_url": "https://api.github.com/users/vladimirmyshkovski/orgs", "repos_url": "https://api.github.com/users/vladimirmyshkovski/repos", "events_url": "https://api.github.com/users/vladimirmyshkovski/events{/privacy}", "received_events_url": "https://api.github.com/users/vladimirmyshkovski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-12T12:47:25Z", "updated_at": "2019-01-05T19:42:10Z", "closed_at": "2017-01-12T15:18:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "After db init , db migrate and db upgrade, I get this Traceback:\r\n\r\n```\r\n  File \"manage.py\", line 49, in <module>\r\n    manager.run()\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/flask_script/__init__.py\", line 412, in run\r\n    result = self.handle(sys.argv[0], sys.argv[1:])\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/flask_script/__init__.py\", line 383, in handle\r\n    res = handle(*args, **config)\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/flask_script/commands.py\", line 216, in __call__\r\n    return self.run(*args, **kwargs)\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/flask_migrate/__init__.py\", line 216, in upgrade\r\n    command.upgrade(config, revision, sql=sql, tag=tag)\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/alembic/command.py\", line 174, in upgrade\r\n    script.run_env()\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/alembic/script/base.py\", line 416, in run_env\r\n    util.load_python_file(self.dir, 'env.py')\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/alembic/util/pyfiles.py\", line 93, in load_python_file\r\n    module = load_module_py(module_id, path)\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/alembic/util/compat.py\", line 68, in load_module_py\r\n    module_id, path).load_module(module_id)\r\n  File \"<frozen importlib._bootstrap_external>\", line 388, in _check_name_wrapper\r\n  File \"<frozen importlib._bootstrap_external>\", line 809, in load_module\r\n  File \"<frozen importlib._bootstrap_external>\", line 668, in load_module\r\n  File \"<frozen importlib._bootstrap>\", line 268, in _load_module_shim\r\n  File \"<frozen importlib._bootstrap>\", line 693, in _load\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 665, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"migrations/env.py\", line 87, in <module>\r\n    run_migrations_online()\r\n  File \"migrations/env.py\", line 80, in run_migrations_online\r\n    context.run_migrations()\r\n  File \"<string>\", line 8, in run_migrations\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/alembic/runtime/environment.py\", line 797, in run_migrations\r\n    self.get_context().run_migrations(**kw)\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/venv/lib/python3.5/site-packages/alembic/runtime/migration.py\", line 314, in run_migrations\r\n    step.migration_fn(**kw)\r\n  File \"/home/narnik/\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b/FlaskProjects/flask-crm/flask-crm/migrations/versions/4a44addbb58c_.py\", line 64, in upgrade\r\n    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255), nullable=False),\r\nNameError: name 'sqlalchemy_utils' is not defined\r\n\r\n\r\n\r\nWith these same settings currently in the production mode has several applications and everything is fine.\r\nI already faced with exactly the same problem, but I can not remember now, she decided...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/253", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/253/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/253/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/253", "id": 184142473, "node_id": "MDU6SXNzdWUxODQxNDI0NzM=", "number": 253, "title": "LTree validation issue.", "user": {"login": "sohaibfarooqi", "id": 13061583, "node_id": "MDQ6VXNlcjEzMDYxNTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/13061583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sohaibfarooqi", "html_url": "https://github.com/sohaibfarooqi", "followers_url": "https://api.github.com/users/sohaibfarooqi/followers", "following_url": "https://api.github.com/users/sohaibfarooqi/following{/other_user}", "gists_url": "https://api.github.com/users/sohaibfarooqi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sohaibfarooqi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sohaibfarooqi/subscriptions", "organizations_url": "https://api.github.com/users/sohaibfarooqi/orgs", "repos_url": "https://api.github.com/users/sohaibfarooqi/repos", "events_url": "https://api.github.com/users/sohaibfarooqi/events{/privacy}", "received_events_url": "https://api.github.com/users/sohaibfarooqi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-20T06:05:20Z", "updated_at": "2016-11-29T09:51:38Z", "closed_at": "2016-11-29T09:51:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nI have done `Model.query.filter(Model.path == Ltree('None.1.2'))` query using Ltree type. Can anyone guide me on how to perform LQuery and use '@>' operator using SQLAlchemyUtils.?\n\nI was able to execute '<@', '@>' operator with following syntax:\n\n```\nsubq = Model.query.with_entities(Model.path).filter(Model.id == id).subquery()\nModel.query.filter(Model.path.descendant_of(subq)).all()\n```\n\nBut how to perform lquery '~' using LTree('.1.2') and append it with \".*\". LTree validation fail in this case. Any ideas how to do it?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/252", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/252/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/252/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/252", "id": 183947592, "node_id": "MDU6SXNzdWUxODM5NDc1OTI=", "number": 252, "title": "str object has no attribute path", "user": {"login": "sohaibfarooqi", "id": 13061583, "node_id": "MDQ6VXNlcjEzMDYxNTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/13061583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sohaibfarooqi", "html_url": "https://github.com/sohaibfarooqi", "followers_url": "https://api.github.com/users/sohaibfarooqi/followers", "following_url": "https://api.github.com/users/sohaibfarooqi/following{/other_user}", "gists_url": "https://api.github.com/users/sohaibfarooqi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sohaibfarooqi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sohaibfarooqi/subscriptions", "organizations_url": "https://api.github.com/users/sohaibfarooqi/orgs", "repos_url": "https://api.github.com/users/sohaibfarooqi/repos", "events_url": "https://api.github.com/users/sohaibfarooqi/events{/privacy}", "received_events_url": "https://api.github.com/users/sohaibfarooqi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-10-19T12:27:35Z", "updated_at": "2016-10-20T05:16:24Z", "closed_at": "2016-10-20T05:15:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nI am inserting data to LTree type as follows:\nINSERT INTO model (id, path) VALUES (1,'None')\nINSERT INTO model (id, path) VALUES (1,'None.1')\nINSERT INTO model (id, path) VALUES (1,'None.1.2') ...\n\nModel Class is:\n\n```\nclass SecondModel(db.Model,Entity,TimestampMixin):\n    path = db.Column(LtreeType)\n```\n\nClass Constructor:\n\n```\ndef __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n        self.id = kwargs['row_id']\n        self.path = kwargs['path']\n```\n\nInsertion Code:\n\n```\nmodel = Model(row_id = i,path = parent_path )\n```\n\nBut this gives error mentioned in question title. How to solve this error?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/247", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/247/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/247/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/247", "id": 180098849, "node_id": "MDU6SXNzdWUxODAwOTg4NDk=", "number": 247, "title": "Cannot filter query by PasswordType column", "user": {"login": "lobisquit", "id": 15218169, "node_id": "MDQ6VXNlcjE1MjE4MTY5", "avatar_url": "https://avatars2.githubusercontent.com/u/15218169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lobisquit", "html_url": "https://github.com/lobisquit", "followers_url": "https://api.github.com/users/lobisquit/followers", "following_url": "https://api.github.com/users/lobisquit/following{/other_user}", "gists_url": "https://api.github.com/users/lobisquit/gists{/gist_id}", "starred_url": "https://api.github.com/users/lobisquit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lobisquit/subscriptions", "organizations_url": "https://api.github.com/users/lobisquit/orgs", "repos_url": "https://api.github.com/users/lobisquit/repos", "events_url": "https://api.github.com/users/lobisquit/events{/privacy}", "received_events_url": "https://api.github.com/users/lobisquit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-09-29T16:28:55Z", "updated_at": "2016-10-11T19:28:07Z", "closed_at": "2016-10-11T17:41:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using this library I found an unexpected behaviour, i.e. mapped objects cannot be queried by an encrypted field, such as PasswordType. \nSince it is not covered by any test on this Column type, I would like to ask you: is this an expected behaviour or a bug?\n\nHere it is a minimal working code that shows the problem I encountered: \n\n``` python\nfrom sqlalchemy import *\nfrom sqlalchemy_utils.types.password import PasswordType\nfrom sqlalchemy_utils import force_auto_coercion\n\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\n\nengine = create_engine('sqlite:///test.db')\n\n# create sqlalchemy basic objects\nBase = declarative_base()\n\nSession = sessionmaker()\nSession.configure(bind=engine)\nsession = Session()\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n\n    username = Column(String, nullable=False)\n    password = Column(PasswordType(schemes=['bcrypt']))\n\n    def __repr__(self):\n        return \"<User(id={}, username='{}', password='{}')>]\".format(self.id, self.username, self.password)\n\nBase.metadata.create_all(engine)\nforce_auto_coercion()\n\nif __name__=='__main__':\n    u = User(username='admin', password='password')\n    session.add(u)\n    session.flush()\n\n    # correctly print new user\n    print(session.query(User).all())\n\n    # does not find any\n    print(session.query(User).filter(User.password=='password').all())\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/245", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/245/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/245/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/245", "id": 179435052, "node_id": "MDU6SXNzdWUxNzk0MzUwNTI=", "number": 245, "title": "PasswordType makes object unhashable in python 3", "user": {"login": "danqing", "id": 5134133, "node_id": "MDQ6VXNlcjUxMzQxMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5134133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danqing", "html_url": "https://github.com/danqing", "followers_url": "https://api.github.com/users/danqing/followers", "following_url": "https://api.github.com/users/danqing/following{/other_user}", "gists_url": "https://api.github.com/users/danqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/danqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danqing/subscriptions", "organizations_url": "https://api.github.com/users/danqing/orgs", "repos_url": "https://api.github.com/users/danqing/repos", "events_url": "https://api.github.com/users/danqing/events{/privacy}", "received_events_url": "https://api.github.com/users/danqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-27T09:01:12Z", "updated_at": "2016-09-27T10:38:58Z", "closed_at": "2016-09-27T10:38:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I may be missing something obvious here, but I'm having the following issue:\n\n``` py\n>>> u = User()\n>>> u.password = 'password'\nTypeError: unhashable type: 'User'\n```\n\nwhere `password` is a `PasswordType` field:\n\n``` py\npassword = Column(PasswordType(schemes=['pbkdf2_sha512']))\n```\n\nThis is the full trace:\n\n``` py\n/env/lib/python3.5/site-packages/sqlalchemy/orm/attributes.py in __set__(self, instance, value)\n    222     def __set__(self, instance, value):\n    223         self.impl.set(instance_state(instance),\n--> 224                       instance_dict(instance), value, None)\n    225\n    226     def __delete__(self, instance):\n\n/env/lib/python3.5/site-packages/sqlalchemy/orm/attributes.py in set(self, state, dict_, value, initiator, passive, check_old, pop)\n    699         if self.dispatch.set:\n    700             value = self.fire_replace_event(state, dict_,\n--> 701                                             value, old, initiator)\n    702         state._modified_event(dict_, self, old)\n    703         dict_[self.key] = value\n\n/env/lib/python3.5/site-packages/sqlalchemy/orm/attributes.py in fire_replace_event(self, state, dict_, value, previous, initiator)\n    708                 state, value, previous,\n    709                 initiator or self._replace_token or\n--> 710                 self._init_append_or_replace_token())\n    711         return value\n    712\n\n/env/lib/python3.5/site-packages/sqlalchemy/ext/mutable.py in set(target, value, oldvalue, initiator)\n    472                 value = cls.coerce(key, value)\n    473             if value is not None:\n--> 474                 value._parents[target.obj()] = key\n    475             if isinstance(oldvalue, cls):\n    476                 oldvalue._parents.pop(target.obj(), None)\n\n/env/lib/python3.5/weakref.py in __setitem__(self, key, value)\n    376\n    377     def __setitem__(self, key, value):\n--> 378         self.data[ref(key, self._remove)] = value\n    379\n    380     def copy(self):\n\nTypeError: unhashable type: 'User'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/229", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/229/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/229/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/229", "id": 163662275, "node_id": "MDU6SXNzdWUxNjM2NjIyNzU=", "number": 229, "title": "EmailType ignores length argument", "user": {"login": "tvuotila", "id": 3326999, "node_id": "MDQ6VXNlcjMzMjY5OTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3326999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tvuotila", "html_url": "https://github.com/tvuotila", "followers_url": "https://api.github.com/users/tvuotila/followers", "following_url": "https://api.github.com/users/tvuotila/following{/other_user}", "gists_url": "https://api.github.com/users/tvuotila/gists{/gist_id}", "starred_url": "https://api.github.com/users/tvuotila/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tvuotila/subscriptions", "organizations_url": "https://api.github.com/users/tvuotila/orgs", "repos_url": "https://api.github.com/users/tvuotila/repos", "events_url": "https://api.github.com/users/tvuotila/events{/privacy}", "received_events_url": "https://api.github.com/users/tvuotila/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-07-04T11:59:24Z", "updated_at": "2016-07-10T09:08:39Z", "closed_at": "2016-07-10T09:08:39Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "EmailType ignores length argument. For example compare the two:\n\n```\n>>> import sqlalchemy\n>>> text_column = sqlalchemy.Unicode(length=75)\n>>> text_column.length\n75\n>>> import sqlalchemy_utils\n>>> email_type = sqlalchemy_utils.EmailType(length=75)\n>>> email_type.length \n255\n```\n\nThis breaks everything that depends on type length like [automatic length validator](https://github.com/kvesteri/wtforms-alchemy/blob/c1a22855fd2a99ba02458c93a936359ef6b60a80/wtforms_alchemy/generator.py#L580) or alembic revision autogeneration (`alembic revision --autogenerate`). \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/216", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/216/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/216/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/216", "id": 151812410, "node_id": "MDU6SXNzdWUxNTE4MTI0MTA=", "number": 216, "title": "Call for opinion: shouldn't IPAddressType be validated on the way in?", "user": {"login": "lingfish", "id": 1295960, "node_id": "MDQ6VXNlcjEyOTU5NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1295960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lingfish", "html_url": "https://github.com/lingfish", "followers_url": "https://api.github.com/users/lingfish/followers", "following_url": "https://api.github.com/users/lingfish/following{/other_user}", "gists_url": "https://api.github.com/users/lingfish/gists{/gist_id}", "starred_url": "https://api.github.com/users/lingfish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lingfish/subscriptions", "organizations_url": "https://api.github.com/users/lingfish/orgs", "repos_url": "https://api.github.com/users/lingfish/repos", "events_url": "https://api.github.com/users/lingfish/events{/privacy}", "received_events_url": "https://api.github.com/users/lingfish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-29T07:53:01Z", "updated_at": "2016-05-04T04:11:54Z", "closed_at": "2016-04-29T10:33:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Should the `six.text_type(value)` call (https://github.com/kvesteri/sqlalchemy-utils/blob/48245b14c773009cbfea571cf3f9edef05f25224/sqlalchemy_utils/types/ip_address.py#L62) perhaps have a call to `ip_address()` inside it, so that it throws an exception if it's invalid?\n\nSomething like:\n\n``` python\nreturn six.text_type(ip_address(value)) if value else None\n```\n\nI'm just thinking that the expectation with most other SA types is that \"something\" (usually the DB itself), would reject invalid data (rather than the app using it), and this type certainly does on the way out (https://github.com/kvesteri/sqlalchemy-utils/blob/48245b14c773009cbfea571cf3f9edef05f25224/sqlalchemy_utils/types/ip_address.py#L65) implied by the `ip_address()` call.\n\nI discovered this because I could erroneously insert \"1.1.1.1 255.255\" into a column, but then when reading it back out via `eve-sqlalchemy`, I get a ValueError:\n\n``` python\n  File \"/srv/virtualenv/something/lib/python2.7/site-packages/sqlalchemy_utils/types/ip_address.py\", line 65, in process_result_value\n    return ip_address(value) if value else None\n  File \"/srv/virtualenv/something/lib/python2.7/site-packages/ipaddress.py\", line 166, in ip_address\n    address)\nValueError: u'10.64.21.33 255.255.' does not appear to be an IPv4 or IPv6 address\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/215", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/215/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/215/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/215", "id": 151474402, "node_id": "MDU6SXNzdWUxNTE0NzQ0MDI=", "number": 215, "title": "New LTree conflicts with SQLAlchemy latest commits", "user": {"login": "ColtonProvias", "id": 272926, "node_id": "MDQ6VXNlcjI3MjkyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/272926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ColtonProvias", "html_url": "https://github.com/ColtonProvias", "followers_url": "https://api.github.com/users/ColtonProvias/followers", "following_url": "https://api.github.com/users/ColtonProvias/following{/other_user}", "gists_url": "https://api.github.com/users/ColtonProvias/gists{/gist_id}", "starred_url": "https://api.github.com/users/ColtonProvias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ColtonProvias/subscriptions", "organizations_url": "https://api.github.com/users/ColtonProvias/orgs", "repos_url": "https://api.github.com/users/ColtonProvias/repos", "events_url": "https://api.github.com/users/ColtonProvias/events{/privacy}", "received_events_url": "https://api.github.com/users/ColtonProvias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-27T19:46:32Z", "updated_at": "2016-04-29T10:48:03Z", "closed_at": "2016-04-29T10:48:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently using the latest commit from the SQLAlchemy git (https://bitbucket.org/zzzeek/sqlalchemy.git@9e77f40a313bebffd51bb62328c6c27e63152329) and receive the following error on importing sqlalchemy_utils in Python 3.5.1 in an Alpine Linux container.\n\n```\n>>> import sqlalchemy_utils\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python3.5/site-packages/sqlalchemy_utils/__init__.py\", line 61, in <module>\n    from .types import (  # noqa\n  File \"/usr/lib/python3.5/site-packages/sqlalchemy_utils/types/__init__.py\", line 15, in <module>\n    from .ltree import LtreeType  # noqa\n  File \"/usr/lib/python3.5/site-packages/sqlalchemy_utils/types/ltree.py\", line 4, in <module>\n    from sqlalchemy.dialects.postgresql.base import (\nImportError: cannot import name 'ARRAY'\n```\n\nWhile it doesn't affect the current version released on PyPI, thus can be a possible break coming up soon.\n\nThe change that breaks this was introduced August 2015 and can be found at https://bitbucket.org/zzzeek/sqlalchemy/commits/ceeb033054f09db3eccbde3fad1941ec42919a54#Llib/sqlalchemy/dialects/postgresql/__init__.pyF15.\n\nA quick way to fix this would be to import `ARRAY` from `sqlalchemy.dialects.postgresql` instead of `sqlalchemy.dialects.postgresql.base`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/213", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/213/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/213/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/213", "id": 150620932, "node_id": "MDU6SXNzdWUxNTA2MjA5MzI=", "number": 213, "title": "Add support for modify_query() hook in declarative models", "user": {"login": "mwhite", "id": 344026, "node_id": "MDQ6VXNlcjM0NDAyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/344026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwhite", "html_url": "https://github.com/mwhite", "followers_url": "https://api.github.com/users/mwhite/followers", "following_url": "https://api.github.com/users/mwhite/following{/other_user}", "gists_url": "https://api.github.com/users/mwhite/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwhite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwhite/subscriptions", "organizations_url": "https://api.github.com/users/mwhite/orgs", "repos_url": "https://api.github.com/users/mwhite/repos", "events_url": "https://api.github.com/users/mwhite/events{/privacy}", "received_events_url": "https://api.github.com/users/mwhite/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-24T03:28:23Z", "updated_at": "2016-04-24T03:39:58Z", "closed_at": "2016-04-24T03:39:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking to do something like this with the ORM:\n\n``` python\nclass Model(Base):\n  # Gets run whenever this model class is added to a query, i.e., a select, or join, etc.\n  @classmethod\n  def modify_query(cls, query):\n    configuration = {...}\n    custom_extension_function(query, configuration)\n```\n\nDo you know if a package with this functionality already exists, and if not, would you be interested in a PR that adds it?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/212", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/212/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/212/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/212", "id": 149887886, "node_id": "MDU6SXNzdWUxNDk4ODc4ODY=", "number": 212, "title": "EncryptedType destroys information", "user": {"login": "tals", "id": 761863, "node_id": "MDQ6VXNlcjc2MTg2Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/761863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tals", "html_url": "https://github.com/tals", "followers_url": "https://api.github.com/users/tals/followers", "following_url": "https://api.github.com/users/tals/following{/other_user}", "gists_url": "https://api.github.com/users/tals/gists{/gist_id}", "starred_url": "https://api.github.com/users/tals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tals/subscriptions", "organizations_url": "https://api.github.com/users/tals/orgs", "repos_url": "https://api.github.com/users/tals/repos", "events_url": "https://api.github.com/users/tals/events{/privacy}", "received_events_url": "https://api.github.com/users/tals/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-20T21:15:02Z", "updated_at": "2018-02-18T14:38:45Z", "closed_at": "2018-02-18T14:38:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "The way the padding works is wrong:\n\n Instead of using PKCS5, the code [pads inputs with `'*'`](https://github.com/kvesteri/sqlalchemy-utils/blob/815f07d/sqlalchemy_utils/types/encrypted.py#L64), and then [strips them](https://github.com/kvesteri/sqlalchemy-utils/blob/815f07d/sqlalchemy_utils/types/encrypted.py#L87)\n\nIf your input happens to end with the '*' character, those characters get dropped\n\nYou can fix this issue with [PKCS5 padding](https://gist.github.com/crmccreary/5610068), which doesn't have this issue. Some extra code needs to be written to be compatible with existing data.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/208", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/208/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/208/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/208", "id": 144055041, "node_id": "MDU6SXNzdWUxNDQwNTUwNDE=", "number": 208, "title": "Database Helpers broken for SQLite", "user": {"login": "RobertDeRose", "id": 388745, "node_id": "MDQ6VXNlcjM4ODc0NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/388745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobertDeRose", "html_url": "https://github.com/RobertDeRose", "followers_url": "https://api.github.com/users/RobertDeRose/followers", "following_url": "https://api.github.com/users/RobertDeRose/following{/other_user}", "gists_url": "https://api.github.com/users/RobertDeRose/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobertDeRose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobertDeRose/subscriptions", "organizations_url": "https://api.github.com/users/RobertDeRose/orgs", "repos_url": "https://api.github.com/users/RobertDeRose/repos", "events_url": "https://api.github.com/users/RobertDeRose/events{/privacy}", "received_events_url": "https://api.github.com/users/RobertDeRose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-03-28T19:06:45Z", "updated_at": "2016-03-30T12:56:03Z", "closed_at": "2016-03-30T12:56:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Database Helpers, `create_database`, `drop_database`, and `database_exists` do not properly handle SQLite database URL based on the SQLAlchemy documentation of supported formats.\n\nYou should be able to use a URL of \"sqlite://\" and get an in-memory database, the help functions don't handle this use case properly.\n\nThere is also a bug with `drop_database` that just incorrectly uses the wrong `url.database` reference instead of `database` like the rest of the database types.\n\nPR to fix it all https://github.com/kvesteri/sqlalchemy-utils/pull/207\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/202", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/202/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/202/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/202", "id": 140365872, "node_id": "MDU6SXNzdWUxNDAzNjU4NzI=", "number": 202, "title": "PasswordType not working with declarative_base", "user": {"login": "danqing", "id": 5134133, "node_id": "MDQ6VXNlcjUxMzQxMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5134133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danqing", "html_url": "https://github.com/danqing", "followers_url": "https://api.github.com/users/danqing/followers", "following_url": "https://api.github.com/users/danqing/following{/other_user}", "gists_url": "https://api.github.com/users/danqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/danqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danqing/subscriptions", "organizations_url": "https://api.github.com/users/danqing/orgs", "repos_url": "https://api.github.com/users/danqing/repos", "events_url": "https://api.github.com/users/danqing/events{/privacy}", "received_events_url": "https://api.github.com/users/danqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-03-12T09:16:44Z", "updated_at": "2016-07-22T10:50:48Z", "closed_at": "2016-07-22T10:50:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure what's going on but I can't really get the following working:\n\n``` py\nimport sqlalchemy as sa\nfrom sqlalchemy.ext.declarative import declarative_base, declared_attr\nfrom sqlalchemy_utils import PasswordType\n\nclass _Base(object):\n    @declared_attr\n    def id(cls):\n        return sa.Column(sa.Integer, primary_key=True)\n\nBase = declarative_base(cls=_Base)\n\nclass User(Base):\n    __tablename__ = 'user'\n    password = sa.Column(PasswordType(schemes=['pbkdf2_sha512']))\n\n\na = User()\na.password = 'a'\na.password == 'a'   # False\n```\n\nIf I let `User` inherit directly from `object`, on the other hand, it will work properly. What's special with `declarative_base`?\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/194", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/194/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/194/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/194", "id": 136375798, "node_id": "MDU6SXNzdWUxMzYzNzU3OTg=", "number": 194, "title": "SQlAlchemy Install", "user": {"login": "sivivicky", "id": 6071862, "node_id": "MDQ6VXNlcjYwNzE4NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6071862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sivivicky", "html_url": "https://github.com/sivivicky", "followers_url": "https://api.github.com/users/sivivicky/followers", "following_url": "https://api.github.com/users/sivivicky/following{/other_user}", "gists_url": "https://api.github.com/users/sivivicky/gists{/gist_id}", "starred_url": "https://api.github.com/users/sivivicky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sivivicky/subscriptions", "organizations_url": "https://api.github.com/users/sivivicky/orgs", "repos_url": "https://api.github.com/users/sivivicky/repos", "events_url": "https://api.github.com/users/sivivicky/events{/privacy}", "received_events_url": "https://api.github.com/users/sivivicky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-25T12:33:41Z", "updated_at": "2016-02-27T16:37:11Z", "closed_at": "2016-02-27T16:37:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "'extras_require' must be a dictionary whose values are strings or lists of strings containing valid project/version requirement specifiers.\n\nguide me on how to solve this ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/191", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/191/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/191/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/191", "id": 135503582, "node_id": "MDU6SXNzdWUxMzU1MDM1ODI=", "number": 191, "title": "furl objects as dictionary keys", "user": {"login": "gruns", "id": 1041265, "node_id": "MDQ6VXNlcjEwNDEyNjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1041265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gruns", "html_url": "https://github.com/gruns", "followers_url": "https://api.github.com/users/gruns/followers", "following_url": "https://api.github.com/users/gruns/following{/other_user}", "gists_url": "https://api.github.com/users/gruns/gists{/gist_id}", "starred_url": "https://api.github.com/users/gruns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gruns/subscriptions", "organizations_url": "https://api.github.com/users/gruns/orgs", "repos_url": "https://api.github.com/users/gruns/repos", "events_url": "https://api.github.com/users/gruns/events{/privacy}", "received_events_url": "https://api.github.com/users/gruns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-22T18:38:09Z", "updated_at": "2016-02-24T19:01:44Z", "closed_at": "2016-02-24T19:01:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears SQLAlchemy-Utils furl objects are stored as dictionary keys. In\nPython 3, this raises an exception because furl objects are mutable and thus\nunhashable.\n\n``` python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/query.py\", line 2588, in all\n    return list(self)\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/loading.py\", line 86, in instances\n    util.raise_from_cause(err)\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/util/compat.py\", line 189, in raise_from_cause\n    reraise(type(exception), exception, tb=exc_tb, cause=exc_value)\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/util/compat.py\", line 183, in reraise\n    raise value\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/loading.py\", line 71, in instances\n    rows = [proc(row) for row in fetch]\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/loading.py\", line 71, in <listcomp>\n    rows = [proc(row) for row in fetch]\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/loading.py\", line 379, in _instance\n    instance = session_identity_map.get(identitykey)\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/identity.py\", line 146, in get\n    if key not in self._dict:\nTypeError: unhashable type: 'furl'\n```\n\nSee https://github.com/gruns/furl/issues/59.\n\nA potentially simple solution would be to wrap the dictionary with a thin shim\nthat serializes and deserializes furl objects to their URL strings on insertion\nand back on retrieval. At first glance, it appears\nsqlalchemy_utils/types/url.py:URLType attempts something similar.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/186", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/186/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/186/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/186", "id": 129464916, "node_id": "MDU6SXNzdWUxMjk0NjQ5MTY=", "number": 186, "title": "URLType and Python 3.x", "user": {"login": "bodgit", "id": 559268, "node_id": "MDQ6VXNlcjU1OTI2OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/559268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodgit", "html_url": "https://github.com/bodgit", "followers_url": "https://api.github.com/users/bodgit/followers", "following_url": "https://api.github.com/users/bodgit/following{/other_user}", "gists_url": "https://api.github.com/users/bodgit/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodgit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodgit/subscriptions", "organizations_url": "https://api.github.com/users/bodgit/orgs", "repos_url": "https://api.github.com/users/bodgit/repos", "events_url": "https://api.github.com/users/bodgit/events{/privacy}", "received_events_url": "https://api.github.com/users/bodgit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-01-28T14:18:42Z", "updated_at": "2016-01-28T19:10:47Z", "closed_at": "2016-01-28T19:10:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I try and use `URLType` and Python 3.x I get this when I try and access the object:\n\n``` python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/query.py\", line 2588, in all\n    return list(self)\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/loading.py\", line 86, in instances\n    util.raise_from_cause(err)\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/util/compat.py\", line 189, in raise_from_cause\n    reraise(type(exception), exception, tb=exc_tb, cause=exc_value)\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/util/compat.py\", line 183, in reraise\n    raise value\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/loading.py\", line 71, in instances\n    rows = [proc(row) for row in fetch]\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/loading.py\", line 71, in <listcomp>\n    rows = [proc(row) for row in fetch]\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/loading.py\", line 379, in _instance\n    instance = session_identity_map.get(identitykey)\n  File \".../venv-3.5/lib/python3.5/site-packages/sqlalchemy/orm/identity.py\", line 146, in get\n    if key not in self._dict:\nTypeError: unhashable type: 'furl'\n```\n\nIf I use Python 2.7 then I don't get this problem. From a bit of googling it seems implementing a `__hash__` method might fix this so I've tried to do this as a workaround:\n\n``` python\nclass MyURLType(URLType):\n    def __hash__(self):\n        return hash(self.url)\n```\n\nBut that doesn't work and I'm not entirely sure how I get at the furl object.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/185", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/185/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/185/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/185", "id": 129283606, "node_id": "MDU6SXNzdWUxMjkyODM2MDY=", "number": 185, "title": "Changes to ScalarListType don't save unless the List is copied", "user": {"login": "gberger", "id": 3977115, "node_id": "MDQ6VXNlcjM5NzcxMTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3977115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gberger", "html_url": "https://github.com/gberger", "followers_url": "https://api.github.com/users/gberger/followers", "following_url": "https://api.github.com/users/gberger/following{/other_user}", "gists_url": "https://api.github.com/users/gberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/gberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gberger/subscriptions", "organizations_url": "https://api.github.com/users/gberger/orgs", "repos_url": "https://api.github.com/users/gberger/repos", "events_url": "https://api.github.com/users/gberger/events{/privacy}", "received_events_url": "https://api.github.com/users/gberger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-01-27T22:00:10Z", "updated_at": "2016-01-28T06:49:43Z", "closed_at": "2016-01-27T22:06:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider this:\n\n```\nfrom sqlalchemy_utils import ScalarListType\nclass Company(db.Model):\n    email_domains = db.Column(ScalarListType())\n```\n\nThen somewhere in a controller, I do:\n\n```\ncompany.email_domains.append('example.com')\ndb.session.add(company)\ndb.session.commit()\n\ncompany = Company.get_by_id(company.id)\nassert company.email_domains[-1] == 'example.com'\n```\n\nThe assert will fail.\n\nWorkaround is copying the list and adding the new element to it:\n\n```\ncompany.email_domains = company.email_domains[:] + ['example.com']\ndb.session.add(company)\ndb.session.commit()\n\ncompany = Company.get_by_id(company.id)\nassert company.email_domains[-1] == 'example.com'\n```\n\nThe assert will pass.\n\nI know why this happens. The list is the same object reference, so it's not marked as changed. But SQLAlchemy-Utils should not surprise the user with this behavior. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/184", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/184/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/184/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/184", "id": 129086709, "node_id": "MDU6SXNzdWUxMjkwODY3MDk=", "number": 184, "title": "EncryptedType with date time and timezone", "user": {"login": "jssuzanne", "id": 5787689, "node_id": "MDQ6VXNlcjU3ODc2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5787689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jssuzanne", "html_url": "https://github.com/jssuzanne", "followers_url": "https://api.github.com/users/jssuzanne/followers", "following_url": "https://api.github.com/users/jssuzanne/following{/other_user}", "gists_url": "https://api.github.com/users/jssuzanne/gists{/gist_id}", "starred_url": "https://api.github.com/users/jssuzanne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jssuzanne/subscriptions", "organizations_url": "https://api.github.com/users/jssuzanne/orgs", "repos_url": "https://api.github.com/users/jssuzanne/repos", "events_url": "https://api.github.com/users/jssuzanne/events{/privacy}", "received_events_url": "https://api.github.com/users/jssuzanne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-27T09:41:36Z", "updated_at": "2017-08-31T12:45:07Z", "closed_at": "2017-08-31T12:45:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nAt https://github.com/kvesteri/sqlalchemy-utils/blob/master/sqlalchemy_utils/types/encrypted.py#L253, the date time is formatted with isoformat. Iso format convert the date time to str with microsecond and timezone.\n\nAt https://github.com/kvesteri/sqlalchemy-utils/blob/master/sqlalchemy_utils/types/encrypted.py#L278,\nthe formater does not take microsecond and timezone.\n\nIt is not really a bug, but the encrypted date time can not be other than a naive date time. I understand that convert all date time format is difficult, why does not use python-dateutils to convert str 2 date time, or regex.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/183", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/183/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/183/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/183", "id": 127556819, "node_id": "MDU6SXNzdWUxMjc1NTY4MTk=", "number": 183, "title": "How to search by ScalarListType?", "user": {"login": "gberger", "id": 3977115, "node_id": "MDQ6VXNlcjM5NzcxMTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3977115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gberger", "html_url": "https://github.com/gberger", "followers_url": "https://api.github.com/users/gberger/followers", "following_url": "https://api.github.com/users/gberger/following{/other_user}", "gists_url": "https://api.github.com/users/gberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/gberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gberger/subscriptions", "organizations_url": "https://api.github.com/users/gberger/orgs", "repos_url": "https://api.github.com/users/gberger/repos", "events_url": "https://api.github.com/users/gberger/events{/privacy}", "received_events_url": "https://api.github.com/users/gberger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-01-19T22:45:24Z", "updated_at": "2016-01-27T21:55:10Z", "closed_at": "2016-01-27T21:55:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/178", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/178/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/178/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/178", "id": 124630022, "node_id": "MDU6SXNzdWUxMjQ2MzAwMjI=", "number": 178, "title": "Password cannot be compared before commit to DB", "user": {"login": "frol", "id": 304265, "node_id": "MDQ6VXNlcjMwNDI2NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/304265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frol", "html_url": "https://github.com/frol", "followers_url": "https://api.github.com/users/frol/followers", "following_url": "https://api.github.com/users/frol/following{/other_user}", "gists_url": "https://api.github.com/users/frol/gists{/gist_id}", "starred_url": "https://api.github.com/users/frol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frol/subscriptions", "organizations_url": "https://api.github.com/users/frol/orgs", "repos_url": "https://api.github.com/users/frol/repos", "events_url": "https://api.github.com/users/frol/events{/privacy}", "received_events_url": "https://api.github.com/users/frol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-03T05:24:37Z", "updated_at": "2016-02-08T03:00:56Z", "closed_at": "2016-01-03T08:08:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm writing tests to my app and I cannot have an in-memory User object with password set on `__init__`.\n\n``` python\nclass User(db.Model):\n    password = db.Column(\n        sqlalchemy_utils.types.PasswordType(\n            max_length=128,\n            schemes=('bcrypt', )\n        ),\n        nullable=False\n    )\n\nu = User(password=\"test_password\")\nassert u.password == \"test_password\"\n```\n\nThe assert fails because `u.password.hash` is None and the `__eq__` implementation returns right away: https://github.com/kvesteri/sqlalchemy-utils/blob/master/sqlalchemy_utils/types/password.py#L47\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/175", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/175/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/175/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/175", "id": 120281763, "node_id": "MDU6SXNzdWUxMjAyODE3NjM=", "number": 175, "title": "When hybrid_property is given as a field to `_update_field()`", "user": {"login": "aidanxyz", "id": 536944, "node_id": "MDQ6VXNlcjUzNjk0NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/536944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanxyz", "html_url": "https://github.com/aidanxyz", "followers_url": "https://api.github.com/users/aidanxyz/followers", "following_url": "https://api.github.com/users/aidanxyz/following{/other_user}", "gists_url": "https://api.github.com/users/aidanxyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanxyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanxyz/subscriptions", "organizations_url": "https://api.github.com/users/aidanxyz/orgs", "repos_url": "https://api.github.com/users/aidanxyz/repos", "events_url": "https://api.github.com/users/aidanxyz/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanxyz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-03T22:10:26Z", "updated_at": "2015-12-06T16:31:15Z", "closed_at": "2015-12-06T16:31:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a `hybrid_property` and `setter` which in tandem mirror the original field:\n\n``` python\n    _brand_color = db.Column(\n        ...\n        name='brand_color',\n        ...\n    )\n\n    @hybrid_property\n    def brand_color(self):\n        return self._brand_color\n\n    @brand_color.setter\n    def brand_color(self, color):\n        self._brand_color = color\n```\n\nWhen I pass `_brand_color` to `assert_non_nullable` it throws `unconsumed column names` compile error. If I pass `brand_color` it throws `key not found ['brand_color']` error. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/174", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/174/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/174/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/174", "id": 119808665, "node_id": "MDU6SXNzdWUxMTk4MDg2NjU=", "number": 174, "title": "observes doesn't fully observe", "user": {"login": "bubenkoff", "id": 427136, "node_id": "MDQ6VXNlcjQyNzEzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/427136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bubenkoff", "html_url": "https://github.com/bubenkoff", "followers_url": "https://api.github.com/users/bubenkoff/followers", "following_url": "https://api.github.com/users/bubenkoff/following{/other_user}", "gists_url": "https://api.github.com/users/bubenkoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bubenkoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bubenkoff/subscriptions", "organizations_url": "https://api.github.com/users/bubenkoff/orgs", "repos_url": "https://api.github.com/users/bubenkoff/repos", "events_url": "https://api.github.com/users/bubenkoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bubenkoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-01T21:10:13Z", "updated_at": "2015-12-03T12:02:42Z", "closed_at": "2015-12-03T12:02:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "please check this test case\nlooks like `observes` decorator doesn't do it's job\n\n``` python\n\"\"\"Test observer helpers.\"\"\"\nfrom sqlalchemy_utils import observes\nimport sqlalchemy as sa\nengine = sa.create_engine('sqlite:///:memory:', echo=True)\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\nfrom sqlalchemy.orm import sessionmaker\nSession = sessionmaker(bind=engine)\n\n\nclass Director(Base):\n    __tablename__ = 'director'\n    id = sa.Column(sa.Integer, primary_key=True)\n    name = sa.Column(sa.String)\n\n\nclass Movie(Base):\n    __tablename__ = 'movie'\n    id = sa.Column(sa.Integer, primary_key=True)\n    name = sa.Column(sa.String)\n    director_id = sa.Column(sa.Integer, sa.ForeignKey(Director.id))\n    director = sa.orm.relationship(Director, backref='movies')\n\n    @observes('director')\n    def director_observer(self, director):\n        self.director_name = director.name\n\nBase.metadata.create_all(engine)\n\n\ndef test_observer():\n    \"\"\"Test observer.\"\"\"\n    session = Session()\n    director = Director(name='director')\n    movie = Movie(name='movie', director=director)\n    session.add(movie)\n    session.commit()\n    director.name = 'changed'\n    session.commit()\n    session.refresh(movie)\n    # fails!\n    assert movie.director_name == 'changed'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/173", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/173/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/173/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/173", "id": 117859106, "node_id": "MDU6SXNzdWUxMTc4NTkxMDY=", "number": 173, "title": "Locale Identifier With Territory Coerced Improperly", "user": {"login": "mpkuth", "id": 2456092, "node_id": "MDQ6VXNlcjI0NTYwOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2456092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpkuth", "html_url": "https://github.com/mpkuth", "followers_url": "https://api.github.com/users/mpkuth/followers", "following_url": "https://api.github.com/users/mpkuth/following{/other_user}", "gists_url": "https://api.github.com/users/mpkuth/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpkuth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpkuth/subscriptions", "organizations_url": "https://api.github.com/users/mpkuth/orgs", "repos_url": "https://api.github.com/users/mpkuth/repos", "events_url": "https://api.github.com/users/mpkuth/events{/privacy}", "received_events_url": "https://api.github.com/users/mpkuth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-19T17:04:58Z", "updated_at": "2016-01-20T11:26:37Z", "closed_at": "2016-01-20T11:26:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "[This](https://github.com/kvesteri/sqlalchemy-utils/commit/dc83308c28e38f0be1bbfd46fa837f165f8aa73f) commit fixes parsing of Locale strings that include a territory in the identifier. However, the same issue still exists in `_coerce` on line 74. It should use `Locale.parse` as well.\n\nIf that is done, the `isinstance(value, Locale)` check on line 73 will be obsolete as `Locale.parse` already does this check. `_coerce` and `process_result_value` can be exactly the same.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/171", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/171/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/171/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/171", "id": 116294584, "node_id": "MDU6SXNzdWUxMTYyOTQ1ODQ=", "number": 171, "title": "JSONType - make it easier to use OrderedDict", "user": {"login": "torotil", "id": 182122, "node_id": "MDQ6VXNlcjE4MjEyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/182122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torotil", "html_url": "https://github.com/torotil", "followers_url": "https://api.github.com/users/torotil/followers", "following_url": "https://api.github.com/users/torotil/following{/other_user}", "gists_url": "https://api.github.com/users/torotil/gists{/gist_id}", "starred_url": "https://api.github.com/users/torotil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torotil/subscriptions", "organizations_url": "https://api.github.com/users/torotil/orgs", "repos_url": "https://api.github.com/users/torotil/repos", "events_url": "https://api.github.com/users/torotil/events{/privacy}", "received_events_url": "https://api.github.com/users/torotil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-11T09:18:08Z", "updated_at": "2016-01-14T16:00:26Z", "closed_at": "2016-01-14T16:00:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some fields I need to use OrderedDict for my JSON dumps. Currently I create a sub-class from the JSONType:\n\n``` python\nclass OrderedJSONType(JSONType):\n    def process_result_value(self, value, dialect):\n        if dialect.name == 'postgresql':\n            return value\n        if value is not None:\n            value = json.loads(value, object_pairs_hook=OrderedDict)\n        return val\n```\n\nI think that's rather ugly because it is mainly a c&p of the original `process_result_value`. Would it be possible to add  custom keyword args for `json.dumps` and `json.loads` to JSONType?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/170", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/170/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/170/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/170", "id": 115872463, "node_id": "MDU6SXNzdWUxMTU4NzI0NjM=", "number": 170, "title": "Composite creation fails when using nonascii chars for name", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-11-09T13:04:05Z", "updated_at": "2015-11-09T15:06:25Z", "closed_at": "2015-11-09T15:06:25Z", "author_association": "OWNER", "active_lock_reason": null, "body": "UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe4 in position 2: invalid continuation byte\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/168", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/168/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/168/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/168", "id": 113795554, "node_id": "MDU6SXNzdWUxMTM3OTU1NTQ=", "number": 168, "title": "Observer crashes while looking for object_session", "user": {"login": "fayazkhan", "id": 1227312, "node_id": "MDQ6VXNlcjEyMjczMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1227312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fayazkhan", "html_url": "https://github.com/fayazkhan", "followers_url": "https://api.github.com/users/fayazkhan/followers", "following_url": "https://api.github.com/users/fayazkhan/following{/other_user}", "gists_url": "https://api.github.com/users/fayazkhan/gists{/gist_id}", "starred_url": "https://api.github.com/users/fayazkhan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fayazkhan/subscriptions", "organizations_url": "https://api.github.com/users/fayazkhan/orgs", "repos_url": "https://api.github.com/users/fayazkhan/repos", "events_url": "https://api.github.com/users/fayazkhan/events{/privacy}", "received_events_url": "https://api.github.com/users/fayazkhan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-28T11:15:15Z", "updated_at": "2015-10-30T12:05:24Z", "closed_at": "2015-10-30T12:05:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since updating to version 0.31.1, I'm seeing this exception:\n\n```\n>       db_session.flush()\n\ntests/conftest.py:257: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../weaver-env/local/lib/python2.7/site-packages/sqlalchemy/orm/scoping.py:150: in do\n    return getattr(self.registry(), name)(*args, **kwargs)\n../weaver-env/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py:2015: in flush\n    self._flush(objects)\n../weaver-env/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py:2042: in _flush\n    self.dispatch.before_flush(self, flush_context, objects)\n../weaver-env/local/lib/python2.7/site-packages/sqlalchemy/event/attr.py:218: in __call__\n    fn(*args, **kw)\n../weaver-env/local/lib/python2.7/site-packages/sqlalchemy_utils/observer.py:278: in invoke_callbacks\n    for (root_obj, func, objects) in args:\n../weaver-env/local/lib/python2.7/site-packages/sqlalchemy_utils/observer.py:248: in gather_callback_args\n    args = self.get_callback_args(root_obj, callback)\n../weaver-env/local/lib/python2.7/site-packages/sqlalchemy_utils/observer.py:253: in get_callback_args\n    session = sa.orm.object_session(root_obj)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = None\n\n    def object_session(instance):\n        \"\"\"Return the :class:`.Session` to which the given instance belongs.\n\n        This is essentially the same as the :attr:`.InstanceState.session`\n        accessor.  See that attribute for details.\n\n        \"\"\"\n\n        try:\n            state = attributes.instance_state(instance)\n        except exc.NO_STATE:\n>           raise exc.UnmappedInstanceError(instance)\nE           UnmappedInstanceError: Class '__builtin__.NoneType' is not mapped\n\n../weaver-env/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py:2775: UnmappedInstanceError\n```\n\nI suspect fix #138 has something to do with it. Earlier, `object_session` was computed from `obj` param of `gather_callback_args`, but now its from `root_obj`.\n\nAnd in my case, `root_obj` is `None`, because `getdoattr` returns `[None]`.\n\n```\n(Pdb++) root_objs\n[None]\n(Pdb++) obj\n<weaver.core.model.authenticators.device.Device object at 0x7fec87753090>\n(Pdb++) backref\nAttrPath(Device, u'_orders.invoice')\n(Pdb++) getdotattr(obj, backref)\n[None]\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/164", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/164/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/164/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/164", "id": 105563753, "node_id": "MDU6SXNzdWUxMDU1NjM3NTM=", "number": 164, "title": "JSONType on MySQL can be suspect to silent value truncation", "user": {"login": "moschlar", "id": 228095, "node_id": "MDQ6VXNlcjIyODA5NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/228095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moschlar", "html_url": "https://github.com/moschlar", "followers_url": "https://api.github.com/users/moschlar/followers", "following_url": "https://api.github.com/users/moschlar/following{/other_user}", "gists_url": "https://api.github.com/users/moschlar/gists{/gist_id}", "starred_url": "https://api.github.com/users/moschlar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moschlar/subscriptions", "organizations_url": "https://api.github.com/users/moschlar/orgs", "repos_url": "https://api.github.com/users/moschlar/repos", "events_url": "https://api.github.com/users/moschlar/events{/privacy}", "received_events_url": "https://api.github.com/users/moschlar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-09T09:55:55Z", "updated_at": "2016-01-14T15:58:39Z", "closed_at": "2016-01-14T15:58:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just learned this the hard way, but on MySQL (at least when not in [Strict SQL Mode](https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sql-mode-strict)), columns of type `TEXT` will silently truncate values, thus corrupting the JSON representation:\n\n> If strict SQL mode is not enabled and you assign a value to a BLOB or TEXT column that exceeds the column's maximum length, the value is truncated to fit and a warning is generated. For truncation of nonspace characters, you can cause an error to occur (rather than a warning) and suppress insertion of the value by using strict SQL mode. See Section 5.1.7, \u201cServer SQL Modes\u201d.\n\n(https://dev.mysql.com/doc/refman/5.0/en/blob.html)\n\nMy personal workaround was to change the column type to `LONGTEXT`, but that of course is only postponing the problem (to a length of 2^32, which is a lot, but still).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/161", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/161/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/161/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/161", "id": 103355939, "node_id": "MDU6SXNzdWUxMDMzNTU5Mzk=", "number": 161, "title": "Support composite indices on foreign key columns", "user": {"login": "aplavin", "id": 687995, "node_id": "MDQ6VXNlcjY4Nzk5NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/687995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aplavin", "html_url": "https://github.com/aplavin", "followers_url": "https://api.github.com/users/aplavin/followers", "following_url": "https://api.github.com/users/aplavin/following{/other_user}", "gists_url": "https://api.github.com/users/aplavin/gists{/gist_id}", "starred_url": "https://api.github.com/users/aplavin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aplavin/subscriptions", "organizations_url": "https://api.github.com/users/aplavin/orgs", "repos_url": "https://api.github.com/users/aplavin/repos", "events_url": "https://api.github.com/users/aplavin/events{/privacy}", "received_events_url": "https://api.github.com/users/aplavin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-08-26T20:20:33Z", "updated_at": "2015-10-10T18:51:54Z", "closed_at": "2015-10-10T18:51:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the function `has_index` returns `True` correctly when the column is the first in an index, but  `is_indexed_foreign_key` requires the sets of columns in the key and an index to match fully. The correct behavior, as I understand, is to return `True` if the foreign key columns are at the start of any index (and in any order).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/157", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/157/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/157/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/157", "id": 99281934, "node_id": "MDU6SXNzdWU5OTI4MTkzNA==", "number": 157, "title": "slugify ?", "user": {"login": "matrixise", "id": 38737, "node_id": "MDQ6VXNlcjM4NzM3", "avatar_url": "https://avatars2.githubusercontent.com/u/38737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matrixise", "html_url": "https://github.com/matrixise", "followers_url": "https://api.github.com/users/matrixise/followers", "following_url": "https://api.github.com/users/matrixise/following{/other_user}", "gists_url": "https://api.github.com/users/matrixise/gists{/gist_id}", "starred_url": "https://api.github.com/users/matrixise/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matrixise/subscriptions", "organizations_url": "https://api.github.com/users/matrixise/orgs", "repos_url": "https://api.github.com/users/matrixise/repos", "events_url": "https://api.github.com/users/matrixise/events{/privacy}", "received_events_url": "https://api.github.com/users/matrixise/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-08-05T19:38:07Z", "updated_at": "2015-08-06T18:17:17Z", "closed_at": "2015-08-06T09:05:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\n\nIn a previous version of sqlalchemy-utils, I can create a slug with the deprecated generates function, but this one has been removed from the last version.\n\nNow, how to create a slug ?\n\nThank you\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/148", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/148/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/148/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/148", "id": 84166035, "node_id": "MDU6SXNzdWU4NDE2NjAzNQ==", "number": 148, "title": "functions/database.py:  has_index(column) not working for tables without primary key", "user": {"login": "franekp", "id": 9804230, "node_id": "MDQ6VXNlcjk4MDQyMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9804230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/franekp", "html_url": "https://github.com/franekp", "followers_url": "https://api.github.com/users/franekp/followers", "following_url": "https://api.github.com/users/franekp/following{/other_user}", "gists_url": "https://api.github.com/users/franekp/gists{/gist_id}", "starred_url": "https://api.github.com/users/franekp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/franekp/subscriptions", "organizations_url": "https://api.github.com/users/franekp/orgs", "repos_url": "https://api.github.com/users/franekp/repos", "events_url": "https://api.github.com/users/franekp/events{/privacy}", "received_events_url": "https://api.github.com/users/franekp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-06-02T19:19:10Z", "updated_at": "2015-06-04T17:27:16Z", "closed_at": "2015-06-04T17:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "> > > metadata = MetaData()\n> > > user = Table('user', metadata,\n> > > ...     Column('user_id', Integer),\n> > > ...     Column('user_name', String(16), nullable=False),\n> > > ...     Column('email_address', String(60)),\n> > > ...     Column('password', String(20), nullable=False)\n> > > ... )\n> > > \n> > > has_index(user.c.user_name)\n> > > Traceback (most recent call last):\n> > >   File \"<stdin>\", line 1, in <module>\n> > >   File \"virtualenv/local/lib/python2.7/site-packages/sqlalchemy_utils/functions/database.py\", line 251, in has_index\n> > >     column is table.primary_key.columns.values()[0]\n> > > IndexError: list index out of range\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/146", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/146/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/146/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/146", "id": 81482768, "node_id": "MDU6SXNzdWU4MTQ4Mjc2OA==", "number": 146, "title": "ImportError: No module named psycopg2", "user": {"login": "scorphus", "id": 2112697, "node_id": "MDQ6VXNlcjIxMTI2OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2112697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scorphus", "html_url": "https://github.com/scorphus", "followers_url": "https://api.github.com/users/scorphus/followers", "following_url": "https://api.github.com/users/scorphus/following{/other_user}", "gists_url": "https://api.github.com/users/scorphus/gists{/gist_id}", "starred_url": "https://api.github.com/users/scorphus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scorphus/subscriptions", "organizations_url": "https://api.github.com/users/scorphus/orgs", "repos_url": "https://api.github.com/users/scorphus/repos", "events_url": "https://api.github.com/users/scorphus/events{/privacy}", "received_events_url": "https://api.github.com/users/scorphus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-27T15:00:17Z", "updated_at": "2015-05-29T00:23:50Z", "closed_at": "2015-05-28T14:56:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Latest changes seem broken:\n\n```\nTraceback (most recent call last):\n  [snip]\n    from wtforms_alchemy import model_form_factory\n  File \".../lib/python2.7/site-packages/wtforms_alchemy/__init__.py\", line 13, in <module>\n    from wtforms_components import (\n  File \".../lib/python2.7/site-packages/wtforms_components/__init__.py\", line 2, in <module>\n    from .fields import (\n  File \".../lib/python2.7/site-packages/wtforms_components/fields/__init__.py\", line 24, in <module>\n    from .phone_number import PhoneNumberField\n  File \".../lib/python2.7/site-packages/wtforms_components/fields/phone_number.py\", line 3, in <module>\n    from sqlalchemy_utils import PhoneNumber\n  File \".../sqlalchemy-utils/sqlalchemy_utils/__init__.py\", line 58, in <module>\n    from .types import (  # noqa\n  File \".../sqlalchemy-utils/sqlalchemy_utils/types/__init__.py\", line 16, in <module>\n    from .pg_composite import (  # noqa\n  File \".../sqlalchemy-utils/sqlalchemy_utils/types/pg_composite.py\", line 96, in <module>\n    import psycopg2\nImportError: No module named psycopg2\nmake: *** [run_server] Error 1\n```\n\nMoving `psycopg2>=2.5.1` from `extras_require` to `install_requires` fixes this issue but that in turn depends on `pg_config` being available.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/145", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/145/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/145/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/145", "id": 81469908, "node_id": "MDU6SXNzdWU4MTQ2OTkwOA==", "number": 145, "title": "PostgreSQL is mandatory?", "user": {"login": "hachreak", "id": 377047, "node_id": "MDQ6VXNlcjM3NzA0Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/377047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hachreak", "html_url": "https://github.com/hachreak", "followers_url": "https://api.github.com/users/hachreak/followers", "following_url": "https://api.github.com/users/hachreak/following{/other_user}", "gists_url": "https://api.github.com/users/hachreak/gists{/gist_id}", "starred_url": "https://api.github.com/users/hachreak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hachreak/subscriptions", "organizations_url": "https://api.github.com/users/hachreak/orgs", "repos_url": "https://api.github.com/users/hachreak/repos", "events_url": "https://api.github.com/users/hachreak/events{/privacy}", "received_events_url": "https://api.github.com/users/hachreak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-05-27T14:27:07Z", "updated_at": "2015-05-28T14:56:03Z", "closed_at": "2015-05-28T14:56:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\nI saw that 2 days ago it was merged this [commit](https://github.com/kvesteri/sqlalchemy-utils/commit/0153bcc536349314c9dce0a4f3beb3a2cfaf0044) that import from `pg_composite` some staff specific for PostgreSQL.\nBut if someone use a different engine (e.g. mysql) this can be a issue because now it's mandatory to install [psycopg2](https://github.com/kvesteri/sqlalchemy-utils/commit/0153bcc536349314c9dce0a4f3beb3a2cfaf0044#diff-6cb02a25a507e17bf7ba15cb73cdee9dR96)\nThere is a possibility to manually import them only if necessary?\nThanks :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/141", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/141/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/141/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/141", "id": 74018729, "node_id": "MDU6SXNzdWU3NDAxODcyOQ==", "number": 141, "title": "How to force a locale with TranslationHybrid in a block ?", "user": {"login": "pmarti", "id": 10057, "node_id": "MDQ6VXNlcjEwMDU3", "avatar_url": "https://avatars2.githubusercontent.com/u/10057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmarti", "html_url": "https://github.com/pmarti", "followers_url": "https://api.github.com/users/pmarti/followers", "following_url": "https://api.github.com/users/pmarti/following{/other_user}", "gists_url": "https://api.github.com/users/pmarti/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmarti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmarti/subscriptions", "organizations_url": "https://api.github.com/users/pmarti/orgs", "repos_url": "https://api.github.com/users/pmarti/repos", "events_url": "https://api.github.com/users/pmarti/events{/privacy}", "received_events_url": "https://api.github.com/users/pmarti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-05-07T15:07:32Z", "updated_at": "2015-05-11T14:20:19Z", "closed_at": "2015-05-11T05:06:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi Konsta!\n\nQuick question about TranslationHybrid: How would you force a given locale for a block? Ideally it'd be a context manager that would allow you things like:\n\n``` python\nwith translation_hybrid.force_locale('en_GB'):\n    print obj.name   # obj.name_translations['en_GB']\n```\n\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/139", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/139/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/139/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/139", "id": 73132739, "node_id": "MDU6SXNzdWU3MzEzMjczOQ==", "number": 139, "title": "setting `generic_relationship` results in `AttributeError`", "user": {"login": "bouzlibop", "id": 8625570, "node_id": "MDQ6VXNlcjg2MjU1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8625570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bouzlibop", "html_url": "https://github.com/bouzlibop", "followers_url": "https://api.github.com/users/bouzlibop/followers", "following_url": "https://api.github.com/users/bouzlibop/following{/other_user}", "gists_url": "https://api.github.com/users/bouzlibop/gists{/gist_id}", "starred_url": "https://api.github.com/users/bouzlibop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bouzlibop/subscriptions", "organizations_url": "https://api.github.com/users/bouzlibop/orgs", "repos_url": "https://api.github.com/users/bouzlibop/repos", "events_url": "https://api.github.com/users/bouzlibop/events{/privacy}", "received_events_url": "https://api.github.com/users/bouzlibop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-05-04T21:28:44Z", "updated_at": "2015-05-06T09:11:40Z", "closed_at": "2015-05-06T08:33:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nI've bumped into a problem with **generic_relationship** while switching from version `0.9.9` to `1.0.0` of `SQLAlchemy`. Basically to reproduce one can use the first example from http://sqlalchemy-utils.readthedocs.org/en/latest/generic_relationship.html \n\nWould you have any advices regarding what can be the problem here?\n\nHere is a trace:\n\n> Traceback (most recent call last):\n>   File \"test_error.py\", line 12, in <module>\n>     class Event(db.Model):\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/flask_sqlalchemy/**init**.py\", line 536, in **init**\n>     DeclarativeMeta.**init**(self, name, bases, d)\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy/ext/declarative/api.py\", line 55, in **init**\n>     _as_declarative(cls, classname, cls.__dict__)\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy/ext/declarative/base.py\", line 88, in _as_declarative\n>     _MapperConfig.setup_mapping(cls, classname, dict_)\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy/ext/declarative/base.py\", line 103, in setup_mapping\n>     cfg_cls(cls_, classname, dict_)\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy/ext/declarative/base.py\", line 135, in **init**\n>     self._early_mapping()\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy/ext/declarative/base.py\", line 138, in _early_mapping\n>     self.map()\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy/ext/declarative/base.py\", line 530, in map\n>     **self.mapper_args\n>   File \"<string>\", line 2, in mapper\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy/orm/mapper.py\", line 627, in __init__\n>     self._configure_properties()\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy/orm/mapper.py\", line 1284, in _configure_properties\n>     self._configure_property(key, prop, False)\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy/orm/mapper.py\", line 1607, in _configure_property\n>     prop.instrument_class(self)\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy_utils/generic.py\", line 173, in instrument_class\n>     comparator=self.Comparator(self, mapper),\n>   File \"/home/bouzlibop/.virtualenvs/invenio/local/lib/python2.7/site-packages/sqlalchemy_utils/generic.py\", line 144, in __init__\n>     self._parentmapper = parentmapper\n> AttributeError: can't set attribute\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/138", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/138/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/138/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/138", "id": 70256644, "node_id": "MDU6SXNzdWU3MDI1NjY0NA==", "number": 138, "title": "observes callbacks fired for simple attributes even if there are no changes", "user": {"login": "peplin", "id": 184212, "node_id": "MDQ6VXNlcjE4NDIxMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/184212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peplin", "html_url": "https://github.com/peplin", "followers_url": "https://api.github.com/users/peplin/followers", "following_url": "https://api.github.com/users/peplin/following{/other_user}", "gists_url": "https://api.github.com/users/peplin/gists{/gist_id}", "starred_url": "https://api.github.com/users/peplin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peplin/subscriptions", "organizations_url": "https://api.github.com/users/peplin/orgs", "repos_url": "https://api.github.com/users/peplin/repos", "events_url": "https://api.github.com/users/peplin/events{/privacy}", "received_events_url": "https://api.github.com/users/peplin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-22T23:03:21Z", "updated_at": "2015-10-26T15:22:40Z", "closed_at": "2015-10-26T12:17:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since #136 was resolved, my `@observes` callbacks are now being fired as I expect for simple column types. However, I just noticed that they are called every time the model is flushed, not only when the attribute actually changes. If I call `has_changes` on the attribute, it returns `False`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/136", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/136/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/136/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/136", "id": 67353512, "node_id": "MDU6SXNzdWU2NzM1MzUxMg==", "number": 136, "title": "observes decorator not working with simple attributes, only relationships", "user": {"login": "peplin", "id": 184212, "node_id": "MDQ6VXNlcjE4NDIxMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/184212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peplin", "html_url": "https://github.com/peplin", "followers_url": "https://api.github.com/users/peplin/followers", "following_url": "https://api.github.com/users/peplin/following{/other_user}", "gists_url": "https://api.github.com/users/peplin/gists{/gist_id}", "starred_url": "https://api.github.com/users/peplin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peplin/subscriptions", "organizations_url": "https://api.github.com/users/peplin/orgs", "repos_url": "https://api.github.com/users/peplin/repos", "events_url": "https://api.github.com/users/peplin/events{/privacy}", "received_events_url": "https://api.github.com/users/peplin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28858072, "node_id": "MDU6TGFiZWwyODg1ODA3Mg==", "url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-09T12:44:09Z", "updated_at": "2015-04-18T17:24:08Z", "closed_at": "2015-04-15T08:20:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if I am misinterpreting how the `@observes` decorator is supposed to work, but I expect something like this to work:\n\n```\nclass User(db.Model):\n    first_name = db.Column(db.String(64))\n    last_name = db.Column(db.String(64))\n    full_name = db.Column(db.String(129))\n\n    @observes('first_name')\n    def update_full_name_when_first_name_changes(self, first_name):\n        self.full_name = \"%s %s\" % (first_name, self.last_name)\n```\n\nHowever when I try and use any of my models (even unrelated ones) with this code in pace on `User`, I get:\n\n```\n instance = session.query(model).filter_by(**kwargs).first()\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/orm/scoping.py\", line 150, in do\n    return getattr(self.registry(), name)(*args, **kwargs)\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/orm/session.py\", line 1165, in query\n    return self._query_cls(entities, self, **kwargs)\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/orm/query.py\", line 108, in __init__\n    self._set_entities(entities)\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/orm/query.py\", line 118, in _set_entities\n    self._set_entity_selectables(self._entities)\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/orm/query.py\", line 151, in _set_entity_selectables\n    ent.setup_entity(*d[entity])\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/orm/query.py\", line 3036, in setup_entity\n    self._with_polymorphic = ext_info.with_polymorphic_mappers\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/util/langhelpers.py\", line 725, in __get__\n    obj.__dict__[self.__name__] = result = self.fget(obj)\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/orm/mapper.py\", line 1877, in _with_polymorphic_mappers\n    configure_mappers()\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/orm/mapper.py\", line 2604, in configure_mappers\n    Mapper.dispatch(Mapper).after_configured()\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/event/attr.py\", line 221, in __call__\n    fn(*args, **kw)\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy/orm/events.py\", line 544, in wrap\n    fn(*arg, **kw)\n  File \"/home/peplin/.virtualenvs/api/lib/python2.7/site-packages/sqlalchemy_utils/observer.py\", line 226, in gather_paths\n    prop_class = path[index].property.mapper.class_\nAttributeError: 'ColumnProperty' object has no attribute 'mapper'\n```\n\nI can get `@observes` to work if the attribute it is observing is a relationship. For these non-relationship attributes, I am sticking to using `@generates` for now, but that indicates it is deprecated in favor of `@observes`. If that's the case, I'm assuming that `@observes` does support this and I'm just not doing something right. Thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/133", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/133/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/133/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/133", "id": 63072766, "node_id": "MDU6SXNzdWU2MzA3Mjc2Ng==", "number": 133, "title": "ScalarListType as Array on Postgres", "user": {"login": "ColtonProvias", "id": 272926, "node_id": "MDQ6VXNlcjI3MjkyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/272926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ColtonProvias", "html_url": "https://github.com/ColtonProvias", "followers_url": "https://api.github.com/users/ColtonProvias/followers", "following_url": "https://api.github.com/users/ColtonProvias/following{/other_user}", "gists_url": "https://api.github.com/users/ColtonProvias/gists{/gist_id}", "starred_url": "https://api.github.com/users/ColtonProvias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ColtonProvias/subscriptions", "organizations_url": "https://api.github.com/users/ColtonProvias/orgs", "repos_url": "https://api.github.com/users/ColtonProvias/repos", "events_url": "https://api.github.com/users/ColtonProvias/events{/privacy}", "received_events_url": "https://api.github.com/users/ColtonProvias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-03-19T19:28:32Z", "updated_at": "2015-03-21T12:52:59Z", "closed_at": "2015-03-21T12:52:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similar to how UUIDType uses UUID on Postgres, would it be possible to have ScalarListType use ARRAY on Postgres?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/132", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/132/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/132/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/132", "id": 62696271, "node_id": "MDU6SXNzdWU2MjY5NjI3MQ==", "number": 132, "title": "Request Support: PasswordType Simple Hash", "user": {"login": "septs", "id": 3842474, "node_id": "MDQ6VXNlcjM4NDI0NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3842474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/septs", "html_url": "https://github.com/septs", "followers_url": "https://api.github.com/users/septs/followers", "following_url": "https://api.github.com/users/septs/following{/other_user}", "gists_url": "https://api.github.com/users/septs/gists{/gist_id}", "starred_url": "https://api.github.com/users/septs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/septs/subscriptions", "organizations_url": "https://api.github.com/users/septs/orgs", "repos_url": "https://api.github.com/users/septs/repos", "events_url": "https://api.github.com/users/septs/events{/privacy}", "received_events_url": "https://api.github.com/users/septs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-18T13:37:30Z", "updated_at": "2015-03-19T09:07:26Z", "closed_at": "2015-03-19T09:07:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "using `hashlib` hash\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/129", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/129/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/129/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/129", "id": 59492030, "node_id": "MDU6SXNzdWU1OTQ5MjAzMA==", "number": 129, "title": "Issue with length=16 in Alembic migrations using UUIDType", "user": {"login": "drcongo", "id": 39289, "node_id": "MDQ6VXNlcjM5Mjg5", "avatar_url": "https://avatars1.githubusercontent.com/u/39289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drcongo", "html_url": "https://github.com/drcongo", "followers_url": "https://api.github.com/users/drcongo/followers", "following_url": "https://api.github.com/users/drcongo/following{/other_user}", "gists_url": "https://api.github.com/users/drcongo/gists{/gist_id}", "starred_url": "https://api.github.com/users/drcongo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drcongo/subscriptions", "organizations_url": "https://api.github.com/users/drcongo/orgs", "repos_url": "https://api.github.com/users/drcongo/repos", "events_url": "https://api.github.com/users/drcongo/events{/privacy}", "received_events_url": "https://api.github.com/users/drcongo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-03-02T15:00:26Z", "updated_at": "2019-01-07T17:20:36Z", "closed_at": "2015-03-02T15:25:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. \n\nI've got an issue running Alembic upgrades (via Flask-Script / Flask-Migrate) against models using the UUIDType on a postgres DB. The generated migration comes out looking like this...\n\n```\n\"\"\"empty message\n\nRevision ID: 3aaa9646cbda\nRevises: None\nCreate Date: 2015-03-02 14:47:22.123134\n\n\"\"\"\n\n# revision identifiers, used by Alembic.\nrevision = '3aaa9646cbda'\ndown_revision = None\n\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlalchemy_utils\n\n\ndef upgrade():\n    ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('role',\n    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('user',\n    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    ### end Alembic commands ###\n\n\ndef downgrade():\n    ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('user')\n    op.drop_table('role')\n    ### end Alembic commands ###\n```\n\nWhich as you can see, adds a length=16 keyword arg to the UUIDType creation, causing this traceback...\n\n```\nTraceback (most recent call last):\n  File \"manage.py\", line 37, in <module>\n    manager.run()\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/flask_script/__init__.py\", line 412, in run\n    result = self.handle(sys.argv[0], sys.argv[1:])\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/flask_script/__init__.py\", line 383, in handle\n    res = handle(*args, **config)\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/flask_script/commands.py\", line 216, in __call__\n    return self.run(*args, **kwargs)\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/flask_migrate/__init__.py\", line 177, in upgrade\n    command.upgrade(config, revision, sql=sql, tag=tag)\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/alembic/command.py\", line 165, in upgrade\n    script.run_env()\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/alembic/script.py\", line 382, in run_env\n    util.load_python_file(self.dir, 'env.py')\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/alembic/util.py\", line 242, in load_python_file\n    module = load_module_py(module_id, path)\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/alembic/compat.py\", line 79, in load_module_py\n    mod = imp.load_source(module_id, path, fp)\n  File \"migrations/env.py\", line 73, in <module>\n    run_migrations_online()\n  File \"migrations/env.py\", line 66, in run_migrations_online\n    context.run_migrations()\n  File \"<string>\", line 7, in run_migrations\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/alembic/environment.py\", line 742, in run_migrations\n    self.get_context().run_migrations(**kw)\n  File \"/vagrant/venv/local/lib/python2.7/site-packages/alembic/migration.py\", line 305, in run_migrations\n    step.migration_fn(**kw)\n  File \"/vagrant/migrations/versions/3aaa9646cbda_.py\", line 22, in upgrade\n    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),\nTypeError: <flask_script.commands.Command object at 0x7fc608176250>: __init__() got an unexpected keyword argument 'length'\n```\n\nIs the length argument necessary? Is there a way to have it not there? Or am I best off creating a MyUUIDType(UUIDType) class which will accept the length param and ignore it or something?\n\nThanks (and thanks for sqlalchemy-utils in general).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/126", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/126/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/126/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/126", "id": 57457260, "node_id": "MDU6SXNzdWU1NzQ1NzI2MA==", "number": 126, "title": "ChoiceType not raising exception on write", "user": {"login": "bouzlibop", "id": 8625570, "node_id": "MDQ6VXNlcjg2MjU1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8625570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bouzlibop", "html_url": "https://github.com/bouzlibop", "followers_url": "https://api.github.com/users/bouzlibop/followers", "following_url": "https://api.github.com/users/bouzlibop/following{/other_user}", "gists_url": "https://api.github.com/users/bouzlibop/gists{/gist_id}", "starred_url": "https://api.github.com/users/bouzlibop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bouzlibop/subscriptions", "organizations_url": "https://api.github.com/users/bouzlibop/orgs", "repos_url": "https://api.github.com/users/bouzlibop/repos", "events_url": "https://api.github.com/users/bouzlibop/events{/privacy}", "received_events_url": "https://api.github.com/users/bouzlibop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-12T13:02:10Z", "updated_at": "2015-02-12T13:10:23Z", "closed_at": "2015-02-12T13:10:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys, I've the question regarding the [ChoiceType](https://github.com/kvesteri/sqlalchemy-utils/blob/master/sqlalchemy_utils/types/choice.py#L30). \n\nAs far as I understand a value which I would like to read from the `ChoiceType` column will be automatically coerced to `Choice` object, as so it will raise a `KeyError` if it doesn't exist in `choices_dict`:\n\n``` python\ndef process_result_value(self, value, dialect):\n        if value:\n            return Choice(value, self.choices_dict[value])\n        return value\n```\n\nThe same action (checking if the value is in the `choices_dict`) is not taking place when I'm trying to write a value to the column ?\n(I can write any String to db and I will know that it was not in the `choices_dict` only after reading it).\n\n``` python\n    def process_bind_param(self, value, dialect):\n        if value and isinstance(value, Choice):\n            return value.code\n        return value\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/123", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/123/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/123/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/123", "id": 55465902, "node_id": "MDU6SXNzdWU1NTQ2NTkwMg==", "number": 123, "title": "Make translation hybrid fallback value configurable", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28858074, "node_id": "MDU6TGFiZWwyODg1ODA3NA==", "url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-01-26T10:18:25Z", "updated_at": "2015-02-16T13:39:41Z", "closed_at": "2015-02-16T13:39:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/122", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/122/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/122/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/122", "id": 55259029, "node_id": "MDU6SXNzdWU1NTI1OTAyOQ==", "number": 122, "title": "drop_database doesn't quote database name", "user": {"login": "jpvanhal", "id": 250983, "node_id": "MDQ6VXNlcjI1MDk4Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/250983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpvanhal", "html_url": "https://github.com/jpvanhal", "followers_url": "https://api.github.com/users/jpvanhal/followers", "following_url": "https://api.github.com/users/jpvanhal/following{/other_user}", "gists_url": "https://api.github.com/users/jpvanhal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpvanhal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpvanhal/subscriptions", "organizations_url": "https://api.github.com/users/jpvanhal/orgs", "repos_url": "https://api.github.com/users/jpvanhal/repos", "events_url": "https://api.github.com/users/jpvanhal/events{/privacy}", "received_events_url": "https://api.github.com/users/jpvanhal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28858072, "node_id": "MDU6TGFiZWwyODg1ODA3Mg==", "url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-23T09:02:46Z", "updated_at": "2015-01-24T09:44:35Z", "closed_at": "2015-01-24T09:44:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "``` pytb\nTraceback (most recent call last):\n  File \"/Users/janne/.local/bin/stellar\", line 9, in <module>\n    load_entry_point('stellar==0.4.2', 'console_scripts', 'stellar')()\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/stellar/command.py\", line 264, in main\n    stellar()\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/click/core.py\", line 572, in __call__\n    return self.main(*args, **kwargs)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/click/core.py\", line 552, in main\n    rv = self.invoke(ctx)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/click/core.py\", line 893, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/click/core.py\", line 744, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/click/core.py\", line 388, in invoke\n    return callback(*args, **kwargs)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/stellar/command.py\", line 128, in restore\n    app.restore(snapshot)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/stellar/app.py\", line 155, in restore\n    self.operations.remove_database(table.table_name)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/stellar/operations.py\", line 111, in remove_database\n    get_engine_url(raw_conn, database)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/sqlalchemy_utils/functions/database.py\", line 267, in drop_database\n    engine.execute(text)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/sqlalchemy/engine/base.py\", line 1690, in execute\n    return connection.execute(statement, *multiparams, **params)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/sqlalchemy/engine/base.py\", line 719, in execute\n    return self._execute_text(object, multiparams, params)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/sqlalchemy/engine/base.py\", line 868, in _execute_text\n    statement, parameters\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/sqlalchemy/engine/base.py\", line 954, in _execute_context\n    context)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/sqlalchemy/engine/base.py\", line 1116, in _handle_dbapi_exception\n    exc_info\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/sqlalchemy/util/compat.py\", line 189, in raise_from_cause\n    reraise(type(exception), exception, tb=exc_tb)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/sqlalchemy/engine/base.py\", line 947, in _execute_context\n    context)\n  File \"/Users/janne/.local/venvs/stellar/lib/python2.7/site-packages/sqlalchemy/engine/default.py\", line 435, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.ProgrammingError: (ProgrammingError) syntax error at or near \"-\"\nLINE 1: DROP DATABASE foo-bar\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/117", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/117/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/117/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/117", "id": 54367717, "node_id": "MDU6SXNzdWU1NDM2NzcxNw==", "number": 117, "title": "Problem using UUID binary type with foreign key relationship between models", "user": {"login": "czarneckid", "id": 72727, "node_id": "MDQ6VXNlcjcyNzI3", "avatar_url": "https://avatars3.githubusercontent.com/u/72727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czarneckid", "html_url": "https://github.com/czarneckid", "followers_url": "https://api.github.com/users/czarneckid/followers", "following_url": "https://api.github.com/users/czarneckid/following{/other_user}", "gists_url": "https://api.github.com/users/czarneckid/gists{/gist_id}", "starred_url": "https://api.github.com/users/czarneckid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czarneckid/subscriptions", "organizations_url": "https://api.github.com/users/czarneckid/orgs", "repos_url": "https://api.github.com/users/czarneckid/repos", "events_url": "https://api.github.com/users/czarneckid/events{/privacy}", "received_events_url": "https://api.github.com/users/czarneckid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-14T19:51:05Z", "updated_at": "2017-02-27T19:45:30Z", "closed_at": "2017-02-27T19:45:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running into a problem trying to use a binary type with a foreign key relationship between models. This stems from trying to use the UUIDType from SQLAlchemy-Utils and choosing the binary form, which uses a BINARY(16) type for the UUID column. This is using MariaDB. Relevant software and library versions are included at the end.\n\nHere are the create table scripts:\n\n``` mysql\n\nMariaDB [flask_accounts_development]> show create table account\\G;\n*************************** 1. row ***************************\n       Table: account\nCreate Table: CREATE TABLE `account` (\n  `id` binary(16) NOT NULL,\n  `username` varchar(64) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `username` (`username`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n\nERROR: No query specified\n```\n\n``` mysql\nMariaDB [flask_accounts_development]> show create table address\\G;\n*************************** 1. row ***************************\n       Table: address\nCreate Table: CREATE TABLE `address` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `account_id` binary(16) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `account_id` (`account_id`),\n  CONSTRAINT `address_ibfk_1` FOREIGN KEY (`account_id`) REFERENCES `account` (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n\nERROR: No query specified\n```\n\nAccount and Address model definitions:\n\n``` python\nfrom app import db\nfrom sqlalchemy_utils import UUIDType\n\nclass Account(db.Model):\n    id = db.Column(UUIDType, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    addresses = db.relationship('Address', backref=db.backref('account'), cascade='all, delete-orphan')\n\n    def __init__(self, username):\n        self.username = username\n\n    def __repr__(self):\n        return '<Account id=%r name=%r>' % (self.id, self.username)\n\nclass Address(db.Model):\n    id          = db.Column(db.Integer, primary_key=True)\n    account_id  = db.Column(UUIDType, db.ForeignKey('account.id'), nullable=False)\n\n    def __repr__(self):\n        return '<Address id=%r account_id=%r>' % (self.id, self.account_id.hex)\n```\n\nCode to exercise the issue:\n\n``` python\nfrom app.accounts.models import Address\nfrom app import db\nfrom app.accounts.models import Account\nimport uuid\n\naccount = Account(username='david')\naccount.id = uuid.uuid4()\n\ndb.session.add(account)\ndb.session.commit()\n\naddress = Address(account=account)\n\ndb.session.add(address)\ndb.session.commit()\n\naccount.addresses\n```\n\nRunning this from a Flask shell, I get the following error trying to get the addresses for an account:\n\n``` python\nIn [12]: account.addresses\n/Users/dczarnecki/.virtualenvs/ba-flask-migrate-test/lib/python2.7/site-packages/sqlalchemy/engine/default.py:436: Warning: Invalid utf8 character string: 'DEF4C0'\n  cursor.execute(statement, parameters)\nOut[12]: []\n```\n\nThe relationship is empty this way. I can however navigation the relationship from address to account.\n\n``` python\nIn [11]: address.account\nOut[11]: <Account id=UUID('5b608608-d29b-4f8e-bfa4-a80640ffaff3') name=u'david'>\n```\n\nAny thoughts on setting up the relationship correctly or where the issue might be going from account to addresses? \n\nSoftware:\n\nMariaDB: mysql --version\nmysql  Ver 15.1 Distrib 10.0.15-MariaDB, for osx10.10 (x86_64) using readline 5.1\n\nFlask-SQLAlchemy: 2.0\n\nSQLAlchemy-Utils: 0.26.6\n\nMySQL-python: 1.2.5\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/114", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/114/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/114/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/114", "id": 53426208, "node_id": "MDU6SXNzdWU1MzQyNjIwOA==", "number": 114, "title": "PyPI version 0.28.3 is actually 0.29.0", "user": {"login": "joshfriend", "id": 885137, "node_id": "MDQ6VXNlcjg4NTEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/885137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshfriend", "html_url": "https://github.com/joshfriend", "followers_url": "https://api.github.com/users/joshfriend/followers", "following_url": "https://api.github.com/users/joshfriend/following{/other_user}", "gists_url": "https://api.github.com/users/joshfriend/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshfriend/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshfriend/subscriptions", "organizations_url": "https://api.github.com/users/joshfriend/orgs", "repos_url": "https://api.github.com/users/joshfriend/repos", "events_url": "https://api.github.com/users/joshfriend/events{/privacy}", "received_events_url": "https://api.github.com/users/joshfriend/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-05T18:23:23Z", "updated_at": "2015-03-23T20:58:17Z", "closed_at": "2015-03-23T20:58:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While trying to find a suitable version to pin my requirements to because of kvesteri/sqlalchemy-searchable#18, I found that version 0.28.3 on pypi has the code from 0.29.0.\n\nHere's a diff I ran on the file that was causing me pain:\n\n``` patch\n$ diff -u SQLAlchemy-Utils-0.28.3-pypi/sqlalchemy_utils/types/ts_vector.py sqlalchemy-utils-0.28.3-github/sqlalchemy_utils/types/ts_vector.py\n--- SQLAlchemy-Utils-0.28.3-pypi/sqlalchemy_utils/types/ts_vector.py    2015-01-02 12:05:54.000000000 -0500\n+++ sqlalchemy-utils-0.28.3-github/sqlalchemy_utils/types/ts_vector.py  2014-12-17 04:01:44.000000000 -0500\n@@ -1,100 +1,24 @@\n import sqlalchemy as sa\n-from sqlalchemy.dialects.postgresql import TSVECTOR\n+from sqlalchemy.dialects.postgresql.base import ischema_names\n\n\n-class TSVectorType(sa.types.TypeDecorator):\n-    \"\"\"\n-    .. note::\n-\n-        This type is PostgreSQL specific and is not supported by other\n-        dialects.\n-\n-    Provides additional functionality for SQLAlchemy PostgreSQL dialect's\n-    TSVECTOR_ type. This additional functionality includes:\n-\n-    * Vector concatenation\n-    * regconfig constructor parameter which is applied to match function if no\n-      postgresql_regconfig parameter is given\n-    * Provides extensible base for extensions such as SQLAlchemy-Searchable_\n-\n-    .. _TSVECTOR:\n-        http://docs.sqlalchemy.org/en/latest/dialects/postgresql.html#full-text-search\n-\n-    .. _SQLAlchemy-Searchable:\n-        https://www.github.com/kvesteri/sqlalchemy-searchable\n-\n-    ::\n-\n-        from sqlalchemy_utils import TSVectorType\n-\n-\n-        class Article(Base):\n-            __tablename__ = 'user'\n-            id = sa.Column(sa.Integer, primary_key=True)\n-            name = sa.Column(sa.String(100))\n-            search_vector = sa.Column(TSVectorType)\n-\n-\n-        # Find all articles whose name matches 'finland'\n-        session.query(Article).filter(Article.search_vector.match('finland'))\n-\n-\n-    TSVectorType also supports vector concatenation.\n-\n-    ::\n-\n-\n-        class Article(Base):\n-            __tablename__ = 'user'\n-            id = sa.Column(sa.Integer, primary_key=True)\n-            name = sa.Column(sa.String(100))\n-            name_vector = sa.Column(TSVectorType)\n-            content = sa.Column(sa.String)\n-            content_vector = sa.Column(TSVectorType)\n-\n-        # Find all articles whose name or content matches 'finland'\n-        session.query(Article).filter(\n-            (Article.name_vector | Article.content_vector).match('finland')\n-        )\n-\n-    You can configure TSVectorType to use a specific regconfig.\n-    ::\n-\n-        class Article(Base):\n-            __tablename__ = 'user'\n-            id = sa.Column(sa.Integer, primary_key=True)\n-            name = sa.Column(sa.String(100))\n-            search_vector = sa.Column(\n-                TSVectorType(regconfig='pg_catalog.simple')\n+class TSVectorType(sa.types.UserDefinedType):\n+    class comparator_factory(sa.types.TypeEngine.Comparator):\n+        def match_tsquery(self, other, catalog=None):\n+            from sqlalchemy_utils.expressions import tsvector_match, to_tsquery\n+\n+            args = []\n+            if catalog:\n+                args.append(catalog)\n+            elif self.type.options.get('catalog'):\n+                args.append(self.type.options.get('catalog'))\n+            args.append(other)\n+\n+            return tsvector_match(\n+                self.expr,\n+                to_tsquery(*args)\n             )\n\n-\n-    Now expression such as::\n-\n-\n-        Article.search_vector.match('finland')\n-\n-\n-    Would be equivalent to SQL::\n-\n-\n-        search_vector @@ to_tsquery('pg_catalog.simgle', 'finland')\n-\n-    \"\"\"\n-    impl = TSVECTOR\n-\n-    class comparator_factory(TSVECTOR.Comparator):\n-        def match(self, other, **kwargs):\n-            if 'postgresql_regconfig' not in kwargs:\n-                if 'regconfig' in self.type.options:\n-                    kwargs['postgresql_regconfig'] = (\n-                        self.type.options['regconfig']\n-                    )\n-            return TSVECTOR.Comparator.match(self, other, **kwargs)\n-\n-        def __or__(self, other):\n-            return self.op('||')(other)\n-\n     def __init__(self, *args, **kwargs):\n         \"\"\"\n         Initializes new TSVectorType\n@@ -104,4 +28,12 @@\n         \"\"\"\n         self.columns = args\n         self.options = kwargs\n-        super(TSVectorType, self).__init__()\n+\n+    \"\"\"\n+    Text search vector type for postgresql.\n+    \"\"\"\n+    def get_col_spec(self):\n+        return 'tsvector'\n+\n+\n+ischema_names['tsvector'] = TSVectorType\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/112", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/112/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/112/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/112", "id": 53283534, "node_id": "MDU6SXNzdWU1MzI4MzUzNA==", "number": 112, "title": "0.29 breaks TSVectorType under SQLite", "user": {"login": "briantrice", "id": 19371, "node_id": "MDQ6VXNlcjE5Mzcx", "avatar_url": "https://avatars3.githubusercontent.com/u/19371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briantrice", "html_url": "https://github.com/briantrice", "followers_url": "https://api.github.com/users/briantrice/followers", "following_url": "https://api.github.com/users/briantrice/following{/other_user}", "gists_url": "https://api.github.com/users/briantrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/briantrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briantrice/subscriptions", "organizations_url": "https://api.github.com/users/briantrice/orgs", "repos_url": "https://api.github.com/users/briantrice/repos", "events_url": "https://api.github.com/users/briantrice/events{/privacy}", "received_events_url": "https://api.github.com/users/briantrice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-01-02T22:45:43Z", "updated_at": "2015-01-14T17:09:32Z", "closed_at": "2015-01-14T17:09:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a code base which is PostgreSQL dependent but a subset runs tests in sqlite with our models. A build today picked up the new version and reached a compilation error:\n\n```\nCompiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x6740950> can't render element of type <class 'sqlalchemy.dialects.postgresql.base.TSVECTOR'>\n```\n\nI'm hoping I can either conditionalize the column definition or just keep using the library the way I have, disabling full-text search facilities when the engine doesn't support the feature. Thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/104", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/104/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/104/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/104", "id": 51890974, "node_id": "MDU6SXNzdWU1MTg5MDk3NA==", "number": 104, "title": "New version 0.28.1 is broken", "user": {"login": "joshfriend", "id": 885137, "node_id": "MDQ6VXNlcjg4NTEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/885137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshfriend", "html_url": "https://github.com/joshfriend", "followers_url": "https://api.github.com/users/joshfriend/followers", "following_url": "https://api.github.com/users/joshfriend/following{/other_user}", "gists_url": "https://api.github.com/users/joshfriend/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshfriend/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshfriend/subscriptions", "organizations_url": "https://api.github.com/users/joshfriend/orgs", "repos_url": "https://api.github.com/users/joshfriend/repos", "events_url": "https://api.github.com/users/joshfriend/events{/privacy}", "received_events_url": "https://api.github.com/users/joshfriend/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-12-13T15:42:23Z", "updated_at": "2014-12-14T21:49:50Z", "closed_at": "2014-12-13T19:52:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Commit 4dcc11c3 causes the following error on import:\n\n```\nAttributeError: 'NoneType' object has no attribute 'Color'\n```\n\nIf the `colour` pacakge is not installed. I'm not experienced with how the sqlalchemy `TypeDecorator` works but perhaps something like this would work?\n\n``` python\ntry:\n    from colour import Colour\n    python_colour_type = Colour\nexcept ImportError:\n    python_colour_type = None\n\n# ...\n\nclass ColorType:\n    python_type = python_colour_type\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/102", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/102/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/102/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/102", "id": 51694258, "node_id": "MDU6SXNzdWU1MTY5NDI1OA==", "number": 102, "title": "Add TSVectorType to docs", "user": {"login": "dhamaniasad", "id": 4560482, "node_id": "MDQ6VXNlcjQ1NjA0ODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4560482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhamaniasad", "html_url": "https://github.com/dhamaniasad", "followers_url": "https://api.github.com/users/dhamaniasad/followers", "following_url": "https://api.github.com/users/dhamaniasad/following{/other_user}", "gists_url": "https://api.github.com/users/dhamaniasad/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhamaniasad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhamaniasad/subscriptions", "organizations_url": "https://api.github.com/users/dhamaniasad/orgs", "repos_url": "https://api.github.com/users/dhamaniasad/repos", "events_url": "https://api.github.com/users/dhamaniasad/events{/privacy}", "received_events_url": "https://api.github.com/users/dhamaniasad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-12-11T14:44:17Z", "updated_at": "2015-01-02T16:36:28Z", "closed_at": "2015-01-02T16:36:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/94", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/94/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/94/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/94", "id": 46617081, "node_id": "MDU6SXNzdWU0NjYxNzA4MQ==", "number": 94, "title": "Jsonb support", "user": {"login": "MSusik", "id": 6649290, "node_id": "MDQ6VXNlcjY2NDkyOTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6649290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MSusik", "html_url": "https://github.com/MSusik", "followers_url": "https://api.github.com/users/MSusik/followers", "following_url": "https://api.github.com/users/MSusik/following{/other_user}", "gists_url": "https://api.github.com/users/MSusik/gists{/gist_id}", "starred_url": "https://api.github.com/users/MSusik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MSusik/subscriptions", "organizations_url": "https://api.github.com/users/MSusik/orgs", "repos_url": "https://api.github.com/users/MSusik/repos", "events_url": "https://api.github.com/users/MSusik/events{/privacy}", "received_events_url": "https://api.github.com/users/MSusik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2014-10-23T12:04:20Z", "updated_at": "2018-09-14T15:48:28Z", "closed_at": "2016-01-20T11:24:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\n\nLately PostgreSQL introduced new field type: `jsonb`. It is designed to allow querying specific fields inside json dictionaries. http://www.postgresql.org/docs/9.4/static/functions-json.html . It is a significant performance improvement over the old implementation\n\nThe support for the field is already implemented in SQLAlchemy. Shouldn't `sqlalchemy-utils` support it as a part of `JSONType`?\n\n`JSONType` could take an optional argument which would define which field type is requested if the Postgres is being used.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/89", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/89/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/89/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/89", "id": 42593992, "node_id": "MDU6SXNzdWU0MjU5Mzk5Mg==", "number": 89, "title": "EXPLAIN support", "user": {"login": "yoloseem", "id": 249795, "node_id": "MDQ6VXNlcjI0OTc5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/249795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoloseem", "html_url": "https://github.com/yoloseem", "followers_url": "https://api.github.com/users/yoloseem/followers", "following_url": "https://api.github.com/users/yoloseem/following{/other_user}", "gists_url": "https://api.github.com/users/yoloseem/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoloseem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoloseem/subscriptions", "organizations_url": "https://api.github.com/users/yoloseem/orgs", "repos_url": "https://api.github.com/users/yoloseem/repos", "events_url": "https://api.github.com/users/yoloseem/events{/privacy}", "received_events_url": "https://api.github.com/users/yoloseem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-09-12T03:47:05Z", "updated_at": "2014-10-24T17:38:23Z", "closed_at": "2014-10-24T17:38:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi! Does it make sense to add `EXPLAIN` support to sqlalchemy-utils? Then, I should like to contribute. There's a good recipes already(https://bitbucket.org/zzzeek/sqlalchemy/wiki/UsageRecipes/Explain). \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/87", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/87/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/87/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/87", "id": 41542204, "node_id": "MDU6SXNzdWU0MTU0MjIwNA==", "number": 87, "title": "@generates decorator destroys the attribute before it can be accessed", "user": {"login": "drcongo", "id": 39289, "node_id": "MDQ6VXNlcjM5Mjg5", "avatar_url": "https://avatars1.githubusercontent.com/u/39289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drcongo", "html_url": "https://github.com/drcongo", "followers_url": "https://api.github.com/users/drcongo/followers", "following_url": "https://api.github.com/users/drcongo/following{/other_user}", "gists_url": "https://api.github.com/users/drcongo/gists{/gist_id}", "starred_url": "https://api.github.com/users/drcongo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drcongo/subscriptions", "organizations_url": "https://api.github.com/users/drcongo/orgs", "repos_url": "https://api.github.com/users/drcongo/repos", "events_url": "https://api.github.com/users/drcongo/events{/privacy}", "received_events_url": "https://api.github.com/users/drcongo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-08-29T21:43:45Z", "updated_at": "2014-08-29T22:50:59Z", "closed_at": "2014-08-29T22:50:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to use this as a slug generator, the idea being that if the model already has a slug set, it should NOT change it on edit, as this is pretty bad practice (people's bookmarks would stop working, SEO etc.). However, it turns out that the slug attribute of self is getting destroyed instantly, so I can't simply return the existing slug unchanged.\n\n```\n@generates(slug)\n    def _create_slug(self):\n        if self.slug is None or self.slug == u'':\n            return slugify(self.name, self.__class__)\n        else:\n            return self.slug\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/86", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/86/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/86/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/86", "id": 41392410, "node_id": "MDU6SXNzdWU0MTM5MjQxMA==", "number": 86, "title": "PreciseTimestamp type", "user": {"login": "jd", "id": 2644, "node_id": "MDQ6VXNlcjI2NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jd", "html_url": "https://github.com/jd", "followers_url": "https://api.github.com/users/jd/followers", "following_url": "https://api.github.com/users/jd/following{/other_user}", "gists_url": "https://api.github.com/users/jd/gists{/gist_id}", "starred_url": "https://api.github.com/users/jd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jd/subscriptions", "organizations_url": "https://api.github.com/users/jd/orgs", "repos_url": "https://api.github.com/users/jd/repos", "events_url": "https://api.github.com/users/jd/events{/privacy}", "received_events_url": "https://api.github.com/users/jd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-08-28T13:56:43Z", "updated_at": "2015-02-06T07:54:50Z", "closed_at": "2015-02-06T07:54:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "MySQL does not support the same kind of precision than PostgreSQL does in timestamps. We use a custom timestamp type to store timestamps as float in MySQL instead.\n\nhttps://git.openstack.org/cgit/stackforge/gnocchi/tree/gnocchi/indexer/sqlalchemy.py#n47\n\nI wonder if it would make sense to port this to sqlalchemy-utils. If so I'd be happy to submit a patch.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/85", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/85/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/85/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/85", "id": 41140054, "node_id": "MDU6SXNzdWU0MTE0MDA1NA==", "number": 85, "title": "Tag releases", "user": {"login": "pypingou", "id": 1240038, "node_id": "MDQ6VXNlcjEyNDAwMzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1240038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pypingou", "html_url": "https://github.com/pypingou", "followers_url": "https://api.github.com/users/pypingou/followers", "following_url": "https://api.github.com/users/pypingou/following{/other_user}", "gists_url": "https://api.github.com/users/pypingou/gists{/gist_id}", "starred_url": "https://api.github.com/users/pypingou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pypingou/subscriptions", "organizations_url": "https://api.github.com/users/pypingou/orgs", "repos_url": "https://api.github.com/users/pypingou/repos", "events_url": "https://api.github.com/users/pypingou/events{/privacy}", "received_events_url": "https://api.github.com/users/pypingou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-08-26T06:03:12Z", "updated_at": "2014-08-26T13:16:12Z", "closed_at": "2014-08-26T12:59:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current release is 0.26.13 but there is not a single tag in the git repository. I would be nice if they could be added as it would at least provide an overview of the previous releases (I am for example looking for the latest release compatible with sqlalchemy 0.8.7).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/79", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/79/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/79/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/79", "id": 32149080, "node_id": "MDU6SXNzdWUzMjE0OTA4MA==", "number": 79, "title": "Using JSONType without anyjson fails", "user": {"login": "jruere", "id": 1299142, "node_id": "MDQ6VXNlcjEyOTkxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1299142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruere", "html_url": "https://github.com/jruere", "followers_url": "https://api.github.com/users/jruere/followers", "following_url": "https://api.github.com/users/jruere/following{/other_user}", "gists_url": "https://api.github.com/users/jruere/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruere/subscriptions", "organizations_url": "https://api.github.com/users/jruere/orgs", "repos_url": "https://api.github.com/users/jruere/repos", "events_url": "https://api.github.com/users/jruere/events{/privacy}", "received_events_url": "https://api.github.com/users/jruere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-04-24T13:40:01Z", "updated_at": "2014-04-25T16:38:40Z", "closed_at": "2014-04-25T16:38:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The problem is in module `sqlalchemy_utils/types/json.py`, it imports \"json\" which is understood to be itself.\n\nThis can be fixed by adding: `from __future__ import absolute_import`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/77", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/77/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/77/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/77", "id": 30785371, "node_id": "MDU6SXNzdWUzMDc4NTM3MQ==", "number": 77, "title": "sort_query docstring out of date", "user": {"login": "jpvanhal", "id": 250983, "node_id": "MDQ6VXNlcjI1MDk4Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/250983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpvanhal", "html_url": "https://github.com/jpvanhal", "followers_url": "https://api.github.com/users/jpvanhal/followers", "following_url": "https://api.github.com/users/jpvanhal/following{/other_user}", "gists_url": "https://api.github.com/users/jpvanhal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpvanhal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpvanhal/subscriptions", "organizations_url": "https://api.github.com/users/jpvanhal/orgs", "repos_url": "https://api.github.com/users/jpvanhal/repos", "events_url": "https://api.github.com/users/jpvanhal/events{/privacy}", "received_events_url": "https://api.github.com/users/jpvanhal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28858072, "node_id": "MDU6TGFiZWwyODg1ODA3Mg==", "url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-04-03T15:26:17Z", "updated_at": "2014-04-03T17:54:29Z", "closed_at": "2014-04-03T17:54:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`sort_query` docstring mentions an `errors` parameter:\n\n```\n:param errors: whether or not to raise exceptions if unknown sort column\n                   is passed\n```\n\nIf one tries to pass `errors` argument to `sort_query` it crashes like so:\n\n``` pytb\n  File \"some_file.py\", line 19, in some_func\n    query = sort_query(query, *sort, errors=True)\n  File \"/Users/janne/.virtualenvs/app/lib/python2.7/site-packages/sqlalchemy_utils/functions/sort_query.py\", line 155, in sort_query\n    return QuerySorter(**kwargs)(query, *args)\nTypeError: __init__() got an unexpected keyword argument 'errors'\n```\n\nHowever `QuerySorter` has a `silent` parameter, which I guess is probably the opposite of what `errors` parameter is supposed to be. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/76", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/76/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/76/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/76", "id": 30772942, "node_id": "MDU6SXNzdWUzMDc3Mjk0Mg==", "number": 76, "title": "type \"json\" does not exist when creating my tables", "user": {"login": "kernity", "id": 660795, "node_id": "MDQ6VXNlcjY2MDc5NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/660795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kernity", "html_url": "https://github.com/kernity", "followers_url": "https://api.github.com/users/kernity/followers", "following_url": "https://api.github.com/users/kernity/following{/other_user}", "gists_url": "https://api.github.com/users/kernity/gists{/gist_id}", "starred_url": "https://api.github.com/users/kernity/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kernity/subscriptions", "organizations_url": "https://api.github.com/users/kernity/orgs", "repos_url": "https://api.github.com/users/kernity/repos", "events_url": "https://api.github.com/users/kernity/events{/privacy}", "received_events_url": "https://api.github.com/users/kernity/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-04-03T13:02:52Z", "updated_at": "2016-01-20T11:25:47Z", "closed_at": "2016-01-20T11:25:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \n\nI'm using the sqlachemy-utils JSON type with postgresql 9.1\n\nI know that JSON for PG exists from 9.2 but by reading the code I thought that it will do a check and use string in place of native JSON but it's not the case.\n\nI'm not sure that the only try/catch around the import is enough...I really don't understand how it's working. Can you help me to understand ? \n\n``` python\n....\ntry:\n    from sqlalchemy.dialects.postgresql import JSON\n    has_postgres_json = True\nexcept ImportError:\n    class PostgresJSONType(sa.types.UserDefinedType):\n        \"\"\"\n        Text search vector type for postgresql.\n        \"\"\"\n        def get_col_spec(self):\n            return 'json'\n\n    ischema_names['json'] = PostgresJSONType\n    has_postgres_json = False\n....\n```\n\nCan you help me ? Thank you\n\nKhalid\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/73", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/73/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/73/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/73", "id": 30214049, "node_id": "MDU6SXNzdWUzMDIxNDA0OQ==", "number": 73, "title": "Database agnostic BIT type ", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28858074, "node_id": "MDU6TGFiZWwyODg1ODA3NA==", "url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-03-26T14:09:08Z", "updated_at": "2014-04-25T16:39:01Z", "closed_at": "2014-04-25T16:39:01Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/72", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/72/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/72/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/72", "id": 30002752, "node_id": "MDU6SXNzdWUzMDAwMjc1Mg==", "number": 72, "title": "Limiting Generic Relationship", "user": {"login": "cam-stitt", "id": 186643, "node_id": "MDQ6VXNlcjE4NjY0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/186643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cam-stitt", "html_url": "https://github.com/cam-stitt", "followers_url": "https://api.github.com/users/cam-stitt/followers", "following_url": "https://api.github.com/users/cam-stitt/following{/other_user}", "gists_url": "https://api.github.com/users/cam-stitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/cam-stitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cam-stitt/subscriptions", "organizations_url": "https://api.github.com/users/cam-stitt/orgs", "repos_url": "https://api.github.com/users/cam-stitt/repos", "events_url": "https://api.github.com/users/cam-stitt/events{/privacy}", "received_events_url": "https://api.github.com/users/cam-stitt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-03-24T00:33:12Z", "updated_at": "2014-03-24T12:50:34Z", "closed_at": "2014-03-24T12:13:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just wanted to see if the following seems reasonable. If so, maybe we could add an example to the docs. I wanted a Generic Relationship, but I wanted to limit which tables it can relate to. Here is what I came up with extending the existing examples.\n\n``` python\nfrom sqlalchemy_utils import generic_relationship, ChoiceType\n\nclass User(Base):\n    __tablename__ = 'user'\n    id = sa.Column(sa.Integer, primary_key=True)\n\nclass Customer(Base):\n    __tablename__ = 'customer'\n    id = sa.Column(sa.Integer, primary_key=True)\n\nclass Event(Base):\n    __tablename__ = 'event'\n\n    CHOICES = [\n        ('User', 'User Type'),\n        ('Customer', 'Customer Type'),\n    ]\n\n    id = sa.Column(sa.Integer, primary_key=True)\n\n    # This is used to discriminate between the linked tables.\n    object_type = sa.Column(ChoiceType(CHOICES))\n\n    # This is used to point to the primary key of the linked row.\n    object_id = sa.Column(sa.Integer)\n\n    object = generic_relationship(object_type, object_id)\n```\n\nDoes this seem like it would work?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/71", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/71/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/71/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/71", "id": 29976697, "node_id": "MDU6SXNzdWUyOTk3NjY5Nw==", "number": 71, "title": "Add support working with VIEW ", "user": {"login": "klinkin", "id": 461927, "node_id": "MDQ6VXNlcjQ2MTkyNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/461927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klinkin", "html_url": "https://github.com/klinkin", "followers_url": "https://api.github.com/users/klinkin/followers", "following_url": "https://api.github.com/users/klinkin/following{/other_user}", "gists_url": "https://api.github.com/users/klinkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/klinkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klinkin/subscriptions", "organizations_url": "https://api.github.com/users/klinkin/orgs", "repos_url": "https://api.github.com/users/klinkin/repos", "events_url": "https://api.github.com/users/klinkin/events{/privacy}", "received_events_url": "https://api.github.com/users/klinkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-03-23T00:52:50Z", "updated_at": "2018-10-14T06:59:09Z", "closed_at": "2018-10-14T06:59:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "from receipt https://bitbucket.org/zzzeek/sqlalchemy/wiki/UsageRecipes/Views \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/69", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/69/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/69/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/69", "id": 28787606, "node_id": "MDU6SXNzdWUyODc4NzYwNg==", "number": 69, "title": "Single table inheritance support for generic_relationship", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-03-05T13:00:58Z", "updated_at": "2014-03-05T13:31:06Z", "closed_at": "2014-03-05T13:31:06Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/68", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/68/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/68/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/68", "id": 28776576, "node_id": "MDU6SXNzdWUyODc3NjU3Ng==", "number": 68, "title": "Composite primary key support for generic relationships", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28858074, "node_id": "MDU6TGFiZWwyODg1ODA3NA==", "url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-03-05T09:42:51Z", "updated_at": "2014-03-05T10:43:56Z", "closed_at": "2014-03-05T10:43:56Z", "author_association": "OWNER", "active_lock_reason": null, "body": "SQLAlchemy-Continuum's upcoming activity stream implementation needs this.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/67", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/67/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/67/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/67", "id": 28559108, "node_id": "MDU6SXNzdWUyODU1OTEwOA==", "number": 67, "title": "Generic relationships not working on abstract class inheritance", "user": {"login": "kvesteri", "id": 398714, "node_id": "MDQ6VXNlcjM5ODcxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/398714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvesteri", "html_url": "https://github.com/kvesteri", "followers_url": "https://api.github.com/users/kvesteri/followers", "following_url": "https://api.github.com/users/kvesteri/following{/other_user}", "gists_url": "https://api.github.com/users/kvesteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvesteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvesteri/subscriptions", "organizations_url": "https://api.github.com/users/kvesteri/orgs", "repos_url": "https://api.github.com/users/kvesteri/repos", "events_url": "https://api.github.com/users/kvesteri/events{/privacy}", "received_events_url": "https://api.github.com/users/kvesteri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-03-01T15:29:00Z", "updated_at": "2014-03-05T10:43:56Z", "closed_at": "2014-03-05T10:43:56Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/65", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/65/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/65/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/65", "id": 27560450, "node_id": "MDU6SXNzdWUyNzU2MDQ1MA==", "number": 65, "title": "ArrowType screws up UTC timestamps", "user": {"login": "nickretallack", "id": 13291, "node_id": "MDQ6VXNlcjEzMjkx", "avatar_url": "https://avatars3.githubusercontent.com/u/13291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickretallack", "html_url": "https://github.com/nickretallack", "followers_url": "https://api.github.com/users/nickretallack/followers", "following_url": "https://api.github.com/users/nickretallack/following{/other_user}", "gists_url": "https://api.github.com/users/nickretallack/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickretallack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickretallack/subscriptions", "organizations_url": "https://api.github.com/users/nickretallack/orgs", "repos_url": "https://api.github.com/users/nickretallack/repos", "events_url": "https://api.github.com/users/nickretallack/events{/privacy}", "received_events_url": "https://api.github.com/users/nickretallack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-02-13T23:04:34Z", "updated_at": "2014-02-14T10:38:02Z", "closed_at": "2014-02-14T10:38:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://gist.github.com/nickretallack/8985745\n\nBefore committing to the database I have one time.  When I retrieve it, I have a different time.  The time that actually shows up in the database is the same as the time that is retrieved, not the time that is set, so the problem must occur when saving the time.  The discrepancy is the same as the difference between my time zone and UTC, so it must be a time-zone-related issue.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/63", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/63/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/63/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/63", "id": 27325295, "node_id": "MDU6SXNzdWUyNzMyNTI5NQ==", "number": 63, "title": "UUIDType fails to detect postgresql dialect", "user": {"login": "nickretallack", "id": 13291, "node_id": "MDQ6VXNlcjEzMjkx", "avatar_url": "https://avatars3.githubusercontent.com/u/13291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickretallack", "html_url": "https://github.com/nickretallack", "followers_url": "https://api.github.com/users/nickretallack/followers", "following_url": "https://api.github.com/users/nickretallack/following{/other_user}", "gists_url": "https://api.github.com/users/nickretallack/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickretallack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickretallack/subscriptions", "organizations_url": "https://api.github.com/users/nickretallack/orgs", "repos_url": "https://api.github.com/users/nickretallack/repos", "events_url": "https://api.github.com/users/nickretallack/events{/privacy}", "received_events_url": "https://api.github.com/users/nickretallack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-02-11T04:49:10Z", "updated_at": "2014-02-14T06:15:42Z", "closed_at": "2014-02-14T06:15:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using UUIDType on postgres but it doesn't seem to notice this and is attempting to insert binary data instead.  This doesn't work.\n\n[The problem is here](https://github.com/kvesteri/sqlalchemy-utils/blob/master/sqlalchemy_utils/types/uuid.py#L62).  It compares the dialect to a string, but the dialect isn't a string.  It's `<sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x10e84f110>`.  It should be looking at `dialect.name` like it does [up here](https://github.com/kvesteri/sqlalchemy-utils/blob/master/sqlalchemy_utils/types/uuid.py#L35).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/61", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/61/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/61/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/61", "id": 25907760, "node_id": "MDU6SXNzdWUyNTkwNzc2MA==", "number": 61, "title": "Setting generic_relationship to None results in an Exception", "user": {"login": "tonymillion", "id": 316954, "node_id": "MDQ6VXNlcjMxNjk1NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/316954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonymillion", "html_url": "https://github.com/tonymillion", "followers_url": "https://api.github.com/users/tonymillion/followers", "following_url": "https://api.github.com/users/tonymillion/following{/other_user}", "gists_url": "https://api.github.com/users/tonymillion/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonymillion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonymillion/subscriptions", "organizations_url": "https://api.github.com/users/tonymillion/orgs", "repos_url": "https://api.github.com/users/tonymillion/repos", "events_url": "https://api.github.com/users/tonymillion/events{/privacy}", "received_events_url": "https://api.github.com/users/tonymillion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-01-20T09:43:44Z", "updated_at": "2014-01-20T19:31:09Z", "closed_at": "2014-01-20T19:31:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Expected result: relationship is cleared \"set to NULL in the db\", the object property should be None when accessed in subsequent calls.\n\n```\nException:\n  File \"user.py\", line 306, in add_activity\n    activity.object = None\n  File \"/sqlalchemy/orm/attributes.py\", line 220, in __set__\n    instance_dict(instance), value, None)\n  File \"/sqlalchemy_utils/generic.py\", line 55, in set\n    mapper = class_mapper(type(initiator))\n  File \"/sqlalchemy/orm/base.py\", line 379, in class_mapper\n    raise exc.UnmappedClassError(class_)\nUnmappedClassError: Class '__builtin__.NoneType' is not mapped\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/60", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/60/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/60/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/60", "id": 25497688, "node_id": "MDU6SXNzdWUyNTQ5NzY4OA==", "number": 60, "title": "tweaks and features", "user": {"login": "vltr", "id": 1540275, "node_id": "MDQ6VXNlcjE1NDAyNzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1540275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vltr", "html_url": "https://github.com/vltr", "followers_url": "https://api.github.com/users/vltr/followers", "following_url": "https://api.github.com/users/vltr/following{/other_user}", "gists_url": "https://api.github.com/users/vltr/gists{/gist_id}", "starred_url": "https://api.github.com/users/vltr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vltr/subscriptions", "organizations_url": "https://api.github.com/users/vltr/orgs", "repos_url": "https://api.github.com/users/vltr/repos", "events_url": "https://api.github.com/users/vltr/events{/privacy}", "received_events_url": "https://api.github.com/users/vltr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-01-13T13:46:33Z", "updated_at": "2014-10-10T13:10:17Z", "closed_at": "2014-10-10T13:10:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi! I was wondering if I could propose some features using a fork. I have a lot of sqlalchemy utils under the belt, including some tweaks for some of your types.\n\nbest regards,\nrichard.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/57", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/57/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/57/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/57", "id": 25317354, "node_id": "MDU6SXNzdWUyNTMxNzM1NA==", "number": 57, "title": "Can't modify JSONType fields", "user": {"login": "thusoy", "id": 1466123, "node_id": "MDQ6VXNlcjE0NjYxMjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1466123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thusoy", "html_url": "https://github.com/thusoy", "followers_url": "https://api.github.com/users/thusoy/followers", "following_url": "https://api.github.com/users/thusoy/following{/other_user}", "gists_url": "https://api.github.com/users/thusoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/thusoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thusoy/subscriptions", "organizations_url": "https://api.github.com/users/thusoy/orgs", "repos_url": "https://api.github.com/users/thusoy/repos", "events_url": "https://api.github.com/users/thusoy/events{/privacy}", "received_events_url": "https://api.github.com/users/thusoy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-01-09T13:02:21Z", "updated_at": "2014-01-12T10:03:02Z", "closed_at": "2014-01-12T10:03:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Trying to change JSONType fields results in SQLAlchemy complaining with `TypeError: unbound method compare_values() must be called with UnicodeText instance as first argument (got dict instance instead)`\n\nTest code:\n\n``` python\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\nfrom sqlalchemy_utils import JSONType\n\nconfig = {\n    'SQLALCHEMY_DATABASE_URI': 'sqlite://',\n    'DEBUG': True,\n}\n\napp = Flask('jsontest')\napp.config.update(config)\ndb = SQLAlchemy(app)\n\nclass Person(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    properties = db.Column(JSONType)\n\n@app.route('/create')\ndef create():\n    person = Person()\n    person.properties = {'name': 'Gregor Samsa'}\n    db.session.add(person)\n    db.session.commit()\n    return str(person.properties)\n\n@app.route('/get')\ndef get():\n    return str(Person.query.first().properties)\n\n@app.route('/edit')\ndef edit():\n    person = Person.query.first()\n    person.properties = {'name': 'Kafka'}\n    db.session.commit()\n    return str(person.properties)\n\n\nif __name__ == '__main__':\n    with app.test_request_context():\n        db.create_all()\n    client = app.test_client()\n    print client.get('/create').data\n    print client.get('/get').data\n    print client.get('/edit').data\n```\n\n`/create` and `/get` works just like expected, but the final call to `/edit` crashes.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/55", "repository_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils", "labels_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/55/comments", "events_url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/issues/55/events", "html_url": "https://github.com/kvesteri/sqlalchemy-utils/issues/55", "id": 25019240, "node_id": "MDU6SXNzdWUyNTAxOTI0MA==", "number": 55, "title": "Not compatible with SQLAlchemy 0.9", "user": {"login": "jpvanhal", "id": 250983, "node_id": "MDQ6VXNlcjI1MDk4Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/250983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpvanhal", "html_url": "https://github.com/jpvanhal", "followers_url": "https://api.github.com/users/jpvanhal/followers", "following_url": "https://api.github.com/users/jpvanhal/following{/other_user}", "gists_url": "https://api.github.com/users/jpvanhal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpvanhal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpvanhal/subscriptions", "organizations_url": "https://api.github.com/users/jpvanhal/orgs", "repos_url": "https://api.github.com/users/jpvanhal/repos", "events_url": "https://api.github.com/users/jpvanhal/events{/privacy}", "received_events_url": "https://api.github.com/users/jpvanhal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28858072, "node_id": "MDU6TGFiZWwyODg1ODA3Mg==", "url": "https://api.github.com/repos/kvesteri/sqlalchemy-utils/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-01-03T15:30:08Z", "updated_at": "2014-01-04T13:26:45Z", "closed_at": "2014-01-04T13:26:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running the tests with SQLAlchemy 0.9.0 results in a bunch errors like these:\n\n```\n../../../../.virtualenvs/sqlalchemy-utils/lib/python2.7/site-packages/py/_path/local.py:608: in pyimport\n>               __import__(pkgpath.basename)\ntests/__init__.py:9: in <module>\n>   from sqlalchemy_utils import (\nsqlalchemy_utils/__init__.py:1: in <module>\n>   from .aggregates import aggregated\nsqlalchemy_utils/aggregates.py:257: in <module>\n>   from sqlalchemy.sql.expression import _FunctionGenerator\nE   ImportError: cannot import name _FunctionGenerator\n```\n", "performed_via_github_app": null, "score": 1.0}]}