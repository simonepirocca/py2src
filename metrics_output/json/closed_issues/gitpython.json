{"total_count": 559, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1047", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1047/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1047/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1047/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1047", "id": 678925551, "node_id": "MDU6SXNzdWU2Nzg5MjU1NTE=", "number": 1047, "title": "'git log --oneline' behaviour is different in GitPython as compared to the same command in Git ", "user": {"login": "europa502", "id": 26405791, "node_id": "MDQ6VXNlcjI2NDA1Nzkx", "avatar_url": "https://avatars0.githubusercontent.com/u/26405791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/europa502", "html_url": "https://github.com/europa502", "followers_url": "https://api.github.com/users/europa502/followers", "following_url": "https://api.github.com/users/europa502/following{/other_user}", "gists_url": "https://api.github.com/users/europa502/gists{/gist_id}", "starred_url": "https://api.github.com/users/europa502/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/europa502/subscriptions", "organizations_url": "https://api.github.com/users/europa502/orgs", "repos_url": "https://api.github.com/users/europa502/repos", "events_url": "https://api.github.com/users/europa502/events{/privacy}", "received_events_url": "https://api.github.com/users/europa502/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 262746125, "node_id": "MDU6TGFiZWwyNjI3NDYxMjU=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/wont%20fix", "name": "wont fix", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-14T06:08:10Z", "updated_at": "2020-08-20T03:50:10Z", "closed_at": "2020-08-20T03:50:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, when I execute 'git log --oneline' I get -\r\n```\r\n99ace38 (tag: 2.0.52) commit 1                           \r\n8cd6854 commit 2- fix                                                                \r\nbf801d8 (tag: 2.0.51) random commit 1\r\n2f9b046 adding simulated devices                                                                                       \r\n8e4240d Bug fix(sleep)-error fixed for subtest\r\n```\r\nand 'git log --oneline --nowalk --tags' gives me - \r\n```\r\n99ace38 (tag: 2.0.52) commit 1                           \r\n8cd6854 (tag: 2.0.51) commit 2- fix                                                                \r\nbf801d8 (tag: 2.0.51) random commit 1\r\n2f9b046 (tag: 2.0.50)adding simulated devices                                                                                       \r\n8e4240d (tag: 2.0.50)Bug fix(sleep)-error fixed for subtest    \r\n```\r\nThe above output is what is desired. \r\nBut when I run it from python script I get the result without tags -\r\n\r\n```\r\nrepo=Repo(\".\")\r\nlog_lines = repo.git.log('--oneline', '--tags','--no-walk')\r\n>>> log_lines \r\n\r\n99ace38 commit 1                           \r\n8cd6854 commit 2- fix                                                                \r\nbf801d8 random commit 1\r\n2f9b046 adding simulated devices                                                                                       \r\n8e4240d Bug fix(sleep)-error fixed for subtest\r\n```\r\nI wonder if the GitPython is using git binary and interacting it with via shell?\r\nIs there any way I can get the same output as that from shell?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1046", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1046/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1046/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1046/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1046", "id": 674592046, "node_id": "MDU6SXNzdWU2NzQ1OTIwNDY=", "number": 1046, "title": "Only commit some staged files using GitPython", "user": {"login": "Imipenem", "id": 31141763, "node_id": "MDQ6VXNlcjMxMTQxNzYz", "avatar_url": "https://avatars3.githubusercontent.com/u/31141763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Imipenem", "html_url": "https://github.com/Imipenem", "followers_url": "https://api.github.com/users/Imipenem/followers", "following_url": "https://api.github.com/users/Imipenem/following{/other_user}", "gists_url": "https://api.github.com/users/Imipenem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Imipenem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Imipenem/subscriptions", "organizations_url": "https://api.github.com/users/Imipenem/orgs", "repos_url": "https://api.github.com/users/Imipenem/repos", "events_url": "https://api.github.com/users/Imipenem/events{/privacy}", "received_events_url": "https://api.github.com/users/Imipenem/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-06T20:47:58Z", "updated_at": "2020-08-12T12:40:21Z", "closed_at": "2020-08-06T20:49:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI'm wondering if there's a way using GitPython to only commit certain staged files like one can do using `git commit [some files]`.\r\n\r\nIs this possible? I searched the documentation and tried passing a list with only some files to the `git.commit()` but it threw the following error: `Parent commit ''.cookietemple.yml'' must be of type <class 'git.objects.commit.Commit'>`\r\n\r\nClosing this one cause basically the same question as #985 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1045", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1045/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1045/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1045/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1045", "id": 669998633, "node_id": "MDU6SXNzdWU2Njk5OTg2MzM=", "number": 1045, "title": "GitPython - [CRITICAL] No suitable gitfs provider module is installed - even installation gone through", "user": {"login": "ronak2303", "id": 67431604, "node_id": "MDQ6VXNlcjY3NDMxNjA0", "avatar_url": "https://avatars0.githubusercontent.com/u/67431604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronak2303", "html_url": "https://github.com/ronak2303", "followers_url": "https://api.github.com/users/ronak2303/followers", "following_url": "https://api.github.com/users/ronak2303/following{/other_user}", "gists_url": "https://api.github.com/users/ronak2303/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronak2303/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronak2303/subscriptions", "organizations_url": "https://api.github.com/users/ronak2303/orgs", "repos_url": "https://api.github.com/users/ronak2303/repos", "events_url": "https://api.github.com/users/ronak2303/events{/privacy}", "received_events_url": "https://api.github.com/users/ronak2303/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-31T16:38:27Z", "updated_at": "2020-08-12T12:26:24Z", "closed_at": "2020-08-12T12:26:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "i am trying to install gitpython 2.0.9 on salt master.\r\ni tried installing gitpython but when i put gitfs in master i got message \"[CRITICAL] No suitable gitfs provider module is installed.\"\r\nso tried installing gitpython mutliple times in between i recycled salt-master twice, 1st when i added gitfs entry and 2nd when i remove gitfs entry.\r\n----------\r\n          ID: GitPython\r\n    Function: pip.installed\r\n        Name: GitPython < 2.0.9\r\n      Result: True\r\n     Comment: All packages were successfully installed\r\n     Started: 15:58:24.339041\r\n    Duration: 1553.285 ms\r\n     Changes:\r\n              ----------\r\n              GitPython==2.0.8:\r\n                  Installed\r\n\r\nonce i did that and i tried installing gitpython, i started getting below error to install gitpython 2.0.9\r\n\r\n          ID: GitPython\r\n    Function: pip.installed\r\n        Name: GitPython < 2.1.14\r\n      Result: False\r\n     Comment: An exception occurred in this state: Traceback (most recent call last):\r\n                File \"/usr/lib/python2.7/site-packages/salt/state.py\", line 1933, in call\r\n                  **cdata['kwargs'])\r\n                File \"/usr/lib/python2.7/site-packages/salt/loader.py\", line 1951, in wrapper\r\n                  return f(*args, **kwargs)\r\n                File \"/usr/lib/python2.7/site-packages/salt/states/pip_state.py\", line 812, in installed\r\n                  **kwargs)\r\n                File \"/usr/lib/python2.7/site-packages/salt/states/pip_state.py\", line 314, in _check_if_installed\r\n                  for version in reversed(available_versions):\r\n              TypeError: argument to reversed() must be a sequence\r\n     Started: 16:06:01.701500\r\n    Duration: 368661.261 ms\r\n     Changes:\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1043", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1043/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1043/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1043/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1043", "id": 664573658, "node_id": "MDU6SXNzdWU2NjQ1NzM2NTg=", "number": 1043, "title": " git.config.GitConfigParser: alias of git.config.GitConfigParser", "user": {"login": "haferburg", "id": 4941909, "node_id": "MDQ6VXNlcjQ5NDE5MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4941909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haferburg", "html_url": "https://github.com/haferburg", "followers_url": "https://api.github.com/users/haferburg/followers", "following_url": "https://api.github.com/users/haferburg/following{/other_user}", "gists_url": "https://api.github.com/users/haferburg/gists{/gist_id}", "starred_url": "https://api.github.com/users/haferburg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haferburg/subscriptions", "organizations_url": "https://api.github.com/users/haferburg/orgs", "repos_url": "https://api.github.com/users/haferburg/repos", "events_url": "https://api.github.com/users/haferburg/events{/privacy}", "received_events_url": "https://api.github.com/users/haferburg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-23T15:29:28Z", "updated_at": "2020-08-12T12:06:25Z", "closed_at": "2020-08-12T12:06:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation doesn't make much sense here: https://gitpython.readthedocs.io/en/stable/reference.html#module-git.config\r\n\r\n![image](https://user-images.githubusercontent.com/4941909/88305422-c911ad00-cd09-11ea-9b01-8202430e27c2.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1041", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1041/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1041/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1041/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1041", "id": 663597130, "node_id": "MDU6SXNzdWU2NjM1OTcxMzA=", "number": 1041, "title": "Is there a way to get parsed \"git log -L\" results?", "user": {"login": "txhwutu", "id": 17423217, "node_id": "MDQ6VXNlcjE3NDIzMjE3", "avatar_url": "https://avatars3.githubusercontent.com/u/17423217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/txhwutu", "html_url": "https://github.com/txhwutu", "followers_url": "https://api.github.com/users/txhwutu/followers", "following_url": "https://api.github.com/users/txhwutu/following{/other_user}", "gists_url": "https://api.github.com/users/txhwutu/gists{/gist_id}", "starred_url": "https://api.github.com/users/txhwutu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/txhwutu/subscriptions", "organizations_url": "https://api.github.com/users/txhwutu/orgs", "repos_url": "https://api.github.com/users/txhwutu/repos", "events_url": "https://api.github.com/users/txhwutu/events{/privacy}", "received_events_url": "https://api.github.com/users/txhwutu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-22T09:01:49Z", "updated_at": "2020-08-12T12:02:26Z", "closed_at": "2020-08-12T12:02:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can I get structured results  by gitpython?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1040", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1040/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1040/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1040/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1040", "id": 663072573, "node_id": "MDU6SXNzdWU2NjMwNzI1NzM=", "number": 1040, "title": "How do you check for differences?", "user": {"login": "jamesgeddes", "id": 14872636, "node_id": "MDQ6VXNlcjE0ODcyNjM2", "avatar_url": "https://avatars1.githubusercontent.com/u/14872636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesgeddes", "html_url": "https://github.com/jamesgeddes", "followers_url": "https://api.github.com/users/jamesgeddes/followers", "following_url": "https://api.github.com/users/jamesgeddes/following{/other_user}", "gists_url": "https://api.github.com/users/jamesgeddes/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesgeddes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesgeddes/subscriptions", "organizations_url": "https://api.github.com/users/jamesgeddes/orgs", "repos_url": "https://api.github.com/users/jamesgeddes/repos", "events_url": "https://api.github.com/users/jamesgeddes/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesgeddes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-21T14:43:54Z", "updated_at": "2020-08-12T12:01:15Z", "closed_at": "2020-07-21T14:56:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Bit of a n00b question so apologies in advance.\r\n\r\nI am trying to write a little script that,\r\n\r\n1. `pull` the repo\r\n1. Check if that `pull` included any changes\r\n1. If there have been changes, restart a target program\r\n\r\nI have found several ways of checking for changes but none seem to work. Each time, I tested by making a change in my sandbox repo directly on GitHub and then executed the pull, so that the change is applied on my PC. For example, \r\n\r\n`    changed_files = [item.a_path for item in repo.index.diff(None)]`\r\n\r\nAlways appears to output an empty list. This seems to be what the [tutorial](https://gitpython.readthedocs.io/en/stable/tutorial.html#obtaining-diff-information) suggests so I'm not sure why it does not work.\r\n\r\n\r\n```\r\n    current = repo.head.commit\r\n\r\n    if current == repo.head.commit:\r\n        print(\"Repo not changed. Sleep mode activated.\")\r\n        return 0\r\n    else:\r\n        print(\"Repo changed! Activated.\")\r\n        return 1\r\n```\r\nAlways returns `0`.\r\n\r\n\r\n```\r\n    diff = repo.git.diff(repo.head.commit.tree)\r\n    print(diff)\r\n```\r\nWhen I checked the output when there was a change vs the output where there was no change, both outputs were the same. \r\n\r\nWhat am I doing wrong here?\r\n\r\nI have also found a [SO question](https://stackoverflow.com/questions/50633456/gitpython-check-if-git-pull-changed-local-files) that was asked some time ago but never answered, so I'm not alone in this! Comments in that suggested `git diff` however I think I have tried that with the first method.\r\n\r\nWhat is the best way to check if a pull has introduced changes since the last pull?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1036", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1036/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1036/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1036/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1036", "id": 657260164, "node_id": "MDU6SXNzdWU2NTcyNjAxNjQ=", "number": 1036, "title": "get the last commit id", "user": {"login": "xwjBupt", "id": 35280631, "node_id": "MDQ6VXNlcjM1MjgwNjMx", "avatar_url": "https://avatars3.githubusercontent.com/u/35280631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xwjBupt", "html_url": "https://github.com/xwjBupt", "followers_url": "https://api.github.com/users/xwjBupt/followers", "following_url": "https://api.github.com/users/xwjBupt/following{/other_user}", "gists_url": "https://api.github.com/users/xwjBupt/gists{/gist_id}", "starred_url": "https://api.github.com/users/xwjBupt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xwjBupt/subscriptions", "organizations_url": "https://api.github.com/users/xwjBupt/orgs", "repos_url": "https://api.github.com/users/xwjBupt/repos", "events_url": "https://api.github.com/users/xwjBupt/events{/privacy}", "received_events_url": "https://api.github.com/users/xwjBupt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-15T10:58:40Z", "updated_at": "2020-07-15T23:12:23Z", "closed_at": "2020-07-15T23:12:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi ,how to use gitpython get the last commit id ?thank you!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1032", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1032/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1032/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1032/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1032", "id": 655557746, "node_id": "MDU6SXNzdWU2NTU1NTc3NDY=", "number": 1032, "title": "Tutorial examples in documentation no longer displaying", "user": {"login": "kiancross", "id": 11011464, "node_id": "MDQ6VXNlcjExMDExNDY0", "avatar_url": "https://avatars0.githubusercontent.com/u/11011464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiancross", "html_url": "https://github.com/kiancross", "followers_url": "https://api.github.com/users/kiancross/followers", "following_url": "https://api.github.com/users/kiancross/following{/other_user}", "gists_url": "https://api.github.com/users/kiancross/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiancross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiancross/subscriptions", "organizations_url": "https://api.github.com/users/kiancross/orgs", "repos_url": "https://api.github.com/users/kiancross/repos", "events_url": "https://api.github.com/users/kiancross/events{/privacy}", "received_events_url": "https://api.github.com/users/kiancross/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-13T03:39:08Z", "updated_at": "2020-07-13T13:04:23Z", "closed_at": "2020-07-13T13:04:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/gitpython-developers/GitPython/pull/1031 has broken the documentation examples at: https://gitpython.readthedocs.io/en/stable/tutorial.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1030", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1030/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1030/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1030/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1030", "id": 655366070, "node_id": "MDU6SXNzdWU2NTUzNjYwNzA=", "number": 1030, "title": "ModuleNotFoundError: No module named 'git.objects'", "user": {"login": "HappyEinara", "id": 13725146, "node_id": "MDQ6VXNlcjEzNzI1MTQ2", "avatar_url": "https://avatars3.githubusercontent.com/u/13725146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HappyEinara", "html_url": "https://github.com/HappyEinara", "followers_url": "https://api.github.com/users/HappyEinara/followers", "following_url": "https://api.github.com/users/HappyEinara/following{/other_user}", "gists_url": "https://api.github.com/users/HappyEinara/gists{/gist_id}", "starred_url": "https://api.github.com/users/HappyEinara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HappyEinara/subscriptions", "organizations_url": "https://api.github.com/users/HappyEinara/orgs", "repos_url": "https://api.github.com/users/HappyEinara/repos", "events_url": "https://api.github.com/users/HappyEinara/events{/privacy}", "received_events_url": "https://api.github.com/users/HappyEinara/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-12T09:36:41Z", "updated_at": "2020-07-13T02:15:11Z", "closed_at": "2020-07-13T02:15:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "The release just now might have broken something.\r\n\r\nSteps to reproduce:\r\n- Fresh venv, python3.8\r\n- pip install --upgrade gitpython\r\n- python\r\nthen:\r\n```\r\n>>> import git\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/vagrant/.virtualenvs/tmpgit/lib/python3.8/site-packages/git/__init__.py\", line 41, in <module>\r\n    from git.objects import *               # @NoMove @IgnorePep8\r\nModuleNotFoundError: No module named 'git.objects'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1029", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1029/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1029/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1029/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1029", "id": 655084011, "node_id": "MDU6SXNzdWU2NTUwODQwMTE=", "number": 1029, "title": "Failing to parse header on simple example", "user": {"login": "robambalu", "id": 28680700, "node_id": "MDQ6VXNlcjI4NjgwNzAw", "avatar_url": "https://avatars3.githubusercontent.com/u/28680700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robambalu", "html_url": "https://github.com/robambalu", "followers_url": "https://api.github.com/users/robambalu/followers", "following_url": "https://api.github.com/users/robambalu/following{/other_user}", "gists_url": "https://api.github.com/users/robambalu/gists{/gist_id}", "starred_url": "https://api.github.com/users/robambalu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robambalu/subscriptions", "organizations_url": "https://api.github.com/users/robambalu/orgs", "repos_url": "https://api.github.com/users/robambalu/repos", "events_url": "https://api.github.com/users/robambalu/events{/privacy}", "received_events_url": "https://api.github.com/users/robambalu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 262746125, "node_id": "MDU6TGFiZWwyNjI3NDYxMjU=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/wont%20fix", "name": "wont fix", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-10T23:25:47Z", "updated_at": "2020-07-12T02:23:18Z", "closed_at": "2020-07-12T02:23:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just installed gitpython and on my very first attempt I'm hitting strange errors.\r\nSimple example, NYC corona virus github:\r\ngit clone https://github.com/nychealth/coronavirus-data\r\n\r\nin python, create repo:\r\n>>> r = Repo( 'coronavirus-data')\r\n\r\nlets get the latest commit date ( poof )\r\n\r\n>>> r.head.commit.committed_date\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"C:\\Users\\robam\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\gitdb\\util.py\", line 253, in __getattr__\r\n    self._set_cache_(attr)\r\n  File \"C:\\Users\\robam\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\git\\objects\\commit.py\", line 142, in _set_cache_\r\n    _binsha, _typename, self.size, stream = self.repo.odb.stream(self.binsha)\r\n  File \"C:\\Users\\robam\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\git\\db.py\", line 42, in stream\r\n    hexsha, typename, size, stream = self._git.stream_object_data(bin_to_hex(sha))\r\n  File \"C:\\Users\\robam\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\git\\cmd.py\", line 1085, in stream_object_data\r\n    hexsha, typename, size = self.__get_object_header(cmd, ref)\r\n  File \"C:\\Users\\robam\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\git\\cmd.py\", line 1057, in __get_object_header\r\n    return self._parse_object_header(cmd.stdout.readline())\r\n  File \"C:\\Users\\robam\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\git\\cmd.py\", line 1021, in _parse_object_header\r\n    raise ValueError(\"SHA %s could not be resolved, git returned: %r\" % (tokens[0], header_line.strip()))\r\nValueError: SHA b'10004,Financial' could not be resolved, git returned: b'10004,Financial District,Manhattan,33,903.96,3650.61,1,27.39,6.75,489'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1027", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1027/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1027/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1027/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1027", "id": 652556674, "node_id": "MDU6SXNzdWU2NTI1NTY2NzQ=", "number": 1027, "title": "Don't install unittest code by default", "user": {"login": "priv-kweihmann", "id": 46938494, "node_id": "MDQ6VXNlcjQ2OTM4NDk0", "avatar_url": "https://avatars1.githubusercontent.com/u/46938494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/priv-kweihmann", "html_url": "https://github.com/priv-kweihmann", "followers_url": "https://api.github.com/users/priv-kweihmann/followers", "following_url": "https://api.github.com/users/priv-kweihmann/following{/other_user}", "gists_url": "https://api.github.com/users/priv-kweihmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/priv-kweihmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/priv-kweihmann/subscriptions", "organizations_url": "https://api.github.com/users/priv-kweihmann/orgs", "repos_url": "https://api.github.com/users/priv-kweihmann/repos", "events_url": "https://api.github.com/users/priv-kweihmann/events{/privacy}", "received_events_url": "https://api.github.com/users/priv-kweihmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-07T19:12:26Z", "updated_at": "2020-07-12T09:13:11Z", "closed_at": "2020-07-12T09:13:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When doing `python3 setup.py install` on a local checkout of the code, files from `git/test` will be installed into the standard site-packages directory.\r\nThis mean that theoretically even the requirements from `test-requirements.txt` are mandatory for the base package and secondly it isn't necessary as the chances that an user is actually using the test code are pretty low.\r\nSo overall it doesn't make much sense to me.\r\n\r\nIs there any way to avoid having the test files installed via setuptools?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1026", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1026/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1026/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1026/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1026", "id": 651280824, "node_id": "MDU6SXNzdWU2NTEyODA4MjQ=", "number": 1026, "title": "Clone repository and \u201ccheckout\u201d to \"tags/<my_tag>\"", "user": {"login": "conFusl", "id": 7404242, "node_id": "MDQ6VXNlcjc0MDQyNDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7404242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/conFusl", "html_url": "https://github.com/conFusl", "followers_url": "https://api.github.com/users/conFusl/followers", "following_url": "https://api.github.com/users/conFusl/following{/other_user}", "gists_url": "https://api.github.com/users/conFusl/gists{/gist_id}", "starred_url": "https://api.github.com/users/conFusl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/conFusl/subscriptions", "organizations_url": "https://api.github.com/users/conFusl/orgs", "repos_url": "https://api.github.com/users/conFusl/repos", "events_url": "https://api.github.com/users/conFusl/events{/privacy}", "received_events_url": "https://api.github.com/users/conFusl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-06T06:19:38Z", "updated_at": "2020-08-04T08:30:13Z", "closed_at": "2020-07-06T07:43:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "More a general Q/A than an issue, but I'm struggling with this topic. \r\n\r\nI clone a repository using `Repo.clone_from()`. Afterwards, I simply want to switch to a specified tag within the repository, similar to `git checkout tags/<my_tag>`.\r\n\r\nI found the following solution, but it resets HEAD of my master branch, which is not what I want:\r\n```\r\n        logging.info(\"Cloning repo... \" + name)\r\n        repo = Repo.clone_from(url, path)\r\n        repo.head.reference = repo.tags[tag].commit\r\n```\r\nIs it possible to perform something like a `git checkout tags/<my_tag>` where I just switch to the current tag, but am able to switch also back to the current / latest commit on the repository?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1021", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1021/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1021/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1021/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1021", "id": 637534587, "node_id": "MDU6SXNzdWU2Mzc1MzQ1ODc=", "number": 1021, "title": "index.add() method add support for \"chmod=+x\"", "user": {"login": "ericsunplus", "id": 7379534, "node_id": "MDQ6VXNlcjczNzk1MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7379534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericsunplus", "html_url": "https://github.com/ericsunplus", "followers_url": "https://api.github.com/users/ericsunplus/followers", "following_url": "https://api.github.com/users/ericsunplus/following{/other_user}", "gists_url": "https://api.github.com/users/ericsunplus/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericsunplus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericsunplus/subscriptions", "organizations_url": "https://api.github.com/users/ericsunplus/orgs", "repos_url": "https://api.github.com/users/ericsunplus/repos", "events_url": "https://api.github.com/users/ericsunplus/events{/privacy}", "received_events_url": "https://api.github.com/users/ericsunplus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-12T07:05:21Z", "updated_at": "2020-06-21T17:04:48Z", "closed_at": "2020-06-13T09:54:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Windows OS, if you have a unix file with permission 100755 `-rwxr-xr-x`, after `git add`, the staged file will miss the `x` permission and becomes 100644 `-rw-r--r--` as shown in `git ls-files --stage`. [git add](https://git-scm.com/docs/git-add#Documentation/git-add.txt) has the option `--chmod=+x' to handle this problem. Can gitpython also add this feature in index.add() method?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1020", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1020/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1020/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1020/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1020", "id": 637223821, "node_id": "MDU6SXNzdWU2MzcyMjM4MjE=", "number": 1020, "title": "gitpython's clone_from() throws exceptions while cloning a repo when called through an flask API", "user": {"login": "ShetGanesh", "id": 17085000, "node_id": "MDQ6VXNlcjE3MDg1MDAw", "avatar_url": "https://avatars0.githubusercontent.com/u/17085000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShetGanesh", "html_url": "https://github.com/ShetGanesh", "followers_url": "https://api.github.com/users/ShetGanesh/followers", "following_url": "https://api.github.com/users/ShetGanesh/following{/other_user}", "gists_url": "https://api.github.com/users/ShetGanesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShetGanesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShetGanesh/subscriptions", "organizations_url": "https://api.github.com/users/ShetGanesh/orgs", "repos_url": "https://api.github.com/users/ShetGanesh/repos", "events_url": "https://api.github.com/users/ShetGanesh/events{/privacy}", "received_events_url": "https://api.github.com/users/ShetGanesh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60656, "node_id": "MDU6TGFiZWw2MDY1Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/waiting%20for%20feedback", "name": "waiting for feedback", "color": "ff8c00", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-11T18:09:56Z", "updated_at": "2020-06-13T10:08:36Z", "closed_at": "2020-06-13T10:08:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have python snippet which clones a github repo over https access tokens, creates a branch modifies the content, and pushes back. Below code works perfectly fine if run directly via python interpreter on command line. But I have a use case where I m exposing this functionality as an API via python's flask server. Flask server is run through a python's \"gunicorn\" framework which is a Python WSGI HTTP Server. Now when I use the API call, it is throwing errors while cloning the repo. I have tested it by only running the flask server and the API call works perfectly fine and does the work without raising exceptions. But the same Flask API when run through Python's gunicorn I m getting this error.\r\n\r\nNot sure how to get rid of that error.\r\n\r\nCode Snippet:\r\n```\r\n import git\r\n    .........\r\n    .........\r\n    .........\r\n    try:\r\n        _repo = git.Repo.clone_from(\r\n            f\"https://{_token}:x-oauth-basic@{self.git_url}\", _repo_dir\r\n        )\r\n        _new_branch = _repo.create_head(_branch)\r\n        _repo.head.set_reference(_new_branch)\r\n    except Exception as e:\r\n        return False, str(e)\r\n    _update_path = os.path.join(\r\n        _repo_dir, f\"repo1/config/\"\r\n    )\r\n    if not os.path.exists(_update_path):\r\n        os.mkdir(_update_path)\r\n    with open(f\"{_update_path}/users.json\", \"w+\") as _fd:\r\n        json.dump(_users_json, _fd, indent=4)\r\n    _repo.git.add(A=True)\r\n    _repo.git.commit(m=_title)\r\n    _repo.git.push(\"origin\", _branch)\r\n```\r\n\r\nERROR:\r\n```\r\n2020-06-11 17:18:16,714 DEBUG: Popen(['git', 'clone', '-v', 'https://<ACCESS_TOKEN>:x-oauth-basic@github.com/ganesh/repo1.git', '/tmp/folder-1234_1591895896.185123'], cwd=/opt/ganesh, universal_newlines=True, shell=None, istream=None)\r\n2020-06-11 17:18:16,739 DEBUG: Cmd(['git', 'clone', '-v', 'https://<ACCESS_TOKEN>:x-oauth-basic@github.com/ganesh/repo1.git', '/tmp/folder-1234_1591895896.185123'])'s unused stdout: Cloning into '/tmp/folder-1234_1591895896.185123'...\r\n\r\n2020-06-11 17:18:16,740 DEBUG: AutoInterrupt wait stderr: b'Error reading command stream\\n'\r\n```\r\n\r\nIt looks more like gitpython is outputting something while doing the clone as a stream and nothing is reading/listening to it and it goes and raise an exception? This issue is not faced while directly cloning the repo using the commands in debug log nor when running the script via python interpreter directly. I believe this is happening because gunicorn is a WSGI HTTP Server in which case the processes spawned are handed over to Unix systems Init process (PID 1)\r\n\r\nHow this exception can be disabled for applications running behind gunicorn or anything which works more like an HTTP server? or Can this be better addressed in later versions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1017", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1017/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1017/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1017/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1017", "id": 631280430, "node_id": "MDU6SXNzdWU2MzEyODA0MzA=", "number": 1017, "title": "error InvalidGitRepositoryError(epath)", "user": {"login": "wind91725", "id": 40046669, "node_id": "MDQ6VXNlcjQwMDQ2NjY5", "avatar_url": "https://avatars2.githubusercontent.com/u/40046669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wind91725", "html_url": "https://github.com/wind91725", "followers_url": "https://api.github.com/users/wind91725/followers", "following_url": "https://api.github.com/users/wind91725/following{/other_user}", "gists_url": "https://api.github.com/users/wind91725/gists{/gist_id}", "starred_url": "https://api.github.com/users/wind91725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wind91725/subscriptions", "organizations_url": "https://api.github.com/users/wind91725/orgs", "repos_url": "https://api.github.com/users/wind91725/repos", "events_url": "https://api.github.com/users/wind91725/events{/privacy}", "received_events_url": "https://api.github.com/users/wind91725/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-05T03:19:09Z", "updated_at": "2020-06-05T03:44:49Z", "closed_at": "2020-06-05T03:44:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "my GitPython==3.1.3\uff0cmy error below\uff0chow can i solve the issus\uff1fplease help me\uff0cthank you!\r\n  File \"tools/run.py\", line 88, in <module>\r\n    run()\r\n  File \"tools/run.py\", line 75, in run\r\n    trainer.load()\r\n  File \"/data/home/share1/pythia/pythia/trainers/base_trainer.py\", line 49, in load\r\n    self.load_extras()\r\n  File \"/data/home/share1/pythia/pythia/trainers/base_trainer.py\", line 146, in load_extras\r\n    self.checkpoint = Checkpoint(self)\r\n  File \"/data/home/share1/pythia/pythia/utils/checkpoint.py\", line 51, in __init__\r\n    self.repo = git.Repo(self.repo_path)\r\n  File \"/data/home/share1/36/anaconda3/envs/pythia/lib/python3.6/site-packages/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /data/home/share1/pythia\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1014", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1014/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1014/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1014/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1014", "id": 627636693, "node_id": "MDU6SXNzdWU2Mjc2MzY2OTM=", "number": 1014, "title": "git v2.27.0-rc0~150^2 changed output on pull breaking GitPython parsing", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars3.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180722, "node_id": "MDU6TGFiZWwxMTgwNzIy", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/critical", "name": "critical", "color": "e10c02", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/38", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/38", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/38/labels", "id": 5384624, "node_id": "MDk6TWlsZXN0b25lNTM4NDYyNA==", "number": 38, "title": "v3.1.3 - Bugfixes", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2020-05-05T06:12:44Z", "updated_at": "2020-05-31T03:15:40Z", "due_on": null, "closed_at": "2020-05-31T03:15:40Z"}, "comments": 0, "created_at": "2020-05-30T02:47:32Z", "updated_at": "2020-05-31T03:09:31Z", "closed_at": "2020-05-31T03:08:58Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "our original issue in datalad: https://github.com/datalad/datalad/issues/4592\r\n\r\nfound [issue in debian](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=961702) initially against fdroidserver then reassigned against GitPython (python3-git pkg)\r\n\r\n```\r\n  File \"/build/datalad-0.12.7/.pybuild/cpython3_3.8_datalad/build/datalad/support/gitrepo.py\", line 2209, in _call_gitpy_with_progress\r\n    ret = callable(**git_kwargs)\r\n  File \"/usr/lib/python3/dist-packages/git/remote.py\", line 814, in pull\r\n    res = self._get_fetch_info_from_stderr(proc, progress)\r\n  File \"/usr/lib/python3/dist-packages/git/remote.py\", line 710, in _get_fetch_info_from_stderr\r\n    output.extend(FetchInfo._from_line(self.repo, err_line, fetch_line)\r\n  File \"/usr/lib/python3/dist-packages/git/remote.py\", line 710, in <genexpr>\r\n    output.extend(FetchInfo._from_line(self.repo, err_line, fetch_line)\r\n  File \"/usr/lib/python3/dist-packages/git/remote.py\", line 294, in _from_line\r\n    raise ValueError(\"Failed to parse line: %r\" % line)\r\nValueError: Failed to parse line: '  git config pull.rebase false  # merge (the default strategy)'\r\n```\r\n\r\nbisected to\r\n\r\nd18c950a69f3a24e1e3add3d9fc427641f53e12b is the first bad commit\r\ncommit d18c950a69f3a24e1e3add3d9fc427641f53e12b\r\nAuthor: Alex Henrie <alexhenrie24@gmail.com>\r\nDate:   Mon Mar 9 21:54:20 2020 -0600\r\n\r\n    pull: warn if the user didn't say whether to rebase or to merge\r\n    \r\n    Often novice Git users forget to say \"pull --rebase\" and end up with an\r\n    unnecessary merge from upstream. What they usually want is either \"pull\r\n    --rebase\" in the simpler cases, or \"pull --ff-only\" to update the copy\r\n    of main integration branches, and rebase their work separately. The\r\n    pull.rebase configuration variable exists to help them in the simpler\r\n    cases, but there is no mechanism to make these users aware of it.\r\n    \r\n    Issue a warning message when no --[no-]rebase option from the command\r\n    line and no pull.rebase configuration variable is given. This will\r\n    inconvenience those who never want to \"pull --rebase\", who haven't had\r\n    to do anything special, but the cost of the inconvenience is paid only\r\n    once per user, which should be a reasonable cost to help a number of new\r\n    users.\r\n    \r\n    Signed-off-by: Alex Henrie <alexhenrie24@gmail.com>\r\n    Signed-off-by: Junio C Hamano <gitster@pobox.com>\r\n\r\n builtin/pull.c               | 16 ++++++++++++++++\r\n t/t5521-pull-options.sh      | 22 +++++++++++-----------\r\n t/t7601-merge-pull-config.sh | 38 ++++++++++++++++++++++++++++++++++++++\r\n 3 files changed, 65 insertions(+), 11 deletions(-)\r\n\r\nand manifests in appearing the line ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1013", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1013/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1013/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1013/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1013", "id": 626374429, "node_id": "MDU6SXNzdWU2MjYzNzQ0Mjk=", "number": 1013, "title": "Docs: git.remote.Remote.push: length of a list won't be null", "user": {"login": "tometzky", "id": 9350305, "node_id": "MDQ6VXNlcjkzNTAzMDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9350305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tometzky", "html_url": "https://github.com/tometzky", "followers_url": "https://api.github.com/users/tometzky/followers", "following_url": "https://api.github.com/users/tometzky/following{/other_user}", "gists_url": "https://api.github.com/users/tometzky/gists{/gist_id}", "starred_url": "https://api.github.com/users/tometzky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tometzky/subscriptions", "organizations_url": "https://api.github.com/users/tometzky/orgs", "repos_url": "https://api.github.com/users/tometzky/repos", "events_url": "https://api.github.com/users/tometzky/events{/privacy}", "received_events_url": "https://api.github.com/users/tometzky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/38", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/38", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/38/labels", "id": 5384624, "node_id": "MDk6TWlsZXN0b25lNTM4NDYyNA==", "number": 38, "title": "v3.1.3 - Bugfixes", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2020-05-05T06:12:44Z", "updated_at": "2020-05-31T03:15:40Z", "due_on": null, "closed_at": "2020-05-31T03:15:40Z"}, "comments": 0, "created_at": "2020-05-28T09:49:36Z", "updated_at": "2020-05-28T13:35:13Z", "closed_at": "2020-05-28T13:35:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "[https://gitpython.readthedocs.io/en/stable/reference.html?highlight=push#git.remote.Remote.push](https://gitpython.readthedocs.io/en/stable/reference.html?highlight=push#git.remote.Remote.push)\r\n> If the operation fails completely, the length of the returned IterableList will be null.\r\n\r\nI don't think the length of a list can be null. Either the length will be 0 or the returned value will be null.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1012", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1012/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1012/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1012/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1012", "id": 623629179, "node_id": "MDU6SXNzdWU2MjM2MjkxNzk=", "number": 1012, "title": "3.1.2: test suite is failing", "user": {"login": "kloczek", "id": 31284574, "node_id": "MDQ6VXNlcjMxMjg0NTc0", "avatar_url": "https://avatars0.githubusercontent.com/u/31284574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kloczek", "html_url": "https://github.com/kloczek", "followers_url": "https://api.github.com/users/kloczek/followers", "following_url": "https://api.github.com/users/kloczek/following{/other_user}", "gists_url": "https://api.github.com/users/kloczek/gists{/gist_id}", "starred_url": "https://api.github.com/users/kloczek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kloczek/subscriptions", "organizations_url": "https://api.github.com/users/kloczek/orgs", "repos_url": "https://api.github.com/users/kloczek/repos", "events_url": "https://api.github.com/users/kloczek/events{/privacy}", "received_events_url": "https://api.github.com/users/kloczek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-23T10:26:55Z", "updated_at": "2020-05-23T11:50:50Z", "closed_at": "2020-05-23T10:37:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n+ nosetests -v\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\ntest_add_to_multiple (git.test.test_config.TestBase) ... ok\r\ntest_base (git.test.test_config.TestBase) ... ok\r\ntest_complex_aliases (git.test.test_config.TestBase) ... ok\r\ntest_config_include (git.test.test_config.TestBase) ... ok\r\ntest_empty_config_value (git.test.test_config.TestBase) ... ok\r\ntest_includes_order (git.test.test_config.TestBase) ... SKIP: Known failure -- included values are not in effect right away\r\ntest_lock_reentry (git.test.test_config.TestBase) ... ok\r\ntest_multi_line_config (git.test.test_config.TestBase) ... ok\r\ntest_multiple_to_single (git.test.test_config.TestBase) ... ok\r\ntest_multiple_values (git.test.test_config.TestBase) ... ok\r\ntest_multiple_values_rename (git.test.test_config.TestBase) ... ok\r\ntest_read_write (git.test.test_config.TestBase) ... ok\r\ntest_rename (git.test.test_config.TestBase) ... ok\r\ntest_setlast (git.test.test_config.TestBase) ... ok\r\ntest_single_to_multiple (git.test.test_config.TestBase) ... ok\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\nERROR\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.performance.test_commit.TestPerformance'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n-------------------- >> begin captured logging << --------------------\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.performance.test_odb.TestObjDBPerformance'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n-------------------- >> begin captured logging << --------------------\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.performance.test_streams.TestObjDBPerformance'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n-------------------- >> begin captured logging << --------------------\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_actor.TestActor'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n-------------------- >> begin captured logging << --------------------\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_base.TestBase'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n-------------------- >> begin captured logging << --------------------\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_blob.TestBlob'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n-------------------- >> begin captured logging << --------------------\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_commit.TestCommit'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n-------------------- >> begin captured logging << --------------------\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\ngit.cmd: DEBUG: Popen(['git', 'version'], cwd=/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2, universal_newlines=False, shell=None, istream=None)\r\n--------------------- >> end captured logging << ---------------------\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_db.TestDB'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_diff.TestDiff'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_docs.Tutorials'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_exc.TExc'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_fun.TestFun'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_git.TestGit'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/test_git.py\", line 38, in setUpClass\r\n    super(TestGit, cls).setUpClass()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_index.TestIndex'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_reflog.TestRefLog'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_refs.TestRefs'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_remote.TestRemote'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_repo.TestRepo'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_stats.TestStats'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_submodule.TestSubmodule'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_tree.TestTree'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n======================================================================\r\nERROR: test suite for <class 'git.test.test_util.TestUtils'>\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 209, in run\r\n    self.setUp()\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 292, in setUp\r\n    self.setupContext(ancestor)\r\n  File \"/usr/lib/python3.8/site-packages/nose/suite.py\", line 315, in setupContext\r\n    try_run(context, names)\r\n  File \"/usr/lib/python3.8/site-packages/nose/util.py\", line 471, in try_run\r\n    return func()\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/test/lib/helper.py\", line 359, in setUpClass\r\n    cls.rorepo = Repo(GIT_REPO)\r\n  File \"/home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2/git/repo/base.py\", line 181, in __init__\r\n    raise InvalidGitRepositoryError(epath)\r\ngit.exc.InvalidGitRepositoryError: /home/tkloczko/rpmbuild/BUILD/GitPython-3.1.2\r\n\r\n----------------------------------------------------------------------\r\nRan 15 tests in 0.451s\r\n\r\nFAILED (SKIP=1, errors=22)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1011", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1011/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1011/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1011/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1011", "id": 621737282, "node_id": "MDU6SXNzdWU2MjE3MzcyODI=", "number": 1011, "title": "win long paths problem with gitpython?", "user": {"login": "maybeec", "id": 1427255, "node_id": "MDQ6VXNlcjE0MjcyNTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1427255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maybeec", "html_url": "https://github.com/maybeec", "followers_url": "https://api.github.com/users/maybeec/followers", "following_url": "https://api.github.com/users/maybeec/following{/other_user}", "gists_url": "https://api.github.com/users/maybeec/gists{/gist_id}", "starred_url": "https://api.github.com/users/maybeec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maybeec/subscriptions", "organizations_url": "https://api.github.com/users/maybeec/orgs", "repos_url": "https://api.github.com/users/maybeec/repos", "events_url": "https://api.github.com/users/maybeec/events{/privacy}", "received_events_url": "https://api.github.com/users/maybeec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T12:51:33Z", "updated_at": "2020-05-20T15:46:29Z", "closed_at": "2020-05-20T15:46:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have --long-paths set to be true on win10 + latest git version, which works like a charm.\r\nAnyhow, executing gitpython clone command, the cloning of a repository with extra long paths does not work out and throws \r\n\r\n```\r\nException ignored in: <finalize object at 0x1da516aff90; dead>\r\nTraceback (most recent call last):\r\n  File \"weakref.py\", line 566, in __call__\r\n  File \"tempfile.py\", line 818, in _cleanup\r\n  File \"tempfile.py\", line 814, in _rmtree\r\n  File \"shutil.py\", line 737, in rmtree\r\n  File \"shutil.py\", line 610, in _rmtree_unsafe\r\n  File \"shutil.py\", line 610, in _rmtree_unsafe\r\n  File \"shutil.py\", line 610, in _rmtree_unsafe\r\n  [Previous line repeated 15 more times]\r\n  File \"shutil.py\", line 619, in _rmtree_unsafe\r\n  File \"shutil.py\", line 617, in _rmtree_unsafe\r\nOSError: [WinError 145] The directory is not empty <long path here>:\r\n```\r\n\r\ndoes gitpython have an issue with long paths?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1010", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1010/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1010/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1010/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1010", "id": 613559350, "node_id": "MDU6SXNzdWU2MTM1NTkzNTA=", "number": 1010, "title": "stderr: 'fatal: Unable to create '.git/index.lock': File exists.", "user": {"login": "oma0256", "id": 14260655, "node_id": "MDQ6VXNlcjE0MjYwNjU1", "avatar_url": "https://avatars3.githubusercontent.com/u/14260655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oma0256", "html_url": "https://github.com/oma0256", "followers_url": "https://api.github.com/users/oma0256/followers", "following_url": "https://api.github.com/users/oma0256/following{/other_user}", "gists_url": "https://api.github.com/users/oma0256/gists{/gist_id}", "starred_url": "https://api.github.com/users/oma0256/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oma0256/subscriptions", "organizations_url": "https://api.github.com/users/oma0256/orgs", "repos_url": "https://api.github.com/users/oma0256/repos", "events_url": "https://api.github.com/users/oma0256/events{/privacy}", "received_events_url": "https://api.github.com/users/oma0256/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-06T19:30:58Z", "updated_at": "2020-05-07T01:39:40Z", "closed_at": "2020-05-07T01:39:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a git script that fetches a file from a remote repository. Everything was working fine but then all of a sudden I'm running into this error below. Is their a way I can solve this using `GitPython`, any help will be much appreciated thanks.\r\n```\r\nGitCommandError\r\n'git checkout origin/<branch_name> <filename>' returned exit code 128.\r\nstderr: 'fatal: Unable to create '.git/index.lock': File exists.\r\n\r\nif no other git process is currently running, this probably means a git process crashed in this repository earlier. Make sure no other git process is running and remove the file manually to continue.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1008", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1008/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1008/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1008/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1008", "id": 606845197, "node_id": "MDU6SXNzdWU2MDY4NDUxOTc=", "number": 1008, "title": "Blame returns str not list", "user": {"login": "ncopiy", "id": 27158231, "node_id": "MDQ6VXNlcjI3MTU4MjMx", "avatar_url": "https://avatars3.githubusercontent.com/u/27158231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncopiy", "html_url": "https://github.com/ncopiy", "followers_url": "https://api.github.com/users/ncopiy/followers", "following_url": "https://api.github.com/users/ncopiy/following{/other_user}", "gists_url": "https://api.github.com/users/ncopiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncopiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncopiy/subscriptions", "organizations_url": "https://api.github.com/users/ncopiy/orgs", "repos_url": "https://api.github.com/users/ncopiy/repos", "events_url": "https://api.github.com/users/ncopiy/events{/privacy}", "received_events_url": "https://api.github.com/users/ncopiy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-25T20:05:18Z", "updated_at": "2020-04-25T23:42:07Z", "closed_at": "2020-04-25T23:42:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version 3.1.1 \r\n\r\nThe docs says it will be list type of return value: https://gitpython.readthedocs.io/en/stable/reference.html?highlight=blame#git.repo.base.Repo.blame \r\n\r\nBut instead of it i've got a string:\r\n```\r\nIn[2]: from git import Repo\r\nIn[3]: from django.conf import settings\r\nIn[4]: r = Repo(settings.BASE_DIR)\r\nIn[5]: bl = r.git.blame('HEAD', 'users/utils.py')\r\nIn[6]: type(bl)\r\nOut[6]: str\r\n```  \r\n\r\nVersion is similar as in the docs.\r\n```\r\n(venv) a@a:~/Workspace/git_test$ pip freeze | grep Git\r\nGitPython==3.1.1\r\n```\r\n\r\nIs that incorrect docs or bug in the library? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1006", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1006/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1006/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1006/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1006", "id": 598041872, "node_id": "MDU6SXNzdWU1OTgwNDE4NzI=", "number": 1006, "title": "Use of GitPython causes git log operations to slow on the repository", "user": {"login": "ndimiduk", "id": 45484, "node_id": "MDQ6VXNlcjQ1NDg0", "avatar_url": "https://avatars0.githubusercontent.com/u/45484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndimiduk", "html_url": "https://github.com/ndimiduk", "followers_url": "https://api.github.com/users/ndimiduk/followers", "following_url": "https://api.github.com/users/ndimiduk/following{/other_user}", "gists_url": "https://api.github.com/users/ndimiduk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndimiduk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndimiduk/subscriptions", "organizations_url": "https://api.github.com/users/ndimiduk/orgs", "repos_url": "https://api.github.com/users/ndimiduk/repos", "events_url": "https://api.github.com/users/ndimiduk/events{/privacy}", "received_events_url": "https://api.github.com/users/ndimiduk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60656, "node_id": "MDU6TGFiZWw2MDY1Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/waiting%20for%20feedback", "name": "waiting for feedback", "color": "ff8c00", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-10T18:57:52Z", "updated_at": "2020-04-29T18:01:47Z", "closed_at": "2020-04-29T18:01:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI've been using your nice library over in Apache HBase as a part of [git-jira-release-audit](https://github.com/apache/hbase/tree/master/dev-support/git-jira-release-audit). I've noticed that after running the tool with `--parse-release-tags`, which makes many calls to `Repo.git.name_rev`, calls to `git log` on the command line become extremely slow. It seems like the repository is somehow left with lots of garbage after it's been parsed by `GitPython`. Does this make sense, sound even plausible?\r\n\r\nYou can see my requirements file there, using GitPython==3.0.5.\r\n\r\n```\r\n$ git --version\r\ngit version 2.20.1 (Apple Git-117)\r\n```\r\n\r\nThanks,\r\nNick", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1004", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1004/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1004/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1004/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1004", "id": 596552869, "node_id": "MDU6SXNzdWU1OTY1NTI4Njk=", "number": 1004, "title": "asyncio support", "user": {"login": "tallesl", "id": 3655047, "node_id": "MDQ6VXNlcjM2NTUwNDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3655047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tallesl", "html_url": "https://github.com/tallesl", "followers_url": "https://api.github.com/users/tallesl/followers", "following_url": "https://api.github.com/users/tallesl/following{/other_user}", "gists_url": "https://api.github.com/users/tallesl/gists{/gist_id}", "starred_url": "https://api.github.com/users/tallesl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tallesl/subscriptions", "organizations_url": "https://api.github.com/users/tallesl/orgs", "repos_url": "https://api.github.com/users/tallesl/repos", "events_url": "https://api.github.com/users/tallesl/events{/privacy}", "received_events_url": "https://api.github.com/users/tallesl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T12:49:40Z", "updated_at": "2020-04-11T07:28:27Z", "closed_at": "2020-04-11T07:28:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the library to backup a bunch o repositories but, due to the quantity it takes a while to clone all of them.\r\n\r\nIs it possible to clone them in parallel? Is there asyncio support?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1003", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1003/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1003/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1003/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1003", "id": 595656367, "node_id": "MDU6SXNzdWU1OTU2NTYzNjc=", "number": 1003, "title": "Submodule .repo points to parent repo instead of configured submodule repository", "user": {"login": "jmartens", "id": 593327, "node_id": "MDQ6VXNlcjU5MzMyNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/593327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmartens", "html_url": "https://github.com/jmartens", "followers_url": "https://api.github.com/users/jmartens/followers", "following_url": "https://api.github.com/users/jmartens/following{/other_user}", "gists_url": "https://api.github.com/users/jmartens/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmartens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmartens/subscriptions", "organizations_url": "https://api.github.com/users/jmartens/orgs", "repos_url": "https://api.github.com/users/jmartens/repos", "events_url": "https://api.github.com/users/jmartens/events{/privacy}", "received_events_url": "https://api.github.com/users/jmartens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 262746125, "node_id": "MDU6TGFiZWwyNjI3NDYxMjU=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/wont%20fix", "name": "wont fix", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-07T07:32:46Z", "updated_at": "2020-04-23T00:50:13Z", "closed_at": "2020-04-11T06:58:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "When iterating over the submodules of a repository and accessing it's repo property it turns out the object returned is the parent repository instead of the configured repository for this submodule, making this simple test case fail:\r\n\r\n```\r\nfor sumbodule in repo.submodules:\r\n    assert not submodule.repo == repo\r\n```\r\n\r\nThe abspath seems to point to the location of the submodule so in order to assess the state of the submodule repository status I have to do:\r\n\r\n```\r\nfor submodule in repo.submodules:\r\n    submodule_repo = Repo(submodule.abspath)\r\n    assert not submodule_repo == repo\r\n```\r\n\r\nI would have expected that the `.repo` property of the submodule would reference the repository details of the submodule, not the parent repository it is configured in.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1002", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1002/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1002/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1002/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1002", "id": 595116948, "node_id": "MDU6SXNzdWU1OTUxMTY5NDg=", "number": 1002, "title": "InCompatible with PyOxidizer ", "user": {"login": "Baneeishaque", "id": 6133009, "node_id": "MDQ6VXNlcjYxMzMwMDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6133009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Baneeishaque", "html_url": "https://github.com/Baneeishaque", "followers_url": "https://api.github.com/users/Baneeishaque/followers", "following_url": "https://api.github.com/users/Baneeishaque/following{/other_user}", "gists_url": "https://api.github.com/users/Baneeishaque/gists{/gist_id}", "starred_url": "https://api.github.com/users/Baneeishaque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Baneeishaque/subscriptions", "organizations_url": "https://api.github.com/users/Baneeishaque/orgs", "repos_url": "https://api.github.com/users/Baneeishaque/repos", "events_url": "https://api.github.com/users/Baneeishaque/events{/privacy}", "received_events_url": "https://api.github.com/users/Baneeishaque/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 60586, "node_id": "MDU6TGFiZWw2MDU4Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/enhancement", "name": "enhancement", "color": "00661b", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/36", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/36", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/36/labels", "id": 5135034, "node_id": "MDk6TWlsZXN0b25lNTEzNTAzNA==", "number": 36, "title": "v3.1.1 - Bugfixes", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 6, "state": "closed", "created_at": "2020-02-24T12:04:07Z", "updated_at": "2020-04-11T07:42:35Z", "due_on": null, "closed_at": "2020-04-11T07:42:35Z"}, "comments": 1, "created_at": "2020-04-06T13:29:02Z", "updated_at": "2020-04-11T06:49:02Z", "closed_at": "2020-04-11T06:48:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "See [PyOxidizer Issue 69 : Stop requiring `__file__` in Python packages](https://github.com/indygreg/PyOxidizer/issues/69)\r\n\r\nI am trying to use [git-repo-updater](https://github.com/earwig/git-repo-updater) with PyOxidizer.\r\n```\r\n    Finished dev [unoptimized + debuginfo] target(s) in 1m 29s\r\nwriting executable to C:\\Lab\\PyOxidizer\\git-repo-updator\\.\\build\\x86_64-pc-windows-msvc\\debug\\exe\\git-repo-updator.exe\r\n>>> from gitup.cli import run\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"gitup.cli\", line 18, in <module>\r\n  File \"gitup.update\", line 15, in <module>\r\n  File \"git\", line 33, in <module>\r\n  File \"git\", line 22, in _init_externals\r\nNameError: name '__file__' is not defined\r\n>>>\r\n```\r\ngit-repo-updater uses GitPython package : [git-repo-updater setup.py](https://github.com/earwig/git-repo-updater/blob/develop/setup.py), [git-repo-updater source file](https://github.com/earwig/git-repo-updater/blob/develop/gitup/update.py)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1001", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1001/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1001/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1001/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1001", "id": 590005977, "node_id": "MDU6SXNzdWU1OTAwMDU5Nzc=", "number": 1001, "title": "'--relative' option doesn't work with GitCMD  repo.git.format_patch(\"--relative\", \"--output-directory\", outdir, commit, \"-1\")", "user": {"login": "sophy228", "id": 10008539, "node_id": "MDQ6VXNlcjEwMDA4NTM5", "avatar_url": "https://avatars2.githubusercontent.com/u/10008539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sophy228", "html_url": "https://github.com/sophy228", "followers_url": "https://api.github.com/users/sophy228/followers", "following_url": "https://api.github.com/users/sophy228/following{/other_user}", "gists_url": "https://api.github.com/users/sophy228/gists{/gist_id}", "starred_url": "https://api.github.com/users/sophy228/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sophy228/subscriptions", "organizations_url": "https://api.github.com/users/sophy228/orgs", "repos_url": "https://api.github.com/users/sophy228/repos", "events_url": "https://api.github.com/users/sophy228/events{/privacy}", "received_events_url": "https://api.github.com/users/sophy228/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-30T05:33:13Z", "updated_at": "2020-04-11T05:32:13Z", "closed_at": "2020-04-11T05:32:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n#filepath = self.repo.git.format_patch(\"--relative\", \"--output-directory\", outdir, commit, \"-1\")\r\npip = os.popen(\"git format-patch  --relative -o {} {} -1\".format(outdir, commit))\r\nfilepath = pip.readline().strip()\r\npip.close()\r\n```\r\n\r\n\r\nThe \"--relative\" doesn't make any effect in first line, so I have to use the following lines instead, and they can work...\r\n\r\nNo idea what is difference\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1000", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1000/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1000/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/1000/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/1000", "id": 588833732, "node_id": "MDU6SXNzdWU1ODg4MzM3MzI=", "number": 1000, "title": "Support GIT_OBJECT_DIRECTORY environment variable", "user": {"login": "acbits", "id": 7154337, "node_id": "MDQ6VXNlcjcxNTQzMzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/7154337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acbits", "html_url": "https://github.com/acbits", "followers_url": "https://api.github.com/users/acbits/followers", "following_url": "https://api.github.com/users/acbits/following{/other_user}", "gists_url": "https://api.github.com/users/acbits/gists{/gist_id}", "starred_url": "https://api.github.com/users/acbits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acbits/subscriptions", "organizations_url": "https://api.github.com/users/acbits/orgs", "repos_url": "https://api.github.com/users/acbits/repos", "events_url": "https://api.github.com/users/acbits/events{/privacy}", "received_events_url": "https://api.github.com/users/acbits/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/36", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/36", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/36/labels", "id": 5135034, "node_id": "MDk6TWlsZXN0b25lNTEzNTAzNA==", "number": 36, "title": "v3.1.1 - Bugfixes", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 6, "state": "closed", "created_at": "2020-02-24T12:04:07Z", "updated_at": "2020-04-11T07:42:35Z", "due_on": null, "closed_at": "2020-04-11T07:42:35Z"}, "comments": 2, "created_at": "2020-03-27T01:57:48Z", "updated_at": "2020-04-11T05:06:03Z", "closed_at": "2020-04-11T05:06:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using GIT_OBJECT_DIRECTORY to store git objects, a statement like\r\ngit.Repo('someproject') fails. This is due to is_git_dir() in git/repo/fun.py making an assumption that there will be a objects directory under .git which isn't the case when GIT_OBJECT_DIRECTORY is defined and being used.\r\n\r\nA fix like the attached patch should solve the problem, though there might be more fixes needed in other places. This fix alone solves my particular workflow for now.\r\n\r\n```\r\ndiff --git a/git/repo/fun.py b/git/repo/fun.py\r\nindex 784a70bf3..e3a7bc57a 100644\r\n--- a/git/repo/fun.py\r\n+++ b/git/repo/fun.py\r\n@@ -35,7 +35,8 @@ def is_git_dir(d):\r\n             There is the unlikely danger to throw if we see directories which just look like a worktree dir,\r\n             but are none.\"\"\"\r\n     if osp.isdir(d):\r\n-        if osp.isdir(osp.join(d, 'objects')) and osp.isdir(osp.join(d, 'refs')):\r\n+        if (osp.isdir(osp.join(d, 'objects')) or os.environ.has_key('GIT_OBJECT_DIRECTORY')) \\\r\n+           and osp.isdir(osp.join(d, 'refs')):\r\n             headref = osp.join(d, 'HEAD')\r\n             return osp.isfile(headref) or \\\r\n                 (osp.islink(headref) and\r\n\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/997", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/997/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/997/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/997/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/997", "id": 579141878, "node_id": "MDU6SXNzdWU1NzkxNDE4Nzg=", "number": 997, "title": "git.exc.GitCommandNotFound: Cmd('git') not found due to: OSError('[Errno 20] Not a directory') for 2.1.15", "user": {"login": "caserffer", "id": 13937526, "node_id": "MDQ6VXNlcjEzOTM3NTI2", "avatar_url": "https://avatars0.githubusercontent.com/u/13937526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caserffer", "html_url": "https://github.com/caserffer", "followers_url": "https://api.github.com/users/caserffer/followers", "following_url": "https://api.github.com/users/caserffer/following{/other_user}", "gists_url": "https://api.github.com/users/caserffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/caserffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caserffer/subscriptions", "organizations_url": "https://api.github.com/users/caserffer/orgs", "repos_url": "https://api.github.com/users/caserffer/repos", "events_url": "https://api.github.com/users/caserffer/events{/privacy}", "received_events_url": "https://api.github.com/users/caserffer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-11T10:02:55Z", "updated_at": "2020-03-21T11:55:53Z", "closed_at": "2020-03-21T11:55:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "my code is\r\n![image](https://user-images.githubusercontent.com/13937526/76404818-1b3cdc00-63c2-11ea-8680-fb2161743b65.png)\r\n![image](https://user-images.githubusercontent.com/13937526/76404854-26900780-63c2-11ea-8570-e5d03272e597.png)\r\n and my error is:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"PrecisionDiff.py\", line 250, in <module>\r\n    obj.pares_from_git_log()\r\n  File \"PrecisionDiff.py\", line 74, in pares_from_git_log\r\n    self.REPO_EXECUTE.execute(\"git checkout master\")\r\n  File \"/usr/local/lib/python2.7/dist-packages/git/cmd.py\", line 738, in execute\r\n    raise GitCommandNotFound(command, err)\r\ngit.exc.GitCommandNotFound: Cmd('git') not found due to: OSError('[Errno 20] Not a directory')\r\n  cmdline: git checkout master\r\n```\r\nmy git cmd run ok:\r\n![image](https://user-images.githubusercontent.com/13937526/76404937-50492e80-63c2-11ea-96db-937e7a3d0786.png)\r\n\r\nis something wrong? i can run the same code on windows but failed on ubuntu!\r\n\r\nhelp me tks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/996", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/996/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/996/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/996/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/996", "id": 577423300, "node_id": "MDU6SXNzdWU1Nzc0MjMzMDA=", "number": 996, "title": "Add way to get only topmost untracked folders/files", "user": {"login": "BeayemX", "id": 3453076, "node_id": "MDQ6VXNlcjM0NTMwNzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3453076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BeayemX", "html_url": "https://github.com/BeayemX", "followers_url": "https://api.github.com/users/BeayemX/followers", "following_url": "https://api.github.com/users/BeayemX/following{/other_user}", "gists_url": "https://api.github.com/users/BeayemX/gists{/gist_id}", "starred_url": "https://api.github.com/users/BeayemX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BeayemX/subscriptions", "organizations_url": "https://api.github.com/users/BeayemX/orgs", "repos_url": "https://api.github.com/users/BeayemX/repos", "events_url": "https://api.github.com/users/BeayemX/events{/privacy}", "received_events_url": "https://api.github.com/users/BeayemX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-08T00:39:11Z", "updated_at": "2020-03-08T16:19:44Z", "closed_at": "2020-03-08T06:15:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let's say I have a new folder with three new files in it.\r\n\r\nWhen I use `git status` it will show like this:\r\n```\r\nMyProject/New Folder/\r\n```\r\n\r\nBut when I use GitPython's `repo.untracked_files` it will show like this:\r\n```\r\nMyProject/New Folder/file_a.txt\r\nMyProject/New Folder/file_b.txt\r\nMyProject/New Folder/file_c.txt\r\n```\r\n\r\nIs there a way to get the same result as the `git status` version?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/995", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/995/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/995/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/995/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/995", "id": 576900293, "node_id": "MDU6SXNzdWU1NzY5MDAyOTM=", "number": 995, "title": "[BUG] Nano editor is not opened if triggered by git command", "user": {"login": "oerp-odoo", "id": 7812986, "node_id": "MDQ6VXNlcjc4MTI5ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7812986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oerp-odoo", "html_url": "https://github.com/oerp-odoo", "followers_url": "https://api.github.com/users/oerp-odoo/followers", "following_url": "https://api.github.com/users/oerp-odoo/following{/other_user}", "gists_url": "https://api.github.com/users/oerp-odoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/oerp-odoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oerp-odoo/subscriptions", "organizations_url": "https://api.github.com/users/oerp-odoo/orgs", "repos_url": "https://api.github.com/users/oerp-odoo/repos", "events_url": "https://api.github.com/users/oerp-odoo/events{/privacy}", "received_events_url": "https://api.github.com/users/oerp-odoo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 262746125, "node_id": "MDU6TGFiZWwyNjI3NDYxMjU=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/wont%20fix", "name": "wont fix", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-06T12:26:57Z", "updated_at": "2020-03-21T11:41:08Z", "closed_at": "2020-03-08T06:05:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "If triggered command must open editor, like write commit message, process goes into waiting without opening anything.\r\n\r\n_I noticed this specifically with **Nano** editor only. For example, with Sublime, it does work and opens editor._\r\n\r\nFor example, let say current directory is git repo directory.\r\n\r\nThis does not work:\r\n\r\n```python\r\nimport git\r\ngit.Repo('.').git.commit('--amend')\r\n```\r\nRunning such script, it goes in pending state where it never finishes and never opens editor.\r\n\r\nThis works (if I directly run git via subprocess):\r\n\r\n```python\r\nimport subprocess\r\nimport shutil\r\nsubprocess.run([shutil.which('git'), 'commit', '--amend'])\r\n```\r\n\r\nMy editor global settings look like this:\r\n\r\n```\r\n[core]\r\n\teditor = nano -w\r\n```\r\n\r\ngit python version: 3.0.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/994", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/994/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/994/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/994/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/994", "id": 576412722, "node_id": "MDU6SXNzdWU1NzY0MTI3MjI=", "number": 994, "title": "Index.add fails when certain patterns are entered that could be file system globs", "user": {"login": "krcrouse", "id": 6371795, "node_id": "MDQ6VXNlcjYzNzE3OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6371795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krcrouse", "html_url": "https://github.com/krcrouse", "followers_url": "https://api.github.com/users/krcrouse/followers", "following_url": "https://api.github.com/users/krcrouse/following{/other_user}", "gists_url": "https://api.github.com/users/krcrouse/gists{/gist_id}", "starred_url": "https://api.github.com/users/krcrouse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krcrouse/subscriptions", "organizations_url": "https://api.github.com/users/krcrouse/orgs", "repos_url": "https://api.github.com/users/krcrouse/repos", "events_url": "https://api.github.com/users/krcrouse/events{/privacy}", "received_events_url": "https://api.github.com/users/krcrouse/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/36", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/36", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/36/labels", "id": 5135034, "node_id": "MDk6TWlsZXN0b25lNTEzNTAzNA==", "number": 36, "title": "v3.1.1 - Bugfixes", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 6, "state": "closed", "created_at": "2020-02-24T12:04:07Z", "updated_at": "2020-04-11T07:42:35Z", "due_on": null, "closed_at": "2020-04-11T07:42:35Z"}, "comments": 2, "created_at": "2020-03-05T17:21:56Z", "updated_at": "2020-03-08T06:10:00Z", "closed_at": "2020-03-08T06:09:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like add() attempts to glob any string path, which fails when a verbatim filename string matches an invalid glob regular expression.  I don't see a way to override the globbing of the filename.\r\n\r\nHere is a simple example:\r\n```\r\n\r\nimport git \r\nrepo = git.Repo()\r\nrepo.index.add('filename [2019-2020].txt')\r\n\r\n```\r\nResult:\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/git/index/base.py\", line 740, in add\r\n    entries_added.extend(self._entries_for_paths(paths, path_rewriter, fprogress, entries))\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/git/util.py\", line 68, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/git/index/util.py\", line 91, in set_git_working_dir\r\n    return func(self, *args, **kwargs)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/git/index/base.py\", line 625, in _entries_for_paths\r\n    for filepath in self._iter_expand_paths(paths):\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/git/index/base.py\", line 378, in _iter_expand_paths\r\n    resolved_paths = glob.glob(abs_path)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/glob.py\", line 20, in glob\r\n    return list(iglob(pathname, recursive=recursive))\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/glob.py\", line 72, in _iglob\r\n    for name in glob_in_dir(dirname, basename, dironly):\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/glob.py\", line 83, in _glob1\r\n    return fnmatch.filter(names, pattern)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/fnmatch.py\", line 52, in filter\r\n    match = _compile_pattern(pat)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/fnmatch.py\", line 46, in _compile_pattern\r\n    return re.compile(res).match\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/re.py\", line 234, in compile\r\n    return _compile(pattern, flags)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/re.py\", line 286, in _compile\r\n    p = sre_compile.compile(pattern, flags)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/sre_compile.py\", line 764, in compile\r\n    p = sre_parse.parse(p, flags)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/sre_parse.py\", line 930, in parse\r\n    p = _parse_sub(source, pattern, flags & SRE_FLAG_VERBOSE, 0)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/sre_parse.py\", line 426, in _parse_sub\r\n    not nested and not items))\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/sre_parse.py\", line 816, in _parse\r\n    p = _parse_sub(source, state, sub_verbose, nested + 1)\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/sre_parse.py\", line 426, in _parse_sub\r\n    not nested and not items))\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/sre_parse.py\", line 580, in _parse\r\n    raise source.error(msg, len(this) + 1 + len(that))\r\nre.error: bad character range 9-2 at position 18\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/992", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/992/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/992/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/992/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/992", "id": 572937992, "node_id": "MDU6SXNzdWU1NzI5Mzc5OTI=", "number": 992, "title": "Can't push to git: -> use https:", "user": {"login": "Zethson", "id": 21954664, "node_id": "MDQ6VXNlcjIxOTU0NjY0", "avatar_url": "https://avatars3.githubusercontent.com/u/21954664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zethson", "html_url": "https://github.com/Zethson", "followers_url": "https://api.github.com/users/Zethson/followers", "following_url": "https://api.github.com/users/Zethson/following{/other_user}", "gists_url": "https://api.github.com/users/Zethson/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zethson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zethson/subscriptions", "organizations_url": "https://api.github.com/users/Zethson/orgs", "repos_url": "https://api.github.com/users/Zethson/repos", "events_url": "https://api.github.com/users/Zethson/events{/privacy}", "received_events_url": "https://api.github.com/users/Zethson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 262746125, "node_id": "MDU6TGFiZWwyNjI3NDYxMjU=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/wont%20fix", "name": "wont fix", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-28T18:48:27Z", "updated_at": "2020-03-08T05:55:53Z", "closed_at": "2020-03-08T05:55:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear developers,\r\n\r\n```\r\nimport click\r\nfrom github import Github\r\nfrom git import Repo\r\n\r\n\r\n@click.command()\r\n@click.option('--github_username',  prompt='github username')\r\n@click.option('--github_password',  prompt='github_password', hide_input=True)\r\n@click.option('--github_email',  prompt='github_email')\r\ndef run(github_username, github_password, github_email):\r\n    # login to github\r\n    authenticated_github_user = Github(github_username, github_password)\r\n    user = authenticated_github_user.get_user()\r\n\r\n    is_org: bool = False\r\n    # create the new repository\r\n    if is_org:\r\n        org = authenticated_github_user.get_organization('someorg')\r\n        repo = org.create_repo('projectname', description='somedescription')\r\n    else:\r\n        repo = user.create_repo('testrepo_github_api', description='this is a test')\r\n\r\n    # clone the repository\r\n    repoClone = pygit2.clone_repository(repo.git_url, '/tmp/test_clone')\r\n\r\n    # copy files into the repository if they should also be committed and pushed\r\n    with open('/tmp/test_clone/test.txt', 'w') as f:\r\n        f.write('wtf')\r\n\r\n\r\n    repo_dir = '/tmp/test_clone'\r\n    repo = Repo(repo_dir)\r\n    file_list = [\r\n        'test.txt'\r\n    ]\r\n    commit_message = 'test'\r\n    repo.index.add(file_list)\r\n    repo.index.commit(commit_message)\r\n    origin = repo.remote('origin')\r\n    origin.push()\r\n\r\n\r\nif __name__ == '__main__':\r\n    run()\r\n\r\n```\r\n\r\nThis unfortunately results in:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/zeth/PycharmProjects/cookietemple/cookietemple/create/github_support.py\", line 45, in <module>\r\n    run()\r\n  File \"/home/zeth/lukas_heumos_website/lib/python3.8/site-packages/click/core.py\", line 716, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/home/zeth/lukas_heumos_website/lib/python3.8/site-packages/click/core.py\", line 696, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/home/zeth/lukas_heumos_website/lib/python3.8/site-packages/click/core.py\", line 889, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/home/zeth/lukas_heumos_website/lib/python3.8/site-packages/click/core.py\", line 534, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/home/zeth/PycharmProjects/cookietemple/cookietemple/create/github_support.py\", line 41, in run\r\n    origin.push()\r\n  File \"/home/zeth/lukas_heumos_website/lib/python3.8/site-packages/git/remote.py\", line 846, in push\r\n    return self._get_push_info(proc, progress)\r\n  File \"/home/zeth/lukas_heumos_website/lib/python3.8/site-packages/git/remote.py\", line 732, in _get_push_info\r\n    proc.wait(stderr=stderr_text)\r\n  File \"/home/zeth/lukas_heumos_website/lib/python3.8/site-packages/git/cmd.py\", line 408, in wait\r\n    raise GitCommandError(self.args, status, errstr)\r\ngit.exc.GitCommandError: Cmd('git') failed due to: exit code(128)\r\n  cmdline: git push --porcelain origin\r\n  stderr: 'fatal: remote error:\r\n  You can't push to git://github.com/Zethson/testrepo_github_api.git\r\n  Use https://github.com/Zethson/testrepo_github_api.git'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/990", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/990/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/990/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/990/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/990", "id": 570159430, "node_id": "MDU6SXNzdWU1NzAxNTk0MzA=", "number": 990, "title": "gitPython - Pull request url. Once we do git push, is there a way to get the PR url back from the cmd line? I was not able to get any libraries return that. Is this possible?", "user": {"login": "mehtapinal", "id": 338977, "node_id": "MDQ6VXNlcjMzODk3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/338977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehtapinal", "html_url": "https://github.com/mehtapinal", "followers_url": "https://api.github.com/users/mehtapinal/followers", "following_url": "https://api.github.com/users/mehtapinal/following{/other_user}", "gists_url": "https://api.github.com/users/mehtapinal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehtapinal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehtapinal/subscriptions", "organizations_url": "https://api.github.com/users/mehtapinal/orgs", "repos_url": "https://api.github.com/users/mehtapinal/repos", "events_url": "https://api.github.com/users/mehtapinal/events{/privacy}", "received_events_url": "https://api.github.com/users/mehtapinal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-24T21:31:43Z", "updated_at": "2020-02-25T11:58:32Z", "closed_at": "2020-02-25T11:58:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/989", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/989/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/989/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/989/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/989", "id": 570098275, "node_id": "MDU6SXNzdWU1NzAwOTgyNzU=", "number": 989, "title": "git diff <local branch> <remote>/<remote branch> possible using gitpython ?", "user": {"login": "hcheruku", "id": 8650055, "node_id": "MDQ6VXNlcjg2NTAwNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8650055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hcheruku", "html_url": "https://github.com/hcheruku", "followers_url": "https://api.github.com/users/hcheruku/followers", "following_url": "https://api.github.com/users/hcheruku/following{/other_user}", "gists_url": "https://api.github.com/users/hcheruku/gists{/gist_id}", "starred_url": "https://api.github.com/users/hcheruku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hcheruku/subscriptions", "organizations_url": "https://api.github.com/users/hcheruku/orgs", "repos_url": "https://api.github.com/users/hcheruku/repos", "events_url": "https://api.github.com/users/hcheruku/events{/privacy}", "received_events_url": "https://api.github.com/users/hcheruku/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-24T19:48:20Z", "updated_at": "2020-02-25T16:13:03Z", "closed_at": "2020-02-25T12:07:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi team,\r\n\r\nI looked into **remote** and **diff** part of the documentation & API but couldn't find a way to achieve git diff between local and remote repo.\r\n\r\nHere's what I am trying to achieve:\r\ncheck if local repo matches remote repo, and ONLY if remote repo has any/some updates then pull and update the local repo.\r\n\r\n```\r\nfrom git import Repo\r\nRepo(local_repo_path).remote().pull(branch)\r\n```\r\nThe above code works sucessfully to pull the changes, but I only want to pull only if there's any update in the remote repo. Not sure how to achieve this.\r\n\r\nBasically I want `git diff <local branch> <remote>/<remote branch>` and want to compare before I pull. Do I have to do `Repo(repo_path).remotes.origin.fetch()` as well ?\r\n\r\nThank you.\r\nHave a great day!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/987", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/987/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/987/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/987/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/987", "id": 569209305, "node_id": "MDU6SXNzdWU1NjkyMDkzMDU=", "number": 987, "title": "git cherry-pick", "user": {"login": "mehtapinal", "id": 338977, "node_id": "MDQ6VXNlcjMzODk3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/338977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehtapinal", "html_url": "https://github.com/mehtapinal", "followers_url": "https://api.github.com/users/mehtapinal/followers", "following_url": "https://api.github.com/users/mehtapinal/following{/other_user}", "gists_url": "https://api.github.com/users/mehtapinal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehtapinal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehtapinal/subscriptions", "organizations_url": "https://api.github.com/users/mehtapinal/orgs", "repos_url": "https://api.github.com/users/mehtapinal/repos", "events_url": "https://api.github.com/users/mehtapinal/events{/privacy}", "received_events_url": "https://api.github.com/users/mehtapinal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-21T22:08:15Z", "updated_at": "2020-02-24T21:30:05Z", "closed_at": "2020-02-22T00:10:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "what is the best way to use cherrypick using gitPython. I could not find this in the doc as well", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/986", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/986/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/986/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/986/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/986", "id": 569038913, "node_id": "MDU6SXNzdWU1NjkwMzg5MTM=", "number": 986, "title": "Pulling from private repo", "user": {"login": "AnimusXCASH", "id": 45211126, "node_id": "MDQ6VXNlcjQ1MjExMTI2", "avatar_url": "https://avatars2.githubusercontent.com/u/45211126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnimusXCASH", "html_url": "https://github.com/AnimusXCASH", "followers_url": "https://api.github.com/users/AnimusXCASH/followers", "following_url": "https://api.github.com/users/AnimusXCASH/following{/other_user}", "gists_url": "https://api.github.com/users/AnimusXCASH/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnimusXCASH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnimusXCASH/subscriptions", "organizations_url": "https://api.github.com/users/AnimusXCASH/orgs", "repos_url": "https://api.github.com/users/AnimusXCASH/repos", "events_url": "https://api.github.com/users/AnimusXCASH/events{/privacy}", "received_events_url": "https://api.github.com/users/AnimusXCASH/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T15:57:22Z", "updated_at": "2020-02-22T00:09:19Z", "closed_at": "2020-02-22T00:09:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, is there are possibility to pull from private repo, and where to provide username and password details?\r\n\r\nThank you for answer and time in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/985", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/985/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/985/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/985/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/985", "id": 568351229, "node_id": "MDU6SXNzdWU1NjgzNTEyMjk=", "number": 985, "title": "Replicate `git commit --only`", "user": {"login": "chrisjsewell", "id": 2997570, "node_id": "MDQ6VXNlcjI5OTc1NzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2997570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisjsewell", "html_url": "https://github.com/chrisjsewell", "followers_url": "https://api.github.com/users/chrisjsewell/followers", "following_url": "https://api.github.com/users/chrisjsewell/following{/other_user}", "gists_url": "https://api.github.com/users/chrisjsewell/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisjsewell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisjsewell/subscriptions", "organizations_url": "https://api.github.com/users/chrisjsewell/orgs", "repos_url": "https://api.github.com/users/chrisjsewell/repos", "events_url": "https://api.github.com/users/chrisjsewell/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisjsewell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-20T14:47:17Z", "updated_at": "2020-08-12T12:44:16Z", "closed_at": "2020-08-12T12:44:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies if this is a 'newbie' question, but is there a way to commit only certain paths from the index tree, akin to `git commit --only file.txt`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/984", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/984/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/984/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/984/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/984", "id": 566475033, "node_id": "MDU6SXNzdWU1NjY0NzUwMzM=", "number": 984, "title": "Mismatch requirements between gitpython and gitdb", "user": {"login": "fmigneault", "id": 19194484, "node_id": "MDQ6VXNlcjE5MTk0NDg0", "avatar_url": "https://avatars3.githubusercontent.com/u/19194484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmigneault", "html_url": "https://github.com/fmigneault", "followers_url": "https://api.github.com/users/fmigneault/followers", "following_url": "https://api.github.com/users/fmigneault/following{/other_user}", "gists_url": "https://api.github.com/users/fmigneault/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmigneault/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmigneault/subscriptions", "organizations_url": "https://api.github.com/users/fmigneault/orgs", "repos_url": "https://api.github.com/users/fmigneault/repos", "events_url": "https://api.github.com/users/fmigneault/events{/privacy}", "received_events_url": "https://api.github.com/users/fmigneault/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-17T19:10:50Z", "updated_at": "2020-02-18T18:40:22Z", "closed_at": "2020-02-17T19:11:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since: \r\nhttps://github.com/gitpython-developers/gitdb/commit/db9a65e3b0eceb9c52359273afb3313860e5e322#diff-cb33ff3d8cc897a097528366a431b077\r\n\r\n`gitdb.utils.compat` doesn't exist\r\nThis makes any version prior to https://github.com/gitpython-developers/GitPython/tree/3.0.6\r\nto fail because the requirement is not limited to `<3.0.2` in the requirements :\r\nhttps://github.com/gitpython-developers/GitPython/blob/3.0.6/requirements.txt\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/983", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/983/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/983/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/983/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/983", "id": 566212827, "node_id": "MDU6SXNzdWU1NjYyMTI4Mjc=", "number": 983, "title": "ModuleNotFoundError: No module named 'gitdb.utils.compat'", "user": {"login": "mell0", "id": 8037261, "node_id": "MDQ6VXNlcjgwMzcyNjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/8037261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mell0", "html_url": "https://github.com/mell0", "followers_url": "https://api.github.com/users/mell0/followers", "following_url": "https://api.github.com/users/mell0/following{/other_user}", "gists_url": "https://api.github.com/users/mell0/gists{/gist_id}", "starred_url": "https://api.github.com/users/mell0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mell0/subscriptions", "organizations_url": "https://api.github.com/users/mell0/orgs", "repos_url": "https://api.github.com/users/mell0/repos", "events_url": "https://api.github.com/users/mell0/events{/privacy}", "received_events_url": "https://api.github.com/users/mell0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2020-02-17T10:45:33Z", "updated_at": "2020-02-26T19:34:08Z", "closed_at": "2020-02-17T12:25:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Requirments file includes gitdb2 and, but \"compat.py\" file is importing \"gitdb\" instead and throwing missing \"gitdb\" module error when this library is fresh installed in a new enviroment with missing \"gitdb\" dependency library. Please fix the problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/982", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/982/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/982/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/982/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/982", "id": 564348628, "node_id": "MDU6SXNzdWU1NjQzNDg2Mjg=", "number": 982, "title": "Noticed this on git for windows", "user": {"login": "jamesharris-garmin", "id": 52711649, "node_id": "MDQ6VXNlcjUyNzExNjQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/52711649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesharris-garmin", "html_url": "https://github.com/jamesharris-garmin", "followers_url": "https://api.github.com/users/jamesharris-garmin/followers", "following_url": "https://api.github.com/users/jamesharris-garmin/following{/other_user}", "gists_url": "https://api.github.com/users/jamesharris-garmin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesharris-garmin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesharris-garmin/subscriptions", "organizations_url": "https://api.github.com/users/jamesharris-garmin/orgs", "repos_url": "https://api.github.com/users/jamesharris-garmin/repos", "events_url": "https://api.github.com/users/jamesharris-garmin/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesharris-garmin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 262746125, "node_id": "MDU6TGFiZWwyNjI3NDYxMjU=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/wont%20fix", "name": "wont fix", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-12T23:41:59Z", "updated_at": "2020-02-15T02:11:16Z", "closed_at": "2020-02-13T17:38:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/gitpython-developers/GitPython/blob/3c40cf5e83e56e339ec6ab3e75b008721e544ede/git/cmd.py#L560\r\n\r\nThis comment is inaccurate because the first three numbers are inaccurate because my current git version is `2.23.0.windows.1`  which causes a major failure trying to convert windows to an int.\r\n\r\nMight I suggest attempting to convert with an inline method?:\r\n\r\n```python\r\ndef safe_int(int_maybe: str):\r\n    try:\r\n        return int(int_maybe)\r\n    except ValueError:\r\n        return int_maybe\r\n\r\nself._version_info = tuple(safe_int(n) for n in version_numbers.split('.'))\r\n```\r\n\r\nThen you can convert the whole version tuple.  (just not in a particularly useful pattern.)  that or only return the first 3 version numbers?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/981", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/981/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/981/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/981/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/981", "id": 563070805, "node_id": "MDU6SXNzdWU1NjMwNzA4MDU=", "number": 981, "title": "Class Documentation ?", "user": {"login": "linceaerian", "id": 1318470, "node_id": "MDQ6VXNlcjEzMTg0NzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1318470?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linceaerian", "html_url": "https://github.com/linceaerian", "followers_url": "https://api.github.com/users/linceaerian/followers", "following_url": "https://api.github.com/users/linceaerian/following{/other_user}", "gists_url": "https://api.github.com/users/linceaerian/gists{/gist_id}", "starred_url": "https://api.github.com/users/linceaerian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linceaerian/subscriptions", "organizations_url": "https://api.github.com/users/linceaerian/orgs", "repos_url": "https://api.github.com/users/linceaerian/repos", "events_url": "https://api.github.com/users/linceaerian/events{/privacy}", "received_events_url": "https://api.github.com/users/linceaerian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/34", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/34", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/34/labels", "id": 5083525, "node_id": "MDk6TWlsZXN0b25lNTA4MzUyNQ==", "number": 34, "title": "v3.0.8 - Bugfixes", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2020-02-08T02:59:57Z", "updated_at": "2020-02-17T01:20:29Z", "due_on": null, "closed_at": "2020-02-17T01:20:29Z"}, "comments": 6, "created_at": "2020-02-11T09:24:36Z", "updated_at": "2020-02-13T09:54:14Z", "closed_at": "2020-02-13T09:54:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Maintainers :)\r\n\r\nIs it me or you do not have any documentation of the sources on the readthedoc ?\r\n\r\nI thought it should be in https://gitpython.readthedocs.io/en/stable/reference.html#\r\nbut it's empty....\r\n\r\nFor instance i'm searching if `gitpython.repo/remote.push` returns a boolean or not but I do not find any class documentation, just the tuto (which are usefull nevertheless :) )\r\n\r\nMaybe It's not really necessary as we can always search inside the code but.... sphinx allow it directly as long as you comment your code (which is already done for what I've seen).\r\n\r\nRegards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/977", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/977/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/977/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/977/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/977", "id": 558422307, "node_id": "MDU6SXNzdWU1NTg0MjIzMDc=", "number": 977, "title": "`git.Repo.index.add` fails on Python 3.6.7 installed via `conda` on MacOS", "user": {"login": "joseph-zhong", "id": 4347868, "node_id": "MDQ6VXNlcjQzNDc4Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4347868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joseph-zhong", "html_url": "https://github.com/joseph-zhong", "followers_url": "https://api.github.com/users/joseph-zhong/followers", "following_url": "https://api.github.com/users/joseph-zhong/following{/other_user}", "gists_url": "https://api.github.com/users/joseph-zhong/gists{/gist_id}", "starred_url": "https://api.github.com/users/joseph-zhong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joseph-zhong/subscriptions", "organizations_url": "https://api.github.com/users/joseph-zhong/orgs", "repos_url": "https://api.github.com/users/joseph-zhong/repos", "events_url": "https://api.github.com/users/joseph-zhong/events{/privacy}", "received_events_url": "https://api.github.com/users/joseph-zhong/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-31T23:12:19Z", "updated_at": "2020-03-11T22:45:25Z", "closed_at": "2020-03-11T22:45:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've tried running on two MacOS laptops, both installing various version of `GitPython` (2.0.8, 2.1.13, 3.0.5) and reach an error while trying to perform a `Repo.index.add` operation.\r\nI'm running git version `2.x.x` on each device.\r\n\r\n```bash\r\n$ git --version\r\ngit version 2.13.5\r\n```\r\n\r\n```python\r\n>>> repo = git.Repo('/Users/josephz/work/src')\r\n>>> repo\r\n<git.Repo \"/Users/josephz/work/src/.git\">\r\n>>> diffs = repo.head.commit.diff(None)\r\n>>> type(diffs)\r\n<class 'git.diff.DiffIndex'>\r\n>>> repo.index.add([d.a_path for d in diffs])\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    repo.index.add(diffs)\r\n  File \"/Users/josephz/miniconda3/envs/dev/lib/python3.6/site-packages/git/index/base.py\", line 798, in add\r\n    self.write(ignore_extension_data=not write_extension_data)\r\n  File \"/Users/josephz/miniconda3/envs/dev/lib/python3.6/site-packages/git/index/base.py\", line 202, in write\r\n    self.entries\r\n  File \"/Users/josephz/miniconda3/envs/dev/lib/python3.6/site-packages/gitdb/util.py\", line 253, in __getattr__\r\n    self._set_cache_(attr)\r\n  File \"/Users/josephz/miniconda3/envs/dev/lib/python3.6/site-packages/git/index/base.py\", line 132, in _set_cache_\r\n    self._deserialize(stream)\r\n  File \"/Users/josephz/miniconda3/envs/dev/lib/python3.6/site-packages/git/index/base.py\", line 161, in _deserialize\r\n    self.version, self.entries, self._extension_data, _conten_sha = read_cache(stream)\r\n  File \"/Users/josephz/miniconda3/envs/dev/lib/python3.6/site-packages/git/index/fun.py\", line 187, in read_cache\r\n    version, num_entries = read_header(stream)\r\n  File \"/Users/josephz/miniconda3/envs/dev/lib/python3.6/site-packages/git/index/fun.py\", line 167, in read_header\r\n    assert version in (1, 2)\r\n```\r\n\r\nSeveral months ago I was able to use GitPython just fine so I'm not sure what has changed since.\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/976", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/976/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/976/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/976/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/976", "id": 557503880, "node_id": "MDU6SXNzdWU1NTc1MDM4ODA=", "number": 976, "title": "Get last tag of a file", "user": {"login": "HolgerNie", "id": 12135505, "node_id": "MDQ6VXNlcjEyMTM1NTA1", "avatar_url": "https://avatars2.githubusercontent.com/u/12135505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HolgerNie", "html_url": "https://github.com/HolgerNie", "followers_url": "https://api.github.com/users/HolgerNie/followers", "following_url": "https://api.github.com/users/HolgerNie/following{/other_user}", "gists_url": "https://api.github.com/users/HolgerNie/gists{/gist_id}", "starred_url": "https://api.github.com/users/HolgerNie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HolgerNie/subscriptions", "organizations_url": "https://api.github.com/users/HolgerNie/orgs", "repos_url": "https://api.github.com/users/HolgerNie/repos", "events_url": "https://api.github.com/users/HolgerNie/events{/privacy}", "received_events_url": "https://api.github.com/users/HolgerNie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-30T13:44:56Z", "updated_at": "2020-01-31T12:10:15Z", "closed_at": "2020-01-31T12:10:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello \r\nI want to read the last tag of a file how can I do that with  #GitPhyton?\r\nFor example teh file 445553.sps which can be found:\r\nD:\\Pluto_SPLC\\.git\r\nD:\\Pluto_SPLC\\445553\\445553.sps\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/975", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/975/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/975/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/975/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/975", "id": 555293018, "node_id": "MDU6SXNzdWU1NTUyOTMwMTg=", "number": 975, "title": "Unable to execute git add command", "user": {"login": "IrmantasM", "id": 21358910, "node_id": "MDQ6VXNlcjIxMzU4OTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/21358910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IrmantasM", "html_url": "https://github.com/IrmantasM", "followers_url": "https://api.github.com/users/IrmantasM/followers", "following_url": "https://api.github.com/users/IrmantasM/following{/other_user}", "gists_url": "https://api.github.com/users/IrmantasM/gists{/gist_id}", "starred_url": "https://api.github.com/users/IrmantasM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IrmantasM/subscriptions", "organizations_url": "https://api.github.com/users/IrmantasM/orgs", "repos_url": "https://api.github.com/users/IrmantasM/repos", "events_url": "https://api.github.com/users/IrmantasM/events{/privacy}", "received_events_url": "https://api.github.com/users/IrmantasM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-26T21:49:16Z", "updated_at": "2020-02-08T05:38:13Z", "closed_at": "2020-02-08T05:38:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\ng = git.Git('./git')\r\n// Make some changes to package.json\r\ng.execute(\"git\", \"add\", \"package.json\")\r\n```\r\n\r\nThrows error: \r\n```File \"handler.py\", line 80, in pr_rebase\r\n    g.execute(\"git\", \"add\", \"package.json\")\r\n  File \"/Users/irmantas/projects/app/venv/lib/python3.7/site-packages/git/cmd.py\", line 741, in execute\r\n    **subprocess_kwargs\r\n  File \"/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py\", line 753, in __init__\r\n    errread, errwrite) = self._get_handles(stdin, stdout, stderr)\r\n  File \"/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py\", line 1376, in _get_handles\r\n    p2cread = stdin.fileno()\r\nAttributeError: 'str' object has no attribute 'fileno'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/972", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/972/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/972/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/972/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/972", "id": 548968025, "node_id": "MDU6SXNzdWU1NDg5NjgwMjU=", "number": 972, "title": "Editing a commit's metadata", "user": {"login": "lenormf", "id": 1379068, "node_id": "MDQ6VXNlcjEzNzkwNjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1379068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lenormf", "html_url": "https://github.com/lenormf", "followers_url": "https://api.github.com/users/lenormf/followers", "following_url": "https://api.github.com/users/lenormf/following{/other_user}", "gists_url": "https://api.github.com/users/lenormf/gists{/gist_id}", "starred_url": "https://api.github.com/users/lenormf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lenormf/subscriptions", "organizations_url": "https://api.github.com/users/lenormf/orgs", "repos_url": "https://api.github.com/users/lenormf/repos", "events_url": "https://api.github.com/users/lenormf/events{/privacy}", "received_events_url": "https://api.github.com/users/lenormf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-13T14:30:28Z", "updated_at": "2020-02-08T05:28:10Z", "closed_at": "2020-02-08T05:28:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nIs it possible to edit a commit's metadata (author, committer etc) using only a `Commmit` object?\r\n\r\nI see that we can get a list of commit instances that reflect the history of a target branch, but could I change the attributes of those instances (e.g. the `author` attribute) and have the changes be applied to the repository (on the fly, or using some kind of `repo.commit()` function)?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/970", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/970/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/970/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/970/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/970", "id": 545456378, "node_id": "MDU6SXNzdWU1NDU0NTYzNzg=", "number": 970, "title": "fails to import in windows 10 ", "user": {"login": "Josverl", "id": 981654, "node_id": "MDQ6VXNlcjk4MTY1NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/981654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Josverl", "html_url": "https://github.com/Josverl", "followers_url": "https://api.github.com/users/Josverl/followers", "following_url": "https://api.github.com/users/Josverl/following{/other_user}", "gists_url": "https://api.github.com/users/Josverl/gists{/gist_id}", "starred_url": "https://api.github.com/users/Josverl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Josverl/subscriptions", "organizations_url": "https://api.github.com/users/Josverl/orgs", "repos_url": "https://api.github.com/users/Josverl/repos", "events_url": "https://api.github.com/users/Josverl/events{/privacy}", "received_events_url": "https://api.github.com/users/Josverl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 548386154, "node_id": "MDU6TGFiZWw1NDgzODYxNTQ=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/cannot%20reproduce", "name": "cannot reproduce", "color": "b60205", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-05T19:26:07Z", "updated_at": "2020-02-18T19:48:40Z", "closed_at": "2020-02-08T05:10:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "just want to let you know that the module just throws errors in importing and a newly installed windows 10 & python box \ud83d\ude22 \r\n\r\n```\r\nPython 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from git import Repo\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\josverl\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\git\\__init__.py\", line 40, in <module>\r\n    from git.config import GitConfigParser  # @NoMove @IgnorePep8\r\n  File \"C:\\Users\\josverl\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\git\\config.py\", line 26, in <module>\r\n    from git.util import LockFile\r\n  File \"C:\\Users\\josverl\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\site-packages\\git\\util.py\", line 17, in <module>\r\n    from unittest import SkipTest\r\n  File \"C:\\Users\\josverl\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\unittest\\__init__.py\", line 60, in <module>\r\n    from .async_case import IsolatedAsyncioTestCase\r\n  File \"C:\\Users\\josverl\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\unittest\\async_case.py\", line 4, in <module>\r\n    from .case import TestCase\r\n  File \"C:\\Users\\josverl\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\unittest\\case.py\", line 302, in <module>\r\n    class _CapturingHandler(logging.Handler):\r\nAttributeError: module 'logging' has no attribute 'Handler'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/969", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/969/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/969/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/969/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/969", "id": 540061817, "node_id": "MDU6SXNzdWU1NDAwNjE4MTc=", "number": 969, "title": "Git clone hangs with large repo", "user": {"login": "Abbyyan", "id": 12140508, "node_id": "MDQ6VXNlcjEyMTQwNTA4", "avatar_url": "https://avatars2.githubusercontent.com/u/12140508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Abbyyan", "html_url": "https://github.com/Abbyyan", "followers_url": "https://api.github.com/users/Abbyyan/followers", "following_url": "https://api.github.com/users/Abbyyan/following{/other_user}", "gists_url": "https://api.github.com/users/Abbyyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Abbyyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Abbyyan/subscriptions", "organizations_url": "https://api.github.com/users/Abbyyan/orgs", "repos_url": "https://api.github.com/users/Abbyyan/repos", "events_url": "https://api.github.com/users/Abbyyan/events{/privacy}", "received_events_url": "https://api.github.com/users/Abbyyan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-19T04:02:39Z", "updated_at": "2020-02-08T05:19:11Z", "closed_at": "2019-12-29T05:09:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've used Gitpython to clone some repos but it hangs with a specified repo with size of 17G. I've create a Pool to do git clone using Gitpython. There is a large git repo and needs more time than others to clone. Each process do a clone work for one repo. The Pool i used as follows:\r\n```python\r\n  multi_res = [p.apply_async(runfunc, args=(\r\n            incl_info, project_root, skip_dirs,)) for incl_info in incl_infos]\r\n    LogInfo('Waiting for all subprocesses done...')\r\n    for i in range(len(incl_infos)):\r\n        while not multi_res[i].ready():\r\n            LogInfo(\"Downloading now\")\r\n            time.sleep(5)\r\n    p.close()\r\n    p.join()\r\n```\r\nIt works perfectly in most case. But will often hangs in the largest repo. It's wired that when i just clone the repo individually, It works fine. So i wonder if there is some block in python multiprocessing Pool at first.\r\n\r\nI've strace the hanged git clone process . The git process output as follows:\r\n```shell\r\nProcess 27649 attached\r\nread(6, 0x7ffc36dae050, 4)              = ? ERESTARTSYS (To be restarted if SA_RESTART is set)\r\n--- SIGALRM {si_signo=SIGALRM, si_code=SI_KERNEL, si_value={int=2895997, ptr=0x2c307d}} ---\r\nrt_sigreturn()                          = 0\r\nread(6, 0x7ffc36dae050, 4)              = ? ERESTARTSYS (To be restarted if SA_RESTART is set)\r\n--- SIGALRM {si_signo=SIGALRM, si_code=SI_KERNEL, si_value={int=2895997, ptr=0x2c307d}} ---\r\nrt_sigreturn()                          = 0\r\nread(6, 0x7ffc36dae050, 4)              = ? ERESTARTSYS (To be restarted if SA_RESTART is set)\r\n--- SIGALRM {si_signo=SIGALRM, si_code=SI_KERNEL, si_value={int=2895997, ptr=0x2c307d}} ---\r\nrt_sigreturn()                          = 0\r\nread(6, 0x7ffc36dae050, 4)              = ? ERESTARTSYS (To be restarted if SA_RESTART is set)\r\n--- SIGALRM {si_signo=SIGALRM, si_code=SI_KERNEL, si_value={int=2895997, ptr=0x2c307d}} ---\r\nrt_sigreturn()   \r\n```\r\n\r\nThe git-lfs output as follows:\r\n\r\n```shell\r\nProcess 28006 attached\r\n[ Process PID=28006 runs in 32 bit mode. ]\r\nfutex(0x88b982c, FUTEX_WAIT_PRIVATE, 0, NULL\r\n```\r\nBut when i replace the `git.repo.clone_from` with shell script `git clone` in a new subprocess, it works fine. So maybe there are some block in  `git.repo.clone_from`, and i wonder whether it's solved. Thanks a lot.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/967", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/967/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/967/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/967/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/967", "id": 536718771, "node_id": "MDU6SXNzdWU1MzY3MTg3NzE=", "number": 967, "title": "Cannot bind new attribute to git.objects.commit.Commit", "user": {"login": "timblaktu", "id": 12355715, "node_id": "MDQ6VXNlcjEyMzU1NzE1", "avatar_url": "https://avatars1.githubusercontent.com/u/12355715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timblaktu", "html_url": "https://github.com/timblaktu", "followers_url": "https://api.github.com/users/timblaktu/followers", "following_url": "https://api.github.com/users/timblaktu/following{/other_user}", "gists_url": "https://api.github.com/users/timblaktu/gists{/gist_id}", "starred_url": "https://api.github.com/users/timblaktu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timblaktu/subscriptions", "organizations_url": "https://api.github.com/users/timblaktu/orgs", "repos_url": "https://api.github.com/users/timblaktu/repos", "events_url": "https://api.github.com/users/timblaktu/events{/privacy}", "received_events_url": "https://api.github.com/users/timblaktu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-12T02:23:10Z", "updated_at": "2019-12-29T04:46:41Z", "closed_at": "2019-12-29T04:46:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to add an attribute to a `git.objects.commit.Commit` object that I obtained from a `repo.iter_commits` call, \r\n\r\n```\r\n    commits = repo.iter_commits(args.from_commit_ref + \"..\" + args.to_commit_ref)\r\n    for commit in commits:\r\n        setattr(commit, \"href\", \"<somestring>\")) \r\n```\r\n\r\nand I'm getting this error:\r\n\r\n```\r\n        setattr(commit, \"href\", os.path.join(diffhtmlpath, commit.binsha + \".html\"))\r\nAttributeError: 'Commit' object has no attribute 'href'\r\n```\r\n\r\nI understand these objects are wrappers, but can you provide some more info on whether what I'm trying to do is possible? I am trying to reuse these commit objects for a later purpose by inserting info in them. If this is not possible, I will have to make copies of the pertinent commit info I need into new objects and use those. I thought I'd check here is the former was possible using GitPython primitives.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/966", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/966/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/966/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/966/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/966", "id": 534623360, "node_id": "MDU6SXNzdWU1MzQ2MjMzNjA=", "number": 966, "title": "Help with git config", "user": {"login": "victoraugustofd", "id": 21197980, "node_id": "MDQ6VXNlcjIxMTk3OTgw", "avatar_url": "https://avatars1.githubusercontent.com/u/21197980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victoraugustofd", "html_url": "https://github.com/victoraugustofd", "followers_url": "https://api.github.com/users/victoraugustofd/followers", "following_url": "https://api.github.com/users/victoraugustofd/following{/other_user}", "gists_url": "https://api.github.com/users/victoraugustofd/gists{/gist_id}", "starred_url": "https://api.github.com/users/victoraugustofd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victoraugustofd/subscriptions", "organizations_url": "https://api.github.com/users/victoraugustofd/orgs", "repos_url": "https://api.github.com/users/victoraugustofd/repos", "events_url": "https://api.github.com/users/victoraugustofd/events{/privacy}", "received_events_url": "https://api.github.com/users/victoraugustofd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-08T23:40:28Z", "updated_at": "2019-12-29T04:01:14Z", "closed_at": "2019-12-29T04:01:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nMaybe it is a newbie question, but is there any method on GitPython that retrieves the configuration at levels system, global and local easily?\r\nI am already using git.config(key) for local configuration, but I would like to know if there is any other way to get at all levels.\r\nI have tried using GitConfigParser, but when I try to get **user** or **user.name**, for example, I get the error configparser.NoSectionError: No section: 'user.name'\r\n\r\nCould you help me, please?\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/960", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/960/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/960/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/960/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/960", "id": 522654997, "node_id": "MDU6SXNzdWU1MjI2NTQ5OTc=", "number": 960, "title": "git add issue", "user": {"login": "ashokkumarsoliyappan", "id": 56531981, "node_id": "MDQ6VXNlcjU2NTMxOTgx", "avatar_url": "https://avatars2.githubusercontent.com/u/56531981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashokkumarsoliyappan", "html_url": "https://github.com/ashokkumarsoliyappan", "followers_url": "https://api.github.com/users/ashokkumarsoliyappan/followers", "following_url": "https://api.github.com/users/ashokkumarsoliyappan/following{/other_user}", "gists_url": "https://api.github.com/users/ashokkumarsoliyappan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashokkumarsoliyappan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashokkumarsoliyappan/subscriptions", "organizations_url": "https://api.github.com/users/ashokkumarsoliyappan/orgs", "repos_url": "https://api.github.com/users/ashokkumarsoliyappan/repos", "events_url": "https://api.github.com/users/ashokkumarsoliyappan/events{/privacy}", "received_events_url": "https://api.github.com/users/ashokkumarsoliyappan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-14T06:33:08Z", "updated_at": "2019-11-15T01:18:36Z", "closed_at": "2019-11-15T01:18:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi ,\r\nI am new to Python and Git. Found this library to run Git commands using Python. I am trying to clone an already created repository on Google Cloud to my local directory on windows. and i try to add the repository by using the command \r\n`repo.git.add(\"automationPuml\")`\r\n\r\nbut i'm getting the error \r\n```\r\n    raise GitCommandError(command, status, stderr_value, stdout_value)\r\ngit.exc.GitCommandError: Cmd('git') failed due to: exit code(128)\r\n  cmdline: git add automationPuml\r\n  stderr: 'fatal: pathspec 'automationPuml' did not match any files'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/959", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/959/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/959/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/959/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/959", "id": 521297696, "node_id": "MDU6SXNzdWU1MjEyOTc2OTY=", "number": 959, "title": "Why does repo.git.log() spend so much time?", "user": {"login": "Vergissmeinicht", "id": 35766662, "node_id": "MDQ6VXNlcjM1NzY2NjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/35766662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vergissmeinicht", "html_url": "https://github.com/Vergissmeinicht", "followers_url": "https://api.github.com/users/Vergissmeinicht/followers", "following_url": "https://api.github.com/users/Vergissmeinicht/following{/other_user}", "gists_url": "https://api.github.com/users/Vergissmeinicht/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vergissmeinicht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vergissmeinicht/subscriptions", "organizations_url": "https://api.github.com/users/Vergissmeinicht/orgs", "repos_url": "https://api.github.com/users/Vergissmeinicht/repos", "events_url": "https://api.github.com/users/Vergissmeinicht/events{/privacy}", "received_events_url": "https://api.github.com/users/Vergissmeinicht/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-12T02:54:57Z", "updated_at": "2019-11-12T05:47:33Z", "closed_at": "2019-11-12T05:47:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "`from git import Repo`\r\n`repo = Repo('my-git-repo-path')`\r\n`commit_msg = repo.git.log('some-file-path')`\r\nI measure the time spent and it seems that it may take up to 0.3s to get a commit message of some file. I am wondering how the function log() is implemented and how to modify my code to make it faster.\r\nSo much thanks if someone can help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/957", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/957/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/957/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/957/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/957", "id": 515538600, "node_id": "MDU6SXNzdWU1MTU1Mzg2MDA=", "number": 957, "title": "GitPython3 breaks install via setup.py", "user": {"login": "jeremyjjbrown", "id": 1660010, "node_id": "MDQ6VXNlcjE2NjAwMTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1660010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremyjjbrown", "html_url": "https://github.com/jeremyjjbrown", "followers_url": "https://api.github.com/users/jeremyjjbrown/followers", "following_url": "https://api.github.com/users/jeremyjjbrown/following{/other_user}", "gists_url": "https://api.github.com/users/jeremyjjbrown/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremyjjbrown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremyjjbrown/subscriptions", "organizations_url": "https://api.github.com/users/jeremyjjbrown/orgs", "repos_url": "https://api.github.com/users/jeremyjjbrown/repos", "events_url": "https://api.github.com/users/jeremyjjbrown/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremyjjbrown/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 60588, "node_id": "MDU6TGFiZWw2MDU4OA==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/rejected", "name": "rejected", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-31T15:45:10Z", "updated_at": "2019-11-14T00:55:36Z", "closed_at": "2019-11-14T00:55:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get \r\n\r\n```\r\nCollecting GitPython>=2.1.11 (from gitops==0.0.1)\r\n  Downloading https://files.pythonhosted.org/packages/be/0f/b180ddaf91429d6ebd7d46d022c31522e05ce7631b41da3901d9e4338c64/GitPython-3.0.4.tar.gz (432kB)\r\n    Complete output from command python setup.py egg_info:\r\n    /usr/lib64/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: 'python_requires'\r\n      warnings.warn(msg)\r\n    error in GitPython setup command: 'install_requires' must be a string or list of strings containing valid project/version requirement specifiers\r\n    \r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-build-6WGL_f/GitPython/\r\nYou are using pip version 8.1.2, however version 19.3.1 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\n```\r\nPip is updated as is setup tools, in docker centos:centos7. Here is the setup.py\r\n```\r\nfrom setuptools import setup\r\n\r\nsetup(\r\n    name='gitops',\r\n    version='0.0.1',\r\n    packages=[\r\n        'gitops',\r\n    ],\r\n    license='Properitary unless otherwise stated',\r\n    long_description=open('README.md').read(),\r\n    install_requires=[\r\n        'GitPython>=2.1.11',\r\n        'boto3>=1.9.119',\r\n        'click>=7.0',\r\n        'future>=0.17.1',\r\n        'requests>=2.22.0'\r\n    ],\r\n    scripts=[\r\n        'bin/apply_ecfs_changes',\r\n        'bin/cfctl',\r\n        'bin/delete_ecfs_changes',\r\n        'bin/git-changes',\r\n        'bin/sleep-ecfs',\r\n        'bin/sleep-filter'\r\n    ]\r\n)\r\n```\r\n\r\nPinning `'GitPython==2.1.11',` abates the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/954", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/954/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/954/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/954/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/954", "id": 511922459, "node_id": "MDU6SXNzdWU1MTE5MjI0NTk=", "number": 954, "title": "utf-8 branch name issue in SymbolicReference._get_ref_info_helper", "user": {"login": "grho", "id": 25153547, "node_id": "MDQ6VXNlcjI1MTUzNTQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/25153547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grho", "html_url": "https://github.com/grho", "followers_url": "https://api.github.com/users/grho/followers", "following_url": "https://api.github.com/users/grho/following{/other_user}", "gists_url": "https://api.github.com/users/grho/gists{/gist_id}", "starred_url": "https://api.github.com/users/grho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grho/subscriptions", "organizations_url": "https://api.github.com/users/grho/orgs", "repos_url": "https://api.github.com/users/grho/repos", "events_url": "https://api.github.com/users/grho/events{/privacy}", "received_events_url": "https://api.github.com/users/grho/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/35", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/35", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/35/labels", "id": 5110940, "node_id": "MDk6TWlsZXN0b25lNTExMDk0MA==", "number": 35, "title": "v3.0.9 - Bugfixes", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2020-02-17T01:20:40Z", "updated_at": "2020-02-24T12:03:52Z", "due_on": null, "closed_at": "2020-02-24T12:03:52Z"}, "comments": 2, "created_at": "2019-10-24T12:49:08Z", "updated_at": "2020-02-19T10:33:07Z", "closed_at": "2020-02-18T19:05:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\na branch is shown incorrectly when contains utf-8 characters\r\n\r\nBranch name: \r\n```refs/heads/za\u017c\u00f3\u0142\u0107_g\u0119\u015bl\u0105_ja\u017a\u0144```\r\n\r\nThe issue can be fixed by adding encoding in SymbolicReference._get_ref_info_helper.\r\nProposed change:\r\nReplace\r\n```python\r\nwith open(osp.join(repodir, ref_path), 'rt') as fp:\r\n```\r\nCurrent result (e.g. shown as active_branch):\r\n```refs/heads/za\u00c5\u00bc\u00c3\u00b3\u00c5\u201a\u00c4\u2021_g\u00c4\u2122\u00c5\u203al\u00c4\u2026_ja\u00c5\u00ba\u00c5\u201e```\r\n\r\nwith\r\n```python\r\nwith open(osp.join(repodir, ref_path), 'rt', encoding=\"utf-8\") as fp:\r\n```\r\nExpected result:\r\n```refs/heads/za\u017c\u00f3\u0142\u0107_g\u0119\u015bl\u0105_ja\u017a\u0144```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/943", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/943/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/943/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/943/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/943", "id": 507930645, "node_id": "MDU6SXNzdWU1MDc5MzA2NDU=", "number": 943, "title": "UnicodeDecodeError when looking at the tagged_date", "user": {"login": "cydan33", "id": 23193852, "node_id": "MDQ6VXNlcjIzMTkzODUy", "avatar_url": "https://avatars0.githubusercontent.com/u/23193852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cydan33", "html_url": "https://github.com/cydan33", "followers_url": "https://api.github.com/users/cydan33/followers", "following_url": "https://api.github.com/users/cydan33/following{/other_user}", "gists_url": "https://api.github.com/users/cydan33/gists{/gist_id}", "starred_url": "https://api.github.com/users/cydan33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cydan33/subscriptions", "organizations_url": "https://api.github.com/users/cydan33/orgs", "repos_url": "https://api.github.com/users/cydan33/repos", "events_url": "https://api.github.com/users/cydan33/events{/privacy}", "received_events_url": "https://api.github.com/users/cydan33/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-16T15:33:28Z", "updated_at": "2020-02-20T13:51:37Z", "closed_at": "2020-02-20T13:51:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't get the tagged date for some repository tags.\r\n\r\nFor example - \r\n\r\n```\r\nimport git\r\nr = git.Repo.clone_from(\"https://github.com/nodejs/node\", \"/tmp/nodegit\")\r\nt = r.tags[10]\r\nt.object.tagged_date\r\n```\r\n\r\nError - \r\n```\r\n~/.local/lib/python3.7/site-packages/gitdb/util.py in __getattr__(self, attr)\r\n    251         to be created and set. Next time the same attribute is reqeusted, it is simply\r\n    252         returned from our dict/slots. \"\"\"\r\n--> 253         self._set_cache_(attr)\r\n    254         # will raise in case the cache was not created\r\n    255         return object.__getattribute__(self, attr)\r\n\r\n/tmp/GitPython/git/objects/tag.py in _set_cache_(self, attr)\r\n     51         if attr in TagObject.__slots__:\r\n     52             ostream = self.repo.odb.stream(self.binsha)\r\n---> 53             lines = ostream.read().decode(defenc).splitlines()\r\n     54\r\n     55             _obj, hexsha = lines[0].split(\" \")\r\n\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xe1 in position 392: invalid continuation byte\r\n```\r\n\r\nIt happens for the following repositories - \r\nhttps://github.com/nodejs/node (tag \"v0.1.0\")\r\nhttps://github.com/OpenVPN/openvpn (tag \"v2.3.1\")\r\n\r\nIt reproduces in the latest version.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/935", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/935/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/935/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/935/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/935", "id": 505423067, "node_id": "MDU6SXNzdWU1MDU0MjMwNjc=", "number": 935, "title": "Git.AutoInterrupt.__del__()  OSError: [WinError 6] The handle is invalid", "user": {"login": "benthayer", "id": 6099299, "node_id": "MDQ6VXNlcjYwOTkyOTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6099299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benthayer", "html_url": "https://github.com/benthayer", "followers_url": "https://api.github.com/users/benthayer/followers", "following_url": "https://api.github.com/users/benthayer/following{/other_user}", "gists_url": "https://api.github.com/users/benthayer/gists{/gist_id}", "starred_url": "https://api.github.com/users/benthayer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benthayer/subscriptions", "organizations_url": "https://api.github.com/users/benthayer/orgs", "repos_url": "https://api.github.com/users/benthayer/repos", "events_url": "https://api.github.com/users/benthayer/events{/privacy}", "received_events_url": "https://api.github.com/users/benthayer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}, {"id": 453965976, "node_id": "MDU6TGFiZWw0NTM5NjU5NzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/tag.Windows", "name": "tag.Windows", "color": "c5def5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/32", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/32", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/32/labels", "id": 4773488, "node_id": "MDk6TWlsZXN0b25lNDc3MzQ4OA==", "number": 32, "title": "v3.0.5 - Bugfixes", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2019-10-22T10:46:06Z", "updated_at": "2019-11-14T00:58:16Z", "due_on": null, "closed_at": "2019-11-14T00:58:16Z"}, "comments": 9, "created_at": "2019-10-10T17:59:01Z", "updated_at": "2019-11-14T01:12:58Z", "closed_at": "2019-10-23T10:32:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm getting this error on the multiple windows machines I've tested this on. I'm working on an open source project, so it should be relatively easy to reproduce although I'm not sure on how easy it'd be to fix.\r\n\r\nI'm using Python 3.7.4\r\n\r\nLink to my repo: https://github.com/bthayer2365/git-gud\r\n\r\nHere is the full error:\r\n```\r\nSetting up challenge: \"intro commits\"\r\nSetup complete\r\nType \"git gud instructions\" to view instructions\r\nExecuted successfully\r\nException ignored in: <function Git.AutoInterrupt.__del__ at 0x0000015DE3031798>\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\benth\\Miniconda3\\envs\\git-gud\\lib\\site-packages\\git\\cmd.py\", line 365, in __del__\r\n    if proc.poll() is not None:\r\n  File \"c:\\Users\\benth\\Miniconda3\\envs\\git-gud\\lib\\subprocess.py\", line 966, in poll\r\n    return self._internal_poll()\r\n  File \"c:\\Users\\benth\\Miniconda3\\envs\\git-gud\\lib\\subprocess.py\", line 1216, in _internal_poll\r\n    if _WaitForSingleObject(self._handle, 0) == _WAIT_OBJECT_0:\r\nOSError: [WinError 6] The handle is invalid\r\nException ignored in: <function Git.AutoInterrupt.__del__ at 0x0000015DE3031798>\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\benth\\Miniconda3\\envs\\git-gud\\lib\\site-packages\\git\\cmd.py\", line 365, in __del__\r\n    if proc.poll() is not None:\r\n  File \"c:\\Users\\benth\\Miniconda3\\envs\\git-gud\\lib\\subprocess.py\", line 966, in poll\r\n    return self._internal_poll()\r\n  File \"c:\\Users\\benth\\Miniconda3\\envs\\git-gud\\lib\\subprocess.py\", line 1216, in _internal_poll\r\n    if _WaitForSingleObject(self._handle, 0) == _WAIT_OBJECT_0:\r\nOSError: [WinError 6] The handle is invalid\r\n```\r\n\r\nHow to reproduce:\r\n```\r\ngit clone git@github.com:bthayer2365/git-gud.git  # or fork it!\r\ncd git-gud\r\ngit checkout 4fe87dcdc56fe7cee8924663bef694b8e6c8ecc2\r\npip install -e .\r\ncd ..\r\nmkdir test\r\ncd test\r\npython -m gitgud start # Error occurs here\r\ngit gud load intro # Error occurs here\r\n```\r\n`python -m gitgud start` calls the same function that `git gud load intro` does.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/932", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/932/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/932/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/932/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/932", "id": 503022085, "node_id": "MDU6SXNzdWU1MDMwMjIwODU=", "number": 932, "title": "GitPython parsing 'C'-type diffs incorrectly", "user": {"login": "joaopenteado", "id": 4219131, "node_id": "MDQ6VXNlcjQyMTkxMzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4219131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joaopenteado", "html_url": "https://github.com/joaopenteado", "followers_url": "https://api.github.com/users/joaopenteado/followers", "following_url": "https://api.github.com/users/joaopenteado/following{/other_user}", "gists_url": "https://api.github.com/users/joaopenteado/gists{/gist_id}", "starred_url": "https://api.github.com/users/joaopenteado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joaopenteado/subscriptions", "organizations_url": "https://api.github.com/users/joaopenteado/orgs", "repos_url": "https://api.github.com/users/joaopenteado/repos", "events_url": "https://api.github.com/users/joaopenteado/events{/privacy}", "received_events_url": "https://api.github.com/users/joaopenteado/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-05T22:04:05Z", "updated_at": "2019-10-20T23:06:03Z", "closed_at": "2019-10-20T23:06:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm using GitPython `3.0.2` and noticed that `git.Diffable` cannot properly handle copied files (`C`). I realize this kind of change type is seldom used so it might be a known issue, but since I couldn't find anyone reporting it I thought I'd just make sure that everyone's aware of it.\r\n\r\n### How to reproduce\r\nPrepare the demo repo:\r\n```shell\r\nmkdir test\r\ncd test\r\ngit init\r\ndd if=/dev/urandom of=test1.txt bs=1M count=1\r\ngit add . && git commit -m \"1\"\r\ncp test1.txt test2.txt\r\ngit add . && git commit -m \"2\"\r\n```\r\nOn Python\r\n```python\r\nfrom git import Repo\r\nfrom os import getcwd\r\nhcommit = Repo(getcwd()).head.commit\r\ndiffs = hcommit.diff('HEAD~1', R=True, find_copies_harder=True)\r\n```\r\nYou will observe that:\r\n- `diffs[0].change_type` correctly outputs `C` instead of `C100`\r\n- Both `diffs[0].a_path` and `diffs[0].b_path` will output `test1.txt\\ttest2.txt` intead of `a_path` being `test1.txt` and `b_path` being `test2.txt`.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/924", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/924/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/924/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/924/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/924", "id": 499432263, "node_id": "MDU6SXNzdWU0OTk0MzIyNjM=", "number": 924, "title": "[question] How to interpret `env` param in `Repo.clone_from`", "user": {"login": "pared", "id": 10195618, "node_id": "MDQ6VXNlcjEwMTk1NjE4", "avatar_url": "https://avatars0.githubusercontent.com/u/10195618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pared", "html_url": "https://github.com/pared", "followers_url": "https://api.github.com/users/pared/followers", "following_url": "https://api.github.com/users/pared/following{/other_user}", "gists_url": "https://api.github.com/users/pared/gists{/gist_id}", "starred_url": "https://api.github.com/users/pared/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pared/subscriptions", "organizations_url": "https://api.github.com/users/pared/orgs", "repos_url": "https://api.github.com/users/pared/repos", "events_url": "https://api.github.com/users/pared/events{/privacy}", "received_events_url": "https://api.github.com/users/pared/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}, {"id": 60586, "node_id": "MDU6TGFiZWw2MDU4Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/enhancement", "name": "enhancement", "color": "00661b", "default": true, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-27T13:00:53Z", "updated_at": "2019-10-01T07:07:58Z", "closed_at": "2019-10-01T07:07:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\nProblem: recently I stumbled upon a problem when cloning when git used `LD_LIBRARY_PATH` that I thought I deleted.\r\n\r\nIt turned out, that  [here](https://github.com/gitpython-developers/GitPython/blob/07657929bc6c0339d4d2e7e1dde1945199374b90/git/repo/base.py#L1020) environment is updated with provided `env`. I thought that `env` param will be \"copied\" as a working environment, rather than used to update some pre-existing one.\r\n\r\nMy problem was fixed by setting the variable value to an empty string.\r\n\r\nIn [docs](https://gitpython.readthedocs.io/en/stable/reference.html?highlight=clone_from#git.repo.base.Repo.clone_from) of `execute` method, `env` param is described as follows:\r\n\r\n`env \u2013 A dictionary of environment variables to be passed to subprocess.Popen.`\r\n\r\nThis sounds like the env will be used \"as is\".\r\n\r\nSame name of parameter in `clone_from` led me to believe that the behaviour will be similar there.\r\n\r\nQuestion:\r\nIs this behavior intentional?  \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/923", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/923/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/923/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/923/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/923", "id": 498545950, "node_id": "MDU6SXNzdWU0OTg1NDU5NTA=", "number": 923, "title": "[question] How to apply git patch?", "user": {"login": "uilianries", "id": 4870173, "node_id": "MDQ6VXNlcjQ4NzAxNzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4870173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uilianries", "html_url": "https://github.com/uilianries", "followers_url": "https://api.github.com/users/uilianries/followers", "following_url": "https://api.github.com/users/uilianries/following{/other_user}", "gists_url": "https://api.github.com/users/uilianries/gists{/gist_id}", "starred_url": "https://api.github.com/users/uilianries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uilianries/subscriptions", "organizations_url": "https://api.github.com/users/uilianries/orgs", "repos_url": "https://api.github.com/users/uilianries/repos", "events_url": "https://api.github.com/users/uilianries/events{/privacy}", "received_events_url": "https://api.github.com/users/uilianries/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-25T22:01:01Z", "updated_at": "2019-09-28T12:39:29Z", "closed_at": "2019-09-28T10:40:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI would like to apply a patch file as usual:\r\n\r\n    git apply 0001-foobar.patch\r\n\r\nHow could I execute such operation using GitPython?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/921", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/921/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/921/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/921/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/921", "id": 493410735, "node_id": "MDU6SXNzdWU0OTM0MTA3MzU=", "number": 921, "title": "Release notes for 3.0 missing", "user": {"login": "jebob", "id": 9222111, "node_id": "MDQ6VXNlcjkyMjIxMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/9222111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jebob", "html_url": "https://github.com/jebob", "followers_url": "https://api.github.com/users/jebob/followers", "following_url": "https://api.github.com/users/jebob/following{/other_user}", "gists_url": "https://api.github.com/users/jebob/gists{/gist_id}", "starred_url": "https://api.github.com/users/jebob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jebob/subscriptions", "organizations_url": "https://api.github.com/users/jebob/orgs", "repos_url": "https://api.github.com/users/jebob/repos", "events_url": "https://api.github.com/users/jebob/events{/privacy}", "received_events_url": "https://api.github.com/users/jebob/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-13T16:18:30Z", "updated_at": "2019-09-13T19:52:50Z", "closed_at": "2019-09-13T19:52:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I cannot find the release notes for 3.0. https://gitpython.readthedocs.io/en/stable/changes.html only documents 2.x", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/920", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/920/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/920/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/920/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/920", "id": 492794783, "node_id": "MDU6SXNzdWU0OTI3OTQ3ODM=", "number": 920, "title": "Impossible to clone to path with unicode", "user": {"login": "mikicz", "id": 5583319, "node_id": "MDQ6VXNlcjU1ODMzMTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5583319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikicz", "html_url": "https://github.com/mikicz", "followers_url": "https://api.github.com/users/mikicz/followers", "following_url": "https://api.github.com/users/mikicz/following{/other_user}", "gists_url": "https://api.github.com/users/mikicz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikicz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikicz/subscriptions", "organizations_url": "https://api.github.com/users/mikicz/orgs", "repos_url": "https://api.github.com/users/mikicz/repos", "events_url": "https://api.github.com/users/mikicz/events{/privacy}", "received_events_url": "https://api.github.com/users/mikicz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-12T13:07:47Z", "updated_at": "2020-02-18T19:29:35Z", "closed_at": "2019-10-28T08:00:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, in integration of GitPython I ran into an issue with cloning into directories that have an unicode name. This was an issue with version 2.1.9 and has not been fixed with upgrade to 3.0.2.\r\n\r\nI am using Python 3.7.\r\n\r\nBasically, if you pass a `str` with some unicode to e.g. `Repo.clone_from` than the package throws an `UnicodeEncodeError`, it seems in processing of the output of the command.\r\n\r\n```\r\n    return Repo.clone_from(repo, repo_path, branch=branch, **kwargs)\r\nvenv/lib64/python3.7/site-packages/git/repo/base.py:1023: in clone_from\r\n    return cls._clone(git, url, to_path, GitCmdObjectDB, progress, multi_options, **kwargs)\r\nvenv/lib64/python3.7/site-packages/git/repo/base.py:969: in _clone\r\n    finalize_process(proc, stderr=stderr)\r\nvenv/lib64/python3.7/site-packages/git/util.py:333: in finalize_process\r\n    proc.wait(**kwargs)\r\nvenv/lib64/python3.7/site-packages/git/cmd.py:399: in wait\r\n    stderr = force_bytes(stderr)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ndata = \"Cloning into '/tmp/arca/test/ab\u010d\u010f/repos/_tmp_tmp1f9n_j71299f859f6fac750147aec65a9992f8e289ef42177ff1b234677764b2d5c61560/master'...\\n\", encoding = 'ascii'\r\n\r\n    def force_bytes(data, encoding=\"ascii\"):\r\n        if isinstance(data, bytes):\r\n            return data\r\n    \r\n        if isinstance(data, string_types):\r\n>           return data.encode(encoding)\r\nE           UnicodeEncodeError: 'ascii' codec can't encode characters in position 31-32: ordinal not in range(128)\r\n```\r\n\r\nSince GitPython is Python 3+ only now, it would make make sense to set the default encoding in `force_bytes` to utf-8, that actually fixes the issue when I try it. This was proposed in https://github.com/gitpython-developers/gitdb/pull/48 and or https://github.com/gitpython-developers/gitdb/pull/49, but it's been a while since those have been proposed.\r\n\r\nMaybe an another solution would be for the use to be able to select the default encoding somehow, as not to break previous cases, but to provide a solution for this issue?\r\n\r\nThis is related to #761, which seems to be stale at the moment. I'm raising the issue again since it's still an problem in the new version of GitPython which is Python 3+. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/916", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/916/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/916/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/916/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/916", "id": 490850936, "node_id": "MDU6SXNzdWU0OTA4NTA5MzY=", "number": 916, "title": "Git().custom_environment(GIT_SSH_COMMAND=git_ssh_cmd) issue", "user": {"login": "CaptainJL", "id": 20182872, "node_id": "MDQ6VXNlcjIwMTgyODcy", "avatar_url": "https://avatars3.githubusercontent.com/u/20182872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaptainJL", "html_url": "https://github.com/CaptainJL", "followers_url": "https://api.github.com/users/CaptainJL/followers", "following_url": "https://api.github.com/users/CaptainJL/following{/other_user}", "gists_url": "https://api.github.com/users/CaptainJL/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaptainJL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaptainJL/subscriptions", "organizations_url": "https://api.github.com/users/CaptainJL/orgs", "repos_url": "https://api.github.com/users/CaptainJL/repos", "events_url": "https://api.github.com/users/CaptainJL/events{/privacy}", "received_events_url": "https://api.github.com/users/CaptainJL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60656, "node_id": "MDU6TGFiZWw2MDY1Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/waiting%20for%20feedback", "name": "waiting for feedback", "color": "ff8c00", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-09T02:49:46Z", "updated_at": "2019-09-13T05:55:20Z", "closed_at": "2019-09-13T05:55:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey all,\r\n\r\nI am having an issue with using the custom_environment parameter.\r\nThis is on a Windows 10 machine.\r\n\r\nBasically this will not work, returning the error (see under code)\r\n```\r\nimport git\r\nfrom git import Repo\r\nfrom git import Git\r\ngit_ssh_cmd = 'ssh -i gpt_key'\r\nwith Git().custom_environment(GIT_SSH_COMMAND=git_ssh_cmd):\r\n     Repo.clone_from('git@bitbucket.org:<private git>.git', 'python_test_cloning')\r\n```\r\n\r\n> git@bitbucket.org: Permission denied (publickey).\r\n> fatal: Could not read from remote repository.\r\n> \r\n> Please make sure you have the correct access rights\r\n> and the repository exists.\r\n\r\nHowever setting the env variable in the Repo.clone_from command works fine:\r\n`Repo.clone_from('git@bitbucket.org:<private git>.git', 'python_test_cloning', env={\"GIT_SSH_COMMAND\": 'ssh -i gpt_key'})`\r\n\r\nI need to be able to use the ssh key for operation other than cloning, so I need to be able to set up the local environment purely via the python interface. This also fails for reference (when I did sucessfully clone).\r\n```\r\nrepo = git.Repo(\"python_test_cloning\")\r\nwith repo.git.custom_environment(GIT_SSH_COMMAND='ssh -i gpt_key'):\r\n    for remote in repo.remotes:\r\n        remote.fetch()\r\n```\r\nwith error:\r\n\r\n> git.exc.GitCommandError: Cmd('git') failed due to: exit code(128)\r\n>   cmdline: git fetch -v origin\r\n>   stderr: 'fatal: Could not read from remote repository.\r\n> \r\n> Please make sure you have the correct access rights\r\n> and the repository exists.'\r\n\r\n\r\nAny ideas of why this is not working and how to fix it?\r\nRemember that this is Windows 10.\r\n\r\nThanks,\r\nCaptainJL\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/915", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/915/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/915/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/915/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/915", "id": 488131519, "node_id": "MDU6SXNzdWU0ODgxMzE1MTk=", "number": 915, "title": "UnicodeDecodeError in gpgsig", "user": {"login": "ishepard", "id": 9136821, "node_id": "MDQ6VXNlcjkxMzY4MjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9136821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishepard", "html_url": "https://github.com/ishepard", "followers_url": "https://api.github.com/users/ishepard/followers", "following_url": "https://api.github.com/users/ishepard/following{/other_user}", "gists_url": "https://api.github.com/users/ishepard/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishepard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishepard/subscriptions", "organizations_url": "https://api.github.com/users/ishepard/orgs", "repos_url": "https://api.github.com/users/ishepard/repos", "events_url": "https://api.github.com/users/ishepard/events{/privacy}", "received_events_url": "https://api.github.com/users/ishepard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-02T11:00:36Z", "updated_at": "2019-09-16T08:49:17Z", "closed_at": "2019-09-16T08:49:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi @Byron !\r\nSo, someone find this bug using my tool, and it's propagated to GitPython. The problem is in the decoding of a non-ascii character.\r\n\r\nrepo: https://github.com/gentoo/gentoo\r\ncommit: `13e644bb36a0b1f3ef0c2091ab648978d18f369d`\r\n\r\ncode:\r\n```\r\nfrom git import Repo, Commit\r\n\r\ngr = Repo('/tmp/gentoo')\r\nc = gr.commit('13e644bb36a0b1f3ef0c2091ab648978d18f369d')\r\n\r\nprint(c.authored_date)\r\n``` \r\nThis returns:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/dspadini/Documents/pydriller/tmp.py\", line 341, in <module>\r\n    print(c.authored_date)\r\n  File \"/Users/dspadini/Documents/pydriller/venv/lib/python3.7/site-packages/gitdb/util.py\", line 253, in __getattr__\r\n    self._set_cache_(attr)\r\n  File \"/Users/dspadini/Documents/pydriller/venv/lib/python3.7/site-packages/git/objects/commit.py\", line 144, in _set_cache_\r\n    self._deserialize(BytesIO(stream.read()))\r\n  File \"/Users/dspadini/Documents/pydriller/venv/lib/python3.7/site-packages/git/objects/commit.py\", line 502, in _deserialize\r\n    self.gpgsig = sig.rstrip(b\"\\n\").decode('ascii')\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 75: ordinal not in range(128)\r\n```\r\nThe problem is in [this line](https://github.com/gitpython-developers/GitPython/blob/master/git/objects/commit.py#L501). The line to be decoded is the following:\r\n```\r\nb'-----BEGIN PGP SIGNATURE-----\\nVersion: GnuPG v2.1\\nComment: Signed-off-by: J\\xc3\\xb6rg Bornkessel <hd_brummy@gentoo.org>\\n\\n.........\\n-----END PGP SIGNATURE-----\\n'\r\n```\r\nAs you can see, at the beginning we have `J\\xc3\\xb6rg`. This fails the decoding.\r\n\r\nSo, I tried to change `.decode('ascii')` to `.decode('UTF-8')` and **it works**. \r\nAlso, changing `.decode('ascii')` to `.decode('ascii', 'ignore')` **works**.\r\n\r\nHowever, I am not sure whether I should do it. Why is `ascii` in the first place (instead of UTF-8)?\r\nAre we gonna break tests with this change? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/912", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/912/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/912/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/912/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/912", "id": 484538222, "node_id": "MDU6SXNzdWU0ODQ1MzgyMjI=", "number": 912, "title": "how can I add username and password?", "user": {"login": "testforgity", "id": 54016631, "node_id": "MDQ6VXNlcjU0MDE2NjMx", "avatar_url": "https://avatars2.githubusercontent.com/u/54016631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/testforgity", "html_url": "https://github.com/testforgity", "followers_url": "https://api.github.com/users/testforgity/followers", "following_url": "https://api.github.com/users/testforgity/following{/other_user}", "gists_url": "https://api.github.com/users/testforgity/gists{/gist_id}", "starred_url": "https://api.github.com/users/testforgity/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/testforgity/subscriptions", "organizations_url": "https://api.github.com/users/testforgity/orgs", "repos_url": "https://api.github.com/users/testforgity/repos", "events_url": "https://api.github.com/users/testforgity/events{/privacy}", "received_events_url": "https://api.github.com/users/testforgity/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}, {"id": 60656, "node_id": "MDU6TGFiZWw2MDY1Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/waiting%20for%20feedback", "name": "waiting for feedback", "color": "ff8c00", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-23T13:43:40Z", "updated_at": "2019-08-24T01:54:42Z", "closed_at": "2019-08-24T01:54:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Git always askes me to write username and password so my program can't push into git. How can I improve it?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/909", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/909/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/909/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/909/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/909", "id": 482794864, "node_id": "MDU6SXNzdWU0ODI3OTQ4NjQ=", "number": 909, "title": "Get the output of \"git ls-remote --heads origin\" with GitPython", "user": {"login": "inazir", "id": 18288421, "node_id": "MDQ6VXNlcjE4Mjg4NDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/18288421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inazir", "html_url": "https://github.com/inazir", "followers_url": "https://api.github.com/users/inazir/followers", "following_url": "https://api.github.com/users/inazir/following{/other_user}", "gists_url": "https://api.github.com/users/inazir/gists{/gist_id}", "starred_url": "https://api.github.com/users/inazir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inazir/subscriptions", "organizations_url": "https://api.github.com/users/inazir/orgs", "repos_url": "https://api.github.com/users/inazir/repos", "events_url": "https://api.github.com/users/inazir/events{/privacy}", "received_events_url": "https://api.github.com/users/inazir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-20T11:08:23Z", "updated_at": "2019-08-22T02:57:30Z", "closed_at": "2019-08-22T02:57:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have been trying to get the remote branches, to be more precise the output of the following command `git ls-remote --heads origin`. But I haven't been successful so far. I have tried the following methods in the mean time, which don't serve my purpose.\r\n\r\n`repo = git.Repo(my_git_path)`\r\n\r\n#method 1\r\n`current_branches = repo.git.branch('-a')`\r\n\r\n#method 2\r\n`current_branches = []`\r\n`for ref in repo.git.branch('-r').split('\\n'):`\r\n`    current_branches.append(ref)`\r\n\r\nCould anyone please help me with the issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/908", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/908/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/908/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/908/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/908", "id": 480951715, "node_id": "MDU6SXNzdWU0ODA5NTE3MTU=", "number": 908, "title": "Installing gitdb and gitdb2 simultaneously breaks gitdb package", "user": {"login": "arigesher", "id": 843275, "node_id": "MDQ6VXNlcjg0MzI3NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/843275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arigesher", "html_url": "https://github.com/arigesher", "followers_url": "https://api.github.com/users/arigesher/followers", "following_url": "https://api.github.com/users/arigesher/following{/other_user}", "gists_url": "https://api.github.com/users/arigesher/gists{/gist_id}", "starred_url": "https://api.github.com/users/arigesher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arigesher/subscriptions", "organizations_url": "https://api.github.com/users/arigesher/orgs", "repos_url": "https://api.github.com/users/arigesher/repos", "events_url": "https://api.github.com/users/arigesher/events{/privacy}", "received_events_url": "https://api.github.com/users/arigesher/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/28", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/28", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/28/labels", "id": 4564632, "node_id": "MDk6TWlsZXN0b25lNDU2NDYzMg==", "number": 28, "title": "v3.0.1 - Bugfixes", "description": "Bugfixes and improvements submitted via PRs.", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2019-08-12T03:26:12Z", "updated_at": "2019-08-21T21:55:44Z", "due_on": null, "closed_at": "2019-08-15T02:50:14Z"}, "comments": 7, "created_at": "2019-08-15T01:07:17Z", "updated_at": "2020-02-18T19:51:04Z", "closed_at": "2019-08-15T01:27:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "The change to `requirements.txt` in 2e7e82b114a5c1b3eb61f171c376e1cf85563d07 specifies that both `gitdb2` and `gitdb` be installed.  As installation packages they share the same name and step on each other.\r\n\r\nThis breaks the use of the module like this:\r\n\r\n```\r\nPython 3.5.2 (default, Nov 12 2018, 13:43:14)\r\n[GCC 5.4.0 20160609] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import gitdb\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nImportError: No module named 'gitdb'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/907", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/907/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/907/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/907/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/907", "id": 479887160, "node_id": "MDU6SXNzdWU0Nzk4ODcxNjA=", "number": 907, "title": "3.0.0 regression", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars3.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/28", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/28", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/28/labels", "id": 4564632, "node_id": "MDk6TWlsZXN0b25lNDU2NDYzMg==", "number": 28, "title": "v3.0.1 - Bugfixes", "description": "Bugfixes and improvements submitted via PRs.", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2019-08-12T03:26:12Z", "updated_at": "2019-08-21T21:55:44Z", "due_on": null, "closed_at": "2019-08-15T02:50:14Z"}, "comments": 2, "created_at": "2019-08-12T23:02:14Z", "updated_at": "2019-08-14T10:02:43Z", "closed_at": "2019-08-14T10:02:37Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "bisected to 0b6b90f9f1e5310a6f39b75e17a04c1133269e8f which caused our tests to start failing with 3.0.0 release: https://github.com/datalad/datalad/issues/3598 .  Unfortunately I do not have yet a good concise example to reproduce. \r\n\r\nhere is our [failing test](https://github.com/datalad/datalad/blob/master/datalad/support/tests/utils.py#L15) traceback on travis:\r\n```\r\n# from https://travis-ci.org/datalad/datalad/jobs/570888123#L1125\r\n======================================================================\r\nERROR: datalad.support.tests.test_annexrepo.test_AnnexRepo_flyweight_monitoring_inode\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/nose/case.py\", line 198, in runTest\r\n    self.test(*self.arg)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/datalad/tests/utils.py\", line 615, in newfunc\r\n    return t(*(arg + (filename,)), **kw)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/datalad/tests/utils.py\", line 615, in newfunc\r\n    return t(*(arg + (filename,)), **kw)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/datalad/support/tests/test_annexrepo.py\", line 2399, in test_AnnexRepo_flyweight_monitoring_inode\r\n    check_repo_deals_with_inode_change(AnnexRepo, path, store)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/datalad/support/tests/utils.py\", line 53, in check_repo_deals_with_inode_change\r\n    hexsha = repo.repo.head.object.hexsha\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/git/refs/symbolic.py\", line 193, in _get_object\r\n    return Object.new_from_sha(self.repo, hex_to_bin(self.dereference_recursive(self.repo, self.path)))\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/git/objects/base.py\", line 64, in new_from_sha\r\n    oinfo = repo.odb.info(sha1)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/git/db.py\", line 37, in info\r\n    hexsha, typename, size = self._git.get_object_header(bin_to_hex(sha))\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/git/cmd.py\", line 1077, in get_object_header\r\n    return self.__get_object_header(cmd, ref)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/git/cmd.py\", line 1066, in __get_object_header\r\n    return self._parse_object_header(cmd.stdout.readline())\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/git/cmd.py\", line 1030, in _parse_object_header\r\n    raise ValueError(\"SHA %s could not be resolved, git returned: %r\" % (tokens[0], header_line.strip()))\r\nValueError: SHA b'8097085c9fb022ad18cea2ff099fbcd13ae953be' could not be resolved, git returned: b'8097085c9fb022ad18cea2ff099fbcd13ae953be missing'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/906", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/906/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/906/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/906/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/906", "id": 479822808, "node_id": "MDU6SXNzdWU0Nzk4MjI4MDg=", "number": 906, "title": "Possible performance regression in GitPython 3.0.0", "user": {"login": "jeblair", "id": 899068, "node_id": "MDQ6VXNlcjg5OTA2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/899068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeblair", "html_url": "https://github.com/jeblair", "followers_url": "https://api.github.com/users/jeblair/followers", "following_url": "https://api.github.com/users/jeblair/following{/other_user}", "gists_url": "https://api.github.com/users/jeblair/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeblair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeblair/subscriptions", "organizations_url": "https://api.github.com/users/jeblair/orgs", "repos_url": "https://api.github.com/users/jeblair/repos", "events_url": "https://api.github.com/users/jeblair/events{/privacy}", "received_events_url": "https://api.github.com/users/jeblair/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/28", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/28", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/28/labels", "id": 4564632, "node_id": "MDk6TWlsZXN0b25lNDU2NDYzMg==", "number": 28, "title": "v3.0.1 - Bugfixes", "description": "Bugfixes and improvements submitted via PRs.", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2019-08-12T03:26:12Z", "updated_at": "2019-08-21T21:55:44Z", "due_on": null, "closed_at": "2019-08-15T02:50:14Z"}, "comments": 2, "created_at": "2019-08-12T19:57:18Z", "updated_at": "2019-08-14T09:25:01Z", "closed_at": "2019-08-14T09:25:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have observed that the test run time on the Zuul project, which makes heavy use of GitPython, has increased by a factor of 1.5 (30 minutes under 2.1.13 to 45 minutes under 3.0.0).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/905", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/905/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/905/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/905/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/905", "id": 478504091, "node_id": "MDU6SXNzdWU0Nzg1MDQwOTE=", "number": 905, "title": "How do you rebase?", "user": {"login": "EdwardJB", "id": 30390944, "node_id": "MDQ6VXNlcjMwMzkwOTQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/30390944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdwardJB", "html_url": "https://github.com/EdwardJB", "followers_url": "https://api.github.com/users/EdwardJB/followers", "following_url": "https://api.github.com/users/EdwardJB/following{/other_user}", "gists_url": "https://api.github.com/users/EdwardJB/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdwardJB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdwardJB/subscriptions", "organizations_url": "https://api.github.com/users/EdwardJB/orgs", "repos_url": "https://api.github.com/users/EdwardJB/repos", "events_url": "https://api.github.com/users/EdwardJB/events{/privacy}", "received_events_url": "https://api.github.com/users/EdwardJB/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-08T14:23:38Z", "updated_at": "2019-08-12T02:52:38Z", "closed_at": "2019-08-12T02:52:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation doesn't mention the term.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/898", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/898/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/898/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/898/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/898", "id": 470928871, "node_id": "MDU6SXNzdWU0NzA5Mjg4NzE=", "number": 898, "title": "GitPython wheel includes \"py2\" in filename, but doesn't support Python 2", "user": {"login": "toddmowen", "id": 370691, "node_id": "MDQ6VXNlcjM3MDY5MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/370691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddmowen", "html_url": "https://github.com/toddmowen", "followers_url": "https://api.github.com/users/toddmowen/followers", "following_url": "https://api.github.com/users/toddmowen/following{/other_user}", "gists_url": "https://api.github.com/users/toddmowen/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddmowen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddmowen/subscriptions", "organizations_url": "https://api.github.com/users/toddmowen/orgs", "repos_url": "https://api.github.com/users/toddmowen/repos", "events_url": "https://api.github.com/users/toddmowen/events{/privacy}", "received_events_url": "https://api.github.com/users/toddmowen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/27", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27/labels", "id": 3496893, "node_id": "MDk6TWlsZXN0b25lMzQ5Njg5Mw==", "number": 27, "title": "v3.0.0 - Remove Python 2", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 35, "state": "closed", "created_at": "2018-07-15T13:34:31Z", "updated_at": "2019-09-28T16:44:49Z", "due_on": null, "closed_at": "2019-08-12T03:25:48Z"}, "comments": 5, "created_at": "2019-07-22T07:06:46Z", "updated_at": "2019-08-11T08:34:13Z", "closed_at": "2019-08-11T08:34:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure the proper conventions for using wheel to distribute packages, but the current artifact on PyPI is called `GitPython-2.1.12-py2.py3-none-any.whl`, implying support for Python 2. Although it's true that the \"Meta\" section on PyPI specifies Python >=3.0.\r\n\r\nIs it possible to configure wheel to name it just with `py3` instead?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/897", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/897/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/897/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/897/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/897", "id": 470774305, "node_id": "MDU6SXNzdWU0NzA3NzQzMDU=", "number": 897, "title": "GitPython not available for Python 2.7", "user": {"login": "lbussy", "id": 9092188, "node_id": "MDQ6VXNlcjkwOTIxODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/9092188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbussy", "html_url": "https://github.com/lbussy", "followers_url": "https://api.github.com/users/lbussy/followers", "following_url": "https://api.github.com/users/lbussy/following{/other_user}", "gists_url": "https://api.github.com/users/lbussy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbussy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbussy/subscriptions", "organizations_url": "https://api.github.com/users/lbussy/orgs", "repos_url": "https://api.github.com/users/lbussy/repos", "events_url": "https://api.github.com/users/lbussy/events{/privacy}", "received_events_url": "https://api.github.com/users/lbussy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-21T12:06:55Z", "updated_at": "2020-02-17T01:53:02Z", "closed_at": "2019-07-21T23:54:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Also posted on [Stack Overflow](https://stackoverflow.com/questions/57132292/pip-install-gitpython-upgrade-fails-with-python-3-x-requirement) in case this is just me.\r\n\r\nWhen I try to install gitpython via pip normally under python 2.7, it fails telling me python 3.x is required.\r\n\r\nThis particular script/process has worked until this morning.  Potential sources of the change (in my case) are an upgrade to Debian Buster (Raspbian in this case.)\r\n\r\n```\r\n $ sudo pip install gitpython\r\nLooking in indexes: https://pypi.org/simple, https://www.piwheels.org/simple\r\nCollecting gitpython\r\n  Using cached https://www.piwheels.org/simple/gitpython/GitPython-2.1.12-py2.py3-none-any.whl\r\nGitPython requires Python '>=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*' but the running Python is 2.7.16\r\n```\r\n\r\nI am running Python 2.7.16\r\n\r\n```\r\n$ python --version\r\nPython 2.7.16\r\n```\r\n\r\nWhen I check the current [documentation](https://gitpython.readthedocs.io/en/stable/intro.html#requirements) I see that Python 2.7 or newer is listed as a requirement.  What am I missing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/896", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/896/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/896/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/896/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/896", "id": 469382987, "node_id": "MDU6SXNzdWU0NjkzODI5ODc=", "number": 896, "title": "Semantics of 'bare'", "user": {"login": "itsbluething", "id": 15061327, "node_id": "MDQ6VXNlcjE1MDYxMzI3", "avatar_url": "https://avatars3.githubusercontent.com/u/15061327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsbluething", "html_url": "https://github.com/itsbluething", "followers_url": "https://api.github.com/users/itsbluething/followers", "following_url": "https://api.github.com/users/itsbluething/following{/other_user}", "gists_url": "https://api.github.com/users/itsbluething/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsbluething/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsbluething/subscriptions", "organizations_url": "https://api.github.com/users/itsbluething/orgs", "repos_url": "https://api.github.com/users/itsbluething/repos", "events_url": "https://api.github.com/users/itsbluething/events{/privacy}", "received_events_url": "https://api.github.com/users/itsbluething/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-17T18:42:05Z", "updated_at": "2019-07-21T00:36:23Z", "closed_at": "2019-07-21T00:36:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could I get the exact definition of a 'bare' repo versus one that isn't bare? I'm having trouble understanding the semantics of the flag- for example, `Repo.init(dirname)` initialized on a directory with no contents is not necessarily 'bare'.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/889", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/889/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/889/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/889/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/889", "id": 463668773, "node_id": "MDU6SXNzdWU0NjM2Njg3NzM=", "number": 889, "title": "deepsource.io issue analysis", "user": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-03T10:18:29Z", "updated_at": "2019-09-10T11:15:12Z", "closed_at": "2019-09-10T11:15:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Maybe useful to start improving the codebase.\r\n\r\nhttps://deepsource.io/gh/jaipradeesh/GitPython/issues/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/886", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/886/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/886/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/886/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/886", "id": 461074820, "node_id": "MDU6SXNzdWU0NjEwNzQ4MjA=", "number": 886, "title": "how to use git submodule foreach and its variables", "user": {"login": "3nids", "id": 127259, "node_id": "MDQ6VXNlcjEyNzI1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/127259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3nids", "html_url": "https://github.com/3nids", "followers_url": "https://api.github.com/users/3nids/followers", "following_url": "https://api.github.com/users/3nids/following{/other_user}", "gists_url": "https://api.github.com/users/3nids/gists{/gist_id}", "starred_url": "https://api.github.com/users/3nids/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3nids/subscriptions", "organizations_url": "https://api.github.com/users/3nids/orgs", "repos_url": "https://api.github.com/users/3nids/repos", "events_url": "https://api.github.com/users/3nids/events{/privacy}", "received_events_url": "https://api.github.com/users/3nids/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-26T16:40:47Z", "updated_at": "2019-06-26T16:52:24Z", "closed_at": "2019-06-26T16:52:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not strictly an issue, but I couldn't find anything in the doc and my understanding of the API is limited. Sorry if it's a stupid question.\r\n\r\nI would like to use `repo.git.submodule('foreach', \u2026)` and get the variables available such as `name`, `sm_path`, `displaypath`, `sha1` and `toplevel` as defined in the [git documentation](https://git-scm.com/docs/git-submodule#Documentation/git-submodule.txt-foreach--recursiveltcommandgt).\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/882", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/882/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/882/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/882/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/882", "id": 456069543, "node_id": "MDU6SXNzdWU0NTYwNjk1NDM=", "number": 882, "title": "Wrong change_type for diff('HEAD')", "user": {"login": "aruehl", "id": 3062585, "node_id": "MDQ6VXNlcjMwNjI1ODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3062585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aruehl", "html_url": "https://github.com/aruehl", "followers_url": "https://api.github.com/users/aruehl/followers", "following_url": "https://api.github.com/users/aruehl/following{/other_user}", "gists_url": "https://api.github.com/users/aruehl/gists{/gist_id}", "starred_url": "https://api.github.com/users/aruehl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aruehl/subscriptions", "organizations_url": "https://api.github.com/users/aruehl/orgs", "repos_url": "https://api.github.com/users/aruehl/repos", "events_url": "https://api.github.com/users/aruehl/events{/privacy}", "received_events_url": "https://api.github.com/users/aruehl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60656, "node_id": "MDU6TGFiZWw2MDY1Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/waiting%20for%20feedback", "name": "waiting for feedback", "color": "ff8c00", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-14T05:41:14Z", "updated_at": "2019-07-20T11:01:36Z", "closed_at": "2019-07-20T11:01:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've seen Issue #531 and #534, but this failure exists further on.\r\n\r\nchange_type, new_file and deleted_file have wrong values.\r\n\r\nIt seems for me, that the detection for added and removed files are interchanged.\r\n\r\nHere is what I've done:\r\n\r\n```\r\n$ git init\r\n$ echo \"removed\" > removed.txt\r\n$ git add removed.txt\r\n$ git commit -m \"removed.txt added\"\r\n$ echo \"added\" > added.txt\r\n$ git add added.txt\r\n$ git rm removed.txt\r\n$ git status -s\r\nA  added.txt\r\nD  removed.txt\r\n$\r\n```\r\n\r\nexecuting the script\r\n```\r\nfrom git import Repo, IndexFile\r\nrepo = Repo(\".\")\r\nfor diff_item in repo.index.diff(\"HEAD\"):\r\n        print(diff_item.a_path)\r\n        print(diff_item.change_type)\r\n        print(diff_item.new_file)\r\n        print(diff_item.deleted_file)\r\n        print()\r\n```\r\n```\r\n$ python3 difffailure.py\r\nadded.txt\r\nD\r\nFalse\r\nTrue\r\n\r\nremoved.txt\r\nA\r\nTrue\r\nFalse\r\n\r\n$ python3 --version\r\nPython 3.6.6\r\n$ python3 -m pip show GitPython\r\nName: GitPython\r\nVersion: 2.1.11\r\n[...]\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/881", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/881/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/881/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/881/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/881", "id": 453558329, "node_id": "MDU6SXNzdWU0NTM1NTgzMjk=", "number": 881, "title": "git.exc.InvalidGitRepositoryError for GitPython v2.1.11", "user": {"login": "weijiafeng", "id": 40955107, "node_id": "MDQ6VXNlcjQwOTU1MTA3", "avatar_url": "https://avatars2.githubusercontent.com/u/40955107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weijiafeng", "html_url": "https://github.com/weijiafeng", "followers_url": "https://api.github.com/users/weijiafeng/followers", "following_url": "https://api.github.com/users/weijiafeng/following{/other_user}", "gists_url": "https://api.github.com/users/weijiafeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/weijiafeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weijiafeng/subscriptions", "organizations_url": "https://api.github.com/users/weijiafeng/orgs", "repos_url": "https://api.github.com/users/weijiafeng/repos", "events_url": "https://api.github.com/users/weijiafeng/events{/privacy}", "received_events_url": "https://api.github.com/users/weijiafeng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-07T15:00:11Z", "updated_at": "2019-07-20T11:41:51Z", "closed_at": "2019-07-20T11:41:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Authors,\r\n\r\nI have installed the latest GitPython (v2.1.11), however I faced the git.exc.InvalidGitRepositoryError: /Users/maggiefeng/reward-learning-rl/softlearning. I've tried various methods as described in previous Issues, however it still didn't work. And I am aware the previous solutions refer to older versions of GitPython, the problem of which should be fixed in this latest version.\r\n\r\nI would like to know where the problem lies, many thanks!\r\n\r\nMy environment is:\r\nMacOS Mojave version 10.14.1\r\nPython 3.6.5\r\n\r\nThe error screenshot:\r\n<img width=\"931\" alt=\"image\" src=\"https://user-images.githubusercontent.com/40955107/59113477-ae4e6e80-8977-11e9-81f4-67b099cabe85.png\">", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/880", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/880/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/880/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/880/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/880", "id": 448839900, "node_id": "MDU6SXNzdWU0NDg4Mzk5MDA=", "number": 880, "title": "Inconsistent behaviour from merge-base", "user": {"login": "eKoopmans", "id": 8449639, "node_id": "MDQ6VXNlcjg0NDk2Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/8449639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eKoopmans", "html_url": "https://github.com/eKoopmans", "followers_url": "https://api.github.com/users/eKoopmans/followers", "following_url": "https://api.github.com/users/eKoopmans/following{/other_user}", "gists_url": "https://api.github.com/users/eKoopmans/gists{/gist_id}", "starred_url": "https://api.github.com/users/eKoopmans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eKoopmans/subscriptions", "organizations_url": "https://api.github.com/users/eKoopmans/orgs", "repos_url": "https://api.github.com/users/eKoopmans/repos", "events_url": "https://api.github.com/users/eKoopmans/events{/privacy}", "received_events_url": "https://api.github.com/users/eKoopmans/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 262746125, "node_id": "MDU6TGFiZWwyNjI3NDYxMjU=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/wont%20fix", "name": "wont fix", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-27T12:45:24Z", "updated_at": "2019-07-20T10:59:42Z", "closed_at": "2019-07-20T10:59:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thanks for the great project! I've run into some inconsistent behaviour with `merge_base`, though it could be a misunderstanding on my end.\r\n\r\nWhen finding the `merge_base` between two separate repos, comparing branches gives the wrong base (not a common ancestor), while comparing those branches' commits gives the correct base. I have been using two simple repos, where `repo1` is just a few commits ahead of `repo2`. In the example below, the first merge_base returns the HEAD of repo1 (which is ahead of repo2), while the second merge_base returns the HEAD of repo2 (which is correct):\r\n\r\n```python\r\nfrom git import Repo\r\n\r\n# Setup repos and branch objects.\r\nrepo1 = Repo('./repo1')\r\nrepo2 = Repo('./repo2')\r\nmaster1 = repo1.branches['master']\r\nmaster2 = repo2.branches['master']\r\n\r\n# Returns incorrect base (not a common ancestor).\r\nbadBase = repo1.merge_base(master1, master2)[0]\r\n\r\n# Returns the correct base (is a common ancestor).\r\ngoodBase = repo1.merge_base(master1.commit, master2.commit)[0]\r\n```\r\n\r\nFor now simply using the commits seems like a working solution, but I wanted to check if there's a deeper issue, or if I may be using it incorrectly. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/879", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/879/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/879/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/879/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/879", "id": 448666888, "node_id": "MDU6SXNzdWU0NDg2NjY4ODg=", "number": 879, "title": "[Error] TravisCI error when trying to import and use GitPython", "user": {"login": "GlenNicholls", "id": 17171913, "node_id": "MDQ6VXNlcjE3MTcxOTEz", "avatar_url": "https://avatars3.githubusercontent.com/u/17171913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GlenNicholls", "html_url": "https://github.com/GlenNicholls", "followers_url": "https://api.github.com/users/GlenNicholls/followers", "following_url": "https://api.github.com/users/GlenNicholls/following{/other_user}", "gists_url": "https://api.github.com/users/GlenNicholls/gists{/gist_id}", "starred_url": "https://api.github.com/users/GlenNicholls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GlenNicholls/subscriptions", "organizations_url": "https://api.github.com/users/GlenNicholls/orgs", "repos_url": "https://api.github.com/users/GlenNicholls/repos", "events_url": "https://api.github.com/users/GlenNicholls/events{/privacy}", "received_events_url": "https://api.github.com/users/GlenNicholls/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-27T05:04:42Z", "updated_at": "2019-05-28T01:56:12Z", "closed_at": "2019-05-28T01:56:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been trying to find the root directory of a git repository using a manual method (`subprocess.Popen`) along with `GitPython`. In both cases, they work on my Windows machine but cause errors on TravisCi POSIX builds [noted in this link](https://stackoverflow.com/questions/56319559/how-to-fix-subprocess-popen-used-to-find-git-root-causing-travis-ci-error-fil). For reference, here is my `.travis.yml`:\r\n\r\n```\r\nos: linux\r\n\r\nlanguage: python\r\n\r\nsudo: required\r\nservices:\r\n  - docker\r\n\r\ninstall:\r\n  - pip install -r requirements.txt\r\n\r\nscript:\r\n  - git version\r\n  - git rev-parse --show-toplevel\r\n  - \"./docker_runall.sh\"\r\n```\r\n\r\nHere is the code I am using to use this module:\r\n\r\n```\r\nimport git\r\n\r\ndef get_git_root():\r\n    repo = git.Repo('.', search_parent_directories=True)\r\n    return repo.working_tree_dir\r\n\r\nroot = get_git_root() + '/'\r\n```\r\n\r\nAnd my requirements.txt is just grabbing `subprocess32` and `GitPython`. When my build runs my Python scripts, it fails with the below (which can also be seen in the stack overflow link I provided):\r\n\r\n```\r\n2.57s$ pip install -r requirements.txt\r\nCollecting subprocess32 (from -r requirements.txt (line 1))\r\n  Downloading https://files.pythonhosted.org/packages/32/c8/564be4d12629b912ea431f1a50eb8b3b9d00f1a0b1ceff17f266be190007/subprocess32-3.5.4.tar.gz (97kB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 102kB 2.7MB/s \r\nCollecting GitPython (from -r requirements.txt (line 2))\r\n  Downloading https://files.pythonhosted.org/packages/fe/e5/fafe827507644c32d6dc553a1c435cdf882e0c28918a5bab29f7fbebfb70/GitPython-2.1.11-py2.py3-none-any.whl (448kB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 450kB 2.7MB/s \r\nCollecting gitdb2>=2.0.0 (from GitPython->-r requirements.txt (line 2))\r\n  Downloading https://files.pythonhosted.org/packages/da/30/a407568aa8d8f25db817cf50121a958722f3fc5f87e3a6fba1f40c0633e3/gitdb2-2.0.5-py2.py3-none-any.whl (62kB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 71kB 10.8MB/s \r\nCollecting smmap2>=2.0.0 (from gitdb2>=2.0.0->GitPython->-r requirements.txt (line 2))\r\n  Downloading https://files.pythonhosted.org/packages/55/d2/866d45e3a121ee15a1dc013824d58072fd5c7799c9c34d01378eb262ca8f/smmap2-2.0.5-py2.py3-none-any.whl\r\nBuilding wheels for collected packages: subprocess32\r\n  Running setup.py bdist_wheel for subprocess32 ... done\r\n  Stored in directory: /home/travis/.cache/pip/wheels/68/39/1a/5e402bdfdf004af1786c8b853fd92f8c4a04f22aad179654d1\r\nSuccessfully built subprocess32\r\nInstalling collected packages: subprocess32, smmap2, gitdb2, GitPython\r\nSuccessfully installed GitPython-2.1.11 gitdb2-2.0.5 smmap2-2.0.5 subprocess32-3.5.4\r\n0.00s$ git version\r\ngit version 2.15.1\r\nThe command \"git version\" exited with 0.\r\n0.01s$ git rev-parse --show-toplevel\r\n/home/travis/build/GlenNicholls/fpga_cores\r\nThe command \"git rev-parse --show-toplevel\" exited with 0.\r\n15.79s$ ./docker_runall.sh\r\nTraceback (most recent call last):\r\n  File \"./src/memory/run.py\", line 3, in <module>\r\n    import git\r\nModuleNotFoundError: No module named 'git'\r\n```\r\n\r\nAs the above shows, `GitPython` is successfully installed and should be seen by Python, but it is not for some reason. I feel like this should be an easy task, but is proving to be much more difficult than I anticipated to debug.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/878", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/878/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/878/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/878/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/878", "id": 446999168, "node_id": "MDU6SXNzdWU0NDY5OTkxNjg=", "number": 878, "title": "os.getlogin() - Inappropriate ioctl for device when running in Docker container", "user": {"login": "mindej", "id": 1636250, "node_id": "MDQ6VXNlcjE2MzYyNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1636250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mindej", "html_url": "https://github.com/mindej", "followers_url": "https://api.github.com/users/mindej/followers", "following_url": "https://api.github.com/users/mindej/following{/other_user}", "gists_url": "https://api.github.com/users/mindej/gists{/gist_id}", "starred_url": "https://api.github.com/users/mindej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mindej/subscriptions", "organizations_url": "https://api.github.com/users/mindej/orgs", "repos_url": "https://api.github.com/users/mindej/repos", "events_url": "https://api.github.com/users/mindej/events{/privacy}", "received_events_url": "https://api.github.com/users/mindej/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60588, "node_id": "MDU6TGFiZWw2MDU4OA==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/rejected", "name": "rejected", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-22T08:26:04Z", "updated_at": "2019-07-20T10:33:11Z", "closed_at": "2019-07-20T10:33:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting an error in Docker container `OSError: [Errno 25] Inappropriate ioctl for device` when running `os.getlogin()`\r\n\r\nHere is my dlocker file: \r\n```\r\nFROM python:3.6.8\r\nARG APP_USER=python\r\nRUN useradd --system --no-create-home --shell /sbin/nologin $APP_USER\r\nCOPY . /app\r\nRUN chown -R $APP_USER:$APP_USER /app\r\nWORKDIR /app\r\nRUN pip install  -r requirements.txt\r\nUSER $APP_USER\r\nCMD python app.py\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/876", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/876/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/876/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/876/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/876", "id": 446665847, "node_id": "MDU6SXNzdWU0NDY2NjU4NDc=", "number": 876, "title": "Error \"BadName: Ref 'HEAD' did not resolve to an object\" encountered when trying to push repository containing deep submodule nesting", "user": {"login": "s4v4g3", "id": 1800530, "node_id": "MDQ6VXNlcjE4MDA1MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1800530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s4v4g3", "html_url": "https://github.com/s4v4g3", "followers_url": "https://api.github.com/users/s4v4g3/followers", "following_url": "https://api.github.com/users/s4v4g3/following{/other_user}", "gists_url": "https://api.github.com/users/s4v4g3/gists{/gist_id}", "starred_url": "https://api.github.com/users/s4v4g3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s4v4g3/subscriptions", "organizations_url": "https://api.github.com/users/s4v4g3/orgs", "repos_url": "https://api.github.com/users/s4v4g3/repos", "events_url": "https://api.github.com/users/s4v4g3/events{/privacy}", "received_events_url": "https://api.github.com/users/s4v4g3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/27", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27/labels", "id": 3496893, "node_id": "MDk6TWlsZXN0b25lMzQ5Njg5Mw==", "number": 27, "title": "v3.0.0 - Remove Python 2", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 35, "state": "closed", "created_at": "2018-07-15T13:34:31Z", "updated_at": "2019-09-28T16:44:49Z", "due_on": null, "closed_at": "2019-08-12T03:25:48Z"}, "comments": 2, "created_at": "2019-05-21T14:52:28Z", "updated_at": "2019-07-20T10:18:00Z", "closed_at": "2019-07-20T10:17:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Windows, If you try to push a repository that contains a deep nesting of submodules you can get a \"BadName: Ref 'HEAD' did not resolve to an object\" when GitPython tries to assemble the path that contains the git dir for the submodule.\r\n\r\nA concrete example is the submodule path \r\n`C:\\git\\vsm-utilities\\vsm-helper\\csdieinfo\\host_py_rm_pdb_internal\\host_py_rm_pdb_internal_efr32x21x000f1024xm32_secpu`\r\n\r\nthat has a `.git` file containing\r\n\r\n`gitdir: ../../../../.git/modules/vsm-helper/modules/csdieinfo/modules/host_py_rm_pdb_internal/modules/host_py_rm_pdb_internal_efr32x21x000f1024xm32_secpu`\r\n\r\nIn find_submodule_git_dir() in fun.py, the path to the git dir is assembled by using os.path.join, which results in a very long path.   In fact, os.path.isdir() returns False for this long path, even though the path length in absolute terms is under the size limit.  But because the path contains relative designators, the path length is too long for os.path.isdir() to handle and thus it returns False.\r\n\r\nI found that calling os.path.normpath() on the long path would normalize the path to return a path that os.path.isdir() recognizes as a real directory and would fix the problem.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/874", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/874/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/874/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/874/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/874", "id": 441470296, "node_id": "MDU6SXNzdWU0NDE0NzAyOTY=", "number": 874, "title": "Support for git notes", "user": {"login": "dearchap", "id": 3200486, "node_id": "MDQ6VXNlcjMyMDA0ODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3200486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dearchap", "html_url": "https://github.com/dearchap", "followers_url": "https://api.github.com/users/dearchap/followers", "following_url": "https://api.github.com/users/dearchap/following{/other_user}", "gists_url": "https://api.github.com/users/dearchap/gists{/gist_id}", "starred_url": "https://api.github.com/users/dearchap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dearchap/subscriptions", "organizations_url": "https://api.github.com/users/dearchap/orgs", "repos_url": "https://api.github.com/users/dearchap/repos", "events_url": "https://api.github.com/users/dearchap/events{/privacy}", "received_events_url": "https://api.github.com/users/dearchap/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-07T22:20:07Z", "updated_at": "2019-07-20T11:00:33Z", "closed_at": "2019-07-20T11:00:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Need help in implementing this if possible", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/871", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/871/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/871/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/871/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/871", "id": 440684379, "node_id": "MDU6SXNzdWU0NDA2ODQzNzk=", "number": 871, "title": "Reading progress of Git operation using GitPython stuck (or not printing)", "user": {"login": "t89", "id": 1862195, "node_id": "MDQ6VXNlcjE4NjIxOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1862195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t89", "html_url": "https://github.com/t89", "followers_url": "https://api.github.com/users/t89/followers", "following_url": "https://api.github.com/users/t89/following{/other_user}", "gists_url": "https://api.github.com/users/t89/gists{/gist_id}", "starred_url": "https://api.github.com/users/t89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t89/subscriptions", "organizations_url": "https://api.github.com/users/t89/orgs", "repos_url": "https://api.github.com/users/t89/repos", "events_url": "https://api.github.com/users/t89/events{/privacy}", "received_events_url": "https://api.github.com/users/t89/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/27", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27/labels", "id": 3496893, "node_id": "MDk6TWlsZXN0b25lMzQ5Njg5Mw==", "number": 27, "title": "v3.0.0 - Remove Python 2", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 35, "state": "closed", "created_at": "2018-07-15T13:34:31Z", "updated_at": "2019-09-28T16:44:49Z", "due_on": null, "closed_at": "2019-08-12T03:25:48Z"}, "comments": 5, "created_at": "2019-05-06T12:50:51Z", "updated_at": "2019-07-20T10:00:40Z", "closed_at": "2019-07-20T10:00:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to access the progress of time consuming Git operations using GitPython. I tried the sample solution taken from the official documentation, and also tried passing in a method following the exact signature of the update method below. Everytime I call `fetch()`, `push()`, `pull()` **with** the parameter `progress=<anything>`, the programm is stuck and the `update` method does not get called. If I call those operations without setting the `progress` parameter, it works flawlessly.\r\n\r\n- `$ git --version` is 2.21.0\r\n- Calling `sys.stdout.flush()` after `print()` does not help either\r\n- I use `assert` to assure my repo objects are available and in the expected state\r\n- `ProgressPrinter()` yields not `None`\r\n- I tried calling the functions from the main thread and multithreaded\r\n- I took a look at the [implementation (line 350)][1] of `RemoteProgress` and also the [implementation (line 815)][2] of `push()` and do not see a reason, why it would not continue execution\r\n- I found out, that when I assign my `ProgressPrinter` instance and pass the assigned variable, the programm is not stuck anymore. Yet the `update()` method does not get called and no progress is printed:\r\n\r\n```python\r\n# Not stuck anymore, yet no progress\r\npp = ProgressPrinter()\r\nfetch_info = origin.fetch(progress=pp)\r\n```\r\n___\r\nCore of my implementation:\r\n\r\n```python\r\nfrom git import RemoteProgress\r\n\r\nclass ProgressPrinter(RemoteProgress):\r\n    def update(self,\r\n               op_code,\r\n               cur_count,\r\n               max_count=None,\r\n               message=''):\r\n        print(\"Is this even called?\")\r\n```\r\nAnd later on:\r\n```python\r\norigin = repo.remotes.origin\r\nassert origin.exists()\r\nfetch_info = origin.fetch(progress=ProgressPrinter())\r\n\r\n```\r\n\r\nAny recommendations on how to investigate this problem furthermore? I've been debugging this for several days now and feel like I am missing something. \r\n\r\n  [1]: https://github.com/gitpython-developers/GitPython/blob/52ee33ac9b234c7501d97b4c2bf2e2035c5ec1fa/git/util.py#L350\r\n  [2]: https://github.com/gitpython-developers/GitPython/blob/52ee33ac9b234c7501d97b4c2bf2e2035c5ec1fa/git/remote.py#L815", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/869", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/869/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/869/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/869/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/869", "id": 440478017, "node_id": "MDU6SXNzdWU0NDA0NzgwMTc=", "number": 869, "title": "git v2.21.0 tests failing due to upstream change", "user": {"login": "jeking3", "id": 11771245, "node_id": "MDQ6VXNlcjExNzcxMjQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/11771245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeking3", "html_url": "https://github.com/jeking3", "followers_url": "https://api.github.com/users/jeking3/followers", "following_url": "https://api.github.com/users/jeking3/following{/other_user}", "gists_url": "https://api.github.com/users/jeking3/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeking3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeking3/subscriptions", "organizations_url": "https://api.github.com/users/jeking3/orgs", "repos_url": "https://api.github.com/users/jeking3/repos", "events_url": "https://api.github.com/users/jeking3/events{/privacy}", "received_events_url": "https://api.github.com/users/jeking3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/27", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27/labels", "id": 3496893, "node_id": "MDk6TWlsZXN0b25lMzQ5Njg5Mw==", "number": 27, "title": "v3.0.0 - Remove Python 2", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 35, "state": "closed", "created_at": "2018-07-15T13:34:31Z", "updated_at": "2019-09-28T16:44:49Z", "due_on": null, "closed_at": "2019-08-12T03:25:48Z"}, "comments": 0, "created_at": "2019-05-05T19:01:56Z", "updated_at": "2019-07-20T09:40:20Z", "closed_at": "2019-05-05T20:19:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In git since v2.21.0-rc0 some strings changed and cause GitPython unit tests to fail.\r\n\r\nRoot cause:\r\nhttps://github.com/git/git/commit/0b9c3afdbfb62936337efc52b4007a446939b96b", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/866", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/866/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/866/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/866/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/866", "id": 438312935, "node_id": "MDU6SXNzdWU0MzgzMTI5MzU=", "number": 866, "title": "can't clone use ssh key", "user": {"login": "haofrank", "id": 18546749, "node_id": "MDQ6VXNlcjE4NTQ2NzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/18546749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haofrank", "html_url": "https://github.com/haofrank", "followers_url": "https://api.github.com/users/haofrank/followers", "following_url": "https://api.github.com/users/haofrank/following{/other_user}", "gists_url": "https://api.github.com/users/haofrank/gists{/gist_id}", "starred_url": "https://api.github.com/users/haofrank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haofrank/subscriptions", "organizations_url": "https://api.github.com/users/haofrank/orgs", "repos_url": "https://api.github.com/users/haofrank/repos", "events_url": "https://api.github.com/users/haofrank/events{/privacy}", "received_events_url": "https://api.github.com/users/haofrank/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-29T13:22:07Z", "updated_at": "2019-05-06T12:40:54Z", "closed_at": "2019-05-06T12:40:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**hi~ I can't use my id_rsa key to clone my repo.\r\nthis is my directory structure\uff1a**\r\n\u251c\u2500\u2500 code\r\n\u251c\u2500\u2500 git_test.py\r\n\u251c\u2500\u2500 id_rsa\r\n\u251c\u2500\u2500 id_rsa.pub\r\n\u2514\u2500\u2500 ssh_executable.sh\r\n\r\n> git_test.py\r\n``` python\r\nimport os\r\nimport git\r\nfrom git import Repo\r\nfrom git import Git\r\n\r\ngit_url = \"git@xxx/xxx.git\"\r\ngit_branch = \"master\"\r\nout_dir = \"./code\"\r\n\r\n# One\r\ngit_ssh_identity_file = os.path.expanduser('./id_rsa')\r\ngit_ssh_cmd = 'ssh -i %s' % git_ssh_identity_file\r\n\r\nwith Git().custom_environment(GIT_SSH_COMMAND=git_ssh_cmd):\r\n  repo = Repo.clone_from(git_url, out_dir, branch=\"master\")\r\n  print(\"Success\")\r\n\r\n# Two\r\nssh_executable = os.path.join(\"./\", 'ssh_executable.sh')\r\n\r\nwith Git().custom_environment(GIT_SSH=ssh_executable):\r\n  repo = Repo.clone_from(git_url, out_dir, branch=\"master\")\r\n  print(\"Success\")\r\n```\r\n>ssh_executable.sh\r\n```shell\r\n#!/bin/sh\r\nID_RSA=\"./id_rsa\"\r\nexec /usr/bin/ssh -o StrictHostKeyChecking=no -i $ID_RSA \"$@\"\r\n```\r\n\r\n **I tried both methods and could not succeed clone repo....** \r\n **if I move the `id_res` `id_res.pub` to `~/.ssh`. it will success. hoping to get your help~**\r\n```\r\nTraceback (most recent call last):\r\n  File \"git_test.py\", line 15, in <module>\r\n    repo = Repo.clone_from(git_url, out_dir, branch=\"master\")\r\n  File \"/Users/frank/miniconda3/lib/python3.7/site-packages/git/repo/base.py\", line 988, in clone_from\r\n    return cls._clone(git, url, to_path, GitCmdObjectDB, progress, **kwargs)\r\n  File \"/Users/frank/miniconda3/lib/python3.7/site-packages/git/repo/base.py\", line 939, in _clone\r\n    finalize_process(proc, stderr=stderr)\r\n  File \"/Users/frank/miniconda3/lib/python3.7/site-packages/git/util.py\", line 333, in finalize_process\r\n    proc.wait(**kwargs)\r\n  File \"/Users/frank/miniconda3/lib/python3.7/site-packages/git/cmd.py\", line 415, in wait\r\n    raise GitCommandError(self.args, status, errstr)\r\ngit.exc.GitCommandError: Cmd('git') failed due to: exit code(128)\r\n  cmdline: git clone --branch=master -v git@my.address.git ./code\r\n  stderr: 'Cloning into './code'...\r\ngit@gitlab.alipay-inc.com: Permission denied (publickey).\r\nfatal: Could not read from remote repository.\r\n\r\nPlease make sure you have the correct access rights\r\nand the repository exists.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/865", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/865/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/865/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/865/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/865", "id": 437956528, "node_id": "MDU6SXNzdWU0Mzc5NTY1Mjg=", "number": 865, "title": "blob.path  error when git config core.quotepath = true", "user": {"login": "StevenKangWei", "id": 32307481, "node_id": "MDQ6VXNlcjMyMzA3NDgx", "avatar_url": "https://avatars1.githubusercontent.com/u/32307481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StevenKangWei", "html_url": "https://github.com/StevenKangWei", "followers_url": "https://api.github.com/users/StevenKangWei/followers", "following_url": "https://api.github.com/users/StevenKangWei/following{/other_user}", "gists_url": "https://api.github.com/users/StevenKangWei/gists{/gist_id}", "starred_url": "https://api.github.com/users/StevenKangWei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StevenKangWei/subscriptions", "organizations_url": "https://api.github.com/users/StevenKangWei/orgs", "repos_url": "https://api.github.com/users/StevenKangWei/repos", "events_url": "https://api.github.com/users/StevenKangWei/events{/privacy}", "received_events_url": "https://api.github.com/users/StevenKangWei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-27T15:49:12Z", "updated_at": "2020-03-19T09:16:54Z", "closed_at": "2019-04-30T03:26:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "blob.path  error when git config core.quotepath = true", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/863", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/863/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/863/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/863/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/863", "id": 435407180, "node_id": "MDU6SXNzdWU0MzU0MDcxODA=", "number": 863, "title": "Git.log() with pretty option returns email ids instead of their names.", "user": {"login": "HEMA-MATHAVAN", "id": 18321943, "node_id": "MDQ6VXNlcjE4MzIxOTQz", "avatar_url": "https://avatars0.githubusercontent.com/u/18321943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HEMA-MATHAVAN", "html_url": "https://github.com/HEMA-MATHAVAN", "followers_url": "https://api.github.com/users/HEMA-MATHAVAN/followers", "following_url": "https://api.github.com/users/HEMA-MATHAVAN/following{/other_user}", "gists_url": "https://api.github.com/users/HEMA-MATHAVAN/gists{/gist_id}", "starred_url": "https://api.github.com/users/HEMA-MATHAVAN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HEMA-MATHAVAN/subscriptions", "organizations_url": "https://api.github.com/users/HEMA-MATHAVAN/orgs", "repos_url": "https://api.github.com/users/HEMA-MATHAVAN/repos", "events_url": "https://api.github.com/users/HEMA-MATHAVAN/events{/privacy}", "received_events_url": "https://api.github.com/users/HEMA-MATHAVAN/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-04-20T14:46:21Z", "updated_at": "2019-05-22T05:49:46Z", "closed_at": "2019-05-20T11:18:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nThe following command returns author and commiter email ids instead of their names.i am using version 2.1.11.\r\n\r\nCommand\r\ngit.log('--pretty=%H %an %cn %s','--before=some_date',filename)\r\n\r\nOutput\r\n677cdde6477cc92b7779d4239df66d6c8ced7aba \r\nbienvenu%nventure.com \r\nbienvenu%nventure.com \r\nfix 103732, sending unsent messages doesn't set replied/forwarded status on original msg, r/sr=mscott\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/861", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/861/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/861/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/861/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/861", "id": 431274722, "node_id": "MDU6SXNzdWU0MzEyNzQ3MjI=", "number": 861, "title": "Get different commits between 2 branches", "user": {"login": "nttri", "id": 29206438, "node_id": "MDQ6VXNlcjI5MjA2NDM4", "avatar_url": "https://avatars0.githubusercontent.com/u/29206438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nttri", "html_url": "https://github.com/nttri", "followers_url": "https://api.github.com/users/nttri/followers", "following_url": "https://api.github.com/users/nttri/following{/other_user}", "gists_url": "https://api.github.com/users/nttri/gists{/gist_id}", "starred_url": "https://api.github.com/users/nttri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nttri/subscriptions", "organizations_url": "https://api.github.com/users/nttri/orgs", "repos_url": "https://api.github.com/users/nttri/repos", "events_url": "https://api.github.com/users/nttri/events{/privacy}", "received_events_url": "https://api.github.com/users/nttri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-10T02:27:07Z", "updated_at": "2019-07-20T11:02:46Z", "closed_at": "2019-07-20T11:02:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "In git have a command to get list of which commits in one branch aren't in the other like this:\r\n`git cherry <branch-A> <branch-B>`\r\n\r\nSo is there any ways to get that result in GitPython? Please help me.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/858", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/858/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/858/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/858/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/858", "id": 429828383, "node_id": "MDU6SXNzdWU0Mjk4MjgzODM=", "number": 858, "title": "remote.Remote.urls fails ", "user": {"login": "sstancu", "id": 1705320, "node_id": "MDQ6VXNlcjE3MDUzMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1705320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sstancu", "html_url": "https://github.com/sstancu", "followers_url": "https://api.github.com/users/sstancu/followers", "following_url": "https://api.github.com/users/sstancu/following{/other_user}", "gists_url": "https://api.github.com/users/sstancu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sstancu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sstancu/subscriptions", "organizations_url": "https://api.github.com/users/sstancu/orgs", "repos_url": "https://api.github.com/users/sstancu/repos", "events_url": "https://api.github.com/users/sstancu/events{/privacy}", "received_events_url": "https://api.github.com/users/sstancu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/27", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27/labels", "id": 3496893, "node_id": "MDk6TWlsZXN0b25lMzQ5Njg5Mw==", "number": 27, "title": "v3.0.0 - Remove Python 2", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 35, "state": "closed", "created_at": "2018-07-15T13:34:31Z", "updated_at": "2019-09-28T16:44:49Z", "due_on": null, "closed_at": "2019-08-12T03:25:48Z"}, "comments": 0, "created_at": "2019-04-05T16:02:11Z", "updated_at": "2019-07-20T07:12:27Z", "closed_at": "2019-07-20T07:11:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems the fix for #694 only works if the current workin directory of the running program is within the git repository.\r\n\r\nIf the current working dir is outside the git repo, then the following (starting at `git/remote.py:557`)\r\n```\r\n                        result = Git().execute(\r\n                            ['git', 'config', '--get', 'remote.%s.url' % self.name]\r\n                        )\r\n```\r\nfails with:\r\n```\r\ngit.exc.GitCommandError: Cmd('git') failed due to: exit code(1)\r\n  cmdline: git config --get remote.origin.url\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/855", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/855/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/855/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/855/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/855", "id": 421895673, "node_id": "MDU6SXNzdWU0MjE4OTU2NzM=", "number": 855, "title": "Means to get normal log versus reflog", "user": {"login": "mobileben", "id": 536780, "node_id": "MDQ6VXNlcjUzNjc4MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/536780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mobileben", "html_url": "https://github.com/mobileben", "followers_url": "https://api.github.com/users/mobileben/followers", "following_url": "https://api.github.com/users/mobileben/following{/other_user}", "gists_url": "https://api.github.com/users/mobileben/gists{/gist_id}", "starred_url": "https://api.github.com/users/mobileben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mobileben/subscriptions", "organizations_url": "https://api.github.com/users/mobileben/orgs", "repos_url": "https://api.github.com/users/mobileben/repos", "events_url": "https://api.github.com/users/mobileben/events{/privacy}", "received_events_url": "https://api.github.com/users/mobileben/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-17T08:22:09Z", "updated_at": "2019-07-20T06:26:19Z", "closed_at": "2019-03-17T08:43:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Based on the documentation as well as calling `log()`, the current implementation\r\nreturns back reflog.\r\n\r\nIs there any way of either deriving or another command to get a normal `git log`? Or does one have to execute git commands directly to do so?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/852", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/852/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/852/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/852/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/852", "id": 420486111, "node_id": "MDU6SXNzdWU0MjA0ODYxMTE=", "number": 852, "title": "repo.index.diff(\"HEAD\", create_patch=True) always empty", "user": {"login": "jadinm", "id": 4190063, "node_id": "MDQ6VXNlcjQxOTAwNjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4190063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jadinm", "html_url": "https://github.com/jadinm", "followers_url": "https://api.github.com/users/jadinm/followers", "following_url": "https://api.github.com/users/jadinm/following{/other_user}", "gists_url": "https://api.github.com/users/jadinm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jadinm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jadinm/subscriptions", "organizations_url": "https://api.github.com/users/jadinm/orgs", "repos_url": "https://api.github.com/users/jadinm/repos", "events_url": "https://api.github.com/users/jadinm/events{/privacy}", "received_events_url": "https://api.github.com/users/jadinm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-13T12:58:56Z", "updated_at": "2019-10-22T10:39:30Z", "closed_at": "2019-10-22T10:39:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using GitPython v2.1.11 with Python 3.6. My git version is 2.17.1.\r\n\r\nI see inconsistent behavior of the diff method of a repo index if create_patch option set to True.\r\nI am running the following script in a git repository with staged and unstaged changes.\r\n\r\n```python\r\nfrom git import Repo\r\n\r\nrepo = Repo(\".\")\r\n\r\nprint(repo.index.diff(\"HEAD\"))\r\nprint(repo.index.diff(\"HEAD\", create_patch=True)) # Problem here\r\n\r\nprint(repo.index.diff(None))\r\nprint(repo.index.diff(None, create_patch=True))\r\n```\r\n\r\nBut it prints:\r\n```\r\n[<git.diff.Diff object at 0x7fd54c328678>, <git.diff.Diff object at 0x7fd549e405e8>, <git.diff.Diff object at 0x7fd54c328558>]\r\n[]\r\n[<git.diff.Diff object at 0x7fd54c328678>]\r\n[<git.diff.Diff object at 0x7fd54c328678>]\r\n```\r\n\r\nSomehow, the diff is empty if I set `create_patch` to True and the first argument to anything but `None`.\r\nDo you know why it happens ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/850", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/850/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/850/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/850/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/850", "id": 416211661, "node_id": "MDU6SXNzdWU0MTYyMTE2NjE=", "number": 850, "title": "Add instr option for Repo.git commands", "user": {"login": "sents", "id": 26575793, "node_id": "MDQ6VXNlcjI2NTc1Nzkz", "avatar_url": "https://avatars3.githubusercontent.com/u/26575793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sents", "html_url": "https://github.com/sents", "followers_url": "https://api.github.com/users/sents/followers", "following_url": "https://api.github.com/users/sents/following{/other_user}", "gists_url": "https://api.github.com/users/sents/gists{/gist_id}", "starred_url": "https://api.github.com/users/sents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sents/subscriptions", "organizations_url": "https://api.github.com/users/sents/orgs", "repos_url": "https://api.github.com/users/sents/repos", "events_url": "https://api.github.com/users/sents/events{/privacy}", "received_events_url": "https://api.github.com/users/sents/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-01T17:48:02Z", "updated_at": "2019-07-20T11:07:56Z", "closed_at": "2019-07-20T11:07:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some git functions (e.g. git hash-object) can take input from stdin, they often take an --stdin flag to explicitly enable this.\r\nCurrently I can find no way to make this work with Repo.git commands.\r\nIdeally for me such an instr option would also work with StringIO streams, not just files.\r\n\r\nRight now I have to use subprocess.run for exactly this one thing and everything would look much more beautiful if I could use gitpython for everything.  Thanks for this module!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/847", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/847/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/847/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/847/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/847", "id": 413738116, "node_id": "MDU6SXNzdWU0MTM3MzgxMTY=", "number": 847, "title": "NameError: name 'self' is not defined in GitPython Tutorial", "user": {"login": "aaronlelevier", "id": 5514112, "node_id": "MDQ6VXNlcjU1MTQxMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5514112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronlelevier", "html_url": "https://github.com/aaronlelevier", "followers_url": "https://api.github.com/users/aaronlelevier/followers", "following_url": "https://api.github.com/users/aaronlelevier/following{/other_user}", "gists_url": "https://api.github.com/users/aaronlelevier/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronlelevier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronlelevier/subscriptions", "organizations_url": "https://api.github.com/users/aaronlelevier/orgs", "repos_url": "https://api.github.com/users/aaronlelevier/repos", "events_url": "https://api.github.com/users/aaronlelevier/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronlelevier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}, {"id": 60588, "node_id": "MDU6TGFiZWw2MDU4OA==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/rejected", "name": "rejected", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-23T20:45:30Z", "updated_at": "2020-04-11T07:04:36Z", "closed_at": "2019-07-20T06:48:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's an error in https://gitpython.readthedocs.io/en/stable/tutorial.html#tutorial-label\r\n\r\n<img width=\"751\" alt=\"screen shot 2019-02-23 at 12 43 37 pm\" src=\"https://user-images.githubusercontent.com/5514112/53291482-dddebf80-3768-11e9-81f3-cd013c3958ea.png\">\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/846", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/846/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/846/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/846/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/846", "id": 412791725, "node_id": "MDU6SXNzdWU0MTI3OTE3MjU=", "number": 846, "title": "Add support for git cherry", "user": {"login": "sffc", "id": 1145762, "node_id": "MDQ6VXNlcjExNDU3NjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1145762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sffc", "html_url": "https://github.com/sffc", "followers_url": "https://api.github.com/users/sffc/followers", "following_url": "https://api.github.com/users/sffc/following{/other_user}", "gists_url": "https://api.github.com/users/sffc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sffc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sffc/subscriptions", "organizations_url": "https://api.github.com/users/sffc/orgs", "repos_url": "https://api.github.com/users/sffc/repos", "events_url": "https://api.github.com/users/sffc/events{/privacy}", "received_events_url": "https://api.github.com/users/sffc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60586, "node_id": "MDU6TGFiZWw2MDU4Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/enhancement", "name": "enhancement", "color": "00661b", "default": true, "description": null}, {"id": 60588, "node_id": "MDU6TGFiZWw2MDU4OA==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/rejected", "name": "rejected", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-21T07:53:51Z", "updated_at": "2019-07-06T04:04:04Z", "closed_at": "2019-07-06T04:04:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "*git cherry* returns a list of commit hashes with a prefix `+` or `-` to indicate whether the commit has an equivalent cherry-pick commit in a sibling branch.  I would like to be able to iterate over the output of `git cherry <ref1> <ref2>` similar to how I can use iter_commits to iterate over the output of `git log <ref1>..<ref2>`.\r\n\r\nWe would like this feature to use in ICU tooling: [ICU-20444](https://unicode-org.atlassian.net/browse/ICU-20444)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/845", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/845/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/845/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/845/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/845", "id": 411488368, "node_id": "MDU6SXNzdWU0MTE0ODgzNjg=", "number": 845, "title": "Please merge #837?", "user": {"login": "jeking3", "id": 11771245, "node_id": "MDQ6VXNlcjExNzcxMjQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/11771245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeking3", "html_url": "https://github.com/jeking3", "followers_url": "https://api.github.com/users/jeking3/followers", "following_url": "https://api.github.com/users/jeking3/following{/other_user}", "gists_url": "https://api.github.com/users/jeking3/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeking3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeking3/subscriptions", "organizations_url": "https://api.github.com/users/jeking3/orgs", "repos_url": "https://api.github.com/users/jeking3/repos", "events_url": "https://api.github.com/users/jeking3/events{/privacy}", "received_events_url": "https://api.github.com/users/jeking3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/27", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27/labels", "id": 3496893, "node_id": "MDk6TWlsZXN0b25lMzQ5Njg5Mw==", "number": 27, "title": "v3.0.0 - Remove Python 2", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 35, "state": "closed", "created_at": "2018-07-15T13:34:31Z", "updated_at": "2019-09-28T16:44:49Z", "due_on": null, "closed_at": "2019-08-12T03:25:48Z"}, "comments": 4, "created_at": "2019-02-18T13:58:04Z", "updated_at": "2019-07-20T09:19:45Z", "closed_at": "2019-05-05T02:44:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Although the PR build \"failed\", the linux side is fixed.  This is an improvement.  People might be skipping over it when they see the red \"X\", but it should be merged.  I have more changes to submit following this one.  Thanks.\r\n\r\n#837 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/843", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/843/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/843/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/843/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/843", "id": 410309847, "node_id": "MDU6SXNzdWU0MTAzMDk4NDc=", "number": 843, "title": "Equivalent to \"git tag --merged\" in gitpython", "user": {"login": "regisz", "id": 5145946, "node_id": "MDQ6VXNlcjUxNDU5NDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/5145946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regisz", "html_url": "https://github.com/regisz", "followers_url": "https://api.github.com/users/regisz/followers", "following_url": "https://api.github.com/users/regisz/following{/other_user}", "gists_url": "https://api.github.com/users/regisz/gists{/gist_id}", "starred_url": "https://api.github.com/users/regisz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regisz/subscriptions", "organizations_url": "https://api.github.com/users/regisz/orgs", "repos_url": "https://api.github.com/users/regisz/repos", "events_url": "https://api.github.com/users/regisz/events{/privacy}", "received_events_url": "https://api.github.com/users/regisz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-14T13:52:32Z", "updated_at": "2019-07-20T11:53:57Z", "closed_at": "2019-07-20T11:53:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I do in gitpython the `git tag --merged` command?\r\nI would like to get tags which are reachable from the actual (or other) branch.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/842", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/842/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/842/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/842/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/842", "id": 409922232, "node_id": "MDU6SXNzdWU0MDk5MjIyMzI=", "number": 842, "title": "not enough lines in _set_cache method", "user": {"login": "ret2libc", "id": 562321, "node_id": "MDQ6VXNlcjU2MjMyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/562321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ret2libc", "html_url": "https://github.com/ret2libc", "followers_url": "https://api.github.com/users/ret2libc/followers", "following_url": "https://api.github.com/users/ret2libc/following{/other_user}", "gists_url": "https://api.github.com/users/ret2libc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ret2libc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ret2libc/subscriptions", "organizations_url": "https://api.github.com/users/ret2libc/orgs", "repos_url": "https://api.github.com/users/ret2libc/repos", "events_url": "https://api.github.com/users/ret2libc/events{/privacy}", "received_events_url": "https://api.github.com/users/ret2libc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27", "html_url": "https://github.com/gitpython-developers/GitPython/milestone/27", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/milestones/27/labels", "id": 3496893, "node_id": "MDk6TWlsZXN0b25lMzQ5Njg5Mw==", "number": 27, "title": "v3.0.0 - Remove Python 2", "description": "", "creator": {"login": "Byron", "id": 63622, "node_id": "MDQ6VXNlcjYzNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/63622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Byron", "html_url": "https://github.com/Byron", "followers_url": "https://api.github.com/users/Byron/followers", "following_url": "https://api.github.com/users/Byron/following{/other_user}", "gists_url": "https://api.github.com/users/Byron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Byron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Byron/subscriptions", "organizations_url": "https://api.github.com/users/Byron/orgs", "repos_url": "https://api.github.com/users/Byron/repos", "events_url": "https://api.github.com/users/Byron/events{/privacy}", "received_events_url": "https://api.github.com/users/Byron/received_events", "type": "User", "site_admin": false}, "open_issues": 1, "closed_issues": 35, "state": "closed", "created_at": "2018-07-15T13:34:31Z", "updated_at": "2019-09-28T16:44:49Z", "due_on": null, "closed_at": "2019-08-12T03:25:48Z"}, "comments": 1, "created_at": "2019-02-13T17:39:06Z", "updated_at": "2019-07-06T04:01:38Z", "closed_at": "2019-07-06T04:01:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a `list index out of range` when printing  the tag message of systemd repository\r\n\r\nReproducer: \r\nclone systemd repository with `git clone https://github.com/systemd/systemd.git'\r\n```python\r\nfrom git import Repo\r\nr = Repo('./systemd')\r\nt = r.tags['060']\r\nif t.tag is not None:\r\n    print(t.tag.message)\r\n```\r\n```\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-15-462f7dbfed04> in <module>()\r\n----> 1 t.tag.message\r\n\r\n/usr/lib/python3.7/site-packages/gitdb/util.py in __getattr__(self, attr)\r\n    254         to be created and set. Next time the same attribute is reqeusted, it is simply\r\n    255         returned from our dict/slots. \"\"\"\r\n--> 256         self._set_cache_(attr)\r\n    257         # will raise in case the cache was not created\r\n    258         return object.__getattribute__(self, attr)\r\n\r\n/usr/lib/python3.7/site-packages/git/objects/tag.py in _set_cache_(self, attr)\r\n     60             self.tag = lines[2][4:]  # tag <tag name>\r\n     61 \r\n---> 62             tagger_info = lines[3]  # tagger <actor> <date>\r\n     63             self.tagger, self.tagged_date, self.tagger_tz_offset = parse_actor_and_date(tagger_info)\r\n     64 \r\n\r\nIndexError: list index out of range\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/838", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/838/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/838/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/838/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/838", "id": 407353797, "node_id": "MDU6SXNzdWU0MDczNTM3OTc=", "number": 838, "title": "Request for type support", "user": {"login": "pcd1193182", "id": 142840, "node_id": "MDQ6VXNlcjE0Mjg0MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/142840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcd1193182", "html_url": "https://github.com/pcd1193182", "followers_url": "https://api.github.com/users/pcd1193182/followers", "following_url": "https://api.github.com/users/pcd1193182/following{/other_user}", "gists_url": "https://api.github.com/users/pcd1193182/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcd1193182/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcd1193182/subscriptions", "organizations_url": "https://api.github.com/users/pcd1193182/orgs", "repos_url": "https://api.github.com/users/pcd1193182/repos", "events_url": "https://api.github.com/users/pcd1193182/events{/privacy}", "received_events_url": "https://api.github.com/users/pcd1193182/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60586, "node_id": "MDU6TGFiZWw2MDU4Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/enhancement", "name": "enhancement", "color": "00661b", "default": true, "description": null}, {"id": 60588, "node_id": "MDU6TGFiZWw2MDU4OA==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/rejected", "name": "rejected", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-06T17:45:14Z", "updated_at": "2019-07-06T03:34:37Z", "closed_at": "2019-07-06T03:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "As of PEP 484, python supports adding types to variables to improve correctness and help the development process. As of PEP 561, there is now a standardized way to include type information with packages. It would be useful for users of the package who are taking advantage of this new feature to have type information from the gitpython package, but it would also add some amount of maintenance burden to the developers having to keep these types accurate and up to date. I was wondering if this is something you would consider doing, or if users (including myself) should have our typecheckers ignore the git module (or stub out important functions ourselves) going forwards.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/834", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/834/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/834/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/834/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/834", "id": 402893414, "node_id": "MDU6SXNzdWU0MDI4OTM0MTQ=", "number": 834, "title": "Feature request - Alternative to local disk", "user": {"login": "bodegus", "id": 7798463, "node_id": "MDQ6VXNlcjc3OTg0NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7798463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodegus", "html_url": "https://github.com/bodegus", "followers_url": "https://api.github.com/users/bodegus/followers", "following_url": "https://api.github.com/users/bodegus/following{/other_user}", "gists_url": "https://api.github.com/users/bodegus/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodegus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodegus/subscriptions", "organizations_url": "https://api.github.com/users/bodegus/orgs", "repos_url": "https://api.github.com/users/bodegus/repos", "events_url": "https://api.github.com/users/bodegus/events{/privacy}", "received_events_url": "https://api.github.com/users/bodegus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 60586, "node_id": "MDU6TGFiZWw2MDU4Ng==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/enhancement", "name": "enhancement", "color": "00661b", "default": true, "description": null}, {"id": 60588, "node_id": "MDU6TGFiZWw2MDU4OA==", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/rejected", "name": "rejected", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-24T21:00:30Z", "updated_at": "2019-07-06T02:47:09Z", "closed_at": "2019-07-06T02:47:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that git only works with local disk - I built a crawler to extract histories from every repo (full commit history/diffs/etc) and some repos/orgs can get in the many gbs in size.  It would be helpful to be able to use S3 or memory disk within python without doing something lower level.\r\n\r\nAs a work around I cache a repo locally for analysis and pull/push a cached version I store in s3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/828", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/828/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/828/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/828/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/828", "id": 401115596, "node_id": "MDU6SXNzdWU0MDExMTU1OTY=", "number": 828, "title": "Inconsistent results from 'git --grep' command ", "user": {"login": "anrchen", "id": 15037560, "node_id": "MDQ6VXNlcjE1MDM3NTYw", "avatar_url": "https://avatars3.githubusercontent.com/u/15037560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anrchen", "html_url": "https://github.com/anrchen", "followers_url": "https://api.github.com/users/anrchen/followers", "following_url": "https://api.github.com/users/anrchen/following{/other_user}", "gists_url": "https://api.github.com/users/anrchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/anrchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anrchen/subscriptions", "organizations_url": "https://api.github.com/users/anrchen/orgs", "repos_url": "https://api.github.com/users/anrchen/repos", "events_url": "https://api.github.com/users/anrchen/events{/privacy}", "received_events_url": "https://api.github.com/users/anrchen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 548386154, "node_id": "MDU6TGFiZWw1NDgzODYxNTQ=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/cannot%20reproduce", "name": "cannot reproduce", "color": "b60205", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-20T16:45:14Z", "updated_at": "2019-07-06T02:02:54Z", "closed_at": "2019-07-06T02:02:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description**\r\nI get different results from the following executions, please let me know if I'm missing something:\r\n_GitPython_\r\n```\r\ndef get_commit(key, repo):\r\n    repo = git.Repo(repo)\r\n    git_command = [\"git\", \"rev-list\", \"--all\", \"--grep=\"+key]\r\n    result = repo.git.execute(git_command)\r\n    return re.findall('[0-9a-f]{40}', result)\r\n```\r\n_Git_\r\n```git rev-list --all --grep=key```\r\n\r\n**Step to reproduce**\r\n- from [zookeeper repository](https://github.com/apache/zookeeper)\r\n- grep for key=ZOOKEEPER-1496 (e.g., `git rev-list --all --grep=ZOOKEEPER-1496`)\r\n- GitPython only returns `d612bb4cca0f916b055ed49bc4845dc71b699740`\r\n- Git command gives\r\n```\r\nd612bb4cca0f916b055ed49bc4845dc71b699740\r\n10705ba6e763eade42e8a2e54acabc181f5b2400\r\n139d1d9c4b78424708b01f239211ed83e9279fc6\r\n```\r\n**Environment**\r\n- GitPython 2.1.11\r\n- Python 2.7.15\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/827", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/827/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/827/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/827/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/827", "id": 401035446, "node_id": "MDU6SXNzdWU0MDEwMzU0NDY=", "number": 827, "title": "Travis CI tests fail when dist: xenial is used instead of dist: trusty", "user": {"login": "cclauss", "id": 3709715, "node_id": "MDQ6VXNlcjM3MDk3MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3709715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cclauss", "html_url": "https://github.com/cclauss", "followers_url": "https://api.github.com/users/cclauss/followers", "following_url": "https://api.github.com/users/cclauss/following{/other_user}", "gists_url": "https://api.github.com/users/cclauss/gists{/gist_id}", "starred_url": "https://api.github.com/users/cclauss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cclauss/subscriptions", "organizations_url": "https://api.github.com/users/cclauss/orgs", "repos_url": "https://api.github.com/users/cclauss/repos", "events_url": "https://api.github.com/users/cclauss/events{/privacy}", "received_events_url": "https://api.github.com/users/cclauss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1180685, "node_id": "MDU6TGFiZWwxMTgwNjg1", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/acknowledged", "name": "acknowledged", "color": "02e10c", "default": false, "description": null}, {"id": 283842736, "node_id": "MDU6TGFiZWwyODM4NDI3MzY=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/help%20wanted", "name": "help wanted", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-19T21:13:12Z", "updated_at": "2019-02-06T00:33:48Z", "closed_at": "2019-02-05T20:15:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Why does __git.test.test_remote.TestRemote__ fail in all versions of Python on Travis CI when __dist: xenial__ is used instead of the Travis CI default of __dist: trusty__?  For Python >= 3.7 it is required that Travis runs on Xenial: https://github.com/gitpython-developers/GitPython/blob/master/.travis.yml#L11-L14\r\n\r\nhttps://travis-ci.org/gitpython-developers/GitPython/builds/481862926", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/823", "repository_url": "https://api.github.com/repos/gitpython-developers/GitPython", "labels_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/823/labels{/name}", "comments_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/823/comments", "events_url": "https://api.github.com/repos/gitpython-developers/GitPython/issues/823/events", "html_url": "https://github.com/gitpython-developers/GitPython/issues/823", "id": 398471194, "node_id": "MDU6SXNzdWUzOTg0NzExOTQ=", "number": 823, "title": "repo.git temporary config", "user": {"login": "michaelblyons", "id": 2701605, "node_id": "MDQ6VXNlcjI3MDE2MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2701605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelblyons", "html_url": "https://github.com/michaelblyons", "followers_url": "https://api.github.com/users/michaelblyons/followers", "following_url": "https://api.github.com/users/michaelblyons/following{/other_user}", "gists_url": "https://api.github.com/users/michaelblyons/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelblyons/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelblyons/subscriptions", "organizations_url": "https://api.github.com/users/michaelblyons/orgs", "repos_url": "https://api.github.com/users/michaelblyons/repos", "events_url": "https://api.github.com/users/michaelblyons/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelblyons/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 151176901, "node_id": "MDU6TGFiZWwxNTExNzY5MDE=", "url": "https://api.github.com/repos/gitpython-developers/GitPython/labels/Q&A", "name": "Q&A", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-11T22:13:16Z", "updated_at": "2019-01-12T08:27:41Z", "closed_at": "2019-01-12T08:27:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Git lets you override config entries for a single command by adding `-c key=value` between `git` and the command (e.g. `commit`). Is there a way to do this with GitPython?\r\n\r\nI have a `repo.git.stash('save')` that I'd like to convert to output `git -c user.name=SVC -c user.email=svc@example.com stash save`, at least until Git v2.21 comes out and lets you `stash` without a user. I'd rather not set user information for the account because I don't want it to make commits.", "performed_via_github_app": null, "score": 1.0}]}