{"total_count": 79, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/280", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/280/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/280/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/280/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/280", "id": 663982219, "node_id": "MDU6SXNzdWU2NjM5ODIyMTk=", "number": 280, "title": "Query Generation Issue", "user": {"login": "OpenDataAlex", "id": 244256, "node_id": "MDQ6VXNlcjI0NDI1Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/244256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OpenDataAlex", "html_url": "https://github.com/OpenDataAlex", "followers_url": "https://api.github.com/users/OpenDataAlex/followers", "following_url": "https://api.github.com/users/OpenDataAlex/following{/other_user}", "gists_url": "https://api.github.com/users/OpenDataAlex/gists{/gist_id}", "starred_url": "https://api.github.com/users/OpenDataAlex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OpenDataAlex/subscriptions", "organizations_url": "https://api.github.com/users/OpenDataAlex/orgs", "repos_url": "https://api.github.com/users/OpenDataAlex/repos", "events_url": "https://api.github.com/users/OpenDataAlex/events{/privacy}", "received_events_url": "https://api.github.com/users/OpenDataAlex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-22T19:03:17Z", "updated_at": "2020-07-23T17:11:01Z", "closed_at": "2020-07-22T22:30:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm attempting to build a GraphQL API with Hive as part of the backend. Following the documentation I created the following schema:\r\n\r\n`class Manufacturer(SQLAlchemyObjectType):\r\nclass Meta:\r\nmodel = ManufacturerModel\r\ninterfaces = (relay.Node,)\r\n\r\nclass Query(ObjectType):\r\nnode = relay.Node.Field()\r\nall_manufacturers = SQLAlchemyConnectionField(Manufacturer.connection)`\r\n\r\nWhich leverages the following SQLAlchemy model:\r\n\r\n`class Manufacturer(Base):\r\n\r\n__tablename__ = 'manufacturer_hub'\r\n\r\nmanufacturer_hub_pk = Column(String, primary_key=True)\r\nmanufacturer_name = Column(String)`\r\n\r\nI'm able to connect to the Hive cluster and a query attempts to run, but it fails due to the sort that is provided:\r\n\r\nSELECT manufacturer_hub.manufacturer_hub_pk AS manufacturer_hub_manufacturer_hub_pk, manufacturer_hub.manufacturer_name AS manufacturer_hub_manufacturer_name FROM manufacturer_hub ORDER BY manufacturer_hub.manufacturer_hub_pk ASC\r\n\r\nIf aliases are being provided for columns, Hive is expecting them to be used in the ORDER BY. Running the following corrected query in Hive works:\r\n\r\nSELECT manufacturer_hub.manufacturer_hub_pk AS manufacturer_hub_manufacturer_hub_pk, manufacturer_hub.manufacturer_name AS manufacturer_hub_manufacturer_name FROM manufacturer_hub ORDER BY manufacturer_hub_manufacturer_hub_pk ASC", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/279", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/279/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/279/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/279/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/279", "id": 640119932, "node_id": "MDU6SXNzdWU2NDAxMTk5MzI=", "number": 279, "title": "PyCharm linter thinks connection property does not exist", "user": {"login": "skewty", "id": 9087223, "node_id": "MDQ6VXNlcjkwODcyMjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/9087223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skewty", "html_url": "https://github.com/skewty", "followers_url": "https://api.github.com/users/skewty/followers", "following_url": "https://api.github.com/users/skewty/following{/other_user}", "gists_url": "https://api.github.com/users/skewty/gists{/gist_id}", "starred_url": "https://api.github.com/users/skewty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skewty/subscriptions", "organizations_url": "https://api.github.com/users/skewty/orgs", "repos_url": "https://api.github.com/users/skewty/repos", "events_url": "https://api.github.com/users/skewty/events{/privacy}", "received_events_url": "https://api.github.com/users/skewty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T03:54:29Z", "updated_at": "2020-06-17T18:47:27Z", "closed_at": "2020-06-17T18:47:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/graphql-python/graphene-sqlalchemy/blob/20ecaeadf2144b88555a3daf1a04e31b7f2ff95a/examples/nameko_sqlalchemy/schema.py#L30\r\n\r\nCan the class / metaclass (I don't know where it even comes from) be written in such a way that the field is detected by linters?  \r\n\r\nIf someone can point me to where it comes from I can perhaps put together a PR to resolve this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/276", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/276/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/276/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/276/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/276", "id": 616135398, "node_id": "MDU6SXNzdWU2MTYxMzUzOTg=", "number": 276, "title": "Why is first so slow for default SQLAlchemyConnectionField", "user": {"login": "Xindi-Li", "id": 19300674, "node_id": "MDQ6VXNlcjE5MzAwNjc0", "avatar_url": "https://avatars3.githubusercontent.com/u/19300674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xindi-Li", "html_url": "https://github.com/Xindi-Li", "followers_url": "https://api.github.com/users/Xindi-Li/followers", "following_url": "https://api.github.com/users/Xindi-Li/following{/other_user}", "gists_url": "https://api.github.com/users/Xindi-Li/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xindi-Li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xindi-Li/subscriptions", "organizations_url": "https://api.github.com/users/Xindi-Li/orgs", "repos_url": "https://api.github.com/users/Xindi-Li/repos", "events_url": "https://api.github.com/users/Xindi-Li/events{/privacy}", "received_events_url": "https://api.github.com/users/Xindi-Li/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-11T19:43:40Z", "updated_at": "2020-05-12T15:09:15Z", "closed_at": "2020-05-12T15:09:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nrequests_monitor = SQLAlchemyConnectionField(\r\n        RequestConnection,\r\n        request_name=String(),\r\n        ...\r\n)\r\ndef resolve_requests_monitor(self, info, **args):\r\n        query = RequestNode.get_query(info)\r\n        query = query.join(Request.dataset)\r\n        for field, value in args.items():\r\n            query = query.filter(getattr(Request, field) == value)\r\n         return query\r\n\r\n```\r\nThe table I was querying has 10 million records. When I ran the following query, it was super slow. But when I added `query.limit(1000)`, it was way faster. This made me wonder if first and last were not applied by default when querying the db and actually applied afterwards. If not, what's the correct way of using it?\r\n```\r\nrequestsMonitor(first:1000){\r\n      edges{\r\n        node{\r\n          requestId\r\n        }\r\n      }\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/275", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/275/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/275/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/275", "id": 614313385, "node_id": "MDU6SXNzdWU2MTQzMTMzODU=", "number": 275, "title": "Possible to change which model field is used for global id?", "user": {"login": "cahna", "id": 1045603, "node_id": "MDQ6VXNlcjEwNDU2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1045603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cahna", "html_url": "https://github.com/cahna", "followers_url": "https://api.github.com/users/cahna/followers", "following_url": "https://api.github.com/users/cahna/following{/other_user}", "gists_url": "https://api.github.com/users/cahna/gists{/gist_id}", "starred_url": "https://api.github.com/users/cahna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cahna/subscriptions", "organizations_url": "https://api.github.com/users/cahna/orgs", "repos_url": "https://api.github.com/users/cahna/repos", "events_url": "https://api.github.com/users/cahna/events{/privacy}", "received_events_url": "https://api.github.com/users/cahna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-07T20:09:53Z", "updated_at": "2020-06-18T03:58:39Z", "closed_at": "2020-06-18T03:58:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am working with a set of models that use BigInteger primary keys internally, but UUID's externally. \r\n\r\n```python\r\nclass Thing(db.Model):\r\n    id = db.BigInteger(primary_key=True, autoincrement=True)\r\n    public_id = db.Column(postgresql.UUID, unique=True, index=True, default=uuid.uuid4)\r\n    name = db.String(nullable=False)\r\n\r\nclass ThingType(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = Thing\r\n        interfaces = (Node,)\r\n        exclude_fields = ('id',) # <- Desired\r\n```\r\n\r\nClients should only receive and request resources by their `public_id` values. Internally, however, the `id` field is used for joins. \r\n\r\n Is it possible to support this scenario with `graphene-sqlalchemy`, or should I use `graphene` by itself to have more control over customization like this?\r\n\r\nExample of desired query structure:\r\n```\r\nquery {\r\n  thing(id: \"86c6735b-1042-4405-8b54-addb84da278a\") {\r\n    name\r\n  }\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/273", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/273/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/273/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/273", "id": 603245534, "node_id": "MDU6SXNzdWU2MDMyNDU1MzQ=", "number": 273, "title": "Failing tests due to SQLAlchemy removing ORDER BY pk from selectinload", "user": {"login": "chrisberks", "id": 11520810, "node_id": "MDQ6VXNlcjExNTIwODEw", "avatar_url": "https://avatars3.githubusercontent.com/u/11520810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisberks", "html_url": "https://github.com/chrisberks", "followers_url": "https://api.github.com/users/chrisberks/followers", "following_url": "https://api.github.com/users/chrisberks/following{/other_user}", "gists_url": "https://api.github.com/users/chrisberks/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisberks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisberks/subscriptions", "organizations_url": "https://api.github.com/users/chrisberks/orgs", "repos_url": "https://api.github.com/users/chrisberks/repos", "events_url": "https://api.github.com/users/chrisberks/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisberks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-20T13:37:44Z", "updated_at": "2020-06-05T17:59:35Z", "closed_at": "2020-06-05T17:59:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since SQLAlchemy 1.3.16 `orm.selectinload` will no longer `ORDER BY` the primary key of the parent entity. sqlalchemy/sqlalchemy@d3cc4cd\r\n\r\nThis is causing three of the batching tests to fail.\r\n\r\nFixed in #261\r\n\r\nCommit: chrisberks@730b777\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/270", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/270/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/270/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/270", "id": 573550005, "node_id": "MDU6SXNzdWU1NzM1NTAwMDU=", "number": 270, "title": "Flask example gives error", "user": {"login": "cappy123abc", "id": 3297873, "node_id": "MDQ6VXNlcjMyOTc4NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/3297873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cappy123abc", "html_url": "https://github.com/cappy123abc", "followers_url": "https://api.github.com/users/cappy123abc/followers", "following_url": "https://api.github.com/users/cappy123abc/following{/other_user}", "gists_url": "https://api.github.com/users/cappy123abc/gists{/gist_id}", "starred_url": "https://api.github.com/users/cappy123abc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cappy123abc/subscriptions", "organizations_url": "https://api.github.com/users/cappy123abc/orgs", "repos_url": "https://api.github.com/users/cappy123abc/repos", "events_url": "https://api.github.com/users/cappy123abc/events{/privacy}", "received_events_url": "https://api.github.com/users/cappy123abc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-01T13:49:25Z", "updated_at": "2020-05-15T02:12:10Z", "closed_at": "2020-03-01T18:31:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run the flask-sqlalchemy example I get the following error.\r\n\r\nTraceback (most recent call last):\r\n  File \"./app.py\", line 5, in <module>\r\n    from schema import schema\r\n  File \"/home/caleb/Development/graphene-sqlalchemy/examples/flask_sqlalchemy/schema.py\", line 28, in <module>\r\n    class Query(graphene.ObjectType):\r\n  File \"/home/caleb/Development/graphene-sqlalchemy/examples/flask_sqlalchemy/schema.py\", line 32, in Query\r\n    all_employees = SQLAlchemyConnectionField(\r\nAttributeError: type object 'Employee' has no attribute 'connection'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/258", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/258/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/258/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/258", "id": 546278554, "node_id": "MDU6SXNzdWU1NDYyNzg1NTQ=", "number": 258, "title": "Is there a right pagination suggestion\uff1f", "user": {"login": "CSGrandeur", "id": 5326601, "node_id": "MDQ6VXNlcjUzMjY2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5326601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CSGrandeur", "html_url": "https://github.com/CSGrandeur", "followers_url": "https://api.github.com/users/CSGrandeur/followers", "following_url": "https://api.github.com/users/CSGrandeur/following{/other_user}", "gists_url": "https://api.github.com/users/CSGrandeur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CSGrandeur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CSGrandeur/subscriptions", "organizations_url": "https://api.github.com/users/CSGrandeur/orgs", "repos_url": "https://api.github.com/users/CSGrandeur/repos", "events_url": "https://api.github.com/users/CSGrandeur/events{/privacy}", "received_events_url": "https://api.github.com/users/CSGrandeur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-07T13:18:42Z", "updated_at": "2020-01-21T02:31:14Z", "closed_at": "2020-01-07T13:23:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "pagination needs  page, per page and total count\r\n\r\nhowever,  with https://github.com/graphql-python/graphene-sqlalchemy/issues/118, we can only use \"page\" and \"per_page\", but the total_count by https://github.com/graphql-python/graphene-sqlalchemy/pull/104 would not be correct any more.\r\n\r\nwith \"after\" and \"first\", we could get correct total_count. But we don't know \"after what\" with a given page number.\r\n\r\nfor example, there are totally 10,000 items. With a filter, we get 8,000 items. \r\nset per page to 100, given page 12, we need the filtered 1101~1200 item.\r\n\r\nwith https://github.com/graphql-python/graphene-sqlalchemy/pull/104 , we got total_number 10,000 rather than 8,000, then we could not print the right total page num (80).\r\n\r\nwith \"after\" and \"first\", we don't know \"after what\" to get page 12. because the items are filtered, the IDs are not continuously.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/257", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/257/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/257/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/257", "id": 539355052, "node_id": "MDU6SXNzdWU1MzkzNTUwNTI=", "number": 257, "title": "Exception: Don't know how to convert the SQLAlchemy field: UUIDType", "user": {"login": "Msordet", "id": 45397025, "node_id": "MDQ6VXNlcjQ1Mzk3MDI1", "avatar_url": "https://avatars3.githubusercontent.com/u/45397025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Msordet", "html_url": "https://github.com/Msordet", "followers_url": "https://api.github.com/users/Msordet/followers", "following_url": "https://api.github.com/users/Msordet/following{/other_user}", "gists_url": "https://api.github.com/users/Msordet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Msordet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Msordet/subscriptions", "organizations_url": "https://api.github.com/users/Msordet/orgs", "repos_url": "https://api.github.com/users/Msordet/repos", "events_url": "https://api.github.com/users/Msordet/events{/privacy}", "received_events_url": "https://api.github.com/users/Msordet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-17T22:55:20Z", "updated_at": "2019-12-19T16:25:05Z", "closed_at": "2019-12-19T16:25:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nMy app crashes with the following mapping:\r\n```python\r\n#error\r\nException: Don't know how to convert the SQLAlchemy field item.uuid_column (<class 'sqlalchemy.sql.schema.Column'>)\r\n\r\n# model\r\nfrom sqlalchemy_utils import UUIDType\r\n\r\nclass Item(Base):\r\n    uuid_column = Column(UUIDType(binary=False), nullable=False, unique=True)\r\n\r\n# schema\r\nfrom graphene_sqlalchemy import SQLAlchemyObjectType\r\n\r\nclass ItemNode(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = Item\r\n```\r\n\r\nI tried to put this in my schema file to no avail:\r\n```python\r\nfrom sqlalchemy_utils import UUIDType\r\nfrom graphene_sqlalchemy.converter import get_column_doc, is_column_nullable, convert_sqlalchemy_type\r\n\r\n@convert_sqlalchemy_type.register(UUIDType)\r\ndef convert_column_to_string(type, column, registry=None):\r\n    return graphene.String(description=get_column_doc(column), required=not (is_column_nullable(column)))\r\n```\r\n\r\nI checked the following issues/PR but I don't get it: :/ \r\n* https://github.com/graphql-python/graphene-sqlalchemy/issues/53\r\n* https://github.com/graphql-python/graphene-sqlalchemy/issues/233\r\n* https://github.com/graphql-python/graphene-sqlalchemy/pull/203\r\n\r\nCan someone point me in the right direction with this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/255", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/255/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/255/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/255", "id": 531503388, "node_id": "MDU6SXNzdWU1MzE1MDMzODg=", "number": 255, "title": "Custom Object Marshalling", "user": {"login": "vishalkuo", "id": 7549938, "node_id": "MDQ6VXNlcjc1NDk5Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7549938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishalkuo", "html_url": "https://github.com/vishalkuo", "followers_url": "https://api.github.com/users/vishalkuo/followers", "following_url": "https://api.github.com/users/vishalkuo/following{/other_user}", "gists_url": "https://api.github.com/users/vishalkuo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishalkuo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishalkuo/subscriptions", "organizations_url": "https://api.github.com/users/vishalkuo/orgs", "repos_url": "https://api.github.com/users/vishalkuo/repos", "events_url": "https://api.github.com/users/vishalkuo/events{/privacy}", "received_events_url": "https://api.github.com/users/vishalkuo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-02T19:57:08Z", "updated_at": "2019-12-02T22:45:44Z", "closed_at": "2019-12-02T22:45:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, does graphene-sqlalchemy support overriding the automapper to allow us to map resolved ORM objects to custom db objects?\r\n\r\nAs an example, I'd like a graphsql schema of the following:\r\n```\r\nclass MyCustomObject(graphene.ObjectType):\r\n  customField = Field(String)\r\n```\r\n\r\nand my ORM object:\r\n```\r\nclass MyDBObject(db.Model):\r\n  str_field = db.Column(db.String(128))\r\n```\r\n\r\nNow if I query MyCustomObject:\r\n```\r\n{\r\n  my_custom_objects {\r\n    customField\r\n  }\r\n}\r\n```\r\n\r\nI want to be able to map the custom object fields to my db object, return my db objects, and have them mapped back to `MyCustomObject`. \r\n\r\nI'm fairly new to graphql and graphene, so I apologize in advance if this is an extremely basic connection or if this isn't how graphql is meant to work. \r\n\r\nNote: the reason I'm apprehensive of just mapping the field in the resolver is that we have to return `MyDBObject.query.all()` which will be expensive to serialize", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/245", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/245/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/245/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/245", "id": 485067915, "node_id": "MDU6SXNzdWU0ODUwNjc5MTU=", "number": 245, "title": "AttributeError: entity", "user": {"login": "david-freistrom", "id": 1495876, "node_id": "MDQ6VXNlcjE0OTU4NzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1495876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-freistrom", "html_url": "https://github.com/david-freistrom", "followers_url": "https://api.github.com/users/david-freistrom/followers", "following_url": "https://api.github.com/users/david-freistrom/following{/other_user}", "gists_url": "https://api.github.com/users/david-freistrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-freistrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-freistrom/subscriptions", "organizations_url": "https://api.github.com/users/david-freistrom/orgs", "repos_url": "https://api.github.com/users/david-freistrom/repos", "events_url": "https://api.github.com/users/david-freistrom/events{/privacy}", "received_events_url": "https://api.github.com/users/david-freistrom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-26T06:32:03Z", "updated_at": "2019-08-27T21:18:29Z", "closed_at": "2019-08-27T20:38:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 3.7.4\r\nSQLAlchemy          1.3.7\r\ngraphene-sqlalchemy 2.2.2\r\nFlask               1.1.1\r\nFlask-SQLAlchemy    2.4.0\r\npsycopg2            2.8.3 \r\n\r\nLinux xxx 5.1.21-200.fc29.x86_64 #1 SMP Mon Jul 29 15:30:04 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\nThe following code snippets show just a simple One-to-Many Relationship. I tried it with and  back_populates and with backref, Uni- and Bidirectional. I also tried Many-to-Many relationships with a association Table. But nothing helped.\r\n\r\nI always get the error shown in the last Bash-snippet.\r\n\r\nWhats wrong here? \r\nI found out, that sqlalchemy.orm.relationships.RelationshipProperty give that exception when I try to call .entity on it.\r\n\r\nI already opened an issue on the sqlalchemy github [https://github.com/sqlalchemy/sqlalchemy/issues/4819](url) and got the answer above. Hopefully it helps you to help me to fix this issue ;)\r\n\r\n> that stack trace is not very easy to create as it involves an unusual attribute error being generated when mappings are being resolved, and it is masquerading as an attribute error for the \"entity\" attribute, which is in fact a function. in python 3, any ofher kind of exception will be displayed as is, so it's very strange for it to be an attribute error.\r\n>\r\n>in case that doesn't make sense, it means there is another exception happening that we're not able to see.\r\n>\r\n>I unfortunately cannot reproduce your error with your mappings. The condition may be due to whatever graphene-sqlalchemy is doing, The method call here:\r\n>\r\n>File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/graphene/utils/subclass_with_meta.py\", line 52, in init_subclass\r\n>super_class.init_subclass_with_meta(**options)\r\n>\r\n>which is then calling down to class_mapper(), looks suspicious to me; I would first off not be using a metaclass for anything in conjunction wtih SQLAlchemy declarative because metaclasses are very unwieldy and declarative is already using one (they should use mixin classes or class decorators for whatever it is they need to add to SQLAlchemy models) and if I were, I'd not be trying to run class_mapper() inside of it as this could in theory lead to some difficult re-entrant conditions which is likely what's happening here.\r\n>\r\n>in short I think you need to report this to graphene-sqlalchemy.\r\n\r\nIt is happen in sqlalchemy/orm/mapper.py(1947)_post_configure_properties() on line 1947\r\n\r\n```python\r\n1932        def _post_configure_properties(self):                                                                                                                                   \u2502\r\n1933            \"\"\"Call the ``init()`` method on all ``MapperProperties``                                                                                                           \u2502\r\n1934            attached to this mapper.                                                                                                                                            \u2502\r\n1935                                                                                                                                                                                \u2502\r\n1936            This is a deferred configuration step which is intended                                                                                                             \u2502\r\n1937            to execute once all mappers have been constructed.                                                                                                                  \u2502\r\n1938                                                                                                                                                                                \u2502\r\n1939            \"\"\"                                                                                                                                                                 \u2502\r\n1940                                                                                                                                                                                \u2502\r\n1941            self._log(\"_post_configure_properties() started\")                                                                                                                   \u2502\r\n1942            l = [(key, prop) for key, prop in self._props.items()]                                                                                                              \u2502\r\n1943            for key, prop in l:                                                                                                                                                 \u2502\r\n1944                self._log(\"initialize prop %s\", key)                                                                                                                            \u2502\r\n1945                                                                                                                                                                                \u2502\r\n1946                if prop.parent is self and not prop._configure_started:                                                                                                         \u2502\r\n1947 ->                 prop.init()                                                                                                                                                 \u2502\r\n1948                                                                                                                                                                                \u2502\r\n1949                if prop._configure_finished:                                                                                                                                    \u2502\r\n1950                    prop.post_instrument_class(self)                                                                                                                            \u2502\r\n1951                                                                                      \r\n```\r\n\r\n```python\r\n(Pdb) dir(prop)\r\n['Comparator', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattr__', '__getattribute__', '__gt__', '__hash__', '__init__','__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_add_reverse_property', '_all_strategies', '_cascade', '_check_cascade_settings', '_check_conflicts', '_columns_are_mapped', '_configure_finished', '_configure_started', '_create_joins', '_creation_order', '_default_path_loader_key', '_dependency_processor', '_fallback_getattr', '_generate_backref', '_get_attr_w_warn_on_none', '_get_cascade', '_get_context_loader', '_get_strategy', '_is_internal_proxy', '_is_self_referential', '_lazy_none_clause', '_memoized_attr__default_path_loader_key', '_memoized_attr_wildcard_token', '_memoized_attr_info', '_optimized_compare', '_persists_for', '_post_init', '_process_dependent_arguments', '_reverse_property', '_set_cascade', '_setup_join_conditions', '_should_log_debug', '_should_log_info', '_strategies', '_strategy_lookup', '_use_get', '_user_defined_foreign_keys', '_value_as_iterable', '_wildcard_token', '_with_parent', 'active_history', 'argument', 'back_populates', 'backref', 'bake_queries', 'cascade', 'cascade_backrefs', 'cascade_iterator', 'class_attribute', 'collection_class', 'comparator', 'comparator_factory', 'create_row_processor', 'direction', 'distinct_target_key', 'do_init', 'doc', 'enable_typechecks', 'entity', 'extension', 'extension_type', 'info', 'init', 'innerjoin', 'instrument_class', 'is_aliased_class', 'is_attribute', 'is_clause_element', 'is_instance', 'is_mapper', 'is_property', 'is_selectable', 'join_depth', 'key', 'lazy', 'load_on_pending', 'local_remote_pairs', 'logger', 'mapper', 'merge', 'omit_join', 'order_by', 'parent', 'passive_deletes', 'passive_updates', 'post_instrument_class', 'post_update', 'primaryjoin', 'query_class', 'remote_side', 'secondary', 'secondaryjoin', 'set_parent', 'setup', 'single_parent', 'strategy', 'strategy_for', 'strategy_key', 'strategy_wildcard_key', 'uselist', 'viewonly']\r\n(Pdb) prop.entity\r\n*** AttributeError: entity                                   \r\n(Pdb) prop.__class__\r\n<class 'sqlalchemy.orm.relationships.RelationshipProperty'>\r\n```\r\n\r\n\r\n\r\n> app/models/roles.py\r\n\r\n```python\r\nfrom ..models import db, bcrypt\r\nfrom sqlalchemy import Column, Integer, String, Boolean, Binary\r\n\r\nclass Role(db.Model):\r\n  __tablename__ = \"roles\" \r\n\r\n  id = Column(Integer, primary_key=True, autoincrement=True)\r\n  name = Column(String(80), unique=True)\r\n  description = Column(String(255))\r\n  users = db.relationship(\"models.User\", backref=db.backref('role', lazy='joined'), lazy=True)\r\n\r\n  def __repr__(self):\r\n    return '<Role %r>' % (self.name)\r\n\r\n__all__ = [ Role ]\r\n```\r\n\r\n> app/models/users.py\r\n```python\r\nfrom ..models import db, bcrypt\r\nfrom sqlalchemy import Column, Integer, String, Boolean, Binary, DateTime, Text, ForeignKey\r\nfrom sqlalchemy.ext.hybrid import hybrid_property, hybrid_method\r\n\r\nclass User(db.Model):\r\n  __tablename__ = \"users\" \r\n\r\n  id = Column(Integer, primary_key=True, autoincrement=True)\r\n  first_name = Column(String(255), nullable=False)\r\n  last_name = Column(String(255), nullable=False)\r\n  email = Column(String(255), unique=True, nullable=False)\r\n  public_key = Column(Text, unique=True)\r\n  _secret_access_key = Column(Binary(60), unique=True)\r\n  access_key_id = Column(String(255), unique=True)\r\n  active = Column(Boolean())\r\n  confirmed_at = Column(DateTime())\r\n  confirmation_token = Column(String(255), unique=True)\r\n  confirmation_sent_at = Column(DateTime())\r\n  role_id = Column(Integer, ForeignKey(\"roles.id\"), nullable=False)\r\n\r\n  @hybrid_property\r\n  def secret_access_key(self):\r\n    return self._secret_access_key\r\n\r\n  @secret_access_key.setter\r\n  def secret_access_key(self, plaintext_key):\r\n    self._secret_access_key = bcrypt.generate_password_hash(plaintext_key, 15)\r\n \r\n  @hybrid_method\r\n  def is_correct_secret_access_key(self, plaintext_key):\r\n    return bcrypt.check_password_hash(self.secret_access_key, plaintext_key)\r\n\r\n  def __repr__(self):\r\n    return '<User %r %r>' % (self.first_name, self.last_name)\r\n\r\n__all__ = [ User ]\r\n```\r\n\r\n> app/models/__init__.py\r\n```python\r\nfrom flask.cli import with_appcontext\r\nimport click\r\nfrom flask.cli import AppGroup\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_bcrypt import Bcrypt\r\nimport pdb\r\n\r\ndb = SQLAlchemy()\r\nbcrypt = Bcrypt()\r\n\r\nrole_cli = AppGroup('role')\r\nuser_cli = AppGroup('user')\r\n\r\ndef init_app(app):\r\n  print(\"app.models.__init__.init_app()\")\r\n\r\n  db.init_app(app)\r\n  bcrypt.init_app(app)\r\n  app.cli.add_command(role_cli)\r\n  app.cli.add_command(user_cli)\r\n  app.cli.add_command(init_db)\r\n  app.cli.add_command(seed)\r\n\r\n@click.command('init-db')\r\n@with_appcontext\r\ndef init_db():\r\n  pdb.set_trace()\r\n  db.create_all()\r\n  click.echo('Initialized the database.')\r\n\r\n@role_cli.command('create')\r\n@click.argument(\"name\")\r\n@click.argument(\"description\")\r\n@with_appcontext\r\ndef create_role(name, description):\r\n  from .roles import Role\r\n  role = Role(name=name, description=description)\r\n  db.session.add(role)\r\n  db.session.commit()\r\n  click.echo('Role created.')\r\n\r\n@user_cli.command('create')\r\n@click.argument(\"first_name\")\r\n@click.argument(\"last_name\")\r\n@click.argument(\"email\")\r\n@with_appcontext\r\ndef create_role(first_name, last_name, email):\r\n  from .users import User\r\n  from ..tasks.mailer import send_confirmation_mail\r\n  user = User(first_name=first_name, last_name=last_name, email=email)\r\n  db.session.add(user)\r\n  db.session.commit()\r\n  send_confirmation_mail.delay({'subject': 'Please complete your registration confirmation', 'to': user.email, 'from': 'xxx@yyy.zz'})\r\n  click.echo('User created.')\r\n\r\n@click.command('seed')\r\n@with_appcontext\r\ndef seed():\r\n  from .roles import Role\r\n  from .users import User\r\n  from flask import current_app\r\n  from datetime import datetime\r\n  import secrets\r\n\r\n  entities = []\r\n  entities.append(Role(name='Admin', description='Administrator'))\r\n  entities.append(Role(name='ClusterAdmin', description='Administrator of one Redis Cluster'))\r\n  \r\n  secret_access_key=secrets.token_hex()\r\n  entities.append(User(\r\n    first_name=current_app.config[\"ADMIN\"][\"FIRST_NAME\"], \r\n    last_name=current_app.config[\"ADMIN\"][\"LAST_NAME\"],\r\n    email=current_app.config[\"ADMIN\"][\"EMAIL\"],\r\n    confirmed_at=datetime.now(),\r\n    public_key=current_app.config[\"ADMIN\"][\"PUBLIC_KEY\"],\r\n    access_key_id=secrets.token_hex(),\r\n    secret_access_key=secret_access_key\r\n  ))\r\n\r\n  for entity in entities:\r\n    try:\r\n      db.session.add(entity)\r\n      db.session.commit()\r\n      click.echo(\"Add Entity \" + str(entity) +\" to Database.\")\r\n      if isinstance(entity, User):\r\n        click.echo(\"SECRET_ACCESS_KEY: \" + secret_access_key)\r\n        click.echo(\"ACCESS_KEY_ID: \" + entity.access_key_id)\r\n    except Exception as err:\r\n      click.echo(\"Entity \" + str(entity) + \" already exist!\")\r\n\r\n  click.echo('Database seeding Done.')\r\n\r\nfrom .users import User\r\nfrom .roles import Role\r\nfrom .clusters import Cluster\r\nfrom .groups import Group\r\nfrom .workers import Worker\r\n__all__ = [Role, User, Worker, Cluster, Group]\r\n```\r\n\r\n\r\n```bash\r\n(Qubic) [david@doha Qubic]$ export FLASK_APP=app\r\n(Qubic) [david@doha Qubic]$ export FLASK_ENV=development\r\n(Qubic) [david@doha Qubic]$ flask init-db\r\napp.schemas.user.UserObject\r\nTraceback (most recent call last):\r\n  File \"/home/david/projects/Qubic/bin/flask\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 966, in main\r\n    cli.main(prog_name=\"python -m flask\" if as_module else None)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 586, in main\r\n    return super(FlaskGroup, self).main(*args, **kwargs)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/click/core.py\", line 717, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/click/core.py\", line 1132, in invoke\r\n    cmd_name, cmd, args = self.resolve_command(ctx, args)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/click/core.py\", line 1171, in resolve_command\r\n    cmd = self.get_command(ctx, cmd_name)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 542, in get_command\r\n    rv = info.load_app().cli.get_command(ctx, name)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 388, in load_app\r\n    app = locate_app(self, import_name, name)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/flask/cli.py\", line 240, in locate_app\r\n    __import__(module_name)\r\n  File \"/home/david/projects/Qubic/app/__init__.py\", line 6, in <module>\r\n    from . import schemas\r\n  File \"/home/david/projects/Qubic/app/schemas/__init__.py\", line 14, in <module>\r\n    from .user import UserObject, UserObjectConnection, CreateUser, UpdateUser, DeleteUser, DeleteAllUser, ConfirmUser\r\n  File \"/home/david/projects/Qubic/app/schemas/user.py\", line 18, in <module>\r\n    class UserObject(SQLAlchemyObjectType):\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/graphene/utils/subclass_with_meta.py\", line 52, in __init_subclass__\r\n    super_class.__init_subclass_with_meta__(**options)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/graphene_sqlalchemy/types.py\", line 224, in __init_subclass_with_meta__\r\n    assert is_mapped_class(model), (\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/graphene_sqlalchemy/utils.py\", line 28, in is_mapped_class\r\n    class_mapper(cls)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/base.py\", line 441, in class_mapper\r\n    mapper = _inspect_mapped_class(class_, configure=configure)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/base.py\", line 420, in _inspect_mapped_class\r\n    mapper._configure_all()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/mapper.py\", line 1337, in _configure_all\r\n    configure_mappers()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/mapper.py\", line 3229, in configure_mappers\r\n    mapper._post_configure_properties()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/mapper.py\", line 1947, in _post_configure_properties\r\n    prop.init()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/interfaces.py\", line 196, in init\r\n    self.do_init()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/relationships.py\", line 1860, in do_init\r\n    self._process_dependent_arguments()\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/orm/relationships.py\", line 1922, in _process_dependent_arguments\r\n    self.target = self.entity.persist_selectable\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/util/langhelpers.py\", line 949, in __getattr__\r\n    return self._fallback_getattr(key)\r\n  File \"/home/david/projects/Qubic/lib64/python3.7/site-packages/sqlalchemy/util/langhelpers.py\", line 923, in _fallback_getattr\r\n    raise AttributeError(key)\r\nAttributeError: entity\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/234", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/234/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/234/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/234", "id": 459902766, "node_id": "MDU6SXNzdWU0NTk5MDI3NjY=", "number": 234, "title": "REGRESSION: default resolvers", "user": {"login": "rafales", "id": 919812, "node_id": "MDQ6VXNlcjkxOTgxMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/919812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafales", "html_url": "https://github.com/rafales", "followers_url": "https://api.github.com/users/rafales/followers", "following_url": "https://api.github.com/users/rafales/following{/other_user}", "gists_url": "https://api.github.com/users/rafales/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafales/subscriptions", "organizations_url": "https://api.github.com/users/rafales/orgs", "repos_url": "https://api.github.com/users/rafales/repos", "events_url": "https://api.github.com/users/rafales/events{/privacy}", "received_events_url": "https://api.github.com/users/rafales/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-06-24T13:48:42Z", "updated_at": "2019-08-14T17:07:55Z", "closed_at": "2019-08-14T17:07:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "This commit: https://github.com/graphql-python/graphene-sqlalchemy/commit/9a0f7400957c5b5f5f8e952db2502ef1f79fac1f\r\n\r\nstarted setting resolver on fields. Providing a resolver for all fields breaks usage of `default_resolver` (meta param to ObjectType), which our project was using. This introduced a silent error, where our default resolver was not called.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/233", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/233/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/233/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/233", "id": 458933715, "node_id": "MDU6SXNzdWU0NTg5MzM3MTU=", "number": 233, "title": "Convert UUID Type failed", "user": {"login": "jingjinz", "id": 21345605, "node_id": "MDQ6VXNlcjIxMzQ1NjA1", "avatar_url": "https://avatars2.githubusercontent.com/u/21345605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jingjinz", "html_url": "https://github.com/jingjinz", "followers_url": "https://api.github.com/users/jingjinz/followers", "following_url": "https://api.github.com/users/jingjinz/following{/other_user}", "gists_url": "https://api.github.com/users/jingjinz/gists{/gist_id}", "starred_url": "https://api.github.com/users/jingjinz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jingjinz/subscriptions", "organizations_url": "https://api.github.com/users/jingjinz/orgs", "repos_url": "https://api.github.com/users/jingjinz/repos", "events_url": "https://api.github.com/users/jingjinz/events{/privacy}", "received_events_url": "https://api.github.com/users/jingjinz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-20T23:30:31Z", "updated_at": "2019-06-20T23:53:42Z", "closed_at": "2019-06-20T23:53:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm currently have a node model as below:\r\nclass Node(BaseModel):\r\n  name = Column(String)\r\n  node_uuid = Column(UUIDType(binary=False), unique=True, nullable=False)\r\n\r\nWhen I try to use the SQLAlchemyObjectType with the node model metaclass, it doesn't know how to convert type. The error message is as below:\r\nFile \"/usr/local/lib/python3.7/site-packages/graphene_sqlalchemy/converter.py\", line 119, in convert_sqlalchemy_type\r\n    % (column, column.__class__)\r\nException: Don't know how to convert the SQLAlchemy field node.node_uuid (<class 'sqlalchemy.sql.schema.Column'>)\r\n\r\nI noticed that we can register our custom type as discussed before (https://github.com/graphql-python/graphene-sqlalchemy/issues/53). So I have a method as below:\r\n@convert_sqlalchemy_type.register(String)\r\n@convert_sqlalchemy_type.register(UUIDType)\r\ndef convert_column_to_string(type, column, registry=None):\r\n  return graphene.String(description=get_column_doc(column),\r\n                         required=not (is_column_nullable(column))) \r\n\r\nBut I don't know where to put this method and cannot find any example about it. May I know where this register method should be put? Or is there any other method i can use to convert this UUID type to String?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/232", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/232/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/232/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/232", "id": 458817425, "node_id": "MDU6SXNzdWU0NTg4MTc0MjU=", "number": 232, "title": "can I query with a field parameter on a subrelation", "user": {"login": "vaskokj", "id": 59578, "node_id": "MDQ6VXNlcjU5NTc4", "avatar_url": "https://avatars0.githubusercontent.com/u/59578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaskokj", "html_url": "https://github.com/vaskokj", "followers_url": "https://api.github.com/users/vaskokj/followers", "following_url": "https://api.github.com/users/vaskokj/following{/other_user}", "gists_url": "https://api.github.com/users/vaskokj/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaskokj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaskokj/subscriptions", "organizations_url": "https://api.github.com/users/vaskokj/orgs", "repos_url": "https://api.github.com/users/vaskokj/repos", "events_url": "https://api.github.com/users/vaskokj/events{/privacy}", "received_events_url": "https://api.github.com/users/vaskokj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-20T18:54:29Z", "updated_at": "2019-08-01T15:27:07Z", "closed_at": "2019-08-01T15:27:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to figure out how I can accept a parameter and query on that field in a sub table in a GraphQL query. \r\n\r\nThis is an example.\r\n\r\n    query{\r\n      allModels{\r\n        edges{\r\n          node{\r\n            featureVectors(featureSize: 128){ #I want to query on this\r\n              edges{\r\n                node{\r\n                  modelSize\r\n                  featureVectors\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\nHere is that I'm using to query the data. It works to query the data, except that I would like to be able to pass a parameter to search for a specific for example, featureVectors(featureSize: 128). I can't seem to find anything in the Graphene-SQLAlchemy library to allow this natively. \r\n\r\n    class ModelModel(Base):\r\n        __tablename__ = 'models'\r\n    \r\n        id = Column(Integer, primary_key=True, server_default=text(\"nextval('models_id_seq'::regclass)\"))\r\n        type = Column(Text)\r\n        components = Column(Float)\r\n        notes = Column(Text)\r\n        feature_vectors = relationship(\"FeatureVector\", back_populates='models')\r\n    \r\n    class FeatureVectorModel(Base):\r\n    \r\n        id = Column(BigInteger, primary_key=True, server_default=text(\"nextval('feature_vectors_id_seq'::regclass)\"))\r\n        model_size = Column(Integer)\r\n        feature_vectors = Column(ARRAY(Float(precision=53)))\r\n    \r\n        models = relationship('Model', back_populates='feature_vectors')\r\n    \r\n    class Model(SQLAlchemyObjectType):\r\n        class Meta:\r\n            model = ModelModel\r\n            interfaces = (relay.Node, )\r\n    \r\n    \r\n    class ModelConn(relay.Connection):\r\n        class Meta:\r\n            node = Model\r\n    \r\n    \r\n    class Query(graphene.ObjectType):\r\n        node = relay.Node.Field(schema_cadlearn.Model)\r\n        all_models = SQLAlchemyCon", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/230", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/230/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/230/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/230", "id": 457168964, "node_id": "MDU6SXNzdWU0NTcxNjg5NjQ=", "number": 230, "title": "Best way to serialize \"bytea\" field?", "user": {"login": "vaskokj", "id": 59578, "node_id": "MDQ6VXNlcjU5NTc4", "avatar_url": "https://avatars0.githubusercontent.com/u/59578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaskokj", "html_url": "https://github.com/vaskokj", "followers_url": "https://api.github.com/users/vaskokj/followers", "following_url": "https://api.github.com/users/vaskokj/following{/other_user}", "gists_url": "https://api.github.com/users/vaskokj/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaskokj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaskokj/subscriptions", "organizations_url": "https://api.github.com/users/vaskokj/orgs", "repos_url": "https://api.github.com/users/vaskokj/repos", "events_url": "https://api.github.com/users/vaskokj/events{/privacy}", "received_events_url": "https://api.github.com/users/vaskokj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-17T22:03:09Z", "updated_at": "2019-08-08T14:01:55Z", "closed_at": "2019-08-08T14:01:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a bytea field in a postgresql database. In my SQLAlchemy model it is defined as the following.\r\n\r\n` checksum_sha256 = Column(LargeBinary, nullable=False, unique=True)`\r\n\r\nWhen I query for this in graphiQL the server side throw the error.\r\n\r\n`TypeError: Object of type 'bytes' is not JSON serializable`\r\n\r\nThis is a pretty obvious solution as it can't serialize the data. Is there any way to handle this appropriately? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/228", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/228/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/228/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/228", "id": 455500315, "node_id": "MDU6SXNzdWU0NTU1MDAzMTU=", "number": 228, "title": "Documentation on connection_field_factory", "user": {"login": "rdemetrescu", "id": 506371, "node_id": "MDQ6VXNlcjUwNjM3MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/506371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdemetrescu", "html_url": "https://github.com/rdemetrescu", "followers_url": "https://api.github.com/users/rdemetrescu/followers", "following_url": "https://api.github.com/users/rdemetrescu/following{/other_user}", "gists_url": "https://api.github.com/users/rdemetrescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdemetrescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdemetrescu/subscriptions", "organizations_url": "https://api.github.com/users/rdemetrescu/orgs", "repos_url": "https://api.github.com/users/rdemetrescu/repos", "events_url": "https://api.github.com/users/rdemetrescu/events{/privacy}", "received_events_url": "https://api.github.com/users/rdemetrescu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-06-13T02:02:33Z", "updated_at": "2019-06-18T16:47:09Z", "closed_at": "2019-06-18T14:45:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using graphene-sqlalchemy version 2.2.0 and I'm getting lots of `createConnectionField is deprecated and will be removed in the next major version. Use SQLAlchemyObjectType.Meta.connection_field_factory instead.` warnings.\r\n\r\nIs there any example on how to configure this connection_field_factory? Are there any default factories?  So far I couldn't find any example using this new feature on the project site.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/227", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/227/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/227/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/227", "id": 455404254, "node_id": "MDU6SXNzdWU0NTU0MDQyNTQ=", "number": 227, "title": "ConnectionField causing expensive subquery", "user": {"login": "maged", "id": 3887838, "node_id": "MDQ6VXNlcjM4ODc4Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3887838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maged", "html_url": "https://github.com/maged", "followers_url": "https://api.github.com/users/maged/followers", "following_url": "https://api.github.com/users/maged/following{/other_user}", "gists_url": "https://api.github.com/users/maged/gists{/gist_id}", "starred_url": "https://api.github.com/users/maged/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maged/subscriptions", "organizations_url": "https://api.github.com/users/maged/orgs", "repos_url": "https://api.github.com/users/maged/repos", "events_url": "https://api.github.com/users/maged/events{/privacy}", "received_events_url": "https://api.github.com/users/maged/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-12T20:17:01Z", "updated_at": "2019-11-01T08:16:30Z", "closed_at": "2019-06-13T00:34:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "This [line](https://github.com/graphql-python/graphene-sqlalchemy/blob/master/graphene_sqlalchemy/fields.py#L51) triggers a [count](https://docs.sqlalchemy.org/en/13/orm/query.html#sqlalchemy.orm.query.Query.count) of the connection query that loads the entire table into memory. This is v expensive for large tables, and defeats the purpose of using ConnectionFields for pagination.\r\n\r\nIs there anyway to avoid this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/226", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/226/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/226/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/226", "id": 453539123, "node_id": "MDU6SXNzdWU0NTM1MzkxMjM=", "number": 226, "title": "Enhancements: SQLA Interface, Mutation, InputObjectType and auto schema generation", "user": {"login": "maquino1985", "id": 13229385, "node_id": "MDQ6VXNlcjEzMjI5Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/13229385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maquino1985", "html_url": "https://github.com/maquino1985", "followers_url": "https://api.github.com/users/maquino1985/followers", "following_url": "https://api.github.com/users/maquino1985/following{/other_user}", "gists_url": "https://api.github.com/users/maquino1985/gists{/gist_id}", "starred_url": "https://api.github.com/users/maquino1985/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maquino1985/subscriptions", "organizations_url": "https://api.github.com/users/maquino1985/orgs", "repos_url": "https://api.github.com/users/maquino1985/repos", "events_url": "https://api.github.com/users/maquino1985/events{/privacy}", "received_events_url": "https://api.github.com/users/maquino1985/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-07T14:20:49Z", "updated_at": "2019-06-17T15:27:10Z", "closed_at": "2019-06-10T14:27:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently there are at least 3 critical features missing from the library:\r\n\r\nInterface support, Mutation support, and InputObjectType support that integrate with SQLAlchemy models.  A last, but nice to have, would be a type that automatically generates all graphene-sqlalchemy models and correctly assigns them the appropriate Interface type based on their model.\r\n\r\nInterface is critically important for people using polymorphic database structures.  The importance of auto-generated SQLAlchemy Mutations and InputObjectTypes is self explanatory.\r\n\r\na SQLAlchemyInterface should have as its meta fields a name and an SQLAlchemy model, e.g.\r\n\r\n```python\r\n\r\nclass BaseClassModelInterface(SQLAlchemyInterface):\r\n    class Meta:\r\n        name = 'BaseClassNode'\r\n        model = BaseClassModel\r\n```\r\n\r\nBecause it will act as a Node elsewhere, in my implementation I have it extend Node (but call super(AbstractNode) to specify it's meta rather than have it be overridden)\r\n\r\n```python\r\n\r\ndef exclude_autogenerated_sqla_columns(model: DeclarativeMeta) -> Tuple[str]:\r\n    # always pull ids out to a separate argument\r\n    autoexclude: List[str] = []\r\n    for col in sqlalchemy.inspect(model).columns:\r\n        if ((col.primary_key and col.autoincrement) or\r\n                (isinstance(col.type, sqlalchemy.types.TIMESTAMP) and\r\n                 col.server_default is not None)):\r\n            autoexclude.append(col.name)\r\n            assert isinstance(col.name, str)\r\n    return tuple(autoexclude)\r\n\r\nclass SQLAlchemyInterfaceOptions(InterfaceOptions):\r\n    model = None  #\r\n    registry = None  #\r\n    connection = None  #\r\n    id = None  # type: str\r\n\r\nclass SQLAlchemyInterface(Node):\r\n    @classmethod\r\n    def __init_subclass_with_meta__(\r\n            cls,\r\n            model: DeclarativeMeta = None,\r\n            registry: Registry = None,\r\n            only_fields: Tuple[str] = (),\r\n            exclude_fields: Tuple[str] = (),\r\n            connection_field_factory: UnsortedSQLAlchemyConnectionField = default_connection_field_factory,\r\n            **options\r\n    ):\r\n        _meta = SQLAlchemyInterfaceOptions(cls)\r\n        _meta.name = f'{cls.__name__}Node'\r\n\r\n        autoexclude_columns = exclude_autogenerated_sqla_columns(model=model)\r\n        exclude_fields += autoexclude_columns\r\n\r\n        assert is_mapped_class(model), (\r\n            \"You need to pass a valid SQLAlchemy Model in \" '{}.Meta, received \"{}\".'\r\n        ).format(cls.__name__, model)\r\n\r\n        if not registry:\r\n            registry = get_global_registry()\r\n\r\n        assert isinstance(registry, Registry), (\r\n            \"The attribute registry in {} needs to be an instance of \"\r\n            'Registry, received \"{}\".'\r\n        ).format(cls.__name__, registry)\r\n\r\n        sqla_fields = yank_fields_from_attrs(\r\n            construct_fields(\r\n                obj_type=cls,\r\n                model=model,\r\n                registry=registry,\r\n                only_fields=only_fields,\r\n                exclude_fields=exclude_fields,\r\n                connection_field_factory=connection_field_factory\r\n            ),\r\n            _as=Field\r\n        )\r\n        if not _meta:\r\n            _meta = SQLAlchemyInterfaceOptions(cls)\r\n        _meta.model = model\r\n        _meta.registry = registry\r\n        connection = Connection.create_type(\r\n            \"{}Connection\".format(cls.__name__), node=cls)\r\n        assert issubclass(connection, Connection), (\r\n            \"The connection must be a Connection. Received {}\"\r\n        ).format(connection.__name__)\r\n        _meta.connection = connection\r\n        if _meta.fields:\r\n            _meta.fields.update(sqla_fields)\r\n        else:\r\n            _meta.fields = sqla_fields\r\n        _meta.fields['id'] = graphene.GlobalID(cls, description=\"The ID of the object.\")\r\n        super(AbstractNode, cls).__init_subclass_with_meta__(_meta=_meta, **options)\r\n\r\n    @classmethod\r\n    def Field(cls, *args, **kwargs):  # noqa: N802\r\n        return NodeField(cls, *args, **kwargs)\r\n\r\n    @classmethod\r\n    def node_resolver(cls, only_type, root, info, id):\r\n        return cls.get_node_from_global_id(info, id, only_type=only_type)\r\n\r\n    @classmethod\r\n    def get_node_from_global_id(cls, info, global_id, only_type=None):\r\n        try:\r\n            node: DeclarativeMeta = info.context.get('session').query(cls._meta.model).filter_by(id=global_id).one_or_none()\r\n            return node\r\n        except Exception:\r\n            return None\r\n\r\n    @classmethod\r\n    def from_global_id(cls, global_id):\r\n        return global_id\r\n\r\n    @classmethod\r\n    def to_global_id(cls, type, id):\r\n        return id\r\n\r\n    @classmethod\r\n    def resolve_type(cls, instance, info):\r\n        if isinstance(instance, graphene.ObjectType):\r\n            return type(instance)\r\n        graphene_model = get_global_registry().get_type_for_model(type(instance))\r\n        if graphene_model:\r\n            return graphene_model\r\n        else:\r\n            raise ValueError(f'{instance} must be a SQLAlchemy model or graphene.ObjectType')\r\n```\r\n\r\n\r\nA mutation should take as its meta arguments the SQLAlchemy Model, it's CRUD operation . (Create Edit or Delete), and the graphene structure of its response (Output type)\r\n\r\n```python\r\nclass CreateFoos(SQLAlchemyMutation):\r\n    class Arguments:\r\n        foos = graphene.Argument(graphene.List(FooInput))\r\n\r\n    class Meta:\r\n        create = True\r\n        model = FooModel\r\n        structure = graphene.List\r\n```\r\n\r\n```python\r\nclass SQLAlchemyMutation(graphene.Mutation):\r\n    @classmethod\r\n    def __init_subclass_with_meta__(cls, model=None, create=False,\r\n                                    delete=False, registry=None,\r\n                                    arguments=None, only_fields=(),\r\n                                    structure: Type[Structure] = None,\r\n                                    exclude_fields=(), **options):\r\n        meta = SQLAlchemyMutationOptions(cls)\r\n        meta.create = create\r\n        meta.model = model\r\n        meta.delete = delete\r\n\r\n        if arguments is None and not hasattr(cls, \"Arguments\"):\r\n            arguments = {}\r\n            # don't include id argument on create\r\n            if not meta.create:\r\n                arguments['id'] = graphene.ID(required=True)\r\n\r\n            # don't include input argument on delete\r\n            if not meta.delete:\r\n                inputMeta = type('Meta', (object,), {\r\n                    'model': model,\r\n                    'exclude_fields': exclude_fields,\r\n                    'only_fields': only_fields\r\n                })\r\n                inputType = type(cls.__name__ + 'Input',\r\n                                 (SQLAlchemyInputObjectType,),\r\n                                 {'Meta': inputMeta})\r\n                arguments = {'input': inputType(required=True)}\r\n        if not registry:\r\n            registry = get_global_registry()\r\n        output_type: ObjectType = registry.get_type_for_model(model)\r\n        if structure:\r\n            output_type = structure(output_type)\r\n        super(SQLAlchemyMutation, cls).__init_subclass_with_meta__(_meta=meta, output=output_type, arguments=arguments, **options)\r\n\r\n    @classmethod\r\n    def mutate(cls, info, **kwargs):\r\n        session = get_session(info.context)\r\n        with session.no_autoflush:\r\n            meta = cls._meta\r\n            model = None\r\n\r\n            if meta.create:\r\n                model = meta.model(**kwargs['input'])\r\n                session.add(model)\r\n            else:\r\n                model = session.query(meta.model).filter(meta.model.id == kwargs['id']).first()\r\n\r\n            if meta.delete:\r\n                session.delete(model)\r\n            else:\r\n\r\n                def setModelAttributes(model, attrs):\r\n                    relationships = model.__mapper__.relationships\r\n                    for key, value in attrs.items():\r\n                        if key in relationships:\r\n                            if getattr(model, key) is None:\r\n                                # instantiate class of the same type as\r\n                                # the relationship target\r\n                                setattr(model, key,\r\n                                        relationships[key].mapper.entity())\r\n                            setModelAttributes(getattr(model, key), value)\r\n                        else:\r\n                            setattr(model, key, value)\r\n\r\n                setModelAttributes(model, kwargs['input'])\r\n            session.commit()\r\n            return model\r\n\r\n    @classmethod\r\n    def Field(cls, *args, **kwargs):\r\n        return graphene.Field(cls._meta.output,\r\n                              args=cls._meta.arguments,\r\n                              resolver=cls._meta.resolver)\r\n\r\n```\r\n\r\nan SQLAlchemy InputObjectType should introspect the sqla model and autogenerate fields to select based upon and set the appropriate field data type:\r\n\r\ne.g.\r\n\r\n```python\r\nclass Bar(SQLAlchemyInputObjectType):\r\n    class Meta:\r\n        model = BarModel\r\n        exclude_fields = ( 'polymorphic_discriminator', 'active', 'visible_id')\r\n\r\n```python\r\nclass SQLAlchemyInputObjectType(InputObjectType):\r\n    @classmethod\r\n    def __init_subclass_with_meta__(\r\n            cls,\r\n            model=None,\r\n            registry=None,\r\n            skip_registry=False,\r\n            only_fields=(),\r\n            exclude_fields=(),\r\n            connection=None,\r\n            connection_class=None,\r\n            use_connection=None,\r\n            interfaces=(),\r\n            id=None,\r\n            connection_field_factory=default_connection_field_factory,\r\n            _meta=None,\r\n            **options\r\n    ):\r\n        autoexclude = []\r\n\r\n        # always pull ids out to a separate argument\r\n        for col in sqlalchemy.inspect(model).columns:\r\n            if ((col.primary_key and col.autoincrement) or\r\n                    (isinstance(col.type, sqlalchemy.types.TIMESTAMP) and\r\n                     col.server_default is not None)):\r\n                autoexclude.append(col.name)\r\n\r\n        if not registry:\r\n            registry = get_global_registry()\r\n        sqla_fields = yank_fields_from_attrs(\r\n            construct_fields(cls, model, registry, only_fields, exclude_fields + tuple(autoexclude), connection_field_factory),\r\n            _as=Field,\r\n        )\r\n        # create accessor for model to be retrieved for querying\r\n        cls.sqla_model = model\r\n        if use_connection is None and interfaces:\r\n            use_connection = any(\r\n                (issubclass(interface, Node) for interface in interfaces)\r\n            )\r\n\r\n        if use_connection and not connection:\r\n            # We create the connection automatically\r\n            if not connection_class:\r\n                connection_class = Connection\r\n\r\n            connection = connection_class.create_type(\r\n                \"{}Connection\".format(cls.__name__), node=cls\r\n            )\r\n\r\n        if connection is not None:\r\n            assert issubclass(connection, Connection), (\r\n                \"The connection must be a Connection. Received {}\"\r\n            ).format(connection.__name__)\r\n\r\n        for key, value in sqla_fields.items():\r\n            if not (isinstance(value, Dynamic) or hasattr(cls, key)):\r\n                setattr(cls, key, value)\r\n\r\n        super(SQLAlchemyInputObjectType, cls).__init_subclass_with_meta__(**options)\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/223", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/223/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/223/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/223", "id": 453184235, "node_id": "MDU6SXNzdWU0NTMxODQyMzU=", "number": 223, "title": "Update to construct_fields creates problems (this method has broader use than just library SQLAObjectType)", "user": {"login": "maquino1985", "id": 13229385, "node_id": "MDQ6VXNlcjEzMjI5Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/13229385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maquino1985", "html_url": "https://github.com/maquino1985", "followers_url": "https://api.github.com/users/maquino1985/followers", "following_url": "https://api.github.com/users/maquino1985/following{/other_user}", "gists_url": "https://api.github.com/users/maquino1985/gists{/gist_id}", "starred_url": "https://api.github.com/users/maquino1985/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maquino1985/subscriptions", "organizations_url": "https://api.github.com/users/maquino1985/orgs", "repos_url": "https://api.github.com/users/maquino1985/repos", "events_url": "https://api.github.com/users/maquino1985/events{/privacy}", "received_events_url": "https://api.github.com/users/maquino1985/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-06T18:47:21Z", "updated_at": "2019-06-06T21:13:49Z", "closed_at": "2019-06-06T21:10:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/graphql-python/graphene-sqlalchemy/blob/8ad1f75639ced6b00688b63c1a7b4a6a1acdf5af/graphene_sqlalchemy/types.py#L40\r\n\r\nthis line breaks code I use to create sqlalchemy Interfaces and InputObjectTypes. please parameterize a boolean operator to skip this or something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/221", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/221/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/221/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/221", "id": 448846109, "node_id": "MDU6SXNzdWU0NDg4NDYxMDk=", "number": 221, "title": "Anything like DjangoFilterConnectionField", "user": {"login": "huanganqing", "id": 1097630, "node_id": "MDQ6VXNlcjEwOTc2MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1097630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huanganqing", "html_url": "https://github.com/huanganqing", "followers_url": "https://api.github.com/users/huanganqing/followers", "following_url": "https://api.github.com/users/huanganqing/following{/other_user}", "gists_url": "https://api.github.com/users/huanganqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/huanganqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huanganqing/subscriptions", "organizations_url": "https://api.github.com/users/huanganqing/orgs", "repos_url": "https://api.github.com/users/huanganqing/repos", "events_url": "https://api.github.com/users/huanganqing/events{/privacy}", "received_events_url": "https://api.github.com/users/huanganqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-27T12:59:48Z", "updated_at": "2019-05-28T19:16:41Z", "closed_at": "2019-05-28T19:16:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there anything similar to DjangoFilterConnectionField? It seems  support filtering, pagination, mutation at same time. Is there alternative for graphene-sqlalchemy?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/220", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/220/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/220/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/220", "id": 448696844, "node_id": "MDU6SXNzdWU0NDg2OTY4NDQ=", "number": 220, "title": "AssertionError: Found different types with the same name in the schema: EmployeeConnection, EmployeeConnection.", "user": {"login": "huanganqing", "id": 1097630, "node_id": "MDQ6VXNlcjEwOTc2MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1097630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huanganqing", "html_url": "https://github.com/huanganqing", "followers_url": "https://api.github.com/users/huanganqing/followers", "following_url": "https://api.github.com/users/huanganqing/following{/other_user}", "gists_url": "https://api.github.com/users/huanganqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/huanganqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huanganqing/subscriptions", "organizations_url": "https://api.github.com/users/huanganqing/orgs", "repos_url": "https://api.github.com/users/huanganqing/repos", "events_url": "https://api.github.com/users/huanganqing/events{/privacy}", "received_events_url": "https://api.github.com/users/huanganqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-27T07:00:35Z", "updated_at": "2019-05-28T19:17:53Z", "closed_at": "2019-05-28T19:17:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nclass EmployeeConnection(relay.Connection):\r\n    class Meta:\r\n        node = Employee\r\n\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n    # Allow only single column sorting\r\n    #employee = relay.Node.Field(Employee)\r\n    department = relay.Node.Field(Department)\r\n    #all_employees = SQLAlchemyConnectionField(Employee)\r\n    all_employees = SQLAlchemyConnectionField(EmployeeConnection)\r\n\r\n    # Allows sorting over multiple columns, by default over the primary key\r\n    all_roles = SQLAlchemyConnectionField(Role)\r\n    # Disable sorting over this field\r\n    all_departments = SQLAlchemyConnectionField(Department, sort=None)\r\n\r\n#schema = graphene.Schema(query=Query, types=[Department, Employee, Role])\r\nschema = graphene.Schema(query=Query)\r\n```\r\n\r\nI got following error when i try to run app.py\r\n```\r\n\r\nline 99, in graphene_reducer\r\n    ).format(_type.graphene_type, type)\r\nAssertionError: Found different types with the same name in the schema: EmployeeConnection, EmployeeConnection.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/219", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/219/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/219/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/219", "id": 448695922, "node_id": "MDU6SXNzdWU0NDg2OTU5MjI=", "number": 219, "title": "Unknown argument \"sort\" on field \"allEmployees\" of type \"Query\"", "user": {"login": "huanganqing", "id": 1097630, "node_id": "MDQ6VXNlcjEwOTc2MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1097630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huanganqing", "html_url": "https://github.com/huanganqing", "followers_url": "https://api.github.com/users/huanganqing/followers", "following_url": "https://api.github.com/users/huanganqing/following{/other_user}", "gists_url": "https://api.github.com/users/huanganqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/huanganqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huanganqing/subscriptions", "organizations_url": "https://api.github.com/users/huanganqing/orgs", "repos_url": "https://api.github.com/users/huanganqing/repos", "events_url": "https://api.github.com/users/huanganqing/events{/privacy}", "received_events_url": "https://api.github.com/users/huanganqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-27T06:57:42Z", "updated_at": "2019-05-28T19:21:29Z", "closed_at": "2019-05-28T19:21:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "schema.py\r\n\r\n```\r\n  class Query(graphene.ObjectType):\r\n       #node = relay.Node.Field()\r\n       # Allow only single column sorting\r\n       employee = relay.Node.Field(Employee)\r\n       all_employees = SQLAlchemyConnectionField(\r\n           Employee)\r\n       # Allows sorting over multiple columns, by default over the primary key\r\n       all_roles = SQLAlchemyConnectionField(Role)\r\n       # Disable sorting over this field\r\n       all_departments = SQLAlchemyConnectionField(Department, sort=None)\r\n\r\n```\r\n\r\nquery from GraphiQL \r\n\r\n```\r\n{\r\n  allEmployees(sort: [name_asc] ) {\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n    }\r\n    edges {\r\n      cursor\r\n      node {\r\n        id\r\n        name\r\n        department {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe result from query would be:\r\n\r\n```\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"Unknown argument \\\"sort\\\" on field \\\"allEmployees\\\" of type \\\"Query\\\".\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 2,\r\n          \"column\": 16\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/216", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/216/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/216/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/216", "id": 447385188, "node_id": "MDU6SXNzdWU0NDczODUxODg=", "number": 216, "title": "Bug \"type object 'Employee' has no attribute 'sort_argument'\"", "user": {"login": "royhananwar", "id": 16474726, "node_id": "MDQ6VXNlcjE2NDc0NzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/16474726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/royhananwar", "html_url": "https://github.com/royhananwar", "followers_url": "https://api.github.com/users/royhananwar/followers", "following_url": "https://api.github.com/users/royhananwar/following{/other_user}", "gists_url": "https://api.github.com/users/royhananwar/gists{/gist_id}", "starred_url": "https://api.github.com/users/royhananwar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/royhananwar/subscriptions", "organizations_url": "https://api.github.com/users/royhananwar/orgs", "repos_url": "https://api.github.com/users/royhananwar/repos", "events_url": "https://api.github.com/users/royhananwar/events{/privacy}", "received_events_url": "https://api.github.com/users/royhananwar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-22T23:28:42Z", "updated_at": "2019-05-24T10:25:39Z", "closed_at": "2019-05-24T10:25:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just clone this repo and try flask example\r\nbut when I try to run it without have any changing code\r\nI got an error like this\r\n\r\n`Traceback (most recent call last):\r\n    File \"./app.py\", line 5, in <module>\r\n    from schema import schema\r\n  File \"/home/examples/flask_sqlalchemy/schema.py\", line 28, in <module>\r\n    class Query(graphene.ObjectType):\r\n  File \"/home/examples/flask_sqlalchemy/schema.py\", line 32, in Query\r\n    Employee, sort=Employee.sort_argument())\r\nAttributeError: type object 'Employee' has no attribute 'sort_argument'`\r\n\r\nWhat should I do?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/212", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/212/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/212/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/212", "id": 442263450, "node_id": "MDU6SXNzdWU0NDIyNjM0NTA=", "number": 212, "title": "Generate Mutation input from Model ", "user": {"login": "Rafik-Belkadi", "id": 33965293, "node_id": "MDQ6VXNlcjMzOTY1Mjkz", "avatar_url": "https://avatars0.githubusercontent.com/u/33965293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rafik-Belkadi", "html_url": "https://github.com/Rafik-Belkadi", "followers_url": "https://api.github.com/users/Rafik-Belkadi/followers", "following_url": "https://api.github.com/users/Rafik-Belkadi/following{/other_user}", "gists_url": "https://api.github.com/users/Rafik-Belkadi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rafik-Belkadi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rafik-Belkadi/subscriptions", "organizations_url": "https://api.github.com/users/Rafik-Belkadi/orgs", "repos_url": "https://api.github.com/users/Rafik-Belkadi/repos", "events_url": "https://api.github.com/users/Rafik-Belkadi/events{/privacy}", "received_events_url": "https://api.github.com/users/Rafik-Belkadi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-09T14:21:54Z", "updated_at": "2019-05-09T19:57:25Z", "closed_at": "2019-05-09T15:25:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to have something like this ? \r\n\r\n```python\r\nclass AddUserInput(SQLAlchemyInputObjectType):\r\n    class Meta:\r\n        model = UserModel\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/208", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/208/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/208/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/208", "id": 434791462, "node_id": "MDU6SXNzdWU0MzQ3OTE0NjI=", "number": 208, "title": "Discussion: Auto-creation of Graphene Enums", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1325236727, "node_id": "MDU6TGFiZWwxMzI1MjM2NzI3", "url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/labels/discussion", "name": "discussion", "color": "fef2c0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-04-18T14:11:42Z", "updated_at": "2019-05-05T17:56:16Z", "closed_at": "2019-05-05T17:56:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In PR #98 I made an attempt to improve the auto generation of Graphene Enums, but it turned out that this feature still needs some discussion. Let's clarify here what we really want to achieve first.\r\n\r\nIn the following:\r\n* g-enum = Graphene Enum types\r\n* sa-enum = SQLAlchemy Enum type\r\n* py-enum = Python Enum type\r\n* sql-enum = Database enum data type\r\n\r\nThe sql-enums are supported as actual data types by some databases, otherwise implemented using name constraints. Note that both g-enums and sa-enums can be based either on py-enums or on simple lists of values. \r\n\r\nFor the examples below, I use the following imports:\r\n\r\n```\r\nfrom enum import Enum as PyEnum\r\nimport sqlalchemy as sa\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\n\r\nBase = sa.ext.declarative.declarative_base()\r\n```\r\n\r\nWhen g-enums are created from sa-enums by `graphene_sqlalchemy`, they must be given a GraphQL type name. We must decide how these name are generated.\r\n\r\n### 1) sa-enums based on py-enums\r\n\r\nExample 1:\r\n\r\n```\r\nclass PetKind(PyEnum):\r\n    cat = 1\r\n    dog = 2\r\n\r\nclass Pet(Base):\r\n    __tablename__ = \"pets\"\r\n    name = sa.Column(sa.String(30), primary_key=True)\r\n    kind = sa.Column(sa.Enum(PetKind))\r\n```\r\n\r\nI think it's clear that in this case, the g-enum should be derived from `PetKind` and thus get the same name `PetKind`. Since GraphQL and Python have the same conventions for type/class names, this case is all good and fine.\r\n\r\n### 1a) sa-enums based on py-enums, with SQL name\r\n\r\nExample 1a:\r\n\r\n```\r\nclass Pet(Base):\r\n    __tablename__ = \"pets\"\r\n    name = sa.Column(sa.String(30), primary_key=True)\r\n    kind = sa.Column(sa.Enum(PetKind, name='kind_of_pet'))\r\n```\r\n\r\nThe sa-enums can be declared with a name argument which is used for name constraints or as sql-enum type name on the database. In this case, I think the name of the py-enum should take precedence for us; the generated g-enum should still be derived from `PetKind`, and thus have the name `PetKind`, not `KindOfPet`.\r\n\r\n### 2) sa-enums based on values, with SQL name\r\n\r\nExample 2:\r\n\r\n```\r\nclass Pet(Base):\r\n    __tablename__ = \"pets\"\r\n    name = sa.Column(sa.String(30), primary_key=True)\r\n    kind = sa.Column(sa.Enum('cat', 'dog', name='kind_of_pet'))\r\n```\r\n\r\nNote: The name here is passed as argument to Enum, not Column. I.e. the sql-enum name is `kind_of_pet`, while the column name is `kind`.  This case is interesting. \r\n\r\nFirst, no matter which name we choose, it will not follow GraphQL type name conventions according to which type names are written in PascalCase (though I don't find it officially required or recommended, I think it's a strong convention that also resonates with the Python class name convention). So I believe an automatic name conversion should happen; the GraphQL name should be  `Kind` or `KindOfPet` rather than `kind` or `kind_of_pet`.\r\n\r\nSecond, I think in this case the sql-enum name should take precedence, since it describes the enum itself and should be characteristic for the enum, while the column name only describes its usage relative to the model. Also, different column names could be used for the same enum. For example, we could have another table:\r\n\r\n```\r\nclass Person(Base):\r\n    __tablename__ = \"persons\"\r\n    name = sa.Column(sa.String(30), primary_key=True)\r\n    favorite_pet_kind = sa.Column(sa.Enum('cat', 'dog', name='kind_of_pet'))\r\n```\r\n\r\nSo in this case, I suggest the g-enum should be created like:\r\n\r\n```\r\ngraphene.Enum('KindOfPet', [('CAT', 'cat'), ('DOG', 'cat')])\r\n```\r\n\r\nI.e. the g-enum should be named  `KindOfPet` and not `Kind` or `FavoritePetKind`. Note that in addition to the type name, the symbol names have also been converted, but this is a separate issue I will discuss below as point 7. \r\n\r\n### 3) sa-enums based on values, without SQL name\r\n\r\nExample 3:\r\n\r\n```\r\nclass Pet(Base):\r\n    __tablename__ = \"pets\"\r\n    name = sa.Column(sa.String(30), primary_key=True)\r\n    kind = sa.Column(sa.Enum('cat', 'dog'))\r\n```\r\n\r\nIn this case, I think it would make sense to create a g-enum type named `Kind` after the column, since we have no other clue how the type should be named. However, as in the example above, the same type could be also used in a differently named column:\r\n\r\n```\r\nclass Person(Base):\r\n    __tablename__ = \"persons\"\r\n    name = sa.Column(sa.String(30), primary_key=True)\r\n    favorite_pet_kind = sa.Column(sa.Enum('cat', 'dog'))\r\n```\r\n\r\nWe have two options here: First, we create another g-enum type named `FavoritePetKind` with the same values. Or we re-use the `Kind` type from above. But in that case it would not be clear which name to use: The first name, `Kind,` or the last name, `FavoritePetKind`, or the shortest name or the longest name? We would need to specify an artificial rule for picking the name. So I suggest simply creating two g-enum types with the same values, but different names, for the two columns.\r\n\r\nBut we still have a problem. What if column names are equal, but values differ, like in the following\r\n\r\nExample 3b:\r\n\r\n```\r\nclass Pet(Base):\r\n    __tablename__ = \"pets\"\r\n    name = sa.Column(sa.String(30), primary_key=True)\r\n    kind = sa.Column(sa.Enum('cat', 'dog'))\r\n    eye_color = sa.Column(sa.Enum('amber', 'brown'))\r\n\r\nclass Person(Base):\r\n    __tablename__ = \"persons\"\r\n    name = sa.Column(sa.String(30), primary_key=True)\r\n    kind = sa.Column(sa.Enum('thinker', 'doer'))\r\n    favorite_pet_kind = sa.Column(sa.Enum('cat', 'dog'))\r\n    eye_color = sa.Column(sa.Enum('blue', 'brown'))\r\n```\r\n\r\nMy suggestion to solve this problem is to add the model name as a prefix and auto generate the g-enum types `PetKind`, `PetEyeColor`, `PersonKind`, `PersonFavoritePetKind` and `PersonEyeColor`. We could try to be smart and reuse g-enums with the same values, adding the prefix only when there are value clashes, but I think for consistency and simplicity sake we should always add the model as prefix, not only when there are conflicts.\r\n\r\n### 4) Should we enforce an Enum postfix? \r\n\r\nShould we also enforce a postfix of `Enum` for g-enum names? Note that this is not a GraphQL convention, but it may make sense to avoid name clashes with other types in the GraphQL schema, particularly when we auto-create names. I.e. in the example above, the generated g-enum would be `PetEyeColorEnum` instead of `PetEyeColor`. And do we want to use the postfix only for auto generated names or also add one to g-enums derived from py-enums or generated from sql-enum names? Of course, the postfix would not be added when it already exists.\r\n\r\nCurrently I think we should *not* add such a prefix, particularly if we auto create types with model name as prefix as suggested above, since then name clashes are much less likely. And when enums already have names, they would normally also not clash with model class names. I can't think of an example where this would be a problem.\r\n\r\n### 5) Retrieving g-enums\r\n\r\nIt is sometimes necessary to refer to the auto-generated g-enums, like when you are using them in GraphQL input types. In the example above, you may want to provide a query that takes a `PetKind` as argument and returns all pets of that kind. To do that, you need to refer to the g-enum generated from the `pets.kind` column.\r\n\r\nI think we should provide two methods for this, one using the g-enum name as argument, another one using the column as argument. The following calls would then return the same g-enum:\r\n\r\n```\r\nget_enum_by_name('PetKind')\r\n\r\nget_enum_for_column(Pet.pet_kind)\r\n```\r\n\r\nThe first method could also be used for retrieving sort enums for models that are generated by `graphene_sqlalchemy` to be used as argument for sorting query results. There should be also a method for getting the sort g-enum that takes the model as parameter. These should return the same sort g-enum:\r\n\r\n```\r\nget_enum_by_name('PetSortEnum')\r\n\r\nget_sort_enum_for_model(Pet)\r\n```\r\n\r\nShould the `get_enum_for_column` and `get_sort_enum_for_model` automatically create and register a g-enum when nothing has been registered yet? I think so, that's better than throwing an error. This would allow retrieving a column g-enum for usage in an argument used *before* the corresponding column, or a sort g-enum without explicitly creating it first using a `set_sort_enum_for_model` function. Of course the latter should be provided to allow customizing the generated sort enum, but otherwise you would not even need it.\r\n\r\n### 6) Use the registry or utility or enum module?\r\n\r\nTo always retrieve the same g-enum that has been generated for a column or as a sort enum, the g-enums need to be stored in the `graphene_sqlalchemy` registry. The methods for retrieving will therefore naturally be methods of the Registry class. Should we also provide functions in the `utility` module with the same names, that take the registry as an optional parameter, using the global registry as default? Or maybe we should put all the enum support in a separate `enum` module instead? The functions for creating sort enums could then also live there. I think that makes sense.\r\n\r\n### 7) Values of g-enums\r\n\r\nGraphQL has the convention ([recommended in the specs](https://graphql.github.io/graphql-spec/draft/#sec-Enum-Value)) that enum values are named like `ENUM_VALUE` instead of `enum_value` or `EnumValue`. On the database, no such convention exists, and sql-enums often use lowercase names. Python enums also often use uppercase member names, but this is not really a convention, and they are also often lowercase.\r\n\r\nSo the question is: Should we alter the names of enum values to be uppercase in the g-enum? I think so. Graphene also adapts the names of fields from Python to GraphQL already. Graphene does *not* rename the enum values, and leaves it up to you to follow the conventions, which I think makes sense. However, in the case of  `graphene_sqlalchemy` we cannot define the names as we like, but must take those from the database. So I think in that case it makes sense to transform the *names* of g-enum values from the database to Graphene so that they follow GraphQL conventions. The *values* of the g-enum values should not be transformed. See the example above:\r\n\r\n```\r\ngraphene.Enum('KindOfPet', [('CAT', 'cat'), ('DOG', 'cat')])  # names transformed, values not\r\n```\r\n\r\nFor those who really don't want to transform enum value names, we could support a registry attribute `convert_enum_value_names: bool` that would be True by default but could be set to False to deactivate the automatic conversion.\r\n\r\nPlease let me hear your opinions, particulary if you have different opinions or issues I have forgotten to consider. I will then create a PR with the functionality we agreed upon.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/195", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/195/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/195/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/195", "id": 427769737, "node_id": "MDU6SXNzdWU0Mjc3Njk3Mzc=", "number": 195, "title": "Development and Maintance of this package", "user": {"login": "brasilikum", "id": 3106990, "node_id": "MDQ6VXNlcjMxMDY5OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3106990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brasilikum", "html_url": "https://github.com/brasilikum", "followers_url": "https://api.github.com/users/brasilikum/followers", "following_url": "https://api.github.com/users/brasilikum/following{/other_user}", "gists_url": "https://api.github.com/users/brasilikum/gists{/gist_id}", "starred_url": "https://api.github.com/users/brasilikum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brasilikum/subscriptions", "organizations_url": "https://api.github.com/users/brasilikum/orgs", "repos_url": "https://api.github.com/users/brasilikum/repos", "events_url": "https://api.github.com/users/brasilikum/events{/privacy}", "received_events_url": "https://api.github.com/users/brasilikum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444496299, "node_id": "MDU6TGFiZWw0NDQ0OTYyOTk=", "url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-04-01T15:25:24Z", "updated_at": "2019-04-01T21:46:38Z", "closed_at": "2019-04-01T21:46:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, it seems to me that this package is lacking People to maintain and develop it.\r\nI come to this conclusion because many Issues go unanswered and Pull requests not merged.\r\n\r\nWhat can we do about it? Who is willing to actively contribute in any way?\r\nAre the current Maintainers willing to give some level of access to those people or should we gather around a fork?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/190", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/190/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/190/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/190", "id": 427205983, "node_id": "MDU6SXNzdWU0MjcyMDU5ODM=", "number": 190, "title": "Update the flask example to flask>=0.12.3", "user": {"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444496294, "node_id": "MDU6TGFiZWw0NDQ0OTYyOTQ=", "url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/milestones/1", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/milestone/1", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/milestones/1/labels", "id": 4149425, "node_id": "MDk6TWlsZXN0b25lNDE0OTQyNQ==", "number": 1, "title": "2.1.1", "description": null, "creator": {"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 16, "state": "open", "created_at": "2019-03-18T12:24:04Z", "updated_at": "2019-04-01T18:34:38Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2019-03-29T22:51:49Z", "updated_at": "2019-04-01T17:50:33Z", "closed_at": "2019-04-01T17:50:33Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Due to [CVE-2018-1000656](https://nvd.nist.gov/vuln/detail/CVE-2018-1000656), flask library in the flask example should be updated to a version equal or over 0.12.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/189", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/189/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/189/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/189", "id": 427205025, "node_id": "MDU6SXNzdWU0MjcyMDUwMjU=", "number": 189, "title": "Restore automatic flake8 linting on travis", "user": {"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444496294, "node_id": "MDU6TGFiZWw0NDQ0OTYyOTQ=", "url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "jnak", "id": 569169, "node_id": "MDQ6VXNlcjU2OTE2OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/569169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnak", "html_url": "https://github.com/jnak", "followers_url": "https://api.github.com/users/jnak/followers", "following_url": "https://api.github.com/users/jnak/following{/other_user}", "gists_url": "https://api.github.com/users/jnak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnak/subscriptions", "organizations_url": "https://api.github.com/users/jnak/orgs", "repos_url": "https://api.github.com/users/jnak/repos", "events_url": "https://api.github.com/users/jnak/events{/privacy}", "received_events_url": "https://api.github.com/users/jnak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jnak", "id": 569169, "node_id": "MDQ6VXNlcjU2OTE2OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/569169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnak", "html_url": "https://github.com/jnak", "followers_url": "https://api.github.com/users/jnak/followers", "following_url": "https://api.github.com/users/jnak/following{/other_user}", "gists_url": "https://api.github.com/users/jnak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnak/subscriptions", "organizations_url": "https://api.github.com/users/jnak/orgs", "repos_url": "https://api.github.com/users/jnak/repos", "events_url": "https://api.github.com/users/jnak/events{/privacy}", "received_events_url": "https://api.github.com/users/jnak/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/milestones/1", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/milestone/1", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/milestones/1/labels", "id": 4149425, "node_id": "MDk6TWlsZXN0b25lNDE0OTQyNQ==", "number": 1, "title": "2.1.1", "description": null, "creator": {"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 16, "state": "open", "created_at": "2019-03-18T12:24:04Z", "updated_at": "2019-04-01T18:34:38Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2019-03-29T22:47:18Z", "updated_at": "2019-03-30T22:45:17Z", "closed_at": "2019-03-30T22:45:17Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Due to #188 refactoring to migrate to tox, the automatic flake8 on travis is not triggered anymore\r\n\r\nWe should fix it for the 2.1.1 release", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/184", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/184/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/184/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/184", "id": 403558152, "node_id": "MDU6SXNzdWU0MDM1NTgxNTI=", "number": 184, "title": "Create a new release which includes #154", "user": {"login": "jrast", "id": 146369, "node_id": "MDQ6VXNlcjE0NjM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/146369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrast", "html_url": "https://github.com/jrast", "followers_url": "https://api.github.com/users/jrast/followers", "following_url": "https://api.github.com/users/jrast/following{/other_user}", "gists_url": "https://api.github.com/users/jrast/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrast/subscriptions", "organizations_url": "https://api.github.com/users/jrast/orgs", "repos_url": "https://api.github.com/users/jrast/repos", "events_url": "https://api.github.com/users/jrast/events{/privacy}", "received_events_url": "https://api.github.com/users/jrast/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444496299, "node_id": "MDU6TGFiZWw0NDQ0OTYyOTk=", "url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/milestones/1", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/milestone/1", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/milestones/1/labels", "id": 4149425, "node_id": "MDk6TWlsZXN0b25lNDE0OTQyNQ==", "number": 1, "title": "2.1.1", "description": null, "creator": {"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 16, "state": "open", "created_at": "2019-03-18T12:24:04Z", "updated_at": "2019-04-01T18:34:38Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2019-01-27T14:43:19Z", "updated_at": "2019-04-01T18:34:38Z", "closed_at": "2019-04-01T18:34:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "The last release was quite some time ago. Shortly after the release #154 was implemented which contains a fix for Enum creation. Would it be possible to create a new release including the changes since the last relase?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/182", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/182/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/182/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/182", "id": 401956641, "node_id": "MDU6SXNzdWU0MDE5NTY2NDE=", "number": 182, "title": "singledispatch is not necessary for python_version >= Python3.4", "user": {"login": "smfoote", "id": 452458, "node_id": "MDQ6VXNlcjQ1MjQ1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/452458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smfoote", "html_url": "https://github.com/smfoote", "followers_url": "https://api.github.com/users/smfoote/followers", "following_url": "https://api.github.com/users/smfoote/following{/other_user}", "gists_url": "https://api.github.com/users/smfoote/gists{/gist_id}", "starred_url": "https://api.github.com/users/smfoote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smfoote/subscriptions", "organizations_url": "https://api.github.com/users/smfoote/orgs", "repos_url": "https://api.github.com/users/smfoote/repos", "events_url": "https://api.github.com/users/smfoote/events{/privacy}", "received_events_url": "https://api.github.com/users/smfoote/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1277997822, "node_id": "MDU6TGFiZWwxMjc3OTk3ODIy", "url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/labels/:eyes:%20more%20info%20needed", "name": ":eyes: more info needed", "color": "d815be", "default": false, "description": ""}, {"id": 444496294, "node_id": "MDU6TGFiZWw0NDQ0OTYyOTQ=", "url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Nabellaleen", "id": 3717607, "node_id": "MDQ6VXNlcjM3MTc2MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3717607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nabellaleen", "html_url": "https://github.com/Nabellaleen", "followers_url": "https://api.github.com/users/Nabellaleen/followers", "following_url": "https://api.github.com/users/Nabellaleen/following{/other_user}", "gists_url": "https://api.github.com/users/Nabellaleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nabellaleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nabellaleen/subscriptions", "organizations_url": "https://api.github.com/users/Nabellaleen/orgs", "repos_url": "https://api.github.com/users/Nabellaleen/repos", "events_url": "https://api.github.com/users/Nabellaleen/events{/privacy}", "received_events_url": "https://api.github.com/users/Nabellaleen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-01-22T21:14:42Z", "updated_at": "2020-02-12T02:07:41Z", "closed_at": "2020-02-12T02:07:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using Python 3.7 and the attempt to install singledispatch is causing my build to break. I believe the way to resolve this issue is by using [conditional dependencies](https://hynek.me/articles/conditional-python-dependencies/) as outlined in [PEP 508](https://www.python.org/dev/peps/pep-0508/). I will follow up with a PR shortly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/181", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/181/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/181/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/181", "id": 393823774, "node_id": "MDU6SXNzdWUzOTM4MjM3NzQ=", "number": 181, "title": "2nd example broken in docs", "user": {"login": "jferiante", "id": 6187571, "node_id": "MDQ6VXNlcjYxODc1NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6187571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jferiante", "html_url": "https://github.com/jferiante", "followers_url": "https://api.github.com/users/jferiante/followers", "following_url": "https://api.github.com/users/jferiante/following{/other_user}", "gists_url": "https://api.github.com/users/jferiante/gists{/gist_id}", "starred_url": "https://api.github.com/users/jferiante/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jferiante/subscriptions", "organizations_url": "https://api.github.com/users/jferiante/orgs", "repos_url": "https://api.github.com/users/jferiante/repos", "events_url": "https://api.github.com/users/jferiante/events{/privacy}", "received_events_url": "https://api.github.com/users/jferiante/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444496294, "node_id": "MDU6TGFiZWw0NDQ0OTYyOTQ=", "url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-24T07:06:29Z", "updated_at": "2019-03-18T10:07:01Z", "closed_at": "2019-03-18T10:06:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "With this example here:\r\nTo create a GraphQL schema for it you simply have to write the following:\r\n\r\nI had to add \"import graphene\" for this to not break.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/179", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/179/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/179/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/179", "id": 386018023, "node_id": "MDU6SXNzdWUzODYwMTgwMjM=", "number": 179, "title": "ignore this", "user": {"login": "mhlr", "id": 1808573, "node_id": "MDQ6VXNlcjE4MDg1NzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1808573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhlr", "html_url": "https://github.com/mhlr", "followers_url": "https://api.github.com/users/mhlr/followers", "following_url": "https://api.github.com/users/mhlr/following{/other_user}", "gists_url": "https://api.github.com/users/mhlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhlr/subscriptions", "organizations_url": "https://api.github.com/users/mhlr/orgs", "repos_url": "https://api.github.com/users/mhlr/repos", "events_url": "https://api.github.com/users/mhlr/events{/privacy}", "received_events_url": "https://api.github.com/users/mhlr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444496298, "node_id": "MDU6TGFiZWw0NDQ0OTYyOTg=", "url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-30T03:02:59Z", "updated_at": "2019-03-19T08:31:37Z", "closed_at": "2019-03-19T08:31:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/175", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/175/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/175/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/175", "id": 382346022, "node_id": "MDU6SXNzdWUzODIzNDYwMjI=", "number": 175, "title": "Received incompatible instance", "user": {"login": "rafa-acioly", "id": 11068059, "node_id": "MDQ6VXNlcjExMDY4MDU5", "avatar_url": "https://avatars2.githubusercontent.com/u/11068059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafa-acioly", "html_url": "https://github.com/rafa-acioly", "followers_url": "https://api.github.com/users/rafa-acioly/followers", "following_url": "https://api.github.com/users/rafa-acioly/following{/other_user}", "gists_url": "https://api.github.com/users/rafa-acioly/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafa-acioly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafa-acioly/subscriptions", "organizations_url": "https://api.github.com/users/rafa-acioly/orgs", "repos_url": "https://api.github.com/users/rafa-acioly/repos", "events_url": "https://api.github.com/users/rafa-acioly/events{/privacy}", "received_events_url": "https://api.github.com/users/rafa-acioly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-19T18:46:58Z", "updated_at": "2018-11-19T19:07:21Z", "closed_at": "2018-11-19T19:07:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "i'm trying to create the resolve but the second one (with filter sku) returns this errors:\r\n\r\n> [Exception('Received incompatible instance \"[<my.app.models.PriceModel object at 0x111f3ceb8>, <my.app.models.PriceModel object at 0x111f3cf28>, ...\r\n\r\n```python\r\nclass Price(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = PriceModel\r\n\r\nclass Query(graphene.ObjectType):\r\n    prices = graphene.List(Price)\r\n    find_sku = graphene.Field(Price, sku=graphene.String())\r\n\r\n    def resolve_prices(self, info):\r\n        prices = Price.get_query(info).filter_by(sku=\"123\")\r\n        return prices.all()\r\n\r\n    def resolve_find_sku(self, info, sku):\r\n        query = Price.get_query(info)\r\n        return query.filter_by(sku=\"123\").all() // error even with \"sku\" parameter\r\n```\r\n\r\nthe `resolve_prices` works fine but the `resolve_find_sku` give me this error above.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/174", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/174/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/174/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/174", "id": 376001373, "node_id": "MDU6SXNzdWUzNzYwMDEzNzM=", "number": 174, "title": "Is the count operation for limiting queries necessary?", "user": {"login": "ahokinson", "id": 1762048, "node_id": "MDQ6VXNlcjE3NjIwNDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1762048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahokinson", "html_url": "https://github.com/ahokinson", "followers_url": "https://api.github.com/users/ahokinson/followers", "following_url": "https://api.github.com/users/ahokinson/following{/other_user}", "gists_url": "https://api.github.com/users/ahokinson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahokinson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahokinson/subscriptions", "organizations_url": "https://api.github.com/users/ahokinson/orgs", "repos_url": "https://api.github.com/users/ahokinson/repos", "events_url": "https://api.github.com/users/ahokinson/events{/privacy}", "received_events_url": "https://api.github.com/users/ahokinson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-31T14:50:53Z", "updated_at": "2018-11-01T10:50:23Z", "closed_at": "2018-11-01T10:50:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "My understanding is that pagination and limiting should be enabled by using the `SQLAlchemyConnectionField` on a `Connection` type.\r\n\r\nRunning a query such as,\r\n\r\n```\r\n{\r\n  facts(first: 1) {\r\n    edges {\r\n      node {\r\n        id\r\n        appid\r\n        pageid\r\n      }\r\n      cursor\r\n    }\r\n    pageInfo {\r\n      endCursor\r\n      hasNextPage\r\n    }\r\n  }\r\n}\r\n```\r\nyields a SQL query without `LIMIT %s, %s` in the `SELECT` statement which is suggested to be the case in https://github.com/graphql-python/graphene-sqlalchemy/issues/27. Specifically, the generated query is,\r\n```\r\nSELECT count(*) AS count_1 \r\nFROM (SELECT \"TABLE\".id AS \"TABLE_id\", \"TABLE\".appid AS \"TABLE_appid\", \"TABLE\".pageid AS \"TABLE_pageid\" \r\nFROM \"TABLE\" ORDER BY \"TABLE\".id ASC) AS anon_1\r\n```\r\n\r\nMy schema is pretty straight forward,\r\n```\r\nfrom graphene import Connection, ObjectType, Schema, relay\r\nfrom graphene_sqlalchemy import SQLAlchemyConnectionField, SQLAlchemyObjectType\r\n\r\nfrom models.generated.fact import Fact as FactModel\r\n\r\n\r\nclass Fact(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = FactModel\r\n        interfaces = (relay.Node,)\r\n\r\n\r\nclass FactConnection(Connection):\r\n    class Meta:\r\n        node = Fact\r\n\r\n\r\nclass Query(ObjectType):\r\n    node = relay.Node.Field()\r\n    facts = SQLAlchemyConnectionField(FactConnection)\r\n\r\n\r\nschema = Schema(query=Query)\r\n```\r\nand my model (while generated) is,\r\n```\r\nclass Fact(Base):\r\n    __tablename__ = \"TABLE\"\r\n    id = Column(Integer, primary_key=True)\r\n    appid = Column(Integer)\r\n    pageid = Column(String)\r\n```\r\nAm I missing a step or is this possibly a bug? I am using graphene-sqlalchemy 2.1.0.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/171", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/171/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/171/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/171", "id": 370448166, "node_id": "MDU6SXNzdWUzNzA0NDgxNjY=", "number": 171, "title": "How do I create a self-referential connection?", "user": {"login": "andrianowinatra", "id": 5397907, "node_id": "MDQ6VXNlcjUzOTc5MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5397907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrianowinatra", "html_url": "https://github.com/andrianowinatra", "followers_url": "https://api.github.com/users/andrianowinatra/followers", "following_url": "https://api.github.com/users/andrianowinatra/following{/other_user}", "gists_url": "https://api.github.com/users/andrianowinatra/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrianowinatra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrianowinatra/subscriptions", "organizations_url": "https://api.github.com/users/andrianowinatra/orgs", "repos_url": "https://api.github.com/users/andrianowinatra/repos", "events_url": "https://api.github.com/users/andrianowinatra/events{/privacy}", "received_events_url": "https://api.github.com/users/andrianowinatra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-16T05:44:58Z", "updated_at": "2018-10-16T09:49:10Z", "closed_at": "2018-10-16T09:49:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an example Graphql Schema that I have a self-referential relationship but I can't for the life of me figure out how to set it up in version `2.1.0`. \r\n\r\nexample object:\r\n\r\n```\r\nclass ObjectAConnection(graphene.relay.Connection):\r\n    class Meta:\r\n        node = ObjectA\r\n\r\nclass ObjectA(SQLAlchemyObjectType):\r\n    class Meta:\r\n         model = models.ObjectA\r\n         interfaces = (Node, )\r\n         only_fields = (\r\n              'field_a',\r\n              'field_b'\r\n          )\r\n      child_objects = SQLAlchemyConnectionField(lambda: ObjectA)   # does not work in 2.1.0\r\n      def resolve_children(self, info, **kwargs):\r\n          # resolving logic goes here\r\n          pass\r\n```\r\n\r\nThings that I have tried :\r\n- using `str` references in the `child_objects`\r\n   e.g. `child_objects = SQLAlchemyConnectionField('ObjectAConnection')`\r\n- using `lazy_import` in `child_objects`, it fails too\r\n\r\nAny help or hints would be appreciated. Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/152", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/152/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/152/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/152", "id": 346171903, "node_id": "MDU6SXNzdWUzNDYxNzE5MDM=", "number": 152, "title": "Serializing native Python enums does not work", "user": {"login": "wichert", "id": 199657, "node_id": "MDQ6VXNlcjE5OTY1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/199657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wichert", "html_url": "https://github.com/wichert", "followers_url": "https://api.github.com/users/wichert/followers", "following_url": "https://api.github.com/users/wichert/following{/other_user}", "gists_url": "https://api.github.com/users/wichert/gists{/gist_id}", "starred_url": "https://api.github.com/users/wichert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wichert/subscriptions", "organizations_url": "https://api.github.com/users/wichert/orgs", "repos_url": "https://api.github.com/users/wichert/repos", "events_url": "https://api.github.com/users/wichert/events{/privacy}", "received_events_url": "https://api.github.com/users/wichert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-31T12:47:07Z", "updated_at": "2018-10-26T17:46:31Z", "closed_at": "2018-10-26T17:46:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently using SQL enums works well, unless you use a `enum.Enum` as base for the enum. For example using this model:\r\n\r\n```python\r\nclass Hairkind(enum.Enum):\r\n    LONG = 'long'\r\n    SHORT = 'short'\r\n\r\nclass Pet(Base):\r\n    __tablename__ = 'pets'\r\n    id = Column(Integer(), primary_key=True)\r\n    hair_kind = Column(Enum(Hairkind, name='hair_kind'), nullable=False)\r\n```\r\n\r\nwill fail badly if you try to query the hairKind field:\r\n\r\n```\r\n  File \"lib/python3.7/site-packages/graphql/execution/executor.py\", line 622, in complete_leaf_value\r\n    path=path,\r\ngraphql.error.base.GraphQLError: Expected a value of type \"hair_kind\" but received: Hairkind.LONG\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/151", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/151/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/151/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/151", "id": 346128082, "node_id": "MDU6SXNzdWUzNDYxMjgwODI=", "number": 151, "title": "How to query a postgresql view", "user": {"login": "yamila-moreno", "id": 3340793, "node_id": "MDQ6VXNlcjMzNDA3OTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3340793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yamila-moreno", "html_url": "https://github.com/yamila-moreno", "followers_url": "https://api.github.com/users/yamila-moreno/followers", "following_url": "https://api.github.com/users/yamila-moreno/following{/other_user}", "gists_url": "https://api.github.com/users/yamila-moreno/gists{/gist_id}", "starred_url": "https://api.github.com/users/yamila-moreno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yamila-moreno/subscriptions", "organizations_url": "https://api.github.com/users/yamila-moreno/orgs", "repos_url": "https://api.github.com/users/yamila-moreno/repos", "events_url": "https://api.github.com/users/yamila-moreno/events{/privacy}", "received_events_url": "https://api.github.com/users/yamila-moreno/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-31T10:29:34Z", "updated_at": "2020-06-05T19:18:05Z", "closed_at": "2018-08-07T13:34:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I'm trying to query a sql view, but cannot connect the view in the schema query.\r\n\r\nI've reflected the sql view in a sqlalchemy.Table object (following the official documentation), but I cannot create a valid SQLAlchemyObjectType which uses this view.\r\n\r\nCould you give me any hint?\r\n\r\nSnippets that maybe you find useful:\r\n\r\n```\r\n# the sql view reflected \r\nCurrentPatient = Table(\"current_patients\",                               \r\n                        Column(\"id\", Integer, primary_key=True),         \r\n                        Base.metadata,                                   \r\n                        autoload=True)                                   \r\n\r\n# the sqlalchemytype that should link to the former view\r\nclass Patient(SQLAlchemyObjectType):                        \r\n    class Meta:                                             \r\n        model = CurrentPatient                                \r\n        interfaces = (relay.Node,)                          \r\n\r\n# and finally the query                                                            \r\nclass Query(ObjectType):                                                         \r\n    node = relay.Node.Field()                                                    \r\n    patients = SQLAlchemyConnectionField(Patient,                                \r\n                                         case_id=String(required=False),         \r\n                                         order=String(required=False),           \r\n                                         description=\"desc\")   \r\n```\r\n                                                                     \r\nThanks for your help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/150", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/150/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/150/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/150", "id": 344588461, "node_id": "MDU6SXNzdWUzNDQ1ODg0NjE=", "number": 150, "title": "How to create additional field in my schema that is coalescing two existing database fields?", "user": {"login": "paunovic", "id": 1249802, "node_id": "MDQ6VXNlcjEyNDk4MDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1249802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paunovic", "html_url": "https://github.com/paunovic", "followers_url": "https://api.github.com/users/paunovic/followers", "following_url": "https://api.github.com/users/paunovic/following{/other_user}", "gists_url": "https://api.github.com/users/paunovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/paunovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paunovic/subscriptions", "organizations_url": "https://api.github.com/users/paunovic/orgs", "repos_url": "https://api.github.com/users/paunovic/repos", "events_url": "https://api.github.com/users/paunovic/events{/privacy}", "received_events_url": "https://api.github.com/users/paunovic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-25T20:08:39Z", "updated_at": "2018-07-27T13:52:16Z", "closed_at": "2018-07-27T13:52:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have `Building` SQLAlchemy table which is exposed with Graphene like this:\r\n\r\n```\r\nclass Building(CountableSQLAlchemyObjectTypeRowId):\r\n    class Meta:\r\n        model = dbm.Building\r\n        interfaces = (Node, )\r\n\r\n    hers_score = BigInt()\r\n\r\n    def resolve_hers_score(self, info):\r\n        building = Building.get_query(info).filter_by(id=self.id).one()\r\n        return building.hers_with_re if building.hers_with_re else building.hers_without_re\r\n```\r\n\r\nI want to add additional `hers_score` field that is a product of `coalesce(building.hers_with_re, building.hers_without_re)` fields. I hacked up the code above that works, but is terribly inefficient - it takes few seconds to resolve the list of buildings.\r\n\r\nDue to my lack of knowledge, I'm wondering if this can this be optimized and done in a nicer fashion, and how?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/149", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/149/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/149/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/149", "id": 344214263, "node_id": "MDU6SXNzdWUzNDQyMTQyNjM=", "number": 149, "title": "Can't sort on Column property and sort enum, Column property and hybrid property column not available in sort enum. ", "user": {"login": "larebsyed", "id": 12972892, "node_id": "MDQ6VXNlcjEyOTcyODky", "avatar_url": "https://avatars3.githubusercontent.com/u/12972892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larebsyed", "html_url": "https://github.com/larebsyed", "followers_url": "https://api.github.com/users/larebsyed/followers", "following_url": "https://api.github.com/users/larebsyed/following{/other_user}", "gists_url": "https://api.github.com/users/larebsyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/larebsyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larebsyed/subscriptions", "organizations_url": "https://api.github.com/users/larebsyed/orgs", "repos_url": "https://api.github.com/users/larebsyed/repos", "events_url": "https://api.github.com/users/larebsyed/events{/privacy}", "received_events_url": "https://api.github.com/users/larebsyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-24T21:41:31Z", "updated_at": "2018-07-25T13:35:08Z", "closed_at": "2018-07-25T13:34:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to sort on column_property of sql alchemy. Unable to do so because corresponding enum entries are not generated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/145", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/145/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/145/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/145", "id": 342666784, "node_id": "MDU6SXNzdWUzNDI2NjY3ODQ=", "number": 145, "title": "When install from pip I don't get the sorting field and when I Install from git url I get latest code.", "user": {"login": "larebsyed", "id": 12972892, "node_id": "MDQ6VXNlcjEyOTcyODky", "avatar_url": "https://avatars3.githubusercontent.com/u/12972892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larebsyed", "html_url": "https://github.com/larebsyed", "followers_url": "https://api.github.com/users/larebsyed/followers", "following_url": "https://api.github.com/users/larebsyed/following{/other_user}", "gists_url": "https://api.github.com/users/larebsyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/larebsyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larebsyed/subscriptions", "organizations_url": "https://api.github.com/users/larebsyed/orgs", "repos_url": "https://api.github.com/users/larebsyed/repos", "events_url": "https://api.github.com/users/larebsyed/events{/privacy}", "received_events_url": "https://api.github.com/users/larebsyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-19T10:15:52Z", "updated_at": "2018-07-19T23:05:59Z", "closed_at": "2018-07-19T23:05:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pip repository is not in sync with the graphene sqlalchemy git repository master branch\r\n\r\nPython version 3.6.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/142", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/142/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/142/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/142", "id": 340410801, "node_id": "MDU6SXNzdWUzNDA0MTA4MDE=", "number": 142, "title": "[Flask Example] AttributeError: module 'graphene_sqlalchemy.utils' has no attribute 'sort_enum_for_model'", "user": {"login": "ericbahr", "id": 7482203, "node_id": "MDQ6VXNlcjc0ODIyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7482203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericbahr", "html_url": "https://github.com/ericbahr", "followers_url": "https://api.github.com/users/ericbahr/followers", "following_url": "https://api.github.com/users/ericbahr/following{/other_user}", "gists_url": "https://api.github.com/users/ericbahr/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericbahr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericbahr/subscriptions", "organizations_url": "https://api.github.com/users/ericbahr/orgs", "repos_url": "https://api.github.com/users/ericbahr/repos", "events_url": "https://api.github.com/users/ericbahr/events{/privacy}", "received_events_url": "https://api.github.com/users/ericbahr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-11T21:23:22Z", "updated_at": "2018-07-19T23:06:32Z", "closed_at": "2018-07-19T23:06:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to run the Flask-GraphQL example, using pipenv as my virtual environment/package manager, with python 3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/141", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/141/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/141/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/141", "id": 340101189, "node_id": "MDU6SXNzdWUzNDAxMDExODk=", "number": 141, "title": "AssertionError: SQLAlchemyConnectionField only accepts SQLAlchemyObjectType types", "user": {"login": "JunyuMu", "id": 15103817, "node_id": "MDQ6VXNlcjE1MTAzODE3", "avatar_url": "https://avatars2.githubusercontent.com/u/15103817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JunyuMu", "html_url": "https://github.com/JunyuMu", "followers_url": "https://api.github.com/users/JunyuMu/followers", "following_url": "https://api.github.com/users/JunyuMu/following{/other_user}", "gists_url": "https://api.github.com/users/JunyuMu/gists{/gist_id}", "starred_url": "https://api.github.com/users/JunyuMu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JunyuMu/subscriptions", "organizations_url": "https://api.github.com/users/JunyuMu/orgs", "repos_url": "https://api.github.com/users/JunyuMu/repos", "events_url": "https://api.github.com/users/JunyuMu/events{/privacy}", "received_events_url": "https://api.github.com/users/JunyuMu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-11T05:53:16Z", "updated_at": "2020-01-20T17:41:15Z", "closed_at": "2018-07-16T03:30:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I follow this tutorial [http://docs.graphene-python.org/projects/sqlalchemy/en/latest/tips/#sorting](http://docs.graphene-python.org/projects/sqlalchemy/en/latest/tips/#sorting).\r\nbut got error:\r\n**AssertionError: SQLAlchemyConnectionField only accepts SQLAlchemyObjectType types**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/138", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/138/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/138/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/138", "id": 337347022, "node_id": "MDU6SXNzdWUzMzczNDcwMjI=", "number": 138, "title": "module 'graphene_sqlalchemy.utils' has no attribute 'sort_enum_for_model'", "user": {"login": "1459416736", "id": 6478087, "node_id": "MDQ6VXNlcjY0NzgwODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6478087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1459416736", "html_url": "https://github.com/1459416736", "followers_url": "https://api.github.com/users/1459416736/followers", "following_url": "https://api.github.com/users/1459416736/following{/other_user}", "gists_url": "https://api.github.com/users/1459416736/gists{/gist_id}", "starred_url": "https://api.github.com/users/1459416736/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1459416736/subscriptions", "organizations_url": "https://api.github.com/users/1459416736/orgs", "repos_url": "https://api.github.com/users/1459416736/repos", "events_url": "https://api.github.com/users/1459416736/events{/privacy}", "received_events_url": "https://api.github.com/users/1459416736/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-02T02:14:51Z", "updated_at": "2018-07-02T03:13:54Z", "closed_at": "2018-07-02T03:13:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Mine is the latest edition.\r\nrun python3 examples/flask_sqlalchemy/app.py\r\n\r\nerror:module 'graphene_sqlalchemy.utils' has no attribute 'sort_enum_for_model'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/134", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/134/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/134/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/134", "id": 325979995, "node_id": "MDU6SXNzdWUzMjU5Nzk5OTU=", "number": 134, "title": "Limiting SQL query to defined fields/columns", "user": {"login": "somada141", "id": 272419, "node_id": "MDQ6VXNlcjI3MjQxOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/272419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/somada141", "html_url": "https://github.com/somada141", "followers_url": "https://api.github.com/users/somada141/followers", "following_url": "https://api.github.com/users/somada141/following{/other_user}", "gists_url": "https://api.github.com/users/somada141/gists{/gist_id}", "starred_url": "https://api.github.com/users/somada141/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/somada141/subscriptions", "organizations_url": "https://api.github.com/users/somada141/orgs", "repos_url": "https://api.github.com/users/somada141/repos", "events_url": "https://api.github.com/users/somada141/events{/privacy}", "received_events_url": "https://api.github.com/users/somada141/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-05-24T06:24:40Z", "updated_at": "2019-10-30T00:55:08Z", "closed_at": "2018-06-09T03:08:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "> A full working demo can be found under [https://github.com/somada141/demo-graphql-sqlalchemy-falcon](https://github.com/somada141/demo-graphql-sqlalchemy-falcon).\r\n\r\nConsider the following SQLAlchemy ORM class:\r\n\r\n```\r\nclass Author(Base, OrmBaseMixin):\r\n    __tablename__ = \"authors\"\r\n\r\n    author_id = sqlalchemy.Column(\r\n        sqlalchemy.types.Integer(),\r\n        primary_key=True,\r\n    )\r\n\r\n    name_first = sqlalchemy.Column(\r\n        sqlalchemy.types.Unicode(length=80),\r\n        nullable=False,\r\n    )\r\n\r\n    name_last = sqlalchemy.Column(\r\n        sqlalchemy.types.Unicode(length=80),\r\n        nullable=False,\r\n    )\r\n```\r\n\r\nSimply wrapped in an `SQLAlchemyObjectType` as such:\r\n\r\n```\r\nclass TypeAuthor(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = Author\r\n```\r\n\r\nand exposed through:\r\n\r\n```\r\n    author = graphene.Field(\r\n        TypeAuthor,\r\n        author_id=graphene.Argument(type=graphene.Int, required=False),\r\n        name_first=graphene.Argument(type=graphene.String, required=False),\r\n        name_last=graphene.Argument(type=graphene.String, required=False),\r\n    )\r\n\r\n    @staticmethod\r\n    def resolve_author(\r\n        args,\r\n        info,\r\n        author_id: Union[int, None] = None,\r\n        name_first: Union[str, None] = None,\r\n        name_last: Union[str, None] = None,\r\n    ):\r\n        query = TypeAuthor.get_query(info=info)\r\n\r\n        if author_id:\r\n            query = query.filter(Author.author_id == author_id)\r\n\r\n        if name_first:\r\n            query = query.filter(Author.name_first == name_first)\r\n\r\n        if name_last:\r\n            query = query.filter(Author.name_last == name_last)\r\n\r\n        author = query.first()\r\n\r\n        return author\r\n```\r\n\r\nA GraphQL query such as:\r\n\r\n```\r\nquery GetAuthor{\r\n  author(authorId: 1) {\r\n    nameFirst\r\n  }\r\n}\r\n```\r\n\r\nwill cause the following raw SQL to be emitted (taken from the echo logs of the SQLA engine):\r\n\r\n```\r\nSELECT authors.author_id AS authors_author_id, authors.name_first AS authors_name_first, authors.name_last AS authors_name_last\r\nFROM authors\r\nWHERE authors.author_id = ?\r\n LIMIT ? OFFSET ?\r\n2018-05-24 16:23:03,669 INFO sqlalchemy.engine.base.Engine (1, 1, 0)\r\n```\r\n\r\nAs one can see we may only want the `nameFirst` field, i.e., the `name_first` column but the entire row is fetched. Of course the GraphQL response only contains the requested fields, i.e., \r\n\r\n```\r\n{\r\n  \"data\": {\r\n    \"author\": {\r\n      \"nameFirst\": \"Robert\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nbut we have still fetched the entire row, which becomes a major issue when dealing with wide tables.\r\n\r\nIs there a way to automagically communicate which columns are needed to SQLAlchemy so as preclude this form of over-fetching?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/132", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/132/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/132/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/132", "id": 322203891, "node_id": "MDU6SXNzdWUzMjIyMDM4OTE=", "number": 132, "title": "Allow writing a resolver that returns a SQLAlchemy as a relay connection", "user": {"login": "wichert", "id": 199657, "node_id": "MDQ6VXNlcjE5OTY1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/199657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wichert", "html_url": "https://github.com/wichert", "followers_url": "https://api.github.com/users/wichert/followers", "following_url": "https://api.github.com/users/wichert/following{/other_user}", "gists_url": "https://api.github.com/users/wichert/gists{/gist_id}", "starred_url": "https://api.github.com/users/wichert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wichert/subscriptions", "organizations_url": "https://api.github.com/users/wichert/orgs", "repos_url": "https://api.github.com/users/wichert/repos", "events_url": "https://api.github.com/users/wichert/events{/privacy}", "received_events_url": "https://api.github.com/users/wichert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-11T07:57:29Z", "updated_at": "2019-05-11T06:10:04Z", "closed_at": "2018-06-09T07:45:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would like to return a relay connection for queries. Using standard graphene-sqlalchemy you can do this:\r\n\r\n```python\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n\r\n    all_users = SQLAlchemyConnectionField(User)\r\n```\r\n\r\nFor various places where you need a more custom search the simplest approach is a custom resolver:\r\n\r\n```python\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n\r\n    all_users = graphene.List(User)\r\n\r\n    def resolve_all_users(self, info, **args):\r\n        # Grab the root SQLAlchemy query\r\n        query = User.get_query(info)\r\n        return query.filter(\r\n            User.active,\r\n            # and possibly a whole bunch of other filters)\r\n        ).options(joinedload(User.emails).all()\r\n```\r\n\r\nThis works, but it returns a plain list of users without any support for pagination or other relay connection tricks handled by SQLAlchemyConnectionField. What I am looking for is a way to return a query, and have it automatically handled in a similar way as SQLAlchemyConnectionField does. Perhaps by introducing something like a `query_to_relay_connection` function you can use like this:\r\n\r\n```python\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n\r\n    all_users = graphene.List(User)\r\n\r\n    def resolve_all_users(self, info, **args):\r\n        # Grab the root SQLAlchemy query\r\n        query = User.get_query(info)\r\n        query = query.filter(\r\n            User.active,\r\n            # and possibly a whole bunch of other filters)\r\n        ).options(joinedload(User.emails)\r\n        return query_to_relay_connection(query, User)\r\n```\r\n\r\nthis can probably reuse a lot of code SQLAlchemyConnectionField currently uses internally.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/125", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/125/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/125/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/125", "id": 316018735, "node_id": "MDU6SXNzdWUzMTYwMTg3MzU=", "number": 125, "title": "Is there a way to set maximum page size?", "user": {"login": "mistGit", "id": 34454110, "node_id": "MDQ6VXNlcjM0NDU0MTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/34454110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mistGit", "html_url": "https://github.com/mistGit", "followers_url": "https://api.github.com/users/mistGit/followers", "following_url": "https://api.github.com/users/mistGit/following{/other_user}", "gists_url": "https://api.github.com/users/mistGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/mistGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mistGit/subscriptions", "organizations_url": "https://api.github.com/users/mistGit/orgs", "repos_url": "https://api.github.com/users/mistGit/repos", "events_url": "https://api.github.com/users/mistGit/events{/privacy}", "received_events_url": "https://api.github.com/users/mistGit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-19T19:56:46Z", "updated_at": "2018-04-20T08:02:25Z", "closed_at": "2018-04-20T08:01:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nI am just starting with graphene and I wonder if there is an option to control the maximum number of results that one query gets? For example, if you had an e-shop with thousands of products, you surely wouldn't want to give your users to have the ability to get all of them through your API in one go. \r\nI found a package called graphene_django_extras that sort of allows people to do this, but I wonder if there isn't already some sort of implementation of this in graphene itself. And also, it would be great if there was a way to make the limit controllable with permissions, so, for example, people in \"Developer\" permissions group had the limit lower than regular users and so on.\r\n\r\nThanks in advance for any suggestions!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/122", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/122/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/122/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/122", "id": 308978950, "node_id": "MDU6SXNzdWUzMDg5Nzg5NTA=", "number": 122, "title": "Invalid SQLAlchemy Model", "user": {"login": "rvandyk", "id": 29117661, "node_id": "MDQ6VXNlcjI5MTE3NjYx", "avatar_url": "https://avatars1.githubusercontent.com/u/29117661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rvandyk", "html_url": "https://github.com/rvandyk", "followers_url": "https://api.github.com/users/rvandyk/followers", "following_url": "https://api.github.com/users/rvandyk/following{/other_user}", "gists_url": "https://api.github.com/users/rvandyk/gists{/gist_id}", "starred_url": "https://api.github.com/users/rvandyk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rvandyk/subscriptions", "organizations_url": "https://api.github.com/users/rvandyk/orgs", "repos_url": "https://api.github.com/users/rvandyk/repos", "events_url": "https://api.github.com/users/rvandyk/events{/privacy}", "received_events_url": "https://api.github.com/users/rvandyk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-27T13:53:32Z", "updated_at": "2019-11-25T22:01:12Z", "closed_at": "2018-04-03T17:42:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys I hope someone can help me on this, i'm really stuck....\r\n\r\ndatabase automaping:\r\n```\r\nengine = create_engine(\" blablabla\", convert_unicode=True)\r\n\r\ndb_session = scoped_session(sessionmaker(autocommit=False,\r\n                                         autoflush=False,\r\n                                         bind=engine))\r\n\r\nBase = automap_base()\r\nBase.prepare(engine, reflect=True, generate_relationship=_gen_relationship, name_for_scalar_relationship = name_for_scalar_relationship, classname_for_table=camelize_classname, name_for_collection_relationship=pluralize_collection)\r\n\r\nBuyer = Base.classes.Buyer\r\n\r\nBase.query = db_session.query_property()\r\n```\r\n\r\nschema : \r\n```\r\nimport graphene\r\nimport json\r\nfrom graphene import relay\r\nfrom graphene_sqlalchemy import SQLAlchemyConnectionField, SQLAlchemyObjectType\r\n\r\nfrom database import Buyer as BuyerModel\r\n\r\nclass Buyer(SQLAlchemyObjectType):\r\n\r\n    class Meta:\r\n        model = BuyerModel\r\n        interfaces = (relay.Node, )\r\n\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n    all_buyers = SQLAlchemyConnectionField(Buyer)\r\n\r\nschema = graphene.Schema(query=Query)\r\n```\r\n\r\nProduces the error : \r\n`AssertionError: You need to pass a valid SQLAlchemy Model in Buyer.Meta, received \"<class 'sqlalchemy.ext.automap.Buyer'>\".`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/118", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/118/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/118/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/118", "id": 303559284, "node_id": "MDU6SXNzdWUzMDM1NTkyODQ=", "number": 118, "title": "Pagination example with page total and page number", "user": {"login": "exit99", "id": 7441147, "node_id": "MDQ6VXNlcjc0NDExNDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7441147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exit99", "html_url": "https://github.com/exit99", "followers_url": "https://api.github.com/users/exit99/followers", "following_url": "https://api.github.com/users/exit99/following{/other_user}", "gists_url": "https://api.github.com/users/exit99/gists{/gist_id}", "starred_url": "https://api.github.com/users/exit99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exit99/subscriptions", "organizations_url": "https://api.github.com/users/exit99/orgs", "repos_url": "https://api.github.com/users/exit99/repos", "events_url": "https://api.github.com/users/exit99/events{/privacy}", "received_events_url": "https://api.github.com/users/exit99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-08T17:12:15Z", "updated_at": "2020-01-07T13:25:03Z", "closed_at": "2018-03-08T17:19:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've successfully implemented offset/limit based pagination, see below.  But I need a page where the user can jump between the various pages, so I need to know the total items, as well as current page.  Cursor based pagination doesn't do this either, as it only knows the last and next page.  Can an example be provided for how to do this page type of pagination?  Is it possible?\r\n\r\n```\r\n def resolve_tickets(self, info, **kwargs):\r\n        offset = kwargs.pop('offset', 0)\r\n        limit = kwargs.pop('limit', 10)\r\n        return TicketType.get_query(info).filter_by(**kwargs).offset(offset).limit(limit).all()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/116", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/116/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/116/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/116", "id": 300112819, "node_id": "MDU6SXNzdWUzMDAxMTI4MTk=", "number": 116, "title": "How do I query for a specific object based on ID using graphene?", "user": {"login": "santosh9991", "id": 16803672, "node_id": "MDQ6VXNlcjE2ODAzNjcy", "avatar_url": "https://avatars1.githubusercontent.com/u/16803672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/santosh9991", "html_url": "https://github.com/santosh9991", "followers_url": "https://api.github.com/users/santosh9991/followers", "following_url": "https://api.github.com/users/santosh9991/following{/other_user}", "gists_url": "https://api.github.com/users/santosh9991/gists{/gist_id}", "starred_url": "https://api.github.com/users/santosh9991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/santosh9991/subscriptions", "organizations_url": "https://api.github.com/users/santosh9991/orgs", "repos_url": "https://api.github.com/users/santosh9991/repos", "events_url": "https://api.github.com/users/santosh9991/events{/privacy}", "received_events_url": "https://api.github.com/users/santosh9991/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-26T05:21:48Z", "updated_at": "2018-05-01T22:10:11Z", "closed_at": "2018-05-01T22:10:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to fetch all customers and orders[Ref: Fig2] I get the response, but when I try to query for an individual Order I get the error[Ref: Fig1]. I do not get any error in the console. However, I get 400 response.\r\n\r\nI get the following error when I run my code:\r\n\r\n![image](https://user-images.githubusercontent.com/16803672/36654369-faf5bdaa-1a70-11e8-8a93-58f29f61900e.png)\r\nFig1: Error message\r\nCode snippets \r\n![image](https://user-images.githubusercontent.com/16803672/36655209-12adf548-1a76-11e8-98a0-9b69891aa05d.png)\r\n\r\nFig2: schema.py\r\n![image](https://user-images.githubusercontent.com/16803672/36654404-433f95f4-1a71-11e8-91ee-c23870e381ff.png)\r\nFig3: Models.py\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/115", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/115/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/115/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/115", "id": 299867980, "node_id": "MDU6SXNzdWUyOTk4Njc5ODA=", "number": 115, "title": "TypeError: issubclass() arg 1 must be a class", "user": {"login": "santosh9991", "id": 16803672, "node_id": "MDQ6VXNlcjE2ODAzNjcy", "avatar_url": "https://avatars1.githubusercontent.com/u/16803672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/santosh9991", "html_url": "https://github.com/santosh9991", "followers_url": "https://api.github.com/users/santosh9991/followers", "following_url": "https://api.github.com/users/santosh9991/following{/other_user}", "gists_url": "https://api.github.com/users/santosh9991/gists{/gist_id}", "starred_url": "https://api.github.com/users/santosh9991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/santosh9991/subscriptions", "organizations_url": "https://api.github.com/users/santosh9991/orgs", "repos_url": "https://api.github.com/users/santosh9991/repos", "events_url": "https://api.github.com/users/santosh9991/events{/privacy}", "received_events_url": "https://api.github.com/users/santosh9991/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-23T22:17:20Z", "updated_at": "2018-02-25T17:35:05Z", "closed_at": "2018-02-25T17:35:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I included schema in my application it throws the following error. Can any one help me debug this error. I am new to graphql. Any help is appreciated.\r\n\r\n![image](https://user-images.githubusercontent.com/16803672/36619314-4615be40-18a3-11e8-98a4-201f76a8c52e.png)\r\nFig1: Error message\r\n\r\n![image](https://user-images.githubusercontent.com/16803672/36619526-0d48c28c-18a4-11e8-803f-d90eef2637de.png)\r\nFig2: schema.py\r\n![image](https://user-images.githubusercontent.com/16803672/36619542-20ae4b44-18a4-11e8-844a-5a31bcdea065.png)\r\nFig3: Models.py\r\n![image](https://user-images.githubusercontent.com/16803672/36619579-359c9290-18a4-11e8-8d1d-dd75e2217236.png)\r\nFig4: app.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/111", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/111/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/111/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/111", "id": 295758995, "node_id": "MDU6SXNzdWUyOTU3NTg5OTU=", "number": 111, "title": "How to generate GraphiQL documentation?", "user": {"login": "alexisrolland", "id": 13064696, "node_id": "MDQ6VXNlcjEzMDY0Njk2", "avatar_url": "https://avatars0.githubusercontent.com/u/13064696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexisrolland", "html_url": "https://github.com/alexisrolland", "followers_url": "https://api.github.com/users/alexisrolland/followers", "following_url": "https://api.github.com/users/alexisrolland/following{/other_user}", "gists_url": "https://api.github.com/users/alexisrolland/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexisrolland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexisrolland/subscriptions", "organizations_url": "https://api.github.com/users/alexisrolland/orgs", "repos_url": "https://api.github.com/users/alexisrolland/repos", "events_url": "https://api.github.com/users/alexisrolland/events{/privacy}", "received_events_url": "https://api.github.com/users/alexisrolland/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-09T05:27:15Z", "updated_at": "2018-05-22T13:53:57Z", "closed_at": "2018-02-15T09:55:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI'm trying to figure out how to provide descriptions to for the attributes of my SQLAlchemy class used to define my Graphene `ObjectType`:\r\n\r\n```python\r\nfrom graphene_sqlalchemy import SQLAlchemyObjectType\r\nfrom database.model_people import ModelPeople\r\nimport graphene\r\n\r\n\r\nclass People(SQLAlchemyObjectType):\r\n    \"\"\"People node.\"\"\"\r\n\r\n    class Meta:\r\n        model = ModelPeople\r\n        interfaces = (graphene.relay.Node,)\r\n```\r\n\r\nMy \"People node.\" docstring get displayed properly in GraphiQL but I'm not able to get a description for the attributes of my node which come from the ModelPeople class defined by SQLAlchemy.\r\n\r\n![image](https://user-images.githubusercontent.com/13064696/36012967-895b1ebe-0d9c-11e8-885a-4049bddddf5a.png)\r\n\r\nAny idea?\r\nThank you\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/108", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/108/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/108/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/108", "id": 290342469, "node_id": "MDU6SXNzdWUyOTAzNDI0Njk=", "number": 108, "title": "Get global Id of record when executing a mutation", "user": {"login": "alexisrolland", "id": 13064696, "node_id": "MDQ6VXNlcjEzMDY0Njk2", "avatar_url": "https://avatars0.githubusercontent.com/u/13064696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexisrolland", "html_url": "https://github.com/alexisrolland", "followers_url": "https://api.github.com/users/alexisrolland/followers", "following_url": "https://api.github.com/users/alexisrolland/following{/other_user}", "gists_url": "https://api.github.com/users/alexisrolland/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexisrolland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexisrolland/subscriptions", "organizations_url": "https://api.github.com/users/alexisrolland/orgs", "repos_url": "https://api.github.com/users/alexisrolland/repos", "events_url": "https://api.github.com/users/alexisrolland/events{/privacy}", "received_events_url": "https://api.github.com/users/alexisrolland/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-22T03:41:48Z", "updated_at": "2018-02-02T06:10:30Z", "closed_at": "2018-02-02T06:10:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have found zero documentation nor help on this topic so I'm posting it here with the hope to get some support. It's not a bug per say but rather a question. Apologies in advance if you find it inappropriate.\r\n\r\nIn short, I have implemented a mutation to create a new record and I would like to get the global Id of this record in the response from the API:\r\n\r\n```python\r\nfrom graphql_relay.node.node import to_global_id\r\nimport api_utils\r\nimport batch_schema\r\nimport graphene\r\n\r\n\r\nclass CreateBatchOwnerInput(graphene.InputObjectType):\r\n    \"\"\"Input to create batch owner.\"\"\"\r\n    name = graphene.String(required=True)\r\n\r\n\r\nclass CreateBatchOwner(graphene.Mutation):\r\n    \"\"\"Create batch owner.\"\"\"\r\n    class Arguments:\r\n        input = CreateBatchOwnerInput(required=True)\r\n\r\n    # Class attributes\r\n    batch_owner = graphene.Field(batch_schema.BatchOwner)\r\n\r\n    @staticmethod\r\n    def mutate(root, info, input=None):\r\n        \"\"\"Method to create batch owner.\"\"\"\r\n        record = {'name': input.name}\r\n        batch_owner = api_utils.create('BatchOwner', record)  # This returns a dictionary {'id': int, 'name': string}\r\n        batch_owner = batch_schema.BatchOwner(**batch_owner)\r\n        batch_owner.id = to_global_id('BatchOwner', batch_owner.id)  # Convert database Id to global Id\r\n        return CreateBatchOwner(batch_owner=batch_owner)\r\n```\r\n\r\nThe following mutation works fine\r\n```\r\nmutation Mutation {\r\n    createBatchOwner(input: {name:\"Jake\"}) {\r\n        batchOwner {\r\n          name\r\n        }\r\n    }\r\n}\r\n\r\nresponse:\r\n\r\n{\r\n  \"data\": {\r\n    \"createBatchOwner\": {\r\n      \"batchOwner\": {\r\n        \"name\": \"Jake\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBut when I add the \"id\" field in the payload I get the following error message:\r\n```\r\nmutation Mutation {\r\n    createBatchOwner(input: {name:\"Antoine\"}) {\r\n        batchOwner {\r\n          id\r\n          name\r\n        }\r\n    }\r\n}\r\n\r\nresponse:\r\n\r\n{\r\n  \"data\": {\r\n    \"createBatchOwner\": {\r\n      \"batchOwner\": null\r\n    }\r\n  },\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"'BatchOwner' object has no attribute '__mapper__'\",\r\n      \"locations\": [\r\n        {\r\n          \"column\": 11,\r\n          \"line\": 4\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nHere is the log generated by the Flask application:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 311, in resolve_or_error\r\n    return executor.execute(resolve_fn, source, info, **args)\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphql/execution/executors/sync.py\", line 7, in execute\r\n    return fn(*args, **kwargs)\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphene/relay/node.py\", line 38, in id_resolver\r\n    type_id = parent_resolver(root, info, **args)\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphene_sqlalchemy/types.py\", line 160, in resolve_id\r\n    keys = self.__mapper__.primary_key_from_instance(self)\r\nAttributeError: 'BatchOwner' object has no attribute '__mapper__'\r\nTraceback (most recent call last):\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 330, in complete_value_catching_error\r\n    exe_context, return_type, field_asts, info, result)\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 405, in complete_value\r\n    return complete_object_value(exe_context, return_type, field_asts, info, result)\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 504, in complete_object_value\r\n    return execute_fields(exe_context, return_type, result, subfield_asts)\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 148, in execute_fields\r\n    source_value, field_asts)\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 247, in resolve_field\r\n    result\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 324, in complete_value_catching_error\r\n    return complete_value(exe_context, return_type, field_asts, info, result)\r\n  File \"/home/alexis/data-quality-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 383, in complete_value\r\n    raise GraphQLLocatedError(field_asts, original_error=result)\r\ngraphql.error.located_error.GraphQLLocatedError: 'BatchOwner' object has no attribute '__mapper__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/107", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/107/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/107/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/107", "id": 286506098, "node_id": "MDU6SXNzdWUyODY1MDYwOTg=", "number": 107, "title": "Will the type graphene.ID of Mutation's input argument be resolved automatically?", "user": {"login": "XiaoMouR", "id": 3815690, "node_id": "MDQ6VXNlcjM4MTU2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3815690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XiaoMouR", "html_url": "https://github.com/XiaoMouR", "followers_url": "https://api.github.com/users/XiaoMouR/followers", "following_url": "https://api.github.com/users/XiaoMouR/following{/other_user}", "gists_url": "https://api.github.com/users/XiaoMouR/gists{/gist_id}", "starred_url": "https://api.github.com/users/XiaoMouR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XiaoMouR/subscriptions", "organizations_url": "https://api.github.com/users/XiaoMouR/orgs", "repos_url": "https://api.github.com/users/XiaoMouR/repos", "events_url": "https://api.github.com/users/XiaoMouR/events{/privacy}", "received_events_url": "https://api.github.com/users/XiaoMouR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-06T18:01:38Z", "updated_at": "2018-01-22T08:48:26Z", "closed_at": "2018-01-22T08:48:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I test the code as follows\r\n```\r\nclass Tags(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = models.Tags  # a SQLAlchemy model that contains two columns (id,name)\r\n        interfaces = (graphene.relay.Node, )\r\n\r\nclass Test(graphene.Mutation):\r\n    class Arguments:\r\n        id = graphene.ID(required=True)\r\n    ok = graphene.Boolean()\r\n\r\n    def mutate(self, info, id):\r\n        print id\r\n        return Test(ok=True)\r\n\r\nclass Query(graphene.ObjectType):\r\n    tags = SQLAlchemyConnectionField(Tags)\r\n\r\nclass Mutation(graphene.ObjectType):\r\n   test = Test.Field()\r\n\r\nschema = graphene.Schema(query=Query, mutation=Mutation)\r\n```\r\nI get a tag with result {\"id\":\"VGFnczox\",\"name\":\"test\"}, and excute something as follows via GraphiQL console\r\n```\r\nmutation{\r\n  test(id:\"VGFnczox\"){\r\n    ok\r\n  }\r\n}\r\n```\r\nI find that the `print id` will ouput '**VGFnczox**' instead of a integer which is the id of tag in the database.So far, my testing has been limited to the GraphiQL console, so am I missing something?\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/106", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/106/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/106/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/106", "id": 283863653, "node_id": "MDU6SXNzdWUyODM4NjM2NTM=", "number": 106, "title": "How to use graphene-sqlalchemy with Dataloader?", "user": {"login": "balthild", "id": 2662758, "node_id": "MDQ6VXNlcjI2NjI3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2662758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/balthild", "html_url": "https://github.com/balthild", "followers_url": "https://api.github.com/users/balthild/followers", "following_url": "https://api.github.com/users/balthild/following{/other_user}", "gists_url": "https://api.github.com/users/balthild/gists{/gist_id}", "starred_url": "https://api.github.com/users/balthild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/balthild/subscriptions", "organizations_url": "https://api.github.com/users/balthild/orgs", "repos_url": "https://api.github.com/users/balthild/repos", "events_url": "https://api.github.com/users/balthild/events{/privacy}", "received_events_url": "https://api.github.com/users/balthild/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-21T12:13:23Z", "updated_at": "2018-05-19T16:55:30Z", "closed_at": "2018-05-19T16:55:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Should I define custom resolvers calling `xxx_loader.load(...)` in the class which extends `SQLAlchemyObjectType`? If so, what data I should return in DataLoader's `batch_load_fn()`? SQLAlchemy model objects or `graphene.ObjectType` objects?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/91", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/91/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/91/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/91", "id": 275658634, "node_id": "MDU6SXNzdWUyNzU2NTg2MzQ=", "number": 91, "title": "AttributeError in Registry class when asserting", "user": {"login": "geertjanvdk", "id": 6458628, "node_id": "MDQ6VXNlcjY0NTg2Mjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6458628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geertjanvdk", "html_url": "https://github.com/geertjanvdk", "followers_url": "https://api.github.com/users/geertjanvdk/followers", "following_url": "https://api.github.com/users/geertjanvdk/following{/other_user}", "gists_url": "https://api.github.com/users/geertjanvdk/gists{/gist_id}", "starred_url": "https://api.github.com/users/geertjanvdk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geertjanvdk/subscriptions", "organizations_url": "https://api.github.com/users/geertjanvdk/orgs", "repos_url": "https://api.github.com/users/geertjanvdk/repos", "events_url": "https://api.github.com/users/geertjanvdk/events{/privacy}", "received_events_url": "https://api.github.com/users/geertjanvdk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-21T10:26:43Z", "updated_at": "2017-11-22T06:32:54Z", "closed_at": "2017-11-22T06:32:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had a situation where I wanted to recreate the SQLAlchemyObjectType, creating a  new type. This does not work out of the box with Registry (which is OK), and an assert is thrown.\r\n\r\nHowever, the assert itself has an problem:\r\n\r\n```\r\n..../api/graphql/types.py:74: in __init_subclass_with_meta__\r\n    registry.register(cls)\r\n../../../venv/lib/python3.6/site-packages/graphene_sqlalchemy/registry.py:12: in register\r\n    'received \"{}\"'\r\nE   AttributeError: 'tuple' object has no attribute 'format'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/90", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/90/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/90/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/90", "id": 274906031, "node_id": "MDU6SXNzdWUyNzQ5MDYwMzE=", "number": 90, "title": "Multliple Database Recursive Lookup", "user": {"login": "ibigpapa", "id": 694054, "node_id": "MDQ6VXNlcjY5NDA1NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/694054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibigpapa", "html_url": "https://github.com/ibigpapa", "followers_url": "https://api.github.com/users/ibigpapa/followers", "following_url": "https://api.github.com/users/ibigpapa/following{/other_user}", "gists_url": "https://api.github.com/users/ibigpapa/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibigpapa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibigpapa/subscriptions", "organizations_url": "https://api.github.com/users/ibigpapa/orgs", "repos_url": "https://api.github.com/users/ibigpapa/repos", "events_url": "https://api.github.com/users/ibigpapa/events{/privacy}", "received_events_url": "https://api.github.com/users/ibigpapa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-17T15:43:19Z", "updated_at": "2017-11-17T17:38:14Z", "closed_at": "2017-11-17T17:38:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have 2 databases that cannot be combined.\r\n\r\nThere's a field that needs to be resolved using the other database.  The other database is also an SQLAlchemyObjectType.  \r\n\r\nHere's an example that's a bit contrived that i'd like to accomplish but not sure how to automatically provide a definition for the db1 resolver that would use the automatic schema from DB1Table.\r\n\r\nWhat i'd like to see is the schema for graphql that looks like what is below the code.\r\n### code\r\n```python\r\n\r\ndb1_engine = create_engine('sqlite:///database1.sqlite3')\r\ndb2_engine = create_engine('sqlite:///database2.sqlite3')\r\n\r\ndb1_session = scoped_session(sessionmaker(autocommit=False, autoflush=False, bind=db1_engine))\r\ndb2_session = scoped_session(sessionmaker(autocommit=False, autoflush=False, bind=db2_engine))\r\n\r\nclass Base(Object):\r\n    pass\r\n\r\nBase = declarative_base(cls=Base)\r\n\r\nclass DB1Base(Base):\r\n    __abstract__ = True\r\n    metadata = MetaData(bind=db1_engine)\r\n\r\nDB1Base.query = db1_session.query_property()\r\n\r\nclass DB2Base(Base):\r\n    __abstract__ = True\r\n    metadata = MetaData(bind=db2_engine)\r\n\r\nDB2Base.query = db2_session.query_property()\r\n\r\nclass ModelDB1Table(DB1Base):\r\n    __tablename__ = 'db1table'\r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(String(50), nullable=False)\r\n\r\nclass ModelDB2Table(DB2Base):\r\n    __tablename__ = 'db2table'\r\n    id = Column(Integer, primary_key=True)\r\n    data = Column(Text(2000), nullable=False)\r\n    created_by_id = Column(Integer, nullable=False)\r\n\r\nclass SchemaDB1Table(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = ModelDB1Table\r\n        interfaces = (relay.Node, )\r\n\r\nclass SchemaDB2Table(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = ModelDB2Table\r\n        interfaces = (relay.Node, )\r\n    \r\n    def resolve_db1(self, info):\r\n        return db1_session.query(ModelDB1Table).get(self.created_by_id)\r\n\r\n\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n    all_db1_table = SQLAlchemyConnectionField(SchemaDB1Table)\r\n    all_db2_table = SQLAlchemyConnectionField(SchemaDB2Table)\r\n\r\nschema = graphene.Schema(query=Query)\r\n```\r\n\r\n### desired schema output\r\n```js\r\n{\r\n  SchemaDB1Table {\r\n    id: ID!\r\n    name: String!\r\n  }\r\n  SchemaDB2Table {\r\n    id: ID!\r\n    data: String!    \r\n    created_by_id: Int!\r\n    db1 {\r\n      id: ID!\r\n      name: String!      \r\n    }\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/89", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/89/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/89/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/89", "id": 274658679, "node_id": "MDU6SXNzdWUyNzQ2NTg2Nzk=", "number": 89, "title": "Make a Relay ConnectionField optimized to work with Query", "user": {"login": "Fedalto", "id": 67917, "node_id": "MDQ6VXNlcjY3OTE3", "avatar_url": "https://avatars3.githubusercontent.com/u/67917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fedalto", "html_url": "https://github.com/Fedalto", "followers_url": "https://api.github.com/users/Fedalto/followers", "following_url": "https://api.github.com/users/Fedalto/following{/other_user}", "gists_url": "https://api.github.com/users/Fedalto/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fedalto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fedalto/subscriptions", "organizations_url": "https://api.github.com/users/Fedalto/orgs", "repos_url": "https://api.github.com/users/Fedalto/repos", "events_url": "https://api.github.com/users/Fedalto/events{/privacy}", "received_events_url": "https://api.github.com/users/Fedalto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-16T20:48:32Z", "updated_at": "2018-01-05T18:46:42Z", "closed_at": "2018-01-05T18:46:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Graphene has the `graphene.relay.ConnectionField`, which slices a list/iterable to build the edges inside the Relay connection.\r\nBut it doesn't play well with DB queries. [It calls `len()`](https://github.com/graphql-python/graphql-relay-py/blob/master/graphql_relay/connection/arrayconnection.py#L13) with `Query` doesn't have.\r\n\r\ngraphene-sqlalchemy should have a implementation of the ConnectionField that is aware of the sqlalchemy's Query and use it to slice directly in the DB.\r\n\r\nFor now, I'm using this workaround:\r\n\r\n```py\r\nclass RelayConnectionField(graphene.relay.ConnectionField):\r\n    @classmethod\r\n    def resolve_connection(cls, connection_type, args, resolved):\r\n        if isinstance(resolved, Query):\r\n            len_ = resolved.count()\r\n            connection = connection_from_list_slice(\r\n                resolved,\r\n                args,\r\n                connection_type=connection_type,\r\n                edge_type=connection_type.Edge,\r\n                pageinfo_type=PageInfo,\r\n                slice_start=0,\r\n                list_length=len_,\r\n                list_slice_length=len_,\r\n            )\r\n            connection.iterable = resolved\r\n            return connection\r\n        else:\r\n            return super().resolve_connection(connection_type, args, resolved)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/85", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/85/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/85/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/85", "id": 271239128, "node_id": "MDU6SXNzdWUyNzEyMzkxMjg=", "number": 85, "title": "Upgrading to graphene 2.0", "user": {"login": "kavink", "id": 1228810, "node_id": "MDQ6VXNlcjEyMjg4MTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1228810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kavink", "html_url": "https://github.com/kavink", "followers_url": "https://api.github.com/users/kavink/followers", "following_url": "https://api.github.com/users/kavink/following{/other_user}", "gists_url": "https://api.github.com/users/kavink/gists{/gist_id}", "starred_url": "https://api.github.com/users/kavink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kavink/subscriptions", "organizations_url": "https://api.github.com/users/kavink/orgs", "repos_url": "https://api.github.com/users/kavink/repos", "events_url": "https://api.github.com/users/kavink/events{/privacy}", "received_events_url": "https://api.github.com/users/kavink/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-05T01:00:42Z", "updated_at": "2017-11-15T02:38:15Z", "closed_at": "2017-11-15T02:38:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Based on example from @aminghadersohi on another issue I adapted that solution for my use case. I am using something like this and its working great for now, But am unable to migrate this to Graphene 2.0.  After migrating to 2.0 based on upgrade guide, either the relay args and extra args both dont work.\r\n\r\nI liked this approach because I can query on any configured field from model, based on how I configure it.\r\n\r\nIf there is a better approach on how I can query any fields please let me know, I can just migrate to that .\r\n\r\nWould it be possible to point me how do I migrate this?\r\n\r\n```\r\nBase = sqlalchemy.ext.declarative.declarative_base()\r\n\r\nclass ClientRoleStore(Base):\r\n    __tablename__ = \"clientrole\"\r\n    uuid = Column(CHAR(36), primary_key=True, nullable=False, default=lambda: str(uuid1()))\r\n\r\nclass ClientRole(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = ClientRoleStore\r\n        interfaces = (relay.Node,)\r\n\r\nall_types = [\r\n    ClientRole,\r\n    # there are other fields but I have kept it simple here\r\n]\r\n\r\n\r\nquery_args = {\r\n    \"clientrole\": [(\"name\", graphene.String()), (\"add\", graphene.String())],\r\n\r\n}\r\n\r\nquery_attrs = {'node': relay.Node.Field()}\r\n\r\n\r\ndef resolve(cls, self, args, context, info):\r\n    RELAY_ARGS = ['first', 'last', 'before', 'after']\r\n\r\n    query = cls.get_query(context)\r\n    if args:\r\n        for key, value in args.items():\r\n            if key not in RELAY_ARGS:\r\n                query = query.filter(getattr(model, key) == args[key])\r\n    return query.all()\r\n\r\n\r\nfor type_cls in all_types:\r\n    model = type_cls.__dict__['_meta'].model\r\n    name = model.__tablename__\r\n\r\n    extra_args = {key[0]: key[1] for key in query_args[name]}\r\n\r\n    query_attrs[name + 's'] = SQLAlchemyConnectionField(type_cls, **extra_args)\r\n    query_attrs[name] = relay.Node.Field(type_cls)\r\n    query_attrs['resolve_' + name + 's'] = partial(resolve, type_cls)\r\n\r\nQuery = type(\"Query\", (graphene.ObjectType,), query_attrs)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/83", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/83/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/83/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/83", "id": 267688347, "node_id": "MDU6SXNzdWUyNjc2ODgzNDc=", "number": 83, "title": "passing Arguments to the SQLAlchemyConnectionField in 2.0 doesn't work", "user": {"login": "alexschad", "id": 1736880, "node_id": "MDQ6VXNlcjE3MzY4ODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1736880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexschad", "html_url": "https://github.com/alexschad", "followers_url": "https://api.github.com/users/alexschad/followers", "following_url": "https://api.github.com/users/alexschad/following{/other_user}", "gists_url": "https://api.github.com/users/alexschad/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexschad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexschad/subscriptions", "organizations_url": "https://api.github.com/users/alexschad/orgs", "repos_url": "https://api.github.com/users/alexschad/repos", "events_url": "https://api.github.com/users/alexschad/events{/privacy}", "received_events_url": "https://api.github.com/users/alexschad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-23T14:24:13Z", "updated_at": "2017-10-23T15:26:30Z", "closed_at": "2017-10-23T15:26:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to upgrade my Application to 2.0 and i have a connection field i'm passing arguments to\r\nbut that doesn't seem to work with the new version to anymore. I followed the upgrade instructions\r\nbut the argument doesn't get passed to my resolve method.\r\n\r\nHere is the code that worked in the old version:\r\n\r\n    user_content = SQLAlchemyConnectionField(Content, tagURLName=graphene.String())\r\n\r\n    def resolve_user_content(self, args, context, info):\r\n        sess = context['session']\r\n        tagURLName = args.get('tagURLName')\r\n\r\nFollowing the upgrade instructions i changed the code to:\r\n\r\n    user_content = SQLAlchemyConnectionField(Content, tagURLName=graphene.String())\r\n\r\n    def resolve_user_content(self, info, tagURLName):\r\n        context = info.context\r\n        sess = context['session']\r\n\r\nBut the argument doesn't get passed through...\r\n\r\nAn error occurred while resolving field Root.userContent\r\nTraceback (most recent call last):\r\n  File \"/var/local/lr-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 196, in resolve_or_error\r\n    return executor.execute(resolve_fn, source, info, **args)\r\n  File \"/var/local/lr-venv/lib/python3.5/site-packages/graphql/execution/executors/sync.py\", line 7, in execute\r\n    return fn(*args, **kwargs)\r\n  File \"/var/local/lr-venv/lib/python3.5/site-packages/graphene_sqlalchemy/fields.py\", line 34, in connection_resolver\r\n    iterable = resolver(root, info, **args)\r\nTypeError: resolve_user_content() missing 1 required positional argument: 'tagURLName'\r\nTraceback (most recent call last):\r\n  File \"/var/local/lr-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 215, in complete_value_catching_error\r\n    exe_context, return_type, field_asts, info, result)\r\n  File \"/var/local/lr-venv/lib/python3.5/site-packages/graphql/execution/executor.py\", line 268, in complete_value\r\n    raise GraphQLLocatedError(field_asts, original_error=result)\r\ngraphql.error.located_error.GraphQLLocatedError: resolve_user_content() missing 1 required positional argument: 'tagURLName'\r\n\r\nIt works fine for all the other Fields. Is there something special about the SQLAlchemyConnectionField i need to take into account?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/80", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/80/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/80/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/80", "id": 263763246, "node_id": "MDU6SXNzdWUyNjM3NjMyNDY=", "number": 80, "title": "Database ID", "user": {"login": "navinesh", "id": 11845025, "node_id": "MDQ6VXNlcjExODQ1MDI1", "avatar_url": "https://avatars0.githubusercontent.com/u/11845025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/navinesh", "html_url": "https://github.com/navinesh", "followers_url": "https://api.github.com/users/navinesh/followers", "following_url": "https://api.github.com/users/navinesh/following{/other_user}", "gists_url": "https://api.github.com/users/navinesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/navinesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/navinesh/subscriptions", "organizations_url": "https://api.github.com/users/navinesh/orgs", "repos_url": "https://api.github.com/users/navinesh/repos", "events_url": "https://api.github.com/users/navinesh/events{/privacy}", "received_events_url": "https://api.github.com/users/navinesh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-10-08T23:59:42Z", "updated_at": "2017-11-14T18:29:15Z", "closed_at": "2017-10-09T04:34:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "1. Is there a way to get/map database id so that you can get this value in query?\r\n\r\n2. Can we map only selected fields from the database table instead of all by default?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/75", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/75/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/75/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/75", "id": 253987778, "node_id": "MDU6SXNzdWUyNTM5ODc3Nzg=", "number": 75, "title": "Handle connections in 2.0", "user": {"login": "HeyHugo", "id": 1010517, "node_id": "MDQ6VXNlcjEwMTA1MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1010517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeyHugo", "html_url": "https://github.com/HeyHugo", "followers_url": "https://api.github.com/users/HeyHugo/followers", "following_url": "https://api.github.com/users/HeyHugo/following{/other_user}", "gists_url": "https://api.github.com/users/HeyHugo/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeyHugo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeyHugo/subscriptions", "organizations_url": "https://api.github.com/users/HeyHugo/orgs", "repos_url": "https://api.github.com/users/HeyHugo/repos", "events_url": "https://api.github.com/users/HeyHugo/events{/privacy}", "received_events_url": "https://api.github.com/users/HeyHugo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-30T12:51:03Z", "updated_at": "2017-09-09T23:03:20Z", "closed_at": "2017-09-09T23:03:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I upgrading to 2.0 of graphene and related packages.\r\n\r\nWithout any changes I get\r\n`Exception: ConnectionField's now need a explicit ConnectionType for Nodes.`\r\n\r\nSo I added the connection explicitly like the upgrade guide say `DepartureConnection`\r\n```python\r\nclass DepartureSchema(SQLAlchemyObjectType):\r\n    \"\"\"\r\n    A departure\r\n    \"\"\"\r\n    class Meta:\r\n        model = Departure\r\n        interfaces = (graphene.Node, relay.Node)\r\n\r\n\r\nclass DepartureConnection(graphene.Connection):\r\n    class Meta:\r\n        node = DepartureSchema\r\n\r\n\r\nclass Query(graphene.ObjectType):\r\n    departures = relay.ConnectionField(DepartureConnection)\r\n```\r\n\r\nBut now I get \r\n```\r\ngraphql.error.located_error.GraphQLLocatedError: Resolved value from the connection field have to be iterable or instance of DepartureConnection. Received \"None\"\r\n```\r\n\r\nSo I'm probably missing something. I think the documentation/example with relay needs to be adjusted for 2.0. If I just knew what is needed in 2.0 I could do a PR\r\n\r\nThanks for these great libraries!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/73", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/73/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/73/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/73", "id": 253775168, "node_id": "MDU6SXNzdWUyNTM3NzUxNjg=", "number": 73, "title": "Import error after updating graphene-sqlalchemy (and graphene) to 2.0.dev", "user": {"login": "mojochao", "id": 108465, "node_id": "MDQ6VXNlcjEwODQ2NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/108465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mojochao", "html_url": "https://github.com/mojochao", "followers_url": "https://api.github.com/users/mojochao/followers", "following_url": "https://api.github.com/users/mojochao/following{/other_user}", "gists_url": "https://api.github.com/users/mojochao/gists{/gist_id}", "starred_url": "https://api.github.com/users/mojochao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mojochao/subscriptions", "organizations_url": "https://api.github.com/users/mojochao/orgs", "repos_url": "https://api.github.com/users/mojochao/repos", "events_url": "https://api.github.com/users/mojochao/events{/privacy}", "received_events_url": "https://api.github.com/users/mojochao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-29T19:23:02Z", "updated_at": "2017-08-30T18:30:56Z", "closed_at": "2017-08-30T18:30:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Simply importing SQLAlchemyObjectType causes a failure:\r\n\r\n```\r\nIn [1]: from graphene_sqlalchemy import SQLAlchemyObjectType\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\n<ipython-input-1-a0d050cc2bfb> in <module>()\r\n----> 1 from graphene_sqlalchemy import SQLAlchemyObjectType\r\n\r\n/Users/mojochao/.virtualenvs/graphene-research/lib/python2.7/site-packages/graphene_sqlalchemy/__init__.py in <module>()\r\n----> 1 from .types import (\r\n      2     SQLAlchemyObjectType,\r\n      3 )\r\n      4 from .fields import (\r\n      5     SQLAlchemyConnectionField\r\n\r\n/Users/allengooch/.virtualenvs/graphene-research/lib/python2.7/site-packages/graphene_sqlalchemy/types.py in <module>()\r\n     10 from graphene.types.utils import yank_fields_from_attrs\r\n     11\r\n---> 12 from .converter import (convert_sqlalchemy_column,\r\n     13                         convert_sqlalchemy_composite,\r\n     14                         convert_sqlalchemy_relationship,\r\n\r\n/Users/mojochao/.virtualenvs/graphene-research/lib/python2.7/site-packages/graphene_sqlalchemy/converter.py in <module>()\r\n    102 @convert_sqlalchemy_type.register(postgresql.ENUM)\r\n    103 @convert_sqlalchemy_type.register(postgresql.UUID)\r\n--> 104 @convert_sqlalchemy_type.register(TSVectorType)\r\n    105 def convert_column_to_string(type, column, registry=None):\r\n    106     return String(description=get_column_doc(column),\r\n\r\nNameError: name 'TSVectorType' is not defined\r\n```\r\nMy environment is Python 2.7.13 with the following packages installed into a clean virtualenv:\r\n\r\n```\r\nappnope (0.1.0)\r\nbackports.shutil-get-terminal-size (1.0.0)\r\nclick (6.7)\r\ndecorator (4.1.2)\r\nenum34 (1.1.6)\r\nFlask (0.12.2)\r\nFlask-GraphQL (1.4.1)\r\nFlask-SQLAlchemy (2.2)\r\ngraphene (2.0.dev20170802065539)\r\ngraphene-sqlalchemy (2.0.dev2017073101)\r\ngraphql-core (2.0.dev20170801051721)\r\ngraphql-relay (0.4.5)\r\nipdb (0.10.3)\r\nipython (5.4.1)\r\nipython-genutils (0.2.0)\r\niso8601 (0.1.12)\r\nitsdangerous (0.24)\r\nJinja2 (2.9.6)\r\nMarkupSafe (1.0)\r\npathlib2 (2.3.0)\r\npexpect (4.2.1)\r\npickleshare (0.7.4)\r\npip (9.0.1)\r\npromise (2.1.dev0)\r\nprompt-toolkit (1.0.15)\r\nptyprocess (0.5.2)\r\nPygments (2.2.0)\r\nscandir (1.5)\r\nsetuptools (36.3.0)\r\nsimplegeneric (0.8.1)\r\nsingledispatch (3.4.0.3)\r\nsix (1.10.0)\r\nSQLAlchemy (1.1.13)\r\ntraitlets (4.3.2)\r\ntyping (3.6.2)\r\nwcwidth (0.1.7)\r\nWerkzeug (0.12.2)\r\nwheel (0.29.0)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/72", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/72/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/72/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/72", "id": 253389458, "node_id": "MDU6SXNzdWUyNTMzODk0NTg=", "number": 72, "title": "Problem with simple create mutation.", "user": {"login": "mojochao", "id": 108465, "node_id": "MDQ6VXNlcjEwODQ2NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/108465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mojochao", "html_url": "https://github.com/mojochao", "followers_url": "https://api.github.com/users/mojochao/followers", "following_url": "https://api.github.com/users/mojochao/following{/other_user}", "gists_url": "https://api.github.com/users/mojochao/gists{/gist_id}", "starred_url": "https://api.github.com/users/mojochao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mojochao/subscriptions", "organizations_url": "https://api.github.com/users/mojochao/orgs", "repos_url": "https://api.github.com/users/mojochao/repos", "events_url": "https://api.github.com/users/mojochao/events{/privacy}", "received_events_url": "https://api.github.com/users/mojochao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-28T16:52:37Z", "updated_at": "2017-08-29T19:08:24Z", "closed_at": "2017-08-29T19:08:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to add a simple create mutation for a SQLAlchemy model and am not having much success.  My code looks like:\r\n\r\n```\r\nimport graphene\r\nfrom graphene.relay import Node\r\nfrom graphene_sqlalchemy import SQLAlchemyConnectionField, SQLAlchemyObjectType\r\n\r\nfrom sm import models  # module containing my SQLAlchemy model classes\r\n\r\ndef _make_object_type(class_name, model):\r\n    \"\"\"Factory function dynamically creating SQLAlchemyObjectType subclasses.\"\"\"\r\n    def _make_inner_meta_type():\r\n        return type('Meta', (), {'model': model, 'interfaces': (Node, )})\r\n    return type(class_name, (SQLAlchemyObjectType, ), {'Meta': _make_inner_meta_type()})\r\n\r\nCompany = _make_object_type('Company', models.Company)\r\n# ... lots of other SQLAlchemyObjectType types elided\r\n\r\nclass Query(graphene.ObjectType):\r\n    node = Node.Field()\r\n    company = Node.Field(Company)\r\n    all_companies = SQLAlchemyConnectionField(Company)\r\n# ... lots of other fields elided\r\n\r\nclass CompanyInput(graphene.InputObjectType):\r\n    name = graphene.String(required=True)\r\n    description = graphene.Int(required=False)\r\n\r\nclass CreateCompany(graphene.Mutation):\r\n    class Arguments:\r\n        company_data = CompanyInput(required=True)\r\n\r\n    # output fields of mutation\r\n    # ok = graphene.Boolean()\r\n    company = graphene.Field(lambda: Company)\r\n\r\n    @staticmethod\r\n    def mutate(root, company_data=None):\r\n        company = Company(\r\n            name=company_data.name,\r\n            description=company_data.description\r\n        )\r\n        return CreateCompany(company=company)\r\n\r\nclass Mutation(graphene.ObjectType):\r\n    create_company = CreateCompany.Field()\r\n\r\nschema = graphene.Schema(query=Query, mutation=Mutation)\r\n```\r\n\r\nWhen I issue the following mutation:\r\n\r\n```\r\nmutation myFirstMutation {\r\n    createCompany(companyData: {name:\"Test\", description: \"A test company\"}) {\r\n        company {\r\n            name,\r\n            description\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn graphiql I don't see any input type in the docs, and a red squiggle under the companyData argument to createCompany.  When I execute the query I get an error message of \"Unknown argument 'companyData' on field 'createCompany' of type 'Mutation'.\"\r\n\r\nI based my attempt on the docs at http://docs.graphene-python.org/en/latest/types/mutations/, and everything seems correct.  Does any one have any idea what I'm doing wrong?\r\n\r\nMany thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/68", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/68/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/68/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/68", "id": 251295752, "node_id": "MDU6SXNzdWUyNTEyOTU3NTI=", "number": 68, "title": "[BUG] No conversion for PostgreSQL INET Type", "user": {"login": "scotmatson", "id": 4695187, "node_id": "MDQ6VXNlcjQ2OTUxODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4695187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scotmatson", "html_url": "https://github.com/scotmatson", "followers_url": "https://api.github.com/users/scotmatson/followers", "following_url": "https://api.github.com/users/scotmatson/following{/other_user}", "gists_url": "https://api.github.com/users/scotmatson/gists{/gist_id}", "starred_url": "https://api.github.com/users/scotmatson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scotmatson/subscriptions", "organizations_url": "https://api.github.com/users/scotmatson/orgs", "repos_url": "https://api.github.com/users/scotmatson/repos", "events_url": "https://api.github.com/users/scotmatson/events{/privacy}", "received_events_url": "https://api.github.com/users/scotmatson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-18T16:26:39Z", "updated_at": "2017-08-19T05:11:57Z", "closed_at": "2017-08-19T05:11:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Still working this one out, but I believe the error I am receiving is due to a lack of conversion mechanisms in support of the PostgreSQL INET type (see below).\r\n\r\n`from sqlalchemy.dialects.postgresql import INET`\r\n`... = Column(INET, ...`)\r\n\r\nChanging Column type to String does stop the error from occurring.. so sadly yes this is the issue. Fortunately it doesn't appear I need to modify by database, just the model. It would be great to get better type support.\r\n\r\nI imagine we just need a means to translate INET into a string and view it as a scalar. Running type() against this field in the terminal returns the INET value as a string, so the mechanism already appears to be in place, it just needs to be supported in graphene_sqla\r\n\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"run.wsgi\", line 1, in <module>\r\n    from app import create_app\r\n  File \"/srv/www/edge/server/app/__init__.py\", line 5, in <module>\r\n    from app.schema import schema\r\n  File \"/srv/www/edge/server/app/schema.py\", line 7, in <module>\r\n    from app.types import Viewer\r\n  File \"/srv/www/edge/server/app/types/__init__.py\", line 10, in <module>\r\n    from .watch import Watch\r\n  File \"/srv/www/edge/server/app/types/watch.py\", line 11, in <module>\r\n    class Watch(SQLAlchemyObjectType):\r\n  File \"/srv/www/edge/server/venv/lib/python3.5/site-packages/graphene_sqlalchemy/types.py\", line 104, in __new__\r\n    construct_fields(options),\r\n  File \"/srv/www/edge/server/venv/lib/python3.5/site-packages/graphene_sqlalchemy/types.py\", line 36, in construct_fields\r\n    converted_column = convert_sqlalchemy_column(column, options.registry)\r\n  File \"/srv/www/edge/server/venv/lib/python3.5/site-packages/graphene_sqlalchemy/converter.py\", line 82, in convert_sqlalchemy_column\r\n    return convert_sqlalchemy_type(getattr(column, 'type', None), column, registry)\r\n  File \"/srv/www/edge/server/venv/lib/python3.5/site-packages/singledispatch.py\", line 210, in wrapper\r\n    return dispatch(args[0].__class__)(*args, **kw)\r\n  File \"/srv/www/edge/server/venv/lib/python3.5/site-packages/graphene_sqlalchemy/converter.py\", line 88, in convert_sqlalchemy_type\r\n    \"Don't know how to convert the SQLAlchemy field %s (%s)\" % (column, column.__class__))\r\nException: Don't know how to convert the SQLAlchemy field watches.id_orig_h (<class 'sqlalchemy.sql.schema.Column'>)\r\n```\r\n\r\nI guess while were at it, I imagine I will have the same error when using CIDR types as well from\r\n`from sqlalchemy.dialects.postgresql import CIDR`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/67", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/67/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/67/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/67", "id": 249439602, "node_id": "MDU6SXNzdWUyNDk0Mzk2MDI=", "number": 67, "title": "License", "user": {"login": "Fedalto", "id": 67917, "node_id": "MDQ6VXNlcjY3OTE3", "avatar_url": "https://avatars3.githubusercontent.com/u/67917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fedalto", "html_url": "https://github.com/Fedalto", "followers_url": "https://api.github.com/users/Fedalto/followers", "following_url": "https://api.github.com/users/Fedalto/following{/other_user}", "gists_url": "https://api.github.com/users/Fedalto/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fedalto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fedalto/subscriptions", "organizations_url": "https://api.github.com/users/Fedalto/orgs", "repos_url": "https://api.github.com/users/Fedalto/repos", "events_url": "https://api.github.com/users/Fedalto/events{/privacy}", "received_events_url": "https://api.github.com/users/Fedalto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-10T18:42:40Z", "updated_at": "2017-11-17T07:39:33Z", "closed_at": "2017-11-17T07:39:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. Can you specify the license for this project?\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/66", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/66/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/66/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/66", "id": 248812858, "node_id": "MDU6SXNzdWUyNDg4MTI4NTg=", "number": 66, "title": "Filter on the backend", "user": {"login": "tylfin", "id": 4380912, "node_id": "MDQ6VXNlcjQzODA5MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4380912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylfin", "html_url": "https://github.com/tylfin", "followers_url": "https://api.github.com/users/tylfin/followers", "following_url": "https://api.github.com/users/tylfin/following{/other_user}", "gists_url": "https://api.github.com/users/tylfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylfin/subscriptions", "organizations_url": "https://api.github.com/users/tylfin/orgs", "repos_url": "https://api.github.com/users/tylfin/repos", "events_url": "https://api.github.com/users/tylfin/events{/privacy}", "received_events_url": "https://api.github.com/users/tylfin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-08T18:57:07Z", "updated_at": "2017-08-28T15:44:22Z", "closed_at": "2017-08-28T15:44:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given I have: an authenticated user, a model type that extends `SQLAlchemyObjectType`, and a `SQLAlchemyConnectionField` defined in my `Query`, how can I restrict the returned objects to only rows that have a relationship with this user?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/62", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/62/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/62/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/62", "id": 246846523, "node_id": "MDU6SXNzdWUyNDY4NDY1MjM=", "number": 62, "title": "Hide certain fields in a model", "user": {"login": "Perlkonig", "id": 4873640, "node_id": "MDQ6VXNlcjQ4NzM2NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4873640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Perlkonig", "html_url": "https://github.com/Perlkonig", "followers_url": "https://api.github.com/users/Perlkonig/followers", "following_url": "https://api.github.com/users/Perlkonig/following{/other_user}", "gists_url": "https://api.github.com/users/Perlkonig/gists{/gist_id}", "starred_url": "https://api.github.com/users/Perlkonig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Perlkonig/subscriptions", "organizations_url": "https://api.github.com/users/Perlkonig/orgs", "repos_url": "https://api.github.com/users/Perlkonig/repos", "events_url": "https://api.github.com/users/Perlkonig/events{/privacy}", "received_events_url": "https://api.github.com/users/Perlkonig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-07-31T18:42:14Z", "updated_at": "2020-08-19T22:22:53Z", "closed_at": "2017-08-02T13:49:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a simple way to flag certain fields in a model as \"private\" or otherwise hidden? There are some fields that, authenticated or not, I never want passed via GraphQL query.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/53", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/53/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/53/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/53", "id": 235272433, "node_id": "MDU6SXNzdWUyMzUyNzI0MzM=", "number": 53, "title": "Support for Custom Column Types?", "user": {"login": "mekhami", "id": 8022111, "node_id": "MDQ6VXNlcjgwMjIxMTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/8022111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mekhami", "html_url": "https://github.com/mekhami", "followers_url": "https://api.github.com/users/mekhami/followers", "following_url": "https://api.github.com/users/mekhami/following{/other_user}", "gists_url": "https://api.github.com/users/mekhami/gists{/gist_id}", "starred_url": "https://api.github.com/users/mekhami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mekhami/subscriptions", "organizations_url": "https://api.github.com/users/mekhami/orgs", "repos_url": "https://api.github.com/users/mekhami/repos", "events_url": "https://api.github.com/users/mekhami/events{/privacy}", "received_events_url": "https://api.github.com/users/mekhami/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-12T15:31:14Z", "updated_at": "2017-08-13T20:06:02Z", "closed_at": "2017-06-12T16:11:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't see anything in the documentation and a brief look through the source code didn't reveal anything immediately. I have a custom GUID type (as documented in the sqlalchemy docs here: http://docs.sqlalchemy.org/en/latest/core/custom_types.html#backend-agnostic-guid-type) and when I try to use the SQLAlchemyObjectType with the model metaclass, it doesn't know how to convert type GUID. Is there a way to handle these custom column types? Do I need to just subclass SQLAlchemyObjectType and make it understand what that is?\r\n\r\nThanks for any help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/52", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/52/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/52/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/52", "id": 234167866, "node_id": "MDU6SXNzdWUyMzQxNjc4NjY=", "number": 52, "title": "Does `graphene-sqlalchemy` generate connections based on relations?", "user": {"login": "filleokus", "id": 1541529, "node_id": "MDQ6VXNlcjE1NDE1Mjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1541529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/filleokus", "html_url": "https://github.com/filleokus", "followers_url": "https://api.github.com/users/filleokus/followers", "following_url": "https://api.github.com/users/filleokus/following{/other_user}", "gists_url": "https://api.github.com/users/filleokus/gists{/gist_id}", "starred_url": "https://api.github.com/users/filleokus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/filleokus/subscriptions", "organizations_url": "https://api.github.com/users/filleokus/orgs", "repos_url": "https://api.github.com/users/filleokus/repos", "events_url": "https://api.github.com/users/filleokus/events{/privacy}", "received_events_url": "https://api.github.com/users/filleokus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-07T10:46:26Z", "updated_at": "2017-06-08T07:26:25Z", "closed_at": "2017-06-08T07:25:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have these two models:\r\n\r\n```python\r\nclass Organization(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    created = db.Column(db.TIMESTAMP, default=db.func.now())\r\n    modified = db.Column(db.TIMESTAMP, default=db.func.now(), onupdate=db.func.now())\r\n    \r\n    # Attributes\r\n    name = db.Column(db.String(200), nullable=False)\r\n    logo = db.Column(db.TEXT, default='')\r\n    video = db.Column(db.TEXT, default='')\r\n    about = db.Column(db.TEXT, default='')\r\n\r\nclass Project(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    created = db.Column(db.TIMESTAMP, default=db.func.now())\r\n    modified = db.Column(db.TIMESTAMP, default=db.func.now(), onupdate=db.func.now())\r\n\r\n    # Attributes\r\n    name = db.Column(db.String(200), nullable=False)\r\n    start_date = db.Column(db.TIMESTAMP, nullable=True)\r\n    end_date = db.Column(db.TIMESTAMP, nullable=True)\r\n\r\n    # Relations\r\n    organization_id = db.Column(db.Integer, db.ForeignKey('organization.id'), nullable=False)\r\n    organization = db.relationship('Organization', foreign_keys=[organization_id],\r\n                                   cascade=\"all, delete-orphan\", single_parent=True,)\r\n```\r\nAnd this schema:\r\n```python\r\nimport Organization as OrganizationModel\r\nimport Project as ProjectModel\r\n\r\nclass Project(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = ProjectModel\r\n        interfaces = (relay. Node, )\r\n\r\nclass Organization(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = OrganizationModel\r\n        interfaces = (relay.Node, )\r\n\r\n\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n\r\n    all_organizations = SQLAlchemyConnectionField(Organization)\r\n    all_projects = SQLAlchemyConnectionField(Project)\r\n\r\n\r\n    @staticmethod\r\n    def resolve_organization(self, args, context, info):\r\n        query = Organization.get_query(context)\r\n        return query.filter_by(**args)\r\n\r\n    @staticmethod\r\n    def resolve_project(self, args, context, info):\r\n        query = Project.get_query(context)\r\n        return query.filter_by(**args)\r\n\r\n\r\nschema = graphene.Schema(query=Query, types=[Organization, Project])\r\n```\r\n\r\nI would then expect to be able to write a query to access `projects` from `allOrganizations`, but I seem unable to do get it to work. If I do the connection manually like this (with the same model):\r\n\r\n```python\r\nimport Organization as OrganizationModel\r\nimport Project as ProjectModel\r\nclass Project(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = ProjectModel\r\n        interfaces = (relay. Node, )\r\n\r\n\r\nclass OrganizationProjectConnection(graphene.Connection):\r\n    class Meta:\r\n        node = Project\r\n\r\n\r\nclass Organization(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = OrganizationModel\r\n        interfaces = (relay.Node, )\r\n\r\n    projects = SQLAlchemyConnectionField(OrganizationProjectConnection)\r\n\r\n\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n\r\n    all_organizations = SQLAlchemyConnectionField(Organization)\r\n    all_projects = SQLAlchemyConnectionField(Project)\r\n\r\n\r\n    @staticmethod\r\n    def resolve_organization(self, args, context, info):\r\n        query = Organization.get_query(context)\r\n        return query.filter_by(**args)\r\n\r\n    @staticmethod\r\n    def resolve_project(self, args, context, info):\r\n        query = Project.get_query(context)\r\n        return query.filter_by(**args)\r\n\r\n\r\nschema = graphene.Schema(query=Query, types=[Organization, Project])\r\n```\r\nit works as I expect. Is this a feature not yet implemented, or do I have to encourage the framework to make the connection somehow?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/43", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/43/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/43/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/43", "id": 225507012, "node_id": "MDU6SXNzdWUyMjU1MDcwMTI=", "number": 43, "title": "Global ids from objects with composite primary keys are not correctly extracted", "user": {"login": "eoma", "id": 404627, "node_id": "MDQ6VXNlcjQwNDYyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/404627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eoma", "html_url": "https://github.com/eoma", "followers_url": "https://api.github.com/users/eoma/followers", "following_url": "https://api.github.com/users/eoma/following{/other_user}", "gists_url": "https://api.github.com/users/eoma/gists{/gist_id}", "starred_url": "https://api.github.com/users/eoma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eoma/subscriptions", "organizations_url": "https://api.github.com/users/eoma/orgs", "repos_url": "https://api.github.com/users/eoma/repos", "events_url": "https://api.github.com/users/eoma/events{/privacy}", "received_events_url": "https://api.github.com/users/eoma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-01T19:35:42Z", "updated_at": "2017-07-27T02:48:55Z", "closed_at": "2017-07-27T02:48:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Due to the way graphene-sqlalchemy constructs global ids, it is not possible to get unique global ids from objects with composite primary keys, typically association objects.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/41", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/41/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/41/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/41", "id": 224123085, "node_id": "MDU6SXNzdWUyMjQxMjMwODU=", "number": 41, "title": "Batching selects from same model", "user": {"login": "eoma", "id": 404627, "node_id": "MDQ6VXNlcjQwNDYyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/404627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eoma", "html_url": "https://github.com/eoma", "followers_url": "https://api.github.com/users/eoma/followers", "following_url": "https://api.github.com/users/eoma/following{/other_user}", "gists_url": "https://api.github.com/users/eoma/gists{/gist_id}", "starred_url": "https://api.github.com/users/eoma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eoma/subscriptions", "organizations_url": "https://api.github.com/users/eoma/orgs", "repos_url": "https://api.github.com/users/eoma/repos", "events_url": "https://api.github.com/users/eoma/events{/privacy}", "received_events_url": "https://api.github.com/users/eoma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-25T12:37:46Z", "updated_at": "2017-04-25T12:45:48Z", "closed_at": "2017-04-25T12:45:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Disregard the issue, discovered DataLoader.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/40", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/40/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/40/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/40", "id": 223088051, "node_id": "MDU6SXNzdWUyMjMwODgwNTE=", "number": 40, "title": "Order by option is missing", "user": {"login": "honify", "id": 964520, "node_id": "MDQ6VXNlcjk2NDUyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/964520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honify", "html_url": "https://github.com/honify", "followers_url": "https://api.github.com/users/honify/followers", "following_url": "https://api.github.com/users/honify/following{/other_user}", "gists_url": "https://api.github.com/users/honify/gists{/gist_id}", "starred_url": "https://api.github.com/users/honify/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honify/subscriptions", "organizations_url": "https://api.github.com/users/honify/orgs", "repos_url": "https://api.github.com/users/honify/repos", "events_url": "https://api.github.com/users/honify/events{/privacy}", "received_events_url": "https://api.github.com/users/honify/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-04-20T14:33:05Z", "updated_at": "2018-07-21T14:05:20Z", "closed_at": "2018-06-22T00:09:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great job,\r\nOrder by option is missing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/39", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/39/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/39/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/39", "id": 218837972, "node_id": "MDU6SXNzdWUyMTg4Mzc5NzI=", "number": 39, "title": "Fragments doesn't seem to work", "user": {"login": "richmondwang", "id": 3724032, "node_id": "MDQ6VXNlcjM3MjQwMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3724032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richmondwang", "html_url": "https://github.com/richmondwang", "followers_url": "https://api.github.com/users/richmondwang/followers", "following_url": "https://api.github.com/users/richmondwang/following{/other_user}", "gists_url": "https://api.github.com/users/richmondwang/gists{/gist_id}", "starred_url": "https://api.github.com/users/richmondwang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richmondwang/subscriptions", "organizations_url": "https://api.github.com/users/richmondwang/orgs", "repos_url": "https://api.github.com/users/richmondwang/repos", "events_url": "https://api.github.com/users/richmondwang/events{/privacy}", "received_events_url": "https://api.github.com/users/richmondwang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-03T06:07:49Z", "updated_at": "2017-04-04T02:13:17Z", "closed_at": "2017-04-04T02:10:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Graphene does not seem to resolve the other object Type using fragments in the query.\r\n\r\nHere is my schema:\r\n\r\n```python\r\n\r\nclass User(db.Model):\r\n    __tablename__ = 'tbl_users'\r\n\r\n    id = Column(String(40), primary_key=True)\r\n    username = Column(String(64), index=True, unique=True)\r\n    email = Column(String(64), index=True, unique=True)\r\n\r\n    claims = None\r\n\r\n\r\nclass User(SQLAlchemyObjectType):\r\n\r\n    class Meta:\r\n        interfaces = (relay.Node,)\r\n        model = UserModel\r\n\r\n\r\nclass UserMeta(SQLAlchemyObjectType):\r\n\r\n    class Meta:\r\n        interfaces = (relay.Node,)\r\n        model = UserModel\r\n\r\n    claims = json.JSONString()\r\n\r\n\r\nclass Queries(graphene.ObjectType):\r\n    me = graphene.Field(UserInterface)\r\n\r\n    def resolve_me(_, args, context, info):\r\n        query = User.get_query(context)\r\n        user = query.get(1)\r\n        user.claims = {'hello': 'world'}\r\n        return user\r\n\r\n\r\nschema = graphene.Schema(\r\n    query=Queries,\r\n    types=[UserMeta, User]\r\n)\r\n```\r\n\r\nAnd here is my query:\r\n\r\n```gql\r\n{\r\n  me {\r\n    ...userData\r\n    ...userMeta\r\n  }\r\n}\r\n\r\nfragment userMeta on UserMeta {\r\n  claims\r\n}\r\n\r\nfragment userData on User {\r\n  username\r\n  email\r\n}\r\n```\r\n\r\nIt will return:\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"me\": {\r\n      \"createdAt\": \"2017-03-31T05:29:32+00:00\",\r\n      \"email\": \"email@nowhere.space\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHowever, if I move `claims` to the `User` object type, it works as expected. \r\nAlso, even if I only use the `UserMeta` fragment in the query, it still doesn't resolve it.\r\n\r\nUpdate:\r\nIm sorry, my way was wrong.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/38", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/38/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/38/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/38", "id": 218416038, "node_id": "MDU6SXNzdWUyMTg0MTYwMzg=", "number": 38, "title": "One method for creating a Union type. Is there a better way?", "user": {"login": "dfee", "id": 262602, "node_id": "MDQ6VXNlcjI2MjYwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/262602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfee", "html_url": "https://github.com/dfee", "followers_url": "https://api.github.com/users/dfee/followers", "following_url": "https://api.github.com/users/dfee/following{/other_user}", "gists_url": "https://api.github.com/users/dfee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfee/subscriptions", "organizations_url": "https://api.github.com/users/dfee/orgs", "repos_url": "https://api.github.com/users/dfee/repos", "events_url": "https://api.github.com/users/dfee/events{/privacy}", "received_events_url": "https://api.github.com/users/dfee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-31T07:07:55Z", "updated_at": "2018-04-17T06:47:44Z", "closed_at": "2017-04-20T21:43:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "So after some extreme hacking, I figured out how to create a Union type that I'll share below. I'd like to get some input from the authors if this is a fragile solution, and whether there is a better approach.\r\n\r\nHere's what I've done (take special note of this: `StreamEventOT._meta.model = StreamEvent`):\r\n```\r\nimport graphene\r\nfrom graphene import relay\r\nfrom graphene_sqlalchemy import (\r\n    SQLAlchemyConnectionField,\r\n    SQLAlchemyObjectType,\r\n)\r\nimport spark.graphql._prepare\r\n\r\ndef connection_for_type(_type):\r\n    class Connection(graphene.Connection):\r\n        total_count = graphene.Int()\r\n\r\n        class Meta:\r\n            name = '{}Connection'.format(_type._meta.name)\r\n            node = _type\r\n\r\n        def resolve_total_count(self, args, context, info):\r\n            return context['session'].query(_type._meta.model).count()\r\n\r\n    return Connection\r\n\r\nclass UserOT(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = User\r\n        interfaces = (relay.Node,)\r\nUserOT.Connection = connection_for_type(UserOT)\r\n\r\n\r\nclass AlertOT(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = Alert\r\n        interfaces = (relay.Node,)\r\nAlertOT.Connection = connection_for_type(AlertOT)\r\n\r\n\r\nclass MessageOT(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = Message\r\n        interfaces = (relay.Node,)\r\nMessageOT.Connection = connection_for_type(MessageOT)\r\n\r\n\r\nclass TaskOT(SQLAlchemyObjectType):\r\n    class Meta:\r\n        model = Task\r\n        interfaces = (relay.Node,)\r\nTaskOT.Connection = connection_for_type(TaskOT)\r\n\r\n\r\nclass StreamEventOT(graphene.Union):\r\n    class Meta:\r\n        types = (AlertOT, MessageOT, TaskOT)\r\n\r\nStreamEventOT.Connection = connection_for_type(StreamEventOT)\r\nStreamEventOT._meta.model = StreamEvent\r\n\r\nclass Query(graphene.ObjectType):\r\n    all_users = SQLAlchemyConnectionField(UserOT)\r\n    all_stream_events = SQLAlchemyConnectionField(StreamEventOT.Connection)\r\n    node = relay.Node.Field()\r\n\r\n\r\nschema = graphene.Schema(\r\n    query=Query,\r\n    types=[\r\n        UserOT,\r\n        StreamEventOT,\r\n        AlertOT,\r\n        MessageOT,\r\n        TaskOT,\r\n    ]\r\n)\r\n```\r\n\r\n[Keywords for anyone searching for polymorphism, or joined table inheritance]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/34", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/34/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/34/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/34", "id": 207673518, "node_id": "MDU6SXNzdWUyMDc2NzM1MTg=", "number": 34, "title": "Schema creation code broken in Flask-SQLAlchemy website tutorial", "user": {"login": "edbaskerville", "id": 2105312, "node_id": "MDQ6VXNlcjIxMDUzMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2105312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edbaskerville", "html_url": "https://github.com/edbaskerville", "followers_url": "https://api.github.com/users/edbaskerville/followers", "following_url": "https://api.github.com/users/edbaskerville/following{/other_user}", "gists_url": "https://api.github.com/users/edbaskerville/gists{/gist_id}", "starred_url": "https://api.github.com/users/edbaskerville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edbaskerville/subscriptions", "organizations_url": "https://api.github.com/users/edbaskerville/orgs", "repos_url": "https://api.github.com/users/edbaskerville/repos", "events_url": "https://api.github.com/users/edbaskerville/events{/privacy}", "received_events_url": "https://api.github.com/users/edbaskerville/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-15T00:06:21Z", "updated_at": "2020-02-12T02:13:57Z", "closed_at": "2020-02-12T02:13:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Summary\r\n\r\nThe schema creation code in the website tutorial does not work. Changing it to match `examples/flask_sqlalchemy` fixes the problem.\r\n\r\n# Details\r\n\r\nIn the [tutorial on the website](http://docs.graphene-python.org/projects/sqlalchemy/en/latest/tutorial/), the code to create the schema looks like this:\r\n\r\n```python\r\nschema = graphene.Schema()\r\n\r\nclass Department(SQLAlchemyObjectType):\r\n    # ...\r\n\r\nclass Employee(SQLAlchemyObjectType):\r\n    # ...\r\n\r\nclass Query(graphene.ObjectType):\r\n    node = relay.Node.Field()\r\n    all_employees = SQLAlchemyConnectionField(Employee)\r\n\r\nschema.query = Query\r\n```\r\n\r\nWhen the example query is submitted, this results in an error:\r\n\r\n```json\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"'NoneType' object has no attribute 'fields'\"\r\n    }\r\n  ],\r\n  \"data\": null\r\n}\r\n```\r\n\r\nThe code in `examples/flask_sqlalchemy` is different and works; it defines the schema like this:\r\n\r\n```python\r\nschema = graphene.Schema(query=Query, types=[Department, Employee, Role])\r\n```\r\n\r\nand if you change the website tutorial code to match, the problem goes away:\r\n\r\n```python\r\nschema = graphene.Schema(query=Query, types=[Department, Employee])\r\n```\r\n\r\nThis also works:\r\n\r\n```python\r\nschema = graphene.Schema(query=Query)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/24", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/24/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/24/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/24", "id": 192198323, "node_id": "MDU6SXNzdWUxOTIxOTgzMjM=", "number": 24, "title": "How to solve 'utf8' can't decode,because of string:h\u00f6gskolan", "user": {"login": "chyroc", "id": 15604894, "node_id": "MDQ6VXNlcjE1NjA0ODk0", "avatar_url": "https://avatars3.githubusercontent.com/u/15604894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chyroc", "html_url": "https://github.com/chyroc", "followers_url": "https://api.github.com/users/chyroc/followers", "following_url": "https://api.github.com/users/chyroc/following{/other_user}", "gists_url": "https://api.github.com/users/chyroc/gists{/gist_id}", "starred_url": "https://api.github.com/users/chyroc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chyroc/subscriptions", "organizations_url": "https://api.github.com/users/chyroc/orgs", "repos_url": "https://api.github.com/users/chyroc/repos", "events_url": "https://api.github.com/users/chyroc/events{/privacy}", "received_events_url": "https://api.github.com/users/chyroc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-29T06:25:41Z", "updated_at": "2016-11-29T06:52:00Z", "closed_at": "2016-11-29T06:52:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "if there is a string: h\u00f6gskolan in database,then there well be a error:\r\n  {\r\n    \"errors\": [\r\n      {\r\n        \"message\": \"'utf8' codec can't decode byte 0xf6 in position 34: invalid start byte\",\r\n        \"locations\": [\r\n          {\r\n            \"column\": 3,\r\n            \"line\": 2\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"data\": {\r\n      \"allDegreess\": null\r\n    }\r\n  }", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/19", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/19/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/19/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/19", "id": 188920349, "node_id": "MDU6SXNzdWUxODg5MjAzNDk=", "number": 19, "title": "Non-ORM Usage Examples", "user": {"login": "Julian", "id": 329822, "node_id": "MDQ6VXNlcjMyOTgyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/329822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Julian", "html_url": "https://github.com/Julian", "followers_url": "https://api.github.com/users/Julian/followers", "following_url": "https://api.github.com/users/Julian/following{/other_user}", "gists_url": "https://api.github.com/users/Julian/gists{/gist_id}", "starred_url": "https://api.github.com/users/Julian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Julian/subscriptions", "organizations_url": "https://api.github.com/users/Julian/orgs", "repos_url": "https://api.github.com/users/Julian/repos", "events_url": "https://api.github.com/users/Julian/events{/privacy}", "received_events_url": "https://api.github.com/users/Julian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-12T16:27:46Z", "updated_at": "2020-02-12T02:57:50Z", "closed_at": "2020-02-12T02:57:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be useful to see a usage example that did not use the SQLAlchemy ORM layer.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/18", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/18/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/18/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/18", "id": 187549083, "node_id": "MDU6SXNzdWUxODc1NDkwODM=", "number": 18, "title": "Can I perform recursive queries?", "user": {"login": "davidsims9t", "id": 6386314, "node_id": "MDQ6VXNlcjYzODYzMTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6386314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidsims9t", "html_url": "https://github.com/davidsims9t", "followers_url": "https://api.github.com/users/davidsims9t/followers", "following_url": "https://api.github.com/users/davidsims9t/following{/other_user}", "gists_url": "https://api.github.com/users/davidsims9t/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidsims9t/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidsims9t/subscriptions", "organizations_url": "https://api.github.com/users/davidsims9t/orgs", "repos_url": "https://api.github.com/users/davidsims9t/repos", "events_url": "https://api.github.com/users/davidsims9t/events{/privacy}", "received_events_url": "https://api.github.com/users/davidsims9t/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-11-06T09:41:21Z", "updated_at": "2016-11-13T02:35:03Z", "closed_at": "2016-11-12T20:29:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a database with a hierarchical recursive structure. This is what my schema looks like:\r\n\r\n```\r\n@schema.register\r\nclass HierarchyChild(SQLAlchemyNode):\r\n    class Meta:\r\n        model = HierarchyModel\r\n\r\n@schema.register\r\nclass Hierarchy(SQLAlchemyNode):\r\n    class Meta:\r\n        model = HierarchyModel\r\n\r\n    children = SQLAlchemyConnectionField(HierarchyChild)\r\n```\r\n\r\nCurrently this returns nested results, however, it doesn't pass the parent context to the child node. Thanks in advanced!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/15", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/15/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/15/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/15", "id": 183480437, "node_id": "MDU6SXNzdWUxODM0ODA0Mzc=", "number": 15, "title": "Support for hybrid_property?", "user": {"login": "gsvitak", "id": 212073, "node_id": "MDQ6VXNlcjIxMjA3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/212073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsvitak", "html_url": "https://github.com/gsvitak", "followers_url": "https://api.github.com/users/gsvitak/followers", "following_url": "https://api.github.com/users/gsvitak/following{/other_user}", "gists_url": "https://api.github.com/users/gsvitak/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsvitak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsvitak/subscriptions", "organizations_url": "https://api.github.com/users/gsvitak/orgs", "repos_url": "https://api.github.com/users/gsvitak/repos", "events_url": "https://api.github.com/users/gsvitak/events{/privacy}", "received_events_url": "https://api.github.com/users/gsvitak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-10-17T17:41:09Z", "updated_at": "2018-02-21T00:32:33Z", "closed_at": "2017-07-27T03:15:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nI am trying to use hybrid_property as a property on a GraphQL response. However, when I execute the GraphQL request, I am receiving an error stating the property cannot be found. \n\nAre SQlAlchemy hybrid_property attributes currently supported?\n\nThanks,\nG\n\n```\n@hybrid_property\n    def document_count(self):\n        return len(self.linked_documents)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/7", "repository_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy", "labels_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/7/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-sqlalchemy/issues/7/events", "html_url": "https://github.com/graphql-python/graphene-sqlalchemy/issues/7", "id": 180119963, "node_id": "MDU6SXNzdWUxODAxMTk5NjM=", "number": 7, "title": "Incorrect repo in readme", "user": {"login": "erik-farmer", "id": 5082725, "node_id": "MDQ6VXNlcjUwODI3MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5082725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erik-farmer", "html_url": "https://github.com/erik-farmer", "followers_url": "https://api.github.com/users/erik-farmer/followers", "following_url": "https://api.github.com/users/erik-farmer/following{/other_user}", "gists_url": "https://api.github.com/users/erik-farmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/erik-farmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erik-farmer/subscriptions", "organizations_url": "https://api.github.com/users/erik-farmer/orgs", "repos_url": "https://api.github.com/users/erik-farmer/repos", "events_url": "https://api.github.com/users/erik-farmer/events{/privacy}", "received_events_url": "https://api.github.com/users/erik-farmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-29T18:02:09Z", "updated_at": "2016-12-14T07:17:51Z", "closed_at": "2016-12-14T07:17:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "The existing clone and cd are invalid for the `examples/flask_sqlalchemy/README.md` file. The README should read:\n\n``` bash\n# Get the example project code\ngit clone https://github.com/graphql-python/graphene-sqlalchemy.git\ncd graphene-sqlalchemy/examples/flask_sqlalchemy\n```\n", "performed_via_github_app": null, "score": 1.0}]}