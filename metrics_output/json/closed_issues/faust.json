{"total_count": 210, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/robinhood/faust/issues/630", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/630/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/630/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/630/events", "html_url": "https://github.com/robinhood/faust/issues/630", "id": 676908950, "node_id": "MDU6SXNzdWU2NzY5MDg5NTA=", "number": 630, "title": "[Question] - Is it possible to customize the consumer-group-id of an agent ?", "user": {"login": "abusi", "id": 7234737, "node_id": "MDQ6VXNlcjcyMzQ3Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7234737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abusi", "html_url": "https://github.com/abusi", "followers_url": "https://api.github.com/users/abusi/followers", "following_url": "https://api.github.com/users/abusi/following{/other_user}", "gists_url": "https://api.github.com/users/abusi/gists{/gist_id}", "starred_url": "https://api.github.com/users/abusi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abusi/subscriptions", "organizations_url": "https://api.github.com/users/abusi/orgs", "repos_url": "https://api.github.com/users/abusi/repos", "events_url": "https://api.github.com/users/abusi/events{/privacy}", "received_events_url": "https://api.github.com/users/abusi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-11T14:09:06Z", "updated_at": "2020-08-22T16:56:47Z", "closed_at": "2020-08-22T16:56:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI have a use case were I want to consume some topic using a given consumer group id and some other for which I want another consumer-group-id. Sadly, I'm not able to do so in Faust, as the consumer-group-id for agent is derived from the `faust.app(id=str)` parameter.\r\n\r\nWould it be possible to make agent customize their consumer_id using a ctor parameter like:\r\n\r\n```\r\n@app.Agent(\"an_agent\", consumer_group_id=\"a_consumer_id\")\r\nasync def my_agent(stream):\r\n    pass\r\n\r\n@app.Agent(\"another_agent\",  consumer_group_id=\"another_consumer_group_id\")\r\nasync def another_agent(stream):\r\n    pass\r\n``` \r\n\r\nOR if you have any pointer on how to achieve this kind of use cases, i'm all ears\r\n\r\nRegards,\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/616", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/616/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/616/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/616/events", "html_url": "https://github.com/robinhood/faust/issues/616", "id": 645556324, "node_id": "MDU6SXNzdWU2NDU1NTYzMjQ=", "number": 616, "title": "Constant rebalancing", "user": {"login": "surculus12", "id": 4906330, "node_id": "MDQ6VXNlcjQ5MDYzMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4906330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surculus12", "html_url": "https://github.com/surculus12", "followers_url": "https://api.github.com/users/surculus12/followers", "following_url": "https://api.github.com/users/surculus12/following{/other_user}", "gists_url": "https://api.github.com/users/surculus12/gists{/gist_id}", "starred_url": "https://api.github.com/users/surculus12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surculus12/subscriptions", "organizations_url": "https://api.github.com/users/surculus12/orgs", "repos_url": "https://api.github.com/users/surculus12/repos", "events_url": "https://api.github.com/users/surculus12/events{/privacy}", "received_events_url": "https://api.github.com/users/surculus12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-25T13:19:03Z", "updated_at": "2020-06-25T14:26:03Z", "closed_at": "2020-06-25T14:26:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nI have workers being fed configuration from a service. 8 workers eat about 200 messages for 4 topics each, perform some comparisons to a postgres database (via tortoise-orm, not sync) and then save/update/event out/etc.\r\n\r\nThis is not intensive work, mostly spent in `await` and therefore has some concurrency.\r\n\r\n4 `@app.agent`, one for each topic, each with concurrency 5.\r\n\r\nApp configuration is:\r\n\r\n```python\r\napp = faust.App('locator', autodiscover=['locator'], origin='faustapp',\r\n                stream_wait_empty=False, broker_max_poll_records=500, topic_partitions=8)\r\n```\r\n\r\nThe `stream_wait_empty` and `broker_max_poll_records` are there because of previous issues encountered a while ago.\r\n\r\n## Expected behavior\r\n\r\nFaust does not rebalance constantly.\r\n\r\n## Actual behavior\r\n\r\nNOTE: My main issue is reading from the logs what exactly is happening. What is the issue here? Why exactly is the rebalance occurring? It complains about OffsetCommit, what does that mean? I've tried deleting the consumer group, resetting the offset to latest, etc., but it always falls back to continuous rebalancing:\r\n\r\nProcesses a few messages, rebalance, processes a few messages, rebalance, etc.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[2020-06-25 13:02:38,560] [1] [INFO] Joined group 'locator' (generation 4427) with member_id faust-1.10.4-5ed482a9-e138-4370-bb08-9b614edab929 \r\n[2020-06-25 13:02:38,562] [1] [ERROR] OffsetCommit failed for group locator due to group error ([Error 22] IllegalGenerationError: locator), will rejoin \r\n[2020-06-25 13:02:38,582] [1] [ERROR] OffsetCommit failed for group locator due to group error ([Error 22] IllegalGenerationError: locator), will rejoin \r\n[2020-06-25 13:02:38,614] [1] [INFO] Successfully synced group locator with generation -1 \r\n[2020-06-25 13:02:38,616] [1] [WARNING] Timer commit is overlapping (interval=2.8 runtime=52.18774592503905) \r\n[2020-06-25 13:02:38,619] [1] [INFO] Setting newly assigned partitions \r\n+Topic Partition Set-----+------------+\r\n| topic                  | partitions |\r\n+------------------------+------------+\r\n| scan_interfaces        | {7}        |\r\n| scan_ipv4_snooping     | {7}        |\r\n| scan_ipv6_snooping     | {7}        |\r\n| scan_mac_address_table | {7}        |\r\n+------------------------+------------+ for group locator \r\n[2020-06-25 13:02:38,688] [1] [INFO] [^---Recovery]: Resuming flow... \r\n[2020-06-25 13:02:38,689] [1] [INFO] [^---Recovery]: Seek stream partitions to committed offsets. \r\n[2020-06-25 13:02:38,691] [1] [INFO] Revoking previously assigned partitions \r\n+Topic Partition Set-----+------------+\r\n| topic                  | partitions |\r\n+------------------------+------------+\r\n| scan_interfaces        | {7}        |\r\n| scan_ipv4_snooping     | {7}        |\r\n| scan_ipv6_snooping     | {7}        |\r\n| scan_mac_address_table | {7}        |\r\n+------------------------+------------+ for group locator \r\n[2020-06-25 13:02:38,692] [1] [WARNING] [^-App]: Previous rebalance did not clear state: {<Monitor: running >: {'time_start': 33349302.039085913, 'time_return': 33349357.306737624, 'latency_return': 55.267651710659266}} \r\n[2020-06-25 13:02:38,698] [1] [INFO] (Re-)joining group locator \r\n[2020-06-25 13:03:38,582] [1] [INFO] Joined group 'locator' (generation 4428) with member_id faust-1.10.4-380f844b-8ea8-46f7-b4aa-ef290d963cf1 \r\n[2020-06-25 13:03:38,649] [1] [INFO] Successfully synced group locator with generation 4428 \r\n[2020-06-25 13:03:38,652] [1] [INFO] Setting newly assigned partitions \r\n+Topic Partition Set-----+------------+\r\n| topic                  | partitions |\r\n+------------------------+------------+\r\n| scan_interfaces        | {7}        |\r\n| scan_ipv4_snooping     | {7}        |\r\n| scan_ipv6_snooping     | {7}        |\r\n| scan_mac_address_table | {7}        |\r\n+------------------------+------------+ for group locator \r\n[2020-06-25 13:03:38,658] [1] [INFO] [^---Recovery]: Resuming flow... \r\n[2020-06-25 13:03:38,659] [1] [INFO] [^---Recovery]: Seek stream partitions to committed offsets. \r\n[2020-06-25 13:03:38,696] [1] [INFO] [^---Recovery]: Worker ready \r\n[2020-06-25 13:03:43,112] [1] [INFO] Timer _thread_keepalive-AIOKafkaConsumerThread woke up too late, with a drift of +3.304987907409668 runtime=1.4096498489379883e-05 sleeptime=4.304987907409668 \r\n[2020-06-25 13:03:43,113] [1] [ERROR] [^---AIOKafkaConsumerThread]: Thread keepalive is not responding... \r\n[2020-06-25 13:03:43,307] [1] [WARNING] Heartbeat failed for group locator because it is rebalancing \r\n[2020-06-25 13:03:43,323] [1] [INFO] Revoking previously assigned partitions \r\n+Topic Partition Set-----+------------+\r\n| topic                  | partitions |\r\n+------------------------+------------+\r\n| scan_interfaces        | {7}        |\r\n| scan_ipv4_snooping     | {7}        |\r\n| scan_ipv6_snooping     | {7}        |\r\n| scan_mac_address_table | {7}        |\r\n+------------------------+------------+ for group locator \r\n[2020-06-25 13:03:43,409] [1] [WARNING] Timer commit is overlapping (interval=2.8 runtime=3.129428632557392) \r\n[2020-06-25 13:03:43,423] [1] [INFO] (Re-)joining group locator \r\n[2020-06-25 13:03:43,480] [1] [INFO] Timer Monitor.sampler woke up too late, with a drift of +0.4602888450026512 runtime=0.0002162456512451172 sleeptime=1.4602888450026512 \r\n[2020-06-25 13:03:43,981] [1] [WARNING] [DONE] <label>: Interfaces: 0.68s \r\n[2020-06-25 13:03:44,030] [1] [WARNING] [DONE] <label>: Interfaces: 0.71s \r\n[2020-06-25 13:03:44,090] [1] [WARNING] [DONE] <label>: Interfaces: 0.71s \r\n[2020-06-25 13:03:44,096] [1] [WARNING] [DONE] <label>: IPv4 snooping: 0.79s \r\n[2020-06-25 13:03:44,114] [1] [WARNING] [DONE] <label>: Interfaces: 0.72s \r\n[2020-06-25 13:03:44,130] [1] [WARNING] [DONE] <label>: Interfaces: 0.73s \r\n[2020-06-25 13:03:44,132] [1] [WARNING] [DONE] <label>: IPv4 snooping: 0.81s \r\n[2020-06-25 13:03:44,785] [1] [INFO] Timer Monitor.sampler woke up too late, with a drift of +0.3047229088842869 runtime=0.0002523958683013916 sleeptime=1.3047229088842869 \r\n[2020-06-25 13:03:44,828] [1] [WARNING] [DONE] <label>: IPv4 snooping: 1.43s \r\n[2020-06-25 13:03:44,883] [1] [WARNING] [DONE] <label>: IPv4 snooping: 1.48s \r\n[2020-06-25 13:03:44,887] [1] [WARNING] [DONE] <label>: IPv4 snooping: 1.50s \r\n```\r\n\r\nAnd then repeats as above.\r\n\r\n# Versions\r\n\r\n* Python version: CPython 3.8.3\r\n* Faust version: 1.10.4\r\n* Operating system: docker image python:3.8.3-slim-buster\r\n* Kafka version: 2.4.x\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/615", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/615/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/615/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/615/events", "html_url": "https://github.com/robinhood/faust/issues/615", "id": 644650197, "node_id": "MDU6SXNzdWU2NDQ2NTAxOTc=", "number": 615, "title": "AttributeError: module 'faust.worker' has no attribute 'Worker'", "user": {"login": "phoenix-mstu", "id": 5279629, "node_id": "MDQ6VXNlcjUyNzk2Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5279629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phoenix-mstu", "html_url": "https://github.com/phoenix-mstu", "followers_url": "https://api.github.com/users/phoenix-mstu/followers", "following_url": "https://api.github.com/users/phoenix-mstu/following{/other_user}", "gists_url": "https://api.github.com/users/phoenix-mstu/gists{/gist_id}", "starred_url": "https://api.github.com/users/phoenix-mstu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phoenix-mstu/subscriptions", "organizations_url": "https://api.github.com/users/phoenix-mstu/orgs", "repos_url": "https://api.github.com/users/phoenix-mstu/repos", "events_url": "https://api.github.com/users/phoenix-mstu/events{/privacy}", "received_events_url": "https://api.github.com/users/phoenix-mstu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-24T14:14:42Z", "updated_at": "2020-06-25T08:21:32Z", "closed_at": "2020-06-25T08:21:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to run basic example from https://faust.readthedocs.io/en/latest/ and get the error.\r\nI tried installing the latest faust version, but the problem still exists.\r\n\r\nI run it on MacOS\r\n\r\n```\r\n> python --version\r\nPython 3.7.7\r\n> python -m pip show faust\r\nName: faust\r\nVersion: 1.11.0a1\r\n...\r\n> python -c \"import faust.worker\"\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/worker.py\", line 19, in <module>\r\n    from aiokafka.structs import TopicPartition\r\n  File \"/tmp/venv/lib/python3.7/site-packages/aiokafka/__init__.py\", line 3, in <module>\r\n    from .abc import ConsumerRebalanceListener\r\n  File \"/tmp/venv/lib/python3.7/site-packages/aiokafka/abc.py\", line 2, in <module>\r\n    from kafka import ConsumerRebalanceListener as BaseConsumerRebalanceListener\r\n  File \"/tmp/kafka.py\", line 35, in <module>\r\n    @app.agent(value_type=Order)\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/app/base.py\", line 862, in _inner\r\n    agent = self.conf.Agent(\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/app/base.py\", line 1795, in conf\r\n    self._configure()\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/app/base.py\", line 1739, in _configure\r\n    conf = self._load_settings(silent=silent)\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/app/base.py\", line 1751, in _load_settings\r\n    return self.Settings(appid, **self._prepare_compat_settings(conf))\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/types/settings/base.py\", line 92, in _new_init\r\n    self._init_entrypoint(*args, **kwargs)\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/types/settings/base.py\", line 138, in _init_entrypoint\r\n    self._init_settings(kwargs)\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/types/settings/base.py\", line 165, in _init_settings\r\n    param.on_init_set_default(conf, provided_value)\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/types/settings/params.py\", line 429, in on_init_set_default\r\n    self.prepare_init_default(conf, default_value))\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/types/settings/params.py\", line 465, in prepare_init_default\r\n    return self.to_python(conf, value)\r\n  File \"/tmp/venv/lib/python3.7/site-packages/faust/types/settings/params.py\", line 713, in to_python\r\n    return cast(OT, symbol_by_name(value))\r\n  File \"/tmp/venv/lib/python3.7/site-packages/mode/utils/imports.py\", line 275, in symbol_by_name\r\n    return cast(_T, getattr(module, attribute_name))\r\nAttributeError: module 'faust.worker' has no attribute 'Worker'\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/608", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/608/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/608/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/608/events", "html_url": "https://github.com/robinhood/faust/issues/608", "id": 635081847, "node_id": "MDU6SXNzdWU2MzUwODE4NDc=", "number": 608, "title": "Cannot Connect to Confluent using SASL ", "user": {"login": "sariabod", "id": 1268903, "node_id": "MDQ6VXNlcjEyNjg5MDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1268903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sariabod", "html_url": "https://github.com/sariabod", "followers_url": "https://api.github.com/users/sariabod/followers", "following_url": "https://api.github.com/users/sariabod/following{/other_user}", "gists_url": "https://api.github.com/users/sariabod/gists{/gist_id}", "starred_url": "https://api.github.com/users/sariabod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sariabod/subscriptions", "organizations_url": "https://api.github.com/users/sariabod/orgs", "repos_url": "https://api.github.com/users/sariabod/repos", "events_url": "https://api.github.com/users/sariabod/events{/privacy}", "received_events_url": "https://api.github.com/users/sariabod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-09T03:27:29Z", "updated_at": "2020-06-09T18:12:43Z", "closed_at": "2020-06-09T18:12:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\nTry to connect to a Confluent Kafka Instance using SASL (no authentication works perfectly)\r\n\r\nTook test code that was running against local Confluent installation and changed the url to point to a cloud instance and enabled SASL\r\n\r\n## Expected behavior\r\nSample code that ran locally should work the same against cloud instance\r\n## Actual behavior\r\nGet an error \r\n```asyncio.streams.IncompleteReadError: 3 bytes read on a total of 352518912 expected bytes```\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[2020-06-08 21:58:46,426] [13287] [INFO] [^Worker]: Starting...\r\n[2020-06-08 21:58:46,428] [13287] [INFO] [^-App]: Starting...\r\n[2020-06-08 21:58:46,428] [13287] [INFO] [^--Monitor]: Starting...\r\n[2020-06-08 21:58:46,428] [13287] [INFO] [^--Producer]: Starting...\r\n[2020-06-08 21:58:46,428] [13287] [INFO] [^---ProducerBuffer]: Starting...\r\n[2020-06-08 21:58:46,839] [13287] [ERROR] [^Worker]: Error: ConnectionError('Connection at xxxxxx.centralus.azure.confluent.cloud:9092 closed')\r\nTraceback (most recent call last):\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/aiokafka/conn.py\", line 336, in _on_read_task_error\r\n    read_task.result()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/aiokafka/conn.py\", line 475, in _read\r\n    resp = await reader.readexactly(size)\r\n  File \"/home/sariabod/anaconda3/lib/python3.7/asyncio/streams.py\", line 677, in readexactly\r\n    raise IncompleteReadError(incomplete, n)\r\nasyncio.streams.IncompleteReadError: 3 bytes read on a total of 352518912 expected bytes\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/worker.py\", line 273, in execute_from_commandline\r\n    self.loop.run_until_complete(self._starting_fut)\r\n  File \"/home/sariabod/anaconda3/lib/python3.7/asyncio/base_events.py\", line 579, in run_until_complete\r\n    return future.result()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 736, in start\r\n    await self._default_start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 743, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 767, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 795, in maybe_start\r\n    await self.start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 736, in start\r\n    await self._default_start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 743, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 767, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 795, in maybe_start\r\n    await self.start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 736, in start\r\n    await self._default_start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 743, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/mode/services.py\", line 760, in _actually_start\r\n    await self.on_start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/faust/transport/drivers/aiokafka.py\", line 1021, in on_start\r\n    await producer.start()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 178, in start\r\n    await self.client.bootstrap()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/aiokafka/client.py\", line 203, in bootstrap\r\n    version_hint=version_hint)\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/aiokafka/conn.py\", line 90, in create_conn\r\n    await conn.connect()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/aiokafka/conn.py\", line 216, in connect\r\n    await self._do_sasl_handshake()\r\n  File \"/home/sariabod/source/faust/venv/lib/python3.7/site-packages/aiokafka/conn.py\", line 245, in _do_sasl_handshake\r\n    response = await self.send(sasl_handshake)\r\n  File \"/home/sariabod/anaconda3/lib/python3.7/asyncio/tasks.py\", line 442, in wait_for\r\n    return fut.result()\r\nkafka.errors.ConnectionError: ConnectionError: Connection at  xxxxxxx.centralus.azure.confluent.cloud:9092 closed\r\n[2020-06-08 21:58:46,846] [13287] [INFO] [^Worker]: Stopping...\r\n[2020-06-08 21:58:46,847] [13287] [INFO] [^-App]: Stopping...\r\n[2020-06-08 21:58:46,847] [13287] [INFO] [^-App]: Flush producer buffer...\r\n[2020-06-08 21:58:46,847] [13287] [INFO] [^--TableManager]: Stopping...\r\n[2020-06-08 21:58:46,848] [13287] [INFO] [^---Fetcher]: Stopping...\r\n[2020-06-08 21:58:46,849] [13287] [INFO] [^---Conductor]: Stopping...\r\n[2020-06-08 21:58:46,850] [13287] [INFO] [^--AgentManager]: Stopping...\r\n[2020-06-08 21:58:46,850] [13287] [INFO] [^Agent: test.process_well]: Stopping...\r\n[2020-06-08 21:58:46,851] [13287] [INFO] [^--ReplyConsumer]: Stopping...\r\n[2020-06-08 21:58:46,851] [13287] [INFO] [^--LeaderAssignor]: Stopping...\r\n[2020-06-08 21:58:46,852] [13287] [INFO] [^--Consumer]: Stopping...\r\n[2020-06-08 21:58:46,853] [13287] [INFO] [^--Producer]: Stopping...\r\n[2020-06-08 21:58:46,853] [13287] [INFO] [^---ProducerBuffer]: Stopping...\r\n[2020-06-08 21:58:46,854] [13287] [INFO] [^--Monitor]: Stopping...\r\n[2020-06-08 21:58:46,856] [13287] [INFO] [^Worker]: Gathering service tasks...\r\n[2020-06-08 21:58:46,856] [13287] [INFO] [^Worker]: Gathering all futures...\r\n[2020-06-08 21:58:47,858] [13287] [INFO] [^Worker]: Closing event loop\r\n```\r\n\r\n# Versions\r\n\r\n* Python version - 3.7.4\r\n* Faust version - v1.10.4 and v1.11.0a1\r\n* Operating system - Ubuntu 19.10 and MacOS10.15.4\r\n* Kafka version - 2.5 (confluent 5.5)\r\n* RocksDB version (if applicable) - NA testing with memory\r\n\r\nI searched a lot and cannot find any info on this error. I am using the kafka connector for this. If I use confluent connector, I do not get an error that crashes the worker, but the worker never does anything. It will perpetually say \r\n``` [INFO] [^---ConfluentConsumerThread]: Still waiting for assignment...```\r\n\r\nSample Code:\r\n```py\r\nimport faust\r\n\r\nbroker_credentials=faust.SASLCredentials(username='xxx',password='xxx')\r\n\r\napp = faust.App(\r\n    \"sam-test\",\r\n    broker=\"kafka://xxxx.centralus.azure.confluent.cloud:9092\",\r\n    value_serializer=\"json\",\r\n    processing_guarantee=\"exactly_once\",\r\n    store=\"memory://\",\r\n    broker_credentials=broker_credentials\r\n)\r\n\r\nclass Sam(faust.Record):\r\n    info: str\r\n    count: int\r\n    psi: int\r\n    osi: int\r\n\r\nsam_topic = app.topic(\"sam_test\", value_type=Sam)\r\n\r\n@app.agent(sam_topic)\r\nasync def process_well(sam_data):\r\n    async for sam in sam_data:\r\n        print(sam)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/597", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/597/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/597/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/597/events", "html_url": "https://github.com/robinhood/faust/issues/597", "id": 623080435, "node_id": "MDU6SXNzdWU2MjMwODA0MzU=", "number": 597, "title": "Tombstone record for Kafka", "user": {"login": "aditya-inapp", "id": 58760801, "node_id": "MDQ6VXNlcjU4NzYwODAx", "avatar_url": "https://avatars1.githubusercontent.com/u/58760801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aditya-inapp", "html_url": "https://github.com/aditya-inapp", "followers_url": "https://api.github.com/users/aditya-inapp/followers", "following_url": "https://api.github.com/users/aditya-inapp/following{/other_user}", "gists_url": "https://api.github.com/users/aditya-inapp/gists{/gist_id}", "starred_url": "https://api.github.com/users/aditya-inapp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aditya-inapp/subscriptions", "organizations_url": "https://api.github.com/users/aditya-inapp/orgs", "repos_url": "https://api.github.com/users/aditya-inapp/repos", "events_url": "https://api.github.com/users/aditya-inapp/events{/privacy}", "received_events_url": "https://api.github.com/users/aditya-inapp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-22T09:29:32Z", "updated_at": "2020-06-23T03:58:37Z", "closed_at": "2020-05-22T09:40:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\nWorkflow:\r\n\r\n1. SQL Server Database is connected to Kafka using Debezium source connector which produces messages to topic1.\r\n2. Faust Streams messages in Topic1 to Topic2\r\n3. Confluent JDBC sink connector consumes from Topic2\r\n\r\nTombstone messages are generated by Debezium source connector for SQL **DELETE** query. This message is consumed by Faust and forward to Topic2 as such. The **null** in the value of the message is considered as string null instead of null value.\r\n\r\n## Expected behavior\r\nThe null should be considered as null and not as string null.\r\n![image](https://user-images.githubusercontent.com/58760801/82653267-93cedd00-9c3c-11ea-9545-6139aade7a43.png)\r\nPlease check the last two rows. Offset 95 is created by Faust. Offset 94 is created by the source connector and also kafkacat producer.\r\n\r\n## Actual behavior\r\nOffset 94 of the attached image\r\n\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.6\r\n* Faust version: 1.10.4\r\n* Operating system: Ubuntu 18.04.4\r\n* Kafka version: 2.5\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/585", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/585/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/585/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/585/events", "html_url": "https://github.com/robinhood/faust/issues/585", "id": 609405576, "node_id": "MDU6SXNzdWU2MDk0MDU1NzY=", "number": 585, "title": "Models with \"type\" class attribute", "user": {"login": "austinnichols101", "id": 6962379, "node_id": "MDQ6VXNlcjY5NjIzNzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6962379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinnichols101", "html_url": "https://github.com/austinnichols101", "followers_url": "https://api.github.com/users/austinnichols101/followers", "following_url": "https://api.github.com/users/austinnichols101/following{/other_user}", "gists_url": "https://api.github.com/users/austinnichols101/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinnichols101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinnichols101/subscriptions", "organizations_url": "https://api.github.com/users/austinnichols101/orgs", "repos_url": "https://api.github.com/users/austinnichols101/repos", "events_url": "https://api.github.com/users/austinnichols101/events{/privacy}", "received_events_url": "https://api.github.com/users/austinnichols101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T22:34:24Z", "updated_at": "2020-04-30T13:43:43Z", "closed_at": "2020-04-30T13:43:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using \"type\" as the name for a class attribute creates a dict instead of a nested faust model.\r\n\r\nIn the example below, **B_Record** has a **type** class attribute.  After a loads, data in **B_Record** cannot be accessed using the dot separator (e.g. `test_2.b.bar`) and results in an `AttributeError`.  \r\n\r\nVersions of Faust prior to 1.10.0 (tested with 1.9.0) do NOT show this same behavior.\r\n\r\n## Steps to reproduce\r\n```\r\nimport faust\r\nimport json\r\n\r\n\r\nclass A_Record(faust.Record, serializer=\"json\"):\r\n\r\n    foo: int = None\r\n    record_type: str = \"record_type_a\"\r\n\r\n\r\nclass B_Record(faust.Record, serializer=\"json\"):\r\n\r\n    bar: int = None\r\n    record_type: str = \"record_type_b\"\r\n    type: str = \"type_b\"\r\n\r\n\r\nclass C_Record(faust.Record, serializer=\"json\"):\r\n\r\n    a: A_Record = A_Record()\r\n    b: B_Record = B_Record()\r\n\r\n\r\ndef dump(model):\r\n    print(\r\n        json.dumps(\r\n            json.loads(model.dumps()),\r\n            sort_keys=True,\r\n            indent=4)\r\n    )\r\n    print(\"\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"\")\r\n\r\n    data = {\r\n        \"a\": {\"foo\": 1},\r\n        \"b\": {\"bar\": 2}\r\n    }\r\n    data = json.dumps(data)\r\n\r\n    print(\"Before loads...\")\r\n    test_1 = C_Record()\r\n    dump(test_1)\r\n\r\n    print(\"After loads...\")\r\n    test_2 = test_1.loads(data)\r\n    dump(test_2)\r\n\r\n    print(test_2.b.bar)\r\n\r\napp = faust.App(\r\n    id=\"faust-models\"\r\n)\r\n```\r\n\r\n## Results\r\n```\r\n\r\nBefore loads...\r\n{\r\n    \"__faust\": {\r\n        \"ns\": \"app.C_Record\"\r\n    },\r\n    \"a\": {\r\n        \"__faust\": {\r\n            \"ns\": \"app.A_Record\"\r\n        },\r\n        \"foo\": null,\r\n        \"record_type\": \"record_type_a\"\r\n    },\r\n    \"b\": {\r\n        \"__faust\": {\r\n            \"ns\": \"app.B_Record\"\r\n        },\r\n        \"bar\": null,\r\n        \"record_type\": \"record_type_b\",\r\n        \"type\": \"type_b\"\r\n    }\r\n}\r\n\r\nAfter loads...\r\n{\r\n    \"__faust\": {\r\n        \"ns\": \"app.C_Record\"\r\n    },\r\n    \"a\": {\r\n        \"__faust\": {\r\n            \"ns\": \"app.A_Record\"\r\n        },\r\n        \"foo\": 1,\r\n        \"record_type\": \"record_type_a\"\r\n    },\r\n    \"b\": {\r\n        \"bar\": 2\r\n    }\r\n}\r\n\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 51, in <module>\r\n    print(test_2.b.bar)\r\nAttributeError: 'dict' object has no attribute 'bar'\r\n```\r\n## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n\r\n## Full traceback\r\n```\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 51, in <module>\r\n    print(test_2.b.bar)\r\nAttributeError: 'dict' object has no attribute 'bar'\r\n```\r\n\r\n# Versions\r\n* Faust 1.10.4\r\n* Python 3.3.7\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/568", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/568/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/568/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/568/events", "html_url": "https://github.com/robinhood/faust/issues/568", "id": 592595522, "node_id": "MDU6SXNzdWU1OTI1OTU1MjI=", "number": 568, "title": "changelog topic updation generates error", "user": {"login": "neeraj0284", "id": 26487352, "node_id": "MDQ6VXNlcjI2NDg3MzUy", "avatar_url": "https://avatars1.githubusercontent.com/u/26487352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neeraj0284", "html_url": "https://github.com/neeraj0284", "followers_url": "https://api.github.com/users/neeraj0284/followers", "following_url": "https://api.github.com/users/neeraj0284/following{/other_user}", "gists_url": "https://api.github.com/users/neeraj0284/gists{/gist_id}", "starred_url": "https://api.github.com/users/neeraj0284/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neeraj0284/subscriptions", "organizations_url": "https://api.github.com/users/neeraj0284/orgs", "repos_url": "https://api.github.com/users/neeraj0284/repos", "events_url": "https://api.github.com/users/neeraj0284/events{/privacy}", "received_events_url": "https://api.github.com/users/neeraj0284/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-02T12:32:27Z", "updated_at": "2020-04-09T06:20:03Z", "closed_at": "2020-04-09T06:20:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am new to faust. I know that every update to table's content pushes an update to changelog topic. But on updating a key, I am getting the following error :- \r\n\r\n [WARNING] Got error produce response on topic-partition TopicPartition(topic='hello-app-views2-changelog', partition=0), retrying. Error: <class 'kafka.errors.NotEnoughReplicasError'> \r\n\r\nCan anyone suggest a solution??\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/567", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/567/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/567/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/567/events", "html_url": "https://github.com/robinhood/faust/issues/567", "id": 591012073, "node_id": "MDU6SXNzdWU1OTEwMTIwNzM=", "number": 567, "title": "Faust on windows 10: ModuleNotFoundError: No module named 'faust.agents.agent'", "user": {"login": "thomas-chauvet", "id": 12407096, "node_id": "MDQ6VXNlcjEyNDA3MDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/12407096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomas-chauvet", "html_url": "https://github.com/thomas-chauvet", "followers_url": "https://api.github.com/users/thomas-chauvet/followers", "following_url": "https://api.github.com/users/thomas-chauvet/following{/other_user}", "gists_url": "https://api.github.com/users/thomas-chauvet/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomas-chauvet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomas-chauvet/subscriptions", "organizations_url": "https://api.github.com/users/thomas-chauvet/orgs", "repos_url": "https://api.github.com/users/thomas-chauvet/repos", "events_url": "https://api.github.com/users/thomas-chauvet/events{/privacy}", "received_events_url": "https://api.github.com/users/thomas-chauvet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-31T11:05:47Z", "updated_at": "2020-03-31T12:14:31Z", "closed_at": "2020-03-31T12:14:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have an issue with Faust for windows.\r\n\r\nI am trying to run a simple code:\r\n\r\napp.py:\r\n```python\r\nimport faust\r\n\r\napp = faust.App('test-example')\r\n\r\nclass Order(faust.Record, serializer='json'):\r\n    account_id: str\r\n    product_id: str\r\n    amount: int\r\n    price: float\r\n\r\norders_topic = app.topic('orders', value_type=Order)\r\norders_for_account = app.Table('order-count-by-account', default=int)\r\n\r\n@app.agent(orders_topic)\r\nasync def faust_agent(orders):\r\n    async for order in orders.group_by(Order.account_id):\r\n        orders_for_account[order.account_id] += 1\r\n        yield order\r\n```\r\n\r\ntest.py:\r\n```python\r\nfrom tests.testing.app import app, faust_agent, Order, orders_for_account\r\n\r\nasync def test_order():\r\n    # start and stop the agent in this block\r\n    async with faust_agent.test_context() as agent:\r\n        order = Order(account_id='1', product_id='2', amount=1, price=300)\r\n        # sent order to the test agents local channel, and wait\r\n        # the agent to process it.\r\n        await agent.put(order)\r\n        # at this point the agent already updated the table\r\n        assert orders_for_account[order.account_id] == 1\r\n        await agent.put(order)\r\n        assert orders_for_account[order.account_id] == 2\r\n\r\nasync def run_tests():\r\n    app.conf.store = 'memory://'   # tables must be in-memory\r\n    await test_order()\r\n\r\nif __name__ == '__main__':\r\n    import asyncio\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(run_tests())\r\n```\r\n\r\nWhen I run the `main.py`, I have:\r\n```text\r\nModuleNotFoundError: No module named 'faust.agents.agent'\r\n```\r\n\r\nThe full traceback is:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"C:\\Program Files\\JetBrains\\PyCharm Community Edition 2019.1.2\\plugins\\python-ce\\helpers\\pydev\\_pydev_bundle\\pydev_import_hook.py\", line 21, in do_import\r\n    module = self._system_import(name, *args, **kwargs)\r\n  File \"C:\\Users\\.env\\lib\\site-packages\\faust\\agents\\__init__.py\", line 2, in <module>\r\n    from .agent import Agent, AgentFun, AgentT, SinkT, current_agent\r\n  File \"C:\\Program Files\\JetBrains\\PyCharm Community Edition 2019.1.2\\plugins\\python-ce\\helpers\\pydev\\_pydev_bundle\\pydev_import_hook.py\", line 21, in do_import\r\n    module = self._system_import(name, *args, **kwargs)\r\nModuleNotFoundError: No module named 'faust.agents.agent'\r\n```\r\n\r\n# Versions\r\n\r\n* Python version 3.7.7\r\n* Faust version: 1.10.4\r\n* Operating system: Windows 10\r\n* Kafka version - python lib: 1.4.7\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/565", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/565/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/565/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/565/events", "html_url": "https://github.com/robinhood/faust/issues/565", "id": 590571008, "node_id": "MDU6SXNzdWU1OTA1NzEwMDg=", "number": 565, "title": "[QUESTION]: `.filter()` method ommit values from stream", "user": {"login": "xinbinhuang", "id": 27927454, "node_id": "MDQ6VXNlcjI3OTI3NDU0", "avatar_url": "https://avatars1.githubusercontent.com/u/27927454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xinbinhuang", "html_url": "https://github.com/xinbinhuang", "followers_url": "https://api.github.com/users/xinbinhuang/followers", "following_url": "https://api.github.com/users/xinbinhuang/following{/other_user}", "gists_url": "https://api.github.com/users/xinbinhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/xinbinhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xinbinhuang/subscriptions", "organizations_url": "https://api.github.com/users/xinbinhuang/orgs", "repos_url": "https://api.github.com/users/xinbinhuang/repos", "events_url": "https://api.github.com/users/xinbinhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/xinbinhuang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-30T20:25:13Z", "updated_at": "2020-03-30T20:47:11Z", "closed_at": "2020-03-30T20:46:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nThanks for the amazing work on this library. I just started to explore streaming and I find Faust amazing. \r\n\r\nHowever, I find it counterintuitive on the `.filter()` method on stream. Is this a common practice for streaming or is it a reason behind on \"filter - ommit values from the stream\" instead of a predicate as in `WHERE = <some-value>` in SQL.\r\n\r\nAny responses are appreciated!\r\n\r\nThanks\r\nBin", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/537", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/537/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/537/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/537/events", "html_url": "https://github.com/robinhood/faust/issues/537", "id": 570867413, "node_id": "MDU6SXNzdWU1NzA4Njc0MTM=", "number": 537, "title": "logging. how get correct funcName, path, lineno", "user": {"login": "alexcrownjr", "id": 35556369, "node_id": "MDQ6VXNlcjM1NTU2MzY5", "avatar_url": "https://avatars3.githubusercontent.com/u/35556369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrownjr", "html_url": "https://github.com/alexcrownjr", "followers_url": "https://api.github.com/users/alexcrownjr/followers", "following_url": "https://api.github.com/users/alexcrownjr/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrownjr/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrownjr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrownjr/subscriptions", "organizations_url": "https://api.github.com/users/alexcrownjr/orgs", "repos_url": "https://api.github.com/users/alexcrownjr/repos", "events_url": "https://api.github.com/users/alexcrownjr/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrownjr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T22:09:40Z", "updated_at": "2020-02-26T23:13:49Z", "closed_at": "2020-02-26T23:13:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "how can I get correct values for funcName, path, lineno ?\r\n\r\nFuncName is always 'log', lineno is 267 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/535", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/535/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/535/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/535/events", "html_url": "https://github.com/robinhood/faust/issues/535", "id": 569864313, "node_id": "MDU6SXNzdWU1Njk4NjQzMTM=", "number": 535, "title": "Consumer thread not yet started when enable_kafka = False", "user": {"login": "joekohlsdorf", "id": 32424163, "node_id": "MDQ6VXNlcjMyNDI0MTYz", "avatar_url": "https://avatars2.githubusercontent.com/u/32424163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joekohlsdorf", "html_url": "https://github.com/joekohlsdorf", "followers_url": "https://api.github.com/users/joekohlsdorf/followers", "following_url": "https://api.github.com/users/joekohlsdorf/following{/other_user}", "gists_url": "https://api.github.com/users/joekohlsdorf/gists{/gist_id}", "starred_url": "https://api.github.com/users/joekohlsdorf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joekohlsdorf/subscriptions", "organizations_url": "https://api.github.com/users/joekohlsdorf/orgs", "repos_url": "https://api.github.com/users/joekohlsdorf/repos", "events_url": "https://api.github.com/users/joekohlsdorf/events{/privacy}", "received_events_url": "https://api.github.com/users/joekohlsdorf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-24T13:41:29Z", "updated_at": "2020-02-26T23:28:57Z", "closed_at": "2020-02-26T23:28:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to run a Faust worker without doing anything with Kafka, for example to run timers.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\nimport faust\r\nfrom faust.app.base import BootStrategy\r\n\r\nclass App(faust.App):\r\n    class BootStrategy(BootStrategy):\r\n         enable_kafka = False\r\n\r\napp = App('test')\r\n```\r\n\r\n## Expected behavior\r\n\r\nApp starts.\r\n\r\n## Actual behavior\r\n\r\nApp crashes initializing the TableManager:\r\n\r\n```\r\n[^Worker]: Error: ConsumerNotStarted('Consumer thread not yet started') \r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/worker.py\", line 273, in execute_from_commandline\r\n    self.loop.run_until_complete(self._starting_fut)\r\n  File \"/usr/local/lib/python3.8/asyncio/base_events.py\", line 612, in run_until_complete\r\n    return future.result()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 736, in start\r\n    await self._default_start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 743, in _default_start\r\n    await self._actually_start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 767, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 795, in maybe_start\r\n    await self.start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 736, in start\r\n    await self._default_start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 743, in _default_start\r\n    await self._actually_start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 767, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 795, in maybe_start\r\n    await self.start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 736, in start\r\n    await self._default_start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 743, in _default_start\r\n    await self._actually_start()\r\n  File \"/usr/local/lib/python3.8/site-packages/mode/services.py\", line 760, in _actually_start\r\n    await self.on_start()\r\n  File \"/usr/local/lib/python3.8/site-packages/faust/tables/manager.py\", line 143, in on_start\r\n    await self._update_channels()\r\n  File \"/usr/local/lib/python3.8/site-packages/faust/tables/manager.py\", line 162, in _update_channels\r\n    tp for tp in self.app.consumer.assignment()\r\n  File \"/usr/local/lib/python3.8/site-packages/faust/transport/consumer.py\", line 1292, in assignment\r\n    return self._thread.assignment()\r\n  File \"/usr/local/lib/python3.8/site-packages/faust/transport/drivers/aiokafka.py\", line 754, in assignment\r\n    return ensure_TPset(self._ensure_consumer().assignment())\r\n  File \"/usr/local/lib/python3.8/site-packages/faust/transport/drivers/aiokafka.py\", line 792, in _ensure_consumer\r\n    raise ConsumerNotStarted('Consumer thread not yet started')\r\nfaust.exceptions.ConsumerNotStarted: Consumer thread not yet started\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.8.1\r\n* Faust version: 1.10.3\r\n* Operating system: Debian Buster", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/533", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/533/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/533/events", "html_url": "https://github.com/robinhood/faust/issues/533", "id": 568942641, "node_id": "MDU6SXNzdWU1Njg5NDI2NDE=", "number": 533, "title": "can't use async filters for streams", "user": {"login": "romikforest", "id": 14263879, "node_id": "MDQ6VXNlcjE0MjYzODc5", "avatar_url": "https://avatars3.githubusercontent.com/u/14263879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romikforest", "html_url": "https://github.com/romikforest", "followers_url": "https://api.github.com/users/romikforest/followers", "following_url": "https://api.github.com/users/romikforest/following{/other_user}", "gists_url": "https://api.github.com/users/romikforest/gists{/gist_id}", "starred_url": "https://api.github.com/users/romikforest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romikforest/subscriptions", "organizations_url": "https://api.github.com/users/romikforest/orgs", "repos_url": "https://api.github.com/users/romikforest/repos", "events_url": "https://api.github.com/users/romikforest/events{/privacy}", "received_events_url": "https://api.github.com/users/romikforest/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-21T13:03:09Z", "updated_at": "2020-02-26T23:38:09Z", "closed_at": "2020-02-26T23:38:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the documentation I read that a stream filter function (stream.filter) can be sync and async, but only sync is working\r\n\r\nPlatform: Linux-4.15.0-1050-azure-x86_64-with-debian-stretch-sid\r\nPython 3.7.3\r\nFaust: 1.10.3\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/522", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/522/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/522/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/522/events", "html_url": "https://github.com/robinhood/faust/issues/522", "id": 558627938, "node_id": "MDU6SXNzdWU1NTg2Mjc5Mzg=", "number": 522, "title": "Using faust for anomaly detection", "user": {"login": "atahmasb", "id": 25216362, "node_id": "MDQ6VXNlcjI1MjE2MzYy", "avatar_url": "https://avatars0.githubusercontent.com/u/25216362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atahmasb", "html_url": "https://github.com/atahmasb", "followers_url": "https://api.github.com/users/atahmasb/followers", "following_url": "https://api.github.com/users/atahmasb/following{/other_user}", "gists_url": "https://api.github.com/users/atahmasb/gists{/gist_id}", "starred_url": "https://api.github.com/users/atahmasb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atahmasb/subscriptions", "organizations_url": "https://api.github.com/users/atahmasb/orgs", "repos_url": "https://api.github.com/users/atahmasb/repos", "events_url": "https://api.github.com/users/atahmasb/events{/privacy}", "received_events_url": "https://api.github.com/users/atahmasb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-02T01:53:58Z", "updated_at": "2020-02-03T19:12:14Z", "closed_at": "2020-02-03T19:12:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not sure where to post this question so I am creating an issue here hopefully someone could help.\r\n\r\nI am building an anomaly detection service which looks at the past N (any integer) transactions of my app users (individually so the anomaly detection granularity is down to every single user) and detect any anomalies if a coming transaction value is higher than certain standard deviation of the past N transaction values. \r\n\r\nThere are some considerations:\r\n\r\n1) How can I use faust to keep track of this data for every single user? is faust good for this use case? Originally I was using Redis but that takes a longer time as every time I have to query the Redis db for the user and calculate the new statistics as well as the network time as my Redis is a hosted version.\r\n\r\n2) if the first case is possible with faust, what happens if my faust app crashes and all the past users data is gone as faust keeps the data in a memory database. Especially some users might perform transactions over a long period of time. For example first transaction happens today and the next one 2 weeks later and so on. There is a chance that app crashes and all the data will be gone! \r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/519", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/519/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/519/events", "html_url": "https://github.com/robinhood/faust/issues/519", "id": 557629170, "node_id": "MDU6SXNzdWU1NTc2MjkxNzA=", "number": 519, "title": "Support async function in window_close_callback", "user": {"login": "billaram", "id": 10163424, "node_id": "MDQ6VXNlcjEwMTYzNDI0", "avatar_url": "https://avatars0.githubusercontent.com/u/10163424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/billaram", "html_url": "https://github.com/billaram", "followers_url": "https://api.github.com/users/billaram/followers", "following_url": "https://api.github.com/users/billaram/following{/other_user}", "gists_url": "https://api.github.com/users/billaram/gists{/gist_id}", "starred_url": "https://api.github.com/users/billaram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/billaram/subscriptions", "organizations_url": "https://api.github.com/users/billaram/orgs", "repos_url": "https://api.github.com/users/billaram/repos", "events_url": "https://api.github.com/users/billaram/events{/privacy}", "received_events_url": "https://api.github.com/users/billaram/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-30T17:02:10Z", "updated_at": "2020-02-27T23:44:24Z", "closed_at": "2020-02-27T23:44:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Current windows callback not supports async function, which affects the asynchronous flow of the application. \r\n\r\n* Also I am working on the fix, I guess the following code snippet, should be enough, but it affects the test cases and the other wrapping function because those are non async.\r\n\r\n`faust/tables/base.py`\r\n\r\n```\r\nfrom inspect iscoroutinefunction\r\nasync def on_window_close(self, key: Any, value: Any) -> None:\r\n        if self._on_window_close:\r\n            if( iscoroutinefunction(self._on_window_close)):\r\n                await self._on_window_close(key, value)\r\n            else:\r\n                self._on_window_close(key, value)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/511", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/511/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/511/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/511/events", "html_url": "https://github.com/robinhood/faust/issues/511", "id": 551309236, "node_id": "MDU6SXNzdWU1NTEzMDkyMzY=", "number": 511, "title": "Running clean-up tasks before app shuts down", "user": {"login": "SaschaSchlemmer", "id": 35063695, "node_id": "MDQ6VXNlcjM1MDYzNjk1", "avatar_url": "https://avatars1.githubusercontent.com/u/35063695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SaschaSchlemmer", "html_url": "https://github.com/SaschaSchlemmer", "followers_url": "https://api.github.com/users/SaschaSchlemmer/followers", "following_url": "https://api.github.com/users/SaschaSchlemmer/following{/other_user}", "gists_url": "https://api.github.com/users/SaschaSchlemmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/SaschaSchlemmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SaschaSchlemmer/subscriptions", "organizations_url": "https://api.github.com/users/SaschaSchlemmer/orgs", "repos_url": "https://api.github.com/users/SaschaSchlemmer/repos", "events_url": "https://api.github.com/users/SaschaSchlemmer/events{/privacy}", "received_events_url": "https://api.github.com/users/SaschaSchlemmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-17T09:44:02Z", "updated_at": "2020-02-06T14:45:57Z", "closed_at": "2020-02-06T14:45:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my _faust_ app I have a blocking background task (in my case a _dash_ app) that I run in a separate process using `multiprocessing`\r\n\r\n```python\r\n@app.task()\r\nasync def start_dashboard():\r\n    global dash_process\r\n    dash_process = multiprocessing.Process(target=dash_app.run_server)\r\n    dash.process.start()\r\n``` \r\n\r\nHow do I ensure that proper cleanup happens when my faust app exits, for instance when I hit \r\n<nobr><kbd>Ctrl</kbd> + <kbd>C</kbd></nobr> on the console running my app? \r\n\r\nI image application signals are what I am looking for, however the [user guide](https://faust.readthedocs.io/en/latest/userguide/applicotion.html#application-signals) does not go into much detail there. In the repo I found `on_before_shutdown` which sounds like a correct signal name but seems not to be exposed on the `faust.App` class. I imagined this to look something like \r\n\r\n```python\r\n@app.on_before_shutdown.connect()\r\nasync def clean_up(*args, **kwargs):\r\n    dash_process.terminate()\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/508", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/508/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/508/events", "html_url": "https://github.com/robinhood/faust/issues/508", "id": 549680654, "node_id": "MDU6SXNzdWU1NDk2ODA2NTQ=", "number": 508, "title": "app.commands hang when using `agent.ask`", "user": {"login": "jbooth-mastery", "id": 53184648, "node_id": "MDQ6VXNlcjUzMTg0NjQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/53184648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbooth-mastery", "html_url": "https://github.com/jbooth-mastery", "followers_url": "https://api.github.com/users/jbooth-mastery/followers", "following_url": "https://api.github.com/users/jbooth-mastery/following{/other_user}", "gists_url": "https://api.github.com/users/jbooth-mastery/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbooth-mastery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbooth-mastery/subscriptions", "organizations_url": "https://api.github.com/users/jbooth-mastery/orgs", "repos_url": "https://api.github.com/users/jbooth-mastery/repos", "events_url": "https://api.github.com/users/jbooth-mastery/events{/privacy}", "received_events_url": "https://api.github.com/users/jbooth-mastery/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-14T16:30:11Z", "updated_at": "2020-01-14T20:14:52Z", "closed_at": "2020-01-14T20:14:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nModify examples/advanced/rpc.py:\r\n```diff\r\ndiff --git a/examples/advanced/rpc.py b/examples/advanced/rpc.py\r\nindex ff9e1ed7..6c425c97 100755\r\n--- a/examples/advanced/rpc.py\r\n+++ b/examples/advanced/rpc.py\r\n@@ -32,5 +32,12 @@ async def _sender() -> None:\r\n     async for value in pow.map([30.3, 40.4, 50.5, 60.6, 70.7, 80.8, 90.9]):\r\n         print(f'RECEIVED REPLY: {value!r}')\r\n \r\n+\r\n+@app.command(faust.cli.argument('x'))\r\n+async def x100(self, x):\r\n+    res = await mul.ask(value=float(x))\r\n+    print(f\"{x} * 100 = {res}\")\r\n+\r\n+\r\n if __name__ == '__main__':\r\n     app.main()\r\n```\r\n\r\nLaunch the worker:\r\n```bash\r\njbooth@m /home/jbooth/oss/faust (master) $ faust -A examples.advanced.rpc --debug worker\r\n\u250c\u0192a\u00b5S\u2020 v1.10.0\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 id          \u2502 RPC99                                    \u2502\r\n\u2502 transport   \u2502 [URL('kafka://localhost:9092')]          \u2502\r\n\u2502 store       \u2502 memory:                                  \u2502\r\n\u2502 web         \u2502 http://localhost:6066/                   \u2502\r\n\u2502 log         \u2502 -stderr- (warn)                          \u2502\r\n\u2502 pid         \u2502 20950                                    \u2502\r\n\u2502 hostname    \u2502 m                                        \u2502\r\n\u2502 platform    \u2502 CPython 3.6.9 (Linux x86_64)             \u2502\r\n\u2502        +    \u2502 Cython (GCC 9.2.1 20191008)              \u2502\r\n\u2502 drivers     \u2502                                          \u2502\r\n\u2502   transport \u2502 aiokafka=1.1.3                           \u2502\r\n\u2502   web       \u2502 aiohttp=3.6.2                            \u2502\r\n\u2502 datadir     \u2502 /home/jbooth/oss/faust/RPC99-data        \u2502\r\n\u2502 appdir      \u2502 /home/jbooth/oss/faust/RPC99-data/v1     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nstarting\u27a2 \ud83d\ude0a\r\n... timer spam snipped ...\r\n```\r\n\r\nAttempt to run the command:\r\n```bash\r\njbooth@m /home/jbooth/oss/faust (master *) $ faust -A examples.advanced.rpc --debug -l info x100 3.14\r\n[2020-01-14 10:25:41,108] [21293] [INFO] Starting aiomonitor at 127.0.0.1:50101 \r\n[2020-01-14 10:25:41,111] [21293] [INFO] [^Worker]: Starting... \r\n[2020-01-14 10:25:41,112] [21293] [INFO] [^-Producer]: Starting... \r\n[2020-01-14 10:25:41,112] [21293] [INFO] [^--ProducerBuffer]: Starting... \r\n[2020-01-14 10:25:41,120] [21293] [INFO] [^-Producer]: Creating topic 'f-reply-ffea289d-a0dc-4ae1-8eb4-055e3b0c2e65' \r\n[2020-01-14 10:25:41,148] [21293] [INFO] [^-Producer]: Topic 'f-reply-ffea289d-a0dc-4ae1-8eb4-055e3b0c2e65' created. \r\n[2020-01-14 10:25:44,152] [21293] [INFO] [^App]: Starting... \r\n[2020-01-14 10:25:44,152] [21293] [INFO] [^-Consumer]: Starting... \r\n[2020-01-14 10:25:44,153] [21293] [INFO] [^--AIOKafkaConsumerThread]: Starting... \r\n[2020-01-14 10:25:44,164] [21293] [INFO] [^-ReplyConsumer]: Starting... \r\n[2020-01-14 10:25:44,164] [21293] [INFO] [^--Conductor]: Starting... \r\n[2020-01-14 10:25:44,165] [21293] [INFO] [^-Fetcher]: Starting... \r\n[2020-01-14 10:25:44,165] [21293] [INFO] [^--Conductor]: Waiting for agents to start... \r\n... command hangs here forever ...\r\n^C-INT- -INT- -INT- -INT- -INT- -INT-\r\n[2020-01-14 10:28:33,053] [21293] [INFO] [^Worker]: Signal received: Signals.SIGINT (2) \r\n[2020-01-14 10:28:33,057] [21293] [INFO] [^Worker]: Stopping... \r\n[2020-01-14 10:28:33,058] [21293] [INFO] [^-Producer]: Stopping... \r\n[2020-01-14 10:28:33,342] [21293] [INFO] [^Worker]: Gathering service tasks... \r\n[2020-01-14 10:28:33,343] [21293] [INFO] [^Worker]: Gathering all futures... \r\n[2020-01-14 10:28:34,352] [21293] [INFO] [^-ReplyConsumer]: Terminating cancelled task: <coroutine object ReplyConsumer._drain_replies at 0x7f7e2804fc50> \r\n[2020-01-14 10:28:34,357] [21293] [INFO] [^--ProducerBuffer]: Terminating cancelled task: <coroutine object ProducerBuffer._handle_pending at 0x7f7e28004200> \r\n[2020-01-14 10:28:34,357] [21293] [INFO] [^--Conductor]: Terminating cancelled task: <coroutine object Conductor._subscriber at 0x7f7e26f9beb8> \r\n[2020-01-14 10:28:34,357] [21293] [INFO] [^App]: Terminating cancelled task: <coroutine object _sender at 0x7f7e26f9be08> \r\n[2020-01-14 10:28:34,357] [21293] [INFO] [^-Consumer]: Terminating cancelled task: <coroutine object Consumer._commit_handler at 0x7f7e26f9bf10> \r\n[2020-01-14 10:28:34,357] [21293] [INFO] [^-Consumer]: Terminating cancelled task: <coroutine object Consumer._commit_livelock_detector at 0x7f7e26f9ba98> \r\n[2020-01-14 10:28:35,358] [21293] [INFO] [^Worker]: Closing event loop \r\njbooth@m /home/jbooth/oss/faust (master *) $ \r\n```\r\n\r\n## Expected behavior\r\n\r\nCommand should complete successfully.\r\n\r\n## Actual behavior\r\n\r\nCommand hangs forever.\r\n\r\nIf you inject a pdb/breakpoint into `faust.transport.conductor.Conductor._subscriber` and skip the first two await lines, the command completes successfully.\r\n\r\nThis worked fine in 1.9\r\n\r\n# Versions\r\n\r\n* Python version 3.6.9\r\n* Faust version 1.10 / master\r\n* Operating system Ubuntu 19.10\r\n* Kafka version confluent enterprise 5.3\r\n* RocksDB version (if applicable) N/A\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/507", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/507/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/507/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/507/events", "html_url": "https://github.com/robinhood/faust/issues/507", "id": 548107949, "node_id": "MDU6SXNzdWU1NDgxMDc5NDk=", "number": 507, "title": "GlobalTable hangs application boot", "user": {"login": "luinnar", "id": 102418, "node_id": "MDQ6VXNlcjEwMjQxOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/102418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luinnar", "html_url": "https://github.com/luinnar", "followers_url": "https://api.github.com/users/luinnar/followers", "following_url": "https://api.github.com/users/luinnar/following{/other_user}", "gists_url": "https://api.github.com/users/luinnar/gists{/gist_id}", "starred_url": "https://api.github.com/users/luinnar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luinnar/subscriptions", "organizations_url": "https://api.github.com/users/luinnar/orgs", "repos_url": "https://api.github.com/users/luinnar/repos", "events_url": "https://api.github.com/users/luinnar/events{/privacy}", "received_events_url": "https://api.github.com/users/luinnar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-10T14:25:13Z", "updated_at": "2020-02-05T15:54:36Z", "closed_at": "2020-02-05T15:54:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nCreate simple app with GlobalTable, like so:\r\n\r\n```python\r\napp = faust.App('test')\r\ntable = app.GlobalTable('test')\r\n\r\ndef main():\r\n    app.main()\r\n```\r\n\r\nand run it using Faust from master branch.\r\n\r\n## Expected behavior\r\n\r\nApp should start.\r\n\r\n## Actual behavior\r\n\r\nApp bootstrap hangs on:\r\n```\r\n[2020-01-10 14:56:32,824] [3385] [INFO] Elected group leader -- performing partition assignments using faust\r\n```\r\n\r\nDuring our investigation we found that the problem is in `def _global_table_standby_assignments` method in `assignor/partition_assignor.py` file. `num_partitions` variable is `None` during app bootstrap.\r\n\r\nSingle GlobalTable works fine on Faust 1.9.0.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n\u250c\u0192a\u00b5S\u2020 v1.9.0\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 id          \u2502 test                                                                                                 \u2502\r\n\u2502 transport   \u2502 [URL('kafka://192.168.1.1:9092'), URL('kafka://192.168.1.2:9093'), URL('kafka://192.168.1.3:9094')]  \u2502\r\n\u2502 store       \u2502 memory:                                                                                              \u2502\r\n\u2502 web         \u2502 http://localhost:6066/                                                                               \u2502\r\n\u2502 log         \u2502 -stderr- (info)                                                                                      \u2502\r\n\u2502 pid         \u2502 3385                                                                                                 \u2502\r\n\u2502 hostname    \u2502 makz0rd                                                                                              \u2502\r\n\u2502 platform    \u2502 CPython 3.6.5 (Darwin x86_64)                                                                        \u2502\r\n\u2502 drivers     \u2502                                                                                                      \u2502\r\n\u2502   transport \u2502 aiokafka=1.1.3                                                                                       \u2502\r\n\u2502   web       \u2502 aiohttp=3.6.2                                                                                        \u2502\r\n\u2502 datadir     \u2502 (cut)/test-data                                     \u2502\r\n\u2502 appdir      \u2502 (cut)/test-data/v1                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n[2020-01-10 14:56:29,747] [3385] [INFO] [^Worker]: Starting...\r\n[2020-01-10 14:56:29,759] [3385] [INFO] [^-App]: Starting...\r\n[2020-01-10 14:56:29,759] [3385] [INFO] [^--Monitor]: Starting...\r\n[2020-01-10 14:56:29,759] [3385] [INFO] [^--Producer]: Starting...\r\n[2020-01-10 14:56:29,759] [3385] [INFO] [^---ProducerBuffer]: Starting...\r\n[2020-01-10 14:56:29,787] [3385] [INFO] [^--CacheBackend]: Starting...\r\n[2020-01-10 14:56:29,787] [3385] [INFO] [^--Web]: Starting...\r\n[2020-01-10 14:56:29,788] [3385] [INFO] [^---Server]: Starting...\r\n[2020-01-10 14:56:29,789] [3385] [INFO] [^--Consumer]: Starting...\r\n[2020-01-10 14:56:29,790] [3385] [INFO] [^---AIOKafkaConsumerThread]: Starting...\r\n[2020-01-10 14:56:29,811] [3385] [INFO] [^--LeaderAssignor]: Starting...\r\n[2020-01-10 14:56:29,812] [3385] [INFO] [^--Producer]: Creating topic 'test-__assignor-__leader'\r\n[2020-01-10 14:56:29,825] [3385] [INFO] [^--ReplyConsumer]: Starting...\r\n[2020-01-10 14:56:29,826] [3385] [INFO] [^--AgentManager]: Starting...\r\n[2020-01-10 14:56:29,826] [3385] [INFO] [^--Conductor]: Starting...\r\n[2020-01-10 14:56:29,826] [3385] [INFO] [^--TableManager]: Starting...\r\n[2020-01-10 14:56:29,826] [3385] [INFO] [^--Conductor]: Waiting for agents to start...\r\n[2020-01-10 14:56:29,827] [3385] [INFO] [^--Conductor]: Waiting for tables to be registered...\r\n[2020-01-10 14:56:30,831] [3385] [INFO] [^--GlobalTable: test]: Starting...\r\n[2020-01-10 14:56:30,835] [3385] [INFO] [^---Store: test]: Starting...\r\n[2020-01-10 14:56:30,836] [3385] [INFO] [^--Producer]: Creating topic 'test-test-changelog'\r\n[2020-01-10 14:56:30,843] [3385] [INFO] [^---Recovery]: Starting...\r\n[2020-01-10 14:56:30,844] [3385] [INFO] [^--Producer]: Creating topic 'test-test-changelog'\r\n[2020-01-10 14:56:30,860] [3385] [INFO] [^--Producer]: Creating topic 'test-__assignor-__leader'\r\n[2020-01-10 14:56:31,815] [3385] [INFO] Updating subscribed topics to: frozenset({'test-test-changelog', 'test-__assignor-__leader'})\r\n[2020-01-10 14:56:31,818] [3385] [INFO] Subscribed to topic(s): {'test-test-changelog', 'test-__assignor-__leader'}\r\n[2020-01-10 14:56:31,849] [3385] [INFO] Discovered coordinator 3 for group test\r\n[2020-01-10 14:56:31,851] [3385] [INFO] Revoking previously assigned partitions set() for group test\r\n[2020-01-10 14:56:32,815] [3385] [INFO] (Re-)joining group test\r\n[2020-01-10 14:56:32,823] [3385] [INFO] Joined group 'test' (generation 3) with member_id faust-1.9.0-8f6c71c3-5caf-4428-b22c-504fe1915783\r\n[2020-01-10 14:56:32,824] [3385] [INFO] Elected group leader -- performing partition assignments using faust\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.6.5\r\n* Faust version: master (rev 37fb187120c64bc94b0ed88f5ba38e6b9cd32e8b)\r\n* Operating system: macOS\r\n* Kafka version: 2.4.0\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/501", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/501/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/501/events", "html_url": "https://github.com/robinhood/faust/issues/501", "id": 542384659, "node_id": "MDU6SXNzdWU1NDIzODQ2NTk=", "number": 501, "title": "Faust worker fails on first bootup if there are too many topics being created", "user": {"login": "DhruvaPatil98", "id": 52442595, "node_id": "MDQ6VXNlcjUyNDQyNTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/52442595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DhruvaPatil98", "html_url": "https://github.com/DhruvaPatil98", "followers_url": "https://api.github.com/users/DhruvaPatil98/followers", "following_url": "https://api.github.com/users/DhruvaPatil98/following{/other_user}", "gists_url": "https://api.github.com/users/DhruvaPatil98/gists{/gist_id}", "starred_url": "https://api.github.com/users/DhruvaPatil98/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DhruvaPatil98/subscriptions", "organizations_url": "https://api.github.com/users/DhruvaPatil98/orgs", "repos_url": "https://api.github.com/users/DhruvaPatil98/repos", "events_url": "https://api.github.com/users/DhruvaPatil98/events{/privacy}", "received_events_url": "https://api.github.com/users/DhruvaPatil98/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-25T20:58:54Z", "updated_at": "2020-01-09T23:44:10Z", "closed_at": "2020-01-09T23:44:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nUse the code below to start\r\n```py\r\nfrom faust_mod import App\r\n\r\napp = App(\r\n    'app_main',\r\n    broker='kafka://kafka:9094',\r\n    store='rocksdb://',\r\n)\r\n\r\nPARTITITONS = 1\r\n\r\nevent_topic = []\r\nevent_table = []\r\nfor i in range(20):\r\n    event_topic.append(app.topic(\r\n        f'event_topic_write{i}',\r\n        internal=True,\r\n        partitions=PARTITITONS,\r\n    ))\r\n\r\n    event_table.append(appTable(\r\n        f'event_table{i}',\r\n        partitions=PARTITITONS,\r\n    ))\r\n\r\n\r\n@app.agent(event_topic[0])\r\nasync def event_topic_write(streams):\r\n    async for payload in streams.events():\r\n        print(f'Got data: {payload}')\r\n        event_table[0][payload.key] = payload.value\r\n        for key in event_table[0]:\r\n            print(f'Local key: {key}, value: {event_table[0][key]}')\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.main()\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe worker boots up normally.\r\n\r\n## Actual behavior\r\n\r\nThe worker doesn't complete bootup and crashes.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 775, in _execute_task\r\n    await task\r\n  File \"/application/faust_mod/transport/conductor.py\", line 232, in _subscriber\r\n    await self.app.consumer.subscribe(await self._update_indices())\r\n  File \"/application/faust_mod/transport/conductor.py\", line 272, in _update_indices\r\n    for channel in self._topics:\r\nRuntimeError: Set changed size during iteration\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.6+\r\n* Faust version: 1.8, 1.9, master\r\n* Operating system\r\n* Kafka version\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/499", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/499/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/499/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/499/events", "html_url": "https://github.com/robinhood/faust/issues/499", "id": 542357103, "node_id": "MDU6SXNzdWU1NDIzNTcxMDM=", "number": 499, "title": "Table routing fails when starting worker for the first time", "user": {"login": "DhruvaPatil98", "id": 52442595, "node_id": "MDQ6VXNlcjUyNDQyNTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/52442595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DhruvaPatil98", "html_url": "https://github.com/DhruvaPatil98", "followers_url": "https://api.github.com/users/DhruvaPatil98/followers", "following_url": "https://api.github.com/users/DhruvaPatil98/following{/other_user}", "gists_url": "https://api.github.com/users/DhruvaPatil98/gists{/gist_id}", "starred_url": "https://api.github.com/users/DhruvaPatil98/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DhruvaPatil98/subscriptions", "organizations_url": "https://api.github.com/users/DhruvaPatil98/orgs", "repos_url": "https://api.github.com/users/DhruvaPatil98/repos", "events_url": "https://api.github.com/users/DhruvaPatil98/events{/privacy}", "received_events_url": "https://api.github.com/users/DhruvaPatil98/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-25T15:29:10Z", "updated_at": "2020-01-08T22:08:12Z", "closed_at": "2020-01-08T22:08:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Description\r\n\r\nAccessing the faust api with a table router decorator causes faust to throw an exception saying  'NoneType' object is not iterable.\r\n\r\n## Steps to reproduce\r\n\r\nRun the code below as app, then hit the api with some key (ex: http://localhost:6067/event/a/)\r\n\r\n```py\r\nfrom faust_mod import App\r\n\r\napp = App(\r\n    'app_main',\r\n    broker='kafka://kafka:9094',\r\n    store='rocksdb://',\r\n)\r\n\r\n\r\nPARTITITONS = 1\r\n\r\n\r\nevent_topic = app.topic(\r\n    'event_topic',\r\n    internal=True,\r\n    partitions=PARTITITONS,\r\n)\r\n\r\nevent_table = app.Table(\r\n    'event_table',\r\n    partitions=PARTITITONS,\r\n)\r\n\r\n\r\n@app.agent(event_topic)\r\nasync def event_topic_write(streams):\r\n    async for payload in streams.events():\r\n        print(f'Got data: {payload}')\r\n        event_table[payload.key] = payload.value\r\n        for key in event_table:\r\n            print(f'Local key: {key}, value: {event_table[key]}')\r\n\r\n\r\n@app.page('/event/{key}/')\r\n@app.table_route(table=event_table, match_info='key')\r\nasync def get_event(self, request, key):\r\n    print(f'Im here {key}')\r\n    return self.json({\r\n        key: event_table[key],\r\n    })\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.main()\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\nIt routes the request to the right partition and executes the function.\r\n\r\n## Actual behavior\r\n\r\nIt throws an exception saying  'NoneType' object is not iterable.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/aiohttp/web_protocol.py\", line 418, in start\r\n    resp = await task\r\n  File \"/usr/local/lib/python3.6/site-packages/aiohttp/web_app.py\", line 458, in _handle\r\n    resp = await handler(request)\r\n  File \"/application/faust_mod/web/drivers/aiohttp.py\", line 241, in _dispatch\r\n    return await handler(request)\r\n  File \"/application/faust_mod/web/views.py\", line 77, in __call__\r\n    return await self.dispatch(request)\r\n  File \"/application/faust_mod/web/views.py\", line 93, in dispatch\r\n    response = await method(cast(Request, request), **kwargs)\r\n  File \"/application/faust_mod/app/base.py\", line 1252, in get\r\n    view.web, request)\r\n  File \"/application/faust_mod/app/router.py\", line 65, in route_req\r\n    dest_url: URL = app.router.key_store(table_name, key)\r\n  File \"/application/faust_mod/app/router.py\", line 30, in key_store\r\n    return self._assignor.key_store(topic, k)\r\n  File \"/application/faust_mod/assignor/partition_assignor.py\", line 366, in key_store\r\n    return URL(self._tps_url[self.app.producer.key_partition(topic, key)])\r\n  File \"/application/faust_mod/transport/drivers/aiokafka.py\", line 819, in key_partition\r\n    serialized_value=None,\r\n  File \"/usr/local/lib/python3.6/site-packages/aiokafka/producer/producer.py\", line 236, in _partition\r\n    all_partitions = list(self._metadata.partitions_for_topic(topic))\r\nTypeError: 'NoneType' object is not iterable\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.6+\r\n* Faust version: 1.9 (pretty sure it happens for older versions as well)\r\n* Operating system\r\n* Kafka version\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/495", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/495/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/495/events", "html_url": "https://github.com/robinhood/faust/issues/495", "id": 538401570, "node_id": "MDU6SXNzdWU1Mzg0MDE1NzA=", "number": 495, "title": "Agent sink methods are not included in Agent.test_context()", "user": {"login": "aikikode", "id": 1445978, "node_id": "MDQ6VXNlcjE0NDU5Nzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1445978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aikikode", "html_url": "https://github.com/aikikode", "followers_url": "https://api.github.com/users/aikikode/followers", "following_url": "https://api.github.com/users/aikikode/following{/other_user}", "gists_url": "https://api.github.com/users/aikikode/gists{/gist_id}", "starred_url": "https://api.github.com/users/aikikode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aikikode/subscriptions", "organizations_url": "https://api.github.com/users/aikikode/orgs", "repos_url": "https://api.github.com/users/aikikode/repos", "events_url": "https://api.github.com/users/aikikode/events{/privacy}", "received_events_url": "https://api.github.com/users/aikikode/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-16T13:08:32Z", "updated_at": "2020-01-08T23:28:30Z", "closed_at": "2020-01-08T23:28:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a simple faust agent with a sink:\r\n```\r\ndef sample_sink(_):\r\n    raise Exception('sample_sink called')\r\n\r\n@app.agent(some_topic, sink=[sample_sink])\r\nasync def dummy_agent(stream):\r\n    async for message in stream:\r\n        yield message\r\n```\r\n2. Add a test for sink to throw this exception:\r\n```\r\nasync def test_sink_called():\r\n    async with dummy_agent.test_context() as agent:\r\n        with pytest.raises(Exception):\r\n            await agent.put('example message')\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe test should pass.\r\n\r\n## Actual behavior\r\n\r\nThe test fails with `Failed: DID NOT RAISE <class 'Exception'>`\r\n\r\n## Full traceback\r\n\r\nThe issue is in how `test_context` propagates `sink`:\r\n1. [`Agent.test_context()`](https://github.com/robinhood/faust/blob/master/faust/agents/agent.py#L452) calls [`self.clone(cls=AgentTestWrapper,...)`](https://github.com/robinhood/faust/blob/master/faust/agents/agent.py#L467)\r\n2. [`clone`](https://github.com/robinhood/faust/blob/master/faust/agents/agent.py#L444) uses [`self.info()`](https://github.com/robinhood/faust/blob/master/faust/agents/agent.py#L450) call to collect agruments for `cls` `__init__` method: `return (cls or type(self))(**{**self.info(), **kwargs})`\r\n3. [`Agent.info()`](https://github.com/robinhood/faust/blob/master/faust/agents/agent.py#L438) returns dictionary with element named `'sinks': self._sinks,` while [`Agent.__init__()`](https://github.com/robinhood/faust/blob/master/faust/agents/agent.py#L194) method expects `sink` argument, not `sinks`.\r\n4. This leads to `AgentTestWrapper` object being created with empty `sink` field.\r\n\r\nI expect the fix would be to rename `self.info()` field `'sinks'` to `'sink'`.\r\n\r\n# Versions\r\n\r\n* Python version: `3.7.3`\r\n* Faust version: `1.9.0` and `master`\r\n* Operating system: `MacOS 10.15.2`\r\n* Kafka version: N/A\r\n* RocksDB version (if applicable): N/A\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/492", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/492/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/492/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/492/events", "html_url": "https://github.com/robinhood/faust/issues/492", "id": 537401197, "node_id": "MDU6SXNzdWU1Mzc0MDExOTc=", "number": 492, "title": "Fix simple typo: senconds -> seconds", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-13T07:55:16Z", "updated_at": "2020-01-08T22:18:15Z", "closed_at": "2020-01-08T22:18:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in examples/windowing/hopping.py, examples/windowing/tumbling.py.\nShould read `seconds` rather than `senconds`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/486", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/486/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/486/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/486/events", "html_url": "https://github.com/robinhood/faust/issues/486", "id": 534936671, "node_id": "MDU6SXNzdWU1MzQ5MzY2NzE=", "number": 486, "title": "Python async code highlighting issue on Readthedocs", "user": {"login": "cdeil", "id": 852409, "node_id": "MDQ6VXNlcjg1MjQwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/852409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdeil", "html_url": "https://github.com/cdeil", "followers_url": "https://api.github.com/users/cdeil/followers", "following_url": "https://api.github.com/users/cdeil/following{/other_user}", "gists_url": "https://api.github.com/users/cdeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdeil/subscriptions", "organizations_url": "https://api.github.com/users/cdeil/orgs", "repos_url": "https://api.github.com/users/cdeil/repos", "events_url": "https://api.github.com/users/cdeil/events{/privacy}", "received_events_url": "https://api.github.com/users/cdeil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-09T13:36:38Z", "updated_at": "2020-01-10T19:51:08Z", "closed_at": "2020-01-09T23:54:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a minor docs style issue.\r\n\r\nThe Python code highlighting at https://faust.readthedocs.io/en/latest/index.html could be better.\r\n\r\nCurrently \"async\" (and \"await\") doesn't seem to be recognised as a keyword, it's in white, but it should be in blue like the \"def\" or \"class\" keywords.\r\n\r\n---\r\n\r\nScreenshot from readthedocs (with issue):\r\n\r\n<img width=\"680\" alt=\"Screenshot 2019-12-09 at 14 34 57\" src=\"https://user-images.githubusercontent.com/852409/70439858-33ceea80-1a91-11ea-9e27-f503ec4946c1.png\">\r\n\r\n---\r\n\r\nScreenshot of docs I get locally (without issue):\r\n\r\n<img width=\"675\" alt=\"Screenshot 2019-12-09 at 14 35 26\" src=\"https://user-images.githubusercontent.com/852409/70439869-38939e80-1a91-11ea-8c08-6cab3288f734.png\">\r\n\r\n---\r\n\r\nYour RTD config looks OK, it's using a modern Sphinx version.\r\n\r\nWhy is the last build a month old?\r\nhttps://readthedocs.org/projects/faust/builds/\r\nhttps://readthedocs.org/projects/faust/builds/9933977/\r\n\r\nMaybe nothing needs to be changed in the docs build config, you just need to trigger a new RTD build?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/482", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/482/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/482/events", "html_url": "https://github.com/robinhood/faust/issues/482", "id": 530612865, "node_id": "MDU6SXNzdWU1MzA2MTI4NjU=", "number": 482, "title": "got an unexpected keyword argument 'rebalancing_timeout_ms'\"", "user": {"login": "cullender-skew", "id": 50367911, "node_id": "MDQ6VXNlcjUwMzY3OTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/50367911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cullender-skew", "html_url": "https://github.com/cullender-skew", "followers_url": "https://api.github.com/users/cullender-skew/followers", "following_url": "https://api.github.com/users/cullender-skew/following{/other_user}", "gists_url": "https://api.github.com/users/cullender-skew/gists{/gist_id}", "starred_url": "https://api.github.com/users/cullender-skew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cullender-skew/subscriptions", "organizations_url": "https://api.github.com/users/cullender-skew/orgs", "repos_url": "https://api.github.com/users/cullender-skew/repos", "events_url": "https://api.github.com/users/cullender-skew/events{/privacy}", "received_events_url": "https://api.github.com/users/cullender-skew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-30T18:12:32Z", "updated_at": "2020-02-28T03:52:16Z", "closed_at": "2020-02-28T03:52:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\n- check out master\r\n- start kafka 2.2.1 (quickstart steps)\r\n- run the hello_world.py example\r\n\r\n## Expected behavior\r\n\r\nthe hello_world example runs successfully\r\n\r\n## Actual behavior\r\n\r\nthe example (and all other examples) crashed with the message\r\n\r\n`[2019-11-30 18:05:12,778] [26692] [ERROR] [^Worker]: Error: TypeError(\"__init__() got an unexpected keyword argument 'rebalancing_timeout_ms'\",) `\r\n\r\nThe commit which added the property is found at https://github.com/robinhood/faust/commit/3680ff3b5e78a8ea5c27b4c761cb474a1b263e88\r\n\r\nIf I remove this rebalancing property, the examples work as expected\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nTypeError: __init__() got an unexpected keyword argument 'rebalancing_timeout_ms'\r\n[2019-11-30 18:05:12,778] [26692] [ERROR] [^Worker]: Error: TypeError(\"__init__() got an unexpected keyword argument 'rebalancing_timeout_ms'\",) \r\nTraceback (most recent call last):\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/worker.py\", line 267, in execute_from_commandline\r\n    self.loop.run_until_complete(self._starting_fut)\r\n  File \"/usr/lib/python3.6/asyncio/base_events.py\", line 484, in run_until_complete\r\n    return future.result()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 727, in start\r\n    await self._default_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 734, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 758, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 786, in maybe_start\r\n    await self.start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 727, in start\r\n    await self._default_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 734, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 758, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 786, in maybe_start\r\n    await self.start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 727, in start\r\n    await self._default_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 734, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 758, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/threads.py\", line 155, in maybe_start\r\n    await self.start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/threads.py\", line 173, in start\r\n    await self._thread_running\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/threads.py\", line 218, in _serve\r\n    await self._default_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 734, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/daniel/PycharmProjects/faust/venv/lib/python3.6/site-packages/mode-4.1.3-py3.6.egg/mode/services.py\", line 751, in _actually_start\r\n    await self.on_start()\r\n  File \"/home/daniel/PycharmProjects/faust/faust/transport/drivers/aiokafka.py\", line 211, in on_start\r\n    self._consumer = self._create_consumer(loop=self.thread_loop)\r\n  File \"/home/daniel/PycharmProjects/faust/faust/transport/drivers/aiokafka.py\", line 226, in _create_consumer\r\n    return self._create_worker_consumer(transport, loop=loop)\r\n  File \"/home/daniel/PycharmProjects/faust/faust/transport/drivers/aiokafka.py\", line 275, in _create_worker_consumer\r\n    **auth_settings,\r\nTypeError: __init__() got an unexpected keyword argument 'rebalancing_timeout_ms'\r\n```\r\n\r\n# Versions\r\n\r\n* Python version 3.6.8\r\n* Faust version master\r\n* Operating system linux 5.0.0-36-generic\r\n* Kafka version 2.2.1\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/481", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/481/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/481/events", "html_url": "https://github.com/robinhood/faust/issues/481", "id": 528950213, "node_id": "MDU6SXNzdWU1Mjg5NTAyMTM=", "number": 481, "title": "How to make requests function faster", "user": {"login": "jslusher", "id": 93294, "node_id": "MDQ6VXNlcjkzMjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/93294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jslusher", "html_url": "https://github.com/jslusher", "followers_url": "https://api.github.com/users/jslusher/followers", "following_url": "https://api.github.com/users/jslusher/following{/other_user}", "gists_url": "https://api.github.com/users/jslusher/gists{/gist_id}", "starred_url": "https://api.github.com/users/jslusher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jslusher/subscriptions", "organizations_url": "https://api.github.com/users/jslusher/orgs", "repos_url": "https://api.github.com/users/jslusher/repos", "events_url": "https://api.github.com/users/jslusher/events{/privacy}", "received_events_url": "https://api.github.com/users/jslusher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-26T20:17:29Z", "updated_at": "2019-11-26T22:46:17Z", "closed_at": "2019-11-26T22:46:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\nfaust == 1.9.0\r\nrequests == 2.22.0\r\n\r\n## Steps to reproduce\r\nThe graphQL portion of this is rather specific, but you could substitute any api call using `requests` and I'm guessing it would be of the same relevance.\r\n\r\nhttps://gist.github.com/jslusher/f542f7081033802ee50306e02230aacd\r\n\r\nThis script works, but when I include the `get_username()` function inline (which is necessary to include before sending the processed message on to the sink topic), it slows way down. Searching for log messages like this\r\n\r\n```\r\nTimer _main_keepalive woke up too late, with a drift of +302.05665084533393\r\n```\r\n\r\nI see that some are saying the slowness is because I'm calling a synchronous function inside an asynchronous function. Is that what's wrong here? All I know is that when I remove `get_username()` from `async for thread in threads` the processing is exponentially faster. \r\n\r\nHere's the (scrubbed) output when I execute the script above:\r\nhttps://gist.github.com/jslusher/253cc27a0c352c4200fa866df0a8875b\r\n\r\n## Expected behavior\r\n\r\nI would expect the agent to process threads as quickly with `get_username()` than without it.\r\n\r\n## Actual behavior\r\nThe agent is incredibly slow when `get_username()` is used.\r\n\r\n# Versions\r\n\r\n* Python version - 3.7\r\n* Faust version - 1.9.0\r\n* Operating system - centos7\r\n* Kafka version - 2.3.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/477", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/477/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/477/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/477/events", "html_url": "https://github.com/robinhood/faust/issues/477", "id": 526017519, "node_id": "MDU6SXNzdWU1MjYwMTc1MTk=", "number": 477, "title": "[Question]: hello_world example", "user": {"login": "rileypeterson", "id": 29719483, "node_id": "MDQ6VXNlcjI5NzE5NDgz", "avatar_url": "https://avatars1.githubusercontent.com/u/29719483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rileypeterson", "html_url": "https://github.com/rileypeterson", "followers_url": "https://api.github.com/users/rileypeterson/followers", "following_url": "https://api.github.com/users/rileypeterson/following{/other_user}", "gists_url": "https://api.github.com/users/rileypeterson/gists{/gist_id}", "starred_url": "https://api.github.com/users/rileypeterson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rileypeterson/subscriptions", "organizations_url": "https://api.github.com/users/rileypeterson/orgs", "repos_url": "https://api.github.com/users/rileypeterson/repos", "events_url": "https://api.github.com/users/rileypeterson/events{/privacy}", "received_events_url": "https://api.github.com/users/rileypeterson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-20T18:49:05Z", "updated_at": "2019-12-24T06:57:05Z", "closed_at": "2019-12-24T06:57:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "##### Very simple question\r\n\r\nI'm trying to get the hello world example going...\r\n\r\nIs the output supposed to have the logging level for messages set to `WARNING`?? Or am I doing something wrong?\r\n\r\n```\r\n----MacBook-Pro:faust_example ---$ faust --debug -A hello_world worker\r\n\u250c\u0192a\u00b5S\u2020 v1.9.0\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 id          \u2502 hello-app                                              \u2502\r\n\u2502 transport   \u2502 [URL('kafka://localhost')]                             \u2502\r\n\u2502 store       \u2502 memory:                                                \u2502\r\n\u2502 web         \u2502 http://----macbook-pro.local:6066                   \u2502\r\n\u2502 log         \u2502 -stderr- (warn)                                        \u2502\r\n\u2502 pid         \u2502 79506                                                  \u2502\r\n\u2502 hostname    \u2502 ----MacBook-Pro.local                               \u2502\r\n\u2502 platform    \u2502 CPython 3.6.6 (Darwin x86_64)                          \u2502\r\n\u2502 drivers     \u2502                                                        \u2502\r\n\u2502   transport \u2502 aiokafka=1.1.3                                         \u2502\r\n\u2502   web       \u2502 aiohttp=3.6.2                                          \u2502\r\n\u2502 datadir     \u2502 /Users/---/Documents/faust_example/hello-app-data    \u2502\r\n\u2502 appdir      \u2502 /Users/---/Documents/faust_example/hello-app-data/v1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nstarting\u27a2 \ud83d\ude0a\r\n[2019-11-20 10:42:32,363] [79506] [WARNING] Hello from Faust to you\r\n[2019-11-20 10:42:33,361] [79506] [WARNING] Hello from Faust to you\r\n[2019-11-20 10:42:34,364] [79506] [WARNING] Hello from Faust to you\r\n[2019-11-20 10:42:35,362] [79506] [WARNING] Hello from Faust to you\r\n[2019-11-20 10:42:36,369] [79506] [WARNING] Hello from Faust to you\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/475", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/475/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/475/events", "html_url": "https://github.com/robinhood/faust/issues/475", "id": 525787670, "node_id": "MDU6SXNzdWU1MjU3ODc2NzA=", "number": 475, "title": "Global Tables not working as expected with more than 2 workers", "user": {"login": "DhruvaPatil98", "id": 52442595, "node_id": "MDQ6VXNlcjUyNDQyNTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/52442595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DhruvaPatil98", "html_url": "https://github.com/DhruvaPatil98", "followers_url": "https://api.github.com/users/DhruvaPatil98/followers", "following_url": "https://api.github.com/users/DhruvaPatil98/following{/other_user}", "gists_url": "https://api.github.com/users/DhruvaPatil98/gists{/gist_id}", "starred_url": "https://api.github.com/users/DhruvaPatil98/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DhruvaPatil98/subscriptions", "organizations_url": "https://api.github.com/users/DhruvaPatil98/orgs", "repos_url": "https://api.github.com/users/DhruvaPatil98/repos", "events_url": "https://api.github.com/users/DhruvaPatil98/events{/privacy}", "received_events_url": "https://api.github.com/users/DhruvaPatil98/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-20T12:58:01Z", "updated_at": "2019-12-12T22:56:28Z", "closed_at": "2019-12-12T22:56:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\nThe code in my app to reproduce the bug is given below\r\n```pytb\r\napp = App(\r\n    'app_main',\r\n    broker='kafka://kafka:9092',\r\n    store='rocksdb://',\r\n)\r\n\r\nPARTITITONS = 3\r\n\r\nevent_topic = app.topic(\r\n    'event_topic_write2',\r\n    internal=True,\r\n    partitions=PARTITITONS,\r\n)\r\n\r\nglobal_table = app.GlobalTable(\r\n    'global_table2',\r\n    partitions=PARTITITONS,\r\n)\r\n\r\n@app.agent(event_topic)\r\nasync def event_topic_write(streams):\r\n    async for payload in streams.events():\r\n        print(f\"Got data: {payload}\")\r\n        global_table[payload.key] = payload.value\r\n        for key in global_table:\r\n            print(f\"Global key: {key}, value: {global_table[key]}\")\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\nAll the keys should get printed in all the workers (3 workers on 3 different machines) when looping through them.\r\n\r\n## Actual behavior\r\n\r\nOnly some keys get printed across the workers. The reason seems to be that not all changelog partitions are present as standbys for all the workers.\r\n\r\n# Versions\r\n\r\n* Python version: 3.6.9\r\n* Faust version: 1.9 and master (haven't tested with 1.8, but I'm quite sure the bug is there in that as well)\r\n* Operating system:\r\n* Kafka version: \r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/471", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/471/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/471/events", "html_url": "https://github.com/robinhood/faust/issues/471", "id": 522060322, "node_id": "MDU6SXNzdWU1MjIwNjAzMjI=", "number": 471, "title": "Consume kafka message", "user": {"login": "huangxiaohen2738", "id": 6038418, "node_id": "MDQ6VXNlcjYwMzg0MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6038418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huangxiaohen2738", "html_url": "https://github.com/huangxiaohen2738", "followers_url": "https://api.github.com/users/huangxiaohen2738/followers", "following_url": "https://api.github.com/users/huangxiaohen2738/following{/other_user}", "gists_url": "https://api.github.com/users/huangxiaohen2738/gists{/gist_id}", "starred_url": "https://api.github.com/users/huangxiaohen2738/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huangxiaohen2738/subscriptions", "organizations_url": "https://api.github.com/users/huangxiaohen2738/orgs", "repos_url": "https://api.github.com/users/huangxiaohen2738/repos", "events_url": "https://api.github.com/users/huangxiaohen2738/events{/privacy}", "received_events_url": "https://api.github.com/users/huangxiaohen2738/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-13T09:12:46Z", "updated_at": "2019-11-18T03:20:09Z", "closed_at": "2019-11-18T03:20:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\napp = faust.App(\r\n    'myapp',\r\n    broker='kafka://localhost:9092',\r\n)\r\n\r\nclass Shop(faust.Record):\r\n    sid: str\r\n    env: str\r\n    domain: str\r\n    seller_id: str\r\n\r\nshop_topic = app.topic(\r\n    'store-info-update-event',\r\n    #value_type=Shop)\r\n    value_serializer='raw')\r\n\r\n\r\n@app.agent(shop_topic)\r\nasync def process_shop(stream):\r\n    async for shop in stream.events():\r\n        msg = shop.message\r\n        print(msg.value)\r\n\r\n```\r\n\r\nmsg.value is b'\\x00\\x00\\x00\\x029\\x12133383362\\x0c\\xe5\\xa5\\xb3\\xe8\\xa3\\x85\\x12ltech\\x1ad[s159384123362]\\x06pre\\x0c\\xe5\\xa5\\xb3\\xe8\\xa3\\x85\\x142872266210'\r\n\r\nBut I use the confluent-kafka can consume it.  why?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/469", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/469/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/469/events", "html_url": "https://github.com/robinhood/faust/issues/469", "id": 518559209, "node_id": "MDU6SXNzdWU1MTg1NTkyMDk=", "number": 469, "title": "Agent page \"Add\" example throws \"AttributeError: 'dict' object has no attribute 'a'\"", "user": {"login": "mmatthews06", "id": 614947, "node_id": "MDQ6VXNlcjYxNDk0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/614947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmatthews06", "html_url": "https://github.com/mmatthews06", "followers_url": "https://api.github.com/users/mmatthews06/followers", "following_url": "https://api.github.com/users/mmatthews06/following{/other_user}", "gists_url": "https://api.github.com/users/mmatthews06/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmatthews06/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmatthews06/subscriptions", "organizations_url": "https://api.github.com/users/mmatthews06/orgs", "repos_url": "https://api.github.com/users/mmatthews06/repos", "events_url": "https://api.github.com/users/mmatthews06/events{/privacy}", "received_events_url": "https://api.github.com/users/mmatthews06/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-06T15:48:51Z", "updated_at": "2019-11-15T22:26:45Z", "closed_at": "2019-11-15T22:26:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [X ] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust. (Only tried 1.9.0, which is 7 days old right now, but will update if I get time to try with master.)\r\n\r\n## Steps to reproduce\r\n\r\nInstall Kafka/Zookeeper and run locally with the default configs, exactly as prescribed on their site: https://kafka.apache.org/quickstart#quickstart_createtopic\r\n1. Download the [Apache Kafka tarball](https://www.apache.org/dyn/closer.cgi?path=/kafka/2.3.0/kafka_2.12-2.3.0.tgz)\r\n2. Untar the file:\r\n ```{bash}\r\n tar -zxvf kafka_2.12-2.3.0.tgz\r\n cd kafka_2.12-2.3.0\r\n ```\r\n3. Start Zookeeper:\r\n ```{bash}\r\n bin/zookeeper-server-start.sh config/zookeeper.properties\r\n ```\r\n4. In a different terminal, start Kafka:\r\n ```{bash}\r\n bin/kafka-server-start.sh config/server.properties\r\n ```\r\n\r\nTry out the *Add* example on the Faust documentation *Agents* page, here: https://faust.readthedocs.io/en/latest/userguide/agents.html\r\n1. Copy the Agent into a file:\r\n ```{python}\r\n # examples/agent.py\r\nimport faust\r\n\r\n# The model describes the data sent to our agent,\r\n# We will use a JSON serialized dictionary\r\n# with two integer fields: a, and b.\r\nclass Add(faust.Record):\r\n    a: int\r\n    b: int\r\n\r\n# Next, we create the Faust application object that\r\n# configures our environment.\r\napp = faust.App('agent-example')\r\n\r\n# The Kafka topic used by our agent is named 'adding',\r\n# and we specify that the values in this topic are of the Add model.\r\n# (you can also specify the key_type if your topic uses keys).\r\ntopic = app.topic('adding', value_type=Add)\r\n\r\n@app.agent(topic)\r\nasync def adding(stream):\r\n    async for value in stream:\r\n        # here we receive Add objects, add a + b.\r\n        yield value.a + value.b\r\n ```\r\n2. Copy the client into a file:\r\n ```\r\n # examples/send_to_agent.py\r\nimport asyncio\r\nfrom .agent import Add, adding\r\n\r\nasync def send_value() -> None:\r\n    print(await adding.ask(Add(a=4, b=4)))\r\n\r\nif __name__ == '__main__':\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(send_value())\r\n ```\r\n3. Start the Faust server: `faust -A agent worker -l info`\r\n4. Try the client: `python send_to_agent.py`\r\n5. Notice the **AttributeError: 'dict' object has no attribute 'a'** error, because the *Add* record is just a dictionary.\r\n6. Add `use_reply_headers=True` to the agent decorator:\r\n ```{python}\r\n- @app.agent(topic)\r\nasync def adding(stream: faust.StreamT[Add]) -> AsyncIterable:\r\n---\r\n+ @app.agent(topic, use_reply_headers=True)\r\nasync def adding(stream: faust.StreamT[Add]) -> AsyncIterable:\r\n ```\r\n6. Start the Faust server and run the client again, as above\r\n7. Notice the dictionary is actually cast as an Add record, and the Agent page example works.\r\n\r\n## Expected behavior\r\n\r\nYou should see the proper addition response, with the dictionary cast as an `Add` record, probably without having to add `use_reply_headers=True` to the agent decorator.\r\n\r\n**Or just a documentation update, would be nice.**\r\n\r\n## Actual behavior\r\n\r\nYou have to add `use_reply_headers=True` to the agent decorator to make this work.\r\n\r\n**Again, maybe just a docs update.**\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[^---Agent*: faust_add.adding]: Crashed reason=AttributeError(\"'dict' object has no attribute 'a'\")\r\nTraceback (most recent call last):\r\n  File \"/rhome/q1016281/Code/nextflow/NextFlow_Runner/env/lib/python3.7/site-packages/faust/agents/agent.py\", line 636, in _execute_task\r\n    await coro\r\n  File \"/rhome/q1016281/Code/nextflow/NextFlow_Runner/env/lib/python3.7/site-packages/faust/agents/agent.py\", line 653, in _slurp\r\n    async for value in it:\r\n  File \"/rhome/q1016281/Code/nextflow/NextFlow_Runner/src/faust_add.py\", line 30, in adding\r\n    yield value.a + value.b\r\nAttributeError: 'dict' object has no attribute 'a'\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.1 (also tried with 3.7.5)\r\n* Faust version: 1.9.0\r\n* Operating system: Ubuntu 16.04.6\r\n* Kafka version: kafka_2.12-2.3.0 (Note: Kafka 2.3.1 is the latest release, as of a couple weeks ago. I may try with the new point release later.)\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/468", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/468/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/468/events", "html_url": "https://github.com/robinhood/faust/issues/468", "id": 518484214, "node_id": "MDU6SXNzdWU1MTg0ODQyMTQ=", "number": 468, "title": "faust v1.9.0 not working with sasl authentication", "user": {"login": "jabonte", "id": 57446260, "node_id": "MDQ6VXNlcjU3NDQ2MjYw", "avatar_url": "https://avatars2.githubusercontent.com/u/57446260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jabonte", "html_url": "https://github.com/jabonte", "followers_url": "https://api.github.com/users/jabonte/followers", "following_url": "https://api.github.com/users/jabonte/following{/other_user}", "gists_url": "https://api.github.com/users/jabonte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jabonte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jabonte/subscriptions", "organizations_url": "https://api.github.com/users/jabonte/orgs", "repos_url": "https://api.github.com/users/jabonte/repos", "events_url": "https://api.github.com/users/jabonte/events{/privacy}", "received_events_url": "https://api.github.com/users/jabonte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-06T13:49:45Z", "updated_at": "2020-02-25T19:35:38Z", "closed_at": "2020-02-25T19:35:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Steps to reproduce\r\n\r\nconfigure faust to use sasl\r\n\r\napp = faust.App(\r\n    <name>,\r\n    broker=broker,\r\n    key_serializer='json',\r\n    value_serializer='json',\r\n    broker_credentials=faust.SASLCredentials(\r\n        username=<uid>,\r\n        password=<pwd>,\r\n    )\r\n)\r\n\r\n## Expected behavior\r\n\r\nThat it works.\r\n(It works as expected with v1.8.0)\r\n\r\n## Actual behavior\r\n\r\nprogram dies with a AssertionError during startup of the worker\r\n\r\n## Full traceback\r\n\r\n[2019-11-06 14:27:33,119] [5519] [ERROR] [^Worker]: Error: AssertionError(\"yield from wasn't used with future\",) \r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/worker.py\", line 267, in execute_from_commandline\r\n    self.loop.run_until_complete(self._starting_fut)\r\n  File \"/usr/lib64/python3.6/asyncio/base_events.py\", line 484, in run_until_complete\r\n    return future.result()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 727, in start\r\n    await self._default_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 734, in _default_start\r\n    await self._actually_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 758, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 786, in maybe_start\r\n    await self.start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 727, in start\r\n    await self._default_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 734, in _default_start\r\n    await self._actually_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 758, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 786, in maybe_start\r\n    await self.start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 727, in start\r\n    await self._default_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 734, in _default_start\r\n    await self._actually_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 751, in _actually_start\r\n    await self.on_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/faust/transport/drivers/aiokafka.py\", line 742, in on_start\r\n    await producer.start()\r\n  File \"/usr/local/lib/python3.6/site-packages/aiokafka/producer/producer.py\", line 171, in start\r\n    await self.client.bootstrap()\r\n  File \"/usr/local/lib/python3.6/site-packages/aiokafka/client.py\", line 203, in bootstrap\r\n    version_hint=version_hint)\r\n  File \"/usr/local/lib/python3.6/site-packages/aiokafka/conn.py\", line 90, in create_conn\r\n    await conn.connect()\r\n  File \"/usr/local/lib/python3.6/site-packages/aiokafka/conn.py\", line 214, in connect\r\n    await self._do_sasl_handshake()\r\n  File \"/usr/local/lib/python3.6/site-packages/aiokafka/conn.py\", line 281, in _do_sasl_handshake\r\n    payload, expect_response = res\r\nAssertionError: yield from wasn't used with future\r\n\r\n\r\n# Versions\r\n\r\nCPython 3.6.8 (Linux x86_64)\r\nfaust=1.9.0\r\naiokafka=1.1.3                                                                                                                                                             aiohttp=3.6.2  \r\nlinux=3.10.0-957.27.2.el7.x86_64", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/464", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/464/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/464/events", "html_url": "https://github.com/robinhood/faust/issues/464", "id": 515378259, "node_id": "MDU6SXNzdWU1MTUzNzgyNTk=", "number": 464, "title": "Update python-rocksdb requirement to latest", "user": {"login": "austinnichols101", "id": 6962379, "node_id": "MDQ6VXNlcjY5NjIzNzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6962379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinnichols101", "html_url": "https://github.com/austinnichols101", "followers_url": "https://api.github.com/users/austinnichols101/followers", "following_url": "https://api.github.com/users/austinnichols101/following{/other_user}", "gists_url": "https://api.github.com/users/austinnichols101/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinnichols101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinnichols101/subscriptions", "organizations_url": "https://api.github.com/users/austinnichols101/orgs", "repos_url": "https://api.github.com/users/austinnichols101/repos", "events_url": "https://api.github.com/users/austinnichols101/events{/privacy}", "received_events_url": "https://api.github.com/users/austinnichols101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-31T12:06:21Z", "updated_at": "2019-11-07T23:15:00Z", "closed_at": "2019-11-07T23:15:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "ref: `faust/requirements/extras/rocksdb.txt`\r\n\r\nThe specified version `python-rocksdb>=0.6.7` is quite old, from June 25, 2017.\r\n\r\nThe latest version is `python-rocksdb>=0.7.0` from Feb 1, 2019.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/460", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/460/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/460/events", "html_url": "https://github.com/robinhood/faust/issues/460", "id": 513992579, "node_id": "MDU6SXNzdWU1MTM5OTI1Nzk=", "number": 460, "title": "Views raise exception when using SEARCH method", "user": {"login": "ipeluffo", "id": 889705, "node_id": "MDQ6VXNlcjg4OTcwNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/889705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipeluffo", "html_url": "https://github.com/ipeluffo", "followers_url": "https://api.github.com/users/ipeluffo/followers", "following_url": "https://api.github.com/users/ipeluffo/following{/other_user}", "gists_url": "https://api.github.com/users/ipeluffo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipeluffo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipeluffo/subscriptions", "organizations_url": "https://api.github.com/users/ipeluffo/orgs", "repos_url": "https://api.github.com/users/ipeluffo/repos", "events_url": "https://api.github.com/users/ipeluffo/events{/privacy}", "received_events_url": "https://api.github.com/users/ipeluffo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-29T15:09:08Z", "updated_at": "2019-10-29T17:41:12Z", "closed_at": "2019-10-29T17:41:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nI wrote this small Faust app:\r\n```python\r\nimport faust\r\n\r\napp = faust.App(\r\n    id='api-issue',\r\n)\r\n\r\n@app.page('/test')\r\nasync def test(web, request):\r\n    return web.text('Working!')\r\n```\r\n\r\nApp was started successfully:\r\n```bash\r\n\u279c pipenv run faust -A app worker -l info\r\n\u250c\u0192a\u00b5S\u2020 v1.8.1\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 id          \u2502 api-issue                                                              \u2502\r\n\u2502 transport   \u2502 [URL('kafka://localhost:9092')]                                        \u2502\r\n\u2502 store       \u2502 memory:                                                                \u2502\r\n\u2502 web         \u2502 http://localhost:6066/                                                 \u2502\r\n\u2502 log         \u2502 -stderr- (info)                                                        \u2502\r\n\u2502 pid         \u2502 95220                                                                  \u2502\r\n\u2502 hostname    \u2502 ip-192-168-1-179.eu-west-1.compute.internal                            \u2502\r\n\u2502 platform    \u2502 CPython 3.7.4 (Darwin x86_64)                                          \u2502\r\n\u2502        +    \u2502 Cython (Clang 10.0.1 (clang-1001.0.46.4))                              \u2502\r\n\u2502 drivers     \u2502                                                                        \u2502\r\n\u2502   transport \u2502 aiokafka=1.0.6                                                         \u2502\r\n\u2502   web       \u2502 aiohttp=3.6.2                                                          \u2502\r\n\u2502 datadir     \u2502 /Users/ignacio/dev/playground/faust-api-search-issue/api-issue-data    \u2502\r\n\u2502 appdir      \u2502 /Users/ignacio/dev/playground/faust-api-search-issue/api-issue-data/v1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n[2019-10-29 14:36:19,862] [95220] [INFO] [^Worker]: Starting...\r\n[2019-10-29 14:36:19,865] [95220] [INFO] [^-App]: Starting...\r\n[2019-10-29 14:36:19,866] [95220] [INFO] [^--Monitor]: Starting...\r\n[2019-10-29 14:36:19,866] [95220] [INFO] [^--Producer]: Starting...\r\n[2019-10-29 14:36:19,866] [95220] [INFO] [^---ProducerBuffer]: Starting...\r\n[2019-10-29 14:36:19,886] [95220] [INFO] [^--CacheBackend]: Starting...\r\n[2019-10-29 14:36:19,886] [95220] [INFO] [^--Web]: Starting...\r\n[2019-10-29 14:36:19,886] [95220] [INFO] [^---Server]: Starting...\r\n[2019-10-29 14:36:19,887] [95220] [INFO] [^--Consumer]: Starting...\r\n[2019-10-29 14:36:19,888] [95220] [INFO] [^---AIOKafkaConsumerThread]: Starting...\r\n[2019-10-29 14:36:20,869] [95220] [INFO] [^--LeaderAssignor]: Starting...\r\n[2019-10-29 14:36:20,870] [95220] [INFO] [^--Producer]: Creating topic 'api-issue-__assignor-__leader'\r\n[2019-10-29 14:36:20,918] [95220] [INFO] [^--Producer]: Topic 'api-issue-__assignor-__leader' created.\r\n[2019-10-29 14:36:20,919] [95220] [INFO] [^--ReplyConsumer]: Starting...\r\n[2019-10-29 14:36:20,919] [95220] [INFO] [^--AgentManager]: Starting...\r\n[2019-10-29 14:36:20,919] [95220] [INFO] [^--Conductor]: Starting...\r\n[2019-10-29 14:36:20,919] [95220] [INFO] [^--TableManager]: Starting...\r\n[2019-10-29 14:36:21,922] [95220] [INFO] [^---Recovery]: Starting...\r\n[2019-10-29 14:36:22,925] [95220] [INFO] [^--Producer]: Creating topic 'api-issue-__assignor-__leader'\r\n[2019-10-29 14:36:23,912] [95220] [INFO] Updating subscribed topics to: frozenset({'api-issue-__assignor-__leader'})\r\n[2019-10-29 14:36:23,913] [95220] [INFO] Subscribed to topic(s): {'api-issue-__assignor-__leader'}\r\n[2019-10-29 14:36:23,926] [95220] [INFO] Discovered coordinator 1001 for group api-issue\r\n[2019-10-29 14:36:23,927] [95220] [INFO] Revoking previously assigned partitions set() for group api-issue\r\n[2019-10-29 14:36:24,919] [95220] [INFO] (Re-)joining group api-issue\r\n[2019-10-29 14:36:24,927] [95220] [INFO] Joined group 'api-issue' (generation 1) with member_id faust-1.8.1-d689b013-fba6-4051-ac15-5eabc1886e46\r\n[2019-10-29 14:36:24,927] [95220] [INFO] Elected group leader -- performing partition assignments using faust\r\n[2019-10-29 14:36:24,938] [95220] [INFO] Successfully synced group api-issue with generation 1\r\n[2019-10-29 14:36:24,939] [95220] [INFO] Setting newly assigned partitions {TopicPartition(topic='api-issue-__assignor-__leader', partition=0)} for group api-issue\r\n[2019-10-29 14:36:25,493] [95220] [INFO] [^---Recovery]: Resuming flow...\r\n[2019-10-29 14:36:25,494] [95220] [INFO] [^---Recovery]: Seek stream partitions to committed offsets.\r\n[2019-10-29 14:36:25,881] [95220] [INFO] [^--Fetcher]: Starting...\r\n[2019-10-29 14:36:25,881] [95220] [INFO] [^---Recovery]: Worker ready\r\n[2019-10-29 14:36:25,882] [95220] [INFO] [^Worker]: Ready\r\n```\r\n\r\nThen call the view using `SEARCH` method:\r\n```bash\r\n\u279c curl -XSEARCH localhost:6066\r\n```\r\n\r\n## Expected behavior\r\n\r\nI expected to behave as other methods, example below when using `PUT`:\r\n```\r\n\u279c curl -XPUT localhost:6066\r\n{\"error\": \"Method PUT not allowed.\"}\r\n```\r\n\r\n## Actual behavior\r\n\r\nFaust raised and exception:\r\n```\r\n[2019-10-29 14:36:47,703] [95220] [ERROR] Error handling request\r\nTraceback (most recent call last):\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/aiohttp/web_protocol.py\", line 418, in start\r\n    resp = await task\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/aiohttp/web_app.py\", line 458, in _handle\r\n    resp = await handler(request)\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/faust/web/drivers/aiohttp.py\", line 241, in _dispatch\r\n    return await handler(request)\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/faust/web/views.py\", line 76, in __call__\r\n    return await self.dispatch(request)\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/faust/web/views.py\", line 87, in dispatch\r\n    method = cast(Callable[..., Awaitable[Response]], self.methods[method])\r\nKeyError: 'search'\r\n```\r\n\r\nWhen I call the view using `SEARCH` method, I got the following:\r\n```bash\r\n\u279c curl -XSEARCH localhost:6066\r\n500 Internal Server Error\r\n\r\nServer got itself in trouble%\r\n```\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[2019-10-29 14:36:47,703] [95220] [ERROR] Error handling request\r\nTraceback (most recent call last):\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/aiohttp/web_protocol.py\", line 418, in start\r\n    resp = await task\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/aiohttp/web_app.py\", line 458, in _handle\r\n    resp = await handler(request)\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/faust/web/drivers/aiohttp.py\", line 241, in _dispatch\r\n    return await handler(request)\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/faust/web/views.py\", line 76, in __call__\r\n    return await self.dispatch(request)\r\n  File \"/Users/ignacio/.virtualenvs/faust-api-search-issue-6iz8n7Lc/lib/python3.7/site-packages/faust/web/views.py\", line 87, in dispatch\r\n    method = cast(Callable[..., Awaitable[Response]], self.methods[method])\r\nKeyError: 'search'\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.7\r\n* Faust version: 1.8.1\r\n* Operating system: macOS Mojave 10.14.6\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/458", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/458/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/458/events", "html_url": "https://github.com/robinhood/faust/issues/458", "id": 511087179, "node_id": "MDU6SXNzdWU1MTEwODcxNzk=", "number": 458, "title": "Faust app does not consume kafka messages after  livelock: COMMIT OFFSET NOT ADVANCING", "user": {"login": "amitkg29", "id": 8871294, "node_id": "MDQ6VXNlcjg4NzEyOTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8871294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitkg29", "html_url": "https://github.com/amitkg29", "followers_url": "https://api.github.com/users/amitkg29/followers", "following_url": "https://api.github.com/users/amitkg29/following{/other_user}", "gists_url": "https://api.github.com/users/amitkg29/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitkg29/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitkg29/subscriptions", "organizations_url": "https://api.github.com/users/amitkg29/orgs", "repos_url": "https://api.github.com/users/amitkg29/repos", "events_url": "https://api.github.com/users/amitkg29/events{/privacy}", "received_events_url": "https://api.github.com/users/amitkg29/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-23T05:42:27Z", "updated_at": "2020-02-05T03:27:05Z", "closed_at": "2019-11-08T04:06:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "FAUST version: 1.7.1\r\nKafka Version: SCALA -2.12, KAFKA-2.1.0\r\nPYTHON - 3.7.3\r\n\r\nI see the error sometimes:\r\n[2019-10-19 18:12:34,104: WARNING]: [^--Consumer]: wait_empty: Waiting for [(0, <ConsumerMessage: TopicPartition(topic='text', partition=14) offset=60157>)] tasks\r\n[2019-10-19 18:12:34,649: WARNING]: [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING\r\n\r\nAt this time, KAFKA LAG for the given partition does not change and the consumer stays in the KAFKA consumer group for the given partition.\r\nThe only way to commit the offsets is to restart the APP.\r\nIs there a way to handle it programmatically in FAUST APP? Or any other suggestions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/455", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/455/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/455/events", "html_url": "https://github.com/robinhood/faust/issues/455", "id": 510522208, "node_id": "MDU6SXNzdWU1MTA1MjIyMDg=", "number": 455, "title": "Huge memory leak when streaming from topics with many partitions", "user": {"login": "Unknown22", "id": 10746021, "node_id": "MDQ6VXNlcjEwNzQ2MDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/10746021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Unknown22", "html_url": "https://github.com/Unknown22", "followers_url": "https://api.github.com/users/Unknown22/followers", "following_url": "https://api.github.com/users/Unknown22/following{/other_user}", "gists_url": "https://api.github.com/users/Unknown22/gists{/gist_id}", "starred_url": "https://api.github.com/users/Unknown22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Unknown22/subscriptions", "organizations_url": "https://api.github.com/users/Unknown22/orgs", "repos_url": "https://api.github.com/users/Unknown22/repos", "events_url": "https://api.github.com/users/Unknown22/events{/privacy}", "received_events_url": "https://api.github.com/users/Unknown22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-22T09:05:42Z", "updated_at": "2019-10-22T13:36:32Z", "closed_at": "2019-10-22T13:36:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] Faust version 1.8.1\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nI did a simple app with agent reading from the topic. Everything is perfect up to 8 partitions per topic. When I tried to stream from topic with 16 partitions my RAM blows up, there are some huge memory leaks and messages are not printed. I didn't try topics with more than 8 and less than 16 partitions so don't know when the problem begins.\r\n\r\nI tried Faust 1.7.4 and there is not a problem, so it's a new bug in 1.8\r\n\r\n## Expected behavior\r\n\r\nI expect messages from the topic are printed.\r\n\r\n## Actual behavior\r\n\r\nWhen assigning an agent to a topic with 16 partitions messages are not printed and RAM blows up causing huge memory leak.\r\n\r\n# Versions\r\n\r\n* 3.7\r\n* 1.8.1\r\n* Ubuntu 19.04\r\n* 2.3.x\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/453", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/453/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/453/events", "html_url": "https://github.com/robinhood/faust/issues/453", "id": 509611781, "node_id": "MDU6SXNzdWU1MDk2MTE3ODE=", "number": 453, "title": "Faust silent failure on startup introduced with PR #403", "user": {"login": "austinnichols101", "id": 6962379, "node_id": "MDQ6VXNlcjY5NjIzNzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6962379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinnichols101", "html_url": "https://github.com/austinnichols101", "followers_url": "https://api.github.com/users/austinnichols101/followers", "following_url": "https://api.github.com/users/austinnichols101/following{/other_user}", "gists_url": "https://api.github.com/users/austinnichols101/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinnichols101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinnichols101/subscriptions", "organizations_url": "https://api.github.com/users/austinnichols101/orgs", "repos_url": "https://api.github.com/users/austinnichols101/repos", "events_url": "https://api.github.com/users/austinnichols101/events{/privacy}", "received_events_url": "https://api.github.com/users/austinnichols101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-20T15:41:00Z", "updated_at": "2019-10-31T15:39:54Z", "closed_at": "2019-10-30T20:08:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have observed faust intermittently failing silently on startup with the 1.8.x series and have been able to trace it back to PR #403, commit c0daac117ef977985733d2e692256cc65cb47ae6.\r\n\r\n_Note: special thanks to @patkivikram for helping me track this down..._  \r\n\r\n**Faust failing silently on startup**\r\n```\r\n[2019-10-19 18:22:32,085] [46808] [INFO] [^---Recovery]: Resuming flow... \r\n[2019-10-19 18:22:32,085] [46808] [INFO] [^---Recovery]: Seek stream partitions to committed offsets. \r\n[2019-10-19 18:22:35,510] [46808] [INFO] [^--Fetcher]: Starting... \r\n[2019-10-19 18:22:35,510] [46808] [INFO] [^---Recovery]: Worker ready \r\n[2019-10-19 18:22:35,511] [46808] [INFO] [^Worker]: Ready \r\n[1]    46808 killed     faust --app streampunk.app worker --loglevel info\r\n```\r\nThe `_add_gap` function in `faust/transport/consumer.py` is being called with a VERY large `offset_from` / `offset_to` delta.  In the screenshot below a list is populated from `1` to `2,288,752,002` which results in python running out of memory and triggering the failure.  Note that in the screenshot I added an exception handler to see if I could trap the error (I could not - python fails silently).\r\n\r\n**PyCharm debugger output**\r\n![image](https://user-images.githubusercontent.com/6962379/67161859-865f1680-f32c-11e9-8a74-07468d1fb7b4.png)\r\n\r\n**Resource Monitor: Memory Usage**\r\n![image](https://user-images.githubusercontent.com/6962379/67161973-bc50ca80-f32d-11e9-8e4f-ac2e4d1249f3.png)\r\n\r\n**PyCharm debugger: Values passed to _add_gap** \r\n![image](https://user-images.githubusercontent.com/6962379/67162031-531d8700-f32e-11e9-8f8d-7622e701a07a.png)\r\n\r\n\r\n# Versions\r\n\r\n* Python version 3.7.4\r\n* Faust version 1.8.1\r\n* Kafka version 2.3\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/452", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/452/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/452/events", "html_url": "https://github.com/robinhood/faust/issues/452", "id": 509557966, "node_id": "MDU6SXNzdWU1MDk1NTc5NjY=", "number": 452, "title": "Getting entry by key from windowed table returns all keys", "user": {"login": "fr-ser", "id": 18115758, "node_id": "MDQ6VXNlcjE4MTE1NzU4", "avatar_url": "https://avatars3.githubusercontent.com/u/18115758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fr-ser", "html_url": "https://github.com/fr-ser", "followers_url": "https://api.github.com/users/fr-ser/followers", "following_url": "https://api.github.com/users/fr-ser/following{/other_user}", "gists_url": "https://api.github.com/users/fr-ser/gists{/gist_id}", "starred_url": "https://api.github.com/users/fr-ser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fr-ser/subscriptions", "organizations_url": "https://api.github.com/users/fr-ser/orgs", "repos_url": "https://api.github.com/users/fr-ser/repos", "events_url": "https://api.github.com/users/fr-ser/events{/privacy}", "received_events_url": "https://api.github.com/users/fr-ser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-20T07:29:57Z", "updated_at": "2020-01-08T22:23:03Z", "closed_at": "2020-01-08T22:23:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\nI am using v 1.8.0 to avoid issue #450, but have checked to see the same behavior in the master branch\r\n\r\n## Steps to reproduce\r\n\r\nMy goal is to expose a windowed table and return all windows for a key\r\n\r\n## Expected behavior\r\n\r\nBy accessing the table with the correct key, I expect to only get values for that key\r\n\r\n## Actual behavior\r\n\r\nI get all values (regardless of the key) back.\r\n\r\n## Full traceback\r\n\r\nRepo to reproduce the issue:\r\nhttps://github.com/fr-ser/faust-bugs/tree/master/window_key_bug\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.3\r\n* Faust version: 1.8.0\r\n* Operating system: Ubuntu 19.04\r\n* Kafka version: 2.12-2.3.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/451", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/451/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/451/events", "html_url": "https://github.com/robinhood/faust/issues/451", "id": 509447870, "node_id": "MDU6SXNzdWU1MDk0NDc4NzA=", "number": 451, "title": "Global Tables working like a local table", "user": {"login": "DhruvaPatil98", "id": 52442595, "node_id": "MDQ6VXNlcjUyNDQyNTk1", "avatar_url": "https://avatars1.githubusercontent.com/u/52442595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DhruvaPatil98", "html_url": "https://github.com/DhruvaPatil98", "followers_url": "https://api.github.com/users/DhruvaPatil98/followers", "following_url": "https://api.github.com/users/DhruvaPatil98/following{/other_user}", "gists_url": "https://api.github.com/users/DhruvaPatil98/gists{/gist_id}", "starred_url": "https://api.github.com/users/DhruvaPatil98/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DhruvaPatil98/subscriptions", "organizations_url": "https://api.github.com/users/DhruvaPatil98/orgs", "repos_url": "https://api.github.com/users/DhruvaPatil98/repos", "events_url": "https://api.github.com/users/DhruvaPatil98/events{/privacy}", "received_events_url": "https://api.github.com/users/DhruvaPatil98/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-19T13:02:47Z", "updated_at": "2019-11-02T15:55:04Z", "closed_at": "2019-10-28T22:57:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nDefine a global table and assign values to some keys\r\n\r\n```pytb\r\ntable = app.GlobalTable(\r\n    'event_table',\r\n    partitions=2,\r\n)\r\n```\r\n## Expected behavior\r\n\r\nAll workers must be able to access those keys\r\n\r\n## Actual behavior\r\n\r\nThe workers only have access to their own keys and values. Issue remains when using 1.8, 1.8.1 and master branch\r\n\r\n## Full traceback\r\n\r\nThis is the data I get when I print out all the keys and values in the global table in each worker (key and value given are same)\r\n```pytb\r\nWorker 1:\r\n[2019-10-19 12:52:19,829] [54] [WARNING] d: d \r\n[2019-10-19 12:52:19,829] [54] [WARNING] f: f \r\n[2019-10-19 12:52:19,830] [54] [WARNING] h: h \r\nWorker 2:\r\n[2019-10-19 12:52:27,370] [55] [WARNING] b: b \r\n[2019-10-19 12:52:27,370] [55] [WARNING] c: c \r\n[2019-10-19 12:52:27,370] [55] [WARNING] e: e \r\n[2019-10-19 12:52:27,371] [55] [WARNING] i: i\r\n```\r\nI also keep getting this message (issue referenced in #450 )\r\n```pytb\r\n[2019-10-19 13:00:02,732] [54] [WARNING] [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING FOR TopicPartition(topic='app_main-event_table-changelog', partition=0) \r\n```\r\n## Further Information regarding setup\r\n\r\nI am using Faust inside docker. Running multiple workers on different services.\r\nHere is the docker-compose file\r\n```pytb\r\nversion: '2'\r\nservices:\r\n\r\n  zookeeper:\r\n    image: wurstmeister/zookeeper\r\n    ports:\r\n      - \"2181:2181\"\r\n\r\n  kafka:\r\n    image: wurstmeister/kafka\r\n    ports:\r\n      - \"9092:9092\"\r\n      - \"9094:9094\"\r\n    environment:\r\n      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://kafka:9094\r\n      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094\r\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT\r\n      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE\r\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\r\n      KAFKA_MESSAGE_MAX_BYTES: 999999999\r\n      KAFKA_LOG_DIRS: /kafka/kafka-logs-1\r\n    volumes:\r\n      - kafka_data:/kafka\r\n\r\n    depends_on:\r\n      - zookeeper\r\n\r\n  redis:\r\n    image: 'bitnami/redis:5.0'\r\n    environment:\r\n      # ALLOW_EMPTY_PASSWORD is recommended only for development.\r\n      - ALLOW_EMPTY_PASSWORD=yes\r\n      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - 'redis_data:/bitnami/redis/data'\r\n\r\n  app1:\r\n    build: .\r\n    volumes:\r\n      - ./server:/application\r\n      - app-python-site-packages1:/usr/local/lib/python3.6/site-packages\r\n      - app-usr-local-bin1:/usr/local/bin\r\n      - worker-data1:/data/\r\n    # command: \"faust --datadir=/data/work_6067 -A app worker -l info --web-port 6067\"\r\n    command: tail -f /dev/null\r\n    ports:\r\n      - \"6067:6067\"\r\n    depends_on:\r\n      - kafka\r\n\r\n  app2:\r\n    build: .\r\n    volumes:\r\n      - ./server:/application\r\n      - app-python-site-packages2:/usr/local/lib/python3.6/site-packages\r\n      - app-usr-local-bin2:/usr/local/bin\r\n      - worker-data2:/data/\r\n    # command: \"faust --datadir=/data/work_6068 -A app worker -l info --web-port 6068\"\r\n    command: tail -f /dev/null\r\n    ports:\r\n      - \"6068:6068\"\r\n    depends_on:\r\n      - kafka\r\n\r\n\r\nvolumes:\r\n  kafka_data:\r\n    driver: local\r\n\r\n  redis_data:\r\n    driver: local\r\n\r\n  app-python-site-packages1:\r\n    driver: local\r\n\r\n  app-usr-local-bin1:\r\n    driver: local\r\n\r\n  app-python-site-packages2:\r\n    driver: local\r\n\r\n  app-usr-local-bin2:\r\n    driver: local\r\n\r\n  worker-data1:\r\n    driver: local\r\n\r\n  worker-data2:\r\n    driver: local\r\n\r\n```\r\nFrom [archit0/faust-docker-compose](https://github.com/archit0/faust-docker-compose)\r\n# Versions\r\n\r\n* Python version - 3.7.4\r\n* Faust version - 1.8.1 (doesn't seem to work in 1.8 either)\r\n* Operating system\r\n* Kafka version - 1.4.6\r\n* RocksDB version (if applicable) - 0.7.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/450", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/450/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/450/events", "html_url": "https://github.com/robinhood/faust/issues/450", "id": 509434876, "node_id": "MDU6SXNzdWU1MDk0MzQ4NzY=", "number": 450, "title": "Offset not advancing (consumer and producer) in version 1.8.1", "user": {"login": "fr-ser", "id": 18115758, "node_id": "MDQ6VXNlcjE4MTE1NzU4", "avatar_url": "https://avatars3.githubusercontent.com/u/18115758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fr-ser", "html_url": "https://github.com/fr-ser", "followers_url": "https://api.github.com/users/fr-ser/followers", "following_url": "https://api.github.com/users/fr-ser/following{/other_user}", "gists_url": "https://api.github.com/users/fr-ser/gists{/gist_id}", "starred_url": "https://api.github.com/users/fr-ser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fr-ser/subscriptions", "organizations_url": "https://api.github.com/users/fr-ser/orgs", "repos_url": "https://api.github.com/users/fr-ser/repos", "events_url": "https://api.github.com/users/fr-ser/events{/privacy}", "received_events_url": "https://api.github.com/users/fr-ser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-19T11:09:07Z", "updated_at": "2019-10-28T20:21:07Z", "closed_at": "2019-10-28T20:21:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nI just run the example producer (\"simple faust app\" from the readme) and get the warnings below.\r\n\r\nI created a repo to reproduce the issue here: https://github.com/fr-ser/faust-bugs/tree/master/livelock_bug\r\n\r\n## Expected behavior\r\n\r\nSee no warnings. I actually have no idea what consequences the bug might have...\r\n\r\n## Actual behavior\r\n\r\nTell us what happened instead.\r\n\r\n```\r\n[2019-10-19 13:05:25,237] [28692] [WARNING] Hello from Faust to you\r\n[2019-10-19 13:05:26,245] [28692] [WARNING] Hello from Faust to you\r\n[2019-10-19 13:05:27,240] [28692] [WARNING] Hello from Faust to you\r\n[2019-10-19 13:05:29,203] [28692] [WARNING] Hello from Faust to you\r\n[2019-10-19 13:05:29,204] [28692] [WARNING] [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING FOR (TopicPartition(topic='livelock_broken', partition=5), None)\r\n[2019-10-19 13:05:29,205] [28692] [WARNING] [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING FOR (TopicPartition(topic='livelock_broken', partition=1), None)\r\n[2019-10-19 13:05:29,205] [28692] [WARNING] [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING FOR (TopicPartition(topic='livelock_broken', partition=6), None)\r\n[2019-10-19 13:05:29,206] [28692] [WARNING] [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING FOR (TopicPartition(topic='livelock_broken', partition=2), None)\r\n[2019-10-19 13:05:29,207] [28692] [WARNING] [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING FOR (TopicPartition(topic='livelock_broken', partition=4), None)\r\n[2019-10-19 13:05:29,207] [28692] [WARNING] [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING FOR (TopicPartition(topic='livelock_broken', partition=7), None)\r\n[2019-10-19 13:05:29,208] [28692] [WARNING] [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING FOR (TopicPartition(topic='livelock_broken', partition=0), None)\r\n[2019-10-19 13:05:29,208] [28692] [WARNING] [^--Consumer]: Possible livelock: COMMIT OFFSET NOT ADVANCING FOR (TopicPartition(topic='livelock_broken', partition=3), None)\r\n[2019-10-19 13:05:29,277] [28692] [WARNING] Hello from Faust to you\r\n[2019-10-19 13:05:30,249] [28692] [WARNING] Hello from Faust to you\r\n[2019-10-19 13:05:31,247] [28692] [WARNING] Hello from Faust to you\r\n```\r\n# Versions\r\n\r\n* Python version: 3.7.4\r\n* Faust version:\r\n  * working: 1.7.4, 1.8.0\r\n  * broken: 1.8.1\r\n* Operating system: Ubuntu 19.04\r\n* Kafka version: 2.12-2.3.0\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/449", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/449/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/449/events", "html_url": "https://github.com/robinhood/faust/issues/449", "id": 509266649, "node_id": "MDU6SXNzdWU1MDkyNjY2NDk=", "number": 449, "title": "Cannot join slack", "user": {"login": "fr-ser", "id": 18115758, "node_id": "MDQ6VXNlcjE4MTE1NzU4", "avatar_url": "https://avatars3.githubusercontent.com/u/18115758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fr-ser", "html_url": "https://github.com/fr-ser", "followers_url": "https://api.github.com/users/fr-ser/followers", "following_url": "https://api.github.com/users/fr-ser/following{/other_user}", "gists_url": "https://api.github.com/users/fr-ser/gists{/gist_id}", "starred_url": "https://api.github.com/users/fr-ser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fr-ser/subscriptions", "organizations_url": "https://api.github.com/users/fr-ser/orgs", "repos_url": "https://api.github.com/users/fr-ser/repos", "events_url": "https://api.github.com/users/fr-ser/events{/privacy}", "received_events_url": "https://api.github.com/users/fr-ser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T19:20:48Z", "updated_at": "2020-01-13T14:53:10Z", "closed_at": "2020-01-13T14:53:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nClick the slack link in the master branch: \r\nhttps://join.slack.com/t/fauststream/shared_invite/enQtNDEzMTIyMTUyNzU2LTRkM2Q2ODkwZTk5MzczNmUxOGU0NWYxNzA2YzYwNTAyZmRiOTRmMzkyMDk0ODY2MjIzOTg2NGI0ODlmNTYxNTc\r\n\r\n## Expected behavior\r\n\r\nGetting into the slack group or having the option to ask for joining\r\n\r\n## Actual behavior\r\n\r\nMessage: The link is no longer active. You can only join with a @robinhood.com email address\r\n\r\n\r\nKind of related to https://github.com/robinhood/faust/issues/438 as there is now no way of communication besides Github issues...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/445", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/445/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/445/events", "html_url": "https://github.com/robinhood/faust/issues/445", "id": 506341527, "node_id": "MDU6SXNzdWU1MDYzNDE1Mjc=", "number": 445, "title": "cannot launch example tableofset", "user": {"login": "PGDataHome", "id": 50565828, "node_id": "MDQ6VXNlcjUwNTY1ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/50565828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PGDataHome", "html_url": "https://github.com/PGDataHome", "followers_url": "https://api.github.com/users/PGDataHome/followers", "following_url": "https://api.github.com/users/PGDataHome/following{/other_user}", "gists_url": "https://api.github.com/users/PGDataHome/gists{/gist_id}", "starred_url": "https://api.github.com/users/PGDataHome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PGDataHome/subscriptions", "organizations_url": "https://api.github.com/users/PGDataHome/orgs", "repos_url": "https://api.github.com/users/PGDataHome/repos", "events_url": "https://api.github.com/users/PGDataHome/events{/privacy}", "received_events_url": "https://api.github.com/users/PGDataHome/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-10-13T15:40:11Z", "updated_at": "2019-11-17T09:09:18Z", "closed_at": "2019-11-17T09:09:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nTell us what you did to cause something to happen.\r\n\r\n## Expected behavior\r\n\r\nTell us what you expected to happen.\r\n\r\n## Actual behavior\r\n\r\nTell us what happened instead.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nPaste the full traceback (if there is any)\r\n```\r\nfaust -A tableofset worker |more\r\n+\u0192a\u00b5S\u2020 v1.7.4-+------------------------------------------------------------------------------------+\r\n| id          | table-of-sets-windowed-v2                                                          |\r\n| transport   | [URL('kafka://localhost:9092')]                                                    |\r\n| store       | memory:                                                                            |\r\n| web         | http://localhost:6066/                                                             |\r\n| log         | -stderr- (warn)                                                                    |\r\n| pid         | 22478                                                                              |\r\n| hostname    | pascal-asus                                                                        |\r\n| platform    | CPython 3.7.3 (Linux x86_64)                                                       |\r\n| drivers     |                                                                                    |\r\n|   transport | aiokafka=1.0.4                                                                     |\r\n|   web       | aiohttp=3.5.4                                                                      |\r\n| datadir     | /home/hadoop/kafka_2.11-2.3.0/faust-master/examples/table-of-sets-windowed-data    |\r\n| appdir      | /home/hadoop/kafka_2.11-2.3.0/faust-master/examples/table-of-sets-windowed-data/v2 |\r\n+-------------+------------------------------------------------------------------------------------+\r\n[2019-10-13 17:29:19,486: ERROR]: [^Worker]: Error: TypeError(\"Channel must be channel, topic, or str; not <class 'coroutine'>\") \r\nTraceback (most recent call last):\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/worker.py\", line 264, in execute_from_commandline\r\n    self.loop.run_until_complete(self._starting_fut)\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 584, in run_until_complete\r\n    return future.result()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 750, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 778, in maybe_start\r\n    await self.start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 750, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 778, in maybe_start\r\n    await self.start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/home/hadoop/.local/lib/python3.7/site-packages/mode/services.py\", line 743, in _actually_start\r\n    await self.on_start()\r\n  File \"/usr/local/lib/python3.7/dist-packages/faust/agents/manager.py\", line 31, in on_start\r\n    self.update_topic_index()\r\n  File \"/usr/local/lib/python3.7/dist-packages/faust/agents/manager.py\", line 64, in update_topic_index\r\n    for topic in agent.get_topic_names():\r\n  File \"/usr/local/lib/python3.7/dist-packages/faust/agents/agent.py\", line 965, in get_topic_names\r\n    channel = self.channel\r\n  File \"/usr/local/lib/python3.7/dist-packages/faust/agents/agent.py\", line 978, in channel\r\n    **self._channel_kwargs,\r\n  File \"/usr/local/lib/python3.7/dist-packages/faust/agents/agent.py\", line 488, in _prepare_channel\r\n    f'Channel must be channel, topic, or str; not {type(channel)}')\r\nTypeError: Channel must be channel, topic, or str; not <class 'coroutine'>\r\n\r\n# Versions\r\n\r\n* Python version 2.7.16 3.7.3\r\n* Faust version 1.7.4\r\n* Operating system ubuntu 19.04\r\n* Kafka version 2.11-2.3.0\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/443", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/443/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/443/events", "html_url": "https://github.com/robinhood/faust/issues/443", "id": 504504345, "node_id": "MDU6SXNzdWU1MDQ1MDQzNDU=", "number": 443, "title": "Fails to create leader topic", "user": {"login": "LeonardAukea", "id": 7058308, "node_id": "MDQ6VXNlcjcwNTgzMDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7058308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeonardAukea", "html_url": "https://github.com/LeonardAukea", "followers_url": "https://api.github.com/users/LeonardAukea/followers", "following_url": "https://api.github.com/users/LeonardAukea/following{/other_user}", "gists_url": "https://api.github.com/users/LeonardAukea/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeonardAukea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeonardAukea/subscriptions", "organizations_url": "https://api.github.com/users/LeonardAukea/orgs", "repos_url": "https://api.github.com/users/LeonardAukea/repos", "events_url": "https://api.github.com/users/LeonardAukea/events{/privacy}", "received_events_url": "https://api.github.com/users/LeonardAukea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-09T08:47:20Z", "updated_at": "2019-11-04T02:39:06Z", "closed_at": "2019-10-30T11:09:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nI'm running kafka on kubernetes (strimzi) installation with the configuration `topic.auto.create.enable: True`. I'm trying to start a simple faust app but it fails due to `TopicAuthorizationFailedError`: \r\n\r\n```python \r\nimport faust\r\nimport ssl\r\nimport logging\r\n\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\nssl_context = ssl.create_default_context(\r\n    purpose=ssl.Purpose.SERVER_AUTH, cafile=ssl_cafile)\r\nssl_context.load_cert_chain(ssl_certfile, \r\n                            keyfile=ssl_keyfile)\r\n\r\napp = faust.App('faust_test', \r\n                broker=host,  \r\n                broker_credentials=ssl_context,\r\n                value_serializer='raw')\r\n\r\n\r\ndev_topic = app.topic('dev')\r\n\r\n@app.agent(dev_topic)\r\nasync def greet(numbers):\r\n    async for n in numbers:\r\n        print(n)\r\n```\r\n\r\n## Expected behavior\r\n\r\nI expected `faust_test-__assignor-__leader` topic to be created and the application to start\r\n\r\n## Actual behavior\r\n\r\nfaust app does not start due to fails due to `TopicAuthorizationFailedError`. \r\n\r\n\r\n## Full traceback\r\n\r\n\r\n\r\n```pytb\r\n[2019-10-09 10:34:10,867: INFO]: [^Worker]: Starting... \r\n[2019-10-09 10:34:10,870: INFO]: [^-App]: Starting... \r\n[2019-10-09 10:34:10,870: INFO]: [^--Monitor]: Starting... \r\n[2019-10-09 10:34:10,870: INFO]: [^--Producer]: Starting... \r\n[2019-10-09 10:34:12,273: INFO]: [^--CacheBackend]: Starting... \r\n[2019-10-09 10:34:12,273: INFO]: [^--Web]: Starting... \r\n[2019-10-09 10:34:12,279: INFO]: [^---Server]: Starting... \r\n[2019-10-09 10:34:12,280: INFO]: [^--Consumer]: Starting... \r\n[2019-10-09 10:34:12,280: INFO]: [^---AIOKafkaConsumerThread]: Starting... \r\n[2019-10-09 10:34:13,872: INFO]: [^--LeaderAssignor]: Starting... \r\n[2019-10-09 10:34:13,872: INFO]: [^--Producer]: Creating topic 'faust_test-__assignor-__leader' \r\n[2019-10-09 10:34:14,953: ERROR]: [^Worker]: Error: TopicAuthorizationFailedError('Cannot create topic: faust_test-__assignor-__leader (29): Authorization failed.') \r\nTraceback (most recent call last):\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/worker.py\", line 261, in execute_from_commandline\r\n    self.loop.run_until_complete(self._starting_fut)\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/asyncio/base_events.py\", line 584, in run_until_complete\r\n    return future.result()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/worker.py\", line 326, in start\r\n    await super().start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 750, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 776, in maybe_start\r\n    await self.start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 750, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 776, in maybe_start\r\n    await self.start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/services.py\", line 743, in _actually_start\r\n    await self.on_start()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/faust/assignor/leader_assignor.py\", line 20, in on_start\r\n    await leader_topic.maybe_declare()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/utils/futures.py\", line 53, in __call__\r\n    result = await self.fun(*self.args, **self.kwargs)\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/faust/topics.py\", line 427, in maybe_declare\r\n    await self.declare()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/faust/topics.py\", line 446, in declare\r\n    retention=self.retention,\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/faust/transport/drivers/aiokafka.py\", line 587, in create_topic\r\n    ensure_created=ensure_created,\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/faust/transport/drivers/aiokafka.py\", line 731, in _create_topic\r\n    await wrap()\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/mode/utils/futures.py\", line 53, in __call__\r\n    result = await self.fun(*self.args, **self.kwargs)\r\n  File \"/Users/laukea/.pyenv/versions/miniconda3-latest/lib/python3.7/site-packages/faust/transport/drivers/aiokafka.py\", line 820, in _really_create_topic\r\n    f'Cannot create topic: {topic} ({code}): {reason}')\r\nkafka.errors.TopicAuthorizationFailedError: [Error 29] TopicAuthorizationFailedError: Cannot create topic: faust_test-__assignor-__leader (29): Authorization failed.\r\n[2019-10-09 10:34:14,957: INFO]: [^Worker]: Stopping... \r\n[2019-10-09 10:34:14,957: INFO]: [^-App]: Stopping... \r\n[2019-10-09 10:34:14,957: INFO]: [^-App]: Flush producer buffer... \r\n[2019-10-09 10:34:14,958: INFO]: [^--TableManager]: Stopping... \r\n[2019-10-09 10:34:14,958: INFO]: [^--Fetcher]: Stopping... \r\n[2019-10-09 10:34:14,958: INFO]: [^--Conductor]: Stopping... \r\n[2019-10-09 10:34:14,958: INFO]: [^--AgentManager]: Stopping... \r\n[2019-10-09 10:34:14,958: INFO]: [^Agent: faust_test.greet]: Stopping... \r\n[2019-10-09 10:34:14,959: INFO]: [^--ReplyConsumer]: Stopping... \r\n[2019-10-09 10:34:14,959: INFO]: [^--LeaderAssignor]: Stopping... \r\n[2019-10-09 10:34:14,959: INFO]: [^--Consumer]: Stopping... \r\n[2019-10-09 10:34:14,959: INFO]: [^---AIOKafkaConsumerThread]: Stopping... \r\n[2019-10-09 10:34:15,873: INFO]: [^--Web]: Stopping... \r\n[2019-10-09 10:34:15,873: INFO]: [^---Server]: Stopping... \r\n[2019-10-09 10:34:15,874: INFO]: [^--Web]: Cleanup \r\n[2019-10-09 10:34:15,874: INFO]: [^--CacheBackend]: Stopping... \r\n[2019-10-09 10:34:15,874: INFO]: [^--Producer]: Stopping... \r\n[2019-10-09 10:34:15,985: INFO]: [^--Monitor]: Stopping... \r\n[2019-10-09 10:34:15,986: INFO]: [^Worker]: Gathering service tasks... \r\n[2019-10-09 10:34:15,986: INFO]: [^Worker]: Gathering all futures... \r\n[2019-10-09 10:34:16,989: INFO]: [^Worker]: Closing event loop \r\n```\r\n\r\n# Versions\r\n\r\n* Python version\r\n* Faust version faust, version Faust 1.6.1\r\n* Operating system kubernetes \r\n* Kafka version https://strimzi.io/\r\n* RocksDB version (if applicable)\r\n\r\nAny help is much appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/441", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/441/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/441/events", "html_url": "https://github.com/robinhood/faust/issues/441", "id": 503674404, "node_id": "MDU6SXNzdWU1MDM2NzQ0MDQ=", "number": 441, "title": "Read at the end of topic, or set starting offset key?", "user": {"login": "epayano", "id": 16228065, "node_id": "MDQ6VXNlcjE2MjI4MDY1", "avatar_url": "https://avatars3.githubusercontent.com/u/16228065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epayano", "html_url": "https://github.com/epayano", "followers_url": "https://api.github.com/users/epayano/followers", "following_url": "https://api.github.com/users/epayano/following{/other_user}", "gists_url": "https://api.github.com/users/epayano/gists{/gist_id}", "starred_url": "https://api.github.com/users/epayano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epayano/subscriptions", "organizations_url": "https://api.github.com/users/epayano/orgs", "repos_url": "https://api.github.com/users/epayano/repos", "events_url": "https://api.github.com/users/epayano/events{/privacy}", "received_events_url": "https://api.github.com/users/epayano/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-07T20:30:57Z", "updated_at": "2019-10-07T20:36:42Z", "closed_at": "2019-10-07T20:36:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey all, I'm using Faust to read data off of a topic and to do some API operations, I was curious if there's a way to read at the end of the topic?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/434", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/434/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/434/events", "html_url": "https://github.com/robinhood/faust/issues/434", "id": 501138631, "node_id": "MDU6SXNzdWU1MDExMzg2MzE=", "number": 434, "title": "Faust 1.8 does not work with table_route to look up keys by partition", "user": {"login": "patkivikram", "id": 54442035, "node_id": "MDQ6VXNlcjU0NDQyMDM1", "avatar_url": "https://avatars3.githubusercontent.com/u/54442035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patkivikram", "html_url": "https://github.com/patkivikram", "followers_url": "https://api.github.com/users/patkivikram/followers", "following_url": "https://api.github.com/users/patkivikram/following{/other_user}", "gists_url": "https://api.github.com/users/patkivikram/gists{/gist_id}", "starred_url": "https://api.github.com/users/patkivikram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patkivikram/subscriptions", "organizations_url": "https://api.github.com/users/patkivikram/orgs", "repos_url": "https://api.github.com/users/patkivikram/repos", "events_url": "https://api.github.com/users/patkivikram/events{/privacy}", "received_events_url": "https://api.github.com/users/patkivikram/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-01T20:49:57Z", "updated_at": "2019-10-08T18:30:45Z", "closed_at": "2019-10-08T18:30:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nWith Faust 1.8 app.table_route fails as it \r\nhttps://github.com/robinhood/faust/blob/master/faust/serializers/schemas.py#L95\r\nreturns a tuple for the partitioner which fails\r\n\r\nfile \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/faust/assignor/partition_assignor.py\", line 365, in key_store\r\n    return URL(self._tps_url[self.app.producer.key_partition(topic, key)])\r\n  File \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/faust/transport/drivers/aiokafka.py\", line 727, in key_partition\r\n    serialized_value=None,\r\n  File \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 243, in _partition\r\n    serialized_key, all_partitions, available)\r\n  File \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/kafka/partitioner/default.py\", line 29, in __call__\r\n    idx = murmur2(key)\r\n  File \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/kafka/partitioner/hashed.py\", line 103, in murmur2\r\n    h ^= (data[(length & ~3) + 1] & 0xff) << 8\r\nTypeError: unsupported operand type(s) for &: 'NoneType' and 'int'\r\n## Expected behavior\r\n\r\nTell us what you expected to happen.\r\n\r\n## Actual behavior\r\n\r\nThiis works in 1.7.4\r\n## Full traceback\r\n\r\n```pytb\r\nile \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/faust/assignor/partition_assignor.py\", line 365, in key_store\r\n    return URL(self._tps_url[self.app.producer.key_partition(topic, key)])\r\n  File \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/faust/transport/drivers/aiokafka.py\", line 727, in key_partition\r\n    serialized_value=None,\r\n  File \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 243, in _partition\r\n    serialized_key, all_partitions, available)\r\n  File \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/kafka/partitioner/default.py\", line 29, in __call__\r\n    idx = murmur2(key)\r\n  File \"/pyenv/versions/putmodengine/lib/python3.7/site-packages/kafka/partitioner/hashed.py\", line 103, in murmur2\r\n    h ^= (data[(length & ~3) + 1] & 0xff) << 8\r\nTypeError: unsupported operand type(s) for &: 'NoneType' and 'int'```\r\n\r\n# Versions\r\n\r\n* Python version 3.7\r\n* Faust version 1.8\r\n* Operating system centos75\r\n* Kafka version \r\n* RocksDB version (if applicable) 6.0.2\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/433", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/433/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/433/events", "html_url": "https://github.com/robinhood/faust/issues/433", "id": 501047311, "node_id": "MDU6SXNzdWU1MDEwNDczMTE=", "number": 433, "title": "Memory leak", "user": {"login": "surculus12", "id": 4906330, "node_id": "MDQ6VXNlcjQ5MDYzMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4906330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surculus12", "html_url": "https://github.com/surculus12", "followers_url": "https://api.github.com/users/surculus12/followers", "following_url": "https://api.github.com/users/surculus12/following{/other_user}", "gists_url": "https://api.github.com/users/surculus12/gists{/gist_id}", "starred_url": "https://api.github.com/users/surculus12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surculus12/subscriptions", "organizations_url": "https://api.github.com/users/surculus12/orgs", "repos_url": "https://api.github.com/users/surculus12/repos", "events_url": "https://api.github.com/users/surculus12/events{/privacy}", "received_events_url": "https://api.github.com/users/surculus12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2019-10-01T17:45:15Z", "updated_at": "2020-05-27T16:42:45Z", "closed_at": "2019-10-03T13:05:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nDockerfile with\r\n```\r\nFROM python:3-slim-stretch\r\n\r\nWORKDIR /faust_bug\r\n\r\nRUN apt update -yqq \\\r\n && apt install -y git\r\n\r\n#RUN pip install faust\r\nRUN pip install kafka robinhood-aiokafka\r\nRUN git clone https://github.com/robinhood/faust.git \\\r\n && cd faust \\\r\n && python setup.py build \\\r\n && python setup.py install\r\n\r\nCOPY /faust_bug /faust_bug\r\n\r\nENTRYPOINT [\"faust\", \"-A\", \"faust_app\", \"worker\", \"-l\", \"DEBUG\"]\r\n```\r\n\r\nA directory faust_bug containing only file faust_app.py with\r\n```\r\nimport faust\r\nimport time\r\n\r\napp = faust.App('locator', broker='kafka://ip:port', value_serializer='json')\r\n\r\ninterfaces_topic = app.topic('scan_interfaces', key_type=str)\r\n\r\n\r\n@app.agent(interfaces_topic)\r\nasync def handle_interfaces(results):\r\n    async for switch, result in results.items():\r\n        time.sleep(1)\r\n        print(\"Single iteration finished\")\r\n```\r\n\r\nThe container is then deployed as four containers (for the four kafka partitions) inside of a kubernetes cluster via boiler-plate garden.io configurations.\r\n\r\n## Expected behavior\r\n\r\nThe container consumes from the topic without leaking memory.\r\n\r\n## Actual behavior\r\n\r\nThe container leaks memory, crashing after 2-3 minutes after hitting the 1gb limit.\r\n\r\n## Full traceback\r\n\r\nNo error but here are debug logs for a container at ~600mb: https://gist.github.com/surculus12/a8386cfeac54596ce3622a5a898f6e96\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.4\r\n* Faust version: 1.8.0\r\n* Operating system: python:3-slim-stretch (docker)\r\n* Kafka version: 2.2\r\n* RocksDB version (if applicable)\r\n\r\n```\r\n+\u0192a\u00b5S\u2020 v1.8.0-+------------------------------------------+\r\n| id          | locator                                  |\r\n| transport   | [URL('kafka://<ip:port>')]      |\r\n| store       | memory:                                  |\r\n| web         | http://localhost:6066/                   |\r\n| log         | -stderr- (debug)                         |\r\n| pid         | 1                                        |\r\n| hostname    | locator-v-1c4e381572-7664d865f7-rr4r4    |\r\n| platform    | CPython 3.7.3 (Linux x86_64)             |\r\n| drivers     |                                          |\r\n|   transport | aiokafka=1.0.4                           |\r\n|   web       | aiohttp=3.6.1                            |\r\n| datadir     | /faust_bug/locator-data                  |\r\n| appdir      | /faust_bug/locator-data/v1               |\r\n+-------------+------------------------------------------+```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/430", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/430/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/430/events", "html_url": "https://github.com/robinhood/faust/issues/430", "id": 496863038, "node_id": "MDU6SXNzdWU0OTY4NjMwMzg=", "number": 430, "title": "Can't create custom but optional Fields", "user": {"login": "guhcampos", "id": 3371352, "node_id": "MDQ6VXNlcjMzNzEzNTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3371352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guhcampos", "html_url": "https://github.com/guhcampos", "followers_url": "https://api.github.com/users/guhcampos/followers", "following_url": "https://api.github.com/users/guhcampos/following{/other_user}", "gists_url": "https://api.github.com/users/guhcampos/gists{/gist_id}", "starred_url": "https://api.github.com/users/guhcampos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guhcampos/subscriptions", "organizations_url": "https://api.github.com/users/guhcampos/orgs", "repos_url": "https://api.github.com/users/guhcampos/repos", "events_url": "https://api.github.com/users/guhcampos/events{/privacy}", "received_events_url": "https://api.github.com/users/guhcampos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-23T01:48:12Z", "updated_at": "2019-09-26T00:58:28Z", "closed_at": "2019-09-25T23:06:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n## Steps to reproduce\r\n\r\nI'm trying to use the custom field approach for field validation in Faust Models, but I can't seem to build a valid syntax. I'm not sure if I'm doing something wrong or maybe this is actually a bug.\r\n\r\nI have a model with a custom field such as \r\n```python\r\nclass DatalivePersonRecord(faust.Record, validation=True):\r\n    gender: str = ChoiceField([\"F\", \"M\", \"N\", \"\"])\r\n ```\r\n\r\nBut then the model's init complains with: `TypeError: __init__() missing 1 required positional argument: 'gender'`.\r\n\r\nI tried several other syntax approaches such as:\r\n\r\n```python\r\n    gender: str = Optional[GenderField()]\r\n```\r\n\r\nWithout much success. \r\n\r\n## Expected behavior\r\n\r\nI wanted to have field validation set for optional fields. Validation should then pass for a valid present field and ignore an absent field. Validation should fail by present fields which did not\r\npass the validation.\r\n\r\n## Actual behavior\r\n\r\nErrors mentioned above.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[2019-09-22 22:43:39,486: INFO]: Timer Monitor.sampler woke up too late, with a drift of +0.43837748800069676 \r\n[2019-09-22 22:43:39,521: ERROR]: [^---Agent*: ingest.rec[.]ingest_record_agent]: Crashed reason=TypeError(\"__init__() missing 1 required positional argument: 'gender'\") \r\nTraceback (most recent call last):\r\n  File \"/home/gustavo/.local/share/virtualenvs/ingest-EalAiwRa/lib/python3.7/site-packages/faust/agents/agent.py\", line 625, in _execute_task\r\n    await coro\r\n  File \"/home/gustavo/workspace/maio/services/ingest/ingest/records/agents.py\", line 34, in ingest_record_agent\r\n    person_record = DatalivePersonRecord(business_unit=record.business_unit)\r\nTypeError: __init__() missing 1 required positional argument: 'gender'\r\n```\r\n\r\n# Versions\r\n\r\n* Python 3.7\r\n* Faust 1.7.4\r\n* Ubuntu 19.04\r\n* Kafka 2.12\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/428", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/428/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/428/events", "html_url": "https://github.com/robinhood/faust/issues/428", "id": 496313689, "node_id": "MDU6SXNzdWU0OTYzMTM2ODk=", "number": 428, "title": "how to produce individual messages out of input/output stream", "user": {"login": "jorgeakanieves", "id": 9846001, "node_id": "MDQ6VXNlcjk4NDYwMDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/9846001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorgeakanieves", "html_url": "https://github.com/jorgeakanieves", "followers_url": "https://api.github.com/users/jorgeakanieves/followers", "following_url": "https://api.github.com/users/jorgeakanieves/following{/other_user}", "gists_url": "https://api.github.com/users/jorgeakanieves/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorgeakanieves/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorgeakanieves/subscriptions", "organizations_url": "https://api.github.com/users/jorgeakanieves/orgs", "repos_url": "https://api.github.com/users/jorgeakanieves/repos", "events_url": "https://api.github.com/users/jorgeakanieves/events{/privacy}", "received_events_url": "https://api.github.com/users/jorgeakanieves/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-20T12:03:44Z", "updated_at": "2020-07-26T07:23:31Z", "closed_at": "2019-09-23T12:04:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to stream a topic as input, stream a topic as output but along the script produce another messages to another topic (without use kafka client library)?\r\n\r\nFor example:\r\n\r\n```\r\ninput = app.topic('clicks')\r\noutput = app.topic('counts')\r\n\r\n@app.agent(input)\r\nasync def count_click(clicks):\r\n    async for count in clicks.items():\r\n        process = Process()\r\n        process.whatever()\r\n        counts += process.count(count)\r\n        await output.send(count)\r\n\r\nclass Process():\r\n    topic : app.topic('temporal')\r\n   __init__(topic):\r\n     ''\r\n    def whatever(self):\r\n        with newclass(\r\n            attr1=atrrvalue,\r\n            attr1=atrrvalue2,\r\n            attr1=atrrvalue3,\r\n            callback=myfunc\r\n        )\r\n\r\n    def count(self, count):\r\n        if(count)>0:\r\n            return count\r\n        else:\r\n            return 0\r\n\r\n    def myfunc(self, value):\r\n        self.topic.send(value)\r\n```\r\n\r\nI use the python library \"Process\" and I receive the message \"RuntimeWarning: coroutine 'Process.myfunc' was never awaited\"...\r\n\r\nI can\u00b4t update class \"newclass\" because it\u00b4s a Python library...\r\n\r\nAny help?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/427", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/427/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/427/events", "html_url": "https://github.com/robinhood/faust/issues/427", "id": 496207108, "node_id": "MDU6SXNzdWU0OTYyMDcxMDg=", "number": 427, "title": "How to use producer in testcase", "user": {"login": "pushiqiang", "id": 13058977, "node_id": "MDQ6VXNlcjEzMDU4OTc3", "avatar_url": "https://avatars3.githubusercontent.com/u/13058977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pushiqiang", "html_url": "https://github.com/pushiqiang", "followers_url": "https://api.github.com/users/pushiqiang/followers", "following_url": "https://api.github.com/users/pushiqiang/following{/other_user}", "gists_url": "https://api.github.com/users/pushiqiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pushiqiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pushiqiang/subscriptions", "organizations_url": "https://api.github.com/users/pushiqiang/orgs", "repos_url": "https://api.github.com/users/pushiqiang/repos", "events_url": "https://api.github.com/users/pushiqiang/events{/privacy}", "received_events_url": "https://api.github.com/users/pushiqiang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-20T08:00:51Z", "updated_at": "2019-09-26T07:00:02Z", "closed_at": "2019-09-26T07:00:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Testing will hangs when I use `app.producer.send_and_wait`\r\neg\uff1a\r\n```\r\n@app.agent(test_topic)\r\nasync def handle_message(records):\r\n    async for record in records:\r\n        await app.producer.send_and_wait('topic_name', partition=None, timestamp=None, key=None, headers=None, value=ujson.dumps({'name': record .name})\r\n\r\n```\r\n\r\ntests.py\r\n```\r\nimport pytest\r\nfrom message import app, handle_message\r\n\r\n@pytest.fixture()\r\ndef test_app(event_loop):\r\n    \"\"\"passing in event_loop helps avoid 'attached to a different loop' error\"\"\"\r\n    app.finalize()\r\n    app.conf.store = 'memory://'\r\n    app.flow_control.resume()\r\n    return app\r\n\r\n@pytest.mark.asyncio()\r\nasync def test_handle_message(test_app):\r\n    async with handle_message.test_context() as agent:\r\n        message = ...\r\n        await agent.put(message)\r\n```\r\n\r\nThe test will succeed if I don't use `app.producer.send_and_wait`\r\n\r\nAny help?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/425", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/425/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/425/events", "html_url": "https://github.com/robinhood/faust/issues/425", "id": 491005293, "node_id": "MDU6SXNzdWU0OTEwMDUyOTM=", "number": 425, "title": "Store validate() to empty list", "user": {"login": "tuanna47", "id": 51446056, "node_id": "MDQ6VXNlcjUxNDQ2MDU2", "avatar_url": "https://avatars2.githubusercontent.com/u/51446056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuanna47", "html_url": "https://github.com/tuanna47", "followers_url": "https://api.github.com/users/tuanna47/followers", "following_url": "https://api.github.com/users/tuanna47/following{/other_user}", "gists_url": "https://api.github.com/users/tuanna47/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuanna47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuanna47/subscriptions", "organizations_url": "https://api.github.com/users/tuanna47/orgs", "repos_url": "https://api.github.com/users/tuanna47/repos", "events_url": "https://api.github.com/users/tuanna47/events{/privacy}", "received_events_url": "https://api.github.com/users/tuanna47/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-09T10:11:48Z", "updated_at": "2019-09-25T20:14:10Z", "closed_at": "2019-09-25T20:14:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "when test validate() model following by intruction in documents at https://faust.readthedocs.io/en/latest/userguide/models.html#fields\r\n\r\nthere i try validate() function for Model Person as below, when input wrong datatype for model Person , validate() function return empty\r\n>>> class Person(faust.Record):\r\n...     age: int\r\n...     name: str\r\n... \r\n>>> p = Person(age=\"Gordon\", name=\"11\")\r\n>>> p.validate()\r\n\r\nThere something wrong i think it not run good look like documents \r\n\r\nFollowing document the result of `p.validate()` must as below\r\n[\r\n  ('age': ValidationError(\r\n        \"Invalid type for int field 'age': 'Gordon Gekko' (str)\"),\r\n  ('name': ValidationError(\r\n        \"Invalid type for str field 'name': 32 (int)\")),\r\n]\r\n# Versions\r\n\r\n* Python 3.7.4\r\n* Faust 1.7.4\r\n* Operating system Ubuntu 16.04\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/418", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/418/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/418/events", "html_url": "https://github.com/robinhood/faust/issues/418", "id": 489573492, "node_id": "MDU6SXNzdWU0ODk1NzM0OTI=", "number": 418, "title": "[web][exceptions] Raising NotFound error in a view leads to a server error", "user": {"login": "ssatia", "id": 9986621, "node_id": "MDQ6VXNlcjk5ODY2MjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9986621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssatia", "html_url": "https://github.com/ssatia", "followers_url": "https://api.github.com/users/ssatia/followers", "following_url": "https://api.github.com/users/ssatia/following{/other_user}", "gists_url": "https://api.github.com/users/ssatia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssatia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssatia/subscriptions", "organizations_url": "https://api.github.com/users/ssatia/orgs", "repos_url": "https://api.github.com/users/ssatia/repos", "events_url": "https://api.github.com/users/ssatia/events{/privacy}", "received_events_url": "https://api.github.com/users/ssatia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-05T07:19:49Z", "updated_at": "2019-09-05T19:54:50Z", "closed_at": "2019-09-05T19:54:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Expected behavior\r\n\r\nStatus code is 404\r\n\r\n## Actual behavior\r\n\r\nStatus code is 500\r\n\r\n## Description\r\n\r\nSeems to be related to a typo in the exception definition: https://github.com/robinhood/faust/blob/ddd2f6ff1c9fd29c1028c693b092350bcbc8566f/faust/web/exceptions.py#L92", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/416", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/416/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/416/events", "html_url": "https://github.com/robinhood/faust/issues/416", "id": 489258006, "node_id": "MDU6SXNzdWU0ODkyNTgwMDY=", "number": 416, "title": "Exception in grouping function causes silent agent failure", "user": {"login": "austinnichols101", "id": 6962379, "node_id": "MDQ6VXNlcjY5NjIzNzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6962379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinnichols101", "html_url": "https://github.com/austinnichols101", "followers_url": "https://api.github.com/users/austinnichols101/followers", "following_url": "https://api.github.com/users/austinnichols101/following{/other_user}", "gists_url": "https://api.github.com/users/austinnichols101/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinnichols101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinnichols101/subscriptions", "organizations_url": "https://api.github.com/users/austinnichols101/orgs", "repos_url": "https://api.github.com/users/austinnichols101/repos", "events_url": "https://api.github.com/users/austinnichols101/events{/privacy}", "received_events_url": "https://api.github.com/users/austinnichols101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-04T16:10:07Z", "updated_at": "2019-09-24T21:36:59Z", "closed_at": "2019-09-24T21:36:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Summary \r\n\r\nThe Faust worker stops processing messages after running for a while due to an agent process failing silently.\r\n\r\n## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\nimport faust\r\nimport logging\r\nimport random\r\nimport time\r\n\r\nlogger = logging.getLogger(__name__)\r\napp = faust.App('example_silent_fail')\r\nchannel = app.channel()\r\nt_start = time.monotonic()\r\n\r\ndef grouping_function(msg):\r\n    # Allow for a startup period, then a random failure\r\n    t_elapsed = time.monotonic() - t_start\r\n    if t_elapsed > 15 and random.randint(0, 9) == 9:\r\n        logger.error('!!! SILENT EXCEPTION !!!')\r\n        return msg + 'A'\r\n    else:\r\n        return msg\r\n\r\n@app.agent(channel)\r\nasync def agent_process(stream):\r\n    try:\r\n        # Disabling the take will allow the exception to be caught but the agent will still fail silently\r\n        async for batch in stream.group_by(grouping_function, name=\"grouping_function\").take(3, within=5):\r\n            logger.info(f'agent_process - {batch}')\r\n    except Exception as e:\r\n        logger.error(f\"agent_process - !!! SILENT EXCEPTION !!! {e}\")\r\n        # Agent will still fail, even with a pass\r\n        # pass\r\n\r\n@app.timer(interval=1)\r\nasync def send_process():\r\n    value = random.randint(0, 9)\r\n    logger.info(f'send_process - sending {value}')\r\n    await channel.send(value=value)\r\n\r\n@app.timer(interval=3)\r\nasync def status_process():\r\n    logger.info(\r\n        \"status_process - Rebalancing: {}, Rebalances: {}, Events: {}, Messages: {}, Sent: {}, Messages/s {}\".format(\r\n            app.rebalancing,\r\n            app.monitor.rebalances,\r\n            app.monitor.events_total,\r\n            app.monitor.messages_received_total,\r\n            app.monitor.messages_sent,\r\n            app.monitor.messages_s,\r\n        ))\r\n```\r\n\r\n## Expected behavior\r\n\r\n- Exception should be thrown.\r\n- A mechanism is needed to catch/handle/override agent errors and failures (i.e. `on_error` or `on_agent_failure`...)\r\n\r\n## Actual behavior\r\n\r\n- Agent `send_process` fails silently.  Faust application appears to be running but stops processing messages.\r\n- Removing `.take(3, within=5)` allows the error to be caught and displayed in `agent_process`. \r\n- After removing `.take` the error is displayed, but the agent fails (even with an exception `pass`)\r\n\r\n# Versions\r\n\r\n* Python version 3.7.4\r\n* Faust version 1.7.4 \r\n* robinhood-aiokafka==1.0.4\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/414", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/414/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/414/events", "html_url": "https://github.com/robinhood/faust/issues/414", "id": 487578353, "node_id": "MDU6SXNzdWU0ODc1NzgzNTM=", "number": 414, "title": "Sample app problem: ValueError: too many values to unpack", "user": {"login": "m-nouredini", "id": 3660120, "node_id": "MDQ6VXNlcjM2NjAxMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3660120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-nouredini", "html_url": "https://github.com/m-nouredini", "followers_url": "https://api.github.com/users/m-nouredini/followers", "following_url": "https://api.github.com/users/m-nouredini/following{/other_user}", "gists_url": "https://api.github.com/users/m-nouredini/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-nouredini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-nouredini/subscriptions", "organizations_url": "https://api.github.com/users/m-nouredini/orgs", "repos_url": "https://api.github.com/users/m-nouredini/repos", "events_url": "https://api.github.com/users/m-nouredini/events{/privacy}", "received_events_url": "https://api.github.com/users/m-nouredini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-30T16:48:00Z", "updated_at": "2019-09-27T22:06:18Z", "closed_at": "2019-09-27T22:06:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nI'm trying to experiment some windowing logic with faust, but I cannot run some samples that other people says it works for them, e.g. I've picked this code from issue #223 :\r\n \r\n```\r\nimport asyncio\r\nfrom datetime import timedelta\r\n\r\nimport faust\r\nimport random\r\nimport string\r\nimport uuid\r\nimport time\r\n\r\nfrom faust import windows\r\n\r\n\r\nclass PageView(faust.Record):\r\n    id: str = None\r\n    user: str = None\r\n    occurred_at: float = None\r\n\r\n\r\nstart_time = time.time()\r\nttl = 4\r\n\r\napp = faust.App(\r\n    'page_view_windows_1',\r\n    broker='kafka://localhost:9092',\r\n    topic_partitions=1,\r\n)\r\n\r\npage_view_topic = app.topic('page_views_1', value_type=PageView, partitions=1)\r\n\r\nactive_users_table = app.Table(\r\n    'active_users_1',\r\n    default=None,\r\n    partitions=1).tumbling(\r\n    ttl,\r\n    expires=timedelta(seconds=30),\r\n    key_index=True\r\n).relative_to_field(PageView.occurred_at)\r\n\r\n\r\n@app.timer(interval=2, on_leader=True)\r\nasync def generator():\r\n    user = ''.join(random.choices(string.ascii_uppercase + string.digits, k=7))\r\n    page_view = PageView(str(uuid.uuid4()), user, time.time())\r\n    await page_view_topic.send(value=page_view)\r\n\r\n\r\n@app.agent(page_view_topic)\r\nasync def print_windowed_events(stream):\r\n    async for page_view in stream:\r\n        active_users_table[page_view.user] = page_view.occurred_at\r\n\r\n        print('-- New Event (every 2 secs) --')\r\n        print(f\"seconds since start: {page_view.occurred_at - start_time}\")\r\n        print(f\"{len(active_users_table.keys())}, {repr([k for (k, v) in active_users_table.items()])}\")\r\n        print(f\"{repr([k for (k, v) in active_users_table.items().delta(ttl)])}\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.main()\r\n```\r\n\r\n## Expected behavior\r\n\r\nI want to see the output of the program\r\n\r\n## Actual behavior\r\n\r\nI get this error:\r\n\r\n```\r\nValueError: too many values to unpack (expected 2)\r\n```\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n/foo/venv/bin/python /foo/faustwindow/faust_issue.py worker\r\n+\u0192a\u00b5S\u2020 v1.7.4-+-------------------------------------------------------------------+\r\n| id          | page_view_windows_1                                               |\r\n| transport   | [URL('kafka://localhost:9092')]                                   |\r\n| store       | memory:                                                           |\r\n| web         | http://localhost:6066                                             |\r\n| log         | -stderr- (warn)                                                   |\r\n| pid         | 23320                                                             |\r\n| hostname    | localhost                                                         |\r\n| platform    | CPython 3.7.3 (Linux x86_64)                                      |\r\n| drivers     |                                                                   |\r\n|   transport | aiokafka=1.0.3                                                    |\r\n|   web       | aiohttp=3.5.4                                                     |\r\n| datadir     | /foo/faustwindow/page_view_windows_1-data    |\r\n| appdir      | /foo/faustwindow/page_view_windows_1-data/v1 |\r\n+-------------+-------------------------------------------------------------------+\r\n OK ^\r\n[2019-08-30 21:05:23,489: ERROR]: [^---Agent*: __main__.print_windowed_events]: Crashed reason=ValueError('too many values to unpack (expected 2)') \r\nTraceback (most recent call last):\r\n  File \"/foo/venv/lib/python3.7/site-packages/faust/agents/agent.py\", line 625, in _execute_task\r\n    await coro\r\n  File \"/foo/faustwindow/faust_issue.py\", line 50, in print_windowed_events\r\n    active_users_table[page_view.user] = page_view.occurred_at\r\n  File \"/foo/venv/lib/python3.7/site-packages/faust/tables/wrappers.py\", line 430, in __setitem__\r\n    self.on_set_key(key, value)\r\n  File \"/foo/venv/lib/python3.7/site-packages/faust/tables/wrappers.py\", line 438, in on_set_key\r\n    key_index_table[key] = 1\r\n  File \"/foo/venv/lib/python3.7/site-packages/mode/utils/collections.py\", line 505, in __setitem__\r\n    self.on_key_set(key, value)\r\n  File \"/foo/venv/lib/python3.7/site-packages/faust/tables/table.py\", line 79, in on_key_set\r\n    self._maybe_set_key_ttl(key, partition)\r\n  File \"/foo/venv/lib/python3.7/site-packages/faust/tables/base.py\", line 328, in _maybe_set_key_ttl\r\n    _, window_range = key\r\nValueError: too many values to unpack (expected 2)\r\n```\r\n\r\nsorry if this is a noob question.\r\nI'm new to faust, and I just want to learn more about the faust windows, actually I want to test sliding windows, but unfortunately I could not find any article or sample app about them in the docs.\r\nthanks.\r\n# Versions\r\n\r\n* Python version: `3.7.3`\r\n* Faust version: `1.7.4`\r\n* Operating system: `Linux Mint 18.3, kernel: 4.8.0-53-generic`\r\n* Kafka version: `kafka_2.12-2.3.0`\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/411", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/411/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/411/events", "html_url": "https://github.com/robinhood/faust/issues/411", "id": 485941252, "node_id": "MDU6SXNzdWU0ODU5NDEyNTI=", "number": 411, "title": "Intermediate topic naming (long topic name) caused broker crash", "user": {"login": "austinnichols101", "id": 6962379, "node_id": "MDQ6VXNlcjY5NjIzNzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6962379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinnichols101", "html_url": "https://github.com/austinnichols101", "followers_url": "https://api.github.com/users/austinnichols101/followers", "following_url": "https://api.github.com/users/austinnichols101/following{/other_user}", "gists_url": "https://api.github.com/users/austinnichols101/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinnichols101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinnichols101/subscriptions", "organizations_url": "https://api.github.com/users/austinnichols101/orgs", "repos_url": "https://api.github.com/users/austinnichols101/repos", "events_url": "https://api.github.com/users/austinnichols101/events{/privacy}", "received_events_url": "https://api.github.com/users/austinnichols101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-27T17:35:59Z", "updated_at": "2019-11-06T23:30:57Z", "closed_at": "2019-11-06T23:30:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "This code produces an intermediate topic name with a length of 204 characters.  For reference, the maximum kafka topic length is 249 characters.\r\n\r\n\r\n```\r\n# source of: long_topic_name.py #\r\n\r\nimport faust\r\napp = faust.App(id=\"TenantIdentifier.JobIdentifier.ContextIdentifier\")\r\n\r\nasync def my_repartition_function(val):\r\n    return val\r\n\r\n@app.agent()\r\nasync def repartition_agent(stream):\r\n    async for event in stream.group_by(my_repartition_function, name=\"repartition_using_function\"):\r\n        print(event)\r\n```\r\n\r\n```\r\nTenantIdentifier.JobIdentifier.ContextIdentifier-long_topic_name.repartition_agent-long_topic_name.repartition_agent-TenantIdentifier.JobIdentifier.ContextIdentifier-repartition_using_function-repartition\r\n```\r\n\r\n\r\nDue to a bug in kafka (fixed in 2.3.0, 2.1.2, 2.2.2) we had a crash of multiple brokers and had to manually delete the topic from disk and ZK.\r\n\r\nRef: https://issues.apache.org/jira/browse/KAFKA-7156\r\nDeleting topics with long names can bring all brokers to unrecoverable state\r\nRef: https://issues.apache.org/jira/browse/KAFKA-4893\r\nasync topic deletion conflicts with max topic length\r\n\r\n\r\nThere appears to be a problem with the function used to generate the intermediate topic name - multiple repeated elements (app.id, agent function name) and using the source file name (`long_topic_name.py`) as a component of the topic name.\r\n\r\n```\r\nTenantIdentifier.JobIdentifier.ContextIdentifier\r\n-long_topic_name.repartition_agent\r\n-long_topic_name.repartition_agent\r\n-TenantIdentifier.JobIdentifier.ContextIdentifier\r\n-repartition_using_function\r\n-repartition\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/405", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/405/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/405/events", "html_url": "https://github.com/robinhood/faust/issues/405", "id": 482533825, "node_id": "MDU6SXNzdWU0ODI1MzM4MjU=", "number": 405, "title": "[Documentation] Wrong wiki entry", "user": {"login": "lsabi", "id": 13497689, "node_id": "MDQ6VXNlcjEzNDk3Njg5", "avatar_url": "https://avatars0.githubusercontent.com/u/13497689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsabi", "html_url": "https://github.com/lsabi", "followers_url": "https://api.github.com/users/lsabi/followers", "following_url": "https://api.github.com/users/lsabi/following{/other_user}", "gists_url": "https://api.github.com/users/lsabi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsabi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsabi/subscriptions", "organizations_url": "https://api.github.com/users/lsabi/orgs", "repos_url": "https://api.github.com/users/lsabi/repos", "events_url": "https://api.github.com/users/lsabi/events{/privacy}", "received_events_url": "https://api.github.com/users/lsabi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-19T21:20:05Z", "updated_at": "2019-10-08T18:31:00Z", "closed_at": "2019-10-08T18:31:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since it is a problem with the documentation I'm not following the standard template for issue submission.\r\n\r\nThe documentation page [https://faust.readthedocs.io/en/latest/introduction.html](https://faust.readthedocs.io/en/latest/introduction.html) points at [https://wiki.github.com/robinhood/faust/](https://wiki.github.com/robinhood/faust/), which gives me the error: \r\n\r\n> We didn't receive a proper request from your browser. Please contact us if the problem persists.\r\n\r\nUsing:\r\n- Kubuntu 19.04\r\n- Chromium Web Browser (Version 76.0.3809.100 (Official Build) Built on Ubuntu , running on Ubuntu 19.04 (64-bit))", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/404", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/404/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/404/events", "html_url": "https://github.com/robinhood/faust/issues/404", "id": 481666510, "node_id": "MDU6SXNzdWU0ODE2NjY1MTA=", "number": 404, "title": "Handling \"Timer ... woke up too late\" in stream processing?", "user": {"login": "joekohlsdorf", "id": 32424163, "node_id": "MDQ6VXNlcjMyNDI0MTYz", "avatar_url": "https://avatars2.githubusercontent.com/u/32424163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joekohlsdorf", "html_url": "https://github.com/joekohlsdorf", "followers_url": "https://api.github.com/users/joekohlsdorf/followers", "following_url": "https://api.github.com/users/joekohlsdorf/following{/other_user}", "gists_url": "https://api.github.com/users/joekohlsdorf/gists{/gist_id}", "starred_url": "https://api.github.com/users/joekohlsdorf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joekohlsdorf/subscriptions", "organizations_url": "https://api.github.com/users/joekohlsdorf/orgs", "repos_url": "https://api.github.com/users/joekohlsdorf/repos", "events_url": "https://api.github.com/users/joekohlsdorf/events{/privacy}", "received_events_url": "https://api.github.com/users/joekohlsdorf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-16T15:34:56Z", "updated_at": "2020-06-29T11:29:05Z", "closed_at": "2019-08-16T16:57:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "When stream processing I have to pass batches to some external library which takes a couple of seconds to process it. In this case I get constant \"Timer ... woke up too late\" logging.\r\nThis can be simulated with `sleep`:\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n#!/usr/bin/env python\r\nimport faust\r\nimport time\r\n\r\napp = faust.App(\"slow-process\", broker=\"kafka://kafka:9092\")\r\ntopic = app.topic(\"slow-process\", value_type=int)\r\n\r\n\r\nasync def slow_process(batch):\r\n    time.sleep(15)\r\n\r\n\r\n@app.agent(topic)\r\nasync def read_topic(stream):\r\n    async for batch in stream.take(5, within=15):\r\n        await slow_process(batch)\r\n\r\n\r\n@app.timer(5)\r\nasync def produce():\r\n    for value in range(100000):\r\n        await read_topic.send(value=value)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.main()\r\n```\r\n\r\n## Expected behavior\r\n\r\nNo \"Timer ... woke up too late\" messages.\r\n\r\n## Actual behavior\r\n\r\n```\r\n[2019-08-16 15:21:34,077: INFO]: Timer _main_keepalive woke up too late, with a drift of +14.02873296800044 \r\n[2019-08-16 15:21:34,079: INFO]: Timer Monitor.sampler woke up too late, with a drift of +14.028626856000301 \r\n[2019-08-16 15:21:34,080: INFO]: Timer Recovery.stats woke up too late, with a drift of +10.028808629000196 \r\n[2019-08-16 15:21:34,080: INFO]: Timer livelock woke up too late, with a drift of +8.028956610000023 \r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.2\r\n* Faust version: master\r\n* Operating system: Debian Stretch\r\n* Kafka version: 2.2\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/398", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/398/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/398/events", "html_url": "https://github.com/robinhood/faust/issues/398", "id": 477805897, "node_id": "MDU6SXNzdWU0Nzc4MDU4OTc=", "number": 398, "title": "Dynamically add/remove app dependencies", "user": {"login": "martinmaillard", "id": 1334124, "node_id": "MDQ6VXNlcjEzMzQxMjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1334124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinmaillard", "html_url": "https://github.com/martinmaillard", "followers_url": "https://api.github.com/users/martinmaillard/followers", "following_url": "https://api.github.com/users/martinmaillard/following{/other_user}", "gists_url": "https://api.github.com/users/martinmaillard/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinmaillard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinmaillard/subscriptions", "organizations_url": "https://api.github.com/users/martinmaillard/orgs", "repos_url": "https://api.github.com/users/martinmaillard/repos", "events_url": "https://api.github.com/users/martinmaillard/events{/privacy}", "received_events_url": "https://api.github.com/users/martinmaillard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-07T09:16:48Z", "updated_at": "2019-08-14T08:07:59Z", "closed_at": "2019-08-14T08:07:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a weird use case where I need to dynamically start/stop services after the app has already started.\r\n\r\nI don't think Faust provides a way stop/disconnect a service at runtime out of the box. Here's how I'm doing it:\r\n```python\r\nclass MyService(mode.Service):\r\n    ...\r\n\r\n# To start a service\r\nservice = MyService()\r\nawait app.add_runtime_dependency(service)\r\n\r\n# To stop a service\r\nawait service.stop()\r\napp._children.remove(service)\r\n```\r\n\r\nAm I missing anything to properly start/stop services and connect/disconnect them from the main app?\r\n\r\nWould it make sense for me to submit a PR to add a `stop_runtime_dependency` method to `faust.App`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/394", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/394/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/394/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/394/events", "html_url": "https://github.com/robinhood/faust/issues/394", "id": 475339609, "node_id": "MDU6SXNzdWU0NzUzMzk2MDk=", "number": 394, "title": "[question] How do I configure the DatadogMonitor when I add it to the app", "user": {"login": "jgerman", "id": 382443, "node_id": "MDQ6VXNlcjM4MjQ0Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/382443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgerman", "html_url": "https://github.com/jgerman", "followers_url": "https://api.github.com/users/jgerman/followers", "following_url": "https://api.github.com/users/jgerman/following{/other_user}", "gists_url": "https://api.github.com/users/jgerman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgerman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgerman/subscriptions", "organizations_url": "https://api.github.com/users/jgerman/orgs", "repos_url": "https://api.github.com/users/jgerman/repos", "events_url": "https://api.github.com/users/jgerman/events{/privacy}", "received_events_url": "https://api.github.com/users/jgerman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-31T20:23:05Z", "updated_at": "2019-08-01T16:57:30Z", "closed_at": "2019-08-01T16:57:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not a python programmer so I apologize in advance if this is clear in the docs but I don't see it:\r\n\r\nI'm trying to use the datadog monitor in our Faust app, what I see in the docs is that I can set the monitor class like so:\r\n\r\n```\r\napp = faust.App(\r\n   ...,\r\n    Monitor=DatadogMonitor\r\n)\r\n```\r\n\r\nBut I need to be able to configure the host, port, and prefix. I tried instantiating an instance of DatadogMonitor but that blew up. \r\n\r\nHow do I actually configure the monitor to point to our agent?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/393", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/393/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/393/events", "html_url": "https://github.com/robinhood/faust/issues/393", "id": 475153446, "node_id": "MDU6SXNzdWU0NzUxNTM0NDY=", "number": 393, "title": "Regression: custom coercions crash when used with typing.Optional", "user": {"login": "yungchin", "id": 780001, "node_id": "MDQ6VXNlcjc4MDAwMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/780001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yungchin", "html_url": "https://github.com/yungchin", "followers_url": "https://api.github.com/users/yungchin/followers", "following_url": "https://api.github.com/users/yungchin/following{/other_user}", "gists_url": "https://api.github.com/users/yungchin/gists{/gist_id}", "starred_url": "https://api.github.com/users/yungchin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yungchin/subscriptions", "organizations_url": "https://api.github.com/users/yungchin/orgs", "repos_url": "https://api.github.com/users/yungchin/repos", "events_url": "https://api.github.com/users/yungchin/events{/privacy}", "received_events_url": "https://api.github.com/users/yungchin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-31T13:43:23Z", "updated_at": "2019-10-01T11:19:16Z", "closed_at": "2019-10-01T11:19:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nHere's the script I used to `git bisect` this:\r\n\r\n```python\r\nfrom typing import Optional\r\nfrom uuid import UUID, uuid4\r\n\r\nimport faust\r\n\r\n\r\nclass X(faust.Record, coercions={UUID: UUID}):\r\n    uid: Optional[UUID]\r\n\r\n\r\nx = X(uuid4())\r\nprint(\"yay we didn't crash\")\r\n```\r\n\r\n## Expected behavior\r\n\r\nThis used to work fine, we could instantiate a record as expected.\r\n\r\n## Actual behavior\r\n\r\nAs of commit 5ec28de9d4d29ce102defddb8ea426f06016bbbf and up to and including master, this raises an exception when instantiating `X`.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"debug_coercions.py\", line 11, in <module>\r\n    x = X(uuid4())\r\n  File \"<string>\", line 3, in __init__\r\n  File \"/Users/yungchin/src/faust/faust/models/record.py\", line 514, in _init_field\r\n    value = initfun(value)\r\n  File \"/Users/yungchin/src/faust/faust/models/record.py\", line 320, in _init_maybe_coerce\r\n    if isinstance(value, typ):\r\n  File \"/nix/store/x56821haw51fxp0rli8bjkbkhak2nxls-python3-3.7.2/lib/python3.7/typing.py\", line 708, in __instancecheck__                                                                                                                   \r\n    return self.__subclasscheck__(type(obj))\r\n  File \"/nix/store/x56821haw51fxp0rli8bjkbkhak2nxls-python3-3.7.2/lib/python3.7/typing.py\", line 716, in __subclasscheck__                                                                                                                   \r\n    raise TypeError(\"Subscripted generics cannot be used with\"\r\nTypeError: Subscripted generics cannot be used with class and instance checks\r\n```\r\n\r\n# Versions\r\n\r\n* Python version 3.7.2\r\n* Faust version 1.7.4\r\n* Operating system MacOS 10.14.5\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/391", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/391/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/391/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/391/events", "html_url": "https://github.com/robinhood/faust/issues/391", "id": 474098584, "node_id": "MDU6SXNzdWU0NzQwOTg1ODQ=", "number": 391, "title": "Stream.filter doesn't ack filtered events", "user": {"login": "martinmaillard", "id": 1334124, "node_id": "MDQ6VXNlcjEzMzQxMjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1334124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinmaillard", "html_url": "https://github.com/martinmaillard", "followers_url": "https://api.github.com/users/martinmaillard/followers", "following_url": "https://api.github.com/users/martinmaillard/following{/other_user}", "gists_url": "https://api.github.com/users/martinmaillard/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinmaillard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinmaillard/subscriptions", "organizations_url": "https://api.github.com/users/martinmaillard/orgs", "repos_url": "https://api.github.com/users/martinmaillard/repos", "events_url": "https://api.github.com/users/martinmaillard/events{/privacy}", "received_events_url": "https://api.github.com/users/martinmaillard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-29T14:55:19Z", "updated_at": "2020-02-19T04:57:55Z", "closed_at": "2019-09-26T21:46:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not sure if this is a bug or a misunderstanding on my part, but I noticed that `Stream.filter` doesn't \"ack\" filtered events. It causes issues when chaining `filter` with `take`. The specific issue I noticed is that my app hangs forever when trying to stop it, but I suspect that it's not the only one.\r\n\r\n## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nWith the following agent code:\r\n```python\r\n@app.agent(test_topic)\r\nasync def my_agent(stream):\r\n    async for batch in stream.filter(lambda e: False).take(3, within=20):\r\n        print(f'Handle batch: {batch}')\r\n``` \r\n\r\nIf I try to stop the process with ^C (SIGINT), it hangs forever:\r\n```\r\n[2019-07-29 16:48:04,888: WARNING]: [^--Consumer]: wait_empty: Waiting for [(1, <ConsumerMessage: TopicPartition(topic='test-topic', partition=0) offset=20>)] tasks\r\n[2019-07-29 16:48:15,106: WARNING]: [^--Consumer]: wait_empty: Waiting for [(1, <ConsumerMessage: TopicPartition(topic='test-topic', partition=0) offset=20>)] tasks\r\n[2019-07-29 16:48:25,337: WARNING]: [^--Consumer]: wait_empty: Waiting for [(1, <ConsumerMessage: TopicPartition(topic='test-topic', partition=0) offset=20>)] tasks\r\n[2019-07-29 16:48:35,581: WARNING]: [^--Consumer]: wait_empty: Waiting for [(1, <ConsumerMessage: TopicPartition(topic='test-topic', partition=0) offset=20>)] tasks\r\n[2019-07-29 16:48:45,894: WARNING]: [^--Consumer]: wait_empty: Waiting for [(1, <ConsumerMessage: TopicPartition(topic='test-topic', partition=0) offset=20>)] tasks\r\n[2019-07-29 16:48:56,143: WARNING]: [^--Consumer]: wait_empty: Waiting for [(1, <ConsumerMessage: TopicPartition(topic='test-topic', partition=0) offset=20>)] tasks\r\n[2019-07-29 16:49:06,502: WARNING]: [^--Consumer]: wait_empty: Waiting for [(1, <ConsumerMessage: TopicPartition(topic='test-topic', partition=0) offset=20>)] tasks\r\n```\r\n\r\nIf I remove the `filter` call, it stops properly.\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.2\r\n* Faust version: 1.7.4\r\n* Operating system: macOS\r\n* Kafka version: 2.2.1\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/388", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/388/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/388/events", "html_url": "https://github.com/robinhood/faust/issues/388", "id": 469394548, "node_id": "MDU6SXNzdWU0NjkzOTQ1NDg=", "number": 388, "title": "AttributeError: 'faust.transport._cython.conductor.ConductorHandler' object has no attribute 'wait_until_producer_ebb'", "user": {"login": "ritvikgautam", "id": 5216175, "node_id": "MDQ6VXNlcjUyMTYxNzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5216175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ritvikgautam", "html_url": "https://github.com/ritvikgautam", "followers_url": "https://api.github.com/users/ritvikgautam/followers", "following_url": "https://api.github.com/users/ritvikgautam/following{/other_user}", "gists_url": "https://api.github.com/users/ritvikgautam/gists{/gist_id}", "starred_url": "https://api.github.com/users/ritvikgautam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ritvikgautam/subscriptions", "organizations_url": "https://api.github.com/users/ritvikgautam/orgs", "repos_url": "https://api.github.com/users/ritvikgautam/repos", "events_url": "https://api.github.com/users/ritvikgautam/events{/privacy}", "received_events_url": "https://api.github.com/users/ritvikgautam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-17T19:07:20Z", "updated_at": "2019-07-20T00:57:53Z", "closed_at": "2019-07-19T18:57:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nI'm trying to run the full example given [here](https://faust.readthedocs.io/en/latest/userguide/agents.html) in the docs.\r\n\r\n1. Create a `main.py` file with the example code. \r\n2. Run it: `faust -A main worker -l info` \r\n\r\n## Expected behavior\r\n\r\nThe application should start and listen to the input kafka topic for records.\r\n\r\n## Actual behavior\r\n\r\nThe application crashes while starting. Trace below.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nCrashed reason=AttributeError(\"'faust.transport._cython.conductor.ConductorHandler' object has no attribute 'wait_until_producer_ebb'\")\r\nTraceback (most recent call last):\r\n  File \"/Users/ritvik/.local/share/virtualenvs/faust-o7o3ulFq/lib/python3.7/site-packages/faust/app/base.py\", line 1535, in _on_partitions_assigned\r\n    await T(self.topics.on_partitions_assigned)(assigned)\r\n  File \"/Users/ritvik/.local/share/virtualenvs/faust-o7o3ulFq/lib/python3.7/site-packages/faust/utils/tracing.py\", line 121, in corowrapped\r\n    await_ret = await ret\r\n  File \"/Users/ritvik/.local/share/virtualenvs/faust-o7o3ulFq/lib/python3.7/site-packages/faust/transport/conductor.py\", line 287, in on_partitions_assigned\r\n    T(self._update_callback_map)()\r\n  File \"/Users/ritvik/.local/share/virtualenvs/faust-o7o3ulFq/lib/python3.7/site-packages/faust/utils/tracing.py\", line 86, in _inner\r\n    child, fun, callback, *args, **kwargs)\r\n  File \"/Users/ritvik/.local/share/virtualenvs/faust-o7o3ulFq/lib/python3.7/site-packages/faust/utils/tracing.py\", line 110, in call_with_trace\r\n    ret = fun(*args, **kwargs)\r\n  File \"/Users/ritvik/.local/share/virtualenvs/faust-o7o3ulFq/lib/python3.7/site-packages/faust/transport/conductor.py\", line 317, in _update_callback_map\r\n    for tp, channels in self._tp_index.items()\r\n  File \"/Users/ritvik/.local/share/virtualenvs/faust-o7o3ulFq/lib/python3.7/site-packages/faust/transport/conductor.py\", line 317, in <genexpr>\r\n    for tp, channels in self._tp_index.items()\r\n  File \"/Users/ritvik/.local/share/virtualenvs/faust-o7o3ulFq/lib/python3.7/site-packages/faust/transport/conductor.py\", line 324, in _build_handler\r\n    return ConductorHandler(self, tp, channels)\r\n  File \"faust/transport/_cython/conductor.pyx\", line 28, in faust.transport._cython.conductor.ConductorHandler.__init__\r\nAttributeError: 'faust.transport._cython.conductor.ConductorHandler' object has no attribute 'wait_until_producer_ebb'\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.3\r\n* Faust version: 1.7.3\r\n* Operating system: macOS 10.14.5\r\n* Kafka version: 2.2.1\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/387", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/387/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/387/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/387/events", "html_url": "https://github.com/robinhood/faust/issues/387", "id": 469340372, "node_id": "MDU6SXNzdWU0NjkzNDAzNzI=", "number": 387, "title": "Implementation question: Access stream by key?", "user": {"login": "milankaku", "id": 6581533, "node_id": "MDQ6VXNlcjY1ODE1MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6581533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milankaku", "html_url": "https://github.com/milankaku", "followers_url": "https://api.github.com/users/milankaku/followers", "following_url": "https://api.github.com/users/milankaku/following{/other_user}", "gists_url": "https://api.github.com/users/milankaku/gists{/gist_id}", "starred_url": "https://api.github.com/users/milankaku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milankaku/subscriptions", "organizations_url": "https://api.github.com/users/milankaku/orgs", "repos_url": "https://api.github.com/users/milankaku/repos", "events_url": "https://api.github.com/users/milankaku/events{/privacy}", "received_events_url": "https://api.github.com/users/milankaku/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-17T17:06:53Z", "updated_at": "2019-10-30T20:15:42Z", "closed_at": "2019-10-30T20:15:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I do not have a bug, but rather an implementation question. I see that you can send a stream with the key attached.\r\n\r\nIs it possible, as more streams are coming in with different keys, to then go back to that topic and retrieve the latest stream with that key and value? How would that look with a worker?\r\n\r\nMore context: I have a worker that puts streams with a key value pair on the topic, another worker is reading from that topic and performing some calculations. Later on down the line, I need another microservice that will get a key and needs to go back to the original topic and retrieve that stream. Is that possible and how would I implement that? Is there something in the docs you can point me to, because I have not seen anything for this yet.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/383", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/383/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/383/events", "html_url": "https://github.com/robinhood/faust/issues/383", "id": 467132042, "node_id": "MDU6SXNzdWU0NjcxMzIwNDI=", "number": 383, "title": "Potential memory leak using `Table` and rocksdb", "user": {"login": "ipeluffo", "id": 889705, "node_id": "MDQ6VXNlcjg4OTcwNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/889705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipeluffo", "html_url": "https://github.com/ipeluffo", "followers_url": "https://api.github.com/users/ipeluffo/followers", "following_url": "https://api.github.com/users/ipeluffo/following{/other_user}", "gists_url": "https://api.github.com/users/ipeluffo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipeluffo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipeluffo/subscriptions", "organizations_url": "https://api.github.com/users/ipeluffo/orgs", "repos_url": "https://api.github.com/users/ipeluffo/repos", "events_url": "https://api.github.com/users/ipeluffo/events{/privacy}", "received_events_url": "https://api.github.com/users/ipeluffo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-07-11T22:15:20Z", "updated_at": "2019-08-08T08:46:57Z", "closed_at": "2019-07-12T18:45:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nThe source code to reproduce the issue can be found in: https://github.com/ipeluffo/faust-table-test .\r\n\r\nOn one terminal run:\r\n```bash\r\npipenv run faust -A app worker -l info\r\n```\r\n\r\nOn another terminal run:\r\n```bash\r\npipenv run faust -A commands send-events --max-events 1500000\r\n```\r\n\r\n## Expected behavior\r\n\r\nAgent should process all events and store data in a faust table without increasing the memory usage too much.\r\n\r\n## Actual behavior\r\n\r\nMemory usage increase indefinitely.\r\n\r\n## Additional Information\r\n\r\nBefore running the worker, the objects below were the most 20 most common (info taken using `objgraph`):\r\n```\r\nobjgraph.show_most_common_types(limit=20)\r\n[2019-07-11 22:08:00,847: WARNING]: function                   19994\r\n[2019-07-11 22:08:00,848: WARNING]: dict                       15772\r\n[2019-07-11 22:08:00,848: WARNING]: tuple                      12316\r\n[2019-07-11 22:08:00,848: WARNING]: list                       4986\r\n[2019-07-11 22:08:00,848: WARNING]: weakref                    4952\r\n[2019-07-11 22:08:00,848: WARNING]: type                       2775\r\n[2019-07-11 22:08:00,849: WARNING]: getset_descriptor          2734\r\n[2019-07-11 22:08:00,849: WARNING]: cell                       2074\r\n[2019-07-11 22:08:00,849: WARNING]: builtin_function_or_method 1673\r\n[2019-07-11 22:08:00,849: WARNING]: property                   1529\r\n[2019-07-11 22:08:00,849: WARNING]: wrapper_descriptor         1512\r\n[2019-07-11 22:08:00,849: WARNING]: method_descriptor          1438\r\n[2019-07-11 22:08:00,850: WARNING]: module                     1136\r\n[2019-07-11 22:08:00,850: WARNING]: ModuleSpec                 1132\r\n[2019-07-11 22:08:00,850: WARNING]: set                        1074\r\n[2019-07-11 22:08:00,850: WARNING]: _GenericAlias              1055\r\n[2019-07-11 22:08:00,850: WARNING]: SourceFileLoader           1039\r\n[2019-07-11 22:08:00,850: WARNING]: member_descriptor          804\r\n[2019-07-11 22:08:00,851: WARNING]: frozenset                  709\r\n[2019-07-11 22:08:00,851: WARNING]: ABCMeta                    559\r\n```\r\n\r\nAfter processing 1.5 million events:\r\n```\r\nobjgraph.show_most_common_types(limit=20)\r\n[2019-07-11 22:35:27,255: WARNING]: dict                       1515758\r\n[2019-07-11 22:35:27,255: WARNING]: method                     1500518\r\n[2019-07-11 22:35:27,255: WARNING]: FutureMessage              1500000\r\n[2019-07-11 22:35:27,255: WARNING]: PendingMessage             1500000\r\n[2019-07-11 22:35:27,256: WARNING]: function                   20000\r\n[2019-07-11 22:35:27,256: WARNING]: tuple                      11588\r\n[2019-07-11 22:35:27,256: WARNING]: weakref                    5173\r\n[2019-07-11 22:35:27,256: WARNING]: list                       5117\r\n[2019-07-11 22:35:27,256: WARNING]: type                       2775\r\n[2019-07-11 22:35:27,256: WARNING]: getset_descriptor          2734\r\n[2019-07-11 22:35:27,256: WARNING]: cell                       2082\r\n[2019-07-11 22:35:27,256: WARNING]: builtin_function_or_method 1891\r\n[2019-07-11 22:35:27,256: WARNING]: property                   1529\r\n[2019-07-11 22:35:27,257: WARNING]: wrapper_descriptor         1516\r\n[2019-07-11 22:35:27,257: WARNING]: method_descriptor          1441\r\n[2019-07-11 22:35:27,257: WARNING]: module                     1136\r\n[2019-07-11 22:35:27,258: WARNING]: ModuleSpec                 1132\r\n[2019-07-11 22:35:27,258: WARNING]: set                        1083\r\n[2019-07-11 22:35:27,258: WARNING]: _GenericAlias              1055\r\n[2019-07-11 22:35:27,258: WARNING]: SourceFileLoader           1039\r\n```\r\n\r\nMemory usage before processing events:\r\n<img width=\"665\" alt=\"Faust 01 - Before processing events\" src=\"https://user-images.githubusercontent.com/889705/61088838-36211000-a431-11e9-853e-b7a96a167e36.png\">\r\n\r\nMemory usage after processing 1.5 million events:\r\n<img width=\"669\" alt=\"Faust 02 - After processing events\" src=\"https://user-images.githubusercontent.com/889705/61088837-36211000-a431-11e9-8a3f-0a57cc4068ce.png\">\r\n\r\nMemory usage after restarting the worker:\r\n<img width=\"666\" alt=\"Faust 03 - After restarting worker\" src=\"https://user-images.githubusercontent.com/889705/61088835-35887980-a431-11e9-922c-26e4d64ee266.png\">\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.3\r\n* Faust version: 1.7.1\r\n* Operating system: macOS Mojave 10.14.5\r\n* Kafka version: 2.2.0\r\n* RocksDB version (if applicable)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/380", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/380/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/380/events", "html_url": "https://github.com/robinhood/faust/issues/380", "id": 465466179, "node_id": "MDU6SXNzdWU0NjU0NjYxNzk=", "number": 380, "title": "Permission Denied for creating data directory", "user": {"login": "milankaku", "id": 6581533, "node_id": "MDQ6VXNlcjY1ODE1MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6581533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milankaku", "html_url": "https://github.com/milankaku", "followers_url": "https://api.github.com/users/milankaku/followers", "following_url": "https://api.github.com/users/milankaku/following{/other_user}", "gists_url": "https://api.github.com/users/milankaku/gists{/gist_id}", "starred_url": "https://api.github.com/users/milankaku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milankaku/subscriptions", "organizations_url": "https://api.github.com/users/milankaku/orgs", "repos_url": "https://api.github.com/users/milankaku/repos", "events_url": "https://api.github.com/users/milankaku/events{/privacy}", "received_events_url": "https://api.github.com/users/milankaku/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-08T21:23:48Z", "updated_at": "2019-07-09T16:17:44Z", "closed_at": "2019-07-09T16:17:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [X ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nI am currently trying to deploy a faust worker to Kubernetes. Here is my Dockerfile:\r\n`# Using lightweight alpine image\r\nFROM python:3.6-alpine\r\n\r\n# Installing packages\r\nRUN apk update\r\nRUN apk add --no-cache curl python3 pkgconfig snappy-dev python3-dev g++ gcc libxml2-dev libxslt-dev openssl-dev libffi-dev musl-dev make gcc\r\n\r\n# Defining working directory and adding source code\r\nWORKDIR /usr\r\nCOPY requirements.txt ./\r\nCOPY src ./src\r\nCOPY schemas ./schemas\r\n\r\n# Install API dependencies\r\nRUN pip3 install -r requirements.txt\r\n\r\nRUN chmod -R 755 .\r\n\r\nWORKDIR /usr/src\r\n\r\nCMD faust -A producer -l info worker`\r\n\r\n## Expected behavior\r\n\r\nI expect the worker to run as it does locally\r\n\r\n## Actual behavior\r\n\r\nThis is the error I am getting in Kubernetes logs for this pod:\r\n`+\u0192a\u00b5S\u2020 v1.7.0-+------------------------------------------------+\r\n| id          | producer                                       |\r\n| transport   | [URL('kafka://ovp.com:9093')]     |\r\n| store       | memory:                                        |\r\n| web         | http://localhost:6066/                         |\r\n| log         | -stderr- (info)                                |\r\n| pid         | 1                                              |\r\n| hostname    | faust-demo-producer-master-28-7bdbc9f9f6-qxbh5 |\r\n| platform    | CPython 3.6.8 (Linux x86_64)                   |\r\n| drivers     |                                                |\r\n|   transport | aiokafka=1.0.3                                 |\r\n|   web       | aiohttp=3.5.4                                  |\r\n| datadir     | /usr/src/producer-data                         |\r\n| appdir      | /usr/src/producer-data/v1                      |\r\n+-------------+------------------------------------------------+\r\n[2019-07-08 21:08:38,677: INFO]: [^Worker]: Starting...\r\n[2019-07-08 21:08:38,684: ERROR]: [^Worker]: Error: PermissionError(13, 'Permission denied')\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/worker.py\", line 264, in execute_from_commandline\r\n    self.loop.run_until_complete(self._starting_fut)\r\n  File \"/usr/local/lib/python3.6/asyncio/base_events.py\", line 484, in run_until_complete\r\n    return future.result()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 750, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 778, in maybe_start\r\n    await self.start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/mode/services.py\", line 734, in _actually_start\r\n    await self.on_first_start()\r\n  File \"/usr/local/lib/python3.6/site-packages/faust/app/base.py\", line 562, in on_first_start\r\n    self._create_directories()\r\n  File \"/usr/local/lib/python3.6/site-packages/faust/app/base.py\", line 1607, in _create_directories\r\n    self.conf.datadir.mkdir(exist_ok=True)\r\n  File \"/usr/local/lib/python3.6/pathlib.py\", line 1248, in mkdir\r\n    self._accessor.mkdir(self, mode)\r\n  File \"/usr/local/lib/python3.6/pathlib.py\", line 387, in wrapped\r\n    return strfunc(str(pathobj), *args)\r\nPermissionError: [Errno 13] Permission denied: 'producer-data'`\r\n\r\n\r\nAny ideas on why I continue to get this error? I have tried variations on the Dockerfile, such as creating the producer-data directory before hand but I am still getting the same error\r\n\r\n# Versions\r\n\r\n* Python version\r\n* Faust version\r\n* Operating system\r\n* Kafka version\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/379", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/379/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/379/events", "html_url": "https://github.com/robinhood/faust/issues/379", "id": 465394710, "node_id": "MDU6SXNzdWU0NjUzOTQ3MTA=", "number": 379, "title": "transport/consumer.py::_new_offset calculation wrong?", "user": {"login": "trauter", "id": 16337283, "node_id": "MDQ6VXNlcjE2MzM3Mjgz", "avatar_url": "https://avatars3.githubusercontent.com/u/16337283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trauter", "html_url": "https://github.com/trauter", "followers_url": "https://api.github.com/users/trauter/followers", "following_url": "https://api.github.com/users/trauter/following{/other_user}", "gists_url": "https://api.github.com/users/trauter/gists{/gist_id}", "starred_url": "https://api.github.com/users/trauter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trauter/subscriptions", "organizations_url": "https://api.github.com/users/trauter/orgs", "repos_url": "https://api.github.com/users/trauter/repos", "events_url": "https://api.github.com/users/trauter/events{/privacy}", "received_events_url": "https://api.github.com/users/trauter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-08T18:17:02Z", "updated_at": "2019-09-26T12:47:16Z", "closed_at": "2019-09-26T12:47:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n- create a compacted topic on kafka. Make sure that some offsets are already deleted. e.g.: 1 2 4 5 6\r\n- consume this topic\r\n\r\n## Expected behavior\r\n- all offsets are committed (commit offset=6)\r\n\r\n## Actual behavior\r\n- all messages are consumed, but only 2 is committed\r\n\r\n# Versions\r\nv1.7.0-23-g5ec28de9\r\n\r\n\r\nBefore coming up with a patch, I want to ensure that there really is a problem:\r\n\r\nMy understanding:\r\nThe current implementation of _new_offset tries to find the first consecutive list of acknowledged offsets and commits the last offset of this list.\r\n\r\nThis does not seem to work if an offset is missing (e.g., a compacted topic). In this case, the full commit will be done delayed (in the above example, a potential second commit (after new messages arrive) will commit 6). \r\n\r\nMoreover, this raises the questions whether it is possible to create a situation where one offset remains non-acknowledged, while higher offsets are acked. For example: _acked=[1 2 4 5]. If (in a very  constructed use-case), this TopicPartion is committed twice, the current implementation would first commit 2 and then 5, without ensuring that 3 has ever been acknowledged.\r\n\r\nMy suggestion would be to hold a list of consumed offsets per TP (e.g. in _drain_messages) and compare that list against the acked list in order to calculate the commit offset. \r\nI could create the patch but before I wanted to ensure that I'm not just using it wrong ;).\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/373", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/373/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/373/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/373/events", "html_url": "https://github.com/robinhood/faust/issues/373", "id": 460584296, "node_id": "MDU6SXNzdWU0NjA1ODQyOTY=", "number": 373, "title": "Implement Rabbit/AMQP Channel", "user": {"login": "sivy", "id": 70188, "node_id": "MDQ6VXNlcjcwMTg4", "avatar_url": "https://avatars3.githubusercontent.com/u/70188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sivy", "html_url": "https://github.com/sivy", "followers_url": "https://api.github.com/users/sivy/followers", "following_url": "https://api.github.com/users/sivy/following{/other_user}", "gists_url": "https://api.github.com/users/sivy/gists{/gist_id}", "starred_url": "https://api.github.com/users/sivy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sivy/subscriptions", "organizations_url": "https://api.github.com/users/sivy/orgs", "repos_url": "https://api.github.com/users/sivy/repos", "events_url": "https://api.github.com/users/sivy/events{/privacy}", "received_events_url": "https://api.github.com/users/sivy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-25T18:50:56Z", "updated_at": "2020-01-22T09:59:56Z", "closed_at": "2019-10-01T13:03:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some of us have existing RabbitMQ/AMQP implementations that would benefit from being migrated/extended into a Kafka environment; it would be helpful is there was a sandard (if limited) Rabbit/AMQP channel that we could use to consume message from Rabbit and publish them into Kafka (and vice versa).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/372", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/372/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/372/events", "html_url": "https://github.com/robinhood/faust/issues/372", "id": 460434070, "node_id": "MDU6SXNzdWU0NjA0MzQwNzA=", "number": 372, "title": "There's no way to configure LRU key_size_limit", "user": {"login": "jpzk", "id": 31909, "node_id": "MDQ6VXNlcjMxOTA5", "avatar_url": "https://avatars3.githubusercontent.com/u/31909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpzk", "html_url": "https://github.com/jpzk", "followers_url": "https://api.github.com/users/jpzk/followers", "following_url": "https://api.github.com/users/jpzk/following{/other_user}", "gists_url": "https://api.github.com/users/jpzk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpzk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpzk/subscriptions", "organizations_url": "https://api.github.com/users/jpzk/orgs", "repos_url": "https://api.github.com/users/jpzk/repos", "events_url": "https://api.github.com/users/jpzk/events{/privacy}", "received_events_url": "https://api.github.com/users/jpzk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-25T13:44:42Z", "updated_at": "2019-06-25T20:58:18Z", "closed_at": "2019-06-25T20:58:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running Faust 1.7.0, there is no way to configure the underlying LRUCache. E.g. in my case, I need to set the LRUCache key size limit to 0. The default value is fixed to 10.000 keys. Here it does not take into account, that the value could be potentially big, so it will blow up the memory (there's no storage size limit set).\r\n\r\nhttps://github.com/robinhood/faust/blob/3cf078a6239b29f442f05cf318fda96264e37204/faust/stores/rocksdb.py#L152\r\n\r\nhttps://github.com/robinhood/faust/blob/3cf078a6239b29f442f05cf318fda96264e37204/faust/stores/rocksdb.py#L165\r\n\r\n## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nConsume from a topic, store something in a table, where value is big.\r\n\r\n## Expected behavior\r\n\r\nIt should not run out of memory.\r\n\r\n## Actual behavior\r\n\r\nIt runs out of memory, since values for 10.000 keys are cached.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nPaste the full traceback (if there is any)\r\n```\r\n\r\n# Versions\r\n\r\n* Python version 3.7\r\n* Faust version 1.7\r\n* Operating system MacOS\r\n* Kafka version 2.1\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/370", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/370/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/370/events", "html_url": "https://github.com/robinhood/faust/issues/370", "id": 459132763, "node_id": "MDU6SXNzdWU0NTkxMzI3NjM=", "number": 370, "title": "\"[^-App]: Warning: Task timed out!\" when running development branch", "user": {"login": "CesarPantoja", "id": 13560711, "node_id": "MDQ6VXNlcjEzNTYwNzEx", "avatar_url": "https://avatars3.githubusercontent.com/u/13560711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CesarPantoja", "html_url": "https://github.com/CesarPantoja", "followers_url": "https://api.github.com/users/CesarPantoja/followers", "following_url": "https://api.github.com/users/CesarPantoja/following{/other_user}", "gists_url": "https://api.github.com/users/CesarPantoja/gists{/gist_id}", "starred_url": "https://api.github.com/users/CesarPantoja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CesarPantoja/subscriptions", "organizations_url": "https://api.github.com/users/CesarPantoja/orgs", "repos_url": "https://api.github.com/users/CesarPantoja/repos", "events_url": "https://api.github.com/users/CesarPantoja/events{/privacy}", "received_events_url": "https://api.github.com/users/CesarPantoja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-21T10:37:31Z", "updated_at": "2020-05-15T21:35:50Z", "closed_at": "2020-05-15T21:35:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nTry to run an example from the development branch (`MASTER`)\r\n\r\n## Expected behaviour\r\n\r\nThe examples to run successfully \r\n\r\n## Actual behaviour\r\n\r\nThe application hangs for a few seconds (about 10) then I get a time out error:\r\n```\r\n +\u0192a\u00b5S\u2020 v1.7.0-+------------------------------------------------------------------------------------------------------+\r\n| id          | hello-world                                                                                          |\r\n| transport   | [URL('kafka://172.31.0.16:9092'), URL('kafka://172.31.0.17:9092'), URL('kafka://172.31.0.18:9092')]  |\r\n| store       | memory:                                                                                              |\r\n| web         | http://localhost:6066/                                                                               |\r\n| log         | -stderr- (warn)                                                                                      |\r\n| pid         | 21353                                                                                                |\r\n| hostname    | cesar-laptop                                                                                         |\r\n| platform    | CPython 3.7.3 (Linux x86_64)                                                                         |\r\n| drivers     |                                                                                                      |\r\n|   transport | aiokafka=1.0.3                                                                                       |\r\n|   web       | aiohttp=3.5.4                                                                                        |\r\n| datadir     | /home/cesar/dev/faust/examples/hello-world-data                                                      |\r\n| appdir      | /home/cesar/dev/faust/examples/hello-world-data/v1                                                   |\r\n+-------------+------------------------------------------------------------------------------------------------------+\r\n[2019-06-21 10:31:36,666: WARNING]: [^-App]: Warning: Task timed out! \r\n[2019-06-21 10:31:36,678: WARNING]: [^-App]: Please make sure it's hanging before restart. \r\n```\r\n\r\n# Versions\r\n\r\n* Python version: `3.7.3`\r\n* Faust version: `1.6.0`\r\n* Operating system: `5.1.8-arch1-1-ARCH #1 SMP PREEMPT Sun Jun 9 20:28:28 UTC 2019 x86_64 GNU/Linux`\r\n* Kafka version: `confluent-community-2.12`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/367", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/367/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/367/events", "html_url": "https://github.com/robinhood/faust/issues/367", "id": 457937114, "node_id": "MDU6SXNzdWU0NTc5MzcxMTQ=", "number": 367, "title": "[^--Consumer]: Crashed reason=ProducerFenced('There is a newer producer using the same transactional_id.') when running another app in the same Kafka pipeline", "user": {"login": "CesarPantoja", "id": 13560711, "node_id": "MDQ6VXNlcjEzNTYwNzEx", "avatar_url": "https://avatars3.githubusercontent.com/u/13560711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CesarPantoja", "html_url": "https://github.com/CesarPantoja", "followers_url": "https://api.github.com/users/CesarPantoja/followers", "following_url": "https://api.github.com/users/CesarPantoja/following{/other_user}", "gists_url": "https://api.github.com/users/CesarPantoja/gists{/gist_id}", "starred_url": "https://api.github.com/users/CesarPantoja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CesarPantoja/subscriptions", "organizations_url": "https://api.github.com/users/CesarPantoja/orgs", "repos_url": "https://api.github.com/users/CesarPantoja/repos", "events_url": "https://api.github.com/users/CesarPantoja/events{/privacy}", "received_events_url": "https://api.github.com/users/CesarPantoja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-19T10:39:29Z", "updated_at": "2019-06-20T18:34:44Z", "closed_at": "2019-06-20T18:34:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nWe have a Kafka cluster which has a Faust app running. When I try to run another Faust app, I get the error in the title on both instances.\r\n\r\n## Expected behaviour\r\n\r\nFor there not to be an error thrown.\r\n\r\n## Actual behaviour\r\n\r\nA `ProducerFenced('There is a newer producer using the same transactional_id.')` is thrown on both apps.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[2019-06-19 11:19:10,632: ERROR]: Producer for transactional id '0-0' fenced \r\n[2019-06-19 11:19:10,634: ERROR]: [^--Consumer]: Crashed reason=ProducerFenced('There is a newer producer using the same transactional_id.') \r\nTraceback (most recent call last):\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/mode/services.py\", line 762, in _execute_task\r\n    await task\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 762, in _commit_handler\r\n    await self.commit()\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 791, in commit\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/mode/services.py\", line 456, in _and_transition\r\n    return await fun(self, *args, **kwargs)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 825, in force_commit\r\n    commit_tps, start_new_transaction=start_new_transaction)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 843, in _commit_tps\r\n    start_new_transaction=start_new_transaction)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 907, in _commit_offsets\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 310, in commit\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/drivers/aiokafka.py\", line 570, in commit_transactions\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 748, in commit\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 758, in _commit\r\n    transactional_id, offsets, group_id)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 950, in send_offsets_to_transaction\r\n    yield from asyncio.shield(fut, loop=self._loop)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/sender.py\", line 167, in _sender_routine\r\n    task.result()\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/sender.py\", line 342, in _do_add_offsets_to_txn\r\n    return (yield from handler.do(node_id))\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/sender.py\", line 410, in do\r\n    retry_backoff = self.handle_response(resp)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/sender.py\", line 571, in handle_response\r\n    raise ProducerFenced()\r\naiokafka.errors.ProducerFenced: ProducerFenced: There is a newer producer using the same transactional_id.\r\n[2019-06-19 11:19:10,658: ERROR]: [^Worker]: Error while stopping child <App(test-faust-cesar-group-9-v4): [URL('kafka://172.31.0.16:9092'), URL('kafka://172.31.0.17:9092'), URL('kafka://172.31.0.18:9092')] crashed agents(<AgentManager: crashed >) 0x7f32a2acec50>: IllegalOperation('Not in the middle of a transaction') \r\nTraceback (most recent call last):\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/mode/services.py\", line 841, in _default_stop_children\r\n    await asyncio.shield(child.stop())\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/mode/services.py\", line 820, in stop\r\n    await self.on_stop()\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/app/base.py\", line 1358, in on_stop\r\n    await self._stop_consumer()\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/app/base.py\", line 1384, in _stop_consumer\r\n    await self._consumer_wait_empty(consumer, self.log)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/app/base.py\", line 1390, in _consumer_wait_empty\r\n    await consumer.wait_empty()\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/mode/services.py\", line 456, in _and_transition\r\n    return await fun(self, *args, **kwargs)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 741, in wait_empty\r\n    await T(self.commit_and_end_transactions)()\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 745, in commit_and_end_transactions\r\n    await self.commit(start_new_transaction=False)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 791, in commit\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/mode/services.py\", line 456, in _and_transition\r\n    return await fun(self, *args, **kwargs)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 825, in force_commit\r\n    commit_tps, start_new_transaction=start_new_transaction)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 843, in _commit_tps\r\n    start_new_transaction=start_new_transaction)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 907, in _commit_offsets\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/consumer.py\", line 310, in commit\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/faust/transport/drivers/aiokafka.py\", line 570, in commit_transactions\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 748, in commit\r\n    start_new_transaction=start_new_transaction,\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 758, in _commit\r\n    transactional_id, offsets, group_id)\r\n  File \"/home/cesar/dev/TA/mono/bitcoin/faust_app/venv/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 937, in send_offsets_to_transaction\r\n    raise IllegalOperation(\"Not in the middle of a transaction\")\r\naiokafka.errors.IllegalOperation: Not in the middle of a transaction\r\n[2019-06-19 11:19:12,973: CRITICAL]: [^Worker]: We experienced a crash! Reraising original exception... \r\n\r\nProcess finished with exit code 1\r\n\r\n```\r\n# Versions\r\n\r\n* Python version: `3.7.3`\r\n* Faust version: `1.6.0`\r\n* Operating system: `5.1.8-arch1-1-ARCH #1 SMP PREEMPT Sun Jun 9 20:28:28 UTC 2019 x86_64 GNU/Linux`\r\n* Kafka version: `confluent-community-2.12`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/366", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/366/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/366/events", "html_url": "https://github.com/robinhood/faust/issues/366", "id": 457871281, "node_id": "MDU6SXNzdWU0NTc4NzEyODE=", "number": 366, "title": "Global cache to share configuration data", "user": {"login": "apapikyan", "id": 4134169, "node_id": "MDQ6VXNlcjQxMzQxNjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4134169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apapikyan", "html_url": "https://github.com/apapikyan", "followers_url": "https://api.github.com/users/apapikyan/followers", "following_url": "https://api.github.com/users/apapikyan/following{/other_user}", "gists_url": "https://api.github.com/users/apapikyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/apapikyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apapikyan/subscriptions", "organizations_url": "https://api.github.com/users/apapikyan/orgs", "repos_url": "https://api.github.com/users/apapikyan/repos", "events_url": "https://api.github.com/users/apapikyan/events{/privacy}", "received_events_url": "https://api.github.com/users/apapikyan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-19T08:19:06Z", "updated_at": "2019-09-19T19:45:15Z", "closed_at": "2019-09-19T19:45:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ ] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nCurrently there is no global cache support in Faust\r\n\r\n## Expected behavior\r\n\r\nI need to store some app preferences in a shared table which always has up to date data.\r\nI need to be able to update the table from any of the nodes and be able to get the updated values anywhere in the app.\r\n\r\n## Actual behavior\r\n\r\nNot supported.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nPaste the full traceback (if there is any)\r\n```\r\n\r\n# Versions\r\n\r\n* Python version\r\n* Faust version\r\n* Operating system\r\n* Kafka version\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/365", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/365/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/365/events", "html_url": "https://github.com/robinhood/faust/issues/365", "id": 456914754, "node_id": "MDU6SXNzdWU0NTY5MTQ3NTQ=", "number": 365, "title": "Stringify topic", "user": {"login": "DeoLeung", "id": 3764720, "node_id": "MDQ6VXNlcjM3NjQ3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3764720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeoLeung", "html_url": "https://github.com/DeoLeung", "followers_url": "https://api.github.com/users/DeoLeung/followers", "following_url": "https://api.github.com/users/DeoLeung/following{/other_user}", "gists_url": "https://api.github.com/users/DeoLeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeoLeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeoLeung/subscriptions", "organizations_url": "https://api.github.com/users/DeoLeung/orgs", "repos_url": "https://api.github.com/users/DeoLeung/repos", "events_url": "https://api.github.com/users/DeoLeung/events{/privacy}", "received_events_url": "https://api.github.com/users/DeoLeung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-17T12:45:21Z", "updated_at": "2019-06-20T15:12:33Z", "closed_at": "2019-06-20T15:12:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\n```python\r\nimport enum\r\n\r\nclass Topic(str, enum.Enum):\r\n  audit = 'audit'\r\n\r\n# ok\r\naudit_topic = app.topic(Topic.audit.value, value_type=bytes)\r\n# not ok\r\naudit_topic = app.topic(Topic.audit, value_type=bytes)\r\n```\r\n\r\n## Expected behavior\r\n\r\nusing string enum shall have same effect as pure string\r\n\r\n## Actual behavior\r\n\r\nusing enum and string got difference\r\n```bash\r\n[2019-06-17 20:35:27,118: INFO]: Updating subscribed topics to: frozenset({<Topic.audit: 'audit'>, 'audit'})\r\n```\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nPaste the full traceback (if there is any)\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.3\r\n* Faust version: 1.7.0\r\n* Operating system: any\r\n* Kafka version: 2.1.0\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/363", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/363/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/363/events", "html_url": "https://github.com/robinhood/faust/issues/363", "id": 455214341, "node_id": "MDU6SXNzdWU0NTUyMTQzNDE=", "number": 363, "title": "Can't write back to topic - TypeError: Not supported type for value: <class 'dict'>", "user": {"login": "CesarPantoja", "id": 13560711, "node_id": "MDQ6VXNlcjEzNTYwNzEx", "avatar_url": "https://avatars3.githubusercontent.com/u/13560711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CesarPantoja", "html_url": "https://github.com/CesarPantoja", "followers_url": "https://api.github.com/users/CesarPantoja/followers", "following_url": "https://api.github.com/users/CesarPantoja/following{/other_user}", "gists_url": "https://api.github.com/users/CesarPantoja/gists{/gist_id}", "starred_url": "https://api.github.com/users/CesarPantoja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CesarPantoja/subscriptions", "organizations_url": "https://api.github.com/users/CesarPantoja/orgs", "repos_url": "https://api.github.com/users/CesarPantoja/repos", "events_url": "https://api.github.com/users/CesarPantoja/events{/privacy}", "received_events_url": "https://api.github.com/users/CesarPantoja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-12T13:28:20Z", "updated_at": "2019-06-13T17:34:15Z", "closed_at": "2019-06-13T17:34:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "faust v1.6.0\r\n## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nI'm trying to run an application that reads from a topic, does some processing, and writes back to another topic. The code is the following:\r\n\r\n```python\r\nimport faust\r\nfrom schema_registry.client import SchemaRegistryClient\r\nfrom schema_registry.serializer import MessageSerializer\r\nfrom collections import defaultdict\r\n\r\napp = faust.App(\r\n    \"cesar_test_groups_5\",\r\n    broker=\"kafka://172.31.0.16:9092\",\r\n    store='rocksdb://',\r\n    value_serializer=\"raw\",\r\n)\r\n\r\napp.config_from_object({\r\n    \"topic_replication_factor\": 2,\r\n    \"topic_partitions\": 1,\r\n    \"consumer_auto_offset_reset\": \"earliest\"})\r\n\r\n\r\nclass Group(faust.Record):\r\n    pubKeyHashes: list\r\n\r\n\r\ntransactions_topic = app.topic(\"cesar-test-btc-graph-confirmed-transactions\", value_type=bytes)\r\ngroups_topic = app.topic(\"cesar-test-btc-graph-groups\", value_type=Group)\r\n\r\nlocked_by = app.Table(\"test_btc_locked_by\", default=defaultdict)\r\n\r\n\r\n@app.agent(transactions_topic)\r\nasync def processor(stream):\r\n    serde = MessageSerializer(SchemaRegistryClient(\"http://localhost:8081\"))\r\n\r\n    async for payload in stream:\r\n        tx = serde.decode_message(payload)\r\n        transaction = tx['transaction']\r\n        print(f'processing transaction {transaction[\"transactionId\"]}')\r\n\r\n        outputs = tx['outputs']\r\n        for vout in outputs:\r\n            if len(vout['scriptPubKeyAddresses']) > 0:\r\n                # send the new group back to the stream\r\n                await groups_topic.send(value=Group(pubKeyHashes=vout['scriptPubKeyAddresses']))\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.main()\r\n\r\n```\r\n\r\n## Expected behaviour\r\n\r\nThe app should write to the `groups_topic` topic\r\n\r\n## Actual behaviour\r\n\r\nInstead, I get a `TypeError(\"Not supported type for value: <class 'dict'>\") ` error.\r\n\r\n```\r\n[2019-06-12 14:22:33,178: WARNING]: processing transaction e1cf3476234d8446653ad52a8939ed792003eefdcd0e897319ab9d2cb4c14c8c \r\n[2019-06-12 14:22:33,180: ERROR]: [^---Agent*: __main__.processor]: Crashed reason=TypeError(\"Not supported type for value: <class 'dict'>\") \r\nTraceback (most recent call last):\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/faust/agents/agent.py\", line 601, in _execute_task\r\n    await coro\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/txns_inflow_to_address.py\", line 42, in processor\r\n    await groups_topic.send(value=Group(pubKeyHashes=vout['scriptPubKeyAddresses']))\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/faust/topics.py\", line 184, in send\r\n    callback=callback,\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/faust/channels.py\", line 218, in _send_now\r\n    key_serializer, value_serializer, callback))\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/faust/topics.py\", line 373, in publish_message\r\n    headers=headers,\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/faust/transport/drivers/aiokafka.py\", line 631, in send\r\n    transactional_id=transactional_id,\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/aiokafka/producer/producer.py\", line 317, in send\r\n    timestamp_ms=timestamp_ms, headers=headers)\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/aiokafka/producer/message_accumulator.py\", line 336, in add_message\r\n    future = batch.append(key, value, timestamp_ms, headers=headers)\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/aiokafka/producer/message_accumulator.py\", line 138, in append\r\n    timestamp=timestamp_ms, key=key, value=value, headers=headers)\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/aiokafka/producer/message_accumulator.py\", line 53, in append\r\n    headers=headers)\r\n  File \"/home/cesar/dev/TA/mono/stream/txns-inflow-to-address/venv/lib/python3.7/site-packages/aiokafka/record/default_records.py\", line 416, in append\r\n    \"Not supported type for value: {}\".format(type(value)))\r\nTypeError: Not supported type for value: <class 'dict'>\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: `3.7.3`\r\n* Faust version: `1.6.0`\r\n* Operating system: `5.1.8-arch1-1-ARCH #1 SMP PREEMPT Sun Jun 9 20:28:28 UTC 2019 x86_64 GNU/Linux`\r\n* Kafka version: `confluent-community-2.12`\r\n\r\nAny help is appreciated! Thanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/358", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/358/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/358/events", "html_url": "https://github.com/robinhood/faust/issues/358", "id": 451828269, "node_id": "MDU6SXNzdWU0NTE4MjgyNjk=", "number": 358, "title": "partitions argument for Table is ignored", "user": {"login": "sohaibfarooqi", "id": 13061583, "node_id": "MDQ6VXNlcjEzMDYxNTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/13061583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sohaibfarooqi", "html_url": "https://github.com/sohaibfarooqi", "followers_url": "https://api.github.com/users/sohaibfarooqi/followers", "following_url": "https://api.github.com/users/sohaibfarooqi/following{/other_user}", "gists_url": "https://api.github.com/users/sohaibfarooqi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sohaibfarooqi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sohaibfarooqi/subscriptions", "organizations_url": "https://api.github.com/users/sohaibfarooqi/orgs", "repos_url": "https://api.github.com/users/sohaibfarooqi/repos", "events_url": "https://api.github.com/users/sohaibfarooqi/events{/privacy}", "received_events_url": "https://api.github.com/users/sohaibfarooqi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-04T06:58:01Z", "updated_at": "2019-06-04T08:04:45Z", "closed_at": "2019-06-04T08:04:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\n```python\r\nimport faust\r\n\r\napp = faust.App(\r\n  'test',\r\n  version=1,\r\n  broker='kafka://localhost:9092',\r\n  store='memory://',\r\n  topic_partitions=2,\r\n  processing_guarantee='exactly_once',\r\n)\r\n\r\nclass Model(faust.Record):\r\n  a: int\r\n  b: int\r\n\r\ntest_topic = app.topic(\r\n  'test_topic',\r\n  value_type=Model,\r\n  partitions=2\r\n)\r\n\r\ntest_table = app.Table(\r\n  'test_table',\r\n  default=int,\r\n  partitions=2\r\n)\r\n\r\n@app.agent(test_topic)\r\nasync def process(test_stream):\r\n  async for stream in test_stream:\r\n    test_table[stream.a] += 1\r\n\r\n@app.timer(5)\r\nasync def produce():\r\n  for i in range(10):\r\n    obj = Model(i, i+1)\r\n    await test_topic.send(value=obj)\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe above script should create 2 partitions for both `test_topic` and \r\n`test-test_table-changelog`.\r\n\r\n## Actual behavior\r\n\r\nKafka shows only 1 partition being created for `test_topic`:\r\n\r\n```shell\r\n ./kafka-topics.sh --describe --zookeeper localhost:2181 --topic test_topic\r\nTopic:test_topic\tPartitionCount:1\tReplicationFactor:1\t\r\nConfigs:\r\nTopic: test_topic\tPartition: 0\tLeader: 0\tReplicas: 0\tIsr: 0\r\n```\r\nThe number of parition for `test-test_table-changelog` is correct:\r\n\r\n```shell\r\n./kafka-topics.sh --describe --zookeeper localhost:2181 --topic test-test_table-changelog\r\nTopic:test-test_table-changelog\tPartitionCount:2\tReplicationFactor:1\t\r\nConfigs:cleanup.policy=compact\r\nTopic: test-test_table-changelog\tPartition: 0\tLeader: 0\tReplicas: 0\tIsr: 0\r\nTopic: test-test_table-changelog\tPartition: 1\tLeader: 0\tReplicas: 0\tIsr: 0\r\n\r\n```\r\n\r\nFaust worker log:\r\n\r\n```\r\n\u250cHighwater - Active\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 topic                     \u2502 partition \u2502 highwater \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 test-test_table-changelog \u2502 0         \u2502 -1        \u2502\r\n\u2502 test-test_table-changelog \u2502 1         \u2502 -1        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \r\n[2019-06-04 13:56:34,786: INFO]: [^---Recovery]: active offsets at start of reading:\r\n\u250cReading Starts At - Active\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 topic                     \u2502 partition \u2502 offset \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 test-test_table-changelog \u2502 0         \u2502 -1     \u2502\r\n\u2502 test-test_table-changelog \u2502 1         \u2502 -1     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \r\n[2019-06-04 13:56:35,793: INFO]: [^---Recovery]: standby offsets at start of reading:\r\n\u250cReading Starts At - Standby\u2500\u2510\r\n\u2502 topic \u2502 partition \u2502 offset \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n## Full traceback\r\n\r\n```pytb\r\n[2019-06-04 13:56:37,800: ERROR]: [^---Agent*: test.process]: Crashed reason=PartitionsMismatch(\"The source topic 'test_topic' for table 'test_table'\\nhas 1 partitions, but the changelog\\ntopic 'test-test_table-changelog' has 2 partitions.\\n\\nPlease make sure the topics have the same number of partitions\\nby configuring Kafka correctly.\\n\",) \r\nTraceback (most recent call last):\r\n  File \"/Users/sohaibfarooqi/projects/faust_test/.env/lib/python3.6/site-packages/faust/agents/agent.py\", line 601, in _execute_task\r\n    await coro\r\n  File \"/Users/sohaibfarooqi/projects/faust_test/test.py\", line 32, in process\r\n    test_table[stream.a] += 1\r\n  File \"/Users/sohaibfarooqi/projects/faust_test/.env/lib/python3.6/site-packages/mode/utils/collections.py\", line 505, in __setitem__\r\n    self.on_key_set(key, value)\r\n  File \"/Users/sohaibfarooqi/projects/faust_test/.env/lib/python3.6/site-packages/faust/tables/table.py\", line 72, in on_key_set\r\n    self._send_changelog(event, key, value)\r\n  File \"/Users/sohaibfarooqi/projects/faust_test/.env/lib/python3.6/site-packages/faust/tables/base.py\", line 228, in _send_changelog\r\n    self._verify_source_topic_partitions(event)\r\n  File \"/Users/sohaibfarooqi/projects/faust_test/.env/lib/python3.6/site-packages/faust/tables/base.py\", line 257, in _verify_source_topic_partitions\r\n    change_n=change_n,\r\nfaust.exceptions.PartitionsMismatch: The source topic 'test_topic' for table 'test_table'\r\nhas 1 partitions, but the changelog\r\ntopic 'test-test_table-changelog' has 2 partitions.\r\n\r\nPlease make sure the topics have the same number of partitions\r\nby configuring Kafka correctly.\r\n```\r\n\r\n# Versions\r\n\r\n* Python version=3.6.5\r\n* Faust version=1.6.0\r\n* Operating system=OSX Mojave 10.14\r\n* Kafka version=2.20\r\n* RocksDB version=N/A\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/355", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/355/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/355/events", "html_url": "https://github.com/robinhood/faust/issues/355", "id": 448382564, "node_id": "MDU6SXNzdWU0NDgzODI1NjQ=", "number": 355, "title": "kafka offset skips messages that have not finished getting handled when using concurrency", "user": {"login": "Natanor", "id": 3813020, "node_id": "MDQ6VXNlcjM4MTMwMjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3813020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Natanor", "html_url": "https://github.com/Natanor", "followers_url": "https://api.github.com/users/Natanor/followers", "following_url": "https://api.github.com/users/Natanor/following{/other_user}", "gists_url": "https://api.github.com/users/Natanor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Natanor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Natanor/subscriptions", "organizations_url": "https://api.github.com/users/Natanor/orgs", "repos_url": "https://api.github.com/users/Natanor/repos", "events_url": "https://api.github.com/users/Natanor/events{/privacy}", "received_events_url": "https://api.github.com/users/Natanor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-24T23:13:57Z", "updated_at": "2019-06-20T18:36:32Z", "closed_at": "2019-06-20T18:36:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\nWhen running an agent with concurrency > 1, where the time it takes for some messages to get handled is vastly different than others.\r\n\r\nthe kafka topic in this example has the numbers 1 to 300 in order.\r\nthis is the consumer:\r\n```python\r\nsync def some_calculation(i):\r\n    print(i)\r\n    if i == 1:\r\n        return\r\n    if i == 50:\r\n        return\r\n    if i == 10:\r\n        await asyncio.sleep(5)\r\n        return\r\n    await asyncio.sleep(100000)\r\n\r\n\r\n@app.agent(input_topic, concurrency=100)\r\nasync def join(nums):\r\n    async for num in nums:\r\n        await some_calculation(num)\r\n```\r\n\r\n\r\n## Expected behavior\r\n\r\nI expect the topic offset to be raised once because the first message gets finished, but then the offset to stay at 0 for 100000 seconds because the second message doesn't finish handling\r\n\r\n## Actual behavior\r\n\r\nat first, the offset is indeed set to 0, but after 5 seconds, it is set to 9, and after 3-ish more seconds,\r\nit is set to 49.\r\n\r\n## Suggested Fix\r\n\r\nI think the fix is to assure the list of acknowledged messages in the `_new_offset` function in faust/transport/consumer.py doesn't have a gap between its start and the current offset.\r\n\r\n# Versions\r\n\r\n* Python version 3,6,3\r\n* Faust version 1.6.1\r\n* Operating system Windows\r\n* Kafka version  2.12-2.2.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/352", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/352/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/352/events", "html_url": "https://github.com/robinhood/faust/issues/352", "id": 444637951, "node_id": "MDU6SXNzdWU0NDQ2Mzc5NTE=", "number": 352, "title": "faust app not processing last record", "user": {"login": "bvarghese1", "id": 10199670, "node_id": "MDQ6VXNlcjEwMTk5Njcw", "avatar_url": "https://avatars3.githubusercontent.com/u/10199670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvarghese1", "html_url": "https://github.com/bvarghese1", "followers_url": "https://api.github.com/users/bvarghese1/followers", "following_url": "https://api.github.com/users/bvarghese1/following{/other_user}", "gists_url": "https://api.github.com/users/bvarghese1/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvarghese1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvarghese1/subscriptions", "organizations_url": "https://api.github.com/users/bvarghese1/orgs", "repos_url": "https://api.github.com/users/bvarghese1/repos", "events_url": "https://api.github.com/users/bvarghese1/events{/privacy}", "received_events_url": "https://api.github.com/users/bvarghese1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-15T20:47:41Z", "updated_at": "2019-05-19T18:35:22Z", "closed_at": "2019-05-19T18:35:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Steps to reproduce\r\nProduce data into a topic X. Started two applications 1. faust app and 2. kafka streams app. Both process the data however, the faust app does not process the last record according to the kafka-consumer-groups.sh command.\r\n\r\n```/opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group <application_id>```\r\n\r\n## Expected behavior\r\n\r\nFaust app must process the last record and the kafka-consumer-groups.sh must report a lag of 0\r\n\r\n## Actual behavior\r\nFaust app report after running the kafka-consumer-groups.sh command:\r\n<img width=\"1673\" alt=\"Screen Shot 2019-05-15 at 1 46 21 PM\" src=\"https://user-images.githubusercontent.com/10199670/57808280-dc91b300-7717-11e9-9c39-aeab9d8f1f37.png\">\r\n\r\n\r\n# Versions\r\n\r\n* Python version - 3.7.3\r\n* Faust version - 1.4.5\r\n* Operating system - Ubuntu 18.04.2 LTS\r\n* Kafka version - 2.1\r\n* RocksDB version (if applicable)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/351", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/351/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/351/events", "html_url": "https://github.com/robinhood/faust/issues/351", "id": 444424786, "node_id": "MDU6SXNzdWU0NDQ0MjQ3ODY=", "number": 351, "title": "\"Monitor lost event in state for ...\" warning when using Stream.take", "user": {"login": "jsundh", "id": 1652725, "node_id": "MDQ6VXNlcjE2NTI3MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1652725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsundh", "html_url": "https://github.com/jsundh", "followers_url": "https://api.github.com/users/jsundh/followers", "following_url": "https://api.github.com/users/jsundh/following{/other_user}", "gists_url": "https://api.github.com/users/jsundh/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsundh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsundh/subscriptions", "organizations_url": "https://api.github.com/users/jsundh/orgs", "repos_url": "https://api.github.com/users/jsundh/repos", "events_url": "https://api.github.com/users/jsundh/events{/privacy}", "received_events_url": "https://api.github.com/users/jsundh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-15T13:00:10Z", "updated_at": "2019-06-20T18:41:47Z", "closed_at": "2019-06-20T18:41:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nUse [Stream.take](https://faust.readthedocs.io/en/latest/reference/faust.streams.html#faust.streams.Stream.take) on a simple stream:\r\n\r\n```python\r\n#!/usr/bin/env python\r\nimport faust\r\n\r\napp = faust.App(\"take-bug\", broker=\"kafka://localhost:9092\")\r\n\r\ntopic = app.topic(\"take-bug\", value_type=int)\r\n\r\n\r\n@app.agent(topic)\r\nasync def print_sum(stream):\r\n    async for batch in stream.take(5, within=10):\r\n        print(sum(batch))\r\n\r\n\r\n@app.timer(5)\r\nasync def produce():\r\n    for i in range(100):\r\n        await print_sum.send(value=i)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.main()\r\n```\r\n\r\nThe `take` method calls [Stream.ack](https://github.com/robinhood/faust/blob/9d5cfc8aef7cabc6d482225e7dbb120d12d34673/faust/streams.py#L926), which does not seem to have the `sensor_state` variable that `__aiter__` has.\r\n\r\n## Expected behavior\r\n\r\nMonitoring/event callbacks working without warnings.\r\n\r\n## Actual behavior\r\n\r\nA warning about \"Monitor lost event in state\" for each message:\r\n\r\n```\r\n[2019-05-15 13:58:14,735: WARNING]: 10\r\n[2019-05-15 13:58:14,736: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):0\r\n[2019-05-15 13:58:14,737: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):1\r\n[2019-05-15 13:58:14,738: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):2\r\n[2019-05-15 13:58:14,738: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):3\r\n[2019-05-15 13:58:14,739: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):4\r\n[2019-05-15 13:58:14,740: WARNING]: 35\r\n[2019-05-15 13:58:14,741: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):5\r\n[2019-05-15 13:58:14,741: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):6\r\n[2019-05-15 13:58:14,741: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):7\r\n[2019-05-15 13:58:14,742: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):8\r\n[2019-05-15 13:58:14,742: WARNING]: [^--Monitor]: Monitor lost event in state for TopicPartition(topic='take-bug', partition=0):9\r\n[2019-05-15 13:58:14,743: WARNING]: 60\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.3\r\n* Faust version: 1.6.1\r\n* Operating system: Ubuntu 18.04\r\n* Kafka version: 1.1\r\n* RocksDB version (if applicable): N/A", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/348", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/348/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/348/events", "html_url": "https://github.com/robinhood/faust/issues/348", "id": 444028372, "node_id": "MDU6SXNzdWU0NDQwMjgzNzI=", "number": 348, "title": "Can't run the Django example on latest master", "user": {"login": "swist", "id": 2816186, "node_id": "MDQ6VXNlcjI4MTYxODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2816186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swist", "html_url": "https://github.com/swist", "followers_url": "https://api.github.com/users/swist/followers", "following_url": "https://api.github.com/users/swist/following{/other_user}", "gists_url": "https://api.github.com/users/swist/gists{/gist_id}", "starred_url": "https://api.github.com/users/swist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swist/subscriptions", "organizations_url": "https://api.github.com/users/swist/orgs", "repos_url": "https://api.github.com/users/swist/repos", "events_url": "https://api.github.com/users/swist/events{/privacy}", "received_events_url": "https://api.github.com/users/swist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-14T17:08:04Z", "updated_at": "2019-05-14T22:42:43Z", "closed_at": "2019-05-14T22:42:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\nClone the repo then:\r\n```\r\npython setup.py develop\r\nproj-faust -l info\r\n```\r\n## Expected behavior\r\nI expected to get a running faust worker instance\r\n\r\n## Actual behavior\r\nThe worker fails to boot with the following exception:\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/Users/swistak/code/faust/examples/django/bin/proj-faust\", line 11, in <module>\r\n    load_entry_point('proj', 'console_scripts', 'proj-faust')()\r\n  File \"/Users/swistak/code/faust/examples/django/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 489, in load_entry_point\r\n    return get_distribution(dist).load_entry_point(group, name)\r\n  File \"/Users/swistak/code/faust/examples/django/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 2843, in load_entry_point\r\n    return ep.load()\r\n  File \"/Users/swistak/code/faust/examples/django/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 2434, in load\r\n    return self.resolve()\r\n  File \"/Users/swistak/code/faust/examples/django/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 2440, in resolve\r\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\r\n  File \"/Users/swistak/code/faust/examples/django/faustapp/__main__.py\", line 3, in <module>\r\n    app.main()  # start entry point for :program:`faust`\r\n  File \"/Users/swistak/code/faust/examples/django/lib/python3.7/site-packages/faust/app/base.py\", line 674, in main\r\n    self.discover()\r\n  File \"/Users/swistak/code/faust/examples/django/lib/python3.7/site-packages/faust/app/base.py\", line 638, in discover\r\n    modules |= set(fixup.autodiscover_modules())\r\n  File \"/Users/swistak/code/faust/examples/django/lib/python3.7/site-packages/faust/fixups/django.py\", line 66, in autodiscover_modules\r\n    return [config.name for config in self.apps.get_app_configs()]\r\n  File \"/Users/swistak/code/faust/examples/django/lib/python3.7/site-packages/django/apps/registry.py\", line 144, in get_app_configs\r\n    self.check_apps_ready()\r\n  File \"/Users/swistak/code/faust/examples/django/lib/python3.7/site-packages/django/apps/registry.py\", line 135, in check_apps_ready\r\n    raise AppRegistryNotReady(\"Apps aren't loaded yet.\")\r\ndjango.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.2\r\n* Faust version: 1.6.1 - 1.7.0a1\r\n* Operating system: OS X 10.14.4\r\n* Kafka version: 0.11\r\n* RocksDB version (if applicable) N/A\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/347", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/347/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/347/events", "html_url": "https://github.com/robinhood/faust/issues/347", "id": 443698291, "node_id": "MDU6SXNzdWU0NDM2OTgyOTE=", "number": 347, "title": "Question: Deployment and secrets for AWS", "user": {"login": "ccotar", "id": 1403213, "node_id": "MDQ6VXNlcjE0MDMyMTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1403213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccotar", "html_url": "https://github.com/ccotar", "followers_url": "https://api.github.com/users/ccotar/followers", "following_url": "https://api.github.com/users/ccotar/following{/other_user}", "gists_url": "https://api.github.com/users/ccotar/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccotar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccotar/subscriptions", "organizations_url": "https://api.github.com/users/ccotar/orgs", "repos_url": "https://api.github.com/users/ccotar/repos", "events_url": "https://api.github.com/users/ccotar/events{/privacy}", "received_events_url": "https://api.github.com/users/ccotar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-14T03:55:15Z", "updated_at": "2019-05-31T19:15:15Z", "closed_at": "2019-05-31T19:15:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the common/recommended deployment strategy for Faust?\r\n\r\nShould I be making python files for every operation and put them in docker files and then deploy those docker files to kubernetes?  Should the pipeline be one file?\r\n\r\nIf I have processes that use AWS, what is the recommended way to add these secrets to the pipeline steps?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/346", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/346/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/346/events", "html_url": "https://github.com/robinhood/faust/issues/346", "id": 443631948, "node_id": "MDU6SXNzdWU0NDM2MzE5NDg=", "number": 346, "title": "Agent crashes when consuming data from Kafka", "user": {"login": "mathieujofis", "id": 5400634, "node_id": "MDQ6VXNlcjU0MDA2MzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5400634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathieujofis", "html_url": "https://github.com/mathieujofis", "followers_url": "https://api.github.com/users/mathieujofis/followers", "following_url": "https://api.github.com/users/mathieujofis/following{/other_user}", "gists_url": "https://api.github.com/users/mathieujofis/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathieujofis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathieujofis/subscriptions", "organizations_url": "https://api.github.com/users/mathieujofis/orgs", "repos_url": "https://api.github.com/users/mathieujofis/repos", "events_url": "https://api.github.com/users/mathieujofis/events{/privacy}", "received_events_url": "https://api.github.com/users/mathieujofis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-13T22:38:37Z", "updated_at": "2019-06-20T18:48:15Z", "closed_at": "2019-06-20T18:48:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\nConsume raw data from kafka topic\r\n\r\n## Expected behavior\r\n\r\nAgent does not crash.\r\n\r\n## Actual behavior\r\n\r\nAgent crashing/throwing error. Fixed when moving from 1.6.1 -> 1.6.0.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[2019-05-09 17:13:16,197: ERROR]: [^---Agent*: hello_world.processor]: Crashed reason=TypeError('after() takes exactly 3 positional arguments (2 given)') \r\nTraceback (most recent call last):\r\n  File \"/anaconda3/lib/python3.7/site-packages/faust/agents/agent.py\", line 601, in _execute_task\r\n    await coro\r\n  File \"/Users/mathieurodrigue/Development/faust scripts/hello_world.py\", line 14, in processor\r\n    async for payload in stream:\r\n  File \"/anaconda3/lib/python3.7/site-packages/faust/streams.py\", line 724, in _c_aiter\r\n    it.after(event, do_ack)\r\n  File \"faust/_cython/streams.pyx\", line 92, in faust._cython.streams.StreamIterator.after\r\nTypeError: after() takes exactly 3 positional arguments (2 given)\r\n```\r\n\r\n# Versions\r\n\r\n* Python version 3.7.1\r\n* Faust version 1.6.1\r\n* Operating system Mac OSX 10.13.4\r\n* Kafka version 2.1.1\r\n* RocksDB version (if applicable) NA\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/339", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/339/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/339/events", "html_url": "https://github.com/robinhood/faust/issues/339", "id": 438976904, "node_id": "MDU6SXNzdWU0Mzg5NzY5MDQ=", "number": 339, "title": "Error when producing to a topic whe exactly_once is enabled", "user": {"login": "DanielFerreiraJorge", "id": 1966185, "node_id": "MDQ6VXNlcjE5NjYxODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1966185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielFerreiraJorge", "html_url": "https://github.com/DanielFerreiraJorge", "followers_url": "https://api.github.com/users/DanielFerreiraJorge/followers", "following_url": "https://api.github.com/users/DanielFerreiraJorge/following{/other_user}", "gists_url": "https://api.github.com/users/DanielFerreiraJorge/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielFerreiraJorge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielFerreiraJorge/subscriptions", "organizations_url": "https://api.github.com/users/DanielFerreiraJorge/orgs", "repos_url": "https://api.github.com/users/DanielFerreiraJorge/repos", "events_url": "https://api.github.com/users/DanielFerreiraJorge/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielFerreiraJorge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-30T21:04:06Z", "updated_at": "2019-04-30T23:13:33Z", "closed_at": "2019-04-30T22:54:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [ ] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nHi, If I enable exactly once support, and try to publish an event to a topic I get a `TypeError: 'NoneType' object is not iterable`. I tried 3 methods that I know to publish to a topic: `sink`, `event.forward()` and `topic.send()`. I get the same error with all methods. I'm testing in a kafka cluster with 6 nodes, the source topic has 8 partitions and 3 replicas, all destination topics also have 8 partitions and 3 replicas.\r\n\r\nWith the exact sample code below, if I comment ou the `processing_guarantee='exactly_once'`, everything works as expected.\r\n\r\n## Expected behavior\r\n\r\nI expect the message to be produced to the topics.\r\n\r\n## Actual behavior\r\n\r\nTypeError: 'NoneType' object is not iterable\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[^---Agent*: filter_events.process]: Crashed reason=TypeError(\"'NoneType' object is not iterable\",) \r\nTraceback (most recent call last):\r\n  File \"/home/daniel/.virtualenvs/tributum-accounts/lib/python3.6/site-packages/faust/agents/agent.py\", line 601, in _execute_task\r\n    await coro\r\n  File \"/home/daniel/.virtualenvs/tributum-accounts/lib/python3.6/site-packages/faust/agents/agent.py\", line 638, in _slurp\r\n    await self._delegate_to_sinks(value)\r\n  File \"/home/daniel/.virtualenvs/tributum-accounts/lib/python3.6/site-packages/faust/agents/agent.py\", line 645, in _delegate_to_sinks\r\n    await cast(TopicT, sink).send(value=value)\r\n  File \"/home/daniel/.virtualenvs/tributum-accounts/lib/python3.6/site-packages/faust/topics.py\", line 184, in send\r\n    callback=callback,\r\n  File \"/home/daniel/.virtualenvs/tributum-accounts/lib/python3.6/site-packages/faust/channels.py\", line 218, in _send_now\r\n    key_serializer, value_serializer, callback))\r\n  File \"/home/daniel/.virtualenvs/tributum-accounts/lib/python3.6/site-packages/faust/topics.py\", line 373, in publish_message\r\n    headers=headers,\r\n  File \"/home/daniel/.virtualenvs/tributum-accounts/lib/python3.6/site-packages/faust/transport/consumer.py\", line 262, in send\r\n    p: int = self.consumer.key_partition(topic, key, partition)\r\n  File \"/home/daniel/.virtualenvs/tributum-accounts/lib/python3.6/site-packages/faust/transport/consumer.py\", line 1191, in key_partition\r\n    return self._thread.key_partition(topic, key, partition=partition)\r\n  File \"/home/daniel/.virtualenvs/tributum-accounts/lib/python3.6/site-packages/faust/transport/drivers/aiokafka.py\", line 468, in key_partition\r\n    all_partitions = list(metadata.partitions_for_topic(topic))\r\nTypeError: 'NoneType' object is not iterable\r\n```\r\n## Code used\r\n\r\n```python\r\nimport faust\r\n\r\nVERSION = 117\r\n\r\napp = faust.App(\r\n    'filter_events',\r\n    processing_guarantee='exactly_once',\r\n    broker='kafka://localhost:19092',\r\n    store='rocksdb://',\r\n    version=VERSION\r\n)\r\n\r\n# source topic\r\nsource = app.topic('example-source-topic')\r\n\r\n# Topics\r\ndest1 = app.topic(f'example-dest-topic1-{str(VERSION)}')\r\ndest2 = app.topic(f'example-dest-topic2-{str(VERSION)}')\r\n\r\n\r\n@app.agent(source)\r\nasync def process(stream):\r\n    async for event in stream.events():\r\n        key = event.key.decode('utf-8')\r\n        if 'topic1' in key:\r\n            await event.forward(dest1)\r\n        elif 'topic2' in key:\r\n            await event.forward(dest2)\r\n```\r\n\r\n# Versions\r\n\r\n* Python 3.6.7\r\n* Faust 1.6.0\r\n* Operating system Ubuntu 18.10\r\n* Kafka version 2.2.0\r\n* RocksDB version (if applicable) 0.7.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/338", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/338/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/338/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/338/events", "html_url": "https://github.com/robinhood/faust/issues/338", "id": 437851622, "node_id": "MDU6SXNzdWU0Mzc4NTE2MjI=", "number": 338, "title": "Running faust workers in docker swarm hangs forever on recovery starting step with rocksdb", "user": {"login": "andresjaor", "id": 5378320, "node_id": "MDQ6VXNlcjUzNzgzMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5378320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andresjaor", "html_url": "https://github.com/andresjaor", "followers_url": "https://api.github.com/users/andresjaor/followers", "following_url": "https://api.github.com/users/andresjaor/following{/other_user}", "gists_url": "https://api.github.com/users/andresjaor/gists{/gist_id}", "starred_url": "https://api.github.com/users/andresjaor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andresjaor/subscriptions", "organizations_url": "https://api.github.com/users/andresjaor/orgs", "repos_url": "https://api.github.com/users/andresjaor/repos", "events_url": "https://api.github.com/users/andresjaor/events{/privacy}", "received_events_url": "https://api.github.com/users/andresjaor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-26T21:24:45Z", "updated_at": "2019-10-03T21:32:37Z", "closed_at": "2019-10-03T21:32:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- deploying workers in replica mode (1 - 8 replicas)\r\n- deploying multiple services, each with one worker (2 services)\r\n- Trying to reproduce locally using docker-compose. But can't reproduce the same behavior, locally it seems to work fine with memory and rocksdb store driver.\r\n\r\n## Steps to reproduce\r\n\r\n- deploying with docker swarm using replica mode or multiple services.\r\n\r\n## Expected behavior\r\n\r\n- All workers should startup correctly.\r\n- If an error occurs recovering changelog, it should be raised and the program should exit.  \r\n\r\n## Actual behavior\r\n\r\n- using memory as store driver works correctly. All workers starts and get in Ready state.\r\n- using rocksdb hangs indefinitely the initialization in Recovery state. This behavior is not consistent, sometimes few replicas start ok and sometimes every replica hangs. But always at least one hangs.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n\r\n+\u0192a\u00b5S\u2020 v1.6.0-+-----------------------------------------------------------------------+\r\n| id          | audit                                                                 |\r\n| transport   | [URL('kafka://*********************:18324')]  |\r\n| store       | rocksdb:                                                              |\r\n| web         | http://localhost:6066/                                                |\r\n| log         | -stderr- (info)                                                       |\r\n| pid         | 8                                                                     |\r\n| hostname    | ea7d1a976323                                                          |\r\n| platform    | CPython 3.6.7 (Linux x86_64)                                          |\r\n| drivers     |                                                                       |\r\n|   transport | aiokafka=1.0.3                                                        |\r\n|   web       | aiohttp=3.5.4                                                         |\r\n| datadir     | /home/audit/audit-data                                                |\r\n| appdir      | /home/audit/audit-data/v1                                             |\r\n+-------------+-----------------------------------------------------------------------+\r\n\r\n[2019-04-25 20:59:53,237: INFO]: [^Worker]: Starting... \r\n[2019-04-25 20:59:53,315: INFO]: [^-App]: Starting... \r\n[2019-04-25 20:59:53,315: INFO]: [^--Monitor]: Starting... \r\n[2019-04-25 20:59:53,316: INFO]: [^--Producer]: Starting... \r\n[2019-04-25 20:59:53,552: INFO]: [^--CacheBackend]: Starting... \r\n[2019-04-25 20:59:53,552: INFO]: [^--Web]: Starting... \r\n[2019-04-25 20:59:53,588: INFO]: [^---Server]: Starting... \r\n[2019-04-25 20:59:53,590: INFO]: [^--Consumer]: Starting... \r\n[2019-04-25 20:59:53,591: INFO]: [^---AIOKafkaConsumerThread]: Starting... \r\n[2019-04-25 20:59:54,318: INFO]: [^--LeaderAssignor]: Starting... \r\n[2019-04-25 20:59:54,319: INFO]: [^--Producer]: Creating topic 'audit-__assignor-__leader' \r\n[2019-04-25 20:59:54,321: INFO]: [^--ReplyConsumer]: Starting... \r\n[2019-04-25 20:59:54,321: INFO]: [^--AgentManager]: Starting... \r\n[2019-04-25 20:59:54,321: INFO]: [^--Agent: faustapp.app.register_alarm]: Starting... \r\n[2019-04-25 20:59:54,327: INFO]: [^---OneForOneSupervisor]: Starting... \r\n[2019-04-25 20:59:54,327: INFO]: [^--Agent: faustapp[.]process_audit_message]: Starting... \r\n[2019-04-25 20:59:54,328: INFO]: [^---OneForOneSupervisor]: Starting... \r\n[2019-04-25 20:59:54,329: INFO]: [^--Agent: faustapp.app.count_code]: Starting... \r\n[2019-04-25 20:59:54,329: INFO]: [^---OneForOneSupervisor]: Starting... \r\n[2019-04-25 20:59:54,330: INFO]: [^--Agent: faustapp.app.propagate_message]: Starting... \r\n[2019-04-25 20:59:54,331: INFO]: [^---OneForOneSupervisor]: Starting... \r\n[2019-04-25 20:59:54,331: INFO]: [^--Conductor]: Starting... \r\n[2019-04-25 20:59:54,331: INFO]: [^--TableManager]: Starting...\r\n[2019-04-25 20:59:54,334: INFO]: [^--Producer]: Creating topic 'audit_message-faustapp.app.process_audit_message-audit-AuditMessage.system-repartition' \r\n[2019-04-25 20:59:54,335: INFO]: [^--Producer]: Creating topic 'audit_message-faustapp.app.count_code-audit-AuditMessage.code-repartition' \r\n[2019-04-25 20:59:54,335: INFO]: [^--Producer]: Creating topic 'audit_alarm-faustapp.app.register_alarm-audit-AuditAlarm.code-repartition' \r\n[2019-04-25 20:59:55,332: INFO]: [^--Table: windowed_messages_by_system]: Starting... \r\n[2019-04-25 20:59:56,345: INFO]: [^---Store: windowed_messages_by_system]: Starting... \r\n[2019-04-25 20:59:56,346: INFO]: [^--Producer]: Creating topic 'audit-windowed_messages_by_system-changelog' \r\n[2019-04-25 20:59:56,347: INFO]: [^--Table: windowed_messages_by_code]: Starting... \r\n[2019-04-25 20:59:56,348: INFO]: [^---Store: windowed_messages_by_code]: Starting... \r\n[2019-04-25 20:59:56,348: INFO]: [^--Producer]: Creating topic 'audit_message-faustapp.app.process_audit_message-audit-AuditMessage.system-repartition' \r\n[2019-04-25 20:59:56,349: INFO]: [^--Producer]: Creating topic 'audit-windowed_messages_by_code-changelog' \r\n[2019-04-25 20:59:56,349: INFO]: [^--Table: codes_to_alarm]: Starting... \r\n[2019-04-25 20:59:56,350: INFO]: [^---Store: codes_to_alarm]: Starting... \r\n[2019-04-25 20:59:56,350: INFO]: [^--Producer]: Creating topic 'audit-codes_to_alarm-changelog' \r\n[2019-04-25 20:59:56,351: INFO]: [^--Table: windowed_alarms]: Starting... \r\n[2019-04-25 20:59:56,351: INFO]: [^---Store: windowed_alarms]: Starting... \r\n[2019-04-25 20:59:56,351: INFO]: [^--Producer]: Creating topic 'audit-windowed_alarms-changelog' \r\n[2019-04-25 20:59:56,352: INFO]: [^---Recovery]: Starting... \r\n(The worker hangs forever here.)\r\n```\r\nAny help or experience deploying on docker swarm will be helpful.\r\n# Versions\r\n\r\n\r\n* Python version 3.6\r\n* Faust version 1.6\r\n* Operating system: Linux (Ubuntu 18.04)\r\n* Kafka version 2,1\r\n* RocksDB version > 5.0 - (python-rocksdb==0.7.0)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/337", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/337/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/337/events", "html_url": "https://github.com/robinhood/faust/issues/337", "id": 436130283, "node_id": "MDU6SXNzdWU0MzYxMzAyODM=", "number": 337, "title": "How to effectively partition combined streams?", "user": {"login": "bradkyle", "id": 16698307, "node_id": "MDQ6VXNlcjE2Njk4MzA3", "avatar_url": "https://avatars0.githubusercontent.com/u/16698307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradkyle", "html_url": "https://github.com/bradkyle", "followers_url": "https://api.github.com/users/bradkyle/followers", "following_url": "https://api.github.com/users/bradkyle/following{/other_user}", "gists_url": "https://api.github.com/users/bradkyle/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradkyle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradkyle/subscriptions", "organizations_url": "https://api.github.com/users/bradkyle/orgs", "repos_url": "https://api.github.com/users/bradkyle/repos", "events_url": "https://api.github.com/users/bradkyle/events{/privacy}", "received_events_url": "https://api.github.com/users/bradkyle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-23T11:10:39Z", "updated_at": "2019-04-24T11:46:12Z", "closed_at": "2019-04-24T11:45:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/336", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/336/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/336/events", "html_url": "https://github.com/robinhood/faust/issues/336", "id": 436115423, "node_id": "MDU6SXNzdWU0MzYxMTU0MjM=", "number": 336, "title": "unable to create a faust application with the partitions defined in app.topic() for the given topic", "user": {"login": "Mahamutha", "id": 44077198, "node_id": "MDQ6VXNlcjQ0MDc3MTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/44077198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mahamutha", "html_url": "https://github.com/Mahamutha", "followers_url": "https://api.github.com/users/Mahamutha/followers", "following_url": "https://api.github.com/users/Mahamutha/following{/other_user}", "gists_url": "https://api.github.com/users/Mahamutha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mahamutha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mahamutha/subscriptions", "organizations_url": "https://api.github.com/users/Mahamutha/orgs", "repos_url": "https://api.github.com/users/Mahamutha/repos", "events_url": "https://api.github.com/users/Mahamutha/events{/privacy}", "received_events_url": "https://api.github.com/users/Mahamutha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-23T10:31:39Z", "updated_at": "2019-04-29T20:35:54Z", "closed_at": "2019-04-29T20:35:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nI am trying to build a faust application with 8 partitions of a kafka topic and 8 partitions of table's changelog topic. While doing the same, I am unable to build an application with 8 partitions of a kafka topic.\r\n\r\n## Expected behavior\r\n```\r\n+Topic Partition Set-----------------------------------------+--------------------------+\r\n| topic                                                      | partitions               |\r\n+------------------------------------------------------------+--------------------------+\r\n| direction_app-direction_hopping-key_index-changelog        | {0, 1, 2, 3, 4, 5, 6, 7} |\r\n| direction_app-direction_hopping-changelog                  | {0, 1, 2, 3, 4, 5, 6, 7} |\r\n| directionality-direction_app-directionJson.mac-repartition | {0, 1, 2, 3, 4, 5, 6, 7} |\r\n| directionality                                             | {0, 1, 2, 3, 4, 5, 6, 7} |\r\n| direction_app-__assignor-__leader                          | {0}                      |\r\n+------------------------------------------------------------+--------------------------+ for group direction_app \r\n[2019-04-23 15:40:22,034: INFO]: [^---Recovery]: Highwater for active changelog partitions:\r\n+Highwater - Active-----------------------------------+-----------+-----------+\r\n| topic                                               | partition | highwater |\r\n+-----------------------------------------------------+-----------+-----------+\r\n| direction_app-direction_hopping-key_index-changelog | 0         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 1         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 2         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 3         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 4         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 5         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 6         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 7         | -1        |\r\n| direction_app-direction_hopping-changelog           | 0         | -1        |\r\n| direction_app-direction_hopping-changelog           | 1         | -1        |\r\n| direction_app-direction_hopping-changelog           | 2         | -1        |\r\n| direction_app-direction_hopping-changelog           | 3         | -1        |\r\n| direction_app-direction_hopping-changelog           | 4         | -1        |\r\n| direction_app-direction_hopping-changelog           | 5         | -1        |\r\n| direction_app-direction_hopping-changelog           | 6         | -1        |\r\n| direction_app-direction_hopping-changelog           | 7         | -1        |\r\n+-----------------------------------------------------+-----------+-----------+ \r\n```\r\n\r\n## Actual behavior\r\nWhereas, What I am actually getting is,\r\n```\r\n+Topic Partition Set-----------------------------------------+--------------------------+\r\n| topic                                                      | partitions               |\r\n+------------------------------------------------------------+--------------------------+\r\n| direction_app-direction_hopping-key_index-changelog        | {0, 1, 2, 3, 4, 5, 6, 7} |\r\n| direction_app-direction_hopping-changelog                  | {0, 1, 2, 3, 4, 5, 6, 7} |\r\n| directionality-direction_app-directionJson.mac-repartition | {0, 1, 2, 3, 4, 5, 6, 7} |\r\n| directionality                                             | {0}                      |\r\n| direction_app-__assignor-__leader                          | {0}                      |\r\n+------------------------------------------------------------+--------------------------+ for group direction_app \r\n[2019-04-23 15:40:22,034: INFO]: [^---Recovery]: Highwater for active changelog partitions:\r\n+Highwater - Active-----------------------------------+-----------+-----------+\r\n| topic                                               | partition | highwater |\r\n+-----------------------------------------------------+-----------+-----------+\r\n| direction_app-direction_hopping-key_index-changelog | 0         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 1         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 2         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 3         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 4         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 5         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 6         | -1        |\r\n| direction_app-direction_hopping-key_index-changelog | 7         | -1        |\r\n| direction_app-direction_hopping-changelog           | 0         | -1        |\r\n| direction_app-direction_hopping-changelog           | 1         | -1        |\r\n| direction_app-direction_hopping-changelog           | 2         | -1        |\r\n| direction_app-direction_hopping-changelog           | 3         | -1        |\r\n| direction_app-direction_hopping-changelog           | 4         | -1        |\r\n| direction_app-direction_hopping-changelog           | 5         | -1        |\r\n| direction_app-direction_hopping-changelog           | 6         | -1        |\r\n| direction_app-direction_hopping-changelog           | 7         | -1        |\r\n+-----------------------------------------------------+-----------+-----------+ \r\n```\r\n\r\n## Full traceback\r\nI have tried with the below code,\r\n\r\n```\r\nimport faust\r\nclass directionJson(faust.Record, serializer='json'):\r\n    mac: str\r\n    gw_mac: str\r\n    ibeaconMajor: str\r\n    ibeaconMinor: str\r\n    ibeaconUuid: str\r\n    rawData: str\r\n    rssi: int\r\n\r\napp = faust.App('direction_app', broker=direction_bootstrap_servers, web_port=7001)\r\ntopic = app.topic('directionality', partitions=8,key_type=str, value_type=directionJson)\r\ndirection_hopping = app.Table('direction_hopping', partitions=8, default=list).hopping(15,1, key_index=True)\r\n\r\n\r\n@app.agent(topic)\r\nasync def process(direction_main):\r\n    async for direction_index in direction_main.group_by(directionJson.mac):\r\n        hopping_val = direction_hopping[direction_index.mac].delta(5)\r\n```\r\n\r\n\r\n\r\n# Versions\r\n\r\n* Python version -3.6\r\n* Faust version - 1.6.0\r\n* Operating system - Ubuntu 18.04.2 LTS\r\n* Kafka version - 1.3.5\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/335", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/335/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/335/events", "html_url": "https://github.com/robinhood/faust/issues/335", "id": 436114610, "node_id": "MDU6SXNzdWU0MzYxMTQ2MTA=", "number": 335, "title": "group", "user": {"login": "bradkyle", "id": 16698307, "node_id": "MDQ6VXNlcjE2Njk4MzA3", "avatar_url": "https://avatars0.githubusercontent.com/u/16698307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradkyle", "html_url": "https://github.com/bradkyle", "followers_url": "https://api.github.com/users/bradkyle/followers", "following_url": "https://api.github.com/users/bradkyle/following{/other_user}", "gists_url": "https://api.github.com/users/bradkyle/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradkyle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradkyle/subscriptions", "organizations_url": "https://api.github.com/users/bradkyle/orgs", "repos_url": "https://api.github.com/users/bradkyle/repos", "events_url": "https://api.github.com/users/bradkyle/events{/privacy}", "received_events_url": "https://api.github.com/users/bradkyle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-23T10:29:42Z", "updated_at": "2019-04-23T10:54:30Z", "closed_at": "2019-04-23T10:54:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/332", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/332/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/332/events", "html_url": "https://github.com/robinhood/faust/issues/332", "id": 433762087, "node_id": "MDU6SXNzdWU0MzM3NjIwODc=", "number": 332, "title": "How to define the web port in faust application?", "user": {"login": "Mahamutha", "id": 44077198, "node_id": "MDQ6VXNlcjQ0MDc3MTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/44077198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mahamutha", "html_url": "https://github.com/Mahamutha", "followers_url": "https://api.github.com/users/Mahamutha/followers", "following_url": "https://api.github.com/users/Mahamutha/following{/other_user}", "gists_url": "https://api.github.com/users/Mahamutha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mahamutha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mahamutha/subscriptions", "organizations_url": "https://api.github.com/users/Mahamutha/orgs", "repos_url": "https://api.github.com/users/Mahamutha/repos", "events_url": "https://api.github.com/users/Mahamutha/events{/privacy}", "received_events_url": "https://api.github.com/users/Mahamutha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-04-16T12:50:07Z", "updated_at": "2019-04-23T08:35:09Z", "closed_at": "2019-04-23T08:35:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am unable to run two different faust applications. Could you please help me out to define the web port in faust application?\r\n\r\n>\r\n          worker  = Worker(app, loglevel=\"INFO\")\r\n          worker.execute_from_commandline()", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/331", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/331/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/331/events", "html_url": "https://github.com/robinhood/faust/issues/331", "id": 433531580, "node_id": "MDU6SXNzdWU0MzM1MzE1ODA=", "number": 331, "title": "pytest fails when faust table is inside app. \"Future <Future pending> attached to a different loop\"", "user": {"login": "iamjuush", "id": 39823397, "node_id": "MDQ6VXNlcjM5ODIzMzk3", "avatar_url": "https://avatars1.githubusercontent.com/u/39823397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamjuush", "html_url": "https://github.com/iamjuush", "followers_url": "https://api.github.com/users/iamjuush/followers", "following_url": "https://api.github.com/users/iamjuush/following{/other_user}", "gists_url": "https://api.github.com/users/iamjuush/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamjuush/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamjuush/subscriptions", "organizations_url": "https://api.github.com/users/iamjuush/orgs", "repos_url": "https://api.github.com/users/iamjuush/repos", "events_url": "https://api.github.com/users/iamjuush/events{/privacy}", "received_events_url": "https://api.github.com/users/iamjuush/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-16T00:25:44Z", "updated_at": "2020-04-03T21:23:35Z", "closed_at": "2019-04-29T20:40:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Steps to reproduce\r\n\r\nI am trying to run a pytest for an agent that writes to a topic in kafka. Here is a mwe of the script I am trying to run:\r\n```\r\nimport faust\r\nfrom utils.avro.cached_schema_registry_client import CachedSchemaRegistryClient\r\napp = faust.App(\"test\",\r\n                broker=\"kafka://localhost:29092\",\r\n                store='rocksdb://')\r\nadmin = AdminClient({\"bootstrap.servers\": \"localhost:29092\"})\r\nschema_registry_client = CachedSchemaRegistryClient({\"url\":\"http://localhost:8081\"})\r\n\r\n# Input Topic\r\nclass test_input_data(faust.Record):\r\n    input_value: str\r\ntest_topic = app.topic(\"test_topic\", value_type=test_input_data)\r\n\r\n#Output topic\r\nclass test_output_value(faust.Record):\r\n    output_value: str\r\noutput_topic = app.topic(\"output_topic\",  value_type=test_output_value)\r\n\r\n# Faust table\r\ntesting_table = app.Table(\"test_table\", default=dict, partitions=1)\r\n\r\n# App\r\n@app.agent(test_topic)\r\nasync def myagent(test_stream):\r\n    async for data in test_stream:\r\n        if data.input_value == \"hello\":\r\n            value = {\"output_value\": \"value\"}\r\n            await output_topic.send(value=value)\r\n            yield 1\r\n        else:\r\n            yield 0\r\n```\r\n\r\nI have the following pytest script:\r\n```\r\nfrom error_test.__main__ import app, myagent, test_input_data\r\nimport pytest\r\n\r\n@pytest.fixture()\r\ndef test_app(event_loop):\r\n    app.finalize()\r\n    app.conf.store = 'memory://'\r\n    app.flow_control.resume()\r\n    return app\r\n\r\n@pytest.mark.asyncio\r\nasync def test_processing(test_app):\r\n    async with myagent.test_context() as agent:\r\n        input = test_input_data(\"hello\")\r\n        await agent.put(input)\r\n        assert agent.results[0] == 1\r\n```\r\n\r\n\r\n## Expected behavior\r\nPytest should just pass the test. I have already added event_loop into my test where I define the test_app. According to the faust documentation, this should prevent \"attached to different loop error\".\r\n\r\n## Actual behavior\r\nI get an error: \"Future <Future pending> attached to a different loop\"\r\n\r\nI realised that this error only occurs when there is a Faust table defined in the app. If i were to comment out the faust table, the test would run and pass.\r\n## Full traceback\r\n\r\n```pytb\r\nerror_test/test_error.py:12 (test_processing)\r\ntest_app = <App(test): [URL('kafka://localhost:29092')] crashed agents(<AgentManager: init >) 0x10ef0bc50>\r\n\r\n    @pytest.mark.asyncio\r\n    async def test_processing(test_app):\r\n        async with myagent.test_context() as agent:\r\n            input = test_input_data(\"hello\")\r\n    \r\n>           await agent.put(input)\r\n\r\ntest_error.py:18: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/agents/agent.py:1013: in put\r\n    raise self._crash_reason from self._crash_reason\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/agents/agent.py:601: in _execute_task\r\n    await coro\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/agents/agent.py:618: in _slurp\r\n    async for value in it:\r\n../../error_test/__main__.py:39: in myagent\r\n    await output_topic.send(value=value)\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/topics.py:184: in send\r\n    callback=callback,\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/channels.py:218: in _send_now\r\n    key_serializer, value_serializer, callback))\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/topics.py:351: in publish_message\r\n    producer = await self._get_producer()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/topics.py:336: in _get_producer\r\n    return await self.app.maybe_start_producer()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/mode/utils/futures.py:53: in __call__\r\n    result = await self.fun(*self.args, **self.kwargs)\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/app/base.py:1265: in maybe_start_producer\r\n    await producer.maybe_start()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/mode/services.py:776: in maybe_start\r\n    await self.start()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/mode/services.py:719: in start\r\n    await self._default_start()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/mode/services.py:726: in _default_start\r\n    await self._actually_start()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/mode/services.py:743: in _actually_start\r\n    await self.on_start()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/transport/drivers/aiokafka.py:556: in on_start\r\n    await producer.start()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/aiokafka/producer/producer.py:173: in start\r\n    yield from self.client.bootstrap()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/aiokafka/client.py:205: in bootstrap\r\n    version_hint=version_hint)\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/aiokafka/conn.py:89: in create_conn\r\n    yield from conn.connect()\r\n/Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/aiokafka/conn.py:201: in connect\r\n    loop=loop, timeout=self._request_timeout)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nfut = <Task pending coro=<BaseEventLoop.create_connection() running at /Users/joshua/anaconda3/lib/python3.6/asyncio/base_events.py:681> cb=[_release_waiter(<Future pending>)() at /Users/joshua/anaconda3/lib/python3.6/asyncio/tasks.py:316]>\r\ntimeout = 1200.0\r\n\r\n    @coroutine\r\n    def wait_for(fut, timeout, *, loop=None):\r\n        \"\"\"Wait for the single Future or coroutine to complete, with timeout.\r\n    \r\n        Coroutine will be wrapped in Task.\r\n    \r\n        Returns result of the Future or coroutine.  When a timeout occurs,\r\n        it cancels the task and raises TimeoutError.  To avoid the task\r\n        cancellation, wrap it in shield().\r\n    \r\n        If the wait is cancelled, the task is also cancelled.\r\n    \r\n        This function is a coroutine.\r\n        \"\"\"\r\n        if loop is None:\r\n            loop = events.get_event_loop()\r\n    \r\n        if timeout is None:\r\n            return (yield from fut)\r\n    \r\n        waiter = loop.create_future()\r\n        timeout_handle = loop.call_later(timeout, _release_waiter, waiter)\r\n        cb = functools.partial(_release_waiter, waiter)\r\n    \r\n        fut = ensure_future(fut, loop=loop)\r\n        fut.add_done_callback(cb)\r\n    \r\n        try:\r\n            # wait until the future completes or the timeout\r\n            try:\r\n>               yield from waiter\r\nE               RuntimeError: Task <Task pending coro=<Agent._execute_task() running at /Users/joshua/.local/share/virtualenvs/nextseq_streaming-3GThgkTP/lib/python3.6/site-packages/faust/agents/agent.py:601> cb=[<TaskWakeupMethWrapper object at 0x1105fd318>()]> got Future <Future pending> attached to a different loop\r\n\r\n/Users/joshua/anaconda3/lib/python3.6/asyncio/tasks.py:351: RuntimeError\r\n```\r\n\r\n# Versions\r\n\r\n* Python version - 3.6.8\r\n* Faust version - 1.5.4\r\n* Operating system - MacOS Mojave 10.14.1\r\n* Kafka version - Running off the following docker image: confluentinc/cp-enterprise-kafka:5.1.2\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/329", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/329/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/329/events", "html_url": "https://github.com/robinhood/faust/issues/329", "id": 431639251, "node_id": "MDU6SXNzdWU0MzE2MzkyNTE=", "number": 329, "title": "Can't instantiate abstract class ConfluentConsumerThread with abstract methods key_partition", "user": {"login": "andresjaor", "id": 5378320, "node_id": "MDQ6VXNlcjUzNzgzMjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5378320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andresjaor", "html_url": "https://github.com/andresjaor", "followers_url": "https://api.github.com/users/andresjaor/followers", "following_url": "https://api.github.com/users/andresjaor/following{/other_user}", "gists_url": "https://api.github.com/users/andresjaor/gists{/gist_id}", "starred_url": "https://api.github.com/users/andresjaor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andresjaor/subscriptions", "organizations_url": "https://api.github.com/users/andresjaor/orgs", "repos_url": "https://api.github.com/users/andresjaor/repos", "events_url": "https://api.github.com/users/andresjaor/events{/privacy}", "received_events_url": "https://api.github.com/users/andresjaor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-10T18:06:25Z", "updated_at": "2019-04-29T20:40:59Z", "closed_at": "2019-04-29T20:40:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Steps to reproduce\r\nUsing confluent broker `broker=\"confluent://<host:port>` raise `Can't instantiate abstract class ConfluentConsumerThread with abstract methods key_partition` error on staring faust.\r\n\r\nIt seems that `key_partition` abstract method is not overridden in `ConfluentConsumerThread` class\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n[^Worker]: Error: TypeError(\"Can't instantiate abstract class ConfluentConsumerThread with abstract methods key_partition\",) \r\nTraceback (most recent call last):\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/mode/worker.py\", line 261, in execute_from_commandline\r\n    self.loop.run_until_complete(self._starting_fut)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/base_events.py\", line 466, in run_until_complete\r\n    return future.result()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/mode/worker.py\", line 326, in start\r\n    await super().start()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/mode/services.py\", line 750, in _actually_start\r\n    await child.maybe_start()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/mode/services.py\", line 776, in maybe_start\r\n    await self.start()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/mode/services.py\", line 719, in start\r\n    await self._default_start()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/mode/services.py\", line 726, in _default_start\r\n    await self._actually_start()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/mode/services.py\", line 732, in _actually_start\r\n    for dep in self.on_init_dependencies():\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/faust/app/base.py\", line 522, in on_init_dependencies\r\n    return self.boot_strategy.server()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/faust/app/base.py\", line 258, in server\r\n    self.kafka_consumer(),\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/faust/app/base.py\", line 302, in kafka_consumer\r\n    self.app.consumer,\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/faust/app/base.py\", line 1594, in consumer\r\n    self._consumer = self._new_consumer()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/faust/app/base.py\", line 1463, in _new_consumer\r\n    beacon=self.beacon,\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/faust/transport/base.py\", line 68, in create_consumer\r\n    **kwargs)\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/faust/transport/consumer.py\", line 1110, in __init__\r\n    self._thread = self._new_consumer_thread()\r\n  File \"/Users/andresjaramillo/Documents/ENV/audit-service/lib/python3.6/site-packages/faust/transport/drivers/confluent.py\", line 70, in _new_consumer_thread\r\n    self, loop=self.loop, beacon=self.beacon)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/typing.py\", line 1126, in __new__\r\n    return _generic_new(cls.__next_in_mro__, cls, *args, **kwds)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/typing.py\", line 1087, in _generic_new\r\n    return base_cls.__new__(cls)\r\nTypeError: Can't instantiate abstract class ConfluentConsumerThread with abstract methods key_partition\r\n\r\n```\r\n\r\n# Versions\r\n\r\n* Python version 3.6\r\n* Faust version 1.5.3\r\n* Operating system macOS\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/328", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/328/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/328/events", "html_url": "https://github.com/robinhood/faust/issues/328", "id": 430443514, "node_id": "MDU6SXNzdWU0MzA0NDM1MTQ=", "number": 328, "title": "[question] accelerate worker restart", "user": {"login": "DeoLeung", "id": 3764720, "node_id": "MDQ6VXNlcjM3NjQ3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3764720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeoLeung", "html_url": "https://github.com/DeoLeung", "followers_url": "https://api.github.com/users/DeoLeung/followers", "following_url": "https://api.github.com/users/DeoLeung/following{/other_user}", "gists_url": "https://api.github.com/users/DeoLeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeoLeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeoLeung/subscriptions", "organizations_url": "https://api.github.com/users/DeoLeung/orgs", "repos_url": "https://api.github.com/users/DeoLeung/repos", "events_url": "https://api.github.com/users/DeoLeung/events{/privacy}", "received_events_url": "https://api.github.com/users/DeoLeung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-08T13:12:26Z", "updated_at": "2019-04-29T20:42:00Z", "closed_at": "2019-04-29T20:41:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As from the logs below, a worker restart usually takes more than a minute, is there better way to make the restart faster?\r\n\r\nor better do I need to start a new one, than shutdown the old?\r\n```bash\r\nworker-slack_1                  | +\u0192a\u00b5S\u2020 v1.5.3-+---------------------------------------------+\r\nworker-slack_1                  | | id          | slack                                       |\r\nworker-slack_1                  | | transport   | [URL('kafka://abcd:9092')] +uvloop |\r\nworker-slack_1                  | | store       | memory:                                     |\r\nworker-slack_1                  | | log         | -stderr- (info)                             |\r\nworker-slack_1                  | | pid         | 1                                           |\r\nworker-slack_1                  | | hostname    | 801c5e6ded4f                                |\r\nworker-slack_1                  | | platform    | CPython 3.7.3 (Linux x86_64)                |\r\nworker-slack_1                  | | drivers     |                                             |\r\nworker-slack_1                  | |   transport | aiokafka=1.0.2                              |\r\nworker-slack_1                  | |   web       | aiohttp=3.5.4                               |\r\nworker-slack_1                  | | datadir     | /slack-data                                 |\r\nworker-slack_1                  | | appdir      | /slack-data/v1                              |\r\nworker-slack_1                  | +-------------+---------------------------------------------+\r\nworker-slack_1                  | [2019-04-08 21:02:31,384: INFO]: [^Worker]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:31,386: INFO]: [^-App]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:31,387: INFO]: [^--Monitor]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:31,387: INFO]: [^--Producer]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:31,394: INFO]: [^--Consumer]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:31,395: INFO]: [^---AIOKafkaConsumerThread]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:32,389: INFO]: [^--LeaderAssignor]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:32,389: INFO]: [^--Producer]: Creating topic 'slack-__assignor-__leader'\r\nworker-slack_1                  | [2019-04-08 21:02:32,390: INFO]: [^--ReplyConsumer]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:32,391: INFO]: [^--AgentManager]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:32,391: INFO]: [^--Agent: streams.slack.process_message]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:32,395: INFO]: [^---OneForOneSupervisor]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:32,395: INFO]: [^--Conductor]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:32,396: INFO]: [^--TableManager]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:33,397: INFO]: [^---Recovery]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:02:34,397: INFO]: [^--Producer]: Creating topic 'slack-__assignor-__leader'\r\nworker-slack_1                  | [2019-04-08 21:02:34,408: INFO]: Updating subscribed topics to: frozenset({'slack-__assignor-__leader', 'slack'})\r\nworker-slack_1                  | [2019-04-08 21:02:34,408: INFO]: Subscribed to topic(s): {'slack-__assignor-__leader', 'slack'}\r\nworker-slack_1                  | [2019-04-08 21:02:34,414: INFO]: Discovered coordinator 1001 for group slack\r\nworker-slack_1                  | [2019-04-08 21:02:34,414: INFO]: Revoking previously assigned partitions set() for group slack\r\nworker-slack_1                  | [2019-04-08 21:02:35,409: INFO]: (Re-)joining group slack\r\nworker-slack_1                  | [2019-04-08 21:03:15,421: ERROR]: Error sending JoinGroupRequest_v2 to node 1001 [[Error 7] RequestTimedOutError] -- marking coordinator dead\r\nworker-slack_1                  | [2019-04-08 21:03:15,422: WARNING]: Marking the coordinator dead (node 1001)for group slack.\r\nworker-slack_1                  | [2019-04-08 21:03:15,526: INFO]: Discovered coordinator 1001 for group slack\r\nworker-slack_1                  | [2019-04-08 21:03:15,527: INFO]: (Re-)joining group slack\r\nworker-slack_1                  | [2019-04-08 21:03:22,696: INFO]: Joined group 'slack' (generation 37) with member_id faust-1.5.3-d32d3a42-cf49-4d81-8ae3-5e63c993bd6c\r\nworker-slack_1                  | [2019-04-08 21:03:22,696: INFO]: Elected group leader -- performing partition assignments using faust\r\nworker-slack_1                  | [2019-04-08 21:03:22,701: INFO]: Successfully synced group slack with generation 37\r\nworker-slack_1                  | [2019-04-08 21:03:22,702: INFO]: Setting newly assigned partitions {TopicPartition(topic='slack-__assignor-__leader', partition=0), TopicPartition(topic='slack', partition=0)} for group slack\r\nworker-slack_1                  | [2019-04-08 21:03:26,407: INFO]: [^---Recovery]: Resuming flow...\r\nworker-slack_1                  | [2019-04-08 21:03:26,407: INFO]: [^---Recovery]: Seek stream partitions to committed offsets.\r\nworker-slack_1                  | [2019-04-08 21:03:27,400: INFO]: [^--Fetcher]: Starting...\r\nworker-slack_1                  | [2019-04-08 21:03:27,400: INFO]: [^---Recovery]: Worker ready\r\nworker-slack_1                  | [2019-04-08 21:03:27,401: INFO]: [^Worker]: Ready\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/327", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/327/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/327/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/327/events", "html_url": "https://github.com/robinhood/faust/issues/327", "id": 429733706, "node_id": "MDU6SXNzdWU0Mjk3MzM3MDY=", "number": 327, "title": "documentation on blessed keys is incomplete", "user": {"login": "fmux", "id": 8274667, "node_id": "MDQ6VXNlcjgyNzQ2Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8274667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmux", "html_url": "https://github.com/fmux", "followers_url": "https://api.github.com/users/fmux/followers", "following_url": "https://api.github.com/users/fmux/following{/other_user}", "gists_url": "https://api.github.com/users/fmux/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmux/subscriptions", "organizations_url": "https://api.github.com/users/fmux/orgs", "repos_url": "https://api.github.com/users/fmux/repos", "events_url": "https://api.github.com/users/fmux/events{/privacy}", "received_events_url": "https://api.github.com/users/fmux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-05T12:36:26Z", "updated_at": "2019-05-02T08:49:43Z", "closed_at": "2019-04-30T00:01:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Commit 9d92b5c6c47150653450066b95a7e1303e77a55e has introduced [documentation on blessed keys, polymorphic fields and the `allow_blessed_key` parameter](https://faust.readthedocs.io/en/latest/userguide/models.html#blessed-keys-and-polymorphic-fields). Unfortunately, the documentation in the current state (1.5.2 as well as current master) opens more question than it answers:\r\n\r\n- The `Asset` example doesn't make it clear what the relationship between `Asset`, `ImageAsset` and `VideoAsset` is - should the latter two be derived from the former instead of `faust.Record`?\r\n- The `allow_blessed_key` parameter is introduced in this example, but neither explicitly mentioned nor documented anywhere else. In particular, when playing around with this example, I have not been able to spot any difference in behavior when supplying this key or leaving it out.\r\n- After introducing the `Asset` example, the documentation mentions blessed keys and proceeds to deal with the `Account` example constructed before, without ever actually going back to the topic of polymorphic fields.\r\n\r\nSorry for not supplying a proper pull request, unfortunately I don't really see how this feature is supposed to work myself.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/325", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/325/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/325/events", "html_url": "https://github.com/robinhood/faust/issues/325", "id": 427327043, "node_id": "MDU6SXNzdWU0MjczMjcwNDM=", "number": 325, "title": "Can't change the partition number of changelog topic.", "user": {"login": "zhorzh", "id": 1499226, "node_id": "MDQ6VXNlcjE0OTkyMjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1499226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhorzh", "html_url": "https://github.com/zhorzh", "followers_url": "https://api.github.com/users/zhorzh/followers", "following_url": "https://api.github.com/users/zhorzh/following{/other_user}", "gists_url": "https://api.github.com/users/zhorzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhorzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhorzh/subscriptions", "organizations_url": "https://api.github.com/users/zhorzh/orgs", "repos_url": "https://api.github.com/users/zhorzh/repos", "events_url": "https://api.github.com/users/zhorzh/events{/privacy}", "received_events_url": "https://api.github.com/users/zhorzh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-03-30T20:53:51Z", "updated_at": "2020-03-01T21:15:18Z", "closed_at": "2019-04-30T00:08:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to change the partition number of changelog topic, but i always have 8 partitions\r\n\r\nHere is my config:\r\n```\r\n\r\napp = App(__name__,\r\n          version=2,\r\n          topic_partitions=1,\r\n          key_serializer='json',\r\n          value_serializer='json',\r\n          # store='rocksdb://',\r\n          broker='kafka://kafka:29092')\r\nworker_commands = app.topic('worker_commands',\r\n                            value_type=Command,\r\n                            partitions=1)\r\nworker_events = app.topic('worker_events',\r\n                          value_type=Event,\r\n                          partitions=1)\r\naccounts = app.Table('accounts',\r\n                     default=Account,\r\n                     partitions=1)\r\n\r\n```\r\nI am expecting that the number of source topics will be equal to changelog topics\r\n\r\n## Actual behavior\r\nI have the partition number of source topics equals to 1\r\nBUT the number of changelog topics is always equals to 8\r\n\r\n## Traceback\r\n```\r\nfaust        | [2019-03-30 20:37:11,268: ERROR]: [^---Agent*: agent.reduce_command_model]: Crashed reason=PartitionsMismatch(\"The source topic 'worker_events' for table 'accounts'\\n\r\nhas 1 partitions, but the changelog\\ntopic 'agent-v2-accounts-changelog' has 8 partitions.\\n\\nPlease make sure the topics have the same number of partitions\\nby configuring Kafka co\r\nrrectly.\\n\")\r\nfaust        | Traceback (most recent call last):\r\nfaust        |   File \"/usr/local/lib/python3.7/site-packages/faust/agents/agent.py\", line 601, in _execute_task\r\nfaust        |     await coro\r\nfaust        |   File \"/srv/app/agent.py\", line 83, in reduce_command_model\r\nfaust        |     accounts[event.aggregate_id] = account\r\nfaust        |   File \"/usr/local/lib/python3.7/site-packages/mode/utils/collections.py\", line 505, in __setitem__\r\nfaust        |     self.on_key_set(key, value)\r\nfaust        |   File \"/usr/local/lib/python3.7/site-packages/faust/tables/table.py\", line 72, in on_key_set\r\nfaust        |     self._send_changelog(event, key, value)\r\nfaust        |   File \"/usr/local/lib/python3.7/site-packages/faust/tables/base.py\", line 228, in _send_changelog\r\nfaust        |     self._verify_source_topic_partitions(event)\r\nfaust        |   File \"/usr/local/lib/python3.7/site-packages/faust/tables/base.py\", line 257, in _verify_source_topic_partitions\r\nfaust        |     change_n=change_n,\r\nfaust        | faust.exceptions.PartitionsMismatch: The source topic 'worker_events' for table 'accounts'\r\nfaust        | has 1 partitions, but the changelog\r\nfaust        | topic 'agent-v2-accounts-changelog' has 8 partitions.\r\nfaust        |\r\nfaust        | Please make sure the topics have the same number of partitions\r\nfaust        | by configuring Kafka correctly.\r\n```\r\n\r\n# Versions\r\n\r\n* Python version 3.7\r\n* Faust version 1.5.2\r\n* Operating system Ubuntu 18.04\r\n* Kafka version 2.1.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/324", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/324/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/324/events", "html_url": "https://github.com/robinhood/faust/issues/324", "id": 426600862, "node_id": "MDU6SXNzdWU0MjY2MDA4NjI=", "number": 324, "title": "Autodiscovery: venusian.scan should ignore `__main__.py`", "user": {"login": "ask", "id": 1558, "node_id": "MDQ6VXNlcjE1NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ask", "html_url": "https://github.com/ask", "followers_url": "https://api.github.com/users/ask/followers", "following_url": "https://api.github.com/users/ask/following{/other_user}", "gists_url": "https://api.github.com/users/ask/gists{/gist_id}", "starred_url": "https://api.github.com/users/ask/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ask/subscriptions", "organizations_url": "https://api.github.com/users/ask/orgs", "repos_url": "https://api.github.com/users/ask/repos", "events_url": "https://api.github.com/users/ask/events{/privacy}", "received_events_url": "https://api.github.com/users/ask/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-28T16:48:58Z", "updated_at": "2019-03-28T16:59:48Z", "closed_at": "2019-03-28T16:59:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If venusian.scan imports `__main__.py` it causes the app to be created twice ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/323", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/323/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/323/events", "html_url": "https://github.com/robinhood/faust/issues/323", "id": 426588487, "node_id": "MDU6SXNzdWU0MjY1ODg0ODc=", "number": 323, "title": "[1.5.x] app.main() does not autodiscover", "user": {"login": "ask", "id": 1558, "node_id": "MDQ6VXNlcjE1NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ask", "html_url": "https://github.com/ask", "followers_url": "https://api.github.com/users/ask/followers", "following_url": "https://api.github.com/users/ask/following{/other_user}", "gists_url": "https://api.github.com/users/ask/gists{/gist_id}", "starred_url": "https://api.github.com/users/ask/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ask/subscriptions", "organizations_url": "https://api.github.com/users/ask/orgs", "repos_url": "https://api.github.com/users/ask/repos", "events_url": "https://api.github.com/users/ask/events{/privacy}", "received_events_url": "https://api.github.com/users/ask/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-28T16:24:06Z", "updated_at": "2019-03-28T16:47:51Z", "closed_at": "2019-03-28T16:47:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/322", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/322/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/322/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/322/events", "html_url": "https://github.com/robinhood/faust/issues/322", "id": 424996943, "node_id": "MDU6SXNzdWU0MjQ5OTY5NDM=", "number": 322, "title": "pytest fail on 1.5+ with concurrency", "user": {"login": "DeoLeung", "id": 3764720, "node_id": "MDQ6VXNlcjM3NjQ3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3764720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeoLeung", "html_url": "https://github.com/DeoLeung", "followers_url": "https://api.github.com/users/DeoLeung/followers", "following_url": "https://api.github.com/users/DeoLeung/following{/other_user}", "gists_url": "https://api.github.com/users/DeoLeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeoLeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeoLeung/subscriptions", "organizations_url": "https://api.github.com/users/DeoLeung/orgs", "repos_url": "https://api.github.com/users/DeoLeung/repos", "events_url": "https://api.github.com/users/DeoLeung/events{/privacy}", "received_events_url": "https://api.github.com/users/DeoLeung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-25T16:26:18Z", "updated_at": "2019-04-30T21:41:15Z", "closed_at": "2019-04-30T21:40:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nmy last pytest failed with \r\n```bash\r\npyfuncitem = <Function test_process_message>\r\n\r\n    @pytest.mark.tryfirst\r\n    def pytest_pyfunc_call(pyfuncitem):\r\n        \"\"\"\r\n        Run asyncio marked test functions in an event loop instead of a normal\r\n        function call.\r\n        \"\"\"\r\n        for marker_name, fixture_name in _markers_2_fixtures.items():\r\n            if marker_name in pyfuncitem.keywords \\\r\n                    and not getattr(pyfuncitem.obj, 'is_hypothesis_test', False):\r\n                event_loop = pyfuncitem.funcargs[fixture_name]\r\n\r\n                funcargs = pyfuncitem.funcargs\r\n                testargs = {arg: funcargs[arg]\r\n                            for arg in pyfuncitem._fixtureinfo.argnames}\r\n\r\n                event_loop.run_until_complete(\r\n                    asyncio.ensure_future(\r\n>                       pyfuncitem.obj(**testargs), loop=event_loop))\r\n\r\n/usr/local/lib/python3.7/site-packages/pytest_asyncio/plugin.py:158:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <_UnixSelectorEventLoop running=False closed=False debug=False>, future = <Task cancelled coro=<test_process_message() done, defined at /tmp/test/streams/slack_test.py:17>>\r\n\r\n    def run_until_complete(self, future):\r\n        \"\"\"Run until the Future is done.\r\n\r\n        If the argument is a coroutine, it is wrapped in a Task.\r\n\r\n        WARNING: It would be disastrous to call run_until_complete()\r\n        with the same coroutine twice -- it would wrap it in two\r\n        different Tasks and that can't be good.\r\n\r\n        Return the Future's result, or raise its exception.\r\n        \"\"\"\r\n        self._check_closed()\r\n\r\n        new_task = not futures.isfuture(future)\r\n        future = tasks.ensure_future(future, loop=self)\r\n        if new_task:\r\n            # An exception is raised if the future didn't complete, so there\r\n            # is no need to log the \"destroy pending task\" message\r\n            future._log_destroy_pending = False\r\n\r\n        future.add_done_callback(_run_until_complete_cb)\r\n        try:\r\n            self.run_forever()\r\n        except:\r\n            if new_task and future.done() and not future.cancelled():\r\n                # The coroutine raised a BaseException. Consume the exception\r\n                # to not log a warning, the caller doesn't have access to the\r\n                # local task.\r\n                future.exception()\r\n            raise\r\n        finally:\r\n            future.remove_done_callback(_run_until_complete_cb)\r\n        if not future.done():\r\n            raise RuntimeError('Event loop stopped before Future completed.')\r\n\r\n>       return future.result()\r\nE       concurrent.futures._base.CancelledError\r\n\r\n/usr/local/lib/python3.7/asyncio/base_events.py:584: CancelledError\r\n```\r\n\r\n## Expected behavior\r\n\r\nIt works on 1.4.9, failing with 1.5.1\r\n\r\n## Actual behavior\r\n\r\nTell us what happened instead.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nPaste the full traceback (if there is any)\r\n```\r\n\r\n# Versions\r\n\r\n* Python version: 3.7.2\r\n* Faust version: 1.5.1\r\n* Operating system\r\n* Kafka version\r\n* RocksDB version (if applicable)\r\n\r\nthe error is not obvious to me, will research further later\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/320", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/320/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/320/events", "html_url": "https://github.com/robinhood/faust/issues/320", "id": 424629774, "node_id": "MDU6SXNzdWU0MjQ2Mjk3NzQ=", "number": 320, "title": "1.5.0 - Application hangs after \"Elected group leader -- performing partition assignments using faust\"", "user": {"login": "bobh66", "id": 4935304, "node_id": "MDQ6VXNlcjQ5MzUzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4935304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobh66", "html_url": "https://github.com/bobh66", "followers_url": "https://api.github.com/users/bobh66/followers", "following_url": "https://api.github.com/users/bobh66/following{/other_user}", "gists_url": "https://api.github.com/users/bobh66/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobh66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobh66/subscriptions", "organizations_url": "https://api.github.com/users/bobh66/orgs", "repos_url": "https://api.github.com/users/bobh66/repos", "events_url": "https://api.github.com/users/bobh66/events{/privacy}", "received_events_url": "https://api.github.com/users/bobh66/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-24T16:08:47Z", "updated_at": "2019-03-25T04:50:17Z", "closed_at": "2019-03-25T04:50:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [X] I have included information about relevant versions\r\n- [X] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nRun the Hello World example on the 1.5.0/master branch release\r\n\r\n## Expected behavior\r\n\r\nApplication should run normally, saying \"hello\" once every second\r\n\r\n## Actual behavior\r\n\r\nApplication hangs after \"Elected group leader -- performing partition assignments using faust\"\r\n \r\n```\r\n[2019-03-24 11:00:18,653: INFO]: Discovered coordinator 0 for group hello-app\r\n[2019-03-24 11:00:18,654: INFO]: Revoking previously assigned partitions set() for group hello-app\r\n[2019-03-24 11:00:19,635: INFO]: (Re-)joining group hello-app\r\n[2019-03-24 11:00:19,635: DEBUG]: Sending JoinGroup (JoinGroupRequest_v2(group='hello-app', session_timeout=60000, rebalance_timeout=60000, member_id='', protocol_type='consumer', group_protocols=[(protocol_na\r\nme='faust', protocol_metadata=b'\\x00\\x04\\x00\\x00\\x00\\x02\\x00\\x1dhello-app-__assignor-__leader\\x00\\x0bhello-topic\\x00\\x00\\x00|{\"assignment\": {\"actives\": {}, \"standbys\": {}}...')])) to coordinator 0\r\n[2019-03-24 11:00:19,637: DEBUG]: <AIOKafkaConnection host=135.1.219.46 port=9092> Request 2: JoinGroupRequest_v2(group='hello-app', session_timeout=60000, rebalance_timeout=60000, member_id='', protocol_type=\r\n'consumer', group_protocols=[(protocol_name='faust', protocol_metadata=b'\\x00\\x04\\x00\\x00\\x00\\x02\\x00\\x1dhello-app-__assignor-__leader\\x00\\x0bhello-topic\\x00\\x00\\x00|{\"assignment\": {\"actives\": {}, \"standbys\":\r\n{}}...')])\r\n[2019-03-24 11:00:19,639: DEBUG]: <AIOKafkaConnection host=135.1.219.46 port=9092> Response 2: JoinGroupResponse_v2(throttle_time_ms=0, error_code=0, generation_id=27, group_protocol='faust', leader_id='faust-\r\n1.5.0-ef439cad-972b-4e67-93d0-da494e26e1f5', member_id='faust-1.5.0-ef439cad-972b-4e67-93d0-da494e26e1f5', members=[(member_id='faust-1.5.0-ef439cad-972b-4e67-93d0-da494e26e1f5', member_metadata=b'\\x00\\x04\\x00\r\n\\x00\\x00\\x02\\x00\\x1dhello-app-__assignor-__leader\\x00\\x0bhello-topic\\x00\\x00\\x00|{\"assignment\": {\"actives\": {}, \"standbys\": {}}...')])\r\n[2019-03-24 11:00:19,641: DEBUG]: Join group response JoinGroupResponse_v2(throttle_time_ms=0, error_code=0, generation_id=27, group_protocol='faust', leader_id='faust-1.5.0-ef439cad-972b-4e67-93d0-da494e26e1f\r\n5', member_id='faust-1.5.0-ef439cad-972b-4e67-93d0-da494e26e1f5', members=[(member_id='faust-1.5.0-ef439cad-972b-4e67-93d0-da494e26e1f5', member_metadata=b'\\x00\\x04\\x00\\x00\\x00\\x02\\x00\\x1dhello-app-__assignor-\r\n__leader\\x00\\x0bhello-topic\\x00\\x00\\x00|{\"assignment\": {\"actives\": {}, \"standbys\": {}}...')])\r\n[2019-03-24 11:00:19,641: INFO]: Joined group 'hello-app' (generation 27) with member_id faust-1.5.0-ef439cad-972b-4e67-93d0-da494e26e1f5\r\n[2019-03-24 11:00:19,641: INFO]: Elected group leader -- performing partition assignments using faust\r\n[2019-03-24 11:00:19,641: DEBUG]: Performing assignment for group hello-app using strategy faust with subscriptions {'faust-1.5.0-ef439cad-972b-4e67-93d0-da494e26e1f5': ConsumerProtocolMemberMetadata(version=4\r\n, subscription=['hello-app-__assignor-__leader', 'hello-topic'], user_data=b'{\"assignment\": {\"actives\": {}, \"standbys\": {}}, \"url\": \"http://bobh:6066\", \"changelog_distribution\":...')}```\r\n\r\n\r\n\r\n# Versions\r\n\r\n* Python version - 3.6.5\r\n* Faust version - 1.5.0\r\n* Operating system - Linux\r\n* Kafka version - 1.1.1\r\n* RocksDB version (if applicable) N/A\r\n\r\n\r\nI discovered this issue with my application after upgrading from 1.4.9 to 1.5.0, and decided to try using the Hello World application to see if it was something in my app.\r\n\r\nI also changed the application name and topic name in the Hello World app to see if it was a problem with re-connecting to an existing set of topics, but that didn't help.\r\n\r\nI used python -m trace to get more information and found that aiokafka/consumer/group_coordinator.py was catching an exception that was not being reraised.  When I modified that code to raise the exception I found that in faust/assignor/partition_assignor.py there is code that sets span to nullcontext() and then tries to call span.set_tag(), which raises an exception because nullcontext() has no set_tag() attribute.  That exception is being caught by group_coordinator.py and not raised so everything hangs.   When I comment out the call to span.set_tag() it works fine.   I'll see if I can figure out the right fix and push a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/318", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/318/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/318/events", "html_url": "https://github.com/robinhood/faust/issues/318", "id": 424546431, "node_id": "MDU6SXNzdWU0MjQ1NDY0MzE=", "number": 318, "title": "Timer drift", "user": {"login": "bobh66", "id": 4935304, "node_id": "MDQ6VXNlcjQ5MzUzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4935304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobh66", "html_url": "https://github.com/bobh66", "followers_url": "https://api.github.com/users/bobh66/followers", "following_url": "https://api.github.com/users/bobh66/following{/other_user}", "gists_url": "https://api.github.com/users/bobh66/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobh66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobh66/subscriptions", "organizations_url": "https://api.github.com/users/bobh66/orgs", "repos_url": "https://api.github.com/users/bobh66/repos", "events_url": "https://api.github.com/users/bobh66/events{/privacy}", "received_events_url": "https://api.github.com/users/bobh66/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-23T21:21:19Z", "updated_at": "2019-04-30T21:46:18Z", "closed_at": "2019-04-30T21:46:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [X] I have included information about relevant versions\r\n- [X] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\nTell us what you did to cause something to happen.\r\n\r\nRun a 1-minute app.timer() and observe the timestamps of the executions\r\n\r\n## Expected behavior\r\n\r\nThe timestamp of each execution should be within some number of milliseconds of previous timestamps, and should not drift over time\r\n\r\nLike this:\r\n\r\n`[2019-03-23 16:13:13,440: WARNING]: 1: 2019-03-23T16:13:13.440456\r\n[2019-03-23 16:14:13,441: WARNING]: 1: 2019-03-23T16:14:13.441295\r\n[2019-03-23 16:15:13,441: WARNING]: 1: 2019-03-23T16:15:13.441456\r\n[2019-03-23 16:16:13,440: WARNING]: 1: 2019-03-23T16:16:13.440846\r\n[2019-03-23 16:17:13,440: WARNING]: 1: 2019-03-23T16:17:13.440679`\r\n\r\n## Actual behavior\r\n\r\nThe execution timestamps drift later and later with each execution, to the point where 7+ seconds are lost over a 30 minute period:\r\n\r\n```\r\n[2019-03-23 12:44:28,255: WARNING]: 1: 2019-03-23T12:44:28.255500\r\n[2019-03-23 12:45:28,501: WARNING]: 1: 2019-03-23T12:45:28.501825\r\n[2019-03-23 12:46:28,748: WARNING]: 1: 2019-03-23T12:46:28.748684\r\n[2019-03-23 12:47:28,982: WARNING]: 1: 2019-03-23T12:47:28.981953\r\n[2019-03-23 12:48:29,209: WARNING]: 1: 2019-03-23T12:48:29.209592\r\n[2019-03-23 12:49:29,446: WARNING]: 1: 2019-03-23T12:49:29.446405\r\n[2019-03-23 12:50:29,721: WARNING]: 1: 2019-03-23T12:50:29.721468\r\n[2019-03-23 12:51:29,965: WARNING]: 1: 2019-03-23T12:51:29.965582\r\n[2019-03-23 12:52:30,211: WARNING]: 1: 2019-03-23T12:52:30.211631\r\n[2019-03-23 12:53:30,470: WARNING]: 1: 2019-03-23T12:53:30.470134\r\n\r\n```\r\n\r\n## Full traceback\r\n\r\n```pytb\r\nPaste the full traceback (if there is any)\r\n```\r\n\r\n# Versions\r\n\r\n* Python version == 3.6.5\r\n* Faust version == 1.5.0\r\n* Operating system - Linux\r\n* Kafka version - 1.1.1-cp1\r\n* RocksDB version (if applicable)\r\n\r\nThe issue is caused by the sleep(interval_s) in app/base.py since it is not taking into account the time spent to execute the timer code.\r\n\r\nThe \"expected\" results above were created using a generator to determine the sleep time.  I can push a PR for review.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/314", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/314/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/314/events", "html_url": "https://github.com/robinhood/faust/issues/314", "id": 422669668, "node_id": "MDU6SXNzdWU0MjI2Njk2Njg=", "number": 314, "title": "Update aiokafka fork to support GSSAPI", "user": {"login": "jsurloppe", "id": 20650010, "node_id": "MDQ6VXNlcjIwNjUwMDEw", "avatar_url": "https://avatars2.githubusercontent.com/u/20650010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsurloppe", "html_url": "https://github.com/jsurloppe", "followers_url": "https://api.github.com/users/jsurloppe/followers", "following_url": "https://api.github.com/users/jsurloppe/following{/other_user}", "gists_url": "https://api.github.com/users/jsurloppe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsurloppe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsurloppe/subscriptions", "organizations_url": "https://api.github.com/users/jsurloppe/orgs", "repos_url": "https://api.github.com/users/jsurloppe/repos", "events_url": "https://api.github.com/users/jsurloppe/events{/privacy}", "received_events_url": "https://api.github.com/users/jsurloppe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-19T11:04:10Z", "updated_at": "2019-03-20T00:15:10Z", "closed_at": "2019-03-20T00:15:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n\r\nHi,\r\n\r\nWe added support for SASL/GSSAPI/Kerberos in aiokafka and we are very interested in Faust, can you upgrade your aiokafka fork with the 0.5.1 release of aiokafka for the next Faust release?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/312", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/312/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/312/events", "html_url": "https://github.com/robinhood/faust/issues/312", "id": 422052060, "node_id": "MDU6SXNzdWU0MjIwNTIwNjA=", "number": 312, "title": "Update docs referring to \"exactly once\" in future", "user": {"login": "TomGoBravo", "id": 1130635, "node_id": "MDQ6VXNlcjExMzA2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1130635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomGoBravo", "html_url": "https://github.com/TomGoBravo", "followers_url": "https://api.github.com/users/TomGoBravo/followers", "following_url": "https://api.github.com/users/TomGoBravo/following{/other_user}", "gists_url": "https://api.github.com/users/TomGoBravo/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomGoBravo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomGoBravo/subscriptions", "organizations_url": "https://api.github.com/users/TomGoBravo/orgs", "repos_url": "https://api.github.com/users/TomGoBravo/repos", "events_url": "https://api.github.com/users/TomGoBravo/events{/privacy}", "received_events_url": "https://api.github.com/users/TomGoBravo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-18T06:08:41Z", "updated_at": "2019-03-21T17:51:42Z", "closed_at": "2019-03-21T17:51:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I read at https://faust.readthedocs.io/en/latest/userguide/tables.html#basics \r\n\r\n> we are hoping to take advantage of Kafka 0.11\u2019s stronger consistency guarantees and new \u201cexactly-once\u201d-semantics features as soon as that is supported in a Python Kafka client.\r\n\r\nIt looks like https://github.com/robinhood/faust/pull/280 has been merged. \r\n\r\nPlease may you update the table docs and faust/TODO.rst\r\n\r\nCongratulations on landing a big important feature!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/310", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/310/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/310/events", "html_url": "https://github.com/robinhood/faust/issues/310", "id": 421791847, "node_id": "MDU6SXNzdWU0MjE3OTE4NDc=", "number": 310, "title": "[Solved] Bulk stream processing for batch uploads ", "user": {"login": "axsaucedo", "id": 1447507, "node_id": "MDQ6VXNlcjE0NDc1MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1447507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axsaucedo", "html_url": "https://github.com/axsaucedo", "followers_url": "https://api.github.com/users/axsaucedo/followers", "following_url": "https://api.github.com/users/axsaucedo/following{/other_user}", "gists_url": "https://api.github.com/users/axsaucedo/gists{/gist_id}", "starred_url": "https://api.github.com/users/axsaucedo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axsaucedo/subscriptions", "organizations_url": "https://api.github.com/users/axsaucedo/orgs", "repos_url": "https://api.github.com/users/axsaucedo/repos", "events_url": "https://api.github.com/users/axsaucedo/events{/privacy}", "received_events_url": "https://api.github.com/users/axsaucedo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-16T10:12:55Z", "updated_at": "2019-04-06T09:49:06Z", "closed_at": "2019-04-06T09:49:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have built a Faust agent to save the contents of a stream into cloud storage using aiohttp. However the throughput is higher than the speed of upload and increasing concurrency further is not possible due to issues (as per #259). Also there is no off-the-shelf connector available.\r\n\r\nIs there a method in Faust to process bulk windows of the stream similar to Kafka's `consumer.poll(Duration.ofMillis(100));` functionality in Java? I have built a consumer using the Java APIs and saw an 100x increase in throughput, so this functionality would be appreciated. \r\n\r\nThere is an attempt to implement this with Tables, but a bug arised where Faust hangs when attempting to delete a key which is reported on #311. \r\n\r\nEdit. This was solved by using the `stream.take` functionality as per https://github.com/robinhood/faust/blob/39d80e4342ddf50cd806b84339069801f71ceaa1/docs/userguide/streams.rst#take-buffer-up-values-in-the-stream", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/308", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/308/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/308/events", "html_url": "https://github.com/robinhood/faust/issues/308", "id": 420660418, "node_id": "MDU6SXNzdWU0MjA2NjA0MTg=", "number": 308, "title": "`takes_model` and `gives_model` should specify serializers", "user": {"login": "erip", "id": 2348806, "node_id": "MDQ6VXNlcjIzNDg4MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2348806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erip", "html_url": "https://github.com/erip", "followers_url": "https://api.github.com/users/erip/followers", "following_url": "https://api.github.com/users/erip/following{/other_user}", "gists_url": "https://api.github.com/users/erip/gists{/gist_id}", "starred_url": "https://api.github.com/users/erip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erip/subscriptions", "organizations_url": "https://api.github.com/users/erip/orgs", "repos_url": "https://api.github.com/users/erip/repos", "events_url": "https://api.github.com/users/erip/events{/privacy}", "received_events_url": "https://api.github.com/users/erip/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-13T18:42:35Z", "updated_at": "2019-03-14T11:16:53Z", "closed_at": "2019-03-13T18:57:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have included information about relevant versions\r\n- [x] I have verified that the issue persists when using the `master` branch of Faust.\r\n\r\n## Steps to reproduce\r\n\r\n```python\r\nimport faust\r\nfrom faust.web import Request, Response, View, takes_model\r\n\r\nclass Foo(faust.Record):\r\n    \"\"\"\r\n    A foo that is ingested from the API before identification.\r\n    \"\"\"\r\n    id: str\r\n    text: str\r\n\r\n@app.page(\"/api/v1/ingest/\")\r\nclass ingest(View):\r\n    @takes_model(Foo)\r\n    async def post(self, request: Request, ingested_foo: Foo) -> Response:\r\n        # below fails, specifying `serializer='json'` in `Foo.loads` works, though.\r\n        print(ingested_foo)\r\n        try:\r\n            result = await self.read_request_content(request)\r\n            sent = Foo.loads(result, serializer='json')\r\n            print(sent)\r\n            return self.json({})\r\n        except Exception as e:\r\n            return self.error(500, str(e))\r\n\r\n```\r\n\r\nTell us what you did to cause something to happen.\r\n\r\n## Expected behavior\r\n\r\nBecause `takes_model` and `gives_model` use `Model.loads`, it should allow a serializer to be specified.\r\n\r\n## Actual behavior\r\n\r\n`Model.loads` uses the default serializer, which sometimes fails.\r\n\r\n## Full traceback\r\n\r\n```pytb\r\n  File \"/Users/erippeth/anaconda3/envs/foo/lib/python3.7/site-packages/aiohttp/web_protocol.py\", line 418, in start\r\n    resp = await task\r\n  File \"/Users/erippeth/anaconda3/envs/foo/lib/python3.7/site-packages/aiohttp/web_app.py\", line 458, in _handle\r\n    resp = await handler(request)\r\n  File \"/Users/erippeth/anaconda3/envs/foo/lib/python3.7/site-packages/faust/web/drivers/aiohttp.py\", line 144, in _dispatch\r\n    return await handler(request)\r\n  File \"/Users/erippeth/anaconda3/envs/foo/lib/python3.7/site-packages/faust/web/views.py\", line 69, in __call__\r\n    return await self.dispatch(request)\r\n  File \"/Users/erippeth/anaconda3/envs/foo/lib/python3.7/site-packages/faust/web/views.py\", line 80, in dispatch\r\n    return await method(cast(Request, request), **kwargs)\r\n  File \"/Users/erippeth/anaconda3/envs/foo/lib/python3.7/site-packages/faust/web/views.py\", line 198, in _inner\r\n    obj: ModelT = Model.loads(data)\r\n  File \"/Users/erippeth/anaconda3/envs/foo/lib/python3.7/site-packages/faust/models/base.py\", line 211, in loads\r\n    return cls.from_data(data)\r\n  File \"/Users/erippeth/anaconda3/envs/foo/lib/python3.7/site-packages/faust/models/record.py\", line 303, in from_data\r\n    return (self_cls or cls)(**data, __strict__=False)\r\nTypeError: type object argument after ** must be a mapping, not bytes\r\n```\r\n\r\n# Versions\r\n\r\n* Python version\r\n\r\nPython 3.7.2\r\n\r\n* Faust version\r\n\r\nfaust==1.4.8\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/306", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/306/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/306/events", "html_url": "https://github.com/robinhood/faust/issues/306", "id": 420199154, "node_id": "MDU6SXNzdWU0MjAxOTkxNTQ=", "number": 306, "title": "Application Signals are not fired", "user": {"login": "nemosupremo", "id": 940094, "node_id": "MDQ6VXNlcjk0MDA5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/940094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nemosupremo", "html_url": "https://github.com/nemosupremo", "followers_url": "https://api.github.com/users/nemosupremo/followers", "following_url": "https://api.github.com/users/nemosupremo/following{/other_user}", "gists_url": "https://api.github.com/users/nemosupremo/gists{/gist_id}", "starred_url": "https://api.github.com/users/nemosupremo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nemosupremo/subscriptions", "organizations_url": "https://api.github.com/users/nemosupremo/orgs", "repos_url": "https://api.github.com/users/nemosupremo/repos", "events_url": "https://api.github.com/users/nemosupremo/events{/privacy}", "received_events_url": "https://api.github.com/users/nemosupremo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-12T20:49:38Z", "updated_at": "2019-03-21T19:15:54Z", "closed_at": "2019-03-21T19:15:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to use applications signals to do some synchronous application setup (ex. connecting to cassandra before I setup the async thread pool), but none of the configuration/init the application signals seem to get fired (or at least I don't see anything in the logs).\r\n\r\n## Steps to reproduce\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n# pylint: disable=missing-docstring,not-async-context-manager\r\nimport os\r\n\r\nimport faust\r\nimport mode\r\n\r\nKAFKA_BROKER = os.environ.get(\"KAFKA\", \"localhost:9092\")\r\n\r\napp = faust.App('test-pipeline',\r\n                broker=f\"kafka://{KAFKA_BROKER}\",\r\n                key_serializer='raw',\r\n                value_serializer='raw',\r\n                version=1,\r\n                agent_supervisor=mode.CrashingSupervisor)\r\nsample_topic = app.topic('test-topic',\r\n                         key_type=bytes, value_type=bytes)\r\n\r\n\r\n@app.on_worker_init\r\ndef on_worker_init(app, **kwargs):\r\n    print(f'Working starting for app {app}')\r\n\r\n\r\n@app.on_before_configured\r\ndef before_configuration(app, **kwargs):\r\n    print(f'App {app} is being configured')\r\n\r\n\r\n@app.on_configured.connect\r\ndef configure(app, conf, **kwargs):\r\n    print(f'App {app} is configured')\r\n\r\n\r\n@app.on_after_configured\r\ndef after_configuration(app, **kwargs):\r\n    print(f'App {app} has been configured.')\r\n\r\n\r\n@app.agent(sample_topic, supervisor_strategy=mode.CrashingSupervisor)\r\nasync def parse(beacons):\r\n    async for ex in beacons.take(10, within=0.5):\r\n        print(ex)\r\n\r\nif __name__ == '__main__':\r\n    app.main()\r\n```\r\n\r\n## Expected behavior\r\n\r\nTell us what you expected to happen.\r\n\r\n## Actual behavior\r\n\r\nNone of the registered application signals are fired.\r\n\r\n# Versions\r\n\r\n* **Python version**: 3.6.3\r\n* **Faust version**: 1.4.7 / master\r\n* **Operating system**: OS X\r\n* **Kafka version**: n/a\r\n* **RocksDB version (if applicable)**: n/a\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/305", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/305/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/305/events", "html_url": "https://github.com/robinhood/faust/issues/305", "id": 420192038, "node_id": "MDU6SXNzdWU0MjAxOTIwMzg=", "number": 305, "title": "Send method error", "user": {"login": "Telsho", "id": 39586871, "node_id": "MDQ6VXNlcjM5NTg2ODcx", "avatar_url": "https://avatars1.githubusercontent.com/u/39586871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Telsho", "html_url": "https://github.com/Telsho", "followers_url": "https://api.github.com/users/Telsho/followers", "following_url": "https://api.github.com/users/Telsho/following{/other_user}", "gists_url": "https://api.github.com/users/Telsho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Telsho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Telsho/subscriptions", "organizations_url": "https://api.github.com/users/Telsho/orgs", "repos_url": "https://api.github.com/users/Telsho/repos", "events_url": "https://api.github.com/users/Telsho/events{/privacy}", "received_events_url": "https://api.github.com/users/Telsho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-12T20:32:14Z", "updated_at": "2019-03-13T17:05:19Z", "closed_at": "2019-03-13T17:05:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone,\r\n\r\nI've been trying to process a stream on kafka, that would send particular messages to another topic. \r\nI've been following the example provided at : http://fauststream.com/en/latest/userguide/streams.html#through-forward-through-another-topic.\r\n\r\nConsequently my code is the following:\r\n\r\n````\r\napp = faust.App(\r\n        'hello-world',\r\n        broker='kafka://localhost:XXXX',\r\n        value_serializer ='raw',\r\n)\r\n\r\nsource_topic = app.topic('test')\r\ndestination_topic=app.topic('bounce')\r\n\r\n@app.agent(source_topic)\r\nasync def process(stream):\r\n        async for value in stream:\r\n                await destination_topic.send(value)\r\n````\r\n\r\nAfter starting my brokers, and all Kafka's stuff. I'm processing messages into the topic \"test\", and they should be send to \"bounce\".\r\nUnfortunately, none of this happens and I get the get the following error  :\r\n\r\n`[2019-03-12 20:03:16,441: ERROR]: [^-Agent*: stream2.process]: Crashed reason=TypeError('send() takes 1 positional argument but 2 were given',) \r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/site-packages/mode/services.py\", line 744, in _execute_task\r\n    await task\r\n  File \"/usr/lib/python3.6/site-packages/faust/agents/agent.py\", line 553, in _execute_task\r\n    await coro\r\n  File \"/home/user/stream2.py\", line 15, in process\r\n    await destination_topic.send(value)\r\nTypeError: send() takes 1 positional argument but 2 were given`\r\n\r\nIf you have any clue I would be graceful.\r\nThank you\r\n\r\n\r\n\r\n# Versions\r\n\r\n* Python 3.6\r\n* Faust 1.4.8\r\n* CentOS Linux7\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/301", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/301/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/301/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/301/events", "html_url": "https://github.com/robinhood/faust/issues/301", "id": 417508989, "node_id": "MDU6SXNzdWU0MTc1MDg5ODk=", "number": 301, "title": "CrashingSupervisor does not cause the process to exit", "user": {"login": "nemosupremo", "id": 940094, "node_id": "MDQ6VXNlcjk0MDA5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/940094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nemosupremo", "html_url": "https://github.com/nemosupremo", "followers_url": "https://api.github.com/users/nemosupremo/followers", "following_url": "https://api.github.com/users/nemosupremo/following{/other_user}", "gists_url": "https://api.github.com/users/nemosupremo/gists{/gist_id}", "starred_url": "https://api.github.com/users/nemosupremo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nemosupremo/subscriptions", "organizations_url": "https://api.github.com/users/nemosupremo/orgs", "repos_url": "https://api.github.com/users/nemosupremo/repos", "events_url": "https://api.github.com/users/nemosupremo/events{/privacy}", "received_events_url": "https://api.github.com/users/nemosupremo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-05T21:27:19Z", "updated_at": "2019-03-08T17:25:32Z", "closed_at": "2019-03-08T17:25:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Steps to reproduce\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n# pylint: disable=missing-docstring,not-async-context-manager\r\nimport faust\r\nimport mode\r\napp = faust.App('test-pipeline',\r\n                broker=f\"kafka://localhost:9092\",\r\n                key_serializer='raw',\r\n                value_serializer='raw',\r\n                agent_supervisor=mode.CrashingSupervisor)\r\nsample_topic = app.topic('test-topic',\r\n                         key_type=bytes, value_type=bytes)\r\n\r\n@app.agent(sample_topic, supervisor_strategy=mode.CrashingSupervisor)\r\nasync def parse(beacons):\r\n    async for ex in beacons:\r\n        raise Exception('lol')\r\n\r\nif __name__ == '__main__':\r\n    app.main()\r\n```\r\n## Expected behavior\r\n\r\nThe process, according to the documentation, should crash:\r\n\r\n> * **mode.CrashingSupervisor**\r\n>\r\n>If an instance in the group crashes we stop the whole application, and exit so that the Operating System supervisor can restart us.\r\n\r\n\r\n## Actual behavior\r\n\r\nThe process just hangs, and other agents continue running.\r\n\r\n## Full traceback\r\n\r\nn/a\r\n\r\n# Versions\r\n\r\n* **Python version**: 3.6.3\r\n* **Faust version**: 1.4.6 & 1.5.0b1\r\n* **Operating system**: OS X / Linux\r\n* **Kafka version**: 1.1.1\r\n* **RocksDB version (if applicable)**: n/a\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/robinhood/faust/issues/300", "repository_url": "https://api.github.com/repos/robinhood/faust", "labels_url": "https://api.github.com/repos/robinhood/faust/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/robinhood/faust/issues/300/comments", "events_url": "https://api.github.com/repos/robinhood/faust/issues/300/events", "html_url": "https://github.com/robinhood/faust/issues/300", "id": 416680485, "node_id": "MDU6SXNzdWU0MTY2ODA0ODU=", "number": 300, "title": "Defining agents programmatically", "user": {"login": "chobeat", "id": 2822010, "node_id": "MDQ6VXNlcjI4MjIwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2822010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chobeat", "html_url": "https://github.com/chobeat", "followers_url": "https://api.github.com/users/chobeat/followers", "following_url": "https://api.github.com/users/chobeat/following{/other_user}", "gists_url": "https://api.github.com/users/chobeat/gists{/gist_id}", "starred_url": "https://api.github.com/users/chobeat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chobeat/subscriptions", "organizations_url": "https://api.github.com/users/chobeat/orgs", "repos_url": "https://api.github.com/users/chobeat/repos", "events_url": "https://api.github.com/users/chobeat/events{/privacy}", "received_events_url": "https://api.github.com/users/chobeat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-03-04T08:15:54Z", "updated_at": "2020-04-08T21:38:41Z", "closed_at": "2019-04-03T20:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello people.\r\n\r\nI'm working with faust 1.4.5 and I'm trying to define agents programmatically. I almost did it but there's an inconsistent behavior.\r\n\r\nHere's how I do it\r\n\r\n```\r\nfor transformation in get_transformations():\r\n\r\n    async def _func(messages):\r\n        service=Service(transformation,config)\r\n        async for message in messages:\r\n           # do stuff\r\n            yield result\r\n\r\n    _func.__name__=transformation.name\r\n    locals()[transformation.name]=_func\r\n    app.agent(app.topic(transformation.input_topic,\r\n                        value_serializer=\"raw\"))((transformation.input_topic,locals()[transformation.name],))\r\n```\r\n(ignore the part with the locals, it's not really necessary)\r\n\r\nThe code work flawlessly as long as I have only one agent. When I have more than one, a message on the topic associated to an agent is delivered to another agent. If I list the agents with the associated command, the topic-agent association looks correct. Obviously on my side the input<->function association is correct (I'm migrating existing services to Faust). \r\n\r\nMy  assumption is that by defining the agents in this way, some reflection mechanism breaks but I cannot understand what. To further validate this assumption, one important piece of information is that the order in which I define the agents  change the behavior. So probably something gets overwritten at every step in the loop and the last agent gets associated to all the topics or viceversa.\r\n\r\nIs there a way to debug this? Some internal variable to check? Because with the debug messages and `agents` command, everything seems correct.", "performed_via_github_app": null, "score": 1.0}]}