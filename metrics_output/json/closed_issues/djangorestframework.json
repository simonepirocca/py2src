{"total_count": 3305, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7486", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7486/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7486/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7486/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7486", "id": 680806904, "node_id": "MDU6SXNzdWU2ODA4MDY5MDQ=", "number": 7486, "title": "When will file upload be available in the APIs buitl-in documentation ?", "user": {"login": "SamyMe", "id": 7459397, "node_id": "MDQ6VXNlcjc0NTkzOTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7459397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamyMe", "html_url": "https://github.com/SamyMe", "followers_url": "https://api.github.com/users/SamyMe/followers", "following_url": "https://api.github.com/users/SamyMe/following{/other_user}", "gists_url": "https://api.github.com/users/SamyMe/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamyMe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamyMe/subscriptions", "organizations_url": "https://api.github.com/users/SamyMe/orgs", "repos_url": "https://api.github.com/users/SamyMe/repos", "events_url": "https://api.github.com/users/SamyMe/events{/privacy}", "received_events_url": "https://api.github.com/users/SamyMe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-18T08:34:51Z", "updated_at": "2020-08-18T09:57:00Z", "closed_at": "2020-08-18T09:37:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just found in [ release 3.6 announcements](https://www.django-rest-framework.org/community/3.6-announcement/)   that  \"File upload and download support in the JavaScript client & API docs.\" was in the \"What's next\" session. I was wondering if it was planned on a next release or not ?\r\n\r\nAnd if not , is there a way around it ?\r\nThank you,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7482", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7482/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7482/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7482/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7482", "id": 679211465, "node_id": "MDU6SXNzdWU2NzkyMTE0NjU=", "number": 7482, "title": "Houston: I have a problem:  ImproperlyConfigured", "user": {"login": "josetucuman", "id": 7595343, "node_id": "MDQ6VXNlcjc1OTUzNDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7595343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josetucuman", "html_url": "https://github.com/josetucuman", "followers_url": "https://api.github.com/users/josetucuman/followers", "following_url": "https://api.github.com/users/josetucuman/following{/other_user}", "gists_url": "https://api.github.com/users/josetucuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/josetucuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josetucuman/subscriptions", "organizations_url": "https://api.github.com/users/josetucuman/orgs", "repos_url": "https://api.github.com/users/josetucuman/repos", "events_url": "https://api.github.com/users/josetucuman/events{/privacy}", "received_events_url": "https://api.github.com/users/josetucuman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-14T14:52:24Z", "updated_at": "2020-08-15T07:49:33Z", "closed_at": "2020-08-15T07:49:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Help me Please\r\nI'm developing an API example, and when I try to deploy it, I get this message: \r\n\" File \"/Users/ereyes/Desktop/PythonDev/RestDjangoApi/venv/lib/python3.8/site-packages/django/urls/resolvers.py\", line 598, in url_patterns\r\n    raise ImproperlyConfigured(msg.format(name=self.urlconf_name)) from e\r\ndjango.core.exceptions.ImproperlyConfigured: The included URLconf '<module 'book.urls' from '/Users/ereyes/Desktop/PythonDev/RestDjangoApi/projectfacilito/book/urls.py'>' does not appear to have any patterns in it. If you see valid patterns in the file then the issue is probably caused by a circular import.\"\r\n \r\nThis is my code: \r\n\r\nfrom rest_framework import routers\r\nfrom .viewsets import BookViewSets\r\n\r\nrutas = routers.SimpleRouter()\r\n\r\nrutas.register('books', BookViewSets)\r\n\r\nurlpattern = rutas.urls\r\n\r\n\r\n\r\n\r\nCan you help me please? \r\n\r\nThanks a lot\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7479", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7479/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7479/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7479/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7479", "id": 677999632, "node_id": "MDU6SXNzdWU2Nzc5OTk2MzI=", "number": 7479, "title": "AutoSchema'd OpenAPI schemas are valid in JSON, but not in YAML", "user": {"login": "adamf", "id": 188338, "node_id": "MDQ6VXNlcjE4ODMzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/188338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamf", "html_url": "https://github.com/adamf", "followers_url": "https://api.github.com/users/adamf/followers", "following_url": "https://api.github.com/users/adamf/following{/other_user}", "gists_url": "https://api.github.com/users/adamf/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamf/subscriptions", "organizations_url": "https://api.github.com/users/adamf/orgs", "repos_url": "https://api.github.com/users/adamf/repos", "events_url": "https://api.github.com/users/adamf/events{/privacy}", "received_events_url": "https://api.github.com/users/adamf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-12T21:48:10Z", "updated_at": "2020-08-18T17:29:32Z", "closed_at": "2020-08-14T05:36:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nGiven an autoschema generated YAML schema:\r\n\r\n```\r\nopenapi: 3.0.2\r\ninfo:\r\n  title: REST API\r\n  version: 1.0.0a\r\n  description: API\r\npaths:\r\n  /_/api/users/{username}/:\r\n    put:\r\n      operationId: updateQUser\r\n      description: API endpoint that allows users to be viewed or edited.\r\n      parameters:\r\n      - name: username\r\n        in: path\r\n        required: true\r\n        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_\r\n          only.\r\n        schema:\r\n          type: string\r\n      requestBody:\r\n        content:\r\n          application/json:\r\n            schema: &id002\r\n              properties:\r\n                username:\r\n                  type: string\r\n                  description: Required. 150 characters or fewer. Letters, digits\r\n                    and @/./+/-/_ only.\r\n                  pattern: ^[\\w.@+-]+\\Z\r\n                  maxLength: 150\r\n              required:\r\n              - username\r\n          application/x-www-form-urlencoded:\r\n            schema: *id002\r\n          multipart/form-data:\r\n            schema: *id002\r\n      responses:\r\n        '200':\r\n          content:\r\n            application/json:\r\n              schema:\r\n                properties:\r\n                  url:\r\n                    type: string\r\n                    readOnly: true\r\n                  username:\r\n                    type: string\r\n                    description: Required. 150 characters or fewer. Letters, digits\r\n                      and @/./+/-/_ only.\r\n                    pattern: ^[\\w.@+-]+\\Z\r\n                    maxLength: 150\r\n                  repo_owner:\r\n                    type: array\r\n                    items:\r\n                      type: string\r\n                    readOnly: true\r\n                required:\r\n                - username\r\n          description: ''\r\n```\r\n\r\nRunning openapi-generator on this fails to validate the schema:\r\n```\r\nopenapi-generator generate -v -i test-schema.yaml -g python --package-name test -o test\r\n[main] INFO  o.o.c.config.CodegenConfigurator -\r\nVERBOSE MODE: ON. Additional debug options are injected\r\n - [debugOpenAPI] prints the OpenAPI specification as interpreted by the codegen\r\n - [debugModels] prints models passed to the template engine\r\n - [debugOperations] prints operations passed to the template engine\r\n - [debugSupportingFiles] prints additional data passed to the template engine\r\nException in thread \"main\" org.openapitools.codegen.SpecValidationException: There were issues with the specification. The option can be disabled via validateSpec (Maven/Gradle) or --skip-validate-spec (CLI).\r\n | Error count: 2, Warning count: 0\r\nErrors:\r\n\t-attribute paths.'/_/api/users/{username}/'(put).requestBody.content.'application/x-www-form-urlencoded'.schema is not of type `object`\r\n\t-attribute paths.'/_/api/users/{username}/'(put).requestBody.content.'multipart/form-data'.schema is not of type `object`\r\n\r\n\tat org.openapitools.codegen.config.CodegenConfigurator.toContext(CodegenConfigurator.java:480)\r\n\tat org.openapitools.codegen.config.CodegenConfigurator.toClientOptInput(CodegenConfigurator.java:507)\r\n\tat org.openapitools.codegen.cmd.Generate.execute(Generate.java:423)\r\n\tat org.openapitools.codegen.cmd.OpenApiGeneratorCommand.run(OpenApiGeneratorCommand.java:32)\r\n\tat org.openapitools.codegen.OpenAPIGenerator.main(OpenAPIGenerator.java:61)\r\n```\r\n\r\n```\r\n$ openapi-generator version\r\n4.3.1\r\n```\r\n\r\nInterestingly, if I use the same AutoSchema generated schema but in JSON format, I get no errors - hence this bug.\r\n\r\n## Expected behavior\r\n\r\n`openapi-generator` is able to validate the schema and generated code.\r\n\r\n## Actual behavior\r\n\r\n`openapi-generator` fails as shown above.\r\n\r\nAny ideas? Happy to test more. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7475", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7475/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7475/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7475/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7475", "id": 676831486, "node_id": "MDU6SXNzdWU2NzY4MzE0ODY=", "number": 7475, "title": "'Category' object is not iterable ", "user": {"login": "Ravindrakumara", "id": 44864848, "node_id": "MDQ6VXNlcjQ0ODY0ODQ4", "avatar_url": "https://avatars1.githubusercontent.com/u/44864848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ravindrakumara", "html_url": "https://github.com/Ravindrakumara", "followers_url": "https://api.github.com/users/Ravindrakumara/followers", "following_url": "https://api.github.com/users/Ravindrakumara/following{/other_user}", "gists_url": "https://api.github.com/users/Ravindrakumara/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ravindrakumara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ravindrakumara/subscriptions", "organizations_url": "https://api.github.com/users/Ravindrakumara/orgs", "repos_url": "https://api.github.com/users/Ravindrakumara/repos", "events_url": "https://api.github.com/users/Ravindrakumara/events{/privacy}", "received_events_url": "https://api.github.com/users/Ravindrakumara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-11T12:19:53Z", "updated_at": "2020-08-11T12:32:42Z", "closed_at": "2020-08-11T12:21:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "#serializers.py\r\n\r\nclass ItemSerializer(serializers.ModelSerializer):\r\n    brand = serializers.StringRelatedField(many=True)\r\n    category = serializers.StringRelatedField(many=True)\r\n    class Meta:\r\n        model = Item\r\n        fields = ('id','title','image','price','discount','slug','brand',\r\n                  'category','colour','size','weight','discription','modify_date','expiry_date','create_date')", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7474", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7474/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7474/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7474/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7474", "id": 676555591, "node_id": "MDU6SXNzdWU2NzY1NTU1OTE=", "number": 7474, "title": "TypeError at/docs/ -> 'tuple' object is not callable.", "user": {"login": "1451872028", "id": 43491903, "node_id": "MDQ6VXNlcjQzNDkxOTAz", "avatar_url": "https://avatars2.githubusercontent.com/u/43491903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1451872028", "html_url": "https://github.com/1451872028", "followers_url": "https://api.github.com/users/1451872028/followers", "following_url": "https://api.github.com/users/1451872028/following{/other_user}", "gists_url": "https://api.github.com/users/1451872028/gists{/gist_id}", "starred_url": "https://api.github.com/users/1451872028/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1451872028/subscriptions", "organizations_url": "https://api.github.com/users/1451872028/orgs", "repos_url": "https://api.github.com/users/1451872028/repos", "events_url": "https://api.github.com/users/1451872028/events{/privacy}", "received_events_url": "https://api.github.com/users/1451872028/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-11T03:41:11Z", "updated_at": "2020-08-11T06:21:18Z", "closed_at": "2020-08-11T06:21:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n## Expected behavior\r\n\r\n## Actual behavior\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7472", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7472/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7472/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7472/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7472", "id": 675838591, "node_id": "MDU6SXNzdWU2NzU4Mzg1OTE=", "number": 7472, "title": "_cached_attrs is not used ", "user": {"login": "damonchen", "id": 1255097, "node_id": "MDQ6VXNlcjEyNTUwOTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1255097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damonchen", "html_url": "https://github.com/damonchen", "followers_url": "https://api.github.com/users/damonchen/followers", "following_url": "https://api.github.com/users/damonchen/following{/other_user}", "gists_url": "https://api.github.com/users/damonchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/damonchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damonchen/subscriptions", "organizations_url": "https://api.github.com/users/damonchen/orgs", "repos_url": "https://api.github.com/users/damonchen/repos", "events_url": "https://api.github.com/users/damonchen/events{/privacy}", "received_events_url": "https://api.github.com/users/damonchen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-10T03:21:46Z", "updated_at": "2020-08-10T05:38:44Z", "closed_at": "2020-08-10T05:38:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nthe code below:\r\n\r\nhttps://github.com/encode/django-rest-framework/blob/1e383f103a1a84461e949e59b001ee61a2e0f7c4/rest_framework/settings.py#L228\r\n\r\n not used by any other place. \r\n\r\nI think it may have some error.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7471", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7471/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7471/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7471/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7471", "id": 675828026, "node_id": "MDU6SXNzdWU2NzU4MjgwMjY=", "number": 7471, "title": "Unable to validate when many=True", "user": {"login": "tuanden0", "id": 23259674, "node_id": "MDQ6VXNlcjIzMjU5Njc0", "avatar_url": "https://avatars1.githubusercontent.com/u/23259674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuanden0", "html_url": "https://github.com/tuanden0", "followers_url": "https://api.github.com/users/tuanden0/followers", "following_url": "https://api.github.com/users/tuanden0/following{/other_user}", "gists_url": "https://api.github.com/users/tuanden0/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuanden0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuanden0/subscriptions", "organizations_url": "https://api.github.com/users/tuanden0/orgs", "repos_url": "https://api.github.com/users/tuanden0/repos", "events_url": "https://api.github.com/users/tuanden0/events{/privacy}", "received_events_url": "https://api.github.com/users/tuanden0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-10T02:36:15Z", "updated_at": "2020-08-10T05:32:44Z", "closed_at": "2020-08-10T05:32:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [* ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [* ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [*] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [*] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nSerilaizer\r\n```\r\nclass FloorSerializer(CustomModelSerializer):\r\n    \r\n    def validate(self, data):\r\n        # Count all floor and add current floor instance\r\n        # limit_object_in_floor current is 9\r\n        limit_object_in_floor = Floor.objects.all().count() + 1\r\n        \r\n        if limit_object_in_floor > 10:\r\n            raise serializers.ValidationError('This Floor is Full!')\r\n    \r\n        return data\r\n    \r\n    class Meta:\r\n        model = Floor\r\n        fields = '__all__'\r\n```\r\n\r\nInput data:\r\n```\r\n[\r\n   {\r\n      \"name\": \"Floor 10\"\r\n   },\r\n   {\r\n      \"name\": \"Floor 11\"\r\n   }\r\n]\r\n```\r\n\r\n## Expected behavior\r\nRaise exception because the number of floor is larger than 10\r\n`raise serializers.ValidationError('This Floor is Full!')`\r\n\r\n## Actual behavior\r\nCreate success because limit_object_in_floor = Floor.objects.all().count() always equal 9 even after create \"Floor 10\" success", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7470", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7470/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7470/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7470/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7470", "id": 675266672, "node_id": "MDU6SXNzdWU2NzUyNjY2NzI=", "number": 7470, "title": "Cannot import filters from rest_framework", "user": {"login": "onosendi", "id": 2631623, "node_id": "MDQ6VXNlcjI2MzE2MjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2631623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/onosendi", "html_url": "https://github.com/onosendi", "followers_url": "https://api.github.com/users/onosendi/followers", "following_url": "https://api.github.com/users/onosendi/following{/other_user}", "gists_url": "https://api.github.com/users/onosendi/gists{/gist_id}", "starred_url": "https://api.github.com/users/onosendi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/onosendi/subscriptions", "organizations_url": "https://api.github.com/users/onosendi/orgs", "repos_url": "https://api.github.com/users/onosendi/repos", "events_url": "https://api.github.com/users/onosendi/events{/privacy}", "received_events_url": "https://api.github.com/users/onosendi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-07T20:43:47Z", "updated_at": "2020-08-07T21:41:08Z", "closed_at": "2020-08-07T21:30:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "`from rest_framework import filters`\r\n\r\nImportError: cannot import name 'ORDER_PATTERN' from 'django.db.models.sql.constants'\r\n\r\nDjango 3.1\r\ndjangorestframework 3.11.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7459", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7459/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7459/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7459/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7459", "id": 673264364, "node_id": "MDU6SXNzdWU2NzMyNjQzNjQ=", "number": 7459, "title": "Could we release a version for django 3.1 ?", "user": {"login": "dcalsky", "id": 9463958, "node_id": "MDQ6VXNlcjk0NjM5NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/9463958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcalsky", "html_url": "https://github.com/dcalsky", "followers_url": "https://api.github.com/users/dcalsky/followers", "following_url": "https://api.github.com/users/dcalsky/following{/other_user}", "gists_url": "https://api.github.com/users/dcalsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcalsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcalsky/subscriptions", "organizations_url": "https://api.github.com/users/dcalsky/orgs", "repos_url": "https://api.github.com/users/dcalsky/repos", "events_url": "https://api.github.com/users/dcalsky/events{/privacy}", "received_events_url": "https://api.github.com/users/dcalsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-05T05:28:52Z", "updated_at": "2020-08-05T09:23:43Z", "closed_at": "2020-08-05T09:23:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nDjango 3.1\r\nimporting django rest framework and using filter, it will report `not found ORDER_PATTERN in django.db.models.sql.constants`\r\n\r\n## Expected behavior\r\nWork correctly\r\n## Actual behavior\r\nWhen I look up commits, I found it had been fixed with #7259. But the latest version of django rest framework was released at Dec. 2019 so that this commit is not included.\r\n\r\nI have to install django rest framework by git rather than pip, which is not very good to developers who are using python package version control.\r\n\r\nCould we release a new version? It has not been updated for more than half a year after all.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7458", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7458/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7458/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7458/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7458", "id": 672818544, "node_id": "MDU6SXNzdWU2NzI4MTg1NDQ=", "number": 7458, "title": "filters package broken since Django 3.1", "user": {"login": "Bel-Shazzar", "id": 38129759, "node_id": "MDQ6VXNlcjM4MTI5NzU5", "avatar_url": "https://avatars2.githubusercontent.com/u/38129759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bel-Shazzar", "html_url": "https://github.com/Bel-Shazzar", "followers_url": "https://api.github.com/users/Bel-Shazzar/followers", "following_url": "https://api.github.com/users/Bel-Shazzar/following{/other_user}", "gists_url": "https://api.github.com/users/Bel-Shazzar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bel-Shazzar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bel-Shazzar/subscriptions", "organizations_url": "https://api.github.com/users/Bel-Shazzar/orgs", "repos_url": "https://api.github.com/users/Bel-Shazzar/repos", "events_url": "https://api.github.com/users/Bel-Shazzar/events{/privacy}", "received_events_url": "https://api.github.com/users/Bel-Shazzar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-04T14:03:44Z", "updated_at": "2020-08-04T23:08:36Z", "closed_at": "2020-08-04T23:08:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n- [X] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [X] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [X] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [X] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [X] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nimport rest_framework.filters\r\n## Expected behavior\r\nIt gets imported\r\n\r\n## Actual behavior\r\n```\r\nFile \"/usr/local/lib/python3.8/site-packages/rest_framework/filters.py\", line 11, in <module>\r\n    from django.db.models.sql.constants import ORDER_PATTERN\r\nImportError: cannot import name 'ORDER_PATTERN' from 'django.db.models.sql.constants' (/usr/local/lib/python3.8/site-packages/django/db/models/sql/constants.py)\r\n```\r\n\r\nThe ORDER_PATTERN has been removed in Django 3.1, see https://github.com/django/django/commit/513948735b799239f3ef8c89397592445e1a0cd5", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7456", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7456/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7456/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7456/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7456", "id": 672800868, "node_id": "MDU6SXNzdWU2NzI4MDA4Njg=", "number": 7456, "title": "DRF 3.11 incompatible with Django 3.1", "user": {"login": "hodossy", "id": 19623656, "node_id": "MDQ6VXNlcjE5NjIzNjU2", "avatar_url": "https://avatars1.githubusercontent.com/u/19623656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hodossy", "html_url": "https://github.com/hodossy", "followers_url": "https://api.github.com/users/hodossy/followers", "following_url": "https://api.github.com/users/hodossy/following{/other_user}", "gists_url": "https://api.github.com/users/hodossy/gists{/gist_id}", "starred_url": "https://api.github.com/users/hodossy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hodossy/subscriptions", "organizations_url": "https://api.github.com/users/hodossy/orgs", "repos_url": "https://api.github.com/users/hodossy/repos", "events_url": "https://api.github.com/users/hodossy/events{/privacy}", "received_events_url": "https://api.github.com/users/hodossy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-04T13:41:56Z", "updated_at": "2020-08-06T14:37:02Z", "closed_at": "2020-08-04T13:45:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nUse the `rest_framework.filters.SearchFilter` as a filter backend with Django 3.1\r\n\r\n## Expected behavior\r\nWorks.\r\n\r\n## Actual behavior\r\n\r\nImportError: Could not import 'rest_framework.filters.SearchFilter' for API setting 'DEFAULT_FILTER_BACKENDS'. ImportError: cannot import name 'ORDER_PATTERN' from 'django.db.models.sql.constants' (/usr/local/lib/python3.8/site-packages/django/db/models/sql/constants.py)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7455", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7455/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7455/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7455/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7455", "id": 672666705, "node_id": "MDU6SXNzdWU2NzI2NjY3MDU=", "number": 7455, "title": "ImportError: cannot import name 'ORDER_PATTERN'", "user": {"login": "maltaesousa", "id": 3328875, "node_id": "MDQ6VXNlcjMzMjg4NzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3328875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maltaesousa", "html_url": "https://github.com/maltaesousa", "followers_url": "https://api.github.com/users/maltaesousa/followers", "following_url": "https://api.github.com/users/maltaesousa/following{/other_user}", "gists_url": "https://api.github.com/users/maltaesousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/maltaesousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maltaesousa/subscriptions", "organizations_url": "https://api.github.com/users/maltaesousa/orgs", "repos_url": "https://api.github.com/users/maltaesousa/repos", "events_url": "https://api.github.com/users/maltaesousa/events{/privacy}", "received_events_url": "https://api.github.com/users/maltaesousa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-04T09:58:29Z", "updated_at": "2020-08-04T10:22:27Z", "closed_at": "2020-08-04T10:22:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Probably this changes breaks drf compatibility with Django 3.1:\r\n\r\nhttps://github.com/django/django/commit/513948735b799239f3ef8c89397592445e1a0cd5#diff-112486a821c7f63d1ab955c6bb2b4db8\r\n\r\n## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nFrom a fresh new project, after installing rest_framework in `INSTALLED_APPS`, run:\r\n```bash\r\npython .\\manage.py shell\r\n```\r\n\r\n```python\r\nfrom rest_framework import filters\r\n```\r\n## Expected behavior\r\n\r\nimport correctly\r\n\r\n## Actual behavior\r\n\r\nThrows this:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \"C:\\Projects\\drf\\.venv\\lib\\site-packages\\rest_framework\\filters.py\", line 11, in <module>\r\n    from django.db.models.sql.constants import ORDER_PATTERN\r\nImportError: cannot import name 'ORDER_PATTERN'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7453", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7453/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7453/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7453/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7453", "id": 672290058, "node_id": "MDU6SXNzdWU2NzIyOTAwNTg=", "number": 7453, "title": "Django 3.0 not supported, throwing import 'six' error...", "user": {"login": "ognjenantonijevic", "id": 19489863, "node_id": "MDQ6VXNlcjE5NDg5ODYz", "avatar_url": "https://avatars1.githubusercontent.com/u/19489863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ognjenantonijevic", "html_url": "https://github.com/ognjenantonijevic", "followers_url": "https://api.github.com/users/ognjenantonijevic/followers", "following_url": "https://api.github.com/users/ognjenantonijevic/following{/other_user}", "gists_url": "https://api.github.com/users/ognjenantonijevic/gists{/gist_id}", "starred_url": "https://api.github.com/users/ognjenantonijevic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ognjenantonijevic/subscriptions", "organizations_url": "https://api.github.com/users/ognjenantonijevic/orgs", "repos_url": "https://api.github.com/users/ognjenantonijevic/repos", "events_url": "https://api.github.com/users/ognjenantonijevic/events{/privacy}", "received_events_url": "https://api.github.com/users/ognjenantonijevic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-03T19:23:19Z", "updated_at": "2020-08-04T06:34:05Z", "closed_at": "2020-08-04T06:34:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Problem is present with python 3.8 , Django 3.0.9 and DRF 3.11.0...\r\n\r\nFile \"/usr/src/app/authentication/urls.py\", line 15, in\r\nfrom . import views\r\nFile \"/usr/src/app/authentication/views.py\", line 3, in\r\nfrom rest_framework.views import APIView\r\nFile \"/usr/local/lib/python3.8/site-packages/rest_framework/views.py\", line 17, in\r\nfrom rest_framework.schemas import DefaultSchema\r\nFile \"/usr/local/lib/python3.8/site-packages/rest_framework/schemas/init.py\", line 34, in\r\npermission_classes=api_settings.DEFAULT_PERMISSION_CLASSES,\r\nFile \"/usr/local/lib/python3.8/site-packages/rest_framework/settings.py\", line 220, in getattr\r\nval = perform_import(val, attr)\r\nFile \"/usr/local/lib/python3.8/site-packages/rest_framework/settings.py\", line 168, in perform_import\r\nreturn [import_from_string(item, setting_name) for item in val]\r\nFile \"/usr/local/lib/python3.8/site-packages/rest_framework/settings.py\", line 168, in\r\nreturn [import_from_string(item, setting_name) for item in val]\r\nFile \"/usr/local/lib/python3.8/site-packages/rest_framework/settings.py\", line 180, in import_from_string\r\nraise ImportError(msg)\r\nImportError: Could not import 'rest_framework.permissions.IsAuthenticated' for API setting 'DEFAULT_PERMISSION_CLASSES'. ImportError: cannot import name 'six' from 'django.utils' (/usr/local/lib/python3.8/site-packages/django/utils/init.py).\r\n\r\nSee\r\nhttps://stackoverflow.com/questions/59193514/importerror-cannot-import-name-six-from-django-utils", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7452", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7452/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7452/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7452/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7452", "id": 672143033, "node_id": "MDU6SXNzdWU2NzIxNDMwMzM=", "number": 7452, "title": "[OAS3] OpenAPI v3 schema validation", "user": {"login": "peppelinux", "id": 1297620, "node_id": "MDQ6VXNlcjEyOTc2MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1297620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peppelinux", "html_url": "https://github.com/peppelinux", "followers_url": "https://api.github.com/users/peppelinux/followers", "following_url": "https://api.github.com/users/peppelinux/following{/other_user}", "gists_url": "https://api.github.com/users/peppelinux/gists{/gist_id}", "starred_url": "https://api.github.com/users/peppelinux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peppelinux/subscriptions", "organizations_url": "https://api.github.com/users/peppelinux/orgs", "repos_url": "https://api.github.com/users/peppelinux/repos", "events_url": "https://api.github.com/users/peppelinux/events{/privacy}", "received_events_url": "https://api.github.com/users/peppelinux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-03T15:06:07Z", "updated_at": "2020-08-04T09:00:21Z", "closed_at": "2020-08-04T09:00:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\r\nThank you for this wonderful project, it's really awesome and I always use it as it is, it always gave me more then what I would ever ask. But (!) something changed in my context and I have to face an important schema validation that, at this moment, drave my loved DRF out. I would like to get these features working and I'm ready to give an hand.\r\n\r\nHere the specification:\r\nhttps://teamdigitale.github.io/api-oas-checker/spectral.yml\r\n\r\nAnd here and example of a failed validation:\r\nhttps://teamdigitale.github.io/api-oas-checker/?url=https://raw.githubusercontent.com/UniversitaDellaCalabria/Ricerca/master/schema.yml\r\n\r\nI have to fix every elements exposed by [api-oas-checker](https://github.com/teamdigitale/api-oas-checker) and I would have a little brain storming do deal with the mainstream developer line. I would start from here:\r\nhttps://www.django-rest-framework.org/api-guide/schemas/#customizing-schema-generation\r\n\r\nThen, probably and if everything will goes fine, I would put a PR with a `openapi-v3-schema` specialization.\r\nMy validator is that `spectral.yml`, don't know if this would be good for everyone so here I am to start the discussion.\r\n\r\nregards\r\n\r\n\r\n## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [x] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7448", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7448/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7448/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7448/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7448", "id": 671568831, "node_id": "MDU6SXNzdWU2NzE1Njg4MzE=", "number": 7448, "title": "OverflowError: Python int too large to convert to SQLite INTEGER", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-02T07:27:28Z", "updated_at": "2020-08-05T23:15:59Z", "closed_at": "2020-08-05T23:15:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nSimilar to https://github.com/encode/django-rest-framework/issues/7134 , using schemathesis on the sample at of django-oscar-api , there are lots of varied errors, some seen at https://github.com/django-oscar/django-oscar-api/issues/227\r\n\r\n## Expected behavior\r\n\r\nDRF generics should respond with 404 \r\n\r\n## Actual behavior\r\n\r\nDRF generics currently responds with 500", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7444", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7444/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7444/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7444/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7444", "id": 669513925, "node_id": "MDU6SXNzdWU2Njk1MTM5MjU=", "number": 7444, "title": "Add Support to configure used django template engine", "user": {"login": "jesusch", "id": 2362798, "node_id": "MDQ6VXNlcjIzNjI3OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/2362798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesusch", "html_url": "https://github.com/jesusch", "followers_url": "https://api.github.com/users/jesusch/followers", "following_url": "https://api.github.com/users/jesusch/following{/other_user}", "gists_url": "https://api.github.com/users/jesusch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesusch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesusch/subscriptions", "organizations_url": "https://api.github.com/users/jesusch/orgs", "repos_url": "https://api.github.com/users/jesusch/repos", "events_url": "https://api.github.com/users/jesusch/events{/privacy}", "received_events_url": "https://api.github.com/users/jesusch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-31T07:35:02Z", "updated_at": "2020-08-08T19:13:00Z", "closed_at": "2020-08-08T19:12:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently used HTML templates do not support choosing a specific template engine.\r\nWhile having various (incompatible e.g. django_jinja) template engines configured, this causes DRF templates to throw TemplateSyntaxErrors\r\n\r\nI'll attach a working PR", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7441", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7441/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7441/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7441/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7441", "id": 668422464, "node_id": "MDU6SXNzdWU2Njg0MjI0NjQ=", "number": 7441, "title": "Release a new version", "user": {"login": "tasn", "id": 108670, "node_id": "MDQ6VXNlcjEwODY3MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/108670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tasn", "html_url": "https://github.com/tasn", "followers_url": "https://api.github.com/users/tasn/followers", "following_url": "https://api.github.com/users/tasn/following{/other_user}", "gists_url": "https://api.github.com/users/tasn/gists{/gist_id}", "starred_url": "https://api.github.com/users/tasn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tasn/subscriptions", "organizations_url": "https://api.github.com/users/tasn/orgs", "repos_url": "https://api.github.com/users/tasn/repos", "events_url": "https://api.github.com/users/tasn/events{/privacy}", "received_events_url": "https://api.github.com/users/tasn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-30T06:44:41Z", "updated_at": "2020-07-30T07:38:38Z", "closed_at": "2020-07-30T07:23:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please make a new release. There have been numerous fixes and improvements since the last release (over 8 months ago).\r\n\r\n## Checklist\r\n\r\n- [X] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [X] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [X] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [X] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [X] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nN/A\r\n\r\n## Expected behavior\r\n\r\nN/A\r\n\r\n## Actual behavior\r\n\r\nN/A", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7428", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7428/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7428/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7428/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7428", "id": 666368552, "node_id": "MDU6SXNzdWU2NjYzNjg1NTI=", "number": 7428, "title": "Why are field attributes removed from serializer object", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-27T15:07:37Z", "updated_at": "2020-08-09T22:46:32Z", "closed_at": "2020-08-06T00:45:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\nIn `_get_declared_fields`, fields are popped from the serializer object attributes:\r\n\r\nhttps://github.com/encode/django-rest-framework/blob/599e2b183db846a632b1efd148e6bc97d926ee5c/rest_framework/serializers.py#L284-L287\r\n\r\nThey are only available from the `_declared_fields` dict.\r\n\r\nThis behaviour was copied in marshmallow and before removing it there, we thought we should ask here for the rationale.\r\n\r\nRelated PR: https://github.com/marshmallow-code/marshmallow/pull/1631\r\n\r\nThe reasons we'd like to change this are\r\n- we don't understand why it was done in the first place\r\n- we see no reason to prevent direct field access as `serializer.field_name`\r\n\r\nI've patched DRF code locally to remove the `pop` and all tests pass.\r\n\r\n```py\r\n    @classmethod\r\n    def _get_declared_fields(cls, bases, attrs):\r\n        fields = [(field_name, attrs[field_name])  # <- here\r\n                  for field_name, obj in list(attrs.items())\r\n                  if isinstance(obj, Field)]\r\n        fields.sort(key=lambda x: x[1]._creation_counter)\r\n```\r\n\r\n\r\n\r\nWhat is the rationale for removing the fields attributes?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7422", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7422/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7422/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7422/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7422", "id": 661867331, "node_id": "MDU6SXNzdWU2NjE4NjczMzE=", "number": 7422, "title": "NotImplementedError with no details", "user": {"login": "crimsonpython24", "id": 56590830, "node_id": "MDQ6VXNlcjU2NTkwODMw", "avatar_url": "https://avatars1.githubusercontent.com/u/56590830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crimsonpython24", "html_url": "https://github.com/crimsonpython24", "followers_url": "https://api.github.com/users/crimsonpython24/followers", "following_url": "https://api.github.com/users/crimsonpython24/following{/other_user}", "gists_url": "https://api.github.com/users/crimsonpython24/gists{/gist_id}", "starred_url": "https://api.github.com/users/crimsonpython24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crimsonpython24/subscriptions", "organizations_url": "https://api.github.com/users/crimsonpython24/orgs", "repos_url": "https://api.github.com/users/crimsonpython24/repos", "events_url": "https://api.github.com/users/crimsonpython24/events{/privacy}", "received_events_url": "https://api.github.com/users/crimsonpython24/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T14:08:05Z", "updated_at": "2020-07-20T14:22:34Z", "closed_at": "2020-07-20T14:22:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nFairly easy to start. Just create a new Django application, register it in the settings.py file, and then this is good to go (I mean run-able). My problem started with these files: `djangorestframework == 3.11.0`\r\n*serializers.py*\r\n```python\r\nfrom rest_framework import serializers\r\n\r\nclass TodoSerializer(serializers.BaseSerializer):\r\n    level_choices = [\r\n        ('important', 'Important'),\r\n        ('normal', 'Normal'),\r\n        ('unimportant', 'Not important')\r\n    ]\r\n    title = serializers.CharField(max_length=150, trim_whitespace=True)\r\n    desc = serializers.CharField(max_length=500, allow_blank=True)\r\n    level = serializers.ChoiceField(choices=level_choices)\r\n    created = serializers.DateTimeField()\r\n```\r\n*urls.py*\r\n```python\r\nfrom django.urls import path, include\r\nfrom rest_framework import routers\r\n\r\nrouter = routers.DefaultRouter()\r\nrouter.register(r'todos', views.TodoViewSet)\r\nurlpatterns = [\r\n    path('api/', include(router.urls)),\r\n]\r\n```\r\n*views*\r\n```python\r\nfrom rest_framework import viewsets\r\nfrom .models import Todo\r\nfrom .serializers import TodoSerializer\r\n\r\nclass TodoViewSet(viewsets.ModelViewSet):\r\n    queryset = Todo.objects.all()\r\n    serializer_class = TodoSerializer\r\n```\r\n*settings.py*\r\n```python\r\nINSTALLED_APPS = [\r\n    'rest_framework',\r\n]\r\n\r\nREST_FRAMEWORK = {\r\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\r\n    'PAGE_SIZE': 10\r\n}\r\n```\r\n## Expected behavior\r\nSomething like this with all the data of the todos, but with the styles and all the things applied.\r\n![image](https://user-images.githubusercontent.com/56590830/87946744-00e3df00-cad5-11ea-9276-efd249d5619d.png)\r\n\r\n\r\n## Actual behavior\r\nNot working.\r\n![image](https://user-images.githubusercontent.com/56590830/87946814-1822cc80-cad5-11ea-945e-ba07976d858b.png)\r\n\r\n```bash\r\nInternal Server Error: /todo/api/todos/\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\django\\core\\handlers\\exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\django\\core\\handlers\\base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\django\\core\\handlers\\base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\django\\views\\decorators\\csrf.py\", line 54, in wrapped_view\r\n    return view_func(*args, **kwargs)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\viewsets.py\", line 114, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\views.py\", line 505, in dispatch\r\n    response = self.handle_exception(exc)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\views.py\", line 465, in handle_exception\r\n    self.raise_uncaught_exception(exc)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\views.py\", line 476, in raise_uncaught_exception\r\n    raise exc\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\views.py\", line 502, in dispatch\r\n    response = handler(request, *args, **kwargs)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\mixins.py\", line 43, in list\r\n    return self.get_paginated_response(serializer.data)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\serializers.py\", line 760, in data\r\n    ret = super().data\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\serializers.py\", line 260, in data\r\n    self._data = self.to_representation(self.instance)\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\serializers.py\", line 677, in to_representation\r\n    return [\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\serializers.py\", line 678, in <listcomp>\r\n    self.child.to_representation(item) for item in iterable\r\n  File \"C:\\Users\\warre\\Desktop\\Github\\StoneFiles2020\\summer\\0717\\venv\\lib\\site-packages\\rest_framework\\serializers.py\", line 161, in to_representation\r\n    raise NotImplementedError('`to_representation()` must be implemented.')\r\nNotImplementedError: `to_representation()` must be implemented.\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7412", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7412/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7412/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7412/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7412", "id": 656596590, "node_id": "MDU6SXNzdWU2NTY1OTY1OTA=", "number": 7412, "title": "Misunderstanding in docs", "user": {"login": "Gr3Kidd3r", "id": 11318202, "node_id": "MDQ6VXNlcjExMzE4MjAy", "avatar_url": "https://avatars3.githubusercontent.com/u/11318202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gr3Kidd3r", "html_url": "https://github.com/Gr3Kidd3r", "followers_url": "https://api.github.com/users/Gr3Kidd3r/followers", "following_url": "https://api.github.com/users/Gr3Kidd3r/following{/other_user}", "gists_url": "https://api.github.com/users/Gr3Kidd3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gr3Kidd3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gr3Kidd3r/subscriptions", "organizations_url": "https://api.github.com/users/Gr3Kidd3r/orgs", "repos_url": "https://api.github.com/users/Gr3Kidd3r/repos", "events_url": "https://api.github.com/users/Gr3Kidd3r/events{/privacy}", "received_events_url": "https://api.github.com/users/Gr3Kidd3r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-14T13:04:45Z", "updated_at": "2020-08-06T14:39:44Z", "closed_at": "2020-08-05T22:33:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[Serializers documentation](https://www.django-rest-framework.org/api-guide/serializers/#serializer_field_mapping):\r\n\r\n> A mapping of **Django model classes** to REST framework serializer classes. You can override this mapping to alter the default serializer classes that should be used for each model class.\r\n\r\nI think it should be replaced with: **Django model fields** as it's mapping model fields to serializer fields.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7410", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7410/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7410/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7410/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7410", "id": 655475425, "node_id": "MDU6SXNzdWU2NTU0NzU0MjU=", "number": 7410, "title": "Multi Tenancy Support", "user": {"login": "lakshaytalkstocomputer", "id": 38259381, "node_id": "MDQ6VXNlcjM4MjU5Mzgx", "avatar_url": "https://avatars0.githubusercontent.com/u/38259381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lakshaytalkstocomputer", "html_url": "https://github.com/lakshaytalkstocomputer", "followers_url": "https://api.github.com/users/lakshaytalkstocomputer/followers", "following_url": "https://api.github.com/users/lakshaytalkstocomputer/following{/other_user}", "gists_url": "https://api.github.com/users/lakshaytalkstocomputer/gists{/gist_id}", "starred_url": "https://api.github.com/users/lakshaytalkstocomputer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lakshaytalkstocomputer/subscriptions", "organizations_url": "https://api.github.com/users/lakshaytalkstocomputer/orgs", "repos_url": "https://api.github.com/users/lakshaytalkstocomputer/repos", "events_url": "https://api.github.com/users/lakshaytalkstocomputer/events{/privacy}", "received_events_url": "https://api.github.com/users/lakshaytalkstocomputer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-12T20:59:07Z", "updated_at": "2020-07-13T08:27:16Z", "closed_at": "2020-07-13T08:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n- [ ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n## Expected behavior\r\n How to incorporate multi site usage for single django project. I know Djnago has support for Multi Site by using multi site framework. But How would I use that to create apis in DRF?\r\n\r\n\r\n\r\n## Actual behavior\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7408", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7408/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7408/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7408/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7408", "id": 655270081, "node_id": "MDU6SXNzdWU2NTUyNzAwODE=", "number": 7408, "title": "DEFAULT_PERMISSION_CLASSES: problem with logical operations", "user": {"login": "aminst", "id": 12907963, "node_id": "MDQ6VXNlcjEyOTA3OTYz", "avatar_url": "https://avatars3.githubusercontent.com/u/12907963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aminst", "html_url": "https://github.com/aminst", "followers_url": "https://api.github.com/users/aminst/followers", "following_url": "https://api.github.com/users/aminst/following{/other_user}", "gists_url": "https://api.github.com/users/aminst/gists{/gist_id}", "starred_url": "https://api.github.com/users/aminst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aminst/subscriptions", "organizations_url": "https://api.github.com/users/aminst/orgs", "repos_url": "https://api.github.com/users/aminst/repos", "events_url": "https://api.github.com/users/aminst/events{/privacy}", "received_events_url": "https://api.github.com/users/aminst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-11T20:00:34Z", "updated_at": "2020-07-14T03:01:37Z", "closed_at": "2020-07-13T19:21:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [x] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\nThere is a great feature for logical operations(and, or, not) on permissions,\r\nbut the problem is, it doesn't work for the \"DEFAULT_PERMISSION_CLASSES\" in settings\r\nbecause of the string representation of imports\r\n```\r\nREST_FRAMEWORK = {\r\n    \"DEFAULT_PERMISSION_CLASSES\": [\r\n        \"my_permissions.CustomPermission\",\r\n        \"rest_framework.permissions.IsAuthenticated\",\r\n    ],\r\n}\r\n```\r\nwhat i am trying to do is something like this(same as permission_classes):\r\n```\r\nREST_FRAMEWORK = {\r\n    \"DEFAULT_PERMISSION_CLASSES\": [\r\n        \"my_permissions.CustomPermission\" | \"rest_framework.permissions.IsAuthenticated\"\r\n    ],\r\n}\r\n```\r\nis there a way to accomplish this so that one doesn't need to add them to every view?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7407", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7407/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7407/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7407/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7407", "id": 655195323, "node_id": "MDU6SXNzdWU2NTUxOTUzMjM=", "number": 7407, "title": "Entire test suite fails with Django 3.1b1 on Windows", "user": {"login": "smithdc1", "id": 39445562, "node_id": "MDQ6VXNlcjM5NDQ1NTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/39445562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smithdc1", "html_url": "https://github.com/smithdc1", "followers_url": "https://api.github.com/users/smithdc1/followers", "following_url": "https://api.github.com/users/smithdc1/following{/other_user}", "gists_url": "https://api.github.com/users/smithdc1/gists{/gist_id}", "starred_url": "https://api.github.com/users/smithdc1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smithdc1/subscriptions", "organizations_url": "https://api.github.com/users/smithdc1/orgs", "repos_url": "https://api.github.com/users/smithdc1/repos", "events_url": "https://api.github.com/users/smithdc1/events{/privacy}", "received_events_url": "https://api.github.com/users/smithdc1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-11T11:55:16Z", "updated_at": "2020-07-12T09:08:41Z", "closed_at": "2020-07-12T09:08:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When trying to look at the `url()` deprecation I installed Django 3.1b1. Every test fails with this version of Django.\r\n\r\nNot sure if this should be raised here or as a ticket for Django. @carltongibson ?\r\n\r\nI'm using Python 3.8.3 (latest release)\r\n\r\n```\r\nPython 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:37:02) [MSC v.1924 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>>\r\n```\r\n\r\n```\r\n\r\n_________________________ ERROR at setup of TestSlugRelatedField.test_overriding_get_queryset _________________________\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\utils.py:82: in _execute\r\n    return self.cursor.execute(sql)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:413: in execute\r\n    return Database.Cursor.execute(self, query)\r\nE   sqlite3.OperationalError: no such function: JSON_VALID\r\n\r\nThe above exception was the direct cause of the following exception:\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\pytest_django\\plugin.py:534: in _django_setup_unittest\r\n    request.getfixturevalue(\"django_db_setup\")\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\pytest_django\\fixtures.py:105: in django_db_setup\r\n    db_cfg = setup_databases(\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\test\\utils.py:170: in setup_databases\r\n    connection.creation.create_test_db(\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\base\\creation.py:65: in create_test_db\r\n    call_command(\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\core\\management\\__init__.py:168: in call_command\r\n    return command.execute(*args, **defaults)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\core\\management\\base.py:371: in execute\r\n    output = self.handle(*args, **options)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\core\\management\\base.py:85: in wrapped\r\n    res = handle_func(*args, **kwargs)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\core\\management\\commands\\migrate.py:214: in handle\r\n    self.sync_apps(connection, executor.loader.unmigrated_apps)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\core\\management\\commands\\migrate.py:348: in sync_apps\r\n    editor.create_model(model)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\base\\schema.py:324: in create_model\r\n    self.execute(sql, params or None)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\base\\schema.py:142: in execute\r\n    cursor.execute(sql, params)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\utils.py:66: in execute\r\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\utils.py:75: in _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\utils.py:84: in _execute\r\n    return self.cursor.execute(sql, params)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\utils.py:90: in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\utils.py:82: in _execute\r\n    return self.cursor.execute(sql)\r\n..\\venv\\django-rest-framework\\lib\\site-packages\\django\\db\\backends\\sqlite3\\base.py:413: in execute\r\n    return Database.Cursor.execute(self, query)\r\nE   django.db.utils.OperationalError: no such function: JSON_VALID\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7404", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7404/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7404/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7404/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7404", "id": 654407247, "node_id": "MDU6SXNzdWU2NTQ0MDcyNDc=", "number": 7404, "title": "TypeError: cannot unpack non-iterable User object", "user": {"login": "Ishma59", "id": 21207331, "node_id": "MDQ6VXNlcjIxMjA3MzMx", "avatar_url": "https://avatars0.githubusercontent.com/u/21207331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ishma59", "html_url": "https://github.com/Ishma59", "followers_url": "https://api.github.com/users/Ishma59/followers", "following_url": "https://api.github.com/users/Ishma59/following{/other_user}", "gists_url": "https://api.github.com/users/Ishma59/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ishma59/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ishma59/subscriptions", "organizations_url": "https://api.github.com/users/Ishma59/orgs", "repos_url": "https://api.github.com/users/Ishma59/repos", "events_url": "https://api.github.com/users/Ishma59/events{/privacy}", "received_events_url": "https://api.github.com/users/Ishma59/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-09T23:25:28Z", "updated_at": "2020-07-09T23:49:26Z", "closed_at": "2020-07-09T23:49:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "## ERROR\r\nTraceback (most recent call last):\r\n  File \"/root/Fin/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/root/Fin/lib/python3.8/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/root/Fin/lib/python3.8/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/root/Fin/lib/python3.8/site-packages/django/views/decorators/csrf.py\", line 54, in wrapped_view\r\n    return view_func(*args, **kwargs)\r\n  File \"/root/Fin/lib/python3.8/site-packages/django/views/generic/base.py\", line 71, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/root/Fin/lib/python3.8/site-packages/rest_framework/views.py\", line 505, in dispatch\r\n    response = self.handle_exception(exc)\r\n  File \"/root/Fin/lib/python3.8/site-packages/rest_framework/views.py\", line 465, in handle_exception\r\n    self.raise_uncaught_exception(exc)\r\n  File \"/root/Fin/lib/python3.8/site-packages/rest_framework/views.py\", line 476, in raise_uncaught_exception\r\n    raise exc\r\n  File \"/root/Fin/lib/python3.8/site-packages/rest_framework/views.py\", line 493, in dispatch\r\n    self.initial(request, *args, **kwargs)\r\n  File \"/root/Fin/lib/python3.8/site-packages/rest_framework/views.py\", line 410, in initial\r\n    self.perform_authentication(request)\r\n  File \"/root/Fin/lib/python3.8/site-packages/rest_framework/views.py\", line 324, in perform_authentication\r\n    request.user\r\n  File \"/root/Fin/lib/python3.8/site-packages/rest_framework/request.py\", line 220, in user\r\n    self._authenticate()\r\n  File \"/root/Fin/lib/python3.8/site-packages/rest_framework/request.py\", line 380, in _authenticate\r\n    self.user, self.auth = user_auth_tuple\r\nTypeError: cannot unpack non-iterable User object\r\n\r\n## How it occurs\r\nAll requests where `self.request.user` is checked. This environment uses:\r\n`1:python 3.8.3`\r\n`2:django 3.0.5`\r\n`3:djangorestframework  3.11.0`\r\n\r\n## works fine with\r\n`1:python 3.5`\r\n`2:django 2.1.5`\r\n`3:djangorestframework  3.8.2`\r\n\r\nWhat could be the actual problem? Thanks in advance \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7401", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7401/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7401/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7401/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7401", "id": 653308675, "node_id": "MDU6SXNzdWU2NTMzMDg2NzU=", "number": 7401, "title": "Django 3.0 Support", "user": {"login": "abam87", "id": 45338231, "node_id": "MDQ6VXNlcjQ1MzM4MjMx", "avatar_url": "https://avatars1.githubusercontent.com/u/45338231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abam87", "html_url": "https://github.com/abam87", "followers_url": "https://api.github.com/users/abam87/followers", "following_url": "https://api.github.com/users/abam87/following{/other_user}", "gists_url": "https://api.github.com/users/abam87/gists{/gist_id}", "starred_url": "https://api.github.com/users/abam87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abam87/subscriptions", "organizations_url": "https://api.github.com/users/abam87/orgs", "repos_url": "https://api.github.com/users/abam87/repos", "events_url": "https://api.github.com/users/abam87/events{/privacy}", "received_events_url": "https://api.github.com/users/abam87/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-08T13:42:14Z", "updated_at": "2020-07-08T14:01:05Z", "closed_at": "2020-07-08T14:01:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nHello, \r\n\r\nI tried to install version 3.9.3 with Django 3.0.8 but I get runtime error of\r\n\r\n```\r\nFile \"/usr/local/lib/python3.6/site-packages/rest_framework/authtoken/models.py\", line 6, in <module>\r\nfrom django.utils.encoding import python_2_unicode_compatible\r\nImportError: cannot import name 'python_2_unicode_compatible'\r\n```\r\n\r\nIs there a way of fix it ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7397", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7397/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7397/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7397/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7397", "id": 648578703, "node_id": "MDU6SXNzdWU2NDg1Nzg3MDM=", "number": 7397, "title": "format_suffix_patterns conflict with swagger (issue and feature)", "user": {"login": "ManPython", "id": 25403861, "node_id": "MDQ6VXNlcjI1NDAzODYx", "avatar_url": "https://avatars2.githubusercontent.com/u/25403861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ManPython", "html_url": "https://github.com/ManPython", "followers_url": "https://api.github.com/users/ManPython/followers", "following_url": "https://api.github.com/users/ManPython/following{/other_user}", "gists_url": "https://api.github.com/users/ManPython/gists{/gist_id}", "starred_url": "https://api.github.com/users/ManPython/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ManPython/subscriptions", "organizations_url": "https://api.github.com/users/ManPython/orgs", "repos_url": "https://api.github.com/users/ManPython/repos", "events_url": "https://api.github.com/users/ManPython/events{/privacy}", "received_events_url": "https://api.github.com/users/ManPython/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-01T00:12:03Z", "updated_at": "2020-07-01T08:57:19Z", "closed_at": "2020-07-01T08:57:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "DJ.2.2.6\r\n## Checklist\r\n- [x ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nDjango REST Swagger: deprecated (2019-06-04), so we using **drf-yasg**\r\nhttps://github.com/axnsan12/drf-yasg\r\nThis lib have this implementation ways\r\n```\r\n   url(r'^swagger(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\r\n   url(r'^swagger/$', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\r\n   url(r'^redoc/$', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\r\n```\r\n1st line of url as active giving us errors\r\n```\r\nresolvers.py\", line 185, in _compile\r\n    '\"%s\" is not a valid regular expression: %s' % (regex, e)\r\ndjango.core.exceptions.ImproperlyConfigured: \"^swagger(?P<format>\\.json|\\.yaml)\\.(?P<format>(json|html|xml|csv))/?$\" is not a valid regular\r\nexpression: redefinition of group name 'format' as group 2; was group 1 at position 39\r\n```\r\nIt's related when we have:\r\n`urlpatterns = format_suffix_patterns(urlpatterns, allowed=['json', 'html', 'xml', 'csv'])`\r\n\r\n## Expected behavior\r\nAllow good cooperation betwen DRF and drf-yasg to get output with .json and .yaml together with rest as 'json', 'html', 'xml', 'csv'\r\n\r\n## Actual behavior\r\nNeed turn off the 1st example line of drf-yasg that touching formats json/yaml\r\n\r\nComments: \r\nFormat in Python36 is {}.format to join parts, and format maybe should be as `extension` or `ext`\r\ndrf-yasg not well working in automation of url discovering like old swagger", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7396", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7396/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7396/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7396/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7396", "id": 648571426, "node_id": "MDU6SXNzdWU2NDg1NzE0MjY=", "number": 7396, "title": "authenticate vs has_permission (missunderstanding and not clear functions) and custom api_key/token", "user": {"login": "ManPython", "id": 25403861, "node_id": "MDQ6VXNlcjI1NDAzODYx", "avatar_url": "https://avatars2.githubusercontent.com/u/25403861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ManPython", "html_url": "https://github.com/ManPython", "followers_url": "https://api.github.com/users/ManPython/followers", "following_url": "https://api.github.com/users/ManPython/following{/other_user}", "gists_url": "https://api.github.com/users/ManPython/gists{/gist_id}", "starred_url": "https://api.github.com/users/ManPython/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ManPython/subscriptions", "organizations_url": "https://api.github.com/users/ManPython/orgs", "repos_url": "https://api.github.com/users/ManPython/repos", "events_url": "https://api.github.com/users/ManPython/events{/privacy}", "received_events_url": "https://api.github.com/users/ManPython/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-30T23:50:06Z", "updated_at": "2020-07-01T07:08:05Z", "closed_at": "2020-07-01T07:07:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "DJ 2.2.6\r\nDue to some missunderstanding and not clear functions as `authenticate` vs `has_permission` and regrading this issues:\r\nhttps://github.com/encode/django-rest-framework/issues/355\r\na) https://stackoverflow.com/questions/33560552/django-rest-framework-authentication-require-key-parameter-in-url\r\nb) https://stackoverflow.com/questions/29433416/token-in-query-string-with-django-rest-frameworks-tokenauthentication\r\n.. I made some \"research\" (including google group) how devs doing solution for `?api_key=` that can be features or way to change something in DRF\r\n\r\n1. There is conflict when `?api_key=` as short `TOKEN` is sugested as `JWT` with long string/hashes even short is more friendly\r\n2. Users want `TOKEN`, soo.. devs doing clasess, eg.\r\na) as in link a) and they using `has_permission` - that is not the same like `authenticate`\r\nb) as in link b) and they using `authenticate` - that is not the same like `has_permission`\r\n3. In both of a), b) they using `?api_key=` in `request`\r\n\r\n- bellow both 4,5 points with `has_permission` function\r\n4. Next devs adding in `'DEFAULT_PERMISSION_CLASSES': ( 'api.utils.permissions.OnlyAPIPermission',` \r\n- this made that in option a) API working if user is logged and `?api_key=` is provided, but when user is not loged then any of `?api_key=` not working for views ( `\"Authentication credentials were not provided.\"`) similar like a bad token/key \r\n- they starting experiments with `permission_classes = (OnlyAPIPermission,)` and `@permission_classes((OnlyAPIPermission, ))` that not working\r\n5. Due this like in point 4. after analysis the situation they changig settings for `'DEFAULT_AUTHENTICATION_CLASSES':  ( 'api.utils.permissions.OnlyAPIPermission',` - as experiment (premission, now authentication needed), and not workig\r\n6. Again..following point 5. after.. they change  `has_permission` for  `authenticate` in the class, but this not changing nothing (around premission or authenticate) for loged user, but when user is not loged then error:\r\n```\r\nException Type: | TypeError\r\nauthenticate() missing 1 required positional argument: 'view'\r\nPython36\\lib\\site-packages\\rest_framework\\request.py in _authenticate, line 373\r\n```\r\n- ok.. delete `view` that is required in `def has_permission(self, request, view):` to made (`def authenticate(self, request):`) and have access as not loged user, where in fact the `TOKEN` related with user made this user as loged. In case of this, user not only get access to API, eg. for feeding some app client by data, but manage maybe related customer panel or something in realtion to django admin (the range of managment and access is not limited and not offering this way by `authenticate`). \r\n- Hvr.. in case of \"whole access\" is not true, there is not well described or not explained log **Forbidden:** in message that giving `\"detail\": \"Authentication credentials were not provided.\"` in situation where acess should be granted and authenticated, and is near `/api/` in case of `/api/v1` etc working - **need explanation here (why this doing, and when)** and working normaly if not using this whole solution for token/key\r\n\r\n7. Soo.. the conflit is around `authenticate`  and `has_permission`, coz access by `TOKEN` should be like permission for some part of app, eg API, but not as full authentication. It's more like secuirity issue then. This is in case of not only `CustomUser` solution. -\r\n- looks like in DRF can't be `permission ` without `authenticate` in this way for the `TOKEN` must be diffrent\r\n8. Due this conflict devs goint work with https://pypi.org/project/djangorestframework-api-key/ \r\n- this solution require to build new models and tokens called directly `key`, and with option as multiple key per user that is often required\r\n- due of this, devs discovering situation that they reinventing whell as new DRF and TOKEN : )\r\n- in case of nature this `path` for DRF is no sense to \"shadowing\" fork by custom_keys as package but in fact require to copy fork as part project and modify (reinventing for showdowing is no sense)\r\n9. Soo.. due of this all complication in my opinion and way what devs doing want sugest some changes in DRF to solve problems\r\n\r\n- [ ] implement something like \r\n- Token_Permission\r\n- Token_Authentication\r\n- merge option for authenticate and has_permission as similar (point 6)\r\n- clarify the `authenticate_credentials` in return with request on relation to premissions grants, and describe this in docs\r\n- [ ] or implement KEY_ACCESS as in relation to upper TOKEN (as the best way) or Key_Permission / Key_Authentication\r\n- including custom keys with aditional parameteres\r\n- including multiple keys per user as upper\r\n- or in both way in relation to one user PK or more for user rows as cols TOKEN, KEY, JWT\r\n\r\n\r\n\r\n## Steps to reproduce\r\nuse `def authenticate(self, request):` with\r\n\r\n```\r\nclass TokenAuthSupportQueryString(TokenAuthentication):\r\n    \"\"\"\r\n    Extend the TokenAuthentication class to support querystring authentication\r\n    in the form of \"http://www.example.com/?auth_token=<token_key>\"\r\n    \"\"\"\r\n    def authenticate(self, request):\r\n        # Check if 'token_auth' is in the request query params.\r\n        # Give precedence to 'Authorization' header.\r\n        if 'auth_token' in request.QUERY_PARAMS and \\\r\n                        'HTTP_AUTHORIZATION' not in request.META:\r\n            return self.authenticate_credentials(request.QUERY_PARAMS.get('auth_token'))\r\n        else:\r\n            return super(TokenAuthSupportQueryString, self).authenticate(request)\r\n```\r\n- check the range `**Forbidden:**` \r\n## Expected behavior\r\n- not limiting urls paterns by `**Forbidden:** ` \r\n\r\n## Actual behavior\r\n- limiting urls paterns by `**Forbidden:** ` in begin api/ (in this level can be swagger, etc. and exist conflit)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7393", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7393/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7393/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7393/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7393", "id": 647147845, "node_id": "MDU6SXNzdWU2NDcxNDc4NDU=", "number": 7393, "title": "[bug] paginate_queryset should return an empty iterable not None", "user": {"login": "rosscdh", "id": 397106, "node_id": "MDQ6VXNlcjM5NzEwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/397106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rosscdh", "html_url": "https://github.com/rosscdh", "followers_url": "https://api.github.com/users/rosscdh/followers", "following_url": "https://api.github.com/users/rosscdh/following{/other_user}", "gists_url": "https://api.github.com/users/rosscdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rosscdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rosscdh/subscriptions", "organizations_url": "https://api.github.com/users/rosscdh/orgs", "repos_url": "https://api.github.com/users/rosscdh/repos", "events_url": "https://api.github.com/users/rosscdh/events{/privacy}", "received_events_url": "https://api.github.com/users/rosscdh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-29T06:22:19Z", "updated_at": "2020-07-01T15:50:33Z", "closed_at": "2020-07-01T15:50:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n1. call paginate_queryset on a qs that returns no results\r\n2. the paginate queryset returns None and not Queryset.none\r\n\r\n## Expected behavior\r\n\r\n* the paginate_queryset should return an empty iterable so that it can be used pythonically in loops\r\n* an if statement is jarring\r\n\r\n```\r\nfor item in self.paginate_queryset(self.app.batch_set.all()):\r\n   # do stuff, but nothing happens if the qs is empty\r\n```\r\n## Actual behavior\r\n\r\n* if statements\r\n\r\n```\r\n        page_qs = self.paginate_queryset(self.app.batch_set.all())\r\n        if page_qs:\r\n            for rb in page_qs:\r\n```\r\n\r\n\r\nHappy to submit a PR if this is an issue", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7392", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7392/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7392/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7392/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7392", "id": 647022168, "node_id": "MDU6SXNzdWU2NDcwMjIxNjg=", "number": 7392, "title": "{\"detail\":\"Authentication credentials were not provided.\"} - format=json", "user": {"login": "ManPython", "id": 25403861, "node_id": "MDQ6VXNlcjI1NDAzODYx", "avatar_url": "https://avatars2.githubusercontent.com/u/25403861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ManPython", "html_url": "https://github.com/ManPython", "followers_url": "https://api.github.com/users/ManPython/followers", "following_url": "https://api.github.com/users/ManPython/following{/other_user}", "gists_url": "https://api.github.com/users/ManPython/gists{/gist_id}", "starred_url": "https://api.github.com/users/ManPython/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ManPython/subscriptions", "organizations_url": "https://api.github.com/users/ManPython/orgs", "repos_url": "https://api.github.com/users/ManPython/repos", "events_url": "https://api.github.com/users/ManPython/events{/privacy}", "received_events_url": "https://api.github.com/users/ManPython/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-28T22:51:14Z", "updated_at": "2020-07-07T14:34:33Z", "closed_at": "2020-07-07T13:30:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x ] I have reduced the issue to the simplest possible case.\r\n- [x] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n1. Ger some data as ?format=json (there are visible in browser) and save as .json (eg. FF) file - are 2 option:\r\n- by browser save as \r\n- by json plugin when we see data (exit aditional btn for this under url input field, etc.)\r\n\r\n## Expected behavior\r\n1. Save file with data\r\nhttps://stackoverflow.com/questions/26906630/django-rest-framework-authentication-credentials-were-not-provided\r\n## Actual behavior\r\n1. Saved file have just only this data, not this same as I see normaly by ?format=api (I'm logged)\r\n```\r\n{\"detail\":\"Authentication credentials were not provided.\"}\r\n```\r\nThere are some issues around uwsgi WSGIPassAuthorization . But I'm using uWSGI2\r\nThe ?format=xml and ?format=csv working ok.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7390", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7390/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7390/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7390/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7390", "id": 646772399, "node_id": "MDU6SXNzdWU2NDY3NzIzOTk=", "number": 7390, "title": "Overriding retrieve with different serializer tries to user class serializer on response", "user": {"login": "lianulloa", "id": 29025113, "node_id": "MDQ6VXNlcjI5MDI1MTEz", "avatar_url": "https://avatars1.githubusercontent.com/u/29025113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lianulloa", "html_url": "https://github.com/lianulloa", "followers_url": "https://api.github.com/users/lianulloa/followers", "following_url": "https://api.github.com/users/lianulloa/following{/other_user}", "gists_url": "https://api.github.com/users/lianulloa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lianulloa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lianulloa/subscriptions", "organizations_url": "https://api.github.com/users/lianulloa/orgs", "repos_url": "https://api.github.com/users/lianulloa/repos", "events_url": "https://api.github.com/users/lianulloa/events{/privacy}", "received_events_url": "https://api.github.com/users/lianulloa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-27T21:46:17Z", "updated_at": "2020-07-07T12:48:50Z", "closed_at": "2020-07-07T12:48:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [x] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n```python\r\nclass CustomUserViewSet(viewsets.ModelViewSet):\r\n  queryset = CustomUser.objects.all()\r\n  serializer_class = CustomUserSerializer\r\n\r\n  def retrieve(self, request, pk=None):\r\n    try:\r\n      user = CustomUser.objects.get(pk=pk)\r\n    except CustomUser.DoesNotExist:\r\n      user = get_object_or_404(User, pk=pk)\r\n      user_serializer = UserSerializer(instance=user)\r\n      response = Response(user_serializer.data, status=status.HTTP_200_OK)\r\n      return response\r\n\r\n    serializer = CustomUserSerializer(user)\r\n    return Response(serializer.data, status=status.HTTP_200_OK)\r\n\r\n```\r\n## Expected behavior\r\nresponse OK\r\n## Actual behavior\r\nWhen it goes through the `except` way, it throws this error:\r\n\r\nGot AttributeError when attempting to get a value for field `user` on serializer `CustomUserSerializer`.\r\nThe serializer field might be named incorrectly and not match any attribute or key on the `User` instance.\r\nOriginal exception text was: 'User' object has no attribute 'user'.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7388", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7388/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7388/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7388/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7388", "id": 643092969, "node_id": "MDU6SXNzdWU2NDMwOTI5Njk=", "number": 7388, "title": "GitHub's Latest Release", "user": {"login": "ganiserb", "id": 3132593, "node_id": "MDQ6VXNlcjMxMzI1OTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3132593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ganiserb", "html_url": "https://github.com/ganiserb", "followers_url": "https://api.github.com/users/ganiserb/followers", "following_url": "https://api.github.com/users/ganiserb/following{/other_user}", "gists_url": "https://api.github.com/users/ganiserb/gists{/gist_id}", "starred_url": "https://api.github.com/users/ganiserb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ganiserb/subscriptions", "organizations_url": "https://api.github.com/users/ganiserb/orgs", "repos_url": "https://api.github.com/users/ganiserb/repos", "events_url": "https://api.github.com/users/ganiserb/events{/privacy}", "received_events_url": "https://api.github.com/users/ganiserb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-22T13:55:24Z", "updated_at": "2020-06-22T13:56:26Z", "closed_at": "2020-06-22T13:56:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n## Expected behavior\r\n\r\n## Actual behavior\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7386", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7386/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7386/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7386/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7386", "id": 642743015, "node_id": "MDU6SXNzdWU2NDI3NDMwMTU=", "number": 7386, "title": "TypeError while Importing Token from rest_framework.authtoken.models", "user": {"login": "hash3liZer", "id": 29171692, "node_id": "MDQ6VXNlcjI5MTcxNjky", "avatar_url": "https://avatars1.githubusercontent.com/u/29171692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hash3liZer", "html_url": "https://github.com/hash3liZer", "followers_url": "https://api.github.com/users/hash3liZer/followers", "following_url": "https://api.github.com/users/hash3liZer/following{/other_user}", "gists_url": "https://api.github.com/users/hash3liZer/gists{/gist_id}", "starred_url": "https://api.github.com/users/hash3liZer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hash3liZer/subscriptions", "organizations_url": "https://api.github.com/users/hash3liZer/orgs", "repos_url": "https://api.github.com/users/hash3liZer/repos", "events_url": "https://api.github.com/users/hash3liZer/events{/privacy}", "received_events_url": "https://api.github.com/users/hash3liZer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-22T04:32:30Z", "updated_at": "2020-06-23T07:01:03Z", "closed_at": "2020-06-22T09:18:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been trying to import `Token` fom `rest_framework.authtokens.models` to create new Tokens from the user. But it throws back following Type Error: \r\n```\r\nfrom rest_framework.authtoken.models import Token\r\n```\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n/usr/lib/python3.8/codeop.py in __call__(self, source, filename, symbol)\r\n    134 \r\n    135     def __call__(self, source, fiename, symbol):\r\n--> 136         codeob = compile(source, filename, symbol, self.flags, 1)\r\n    137         for feature in _features:\r\n    138             if codeob.co_flags & feature.compiler_flag:\r\n\r\nTypeError: required field \"type_ignores\" missing from Module\r\n\r\n```\r\n**Steps to Recreate::**\r\n```\r\n$ python3 manage.py shell\r\n$ from rest_framework.authtoken.models import Token\r\n```\r\n\r\n**Note::**\r\nInstalled Apps Settings includes the following: \r\n```\r\nINSTALLED_APPS = [\r\n    # Third Party\r\n    'rest_framework',\r\n    'rest_framework.authtoken',\r\n]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7384", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7384/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7384/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7384/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7384", "id": 642649795, "node_id": "MDU6SXNzdWU2NDI2NDk3OTU=", "number": 7384, "title": "Implement ModelSerializer.__class_getitem__", "user": {"login": "antonagestam", "id": 218551, "node_id": "MDQ6VXNlcjIxODU1MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/218551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonagestam", "html_url": "https://github.com/antonagestam", "followers_url": "https://api.github.com/users/antonagestam/followers", "following_url": "https://api.github.com/users/antonagestam/following{/other_user}", "gists_url": "https://api.github.com/users/antonagestam/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonagestam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonagestam/subscriptions", "organizations_url": "https://api.github.com/users/antonagestam/orgs", "repos_url": "https://api.github.com/users/antonagestam/repos", "events_url": "https://api.github.com/users/antonagestam/events{/privacy}", "received_events_url": "https://api.github.com/users/antonagestam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-21T22:06:45Z", "updated_at": "2020-07-07T09:05:37Z", "closed_at": "2020-07-07T09:05:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "To allow type checking efforts to properly type the methods of `ModelSerializer` it needs to be made generic with regards to the model it serializes. Since django-rest-framework has chosen to not own any annotations themselves the only way to achieve that will be to implement `__class_getitem__`. Stub implementors can then make the class generic and calling `ModelSerializer[Author]` will not yield subscriptability errors at runtime.\r\n\r\nNote that this is the unfortunate direction [Django has chosen as well](https://github.com/django/django/commit/578c03b276e435bcd3ce9eb17b81e85135c2d3f3).\r\n\r\n[This is the relevant issue in djangorestframework-stubs](https://github.com/typeddjango/djangorestframework-stubs/issues/71) for reference.\r\n\r\n[This is the relevant Python docs on generic classes.](https://docs.python.org/3/library/typing.html#user-defined-generic-types)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7383", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7383/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7383/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7383/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7383", "id": 642469745, "node_id": "MDU6SXNzdWU2NDI0Njk3NDU=", "number": 7383, "title": "3.11.0 create() also saves model", "user": {"login": "cederom", "id": 3051832, "node_id": "MDQ6VXNlcjMwNTE4MzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3051832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cederom", "html_url": "https://github.com/cederom", "followers_url": "https://api.github.com/users/cederom/followers", "following_url": "https://api.github.com/users/cederom/following{/other_user}", "gists_url": "https://api.github.com/users/cederom/gists{/gist_id}", "starred_url": "https://api.github.com/users/cederom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cederom/subscriptions", "organizations_url": "https://api.github.com/users/cederom/orgs", "repos_url": "https://api.github.com/users/cederom/repos", "events_url": "https://api.github.com/users/cederom/events{/privacy}", "received_events_url": "https://api.github.com/users/cederom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-21T00:30:40Z", "updated_at": "2020-06-22T12:59:08Z", "closed_at": "2020-06-22T09:50:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [X] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [X] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [X] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [X] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [X] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nWorking on `3.11.0` installed with `pip` on `python-3.6.9` `FreeBSD 12.1-RELEASE`.\r\n\r\n1. Create a ModelSerialzer baser serializer.\r\n2. On view where POST is handled call `create()`.\r\n3. Call `clean()` on created `instance` in order to verify logical data coherence for that object which is not possible here to achieve by simple field validators.\r\n4. Handle possible `clean()` exceptions.\r\n5. If all goes fine call `save()` to save the valid object into database.\r\n6. Observe that even though `save()` is not called at all each `create()` creates and saves unverified object to database before even `clean()` is called.\r\n\r\n## Expected behavior\r\n\r\nCalling `create()` does not save object to the database.\r\n\r\n## Actual behavior\r\n\r\nCalling `create()` also stores object to the database which is not intended behavior and does not obvious from the sources.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7376", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7376/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7376/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7376/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7376", "id": 637386361, "node_id": "MDU6SXNzdWU2MzczODYzNjE=", "number": 7376, "title": "BaseAuthentication should be an Abstract Base Class", "user": {"login": "mentix02", "id": 21104228, "node_id": "MDQ6VXNlcjIxMTA0MjI4", "avatar_url": "https://avatars0.githubusercontent.com/u/21104228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mentix02", "html_url": "https://github.com/mentix02", "followers_url": "https://api.github.com/users/mentix02/followers", "following_url": "https://api.github.com/users/mentix02/following{/other_user}", "gists_url": "https://api.github.com/users/mentix02/gists{/gist_id}", "starred_url": "https://api.github.com/users/mentix02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mentix02/subscriptions", "organizations_url": "https://api.github.com/users/mentix02/orgs", "repos_url": "https://api.github.com/users/mentix02/repos", "events_url": "https://api.github.com/users/mentix02/events{/privacy}", "received_events_url": "https://api.github.com/users/mentix02/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-11T23:44:18Z", "updated_at": "2020-06-15T22:15:17Z", "closed_at": "2020-06-15T08:48:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "In [`rest_framework/authentication.py`](https://github.com/encode/django-rest-framework/blob/master/rest_framework/authentication.py), the docstring for `BaseAuthentication` reads that \"*ALL* authentication classes should extend `BaseAuthentication`\" and the `authenticate` method even raises a `NotImplementedError` stating that it should be overridden. \r\n\r\nSeems to be the perfect use for using the [ABC](https://docs.python.org/3/library/abc.html#abc.ABC) class from the standard library. Is there any particular reason why this wasn't done so?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7370", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7370/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7370/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7370/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7370", "id": 631723061, "node_id": "MDU6SXNzdWU2MzE3MjMwNjE=", "number": 7370, "title": "HTML doc for Schema not up-to-date with the md file", "user": {"login": "SlowFlo", "id": 10678828, "node_id": "MDQ6VXNlcjEwNjc4ODI4", "avatar_url": "https://avatars1.githubusercontent.com/u/10678828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SlowFlo", "html_url": "https://github.com/SlowFlo", "followers_url": "https://api.github.com/users/SlowFlo/followers", "following_url": "https://api.github.com/users/SlowFlo/following{/other_user}", "gists_url": "https://api.github.com/users/SlowFlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/SlowFlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SlowFlo/subscriptions", "organizations_url": "https://api.github.com/users/SlowFlo/orgs", "repos_url": "https://api.github.com/users/SlowFlo/repos", "events_url": "https://api.github.com/users/SlowFlo/events{/privacy}", "received_events_url": "https://api.github.com/users/SlowFlo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-05T16:15:30Z", "updated_at": "2020-06-08T13:56:35Z", "closed_at": "2020-06-08T13:14:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [X] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [X] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [X] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [X] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [X] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nGo to https://www.django-rest-framework.org/api-guide/schemas/#install-pyyaml\r\n\r\n## Expected behavior\r\n\r\nThe [install-pyyaml](https://www.django-rest-framework.org/api-guide/schemas/#install-pyyaml) section of the Schema Guide should be the same as the [install-dependencies](https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#install-dependencies) section of the .md file.\r\n\r\nEDIT : to clarify, It should say to also install **uritemplate**\r\n\r\n## Actual behavior\r\n\r\nThe Html version is outdated of 4 months (seems to be like before 39dd34f161792146b7d33bf062366f54c2bde3f1).\r\n\r\nHope it helped :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7368", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7368/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7368/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7368/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7368", "id": 630874971, "node_id": "MDU6SXNzdWU2MzA4NzQ5NzE=", "number": 7368, "title": "Error when traversing relation as field source in extra_kwargs", "user": {"login": "alexgmin", "id": 8340441, "node_id": "MDQ6VXNlcjgzNDA0NDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/8340441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexgmin", "html_url": "https://github.com/alexgmin", "followers_url": "https://api.github.com/users/alexgmin/followers", "following_url": "https://api.github.com/users/alexgmin/following{/other_user}", "gists_url": "https://api.github.com/users/alexgmin/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexgmin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexgmin/subscriptions", "organizations_url": "https://api.github.com/users/alexgmin/orgs", "repos_url": "https://api.github.com/users/alexgmin/repos", "events_url": "https://api.github.com/users/alexgmin/events{/privacy}", "received_events_url": "https://api.github.com/users/alexgmin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-04T14:28:14Z", "updated_at": "2020-06-09T10:48:36Z", "closed_at": "2020-06-09T10:48:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [X] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n```python\r\nfrom rest_framework import serializers\r\nfrom django.db import models\r\n\r\nclass Bar(models.Model):\r\n    id = models.IntegerField()\r\n    class Meta:\r\n        app_label = 'test'\r\n        \r\nclass Foo(models.Model):\r\n    bar = models.ForeignKey(\r\n        Bar,\r\n        on_delete=models.PROTECT,\r\n    )\r\n    class Meta:\r\n        app_label = 'test'\r\n    \r\nclass FooSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Foo\r\n        fields = (\r\n            'bar',\r\n        )\r\n        extra_kwargs = {\r\n            'bar': {\r\n                'source': 'bar.id'\r\n            }              \r\n        }\r\nFooSerializer()\r\n```\r\n## Expected behavior\r\nThe serializer is initialized correctly.\r\n## Actual behavior\r\nThe serializer errors with this message:\r\n`django.core.exceptions.ImproperlyConfigured: Field name \\`bar.id\\` is not valid for model \\`Foo\\``\r\n\r\nIf the field is defined explicitly it works.\r\n```python\r\nclass FooSerializer(serializers.ModelSerializer):\r\n    bar = serializers.IntegerField(source='bar.id')\r\n    class Meta:\r\n        model = Foo\r\n        fields = (\r\n            'bar',\r\n        )\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7367", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7367/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7367/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7367/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7367", "id": 629386140, "node_id": "MDU6SXNzdWU2MjkzODYxNDA=", "number": 7367, "title": "link to unstyled API-guide page", "user": {"login": "sm7515", "id": 36653440, "node_id": "MDQ6VXNlcjM2NjUzNDQw", "avatar_url": "https://avatars1.githubusercontent.com/u/36653440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sm7515", "html_url": "https://github.com/sm7515", "followers_url": "https://api.github.com/users/sm7515/followers", "following_url": "https://api.github.com/users/sm7515/following{/other_user}", "gists_url": "https://api.github.com/users/sm7515/gists{/gist_id}", "starred_url": "https://api.github.com/users/sm7515/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sm7515/subscriptions", "organizations_url": "https://api.github.com/users/sm7515/orgs", "repos_url": "https://api.github.com/users/sm7515/repos", "events_url": "https://api.github.com/users/sm7515/events{/privacy}", "received_events_url": "https://api.github.com/users/sm7515/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T17:37:02Z", "updated_at": "2020-06-03T18:02:15Z", "closed_at": "2020-06-03T18:02:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n[On quickstart page](https://www.django-rest-framework.org/tutorial/quickstart/), scroll all the way down to the bottom, and click on **API guide** link.\r\n![image](https://user-images.githubusercontent.com/36653440/83551085-b5418b80-a4bc-11ea-9cfc-226ae028db9b.png)\r\n\r\n## Actual behavior\r\n\r\n[the page](https://www.django-rest-framework.org/tutorial/#api-guide) is pure html, with no styling.\r\n![image](https://user-images.githubusercontent.com/36653440/83551253-f5a10980-a4bc-11ea-8fc6-7c1cc266e92e.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7366", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7366/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7366/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7366/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7366", "id": 629074481, "node_id": "MDU6SXNzdWU2MjkwNzQ0ODE=", "number": 7366, "title": "Wrt. documentation", "user": {"login": "tomchristie", "id": 647359, "node_id": "MDQ6VXNlcjY0NzM1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/647359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomchristie", "html_url": "https://github.com/tomchristie", "followers_url": "https://api.github.com/users/tomchristie/followers", "following_url": "https://api.github.com/users/tomchristie/following{/other_user}", "gists_url": "https://api.github.com/users/tomchristie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomchristie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomchristie/subscriptions", "organizations_url": "https://api.github.com/users/tomchristie/orgs", "repos_url": "https://api.github.com/users/tomchristie/repos", "events_url": "https://api.github.com/users/tomchristie/events{/privacy}", "received_events_url": "https://api.github.com/users/tomchristie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-02T10:05:16Z", "updated_at": "2020-06-02T21:25:19Z", "closed_at": "2020-06-02T21:25:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Our documentation was offline saturday til today, as a personal voice of protest and anger.\r\n\r\nI've now restored it, with some amendments to the homepage.\r\n\r\n<img width=\"1141\" alt=\"Screenshot 2020-06-02 at 10 41 12\" src=\"https://user-images.githubusercontent.com/647359/83505362-98f21e80-a4bd-11ea-92ff-d1a2962e633e.png\">\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7365", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7365/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7365/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7365/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7365", "id": 628834861, "node_id": "MDU6SXNzdWU2Mjg4MzQ4NjE=", "number": 7365, "title": "The world burns but where's the documentation?", "user": {"login": "spascou", "id": 18417345, "node_id": "MDQ6VXNlcjE4NDE3MzQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/18417345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spascou", "html_url": "https://github.com/spascou", "followers_url": "https://api.github.com/users/spascou/followers", "following_url": "https://api.github.com/users/spascou/following{/other_user}", "gists_url": "https://api.github.com/users/spascou/gists{/gist_id}", "starred_url": "https://api.github.com/users/spascou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spascou/subscriptions", "organizations_url": "https://api.github.com/users/spascou/orgs", "repos_url": "https://api.github.com/users/spascou/repos", "events_url": "https://api.github.com/users/spascou/events{/privacy}", "received_events_url": "https://api.github.com/users/spascou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-02T01:37:26Z", "updated_at": "2020-06-02T08:49:27Z", "closed_at": "2020-06-02T04:10:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Our thirst for documentation has no bounds in this burning world !\r\n\r\nA shame that this is the way respect and solidarity tries to manifest itself, by needlessly bothering lots of people. Feels like I'm walking down the street and someone shoves me a signature board about injustice on the other side of the globe in the face; doesn't exactly passes the right message I think.\r\n\r\nAin't gonna change your thoughts, but would've appreciated a better separation of your societal views and the service quality that was previously. At least I'm gratefully using this excellent project for free, but boy really feels bad for your actual sponsors who cannot comfortably read documentation until injustice is no more in this world.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7363", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7363/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7363/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7363/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7363", "id": 628526423, "node_id": "MDU6SXNzdWU2Mjg1MjY0MjM=", "number": 7363, "title": "Suggestion for future site closures", "user": {"login": "josh-stableprice", "id": 46674140, "node_id": "MDQ6VXNlcjQ2Njc0MTQw", "avatar_url": "https://avatars2.githubusercontent.com/u/46674140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh-stableprice", "html_url": "https://github.com/josh-stableprice", "followers_url": "https://api.github.com/users/josh-stableprice/followers", "following_url": "https://api.github.com/users/josh-stableprice/following{/other_user}", "gists_url": "https://api.github.com/users/josh-stableprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh-stableprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh-stableprice/subscriptions", "organizations_url": "https://api.github.com/users/josh-stableprice/orgs", "repos_url": "https://api.github.com/users/josh-stableprice/repos", "events_url": "https://api.github.com/users/josh-stableprice/events{/privacy}", "received_events_url": "https://api.github.com/users/josh-stableprice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-01T15:21:35Z", "updated_at": "2020-06-01T19:29:36Z", "closed_at": "2020-06-01T15:23:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I appreciate your decision to take a stand and do what you believe is correct. I also support you doing so.\r\n\r\nI would ask that in future, you do provide an alternative source for the rendered documentation, maybe behind a click through acknowledgement or something? \r\n\r\nWe had an incident as we deployed a new feature to dev about 20 minutes ago, I needed the documentation and I discovered that you had replaced the site. \r\n\r\nLuckily there was https://imerica.github.io/django-rest-framework/ as a mirror, but that isn't official. I resolved my issue. \r\n\r\nI worry what would have happened if this hadn't shown up until prod, or worse, we didn't have staging environments. \r\n\r\nI worry about the people who may lose their jobs being unable to find what they've done incorrectly in code because of some people a world away being despicable people.\r\n\r\nPlease in future, try to get your point across without the potential to cause actual harm to those who have integrated with your code and have nothing to do with what is going on in America or the racism across the world.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7362", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7362/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7362/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7362/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7362", "id": 628458712, "node_id": "MDU6SXNzdWU2Mjg0NTg3MTI=", "number": 7362, "title": "Broken link on homepage", "user": {"login": "ravangen", "id": 3410466, "node_id": "MDQ6VXNlcjM0MTA0NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3410466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ravangen", "html_url": "https://github.com/ravangen", "followers_url": "https://api.github.com/users/ravangen/followers", "following_url": "https://api.github.com/users/ravangen/following{/other_user}", "gists_url": "https://api.github.com/users/ravangen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ravangen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ravangen/subscriptions", "organizations_url": "https://api.github.com/users/ravangen/orgs", "repos_url": "https://api.github.com/users/ravangen/repos", "events_url": "https://api.github.com/users/ravangen/events{/privacy}", "received_events_url": "https://api.github.com/users/ravangen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-01T13:58:46Z", "updated_at": "2020-06-01T14:05:21Z", "closed_at": "2020-06-01T14:05:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the [framework homepage](https://www.django-rest-framework.org/), the link for `We The Protesters` goes to `https://www.django-rest-framework.org/www.wetheprotesters.org` instead of `https://www.wetheprotesters.org`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7361", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7361/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7361/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7361/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7361", "id": 628334919, "node_id": "MDU6SXNzdWU2MjgzMzQ5MTk=", "number": 7361, "title": "restore documentation site", "user": {"login": "cezio", "id": 116021, "node_id": "MDQ6VXNlcjExNjAyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/116021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cezio", "html_url": "https://github.com/cezio", "followers_url": "https://api.github.com/users/cezio/followers", "following_url": "https://api.github.com/users/cezio/following{/other_user}", "gists_url": "https://api.github.com/users/cezio/gists{/gist_id}", "starred_url": "https://api.github.com/users/cezio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cezio/subscriptions", "organizations_url": "https://api.github.com/users/cezio/orgs", "repos_url": "https://api.github.com/users/cezio/repos", "events_url": "https://api.github.com/users/cezio/events{/privacy}", "received_events_url": "https://api.github.com/users/cezio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-01T10:39:30Z", "updated_at": "2020-06-01T10:41:15Z", "closed_at": "2020-06-01T10:41:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "The main project and documentation site is not functioning properly https://www.django-rest-framework.org/\r\n\r\nInstead of usual content it displays fixed text. \r\n\r\nWhile I understand @tomchristie feelings behind this, I regard this act as a completely unprofessional and selfish decision. This affects people who rely and depend on this project, and will result in conflicts and misunderstandings that could be avoided otherwise. If you need to express your feelings, do this in your private space. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7359", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7359/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7359/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7359/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7359", "id": 628009804, "node_id": "MDU6SXNzdWU2MjgwMDk4MDQ=", "number": 7359, "title": "django-rest-framework.org not available ?", "user": {"login": "mhsharifi96", "id": 19513852, "node_id": "MDQ6VXNlcjE5NTEzODUy", "avatar_url": "https://avatars2.githubusercontent.com/u/19513852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhsharifi96", "html_url": "https://github.com/mhsharifi96", "followers_url": "https://api.github.com/users/mhsharifi96/followers", "following_url": "https://api.github.com/users/mhsharifi96/following{/other_user}", "gists_url": "https://api.github.com/users/mhsharifi96/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhsharifi96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhsharifi96/subscriptions", "organizations_url": "https://api.github.com/users/mhsharifi96/orgs", "repos_url": "https://api.github.com/users/mhsharifi96/repos", "events_url": "https://api.github.com/users/mhsharifi96/events{/privacy}", "received_events_url": "https://api.github.com/users/mhsharifi96/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-31T17:46:03Z", "updated_at": "2020-05-31T17:57:45Z", "closed_at": "2020-05-31T17:57:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why the site is not available :/?\r\n\r\n```George Floyd\r\nNatosha McDade, Yassin Mohamed, Finan H. Berhe, Se...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7358", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7358/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7358/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7358/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7358", "id": 627929763, "node_id": "MDU6SXNzdWU2Mjc5Mjk3NjM=", "number": 7358, "title": "Please make the docs usable again", "user": {"login": "WoLpH", "id": 270571, "node_id": "MDQ6VXNlcjI3MDU3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/270571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WoLpH", "html_url": "https://github.com/WoLpH", "followers_url": "https://api.github.com/users/WoLpH/followers", "following_url": "https://api.github.com/users/WoLpH/following{/other_user}", "gists_url": "https://api.github.com/users/WoLpH/gists{/gist_id}", "starred_url": "https://api.github.com/users/WoLpH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WoLpH/subscriptions", "organizations_url": "https://api.github.com/users/WoLpH/orgs", "repos_url": "https://api.github.com/users/WoLpH/repos", "events_url": "https://api.github.com/users/WoLpH/events{/privacy}", "received_events_url": "https://api.github.com/users/WoLpH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-31T09:50:58Z", "updated_at": "2020-06-01T08:02:06Z", "closed_at": "2020-05-31T10:10:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I noticed the website is currently down due to the issue with George Floyd. While I have full sympathy for the current issues in the US, disabling the site entirely is a bit much which could also kill the google search ranking.\r\n\r\nWould an overlay or a banner perhaps be a useful alternative?\r\n\r\nAdditionally, the vast majority of the world (myself included) doesn't live in the US so a little bit of context would be useful. A list of names alone is confusing to say the least if you don't know the context.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7357", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7357/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7357/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7357/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7357", "id": 627915248, "node_id": "MDU6SXNzdWU2Mjc5MTUyNDg=", "number": 7357, "title": "main site is inaccessible ", "user": {"login": "24hours", "id": 650407, "node_id": "MDQ6VXNlcjY1MDQwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/650407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/24hours", "html_url": "https://github.com/24hours", "followers_url": "https://api.github.com/users/24hours/followers", "following_url": "https://api.github.com/users/24hours/following{/other_user}", "gists_url": "https://api.github.com/users/24hours/gists{/gist_id}", "starred_url": "https://api.github.com/users/24hours/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/24hours/subscriptions", "organizations_url": "https://api.github.com/users/24hours/orgs", "repos_url": "https://api.github.com/users/24hours/repos", "events_url": "https://api.github.com/users/24hours/events{/privacy}", "received_events_url": "https://api.github.com/users/24hours/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-31T08:06:11Z", "updated_at": "2020-05-31T09:06:04Z", "closed_at": "2020-05-31T09:05:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7356", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7356/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7356/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7356/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7356", "id": 627909906, "node_id": "MDU6SXNzdWU2Mjc5MDk5MDY=", "number": 7356, "title": "The URL cannot be accessed", "user": {"login": "doubledna", "id": 23234380, "node_id": "MDQ6VXNlcjIzMjM0Mzgw", "avatar_url": "https://avatars0.githubusercontent.com/u/23234380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doubledna", "html_url": "https://github.com/doubledna", "followers_url": "https://api.github.com/users/doubledna/followers", "following_url": "https://api.github.com/users/doubledna/following{/other_user}", "gists_url": "https://api.github.com/users/doubledna/gists{/gist_id}", "starred_url": "https://api.github.com/users/doubledna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doubledna/subscriptions", "organizations_url": "https://api.github.com/users/doubledna/orgs", "repos_url": "https://api.github.com/users/doubledna/repos", "events_url": "https://api.github.com/users/doubledna/events{/privacy}", "received_events_url": "https://api.github.com/users/doubledna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-31T07:23:03Z", "updated_at": "2020-05-31T07:50:29Z", "closed_at": "2020-05-31T07:50:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "The URL: \"https://www.django-rest-framework.org/\" cannot be accessed \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7355", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7355/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7355/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7355/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7355", "id": 627772316, "node_id": "MDU6SXNzdWU2Mjc3NzIzMTY=", "number": 7355, "title": "Website is hacked!", "user": {"login": "mabuelhagag", "id": 2604865, "node_id": "MDQ6VXNlcjI2MDQ4NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2604865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mabuelhagag", "html_url": "https://github.com/mabuelhagag", "followers_url": "https://api.github.com/users/mabuelhagag/followers", "following_url": "https://api.github.com/users/mabuelhagag/following{/other_user}", "gists_url": "https://api.github.com/users/mabuelhagag/gists{/gist_id}", "starred_url": "https://api.github.com/users/mabuelhagag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mabuelhagag/subscriptions", "organizations_url": "https://api.github.com/users/mabuelhagag/orgs", "repos_url": "https://api.github.com/users/mabuelhagag/repos", "events_url": "https://api.github.com/users/mabuelhagag/events{/privacy}", "received_events_url": "https://api.github.com/users/mabuelhagag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-30T16:49:05Z", "updated_at": "2020-05-30T18:27:23Z", "closed_at": "2020-05-30T17:36:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "The website is hacked. Anyone have any idea when it will be back or were to access documentation temporarily?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7350", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7350/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7350/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7350/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7350", "id": 625506377, "node_id": "MDU6SXNzdWU2MjU1MDYzNzc=", "number": 7350, "title": "Docs are based on master and not latest released version", "user": {"login": "krukas", "id": 1893361, "node_id": "MDQ6VXNlcjE4OTMzNjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1893361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krukas", "html_url": "https://github.com/krukas", "followers_url": "https://api.github.com/users/krukas/followers", "following_url": "https://api.github.com/users/krukas/following{/other_user}", "gists_url": "https://api.github.com/users/krukas/gists{/gist_id}", "starred_url": "https://api.github.com/users/krukas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krukas/subscriptions", "organizations_url": "https://api.github.com/users/krukas/orgs", "repos_url": "https://api.github.com/users/krukas/repos", "events_url": "https://api.github.com/users/krukas/events{/privacy}", "received_events_url": "https://api.github.com/users/krukas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-27T08:51:41Z", "updated_at": "2020-06-02T10:08:48Z", "closed_at": "2020-06-02T10:08:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [X] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n_Issue was made for latest  release (3.11.0)_\r\n\r\n## Steps to reproduce\r\n\r\nRead the documentation about Schemas and want to use the tags described in the documentation.\r\n\r\n`AutoSchema(tags=['tag1', 'tag2'])`\r\n\r\n## Expected behavior\r\n\r\nFor the described documentation to work. I checked the code if the documentation is not outdated. The documentation is not outdated, but it looks like it uses the latest version from master:\r\n\r\n**Docs**\r\nMaster: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#grouping-operations-with-tags\r\n3.11.0: https://github.com/encode/django-rest-framework/blob/3.11.0/docs/api-guide/schemas.md\r\n\r\n**Code**\r\nMaster: https://github.com/encode/django-rest-framework/blob/master/rest_framework/schemas/openapi.py#L121\r\n3.11.0: https://github.com/encode/django-rest-framework/blob/3.11.0/rest_framework/schemas/openapi.py#L79\r\n\r\n## Actual behavior\r\n\r\nGet error message: `TypeError: __init__() got an unexpected keyword argument 'tags'`\r\n\r\n## Solutions\r\n\r\nBest solution would be to have the ability to switch version of the docs you want to see and default to latest stable release.\r\n\r\nI think the easiest solution is to have `master` only have stable released version and separate branch for `development`. Or create a `stable` branch that has the latest release version and use documentation generation based on `stable` branch.  \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7349", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7349/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7349/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7349/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7349", "id": 624714251, "node_id": "MDU6SXNzdWU2MjQ3MTQyNTE=", "number": 7349, "title": "Count attribute in PageNumberPagination displays no. of relations instead of objects", "user": {"login": "Bel-Shazzar", "id": 38129759, "node_id": "MDQ6VXNlcjM4MTI5NzU5", "avatar_url": "https://avatars2.githubusercontent.com/u/38129759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bel-Shazzar", "html_url": "https://github.com/Bel-Shazzar", "followers_url": "https://api.github.com/users/Bel-Shazzar/followers", "following_url": "https://api.github.com/users/Bel-Shazzar/following{/other_user}", "gists_url": "https://api.github.com/users/Bel-Shazzar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bel-Shazzar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bel-Shazzar/subscriptions", "organizations_url": "https://api.github.com/users/Bel-Shazzar/orgs", "repos_url": "https://api.github.com/users/Bel-Shazzar/repos", "events_url": "https://api.github.com/users/Bel-Shazzar/events{/privacy}", "received_events_url": "https://api.github.com/users/Bel-Shazzar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-26T08:53:45Z", "updated_at": "2020-05-26T09:01:38Z", "closed_at": "2020-05-26T09:01:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n* use rest_framework.pagination.PageNumberPagination\r\n* create Model with m to n relation e.g: ClassA and ClassB\r\n* Create a view for one of the objects inluding the other object e.g.: ClassAView\r\n* add DjangoFilterBackend to view\r\n* Create instance of one Model with several relations to instance of other model\r\n* send get with filter on other object property e.g.: [ClassA-list-view]/?class_b__property=1\r\n\r\n## Expected behavior\r\n\"count\" in response displays number of ClassA instances of \"results\"\r\n## Actual behavior\r\n\"count\" in response displays number of relations of ClassA instances to ClassB instances", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7346", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7346/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7346/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7346/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7346", "id": 622168318, "node_id": "MDU6SXNzdWU2MjIxNjgzMTg=", "number": 7346, "title": "Does order of parsers matter for file uploading?", "user": {"login": "Andrew-Chen-Wang", "id": 60190294, "node_id": "MDQ6VXNlcjYwMTkwMjk0", "avatar_url": "https://avatars0.githubusercontent.com/u/60190294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andrew-Chen-Wang", "html_url": "https://github.com/Andrew-Chen-Wang", "followers_url": "https://api.github.com/users/Andrew-Chen-Wang/followers", "following_url": "https://api.github.com/users/Andrew-Chen-Wang/following{/other_user}", "gists_url": "https://api.github.com/users/Andrew-Chen-Wang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andrew-Chen-Wang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andrew-Chen-Wang/subscriptions", "organizations_url": "https://api.github.com/users/Andrew-Chen-Wang/orgs", "repos_url": "https://api.github.com/users/Andrew-Chen-Wang/repos", "events_url": "https://api.github.com/users/Andrew-Chen-Wang/events{/privacy}", "received_events_url": "https://api.github.com/users/Andrew-Chen-Wang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-21T00:38:16Z", "updated_at": "2020-05-28T01:20:16Z", "closed_at": "2020-05-28T01:20:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nUploading an image with my test case was an absolute nightmare. When testing on an iOS client, I used a `parser_class = (FileUploadParser,)` and it worked just fine. But for the test case, the FileUploadParser CANNOT be first.\r\n\r\nHere is the test case:\r\n```python\r\nclass PictureTestCase(APITestCase):\r\n    def test_upload_picture(self):\r\n        view = views.ServerUploadPicView.as_view()\r\n        arf = APIRequestFactory()\r\n        from pathlib import Path\r\n        from django.core.files.uploadedfile import SimpleUploadedFile\r\n        with (Path().cwd().parent / \"server/public/female.jpg\").open(\"rb\") as fp:\r\n            file = SimpleUploadedFile(\"hi.jpg\", fp.read(), content_type=\"image/jpg\")\r\n            request = arf.post(\r\n                \"/api/v1/profile/picture/\",\r\n                data={\"file\": file},\r\n                format=\"multipart\"\r\n            )\r\n            request.META[\"HTTP_CONTENT_DISPOSITION\"] = \"attachment; filename=hi.jpg\"\r\n            response = view(request)\r\n        assert response.status_code == 200, f\"Response {response.data}\"\r\n```\r\n\r\nView A:\r\n```python\r\nclass ServerUploadPicView(APIView):\r\n    # The default parsers plus the FileUploadParser to represent an uploaded image\r\n    parser_classes = (FileUploadParser, MultiPartParser)\r\n    def post(self, request):\r\n        serializer = ProfilePictureSerializer(data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        return Response()\r\n```\r\n\r\nView B:\r\n```python\r\nclass ServerUploadPicView(APIView):\r\n    # The default parsers plus the FileUploadParser to represent an uploaded image\r\n    parser_classes = (MultiPartParser, FileUploadParser)\r\n    def post(self, request):\r\n        serializer = ProfilePictureSerializer(data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        return Response()\r\n```\r\n\r\nNotice where FileUploadParser is.\r\n\r\n## Expected behavior\r\n\r\nBoth views SHOULD work, unless order of parser classes matter. In fact, the FileUploadParser MUST be the last parser in the tuple. Otherwise, the test will not pass.\r\n\r\n## Actual behavior\r\n\r\nView A will work, but View B will not **during tests**. HOWEVER, **with the iOS client**, View B will work but View A will not. You can check out my repository at https://github.com/Andrew-Chen-Wang/ios-django-picture-upload for the iOS client and the Django server ready-to-go so that you can quickly add that test.\r\n\r\nUnfortunately, when you get the error, you will always only see: \r\n\r\n```{'file': [ErrorDetail(string='Upload a valid image. The file you uploaded was either not an image or a corrupted image.', code='invalid_image')]}```\r\n\r\nAgain, I'm not sure if this is actually what DRF is supposed to do with multiple parser classes... but this has been draining my soul for the last few days... So thank you!\r\n\r\nEdit: Just to clarify, it's simple enough to pass the test and in production mode, like so:\r\n```python\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n        if settings.IN_TEST:\r\n            self.parser_classes = (MultiPartParser,)\r\n        else:\r\n            self.parser_classes = (FileUploadParser,)\r\n```\r\nBut this seems more like a bug to me.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7345", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7345/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7345/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7345/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7345", "id": 622055756, "node_id": "MDU6SXNzdWU2MjIwNTU3NTY=", "number": 7345, "title": "Incorrect Accept header prioritizing with parameters", "user": {"login": "halfstrik", "id": 914920, "node_id": "MDQ6VXNlcjkxNDkyMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/914920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/halfstrik", "html_url": "https://github.com/halfstrik", "followers_url": "https://api.github.com/users/halfstrik/followers", "following_url": "https://api.github.com/users/halfstrik/following{/other_user}", "gists_url": "https://api.github.com/users/halfstrik/gists{/gist_id}", "starred_url": "https://api.github.com/users/halfstrik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/halfstrik/subscriptions", "organizations_url": "https://api.github.com/users/halfstrik/orgs", "repos_url": "https://api.github.com/users/halfstrik/repos", "events_url": "https://api.github.com/users/halfstrik/events{/privacy}", "received_events_url": "https://api.github.com/users/halfstrik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-20T20:14:53Z", "updated_at": "2020-06-18T19:03:48Z", "closed_at": "2020-06-18T19:03:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Description\r\nGoogle Chrome accept headers get prioritized in incorrect order.\r\nHere are headers my Chrome provides and how `order_by_precedence` prioritizes them:\r\n\r\n```\r\n>>> from rest_framework.utils.mediatypes import order_by_precedence\r\n>>> accepts = ['text/html', 'application/xhtml+xml', 'application/xml;q=0.9', 'image/webp', 'image/apng', '*/*;q=0.8', 'application/signed-exchange;v=b3;q=0.9']                                                                                              \r\n>>> order_by_precedence(accepts)\r\n[{'application/signed-exchange;v=b3;q=0.9'}, {'application/xml;q=0.9', 'application/xhtml+xml', 'text/html', 'image/apng', 'image/webp'}, {'*/*;q=0.8'}]\r\n```\r\nThis is happening b.c `order_by_precedence` prioritizes the highest if header has a parameter that is not \"q\".\r\nIn my example, even though `application/signed-exchange;v=b3;q=0.9` has parameter `v=b3` I do not think it should be prioritized at the top (at least since it also has `q=0.9`).\r\nSee https://github.com/encode/django-rest-framework/blob/master/rest_framework/utils/mediatypes.py#L71-L77\r\n\r\nAs a result of this instead of showing HTML page with BrowsableAPI - Chrome downloads a file (uses different Renderer with less priority).\r\n\r\nSame page works fine in all other browsers.\r\n \r\n## Steps to reproduce\r\nExecute code in the example above.\r\n\r\n## Expected behavior\r\nThe first set returned by `order_by_precedence` should be empty leaving 'text/html' to be the most prioritized.\r\n\r\n## Actual behavior\r\nThe first set contains `application/signed-exchange;v=b3;q=0.9` - making it the most prioritized.\r\n\r\n## Suggested solution\r\nIf header has `q` parameter never prioritize it higher than headers without it.\r\nPlease let me know your thoughts, I can come up with a PR later.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7344", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7344/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7344/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7344/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7344", "id": 621354459, "node_id": "MDU6SXNzdWU2MjEzNTQ0NTk=", "number": 7344, "title": "ForeignKey non-nullable raises exception while creating", "user": {"login": "seanfarley", "id": 20887, "node_id": "MDQ6VXNlcjIwODg3", "avatar_url": "https://avatars2.githubusercontent.com/u/20887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanfarley", "html_url": "https://github.com/seanfarley", "followers_url": "https://api.github.com/users/seanfarley/followers", "following_url": "https://api.github.com/users/seanfarley/following{/other_user}", "gists_url": "https://api.github.com/users/seanfarley/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanfarley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanfarley/subscriptions", "organizations_url": "https://api.github.com/users/seanfarley/orgs", "repos_url": "https://api.github.com/users/seanfarley/repos", "events_url": "https://api.github.com/users/seanfarley/events{/privacy}", "received_events_url": "https://api.github.com/users/seanfarley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-19T23:42:05Z", "updated_at": "2020-05-23T03:03:18Z", "closed_at": "2020-05-22T22:50:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is an issue based on #7258; quoted is the original question that has gone unanswered (the provided reply doesn't cover the non-nullable case)\r\n\r\n> This use case is already covered by passing extra arguments to the serialiser's save\r\n\r\nIt's not covered by that at all! \r\nIf the foreignkey isn't nullable then `create` will raise a ValidationError and `perform_create` will never be called.\r\n\r\nLook at the definition of `create`:\r\n\r\n```py\r\n    def create(self, request, *args, **kwargs):\r\n        serializer = self.get_serializer(data=request.data)\r\n        serializer.is_valid(raise_exception=True)  # this fails before we can set extra args\r\n        self.perform_create(serializer)\r\n        headers = self.get_success_headers(serializer.data)\r\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\r\n```\r\n\r\n_Originally posted by @JEphron in https://github.com/encode/django-rest-framework/pull/7258#issuecomment-610058099_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7343", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7343/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7343/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7343/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7343", "id": 621144104, "node_id": "MDU6SXNzdWU2MjExNDQxMDQ=", "number": 7343, "title": "Not showing latest records unless i restart the server", "user": {"login": "Simouche", "id": 34951014, "node_id": "MDQ6VXNlcjM0OTUxMDE0", "avatar_url": "https://avatars0.githubusercontent.com/u/34951014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Simouche", "html_url": "https://github.com/Simouche", "followers_url": "https://api.github.com/users/Simouche/followers", "following_url": "https://api.github.com/users/Simouche/following{/other_user}", "gists_url": "https://api.github.com/users/Simouche/gists{/gist_id}", "starred_url": "https://api.github.com/users/Simouche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Simouche/subscriptions", "organizations_url": "https://api.github.com/users/Simouche/orgs", "repos_url": "https://api.github.com/users/Simouche/repos", "events_url": "https://api.github.com/users/Simouche/events{/privacy}", "received_events_url": "https://api.github.com/users/Simouche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-19T17:05:27Z", "updated_at": "2020-05-22T23:43:43Z", "closed_at": "2020-05-19T17:41:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using django rest framework, to create and retrieve records, but I noticed that when I create a new record and then try to fetch the list of records it doesn't show in the list of records even after 24h, unless I restart the gunicorn server.\r\n\r\nI think it has something to do with caching, but I didn't find anything intresting in the documentation about caching.\r\n\r\nI want to keep the caching as it is good for performance... but I want the new records to show, is there anyway to refresh the cache after a record is added? or anything similar?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7342", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7342/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7342/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7342/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7342", "id": 621076637, "node_id": "MDU6SXNzdWU2MjEwNzY2Mzc=", "number": 7342, "title": "Validate specific field on query_params", "user": {"login": "tuanden0", "id": 23259674, "node_id": "MDQ6VXNlcjIzMjU5Njc0", "avatar_url": "https://avatars1.githubusercontent.com/u/23259674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuanden0", "html_url": "https://github.com/tuanden0", "followers_url": "https://api.github.com/users/tuanden0/followers", "following_url": "https://api.github.com/users/tuanden0/following{/other_user}", "gists_url": "https://api.github.com/users/tuanden0/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuanden0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuanden0/subscriptions", "organizations_url": "https://api.github.com/users/tuanden0/orgs", "repos_url": "https://api.github.com/users/tuanden0/repos", "events_url": "https://api.github.com/users/tuanden0/events{/privacy}", "received_events_url": "https://api.github.com/users/tuanden0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-19T15:31:24Z", "updated_at": "2020-05-21T14:17:53Z", "closed_at": "2020-05-21T14:17:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wonder if I could validate specific field by using method POST something such as: \r\nhttp://myapi/app.?validate_specific_field=value\r\n\r\neg: http://myapi/app/?validate_username=some_name\r\n\r\nTo validate each field when user input on frontend from instead of validate all field to be filled and submit?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7340", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7340/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7340/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7340/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7340", "id": 619071155, "node_id": "MDU6SXNzdWU2MTkwNzExNTU=", "number": 7340, "title": "Make Charset Configurable For application/json", "user": {"login": "rotherfuchs", "id": 3027083, "node_id": "MDQ6VXNlcjMwMjcwODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3027083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rotherfuchs", "html_url": "https://github.com/rotherfuchs", "followers_url": "https://api.github.com/users/rotherfuchs/followers", "following_url": "https://api.github.com/users/rotherfuchs/following{/other_user}", "gists_url": "https://api.github.com/users/rotherfuchs/gists{/gist_id}", "starred_url": "https://api.github.com/users/rotherfuchs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rotherfuchs/subscriptions", "organizations_url": "https://api.github.com/users/rotherfuchs/orgs", "repos_url": "https://api.github.com/users/rotherfuchs/repos", "events_url": "https://api.github.com/users/rotherfuchs/events{/privacy}", "received_events_url": "https://api.github.com/users/rotherfuchs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-15T15:46:39Z", "updated_at": "2020-05-15T15:55:10Z", "closed_at": "2020-05-15T15:55:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "As declared in `renderers.py`, line `64-67`, DRF will always set `charset=None` for Content-Type `application/json` for the given reasons:\r\n```\r\n# We don't set a charset because JSON is a binary encoding,\r\n# that can be encoded as utf-8, utf-16 or utf-32.\r\n# See: https://www.ietf.org/rfc/rfc4627.txt\r\n# Also: http://lucumr.pocoo.org/2013/7/19/application-mimetypes-and-encodings/\r\ncharset = None\r\n```\r\n\r\nHowever, people might be dealing with the situation that certain clients (a mobile app in my case) *require* a charset statement in order to properly work. IMHO this is a typical _do-things-right vs make-things-work_ conflict. \r\n\r\nThis could easily be fixed by allowing to somehow (statically) configure the charset either in `settings.py` or by just echoing a charset stated in the `Accept` Header.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7339", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7339/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7339/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7339/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7339", "id": 618636648, "node_id": "MDU6SXNzdWU2MTg2MzY2NDg=", "number": 7339, "title": "How create a tab that will open after payments is done", "user": {"login": "alladinlebrone", "id": 23561221, "node_id": "MDQ6VXNlcjIzNTYxMjIx", "avatar_url": "https://avatars0.githubusercontent.com/u/23561221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alladinlebrone", "html_url": "https://github.com/alladinlebrone", "followers_url": "https://api.github.com/users/alladinlebrone/followers", "following_url": "https://api.github.com/users/alladinlebrone/following{/other_user}", "gists_url": "https://api.github.com/users/alladinlebrone/gists{/gist_id}", "starred_url": "https://api.github.com/users/alladinlebrone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alladinlebrone/subscriptions", "organizations_url": "https://api.github.com/users/alladinlebrone/orgs", "repos_url": "https://api.github.com/users/alladinlebrone/repos", "events_url": "https://api.github.com/users/alladinlebrone/events{/privacy}", "received_events_url": "https://api.github.com/users/alladinlebrone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-15T01:38:06Z", "updated_at": "2020-05-15T08:50:13Z", "closed_at": "2020-05-15T07:29:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\nI request for assistance\nI am new in python and I have a project with django.\nHow can someone create a tab which after payment of the desired thing it gets open\nExample I cant view this house unless I make a payment.\nWhen I make a payment the tab allows me to view the house\nKindly help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7326", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7326/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7326/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7326/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7326", "id": 617256885, "node_id": "MDU6SXNzdWU2MTcyNTY4ODU=", "number": 7326, "title": "No message for the data returned by has_object_permission", "user": {"login": "zxj17815", "id": 32863654, "node_id": "MDQ6VXNlcjMyODYzNjU0", "avatar_url": "https://avatars1.githubusercontent.com/u/32863654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zxj17815", "html_url": "https://github.com/zxj17815", "followers_url": "https://api.github.com/users/zxj17815/followers", "following_url": "https://api.github.com/users/zxj17815/following{/other_user}", "gists_url": "https://api.github.com/users/zxj17815/gists{/gist_id}", "starred_url": "https://api.github.com/users/zxj17815/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zxj17815/subscriptions", "organizations_url": "https://api.github.com/users/zxj17815/orgs", "repos_url": "https://api.github.com/users/zxj17815/repos", "events_url": "https://api.github.com/users/zxj17815/events{/privacy}", "received_events_url": "https://api.github.com/users/zxj17815/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-13T08:37:23Z", "updated_at": "2020-05-14T03:19:09Z", "closed_at": "2020-05-14T03:19:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have customized a has_object_permission. When using the runserver test, there is a return message: you do not have permission to perform the operation, but I will return without any prompt after I put it in nginx + uwsgi\r\n\r\ndjango:2.2.3\r\npython:3.6.10\r\ndjangorestframework:3.11.0 \r\n\r\n```\r\nclass IsOwnerOrReadOnly(permissions.BasePermission):\r\n    def has_object_permission(self, request, view, obj):\r\n        app=view.__module__.replace(\".views\",\"\")\r\n        model=ContentType.objects.filter(app_label=app,model=view.basename).first()\r\n        view_manager=models.ViewAction.objects.filter(model=model,action='*').first() \r\n        print('view_manager',view_manager)\r\n        print('\u7528\u6237',request.user)\r\n        for field in obj._meta.fields:\r\n            if field.name==view.own_field:\r\n                own=field.value_from_object(obj)\r\n                break\r\n        print('own',own)\r\n        for item in request.user.group.all():\r\n            print('group_action_id',item.view_action.all())\r\n            if view_manager in item.view_action.all():\r\n                return True\r\n        if own==request.user.employee.employee_id+'-'+request.user.employee.name:\r\n            return True\r\n        elif own==request.user.employee.name:\r\n            return True\r\n        elif own==request.user.employee.employee_id:\r\n            return True\r\n        elif own==None:\r\n            return True\r\n        return False\r\n```\r\n\r\n\r\n\r\n\r\n![in local](https://user-images.githubusercontent.com/32863654/81791492-6053ca80-9539-11ea-9012-67905b32368f.png)\r\n![in server](https://user-images.githubusercontent.com/32863654/81791519-68136f00-9539-11ea-9b60-a0250b8d17ec.png)\r\n\r\n\r\nthis is the request log in server \r\n```\r\n{48 vars in 1132 bytes} [Wed May 13 18:30:02 2020] PATCH /sap/technology/v1/TYB14/19/ => generated 49 bytes in 13 msecs (HTTP/1.1 403) 7 headers in 252 bytes (1 switches on core 0)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7318", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7318/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7318/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7318/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7318", "id": 614636454, "node_id": "MDU6SXNzdWU2MTQ2MzY0NTQ=", "number": 7318, "title": "OpenAPI action endpoints doesn't follow name convetion", "user": {"login": "C0DK", "id": 9048078, "node_id": "MDQ6VXNlcjkwNDgwNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9048078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/C0DK", "html_url": "https://github.com/C0DK", "followers_url": "https://api.github.com/users/C0DK/followers", "following_url": "https://api.github.com/users/C0DK/following{/other_user}", "gists_url": "https://api.github.com/users/C0DK/gists{/gist_id}", "starred_url": "https://api.github.com/users/C0DK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/C0DK/subscriptions", "organizations_url": "https://api.github.com/users/C0DK/orgs", "repos_url": "https://api.github.com/users/C0DK/repos", "events_url": "https://api.github.com/users/C0DK/events{/privacy}", "received_events_url": "https://api.github.com/users/C0DK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-08T09:50:44Z", "updated_at": "2020-05-08T11:06:51Z", "closed_at": "2020-05-08T11:06:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nCreate a `action` endpoint on a ApiView:\r\n```python\r\nclass CustomViewSet(viewsets.ModelViewSet):\r\n\r\n    @action(detail=True, schema=None)\r\n    def extra_action(self, request, pk=None):\r\n        pass\r\n```\r\nThis will generate the following operationId:\r\n`extra_actionCustomViewSet` - which should be `extraActionCustomViewSet`.\r\n\r\n\r\n## Expected behavior\r\nThe name should follow the openApi naming convention (camalCase)\r\n\r\n## Version\r\n3.11.0\r\nDjango 3.0.5", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7317", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7317/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7317/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7317/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7317", "id": 614068517, "node_id": "MDU6SXNzdWU2MTQwNjg1MTc=", "number": 7317, "title": "When will there be a new release?", "user": {"login": "justindhoffman", "id": 5408474, "node_id": "MDQ6VXNlcjU0MDg0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5408474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justindhoffman", "html_url": "https://github.com/justindhoffman", "followers_url": "https://api.github.com/users/justindhoffman/followers", "following_url": "https://api.github.com/users/justindhoffman/following{/other_user}", "gists_url": "https://api.github.com/users/justindhoffman/gists{/gist_id}", "starred_url": "https://api.github.com/users/justindhoffman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justindhoffman/subscriptions", "organizations_url": "https://api.github.com/users/justindhoffman/orgs", "repos_url": "https://api.github.com/users/justindhoffman/repos", "events_url": "https://api.github.com/users/justindhoffman/events{/privacy}", "received_events_url": "https://api.github.com/users/justindhoffman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-07T13:42:47Z", "updated_at": "2020-05-07T21:13:45Z", "closed_at": "2020-05-07T14:47:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "As far as I can tell the pip release 3.11.0 is quite far behind master and the documentation on the website. Can a new release be pushed forward? Or am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7311", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7311/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7311/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7311/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7311", "id": 611914843, "node_id": "MDU6SXNzdWU2MTE5MTQ4NDM=", "number": 7311, "title": "Improve get_path_parameters()", "user": {"login": "Mopsan", "id": 20639056, "node_id": "MDQ6VXNlcjIwNjM5MDU2", "avatar_url": "https://avatars1.githubusercontent.com/u/20639056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mopsan", "html_url": "https://github.com/Mopsan", "followers_url": "https://api.github.com/users/Mopsan/followers", "following_url": "https://api.github.com/users/Mopsan/following{/other_user}", "gists_url": "https://api.github.com/users/Mopsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mopsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mopsan/subscriptions", "organizations_url": "https://api.github.com/users/Mopsan/orgs", "repos_url": "https://api.github.com/users/Mopsan/repos", "events_url": "https://api.github.com/users/Mopsan/events{/privacy}", "received_events_url": "https://api.github.com/users/Mopsan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T14:22:52Z", "updated_at": "2020-05-04T14:26:27Z", "closed_at": "2020-05-04T14:26:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, if use Class-based Views\r\n\r\n```\r\ndef get(self, request: object, tax_number: int):\r\n    \"\"\"\r\n    Return a client full name.\r\n\r\n    :param (object) request: Request\r\n    :param (int) tax_number: Tax Number\r\n    \"\"\"\r\n```\r\n\r\nis it possible for parameters, description and type to be generated using fuction description, e.g.\r\n\r\n```:param (int) tax_number: Tax Number```\r\n\r\ngenerated to\r\n\r\n```\r\n\"parameters\": [\r\n    {\r\n        \"name\": \"tax_number\",\r\n        \"in\": \"path\",\r\n        \"required\": true,\r\n        \"description\": \"Tax Number\",\r\n        \"schema\": {\r\n          \"type\": \"int\"\r\n        }\r\n    }\r\n],\r\n```\r\n\r\nand not include to generated schema if __doc__ line is ```:param (object) request: Request```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7308", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7308/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7308/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7308/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7308", "id": 611320294, "node_id": "MDU6SXNzdWU2MTEzMjAyOTQ=", "number": 7308, "title": "Format kwarg not set in APIView using URL parameter", "user": {"login": "camuthig", "id": 5178217, "node_id": "MDQ6VXNlcjUxNzgyMTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5178217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camuthig", "html_url": "https://github.com/camuthig", "followers_url": "https://api.github.com/users/camuthig/followers", "following_url": "https://api.github.com/users/camuthig/following{/other_user}", "gists_url": "https://api.github.com/users/camuthig/gists{/gist_id}", "starred_url": "https://api.github.com/users/camuthig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camuthig/subscriptions", "organizations_url": "https://api.github.com/users/camuthig/orgs", "repos_url": "https://api.github.com/users/camuthig/repos", "events_url": "https://api.github.com/users/camuthig/events{/privacy}", "received_events_url": "https://api.github.com/users/camuthig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-03T02:59:42Z", "updated_at": "2020-05-06T17:27:02Z", "closed_at": "2020-05-04T09:58:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [x] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a APIView class, checking the `self.format_kwarg` value in the `get` method\r\n1. Send a request to the route as `/my-route?format=json`\r\n\r\n## Expected behavior\r\n\r\nWhen sending the `?format=json` parameter, the `format_kwarg` value should be set based on that value, which will also then be applied to any serializers.\r\n\r\n## Actual behavior\r\n\r\nWhen sending the `?format=json` parameter, the renderer is correctly set to a JSON renderer, but the `format_kwarg` and therefore the `context['format']` in the serializers is `None`. The only way to set this value is using the format suffix.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7304", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7304/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7304/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7304/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7304", "id": 609505083, "node_id": "MDU6SXNzdWU2MDk1MDUwODM=", "number": 7304, "title": "UserPassesTestMixin with ModelViewSet not working", "user": {"login": "tasawar-hussain", "id": 31658686, "node_id": "MDQ6VXNlcjMxNjU4Njg2", "avatar_url": "https://avatars2.githubusercontent.com/u/31658686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tasawar-hussain", "html_url": "https://github.com/tasawar-hussain", "followers_url": "https://api.github.com/users/tasawar-hussain/followers", "following_url": "https://api.github.com/users/tasawar-hussain/following{/other_user}", "gists_url": "https://api.github.com/users/tasawar-hussain/gists{/gist_id}", "starred_url": "https://api.github.com/users/tasawar-hussain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tasawar-hussain/subscriptions", "organizations_url": "https://api.github.com/users/tasawar-hussain/orgs", "repos_url": "https://api.github.com/users/tasawar-hussain/repos", "events_url": "https://api.github.com/users/tasawar-hussain/events{/privacy}", "received_events_url": "https://api.github.com/users/tasawar-hussain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-30T02:04:37Z", "updated_at": "2020-08-06T01:45:29Z", "closed_at": "2020-08-06T01:45:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [x] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nThis does not work, the `test_func` is never called,\r\n```\r\nclass OrganizationViewSet( viewsets.ModelViewSet, UserPassesTestMixin,): \r\n    def test_func(self):\r\n        return self.request.user.is_admin\r\n```\r\n\r\nDeclare a class and override` test_func`\r\n```\r\nclass OrganizationViewSet(UserPassesTestMixin, viewsets.ModelViewSet,): \r\n    def test_func(self):\r\n        return self.request.user.is_admin\r\n```\r\nThis works, While accessing the user, I `get the SimpleLazyObject` instead of auth user.\r\n## Expected behavior\r\n\r\n## Actual behavior\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7302", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7302/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7302/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7302/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7302", "id": 609077804, "node_id": "MDU6SXNzdWU2MDkwNzc4MDQ=", "number": 7302, "title": "Nested Serializer", "user": {"login": "paulodhiambo", "id": 44492906, "node_id": "MDQ6VXNlcjQ0NDkyOTA2", "avatar_url": "https://avatars2.githubusercontent.com/u/44492906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulodhiambo", "html_url": "https://github.com/paulodhiambo", "followers_url": "https://api.github.com/users/paulodhiambo/followers", "following_url": "https://api.github.com/users/paulodhiambo/following{/other_user}", "gists_url": "https://api.github.com/users/paulodhiambo/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulodhiambo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulodhiambo/subscriptions", "organizations_url": "https://api.github.com/users/paulodhiambo/orgs", "repos_url": "https://api.github.com/users/paulodhiambo/repos", "events_url": "https://api.github.com/users/paulodhiambo/events{/privacy}", "received_events_url": "https://api.github.com/users/paulodhiambo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T13:54:51Z", "updated_at": "2020-04-29T14:21:53Z", "closed_at": "2020-04-29T14:21:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [\u2713 ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [\u2713 ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ \u2713] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ \u2713] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ \u2713] I have reduced the issue to the simplest possible case.\r\n- [\u2713 ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nInclude Nested Serializer class in the serializers.py\r\n## Expected behavior\r\nEnables for easier working with nested json\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7301", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7301/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7301/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7301/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7301", "id": 608972349, "node_id": "MDU6SXNzdWU2MDg5NzIzNDk=", "number": 7301, "title": "Missing \"HTTP_AUTHORIZATION\" header in META if the permission class is AllowAny", "user": {"login": "jasonjiang8866", "id": 36893905, "node_id": "MDQ6VXNlcjM2ODkzOTA1", "avatar_url": "https://avatars0.githubusercontent.com/u/36893905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonjiang8866", "html_url": "https://github.com/jasonjiang8866", "followers_url": "https://api.github.com/users/jasonjiang8866/followers", "following_url": "https://api.github.com/users/jasonjiang8866/following{/other_user}", "gists_url": "https://api.github.com/users/jasonjiang8866/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonjiang8866/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonjiang8866/subscriptions", "organizations_url": "https://api.github.com/users/jasonjiang8866/orgs", "repos_url": "https://api.github.com/users/jasonjiang8866/repos", "events_url": "https://api.github.com/users/jasonjiang8866/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonjiang8866/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T11:14:04Z", "updated_at": "2020-04-29T11:42:40Z", "closed_at": "2020-04-29T11:42:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When my permission class is AllowAny, the \"HTTP_AUTHORIZATION\" key doesnt exist in the request.META dictionary when the request is using basic auth.\r\nIs this expected behavior? Thank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7300", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7300/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7300/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7300/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7300", "id": 608948819, "node_id": "MDU6SXNzdWU2MDg5NDg4MTk=", "number": 7300, "title": "Schema : override auto-generated tags ", "user": {"login": "ajlif", "id": 45905777, "node_id": "MDQ6VXNlcjQ1OTA1Nzc3", "avatar_url": "https://avatars1.githubusercontent.com/u/45905777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajlif", "html_url": "https://github.com/ajlif", "followers_url": "https://api.github.com/users/ajlif/followers", "following_url": "https://api.github.com/users/ajlif/following{/other_user}", "gists_url": "https://api.github.com/users/ajlif/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajlif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajlif/subscriptions", "organizations_url": "https://api.github.com/users/ajlif/orgs", "repos_url": "https://api.github.com/users/ajlif/repos", "events_url": "https://api.github.com/users/ajlif/events{/privacy}", "received_events_url": "https://api.github.com/users/ajlif/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T10:34:38Z", "updated_at": "2020-04-29T10:36:02Z", "closed_at": "2020-04-29T10:36:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ *] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ *] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [* ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ *] I have reduced the issue to the simplest possible case.\r\n- [* ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nDRF schema , i would like to override auto generated tags in yaml file\r\n\r\n## Expected behavior\r\noverride auto-generated tags by passing tags argument to the constructor of AutoSchema. tags argument must be a list or tuple of string.\r\n\r\nMy example :\r\n```\r\nclass ExampleViewSet(viewsets.ViewSet):\r\n    schema = AutoSchema(tags = ['tag1', 'tag2'])\r\n    permission_classes = (IsAuthenticated,)\r\n    ...\r\n```\r\n## Actual behavior\r\nAutoSchema: AutoSchema\r\nUnexpected keyword argument 'tags' in constructor call\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7296", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7296/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7296/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7296/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7296", "id": 608181492, "node_id": "MDU6SXNzdWU2MDgxODE0OTI=", "number": 7296, "title": "Api Root is wrong", "user": {"login": "xiaopanggege", "id": 28803746, "node_id": "MDQ6VXNlcjI4ODAzNzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/28803746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaopanggege", "html_url": "https://github.com/xiaopanggege", "followers_url": "https://api.github.com/users/xiaopanggege/followers", "following_url": "https://api.github.com/users/xiaopanggege/following{/other_user}", "gists_url": "https://api.github.com/users/xiaopanggege/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaopanggege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaopanggege/subscriptions", "organizations_url": "https://api.github.com/users/xiaopanggege/orgs", "repos_url": "https://api.github.com/users/xiaopanggege/repos", "events_url": "https://api.github.com/users/xiaopanggege/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaopanggege/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-28T09:52:52Z", "updated_at": "2020-04-28T09:58:50Z", "closed_at": "2020-04-28T09:58:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "My project install in docker\r\n\r\nBrowser access http://139.9.115.10:8000/ return Api Root page\r\n\r\ncontent is as follows:\r\n\r\nHTTP 200 OK\r\nAllow: GET, HEAD, OPTIONS\r\nContent-Type: application/json\r\nVary: Accept\r\n\r\n{\r\n\"dashboard\": \"http://139.9.115.10/dashboard/\",\r\n\"userinfo\": \"http://139.9.115.10/userinfo/\",\r\n\"saltstack/salt-key\": \"http://139.9.115.10/saltstack/salt-key/\",\r\n\"saltstack/salt-key-opt/accept\": \"http://139.9.115.10/saltstack/salt-key-opt/accept/\",\r\n\"saltstack/salt-key-opt/delete\": \"http://139.9.115.10/saltstack/salt-key-opt/delete/\",\r\n\"saltstack/salt-key-opt/reject\": \"http://139.9.115.10/saltstack/salt-key-opt/reject/\",\r\n\"saltstack/salt-key-opt/del-denied\": \"http://139.9.115.10/saltstack/salt-key-opt/del-denied/\",\r\n\"saltstack/salt-minion\": \"http://139.9.115.10/saltstack/salt-minion/\",\r\n\"saltstack/salt-minion-opt/status-update\": \"http://139.9.115.10/saltstack/salt-minion-opt/status-update/\",\r\n\"saltstack/salt-minion-opt/update\": \"http://139.9.115.10/saltstack/salt-minion-opt/update/\",\r\n\"saltstack/salt-cmd\": \"http://139.9.115.10/saltstack/salt-cmd/\"}\r\n\r\nThis is wrong , The url is missing port 8000,What's going on here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7295", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7295/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7295/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7295/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7295", "id": 608176608, "node_id": "MDU6SXNzdWU2MDgxNzY2MDg=", "number": 7295, "title": "api", "user": {"login": "xiaopanggege", "id": 28803746, "node_id": "MDQ6VXNlcjI4ODAzNzQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/28803746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaopanggege", "html_url": "https://github.com/xiaopanggege", "followers_url": "https://api.github.com/users/xiaopanggege/followers", "following_url": "https://api.github.com/users/xiaopanggege/following{/other_user}", "gists_url": "https://api.github.com/users/xiaopanggege/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaopanggege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaopanggege/subscriptions", "organizations_url": "https://api.github.com/users/xiaopanggege/orgs", "repos_url": "https://api.github.com/users/xiaopanggege/repos", "events_url": "https://api.github.com/users/xiaopanggege/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaopanggege/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-28T09:45:38Z", "updated_at": "2020-04-28T09:51:20Z", "closed_at": "2020-04-28T09:51:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "My project install in docker\r\n\r\nBrowser access http://139.9.115.10:8000/ return Api Root page\r\n\r\ncontent is as follows:\r\n\r\nHTTP 200 OK\r\nAllow: GET, HEAD, OPTIONS\r\nContent-Type: application/json\r\nVary: Accept\r\n\r\n{\r\n\"dashboard\": \"http://139.9.115.10/dashboard/\",\r\n\"userinfo\": \"http://139.9.115.10/userinfo/\",\r\n\"saltstack/salt-key\": \"http://139.9.115.10/saltstack/salt-key/\",\r\n\"saltstack/salt-key-opt/accept\": \"http://139.9.115.10/saltstack/salt-key-opt/accept/\",\r\n\"saltstack/salt-key-opt/delete\": \"http://139.9.115.10/saltstack/salt-key-opt/delete/\",\r\n\"saltstack/salt-key-opt/reject\": \"http://139.9.115.10/saltstack/salt-key-opt/reject/\",\r\n\"saltstack/salt-key-opt/del-denied\": \"http://139.9.115.10/saltstack/salt-key-opt/del-denied/\",\r\n\"saltstack/salt-minion\": \"http://139.9.115.10/saltstack/salt-minion/\",\r\n\"saltstack/salt-minion-opt/status-update\": \"http://139.9.115.10/saltstack/salt-minion-opt/status-update/\",\r\n\"saltstack/salt-minion-opt/update\": \"http://139.9.115.10/saltstack/salt-minion-opt/update/\",\r\n\"saltstack/salt-cmd\": \"http://139.9.115.10/saltstack/salt-cmd/\"}\r\n\r\nThis is wrong , The url is missing port 8000,What's going on here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7294", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7294/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7294/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7294/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7294", "id": 607183019, "node_id": "MDU6SXNzdWU2MDcxODMwMTk=", "number": 7294, "title": "Inconsistent use of self.errors and self._errors in serializers.py in version 3.9", "user": {"login": "c4ffein", "id": 15324202, "node_id": "MDQ6VXNlcjE1MzI0MjAy", "avatar_url": "https://avatars3.githubusercontent.com/u/15324202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c4ffein", "html_url": "https://github.com/c4ffein", "followers_url": "https://api.github.com/users/c4ffein/followers", "following_url": "https://api.github.com/users/c4ffein/following{/other_user}", "gists_url": "https://api.github.com/users/c4ffein/gists{/gist_id}", "starred_url": "https://api.github.com/users/c4ffein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c4ffein/subscriptions", "organizations_url": "https://api.github.com/users/c4ffein/orgs", "repos_url": "https://api.github.com/users/c4ffein/repos", "events_url": "https://api.github.com/users/c4ffein/events{/privacy}", "received_events_url": "https://api.github.com/users/c4ffein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-27T02:25:13Z", "updated_at": "2020-04-27T02:46:46Z", "closed_at": "2020-04-27T02:46:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "While using serializers, an incorrect exception has been raised. I can't share the code, as unfortunately this is a professional project I am not allowed to disclose. However, while debugging and going through django-rest stack trace, I found that piece of code :\r\n\r\nhttps://github.com/encode/django-rest-framework/blob/b1c4d8b59b67084ed07a35ea9a35629805039aaa/rest_framework/serializers.py#L244\r\n\r\nOn itself, that seems highly suspicious to me that it is `self.errors` and not `self._errors` that is raised. In addition, in my case, `self._errors` contained the correct exception, contrarily to `self.errors`. Is there a particular reason that `self.errors` is used here, or is it possible that the wrong attribute is raised?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7287", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7287/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7287/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7287/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7287", "id": 606257414, "node_id": "MDU6SXNzdWU2MDYyNTc0MTQ=", "number": 7287, "title": "\"Action\" button does not render in API if `app_name` is set", "user": {"login": "kripnerl", "id": 38673295, "node_id": "MDQ6VXNlcjM4NjczMjk1", "avatar_url": "https://avatars1.githubusercontent.com/u/38673295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kripnerl", "html_url": "https://github.com/kripnerl", "followers_url": "https://api.github.com/users/kripnerl/followers", "following_url": "https://api.github.com/users/kripnerl/following{/other_user}", "gists_url": "https://api.github.com/users/kripnerl/gists{/gist_id}", "starred_url": "https://api.github.com/users/kripnerl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kripnerl/subscriptions", "organizations_url": "https://api.github.com/users/kripnerl/orgs", "repos_url": "https://api.github.com/users/kripnerl/repos", "events_url": "https://api.github.com/users/kripnerl/events{/privacy}", "received_events_url": "https://api.github.com/users/kripnerl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-24T11:53:06Z", "updated_at": "2020-07-03T18:18:19Z", "closed_at": "2020-07-03T18:18:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nIn `api_views.py`:\r\n\r\n```python\r\nclass SomeViewSet(viewsets.ModelViewSet):\r\n  queryset = ...\r\n  serializer_class = ...\r\n\r\n  @action(method=['POST'], detail=False, )\r\n  def some_action(self, request):\r\n    # ..\r\n    return Response(\"Hi\")\r\n```\r\n\r\nIn `api_urls.py`:\r\n\r\n```python\r\nfrom rest_framework import routers\r\nfrom . import api_views\r\n\r\nrouter = routers.DefaultRouter()\r\nrouter.register(r'some_link', api_views.SomeViewSet)\r\n```\r\n\r\nin `urls.py`: \r\n\r\n```python\r\nfrom .api_urls import router\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('api/', include((router.urls, \"api\"))),\r\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework')),\r\n]\r\n```\r\n\r\n## Expected behaviour\r\nTo see \"Actions\" button on http://127.0.0.1:8000/api/some_link/ page. \r\n\r\n## Actual behaviour\r\n\r\nThe button is not there.\r\n\r\n## How to fix\r\n\r\nRemove app name in `urlpaths`; however, this breaks `{% url ... %}` syntax in Django templates. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7282", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7282/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7282/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7282/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7282", "id": 603771839, "node_id": "MDU6SXNzdWU2MDM3NzE4Mzk=", "number": 7282, "title": "run_validation for RelatedField or ChoiceField failed with 'does_not_exist' when value is 0", "user": {"login": "eshxcmhk", "id": 5865693, "node_id": "MDQ6VXNlcjU4NjU2OTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5865693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eshxcmhk", "html_url": "https://github.com/eshxcmhk", "followers_url": "https://api.github.com/users/eshxcmhk/followers", "following_url": "https://api.github.com/users/eshxcmhk/following{/other_user}", "gists_url": "https://api.github.com/users/eshxcmhk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eshxcmhk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eshxcmhk/subscriptions", "organizations_url": "https://api.github.com/users/eshxcmhk/orgs", "repos_url": "https://api.github.com/users/eshxcmhk/repos", "events_url": "https://api.github.com/users/eshxcmhk/events{/privacy}", "received_events_url": "https://api.github.com/users/eshxcmhk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-21T07:27:27Z", "updated_at": "2020-04-21T11:25:40Z", "closed_at": "2020-04-21T11:25:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "When the field type of RelatedField or ChoiceField is int, you can provide an argument to treat the value 0 as None, because variables of type int in advanced programming languages default to 0 and cannot be null, but in the database 0 and null have different meanings", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7280", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7280/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7280/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7280/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7280", "id": 603056892, "node_id": "MDU6SXNzdWU2MDMwNTY4OTI=", "number": 7280, "title": "Using and, or, not in DjangoModelPermissions perms_map", "user": {"login": "aminst", "id": 12907963, "node_id": "MDQ6VXNlcjEyOTA3OTYz", "avatar_url": "https://avatars3.githubusercontent.com/u/12907963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aminst", "html_url": "https://github.com/aminst", "followers_url": "https://api.github.com/users/aminst/followers", "following_url": "https://api.github.com/users/aminst/following{/other_user}", "gists_url": "https://api.github.com/users/aminst/gists{/gist_id}", "starred_url": "https://api.github.com/users/aminst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aminst/subscriptions", "organizations_url": "https://api.github.com/users/aminst/orgs", "repos_url": "https://api.github.com/users/aminst/repos", "events_url": "https://api.github.com/users/aminst/events{/privacy}", "received_events_url": "https://api.github.com/users/aminst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-20T08:47:32Z", "updated_at": "2020-04-20T10:31:13Z", "closed_at": "2020-04-20T10:31:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n## Description\r\nIn DjangoModelPermissions we can use perms_map to include django permissions\r\nas following:\r\nhttps://github.com/encode/django-rest-framework/blob/8cba4f87ca8e785d1a8c022a7a8ea9649e049c11/rest_framework/permissions.py#L177-L185\r\nbut the problem is there is no AND, OR, NOT provided in this part\r\nbecause of this, you have to define lots of inherited classes from DjangoModelPermissions and use and, or, not in permission_classes\r\n\r\n## Example\r\nlet assume that we have following django permissions:\r\n_django_permission_A_, _django_permission_B_\r\nI would like to have a permission on GET method like this:\r\n```\r\nperms_map = {\r\nGET: [\"django_permission_A\" | \"django_permission_B\"]\r\n}\r\n```\r\n\r\nthis is not supported right now and I have to do sth like this:\r\nI must define two individual classes inherited from DjangoModelPermissions\r\n```\r\nclass CustomPermA(DjangoModelPermissions):\r\n    perms_map = {\r\n        GET: [\"django_permission_A\"]\r\n    }\r\n\r\nclass CustomPermB(DjangoModelPermissions):\r\n    perms_map = {\r\n        GET: [\"django_permission_B\"]\r\n    }\r\n```\r\nthis must be used like this in a view:\r\n```\r\nclass TestView(APIView):\r\n    permission_classes = [CustomPermA|CustomPermB]\r\n```\r\nI would like to use AND, OR, NOT in perms_map so I don't have to define lots of unneccassery inherited classes in my codebase and make the permission_classes part complicated\r\n\r\nTHANKS FOR READING", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7277", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7277/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7277/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7277/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7277", "id": 601945947, "node_id": "MDU6SXNzdWU2MDE5NDU5NDc=", "number": 7277, "title": "Please change default None value behaviour in to_representation", "user": {"login": "velis74", "id": 5511919, "node_id": "MDQ6VXNlcjU1MTE5MTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5511919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/velis74", "html_url": "https://github.com/velis74", "followers_url": "https://api.github.com/users/velis74/followers", "following_url": "https://api.github.com/users/velis74/following{/other_user}", "gists_url": "https://api.github.com/users/velis74/gists{/gist_id}", "starred_url": "https://api.github.com/users/velis74/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/velis74/subscriptions", "organizations_url": "https://api.github.com/users/velis74/orgs", "repos_url": "https://api.github.com/users/velis74/repos", "events_url": "https://api.github.com/users/velis74/events{/privacy}", "received_events_url": "https://api.github.com/users/velis74/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-17T12:37:40Z", "updated_at": "2020-04-20T11:13:43Z", "closed_at": "2020-04-20T10:28:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ X ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ X ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ X ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ X ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ n/a ] I have reduced the issue to the simplest possible case.\r\n- [ n/a ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\nI would like to ask for consideration of changing processing of None values from serailizer's to_representation to Field's to_representation.\r\n\r\nA quick search turned up three issues that seem to have been caused by current implementation / design decision: #3451, #5124, #5635\r\n\r\nThe problem lies in [lines 505 - 513](https://github.com/encode/django-rest-framework/blob/8cba4f87ca8e785d1a8c022a7a8ea9649e049c11/rest_framework/serializers.py#L505-L513) of serializers.py. (I just took the latest commit right now to link to)\r\n\r\nThe serializer decides here to handle None value for the fields, forcing fields to override any or all of  get_attribute, to_internal_value and to_representation - if they need to handle it themselves.\r\n\r\nI would ask for a change where this particular check was moved to Field.to_representation so that fields can choose freely how to handle None values.\r\n\r\nI realise the danger of existing implementations not taking this into account, so I propose adding a property / method to fields that would tell the serializer NOT TO process None value. Also, current design decision is a bit imperialistic towards the poor fields, don't you think? :wink: \r\n\r\nThanks for your consideration.\r\n\r\nEdit: P.S.: I am willing to make the PR myself, but will only start on it if proposal is accepted. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7276", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7276/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7276/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7276/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7276", "id": 601778565, "node_id": "MDU6SXNzdWU2MDE3Nzg1NjU=", "number": 7276, "title": "serializer cannot validate imageuploadfield data", "user": {"login": "xulian070608", "id": 44796770, "node_id": "MDQ6VXNlcjQ0Nzk2Nzcw", "avatar_url": "https://avatars2.githubusercontent.com/u/44796770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xulian070608", "html_url": "https://github.com/xulian070608", "followers_url": "https://api.github.com/users/xulian070608/followers", "following_url": "https://api.github.com/users/xulian070608/following{/other_user}", "gists_url": "https://api.github.com/users/xulian070608/gists{/gist_id}", "starred_url": "https://api.github.com/users/xulian070608/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xulian070608/subscriptions", "organizations_url": "https://api.github.com/users/xulian070608/orgs", "repos_url": "https://api.github.com/users/xulian070608/repos", "events_url": "https://api.github.com/users/xulian070608/events{/privacy}", "received_events_url": "https://api.github.com/users/xulian070608/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-17T07:56:22Z", "updated_at": "2020-04-21T11:44:24Z", "closed_at": "2020-04-21T11:44:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "This might be wired but I cannot tell if it is the issue of my code or it is the serializer issue.\r\nWhen I trying to post a photo to drf and save to database.\r\nThe following code with fine\r\n```python\r\nclass UploadPhotoView(\r\n    generics.CreateAPIView\r\n):\r\n    queryset = Photo.objects.all()\r\n    parser_class = (FileUploadParser,)\r\n    serializer_class = PhotoSerializer\r\n\r\n    def post(self, request, *args, **kwargs):\r\n        img_file = request.FILES[\"image\"] \r\n        request.data[\"size\"] = img_file.size\r\n        request.data[\"title\"] =  img_file.name\r\n        request.data[\"type\"] = img_file.content_type\r\n        return self.create(request,*args, **kwargs)\r\n\r\n```\r\n\r\nbut if I do anything to the `img_file.chunks()', for example, \r\n```python \r\nclass UploadPhotoView(\r\n    generics.CreateAPIView\r\n):\r\n    queryset = Photo.objects.all()\r\n    parser_class = (FileUploadParser,)\r\n    serializer_class = PhotoSerializer\r\n\r\n    def post(self, request, *args, **kwargs):\r\n        img_file = request.FILES[\"image\"] \r\n        request.data[\"size\"] = img_file.size\r\n        request.data[\"title\"] =  img_file.name\r\n        request.data[\"type\"] = img_file.content_type\r\n        for chunk in img_file.chunks():\r\n            pass\r\n        return self.create(request,*args, **kwargs)\r\n```\r\nThe request.data cannot be validated by serializer. It says:\r\n```json\r\n{\r\n    \"errors\": {\r\n        \"image\": [\r\n            \"Upload a valid image. The file you uploaded was either not an image or a corrupted image.\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nMy model is \r\n```python\r\nclass Photo(models.Model):\r\n    ImageType = models.TextChoices(\r\n        \"ImageType\",\r\n        \"image/bmp image/gif image/jpeg image/tiff image/png image/svg+xml image/webp\",\r\n    )\r\n    photo_id = models.BigAutoField(primary_key=True, db_column=\"id\")\r\n    title = models.CharField(max_length=100)\r\n    description = models.TextField(max_length=65535, blank=True)\r\n    type = models.CharField(max_length=20, choices=ImageType.choices)\r\n    checksum = models.CharField(max_length=40, blank=True, unique=True)\r\n    created_at = models.DateTimeField(auto_now_add=True, editable=False)\r\n    updated_at = models.DateTimeField(auto_now=True, editable=False)\r\n    image = models.ImageField(upload_to=nameFile, null=False, blank=False)\r\n    size = models.CharField(max_length=50)\r\n    tag = models.CharField(max_length=20, null=False, blank=False)\r\n    \r\n    class Meta:\r\n        db_table = \"nebula_img\"\r\n```\r\nand my serializer is \r\n```python\r\nclass PhotoSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Photo\r\n        fields = \"__all__\"\r\n```\r\nWhat can I do to solve that issue?\r\n\r\nPython = 3.8.2\r\nDjango = 3.0.4\r\nrestframework = 3.11.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7274", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7274/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7274/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7274/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7274", "id": 601154529, "node_id": "MDU6SXNzdWU2MDExNTQ1Mjk=", "number": 7274, "title": "Documentation Allow Empty is not correct", "user": {"login": "rvanlaar", "id": 710771, "node_id": "MDQ6VXNlcjcxMDc3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rvanlaar", "html_url": "https://github.com/rvanlaar", "followers_url": "https://api.github.com/users/rvanlaar/followers", "following_url": "https://api.github.com/users/rvanlaar/following{/other_user}", "gists_url": "https://api.github.com/users/rvanlaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rvanlaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rvanlaar/subscriptions", "organizations_url": "https://api.github.com/users/rvanlaar/orgs", "repos_url": "https://api.github.com/users/rvanlaar/repos", "events_url": "https://api.github.com/users/rvanlaar/events{/privacy}", "received_events_url": "https://api.github.com/users/rvanlaar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-16T15:17:43Z", "updated_at": "2020-04-16T16:10:57Z", "closed_at": "2020-04-16T15:54:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nThe documentation specifies that `allow_empty` is `True` by default.\r\n\r\nSee the following code. It's default is `False` for a Postgres ArrayField:\r\nhttps://github.com/encode/django-rest-framework/blob/master/rest_framework/utils/field_mapping.py#L113-L114\r\n\r\n## Expected behavior\r\n\r\nEither `allow_empty` to be `True` or updated documentation.\r\n\r\n## Actual behavior\r\n\r\n`allow_empty` is `False`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7273", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7273/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7273/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7273/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7273", "id": 601013859, "node_id": "MDU6SXNzdWU2MDEwMTM4NTk=", "number": 7273, "title": "Provide a setting to use HttpOnly cookie for Token Authorization", "user": {"login": "advename", "id": 32460418, "node_id": "MDQ6VXNlcjMyNDYwNDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/32460418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/advename", "html_url": "https://github.com/advename", "followers_url": "https://api.github.com/users/advename/followers", "following_url": "https://api.github.com/users/advename/following{/other_user}", "gists_url": "https://api.github.com/users/advename/gists{/gist_id}", "starred_url": "https://api.github.com/users/advename/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/advename/subscriptions", "organizations_url": "https://api.github.com/users/advename/orgs", "repos_url": "https://api.github.com/users/advename/repos", "events_url": "https://api.github.com/users/advename/events{/privacy}", "received_events_url": "https://api.github.com/users/advename/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-04-16T12:35:43Z", "updated_at": "2020-04-22T13:37:53Z", "closed_at": "2020-04-20T10:33:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Many online discussion exist about where to store the token for Token Authorization in web applications, after the intial Token Authentication.\r\n\r\nThe three main suggestions are:\r\n- localStorage\r\n- sessionStorage\r\n- Cookies with HttpOnly (not accessible with client side JavaScript)\r\n\r\nThe first two are prone to XSS attacks.\r\nThe last one to CSRF attacks.\r\n\r\nGood security is to store the token in a Cookie with HttpOnly and validate it from here on. CSRF token should then be passed during token authentication back to the user to be stored in localStorage/sessionStorage.\r\n\r\nIn future token authorization, the user passes the CSRF token in the request Header and Django automatically checks for the user token in the cookie.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7270", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7270/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7270/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7270/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7270", "id": 599125304, "node_id": "MDU6SXNzdWU1OTkxMjUzMDQ=", "number": 7270, "title": "Update to jQuery 3.5.0", "user": {"login": "shrew4u2do", "id": 21346277, "node_id": "MDQ6VXNlcjIxMzQ2Mjc3", "avatar_url": "https://avatars2.githubusercontent.com/u/21346277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shrew4u2do", "html_url": "https://github.com/shrew4u2do", "followers_url": "https://api.github.com/users/shrew4u2do/followers", "following_url": "https://api.github.com/users/shrew4u2do/following{/other_user}", "gists_url": "https://api.github.com/users/shrew4u2do/gists{/gist_id}", "starred_url": "https://api.github.com/users/shrew4u2do/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shrew4u2do/subscriptions", "organizations_url": "https://api.github.com/users/shrew4u2do/orgs", "repos_url": "https://api.github.com/users/shrew4u2do/repos", "events_url": "https://api.github.com/users/shrew4u2do/events{/privacy}", "received_events_url": "https://api.github.com/users/shrew4u2do/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-13T20:44:32Z", "updated_at": "2020-05-13T10:31:36Z", "closed_at": "2020-05-13T10:31:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "jQuery 3.5.0 has been released and fixes a security issue that some security scanners complain about:\r\nhttps://blog.jquery.com/2020/04/10/jquery-3-5-0-released/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7267", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7267/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7267/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7267/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7267", "id": 597898381, "node_id": "MDU6SXNzdWU1OTc4OTgzODE=", "number": 7267, "title": "JSONFiled to_internal_value", "user": {"login": "zsh1995", "id": 15943676, "node_id": "MDQ6VXNlcjE1OTQzNjc2", "avatar_url": "https://avatars2.githubusercontent.com/u/15943676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zsh1995", "html_url": "https://github.com/zsh1995", "followers_url": "https://api.github.com/users/zsh1995/followers", "following_url": "https://api.github.com/users/zsh1995/following{/other_user}", "gists_url": "https://api.github.com/users/zsh1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/zsh1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zsh1995/subscriptions", "organizations_url": "https://api.github.com/users/zsh1995/orgs", "repos_url": "https://api.github.com/users/zsh1995/repos", "events_url": "https://api.github.com/users/zsh1995/events{/privacy}", "received_events_url": "https://api.github.com/users/zsh1995/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T13:49:47Z", "updated_at": "2020-04-10T15:51:42Z", "closed_at": "2020-04-10T15:51:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/encode/django-rest-framework/blob/b2497fc2456c607a3c639ed2355c28dac672a70f/rest_framework/fields.py#L1815\r\n\r\nI think it should be \r\n`data = json.dumps(data, cls=self.encoder)`\r\nOtherwise, what does the current code do?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7262", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7262/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7262/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7262/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7262", "id": 596537246, "node_id": "MDU6SXNzdWU1OTY1MzcyNDY=", "number": 7262, "title": "Does DRF support nested writable serializer with multipart/form-data?", "user": {"login": "mohmyo", "id": 14170159, "node_id": "MDQ6VXNlcjE0MTcwMTU5", "avatar_url": "https://avatars0.githubusercontent.com/u/14170159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mohmyo", "html_url": "https://github.com/mohmyo", "followers_url": "https://api.github.com/users/mohmyo/followers", "following_url": "https://api.github.com/users/mohmyo/following{/other_user}", "gists_url": "https://api.github.com/users/mohmyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/mohmyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mohmyo/subscriptions", "organizations_url": "https://api.github.com/users/mohmyo/orgs", "repos_url": "https://api.github.com/users/mohmyo/repos", "events_url": "https://api.github.com/users/mohmyo/events{/privacy}", "received_events_url": "https://api.github.com/users/mohmyo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T12:23:29Z", "updated_at": "2020-04-08T12:55:45Z", "closed_at": "2020-04-08T12:55:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n\r\nHello,\r\n\r\nI'm trying to upload a file with some nested data via `POST` and `content-type:multipart/form-data`, no matter how I'm sending the value for the nested field as a text or JSON my serializer always rasing the exception for the nested field as `This field is required` despite I'm sure it is being correctly mapped to `request.data` - fields and values are as expected - and passed to the parent serializer, I have even tried to write a parser or to use a package but nothing changes, for some reason the nested field is always dropped at validation.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7261", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7261/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7261/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7261/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7261", "id": 596011708, "node_id": "MDU6SXNzdWU1OTYwMTE3MDg=", "number": 7261, "title": "put not allowed", "user": {"login": "hian18", "id": 22982725, "node_id": "MDQ6VXNlcjIyOTgyNzI1", "avatar_url": "https://avatars0.githubusercontent.com/u/22982725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hian18", "html_url": "https://github.com/hian18", "followers_url": "https://api.github.com/users/hian18/followers", "following_url": "https://api.github.com/users/hian18/following{/other_user}", "gists_url": "https://api.github.com/users/hian18/gists{/gist_id}", "starred_url": "https://api.github.com/users/hian18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hian18/subscriptions", "organizations_url": "https://api.github.com/users/hian18/orgs", "repos_url": "https://api.github.com/users/hian18/repos", "events_url": "https://api.github.com/users/hian18/events{/privacy}", "received_events_url": "https://api.github.com/users/hian18/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-07T16:51:08Z", "updated_at": "2020-04-07T16:56:42Z", "closed_at": "2020-04-07T16:56:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n## Expected behavior\r\n\r\n## Actual behavior\r\n\r\n\r\n\r\n@api_view([\"PUT\"])\r\n@parser_classes([MultiPartParser])\r\ndef update_user(request, pk):\r\n\r\n    serializer = CreateCustomUserSeralizer(data=request.data)\r\n    serializer.is_valid(raise_exception=True)\r\n\r\n    user = CustomUser.objects.filter(id=int(pk)).first()\r\n    if not user:\r\n        user = CustomUser()\r\n\r\n    user.roles = serializer.validated_data.get(\"roles\", \"\")\r\n    user.email = serializer.validated_data[\"email\"]\r\n    foto = serializer.validated_data.get(\"foto\", None)\r\n\r\n    file = Files.objects.filter(guid=user.foto).first()\r\n\r\n    if foto and file:\r\n        file.file = foto.read()\r\n        file.tipo = foto.content_type\r\n        file.save()\r\n\r\n    elif foto:\r\n        file = Files()\r\n        file.file = foto.read()\r\n        file.guid = str(uuid.uuid4())\r\n        file.tipo = foto.content_type\r\n        user.foto = file.guid\r\n        file.save()\r\n\r\n    else:\r\n        file.delete()\r\n        user.foto = None\r\n\r\n    user.set_password(serializer.validated_data[\"password\"])\r\n    user.username = serializer.validated_data[\"username\"]\r\n    user.save()\r\n\r\n    return Response(CustomUserSeralizer(user).data, status=status.HTTP_200_OK)\r\n\r\n\r\n\r\nthe method put is ever not allowed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7256", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7256/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7256/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7256/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7256", "id": 594872108, "node_id": "MDU6SXNzdWU1OTQ4NzIxMDg=", "number": 7256, "title": "Functionality to add more fields to the models", "user": {"login": "Philipotieno", "id": 29012135, "node_id": "MDQ6VXNlcjI5MDEyMTM1", "avatar_url": "https://avatars2.githubusercontent.com/u/29012135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Philipotieno", "html_url": "https://github.com/Philipotieno", "followers_url": "https://api.github.com/users/Philipotieno/followers", "following_url": "https://api.github.com/users/Philipotieno/following{/other_user}", "gists_url": "https://api.github.com/users/Philipotieno/gists{/gist_id}", "starred_url": "https://api.github.com/users/Philipotieno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Philipotieno/subscriptions", "organizations_url": "https://api.github.com/users/Philipotieno/orgs", "repos_url": "https://api.github.com/users/Philipotieno/repos", "events_url": "https://api.github.com/users/Philipotieno/events{/privacy}", "received_events_url": "https://api.github.com/users/Philipotieno/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T07:30:32Z", "updated_at": "2020-04-06T11:40:56Z", "closed_at": "2020-04-06T11:40:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\nAssuming I have a model **User** with fields _first_name_, _last_name_, and _contact_ \r\nI want to have a system where if at any point the admin user will want to add other fields that were not captured he/she should be able to add them at will\r\nassuming he wants to add _age_ or _email_\r\n\r\nhow can I achieve this ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7253", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7253/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7253/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7253/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7253", "id": 594145638, "node_id": "MDU6SXNzdWU1OTQxNDU2Mzg=", "number": 7253, "title": "Decimal fields rendered as number instead of string in OpenAPI schema", "user": {"login": "clintonb", "id": 910510, "node_id": "MDQ6VXNlcjkxMDUxMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/910510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clintonb", "html_url": "https://github.com/clintonb", "followers_url": "https://api.github.com/users/clintonb/followers", "following_url": "https://api.github.com/users/clintonb/following{/other_user}", "gists_url": "https://api.github.com/users/clintonb/gists{/gist_id}", "starred_url": "https://api.github.com/users/clintonb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clintonb/subscriptions", "organizations_url": "https://api.github.com/users/clintonb/orgs", "repos_url": "https://api.github.com/users/clintonb/repos", "events_url": "https://api.github.com/users/clintonb/events{/privacy}", "received_events_url": "https://api.github.com/users/clintonb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 611390077, "node_id": "MDU6TGFiZWw2MTEzOTAwNzc=", "url": "https://api.github.com/repos/encode/django-rest-framework/labels/Schema%20Generation", "name": "Schema Generation", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/encode/django-rest-framework/milestones/76", "html_url": "https://github.com/encode/django-rest-framework/milestone/76", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/milestones/76/labels", "id": 4909975, "node_id": "MDk6TWlsZXN0b25lNDkwOTk3NQ==", "number": 76, "title": "3.12 Release", "description": "", "creator": {"login": "rpkilby", "id": 2370209, "node_id": "MDQ6VXNlcjIzNzAyMDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2370209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpkilby", "html_url": "https://github.com/rpkilby", "followers_url": "https://api.github.com/users/rpkilby/followers", "following_url": "https://api.github.com/users/rpkilby/following{/other_user}", "gists_url": "https://api.github.com/users/rpkilby/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpkilby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpkilby/subscriptions", "organizations_url": "https://api.github.com/users/rpkilby/orgs", "repos_url": "https://api.github.com/users/rpkilby/repos", "events_url": "https://api.github.com/users/rpkilby/events{/privacy}", "received_events_url": "https://api.github.com/users/rpkilby/received_events", "type": "User", "site_admin": false}, "open_issues": 17, "closed_issues": 28, "state": "open", "created_at": "2019-12-06T18:36:21Z", "updated_at": "2020-08-11T18:38:11Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2020-04-04T22:52:24Z", "updated_at": "2020-04-09T17:16:18Z", "closed_at": "2020-04-09T17:16:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a serializer with a decimal field.\r\n2. Use the serializer in a `ViewSet`.\r\n3. Render the OpenAPI schema. \r\n\r\n## Expected behavior\r\nThe decimal field should have a type of `string`.\r\n\r\n## Actual behavior\r\nThe decimal field has a type of `number`.\r\n\r\nThis issue was introduced by #6674.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7252", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7252/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7252/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7252/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7252", "id": 592923215, "node_id": "MDU6SXNzdWU1OTI5MjMyMTU=", "number": 7252, "title": "Upcoming OpenAPI improvements are missing schema generation for custom fields", "user": {"login": "synic", "id": 30906, "node_id": "MDQ6VXNlcjMwOTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/30906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/synic", "html_url": "https://github.com/synic", "followers_url": "https://api.github.com/users/synic/followers", "following_url": "https://api.github.com/users/synic/following{/other_user}", "gists_url": "https://api.github.com/users/synic/gists{/gist_id}", "starred_url": "https://api.github.com/users/synic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/synic/subscriptions", "organizations_url": "https://api.github.com/users/synic/orgs", "repos_url": "https://api.github.com/users/synic/repos", "events_url": "https://api.github.com/users/synic/events{/privacy}", "received_events_url": "https://api.github.com/users/synic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 611390077, "node_id": "MDU6TGFiZWw2MTEzOTAwNzc=", "url": "https://api.github.com/repos/encode/django-rest-framework/labels/Schema%20Generation", "name": "Schema Generation", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-04-02T21:20:39Z", "updated_at": "2020-04-09T23:24:46Z", "closed_at": "2020-04-06T13:22:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Maybe I'm jumping the gun here.\r\n\r\nWe've been using the new changes for a bit now, and everything works great. The only thing that we're missing is the ability to generate a proper schema for custom serializer fields.\r\n\r\nFor now, we've been doing this:\r\n\r\n```python\r\n\r\nclass AutoSchema(openapi.AutoSchema):\r\n    \"\"\"Extension of ``AutoSchema`` to add support for custom field schemas.\"\"\"\r\n\r\n    def _map_field(self, field):\r\n        if hasattr(field, \"get_schema\") and callable(field.get_schema):\r\n            return field.get_schema()\r\n\r\n        return super()._map_field(field)\r\n```\r\n\r\nHoping to bring it to your attention before the official release. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7250", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7250/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7250/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7250/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7250", "id": 590361322, "node_id": "MDU6SXNzdWU1OTAzNjEzMjI=", "number": 7250, "title": "Memory usage optimization on Serializer class", "user": {"login": "Anton-Shutik", "id": 1625053, "node_id": "MDQ6VXNlcjE2MjUwNTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1625053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anton-Shutik", "html_url": "https://github.com/Anton-Shutik", "followers_url": "https://api.github.com/users/Anton-Shutik/followers", "following_url": "https://api.github.com/users/Anton-Shutik/following{/other_user}", "gists_url": "https://api.github.com/users/Anton-Shutik/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anton-Shutik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anton-Shutik/subscriptions", "organizations_url": "https://api.github.com/users/Anton-Shutik/orgs", "repos_url": "https://api.github.com/users/Anton-Shutik/repos", "events_url": "https://api.github.com/users/Anton-Shutik/events{/privacy}", "received_events_url": "https://api.github.com/users/Anton-Shutik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-30T15:00:26Z", "updated_at": "2020-07-08T12:45:10Z", "closed_at": "2020-04-07T13:02:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Steps to reproduce\r\nLets say we have model like this:\r\n```python\r\nclass User(models.Model):\r\n    first_name = models.CharField()\r\n    last_name = models.CharField()\r\n```\r\nand serializer like this:\r\n```python\r\nclass UserSerializer(serializers.ModelSerializer):\r\n\r\n    class Meta:\r\n        model = User\r\n        fields = ('first_name', 'last_name')\r\n```\r\nand whenever we serialize python obj, the `data` property [has reference to serialize](https://github.com/encode/django-rest-framework/blob/master/rest_framework/serializers.py#L548)r:\r\n```python\r\nserializer = UserSerializer(instance=User.objects.first())\r\nserializer.data.serializer is serializer # gives true\r\n```\r\n\r\nIt works fine on small objects like in the example, but it starts consuming more memory with larger querysets and nested Serializers, just because of that `data.serializer` reference. Python reference counter cannot delete the `data.serializer` object, because `data` property references on that, and such a way we have to wait until GC collects it.\r\n\r\nThe `data.serializer` reference is only used (at least it is single usage I found) in [HTMLFormRenderer](https://github.com/encode/django-rest-framework/blob/master/rest_framework/renderers.py#L358) and it looks like overhead. Also I'm pretty sure there are lots of projects the do not use the renderer at all, but have to \"suffer\" from that extra memory usage.\r\n\r\nIf I change our serializer like below, it consumes less memory:\r\n```python\r\nclass UserSerializer(serializers.ModelSerializer):\r\n\r\n    @property\r\n    def data(self):\r\n        ret = super(Serializer, self).data\r\n        #return ReturnDict(ret, serializer=self)    <----original code\r\n        return ReturnDict(ret)\r\n```\r\n\r\nSo, my point is to make the `serializer` reference optional, depending if `HTMLFormRenderer` is used or not, or pass it via renderer context.\r\n\r\n```python\r\nclass GenericAPIView(views.APIView):\r\n\r\n    def get_serializer_context(self):\r\n        context = super().get_serializer_context()\r\n        context['needs_serializer_ref'] = HTMLFormRenderer in self.renderer_classes\r\n        return context\r\n```\r\nand then in serializer do:\r\n```python\r\nclass Serializer(BaseSerializer):\r\n\r\n    @property\r\n    def data(self):\r\n        ret = super(Serializer, self).data\r\n        if self.context.get('needs_serializer_ref'):\r\n            return ReturnDict(ret, serializer=self)\r\n        return ret\r\n```\r\nJust an idea.\r\n\r\nThoughts ?\r\n\r\nPS.\r\nReady to submit a PR\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7249", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7249/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7249/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7249/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7249", "id": 589698317, "node_id": "MDU6SXNzdWU1ODk2OTgzMTc=", "number": 7249, "title": "[Feature request] writable nested serializers via list_serializer_class", "user": {"login": "JEphron", "id": 1817241, "node_id": "MDQ6VXNlcjE4MTcyNDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1817241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JEphron", "html_url": "https://github.com/JEphron", "followers_url": "https://api.github.com/users/JEphron/followers", "following_url": "https://api.github.com/users/JEphron/following{/other_user}", "gists_url": "https://api.github.com/users/JEphron/gists{/gist_id}", "starred_url": "https://api.github.com/users/JEphron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JEphron/subscriptions", "organizations_url": "https://api.github.com/users/JEphron/orgs", "repos_url": "https://api.github.com/users/JEphron/repos", "events_url": "https://api.github.com/users/JEphron/events{/privacy}", "received_events_url": "https://api.github.com/users/JEphron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-29T01:59:44Z", "updated_at": "2020-04-01T06:48:32Z", "closed_at": "2020-03-29T20:20:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [docs](https://www.django-rest-framework.org/api-guide/serializers/#customizing-multiple-update) describe the difficulties of implementing \"writable nested serializers\" in a fully generic way, and instead recommend that you write a custom `ListSerializer` to capture the intended behavior. This works well enough:\r\n```py\r\nclass BookListSerializer(ListSerializer):\r\n    def update(self, instance, validated_data):\r\n        ...\r\n\r\nclass BookSerializer(ModelSerializer):\r\n    class Meta:\r\n        list_serializer_class = BookListSerializer\r\n        ...\r\n```\r\n\r\nhowever, consider the following (which fails):\r\n```py\r\nclass LibrarySerializer(ModelSerializer):\r\n    books = BookSerializer(many=True)\r\n    ...\r\n\r\ndef update_library(library, books):\r\n    s = LibrarySerializer(instance=library, data={'books': books}, partial=True)\r\n    s.is_valid()\r\n    s.save() # AssertionError: Write an explicit `.update()` method for serializer ...\r\n```\r\n\r\nI've already told DRF how I want `BookSerializer` to behave when asked to update a list, yet it doesn't use my implementation. Instead I must write the following boilerplate:\r\n\r\n```py\r\nclass LibrarySerializer(ModelSerializer):\r\n    books = BookSerializer(many=True)\r\n\r\n    def update(self, instance, validated_data):\r\n        books = validated_data.pop(\"books\")\r\n\r\n        ser = BookSerializer(\r\n            instance=instance.books,\r\n            data=books,\r\n            many=True,\r\n            partial=True,\r\n        )\r\n        ser.is_valid()\r\n        ser.save()\r\n\r\n        return instance\r\n\r\n```\r\n\r\nI'd like to propose that, if asked to perform a nested bulk update on a serializer with a `list_serializer_class` which contains an overridden `update`, DRF ought to use the `ListSerializer`'s update method by default. This would result in a significant reduction in boilerplate for projects that make heavy use of nested serializers. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7248", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7248/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7248/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7248/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7248", "id": 589247748, "node_id": "MDU6SXNzdWU1ODkyNDc3NDg=", "number": 7248, "title": "Is there a timeline on DRF 3.12.0?", "user": {"login": "synic", "id": 30906, "node_id": "MDQ6VXNlcjMwOTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/30906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/synic", "html_url": "https://github.com/synic", "followers_url": "https://api.github.com/users/synic/followers", "following_url": "https://api.github.com/users/synic/following{/other_user}", "gists_url": "https://api.github.com/users/synic/gists{/gist_id}", "starred_url": "https://api.github.com/users/synic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/synic/subscriptions", "organizations_url": "https://api.github.com/users/synic/orgs", "repos_url": "https://api.github.com/users/synic/repos", "events_url": "https://api.github.com/users/synic/events{/privacy}", "received_events_url": "https://api.github.com/users/synic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-27T16:20:57Z", "updated_at": "2020-03-27T16:42:26Z", "closed_at": "2020-03-27T16:35:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw that the documentation for DRF 3.12.0 was posted for a while, and then reversed.\r\n\r\nWe started using some of the new OpenAPI additions from master, figuring that if the documentation was posted, the release was not too far behind, but now that it's been reversed, I'm wondering if 3.12.0 has been pushed, or the changes that were documented were not complete?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7245", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7245/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7245/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7245/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7245", "id": 587656037, "node_id": "MDU6SXNzdWU1ODc2NTYwMzc=", "number": 7245, "title": "Incomplete documentation for using mixins with generics", "user": {"login": "siowyisheng", "id": 25425028, "node_id": "MDQ6VXNlcjI1NDI1MDI4", "avatar_url": "https://avatars3.githubusercontent.com/u/25425028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siowyisheng", "html_url": "https://github.com/siowyisheng", "followers_url": "https://api.github.com/users/siowyisheng/followers", "following_url": "https://api.github.com/users/siowyisheng/following{/other_user}", "gists_url": "https://api.github.com/users/siowyisheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/siowyisheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siowyisheng/subscriptions", "organizations_url": "https://api.github.com/users/siowyisheng/orgs", "repos_url": "https://api.github.com/users/siowyisheng/repos", "events_url": "https://api.github.com/users/siowyisheng/events{/privacy}", "received_events_url": "https://api.github.com/users/siowyisheng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-25T12:19:00Z", "updated_at": "2020-03-25T14:23:33Z", "closed_at": "2020-03-25T14:08:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "#5640 is a similar issue, but I have a more glaring example of this problem.\r\n\r\nI encountered this when using `DestroyModelMixin` with `CreateAPIView`. `.destroy()` gets added, but this doesn't actually add the ability to accept delete requests. It must be manually hooked up to the created `.destroy()` method. The only case where it gets mapped automatically is when a router is used or when a generic is used without a mixin. \r\n\r\nSo I had to dive into the module code to fix this, while I think this can be and should be made much clearer in the docs.\r\n\r\nThe [given examples in the docs](https://www.django-rest-framework.org/api-guide/generic-views/#examples) do not cover this.\r\n\r\nI'm happy to help to make a PR to update the docs if this is considered an issue worth fixing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7242", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7242/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7242/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7242/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7242", "id": 587023077, "node_id": "MDU6SXNzdWU1ODcwMjMwNzc=", "number": 7242, "title": "coreapi is abandoned", "user": {"login": "Rotzbua", "id": 7337347, "node_id": "MDQ6VXNlcjczMzczNDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/7337347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rotzbua", "html_url": "https://github.com/Rotzbua", "followers_url": "https://api.github.com/users/Rotzbua/followers", "following_url": "https://api.github.com/users/Rotzbua/following{/other_user}", "gists_url": "https://api.github.com/users/Rotzbua/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rotzbua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rotzbua/subscriptions", "organizations_url": "https://api.github.com/users/Rotzbua/orgs", "repos_url": "https://api.github.com/users/Rotzbua/repos", "events_url": "https://api.github.com/users/Rotzbua/events{/privacy}", "received_events_url": "https://api.github.com/users/Rotzbua/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-24T14:58:07Z", "updated_at": "2020-04-06T13:08:07Z", "closed_at": "2020-04-06T13:08:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n`coreapi` and `coreschema` has been abandoned.\r\n\r\nMost repositories are archived and just read only.\r\nhttps://github.com/core-api/python-client\r\nhttps://github.com/core-api/python-coreschema\r\n\r\n## Expected behavior\r\n\r\nAlternative libraries which are maintained? (security fixes?)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7241", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7241/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7241/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7241/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7241", "id": 586178962, "node_id": "MDU6SXNzdWU1ODYxNzg5NjI=", "number": 7241, "title": "Documentation: Show how throttling can be used with viewsets", "user": {"login": "ram-bv", "id": 53293609, "node_id": "MDQ6VXNlcjUzMjkzNjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/53293609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ram-bv", "html_url": "https://github.com/ram-bv", "followers_url": "https://api.github.com/users/ram-bv/followers", "following_url": "https://api.github.com/users/ram-bv/following{/other_user}", "gists_url": "https://api.github.com/users/ram-bv/gists{/gist_id}", "starred_url": "https://api.github.com/users/ram-bv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ram-bv/subscriptions", "organizations_url": "https://api.github.com/users/ram-bv/orgs", "repos_url": "https://api.github.com/users/ram-bv/repos", "events_url": "https://api.github.com/users/ram-bv/events{/privacy}", "received_events_url": "https://api.github.com/users/ram-bv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-23T12:40:15Z", "updated_at": "2020-03-23T13:26:50Z", "closed_at": "2020-03-23T12:53:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## The issue\r\n\r\n[The throttling documentation](https://www.django-rest-framework.org/api-guide/throttling/) shows how to define throttling for specific views, but we use viewsets, and it doesn't say how to use throttling with viewsets.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7240", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7240/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7240/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7240/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7240", "id": 585385058, "node_id": "MDU6SXNzdWU1ODUzODUwNTg=", "number": 7240, "title": "Feature request: support for Django 3.1's async views", "user": {"login": "seanfarley", "id": 20887, "node_id": "MDQ6VXNlcjIwODg3", "avatar_url": "https://avatars2.githubusercontent.com/u/20887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanfarley", "html_url": "https://github.com/seanfarley", "followers_url": "https://api.github.com/users/seanfarley/followers", "following_url": "https://api.github.com/users/seanfarley/following{/other_user}", "gists_url": "https://api.github.com/users/seanfarley/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanfarley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanfarley/subscriptions", "organizations_url": "https://api.github.com/users/seanfarley/orgs", "repos_url": "https://api.github.com/users/seanfarley/repos", "events_url": "https://api.github.com/users/seanfarley/events{/privacy}", "received_events_url": "https://api.github.com/users/seanfarley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-20T23:59:33Z", "updated_at": "2020-04-07T12:45:04Z", "closed_at": "2020-04-06T12:09:05Z", "author_association": "NONE", "active_lock_reason": "too heated", "body": "## Checklist\r\n\r\n- [X] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [X] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [X] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [X] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [X] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\nThis is a feature request for supporting the upcoming feature of Django 3.1 for async views.\r\n\r\n## Expected behavior\r\nNot through an assertion.\r\n\r\n## Actual behavior\r\nAssertion is thrown (understandably): ``Expected a `Response`, `HttpResponse` or `HttpStreamingResponse` to be returned from the view, but received a `<class 'coroutine'>``", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7236", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7236/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7236/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7236/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7236", "id": 584623331, "node_id": "MDU6SXNzdWU1ODQ2MjMzMzE=", "number": 7236, "title": "Serializer MultiPartParser allow_null IntegerField not working", "user": {"login": "jamalroger", "id": 36031772, "node_id": "MDQ6VXNlcjM2MDMxNzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/36031772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamalroger", "html_url": "https://github.com/jamalroger", "followers_url": "https://api.github.com/users/jamalroger/followers", "following_url": "https://api.github.com/users/jamalroger/following{/other_user}", "gists_url": "https://api.github.com/users/jamalroger/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamalroger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamalroger/subscriptions", "organizations_url": "https://api.github.com/users/jamalroger/orgs", "repos_url": "https://api.github.com/users/jamalroger/repos", "events_url": "https://api.github.com/users/jamalroger/events{/privacy}", "received_events_url": "https://api.github.com/users/jamalroger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-19T18:45:49Z", "updated_at": "2020-03-20T23:30:15Z", "closed_at": "2020-03-20T23:30:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nHi developers i used IntegerField(allow_null=True) to validate Integer but  allow_null=True did not work\r\nwith MultiPartParser  \r\n```\r\n   cost = serializers.IntegerField(allow_null=True)\r\n```\r\nand data of  comming request is \r\n```\r\n    <QueryDict: {'cost': ['null']}>\r\n```\r\nnotice that is worked with JSONParser\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7231", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7231/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7231/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7231/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7231", "id": 581730305, "node_id": "MDU6SXNzdWU1ODE3MzAzMDU=", "number": 7231, "title": "Implement `Request.__repr__` to show useful information about the request", "user": {"login": "cool-RR", "id": 56778, "node_id": "MDQ6VXNlcjU2Nzc4", "avatar_url": "https://avatars1.githubusercontent.com/u/56778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cool-RR", "html_url": "https://github.com/cool-RR", "followers_url": "https://api.github.com/users/cool-RR/followers", "following_url": "https://api.github.com/users/cool-RR/following{/other_user}", "gists_url": "https://api.github.com/users/cool-RR/gists{/gist_id}", "starred_url": "https://api.github.com/users/cool-RR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cool-RR/subscriptions", "organizations_url": "https://api.github.com/users/cool-RR/orgs", "repos_url": "https://api.github.com/users/cool-RR/repos", "events_url": "https://api.github.com/users/cool-RR/events{/privacy}", "received_events_url": "https://api.github.com/users/cool-RR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-15T16:06:43Z", "updated_at": "2020-03-29T11:01:15Z", "closed_at": "2020-03-29T11:01:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\nThe path, for starters, would be useful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7221", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7221/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7221/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7221/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7221", "id": 576861511, "node_id": "MDU6SXNzdWU1NzY4NjE1MTE=", "number": 7221, "title": "Any good practice to caching ModelViewSet?", "user": {"login": "marefati110", "id": 42033084, "node_id": "MDQ6VXNlcjQyMDMzMDg0", "avatar_url": "https://avatars1.githubusercontent.com/u/42033084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marefati110", "html_url": "https://github.com/marefati110", "followers_url": "https://api.github.com/users/marefati110/followers", "following_url": "https://api.github.com/users/marefati110/following{/other_user}", "gists_url": "https://api.github.com/users/marefati110/gists{/gist_id}", "starred_url": "https://api.github.com/users/marefati110/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marefati110/subscriptions", "organizations_url": "https://api.github.com/users/marefati110/orgs", "repos_url": "https://api.github.com/users/marefati110/repos", "events_url": "https://api.github.com/users/marefati110/events{/privacy}", "received_events_url": "https://api.github.com/users/marefati110/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-06T11:09:17Z", "updated_at": "2020-03-09T22:45:26Z", "closed_at": "2020-03-06T11:13:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ ] I have reduced the issue to the simplest possible case.\r\n- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\n## Expected behavior\r\n\r\n## Actual behavior\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7216", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7216/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7216/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7216/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7216", "id": 576007834, "node_id": "MDU6SXNzdWU1NzYwMDc4MzQ=", "number": 7216, "title": "ViewSet extra action detection is too permissive.", "user": {"login": "rbusquet", "id": 7198302, "node_id": "MDQ6VXNlcjcxOTgzMDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7198302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbusquet", "html_url": "https://github.com/rbusquet", "followers_url": "https://api.github.com/users/rbusquet/followers", "following_url": "https://api.github.com/users/rbusquet/following{/other_user}", "gists_url": "https://api.github.com/users/rbusquet/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbusquet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbusquet/subscriptions", "organizations_url": "https://api.github.com/users/rbusquet/orgs", "repos_url": "https://api.github.com/users/rbusquet/repos", "events_url": "https://api.github.com/users/rbusquet/events{/privacy}", "received_events_url": "https://api.github.com/users/rbusquet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-05T05:45:21Z", "updated_at": "2020-03-05T10:18:23Z", "closed_at": "2020-03-05T10:18:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [x] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [x] I have reduced the issue to the simplest possible case.\r\n- [x] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nAdd any attribute to a ViewSet to which `hasattr(attr, 'mapping')` returns True. A case I got in a work project is that, because of a certain mock, one of the attributes of a viewset became a `MagicMock` instance. `hasattr(MagicMock(), 'mapping')` returns True (actually it returns True for **any** attribute you pass as the second parameter of `hasattr`), causing the same issue.\r\n\r\n## Expected behavior\r\n\r\nThis attribute should not be accounted as an \"action\"\r\n\r\n## Actual behavior\r\n\r\nBy itself, `get_extra_actions` will return any attribute with a `mapping` attribute. \r\n\r\nIf the viewset is used with a router, the test suite fails to initialize because SimpleRouter expect `get_extra_actions` to only return methods:\r\n\r\n```\r\ntests/test_viewsets.py:102: in <module>\r\n    url(r'^api/', include(router.urls)),\r\nrest_framework/routers.py:78: in urls\r\n    self._urls = self.get_urls()\r\nrest_framework/routers.py:237: in get_urls\r\n    routes = self.get_routes(viewset)\r\nrest_framework/routers.py:156: in get_routes\r\n    not_allowed = [\r\nrest_framework/routers.py:158: in <listcomp>\r\n    if action.__name__ in known_actions\r\nE   AttributeError: 'ThingWithMapping' object has no attribute '__name__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7213", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7213/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7213/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7213/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7213", "id": 575161264, "node_id": "MDU6SXNzdWU1NzUxNjEyNjQ=", "number": 7213, "title": "Feature Request: generateschema should parse query string parameters in Docstring", "user": {"login": "rpaknahad", "id": 20041665, "node_id": "MDQ6VXNlcjIwMDQxNjY1", "avatar_url": "https://avatars2.githubusercontent.com/u/20041665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpaknahad", "html_url": "https://github.com/rpaknahad", "followers_url": "https://api.github.com/users/rpaknahad/followers", "following_url": "https://api.github.com/users/rpaknahad/following{/other_user}", "gists_url": "https://api.github.com/users/rpaknahad/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpaknahad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpaknahad/subscriptions", "organizations_url": "https://api.github.com/users/rpaknahad/orgs", "repos_url": "https://api.github.com/users/rpaknahad/repos", "events_url": "https://api.github.com/users/rpaknahad/events{/privacy}", "received_events_url": "https://api.github.com/users/rpaknahad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-04T06:09:59Z", "updated_at": "2020-03-04T07:04:19Z", "closed_at": "2020-03-04T07:04:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using DRF`s generateschema command, Docstring inline documentations are automatically parsed, but there is no way to add extra query parameters or document existing parameters inside that Docstring.\r\nHere is an example:\r\n\r\n```\r\n@action(detail=False, methods=['post'])\r\ndef add(self, request):\r\n  \"\"\"\r\n  Adds a new account\r\n  parameters:\r\n  - in: query\r\n    name: service_id\r\n    type: string\r\n    required: true\r\n    description: Identifier of the service\r\n\"\"\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7212", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7212/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7212/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7212/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7212", "id": 574718021, "node_id": "MDU6SXNzdWU1NzQ3MTgwMjE=", "number": 7212, "title": "How to specify query string parameters in Docstring", "user": {"login": "rpaknahad", "id": 20041665, "node_id": "MDQ6VXNlcjIwMDQxNjY1", "avatar_url": "https://avatars2.githubusercontent.com/u/20041665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpaknahad", "html_url": "https://github.com/rpaknahad", "followers_url": "https://api.github.com/users/rpaknahad/followers", "following_url": "https://api.github.com/users/rpaknahad/following{/other_user}", "gists_url": "https://api.github.com/users/rpaknahad/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpaknahad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpaknahad/subscriptions", "organizations_url": "https://api.github.com/users/rpaknahad/orgs", "repos_url": "https://api.github.com/users/rpaknahad/repos", "events_url": "https://api.github.com/users/rpaknahad/events{/privacy}", "received_events_url": "https://api.github.com/users/rpaknahad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-03T14:44:24Z", "updated_at": "2020-03-03T15:00:43Z", "closed_at": "2020-03-03T15:00:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everybody,\r\nI want to use Docstring to document request query strings for a specific route. Is it possible?\r\n\r\nHere is an example I have tried but not worked:\r\n\r\n@action(detail=False, methods=['post'])\r\n    def add(self, request):\r\n        \"\"\"\r\n        Adds a new account\r\n        parameters:\r\n            - in: query\r\n              name: service_id\r\n              schema:\r\n                type: string\r\n              required: true\r\n              description: Identifier of the service\r\n        \"\"\"\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7210", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7210/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7210/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7210/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7210", "id": 573934628, "node_id": "MDU6SXNzdWU1NzM5MzQ2Mjg=", "number": 7210, "title": "AttributeError: 'WSGIRequest' object has no attribute 'auth'", "user": {"login": "a-c-sreedhar-reddy", "id": 16081083, "node_id": "MDQ6VXNlcjE2MDgxMDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/16081083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-c-sreedhar-reddy", "html_url": "https://github.com/a-c-sreedhar-reddy", "followers_url": "https://api.github.com/users/a-c-sreedhar-reddy/followers", "following_url": "https://api.github.com/users/a-c-sreedhar-reddy/following{/other_user}", "gists_url": "https://api.github.com/users/a-c-sreedhar-reddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-c-sreedhar-reddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-c-sreedhar-reddy/subscriptions", "organizations_url": "https://api.github.com/users/a-c-sreedhar-reddy/orgs", "repos_url": "https://api.github.com/users/a-c-sreedhar-reddy/repos", "events_url": "https://api.github.com/users/a-c-sreedhar-reddy/events{/privacy}", "received_events_url": "https://api.github.com/users/a-c-sreedhar-reddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-02T12:15:16Z", "updated_at": "2020-03-02T12:41:07Z", "closed_at": "2020-03-02T12:35:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using Token based authentication I fetched token with apiView and then when a request is made with the token the user in `request.user` is `AnonymousUser` and the `request.auth` throws error `AttributeError: 'WSGIRequest' object has no attribute 'auth'` \r\n\r\n\r\n```\r\nEnvironment:\r\n\r\n\r\nRequest Method: GET\r\nRequest URL: http://127.0.0.1:8000/planter/testlogin\r\n\r\nDjango Version: 3.0.3\r\nPython Version: 3.6.9\r\nInstalled Applications:\r\n['django.contrib.admin',\r\n 'django.contrib.auth',\r\n 'django.contrib.contenttypes',\r\n 'django.contrib.sessions',\r\n 'django.contrib.messages',\r\n 'django.contrib.staticfiles',\r\n 'planter.apps.PlanterConfig',\r\n 'graphene_django',\r\n 'rest_framework.authtoken']\r\nInstalled Middleware:\r\n['django.middleware.security.SecurityMiddleware',\r\n 'django.contrib.sessions.middleware.SessionMiddleware',\r\n 'django.middleware.common.CommonMiddleware',\r\n 'django.middleware.csrf.CsrfViewMiddleware',\r\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n 'django.contrib.messages.middleware.MessageMiddleware',\r\n 'django.middleware.clickjacking.XFrameOptionsMiddleware']\r\n\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/a-c-sreedhar-reddy/Desktop/plant/venv/lib/python3.6/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/home/a-c-sreedhar-reddy/Desktop/plant/venv/lib/python3.6/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/a-c-sreedhar-reddy/Desktop/plant/venv/lib/python3.6/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/a-c-sreedhar-reddy/Desktop/plant/planter/views.py\", line 36, in testlogin\r\n    print(request.auth)\r\n\r\nException Type: AttributeError at /planter/testlogin\r\nException Value: 'WSGIRequest' object has no attribute 'auth'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7205", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7205/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7205/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7205/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7205", "id": 572899658, "node_id": "MDU6SXNzdWU1NzI4OTk2NTg=", "number": 7205, "title": "OpenAPI schema generator is not production ready", "user": {"login": "Behoston", "id": 7823689, "node_id": "MDQ6VXNlcjc4MjM2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7823689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Behoston", "html_url": "https://github.com/Behoston", "followers_url": "https://api.github.com/users/Behoston/followers", "following_url": "https://api.github.com/users/Behoston/following{/other_user}", "gists_url": "https://api.github.com/users/Behoston/gists{/gist_id}", "starred_url": "https://api.github.com/users/Behoston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Behoston/subscriptions", "organizations_url": "https://api.github.com/users/Behoston/orgs", "repos_url": "https://api.github.com/users/Behoston/repos", "events_url": "https://api.github.com/users/Behoston/events{/privacy}", "received_events_url": "https://api.github.com/users/Behoston/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 611390077, "node_id": "MDU6TGFiZWw2MTEzOTAwNzc=", "url": "https://api.github.com/repos/encode/django-rest-framework/labels/Schema%20Generation", "name": "Schema Generation", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-28T17:31:13Z", "updated_at": "2020-04-06T13:05:41Z", "closed_at": "2020-04-06T13:05:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have general issue with Open API schema generator, it looks like someone wants too hard to deliver this. I decided to create one issue for all problems and not use template - sorry.\r\n\r\n- Previously created issue: https://github.com/encode/django-rest-framework/issues/7204 - URL regexp is invalid for swagger editor (works with Swagger UI, but many other tools just fails, UI can work even if schema is very bad, so please do not use it as reference).\r\n- Create status code are 200, should be 201\r\n- Required fields in response is empty list if no fields required but should be absent. `required: []` \u2192 ` `\r\n- Security schemes is not supported at all, but swagger can differ depends on user is logged whether or not  (already implemented, so it's inconsistent).\r\n\r\nIn most cases, schema is invalid or not representing actual API. I think, you should revert this feature, fix all issues, add some tests then release it again. Other source code in DRF is top quality, but this part looks/works bad :/ ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7204", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7204/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7204/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7204/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7204", "id": 572726273, "node_id": "MDU6SXNzdWU1NzI3MjYyNzM=", "number": 7204, "title": "Error mapping Python regex to OpenAPI.", "user": {"login": "Behoston", "id": 7823689, "node_id": "MDQ6VXNlcjc4MjM2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7823689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Behoston", "html_url": "https://github.com/Behoston", "followers_url": "https://api.github.com/users/Behoston/followers", "following_url": "https://api.github.com/users/Behoston/following{/other_user}", "gists_url": "https://api.github.com/users/Behoston/gists{/gist_id}", "starred_url": "https://api.github.com/users/Behoston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Behoston/subscriptions", "organizations_url": "https://api.github.com/users/Behoston/orgs", "repos_url": "https://api.github.com/users/Behoston/repos", "events_url": "https://api.github.com/users/Behoston/events{/privacy}", "received_events_url": "https://api.github.com/users/Behoston/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 611390077, "node_id": "MDU6TGFiZWw2MTEzOTAwNzc=", "url": "https://api.github.com/repos/encode/django-rest-framework/labels/Schema%20Generation", "name": "Schema Generation", "color": "d4c5f9", "default": false, "description": null}, {"id": 730098405, "node_id": "MDU6TGFiZWw3MzAwOTg0MDU=", "url": "https://api.github.com/repos/encode/django-rest-framework/labels/help%20wanted", "name": "help wanted", "color": "fc7c2d", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-28T12:28:39Z", "updated_at": "2020-06-28T12:29:00Z", "closed_at": "2020-06-28T12:29:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Checklist\r\n\r\n- [ v ] I have verified that that issue exists against the `master` branch of Django REST framework.\r\n- [ v ] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.\r\n- [ v ] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)\r\n- [ x ] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)\r\n- [ v ] I have reduced the issue to the simplest possible case.\r\n- [ x ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)\r\n\r\n## Steps to reproduce\r\n\r\nUse `URLField` in model and use openapi schema generator. Then copy-paste generated JSON to editor.swagger.io\r\n\r\n## Expected behavior\r\n\r\nRegexp should be valid for openapi.\r\n\r\n\r\n## Actual behavior\r\n\r\nRegexp is invalid.\r\n\r\n\r\n![obraz](https://user-images.githubusercontent.com/7823689/75548411-7c14fd80-5a2d-11ea-8f37-c62521911eab.png)\r\n\r\n\r\n```yml\r\npattern: \"^(?:[a-z0-9\\\\.\\\\-\\\\+]*)://(?:[^\\\\s:@/]+(?::[^\\\\s:@/]*)?@)?(?:(?:25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)){3}|\\\\[[0-9a-f:\\\\.]+\\\\]|([a-z\u00a1-\\uFFFF0-9](?:[a-z\u00a1-\\uFFFF0-9-]{0,61}[a-z\u00a1-\\uFFFF0-9])?(?:\\\\.(?!-)[a-z\u00a1-\\uFFFF0-9-]{1,63}(?<!-))*\\\\.(?!-)(?:[a-z\u00a1-\\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\\\.?|localhost))(?::\\\\d{2,5})?(?:[/?#][^\\\\s]*)?\\\\Z\"\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/encode/django-rest-framework/issues/7203", "repository_url": "https://api.github.com/repos/encode/django-rest-framework", "labels_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7203/labels{/name}", "comments_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7203/comments", "events_url": "https://api.github.com/repos/encode/django-rest-framework/issues/7203/events", "html_url": "https://github.com/encode/django-rest-framework/issues/7203", "id": 572321483, "node_id": "MDU6SXNzdWU1NzIzMjE0ODM=", "number": 7203, "title": "3.11 release notes are missing", "user": {"login": "Pomax", "id": 177243, "node_id": "MDQ6VXNlcjE3NzI0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/177243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pomax", "html_url": "https://github.com/Pomax", "followers_url": "https://api.github.com/users/Pomax/followers", "following_url": "https://api.github.com/users/Pomax/following{/other_user}", "gists_url": "https://api.github.com/users/Pomax/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pomax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pomax/subscriptions", "organizations_url": "https://api.github.com/users/Pomax/orgs", "repos_url": "https://api.github.com/users/Pomax/repos", "events_url": "https://api.github.com/users/Pomax/events{/privacy}", "received_events_url": "https://api.github.com/users/Pomax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-27T19:56:52Z", "updated_at": "2020-02-28T02:59:28Z", "closed_at": "2020-02-28T02:59:27Z", "author_association": "NONE", "active_lock_reason": null, "body": " https://www.django-rest-framework.org/community/release-notes/ only goes up to 3.10.x", "performed_via_github_app": null, "score": 1.0}]}