{"total_count": 269, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/811", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/811/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/811/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/811/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/811", "id": 683240485, "node_id": "MDU6SXNzdWU2ODMyNDA0ODU=", "number": 811, "title": "JSON API 1.1 RC 2 Local ID", "user": {"login": "auvipy", "id": 6212603, "node_id": "MDQ6VXNlcjYyMTI2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6212603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auvipy", "html_url": "https://github.com/auvipy", "followers_url": "https://api.github.com/users/auvipy/followers", "following_url": "https://api.github.com/users/auvipy/following{/other_user}", "gists_url": "https://api.github.com/users/auvipy/gists{/gist_id}", "starred_url": "https://api.github.com/users/auvipy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auvipy/subscriptions", "organizations_url": "https://api.github.com/users/auvipy/orgs", "repos_url": "https://api.github.com/users/auvipy/repos", "events_url": "https://api.github.com/users/auvipy/events{/privacy}", "received_events_url": "https://api.github.com/users/auvipy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-21T03:53:53Z", "updated_at": "2020-08-21T20:33:37Z", "closed_at": "2020-08-21T20:33:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://jsonapi.org/format/1.1/#document-resource-object-identification", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/810", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/810/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/810/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/810/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/810", "id": 683230306, "node_id": "MDU6SXNzdWU2ODMyMzAzMDY=", "number": 810, "title": "JSON API 1.1 RC 2 Extensions", "user": {"login": "auvipy", "id": 6212603, "node_id": "MDQ6VXNlcjYyMTI2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6212603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auvipy", "html_url": "https://github.com/auvipy", "followers_url": "https://api.github.com/users/auvipy/followers", "following_url": "https://api.github.com/users/auvipy/following{/other_user}", "gists_url": "https://api.github.com/users/auvipy/gists{/gist_id}", "starred_url": "https://api.github.com/users/auvipy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auvipy/subscriptions", "organizations_url": "https://api.github.com/users/auvipy/orgs", "repos_url": "https://api.github.com/users/auvipy/repos", "events_url": "https://api.github.com/users/auvipy/events{/privacy}", "received_events_url": "https://api.github.com/users/auvipy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-21T03:22:39Z", "updated_at": "2020-08-21T20:33:06Z", "closed_at": "2020-08-21T20:33:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://jsonapi.org/format/1.1/#extensions", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/803", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/803/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/803/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/803/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/803", "id": 675155359, "node_id": "MDU6SXNzdWU2NzUxNTUzNTk=", "number": 803, "title": "django-polymorphic appears to not support Django>3.0", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-08-07T17:11:11Z", "updated_at": "2020-08-18T12:44:22Z", "closed_at": "2020-08-18T12:44:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I don't use polymorphic but noticed that the docs build was failing with this traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/alan/src/kezy182/.tox/docs/lib/python3.6/site-packages/sphinx/config.py\", line 319, in eval_config_file\r\n    execfile_(filename, namespace)\r\n  File \"/Users/alan/src/kezy182/.tox/docs/lib/python3.6/site-packages/sphinx/util/pycompat.py\", line 88, in execfile_\r\n    exec(code, _globals)\r\n  File \"/Users/alan/src/kezy182/docs/conf.py\", line 31, in <module>\r\n    django.setup()\r\n  File \"/Users/alan/src/kezy182/.tox/docs/lib/python3.6/site-packages/django/__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"/Users/alan/src/kezy182/.tox/docs/lib/python3.6/site-packages/django/apps/registry.py\", line 114, in populate\r\n    app_config.import_models()\r\n  File \"/Users/alan/src/kezy182/.tox/docs/lib/python3.6/site-packages/django/apps/config.py\", line 211, in import_models\r\n    self.models_module = import_module(models_module_name)\r\n  File \"/Users/ac45/.pyenv/versions/3.6.10/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/Users/alan/src/kezy182/.tox/docs/lib/python3.6/site-packages/polymorphic/models.py\", line 17, in <module>\r\n    from .base import PolymorphicModelBase\r\n  File \"/Users/alan/src/kezy182/.tox/docs/lib/python3.6/site-packages/polymorphic/base.py\", line 18, in <module>\r\n    from .managers import PolymorphicManager\r\n  File \"/Users/alan/src/kezy182/.tox/docs/lib/python3.6/site-packages/polymorphic/managers.py\", line 10, in <module>\r\n    from polymorphic.query import PolymorphicQuerySet\r\n  File \"/Users/alan/src/kezy182/.tox/docs/lib/python3.6/site-packages/polymorphic/query.py\", line 11, in <module>\r\n    from django.db.models import FieldDoesNotExist\r\nImportError: cannot import name 'FieldDoesNotExist'\r\n```\r\n\r\nI worked around this by forcing `Django>=2.2,<3.0` to get the docs built. PR coming shortly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/800", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/800/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/800/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/800/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/800", "id": 654749745, "node_id": "MDU6SXNzdWU2NTQ3NDk3NDU=", "number": 800, "title": "How to get full request body data", "user": {"login": "NFS002", "id": 29028118, "node_id": "MDQ6VXNlcjI5MDI4MTE4", "avatar_url": "https://avatars1.githubusercontent.com/u/29028118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NFS002", "html_url": "https://github.com/NFS002", "followers_url": "https://api.github.com/users/NFS002/followers", "following_url": "https://api.github.com/users/NFS002/following{/other_user}", "gists_url": "https://api.github.com/users/NFS002/gists{/gist_id}", "starred_url": "https://api.github.com/users/NFS002/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NFS002/subscriptions", "organizations_url": "https://api.github.com/users/NFS002/orgs", "repos_url": "https://api.github.com/users/NFS002/repos", "events_url": "https://api.github.com/users/NFS002/events{/privacy}", "received_events_url": "https://api.github.com/users/NFS002/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-10T12:34:42Z", "updated_at": "2020-07-14T12:50:45Z", "closed_at": "2020-07-14T12:50:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nIf I have used the package correctly, when you post data to an api endpoint with content type set to appliction/vnd.api+json, and then you access the request.data attribute, it only shows the attributes dict of the posted data, how do you access the full request body ? Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/794", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/794/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/794/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/794", "id": 630747287, "node_id": "MDU6SXNzdWU2MzA3NDcyODc=", "number": 794, "title": "Add possibility to filter included resources", "user": {"login": "gelmiro", "id": 19762022, "node_id": "MDQ6VXNlcjE5NzYyMDIy", "avatar_url": "https://avatars3.githubusercontent.com/u/19762022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gelmiro", "html_url": "https://github.com/gelmiro", "followers_url": "https://api.github.com/users/gelmiro/followers", "following_url": "https://api.github.com/users/gelmiro/following{/other_user}", "gists_url": "https://api.github.com/users/gelmiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/gelmiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gelmiro/subscriptions", "organizations_url": "https://api.github.com/users/gelmiro/orgs", "repos_url": "https://api.github.com/users/gelmiro/repos", "events_url": "https://api.github.com/users/gelmiro/events{/privacy}", "received_events_url": "https://api.github.com/users/gelmiro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-04T11:39:04Z", "updated_at": "2020-08-18T09:26:30Z", "closed_at": "2020-08-18T09:26:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nRight now we don't have possibility to filter included resources I guess. Example:\r\nWe have situation:\r\n```\r\nclass Category(models.Model):\r\n    name = models.CharField()\r\n\r\nclass Movie(models.Model):\r\n    name = models.CharField()\r\n    rating = models.IntegerField()\r\n    category = models.FereignKey(Category, related_name='movies')\r\n\r\nclass CategorySerializer(ModelSerializer):\r\n    included_serializers = {\r\n         'movies': 'MovieSerializer'\r\n}\r\n    class Meta:\r\n        model = Category\r\n        fields = ('name', 'movies')\r\n\r\nclass MovieSerializer(ModelSerializer):\r\n    class Meta:\r\n        model = Movie\r\n        fields = ('name', 'rating')\r\n```\r\nIn this situation in `relationships` field for `/category/` I will get `movies` with a list of ids. I want to filter `movies` with specific parameter i.e. `/category/?filter[movies.rating.gte]=5&include=movies`\r\n\r\nCan I achieve this somehow?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/786", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/786/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/786/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/786/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/786", "id": 614037501, "node_id": "MDU6SXNzdWU2MTQwMzc1MDE=", "number": 786, "title": "Does DEFAULT_FILTER_BACKENDS provide filters for ModelViewSet by default?", "user": {"login": "Johnz86", "id": 2708520, "node_id": "MDQ6VXNlcjI3MDg1MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2708520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Johnz86", "html_url": "https://github.com/Johnz86", "followers_url": "https://api.github.com/users/Johnz86/followers", "following_url": "https://api.github.com/users/Johnz86/following{/other_user}", "gists_url": "https://api.github.com/users/Johnz86/gists{/gist_id}", "starred_url": "https://api.github.com/users/Johnz86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Johnz86/subscriptions", "organizations_url": "https://api.github.com/users/Johnz86/orgs", "repos_url": "https://api.github.com/users/Johnz86/repos", "events_url": "https://api.github.com/users/Johnz86/events{/privacy}", "received_events_url": "https://api.github.com/users/Johnz86/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-07T12:58:02Z", "updated_at": "2020-06-06T19:12:32Z", "closed_at": "2020-06-06T19:12:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Documentation for [Default_FILTER_BACKEND says](https://github.com/django-json-api/django-rest-framework-json-api/blob/master/docs/usage.md#configuring-filter-backends):\r\n```\r\nYou can configure the filter backends either by setting the REST_FRAMEWORK['DEFAULT_FILTER_BACKENDS'] as shown in the example settings or individually add them as .filter_backends View attributes:\r\n```\r\nSo I thought that when I add the configuration\r\n```python\r\nREST_FRAMEWORK = {\r\n    'DEFAULT_PERMISSION_CLASSES': [\r\n        'rest_framework.permissions.IsAuthenticated'\r\n    ],\r\n    'PAGE_SIZE': 20,\r\n    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',\r\n    'DEFAULT_PAGINATION_CLASS':\r\n        'rest_framework_json_api.pagination.JsonApiPageNumberPagination',\r\n    'DEFAULT_PARSER_CLASSES': (\r\n        'rest_framework_json_api.parsers.JSONParser',\r\n        'rest_framework.parsers.FormParser',\r\n        'rest_framework.parsers.MultiPartParser'\r\n    ),\r\n    'DEFAULT_RENDERER_CLASSES': (\r\n        'rest_framework_json_api.renderers.JSONRenderer',\r\n        'rest_framework.renderers.BrowsableAPIRenderer',\r\n    ),\r\n    'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',\r\n    'DEFAULT_FILTER_BACKENDS': (\r\n        'rest_framework_json_api.filters.QueryParameterValidationFilter',\r\n        'rest_framework_json_api.filters.OrderingFilter',\r\n        'rest_framework_json_api.django_filters.DjangoFilterBackend',\r\n        'rest_framework.filters.SearchFilter',\r\n    ),\r\n    'SEARCH_PARAM': 'filter[search]',\r\n    'TEST_REQUEST_RENDERER_CLASSES': (\r\n        'rest_framework_json_api.renderers.JSONRenderer',\r\n    ),\r\n    'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json'\r\n}\r\n```\r\nAnd then for my model create viewset:\r\n```python\r\nclass PatientView(viewsets.ModelViewSet):\r\n    serializer_class = PatientInformationSerializer\r\n    queryset = PatientInformation.objects.all()\r\n```\r\nIncluded with simple urls\r\n```\r\nrouter.register('patient', PatientView)\r\n```\r\nThen I will get filtering on the viewset out of the box, when I hit for example url\r\n```\r\nhttp://127.0.0.1:8000/api/patient?filter[name.icontains]=jo\r\n```\r\nInstead I will get:\r\n```json\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"detail\": \"invalid filter[name__icontains]\",\r\n      \"status\": \"400\",\r\n      \"source\": {\r\n        \"pointer\": \"/data\"\r\n      },\r\n      \"code\": \"invalid\"\r\n    }\r\n  ]\r\n}\r\n```\r\nIf I change the code:\r\n```python\r\nclass PatientView(viewsets.ModelViewSet):\r\n    serializer_class = PatientInformationSerializer\r\n    queryset = PatientInformation.objects.all()\r\n    filter_backends = (filters.QueryParameterValidationFilter, filters.OrderingFilter,\r\n                        django_filters.DjangoFilterBackend, SearchFilter)\r\n    filterset_fields = {\r\n        'name': ('icontains', 'iexact', 'contains')\r\n    }\r\n    search_fields = ('name')   \r\n```\r\nI will get succesfull response.\r\n\r\nSo my question is documentation wrong and you need to define filter_backends? Did I miss some configuration, if I want some default behavior for Views?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/784", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/784/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/784/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/784/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/784", "id": 604085902, "node_id": "MDU6SXNzdWU2MDQwODU5MDI=", "number": 784, "title": "Issues with RelationshipView PATCH endpoint (to-many)", "user": {"login": "lingxiaoyang", "id": 8630726, "node_id": "MDQ6VXNlcjg2MzA3MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8630726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lingxiaoyang", "html_url": "https://github.com/lingxiaoyang", "followers_url": "https://api.github.com/users/lingxiaoyang/followers", "following_url": "https://api.github.com/users/lingxiaoyang/following{/other_user}", "gists_url": "https://api.github.com/users/lingxiaoyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/lingxiaoyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lingxiaoyang/subscriptions", "organizations_url": "https://api.github.com/users/lingxiaoyang/orgs", "repos_url": "https://api.github.com/users/lingxiaoyang/repos", "events_url": "https://api.github.com/users/lingxiaoyang/events{/privacy}", "received_events_url": "https://api.github.com/users/lingxiaoyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-21T15:24:16Z", "updated_at": "2020-06-13T13:00:55Z", "closed_at": "2020-06-13T13:00:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks, I think I run into two unexpected behaviors with RelationshipView's PATCH endpoint when the relationship is to-many. I'm fairly new on JSON:API, so in case I'm doing anything wrong, please let me know!\r\n\r\nThe 1st issue is that, the endpoint throws an IntegrityError when PATCHing the endpoint with the same object as retrieved.\r\n\r\nThe 2nd issue is that, the endpoint incorrectly deletes the actual related object when PATCHing with an empty list, while I only expect it to delete the relationship from the m2m table.\r\n\r\nThe POST and DELETE endpoints were working as expected.\r\n\r\n## Steps to replicate\r\n\r\nI was able to replicate it with a minimal example https://github.com/lingxiaoyang/dja-patch-issue on Python 3.8 and the latest stable Django, DRF and both stable and master DJA. \r\n\r\nTo replicate, please clone my test repo and run:\r\n\r\n```bash\r\ndocker-compose up\r\ndocker-compose run web ./manage.py migrate\r\ndocker-compose run web ./manage.py shell\r\n```\r\n\r\nIn the shell, create the base objects:\r\n\r\n```python\r\nfrom dja_patch_issue.models import Article, Tag\r\nArticle.objects.create()\r\nTag.objects.create()\r\n```\r\n\r\n<details>\r\n  <summary>Proof</summary>\r\n\r\n```\r\n$ docker-compose run web ./manage.py shell\r\nPython 3.8.2 (default, Apr 16 2020, 18:25:46)\r\n[GCC 8.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n(InteractiveConsole)\r\n>>> from dja_patch_issue.models import Article, Tag\r\n>>> Article.objects.create()\r\n<Article: id=1>\r\n>>> Tag.objects.create()\r\n<Tag: id=1>\r\n>>> Tag.objects.all()\r\n<QuerySet [<Tag: id=1>]>\r\n>>>\r\n```\r\n</details>\r\n\r\nThe endpoint to test is either:   \r\nhttp://localhost:8000/articles/1/relationships/tags/ or   \r\nhttp://localhost:8000/tags/1/relationships/articles/\r\n\r\n\r\n<details>\r\n  <summary>First, GET the relationship endpoint and verify the data is empty</summary>\r\n\r\n```\r\n$ curl -i -X GET http://localhost:8000/articles/1/relationships/tags/\r\nHTTP/1.1 200 OK\r\nDate: Tue, 21 Apr 2020 14:06:36 GMT\r\nServer: WSGIServer/0.2 CPython/3.8.2\r\nContent-Type: application/vnd.api+json\r\nVary: Accept, Cookie\r\nAllow: GET, POST, PATCH, DELETE, HEAD, OPTIONS\r\nX-Frame-Options: DENY\r\nContent-Length: 11\r\nX-Content-Type-Options: nosniff\r\n\r\n{\"data\":[]}\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>Then, PATCH the relationship endpoint to add a relationship</summary>\r\n\r\n```\r\n$ curl -i -X PATCH -H \"Content-Type: application/vnd.api+json\" -d '{\"data\":[{\"type\": \"tag\", \"id\": \"1\"}]}' http://localhost:8000/articles/1/relationships/tags/\r\nHTTP/1.1 200 OK\r\nDate: Tue, 21 Apr 2020 14:08:22 GMT\r\nServer: WSGIServer/0.2 CPython/3.8.2\r\nContent-Type: application/vnd.api+json\r\nVary: Accept, Cookie\r\nAllow: GET, POST, PATCH, DELETE, HEAD, OPTIONS\r\nX-Frame-Options: DENY\r\nContent-Length: 34\r\nX-Content-Type-Options: nosniff\r\n\r\n{\"data\":[{\"type\":\"tag\",\"id\":\"1\"}]}\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>Now, PATCH the relationship endpoint again with same data. <b>The 500 IntegrityError is returned while it should make no changes to the existing relationship</b>.</summary>\r\n\r\n```\r\n$ curl -i -X PATCH -H \"Content-Type: application/vnd.api+json\" -d '{\"data\":[{\"type\": \"tag\", \"id\": \"1\"}]}' http://localhost:8000/articles/1/relationships/tags/\r\nHTTP/1.1 500 Internal Server Error\r\nDate: Tue, 21 Apr 2020 14:08:45 GMT\r\nServer: WSGIServer/0.2 CPython/3.8.2\r\nContent-Type: text/plain; charset=utf-8\r\nX-Frame-Options: DENY\r\nContent-Length: 14870\r\nVary: Cookie\r\nX-Content-Type-Options: nosniff\r\n\r\nIntegrityError at /articles/1/relationships/tags/\r\nFOREIGN KEY constraint failed\r\n\r\nRequest Method: PATCH\r\nRequest URL: http://localhost:8000/articles/1/relationships/tags/\r\nDjango Version: 3.0.5\r\nPython Executable: /usr/local/bin/python\r\nPython Version: 3.8.2\r\nPython Path: ['/code', '/usr/local/lib/python38.zip', '/usr/local/lib/python3.8', '/usr/local/lib/python3.8/lib-dynload', '/usr/local/lib/python3.8/site-packages']\r\nServer time: Tue, 21 Apr 2020 14:08:45 +0000\r\nInstalled Applications:\r\n['django.contrib.admin',\r\n 'django.contrib.auth',\r\n 'django.contrib.contenttypes',\r\n 'django.contrib.sessions',\r\n 'django.contrib.messages',\r\n 'django.contrib.staticfiles',\r\n 'rest_framework',\r\n 'dja_patch_issue']\r\nInstalled Middleware:\r\n['django.middleware.security.SecurityMiddleware',\r\n 'django.contrib.sessions.middleware.SessionMiddleware',\r\n 'django.middleware.common.CommonMiddleware',\r\n 'django.middleware.csrf.CsrfViewMiddleware',\r\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n 'django.contrib.messages.middleware.MessageMiddleware',\r\n 'django.middleware.clickjacking.XFrameOptionsMiddleware']\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py\", line 243, in _commit\r\n    return self.connection.commit()\r\n\r\nThe above exception (FOREIGN KEY constraint failed) was the direct cause of the following exception:\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/views/decorators/csrf.py\", line 54, in wrapped_view\r\n    return view_func(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/views/generic/base.py\", line 71, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/rest_framework/views.py\", line 505, in dispatch\r\n    response = self.handle_exception(exc)\r\n  File \"/usr/local/lib/python3.8/site-packages/rest_framework/views.py\", line 465, in handle_exception\r\n    self.raise_uncaught_exception(exc)\r\n  File \"/usr/local/lib/python3.8/site-packages/rest_framework/views.py\", line 476, in raise_uncaught_exception\r\n    raise exc\r\n  File \"/usr/local/lib/python3.8/site-packages/rest_framework/views.py\", line 502, in dispatch\r\n    response = handler(request, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/rest_framework_json_api/views.py\", line 319, in patch\r\n    related_instance_or_manager.add(*serializer.validated_data)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/fields/related_descriptors.py\", line 951, in add\r\n    self._add_items(\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/transaction.py\", line 232, in __exit__\r\n    connection.commit()\r\n  File \"/usr/local/lib/python3.8/site-packages/django/utils/asyncio.py\", line 26, in inner\r\n    return func(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py\", line 267, in commit\r\n    self._commit()\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py\", line 243, in _commit\r\n    return self.connection.commit()\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/utils.py\", line 90, in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py\", line 243, in _commit\r\n    return self.connection.commit()\r\n\r\nException Type: IntegrityError at /articles/1/relationships/tags/\r\nException Value: FOREIGN KEY constraint failed\r\nRequest information:\r\nUSER: AnonymousUser\r\n\r\nGET: No GET data\r\n\r\nPOST: No POST data\r\n\r\nFILES: No FILES data\r\n\r\nCOOKIES: No cookie data\r\n\r\nMETA:\r\nCONTENT_LENGTH = '37'\r\nCONTENT_TYPE = 'application/vnd.api+json'\r\nDJANGO_SETTINGS_MODULE = 'dja_patch_issue.settings'\r\nGATEWAY_INTERFACE = 'CGI/1.1'\r\nGPG_KEY = 'E3FF2839C048B25C084DEBE9B26995E310250568'\r\nHOME = '/root'\r\nHOSTNAME = '19fa2b1473ac'\r\nHTTP_ACCEPT = '*/*'\r\nHTTP_HOST = 'localhost:8000'\r\nHTTP_USER_AGENT = 'curl/7.64.1'\r\nLANG = 'C.UTF-8'\r\nPATH = '/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\r\nPATH_INFO = '/articles/1/relationships/tags/'\r\nPYTHONUNBUFFERED = '1'\r\nPYTHON_GET_PIP_SHA256 = '421ac1d44c0cf9730a088e337867d974b91bdce4ea2636099275071878cc189e'\r\nPYTHON_GET_PIP_URL = 'https://github.com/pypa/get-pip/raw/d59197a3c169cef378a22428a3fa99d33e080a5d/get-pip.py'\r\nPYTHON_PIP_VERSION = '20.0.2'\r\nPYTHON_VERSION = '3.8.2'\r\nQUERY_STRING = ''\r\nREMOTE_ADDR = '172.26.0.1'\r\nREMOTE_HOST = ''\r\nREQUEST_METHOD = 'PATCH'\r\nRUN_MAIN = 'true'\r\nSCRIPT_NAME = ''\r\nSERVER_NAME = '19fa2b1473ac'\r\nSERVER_PORT = '8000'\r\nSERVER_PROTOCOL = 'HTTP/1.1'\r\nSERVER_SOFTWARE = 'WSGIServer/0.2'\r\nTZ = 'UTC'\r\nwsgi.errors = <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\r\nwsgi.file_wrapper = ''\r\nwsgi.input = <django.core.handlers.wsgi.LimitedStream object at 0x7fbe0a1d58b0>\r\nwsgi.multiprocess = False\r\nwsgi.multithread = True\r\nwsgi.run_once = False\r\nwsgi.url_scheme = 'http'\r\nwsgi.version = '(1, 0)'\r\n\r\nSettings:\r\nUsing settings module dja_patch_issue.settings\r\nABSOLUTE_URL_OVERRIDES = {}\r\nADMINS = []\r\nALLOWED_HOSTS = []\r\nAPPEND_SLASH = True\r\nAUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']\r\nAUTH_PASSWORD_VALIDATORS = '********************'\r\nAUTH_USER_MODEL = 'auth.User'\r\nBASE_DIR = '/code'\r\nCACHES = {'default': {'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'}}\r\nCACHE_MIDDLEWARE_ALIAS = 'default'\r\nCACHE_MIDDLEWARE_KEY_PREFIX = '********************'\r\nCACHE_MIDDLEWARE_SECONDS = 600\r\nCSRF_COOKIE_AGE = 31449600\r\nCSRF_COOKIE_DOMAIN = None\r\nCSRF_COOKIE_HTTPONLY = False\r\nCSRF_COOKIE_NAME = 'csrftoken'\r\nCSRF_COOKIE_PATH = '/'\r\nCSRF_COOKIE_SAMESITE = 'Lax'\r\nCSRF_COOKIE_SECURE = False\r\nCSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'\r\nCSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'\r\nCSRF_TRUSTED_ORIGINS = []\r\nCSRF_USE_SESSIONS = False\r\nDATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': '/code/db.sqlite3', 'ATOMIC_REQUESTS': False, 'AUTOCOMMIT': True, 'CONN_MAX_AGE': 0, 'OPTIONS': {}, 'TIME_ZONE': None, 'USER': '', 'PASSWORD': '********************', 'HOST': '', 'PORT': '', 'TEST': {'CHARSET': None, 'COLLATION': None, 'NAME': None, 'MIRROR': None}}}\r\nDATABASE_ROUTERS = []\r\nDATA_UPLOAD_MAX_MEMORY_SIZE = 2621440\r\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\r\nDATETIME_FORMAT = 'N j, Y, P'\r\nDATETIME_INPUT_FORMATS = ['%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M', '%Y-%m-%d', '%m/%d/%Y %H:%M:%S', '%m/%d/%Y %H:%M:%S.%f', '%m/%d/%Y %H:%M', '%m/%d/%Y', '%m/%d/%y %H:%M:%S', '%m/%d/%y %H:%M:%S.%f', '%m/%d/%y %H:%M', '%m/%d/%y']\r\nDATE_FORMAT = 'N j, Y'\r\nDATE_INPUT_FORMATS = ['%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y', '%b %d %Y', '%b %d, %Y', '%d %b %Y', '%d %b, %Y', '%B %d %Y', '%B %d, %Y', '%d %B %Y', '%d %B, %Y']\r\nDEBUG = True\r\nDEBUG_PROPAGATE_EXCEPTIONS = False\r\nDECIMAL_SEPARATOR = '.'\r\nDEFAULT_CHARSET = 'utf-8'\r\nDEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'\r\nDEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\r\nDEFAULT_FROM_EMAIL = 'webmaster@localhost'\r\nDEFAULT_INDEX_TABLESPACE = ''\r\nDEFAULT_TABLESPACE = ''\r\nDISALLOWED_USER_AGENTS = []\r\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\r\nEMAIL_HOST = 'localhost'\r\nEMAIL_HOST_PASSWORD = '********************'\r\nEMAIL_HOST_USER = ''\r\nEMAIL_PORT = 25\r\nEMAIL_SSL_CERTFILE = None\r\nEMAIL_SSL_KEYFILE = '********************'\r\nEMAIL_SUBJECT_PREFIX = '[Django] '\r\nEMAIL_TIMEOUT = None\r\nEMAIL_USE_LOCALTIME = False\r\nEMAIL_USE_SSL = False\r\nEMAIL_USE_TLS = False\r\nFILE_CHARSET = 'utf-8'\r\nFILE_UPLOAD_DIRECTORY_PERMISSIONS = None\r\nFILE_UPLOAD_HANDLERS = ['django.core.files.uploadhandler.MemoryFileUploadHandler', 'django.core.files.uploadhandler.TemporaryFileUploadHandler']\r\nFILE_UPLOAD_MAX_MEMORY_SIZE = 2621440\r\nFILE_UPLOAD_PERMISSIONS = 420\r\nFILE_UPLOAD_TEMP_DIR = None\r\nFIRST_DAY_OF_WEEK = 0\r\nFIXTURE_DIRS = []\r\nFORCE_SCRIPT_NAME = None\r\nFORMAT_MODULE_PATH = None\r\nFORM_RENDERER = 'django.forms.renderers.DjangoTemplates'\r\nIGNORABLE_404_URLS = []\r\nINSTALLED_APPS = ['django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'dja_patch_issue']\r\nINTERNAL_IPS = []\r\nLANGUAGES = [('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokm\u00e5l'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')]\r\nLANGUAGES_BIDI = ['he', 'ar', 'fa', 'ur']\r\nLANGUAGE_CODE = 'en-us'\r\nLANGUAGE_COOKIE_AGE = None\r\nLANGUAGE_COOKIE_DOMAIN = None\r\nLANGUAGE_COOKIE_HTTPONLY = False\r\nLANGUAGE_COOKIE_NAME = 'django_language'\r\nLANGUAGE_COOKIE_PATH = '/'\r\nLANGUAGE_COOKIE_SAMESITE = None\r\nLANGUAGE_COOKIE_SECURE = False\r\nLOCALE_PATHS = []\r\nLOGGING = {}\r\nLOGGING_CONFIG = 'logging.config.dictConfig'\r\nLOGIN_REDIRECT_URL = '/accounts/profile/'\r\nLOGIN_URL = '/accounts/login/'\r\nLOGOUT_REDIRECT_URL = None\r\nMANAGERS = []\r\nMEDIA_ROOT = ''\r\nMEDIA_URL = ''\r\nMESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'\r\nMIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware']\r\nMIGRATION_MODULES = {}\r\nMONTH_DAY_FORMAT = 'F j'\r\nNUMBER_GROUPING = 0\r\nPASSWORD_HASHERS = '********************'\r\nPASSWORD_RESET_TIMEOUT_DAYS = '********************'\r\nPREPEND_WWW = False\r\nREST_FRAMEWORK = {'PAGE_SIZE': 10, 'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler', 'DEFAULT_PAGINATION_CLASS': 'rest_framework_json_api.pagination.JsonApiPageNumberPagination', 'DEFAULT_PARSER_CLASSES': ('rest_framework_json_api.parsers.JSONParser', 'rest_framework.parsers.FormParser', 'rest_framework.parsers.MultiPartParser'), 'DEFAULT_RENDERER_CLASSES': ('rest_framework_json_api.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer'), 'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata', 'DEFAULT_FILTER_BACKENDS': ('rest_framework_json_api.filters.QueryParameterValidationFilter', 'rest_framework_json_api.filters.OrderingFilter', 'rest_framework.filters.SearchFilter'), 'SEARCH_PARAM': 'filter[search]', 'TEST_REQUEST_RENDERER_CLASSES': ('rest_framework_json_api.renderers.JSONRenderer',), 'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json'}\r\nROOT_URLCONF = 'dja_patch_issue.urls'\r\nSECRET_KEY = '********************'\r\nSECURE_BROWSER_XSS_FILTER = False\r\nSECURE_CONTENT_TYPE_NOSNIFF = True\r\nSECURE_HSTS_INCLUDE_SUBDOMAINS = False\r\nSECURE_HSTS_PRELOAD = False\r\nSECURE_HSTS_SECONDS = 0\r\nSECURE_PROXY_SSL_HEADER = None\r\nSECURE_REDIRECT_EXEMPT = []\r\nSECURE_REFERRER_POLICY = None\r\nSECURE_SSL_HOST = None\r\nSECURE_SSL_REDIRECT = False\r\nSERVER_EMAIL = 'root@localhost'\r\nSESSION_CACHE_ALIAS = 'default'\r\nSESSION_COOKIE_AGE = 1209600\r\nSESSION_COOKIE_DOMAIN = None\r\nSESSION_COOKIE_HTTPONLY = True\r\nSESSION_COOKIE_NAME = 'sessionid'\r\nSESSION_COOKIE_PATH = '/'\r\nSESSION_COOKIE_SAMESITE = 'Lax'\r\nSESSION_COOKIE_SECURE = False\r\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'\r\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False\r\nSESSION_FILE_PATH = None\r\nSESSION_SAVE_EVERY_REQUEST = False\r\nSESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'\r\nSETTINGS_MODULE = 'dja_patch_issue.settings'\r\nSHORT_DATETIME_FORMAT = 'm/d/Y P'\r\nSHORT_DATE_FORMAT = 'm/d/Y'\r\nSIGNING_BACKEND = 'django.core.signing.TimestampSigner'\r\nSILENCED_SYSTEM_CHECKS = []\r\nSTATICFILES_DIRS = []\r\nSTATICFILES_FINDERS = ['django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder']\r\nSTATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'\r\nSTATIC_ROOT = None\r\nSTATIC_URL = '/static/'\r\nTEMPLATES = [{'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']}}]\r\nTEST_NON_SERIALIZED_APPS = []\r\nTEST_RUNNER = 'django.test.runner.DiscoverRunner'\r\nTHOUSAND_SEPARATOR = ','\r\nTIME_FORMAT = 'P'\r\nTIME_INPUT_FORMATS = ['%H:%M:%S', '%H:%M:%S.%f', '%H:%M']\r\nTIME_ZONE = 'UTC'\r\nUSE_I18N = True\r\nUSE_L10N = True\r\nUSE_THOUSAND_SEPARATOR = False\r\nUSE_TZ = True\r\nUSE_X_FORWARDED_HOST = False\r\nUSE_X_FORWARDED_PORT = False\r\nWSGI_APPLICATION = 'dja_patch_issue.wsgi.application'\r\nX_FRAME_OPTIONS = 'DENY'\r\nYEAR_MONTH_FORMAT = 'F Y'\r\n\r\n\r\nYou're seeing this error because you have DEBUG = True in your\r\nDjango settings file. Change that to False, and Django will\r\ndisplay a standard page generated by the handler for this status code.\r\n```\r\n</details>\r\n\r\n<details>\r\n  <summary>Then, PATCH the endpoint with empty data. It says the relationship is cleared.</summary>\r\n\r\n```\r\n$ curl -i -X PATCH -H \"Content-Type: application/vnd.api+json\" -d '{\"data\":[]}' http://localhost:8000/articles/1/relationships/tags/\r\nHTTP/1.1 200 OK\r\nDate: Tue, 21 Apr 2020 14:10:16 GMT\r\nServer: WSGIServer/0.2 CPython/3.8.2\r\nContent-Type: application/vnd.api+json\r\nVary: Accept, Cookie\r\nAllow: GET, POST, PATCH, DELETE, HEAD, OPTIONS\r\nX-Frame-Options: DENY\r\nContent-Length: 11\r\nX-Content-Type-Options: nosniff\r\n\r\n{\"data\":[]}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary><b>However, the related object itself was just incorrectly deleted.</b> The database query returns nothing.</summary>\r\n\r\n```\r\n$ docker-compose run web ./manage.py shell\r\nPython 3.8.2 (default, Apr 16 2020, 18:25:46)\r\n[GCC 8.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n(InteractiveConsole)\r\n>>> from dja_patch_issue.models import Article, Tag\r\n>>> Tag.objects.all()\r\n<QuerySet []>\r\n>>>\r\n```\r\n</details>\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/780", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/780/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/780/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/780/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/780", "id": 599148266, "node_id": "MDU6SXNzdWU1OTkxNDgyNjY=", "number": 780, "title": "SerializerMethodResourceRelatedField breaks parent chain", "user": {"login": "glowka", "id": 5549304, "node_id": "MDQ6VXNlcjU1NDkzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5549304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glowka", "html_url": "https://github.com/glowka", "followers_url": "https://api.github.com/users/glowka/followers", "following_url": "https://api.github.com/users/glowka/following{/other_user}", "gists_url": "https://api.github.com/users/glowka/gists{/gist_id}", "starred_url": "https://api.github.com/users/glowka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glowka/subscriptions", "organizations_url": "https://api.github.com/users/glowka/orgs", "repos_url": "https://api.github.com/users/glowka/repos", "events_url": "https://api.github.com/users/glowka/events{/privacy}", "received_events_url": "https://api.github.com/users/glowka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-13T21:30:07Z", "updated_at": "2020-05-03T19:44:19Z", "closed_at": "2020-05-03T19:44:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If `SerializerMethodResourceRelatedField` is called with `many=True` and creates child field it misses call to `bind()` which would complete setting the relation between parent field and child field.\r\n\r\nIn effect it breaks the pattern that on every DRF field you can always go up the tree towards the root using `parent` attribute. \r\n\r\nThat part of [ManyRelatedField.__init__()](https://github.com/encode/django-rest-framework/blob/master/rest_framework/relations.py#L484) is missing:\r\n\r\n```\r\nclass ManyRelatedField:\r\n    ...\r\n    def __init__(self, child_relation=None, *args, **kwargs):\r\n        self.child_relation = child_relation\r\n        ...\r\n        self.child_relation.bind(field_name='', parent=self)\r\n```\r\n\r\nI am aware that there are some issues related to `SerializerMethodResourceRelatedField` already reported in #639, but since this bug is completely independent thing, I report it as separate issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/779", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/779/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/779/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/779/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/779", "id": 598257079, "node_id": "MDU6SXNzdWU1OTgyNTcwNzk=", "number": 779, "title": "SerializerMethodResourceRelatedField fails with queryset and many kwargs", "user": {"login": "glowka", "id": 5549304, "node_id": "MDQ6VXNlcjU1NDkzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5549304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glowka", "html_url": "https://github.com/glowka", "followers_url": "https://api.github.com/users/glowka/followers", "following_url": "https://api.github.com/users/glowka/following{/other_user}", "gists_url": "https://api.github.com/users/glowka/gists{/gist_id}", "starred_url": "https://api.github.com/users/glowka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glowka/subscriptions", "organizations_url": "https://api.github.com/users/glowka/orgs", "repos_url": "https://api.github.com/users/glowka/repos", "events_url": "https://api.github.com/users/glowka/events{/privacy}", "received_events_url": "https://api.github.com/users/glowka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-11T12:33:31Z", "updated_at": "2020-05-03T19:44:19Z", "closed_at": "2020-05-03T19:44:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Three cases below are OK, but the fourth one is surprisingly crashing\r\n\r\n### `read_only` is generally ok and non-`read_only` without many is also ok\r\n```\r\nSerializerMethodResourceRelatedField(\r\n    model=Member, source='get_member', read_only=True\r\n)\r\n\r\nSerializerMethodResourceRelatedField(\r\n    model=Member, source='get_members', read_only=True, many=True\r\n)\r\n\r\nSerializerMethodResourceRelatedField(\r\n   queryset=Member.objects.all(), source='get_member'\r\n)\r\n```\r\n\r\n### But non-`read_only` with `many` crashes\r\n```\r\nrelations.SerializerMethodResourceRelatedField(\r\n    queryset=Member.objects.all(), source='get_members', many=True\r\n)\r\n```\r\nMessage:\r\n```\r\ntests/test_serializer_schema.py:388: in <module>\r\n    source='get_members', many=True),\r\n/site-packages/rest_framework_json_api/relations.py:361: in __new__\r\n    return cls.many_init(*args, **kwargs)\r\n/site-packages/rest_framework_json_api/relations.py:379: in many_init\r\n    return cls(**list_kwargs)\r\n/site-packages/rest_framework_json_api/relations.py:370: in __init__\r\n    super(SerializerMethodResourceRelatedField, self).__init__(*args, **kwargs)\r\n/site-packages/rest_framework_json_api/relations.py:192: in __init__\r\n    super(ResourceRelatedField, self).__init__(**kwargs)\r\n/site-packages/rest_framework_json_api/relations.py:76: in __init__\r\n    super(HyperlinkedMixin, self).__init__(**kwargs)\r\n/site-packages/rest_framework/relations.py:247: in __init__\r\n    super().__init__(**kwargs)\r\n/site-packages/rest_framework/relations.py:108: in __init__\r\n    'Relational field must provide a `queryset` argument, '\r\nE   AssertionError: Relational field must provide a `queryset` argument, \r\noverride `get_queryset`, or set read_only=`True`\r\n```\r\n\r\n**It looks like  `queryset` is not passed correctly along the initialization.**\r\n\r\nMy interpretation is that is probably due to a bit hacky implementation of  [SerializerMethodResourceRelatedField](https://github.com/django-json-api/django-rest-framework-json-api/blob/9d42d9b7018b08e2df399e598d75f057676b3870/rest_framework_json_api/relations.py#L350) which tries to by `SerializerMethodResourceRelatedField` and `ManySerializerMethodResourceRelatedField` at the same time which looks to me prone to bugs like this.\r\n\r\nSo I would like to report this issue with `SerializerMethodResourceRelatedField` **in the first place**.\r\n\r\n**Additionally**, if my perception of reasons of problems with `SerializerMethodResourceRelatedField` is more widely accepted I could refactor it and fix the bug at the same time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/777", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/777/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/777/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/777/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/777", "id": 594358440, "node_id": "MDU6SXNzdWU1OTQzNTg0NDA=", "number": 777, "title": "Documentation: ORM-Less View Examples", "user": {"login": "Rjak", "id": 8183136, "node_id": "MDQ6VXNlcjgxODMxMzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8183136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rjak", "html_url": "https://github.com/Rjak", "followers_url": "https://api.github.com/users/Rjak/followers", "following_url": "https://api.github.com/users/Rjak/following{/other_user}", "gists_url": "https://api.github.com/users/Rjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rjak/subscriptions", "organizations_url": "https://api.github.com/users/Rjak/orgs", "repos_url": "https://api.github.com/users/Rjak/repos", "events_url": "https://api.github.com/users/Rjak/events{/privacy}", "received_events_url": "https://api.github.com/users/Rjak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-05T09:40:28Z", "updated_at": "2020-05-14T09:45:45Z", "closed_at": "2020-05-05T04:39:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am working on both a personal project and a project for work which retrieves data from external sources, not from an ORM.\r\n\r\nMy personal project has a class-based view like this:\r\n\r\n```python\r\nclass PeopleList(APIView):\r\n    \"\"\"Provides the list of people to choose when performing a person search.\"\"\"\r\n    def get(self, request, format=None):\r\n        search_term = request.data['search_term']\r\n        input_data = { 'search_term': search_term }\r\n        input_serializer = SearchTermSerializer(data=input_data)\r\n        if not input_serializer.is_valid():\r\n            return Response(input_serializer.errors,\r\n                            status=status.HTTP_400_BAD_REQUEST)\r\n\r\n        dao = get_external_dao()\r\n        result = dao.person_search(input_serializer)\r\n        return Response(result.data)\r\n```\r\n\r\nWhen I enable DJA, I get the following response to this query:\r\n\r\n```json\r\n{\r\n    \"errors\": [\r\n        {\r\n            \"detail\": \"Received document does not contain primary data\",\r\n            \"status\": \"400\",\r\n            \"source\": {\r\n                \"pointer\": \"/data\"\r\n            },\r\n            \"code\": \"parse_error\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nIt's not clear to me what this error message refers to. Is there a problem with the request body I am submitting? The search term is specified in a request body (I'm not using filtering here because my understanding is that filters are tied to querysets and since the data is coming from an external API and not an ORM it is not applicable).\r\n\r\nThe only examples I can find are bound to ORM usage, so I'm finding it tough to even examine the problem.\r\n\r\nAn example which shows custom logic for handling a string match search against an external, non-ORM data source would help me in this case.\r\n\r\nThanks very much!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/775", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/775/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/775/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/775", "id": 587170476, "node_id": "MDU6SXNzdWU1ODcxNzA0NzY=", "number": 775, "title": "Percent-encoded \"[\" and \"]\" in links", "user": {"login": "mcovalt", "id": 13244041, "node_id": "MDQ6VXNlcjEzMjQ0MDQx", "avatar_url": "https://avatars3.githubusercontent.com/u/13244041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcovalt", "html_url": "https://github.com/mcovalt", "followers_url": "https://api.github.com/users/mcovalt/followers", "following_url": "https://api.github.com/users/mcovalt/following{/other_user}", "gists_url": "https://api.github.com/users/mcovalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcovalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcovalt/subscriptions", "organizations_url": "https://api.github.com/users/mcovalt/orgs", "repos_url": "https://api.github.com/users/mcovalt/repos", "events_url": "https://api.github.com/users/mcovalt/events{/privacy}", "received_events_url": "https://api.github.com/users/mcovalt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-24T18:01:07Z", "updated_at": "2020-03-24T18:38:18Z", "closed_at": "2020-03-24T18:38:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "The URLs are percent-encoding brackets: \r\n\r\n- `[` to `%5B`\r\n- `]` to `%5D`\r\n\r\nThis is immediately noticeable in the top-level `links` object. For example, with the example app on the `/blogs` endpoint we have:\r\n```json\r\n{\r\n  \"links\": {\r\n    \"first\": \"http://127.0.0.1:8000/blogs?page%5Bnumber%5D=1\",\r\n    \"last\": \"http://127.0.0.1:8000/blogs?page%5Bnumber%5D=1\",\r\n```\r\nBut it should be this according to the JSON:API spec:\r\n```json\r\n{\r\n  \"links\": {\r\n    \"first\": \"http://127.0.0.1:8000/blogs?page[number]=1\",\r\n    \"last\": \"http://127.0.0.1:8000/blogs?page[number]=1\",\r\n```\r\nPossible solutions:\r\n\r\n1. Implement a version of [`replace_query_param`](https://github.com/encode/django-rest-framework/blob/5cc6ace9c45ac42cf59d52643ab9cbb6c565d23e/rest_framework/utils/urls.py#L6-L15) that provides the `safe='[]'` parameter to [`urllib.parse.urlencode`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode) for use in [`JsonApiPageNumberPagination.build_link`](https://github.com/django-json-api/django-rest-framework-json-api/blob/master/rest_framework_json_api/pagination.py#L19-L23). This is assuming the pagination is the only place where this issue occurs.\r\n2. Monkeypatch the standard `urllib` early in the program invocation to globally allow `safe='[]'`. This seems like an awful idea, but I'm putting it here in case someone needs a quick (and potentially dangerous) fix:\r\n```python\r\nfrom urllib import parse\r\nparse._ALWAYS_SAFE_BYTES = parse._ALWAYS_SAFE_BYTES + b\"[]\"\r\n```\r\n\r\nPython versions: 3.8.2 and 3.7.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/771", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/771/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/771/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/771/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/771", "id": 567712185, "node_id": "MDU6SXNzdWU1Njc3MTIxODU=", "number": 771, "title": "Add bulk operations", "user": {"login": "dcfranca", "id": 86538, "node_id": "MDQ6VXNlcjg2NTM4", "avatar_url": "https://avatars1.githubusercontent.com/u/86538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcfranca", "html_url": "https://github.com/dcfranca", "followers_url": "https://api.github.com/users/dcfranca/followers", "following_url": "https://api.github.com/users/dcfranca/following{/other_user}", "gists_url": "https://api.github.com/users/dcfranca/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcfranca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcfranca/subscriptions", "organizations_url": "https://api.github.com/users/dcfranca/orgs", "repos_url": "https://api.github.com/users/dcfranca/repos", "events_url": "https://api.github.com/users/dcfranca/events{/privacy}", "received_events_url": "https://api.github.com/users/dcfranca/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-19T17:18:47Z", "updated_at": "2020-02-25T18:07:35Z", "closed_at": "2020-02-25T18:07:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following this experimental feature of JSONApi:\r\nhttps://springbot.github.io/json-api/extensions/bulk/\r\n\r\nI came to this while trying to implement a bulk operation and finding out that it was cumbersome to implement on DJA\r\n\r\nEspecially in cases that we need to insert a huge amount of rows it is not effective to do one by one.\r\n\r\nPS: Let me know if it is already possible or easy to implement", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/769", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/769/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/769/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/769", "id": 565987314, "node_id": "MDU6SXNzdWU1NjU5ODczMTQ=", "number": 769, "title": "DRF J-A renders nested serializers out of spec.", "user": {"login": "sapiosexual", "id": 5525707, "node_id": "MDQ6VXNlcjU1MjU3MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5525707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sapiosexual", "html_url": "https://github.com/sapiosexual", "followers_url": "https://api.github.com/users/sapiosexual/followers", "following_url": "https://api.github.com/users/sapiosexual/following{/other_user}", "gists_url": "https://api.github.com/users/sapiosexual/gists{/gist_id}", "starred_url": "https://api.github.com/users/sapiosexual/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sapiosexual/subscriptions", "organizations_url": "https://api.github.com/users/sapiosexual/orgs", "repos_url": "https://api.github.com/users/sapiosexual/repos", "events_url": "https://api.github.com/users/sapiosexual/events{/privacy}", "received_events_url": "https://api.github.com/users/sapiosexual/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-16T23:10:53Z", "updated_at": "2020-05-14T08:27:16Z", "closed_at": "2020-05-14T08:27:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there.\r\nJson-api spec states:\r\n\r\n> Attributes may contain any valid JSON value.\r\n\r\n>Complex data structures involving JSON objects and arrays are allowed as attribute values. However, any object that constitutes or is contained in an attribute MUST NOT contain a relationships or links member, as those members are reserved by this specification for future use.\r\n\r\nSource: https://jsonapi.org/format/#document-resource-object-attributes\r\n\r\nHowever, considering [this](https://github.com/django-json-api/django-rest-framework-json-api/blob/master/rest_framework_json_api/renderers.py#L63) and [this](https://github.com/django-json-api/django-rest-framework-json-api/blob/master/rest_framework_json_api/renderers.py#L246) any nested serializer would be rendered as resource relations even though the nested structure is not a resource.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/766", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/766/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/766/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/766/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/766", "id": 559879263, "node_id": "MDU6SXNzdWU1NTk4NzkyNjM=", "number": 766, "title": "Tag new version for Django 3.0/DRF 3.11/Python 3.8 support", "user": {"login": "cvitan", "id": 536323, "node_id": "MDQ6VXNlcjUzNjMyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/536323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cvitan", "html_url": "https://github.com/cvitan", "followers_url": "https://api.github.com/users/cvitan/followers", "following_url": "https://api.github.com/users/cvitan/following{/other_user}", "gists_url": "https://api.github.com/users/cvitan/gists{/gist_id}", "starred_url": "https://api.github.com/users/cvitan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cvitan/subscriptions", "organizations_url": "https://api.github.com/users/cvitan/orgs", "repos_url": "https://api.github.com/users/cvitan/repos", "events_url": "https://api.github.com/users/cvitan/events{/privacy}", "received_events_url": "https://api.github.com/users/cvitan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-04T17:46:35Z", "updated_at": "2020-02-11T14:03:16Z", "closed_at": "2020-02-11T14:03:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any chance we will see a new version in pip any time soon now that #752 is merged? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/759", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/759/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/759/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/759/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/759", "id": 549571416, "node_id": "MDU6SXNzdWU1NDk1NzE0MTY=", "number": 759, "title": "Pass on instance when using polymorphic serializers", "user": {"login": "josebama", "id": 2027580, "node_id": "MDQ6VXNlcjIwMjc1ODA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2027580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josebama", "html_url": "https://github.com/josebama", "followers_url": "https://api.github.com/users/josebama/followers", "following_url": "https://api.github.com/users/josebama/following{/other_user}", "gists_url": "https://api.github.com/users/josebama/gists{/gist_id}", "starred_url": "https://api.github.com/users/josebama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josebama/subscriptions", "organizations_url": "https://api.github.com/users/josebama/orgs", "repos_url": "https://api.github.com/users/josebama/repos", "events_url": "https://api.github.com/users/josebama/events{/privacy}", "received_events_url": "https://api.github.com/users/josebama/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-14T13:34:45Z", "updated_at": "2020-01-30T17:27:26Z", "closed_at": "2020-01-30T17:27:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to understand the code in `PolymorphicModelSerializer` and I wonder if this is a bug or me just not understanding something, but in `PolymorphicModelSerializer.to_internal_value`, in the end, when in inits `serializer_class` like so: `return serializer_class(data, context=self.context, partial=self.partial).to_internal_value(data)`, why is it passing `data` as the first argument?\r\n\r\nFor what I see, the init in `BaseSerializer` is expecting the first argument to be `instance` and the second one to be `data`: `def __init__(self, instance=None, data=empty, **kwargs):`. Wouldn't it make more sense for `PolymorphicModelSerializer.to_internal_value` to init `serializer_class` this other way: `return serializer_class(self.instance, data, context=self.context, partial=self.partial).to_internal_value(data)`?\r\n\r\nThat way the child serializer will keep the instance if there is any and will set the `initial_data` too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/754", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/754/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/754/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/754/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/754", "id": 538079829, "node_id": "MDU6SXNzdWU1MzgwNzk4Mjk=", "number": 754, "title": "Dasherize field names.", "user": {"login": "ro70", "id": 17289564, "node_id": "MDQ6VXNlcjE3Mjg5NTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/17289564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ro70", "html_url": "https://github.com/ro70", "followers_url": "https://api.github.com/users/ro70/followers", "following_url": "https://api.github.com/users/ro70/following{/other_user}", "gists_url": "https://api.github.com/users/ro70/gists{/gist_id}", "starred_url": "https://api.github.com/users/ro70/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ro70/subscriptions", "organizations_url": "https://api.github.com/users/ro70/orgs", "repos_url": "https://api.github.com/users/ro70/repos", "events_url": "https://api.github.com/users/ro70/events{/privacy}", "received_events_url": "https://api.github.com/users/ro70/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-15T17:19:04Z", "updated_at": "2019-12-17T08:04:35Z", "closed_at": "2019-12-17T08:04:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I use the settings\r\n```\r\nJSON_API_FORMAT_KEYS = 'dasherize'\r\nJSON_API_FORMAT_FIELD_NAMES = 'dasherize'\r\nJSON_API_FORMAT_TYPES = 'dasherize'\r\nJSON_API_PLURALIZE_TYPES = True\r\n```\r\n\r\nWith DJA 2.8.0 all keys are converted according to the settings.\r\n```\r\n{\r\n  \"data\": {\r\n    \"type\": \"users\",\r\n    \"id\": \"1,\r\n    \"attributes\": {\r\n      \"permissions\": {\r\n        \"update-first-name\": false,\r\n        ...\r\n      },\r\n      \"first-name\": \"a\",\r\n      ...\r\n    },\r\n    ...\r\n}\r\n```\r\n\r\nWith DJA 3.0.0 this does not happen any more (not for nested keys?). Is that intended?\r\n```\r\n{\r\n  \"data\": {\r\n    \"type\": \"users\",\r\n    \"id\": \"1\",\r\n    \"attributes\": {\r\n      \"permissions\": {\r\n        \"update_first_name\": false,  // <=======\r\n        ...\r\n      },\r\n      \"first-name\": \"a\",\r\n      ...\r\n    },\r\n    ...\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/751", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/751/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/751/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/751/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/751", "id": 537692857, "node_id": "MDU6SXNzdWU1Mzc2OTI4NTc=", "number": 751, "title": "DRF 3.11 support", "user": {"login": "auvipy", "id": 6212603, "node_id": "MDQ6VXNlcjYyMTI2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6212603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auvipy", "html_url": "https://github.com/auvipy", "followers_url": "https://api.github.com/users/auvipy/followers", "following_url": "https://api.github.com/users/auvipy/following{/other_user}", "gists_url": "https://api.github.com/users/auvipy/gists{/gist_id}", "starred_url": "https://api.github.com/users/auvipy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auvipy/subscriptions", "organizations_url": "https://api.github.com/users/auvipy/orgs", "repos_url": "https://api.github.com/users/auvipy/repos", "events_url": "https://api.github.com/users/auvipy/events{/privacy}", "received_events_url": "https://api.github.com/users/auvipy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-13T18:09:54Z", "updated_at": "2020-01-17T14:42:28Z", "closed_at": "2020-01-17T14:42:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/750", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/750/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/750/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/750/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/750", "id": 536783384, "node_id": "MDU6SXNzdWU1MzY3ODMzODQ=", "number": 750, "title": "After upgrade from Django 2 to Django 3. I am getting this error. ImportError: cannot import name 'six' from 'django.utils'", "user": {"login": "AmitAps", "id": 47079294, "node_id": "MDQ6VXNlcjQ3MDc5Mjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/47079294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmitAps", "html_url": "https://github.com/AmitAps", "followers_url": "https://api.github.com/users/AmitAps/followers", "following_url": "https://api.github.com/users/AmitAps/following{/other_user}", "gists_url": "https://api.github.com/users/AmitAps/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmitAps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmitAps/subscriptions", "organizations_url": "https://api.github.com/users/AmitAps/orgs", "repos_url": "https://api.github.com/users/AmitAps/repos", "events_url": "https://api.github.com/users/AmitAps/events{/privacy}", "received_events_url": "https://api.github.com/users/AmitAps/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-12T06:29:31Z", "updated_at": "2019-12-13T20:08:25Z", "closed_at": "2019-12-13T20:08:25Z", "author_association": "NONE", "active_lock_reason": null, "body": " python3 manage.py runserver\r\nWatching for file changes with StatReloader\r\nException in thread django-main-thread:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib64/python3.7/threading.py\", line 926, in _bootstrap_inner\r\n    self.run()\r\n  File \"/usr/lib64/python3.7/threading.py\", line 870, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/django/utils/autoreload.py\", line 53, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/django/core/management/commands/runserver.py\", line 109, in inner_run\r\n    autoreload.raise_last_exception()\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/django/utils/autoreload.py\", line 76, in raise_last_exception\r\n    raise _exception[1]\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/django/core/management/__init__.py\", line 357, in execute\r\n    autoreload.check_errors(django.setup)()\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/django/utils/autoreload.py\", line 53, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/django/__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/django/apps/registry.py\", line 114, in populate\r\n    app_config.import_models()\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/django/apps/config.py\", line 211, in import_models\r\n    self.models_module = import_module(models_module_name)\r\n  File \"/usr/lib64/python3.7/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/home/Aps/workspace/media_thesocialtalks/homee/thesocialtalks/news/models.py\", line 5, in <module>\r\n    from djrichtextfield.models import RichTextField\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/djrichtextfield/models.py\", line 5, in <module>\r\n    from djrichtextfield.sanitizer import SanitizerMixin\r\n  File \"/home/Aps/.local/lib/python3.7/site-packages/djrichtextfield/sanitizer.py\", line 3, in <module>\r\n    from django.utils import six\r\nImportError: cannot import name 'six' from 'django.utils' (/home/Aps/.local/lib/python3.7/site-packages/django/utils/__init__.py)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/749", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/749/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/749/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/749/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/749", "id": 536782566, "node_id": "MDU6SXNzdWU1MzY3ODI1NjY=", "number": 749, "title": "After upgrade from Django 2 to Django 3. I am getting this error.   ImportError: cannot import name 'six' from 'django.utils'", "user": {"login": "AmitAps", "id": 47079294, "node_id": "MDQ6VXNlcjQ3MDc5Mjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/47079294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmitAps", "html_url": "https://github.com/AmitAps", "followers_url": "https://api.github.com/users/AmitAps/followers", "following_url": "https://api.github.com/users/AmitAps/following{/other_user}", "gists_url": "https://api.github.com/users/AmitAps/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmitAps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmitAps/subscriptions", "organizations_url": "https://api.github.com/users/AmitAps/orgs", "repos_url": "https://api.github.com/users/AmitAps/repos", "events_url": "https://api.github.com/users/AmitAps/events{/privacy}", "received_events_url": "https://api.github.com/users/AmitAps/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-12T06:26:44Z", "updated_at": "2019-12-13T18:02:52Z", "closed_at": "2019-12-13T18:02:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/748", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/748/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/748/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/748/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/748", "id": 536622275, "node_id": "MDU6SXNzdWU1MzY2MjIyNzU=", "number": 748, "title": "Misleading docs on `field_name_mapping` for overriding related_field in urls", "user": {"login": "BlaiseGratton", "id": 9039269, "node_id": "MDQ6VXNlcjkwMzkyNjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/9039269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlaiseGratton", "html_url": "https://github.com/BlaiseGratton", "followers_url": "https://api.github.com/users/BlaiseGratton/followers", "following_url": "https://api.github.com/users/BlaiseGratton/following{/other_user}", "gists_url": "https://api.github.com/users/BlaiseGratton/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlaiseGratton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlaiseGratton/subscriptions", "organizations_url": "https://api.github.com/users/BlaiseGratton/orgs", "repos_url": "https://api.github.com/users/BlaiseGratton/repos", "events_url": "https://api.github.com/users/BlaiseGratton/events{/privacy}", "received_events_url": "https://api.github.com/users/BlaiseGratton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-11T21:25:04Z", "updated_at": "2020-01-17T15:06:40Z", "closed_at": "2020-01-17T15:06:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the end of [this section](https://django-rest-framework-json-api.readthedocs.io/en/stable/usage.html#relationshipview), the key and value of this dictionary should be swapped:\r\n```python\r\nfield_name_mapping = {\r\n    'line_items': 'order_items'\r\n}\r\n# should be:\r\nfield_name_mapping = {\r\n    'order_items': 'line_items'\r\n}\r\n```\r\nThe language for overriding related_name in a url is a bit confusing and it took me a bit to realize this map was the problem, and wanted to save others the trouble of messing around with this configuration.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/735", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/735/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/735/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/735/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/735", "id": 522401497, "node_id": "MDU6SXNzdWU1MjI0MDE0OTc=", "number": 735, "title": "I do not accept to put a size to the answer in the parameter size_page", "user": {"login": "johnnyvargast", "id": 26862562, "node_id": "MDQ6VXNlcjI2ODYyNTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/26862562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnnyvargast", "html_url": "https://github.com/johnnyvargast", "followers_url": "https://api.github.com/users/johnnyvargast/followers", "following_url": "https://api.github.com/users/johnnyvargast/following{/other_user}", "gists_url": "https://api.github.com/users/johnnyvargast/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnnyvargast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnnyvargast/subscriptions", "organizations_url": "https://api.github.com/users/johnnyvargast/orgs", "repos_url": "https://api.github.com/users/johnnyvargast/repos", "events_url": "https://api.github.com/users/johnnyvargast/events{/privacy}", "received_events_url": "https://api.github.com/users/johnnyvargast/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-13T18:39:37Z", "updated_at": "2019-11-14T13:22:43Z", "closed_at": "2019-11-14T13:22:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to put the size of the answer and it doesn't work for me.\r\nthe page_size of the StandardResultsSetPagination class is working.\r\n\r\nlibraries I use:\r\n-  [Django REST framework JWT](https://jpadilla.github.io/django-rest-framework-jwt/)\r\n-  [Django REST Framework JSON API](https://django-rest-framework-json-api.readthedocs.io/en/stable/index.html) \r\n\r\n(no parameters)\r\n![01](https://user-images.githubusercontent.com/26862562/68792583-98756180-0619-11ea-82ba-f32a6fc64c68.png)\r\n\r\n(with parameters)\r\n![02](https://user-images.githubusercontent.com/26862562/68792711-eab68280-0619-11ea-97b8-4ef0b55b9459.png)\r\n\r\n----------------------\r\nsettings.py\r\n![03](https://user-images.githubusercontent.com/26862562/68792910-4e40b000-061a-11ea-903d-8bd06468521c.png)\r\n\r\n\r\npagination.py\r\n![04](https://user-images.githubusercontent.com/26862562/68792935-57318180-061a-11ea-9fb0-846fe724605c.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/732", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/732/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/732/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/732/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/732", "id": 521126838, "node_id": "MDU6SXNzdWU1MjExMjY4Mzg=", "number": 732, "title": "Django 3.0 support", "user": {"login": "auvipy", "id": 6212603, "node_id": "MDQ6VXNlcjYyMTI2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6212603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auvipy", "html_url": "https://github.com/auvipy", "followers_url": "https://api.github.com/users/auvipy/followers", "following_url": "https://api.github.com/users/auvipy/following{/other_user}", "gists_url": "https://api.github.com/users/auvipy/gists{/gist_id}", "starred_url": "https://api.github.com/users/auvipy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auvipy/subscriptions", "organizations_url": "https://api.github.com/users/auvipy/orgs", "repos_url": "https://api.github.com/users/auvipy/repos", "events_url": "https://api.github.com/users/auvipy/events{/privacy}", "received_events_url": "https://api.github.com/users/auvipy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044491, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-11T18:51:28Z", "updated_at": "2020-01-17T14:42:28Z", "closed_at": "2020-01-17T14:42:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "DRF 3.11 is also planning to dro django 1.11 support", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/722", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/722/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/722/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/722/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/722", "id": 504749135, "node_id": "MDU6SXNzdWU1MDQ3NDkxMzU=", "number": 722, "title": "JSONRenderer does not work when no pk is provided", "user": {"login": "mdettelson", "id": 8668413, "node_id": "MDQ6VXNlcjg2Njg0MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/8668413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdettelson", "html_url": "https://github.com/mdettelson", "followers_url": "https://api.github.com/users/mdettelson/followers", "following_url": "https://api.github.com/users/mdettelson/following{/other_user}", "gists_url": "https://api.github.com/users/mdettelson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdettelson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdettelson/subscriptions", "organizations_url": "https://api.github.com/users/mdettelson/orgs", "repos_url": "https://api.github.com/users/mdettelson/repos", "events_url": "https://api.github.com/users/mdettelson/events{/privacy}", "received_events_url": "https://api.github.com/users/mdettelson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-09T16:06:19Z", "updated_at": "2019-10-13T13:11:57Z", "closed_at": "2019-10-12T10:13:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\r\n\r\nI have a particular use case here: I have a denormalized table that contains one data type (let's call it 'pieces') that gets aggregated up to another model (let's call them 'pies').\r\n\r\nSince I can't do anything with pies without having all of the pieces (technical requirement), I've decided to keep a table representing only the pieces and aggregate up to the pie level when pies are asked for.\r\n\r\nI noticed this line in the renderer code: \r\n\r\n`('id', encoding.force_text(resource_instance.pk) if resource_instance else None),`\r\nIt's in the method `build_json_resource_obj`\r\n\r\nSince my dataset has many repeats of the pie IDs, I can't use it as a pk, BUT once I aggregate the table the Pie Viewset, it IS unique.  Since it is not the actual pk on the model, however, I get the error `'dict' object has no attribute 'pk'`. \r\n\r\nThe ideal situation would be that I can set the pie ID as the id in the JSON API representiation.\r\n\r\nIs there a built-in way to handle this sort of use case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/718", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/718/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/718/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/718/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/718", "id": 503848865, "node_id": "MDU6SXNzdWU1MDM4NDg4NjU=", "number": 718, "title": "Filtering array query params", "user": {"login": "ro70", "id": 17289564, "node_id": "MDQ6VXNlcjE3Mjg5NTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/17289564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ro70", "html_url": "https://github.com/ro70", "followers_url": "https://api.github.com/users/ro70/followers", "following_url": "https://api.github.com/users/ro70/following{/other_user}", "gists_url": "https://api.github.com/users/ro70/gists{/gist_id}", "starred_url": "https://api.github.com/users/ro70/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ro70/subscriptions", "organizations_url": "https://api.github.com/users/ro70/orgs", "repos_url": "https://api.github.com/users/ro70/repos", "events_url": "https://api.github.com/users/ro70/events{/privacy}", "received_events_url": "https://api.github.com/users/ro70/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-10-08T06:12:18Z", "updated_at": "2020-05-20T12:56:48Z", "closed_at": "2020-05-20T12:56:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Some clients (e.g. Ember) send requests like `?filter[tags][]=1&filter[tags][]=2` for the membership in a list of values (JSON API).\r\n\r\nTo process this kind of filter I only changed (https://github.com/django-json-api/django-rest-framework-json-api/blob/master/rest_framework_json_api/django_filters/backends.py#L66) from\r\n```\r\n^filter(?P<ldelim>\\[?)(?P<assoc>[\\w\\.\\-]*)(?P<rdelim>\\]?$)\r\n```\r\nto\r\n```\r\n^filter(?P<ldelim>\\[?)(?P<assoc>[\\w\\.\\-]*)(?P<rdelim>\\]?)(\\[\\])?$\r\n```\r\nEverything seems to work fine. What do you think?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/712", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/712/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/712/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/712/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/712", "id": 501310383, "node_id": "MDU6SXNzdWU1MDEzMTAzODM=", "number": 712, "title": "Test sphinx docs build in test", "user": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-02T06:51:00Z", "updated_at": "2019-10-10T18:30:27Z", "closed_at": "2019-10-10T18:30:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "To avoid invalid format in documentation sphinx warnings should be turned into warnings and sphinx docs build run in Travis.\r\n\r\nThis way it is also safer to update sphinx releases as when it passes it should be OK. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/704", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/704/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/704/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/704", "id": 495239889, "node_id": "MDU6SXNzdWU0OTUyMzk4ODk=", "number": 704, "title": "Including lists of resources from non-model annotated objects", "user": {"login": "RobinRamael", "id": 127796, "node_id": "MDQ6VXNlcjEyNzc5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/127796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobinRamael", "html_url": "https://github.com/RobinRamael", "followers_url": "https://api.github.com/users/RobinRamael/followers", "following_url": "https://api.github.com/users/RobinRamael/following{/other_user}", "gists_url": "https://api.github.com/users/RobinRamael/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobinRamael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobinRamael/subscriptions", "organizations_url": "https://api.github.com/users/RobinRamael/orgs", "repos_url": "https://api.github.com/users/RobinRamael/repos", "events_url": "https://api.github.com/users/RobinRamael/events{/privacy}", "received_events_url": "https://api.github.com/users/RobinRamael/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-18T13:50:26Z", "updated_at": "2019-12-19T18:10:22Z", "closed_at": "2019-12-19T18:10:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a `Organization` model with a serializer whose instances get some extra data bound to then when using a specific view. this extra data is two lists of `Product` objects, which is not a django model (just a plain old python object) but its representation should look like a regular relation: the attrs for the organization and then the product lists in `included`. I tried the following:\r\n\r\n```python\r\n\r\nclass OrganizationSerializer(serializers.ModelSerializer):\r\n    included_serializers = {\r\n        \"current_cycle\": ProductSerializer,\r\n        \"next_cycle\": ProductSerializer,\r\n    }\r\n\r\n    current_cycle = ResourceRelatedField(\r\n        many=True, read_only=True, model=Product\r\n    )\r\n    next_cycle = ResourceRelatedField(\r\n        many=True, read_only=True, model=Product\r\n    )\r\n\r\n    class Meta:\r\n        model = Organization\r\n        fields = (\"pk\", \"current_cycle\", \"next_cycle\")\r\n\r\n    class JSONAPIMeta:\r\n        included_resources = (\"current_cycle\", \"next_cycle\")\r\n```\r\nBut this results in `AttributeError: type object 'Organization' has no attribute 'current_cycle'`, which happens in `utils.get_related_resource_type`.\r\n\r\nStepping through the code there, it seems like although it's checking the `model` attribute directly on the relation, it's not reaching into the `child_relation` attr when the `many` is set to True. It does a `child` attribute which in my case wasn't there although `child_relation` is.\r\n\r\nDoing a quick and dirty fix by including \r\n```python\r\n    elif (\r\n        hasattr(relation, \"child_relation\")\r\n        and hasattr(relation.child_relation, \"model\"\r\n    )):\r\n        relation_model = relation.child_relation.model\r\n```\r\nin the big if/elif/else in `get_related_resource_type` seems to work. I'm however bery new to this library and maybe I'm just missing something. Otherwise I can make a PR with this fix, of course. Any help would be greatly appreciated :) Thanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/701", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/701/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/701/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/701/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/701", "id": 494396171, "node_id": "MDU6SXNzdWU0OTQzOTYxNzE=", "number": 701, "title": "How to include choices for ResourceRelatedField?", "user": {"login": "arthur-s", "id": 5279203, "node_id": "MDQ6VXNlcjUyNzkyMDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5279203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthur-s", "html_url": "https://github.com/arthur-s", "followers_url": "https://api.github.com/users/arthur-s/followers", "following_url": "https://api.github.com/users/arthur-s/following{/other_user}", "gists_url": "https://api.github.com/users/arthur-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthur-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthur-s/subscriptions", "organizations_url": "https://api.github.com/users/arthur-s/orgs", "repos_url": "https://api.github.com/users/arthur-s/repos", "events_url": "https://api.github.com/users/arthur-s/events{/privacy}", "received_events_url": "https://api.github.com/users/arthur-s/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-17T04:37:29Z", "updated_at": "2019-09-22T13:30:14Z", "closed_at": "2019-09-22T13:30:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to get choices for ResourceRelatedField, when I make OPTIONS request. How to do it?\r\n```python\r\n# serializer:\r\nself.fields['members'] = ResourceRelatedField(\r\n    queryset=Profile.objects.filter(is_active=True),\r\n    many=True\r\n)\r\n```\r\nCurrent output:\r\n```json\r\n                \"members\": {\r\n                    \"type\": \"Relationship\",\r\n                    \"relationship_type\": \"ManyToMany\",\r\n                    \"relationship_resource\": \"profiles\",\r\n                    \"required\": false,\r\n                    \"read_only\": false,\r\n                    \"write_only\": false,\r\n                    \"label\": \"Members\",\r\n                    \"initial\": \"[]\"\r\n                },\r\n```\r\nIf I remove this [line](https://github.com/django-json-api/django-rest-framework-json-api/blob/master/rest_framework_json_api/metadata.py#L135), (It is what I want) I get desired output:\r\n```json\r\n                \"members\": {\r\n                    \"type\": \"field\",\r\n                    \"required\": false,\r\n                    \"read_only\": false,\r\n                    \"label\": \"Members\",\r\n                    \"relationship_type\": \"ManyToMany\",\r\n                    \"choices\": [\r\n                        {\r\n                            \"value\": \"{\\\"type\\\": \\\"profiles\\\", \\\"id\\\": \\\"1\\\"}\",\r\n                            \"display_name\": \"Arthur\"\r\n                        },\r\n                        {\r\n                            \"value\": \"{\\\"type\\\": \\\"profiles\\\", \\\"id\\\": \\\"2\\\"}\",\r\n                            \"display_name\": \"Tom\"\r\n                        }\r\n                    ]\r\n                },\r\n```\r\nCan we remove `not field_info.get('relationship_resource') and` from choices condition, or how to generate output that I want (without modifying `metadata.py`)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/696", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/696/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/696/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/696", "id": 484873764, "node_id": "MDU6SXNzdWU0ODQ4NzM3NjQ=", "number": 696, "title": "filter on uuid seems to break", "user": {"login": "dbinetti", "id": 161722, "node_id": "MDQ6VXNlcjE2MTcyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/161722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbinetti", "html_url": "https://github.com/dbinetti", "followers_url": "https://api.github.com/users/dbinetti/followers", "following_url": "https://api.github.com/users/dbinetti/following{/other_user}", "gists_url": "https://api.github.com/users/dbinetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbinetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbinetti/subscriptions", "organizations_url": "https://api.github.com/users/dbinetti/orgs", "repos_url": "https://api.github.com/users/dbinetti/repos", "events_url": "https://api.github.com/users/dbinetti/events{/privacy}", "received_events_url": "https://api.github.com/users/dbinetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-24T23:53:04Z", "updated_at": "2019-08-25T17:55:42Z", "closed_at": "2019-08-25T17:55:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to filter on a UUID field (not as PK, but as a normal field) it does not return any results.  looking at the JSONAPI formatted return, it says \r\n<img width=\"1204\" alt=\"Screen Shot 2019-08-24 at 16 46 12\" src=\"https://user-images.githubusercontent.com/161722/63643860-95f51280-c68f-11e9-96e4-c967df9cd7a8.png\">\r\n\r\n\r\nbut it is a properly formatted UUID.  \r\n\r\n```\r\n{\r\n\"errors\": [\r\n{\r\n\"detail\": \"invalid query parameter: format\",\r\n\"source\": {\r\n\"pointer\": \"/data\"\r\n},\r\n\"status\": \"400\"\r\n}\r\n]\r\n}\r\n```\r\n\r\nIf I submit an improperly formatted UUID it returns   \r\n<img width=\"1204\" alt=\"Screen Shot 2019-08-24 at 16 50 51\" src=\"https://user-images.githubusercontent.com/161722/63643867-bb821c00-c68f-11e9-842c-425454326e56.png\">\r\n\r\n\r\nWith `group_id` being the UUID I'm trying to filter by.    And the JSONAPI formatted response is the same.  Seems like a bug -- but am I doing something wrong?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/684", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/684/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/684/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/684/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/684", "id": 478692252, "node_id": "MDU6SXNzdWU0Nzg2OTIyNTI=", "number": 684, "title": "PKOnlyObject gives unexpected \"id\" result in ResourceRelatedField#to_relationship", "user": {"login": "BlaiseGratton", "id": 9039269, "node_id": "MDQ6VXNlcjkwMzkyNjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/9039269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlaiseGratton", "html_url": "https://github.com/BlaiseGratton", "followers_url": "https://api.github.com/users/BlaiseGratton/followers", "following_url": "https://api.github.com/users/BlaiseGratton/following{/other_user}", "gists_url": "https://api.github.com/users/BlaiseGratton/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlaiseGratton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlaiseGratton/subscriptions", "organizations_url": "https://api.github.com/users/BlaiseGratton/orgs", "repos_url": "https://api.github.com/users/BlaiseGratton/repos", "events_url": "https://api.github.com/users/BlaiseGratton/events{/privacy}", "received_events_url": "https://api.github.com/users/BlaiseGratton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-08T21:19:02Z", "updated_at": "2019-08-12T16:35:28Z", "closed_at": "2019-08-12T16:35:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have two models configured in a one-to-many relationship (`User` and `Group`). On the User serializer, I have `group = relations.ResourceRelatedField(queryset=Group.objects)`, as well as a group serializer for `related_serializers` and `included_serializers`. I can fetch an individual user or group and include the converse resource (e.g. `/api/groups/1?include=members` and vice versa), but seeing this weird output on a serialized user:\r\n\r\n```json\r\n\"type\": \"user\",\r\n\"id\": \"1\",\r\n\"attributes\": {\r\n  ...\r\n},\r\n\"relationships\": {\r\n  \"group\": {\r\n    \"data\": {\r\n      \"type\": \"group\",\r\n      \"id\": \"Colectivo (1 members)\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIt's calling `str()` on the actual db object, not the pk pointing to that entity. I've found this is happening in the `to_representation` method of `RelatedResourceField`, around lines 244-253 in `relations.py`. When the `value` parameter passed in is a PKOnlyObject, calling `str(value.pk)` is just using the `__str__` representation of that db entity. \r\n\r\nI have a bandaid fix:\r\n```python\r\nif type(pk) is not int: \r\n    pk = pk.id\r\n```\r\n\r\nBut this feels like there is a deeper underlying issue. Either I'm setting something up incorrectly, or somehow this PKOnlyObject is being unexpectedly passed in. Would love to hear your thoughts on this!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/682", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/682/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/682/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/682", "id": 478390794, "node_id": "MDU6SXNzdWU0NzgzOTA3OTQ=", "number": 682, "title": "Changing ids while using custom serializer.", "user": {"login": "ro70", "id": 17289564, "node_id": "MDQ6VXNlcjE3Mjg5NTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/17289564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ro70", "html_url": "https://github.com/ro70", "followers_url": "https://api.github.com/users/ro70/followers", "following_url": "https://api.github.com/users/ro70/following{/other_user}", "gists_url": "https://api.github.com/users/ro70/gists{/gist_id}", "starred_url": "https://api.github.com/users/ro70/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ro70/subscriptions", "organizations_url": "https://api.github.com/users/ro70/orgs", "repos_url": "https://api.github.com/users/ro70/repos", "events_url": "https://api.github.com/users/ro70/events{/privacy}", "received_events_url": "https://api.github.com/users/ro70/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-08T10:42:22Z", "updated_at": "2019-08-12T13:47:41Z", "closed_at": "2019-08-12T13:47:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello\r\n\r\nI use the django-json-api and have a problem with a custom serializer. The following code is a simplified version but should describe the issue.\r\n\r\nIn the BookSerializer there is a a custom PublicTagSerializer:\r\n```\r\nclass BookSerializer(ModelSerializer):\r\n   tags = PublicTagSerializer(\r\n      many=True,\r\n      read_only=True,\r\n   )\r\n   ...\r\n\r\nclass Book(Model):\r\n    tags = models.ManyToManyField(\r\n        Tag,\r\n        related_name='books',\r\n        blank=True,\r\n    )\r\n   ...\r\n```\r\nAnd this is the PublicTagSerializer:\r\n```\r\nclass FilterPublicListSerializer(ListSerializer):\r\n    def to_representation(self, data):\r\n        data = data.filter(public=True)\r\n        data = super().to_representation(data)\r\n        for t in data:\r\n            print(t) # <===== Ids are still correct.\r\n        return data\r\n\r\nclass PublicTagSerializer(ModelSerializer):\r\n    class Meta:\r\n        list_serializer_class = FilterPublicListSerializer\r\n        model = models.Tag\r\n        resource_name = 'tags'\r\n        fields = '__all__'\r\n```\r\nIn my database I have three tags:\r\n```\r\n<class 'core.models.Tag'>: {'id': 3, 'public': False, 'color': '#333333', ...}\r\n<class 'core.models.Tag'>: {'id': 5, 'public': True, 'color': '#555555', ...}\r\n<class 'core.models.Tag'>: {'id': 6, 'public': True, 'color': '#666666', ...}\r\n```\r\nThe print statement above returns\r\n```\r\nOrderedDict([('id', 5), ('public', True), 'color': '#555555', ...])\r\nOrderedDict([('id', 6), ('public', True), 'color': '#666666', ...])\r\n```\r\nwhat is correct.\r\nBut the `relationships` object in the response contains\r\n```\r\n{'type': 'tags', 'id': '3'} \r\n{'type': 'tags', 'id': '5'}\r\n```\r\nSomewhere between the `to_representation()` method of the ListSerializer and the output the ids change. Maybe someone can help me?\r\n\r\nEDIT:\r\nI did a trial with an `included_serializer = {'tags': PublicTagSerializer}`. The response contains the following `included` tag objects:\r\n```\r\n{'type': 'tags', 'id': '3', 'attributes': {'color': '#555555', 'public': True, ...}, ...}\r\n{'type': 'tags', 'id': '5', 'attributes': {'color': '#666666', 'public': True, ...}, ...}\r\n```\r\nI added the `color` attribute as well. As you can see the attribute values in the response are correct. The ids are not.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/680", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/680/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/680/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/680/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/680", "id": 473362096, "node_id": "MDU6SXNzdWU0NzMzNjIwOTY=", "number": 680, "title": "Id is incorrectly computed in serialized result for related resources that are computed properties", "user": {"login": "buckmaxwell", "id": 6210452, "node_id": "MDQ6VXNlcjYyMTA0NTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6210452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buckmaxwell", "html_url": "https://github.com/buckmaxwell", "followers_url": "https://api.github.com/users/buckmaxwell/followers", "following_url": "https://api.github.com/users/buckmaxwell/following{/other_user}", "gists_url": "https://api.github.com/users/buckmaxwell/gists{/gist_id}", "starred_url": "https://api.github.com/users/buckmaxwell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buckmaxwell/subscriptions", "organizations_url": "https://api.github.com/users/buckmaxwell/orgs", "repos_url": "https://api.github.com/users/buckmaxwell/repos", "events_url": "https://api.github.com/users/buckmaxwell/events{/privacy}", "received_events_url": "https://api.github.com/users/buckmaxwell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-26T13:35:45Z", "updated_at": "2019-07-26T20:22:45Z", "closed_at": "2019-07-26T20:22:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I have a resource `user` with a one to one relationship to `profile`. `profile` has a relationship to `entity` and a computed property `parent_entity` which aliases `profile.entity.parent_entity`.\r\n\r\nWhen I request `/users/1?include=profile` the result looks as expected, except that the profile returned in the included section does not have the correct id listed for the parent-entity resource identifier object. Instead, it lists, \"<ParentEntity: Title Of Specific ParentEntity>\"\r\n\r\nHere is a a condensed version of my code. What could be going on?\r\n\r\n```py\r\n# models/user_profile.py\r\nclass UserProfile(models.Model):\r\n\r\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\r\n\r\n    entity = models.ForeignKey(Entity, on_delete=models.SET_NULL, null=True, blank=True,\r\n                               related_name='employees')\r\n\r\n    class JSONAPIMeta:\r\n        resource_name = 'profiles'\r\n\r\n    def __str__(self):\r\n        return f'<UserProfile: {self.user.username}>'\r\n\r\n    @property\r\n    def parent_entity(self):\r\n        return self.entity.parent_entity\r\n\r\n\r\n\r\n# models/entity.py\r\nclass Entity(models.Model):\r\n    # NOTE: Can be thought of as 'Entity Location'\r\n\r\n    parent_entity = models.ForeignKey(ParentEntity, on_delete=models.PROTECT,\r\n                                      related_name='child_entities')\r\n    class JSONAPIMeta:\r\n        resource_name = 'entities'\r\n\r\n    class Meta:\r\n        verbose_name_plural = 'Entities'\r\n\r\n    def __str__(self):\r\n        return f\"<Entity: {self.name}>\"\r\n\r\n\r\n# models/parent_entity.py\r\nclass ParentEntity(models.Model):\r\n\r\n    name = models.CharField(max_length=250, db_index=True)\r\n\r\n    class Meta:\r\n        verbose_name_plural = 'Parent entities'\r\n\r\n    class JSONAPIMeta:\r\n        resource_name = 'parent-entities'\r\n\r\n    def __str__(self):\r\n        return f'<ParentEntity: {self.name}>'\r\n\r\n# serializers/user_profile_serializer.py\r\nclass UserProfileSerializer(serializers.ModelSerializer):\r\n\r\n    included_serializers = {\r\n        'parent_entity': 'api.serializers.ParentEntitySerializer',\r\n        'entity': 'api.serializers.EntitySerializer',\r\n    }\r\n\r\n    entity = ResourceRelatedField(\r\n        many=False,\r\n        read_only=True,\r\n        required=False\r\n    )\r\n\r\n    # TODO: id gets set to the stringified version of the resource when\r\n    # serialized... not good\r\n    parent_entity = ResourceRelatedField(\r\n        model=ParentEntity,\r\n        many=False,\r\n        read_only=True,\r\n        required=False\r\n    )\r\n\r\n    class Meta:\r\n        fields = '__all__'\r\n        model = UserProfile\r\n        read_only_fields = ('id',)\r\n\r\n# serializers/entity_serializer.py\r\nclass EntitySerializer(serializers.ModelSerializer):\r\n\r\n    included_serializers = {\r\n        'parent_entity': 'api.serializers.ParentEntitySerializer',\r\n    }\r\n\r\n    parent_entity = ResourceRelatedField(\r\n        many=False,\r\n        read_only=True,\r\n        required=False\r\n    )\r\n\r\n    class Meta:\r\n        model = Entity\r\n        fields = '__all__'\r\n\r\n\r\n# serializers/parent_entity_serializer.py\r\nclass ParentEntitySerializer(serializers.ModelSerializer):\r\n\r\n    class Meta:\r\n        model = ParentEntity\r\n        fields = '__all__'\r\n\r\n```\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/679", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/679/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/679/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/679/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/679", "id": 471270447, "node_id": "MDU6SXNzdWU0NzEyNzA0NDc=", "number": 679, "title": "ImportError: Could not import 'rest_framework_json_api.django_filters.DjangoFilterBackend' for API setting 'DEFAULT_FILTER_BACKENDS'", "user": {"login": "JonForest", "id": 4940106, "node_id": "MDQ6VXNlcjQ5NDAxMDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4940106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonForest", "html_url": "https://github.com/JonForest", "followers_url": "https://api.github.com/users/JonForest/followers", "following_url": "https://api.github.com/users/JonForest/following{/other_user}", "gists_url": "https://api.github.com/users/JonForest/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonForest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonForest/subscriptions", "organizations_url": "https://api.github.com/users/JonForest/orgs", "repos_url": "https://api.github.com/users/JonForest/repos", "events_url": "https://api.github.com/users/JonForest/events{/privacy}", "received_events_url": "https://api.github.com/users/JonForest/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-22T19:24:57Z", "updated_at": "2019-07-23T18:48:27Z", "closed_at": "2019-07-23T18:46:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've just started a new project with a Python 3.7.2 virtual env.\r\n\r\nResults of a freeze are:\r\n\u279c  mysite pip freeze\r\nDjango==2.2.3\r\ndjangorestframework==3.10.1\r\ndjangorestframework-jsonapi==2.8.0\r\ninflection==0.3.1\r\npytz==2019.1\r\nsix==1.12.0\r\nsqlparse==0.3.0\r\n\r\nI've added the default SETTINGS from the docs.\r\n\r\nIf I then \r\n```\r\n> python manage.py shell\r\n\r\n>>> from rest_framework_json_api import views\r\n```\r\nThen I get an error thrown\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/jonathanhollingsworth/.virtualenvs/dja-manual-test/lib/python3.7/site-packages/rest_framework/settings.py\", line 177, in import_from_string\r\n    return import_string(val)\r\n  File \"/Users/jonathanhollingsworth/.virtualenvs/dja-manual-test/lib/python3.7/site-packages/django/utils/module_loading.py\", line 17, in import_string\r\n    module = import_module(module_path)\r\n  File \"/Users/jonathanhollingsworth/.virtualenvs/dja-manual-test/lib/python3.7/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/Users/jonathanhollingsworth/.virtualenvs/dja-manual-test/lib/python3.7/site-packages/rest_framework_json_api/django_filters/__init__.py\", line 1, in <module>\r\n    from .backends import DjangoFilterBackend  # noqa: F401\r\n  File \"/Users/jonathanhollingsworth/.virtualenvs/dja-manual-test/lib/python3.7/site-packages/rest_framework_json_api/django_filters/backends.py\", line 3, in <module>\r\n    from django_filters import VERSION\r\nModuleNotFoundError: No module named 'django_filters'\r\n```\r\n\r\nNot sure where to go next with this one.\r\nAm happy to put up the failing minimal case as a public repo if that is helpful.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/675", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/675/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/675/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/675/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/675", "id": 465275019, "node_id": "MDU6SXNzdWU0NjUyNzUwMTk=", "number": 675, "title": "Using a non primary key column for the id attribute", "user": {"login": "charlieallatson", "id": 22602248, "node_id": "MDQ6VXNlcjIyNjAyMjQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/22602248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charlieallatson", "html_url": "https://github.com/charlieallatson", "followers_url": "https://api.github.com/users/charlieallatson/followers", "following_url": "https://api.github.com/users/charlieallatson/following{/other_user}", "gists_url": "https://api.github.com/users/charlieallatson/gists{/gist_id}", "starred_url": "https://api.github.com/users/charlieallatson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charlieallatson/subscriptions", "organizations_url": "https://api.github.com/users/charlieallatson/orgs", "repos_url": "https://api.github.com/users/charlieallatson/repos", "events_url": "https://api.github.com/users/charlieallatson/events{/privacy}", "received_events_url": "https://api.github.com/users/charlieallatson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-08T14:00:24Z", "updated_at": "2019-07-08T15:16:52Z", "closed_at": "2019-07-08T15:16:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a use case where my model has a normal primary key which is an integer but I don't want to expose this value to consumers of the api. Instead I want the id attribute to be a separate column which is a uuid. Is this something this project could support?\r\nMy proposal would be to have a meta class defined on the model which tells us to use a different field rather than the primary key.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/674", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/674/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/674/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/674/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/674", "id": 464619357, "node_id": "MDU6SXNzdWU0NjQ2MTkzNTc=", "number": 674, "title": "Use extra requires to seperate optional features django-filter and polymorphic", "user": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-05T12:30:58Z", "updated_at": "2019-10-03T16:53:05Z", "closed_at": "2019-10-03T16:53:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The optional features (Polymorphic and Django filter) should define their dependencies as extra.\r\n\r\nCurrently this is only done as test requires but actual users won't have enforced minimum requirements.\r\n\r\nOnce this is done a user can simply add following into their requirements to properly activate an optional feature:\r\n\r\n```\r\ndjangorestframework-jsonapi[django-filter] == 2.8.0\r\n```\r\n\r\nsee \r\nhttps://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/670", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/670/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/670/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/670/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/670", "id": 461873168, "node_id": "MDU6SXNzdWU0NjE4NzMxNjg=", "number": 670, "title": "django-admin runserver --settings=example.settings ", "user": {"login": "mamtach", "id": 25416531, "node_id": "MDQ6VXNlcjI1NDE2NTMx", "avatar_url": "https://avatars2.githubusercontent.com/u/25416531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mamtach", "html_url": "https://github.com/mamtach", "followers_url": "https://api.github.com/users/mamtach/followers", "following_url": "https://api.github.com/users/mamtach/following{/other_user}", "gists_url": "https://api.github.com/users/mamtach/gists{/gist_id}", "starred_url": "https://api.github.com/users/mamtach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mamtach/subscriptions", "organizations_url": "https://api.github.com/users/mamtach/orgs", "repos_url": "https://api.github.com/users/mamtach/repos", "events_url": "https://api.github.com/users/mamtach/events{/privacy}", "received_events_url": "https://api.github.com/users/mamtach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-28T06:09:44Z", "updated_at": "2019-06-28T07:50:42Z", "closed_at": "2019-06-28T07:50:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running django-admin runserver --settings=example.settings command\r\n\r\n(django-rest-framework-json-api) PS C:\\Users\\<USER>\\django-rest-framework-json-api> django-admin runserver --settings=example.settings\r\nc:\\users\\<USER>\\django-rest-framework-json-api\\scripts\\python.exe: can't open file 'C:\\Users\\<USER>\\django-rest-framework-json-api\\Scripts\\django-admin': [Errno 2] No such file or directory\r\n\r\nHowever, I can see this dierectory\r\n(django-rest-framework-json-api) PS C:\\Users\\<USER>\\django-rest-framework-json-api\\Scripts> ls\r\n    Directory: C:\\Users\\<USER>\\django-rest-framework-json-api\\Scripts\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\nd-----        6/28/2019  11:12 AM                __pycache__\r\n-a----        6/28/2019  10:41 AM           2242 activate\r\n-a----        6/28/2019  10:41 AM            921 activate.bat\r\n-a----        6/28/2019  10:41 AM           1808 activate.ps1\r\n-a----        6/28/2019  10:41 AM           1179 activate.xsh\r\n-a----        6/28/2019  10:41 AM           1512 activate_this.py\r\n-a----        6/28/2019  10:41 AM            512 deactivate.bat\r\n_**-a----        6/28/2019  11:12 AM         102836 django-admin.exe\r\n-a----        6/28/2019  11:12 AM            174 django-admin.py**_\r\n-a----        6/28/2019  11:24 AM              0 drf_example\r\n-a----        6/28/2019  11:16 AM         102803 easy_install-3.7.exe\r\n-a----        6/28/2019  11:16 AM         102803 easy_install.exe\r\n-a----        6/28/2019  11:16 AM         102785 pip.exe\r\n-a----        6/28/2019  11:16 AM         102785 pip3.7.exe\r\n-a----        6/28/2019  11:16 AM         102785 pip3.exe\r\n-a----        6/28/2019  11:16 AM          99856 python.exe\r\n-a----        6/28/2019  11:16 AM          58896 python3.dll\r\n-a----        6/28/2019  11:16 AM        3780624 python37.dll\r\n-a----        6/28/2019  11:16 AM          98320 pythonw.exe\r\n-a----        6/28/2019  11:11 AM         102789 sqlformat.exe\r\n-a----        6/28/2019  11:16 AM         102781 wheel.exe\r\n\r\nI am running the commands on Admin mode on Windows PowerShell", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/662", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/662/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/662/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/662/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/662", "id": 454878736, "node_id": "MDU6SXNzdWU0NTQ4Nzg3MzY=", "number": 662, "title": "Cleaning up code for release 3.0.0", "user": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-11T20:04:38Z", "updated_at": "2019-08-11T21:17:55Z", "closed_at": "2019-08-11T21:17:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "DRF 3.10 is cleaning up its code base quite a bit so I suggest we also take the opportunity to clean up DJA as well by planning a major release 3.0.0\r\n\r\nFollowing steps would I see:\r\n* releasing 2.8.0 (notes to be the last release for Python 2.7, 3.4 and DRF <3.9)\r\n* dropping support for Python 2.7 and 3.4 (#658)\r\n* dropping support for Django Filter 1.1\r\n* dropping support for all DRF versions <3.9\r\n* remove all DJA deprecated code\r\n* solving DRF deprecation issue (like #657 and others)\r\n\r\nThis version of course will only be released once DRF 3.10 is as well.\r\n\r\n@n2ygk What do you think? If we agree on the steps I hope to find some time to work on this (starting with releasing 2.8.0)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/658", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/658/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/658/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/658/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/658", "id": 453620624, "node_id": "MDU6SXNzdWU0NTM2MjA2MjQ=", "number": 658, "title": "python 3.4 deprecated", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-07T17:34:28Z", "updated_at": "2019-07-04T11:59:56Z", "closed_at": "2019-07-04T11:59:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Python 3.4 is dropped by upstream DRF per https://github.com/encode/django-rest-framework/pull/6620\r\n\r\nWe should drop it from DJA as well.\r\n\r\n```\r\nDEPRECATION: Python 3.4 support has been deprecated. pip 19.1 will be the last one supporting it. Please upgrade your Python as Python 3.4 won't be maintained after March 2019 (cf PEP 429).\r\nCollecting https://github.com/encode/django-rest-framework/archive/master.zip\r\n  Downloading https://github.com/encode/django-rest-framework/archive/master.zip\r\n    ERROR: Complete output from command python setup.py egg_info:\r\n    ERROR: \r\n    ==========================\r\n    Unsupported Python version\r\n    ==========================\r\n    \r\n    This version of Django REST Framework requires Python 3.5, but you're trying\r\n    to install it on Python 3.4.\r\n    \r\n    This may be because you are using a version of pip that doesn't\r\n    understand the python_requires classifier. Make sure you\r\n    have pip >= 9.0 and setuptools >= 24.2, then try again:\r\n    \r\n        $ python -m pip install --upgrade pip setuptools\r\n        $ python -m pip install djangorestframework\r\n    \r\n    This will install the latest version of Django REST Framework which works on\r\n    your version of Python. If you can't upgrade your pip (or Python), request\r\n    an older version of Django REST Framework:\r\n    \r\n        $ python -m pip install \"django<3.10\"\r\n    ----------------------------------------\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/657", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/657/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/657/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/657/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/657", "id": 453553521, "node_id": "MDU6SXNzdWU0NTM1NTM1MjE=", "number": 657, "title": "DRF 3.10 deprecated decorators", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-06-07T14:50:30Z", "updated_at": "2019-07-05T12:19:58Z", "closed_at": "2019-07-05T12:19:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The drfmaster builds are currently failing due to a deprecation described in https://github.com/encode/django-rest-framework/pull/6687:\r\n```\r\n@detail_route/@list_route (replaced by @action)\r\n```\r\n\r\nHere's a snippet showing the error:\r\n```\r\n____________________ ERROR collecting example/urls_test.py _____________________\r\nImportError while importing test module '/home/travis/build/django-json-api/django-rest-framework-json-api/example/urls_test.py'.\r\nHint: make sure your test modules/packages have valid Python names.\r\nTraceback:\r\nexample/urls_test.py:4: in <module>\r\n    from .api.resources.identity import GenericIdentity, Identity\r\nexample/api/resources/identity.py:4: in <module>\r\n    from rest_framework.decorators import detail_route, list_route\r\nE   ImportError: cannot import name 'detail_route' from 'rest_framework.decorators' (/home/travis/build/django-json-api/django-rest-framework-json-api/.tox/py37-df20-django22-drfmaster/lib/python3.7/site-packages/rest_framework/decorators.py)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/647", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/647/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/647/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/647/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/647", "id": 451050280, "node_id": "MDU6SXNzdWU0NTEwNTAyODA=", "number": 647, "title": "Membership in list filter failing", "user": {"login": "thogerb", "id": 33135396, "node_id": "MDQ6VXNlcjMzMTM1Mzk2", "avatar_url": "https://avatars3.githubusercontent.com/u/33135396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thogerb", "html_url": "https://github.com/thogerb", "followers_url": "https://api.github.com/users/thogerb/followers", "following_url": "https://api.github.com/users/thogerb/following{/other_user}", "gists_url": "https://api.github.com/users/thogerb/gists{/gist_id}", "starred_url": "https://api.github.com/users/thogerb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thogerb/subscriptions", "organizations_url": "https://api.github.com/users/thogerb/orgs", "repos_url": "https://api.github.com/users/thogerb/repos", "events_url": "https://api.github.com/users/thogerb/events{/privacy}", "received_events_url": "https://api.github.com/users/thogerb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-01T06:05:00Z", "updated_at": "2019-06-03T17:38:12Z", "closed_at": "2019-06-03T17:38:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi - amazing project you have going on here! Quite a delight working with and also seeing that it's being developed on.\r\n\r\nI ran into an issue yesterday with filtering, which I couldn't solve. It might be a bug, or else I am not understanding the docs on setting it up -- in either case help would be appreciated. \r\n\r\n## Expected behavior:\r\n\r\nTo be able to filter on a list of values like it says in the docs: \"Membership in a list of values: ?filter[name.in]=abc,123,zzz (name in ['abc','123','zzz'])\"\r\n\r\n* My url query is simply \"categories/?filter[id.in]=1,2,3\" \r\n* I have set the DjangoFilterBackend as a default in settings\r\n* I have added filterset_fields on the viewset\r\n\r\n## Experienced behavior:\r\n\r\nIf raises **ValidationError: [ErrorDetail(string='invalid filter[id__in]', code='invalid')]**. \r\n\r\n## Traceback\r\n\r\nTraceback (most recent call last):\r\n  File \"... lib/python3.6/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"... lib/python3.6/site-packages/django/core/handlers/base.py\", line 156, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \".../lib/python3.6/site-packages/django/core/handlers/base.py\", line 154, in _get_response\r\n    response = response.render()\r\n  File \".../lib/python3.6/site-packages/django/template/response.py\", line 106, in render\r\n    self.content = self.rendered_content\r\n  File \".../lib/python3.6/site-packages/rest_framework/response.py\", line 72, in rendered_content\r\n    ret = renderer.render(self.data, accepted_media_type, context)\r\n  File \".../lib/python3.6/site-packages/rest_framework/renderers.py\", line 732, in render\r\n    context = self.get_context(data, accepted_media_type, renderer_context)\r\n  File \".../lib/python3.6/site-packages/rest_framework/renderers.py\", line 709, in get_context\r\n    'filter_form': self.get_filter_form(data, view, request),\r\n  File \".../lib/python3.6/site-packages/rest_framework/renderers.py\", line 641, in get_filter_form\r\n    html = backend().to_html(request, queryset, view)\r\n  File \".../lib/python3.6/site-packages/django_filters/rest_framework/backends.py\", line 99, in to_html\r\n    filterset = self.get_filterset(request, queryset, view)\r\n  File \".../lib/python3.6/site-packages/rest_framework_json_api/django_filters/backends.py\", line 90, in get_filterset\r\n    self._validate_filter(kwargs.pop('filter_keys'), filterset_class)\r\n  File \".../lib/python3.6/site-packages/rest_framework_json_api/django_filters/backends.py\", line 79, in _validate_filter\r\n    raise ValidationError(\"invalid filter[{}]\".format(k))\r\nrest_framework.exceptions.ValidationError: [ErrorDetail(string='invalid filter[id__in]', code='invalid')]\r\n\r\n## Hope you can help\r\n\r\nLooking forward to hearing from you and hope you can help! (I fixed the filtering problem in a very hacky and temporary way, so no rush).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/639", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/639/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/639/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/639/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/639", "id": 447611408, "node_id": "MDU6SXNzdWU0NDc2MTE0MDg=", "number": 639, "title": "Adapt SerializerMethodResourceRelatedField behaviro to DRF SerializerMethodField", "user": {"login": "David-Guillot", "id": 1136694, "node_id": "MDQ6VXNlcjExMzY2OTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1136694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/David-Guillot", "html_url": "https://github.com/David-Guillot", "followers_url": "https://api.github.com/users/David-Guillot/followers", "following_url": "https://api.github.com/users/David-Guillot/following{/other_user}", "gists_url": "https://api.github.com/users/David-Guillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/David-Guillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/David-Guillot/subscriptions", "organizations_url": "https://api.github.com/users/David-Guillot/orgs", "repos_url": "https://api.github.com/users/David-Guillot/repos", "events_url": "https://api.github.com/users/David-Guillot/events{/privacy}", "received_events_url": "https://api.github.com/users/David-Guillot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044491, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-23T11:49:02Z", "updated_at": "2020-05-03T19:44:19Z", "closed_at": "2020-05-03T19:44:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\n[DRF's SerializerMethodField](https://github.com/encode/django-rest-framework/blob/master/rest_framework/fields.py#L1827-L1868) makes it easy to avoid defining a method name as it auto-computes a method name by prepending `get_` to the field source.\r\n\r\nWith DJA's SerializerMethodResourceRelatedField, one *has to* define the `source` attribute as without it, the method name conflicts with the field name (i'm not sure to be crystal-clear here :confused: ).\r\n\r\nI find it:\r\n\r\n* Annoying (in a very minor way)\r\n* Not consistent with what developers are used to with vanilla DRF\r\n\r\nSo if you agree with me, i can probably open a PR that adds this bit of sugar (although i'm not sure to understand all the implications for the read/write use case, but i can give it a try).\r\n\r\nSo what do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/638", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/638/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/638/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/638/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/638", "id": 447479434, "node_id": "MDU6SXNzdWU0NDc0Nzk0MzQ=", "number": 638, "title": "Add information on how to integrate JSON API with with DRF built-in coreapi documentation", "user": {"login": "arielpontes", "id": 1641431, "node_id": "MDQ6VXNlcjE2NDE0MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1641431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielpontes", "html_url": "https://github.com/arielpontes", "followers_url": "https://api.github.com/users/arielpontes/followers", "following_url": "https://api.github.com/users/arielpontes/following{/other_user}", "gists_url": "https://api.github.com/users/arielpontes/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielpontes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielpontes/subscriptions", "organizations_url": "https://api.github.com/users/arielpontes/orgs", "repos_url": "https://api.github.com/users/arielpontes/repos", "events_url": "https://api.github.com/users/arielpontes/events{/privacy}", "received_events_url": "https://api.github.com/users/arielpontes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-05-23T06:53:24Z", "updated_at": "2019-05-24T13:33:20Z", "closed_at": "2019-05-24T13:33:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I followed the instructions in the DRF docs to generate documentation for my project but it doesn't show the correct expected payload format in PATCH/POST endpoints. It shows the following standard messages in all endpoints:\r\n\r\n> The request body should be a \"application/x-www-form-urlencoded\" encoded object, containing the following items.\r\n\r\nAnd then it shows a list of the attributes that are supported, but there is no mention of the JSON API format, which should be:\r\n\r\n```\r\n{\r\n    \"data\": {\r\n        \"type\": \"ResourceType\",\r\n        \"attributes\": {\r\n            ...\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHow can I customize the DRF documentation so that it shows the proper format and content-type expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/636", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/636/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/636/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/636/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/636", "id": 446812535, "node_id": "MDU6SXNzdWU0NDY4MTI1MzU=", "number": 636, "title": "Build docs error when creating api doc", "user": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-21T20:34:05Z", "updated_at": "2019-05-24T14:35:44Z", "closed_at": "2019-05-24T14:35:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Following error occurs when running `make html`\r\n```\r\nRunning Sphinx v2.0.1\r\nusage: sphinx-build [OPTIONS] -o <OUTPUT_PATH> <MODULE_PATH> [EXCLUDE_PATTERN, ...]\r\nsphinx-build: error: unrecognized arguments: ../rest_framework_json_api\r\n```\r\n\r\nSee \r\nhttps://readthedocs.org/projects/django-rest-framework-json-api/builds/9074255/\r\n\r\nA regression since updated to Sphinx 2.0. Not so sure though why because when running sphinx-build directly on the console it works without any problems.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/635", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/635/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/635/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/635/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/635", "id": 446791957, "node_id": "MDU6SXNzdWU0NDY3OTE5NTc=", "number": 635, "title": "Tox using pytest-runner setup scripts leads to invalid deps", "user": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-21T19:43:09Z", "updated_at": "2019-10-10T18:30:27Z", "closed_at": "2019-10-10T18:30:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently tox uses pytest-runner setup script wrapper. This way tests are run differently when run locally as stated in README.md.\r\n\r\nThis may lead to different dependencies and errors as for example #634\r\n\r\nBest to split up requirements as in [DRF](https://github.com/encode/django-rest-framework/tree/master/requirements) and remove setup pytest-runner script. Once this is done `test_requires` in setup.py would not be needed which remoes the duplication to requirements-development.txt", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/629", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/629/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/629/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/629/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/629", "id": 444140725, "node_id": "MDU6SXNzdWU0NDQxNDA3MjU=", "number": 629, "title": "@six gone missing with DRF 3.10.x", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-14T21:49:12Z", "updated_at": "2019-05-15T15:38:22Z", "closed_at": "2019-05-15T13:39:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It looks like the upcoming DRF 3.10 release drops Py2 support and the `six` module. It used to import it here: https://github.com/encode/django-rest-framework/blob/3.9.x/rest_framework/serializers.py#L26 and it is gone in master now.\r\n\r\nApparently it is used only one place in DJA: https://github.com/django-json-api/django-rest-framework-json-api/blob/26e65a14b27c82b16cd393a3d5821a966464de51/rest_framework_json_api/serializers.py#L261\r\n\r\nand must have been importing it from here: https://github.com/django-json-api/django-rest-framework-json-api/blob/26e65a14b27c82b16cd393a3d5821a966464de51/rest_framework_json_api/serializers.py#L5\r\n\r\n\"noqa\" indeed!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/621", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/621/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/621/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/621/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/621", "id": 441731300, "node_id": "MDU6SXNzdWU0NDE3MzEzMDA=", "number": 621, "title": "get_related_resource_type failing for polymorphic serializers", "user": {"login": "favll", "id": 9731313, "node_id": "MDQ6VXNlcjk3MzEzMTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9731313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/favll", "html_url": "https://github.com/favll", "followers_url": "https://api.github.com/users/favll/followers", "following_url": "https://api.github.com/users/favll/following{/other_user}", "gists_url": "https://api.github.com/users/favll/gists{/gist_id}", "starred_url": "https://api.github.com/users/favll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/favll/subscriptions", "organizations_url": "https://api.github.com/users/favll/orgs", "repos_url": "https://api.github.com/users/favll/repos", "events_url": "https://api.github.com/users/favll/events{/privacy}", "received_events_url": "https://api.github.com/users/favll/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-08T13:19:19Z", "updated_at": "2019-09-18T17:51:54Z", "closed_at": "2019-09-18T17:51:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have run into a problem where DRF JSON API resolves the wrong related resource type when trying to include a resource using a polymorphic serializer. Specifically, DRF JSON API will resolve the base model instead of the inherited model.\r\n\r\nBelow is an abbreviated example for the issue we are running into. In the following example `utils.get_related_resource_type` will resolve the `parent_model` to `models.Product` instead of `models.ArtProduct` (line [here](https://github.com/django-json-api/django-rest-framework-json-api/blob/eb445137ba3731b091c99e269d82adcea36b60e0/rest_framework_json_api/utils.py#L257)). Subsequently, the method will try to access `art_details` on the `parent_model` which will fail since it only exists on `models.ArtProduct` and not `models.Product` (line [here](https://github.com/django-json-api/django-rest-framework-json-api/blob/eb445137ba3731b091c99e269d82adcea36b60e0/rest_framework_json_api/utils.py#L264)). \r\n\r\nA proposed fix would be to resolve the `parent_model` by checking if the `parent_serializer` is a polymorphic serializer and resolving the `parent_model` with something along the lines of: \r\n`parent_serializer.get_polymorphic_serializer_for_instance(parent_serializer.instance).Meta.model`\r\n\r\nIf desired, I can provide further clarification and prepare a PR. \r\n\r\n```python3\r\nclass ArtProductSerializer(serializers.ModelSerializer):\r\n    price = MoneyField(max_digits=19, decimal_places=4)\r\n\r\n    included_serializers = {\r\n        \"art_details\": ArtDetailSerializer,\r\n    }\r\n\r\n    class JSONAPIMeta:\r\n        included_resources = (\"art_details\",)\r\n        resource_name = \"ArtProduct\"\r\n\r\n    class Meta:\r\n        fields = (\r\n            \"id\",\r\n            \"price\",\r\n            \"art_details\",\r\n        )\r\n        model = models.ArtProduct\r\n\r\n\r\nclass PolymorphicProductSerializer(serializers.PolymorphicModelSerializer):\r\n    polymorphic_serializers = [ArtProductSerializer]\r\n\r\n    class Meta:\r\n        model = models.Product\r\n\r\n\r\nclass CartItemSerializer(serializers.ModelSerializer):\r\n\r\n    included_serializers = {\r\n        \"product\": PolymorphicProductSerializer,\r\n    }\r\n\r\n    class Meta:\r\n        model = models.CartItem\r\n        fields = (\"id\", \"product\")\r\n\r\n\r\nclass CartSerializer(serializers.ModelSerializer):\r\n    included_serializers = {\r\n        \"items\": CartItemSerializer,\r\n    }\r\n\r\n    class Meta:\r\n        model = models.Cart\r\n        fields = (\"id\", \"items\")\r\n        read_only_fields = (\"id\", \"items\")\r\n\r\n    class JSONAPIMeta:\r\n        included_resources = (\"items\", \"items.product\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/614", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/614/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/614/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/614/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/614", "id": 439338479, "node_id": "MDU6SXNzdWU0MzkzMzg0Nzk=", "number": 614, "title": "remove ModelViewSet PUT/update() method?", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-05-01T21:45:18Z", "updated_at": "2019-06-08T18:27:07Z", "closed_at": "2019-06-08T18:27:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "DJA uses DRF's viewsets.ModelViewset which includes both PUT (update()) and PATCH (partial_update()) methods. However,  the JSONAPI spec only defines [PATCH](https://jsonapi.org/format/#crud-updating). DJA allows the PUT method. This becomes more apparent when using the new DRF openapi schema generator since it wants to document the PUT method. While DJA implements PUT identically to PATCH, it might be better to not expose this method as the PUT [semantics](https://tools.ietf.org/html/rfc7231#section-4.3.4) defines a full replacement, which DJA's PUT does not do, since it's just implementing [PATCH](https://tools.ietf.org/html/rfc5789).\r\n\r\nI'm not sure exactly where the PUT method gets defined but I think the change is to replace DRF's ModelViewSet with a DJA-specific version that replaces\r\nDRF's `mixins.UpdateModelMixin` with one that doesn't define it. \r\n\r\nhttps://github.com/django-json-api/django-rest-framework-json-api/blob/de7021f9e011615ce8b65d0cb38227c6c12721b6/rest_framework_json_api/views.py#L189-L192\r\n\r\nYou can see this by doing an `OPTIONS http://localhost:8000/blogs/1` as in this example:\r\n```json\r\n{\r\n    \"data\": {\r\n        \"name\": \"Blog Instance\",\r\n        \"description\": \"\",\r\n        \"renders\": [\r\n            \"application/vnd.api+json\",\r\n            \"text/html\"\r\n        ],\r\n        \"parses\": [\r\n            \"application/vnd.api+json\",\r\n            \"application/x-www-form-urlencoded\",\r\n            \"multipart/form-data\"\r\n        ],\r\n        \"allowed_methods\": [\r\n            \"GET\",\r\n            \"PUT\",\r\n            \"PATCH\",\r\n            \"DELETE\",\r\n            \"HEAD\",\r\n            \"OPTIONS\"\r\n        ],\r\n        \"actions\": {\r\n            \"PUT\": {\r\n                \"name\": {\r\n                    \"type\": \"String\",\r\n                    \"required\": true,\r\n                    \"read_only\": false,\r\n                    \"write_only\": false,\r\n                    \"label\": \"Name\",\r\n                    \"max_length\": 100\r\n                },\r\n                \"tags\": {\r\n                    \"type\": \"GenericField\",\r\n                    \"relationship_type\": \"OneToMany\",\r\n                    \"relationship_resource\": \"taggedItem\",\r\n                    \"required\": false,\r\n                    \"read_only\": true,\r\n                    \"write_only\": false,\r\n                    \"label\": \"Tags\",\r\n                    \"child\": {\r\n                        \"type\": \"Serializer\",\r\n                        \"required\": false,\r\n                        \"read_only\": true,\r\n                        \"write_only\": false,\r\n                        \"children\": {\r\n                            \"tag\": {\r\n                                \"type\": \"Slug\",\r\n                                \"required\": true,\r\n                                \"read_only\": false,\r\n                                \"write_only\": false,\r\n                                \"label\": \"Tag\",\r\n                                \"max_length\": 50\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                \"copyright\": {\r\n                    \"type\": \"GenericField\",\r\n                    \"required\": false,\r\n                    \"read_only\": true,\r\n                    \"write_only\": false,\r\n                    \"label\": \"Copyright\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/613", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/613/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/613/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/613/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/613", "id": 433666274, "node_id": "MDU6SXNzdWU0MzM2NjYyNzQ=", "number": 613, "title": "Deprecation warning in renderers.py", "user": {"login": "Yelinz", "id": 30687616, "node_id": "MDQ6VXNlcjMwNjg3NjE2", "avatar_url": "https://avatars1.githubusercontent.com/u/30687616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yelinz", "html_url": "https://github.com/Yelinz", "followers_url": "https://api.github.com/users/Yelinz/followers", "following_url": "https://api.github.com/users/Yelinz/following{/other_user}", "gists_url": "https://api.github.com/users/Yelinz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yelinz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yelinz/subscriptions", "organizations_url": "https://api.github.com/users/Yelinz/orgs", "repos_url": "https://api.github.com/users/Yelinz/repos", "events_url": "https://api.github.com/users/Yelinz/events{/privacy}", "received_events_url": "https://api.github.com/users/Yelinz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-16T09:07:51Z", "updated_at": "2019-05-15T17:31:44Z", "closed_at": "2019-05-15T17:31:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n.../python3.7/site-packages/rest_framework_json_api/renderers.py:5: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import Iterable, OrderedDict, defaultdict\r\n```\r\n\r\nPython 3.7 throws a deprecation warning for the collections import in renderers.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/603", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/603/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/603/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/603/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/603", "id": 424903209, "node_id": "MDU6SXNzdWU0MjQ5MDMyMDk=", "number": 603, "title": "RelatedMixin get_serializer_class AttributeError View object has not kwargs in line 139", "user": {"login": "sandrabg86", "id": 25534580, "node_id": "MDQ6VXNlcjI1NTM0NTgw", "avatar_url": "https://avatars0.githubusercontent.com/u/25534580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandrabg86", "html_url": "https://github.com/sandrabg86", "followers_url": "https://api.github.com/users/sandrabg86/followers", "following_url": "https://api.github.com/users/sandrabg86/following{/other_user}", "gists_url": "https://api.github.com/users/sandrabg86/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandrabg86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandrabg86/subscriptions", "organizations_url": "https://api.github.com/users/sandrabg86/orgs", "repos_url": "https://api.github.com/users/sandrabg86/repos", "events_url": "https://api.github.com/users/sandrabg86/events{/privacy}", "received_events_url": "https://api.github.com/users/sandrabg86/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}, {"id": 115044494, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTQ=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-25T13:31:02Z", "updated_at": "2019-07-12T08:59:34Z", "closed_at": "2019-07-12T08:59:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "When it is called `view.get_serializer_class` if view inherid from `rest_framework_json_api.ModelViewSet` then get an error in `rest_framework_json_api/views.py` line 139, because View object has not attribute kwargs at this point.\r\n\r\n**Trace** \r\nrest_framework_json_api.renderersJSONRenderer().render -> line 541\r\nrest_framework_json_api.utils.get_resource_name -> line 61\r\nrest_framework_json_api.views.RelatedMixin.get_serializer_class. -> 139", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/596", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/596/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/596/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/596/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/596", "id": 419896568, "node_id": "MDU6SXNzdWU0MTk4OTY1Njg=", "number": 596, "title": "POST request with include query parameter", "user": {"login": "ro70", "id": 17289564, "node_id": "MDQ6VXNlcjE3Mjg5NTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/17289564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ro70", "html_url": "https://github.com/ro70", "followers_url": "https://api.github.com/users/ro70/followers", "following_url": "https://api.github.com/users/ro70/following{/other_user}", "gists_url": "https://api.github.com/users/ro70/gists{/gist_id}", "starred_url": "https://api.github.com/users/ro70/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ro70/subscriptions", "organizations_url": "https://api.github.com/users/ro70/orgs", "repos_url": "https://api.github.com/users/ro70/repos", "events_url": "https://api.github.com/users/ro70/events{/privacy}", "received_events_url": "https://api.github.com/users/ro70/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-12T10:00:44Z", "updated_at": "2019-03-20T17:12:54Z", "closed_at": "2019-03-20T17:12:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "if I do a\r\n```POST /x/?include=y```\r\nrequest I receive the desired instance of `y` included.\r\n\r\nNow I'd like to update the instance `y` during the creation of `x` (in the `XViewSet(rest_framework_json_api.viewsModelViewSet).perform_create()` method). The `included` list in the response does still contain the instance `y` with the old, unmodified values. Is it somehow possible to pass the modified instance to the response?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/591", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/591/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/591/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/591/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/591", "id": 418292823, "node_id": "MDU6SXNzdWU0MTgyOTI4MjM=", "number": 591, "title": "Do `select_related` for ?include", "user": {"login": "Anton-Shutik", "id": 1625053, "node_id": "MDQ6VXNlcjE2MjUwNTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1625053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anton-Shutik", "html_url": "https://github.com/Anton-Shutik", "followers_url": "https://api.github.com/users/Anton-Shutik/followers", "following_url": "https://api.github.com/users/Anton-Shutik/following{/other_user}", "gists_url": "https://api.github.com/users/Anton-Shutik/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anton-Shutik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anton-Shutik/subscriptions", "organizations_url": "https://api.github.com/users/Anton-Shutik/orgs", "repos_url": "https://api.github.com/users/Anton-Shutik/repos", "events_url": "https://api.github.com/users/Anton-Shutik/events{/privacy}", "received_events_url": "https://api.github.com/users/Anton-Shutik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-07T12:50:56Z", "updated_at": "2019-05-29T14:57:21Z", "closed_at": "2019-05-29T14:57:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've found that we have nice `prefetch_for_includes` option on the ModelViewSet. \r\nI would also like `select_for_includes` mixin that will call add `select_related` and pass there values accordingly to the mapping. \r\nIf you like the idea I'll create PR for that", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/560", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/560/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/560/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/560/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/560", "id": 399226062, "node_id": "MDU6SXNzdWUzOTkyMjYwNjI=", "number": 560, "title": "JSON API 1.1: Profle media type and query parameter", "user": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-15T07:56:11Z", "updated_at": "2019-10-04T06:25:17Z", "closed_at": "2019-10-04T06:25:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As of #547 \r\n\r\nAllow [profile media parameter](https://jsonapi.org/format/1.1/#profile-media-type-parameter) and additional [profile query parameter](https://jsonapi.org/format/1.1/#profile-query-parameter) considering error codes when DJA doesn't support given profile.\r\n\r\nThis seems to be kind of similar to what we are discussing in #535 which is also a query parameter and media type.\r\n\r\nAs I understand error codes remain the same as profile and media type is not supported. Hence most likely this issue is only relevant once we implement an additional profile like #548", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/558", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/558/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/558/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/558/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/558", "id": 398834257, "node_id": "MDU6SXNzdWUzOTg4MzQyNTc=", "number": 558, "title": "JSON API 1.1: Profile aliases", "user": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-14T10:49:05Z", "updated_at": "2019-10-04T06:25:24Z", "closed_at": "2019-10-04T06:25:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As of #547 \r\n\r\nTo avoid naming conflict profile aliases need to be evaluated.\r\n\r\nSee https://jsonapi.org/format/1.1/#profile-keywords-and-aliases", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/554", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/554/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/554/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/554/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/554", "id": 396513463, "node_id": "MDU6SXNzdWUzOTY1MTM0NjM=", "number": 554, "title": "JSON API 1.1: CamelCased names", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-07T14:43:05Z", "updated_at": "2019-10-04T06:25:32Z", "closed_at": "2019-10-04T06:25:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See #547. Analyze [recommendation that we SHOULD use CamelCased names](https://jsonapi.org/recommendations/#naming).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/553", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/553/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/553/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/553", "id": 396512970, "node_id": "MDU6SXNzdWUzOTY1MTI5NzA=", "number": 553, "title": "JSON API 1.1: Always return 'included' when 'include' requested", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-07T14:41:41Z", "updated_at": "2019-10-04T06:25:38Z", "closed_at": "2019-10-04T06:25:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See #547. Analyze whether we always return `included` when `include` requested. https://github.com/json-api/json-api/pull/1236", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/552", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/552/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/552/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/552/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/552", "id": 396512153, "node_id": "MDU6SXNzdWUzOTY1MTIxNTM=", "number": 552, "title": "JSON API 1.1: status codes for specific responses", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-07T14:39:30Z", "updated_at": "2019-10-04T06:25:45Z", "closed_at": "2019-10-04T06:25:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See #547. Analyze newly-documented status codes for specific responses: https://github.com/json-api/json-api/pull/1036 & https://github.com/json-api/json-api/pull/1029", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/551", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/551/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/551/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/551/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/551", "id": 396510722, "node_id": "MDU6SXNzdWUzOTY1MTA3MjI=", "number": 551, "title": "JSON API 1.1: query parameters", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-07T14:35:28Z", "updated_at": "2019-10-04T06:25:52Z", "closed_at": "2019-10-04T06:25:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See #547. Analyze updated content about [query parameters](https://jsonapi.org/format/1.1/#query-parameters).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/550", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/550/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/550/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/550", "id": 396509938, "node_id": "MDU6SXNzdWUzOTY1MDk5Mzg=", "number": 550, "title": "JSON API 1.1: error object 'type' links", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-07T14:33:28Z", "updated_at": "2019-10-04T06:25:59Z", "closed_at": "2019-10-04T06:25:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See #547. Analyze error-object [type links](https://jsonapi.org/format/1.1/#error-objects)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/549", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/549/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/549/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/549/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/549", "id": 396509429, "node_id": "MDU6SXNzdWUzOTY1MDk0Mjk=", "number": 549, "title": "JSON API 1.1: @-Members", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-07T14:32:08Z", "updated_at": "2019-10-04T06:26:07Z", "closed_at": "2019-10-04T06:26:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See #547. Anaylze [@-Members](https://jsonapi.org/format/1.1/#document-member-names-at-members)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/548", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/548/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/548/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/548/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/548", "id": 396507717, "node_id": "MDU6SXNzdWUzOTY1MDc3MTc=", "number": 548, "title": "JSON API 1.1: cursor-pagination profile", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-07T14:27:38Z", "updated_at": "2019-10-04T06:26:17Z", "closed_at": "2019-10-04T06:26:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See #547. Analyze new [cursor-pagination profile](https://jsonapi.org/format/1.1/#profiles)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/547", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/547/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/547/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/547/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/547", "id": 396404880, "node_id": "MDU6SXNzdWUzOTY0MDQ4ODA=", "number": 547, "title": "Analyse JSON API Version 1.1 RC 1", "user": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-01-07T09:13:16Z", "updated_at": "2020-08-22T00:23:00Z", "closed_at": "2019-10-04T06:26:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "New release candidate of JSON API specification has been released.\r\n\r\nThere is now also a changelog to be reviewed at https://jsonapi.org/#update-history\r\n\r\nA quickly browsed through it and it seems a few small changes would be needed to be done in DJA.\r\n\r\nOpening this issue as a task to analyze what single steps needs to be done in DJA to support 1.1. Best is to open a new each for each single task.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/539", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/539/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/539/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/539/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/539", "id": 395079487, "node_id": "MDU6SXNzdWUzOTUwNzk0ODc=", "number": 539, "title": "Unit-Tests expect the year 2018 but get 2019", "user": {"login": "puremath", "id": 11706262, "node_id": "MDQ6VXNlcjExNzA2MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/11706262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/puremath", "html_url": "https://github.com/puremath", "followers_url": "https://api.github.com/users/puremath/followers", "following_url": "https://api.github.com/users/puremath/following{/other_user}", "gists_url": "https://api.github.com/users/puremath/gists{/gist_id}", "starred_url": "https://api.github.com/users/puremath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/puremath/subscriptions", "organizations_url": "https://api.github.com/users/puremath/orgs", "repos_url": "https://api.github.com/users/puremath/repos", "events_url": "https://api.github.com/users/puremath/events{/privacy}", "received_events_url": "https://api.github.com/users/puremath/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-01T12:35:35Z", "updated_at": "2019-01-03T14:51:20Z", "closed_at": "2019-01-03T14:51:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This morning I ran all the test and some of the tests suddenly failed because they expect the year 2018 but automatically generated years are now 2019. The affected tests are\r\n\r\n```\r\nexample/tests/test_views.py::TestBlogViewSet::test_get_object_gives_correct_blog FAILED\r\nexample/tests/unit/test_default_drf_serializers.py::test_blog_create FAILED                                                                   \r\nexample/tests/unit/test_default_drf_serializers.py::test_get_object_gives_correct_blog FAILED                                                 \r\nexample/tests/unit/test_default_drf_serializers.py::test_get_object_patches_correct_blog FAILED\r\n```\r\n\r\nThe reason is always the same:\r\n\r\n```\r\nE         Full diff:\r\nE         {'data': {'attributes': {'name': 'Kimberly Lewis'},\r\nE         'id': '1',\r\nE         'links': {'self': 'http://testserver/blogs/1'},\r\nE         -           'meta': {'copyright': 2019},\r\nE         ?                                    ^\r\nE         +           'meta': {'copyright': 2018},\r\nE         ?                                    ^\r\nE         'relationships': {'tags': {'data': []}},\r\nE         'type': 'blogs'},\r\nE         'meta': {'apiDocs': '/docs/api/blogs'}}\r\n\r\nexample/tests/unit/test_default_drf_serializers.py:139: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/537", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/537/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/537/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/537/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/537", "id": 394650738, "node_id": "MDU6SXNzdWUzOTQ2NTA3Mzg=", "number": 537, "title": "AutoprefetchMixin fails when a one to one relation is used on include", "user": {"login": "santiavenda2", "id": 778318, "node_id": "MDQ6VXNlcjc3ODMxOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/778318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/santiavenda2", "html_url": "https://github.com/santiavenda2", "followers_url": "https://api.github.com/users/santiavenda2/followers", "following_url": "https://api.github.com/users/santiavenda2/following{/other_user}", "gists_url": "https://api.github.com/users/santiavenda2/gists{/gist_id}", "starred_url": "https://api.github.com/users/santiavenda2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/santiavenda2/subscriptions", "organizations_url": "https://api.github.com/users/santiavenda2/orgs", "repos_url": "https://api.github.com/users/santiavenda2/repos", "events_url": "https://api.github.com/users/santiavenda2/events{/privacy}", "received_events_url": "https://api.github.com/users/santiavenda2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-28T14:39:04Z", "updated_at": "2019-01-04T08:27:15Z", "closed_at": "2019-01-04T08:27:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I use a one to one relation inside include parameter, AutoPrefetchMixin fails with this error: `AttributeError: 'ReverseOneToOneDescriptor' object has no attribute 'field'`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/528", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/528/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/528/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/528", "id": 388101034, "node_id": "MDU6SXNzdWUzODgxMDEwMzQ=", "number": 528, "title": "Object relationships is always rendered", "user": {"login": "masarliev", "id": 345387, "node_id": "MDQ6VXNlcjM0NTM4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/345387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masarliev", "html_url": "https://github.com/masarliev", "followers_url": "https://api.github.com/users/masarliev/followers", "following_url": "https://api.github.com/users/masarliev/following{/other_user}", "gists_url": "https://api.github.com/users/masarliev/gists{/gist_id}", "starred_url": "https://api.github.com/users/masarliev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masarliev/subscriptions", "organizations_url": "https://api.github.com/users/masarliev/orgs", "repos_url": "https://api.github.com/users/masarliev/repos", "events_url": "https://api.github.com/users/masarliev/events{/privacy}", "received_events_url": "https://api.github.com/users/masarliev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044494, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTQ=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-06T08:15:06Z", "updated_at": "2019-01-07T13:37:05Z", "closed_at": "2019-01-07T13:37:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "No matter if `include=comments` in send I always get `post.relationships.comments`. `include=comments` just adds comment objects in `included` \r\nIs this default behaviour (always return object relations ) or I am missing something", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/524", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/524/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/524/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/524/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/524", "id": 386543576, "node_id": "MDU6SXNzdWUzODY1NDM1NzY=", "number": 524, "title": "`included` parameter potentially includes the object itself", "user": {"login": "puremath", "id": 11706262, "node_id": "MDQ6VXNlcjExNzA2MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/11706262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/puremath", "html_url": "https://github.com/puremath", "followers_url": "https://api.github.com/users/puremath/followers", "following_url": "https://api.github.com/users/puremath/following{/other_user}", "gists_url": "https://api.github.com/users/puremath/gists{/gist_id}", "starred_url": "https://api.github.com/users/puremath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/puremath/subscriptions", "organizations_url": "https://api.github.com/users/puremath/orgs", "repos_url": "https://api.github.com/users/puremath/repos", "events_url": "https://api.github.com/users/puremath/events{/privacy}", "received_events_url": "https://api.github.com/users/puremath/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-12-02T09:39:15Z", "updated_at": "2019-01-04T09:00:35Z", "closed_at": "2019-01-04T09:00:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let's say we have a class `Room` and a class `Person` with a foreign key to `Room`. Now I want to create a new person in the room and reload all the people already in the room because adding the person might have changed them for some reason. Therefor I send a `POST` request containing the new person to \r\n```\r\npersons/?include=room.persons`\r\n```\r\nThis lead to the newly created person to be included twice, once in the `data` property of the reply and once in the `included` property. Even though this isn't explicitly forbidden by jsonapi.org, Ember doesn't like this. IMHO an object shouldn't be included twice in a reply - meaning that this should be fixed on the DJA side of things.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/521", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/521/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/521/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/521/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/521", "id": 385272619, "node_id": "MDU6SXNzdWUzODUyNzI2MTk=", "number": 521, "title": "HyperlinkedRelatedField is incompatible with HyperlinkedModelSerializer", "user": {"login": "hmpf", "id": 11956096, "node_id": "MDQ6VXNlcjExOTU2MDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/11956096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmpf", "html_url": "https://github.com/hmpf", "followers_url": "https://api.github.com/users/hmpf/followers", "following_url": "https://api.github.com/users/hmpf/following{/other_user}", "gists_url": "https://api.github.com/users/hmpf/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmpf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmpf/subscriptions", "organizations_url": "https://api.github.com/users/hmpf/orgs", "repos_url": "https://api.github.com/users/hmpf/repos", "events_url": "https://api.github.com/users/hmpf/events{/privacy}", "received_events_url": "https://api.github.com/users/hmpf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-28T13:40:02Z", "updated_at": "2018-12-10T09:03:54Z", "closed_at": "2018-12-10T09:03:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "If HyperlinkedRelatedField raises SkipField, HyperlinkedModelSerializer does not catch it, leading to a 500 Server Error. Is this a feature or a bug? If a feature, where is it documented?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/496", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/496/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/496/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/496/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/496", "id": 370371015, "node_id": "MDU6SXNzdWUzNzAzNzEwMTU=", "number": 496, "title": "Missing permission checks in RelatedMixin views", "user": {"login": "lcary", "id": 6766704, "node_id": "MDQ6VXNlcjY3NjY3MDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6766704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcary", "html_url": "https://github.com/lcary", "followers_url": "https://api.github.com/users/lcary/followers", "following_url": "https://api.github.com/users/lcary/following{/other_user}", "gists_url": "https://api.github.com/users/lcary/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcary/subscriptions", "organizations_url": "https://api.github.com/users/lcary/orgs", "repos_url": "https://api.github.com/users/lcary/repos", "events_url": "https://api.github.com/users/lcary/events{/privacy}", "received_events_url": "https://api.github.com/users/lcary/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "lcary", "id": 6766704, "node_id": "MDQ6VXNlcjY3NjY3MDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6766704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcary", "html_url": "https://github.com/lcary", "followers_url": "https://api.github.com/users/lcary/followers", "following_url": "https://api.github.com/users/lcary/following{/other_user}", "gists_url": "https://api.github.com/users/lcary/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcary/subscriptions", "organizations_url": "https://api.github.com/users/lcary/orgs", "repos_url": "https://api.github.com/users/lcary/repos", "events_url": "https://api.github.com/users/lcary/events{/privacy}", "received_events_url": "https://api.github.com/users/lcary/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lcary", "id": 6766704, "node_id": "MDQ6VXNlcjY3NjY3MDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6766704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcary", "html_url": "https://github.com/lcary", "followers_url": "https://api.github.com/users/lcary/followers", "following_url": "https://api.github.com/users/lcary/following{/other_user}", "gists_url": "https://api.github.com/users/lcary/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcary/subscriptions", "organizations_url": "https://api.github.com/users/lcary/orgs", "repos_url": "https://api.github.com/users/lcary/repos", "events_url": "https://api.github.com/users/lcary/events{/privacy}", "received_events_url": "https://api.github.com/users/lcary/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 18, "created_at": "2018-10-15T22:39:18Z", "updated_at": "2020-04-30T19:54:19Z", "closed_at": "2020-04-30T19:54:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "No object level or model level permissions appear to be checked for related models in `RelatedMixin` views.\r\n\r\nExpected behavior: The related fields should be empty in a response object if the user doesn't have view permission to the related field. Alternatively, if a response must render the related object, a permissions error should be raised.\r\n\r\nObserved behavior: Currently, if the user has permission for a model but not related models (e.g. via a foreign key relation), they are still able to view the related object if a `RelatedMixin` view's serializer has a `ResourceRelatedField`. This seems to merit at least some documentation warning users about the potential for leaking data, but preferably this issue could be fixed by enabling permissions checking.\r\n\r\nReproducing the issue requires a project that checks that a user has read (or \"view\") permissions for models they try to access (e.g. using extended versions of `DjangoObjectPermissions` and `DjangoModelPermissions` classes mentioned in the [django-rest-framework permissions documentation](https://www.django-rest-framework.org/api-guide/permissions/)). In such a project, for any `RelatedMixin` view that uses a serializer with a `ResourceRelatedField`, grant the user permission to the serializer's model object, but do not grant the user access to the related model. If the user requests the object, they will still be able to access the related field. I'm happy to add a test case for this issue.\r\n\r\nPerhaps object level or even model level permissions checking is out of scope for the django-rest-framework-json-api project, but it seems like both should be supported. After all, django-rest-framework supports and advertises both via the `DjangoObjectPermissions` and `DjangoModelPermissions` classes. In a project I'm working on, we use django-guardian with a similar class to check object-level permissions. Perhaps I can override `RelatedMixin.get_related_instance()` in the meantime as a stopgap solution, but a solution via configuration flag or a default in this library would be preferable.\r\n\r\nBest,\r\nLuc", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/495", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/495/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/495/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/495", "id": 370006785, "node_id": "MDU6SXNzdWUzNzAwMDY3ODU=", "number": 495, "title": "Add support for python 3.7", "user": {"login": "simkimsia", "id": 245021, "node_id": "MDQ6VXNlcjI0NTAyMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/245021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simkimsia", "html_url": "https://github.com/simkimsia", "followers_url": "https://api.github.com/users/simkimsia/followers", "following_url": "https://api.github.com/users/simkimsia/following{/other_user}", "gists_url": "https://api.github.com/users/simkimsia/gists{/gist_id}", "starred_url": "https://api.github.com/users/simkimsia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simkimsia/subscriptions", "organizations_url": "https://api.github.com/users/simkimsia/orgs", "repos_url": "https://api.github.com/users/simkimsia/repos", "events_url": "https://api.github.com/users/simkimsia/events{/privacy}", "received_events_url": "https://api.github.com/users/simkimsia/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044491, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-15T05:43:49Z", "updated_at": "2018-10-15T07:19:58Z", "closed_at": "2018-10-15T07:19:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I like to contribute with a PR regarding adding python 3.7\r\n\r\nI read https://github.com/django-json-api/django-rest-framework-json-api/blob/master/docs/CONTRIBUTING.md\r\n\r\nand my changes are in my fork.\r\n\r\nhttps://github.com/simkimsia/django-rest-framework-json-api/commit/c23c3189faeb7999af5ead8bbe3d0831ee3abbb3\r\n\r\nCan I proceed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/491", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/491/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/491/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/491", "id": 368429998, "node_id": "MDU6SXNzdWUzNjg0Mjk5OTg=", "number": 491, "title": "Resource name with inherited models", "user": {"login": "skeezus", "id": 14863058, "node_id": "MDQ6VXNlcjE0ODYzMDU4", "avatar_url": "https://avatars2.githubusercontent.com/u/14863058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skeezus", "html_url": "https://github.com/skeezus", "followers_url": "https://api.github.com/users/skeezus/followers", "following_url": "https://api.github.com/users/skeezus/following{/other_user}", "gists_url": "https://api.github.com/users/skeezus/gists{/gist_id}", "starred_url": "https://api.github.com/users/skeezus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skeezus/subscriptions", "organizations_url": "https://api.github.com/users/skeezus/orgs", "repos_url": "https://api.github.com/users/skeezus/repos", "events_url": "https://api.github.com/users/skeezus/events{/privacy}", "received_events_url": "https://api.github.com/users/skeezus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-09T22:55:18Z", "updated_at": "2019-03-18T09:29:45Z", "closed_at": "2019-03-18T09:29:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having trouble getting the proper resource_name returned in the relationships object when using model inheritance. For instance, if I have a parent model (users) and child model (employees), the resource_name of the child model is generally returned as users even though I've set it as employees in the JSONAPIMeta tag on my inherited employees model.\r\n\r\nThe employee is returned in the relationships object on my business serializer. On this serializer I don't specify a serializer for employee so it seems to get serialized as a user, not an employee. My serializer code is something like this:\r\n\r\n```\r\nclass BusinessSerializer(serializers.ModelSerializer):\r\n\tclass Meta:\r\n\t\tmodel = Business\r\n\t\tresource_name = 'businesses'\r\n\t\tfields = ('id', 'name', 'address', 'employees')\r\n\r\n```\r\n\r\nAnd my model:\r\n\r\n```\r\nclass Employee(User):\r\n\temployees = models.ForeignKey(\r\n\t\t'businesses.Business',\r\n\t\trelated_name='employees',\r\n\t)\r\n\r\n    class JSONAPIMeta:\r\n\t\tresource_name = 'employees'\r\n```\r\n\r\nI know that defining the resource_name on the serializer is best due to the hierarchy however this requires me to define a serializer for employees which increases dependency in my application. The long-term solution may be to restructure my serializers to handle dependency / circular imports better but I'm wondering if there's another solution here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/489", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/489/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/489/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/489/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/489", "id": 367851693, "node_id": "MDU6SXNzdWUzNjc4NTE2OTM=", "number": 489, "title": "retrieve_related fails for toOne relationship", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044489, "node_id": "MDU6TGFiZWwxMTUwNDQ0ODk=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-10-08T15:50:04Z", "updated_at": "2018-11-16T18:59:20Z", "closed_at": "2018-11-16T18:59:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@Anton-Shutik Using your new  #451 support for related links, using`{'get': 'retrieve_related'}` works fine for a serializer `ResourceRelatedField` where `many=True` but fails for a toOne relationship where `many=False`. \r\n\r\nUsing the old style, I had to override `get_queryset()` for `many=True` views and `get_object()` for `many=False` views so I expect there is a similar need for another \"flavor\" of `retrieve_related` for toOne relationships. Does this make sense?\r\n\r\nHere's my old view code for reference:\r\n\r\n```python\r\nclass CourseTermViewSet(CourseBaseViewSet):\r\n    queryset = CourseTerm.objects.all()\r\n    serializer_class = CourseTermSerializer\r\n\r\n    def get_queryset(self, *args, **kwargs):\r\n        \"\"\"\r\n        Implement `related` view:\r\n        Override `.list` if course_pk kwarg is present since course is toMany to course_term.\r\n        \"\"\"\r\n        course_pk = self.kwargs.get('course_pk', None)\r\n        if course_pk is not None:\r\n            return self.queryset.filter(course_id=course_pk)\r\n        return super(CourseTermViewSet, self).get_queryset()\r\n```\r\n\r\n```python\r\nclass CourseViewSet(CourseBaseViewSet):\r\n    queryset = Course.objects.all()\r\n    serializer_class = CourseSerializer\r\n\r\n    def get_object(self):\r\n        \"\"\"\r\n        Implement `related` view:\r\n        Override `.retrieve` if course_term_pk kwarg is present since course_term is toOne to course.\r\n        \"\"\"\r\n        course_term_pk = self.kwargs.get('course_term_pk', None)\r\n        if course_term_pk is not None:\r\n            return CourseTerm.objects.get(id=course_term_pk).course\r\n        return super(CourseViewSet, self).get_object()\r\n```\r\n\r\nThe new code (eliminates those overrides, sets the kwarg to `pk` and updates the `related_link_view_name`s to `course-related` and `course_term-related`, respectively and throws this error when retrieved:\r\n\r\n```\r\nAttributeError at /v1/course_terms/a1d34785-cc25-4c1c-9806-9d05a98068c7/course/\r\nGot AttributeError when attempting to get a value for field `school_bulletin_prefix_code` on serializer `CourseSerializer`.\r\nThe serializer field might be named incorrectly and not match any attribute or key on the `PKOnlyObject` instance.\r\nOriginal exception text was: 'PKOnlyObject' object has no attribute 'school_bulletin_prefix_code'.\r\n\r\n...\r\nTraceback:\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/fields.py\" in get_attribute\r\n  441.             return get_attribute(instance, self.source_attrs)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/fields.py\" in get_attribute\r\n  100.                 instance = getattr(instance, attr)\r\n\r\nDuring handling of the above exception ('PKOnlyObject' object has no attribute 'school_bulletin_prefix_code'), another exception occurred:\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/django/core/handlers/exception.py\" in inner\r\n  34.             response = get_response(request)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n  126.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n  124.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/django/views/decorators/csrf.py\" in wrapped_view\r\n  54.         return view_func(*args, **kwargs)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/viewsets.py\" in view\r\n  103.             return self.dispatch(request, *args, **kwargs)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/views.py\" in dispatch\r\n  483.             response = self.handle_exception(exc)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/views.py\" in handle_exception\r\n  443.             self.raise_uncaught_exception(exc)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/views.py\" in dispatch\r\n  480.             response = handler(request, *args, **kwargs)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework_json_api/views.py\" in retrieve_related\r\n  128.         return Response(serializer.data)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/serializers.py\" in data\r\n  560.         ret = super(Serializer, self).data\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/serializers.py\" in data\r\n  262.                 self._data = self.to_representation(self.instance)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/serializers.py\" in to_representation\r\n  514.                 attribute = field.get_attribute(instance)\r\n\r\nFile \"/Users/alan/src/django-training/env/lib/python3.6/site-packages/rest_framework/fields.py\" in get_attribute\r\n  462.             raise type(exc)(msg)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/486", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/486/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/486/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/486/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/486", "id": 365923134, "node_id": "MDU6SXNzdWUzNjU5MjMxMzQ=", "number": 486, "title": "prepare for DRF 3.9 release", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044491, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-10-02T14:24:35Z", "updated_at": "2018-10-23T15:16:53Z", "closed_at": "2018-10-23T15:16:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[DRF release 3.9](https://github.com/encode/django-rest-framework/milestone/66) is [coming soon](https://www.encode.io/reports/september-2018/). We should get ready to deal with any upstream changes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/480", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/480/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/480/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/480", "id": 360440545, "node_id": "MDU6SXNzdWUzNjA0NDA1NDU=", "number": 480, "title": "deprecate MultipleIDMixin", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/milestones/3", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/milestone/3", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/milestones/3/labels", "id": 3653787, "node_id": "MDk6TWlsZXN0b25lMzY1Mzc4Nw==", "number": 3, "title": "2.6.0", "description": "", "creator": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 21, "state": "closed", "created_at": "2018-09-14T06:18:44Z", "updated_at": "2019-07-12T08:54:28Z", "due_on": null, "closed_at": "2019-07-12T08:54:28Z"}, "comments": 0, "created_at": "2018-09-14T20:16:33Z", "updated_at": "2018-09-19T06:42:29Z", "closed_at": "2018-09-19T06:42:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Add (Pending?)DeprecationWarning `MultipleIDMixin` which does not comply with the [JSON:API specification for filtering](http://jsonapi.org/format/#fetching-filtering). If you want to get a collection based on a list of IDs, use `?filter[id.in]=id1,id2,...idN` with the `DjangoFilterBackend` filter.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/478", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/478/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/478/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/478", "id": 360370917, "node_id": "MDU6SXNzdWUzNjAzNzA5MTc=", "number": 478, "title": "sync up or remove docs/api.md", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 270908970, "node_id": "MDU6TGFiZWwyNzA5MDg5NzA=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/documentation", "name": "documentation", "color": "bfe5bf", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-14T16:21:59Z", "updated_at": "2018-09-20T06:40:22Z", "closed_at": "2018-09-20T06:40:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "docs/api.md has not been regularly updated. In fact, it has not been touched since 2016-08-18. It should document all the DJA APIs or be removed, making sure to cover any missing information in docs/usage.md.\r\n\r\nPerhaps update to use `sphinx-apidoc`?  This will likely require writing a lot of missing docstrings.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/475", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/475/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/475/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/475", "id": 359367369, "node_id": "MDU6SXNzdWUzNTkzNjczNjk=", "number": 475, "title": "ManyToMany queryset order is not preserved by ResourceRelatedSerializer", "user": {"login": "lucacorti", "id": 1076999, "node_id": "MDQ6VXNlcjEwNzY5OTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1076999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucacorti", "html_url": "https://github.com/lucacorti", "followers_url": "https://api.github.com/users/lucacorti/followers", "following_url": "https://api.github.com/users/lucacorti/following{/other_user}", "gists_url": "https://api.github.com/users/lucacorti/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucacorti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucacorti/subscriptions", "organizations_url": "https://api.github.com/users/lucacorti/orgs", "repos_url": "https://api.github.com/users/lucacorti/repos", "events_url": "https://api.github.com/users/lucacorti/events{/privacy}", "received_events_url": "https://api.github.com/users/lucacorti/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}, {"id": 115044494, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTQ=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-09-12T08:23:49Z", "updated_at": "2018-11-15T07:52:00Z", "closed_at": "2018-11-15T07:52:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm serializing an included many to many relationship via `ResourceRelatedField` on the main resource serializer. I'm overriding the queryset to enforce a particular order and this is not reflected in the serializer output.\r\n\r\nWhy ResourceRelatedField does not honor queryset order? I guess this is a bug.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/473", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/473/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/473/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/473", "id": 358478546, "node_id": "MDU6SXNzdWUzNTg0Nzg1NDY=", "number": 473, "title": "Json-api renderer breaking when paired with JWT packages (simple-jwt & drf-jwt)", "user": {"login": "jahosh", "id": 15853188, "node_id": "MDQ6VXNlcjE1ODUzMTg4", "avatar_url": "https://avatars1.githubusercontent.com/u/15853188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jahosh", "html_url": "https://github.com/jahosh", "followers_url": "https://api.github.com/users/jahosh/followers", "following_url": "https://api.github.com/users/jahosh/following{/other_user}", "gists_url": "https://api.github.com/users/jahosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/jahosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jahosh/subscriptions", "organizations_url": "https://api.github.com/users/jahosh/orgs", "repos_url": "https://api.github.com/users/jahosh/repos", "events_url": "https://api.github.com/users/jahosh/events{/privacy}", "received_events_url": "https://api.github.com/users/jahosh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-09-10T05:59:11Z", "updated_at": "2020-04-29T15:13:25Z", "closed_at": "2018-09-22T05:17:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Ran into this issue today while setting up a backend -\r\n\r\n`line 479, in build_json_resource_obj\r\n    ('id', encoding.force_text(resource_instance.pk) if resource_instance else None),\r\nAttributeError: 'dict' object has no attribute 'pk'`\r\n\r\nFound out that is occurring from this line of code located inside of renderers.py\r\n```\r\n('id', encoding.force_text(resource_instance.pk) if resource_instance else None),\r\n```\r\n[link-to-code](https://github.com/django-json-api/django-rest-framework-json-api/blob/master/rest_framework_json_api/renderers.py#L479)\r\n\r\nin particular its the \"resource_instance.pk\" thats blowing up. This occurs whenever I'm using JWT packages [simple-jwt](https://github.com/davesque/django-rest-framework-simplejwt) or [drf-jwt](https://github.com/GetBlimp/django-rest-framework-jwt/issues?q=is%3Aissue+json+api+is%3Aclosed)\r\n\r\nIf I change the line to \r\n```\r\n('id', encoding.force_text(resource_instance['user'].pk) if resource_instance else None),\r\n```\r\nEverything works. Ideally I'd like to avoid having to go down the route of forking, does anyone know how I could get past this? It seems the renderer is making an assumption about how the resource_instance should be returned from the JWT serializer.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/472", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/472/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/472/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/472", "id": 357403273, "node_id": "MDU6SXNzdWUzNTc0MDMyNzM=", "number": 472, "title": "a DJA REST API client models.Model?", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044494, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTQ=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-05T21:05:40Z", "updated_at": "2019-10-03T16:52:50Z", "closed_at": "2019-10-03T16:52:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Has anyone implemented a `models.Model` that is a client of a JSON:API API along the lines of https://github.com/Yupeek/django-rest-models?  This seems to require https://github.com/AltSchool/dynamic-rest (DREST) which I'm not familiar with but looks sort of similar to DJA. Perhaps django-rest-models could be extended to support DJA as well as DREST? Maybe this is already solved?\r\n\r\nIn case you're wondering what I'm trying to accomplish, it's a multitier microservices architecture similar to what's described [here](https://medium.com/microservices-in-practice/microservices-layered-architecture-88a7fc38d3f1), [here](https://dzone.com/articles/layered-architecture-code-smells-medium) or [here](http://w3partnership.com/Blog/2016/09/09/apis-multi-tiered-application-architecture-and-microservices-an-investigation/).\r\n\r\nIn other words, the DRF database model APIs are at the bottom (persistence) layer but would be called from apps a layer above and to those apps should similarly look like a Model so all the usual ORM stuff \"just works.\" JSON:API provides all the API HATEOAS plumbing to make this feasible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/471", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/471/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/471/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/471", "id": 356135789, "node_id": "MDU6SXNzdWUzNTYxMzU3ODk=", "number": 471, "title": "naming style: JSONAPI prefix or not?", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-31T22:03:35Z", "updated_at": "2018-09-14T06:17:48Z", "closed_at": "2018-09-14T06:17:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[This started as a misplaced comment thread in #467. Let's move it here.]\r\n\r\nI have a naming question: Do we prefix everything with `JSONAPI` or override existing names in DRF? We now have both styles:\r\n- DJA serializers override DRF's `HyperlinkedModelSerializer` and so on. The advantage is code written for DRF can upgrade to DJA by simply changing an import. The disadvantage is that it's easy to \"forget\" to change the import from `rest_framework` to `rest_framework_json_api`.\r\n- DJA paginators are named `JSONAPIPageNumberPagination` instead of overriding DRF's `PageNumberPagination`. The advantage is that it's very obvious that this is DJA-specific. The disadvantage is that instead of changing one import, you have to change each class use instance.\r\n\r\nThe approach here could be either:\r\n- [x] DJA `DefaultRouter` overriding DRF `DefaultRouter`. \r\n- [ ] DJA `JSONAPIDefaultRouter`\r\n\r\n---\r\n\r\n@sliverc replied:\r\n> Yeah I know I have also noticed. As we had to make backwards incompatible changes for pagination we started to add the JSONAPI prefix to work around this. There were also other cases in the past where this was done.\r\n\r\n> Actually I would prefer not to use `JSONAPI` prefix as it is already clear by the rest_framework_json_api module that it is imported from DJA. As you outlined this way someone can also easily switch between DRF and DJA version by simply changing the import.\r\n\r\n> However this won't be easy to accomplish to go that direction to make it consistent and backwards compatible. Potentially we have to break this at some point.\r\n\r\n> But for new things (actually haven't thought about that when reviewing the filter backends) we can easily leave out the `JSONAPI` prefix.\r\n\r\n> What is your preference?\r\n\r\n---\r\n\r\nI replied:\r\n\r\n>> As we had to make backwards incompatible changes for pagination\r\n\r\n> I don't think there was actually a backwards compatibility issue here as if one wants to be backward compatible they would just use `rest_framework.pagination.PageNumberPagination`. (Likewise for LimitOffset.)\r\n\r\n>> Potentially we have to break this at some point.\r\n\r\n> I say sooner than later. In the last release (2.5.0), we used the prefix `JsonApi` for paginators which is already deprecated by #463. The backend filters are not yet in a released version so have never been \"seen\" by their JSONAPI-prefixed names.\r\n\r\n> The only other instance I was able to find was `rest_framework_json_api.metadata.JSONAPIMetadata` which extends `rest_framework.metadata.SimpleMetadata`; This could easily be renamed (with deprecation) to `rest_framework_json_api.metadata.SimpleMetadata` which would more clearly show the inheritance as well.\r\n\r\n> The only other prefix I saw like this is `JSONAPIMeta` serializer inner class which I think is required to stay that way to distinguish it from the `Meta` inner class. \r\n\r\n>> What is your preference?\r\n\r\n> My preference is to put in the effort now:\r\n> - [x] drop the JSONAPI prefix from #466 before merging it. We have an open question (https://github.com/django-json-api/django-rest-framework-json-api/pull/466#discussion_r213601201) around naming it as well.\r\n> - [ ] new PR to back out the prefix changes done in #463 and eliminate the JsonApi prefix and add deprecation warnings for `page` vs. `page[number]` and `page_size` vs. `page[size]`. Or just document this as a breaking change: `page` and `page_size` were never correct JSON:API usage.\r\n> - [ ] new PR to rename/deprecate `JSONAPIMetadata`.\r\n\r\n> Do you agree?\r\n\r\n---\r\n\r\n@sliverc wrote:\r\n\r\n> There is also `JSONAPISettings` which we could rename to `APISettings`.\r\n\r\n> Also I have noticed that we are kind of getting into the habit to misuse some issues to discuss things which might be related but not actually the same issue.\r\n\r\n> I think for outsiders to better follow and to better track issues (e.g. a PR should solve one issue and not a comment of an issue) it would be better to create new issues for this (in this case a new issue where discussion happens on JSONAPI prefix).\r\n\r\n> I will also follow up on a issue for versioning and deprecation policy.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/470", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/470/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/470/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/470/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/470", "id": 355868680, "node_id": "MDU6SXNzdWUzNTU4Njg2ODA=", "number": 470, "title": "Introduce versioning and deprecation policy", "user": {"login": "sliverc", "id": 1047194, "node_id": "MDQ6VXNlcjEwNDcxOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1047194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sliverc", "html_url": "https://github.com/sliverc", "followers_url": "https://api.github.com/users/sliverc/followers", "following_url": "https://api.github.com/users/sliverc/following{/other_user}", "gists_url": "https://api.github.com/users/sliverc/gists{/gist_id}", "starred_url": "https://api.github.com/users/sliverc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sliverc/subscriptions", "organizations_url": "https://api.github.com/users/sliverc/orgs", "repos_url": "https://api.github.com/users/sliverc/repos", "events_url": "https://api.github.com/users/sliverc/events{/privacy}", "received_events_url": "https://api.github.com/users/sliverc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 270908970, "node_id": "MDU6TGFiZWwyNzA5MDg5NzA=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/documentation", "name": "documentation", "color": "bfe5bf", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-31T07:24:51Z", "updated_at": "2018-09-11T12:24:58Z", "closed_at": "2018-09-11T12:24:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently this is not documented so it is not clear what versioning and deprecation policy DJA follows.\r\n\r\nThis needs to be documented. I would suggest we follow common standards, using [Semver](https://semver.org/) and implement a similar deprecation policy like [Ember](https://www.emberjs.com/) (which is most likely the most used JS framework with JSON API spec).\r\n\r\nThis way we have a simple migration guide for our users. We can simply say, upgrade to the latest minor version of a series (e.g. 2.6.0) and solve all deprecation warnings. In version 3.0.0 we simply remove all deprecation warnings and do nothing else (real changes follow then in a version 3.1.0 etc.).\r\n\r\nRelated to #467 #469 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/460", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/460/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/460/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/460", "id": 352316014, "node_id": "MDU6SXNzdWUzNTIzMTYwMTQ=", "number": 460, "title": "move isort and flake8 tests to the top", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 446853084, "node_id": "MDU6TGFiZWw0NDY4NTMwODQ=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/testing", "name": "testing", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-20T22:15:53Z", "updated_at": "2018-10-14T23:11:29Z", "closed_at": "2018-10-14T23:11:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "isort and flake8 tests are not run until all other tests. They should go first in .travis.yml. Also make isort and flake8 tests part of the tox testenv commands.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/456", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/456/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/456/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/456", "id": 348971667, "node_id": "MDU6SXNzdWUzNDg5NzE2Njc=", "number": 456, "title": "Clarify \"included\" documentation", "user": {"login": "burritoIand", "id": 230757, "node_id": "MDQ6VXNlcjIzMDc1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/230757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burritoIand", "html_url": "https://github.com/burritoIand", "followers_url": "https://api.github.com/users/burritoIand/followers", "following_url": "https://api.github.com/users/burritoIand/following{/other_user}", "gists_url": "https://api.github.com/users/burritoIand/gists{/gist_id}", "starred_url": "https://api.github.com/users/burritoIand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burritoIand/subscriptions", "organizations_url": "https://api.github.com/users/burritoIand/orgs", "repos_url": "https://api.github.com/users/burritoIand/repos", "events_url": "https://api.github.com/users/burritoIand/events{/privacy}", "received_events_url": "https://api.github.com/users/burritoIand/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 270908970, "node_id": "MDU6TGFiZWwyNzA5MDg5NzA=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/documentation", "name": "documentation", "color": "bfe5bf", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-09T04:15:47Z", "updated_at": "2018-08-09T16:41:00Z", "closed_at": "2018-08-09T16:41:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just want to clarify that with the [included](https://django-rest-framework-json-api.readthedocs.io/en/stable/usage.html#included) functionality, the included extra resources are only returned if the client requests them by doing a query like `GET /articles/1?include=comments` using the [json-api `include`](http://jsonapi.org/format/#fetching-includes) parameter?\r\n\r\nThe current documentation does not make it clear if the included extra data is conditionally returned versus always returned. The behavior should be conditional so I'm just checking.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/454", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/454/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/454/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/454", "id": 347834922, "node_id": "MDU6SXNzdWUzNDc4MzQ5MjI=", "number": 454, "title": "Example app name conflicts", "user": {"login": "ThibaultLemaire", "id": 21345269, "node_id": "MDQ6VXNlcjIxMzQ1MjY5", "avatar_url": "https://avatars1.githubusercontent.com/u/21345269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibaultLemaire", "html_url": "https://github.com/ThibaultLemaire", "followers_url": "https://api.github.com/users/ThibaultLemaire/followers", "following_url": "https://api.github.com/users/ThibaultLemaire/following{/other_user}", "gists_url": "https://api.github.com/users/ThibaultLemaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibaultLemaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibaultLemaire/subscriptions", "organizations_url": "https://api.github.com/users/ThibaultLemaire/orgs", "repos_url": "https://api.github.com/users/ThibaultLemaire/repos", "events_url": "https://api.github.com/users/ThibaultLemaire/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibaultLemaire/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 270908970, "node_id": "MDU6TGFiZWwyNzA5MDg5NzA=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/documentation", "name": "documentation", "color": "bfe5bf", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-06T08:53:58Z", "updated_at": "2018-08-21T11:59:43Z", "closed_at": "2018-08-21T11:59:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "In [Running the example app](http://django-rest-framework-json-api.readthedocs.io/en/stable/getting-started.html#running-the-example-app) in the docs, there is the command\r\n\r\n``` sh\r\ndjango-admin.py startproject example .\r\n```\r\n\r\nBut that creates a _new_ django project named 'example' in the current directory, which is rejected by the OS because there already is an 'example' directory.\r\n\r\nI haven't had the time to investigate any further, but either you want to name the new project differently (but then what's the point of creating an empty django project? This doesn't show how to use DJA at all), or you want to use another command than `startproject`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/452", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/452/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/452/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/452", "id": 347374448, "node_id": "MDU6SXNzdWUzNDczNzQ0NDg=", "number": 452, "title": "Can't find example app", "user": {"login": "ThibaultLemaire", "id": 21345269, "node_id": "MDQ6VXNlcjIxMzQ1MjY5", "avatar_url": "https://avatars1.githubusercontent.com/u/21345269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibaultLemaire", "html_url": "https://github.com/ThibaultLemaire", "followers_url": "https://api.github.com/users/ThibaultLemaire/followers", "following_url": "https://api.github.com/users/ThibaultLemaire/following{/other_user}", "gists_url": "https://api.github.com/users/ThibaultLemaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibaultLemaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibaultLemaire/subscriptions", "organizations_url": "https://api.github.com/users/ThibaultLemaire/orgs", "repos_url": "https://api.github.com/users/ThibaultLemaire/repos", "events_url": "https://api.github.com/users/ThibaultLemaire/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibaultLemaire/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 270908970, "node_id": "MDU6TGFiZWwyNzA5MDg5NzA=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/documentation", "name": "documentation", "color": "bfe5bf", "default": true, "description": null}, {"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-03T12:18:44Z", "updated_at": "2018-08-10T14:59:45Z", "closed_at": "2018-08-10T14:59:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like the readme is outdated concerning the example app.\r\n\r\nIn the section [Running the example app](https://github.com/django-json-api/django-rest-framework-json-api#running-the-example-app), the last command\r\n\r\n``` sh\r\ndjango-admin.py runserver --settings=example.settings\r\n```\r\n\r\ndoesn't run because there is no `django-admin.py`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/450", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/450/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/450/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/450", "id": 346548464, "node_id": "MDU6SXNzdWUzNDY1NDg0NjQ=", "number": 450, "title": "How do we check permissions for related entities?", "user": {"login": "Anton-Shutik", "id": 1625053, "node_id": "MDQ6VXNlcjE2MjUwNTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1625053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anton-Shutik", "html_url": "https://github.com/Anton-Shutik", "followers_url": "https://api.github.com/users/Anton-Shutik/followers", "following_url": "https://api.github.com/users/Anton-Shutik/following{/other_user}", "gists_url": "https://api.github.com/users/Anton-Shutik/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anton-Shutik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anton-Shutik/subscriptions", "organizations_url": "https://api.github.com/users/Anton-Shutik/orgs", "repos_url": "https://api.github.com/users/Anton-Shutik/repos", "events_url": "https://api.github.com/users/Anton-Shutik/events{/privacy}", "received_events_url": "https://api.github.com/users/Anton-Shutik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044491, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-01T10:51:14Z", "updated_at": "2018-08-17T13:37:14Z", "closed_at": "2018-08-17T13:33:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let's say we  have config like this:\r\n\r\nviews.py\r\n```python\r\nclass CustomerProfileViewSet(viewsets.ModelViewSet):\r\n    permission_classes = (IsCustomerOrCreation,)\r\n\r\n\r\nclass ProductViewSet(viewsets.ModelViewSet):\r\n    permission_classes = []\r\n\r\n    def get_object(self,):\r\n        customer_pk = self.kwargs.get('customer_pk', None)\r\n            if customer_pk is not None:\r\n                customer = get_object_or_None(Customer, pk=customer_pk)\r\n                if customer is not None:\r\n                    return customer.favourite_product\r\n        return super(ProductViewSet, self).get_object()\r\n```\r\n\r\nurls.py\r\n```python\r\nurl(r'^api/customer/(?P<pk>\\d+)/$', CustomerProfileViewSet.as_view({'get': 'retrieve'})),\r\nurl(r'^api/customer/(?P<customer_pk>\\d+)/favorite-product$', ProductViewSet.as_view({'get': 'retrieve'})),\r\n```\r\n\r\n`GET api/customer/1/` Will give 403 error for any user whose id differs from 1. And that is fine.\r\nThen if anon user goes to `api/customer/1/favourite-product/` they will get 200 response with product payload, because permissions for product checked in `ProductViewSet`, which have no permissions for any role. But I think it is wrong and should return 403, since we have to check permission for customer first. We actually just told everybody what is customer's 1 favorite product!\r\n\r\n**I understand that permissions it is out of json api spec, but may be there is a nice way I can handle permissions with this lib correctly?**\r\n\r\nFor now I do it like below:\r\nA RelatedMixin class will get a related entity and will find corresponding a serializer for that. And all that stuff will happen **after**  we check permissions for parent (\"customer\" in the case) entity\r\n\r\n```python\r\nclass RelatedMixin(object):\r\n    serializer_mapping = {}\r\n    field_name_mapping = {}\r\n\r\n    def get_related(self, request, *args, **kwargs):\r\n        serializer_kwargs = {}\r\n        instance = self.get_related_instance()\r\n\r\n        if callable(instance):\r\n            instance = instance()\r\n\r\n        if hasattr(instance, 'all'):\r\n            instance = instance.all()\r\n\r\n        if instance is None:\r\n            return Response(data=None)\r\n\r\n        if isinstance(instance, Iterable):\r\n            serializer_kwargs['many'] = True\r\n\r\n        serializer = self.get_serializer(instance, **serializer_kwargs)\r\n        return Response(serializer.data)\r\n\r\n    def get_serializer_class(self):\r\n        field_name = self.get_related_field_name()\r\n        return self.serializer_mapping[field_name]\r\n\r\n    def get_related_field_name(self):\r\n        field_name = self.kwargs['related_field']\r\n        if field_name in self.field_name_mapping:\r\n            return self.field_name_mapping[field_name]\r\n        return field_name\r\n\r\n    def get_related_instance(self):\r\n        try:\r\n            return getattr(self.get_object(), self.get_related_field_name())\r\n        except AttributeError:\r\n            from rest_framework.exceptions import NotFound\r\n            raise NotFound\r\n```\r\n\r\nand then just make a view that will handle all Customer's related entities:\r\n\r\n```python\r\nclass CustomerProfileRelatedViewSet(RelatedMixin, CustomerProfileViewSet):\r\n    serializer_mapping = {\r\n        'favourite_product': ProductSerializer,\r\n        #'order_list': OrderSerializer\r\n}\r\n```\r\nurls.py # Only one url route required for all related entities\r\n```python\r\nurl(r'^api/customer/(?P<customer_pk>\\d+)/(?P<related_field>\\w+)/$', CustomerProfileRelatedViewSet.as_view({'get': 'get_related'})),\r\n```\r\n\r\n\r\nWhat do you think about it ? If you like the idea I'm ready to come up with PR", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/449", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/449/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/449/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/449", "id": 346399616, "node_id": "MDU6SXNzdWUzNDYzOTk2MTY=", "number": 449, "title": "Self Referential, ManytoMany, included on create?", "user": {"login": "tesmart", "id": 35608706, "node_id": "MDQ6VXNlcjM1NjA4NzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/35608706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesmart", "html_url": "https://github.com/tesmart", "followers_url": "https://api.github.com/users/tesmart/followers", "following_url": "https://api.github.com/users/tesmart/following{/other_user}", "gists_url": "https://api.github.com/users/tesmart/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesmart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesmart/subscriptions", "organizations_url": "https://api.github.com/users/tesmart/orgs", "repos_url": "https://api.github.com/users/tesmart/repos", "events_url": "https://api.github.com/users/tesmart/events{/privacy}", "received_events_url": "https://api.github.com/users/tesmart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-31T23:55:58Z", "updated_at": "2018-08-02T00:01:44Z", "closed_at": "2018-08-02T00:01:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a model that has a self reference back through itself using `through` and `through_fields`, i.e. \r\n```python\r\nclass Deck(models.Model):\r\n \r\n    children = models.ManyToManyField(\r\n        'self',\r\n        symmetrical=False,\r\n        related_name='parents',\r\n        through='DeckLineage',\r\n        through_fields=('parent', 'child'),\r\n    )\r\n\r\nclass DeckLineage(models.Model):\r\n    parent = models.ForeignKey(\r\n        Deck,\r\n        on_delete=models.SET_NULL,\r\n        null=True,\r\n        related_name='when_parent')\r\n    child = models.ForeignKey(\r\n        Deck,\r\n        on_delete=models.SET_NULL,\r\n        null=True,\r\n        related_name='when_child')\r\n\r\n```\r\n\r\nand we are using the standard serializers, i.e. \r\n```python\r\nclass DeckSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = models.Deck\r\n        fields = '__all__'\r\n```\r\n\r\nI'm trying to figure out how to craft a `POST` such that I can specify the `children` relationship in the post so that the `DeckLineage` table gets populated on POST.  Since we have to create these relationships manually in Django (i.e. you can't just say deck.children.add()), I imagine I'll have to write some custom handler. In that case: what is the best practice for handling included relationships on POST like this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/446", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/446/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/446/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/446", "id": 342768690, "node_id": "MDU6SXNzdWUzNDI3Njg2OTA=", "number": 446, "title": "`Field.source` is not being properly handled", "user": {"login": "rafaelsierra", "id": 1147163, "node_id": "MDQ6VXNlcjExNDcxNjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1147163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafaelsierra", "html_url": "https://github.com/rafaelsierra", "followers_url": "https://api.github.com/users/rafaelsierra/followers", "following_url": "https://api.github.com/users/rafaelsierra/following{/other_user}", "gists_url": "https://api.github.com/users/rafaelsierra/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafaelsierra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafaelsierra/subscriptions", "organizations_url": "https://api.github.com/users/rafaelsierra/orgs", "repos_url": "https://api.github.com/users/rafaelsierra/repos", "events_url": "https://api.github.com/users/rafaelsierra/events{/privacy}", "received_events_url": "https://api.github.com/users/rafaelsierra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044494, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTQ=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-19T15:03:49Z", "updated_at": "2018-07-20T07:01:08Z", "closed_at": "2018-07-20T07:00:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "When defining a serializer such as:\r\n\r\n```python\r\nclass SimpleSerializer(serializers.ModelSerializer):\r\n    b = serializers.CharField(source='a') # The model has only a field called `a`\r\n    class Meta:\r\n        model = SimpleModel\r\n        fields = ['b']\r\n```\r\n\r\nIf you try to make a POST request using that serializer it will return `400` with the following message:\r\n\r\n```python\r\n{u'errors': [{u'detail': u'This field is required.',\r\n   u'source': {u'pointer': u'/data/attributes/b'},\r\n   u'status': u'400'}]}\r\n```\r\n\r\nA PoC can be found in this commit: https://github.com/rafaelsierra/django-rest-framework-json-api/commit/d359e538155507b18b7cd3858ee4123e4410ee80", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/436", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/436/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/436/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/436", "id": 323328929, "node_id": "MDU6SXNzdWUzMjMzMjg5Mjk=", "number": 436, "title": "harmonize tox.ini with .travis.yml", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044490, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTA=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-15T18:18:37Z", "updated_at": "2018-06-08T13:33:08Z", "closed_at": "2018-06-08T13:33:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The tox tests are currently not consistent with the travis tests. Fix this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/432", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/432/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/432/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/432", "id": 320536871, "node_id": "MDU6SXNzdWUzMjA1MzY4NzE=", "number": 432, "title": "spec compliance: sparse fieldsets, sorting & filtering query parameters", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044491, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-05-05T19:52:48Z", "updated_at": "2018-08-22T01:21:28Z", "closed_at": "2018-08-22T01:21:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Split #416 and refactor as appropriate to implement sparse [fieldsets](http://jsonapi.org/format/#fetching-sparse-fieldsets), [sorting](http://jsonapi.org/format/#fetching-sorting) and [filtering](http://jsonapi.org/format/#fetching-filtering).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/430", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/430/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/430/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/430", "id": 320536528, "node_id": "MDU6SXNzdWUzMjA1MzY1Mjg=", "number": 430, "title": "spec compliance: pagination", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044491, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-05-05T19:46:40Z", "updated_at": "2018-05-17T13:22:53Z", "closed_at": "2018-05-17T13:22:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Split #416 out into pagination improvements which comply with the jsonapi 1.0 [spec](http://jsonapi.org/format/#fetching-pagination)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/429", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/429/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/429/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/429", "id": 320477961, "node_id": "MDU6SXNzdWUzMjA0Nzc5NjE=", "number": 429, "title": "Cannot create a polymorphic project instance in the example project", "user": {"login": "lloyd-h", "id": 3173687, "node_id": "MDQ6VXNlcjMxNzM2ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3173687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lloyd-h", "html_url": "https://github.com/lloyd-h", "followers_url": "https://api.github.com/users/lloyd-h/followers", "following_url": "https://api.github.com/users/lloyd-h/following{/other_user}", "gists_url": "https://api.github.com/users/lloyd-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/lloyd-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lloyd-h/subscriptions", "organizations_url": "https://api.github.com/users/lloyd-h/orgs", "repos_url": "https://api.github.com/users/lloyd-h/repos", "events_url": "https://api.github.com/users/lloyd-h/events{/privacy}", "received_events_url": "https://api.github.com/users/lloyd-h/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-05T04:16:41Z", "updated_at": "2018-05-08T21:34:58Z", "closed_at": "2018-05-08T21:34:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to understand how polymorphic resources work and I get the following error both on my own project and the example project.\r\n\r\nEndpoint : localhost:8000/projects\r\n\r\n{\r\n    \"errors\": [\r\n        {\r\n            \"detail\": \"Incorrect relation type. Expected on of [artProject, researchProject], received None.\",\r\n            \"source\": {\r\n                \"pointer\": \"/data\"\r\n            },\r\n            \"status\": \"409\"\r\n        }\r\n    ]\r\n}\r\n\r\nProject page's form used to create a new instance doesn't have any field that I can specify the type of the Project. It only shows the topic field. So I am further wondering how I can create an Art project for instance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/428", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/428/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/428/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/428", "id": 319870137, "node_id": "MDU6SXNzdWUzMTk4NzAxMzc=", "number": 428, "title": "results attribute instead of data in response.data when testing", "user": {"login": "przemekciacka", "id": 200286, "node_id": "MDQ6VXNlcjIwMDI4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/200286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/przemekciacka", "html_url": "https://github.com/przemekciacka", "followers_url": "https://api.github.com/users/przemekciacka/followers", "following_url": "https://api.github.com/users/przemekciacka/following{/other_user}", "gists_url": "https://api.github.com/users/przemekciacka/gists{/gist_id}", "starred_url": "https://api.github.com/users/przemekciacka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/przemekciacka/subscriptions", "organizations_url": "https://api.github.com/users/przemekciacka/orgs", "repos_url": "https://api.github.com/users/przemekciacka/repos", "events_url": "https://api.github.com/users/przemekciacka/events{/privacy}", "received_events_url": "https://api.github.com/users/przemekciacka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-03T10:45:29Z", "updated_at": "2018-05-03T20:13:53Z", "closed_at": "2018-05-03T20:13:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running tests the `response.data` doesn't contain `data` key. Instead the `results` key is available.\r\n\r\nExample code:\r\n```\r\nclass AdvertsTestCase(APITestCase):\r\n    def test_get_adverts_list(self):\r\n        advert1 = f.AdvertFactory.create()\r\n        advert2 = f.AdvertFactory.create()\r\n        advert3 = f.AdvertFactory.create()\r\n\r\n        url = reverse('advert-list')\r\n        response = self.client.get(url)\r\n\r\n        print(response.data)\r\n\r\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\r\n```\r\nThe result from `print(response.data)`\r\n```\r\n{'results': [ ... ], 'meta': { ... }, 'links': { ... }}\r\n```\r\nBut when access the `response.content` there is `data` attribute in the raw response's data:\r\n\r\n```\r\nb'{\"links\":{ ... },\"data\":[ ... ],\"meta\":{ ... }'\r\n```\r\n\r\nWhen accessing API via Postman or web-browser, the `data` key in the response is available. Seems like tests doesn't use renderers correctly - it's my assumption.\r\n\r\n**requirements.txt**\r\n\r\n```\r\nDjango==2.0.4\r\npsycopg2-binary==2.7.4\r\ndjangorestframework==3.7.7\r\ndjango-cors-headers==2.2.0\r\nboto3==1.6.15\r\ndjango-storages==1.6.5\r\nenvirons==2.1.0\r\ndjango-dirtyfields==1.3.1\r\ndjango-filter==1.1.0\r\ndrf_yasg==1.7.0\r\ndjangorestframework-jsonapi==2.4.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/426", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/426/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/426/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/426", "id": 318196344, "node_id": "MDU6SXNzdWUzMTgxOTYzNDQ=", "number": 426, "title": "Right way to represent relationships links.related view?", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-04-26T21:05:03Z", "updated_at": "2018-08-17T13:33:30Z", "closed_at": "2018-08-17T13:33:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to correctly return a links.related view (not links.self) and haven't been able to find a good example. In looking at the example app it appears to have the same problem. Here's a fragment of my urlconf and view definitions:\r\n```python\r\nrouter = routers.DefaultRouter()\r\nrouter.register(r'courses', views.CourseViewSet)\r\nrouter.register(r'course_terms', views.CourseTermViewSet)\r\n\r\nurlpatterns = [\r\n    url(r'^v1/', include(router.urls)),\r\n    # http://127.0.0.1:8000/v1/courses/f009e671-b615-42c7-b35f-8500d7ef5d24/relationships/course_terms\r\n    url(r'^v1/courses/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)',\r\n        views.CourseRelationshipView.as_view(),\r\n        name='course-relationships'),\r\n    # http://127.0.0.1:8000/v1/courses/f009e671-b615-42c7-b35f-8500d7ef5d24/course_terms/\r\n    url(r'^v1/courses/(?P<fk>[^/.]+)/course_terms/',  # need fk (course_id) not pk (id)\r\n        views.CourseTermViewSet.as_view({'get': 'list'}),\r\n        name='course-course_terms'),\r\n]\r\n```\r\n\r\n```python\r\nclass CourseBaseViewSet(AuthnAuthzMixIn, SortMixin, FilterMixin, viewsets.ModelViewSet):\r\n    pass\r\n\r\n\r\nclass CourseViewSet(CourseBaseViewSet):\r\n    # API endpoint that allows course to be viewed or edited.\r\n    queryset = Course.objects.all()\r\n    serializer_class = CourseSerializer\r\n\r\n\r\nclass CourseTermViewSet(CourseBaseViewSet):\r\n    # API endpoint that allows CourseTerm to be viewed or edited.\r\n    queryset = CourseTerm.objects.all()\r\n    serializer_class = CourseTermSerializer\r\n#    queryset = queryset.filter(course_id='ec008c20-79a1-4ca7-931a-019d62c219c9')\r\n\r\n\r\nclass CourseRelationshipView(AuthnAuthzMixIn, RelationshipView):\r\n    queryset = Course.objects\r\n    self_link_view_name = 'course-relationships'\r\n```\r\n\r\nA get of a course looks like this:\r\n`GET http://127.0.0.1:8000/v1/courses/ec008c20-79a1-4ca7-931a-019d62c219c9/`\r\n\r\n```json\r\n{\r\n    \"data\": {\r\n        \"type\": \"courses\",\r\n        \"id\": \"ec008c20-79a1-4ca7-931a-019d62c219c9\",\r\n        \"attributes\": {\r\n            \"school_bulletin_prefix_code\": \"XCEFK9\",\r\n            \"suffix_two\": \"00\",\r\n            \"subject_area_code\": \"PSYB\",\r\n            \"course_number\": \"00241\",\r\n            \"course_identifier\": \"PSYC1138X\",\r\n            \"course_name\": \"SOCIAL PSYCHOLOGY-LEC\",\r\n            \"course_description\": \"SOCIAL PSYCHOLOGY-LEC\",\r\n            \"effective_start_date\": null,\r\n            \"effective_end_date\": null,\r\n            \"last_mod_user_name\": \"loader\",\r\n            \"last_mod_date\": \"2018-03-11\"\r\n        },\r\n        \"relationships\": {\r\n            \"course_terms\": {\r\n                \"data\": [\r\n                    {\r\n                        \"type\": \"course_terms\",\r\n                        \"id\": \"3ce01e27-9a68-4970-b48a-e6a83166ca41\"\r\n                    }\r\n                ],\r\n                \"links\": {\r\n                    \"self\": \"http://127.0.0.1:8000/v1/courses/ec008c20-79a1-4ca7-931a-019d62c219c9/relationships/course_terms\",\r\n                    \"related\": \"http://127.0.0.1:8000/v1/courses/ec008c20-79a1-4ca7-931a-019d62c219c9/course_terms/\"\r\n                },\r\n                \"meta\": {\r\n                    \"count\": 1\r\n                }\r\n            }\r\n        },\r\n        \"links\": {\r\n            \"self\": \"http://127.0.0.1:8000/v1/courses/ec008c20-79a1-4ca7-931a-019d62c219c9/\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nBut `GET http://127.0.0.1:8000/v1/courses/ec008c20-79a1-4ca7-931a-019d62c219c9/course_terms/` returns all the course_terms, not just those with `fk=ec008c20-79a1-4ca7-931a-019d62c219c9` because the foreign key is not being applied. (You can see where I tested and with `queryset = queryset.filter(course_id='ec008c20-79a1-4ca7-931a-019d62c219c9')`) so I'm wondering what the **right** way to do this is.\r\n\r\nAm I missing something? I've reproduced this with the example app and it also does it \"wrong\". I think I need to extend the `view` function to check for some kwargs (e.g. fk) and filter the manager.\r\n\r\nThanks in advance for any help.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/424", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/424/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/424/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/424", "id": 317347752, "node_id": "MDU6SXNzdWUzMTczNDc3NTI=", "number": 424, "title": "Request for new maintainer", "user": {"login": "mblayman", "id": 636865, "node_id": "MDQ6VXNlcjYzNjg2NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/636865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mblayman", "html_url": "https://github.com/mblayman", "followers_url": "https://api.github.com/users/mblayman/followers", "following_url": "https://api.github.com/users/mblayman/following{/other_user}", "gists_url": "https://api.github.com/users/mblayman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mblayman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mblayman/subscriptions", "organizations_url": "https://api.github.com/users/mblayman/orgs", "repos_url": "https://api.github.com/users/mblayman/repos", "events_url": "https://api.github.com/users/mblayman/events{/privacy}", "received_events_url": "https://api.github.com/users/mblayman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044492, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTI=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2018-04-24T18:40:23Z", "updated_at": "2018-05-06T17:29:31Z", "closed_at": "2018-05-06T17:29:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I picked up the maintainer torch about a year ago when the project seemed to be stuck. I was using DJA on a side project, and I needed to fix a bug and get a new release out. Today, I'm no longer working on the side project and my interest in maintaining DJA has waned significantly.\r\n\r\nAs I'm not being a great steward for the project, I'd like to request that someone else pick it up. This is very much a community effort and code contributions come from a wide variety of contributors. The new maintainer would be most involved with:\r\n1. Review of new Pull Requests and Issues.\r\n2. Deploying new releases to PyPI.\r\n\r\nI hope that I've added the right tools that can make management of this project easier for a future maintainer. Static code analysis has removed a lot of friction that might come up as a primary PR reviewer.\r\n\r\nIf you're in a decent place to step into the maintainer role, please let me know and I can work to transition over project handling to you. I'm happy to help with a bit of training if needed or improving release documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/423", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/423/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/423/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/423", "id": 317253730, "node_id": "MDU6SXNzdWUzMTcyNTM3MzA=", "number": 423, "title": "working ResourceRelatedField example with read_only=False?", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-24T14:30:49Z", "updated_at": "2018-04-24T15:59:54Z", "closed_at": "2018-04-24T15:59:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm looking for a working example of ResourceRelatedField that can be written (e.g. read_only=False). My use case, is POST or PATCH of a resource that includes its related resources. Does anyone have a working example? The example code only shows read_only=True and I've been messing around for a while with this and can't seem to get it to work and thought I'd ask here before digging too deeply into the code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/422", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/422/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/422/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/422", "id": 315368920, "node_id": "MDU6SXNzdWUzMTUzNjg5MjA=", "number": 422, "title": "PUT requires id", "user": {"login": "jasjukaitis", "id": 413451, "node_id": "MDQ6VXNlcjQxMzQ1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/413451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasjukaitis", "html_url": "https://github.com/jasjukaitis", "followers_url": "https://api.github.com/users/jasjukaitis/followers", "following_url": "https://api.github.com/users/jasjukaitis/following{/other_user}", "gists_url": "https://api.github.com/users/jasjukaitis/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasjukaitis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasjukaitis/subscriptions", "organizations_url": "https://api.github.com/users/jasjukaitis/orgs", "repos_url": "https://api.github.com/users/jasjukaitis/repos", "events_url": "https://api.github.com/users/jasjukaitis/events{/privacy}", "received_events_url": "https://api.github.com/users/jasjukaitis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-18T07:52:09Z", "updated_at": "2018-05-02T09:31:25Z", "closed_at": "2018-05-02T09:31:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "PUT is not just updating an existing resource, it can also create one, so the field id can't be mandatory. This would be an easy fix but would like to discuss it here first.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/418", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/418/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/418/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/418", "id": 313910630, "node_id": "MDU6SXNzdWUzMTM5MTA2MzA=", "number": 418, "title": "CREATE OBJECT AND OBJECT RELATED ", "user": {"login": "ramses132", "id": 2214996, "node_id": "MDQ6VXNlcjIyMTQ5OTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2214996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramses132", "html_url": "https://github.com/ramses132", "followers_url": "https://api.github.com/users/ramses132/followers", "following_url": "https://api.github.com/users/ramses132/following{/other_user}", "gists_url": "https://api.github.com/users/ramses132/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramses132/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramses132/subscriptions", "organizations_url": "https://api.github.com/users/ramses132/orgs", "repos_url": "https://api.github.com/users/ramses132/repos", "events_url": "https://api.github.com/users/ramses132/events{/privacy}", "received_events_url": "https://api.github.com/users/ramses132/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044490, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTA=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-12T22:34:34Z", "updated_at": "2018-06-12T07:03:15Z", "closed_at": "2018-06-12T07:03:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "By default the method to_interval_value(self, data)\r\nCapture the ID if ID is NULL it's raise excepction non primary key I want to create in same view object and its related objects without edit the_interval_value, and validate method... Why is the best practice to make it possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/417", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/417/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/417/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/417", "id": 308095664, "node_id": "MDU6SXNzdWUzMDgwOTU2NjQ=", "number": 417, "title": "Handling large number of relationships  - pagination?", "user": {"login": "dbinetti", "id": 161722, "node_id": "MDQ6VXNlcjE2MTcyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/161722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbinetti", "html_url": "https://github.com/dbinetti", "followers_url": "https://api.github.com/users/dbinetti/followers", "following_url": "https://api.github.com/users/dbinetti/following{/other_user}", "gists_url": "https://api.github.com/users/dbinetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbinetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbinetti/subscriptions", "organizations_url": "https://api.github.com/users/dbinetti/orgs", "repos_url": "https://api.github.com/users/dbinetti/repos", "events_url": "https://api.github.com/users/dbinetti/events{/privacy}", "received_events_url": "https://api.github.com/users/dbinetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-23T16:23:57Z", "updated_at": "2018-05-02T09:56:11Z", "closed_at": "2018-05-02T09:56:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a model that sometimes has a large number of child resources (sometimes many thousands).  Were this a standard list I'd simply paginate the results -- but it isn't obvious to me how to paginate the relationship links.  \r\n\r\nIt looks like some changes were recently adopted on the `json-api` spec (https://github.com/json-api/json-api/pull/1251) and I've seen #178 here, but I'm not sure what the current recommendation is for handling this case.  \r\n\r\nTHanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/414", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/414/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/414/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/414", "id": 300351073, "node_id": "MDU6SXNzdWUzMDAzNTEwNzM=", "number": 414, "title": "JSON_API_FORMAT_KEYS setting to default to lowercase plural type?", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 958731511, "node_id": "MDU6TGFiZWw5NTg3MzE1MTE=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/needs-information", "name": "needs-information", "color": "66208e", "default": false, "description": ""}, {"id": 115044494, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTQ=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-26T18:44:07Z", "updated_at": "2018-06-12T15:21:45Z", "closed_at": "2018-06-12T15:21:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While the [spec](http://jsonapi.org/format/#document-member-names) allows upper and lower case characters in `type` names, the [recommendations](http://jsonapi.org/recommendations/#naming) suggest all lowercase. The choice of plural vs. singular for the `type` is undefined but should be used consistently and most examples use plural.\r\n\r\nSince PEP8 wants class names to be CapWords, I can enforce a \"local standard\" such as lowercase plurals with `JSONAPIMeta` `resource_name` in the models.Model like this:\r\n```python\r\nclass Widget(Common):\r\n    name = models.TextField()\r\n    qty = models.PositiveIntegerField(blank=True, default=0)\r\n\r\n    class Meta:\r\n        ordering = [\"name\"]\r\n\r\n    class JSONAPIMeta:\r\n        resource_name = \"widgets\"\r\n\r\n    def __str__(self):\r\n        return self.name + ' (' + str(self.id) + ')'\r\n```\r\nHowever this is not DRY.\r\n\r\nAlternatively I think I can set these:\r\n```python\r\nJSON_API_FORMAT_KEYS = 'camelize'\r\nJSON_API_PLURALIZE_TYPES = True\r\n```\r\nBut `camelize` is not the same as all lowercase.\r\n\r\nWould it make sense to add a `JSON_API_FORMAT_KEYS` option for `lowercase` to add to the current list of `('dasherize', 'camelize', 'underscore', 'capitalize')`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/410", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/410/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/410/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/410/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/410", "id": 294909174, "node_id": "MDU6SXNzdWUyOTQ5MDkxNzQ=", "number": 410, "title": "docs/getting-started.md example doesn't work.", "user": {"login": "n2ygk", "id": 4356471, "node_id": "MDQ6VXNlcjQzNTY0NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4356471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2ygk", "html_url": "https://github.com/n2ygk", "followers_url": "https://api.github.com/users/n2ygk/followers", "following_url": "https://api.github.com/users/n2ygk/following{/other_user}", "gists_url": "https://api.github.com/users/n2ygk/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2ygk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2ygk/subscriptions", "organizations_url": "https://api.github.com/users/n2ygk/orgs", "repos_url": "https://api.github.com/users/n2ygk/repos", "events_url": "https://api.github.com/users/n2ygk/events{/privacy}", "received_events_url": "https://api.github.com/users/n2ygk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-06T20:53:55Z", "updated_at": "2018-02-18T18:39:05Z", "closed_at": "2018-02-18T18:39:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following the [running the example app](https://github.com/django-json-api/django-rest-framework-json-api/blob/master/docs/getting-started.md#running-the-example-app) instructions results in several errors:\r\n- `runtests.py` is missing: not found anywhere in the repo. Did you mean `django-admin.py test`?\r\n- `django-admin.py runserver` errors out with:\r\n```\r\ndjango.core.exceptions.ImproperlyConfigured: Requested setting DEBUG, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\r\n```\r\nTrying to set `DJANGO_SETTINGS_MODULE` complains about other missing stuff:\r\n```\r\nModuleNotFoundError: No module named 'polymorphic'\r\n```\r\nHere's what `pip freeze` shows:\r\n```\r\nDjango==2.0.2\r\ndjangorestframework==3.7.7\r\n-e git+https://github.com/django-json-api/django-rest-framework-json-api.git@c5d34e2ea67bab8a4e9570f54779911570f24c83#egg=djangorestframework_jsonapi\r\ninflection==0.3.1\r\npackaging==16.8\r\npyparsing==2.2.0\r\npytz==2017.3\r\nsix==1.11.0\r\n```\r\nI attempted these fixes:\r\n```bash\r\npip install django-polymorphic\r\npip install django-debug_toolbar\r\nexport DJANGO_SETTINGS_MODULE=example.settings.dev\r\ndjango-admin.py runserver\r\n...\r\ndjango.core.management.base.SystemCheckError: SystemCheckError: System check identified some issues:\r\n\r\nERRORS:\r\n?: debug_toolbar.middleware.DebugToolbarMiddleware is missing from MIDDLEWARE.\r\n\tHINT: Add debug_toolbar.middleware.DebugToolbarMiddleware to MIDDLEWARE.\r\n```\r\nwhich is weird since:\r\n```bash\r\ngrep -nr debug_toolbar.middleware.DebugToolbarMiddleware .\r\n...\r\n./example/settings/dev.py:63:    'debug_toolbar.middleware.DebugToolbarMiddleware',\r\n```\r\nI've successfully used most of DJA based on [usage.md](https://github.com/django-json-api/django-rest-framework-json-api/blob/master/docs/usage.md) but was looking for some examples, especially for resource-related fields and figured the example app would be a good place to start.\r\n\r\nHappy to try and submit a PR with improved documentation if you can provide some guidance on what's supposed to be there. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/404", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/404/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/404/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/404", "id": 289962475, "node_id": "MDU6SXNzdWUyODk5NjI0NzU=", "number": 404, "title": "I can not assign an id \"id\": null", "user": {"login": "agalera", "id": 3725538, "node_id": "MDQ6VXNlcjM3MjU1Mzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3725538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agalera", "html_url": "https://github.com/agalera", "followers_url": "https://api.github.com/users/agalera/followers", "following_url": "https://api.github.com/users/agalera/following{/other_user}", "gists_url": "https://api.github.com/users/agalera/gists{/gist_id}", "starred_url": "https://api.github.com/users/agalera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agalera/subscriptions", "organizations_url": "https://api.github.com/users/agalera/orgs", "repos_url": "https://api.github.com/users/agalera/repos", "events_url": "https://api.github.com/users/agalera/events{/privacy}", "received_events_url": "https://api.github.com/users/agalera/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-19T12:37:13Z", "updated_at": "2018-06-08T15:23:23Z", "closed_at": "2018-06-08T15:23:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "When doing a response with a dict, I have no way to return a different id, what can I do? I leave the code fragment and the answer I get\r\n\r\n```python\r\nexample_data = {\r\n                \"id\": example.id,\r\n                 .....\r\n                \"ref\": example.ref,\r\n                \"error_url\": self.data[\"attributes\"][\"error_url\"],\r\n                \"return_url\": self.data[\"attributes\"][\"return_url\"],\r\n            }\r\n            \r\n            serializer = self.get_serializer(data=example_data)\r\n            serializer.is_valid(raise_exception=True)\r\n            return Response(\r\n                serializer.data,\r\n                status=self.get_status_code(serializer.data),\r\n                **kwargs\r\n            )\r\n```\r\nWe have trying to get one response from a new serializer whose content is the mix between two different models. We don't have a pk, because there are two models\r\n\r\nThe response returns this:\r\n```python\r\n\"data\":{\"type\":\"example\",\"id\":null,\"attributes\":{\"....\"}}\r\n```\r\n\r\nhow could I get an id with a right value?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/403", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/403/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/403/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/403/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/403", "id": 289316418, "node_id": "MDU6SXNzdWUyODkzMTY0MTg=", "number": 403, "title": "Can not include a top-level `meta` section in an error response.", "user": {"login": "rockmnew", "id": 34722322, "node_id": "MDQ6VXNlcjM0NzIyMzIy", "avatar_url": "https://avatars2.githubusercontent.com/u/34722322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rockmnew", "html_url": "https://github.com/rockmnew", "followers_url": "https://api.github.com/users/rockmnew/followers", "following_url": "https://api.github.com/users/rockmnew/following{/other_user}", "gists_url": "https://api.github.com/users/rockmnew/gists{/gist_id}", "starred_url": "https://api.github.com/users/rockmnew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rockmnew/subscriptions", "organizations_url": "https://api.github.com/users/rockmnew/orgs", "repos_url": "https://api.github.com/users/rockmnew/repos", "events_url": "https://api.github.com/users/rockmnew/events{/privacy}", "received_events_url": "https://api.github.com/users/rockmnew/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 115044490, "node_id": "MDU6TGFiZWwxMTUwNDQ0OTA=", "url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-17T15:55:35Z", "updated_at": "2018-06-08T15:17:54Z", "closed_at": "2018-06-08T15:17:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "When generating an error response, DJA takes the contents of the data provided in the response, and makes it all contents of the `errors` section.  A side effect of this is that you can not have a top-level `meta` section, even though this is permitted by the json:api spec.\r\n\r\n\u00a0A good fix might be to have DJA use the response as-is if it contains `errors` as a top-level section.\u00a0\u00a0Optionally, also check if `errors` is a list.\u00a0 Since there are other optional top-level sections, I'm not sure if additional verification (making sure all top-level sections are permitted) is necessary.  I think it might reasonable to assume that someone who includes `errors` as a top-level section knows what they're doing.\r\n\r\nFor backwards compatibility, anything which does not appear as valid based on what's decided by the previous paragraph would continue the current behavior of making it the contents of a new top-level `errors` section.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/401", "repository_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api", "labels_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/401/comments", "events_url": "https://api.github.com/repos/django-json-api/django-rest-framework-json-api/issues/401/events", "html_url": "https://github.com/django-json-api/django-rest-framework-json-api/issues/401", "id": 288615726, "node_id": "MDU6SXNzdWUyODg2MTU3MjY=", "number": 401, "title": "Exception: Cannot get fields from a polymorphic serializer given a queryset", "user": {"login": "BillBrower", "id": 1717845, "node_id": "MDQ6VXNlcjE3MTc4NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1717845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillBrower", "html_url": "https://github.com/BillBrower", "followers_url": "https://api.github.com/users/BillBrower/followers", "following_url": "https://api.github.com/users/BillBrower/following{/other_user}", "gists_url": "https://api.github.com/users/BillBrower/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillBrower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillBrower/subscriptions", "organizations_url": "https://api.github.com/users/BillBrower/orgs", "repos_url": "https://api.github.com/users/BillBrower/repos", "events_url": "https://api.github.com/users/BillBrower/events{/privacy}", "received_events_url": "https://api.github.com/users/BillBrower/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-15T14:39:40Z", "updated_at": "2019-02-09T23:02:47Z", "closed_at": "2018-01-16T22:02:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm sure I'm just doing something wrong but the documentation on working with polymorphic resources is pretty sparse so I'm not sure what to change. I have a polymorphic model `Parent` with two instance types and when I try to retrieve them using DRF's ModelViewSet I get this error: `Exception: Cannot get fields from a polymorphic serializer given a queryset`.\r\n\r\nHere are my views:\r\n\r\n```python\r\nfrom rest_framework import permissions, viewsets\r\nfrom rest_framework.authentication import TokenAuthentication\r\nfrom .serializers import ParentSerializer\r\n\r\nclass ParentViewSet(viewsets.ModelViewSet):\r\n    authentication_classes = (TokenAuthentication,)\r\n    included = []\r\n    pagination_class = None\r\n    permission_classes = (permissions.IsAuthenticated,)\r\n    serializer_class = ParentSerializer\r\n```\r\n\r\nAnd here is my serializer:\r\n\r\n```python\r\nclass ChildOneSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = ChildOne\r\n    .\r\n    .\r\n    .\r\n\r\nclass ChildTwoSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = ChildTwo\r\n    .\r\n    .\r\n    .\r\n\r\nclass ParentSerializer(PolymorphicModelSerializer):\r\n    polymorphic_serializers = [ChildOneSerializer, ChildTwoSerializer]\r\n\r\n    class Meta:\r\n        model = Parent\r\n```\r\n\r\nI have my `resource_name`s defined on my models. I've tried passing a list instead of a queryset and that works for an empty response (`[]`) but I run into issue #400 for non-empty responses. What should I be passing to my serializer?", "performed_via_github_app": null, "score": 1.0}]}