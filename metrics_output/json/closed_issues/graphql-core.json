{"total_count": 65, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/102", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/102/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/102/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/102", "id": 674746195, "node_id": "MDU6SXNzdWU2NzQ3NDYxOTU=", "number": 102, "title": "Let default_field_resolver check \"typing.Mapping\" instead of the more restrictive \"dict\"", "user": {"login": "jstlaurent", "id": 1054140, "node_id": "MDQ6VXNlcjEwNTQxNDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1054140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstlaurent", "html_url": "https://github.com/jstlaurent", "followers_url": "https://api.github.com/users/jstlaurent/followers", "following_url": "https://api.github.com/users/jstlaurent/following{/other_user}", "gists_url": "https://api.github.com/users/jstlaurent/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstlaurent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstlaurent/subscriptions", "organizations_url": "https://api.github.com/users/jstlaurent/orgs", "repos_url": "https://api.github.com/users/jstlaurent/repos", "events_url": "https://api.github.com/users/jstlaurent/events{/privacy}", "received_events_url": "https://api.github.com/users/jstlaurent/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-07T04:22:27Z", "updated_at": "2020-08-10T02:41:44Z", "closed_at": "2020-08-08T14:07:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature requests\r\n\r\nThe current `default_field_resolver` checks against instances of `dict` specifically to decide whether to use `get` or `getattr` to access the field on the `source`. Checking against [typing.Mapping](https://docs.python.org/3.6/library/typing.html#typing.Mapping) would be more flexible, allowing, for example, a [ChainMap](https://docs.python.org/3/library/collections.html#collections.ChainMap) to be used as the underlying source.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/98", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/98/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/98/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/98", "id": 645833314, "node_id": "MDU6SXNzdWU2NDU4MzMzMTQ=", "number": 98, "title": "AST node type annotations vs. GraphQL spec", "user": {"login": "LWprogramming", "id": 13173037, "node_id": "MDQ6VXNlcjEzMTczMDM3", "avatar_url": "https://avatars0.githubusercontent.com/u/13173037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LWprogramming", "html_url": "https://github.com/LWprogramming", "followers_url": "https://api.github.com/users/LWprogramming/followers", "following_url": "https://api.github.com/users/LWprogramming/following{/other_user}", "gists_url": "https://api.github.com/users/LWprogramming/gists{/gist_id}", "starred_url": "https://api.github.com/users/LWprogramming/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LWprogramming/subscriptions", "organizations_url": "https://api.github.com/users/LWprogramming/orgs", "repos_url": "https://api.github.com/users/LWprogramming/repos", "events_url": "https://api.github.com/users/LWprogramming/events{/privacy}", "received_events_url": "https://api.github.com/users/LWprogramming/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-25T20:32:16Z", "updated_at": "2020-07-05T14:08:52Z", "closed_at": "2020-07-05T14:08:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some AST node types, such as the [`UnionTypeDefinitionNode`](https://github.com/graphql-python/graphql-core/blob/85635a2a1d170d0fcf208db614c2816cf8852db6/src/graphql/language/ast.py#L550) and the `EnumTypeDefinitionNode`, have annotations that say their fields/values are optional. For instance, `UnionTypeDefinitionNode` has an optional frozenlist for the types that the union contains. However, according to the [GraphQL spec](http://spec.graphql.org/June2018/#sec-Unions), unions have to contain at least one unique member type, so it doesn't seem like the list would ever be `None`. Is there a case that I've missed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/97", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/97/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/97/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/97", "id": 636747612, "node_id": "MDU6SXNzdWU2MzY3NDc2MTI=", "number": 97, "title": "Disable suggestion \"Remove Did you mean...\"", "user": {"login": "ckristhoff", "id": 2814894, "node_id": "MDQ6VXNlcjI4MTQ4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2814894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckristhoff", "html_url": "https://github.com/ckristhoff", "followers_url": "https://api.github.com/users/ckristhoff/followers", "following_url": "https://api.github.com/users/ckristhoff/following{/other_user}", "gists_url": "https://api.github.com/users/ckristhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckristhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckristhoff/subscriptions", "organizations_url": "https://api.github.com/users/ckristhoff/orgs", "repos_url": "https://api.github.com/users/ckristhoff/repos", "events_url": "https://api.github.com/users/ckristhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/ckristhoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-06-11T06:15:08Z", "updated_at": "2020-06-12T21:47:33Z", "closed_at": "2020-06-12T21:47:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\nWhen you post an query with syntax errors graphql/graphene makes suggestions to you. By example, sending \"i\", it suggest \"ID\".\r\n```graphql\r\nquery{\r\n  users{\r\n        i\r\n  }\r\n}\r\n```\r\n```\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"Cannot query field \\\"i\\\" on type \\\"User\\\". Did you mean \\\"id\\\"?\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 5,\r\n          \"column\": 9\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nCan suggestions be disabled?\r\n\r\nMore info: \r\nSyntax analysis who add suggestions is executed before the middlewares.\r\nApparently suggestions are made by [ScalarLeafsRule](https://github.com/graphql-python/graphql-core/blob/master/src/graphql/validation/rules/scalar_leafs.py#L9) class.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/96", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/96/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/96/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/96", "id": 634740699, "node_id": "MDU6SXNzdWU2MzQ3NDA2OTk=", "number": 96, "title": "Change special return value for REMOVE", "user": {"login": "LWprogramming", "id": 13173037, "node_id": "MDQ6VXNlcjEzMTczMDM3", "avatar_url": "https://avatars0.githubusercontent.com/u/13173037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LWprogramming", "html_url": "https://github.com/LWprogramming", "followers_url": "https://api.github.com/users/LWprogramming/followers", "following_url": "https://api.github.com/users/LWprogramming/following{/other_user}", "gists_url": "https://api.github.com/users/LWprogramming/gists{/gist_id}", "starred_url": "https://api.github.com/users/LWprogramming/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LWprogramming/subscriptions", "organizations_url": "https://api.github.com/users/LWprogramming/orgs", "repos_url": "https://api.github.com/users/LWprogramming/repos", "events_url": "https://api.github.com/users/LWprogramming/events{/privacy}", "received_events_url": "https://api.github.com/users/LWprogramming/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-08T15:57:42Z", "updated_at": "2020-07-05T14:13:14Z", "closed_at": "2020-07-05T14:13:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `visitor.py` file sets the special value [`REMOVE` to `Ellipsis`](https://github.com/graphql-python/graphql-core/blob/master/src/graphql/language/visitor.py#L34). However, this causes trouble with type-hinting functions that return REMOVE. Could we create a separate value rather than using `Ellipsis`? See the [issues linked here](https://github.com/kensho-technologies/graphql-compiler/pull/834#discussion_r435360797), where the consensus is in favor of not using the `Ellipsis` constant. Thank you!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/95", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/95/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/95/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/95", "id": 626922727, "node_id": "MDU6SXNzdWU2MjY5MjI3Mjc=", "number": 95, "title": "Implement specifiedBy directive merged into graphql-js", "user": {"login": "Ambro17", "id": 11272260, "node_id": "MDQ6VXNlcjExMjcyMjYw", "avatar_url": "https://avatars2.githubusercontent.com/u/11272260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ambro17", "html_url": "https://github.com/Ambro17", "followers_url": "https://api.github.com/users/Ambro17/followers", "following_url": "https://api.github.com/users/Ambro17/following{/other_user}", "gists_url": "https://api.github.com/users/Ambro17/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ambro17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ambro17/subscriptions", "organizations_url": "https://api.github.com/users/Ambro17/orgs", "repos_url": "https://api.github.com/users/Ambro17/repos", "events_url": "https://api.github.com/users/Ambro17/events{/privacy}", "received_events_url": "https://api.github.com/users/Ambro17/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-29T00:50:10Z", "updated_at": "2020-05-29T14:30:13Z", "closed_at": "2020-05-29T11:03:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "As per issue [#649](https://github.com/graphql/graphql-spec/pull/649) and the [merged pr](https://github.com/graphql/graphql-js/pull/2276) the reference implementation now includes a new directive.\nI understand that this lib is intended as a 1 to 1 port to graphql-js so perhaps we should consider including it.\nIf not possible, we should document the divergence", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/94", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/94/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/94/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/94", "id": 626591482, "node_id": "MDU6SXNzdWU2MjY1OTE0ODI=", "number": 94, "title": "Allow caching of parsing requests", "user": {"login": "jnak", "id": 569169, "node_id": "MDQ6VXNlcjU2OTE2OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/569169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnak", "html_url": "https://github.com/jnak", "followers_url": "https://api.github.com/users/jnak/followers", "following_url": "https://api.github.com/users/jnak/following{/other_user}", "gists_url": "https://api.github.com/users/jnak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnak/subscriptions", "organizations_url": "https://api.github.com/users/jnak/orgs", "repos_url": "https://api.github.com/users/jnak/repos", "events_url": "https://api.github.com/users/jnak/events{/privacy}", "received_events_url": "https://api.github.com/users/jnak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T15:11:50Z", "updated_at": "2020-05-28T18:54:09Z", "closed_at": "2020-05-28T17:45:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCurrently there is no way to cache the parsing of the queries because `graphql_impl` only [accepts queries as strings](https://github.com/graphql-python/graphql-core/blob/6687b168b82e6c1722bb9748430f8785cabe46f5/src/graphql/graphql.py#L152). While we probably don't want to bring back the concept of `backend` from GraphQL V2, we could simply extend `graphql_impl` to take a query string or a parsed document so callers have a chance to cache the parsing (see https://github.com/graphql-python/graphql-server-core/issues/43). Additionally, it will allow callers to do finer-grained error handling in case the parsing fail. For example, we probably don't want to alert when a client sends a malformed query. \r\n\r\nCheers,\r\nJ\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/93", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/93/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/93/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/93", "id": 620453356, "node_id": "MDU6SXNzdWU2MjA0NTMzNTY=", "number": 93, "title": "`GraphQLScalarType.parse_literal` is called with two arguments instead of one when Query variables are present.", "user": {"login": "rafalp", "id": 750553, "node_id": "MDQ6VXNlcjc1MDU1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/750553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafalp", "html_url": "https://github.com/rafalp", "followers_url": "https://api.github.com/users/rafalp/followers", "following_url": "https://api.github.com/users/rafalp/following{/other_user}", "gists_url": "https://api.github.com/users/rafalp/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafalp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafalp/subscriptions", "organizations_url": "https://api.github.com/users/rafalp/orgs", "repos_url": "https://api.github.com/users/rafalp/repos", "events_url": "https://api.github.com/users/rafalp/events{/privacy}", "received_events_url": "https://api.github.com/users/rafalp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-18T19:31:25Z", "updated_at": "2020-07-05T16:21:32Z", "closed_at": "2020-07-05T16:15:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "It has been reported to us that when custom scalar with `parse_literal` is given literal value in query that has been called with variables, function passed to `parse_literal` will be called with two arguments instead of one: `ast` of literal and dict with query variables:\r\n\r\n```\r\nquery TestQuery($variable: ID) {\r\n  field(scalar: \"STRING\")\r\n  otherField(id: $variable)\r\n}\r\n```\r\n\r\nThis produces tricky to debug error, eg.:\r\n\r\n```\r\nArgument 'scalar' has invalid value \"STRING\"\r\n```\r\n\r\nHowever actual error is `TypeError` for function being called with two arguments instead of one.\r\n\r\nHowever GraphQL.js documentation doesn't mention this behaviour:\r\nhttps://graphql.org/graphql-js/type/#graphqlscalartype\r\n\r\nI've found that `value_from_ast_untyped` is called with two arguments in situation when query variables are present, but couldn't find anything about custom `parse_literal`.\r\n\r\nIs this intended?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/91", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/91/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/91/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/91", "id": 618512476, "node_id": "MDU6SXNzdWU2MTg1MTI0NzY=", "number": 91, "title": "Possible cache_key collision within collect_subfields", "user": {"login": "rafalp", "id": 750553, "node_id": "MDQ6VXNlcjc1MDU1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/750553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafalp", "html_url": "https://github.com/rafalp", "followers_url": "https://api.github.com/users/rafalp/followers", "following_url": "https://api.github.com/users/rafalp/following{/other_user}", "gists_url": "https://api.github.com/users/rafalp/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafalp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafalp/subscriptions", "organizations_url": "https://api.github.com/users/rafalp/orgs", "repos_url": "https://api.github.com/users/rafalp/repos", "events_url": "https://api.github.com/users/rafalp/events{/privacy}", "received_events_url": "https://api.github.com/users/rafalp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-05-14T20:23:32Z", "updated_at": "2020-05-18T20:02:53Z", "closed_at": "2020-05-18T20:02:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Today I've noticed `apollo-client` displaying warnings in console about queried fields missing from server's response:\r\n\r\n<img width=\"190\" alt=\"Zrzut ekranu 2020-05-14 o 21 28 10\" src=\"https://user-images.githubusercontent.com/750553/81979912-041ea280-962e-11ea-9c81-616244f66dca.png\">\r\n\r\nAt first I've thought that there's something wrong with Apollo client mistaking between fragments, but I've investigated server's response for query and GraphQL Playground, and realized that randomly, my query reuses result of one fragment where other fragment is expected:\r\n\r\n![Zrzut ekranu 2020-05-14 o 22 05 12](https://user-images.githubusercontent.com/750553/81980581-2a910d80-962f-11ea-9678-3b25e6cef2f1.png)\r\n\r\nThis result occurs at random. Sometimes I always get valid query result. Sometimes I keep running into invalid query result.\r\n\r\nHere's recording of this happening on Vimeo:\r\n\r\nhttps://vimeo.com/418611363\r\n\r\nI'm suspecting race condition within the Query executor, as it seems that moving category fields to bottom of `thread` seems to solve the issue, perhaps giving few more laps in the event loop for past subset to clean and new subset to be used?\r\n\r\nI haven't seen this error occur for first fragment used within query, only for the latter one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/90", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/90/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/90/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/90", "id": 617765732, "node_id": "MDU6SXNzdWU2MTc3NjU3MzI=", "number": 90, "title": "Generate schema with directive at field", "user": {"login": "hspedro", "id": 11635469, "node_id": "MDQ6VXNlcjExNjM1NDY5", "avatar_url": "https://avatars2.githubusercontent.com/u/11635469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hspedro", "html_url": "https://github.com/hspedro", "followers_url": "https://api.github.com/users/hspedro/followers", "following_url": "https://api.github.com/users/hspedro/following{/other_user}", "gists_url": "https://api.github.com/users/hspedro/gists{/gist_id}", "starred_url": "https://api.github.com/users/hspedro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hspedro/subscriptions", "organizations_url": "https://api.github.com/users/hspedro/orgs", "repos_url": "https://api.github.com/users/hspedro/repos", "events_url": "https://api.github.com/users/hspedro/events{/privacy}", "received_events_url": "https://api.github.com/users/hspedro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T21:26:30Z", "updated_at": "2020-07-05T16:17:12Z", "closed_at": "2020-07-05T16:17:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Feature requests\r\n\r\nHi all, I'm trying to generate a schema that has a directive at a field:\r\n```graphql\r\ndirective @hasPermissions(permissions: [String]) on OBJECT | FIELD_DEFINITION\r\n\r\ntype MyType {\r\n  field1: Boolean @hasPermissions(permissions: ['permission1', 'permission2'])\r\n}\r\n\r\ntype Query {\r\n  myType: MyType\r\n}\r\n```\r\n\r\nHowever, I did not found a way to generate this using the library. For instance, I tried defining the `directives` attribute from `GraphQLField.ast_node` but `print_schema` did not generated field with the directive:\r\n```python\r\nfrom graphql.language import (\r\n    FieldDefinitionNode, DirectiveLocation, DirectiveNode, ArgumentNode\r\n)\r\nfrom graphql.type import (\r\n    GraphQLArgument,\r\n    GraphQLBoolean,\r\n    GraphQLDirective,\r\n    GraphQLField,\r\n    GraphQLList,\r\n    GraphQLObjectType,\r\n    GraphQLSchema,\r\n    GraphQLString,\r\n)\r\nfrom graphql.utilities import print_schema\r\n\r\nif __name__ == \"__main__\":\r\n    MyType = GraphQLObjectType(\r\n        \"MyType\",\r\n        lambda: {\r\n            \"field1\": GraphQLField(\r\n                GraphQLBoolean,\r\n                ast_node=FieldDefinitionNode(\r\n                    directives=[DirectiveNode(\r\n                        name=\"hasPermissions\",\r\n                        arguments=[\r\n                            ArgumentNode(\r\n                                name=\"permissions\",\r\n                                value=[\"permission1\", \"permission2\"]\r\n                            )\r\n                        ]\r\n                    )]\r\n                )\r\n            ),\r\n        },\r\n    )\r\n\r\n    MyTypeQuery = GraphQLObjectType(\r\n        \"Query\",\r\n        {\r\n            \"myType\": GraphQLField(MyType),\r\n        },\r\n    )\r\n    schema = GraphQLSchema(\r\n        directives=[GraphQLDirective(\r\n            name=\"hasPermissions\",\r\n            locations=[\r\n                DirectiveLocation.OBJECT,\r\n                DirectiveLocation.FIELD_DEFINITION\r\n            ],\r\n            args={\r\n                \"permissions\": GraphQLArgument(GraphQLList(GraphQLString)),\r\n            },\r\n        )],\r\n        query=MyTypeQuery,\r\n    )\r\n    print(print_schema(schema))\r\n```\r\n\r\nOutput:\r\n```graphql\r\ndirective @hasPermissions(permissions: [String]) on OBJECT | FIELD_DEFINITION\r\n\r\ntype Query {\r\n  myType: MyType\r\n}\r\n\r\ntype MyType {\r\n  field1: Boolean\r\n}\r\n```\r\n\r\nIs there any way to generate a schema with directive at the field declaration? If not, I can contribute on that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/89", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/89/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/89/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/89", "id": 611973494, "node_id": "MDU6SXNzdWU2MTE5NzM0OTQ=", "number": 89, "title": "Add type annotations for all definitions", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-04T15:41:35Z", "updated_at": "2020-07-01T19:57:03Z", "closed_at": "2020-07-01T19:57:02Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "We should add type annotations for all definitions except those in tests, and enforce this with a `mypy.ini` configuration like this:\r\n\r\n```\r\n[mypy]\r\npython_version = 3.8\r\n...\r\ndisallow_untyped_defs = True\r\n\r\n[mypy-tests.*]\r\ndisallow_untyped_defs = False\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/83", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/83/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/83/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/83", "id": 584767195, "node_id": "MDU6SXNzdWU1ODQ3NjcxOTU=", "number": 83, "title": "Parser too strict on ordering after frozen lists", "user": {"login": "chadwhitely", "id": 14099062, "node_id": "MDQ6VXNlcjE0MDk5MDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/14099062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chadwhitely", "html_url": "https://github.com/chadwhitely", "followers_url": "https://api.github.com/users/chadwhitely/followers", "following_url": "https://api.github.com/users/chadwhitely/following{/other_user}", "gists_url": "https://api.github.com/users/chadwhitely/gists{/gist_id}", "starred_url": "https://api.github.com/users/chadwhitely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chadwhitely/subscriptions", "organizations_url": "https://api.github.com/users/chadwhitely/orgs", "repos_url": "https://api.github.com/users/chadwhitely/repos", "events_url": "https://api.github.com/users/chadwhitely/events{/privacy}", "received_events_url": "https://api.github.com/users/chadwhitely/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1236952898, "node_id": "MDU6TGFiZWwxMjM2OTUyODk4", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/discussion", "name": "discussion", "color": "7057ff", "default": false, "description": "Needs more discussion"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2020-03-20T00:00:59Z", "updated_at": "2020-07-05T16:20:04Z", "closed_at": "2020-07-05T16:20:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "When parsing a query, the parser adheres to the original order, even in places where order shouldn't matter (arguments). This causes the two below queries to be marked as inequal by the comparator. Recommendation would be to sort any nodes for places where order doesn't matter, as part of [optional_many](https://github.com/graphql-python/graphql-core/blob/4e5c58b/src/graphql/language/parser.py#L1056).\r\n\r\nWe previously got around this issue by sorting the AST ourselves, but with the introduction of FrozenList, this now results in errors.\r\n\r\n```\r\nE       AssertionError: queryA =\r\nE       {\r\nE         vehicle(id: 3, otherId: 2) {\r\nE           version\r\nE           cancel\r\nE           appointment {\r\nE             when\r\nE             afterDate\r\nE           }\r\nE           trigger {\r\nE             how\r\nE             Phase\r\nE             PhaseOption\r\nE             PhaseDelaySecs\r\nE           }\r\nE         }\r\nE       }\r\nE       \r\nE        queryB =\r\nE       {\r\nE         vehicle(otherId: 2, id: 3) {\r\nE           version\r\nE           cancel\r\nE           appointment {\r\nE             when\r\nE             afterDate\r\nE           }\r\nE           trigger {\r\nE             how\r\nE             Phase\r\nE             PhaseOption\r\nE             PhaseDelaySecs\r\nE           }\r\nE         }\r\nE       }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/81", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/81/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/81/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/81", "id": 581481917, "node_id": "MDU6SXNzdWU1ODE0ODE5MTc=", "number": 81, "title": "Weakref unsupported in AST", "user": {"login": "astronouth7303", "id": 401438, "node_id": "MDQ6VXNlcjQwMTQzOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/401438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astronouth7303", "html_url": "https://github.com/astronouth7303", "followers_url": "https://api.github.com/users/astronouth7303/followers", "following_url": "https://api.github.com/users/astronouth7303/following{/other_user}", "gists_url": "https://api.github.com/users/astronouth7303/gists{/gist_id}", "starred_url": "https://api.github.com/users/astronouth7303/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astronouth7303/subscriptions", "organizations_url": "https://api.github.com/users/astronouth7303/orgs", "repos_url": "https://api.github.com/users/astronouth7303/repos", "events_url": "https://api.github.com/users/astronouth7303/events{/privacy}", "received_events_url": "https://api.github.com/users/astronouth7303/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-15T03:03:31Z", "updated_at": "2020-03-18T11:34:55Z", "closed_at": "2020-03-18T11:34:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`graphql.language.ast` makes extensive use of `__slots__` but `__weakref__` is given, breaking the `weakref` module.\r\n\r\n* [Python Documentation about `__slots__`](https://docs.python.org/3/reference/datamodel.html#slots)\r\n\r\nThe use of `__slots__` without `__weakref__` makes it very hard to track data about AST nodes in a non-leaky way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/80", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/80/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/80/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/80", "id": 581325036, "node_id": "MDU6SXNzdWU1ODEzMjUwMzY=", "number": 80, "title": "Initial Update", "user": {"login": "pyup-bot", "id": 16239342, "node_id": "MDQ6VXNlcjE2MjM5MzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/16239342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyup-bot", "html_url": "https://github.com/pyup-bot", "followers_url": "https://api.github.com/users/pyup-bot/followers", "following_url": "https://api.github.com/users/pyup-bot/following{/other_user}", "gists_url": "https://api.github.com/users/pyup-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyup-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyup-bot/subscriptions", "organizations_url": "https://api.github.com/users/pyup-bot/orgs", "repos_url": "https://api.github.com/users/pyup-bot/repos", "events_url": "https://api.github.com/users/pyup-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/pyup-bot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-14T18:48:03Z", "updated_at": "2020-03-21T13:30:10Z", "closed_at": "2020-03-21T13:30:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "The bot created this issue to inform you that pyup.io has been set up on this repo.\nOnce you have closed it, the bot will open pull requests for updates as soon as they are available.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/79", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/79/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/79/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/79", "id": 569579889, "node_id": "MDU6SXNzdWU1Njk1Nzk4ODk=", "number": 79, "title": "Unclear how to distinguish between \"intentional\" and \"server error\" exception cases", "user": {"login": "akdor1154", "id": 6732831, "node_id": "MDQ6VXNlcjY3MzI4MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6732831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akdor1154", "html_url": "https://github.com/akdor1154", "followers_url": "https://api.github.com/users/akdor1154/followers", "following_url": "https://api.github.com/users/akdor1154/following{/other_user}", "gists_url": "https://api.github.com/users/akdor1154/gists{/gist_id}", "starred_url": "https://api.github.com/users/akdor1154/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akdor1154/subscriptions", "organizations_url": "https://api.github.com/users/akdor1154/orgs", "repos_url": "https://api.github.com/users/akdor1154/repos", "events_url": "https://api.github.com/users/akdor1154/events{/privacy}", "received_events_url": "https://api.github.com/users/akdor1154/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-23T23:43:51Z", "updated_at": "2020-03-04T12:45:45Z", "closed_at": "2020-03-04T12:45:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Heya,\r\nI'm writing a server with the error philosophy that\r\n - if a resolver wants to return an \"errors: {blah}\" object to the client, I will handle this case explicitly (by some arbitrary method, e.g. raising a special Exception class, returning a special Error() result, etc)\r\n - any other exception in my server is \"unexpected\", and should be treated as a server error and result in a 500.\r\n\r\nThis is analogous to the pattern of Result (Ok, Error) in many functional languages. Result.Error is returned for an \"expected\" error, and potentially manually displayed to the client; any exceptions are \"unexpected\" and are truly exceptions in the sense that they define unexpected behaviour from my server and should hence not be exposed to clients.\r\n\r\nIt's unclear how I can achieve this with the error model of graphql-core-next. Some GraphQL errors are clearly of the second type (e.g. I've defined my schema incorrectly, `GraphQLError('Type UnknownTransactionReturn must define one or more fields.')`), but as far as I can tell, this library doesn't give me the ability to distinguish those from the first type (e.g. the user submitted a malformed graphql query).\r\n\r\nCurrently I am trying to achieve this by inspecting `.errors` in my `ExecutionResult`s. (checking for original_error to see where GraphQL is hiding exceptions, etc.)\r\n\r\nIs there any way to achieve the control over error behaviour that I am seeking here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/78", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/78/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/78/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/78", "id": 562511500, "node_id": "MDU6SXNzdWU1NjI1MTE1MDA=", "number": 78, "title": "Field Directive Is Not \"Inherited\" From Interface", "user": {"login": "melvinkcx", "id": 16914545, "node_id": "MDQ6VXNlcjE2OTE0NTQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/16914545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/melvinkcx", "html_url": "https://github.com/melvinkcx", "followers_url": "https://api.github.com/users/melvinkcx/followers", "following_url": "https://api.github.com/users/melvinkcx/following{/other_user}", "gists_url": "https://api.github.com/users/melvinkcx/gists{/gist_id}", "starred_url": "https://api.github.com/users/melvinkcx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/melvinkcx/subscriptions", "organizations_url": "https://api.github.com/users/melvinkcx/orgs", "repos_url": "https://api.github.com/users/melvinkcx/repos", "events_url": "https://api.github.com/users/melvinkcx/events{/privacy}", "received_events_url": "https://api.github.com/users/melvinkcx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-10T11:53:37Z", "updated_at": "2020-02-11T06:04:36Z", "closed_at": "2020-02-11T06:04:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was adding query complexity analysis into [graphql-utilities](https://github.com/melvinkcx/graphql-utilities) while I came across this strange behavior. \r\n\r\nIn the following schema, the `@cost` directive of `createdAt` in `TimestampedType` is not found in `Announcement -> createdAt`.\r\n\r\n```\r\ninterface TimestampedType {\r\n        createdAt: String @cost(complexity: 2)\r\n        updatedAt: String @cost(complexity: 2)\r\n}\r\n\r\ntype Announcement implements TimestampedType {\r\n        createdAt: String\r\n        updatedAt: String\r\n        announcementId: String! @cost(complexity: 4)\r\n        title: String\r\n        text: String\r\n}\r\n```\r\n\r\nThis is the screenshots of my debugger:\r\n1. `<AnnouncementField> -> ast_node -> fields -> createdAt`:\r\n![Screenshot from 2020-02-10 20-37-58](https://user-images.githubusercontent.com/16914545/74147294-422eb380-4c46-11ea-899b-9f45a1a717bc.png)\r\n\r\n2. `<AnnouncementField> -> interfaces[0] -> ast_node -> fields -> createdAt`:\r\n![Screenshot from 2020-02-10 20-38-46](https://user-images.githubusercontent.com/16914545/74147292-41961d00-4c46-11ea-958a-499ebb8825f5.png)\r\n\r\n\r\nAs I couldn't find any relevant answer from the spec, I'm not certain if the directive is supposed to be \"inherited\" from the interface. However, from what I observed in `graphql-js`, inheriting directive seems to be the correct behavior. \r\n\r\nI appreciate any answer or help, thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/77", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/77/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/77/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/77", "id": 556822268, "node_id": "MDU6SXNzdWU1NTY4MjIyNjg=", "number": 77, "title": "Consider renaming INVALID to Undefined", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-29T12:11:32Z", "updated_at": "2020-02-02T19:03:48Z", "closed_at": "2020-02-02T19:03:48Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "GraphQL-Core-Next introduced the `INVALID` singleton to specify invalid and undefined values in places where GraphQL.js uses the global `undefined` which is only available in JavaScript. GraphQL-Core later introduced `Undefined` for the same purpose.\r\n\r\nI'm inclined to use the same name `Undefined` in GraphQL-Core-Next, in order to maintain better backward compatibility with v2, and because it is more similar to GraphQL.js and maye more Python, since the `None` singleton, and False and True are also spelled as a capitalized words in Python. I would keep INVALID as an alias for backward compatibility with previous releases of v3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/75", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/75/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/75/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/75", "id": 553714071, "node_id": "MDU6SXNzdWU1NTM3MTQwNzE=", "number": 75, "title": "lexicographic_sort_schema is underspecified.", "user": {"login": "pmantica1", "id": 22776930, "node_id": "MDQ6VXNlcjIyNzc2OTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/22776930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmantica1", "html_url": "https://github.com/pmantica1", "followers_url": "https://api.github.com/users/pmantica1/followers", "following_url": "https://api.github.com/users/pmantica1/following{/other_user}", "gists_url": "https://api.github.com/users/pmantica1/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmantica1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmantica1/subscriptions", "organizations_url": "https://api.github.com/users/pmantica1/orgs", "repos_url": "https://api.github.com/users/pmantica1/repos", "events_url": "https://api.github.com/users/pmantica1/events{/privacy}", "received_events_url": "https://api.github.com/users/pmantica1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-22T18:23:06Z", "updated_at": "2020-02-10T21:11:17Z", "closed_at": "2020-01-23T22:39:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all thanks for the amazing work in porting the GraphQL reference implementation.\r\n\r\nI wanted to compute the fingerprint of a schema by running `lexicographic_sort_schema` and `print_schema` then computing the sha256 of the output. \r\nhttps://github.com/kensho-technologies/graphql-compiler/pull/737\r\n\r\nHowever, it is unclear whether `lexicographic_sort_schema` modifies the input schema. So I was having trouble documenting my function. Would you mind clarifying the function's spec? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/72", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/72/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/72/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/72", "id": 537974228, "node_id": "MDU6SXNzdWU1Mzc5NzQyMjg=", "number": 72, "title": "Exception instance returned from resolver is raised within executor instead of being passed down for further resolution.", "user": {"login": "rafalp", "id": 750553, "node_id": "MDQ6VXNlcjc1MDU1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/750553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafalp", "html_url": "https://github.com/rafalp", "followers_url": "https://api.github.com/users/rafalp/followers", "following_url": "https://api.github.com/users/rafalp/following{/other_user}", "gists_url": "https://api.github.com/users/rafalp/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafalp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafalp/subscriptions", "organizations_url": "https://api.github.com/users/rafalp/orgs", "repos_url": "https://api.github.com/users/rafalp/repos", "events_url": "https://api.github.com/users/rafalp/events{/privacy}", "received_events_url": "https://api.github.com/users/rafalp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-14T22:35:16Z", "updated_at": "2020-01-06T13:07:34Z", "closed_at": "2020-01-06T13:07:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Today when experimenting with 3rd party library for data validation (https://github.com/samuelcolvin/pydantic) I've noticed that when I take map of validation errors from it (which is dict of lists of `ValueError` and `TypeError` subclasses instances), I need to implement extra step to convert those errors to something else because query executor includes check for `isinstance(result, Exception)`. This check makes it raise returned exception instance, effectively  short-circuiting further resolution:\r\n\r\nhttps://github.com/graphql-python/graphql-core-next/blob/master/src/graphql/execution/execute.py#L731\r\n\r\nThe fix for issue was considerably simple to come up with: just write util that converts those errors to a dict as they are included in my result's `validation_errors` key, but I feel such boilerplate should be unnecessary:\r\n\r\n```\r\ntry:\r\n    ... run pydantic validation here\r\nexcept (PydanticTypeError, PydanticValueError) as error:\r\n    return {\"validation_errors\": flatten_validation_error(error)}\r\n```\r\n\r\nIs this implementation a result of something in spec, or mechanism used to keep other feature's (eg. error propagation) code simple? I think we should consider supporting this use-case. Considerable number of libraries use exceptions for messaging (eg. Django with its `ValidationError` and bunch of `core.exceptions.*`)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/69", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/69/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/69/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/69", "id": 531513977, "node_id": "MDU6SXNzdWU1MzE1MTM5Nzc=", "number": 69, "title": "Premature removal of introspection_query", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-02T20:18:12Z", "updated_at": "2019-12-06T15:58:54Z", "closed_at": "2019-12-06T15:58:54Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "In GraphQL-core 3.0.0, `introspection_query` has been already removed, although 3.0.0 claims to be compatible with GraphQL.js 14. This should only be removed when we release a version compatible with GraphQL.js 15.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/67", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/67/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/67/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/67", "id": 527754074, "node_id": "MDU6SXNzdWU1Mjc3NTQwNzQ=", "number": 67, "title": "Update mypy", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1695711621, "node_id": "MDU6TGFiZWwxNjk1NzExNjIx", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/modernization", "name": "modernization", "color": "5ebeff", "default": false, "description": "Update dependencies etc."}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/6", "html_url": "https://github.com/graphql-python/graphql-core/milestone/6", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/6/labels", "id": 4659410, "node_id": "MDk6TWlsZXN0b25lNDY1OTQxMA==", "number": 6, "title": "v3.0", "description": "", "creator": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "open", "created_at": "2019-09-14T19:53:57Z", "updated_at": "2019-11-30T21:57:18Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2019-11-24T20:46:13Z", "updated_at": "2019-11-30T13:04:22Z", "closed_at": "2019-11-30T13:04:22Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently we use mypy 0.720 because it is the last version that supports the \"old\" semantic analyzer.\r\n\r\nThe new semantic analyzer creates a few errors that need to be resolved. Some of these errors are actually mypy issues, like https://github.com/python/mypy/issues/7203. Maybe we should wait until [these mypy issues](https://github.com/python/mypy/issues?utf8=%E2%9C%93&q=label%3Anew-semantic-analyzer) are resolved.\r\n\r\nAfter upgrading to a newer mypy version, the setting \"new_semantic_analyzer = False\" in mypy.ini should be removed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/65", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/65/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/65/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/65", "id": 526275418, "node_id": "MDU6SXNzdWU1MjYyNzU0MTg=", "number": 65, "title": "Obtaining field directives at execution time", "user": {"login": "Hellzed", "id": 1180536, "node_id": "MDQ6VXNlcjExODA1MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1180536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hellzed", "html_url": "https://github.com/Hellzed", "followers_url": "https://api.github.com/users/Hellzed/followers", "following_url": "https://api.github.com/users/Hellzed/following{/other_user}", "gists_url": "https://api.github.com/users/Hellzed/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hellzed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hellzed/subscriptions", "organizations_url": "https://api.github.com/users/Hellzed/orgs", "repos_url": "https://api.github.com/users/Hellzed/repos", "events_url": "https://api.github.com/users/Hellzed/events{/privacy}", "received_events_url": "https://api.github.com/users/Hellzed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-20T23:31:26Z", "updated_at": "2019-11-30T21:34:13Z", "closed_at": "2019-11-30T21:34:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following SDL example:\r\n```graphql\r\ndirective @example(\r\n  arg: String\r\n) on FIELD_DEFINITION\r\n\r\ntype Query {\r\n  field: String @example(arg: \"some value\")\r\n}\r\n```\r\n\r\nAt execution time (I'm assuming from within a resolver or middleware), when resolving `field`, what would be the proper way to know the `example` directive is applied to it, and to get \"some value\"?\r\n\r\nI've checked the doc and found `graphql.get_directive_values()` but can't figure how to use it.\r\n`GraphQLResolveInfo.field_nodes` is a list with only one field node, which has an empty `directives` property.\r\n\r\nI know providing a framework to define directives is not a goal of this lib, but I just need a bare bones way to access this data.\r\n\r\n**Edit:**\r\nAfter checking the internals, I get it better: `GraphQLResolveInfo.field_nodes` gives access to the selection nodes, and these only carry client query directives.\r\n\r\nTo access the field definition within the server schema, I have to do the following:\r\n```python\r\nfield_def = info.parent_type.fields[info.field_name]\r\ndirective = info.schema.get_directive(\"example\")\r\ngraphql.get_directive_values(directive, field_def)  # {\"arg\": \"some value\"}\r\n```\r\n\r\nLet me know if I'm doing something wrong! (and feel free to close this issue. I feel like having some doc about it might make sense.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/64", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/64/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/64/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/64", "id": 506044339, "node_id": "MDU6SXNzdWU1MDYwNDQzMzk=", "number": 64, "title": "Question: how to perform an operation before the futures will be resolved", "user": {"login": "maartenbreddels", "id": 1765949, "node_id": "MDQ6VXNlcjE3NjU5NDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1765949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maartenbreddels", "html_url": "https://github.com/maartenbreddels", "followers_url": "https://api.github.com/users/maartenbreddels/followers", "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}", "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}", "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions", "organizations_url": "https://api.github.com/users/maartenbreddels/orgs", "repos_url": "https://api.github.com/users/maartenbreddels/repos", "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}", "received_events_url": "https://api.github.com/users/maartenbreddels/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-11T20:29:23Z", "updated_at": "2019-10-22T18:04:19Z", "closed_at": "2019-10-22T18:04:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nawesome project, going Python 3.6+ and full async is a really big improvement!\r\n\r\nFor context: I'm creating a GraphQL binding to [Vaex](https://github.com/vaexio/vaex/), a Python DataFrame library for large datasets, mostly exposing the aggregations and groupby/binby operations. The aggregation operations can be done async (they will give a Promise, that I can wrap with a Future for compatibility with this library). All operations will then be performed in one pass over the data, and thus all promises/futures will be resolved after that operation. This 'one pass over the data' is required for proper performance for larger than memory datasets.\r\n\r\nI thus need to call vaex to compute the aggregation before your library tries to resolve the futures, but after all graph-ql operations are executed. In the previous version of this library, I could do this by calling my computation function in https://github.com/graphql-python/graphql-core/blob/bbbe880673e2574bc418b639f43968f96364873b/graphql/execution/executors/asyncio.py#L55 (by inherting and overriding that method).\r\n\r\nHowever, I cannot find an easy way to do this with the current library. The only way I could do it was to pass my function as the context, and call it just before this line : https://github.com/graphql-python/graphql-core-next/blob/0fb5b81fc0a1909bfe63df31657bc4de631676cf/src/graphql/execution/execute.py#L356\r\n\r\nIs there a proper way of achieving this?\r\n\r\ncheers,\r\n\r\nMaarten", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/63", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/63/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/63/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/63", "id": 496713759, "node_id": "MDU6SXNzdWU0OTY3MTM3NTk=", "number": 63, "title": "Rules for directive's arguments not executed if no args declared on directive", "user": {"login": "Dodobibi", "id": 13240092, "node_id": "MDQ6VXNlcjEzMjQwMDky", "avatar_url": "https://avatars3.githubusercontent.com/u/13240092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dodobibi", "html_url": "https://github.com/Dodobibi", "followers_url": "https://api.github.com/users/Dodobibi/followers", "following_url": "https://api.github.com/users/Dodobibi/following{/other_user}", "gists_url": "https://api.github.com/users/Dodobibi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dodobibi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dodobibi/subscriptions", "organizations_url": "https://api.github.com/users/Dodobibi/orgs", "repos_url": "https://api.github.com/users/Dodobibi/repos", "events_url": "https://api.github.com/users/Dodobibi/events{/privacy}", "received_events_url": "https://api.github.com/users/Dodobibi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-21T23:42:34Z", "updated_at": "2019-09-25T12:10:14Z", "closed_at": "2019-09-25T12:08:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a directive with no argument declared and an arbitrary argument is passed, the rule check is not applied.\r\n\r\nThis is because `know_args` is an empty list  which return _false_ in `if directive_node.arguments and known_args:` at [Line 63 on /src/graphql/validation/rules/known_argument_names.py](https://github.com/graphql-python/graphql-core-next/blob/master/src/graphql/validation/rules/known_argument_names.py#L63)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/61", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/61/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/61/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/61", "id": 493774640, "node_id": "MDU6SXNzdWU0OTM3NzQ2NDA=", "number": 61, "title": "SourceLocation should be serialized as object", "user": {"login": "ktosiek", "id": 278013, "node_id": "MDQ6VXNlcjI3ODAxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/278013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktosiek", "html_url": "https://github.com/ktosiek", "followers_url": "https://api.github.com/users/ktosiek/followers", "following_url": "https://api.github.com/users/ktosiek/following{/other_user}", "gists_url": "https://api.github.com/users/ktosiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktosiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktosiek/subscriptions", "organizations_url": "https://api.github.com/users/ktosiek/orgs", "repos_url": "https://api.github.com/users/ktosiek/repos", "events_url": "https://api.github.com/users/ktosiek/events{/privacy}", "received_events_url": "https://api.github.com/users/ktosiek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-15T19:11:31Z", "updated_at": "2019-09-26T12:03:26Z", "closed_at": "2019-09-26T12:03:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`SourceLocation`, as a NamedTuple, is serialized by json.dumps() to an array instead of an object. Graphql.js [keeps `SourceLocation` as and object](https://github.com/graphql/graphql-js/blob/57232347e71b7b23fbcd4c53c8afca73f89e9cc7/src/language/location.js#L8), so it just works for them.\r\n\r\nReproduction:\r\n```python\r\nfrom graphql import SourceLocation, GraphQLError, format_error, Source\r\nimport json\r\n\r\nprint(json.dumps(format_error(GraphQLError(message=\"test\", source=Source('{ test }'), positions=[2]))))\r\n```\r\n\r\nExpected result: `{\"message\": \"test\", \"locations\": [`**`{\"line\": 1, \"column\": 3}`**`], \"path\": null}`\r\nActual result: `{\"message\": \"test\", \"locations\": [`**`[1, 3]`**`], \"path\": null}`\r\n\r\nShould `SourceLocation` be changed to something that serializes correctly? Or would it make more sense to convert it to dict in `format_errors`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/59", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/59/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/59/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/59", "id": 493250349, "node_id": "MDU6SXNzdWU0OTMyNTAzNDk=", "number": 59, "title": "Custom scalars using numpy arrays fail is_nullish() test", "user": {"login": "thomascobb", "id": 7705060, "node_id": "MDQ6VXNlcjc3MDUwNjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7705060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomascobb", "html_url": "https://github.com/thomascobb", "followers_url": "https://api.github.com/users/thomascobb/followers", "following_url": "https://api.github.com/users/thomascobb/following{/other_user}", "gists_url": "https://api.github.com/users/thomascobb/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomascobb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomascobb/subscriptions", "organizations_url": "https://api.github.com/users/thomascobb/orgs", "repos_url": "https://api.github.com/users/thomascobb/repos", "events_url": "https://api.github.com/users/thomascobb/events{/privacy}", "received_events_url": "https://api.github.com/users/thomascobb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-13T10:25:24Z", "updated_at": "2019-09-13T22:03:47Z", "closed_at": "2019-09-13T21:15:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a custom scalar type for a numpy array:\r\n```python\r\ndef serialize_ndarray(value):\r\n    return dict(\r\n        numberType=value.dtype.name.upper(),\r\n        base64=base64.b64encode(value).decode()\r\n    )\r\n\r\nndarray_type = GraphQLScalarType(\"NDArray\", serialize=serialize_ndarray)\r\n```\r\n`is_nullish()` does an inequality test on values to work out if they are NaN:\r\n```python\r\ndef is_nullish(value: Any) -> bool:\r\n    \"\"\"Return true if a value is null, undefined, or NaN.\"\"\"\r\n    return value is None or value is INVALID or value != value\r\n```\r\nUnfortunately, numpy arrays break this because they override `__eq__` to return a pointwise equality array rather than a boolean.\r\n\r\nThe comment for `is_nullish()` suggests that `value != value` is checking for NaN. If this is the case we could replace it with:\r\n```python\r\ndef is_nan(value):\r\n    \"\"\"Return true if a value is NaN\"\"\"\r\n    try:\r\n        return math.isnan(value)\r\n    except TypeError:\r\n        return False\r\n\r\ndef is_nullish(value: Any) -> bool:\r\n    \"\"\"Return true if a value is null, undefined, or NaN.\"\"\"\r\n    return value is None or value is INVALID or is_nan(value)\r\n```\r\nWould this be acceptable? I can provide a PR if it is.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/58", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/58/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/58/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/58", "id": 492042759, "node_id": "MDU6SXNzdWU0OTIwNDI3NTk=", "number": 58, "title": "Translatable descriptions", "user": {"login": "ktosiek", "id": 278013, "node_id": "MDQ6VXNlcjI3ODAxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/278013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktosiek", "html_url": "https://github.com/ktosiek", "followers_url": "https://api.github.com/users/ktosiek/followers", "following_url": "https://api.github.com/users/ktosiek/following{/other_user}", "gists_url": "https://api.github.com/users/ktosiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktosiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktosiek/subscriptions", "organizations_url": "https://api.github.com/users/ktosiek/orgs", "repos_url": "https://api.github.com/users/ktosiek/repos", "events_url": "https://api.github.com/users/ktosiek/events{/privacy}", "received_events_url": "https://api.github.com/users/ktosiek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1236952898, "node_id": "MDU6TGFiZWwxMjM2OTUyODk4", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/discussion", "name": "discussion", "color": "7057ff", "default": false, "description": "Needs more discussion"}, {"id": 1346684043, "node_id": "MDU6TGFiZWwxMzQ2Njg0MDQz", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/investigate", "name": "investigate", "color": "fbca04", "default": false, "description": "Needs investigaton or experimentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-11T06:28:09Z", "updated_at": "2019-09-14T11:57:14Z", "closed_at": "2019-09-14T11:57:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "graphene-django 2 passes a lazy translated string as `description` if that's what's used on the model. This way the descriptions can be translated to the language current at the introspection time.\r\n\r\nBut graphql-core 3 asserts the description is an `str`, which forces choosing the translation at the definition time.\r\nI couldn't find such type check in GraphQL.js - they just declare descriptions as strings, but don't check that (at least not in `definition.js`).\r\n\r\nWould it make sense to loosen that restriction a bit? Or even drop the type check, and add an `str()` around descriptions in introspection?\r\n\r\nI see similar issue would apply to `deprecation_reason` - they are both human-readable text.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/57", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/57/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/57/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/57", "id": 491569857, "node_id": "MDU6SXNzdWU0OTE1Njk4NTc=", "number": 57, "title": "asyncio example in readme raises TypeError", "user": {"login": "olirice", "id": 12958657, "node_id": "MDQ6VXNlcjEyOTU4NjU3", "avatar_url": "https://avatars3.githubusercontent.com/u/12958657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olirice", "html_url": "https://github.com/olirice", "followers_url": "https://api.github.com/users/olirice/followers", "following_url": "https://api.github.com/users/olirice/following{/other_user}", "gists_url": "https://api.github.com/users/olirice/gists{/gist_id}", "starred_url": "https://api.github.com/users/olirice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olirice/subscriptions", "organizations_url": "https://api.github.com/users/olirice/orgs", "repos_url": "https://api.github.com/users/olirice/repos", "events_url": "https://api.github.com/users/olirice/events{/privacy}", "received_events_url": "https://api.github.com/users/olirice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-10T09:53:59Z", "updated_at": "2019-09-10T10:02:44Z", "closed_at": "2019-09-10T10:02:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "The asyncio example in README.md raises \r\n```\r\nTypeError: __init__() got an unexpected keyword argument 'resolve'\r\n```\r\n\r\nHere is the example:\r\n```\r\nimport asyncio\r\nfrom graphql import (\r\n    graphql, GraphQLSchema, GraphQLObjectType, GraphQLField, GraphQLString)\r\n\r\n\r\nasync def resolve_hello(obj, info):\r\n    await asyncio.sleep(3)\r\n    return 'world'\r\n\r\nschema = GraphQLSchema(\r\n    query=GraphQLObjectType(\r\n        name='RootQueryType',\r\n        fields={\r\n            'hello': GraphQLField(\r\n                GraphQLString,\r\n                resolve=resolve_hello)\r\n        }))\r\n\r\n\r\nasync def main():\r\n    query = '{ hello }'\r\n    print('Fetching the result...')\r\n    result = await graphql(schema, query)\r\n    print(result)\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\ntry:\r\n    loop.run_until_complete(main())\r\nfinally:\r\n    loop.close()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/54", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/54/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/54/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/54", "id": 488983399, "node_id": "MDU6SXNzdWU0ODg5ODMzOTk=", "number": 54, "title": "Performance of isawaitable", "user": {"login": "ktosiek", "id": 278013, "node_id": "MDQ6VXNlcjI3ODAxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/278013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktosiek", "html_url": "https://github.com/ktosiek", "followers_url": "https://api.github.com/users/ktosiek/followers", "following_url": "https://api.github.com/users/ktosiek/following{/other_user}", "gists_url": "https://api.github.com/users/ktosiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktosiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktosiek/subscriptions", "organizations_url": "https://api.github.com/users/ktosiek/orgs", "repos_url": "https://api.github.com/users/ktosiek/repos", "events_url": "https://api.github.com/users/ktosiek/events{/privacy}", "received_events_url": "https://api.github.com/users/ktosiek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1346680811, "node_id": "MDU6TGFiZWwxMzQ2NjgwODEx", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/optimization", "name": "optimization", "color": "5ebeff", "default": false, "description": "Code optimizations and performance issues"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/8", "html_url": "https://github.com/graphql-python/graphql-core/milestone/8", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/8/labels", "id": 4659413, "node_id": "MDk6TWlsZXN0b25lNDY1OTQxMw==", "number": 8, "title": "v3.1", "description": "", "creator": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "open", "created_at": "2019-09-14T19:54:30Z", "updated_at": "2020-03-22T17:14:25Z", "due_on": null, "closed_at": null}, "comments": 27, "created_at": "2019-09-04T07:12:13Z", "updated_at": "2020-04-27T09:23:36Z", "closed_at": "2020-03-22T17:14:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've run a very simplistic benchmark, just returning a long list of single-field objects.\r\nIt seems graphql-core-next is 2.5x slower than graphql-core: https://gist.github.com/ktosiek/849e8c7de8852c2df1df5af8ac193287\r\n\r\nLooking at flamegraphs, I see isawaitable is used **a lot**, and it's a pretty slow function. Would it be possible to pass raw results around more? It seems resolve_field_value_or_error and complete_value_catching_error are the main offenders here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/53", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/53/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/53/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/53", "id": 488847678, "node_id": "MDU6SXNzdWU0ODg4NDc2Nzg=", "number": 53, "title": "ETA for 3.0.0 release", "user": {"login": "pmantica1", "id": 22776930, "node_id": "MDQ6VXNlcjIyNzc2OTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/22776930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmantica1", "html_url": "https://github.com/pmantica1", "followers_url": "https://api.github.com/users/pmantica1/followers", "following_url": "https://api.github.com/users/pmantica1/following{/other_user}", "gists_url": "https://api.github.com/users/pmantica1/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmantica1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmantica1/subscriptions", "organizations_url": "https://api.github.com/users/pmantica1/orgs", "repos_url": "https://api.github.com/users/pmantica1/repos", "events_url": "https://api.github.com/users/pmantica1/events{/privacy}", "received_events_url": "https://api.github.com/users/pmantica1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1556221353, "node_id": "MDU6TGFiZWwxNTU2MjIxMzUz", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/planning", "name": "planning", "color": "e87443", "default": false, "description": "Road map and planning future changes"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/6", "html_url": "https://github.com/graphql-python/graphql-core/milestone/6", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/6/labels", "id": 4659410, "node_id": "MDk6TWlsZXN0b25lNDY1OTQxMA==", "number": 6, "title": "v3.0", "description": "", "creator": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "open", "created_at": "2019-09-14T19:53:57Z", "updated_at": "2019-11-30T21:57:18Z", "due_on": null, "closed_at": null}, "comments": 8, "created_at": "2019-09-03T22:09:00Z", "updated_at": "2019-11-30T21:57:18Z", "closed_at": "2019-11-30T21:57:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for the hard work porting the reference GraphQL implementation to python3. We are hoping to start using this library once the stable 3.0.0 version is released. Do you have a rough idea of when this will be?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/52", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/52/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/52/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/52", "id": 488780900, "node_id": "MDU6SXNzdWU0ODg3ODA5MDA=", "number": 52, "title": "Get schema data for query fields?", "user": {"login": "astronouth7303", "id": 401438, "node_id": "MDQ6VXNlcjQwMTQzOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/401438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astronouth7303", "html_url": "https://github.com/astronouth7303", "followers_url": "https://api.github.com/users/astronouth7303/followers", "following_url": "https://api.github.com/users/astronouth7303/following{/other_user}", "gists_url": "https://api.github.com/users/astronouth7303/gists{/gist_id}", "starred_url": "https://api.github.com/users/astronouth7303/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astronouth7303/subscriptions", "organizations_url": "https://api.github.com/users/astronouth7303/orgs", "repos_url": "https://api.github.com/users/astronouth7303/repos", "events_url": "https://api.github.com/users/astronouth7303/events{/privacy}", "received_events_url": "https://api.github.com/users/astronouth7303/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-03T19:26:42Z", "updated_at": "2019-09-04T20:02:40Z", "closed_at": "2019-09-04T20:02:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a standard way to get the schema information (type, directives) for a query node/leaf?\r\n\r\nConcretely, I'm looking at GitHub's GraphQL, and there's two things I would like to be able to do:\r\n\r\n* Handle custom scalars: GitHub defines a handful of custom scalars (a few date/time types, a few URL types, a structured-data blob)\r\n    * Serialization: Look at the types in the query variables, traverse, find serializers for the scalars, apply to data\r\n    * Deserialization: Look at types in the query body, traverse, find deserializers for the scalars, apply to data\r\n* Directives: Github defines an `@preview()` with data that needs to be conveyed in the HTTP headers. I would like to be able to examine a query, get the directives, and pull out the appropriate information\r\n\r\nI think the thing I would like is a utility to walk a query (field-by-field) and get the type information for that field.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/51", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/51/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/51/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/51", "id": 487138696, "node_id": "MDU6SXNzdWU0ODcxMzg2OTY=", "number": 51, "title": "Scalar variables failing validation", "user": {"login": "astronouth7303", "id": 401438, "node_id": "MDQ6VXNlcjQwMTQzOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/401438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astronouth7303", "html_url": "https://github.com/astronouth7303", "followers_url": "https://api.github.com/users/astronouth7303/followers", "following_url": "https://api.github.com/users/astronouth7303/following{/other_user}", "gists_url": "https://api.github.com/users/astronouth7303/gists{/gist_id}", "starred_url": "https://api.github.com/users/astronouth7303/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astronouth7303/subscriptions", "organizations_url": "https://api.github.com/users/astronouth7303/orgs", "repos_url": "https://api.github.com/users/astronouth7303/repos", "events_url": "https://api.github.com/users/astronouth7303/events{/privacy}", "received_events_url": "https://api.github.com/users/astronouth7303/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-29T19:34:30Z", "updated_at": "2019-09-14T19:43:09Z", "closed_at": "2019-09-14T19:43:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I validate [these queries](https://github.com/go-build-it/gqlmod/blob/master/testmod/queries.gql) against [this schema](https://github.com/go-build-it/gqlmod/blob/master/gqlmod_starwars/schema.py) (via [this code](https://github.com/go-build-it/gqlmod/blob/6fe690f7ffb0634f4522ded57be8f40b21205c52/gqlmod/importer.py#L94-L103)), I'm getting this error:\r\n\r\n```\r\ngraphql.error.graphql_error.GraphQLError: Unknown type 'Int'.\r\n\r\n/home/astraluma/code/gobuildit/gqlmod/testmod/queries.gql:15:30\r\n14 | \r\n15 | query HeroComparison($first: Int = 3) {\r\n   |                              ^\r\n16 |   leftComparison: hero(episode: EMPIRE) {\r\n```\r\n\r\nThe results of `pip freeze`:\r\n\r\n```\r\nastor==0.8.0\r\n-e git+git@github.com:go-build-it/gqlmod.git@6fe690f7ffb0634f4522ded57be8f40b21205c52#egg=gqlmod\r\ngraphql-core==3.0.0a2\r\nimport-x==0.1.0\r\npkg-resources==0.0.0\r\n```\r\n\r\nI'm pretty new to GraphQL, but as I understand it, `Int` is a builtin scalar that should always be available?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/49", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/49/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/49/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/49", "id": 486196773, "node_id": "MDU6SXNzdWU0ODYxOTY3NzM=", "number": 49, "title": "Installation instructions on README for pipenv fails", "user": {"login": "CorrosiveKid", "id": 1885122, "node_id": "MDQ6VXNlcjE4ODUxMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1885122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CorrosiveKid", "html_url": "https://github.com/CorrosiveKid", "followers_url": "https://api.github.com/users/CorrosiveKid/followers", "following_url": "https://api.github.com/users/CorrosiveKid/following{/other_user}", "gists_url": "https://api.github.com/users/CorrosiveKid/gists{/gist_id}", "starred_url": "https://api.github.com/users/CorrosiveKid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CorrosiveKid/subscriptions", "organizations_url": "https://api.github.com/users/CorrosiveKid/orgs", "repos_url": "https://api.github.com/users/CorrosiveKid/repos", "events_url": "https://api.github.com/users/CorrosiveKid/events{/privacy}", "received_events_url": "https://api.github.com/users/CorrosiveKid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-28T07:05:06Z", "updated_at": "2019-08-28T09:40:43Z", "closed_at": "2019-08-28T09:40:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Installation instructions the README for pipenv fails with error `Could not find a version that matches graphql-core>=3` because pipenv is ignoring pre-release versions.\r\n\r\n```\r\nERROR: Could not find a version that matches graphql-core>=3\r\nTried: 0.4.9, 0.4.11, 0.4.12, 0.4.12.1, 0.4.13, 0.4.14, 0.4.15, 0.4.16, 0.4.17, 0.4.18, 0.5, 0.5.1, 0.5.2, 0.5.3, 1.0, 1.0.1, 1.1, 2.0, 2.0, 2.1, 2.1, 2.2, 2.2, 2.2.1, 2.2.1\r\nSkipped pre-versions: 0.1a0, 0.1a1, 0.1a2, 0.1a3, 0.1a4, 0.4.7b0, 0.4.7b1, 0.4.7b2, 0.5b1, 0.5b2, 0.5b3, 1.0.dev20160814231515, 1.0.dev20160822075425, 1.0.dev20160823054952, 1.0.dev20160909030348, 1.0.dev20160909040033, 1.0.dev20160920065529, 1.2.dev20170724044604, 2.0.dev20170801041408, 2.0.dev20170801041408, 2.0.dev20170801051721, 2.0.dev20170801051721, 2.0.dev20171009101843, 2.0.dev20171009101843, 2.1rc0, 2.1rc0, 2.1rc1, 2.1rc1, 2.1rc2, 2.1rc2, 2.1rc3, 2.1rc3, 3.0.0a0, 3.0.0a0, 3.0.0a1, 3.0.0a1, 3.0.0a2, 3.0.0a2\r\n```\r\n\r\nCould be fixed by specifying the LT on the pipenv installation command like so:\r\n`pipenv install \"graphql-core>=3<4\"`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/45", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/45/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/45/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/45", "id": 470574804, "node_id": "MDU6SXNzdWU0NzA1NzQ4MDQ=", "number": 45, "title": "Reconsider hash method of AST nodes", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-07-19T21:49:41Z", "updated_at": "2019-08-01T21:28:42Z", "closed_at": "2019-08-01T21:28:42Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The nodes in \"language.ast\" should probably not be hashable, because they are mutable and currently equal values have different hashes (see also graphql-python/graphql-core/issues/252).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/43", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/43/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/43/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/43", "id": 468003332, "node_id": "MDU6SXNzdWU0NjgwMDMzMzI=", "number": 43, "title": "Extend schema crashes on unbound methods", "user": {"login": "delyanr", "id": 22347954, "node_id": "MDQ6VXNlcjIyMzQ3OTU0", "avatar_url": "https://avatars0.githubusercontent.com/u/22347954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/delyanr", "html_url": "https://github.com/delyanr", "followers_url": "https://api.github.com/users/delyanr/followers", "following_url": "https://api.github.com/users/delyanr/following{/other_user}", "gists_url": "https://api.github.com/users/delyanr/gists{/gist_id}", "starred_url": "https://api.github.com/users/delyanr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/delyanr/subscriptions", "organizations_url": "https://api.github.com/users/delyanr/orgs", "repos_url": "https://api.github.com/users/delyanr/repos", "events_url": "https://api.github.com/users/delyanr/events{/privacy}", "received_events_url": "https://api.github.com/users/delyanr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-15T08:35:31Z", "updated_at": "2019-07-17T19:01:17Z", "closed_at": "2019-07-17T08:31:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\n**Context**: Windows 10, `ariadne==0.5`, `graphql-core-next==1.1.0`\r\n\r\nRecently upgraded to the latest version of `graphql-core-next`, and I'm getting the following exception when using `extend_schema`:\r\n\r\n```\r\n  File \"C:\\Anaconda3\\envs\\structor\\lib\\site-packages\\graphql\\utilities\\extend_schema.py\", line 335, in extend_schema\r\n    type_map[existing_type_name] = extend_named_type(existing_type)\r\n  File \"C:\\Anaconda3\\envs\\structor\\lib\\site-packages\\graphql\\utilities\\extend_schema.py\", line 150, in extend_named_type\r\n    return extend_scalar_type(type_)\r\n  File \"C:\\Anaconda3\\envs\\structor\\lib\\site-packages\\graphql\\utilities\\extend_schema.py\", line 225, in extend_scalar_type\r\n    kwargs = type_.to_kwargs()\r\n  File \"C:\\Anaconda3\\envs\\structor\\lib\\site-packages\\graphql\\type\\definition.py\", line 397, in to_kwargs\r\n    if getattr(self.parse_literal, \"__func__\")\r\nAttributeError: 'function' object has no attribute '__func__'\r\n```\r\n\r\nThis new version tries to get the `__func__` attribute of the literal parser for a custom scalar, which assumes that the parser is a bound method. There are many libraries, incl. `ariande`, that attach such parsers (and resolvers) after the scalars have been initialised. Therefore, these newly attached methods are no longer bound. I see no reason for this constraint, so could you please fix?\r\n\r\nMany thanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/42", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/42/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/42/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/42", "id": 462355875, "node_id": "MDU6SXNzdWU0NjIzNTU4NzU=", "number": 42, "title": "Support \"container_type\" for input object types", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1346683119, "node_id": "MDU6TGFiZWwxMzQ2NjgzMTE5", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/feature", "name": "feature", "color": "5ebeff", "default": false, "description": "Feature request"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-06-30T01:12:44Z", "updated_at": "2019-06-30T13:22:02Z", "closed_at": "2019-06-30T13:22:02Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "GraphQL-Core supports a `containter_type` callable for input object types which is used for implementing the `container` feature of Graphene input object types.\r\n\r\nGraphQL-Core-Next should support a similar functionality that can be used by Graphene.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/41", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/41/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/41/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/41", "id": 462355766, "node_id": "MDU6SXNzdWU0NjIzNTU3NjY=", "number": 41, "title": "Support \"out_name\" in input types", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1346683119, "node_id": "MDU6TGFiZWwxMzQ2NjgzMTE5", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/feature", "name": "feature", "color": "5ebeff", "default": false, "description": "Feature request"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-06-30T01:10:34Z", "updated_at": "2019-09-04T22:03:36Z", "closed_at": "2019-06-30T19:34:53Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "GraphQL-Core supports an `out_name` for input types which is used by Graphene for passing parameters with transformed names to Python (because Python likes snake_case instead of camelCase).\r\n\r\nGraphQL-Core-Next should support a similar functionality that can be used by Graphene.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/39", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/39/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/39/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/39", "id": 457890356, "node_id": "MDU6SXNzdWU0NTc4OTAzNTY=", "number": 39, "title": "Trailing comments in query causes \"string index out of range\"", "user": {"login": "andrewspode", "id": 3798527, "node_id": "MDQ6VXNlcjM3OTg1Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3798527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewspode", "html_url": "https://github.com/andrewspode", "followers_url": "https://api.github.com/users/andrewspode/followers", "following_url": "https://api.github.com/users/andrewspode/following{/other_user}", "gists_url": "https://api.github.com/users/andrewspode/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewspode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewspode/subscriptions", "organizations_url": "https://api.github.com/users/andrewspode/orgs", "repos_url": "https://api.github.com/users/andrewspode/repos", "events_url": "https://api.github.com/users/andrewspode/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewspode/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1011874159, "node_id": "MDU6TGFiZWwxMDExODc0MTU5", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-06-19T09:00:04Z", "updated_at": "2019-07-06T13:07:20Z", "closed_at": "2019-07-06T13:07:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using graphiQL for testing my API where it is fairly common practice to comment out a query and write a new one.\r\n\r\n```\r\n{info}\r\n```\r\n\r\nWill run fine.\r\n\r\n```\r\n{info}\r\n#\r\n```\r\n\r\nWill fail with \"string index out of range\" on line 268 of lexer.py (char=body[position])\r\n\r\nI could be wrong - but shouldn't that be a >= rather than >?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/37", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/37/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/37/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/37", "id": 456622522, "node_id": "MDU6SXNzdWU0NTY2MjI1MjI=", "number": 37, "title": "The root_value of ExecutionContext.execute_operation should not be None", "user": {"login": "ethe", "id": 12211036, "node_id": "MDQ6VXNlcjEyMjExMDM2", "avatar_url": "https://avatars0.githubusercontent.com/u/12211036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethe", "html_url": "https://github.com/ethe", "followers_url": "https://api.github.com/users/ethe/followers", "following_url": "https://api.github.com/users/ethe/following{/other_user}", "gists_url": "https://api.github.com/users/ethe/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethe/subscriptions", "organizations_url": "https://api.github.com/users/ethe/orgs", "repos_url": "https://api.github.com/users/ethe/repos", "events_url": "https://api.github.com/users/ethe/events{/privacy}", "received_events_url": "https://api.github.com/users/ethe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-06-16T09:40:57Z", "updated_at": "2019-07-17T02:50:05Z", "closed_at": "2019-07-06T12:03:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Usually I want to use the custom method binded to `GraphQLObjectType`, such as:\r\n```python\r\n# use strawberry for example\r\nimport strawberry\r\n\r\n\r\n@strawberry.type\r\nclass User:\r\n    name: str\r\n    age: int\r\n\r\n\r\n@strawberry.type\r\nclass Query:\r\n    @strawberry.field\r\n    def user(self, info) -> User:\r\n        return self.get_user()\r\n\r\n    def get_user(self):\r\n        return User(name=\"Patrick\", age=100)\r\n\r\n\r\nschema = strawberry.Schema(query=Query)\r\n```\r\n\r\nUnfortunately, the `self` would always be `None` cause the `root_value` in `ExecutionContext.execute_operation` would be setted to `None` if it is the root node Query. I think modifying it as below is fine:\r\n\r\n```python\r\ndef execute_operation(\r\n        self, operation: OperationDefinitionNode, root_value: Any\r\n    ) -> Optional[AwaitableOrValue[Any]]:\r\n        \"\"\"Execute an operation.\r\n\r\n        Implements the \"Evaluating operations\" section of the spec.\r\n        \"\"\"\r\n        type_ = get_operation_root_type(self.schema, operation)\r\n        if not roo_value:\r\n            root_value = type_\r\n```\r\n\r\nThen we can use the custom method of `GraphQLObjectType`. And it not leads any problem I think. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/36", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/36/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/36/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/36", "id": 453010080, "node_id": "MDU6SXNzdWU0NTMwMTAwODA=", "number": 36, "title": "No line numbers in errors", "user": {"login": "andrewspode", "id": 3798527, "node_id": "MDQ6VXNlcjM3OTg1Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3798527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewspode", "html_url": "https://github.com/andrewspode", "followers_url": "https://api.github.com/users/andrewspode/followers", "following_url": "https://api.github.com/users/andrewspode/following{/other_user}", "gists_url": "https://api.github.com/users/andrewspode/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewspode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewspode/subscriptions", "organizations_url": "https://api.github.com/users/andrewspode/orgs", "repos_url": "https://api.github.com/users/andrewspode/repos", "events_url": "https://api.github.com/users/andrewspode/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewspode/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-06-06T12:45:04Z", "updated_at": "2019-11-15T16:37:20Z", "closed_at": "2019-06-18T08:57:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see this issue here complaining of lack of traceback, apparently fixed in 1.0.2\r\nhttps://github.com/graphql-python/graphql-core-next/issues/23\r\n\r\nMy experience on 1.0.5 is that I only get a text representation of the error, and no line number of where the problem lies, which makes debugging very hard.\r\n\r\nname 'error' is not defined\r\n\r\nGraphQL request (32:2)\r\n31: \r\n32: {info}\r\n\r\nI only get the place in the query that it's failed - which doesn't help enough.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/34", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/34/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/34/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/34", "id": 450109467, "node_id": "MDU6SXNzdWU0NTAxMDk0Njc=", "number": 34, "title": "GraphQLError is unhashable", "user": {"login": "andrew-humu", "id": 43152655, "node_id": "MDQ6VXNlcjQzMTUyNjU1", "avatar_url": "https://avatars3.githubusercontent.com/u/43152655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrew-humu", "html_url": "https://github.com/andrew-humu", "followers_url": "https://api.github.com/users/andrew-humu/followers", "following_url": "https://api.github.com/users/andrew-humu/following{/other_user}", "gists_url": "https://api.github.com/users/andrew-humu/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrew-humu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrew-humu/subscriptions", "organizations_url": "https://api.github.com/users/andrew-humu/orgs", "repos_url": "https://api.github.com/users/andrew-humu/repos", "events_url": "https://api.github.com/users/andrew-humu/events{/privacy}", "received_events_url": "https://api.github.com/users/andrew-humu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1011874159, "node_id": "MDU6TGFiZWwxMDExODc0MTU5", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-05-30T03:11:20Z", "updated_at": "2019-05-31T22:40:44Z", "closed_at": "2019-05-31T22:34:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems that the `logging` library in python assumes that exceptions are hashable, in order to be logged.  It'd be great if we could treat GraphQL errors the same way as other builtin exceptions.\r\n\r\nSee also, a similar issue in the `schematics` project:\r\n\r\nhttps://github.com/schematics/schematics/issues/452", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/33", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/33/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/33/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/33", "id": 448506700, "node_id": "MDU6SXNzdWU0NDg1MDY3MDA=", "number": 33, "title": "Implementing logic for a custom Directive - SchemaDirectiveVisitor?", "user": {"login": "dvndrsn", "id": 4897035, "node_id": "MDQ6VXNlcjQ4OTcwMzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4897035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvndrsn", "html_url": "https://github.com/dvndrsn", "followers_url": "https://api.github.com/users/dvndrsn/followers", "following_url": "https://api.github.com/users/dvndrsn/following{/other_user}", "gists_url": "https://api.github.com/users/dvndrsn/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvndrsn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvndrsn/subscriptions", "organizations_url": "https://api.github.com/users/dvndrsn/orgs", "repos_url": "https://api.github.com/users/dvndrsn/repos", "events_url": "https://api.github.com/users/dvndrsn/events{/privacy}", "received_events_url": "https://api.github.com/users/dvndrsn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-25T22:04:03Z", "updated_at": "2019-05-28T22:18:05Z", "closed_at": "2019-05-25T22:32:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there anything in `graphql-core-next` like the schema directive visitor pattern mentioned in the `graphql-tools` documentation? How does one implement custom logic for a Directive?\r\n\r\nApollo docs:\r\nhttps://www.apollographql.com/docs/graphql-tools/schema-directives#implementing-schema-directives\r\n\r\nCode in question:\r\nhttps://github.com/apollographql/graphql-tools/blob/wip-schema-directives/src/schemaVisitor.ts#L459", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/31", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/31/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/31/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/31", "id": 442843038, "node_id": "MDU6SXNzdWU0NDI4NDMwMzg=", "number": 31, "title": "directives as tuple?", "user": {"login": "sweetmangosweet", "id": 11001580, "node_id": "MDQ6VXNlcjExMDAxNTgw", "avatar_url": "https://avatars3.githubusercontent.com/u/11001580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sweetmangosweet", "html_url": "https://github.com/sweetmangosweet", "followers_url": "https://api.github.com/users/sweetmangosweet/followers", "following_url": "https://api.github.com/users/sweetmangosweet/following{/other_user}", "gists_url": "https://api.github.com/users/sweetmangosweet/gists{/gist_id}", "starred_url": "https://api.github.com/users/sweetmangosweet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sweetmangosweet/subscriptions", "organizations_url": "https://api.github.com/users/sweetmangosweet/orgs", "repos_url": "https://api.github.com/users/sweetmangosweet/repos", "events_url": "https://api.github.com/users/sweetmangosweet/events{/privacy}", "received_events_url": "https://api.github.com/users/sweetmangosweet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-10T18:28:59Z", "updated_at": "2019-05-16T16:06:01Z", "closed_at": "2019-05-16T16:06:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/graphql-python/graphql-core-next/blob/b0fa058bacf3913d0af9a75289e241f343c3842a/graphql/type/directives.py#L169\r\n\r\nHi, I'm new to GraphQL and have a quick question. I want to add a custom directive to the default directives including **skip** and **included**.\r\n\r\n`schema = GraphQLSchema(query, directives=specified_directives + [custom_directives])`\r\n\r\nHowever, the following TypeError occurs:\r\n`can only concatenate tuple (not \"list\") to tuple`\r\n\r\n\r\nI noticed that **graph-core** returns a list of these predefined directives, but **graph-core-next** returns a tuple. Is there a reason for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/30", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/30/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/30/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/30", "id": 441255469, "node_id": "MDU6SXNzdWU0NDEyNTU0Njk=", "number": 30, "title": "Exceptions in subscribe() are not handled by executor", "user": {"login": "rafalp", "id": 750553, "node_id": "MDQ6VXNlcjc1MDU1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/750553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafalp", "html_url": "https://github.com/rafalp", "followers_url": "https://api.github.com/users/rafalp/followers", "following_url": "https://api.github.com/users/rafalp/following{/other_user}", "gists_url": "https://api.github.com/users/rafalp/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafalp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafalp/subscriptions", "organizations_url": "https://api.github.com/users/rafalp/orgs", "repos_url": "https://api.github.com/users/rafalp/repos", "events_url": "https://api.github.com/users/rafalp/events{/privacy}", "received_events_url": "https://api.github.com/users/rafalp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1011874166, "node_id": "MDU6TGFiZWwxMDExODc0MTY2", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/wontfix", "name": "wontfix", "color": "cfd3d7", "default": true, "description": "This will not be worked on"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-05-07T14:11:06Z", "updated_at": "2019-07-06T13:10:48Z", "closed_at": "2019-07-06T13:10:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nWhen testing the subscriptions we've noticed that exceptions raised in `subscribe()` are not handled by the query executor, instead they come back up outside of `graphql`, when we are consuming the results to create an HTTP response, with `Task exception was never retrieved` being logged by Python to console.\r\n\r\nQuick fix we did for this was wrapping whole loop in `try/except` and handling those exceptions there, but this has obvious downside of not having `GraphQLError` with path and location.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/29", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/29/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/29/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/29", "id": 438616601, "node_id": "MDU6SXNzdWU0Mzg2MTY2MDE=", "number": 29, "title": "Roadmap/Status update?", "user": {"login": "changeling", "id": 400894, "node_id": "MDQ6VXNlcjQwMDg5NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/400894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changeling", "html_url": "https://github.com/changeling", "followers_url": "https://api.github.com/users/changeling/followers", "following_url": "https://api.github.com/users/changeling/following{/other_user}", "gists_url": "https://api.github.com/users/changeling/gists{/gist_id}", "starred_url": "https://api.github.com/users/changeling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changeling/subscriptions", "organizations_url": "https://api.github.com/users/changeling/orgs", "repos_url": "https://api.github.com/users/changeling/repos", "events_url": "https://api.github.com/users/changeling/events{/privacy}", "received_events_url": "https://api.github.com/users/changeling/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-30T06:10:13Z", "updated_at": "2019-05-02T19:01:44Z", "closed_at": "2019-05-02T19:01:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "What's the status of graphql-core-next vis-a-vis the graphene tools? Is there a Roadmap or other document tracking compatibility with, say, graphene-django?\r\n\r\nOr are they already compatible and I'm missing that in the docs of those tools or graphql-core-next?\r\n\r\nIt would be great if this was addressed prominently in the README. Assuming it isn't already and I'm just flat out missing it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/28", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/28/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/28/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/28", "id": 438477640, "node_id": "MDU6SXNzdWU0Mzg0Nzc2NDA=", "number": 28, "title": "ExecutionResult missing extensions field", "user": {"login": "nikordaris", "id": 3432064, "node_id": "MDQ6VXNlcjM0MzIwNjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3432064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikordaris", "html_url": "https://github.com/nikordaris", "followers_url": "https://api.github.com/users/nikordaris/followers", "following_url": "https://api.github.com/users/nikordaris/following{/other_user}", "gists_url": "https://api.github.com/users/nikordaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikordaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikordaris/subscriptions", "organizations_url": "https://api.github.com/users/nikordaris/orgs", "repos_url": "https://api.github.com/users/nikordaris/repos", "events_url": "https://api.github.com/users/nikordaris/events{/privacy}", "received_events_url": "https://api.github.com/users/nikordaris/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1346684043, "node_id": "MDU6TGFiZWwxMzQ2Njg0MDQz", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/investigate", "name": "investigate", "color": "fbca04", "default": false, "description": "Needs investigaton or experimentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-04-29T19:47:07Z", "updated_at": "2019-05-03T23:44:09Z", "closed_at": "2019-05-03T23:43:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "GraphQL spec section 7.1 describes a 3rd response field called `extensions` that is intended to be used for custom data in addition to payload data and error responses. This is often used for metadata related to the query response such as performance tracing. Apollo GraphQL implements this on their server via an extensions middleware. We should probably follow a similar pattern here but we will need to support passing the extensions data to the client in the core in order to support middleware like that.\r\n\r\nhttps://graphql.github.io/graphql-spec/June2018/#sec-Response-Format\r\n> The response map may also contain an entry with key extensions. This entry, if set, must have a map as its value. This entry is reserved for implementors to extend the protocol however they see fit, and hence there are no additional restrictions on its contents.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/27", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/27/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/27/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/27", "id": 419649921, "node_id": "MDU6SXNzdWU0MTk2NDk5MjE=", "number": 27, "title": "Provide graphql-tools functionality in Python", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1236952898, "node_id": "MDU6TGFiZWwxMjM2OTUyODk4", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/discussion", "name": "discussion", "color": "7057ff", "default": false, "description": "Needs more discussion"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-11T19:43:38Z", "updated_at": "2019-05-02T19:24:08Z", "closed_at": "2019-05-02T19:24:08Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Creating executable schemas from SDL with GraphQL.js/graphql-core-next is possible, but grafting resolvers, custom scalars and enums manually into the schema after creating it with `build_schema` is cumbersome (see e.g. #20) and has a smell of monkey-patching.\r\n\r\nThe `makeExecutableSchema` function of [graphql-tools](https://www.apollographql.com/docs/graphql-tools/) provides a better solution.\r\n\r\nWe should consider porting this functionality to Python as well, either as a separate packare or as a subpackage of graphql-core-next.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/26", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/26/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/26/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/26", "id": 418081755, "node_id": "MDU6SXNzdWU0MTgwODE3NTU=", "number": 26, "title": "mypy seemingly can't find types for this package", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/1", "html_url": "https://github.com/graphql-python/graphql-core/milestone/1", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/1/labels", "id": 4134877, "node_id": "MDk6TWlsZXN0b25lNDEzNDg3Nw==", "number": 1, "title": "v1.0.3", "description": "", "creator": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2019-03-12T20:09:39Z", "updated_at": "2019-09-14T19:51:20Z", "due_on": null, "closed_at": "2019-09-14T19:51:20Z"}, "comments": 4, "created_at": "2019-03-07T01:11:01Z", "updated_at": "2019-05-03T23:23:48Z", "closed_at": "2019-05-03T23:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I attempt to run mypy, I get:\r\n\r\n```\r\nghstack/github_fake.py:1: error: Cannot find module named 'graphql'\r\nghstack/github_fake.py:1: note: See https://mypy.readthedocs.io/en/latest/running_mypy.html#missing-imports\r\n```\r\n\r\nNow, I know that you guys have types... but the mypy docs seem to suggest that you need to do something extra to get mypy to treat the third party package as having types?\r\n\r\nAs a temporary workaround, I've symlinked `graphql` in my local directory to graphql-core-next/graphql and that convinces mypy to check the ytpes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/25", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/25/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/25/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/25", "id": 417984764, "node_id": "MDU6SXNzdWU0MTc5ODQ3NjQ=", "number": 25, "title": "There doesn't seem to be a way to override is_type_of on objects", "user": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars0.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1011874159, "node_id": "MDU6TGFiZWwxMDExODc0MTU5", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/8", "html_url": "https://github.com/graphql-python/graphql-core/milestone/8", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/8/labels", "id": 4659413, "node_id": "MDk6TWlsZXN0b25lNDY1OTQxMw==", "number": 8, "title": "v3.1", "description": "", "creator": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "open", "created_at": "2019-09-14T19:54:30Z", "updated_at": "2020-03-22T17:14:25Z", "due_on": null, "closed_at": null}, "comments": 9, "created_at": "2019-03-06T20:02:59Z", "updated_at": "2020-03-04T17:32:25Z", "closed_at": "2020-03-04T17:32:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my server, I have the following lines: https://github.com/ezyang/ghstack/blob/973ef7b25a71afa8f813cd8107f227938b3413f1/ghstack/github_fake.py#L288\r\n\r\n```\r\nGITHUB_SCHEMA.get_type('Repository').is_type_of = lambda obj, info: isinstance(obj, Repository)  # type: ignore\r\nGITHUB_SCHEMA.get_type('PullRequest').is_type_of = lambda obj, info: isinstance(obj, PullRequest)  # type: ignore\r\n```\r\n\r\nI don't know how to put these on the Repository/PullRequest classes, in the same way resolvers can be put on the appropriate object class and then automatically called. The obvious things (e.g., adding an `is_type_of` method) do not work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/24", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/24/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/24/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/24", "id": 416522493, "node_id": "MDU6SXNzdWU0MTY1MjI0OTM=", "number": 24, "title": "Document difference from graphql-js", "user": {"login": "IvanGoncharov", "id": 8336157, "node_id": "MDQ6VXNlcjgzMzYxNTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8336157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IvanGoncharov", "html_url": "https://github.com/IvanGoncharov", "followers_url": "https://api.github.com/users/IvanGoncharov/followers", "following_url": "https://api.github.com/users/IvanGoncharov/following{/other_user}", "gists_url": "https://api.github.com/users/IvanGoncharov/gists{/gist_id}", "starred_url": "https://api.github.com/users/IvanGoncharov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IvanGoncharov/subscriptions", "organizations_url": "https://api.github.com/users/IvanGoncharov/orgs", "repos_url": "https://api.github.com/users/IvanGoncharov/repos", "events_url": "https://api.github.com/users/IvanGoncharov/events{/privacy}", "received_events_url": "https://api.github.com/users/IvanGoncharov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1256558163, "node_id": "MDU6TGFiZWwxMjU2NTU4MTYz", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/documentation", "name": "documentation", "color": "91ca55", "default": true, "description": "Improvement of docs, docstrings etc."}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/6", "html_url": "https://github.com/graphql-python/graphql-core/milestone/6", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/6/labels", "id": 4659410, "node_id": "MDk6TWlsZXN0b25lNDY1OTQxMA==", "number": 6, "title": "v3.0", "description": "", "creator": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "open", "created_at": "2019-09-14T19:53:57Z", "updated_at": "2019-11-30T21:57:18Z", "due_on": null, "closed_at": null}, "comments": 7, "created_at": "2019-03-03T14:34:48Z", "updated_at": "2019-11-30T20:31:17Z", "closed_at": "2019-11-30T20:31:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "@Cito You doing a great job keeping this lib in sync with `graphql-js`.\r\nAlso big thanks for taking the time to submit PRs back to `graphql-js` \ud83d\udc4d \r\n\r\nI was browsing the source code and notice that you already implemented `middlewares`:\r\nhttps://github.com/graphql-python/graphql-core-next/blob/master/graphql/execution/middleware.py\r\n\r\nWould be great to have a list of such changes so we can figure out is it something Python specific or we should push it into `graphql-js`.\r\n\r\nI also interested if you added any new tests that we can mirror in `graphql-js`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/23", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/23/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/23/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/23", "id": 414183739, "node_id": "MDU6SXNzdWU0MTQxODM3Mzk=", "number": 23, "title": "Exceptions in resolver are caught (no traceback)", "user": {"login": "ceelian", "id": 116299, "node_id": "MDQ6VXNlcjExNjI5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/116299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ceelian", "html_url": "https://github.com/ceelian", "followers_url": "https://api.github.com/users/ceelian/followers", "following_url": "https://api.github.com/users/ceelian/following{/other_user}", "gists_url": "https://api.github.com/users/ceelian/gists{/gist_id}", "starred_url": "https://api.github.com/users/ceelian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ceelian/subscriptions", "organizations_url": "https://api.github.com/users/ceelian/orgs", "repos_url": "https://api.github.com/users/ceelian/repos", "events_url": "https://api.github.com/users/ceelian/events{/privacy}", "received_events_url": "https://api.github.com/users/ceelian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-25T16:12:51Z", "updated_at": "2019-03-10T22:28:39Z", "closed_at": "2019-03-10T22:28:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version:\r\nGraphQL-core-next 1.0.1\r\nPython 3.7.1\r\n\r\n**Current Behaviour:**\r\n\r\nExceptions in resolvers are caught by default and the traceback of the original_error doesn't help debugging.\r\n\r\nTraceback output of `log.exception('', exc_info=result.errors[0].original_error)`\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/graphql/execution/execute.py\", line 664, in complete_value_catching_error\r\n    return_type, field_nodes, info, path, result\r\n  File \"/usr/local/lib/python3.6/site-packages/graphql/execution/execute.py\", line 731, in complete_value\r\n    raise result\r\ngraphql.error.graphql_error.GraphQLError: My exception\r\n```\r\n\r\n**Expected Behaviour:**\r\n\r\n1) There is a flag raise_exception which switches if exceptions are caught or if they are raised out of the library resolver. \r\n\r\n2) The traceback of the original_errors is meaningful: leads to the source line where the exception  occurred.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/22", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/22/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/22/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/22", "id": 411228785, "node_id": "MDU6SXNzdWU0MTEyMjg3ODU=", "number": 22, "title": "Consider changing the packaging tool", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1236952898, "node_id": "MDU6TGFiZWwxMjM2OTUyODk4", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/discussion", "name": "discussion", "color": "7057ff", "default": false, "description": "Needs more discussion"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/1", "html_url": "https://github.com/graphql-python/graphql-core/milestone/1", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/milestones/1/labels", "id": 4134877, "node_id": "MDk6TWlsZXN0b25lNDEzNDg3Nw==", "number": 1, "title": "v1.0.3", "description": "", "creator": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2019-03-12T20:09:39Z", "updated_at": "2019-09-14T19:51:20Z", "due_on": null, "closed_at": "2019-09-14T19:51:20Z"}, "comments": 1, "created_at": "2019-02-17T20:05:29Z", "updated_at": "2019-04-30T22:06:58Z", "closed_at": "2019-04-30T22:06:57Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Instead of pipenv, we may want to use a different packaging tool like flit or poetry, and replace setup.py and pipfile with a pyproject.toml file. The main reason is that while  pipenv is a nice tool, it is actually intended to package apps, not libraries like graphql-core-next.\r\n\r\nWould like to hear thougts and recommendations of others regarding this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/21", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/21/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/21/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/21", "id": 411121549, "node_id": "MDU6SXNzdWU0MTExMjE1NDk=", "number": 21, "title": "Consider package name change", "user": {"login": "danpalmer", "id": 202400, "node_id": "MDQ6VXNlcjIwMjQwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/202400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danpalmer", "html_url": "https://github.com/danpalmer", "followers_url": "https://api.github.com/users/danpalmer/followers", "following_url": "https://api.github.com/users/danpalmer/following{/other_user}", "gists_url": "https://api.github.com/users/danpalmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/danpalmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danpalmer/subscriptions", "organizations_url": "https://api.github.com/users/danpalmer/orgs", "repos_url": "https://api.github.com/users/danpalmer/repos", "events_url": "https://api.github.com/users/danpalmer/events{/privacy}", "received_events_url": "https://api.github.com/users/danpalmer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1236952898, "node_id": "MDU6TGFiZWwxMjM2OTUyODk4", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/discussion", "name": "discussion", "color": "7057ff", "default": false, "description": "Needs more discussion"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2019-02-16T22:28:40Z", "updated_at": "2019-05-02T19:29:18Z", "closed_at": "2019-05-02T19:28:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "This may be controversial, but I'd like to propose changing the name of this package from `graphql` to something like `graphql_next`.\r\n\r\nI'm working on a project that both exposes a GraphQL API, and does complex GraphQL introspection. Exposing an API is most easily done with Graphene, particularly given the packages like `graphene-django`, but it depend on `graphql-core` which as we know is fairly limited. I think it's reasonable to allow for the packages to be installed alongside each other.\r\n\r\n### Why\r\n\r\n- Graphene operating at a higher level of abstraction, and with a developed package ecosystem means there is a need to have both this and `graphql-core` installed alongside each other.\r\n- This package is not API compatible with `graphql-core`.\r\n- PEP 423 suggests that top-level namespacing is about ownership. In this case \"ownership\" is arguably with https://github.com/graphql-python/ \u2013 this would suggest that installing under `graphql_python.next`, or `graphql.next` may be a good approach.\r\n- PEP 423 suggests the following (emphasis mine), with a benefit being that packages do not collide. \"Distribute only one package (or only one module) per project, and _use package (or module) name as project name_.\"\r\n- `graphql-core` is no longer being actively developed. While this may change in the future, it means the maintainers are unlikely to change the name of _that_ package.\r\n- `graphql-core` came first, and it is recommended by PEP 423 that existing package names are not chosen by new packages.\r\n- `graphql-core-next` mostly refers to itself by names along those lines, _not_ by the name \"graphql\". This could be a chance to add consistency, and at the very least would be less confusing for newcomers than finding the package is in fact called \"graphql\".\r\n\r\n### How\r\n\r\nPEP 423 suggests a reasonable series of steps, that don't look like they would required a huge amount of work.\r\n\r\nhttps://www.python.org/dev/peps/pep-0423/#how-to-rename-a-project\r\n\r\n### Notes\r\n\r\nI've referenced PEP 423 here a lot. It should be noted that this PEP has not been accepted, although it has received discussion on the Python-Dev mailing list, doesn't appear to have many people arguing against it (other than for broken links and typos), and has also been featured in conference talks. Above all though, the document reads to me as a summary of how the Python ecosystem _already works_ for the most part, and a distillation of _already accepted practices_ and the reasons for them, rather than a proposed change. For this reason I believe it's a good starting point for discussion.\r\n\r\nI have also suggested several alternative names for the package here. I do not feel strongly about any of them. I think `graphql_core_next`, `graphql_next`, `graphql.core`, or `graphql2`, would all be acceptable names, and I am very happy to leave the decision between these or other new options entirely to the maintainers.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/20", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/20/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/20/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/20", "id": 399632045, "node_id": "MDU6SXNzdWUzOTk2MzIwNDU=", "number": 20, "title": "Provide an obvious way to register custom scalar type implementations", "user": {"login": "itkach", "id": 180849, "node_id": "MDQ6VXNlcjE4MDg0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/180849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itkach", "html_url": "https://github.com/itkach", "followers_url": "https://api.github.com/users/itkach/followers", "following_url": "https://api.github.com/users/itkach/following{/other_user}", "gists_url": "https://api.github.com/users/itkach/gists{/gist_id}", "starred_url": "https://api.github.com/users/itkach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itkach/subscriptions", "organizations_url": "https://api.github.com/users/itkach/orgs", "repos_url": "https://api.github.com/users/itkach/repos", "events_url": "https://api.github.com/users/itkach/events{/privacy}", "received_events_url": "https://api.github.com/users/itkach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-16T03:27:14Z", "updated_at": "2019-03-11T19:54:30Z", "closed_at": "2019-03-10T21:39:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was following \"create schema from SDL\" approach in https://cito.github.io/blog/shakespeare-with-graphql/ and wanted to use custom scalar types. Looks like in GraphQL.js custom scalar type implementation can be set by simply assigning in type map (https://stackoverflow.com/questions/47824603/graphql-custom-scalar-definition-without-graphql-tools), so equivalent here would be something like this\r\n```python\r\nschema_src = \"\"\"\r\nscalar DateTime\r\n...\r\n\"\"\"\r\nschema = build_schema(schema_src)\r\nschema.type_map[\"DateTime] = myscalars.DateTime\r\n```\r\nThis doesn't work though as schema.type_map is not consulted when serializing output types or parsing arguments.  The following workaround using `extend_schema` seems to produce the desired effect of assigning custom scalar type implementation to a scalar name declared in schema and having it used when serializing and parsing:\r\n\r\n```python\r\nimport typing\r\nimport graphql.language\r\nfrom graphql import GraphQLScalarType\r\nfrom graphql import GraphQLSchema\r\nfrom graphql.utilities import extend_schema\r\n\r\ndef register_scalar_types(schema: GraphQLSchema, types: typing.List[GraphQLScalarType]):\r\n    for scalar_type in types:\r\n        schema.type_map[scalar_type.name] = scalar_type\r\n\r\n    #using a name that already exists in the schema is an error\r\n    #so need to make something up\r\n    dummy_scalar_name = \"_extension_dummy\"\r\n    extended_schema = extend_schema(\r\n        schema, graphql.language.parse(\"scalar %s\" % dummy_scalar_name)\r\n    )\r\n    #this scalar we extended schema with is not used though\r\n    del extended_schema.type_map[dummy_scalar_name]\r\n    return extended_schema\r\n```\r\nand then use it like this:\r\n```python\r\nschema = register_scalar_types(schema, [myscalars.DateTime])\r\n```\r\n\r\nSurely this is a hack and there has to be a better way?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/19", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/19/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/19/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/19", "id": 393635802, "node_id": "MDU6SXNzdWUzOTM2MzU4MDI=", "number": 19, "title": "Some type import paths deprecated in 3.7", "user": {"login": "zhammer", "id": 6956487, "node_id": "MDQ6VXNlcjY5NTY0ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6956487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhammer", "html_url": "https://github.com/zhammer", "followers_url": "https://api.github.com/users/zhammer/followers", "following_url": "https://api.github.com/users/zhammer/following{/other_user}", "gists_url": "https://api.github.com/users/zhammer/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhammer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhammer/subscriptions", "organizations_url": "https://api.github.com/users/zhammer/orgs", "repos_url": "https://api.github.com/users/zhammer/repos", "events_url": "https://api.github.com/users/zhammer/events{/privacy}", "received_events_url": "https://api.github.com/users/zhammer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-12-22T02:34:43Z", "updated_at": "2018-12-28T15:43:47Z", "closed_at": "2018-12-28T15:43:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "when running pytest with warnings\r\n```\r\n~~~/lib/python3.7/site-packages/promise/promise_list.py:2\r\n  ~~~/lib/python3.7/site-packages/promise/promise_list.py:2: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import Iterable\r\n\r\n~~~/lib/python3.7/site-packages/graphql/type/directives.py:55\r\n  ~~~/lib/python3.7/site-packages/graphql/type/directives.py:55: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    args, collections.Mapping\r\n\r\n~~~/lib/python3.7/site-packages/graphql/type/typemap.py:1\r\n  ~~~/lib/python3.7/site-packages/graphql/type/typemap.py:1: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import OrderedDict, Sequence, defaultdict\r\n\r\n~~~/lib/python3.7/site-packages/graphql_server/__init__.py:2\r\n  ~~~/lib/python3.7/site-packages/graphql_server/__init__.py:2: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import namedtuple, MutableMapping\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/18", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/18/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/18/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/18", "id": 389977674, "node_id": "MDU6SXNzdWUzODk5Nzc2NzQ=", "number": 18, "title": "Empty String as As input variable", "user": {"login": "eMerzh", "id": 177003, "node_id": "MDQ6VXNlcjE3NzAwMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/177003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eMerzh", "html_url": "https://github.com/eMerzh", "followers_url": "https://api.github.com/users/eMerzh/followers", "following_url": "https://api.github.com/users/eMerzh/following{/other_user}", "gists_url": "https://api.github.com/users/eMerzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/eMerzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eMerzh/subscriptions", "organizations_url": "https://api.github.com/users/eMerzh/orgs", "repos_url": "https://api.github.com/users/eMerzh/repos", "events_url": "https://api.github.com/users/eMerzh/events{/privacy}", "received_events_url": "https://api.github.com/users/eMerzh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1011874159, "node_id": "MDU6TGFiZWwxMDExODc0MTU5", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-12-11T22:16:18Z", "updated_at": "2018-12-13T23:55:35Z", "closed_at": "2018-12-13T23:55:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nnot sure if it's an issue or a question, but here it is, \r\ni try to make a field with a non nullable String as an input field. And graphql-core-next is converting it to \"None\" which is not what i expected.\r\nIt seems to me, reading the spec, that it's allowed to pass \"\" as string argument and should be considered not null ... did i miss something ?\r\n\r\nhere is a reproducible code to show off the issue : \r\n```python\r\n\r\nimport asyncio\r\nfrom graphql import graphql, parse, build_ast_schema\r\n\r\n\r\nasync def resolve_hello(obj, info, query):\r\n    print(query)\r\n    return f'world ==>{query}<=='\r\n\r\nschema = build_ast_schema(parse(\"\"\"\r\ntype Query {\r\n    hello(query: String!): String\r\n}\r\n\"\"\"))\r\n\r\nschema.get_type(\"Query\").fields[\"hello\"].resolve = resolve_hello\r\n\r\nasync def main():\r\n    query = '{ hello(query: \"\") }'\r\n    print('Fetching the result...')\r\n    result = await graphql(schema, query)\r\n    print(result)\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\ntry:\r\n    loop.run_until_complete(main())\r\nfinally:\r\n    loop.close()\r\n```\r\n\r\nthanks for the help \ud83d\udc4d \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/17", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/17/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/17/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/17", "id": 382528758, "node_id": "MDU6SXNzdWUzODI1Mjg3NTg=", "number": 17, "title": "Does 'to_dict' will be implemented in graphql-core-next?", "user": {"login": "yanghg-basefx", "id": 29534214, "node_id": "MDQ6VXNlcjI5NTM0MjE0", "avatar_url": "https://avatars1.githubusercontent.com/u/29534214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanghg-basefx", "html_url": "https://github.com/yanghg-basefx", "followers_url": "https://api.github.com/users/yanghg-basefx/followers", "following_url": "https://api.github.com/users/yanghg-basefx/following{/other_user}", "gists_url": "https://api.github.com/users/yanghg-basefx/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanghg-basefx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanghg-basefx/subscriptions", "organizations_url": "https://api.github.com/users/yanghg-basefx/orgs", "repos_url": "https://api.github.com/users/yanghg-basefx/repos", "events_url": "https://api.github.com/users/yanghg-basefx/events{/privacy}", "received_events_url": "https://api.github.com/users/yanghg-basefx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1011874165, "node_id": "MDU6TGFiZWwxMDExODc0MTY1", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/question", "name": "question", "color": "7057ff", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "syrusakbary", "id": 188257, "node_id": "MDQ6VXNlcjE4ODI1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/188257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syrusakbary", "html_url": "https://github.com/syrusakbary", "followers_url": "https://api.github.com/users/syrusakbary/followers", "following_url": "https://api.github.com/users/syrusakbary/following{/other_user}", "gists_url": "https://api.github.com/users/syrusakbary/gists{/gist_id}", "starred_url": "https://api.github.com/users/syrusakbary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syrusakbary/subscriptions", "organizations_url": "https://api.github.com/users/syrusakbary/orgs", "repos_url": "https://api.github.com/users/syrusakbary/repos", "events_url": "https://api.github.com/users/syrusakbary/events{/privacy}", "received_events_url": "https://api.github.com/users/syrusakbary/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "syrusakbary", "id": 188257, "node_id": "MDQ6VXNlcjE4ODI1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/188257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syrusakbary", "html_url": "https://github.com/syrusakbary", "followers_url": "https://api.github.com/users/syrusakbary/followers", "following_url": "https://api.github.com/users/syrusakbary/following{/other_user}", "gists_url": "https://api.github.com/users/syrusakbary/gists{/gist_id}", "starred_url": "https://api.github.com/users/syrusakbary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syrusakbary/subscriptions", "organizations_url": "https://api.github.com/users/syrusakbary/orgs", "repos_url": "https://api.github.com/users/syrusakbary/repos", "events_url": "https://api.github.com/users/syrusakbary/events{/privacy}", "received_events_url": "https://api.github.com/users/syrusakbary/received_events", "type": "User", "site_admin": false}, {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-11-20T07:09:18Z", "updated_at": "2019-05-02T19:34:18Z", "closed_at": "2019-05-02T19:34:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I raise an issue before [Out of memory when wrong use graphql with dataloader](https://github.com/graphql-python/graphql-core/issues/219), but now I find this repo and `to_dict` is not exist in `ExecutionResult`. Does it will be implemented? If not, please close that issue, and I will remove it in my project.\r\n\r\nBut GraphQL-Server is [using this function](https://github.com/graphql-python/graphql-server-core/blob/master/graphql_server/__init__.py#L154), please note.\r\n\r\nThanks so much!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/15", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/15/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/15/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/15", "id": 382329935, "node_id": "MDU6SXNzdWUzODIzMjk5MzU=", "number": 15, "title": "MiddlewareManager only decorates the first field encountered", "user": {"login": "patrys", "id": 81205, "node_id": "MDQ6VXNlcjgxMjA1", "avatar_url": "https://avatars1.githubusercontent.com/u/81205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrys", "html_url": "https://github.com/patrys", "followers_url": "https://api.github.com/users/patrys/followers", "following_url": "https://api.github.com/users/patrys/following{/other_user}", "gists_url": "https://api.github.com/users/patrys/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrys/subscriptions", "organizations_url": "https://api.github.com/users/patrys/orgs", "repos_url": "https://api.github.com/users/patrys/repos", "events_url": "https://api.github.com/users/patrys/events{/privacy}", "received_events_url": "https://api.github.com/users/patrys/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-19T17:58:28Z", "updated_at": "2018-11-25T19:48:31Z", "closed_at": "2018-11-25T19:13:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`get_middleware_resolvers` is implemented as a generator:\r\n\r\nhttps://github.com/graphql-python/graphql-core-next/blob/f6b078bddae4dd8a48ebf878a6fd5fbbac52bd1b/graphql/execution/middleware.py#L56-L58\r\n\r\nThe generator object is then assigned to `self._middleware_resolvers`:\r\n\r\nhttps://github.com/graphql-python/graphql-core-next/blob/f6b078bddae4dd8a48ebf878a6fd5fbbac52bd1b/graphql/execution/middleware.py#L30-L32\r\n\r\nAs the generator is not consumed and unrolled into a list at this point, it is exhausted during the `reduce()` call of the first field construction:\r\n\r\nhttps://github.com/graphql-python/graphql-core-next/blob/f6b078bddae4dd8a48ebf878a6fd5fbbac52bd1b/graphql/execution/middleware.py#L46-L50\r\n\r\nAs the generator is now exhausted, all other calls to `reduce()` will immediately receive `StopIteration` so no other field is wrapped.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/14", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/14/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/14/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/14", "id": 381619908, "node_id": "MDU6SXNzdWUzODE2MTk5MDg=", "number": 14, "title": "\"extend type\" not supported in input to build_schema", "user": {"login": "rafalp", "id": 750553, "node_id": "MDQ6VXNlcjc1MDU1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/750553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafalp", "html_url": "https://github.com/rafalp", "followers_url": "https://api.github.com/users/rafalp/followers", "following_url": "https://api.github.com/users/rafalp/following{/other_user}", "gists_url": "https://api.github.com/users/rafalp/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafalp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafalp/subscriptions", "organizations_url": "https://api.github.com/users/rafalp/orgs", "repos_url": "https://api.github.com/users/rafalp/repos", "events_url": "https://api.github.com/users/rafalp/events{/privacy}", "received_events_url": "https://api.github.com/users/rafalp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1346684043, "node_id": "MDU6TGFiZWwxMzQ2Njg0MDQz", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/investigate", "name": "investigate", "color": "fbca04", "default": false, "description": "Needs investigaton or experimentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-16T14:24:09Z", "updated_at": "2019-07-06T12:16:05Z", "closed_at": "2019-07-06T12:16:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nWe have started migrating our GraphQL lib to GraphQL-core-next and things are looking great so far.  `build_schema` util allowed us to remove our own implementation that did the same thing. However, we've found that if you try to extend existing type using `extend`, it will silently skip it and do nothing.\r\n\r\nLooking around the code, I see that logic for extending the schema is quite complexy, and so can understand why `build_schema` doesn't support it, but perhaps `extend_schema` should support `differences only` mode, or part of its logic could be extracted to utility function returning diff from schema and `Source`?\r\n\r\n[Apollo-Server](https://www.apollographql.com/docs/graphql-tools/generate-schema.html#extend-types) for reference of what we are trying to do.\r\n\r\nThank you for all the amazing work!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/13", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/13/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/13/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/13", "id": 371018229, "node_id": "MDU6SXNzdWUzNzEwMTgyMjk=", "number": 13, "title": "Middleware defeats introspection without await check", "user": {"login": "rob-blackbourn", "id": 2880305, "node_id": "MDQ6VXNlcjI4ODAzMDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2880305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rob-blackbourn", "html_url": "https://github.com/rob-blackbourn", "followers_url": "https://api.github.com/users/rob-blackbourn/followers", "following_url": "https://api.github.com/users/rob-blackbourn/following{/other_user}", "gists_url": "https://api.github.com/users/rob-blackbourn/gists{/gist_id}", "starred_url": "https://api.github.com/users/rob-blackbourn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rob-blackbourn/subscriptions", "organizations_url": "https://api.github.com/users/rob-blackbourn/orgs", "repos_url": "https://api.github.com/users/rob-blackbourn/repos", "events_url": "https://api.github.com/users/rob-blackbourn/events{/privacy}", "received_events_url": "https://api.github.com/users/rob-blackbourn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-17T11:05:35Z", "updated_at": "2018-10-22T21:30:43Z", "closed_at": "2018-10-17T16:45:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Fantastic project BTW!\r\n\r\nI'm not sure this is a bug, but it caught me out. Maybe it should just be documented.\r\n\r\nThe following middleware:\r\n\r\n    class MyMiddleware:\r\n        async def resolve(self, next, root, info, *args, **kwargs):\r\n            return await next(root, info, *args, **kwargs)\r\n\r\nwill break the introspection query as the 'next' handler is not awaitable.\r\n\r\nThis fixes it:\r\n\r\n    from inspect import isawaitable\r\n    class MyMiddleware:\r\n        async def resolve(self, next, root, info, *args, **kwargs):\r\n            response = next(root, info, *args, **kwargs)\r\n            return await response if isawaitable(response) else response\r\n\r\nAlso would it be possible to release 1.0.1 on PyPi as it has all the cool middleware and context stuff :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/12", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/12/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/12/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/12", "id": 366717029, "node_id": "MDU6SXNzdWUzNjY3MTcwMjk=", "number": 12, "title": "Got invalid value wrong interpretation", "user": {"login": "syrusakbary", "id": 188257, "node_id": "MDQ6VXNlcjE4ODI1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/188257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syrusakbary", "html_url": "https://github.com/syrusakbary", "followers_url": "https://api.github.com/users/syrusakbary/followers", "following_url": "https://api.github.com/users/syrusakbary/following{/other_user}", "gists_url": "https://api.github.com/users/syrusakbary/gists{/gist_id}", "starred_url": "https://api.github.com/users/syrusakbary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syrusakbary/subscriptions", "organizations_url": "https://api.github.com/users/syrusakbary/orgs", "repos_url": "https://api.github.com/users/syrusakbary/repos", "events_url": "https://api.github.com/users/syrusakbary/events{/privacy}", "received_events_url": "https://api.github.com/users/syrusakbary/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-10-04T10:12:18Z", "updated_at": "2018-10-22T18:17:10Z", "closed_at": "2018-10-22T18:17:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Code in graphql-core\r\nhttps://github.com/graphql-python/graphql-core/blob/master/graphql/execution/values.py#L71-L76\r\n\r\nCode in graphql-core-next: \r\nhttps://github.com/graphql-python/graphql-core-next/blob/master/graphql/execution/values.py#L96-L99\r\n\r\nGraphql-core next leaks the inner Python representation of an object.\r\n\r\nIn general, after reviewing a lot of tests and code, there is a lot of usage of `repr` when it should be used just for debugging, not for uniform error messages.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/10", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/10/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/10/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/10", "id": 362419337, "node_id": "MDU6SXNzdWUzNjI0MTkzMzc=", "number": 10, "title": "Subscribe doesn't await the execution results", "user": {"login": "dfee", "id": 262602, "node_id": "MDQ6VXNlcjI2MjYwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/262602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfee", "html_url": "https://github.com/dfee", "followers_url": "https://api.github.com/users/dfee/followers", "following_url": "https://api.github.com/users/dfee/following{/other_user}", "gists_url": "https://api.github.com/users/dfee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfee/subscriptions", "organizations_url": "https://api.github.com/users/dfee/orgs", "repos_url": "https://api.github.com/users/dfee/repos", "events_url": "https://api.github.com/users/dfee/events{/privacy}", "received_events_url": "https://api.github.com/users/dfee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-21T00:56:17Z", "updated_at": "2018-10-22T19:36:12Z", "closed_at": "2018-10-22T19:36:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`execute` returns a [`MaybeAwaitable`](https://github.com/graphql-python/graphql-core-next/blob/3de6454304422b3cd832cb1bb075be202e26616c/graphql/execution/execute.py#L115) but `subscribe` doesn't await it if it does.\r\n\r\nhttps://github.com/graphql-python/graphql-core-next/blob/3de6454304422b3cd832cb1bb075be202e26616c/graphql/subscription/subscribe.py#L67-L87", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/9", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/9/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/9/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/9", "id": 361880313, "node_id": "MDU6SXNzdWUzNjE4ODAzMTM=", "number": 9, "title": "calling aclose() on a subscription doesn't cancel task", "user": {"login": "dfee", "id": 262602, "node_id": "MDQ6VXNlcjI2MjYwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/262602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfee", "html_url": "https://github.com/dfee", "followers_url": "https://api.github.com/users/dfee/followers", "following_url": "https://api.github.com/users/dfee/following{/other_user}", "gists_url": "https://api.github.com/users/dfee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfee/subscriptions", "organizations_url": "https://api.github.com/users/dfee/orgs", "repos_url": "https://api.github.com/users/dfee/repos", "events_url": "https://api.github.com/users/dfee/events{/privacy}", "received_events_url": "https://api.github.com/users/dfee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-19T18:49:05Z", "updated_at": "2018-10-22T19:41:17Z", "closed_at": "2018-10-22T19:41:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I put together a new version of `graphql-ws` specifically designed for `graphql-core-next`, and one problem I've run into is that calling `aclose()` on an async generator doesn't cancel whatever is waiting on its `__anext__()` (https://bugs.python.org/issue28721)\r\n\r\nThe result is that subscriptions in graphql-core-ws aren't really cancellable, and instead emit the following error:\r\n\r\n```python\r\nTask was destroyed but it is pending!\r\ntask: <Task pending coro=<<async_generator_asend without __name__>()> wait_for=<Future pending cb=[<TaskWakeupMethWrapper object at 0x10ed07d68>()]> cb=[_wait.<locals>._on_completion() at /Users/dfee/.pyenv/versions/3.7.0/lib/python3.7/asyncio/tasks.py:436]>\r\n^\r\n```\r\n\r\nBTW, you can check out that repo (pre-publish) at https://github.com/dfee/graphql-next-ws", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/4", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/4/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/4/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/4", "id": 354600066, "node_id": "MDU6SXNzdWUzNTQ2MDAwNjY=", "number": 4, "title": "race condition on subscription", "user": {"login": "dfee", "id": 262602, "node_id": "MDQ6VXNlcjI2MjYwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/262602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfee", "html_url": "https://github.com/dfee", "followers_url": "https://api.github.com/users/dfee/followers", "following_url": "https://api.github.com/users/dfee/following{/other_user}", "gists_url": "https://api.github.com/users/dfee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfee/subscriptions", "organizations_url": "https://api.github.com/users/dfee/orgs", "repos_url": "https://api.github.com/users/dfee/repos", "events_url": "https://api.github.com/users/dfee/events{/privacy}", "received_events_url": "https://api.github.com/users/dfee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-28T07:14:16Z", "updated_at": "2018-09-01T11:10:55Z", "closed_at": "2018-09-01T11:10:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/graphql-python/graphql-core-next/blob/4d3b7824fc16554fea48f29b8a2a617e760056d6/graphql/subscription/map_async_iterator.py#L27-L41\r\n\r\nThis race condition becomes especially apparent when the subscription is being used in an \"async-iterable\" sort of mode:\r\n```python\r\nreceived = []\r\ndef _receive(subscription):\r\n    async for result in subscription:\r\n        received.append(result)\r\ntask = loop.create_task(_receive())\r\n\r\n# ...\r\nawait subscription.aclose()\r\n\r\n# e.g. ... await asyncio.sleep(.1)\r\nassert not task.done()\r\n\r\n# might I suggest using something like a SENTINEL which isn't passed through...\r\n# here, I'm manually setting it, but you could set it, listen for it on EventEmitter or\r\n# EventEmitterAsyncIterator\r\nSENTINEL = object()\r\nsubscription.iterator.queue.put_nowait(SENTINEL)\r\nawait asyncio.sleep(.1)\r\n\r\nassert task.done()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/3", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/3/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/3/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/3", "id": 348014729, "node_id": "MDU6SXNzdWUzNDgwMTQ3Mjk=", "number": 3, "title": "Add performance tests", "user": {"login": "Cito", "id": 464599, "node_id": "MDQ6VXNlcjQ2NDU5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/464599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cito", "html_url": "https://github.com/Cito", "followers_url": "https://api.github.com/users/Cito/followers", "following_url": "https://api.github.com/users/Cito/following{/other_user}", "gists_url": "https://api.github.com/users/Cito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cito/subscriptions", "organizations_url": "https://api.github.com/users/Cito/orgs", "repos_url": "https://api.github.com/users/Cito/repos", "events_url": "https://api.github.com/users/Cito/events{/privacy}", "received_events_url": "https://api.github.com/users/Cito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1346680811, "node_id": "MDU6TGFiZWwxMzQ2NjgwODEx", "url": "https://api.github.com/repos/graphql-python/graphql-core/labels/optimization", "name": "optimization", "color": "5ebeff", "default": false, "description": "Code optimizations and performance issues"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-06T17:27:58Z", "updated_at": "2019-09-14T19:41:50Z", "closed_at": "2019-09-14T19:41:49Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "GraphQL.js comes with a [benchmark script](https://github.com/graphql/graphql-js/blob/master/resources/benchmark.js) - a similar script should be also added to GraphQL-core-next.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphql-core/issues/1", "repository_url": "https://api.github.com/repos/graphql-python/graphql-core", "labels_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/1/comments", "events_url": "https://api.github.com/repos/graphql-python/graphql-core/issues/1/events", "html_url": "https://github.com/graphql-python/graphql-core/issues/1", "id": 347366052, "node_id": "MDU6SXNzdWUzNDczNjYwNTI=", "number": 1, "title": "Initial Update", "user": {"login": "pyup-bot", "id": 16239342, "node_id": "MDQ6VXNlcjE2MjM5MzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/16239342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyup-bot", "html_url": "https://github.com/pyup-bot", "followers_url": "https://api.github.com/users/pyup-bot/followers", "following_url": "https://api.github.com/users/pyup-bot/following{/other_user}", "gists_url": "https://api.github.com/users/pyup-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyup-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyup-bot/subscriptions", "organizations_url": "https://api.github.com/users/pyup-bot/orgs", "repos_url": "https://api.github.com/users/pyup-bot/repos", "events_url": "https://api.github.com/users/pyup-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/pyup-bot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-03T11:48:27Z", "updated_at": "2018-08-04T16:58:58Z", "closed_at": "2018-08-04T16:58:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The bot created this issue to inform you that pyup.io has been set up on this repo.\nOnce you have closed it, the bot will open pull requests for updates as soon as they are available.\n", "performed_via_github_app": null, "score": 1.0}]}