{"total_count": 8, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ricmoo/pyaes/issues/28", "repository_url": "https://api.github.com/repos/ricmoo/pyaes", "labels_url": "https://api.github.com/repos/ricmoo/pyaes/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/ricmoo/pyaes/issues/28/comments", "events_url": "https://api.github.com/repos/ricmoo/pyaes/issues/28/events", "html_url": "https://github.com/ricmoo/pyaes/issues/28", "id": 603644873, "node_id": "MDU6SXNzdWU2MDM2NDQ4NzM=", "number": 28, "title": "a question about struct.unpack()\uff1a\"TypeError: a bytes-like object is required, not 'str'\"", "user": {"login": "PoorboyIan", "id": 42740668, "node_id": "MDQ6VXNlcjQyNzQwNjY4", "avatar_url": "https://avatars1.githubusercontent.com/u/42740668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PoorboyIan", "html_url": "https://github.com/PoorboyIan", "followers_url": "https://api.github.com/users/PoorboyIan/followers", "following_url": "https://api.github.com/users/PoorboyIan/following{/other_user}", "gists_url": "https://api.github.com/users/PoorboyIan/gists{/gist_id}", "starred_url": "https://api.github.com/users/PoorboyIan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PoorboyIan/subscriptions", "organizations_url": "https://api.github.com/users/PoorboyIan/orgs", "repos_url": "https://api.github.com/users/PoorboyIan/repos", "events_url": "https://api.github.com/users/PoorboyIan/events{/privacy}", "received_events_url": "https://api.github.com/users/PoorboyIan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-21T01:49:30Z", "updated_at": "2020-04-21T13:25:27Z", "closed_at": "2020-04-21T13:24:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I use the pyaes package, I have a problem. The error message is \"TypeError: a bytes-like object is required, not 'str'\".\r\n    I have use google to solve the question, but new question have come. I find that struct.unpack() function is different between python2 with python3. When we use Python 2.x str is a byte array. For Python 3, we must use bytes() such as bytes(str). So I modify your code in line 148 like this:\r\n`aes.py`\r\n`tk = [ struct.unpack('>i', bytes(key[i:i + 4],encoding='utf-8'))[0] for i in xrange(0, len(key), 4) ]`\r\n  The test script can run, but the value of \"decrypted==plaintext\" is false!! Can you do me a favour? \r\nThanks a lot.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ricmoo/pyaes/issues/26", "repository_url": "https://api.github.com/repos/ricmoo/pyaes", "labels_url": "https://api.github.com/repos/ricmoo/pyaes/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/ricmoo/pyaes/issues/26/comments", "events_url": "https://api.github.com/repos/ricmoo/pyaes/issues/26/events", "html_url": "https://github.com/ricmoo/pyaes/issues/26", "id": 465776734, "node_id": "MDU6SXNzdWU0NjU3NzY3MzQ=", "number": 26, "title": "Bug in __init__.py", "user": {"login": "Legorooj", "id": 50370070, "node_id": "MDQ6VXNlcjUwMzcwMDcw", "avatar_url": "https://avatars2.githubusercontent.com/u/50370070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Legorooj", "html_url": "https://github.com/Legorooj", "followers_url": "https://api.github.com/users/Legorooj/followers", "following_url": "https://api.github.com/users/Legorooj/following{/other_user}", "gists_url": "https://api.github.com/users/Legorooj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Legorooj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Legorooj/subscriptions", "organizations_url": "https://api.github.com/users/Legorooj/orgs", "repos_url": "https://api.github.com/users/Legorooj/repos", "events_url": "https://api.github.com/users/Legorooj/events{/privacy}", "received_events_url": "https://api.github.com/users/Legorooj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-09T13:19:52Z", "updated_at": "2020-01-01T06:12:09Z", "closed_at": "2020-01-01T06:12:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a bug in the __init__ file - doesn't effect imports but when you run `__init__.py` it raises an error:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\pyaes\\__init__.py\", line 51, in <module>\r\n    from .aes import AES, AESModeOfOperationCTR, AESModeOfOperationCBC, AESModeOfOperationCFB, AESModeOfOperationECB, AESModeOfOperationOFB, AESModesOfOperation, Counter\r\nModuleNotFoundError: No module named '__main__.aes'; '__main__' is not a package\r\n```\r\nIf you change the import lines from:\r\n```python\r\nfrom .aes import AES, AESModeOfOperationCTR, AESModeOfOperationCBC, AESModeOfOperationCFB, AESModeOfOperationECB, AESModeOfOperationOFB, AESModesOfOperation, Counter\r\nfrom .blockfeeder import decrypt_stream, Decrypter, encrypt_stream, Encrypter\r\nfrom .blockfeeder import PADDING_NONE, PADDING_DEFAULT\r\n```\r\nto:\r\n```python\r\nfrom pyaes.aes import AES, AESModeOfOperationCTR, AESModeOfOperationCBC, AESModeOfOperationCFB, AESModeOfOperationECB, AESModeOfOperationOFB, AESModesOfOperation, Counter\r\nfrom pyaes.blockfeeder import decrypt_stream, Decrypter, encrypt_stream, Encrypter\r\nfrom pyaes.blockfeeder import PADDING_NONE, PADDING_DEFAULT\r\n```\r\nthe bug is fixed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ricmoo/pyaes/issues/19", "repository_url": "https://api.github.com/repos/ricmoo/pyaes", "labels_url": "https://api.github.com/repos/ricmoo/pyaes/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/ricmoo/pyaes/issues/19/comments", "events_url": "https://api.github.com/repos/ricmoo/pyaes/issues/19/events", "html_url": "https://github.com/ricmoo/pyaes/issues/19", "id": 341043249, "node_id": "MDU6SXNzdWUzNDEwNDMyNDk=", "number": 19, "title": "Different result with pyaes ASC-CFB vs Cryptdome AES-CFB  ", "user": {"login": "thepasto", "id": 593416, "node_id": "MDQ6VXNlcjU5MzQxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/593416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thepasto", "html_url": "https://github.com/thepasto", "followers_url": "https://api.github.com/users/thepasto/followers", "following_url": "https://api.github.com/users/thepasto/following{/other_user}", "gists_url": "https://api.github.com/users/thepasto/gists{/gist_id}", "starred_url": "https://api.github.com/users/thepasto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thepasto/subscriptions", "organizations_url": "https://api.github.com/users/thepasto/orgs", "repos_url": "https://api.github.com/users/thepasto/repos", "events_url": "https://api.github.com/users/thepasto/events{/privacy}", "received_events_url": "https://api.github.com/users/thepasto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-13T14:35:53Z", "updated_at": "2018-07-13T16:32:10Z", "closed_at": "2018-07-13T16:32:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI'm trying to replace Cryptodome AES with a pure python implementation of AES CFB encryption, and i found this project.\r\nBut i can't reproduce the same result, here's my example:\r\n\r\n```\r\npad = lambda s, bst: s + (bst - len(s) % bst) * chr(bst - len(s) % bst)\r\n\r\nkey = hashlib.sha256(psec).hexdigest()[:32].encode(\"utf-8\")\r\ntext = text.encode('utf-8')\r\nb = 32\r\niv = os.urandom(16)\r\n\r\n#Cryptodome\r\ncipher = AES.new(psec, AES.MODE_CFB, iv)\r\nencrypted = cipher.encrypt(pad(text, b).encode(\"utf-8\"))\r\n\r\nprint(\"ENC 1\")\r\nprint repr(encrypted)\r\n\r\n#pyaes\r\ncipher2 = pyaes.AESModeOfOperationCFB(psec, iv=iv, segment_size=8)\r\nencrypted2 = cipher2.encrypt(pad(text, b).encode(\"utf-8\"))\r\n\r\nprint(\"ENC 2\")\r\nprint repr(encrypted2)\r\n```\r\n\r\nOutput:\r\n```\r\nDEBUG: ENC1\r\nDEBUG: '\\xb0\\xd4\\x95)\\xf6 \\xbc=\\xab\\xefw\\xcab\\x06\\xa8\\x9eA-^\\x9b\\x8d\\xa2\\x04\\x86J\\xeb\\xb8\\xdas\\xa6\\xbd\\x04W\\xcbz\\x85\\xa4\\xf3\\x1a\\xceU\\xac\\xe5\\x10\\xbd\\r\\xd8\\xf2\\xcf\\x12\\x1f\\xe3\\xe9\\xe3\\x95\\x9a g?J_r\\xdfx'\r\nDEBUG: ENC 2\r\nDEBUG: \"\\xb0\\x95w[\\xce7\\xcc\\xfc\\xce\\xe5\\xa6\\xc2\\xbfO\\xf6J\\x04\\xc0z\\x00\\r p\\xb8\\xcf\\xae\\xde\\xae\\xd5\\xc9\\xbb[\\xc3\\x9b\\xe2\\xd8=S\\xec\\xe2\\x99.\\xb0Nu'B\\xee\\xee\\xbb\\x07\\xdb\\x9d\\xf8\\xf6Zc\\x00_n\\xbd\\x05\\x9c\\n\"\r\n```\r\nAny help will be apreciated\r\nThanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ricmoo/pyaes/issues/16", "repository_url": "https://api.github.com/repos/ricmoo/pyaes", "labels_url": "https://api.github.com/repos/ricmoo/pyaes/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/ricmoo/pyaes/issues/16/comments", "events_url": "https://api.github.com/repos/ricmoo/pyaes/issues/16/events", "html_url": "https://github.com/ricmoo/pyaes/issues/16", "id": 261800005, "node_id": "MDU6SXNzdWUyNjE4MDAwMDU=", "number": 16, "title": "Python 3 compatibility?", "user": {"login": "KhArtNJava", "id": 757085, "node_id": "MDQ6VXNlcjc1NzA4NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/757085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KhArtNJava", "html_url": "https://github.com/KhArtNJava", "followers_url": "https://api.github.com/users/KhArtNJava/followers", "following_url": "https://api.github.com/users/KhArtNJava/following{/other_user}", "gists_url": "https://api.github.com/users/KhArtNJava/gists{/gist_id}", "starred_url": "https://api.github.com/users/KhArtNJava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KhArtNJava/subscriptions", "organizations_url": "https://api.github.com/users/KhArtNJava/orgs", "repos_url": "https://api.github.com/users/KhArtNJava/repos", "events_url": "https://api.github.com/users/KhArtNJava/events{/privacy}", "received_events_url": "https://api.github.com/users/KhArtNJava/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-29T23:59:49Z", "updated_at": "2017-09-30T09:16:04Z", "closed_at": "2017-09-30T09:16:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI tried `pyaes`, but it doesn't work on Python 3.3.\r\n\r\nMy code for Python 3.3 is:\r\n\r\n```\r\nimport pyaes\r\n\r\n# Any mode of operation can be used; for this example CTR\r\nkey = \"This_key_for_demo_purposes_only!\"\r\n\r\n# Create the mode of operation to encrypt with\r\nmode = pyaes.AESModeOfOperationCTR(key.encode())\r\n\r\n# The input and output files\r\nfile_in = open('c:/Temp/7202969_hd.mp4')\r\nfile_out = open('c:/Temp/7202969_hd.mp4.crypted', 'wb')\r\n\r\n# Encrypt the data as a stream, the file is read in 8kb chunks, be default\r\npyaes.encrypt_stream(mode, file_in, file_out)\r\n\r\n# Close the files\r\nfile_in.close()\r\nfile_out.close()\r\n```\r\n\r\nThis code fails:\r\n\r\n```\r\nd:\\Python33>python.exe cr.py\r\nTraceback (most recent call last):\r\n  File \"cr.py\", line 55, in <module>\r\n    pyaes.encrypt_stream(mode, file_in, file_out)\r\n  File \"d:\\Python33\\lib\\site-packages\\pyaes\\blockfeeder.py\", line 220, in encrypt_stream\r\n    _feed_stream(encrypter, in_stream, out_stream, block_size)\r\n  File \"d:\\Python33\\lib\\site-packages\\pyaes\\blockfeeder.py\", line 210, in _feed_stream\r\n    converted = feeder.feed(chunk)\r\n  File \"d:\\Python33\\lib\\site-packages\\pyaes\\blockfeeder.py\", line 173, in feed\r\n    self._buffer += to_bufferable(data)\r\n  File \"d:\\Python33\\lib\\site-packages\\pyaes\\util.py\", line 42, in to_bufferable\r\n    return bytes(ord(b) for b in binary)\r\nValueError: bytes must be in range(0, 256)\r\n```\r\n\r\nHow could it be hot-fixed for Python 3.3?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ricmoo/pyaes/issues/15", "repository_url": "https://api.github.com/repos/ricmoo/pyaes", "labels_url": "https://api.github.com/repos/ricmoo/pyaes/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/ricmoo/pyaes/issues/15/comments", "events_url": "https://api.github.com/repos/ricmoo/pyaes/issues/15/events", "html_url": "https://github.com/ricmoo/pyaes/issues/15", "id": 237378406, "node_id": "MDU6SXNzdWUyMzczNzg0MDY=", "number": 15, "title": "Feeding could handle an empty buffer more gracefully", "user": {"login": "teeberg", "id": 199071, "node_id": "MDQ6VXNlcjE5OTA3MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/199071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teeberg", "html_url": "https://github.com/teeberg", "followers_url": "https://api.github.com/users/teeberg/followers", "following_url": "https://api.github.com/users/teeberg/following{/other_user}", "gists_url": "https://api.github.com/users/teeberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/teeberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teeberg/subscriptions", "organizations_url": "https://api.github.com/users/teeberg/orgs", "repos_url": "https://api.github.com/users/teeberg/repos", "events_url": "https://api.github.com/users/teeberg/events{/privacy}", "received_events_url": "https://api.github.com/users/teeberg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 99045879, "node_id": "MDU6TGFiZWw5OTA0NTg3OQ==", "url": "https://api.github.com/repos/ricmoo/pyaes/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "ricmoo", "id": 975687, "node_id": "MDQ6VXNlcjk3NTY4Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/975687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricmoo", "html_url": "https://github.com/ricmoo", "followers_url": "https://api.github.com/users/ricmoo/followers", "following_url": "https://api.github.com/users/ricmoo/following{/other_user}", "gists_url": "https://api.github.com/users/ricmoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricmoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricmoo/subscriptions", "organizations_url": "https://api.github.com/users/ricmoo/orgs", "repos_url": "https://api.github.com/users/ricmoo/repos", "events_url": "https://api.github.com/users/ricmoo/events{/privacy}", "received_events_url": "https://api.github.com/users/ricmoo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ricmoo", "id": 975687, "node_id": "MDQ6VXNlcjk3NTY4Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/975687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricmoo", "html_url": "https://github.com/ricmoo", "followers_url": "https://api.github.com/users/ricmoo/followers", "following_url": "https://api.github.com/users/ricmoo/following{/other_user}", "gists_url": "https://api.github.com/users/ricmoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricmoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricmoo/subscriptions", "organizations_url": "https://api.github.com/users/ricmoo/orgs", "repos_url": "https://api.github.com/users/ricmoo/repos", "events_url": "https://api.github.com/users/ricmoo/events{/privacy}", "received_events_url": "https://api.github.com/users/ricmoo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-06-21T00:01:13Z", "updated_at": "2017-09-21T18:57:50Z", "closed_at": "2017-09-20T21:19:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "The CBC encryption feeding example in the `README` currently reads something like:\r\n```python\r\nencrypter = pyaes.Encrypter(pyaes.AESModeOfOperationCBC(key, iv))\r\nciphertext = encrypter.feed(plaintext)\r\n# Make a final call to flush any remaining bytes and add paddin\r\nciphertext += encrypter.feed()\r\n```\r\n\r\nIf you pass in an empty string as the plaintext, this results in:\r\n```\r\n.../.venv/lib/python2.7/site-packages/pyaes/blockfeeder.pyc in feed(self, data)\r\n    163 \r\n    164         if self._buffer is None:\r\n--> 165             raise ValueError('already finished feeder')\r\n    166 \r\n    167         # Finalize; process the spare bytes we were keeping\r\n\r\nValueError: already finished feeder\r\n```\r\n\r\nThis could be made ever so slightly more reliable by changing [this line](https://github.com/ricmoo/pyaes/blob/master/pyaes/blockfeeder.py#L168) to:\r\n```python\r\nif data is None:\r\n```\r\nThis would make it easier to have a generic `encrypt_aes` function taking an arbitrary string, without having to handle an empty string as a special case.\r\n\r\nDoes that seem like a sensible approach?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ricmoo/pyaes/issues/8", "repository_url": "https://api.github.com/repos/ricmoo/pyaes", "labels_url": "https://api.github.com/repos/ricmoo/pyaes/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/ricmoo/pyaes/issues/8/comments", "events_url": "https://api.github.com/repos/ricmoo/pyaes/issues/8/events", "html_url": "https://github.com/ricmoo/pyaes/issues/8", "id": 157988865, "node_id": "MDU6SXNzdWUxNTc5ODg4NjU=", "number": 8, "title": "Recent option to disable padding to block feeder broken code", "user": {"login": "zorro786", "id": 6917299, "node_id": "MDQ6VXNlcjY5MTcyOTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6917299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorro786", "html_url": "https://github.com/zorro786", "followers_url": "https://api.github.com/users/zorro786/followers", "following_url": "https://api.github.com/users/zorro786/following{/other_user}", "gists_url": "https://api.github.com/users/zorro786/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorro786/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorro786/subscriptions", "organizations_url": "https://api.github.com/users/zorro786/orgs", "repos_url": "https://api.github.com/users/zorro786/repos", "events_url": "https://api.github.com/users/zorro786/events{/privacy}", "received_events_url": "https://api.github.com/users/zorro786/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-01T19:34:59Z", "updated_at": "2016-06-01T21:34:02Z", "closed_at": "2016-06-01T21:32:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I checked the code and you didn't change the arguments for _feed_stream function.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ricmoo/pyaes/issues/5", "repository_url": "https://api.github.com/repos/ricmoo/pyaes", "labels_url": "https://api.github.com/repos/ricmoo/pyaes/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/ricmoo/pyaes/issues/5/comments", "events_url": "https://api.github.com/repos/ricmoo/pyaes/issues/5/events", "html_url": "https://github.com/ricmoo/pyaes/issues/5", "id": 98021379, "node_id": "MDU6SXNzdWU5ODAyMTM3OQ==", "number": 5, "title": "Issue in blockfeeder?", "user": {"login": "tknorris", "id": 1934551, "node_id": "MDQ6VXNlcjE5MzQ1NTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1934551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tknorris", "html_url": "https://github.com/tknorris", "followers_url": "https://api.github.com/users/tknorris/followers", "following_url": "https://api.github.com/users/tknorris/following{/other_user}", "gists_url": "https://api.github.com/users/tknorris/gists{/gist_id}", "starred_url": "https://api.github.com/users/tknorris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tknorris/subscriptions", "organizations_url": "https://api.github.com/users/tknorris/orgs", "repos_url": "https://api.github.com/users/tknorris/repos", "events_url": "https://api.github.com/users/tknorris/events{/privacy}", "received_events_url": "https://api.github.com/users/tknorris/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-07-29T20:20:37Z", "updated_at": "2016-05-16T02:57:03Z", "closed_at": "2016-05-16T02:57:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using your blockfeeder I frequently get an \"invalid padding byte\" on the last decrypter.feed() call to pick up the last decrypted block. I'm not an expert on AES or any of this code, but I think there is a bug here in the strip_PKCS7_padding method where it always treats a block as having padding when it may not (i.e. if the final decrypt resulted in a block of 16 bytes). Specifically, [here](https://github.com/ricmoo/pyaes/blob/master/pyaes/util.py#L57)\n\nI think this should just return the data if the final byte is > chr(16)? I may be completely off on that though?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ricmoo/pyaes/issues/2", "repository_url": "https://api.github.com/repos/ricmoo/pyaes", "labels_url": "https://api.github.com/repos/ricmoo/pyaes/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/ricmoo/pyaes/issues/2/comments", "events_url": "https://api.github.com/repos/ricmoo/pyaes/issues/2/events", "html_url": "https://github.com/ricmoo/pyaes/issues/2", "id": 35297935, "node_id": "MDU6SXNzdWUzNTI5NzkzNQ==", "number": 2, "title": "Suggestion: implement PKCS7 padding for ECB and CBC", "user": {"login": "prusnak", "id": 42201, "node_id": "MDQ6VXNlcjQyMjAx", "avatar_url": "https://avatars2.githubusercontent.com/u/42201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prusnak", "html_url": "https://github.com/prusnak", "followers_url": "https://api.github.com/users/prusnak/followers", "following_url": "https://api.github.com/users/prusnak/following{/other_user}", "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}", "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions", "organizations_url": "https://api.github.com/users/prusnak/orgs", "repos_url": "https://api.github.com/users/prusnak/repos", "events_url": "https://api.github.com/users/prusnak/events{/privacy}", "received_events_url": "https://api.github.com/users/prusnak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-06-09T16:07:12Z", "updated_at": "2014-06-10T09:36:33Z", "closed_at": "2014-06-10T04:49:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Another option for handling messages of length not divisable by blocksize is to implement PKCS7 padding:\n\nSee `append_PKCS7_padding` and `strip_PKCS7_padding` functions here: https://code.google.com/p/slowaes/source/browse/trunk/python/aes.py#17\n", "performed_via_github_app": null, "score": 1.0}]}