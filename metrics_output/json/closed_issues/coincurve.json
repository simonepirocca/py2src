{"total_count": 33, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ofek/coincurve/issues/70", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/70/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/70/events", "html_url": "https://github.com/ofek/coincurve/issues/70", "id": 624364559, "node_id": "MDU6SXNzdWU2MjQzNjQ1NTk=", "number": 70, "title": "ECDSA signature verification fails when r and s^{-1} are too small", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:25:38Z", "updated_at": "2020-05-25T19:25:54Z", "closed_at": "2020-05-25T19:25:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when r and s^{-1} are too small. You can check this\r\nwith the following test vectors from Google Wycheproof:\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"0402ef4d6d6cfd5a94f1d7784226e3e2a6c0a436c55839619f38fb4472b5f9ee777eb4acd4eebda5cd72875ffd2a2f26229c2dc6b46500919a432c86739f3ae866\",\r\n        \"wx\" : \"02ef4d6d6cfd5a94f1d7784226e3e2a6c0a436c55839619f38fb4472b5f9ee77\",\r\n        \"wy\" : \"7eb4acd4eebda5cd72875ffd2a2f26229c2dc6b46500919a432c86739f3ae866\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a0342000402ef4d6d6cfd5a94f1d7784226e3e2a6c0a436c55839619f38fb4472b5f9ee777eb4acd4eebda5cd72875ffd2a2f26229c2dc6b46500919a432c86739f3ae866\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEAu9NbWz9WpTx13hCJuPipsCkNsVYOWGf\\nOPtEcrX57nd+tKzU7r2lzXKHX/0qLyYinC3GtGUAkZpDLIZznzroZg==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 295,\r\n          \"comment\" : \"small r and s^-1\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"302702020101022100c58b162c58b162c58b162c58b162c58a1b242973853e16db75c8a1a71da4d39d\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"04464f4ff715729cae5072ca3bd801d3195b67aec65e9b01aad20a2943dcbcb584b1afd29d31a39a11d570aa1597439b3b2d1971bf2f1abf15432d0207b10d1d08\",\r\n        \"wx\" : \"464f4ff715729cae5072ca3bd801d3195b67aec65e9b01aad20a2943dcbcb584\",\r\n        \"wy\" : \"00b1afd29d31a39a11d570aa1597439b3b2d1971bf2f1abf15432d0207b10d1d08\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a03420004464f4ff715729cae5072ca3bd801d3195b67aec65e9b01aad20a2943dcbcb584b1afd29d31a39a11d570aa1597439b3b2d1971bf2f1abf15432d0207b10d1d08\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAERk9P9xVynK5Qcso72AHTGVtnrsZemwGq\\n0gopQ9y8tYSxr9KdMaOaEdVwqhWXQ5s7LRlxvy8avxVDLQIHsQ0dCA==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 296,\r\n          \"comment\" : \"smallish r and s^-1\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"302c02072d9b4d347952cc022100fcbc5103d0da267477d1791461cf2aa44bf9d43198f79507bd8779d69a13108e\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_small_r_s_minus_1.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography\r\nlibrary.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/69", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/69/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/69/events", "html_url": "https://github.com/ofek/coincurve/issues/69", "id": 624363507, "node_id": "MDU6SXNzdWU2MjQzNjM1MDc=", "number": 69, "title": "ECDSA signature verification fails when u2 == n - 1", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:23:18Z", "updated_at": "2020-05-25T19:26:08Z", "closed_at": "2020-05-25T19:26:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when u2 is equal to n - 1. You can check this\r\nwith the following teste vectors from Google Wycheproof:\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"0413681eae168cd4ea7cf2e2a45d052742d10a9f64e796867dbdcb829fe0b1028816528760d177376c09df79de39557c329cc1753517acffe8fa2ec298026b8384\",\r\n        \"wx\" : \"13681eae168cd4ea7cf2e2a45d052742d10a9f64e796867dbdcb829fe0b10288\",\r\n        \"wy\" : \"16528760d177376c09df79de39557c329cc1753517acffe8fa2ec298026b8384\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a0342000413681eae168cd4ea7cf2e2a45d052742d10a9f64e796867dbdcb829fe0b1028816528760d177376c09df79de39557c329cc1753517acffe8fa2ec298026b8384\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEE2gerhaM1Op88uKkXQUnQtEKn2TnloZ9\\nvcuCn+CxAogWUodg0Xc3bAnfed45VXwynMF1NRes/+j6LsKYAmuDhA==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 309,\r\n          \"comment\" : \"u2 == n - 1\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"3045022055555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8022100aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9d1c9e899ca306ad27fe1945de0242b89\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n# u2 = (r * w) mod n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_u2.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography\r\nlibrary.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/68", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/68/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/68/events", "html_url": "https://github.com/ofek/coincurve/issues/68", "id": 624362504, "node_id": "MDU6SXNzdWU2MjQzNjI1MDQ=", "number": 68, "title": "ECDSA signature verification fails when u1 == 1", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-25T15:21:10Z", "updated_at": "2020-05-25T19:25:28Z", "closed_at": "2020-05-25T19:25:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when u1 is equal to 1. You can check this\r\nwith the following teste vectors from Google Wycheproof:\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"04feb5163b0ece30ff3e03c7d55c4380fa2fa81ee2c0354942ff6f08c99d0cd82ce87de05ee1bda089d3e4e248fa0f721102acfffdf50e654be281433999df897e\",\r\n        \"wx\" : \"00feb5163b0ece30ff3e03c7d55c4380fa2fa81ee2c0354942ff6f08c99d0cd82c\",\r\n        \"wy\" : \"00e87de05ee1bda089d3e4e248fa0f721102acfffdf50e654be281433999df897e\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a03420004feb5163b0ece30ff3e03c7d55c4380fa2fa81ee2c0354942ff6f08c99d0cd82ce87de05ee1bda089d3e4e248fa0f721102acfffdf50e654be281433999df897e\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE/rUWOw7OMP8+A8fVXEOA+i+oHuLANUlC\\n/28IyZ0M2CzofeBe4b2gidPk4kj6D3IRAqz//fUOZUvigUM5md+Jfg==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 306,\r\n          \"comment\" : \"u1 == 1\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"3045022055555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8022100bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n#  u1 = (h(m) * w) mod n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_u1.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography\r\nlibrary.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/67", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/67/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/67/events", "html_url": "https://github.com/ofek/coincurve/issues/67", "id": 624361601, "node_id": "MDU6SXNzdWU2MjQzNjE2MDE=", "number": 67, "title": "ECDSA signature verification fails when the y coordinate is large", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:19:17Z", "updated_at": "2020-05-25T19:26:17Z", "closed_at": "2020-05-25T19:26:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when the y coordinate is large. You can check this\r\nwith the following teste vectors from Google Wycheproof:\r\n\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"046e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40cafffffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e\",\r\n        \"wx\" : \"6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff\",\r\n        \"wy\" : \"00fffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a034200046e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40cafffffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEboI1VUUpFAmRgsaywdbwtdKNUMzQBa8s\\n4bulQapAyv/////++fttKlqYwfDaJyrwSBpztieSuSvelqoeVcK7Tg==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 366,\r\n          \"comment\" : \"y-coordinate of the public key is large\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"304502203854a3998aebdf2dbc28adac4181462ccac7873907ab7f212c42db0e69b56ed8022100c12c09475c772fd0c1b2060d5163e42bf71d727e4ae7c03eeba954bf50b43bb3\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n        {\r\n          \"tcId\" : 367,\r\n          \"comment\" : \"y-coordinate of the public key is large\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3046022100e94dbdc38795fe5c904d8f16d969d3b587f0a25d2de90b6d8c5c53ff887e3607022100856b8c963e9b68dade44750bf97ec4d11b1a0a3804f4cb79aa27bdea78ac14e4\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_y_coordinate_large.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography\r\nlibrary.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/66", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/66/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/66/events", "html_url": "https://github.com/ofek/coincurve/issues/66", "id": 624360856, "node_id": "MDU6SXNzdWU2MjQzNjA4NTY=", "number": 66, "title": "ECDSA signature verification fails when the y coordinate is small", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:17:42Z", "updated_at": "2020-05-25T19:27:07Z", "closed_at": "2020-05-25T19:27:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when the y coordinate is small. You can check this\r\nwith the following teste vectors from Google Wycheproof:\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"046e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff00000001060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1\",\r\n        \"wx\" : \"6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff\",\r\n        \"wy\" : \"01060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a034200046e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff00000001060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEboI1VUUpFAmRgsaywdbwtdKNUMzQBa8s\\n4bulQapAyv8AAAABBgSS1aVnPg8l2NUPt+WMSdhtRtQhaVXgqj1A4Q==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 364,\r\n          \"comment\" : \"y-coordinate of the public key is small\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3046022100aad503de9b9fd66b948e9acf596f0a0e65e700b28b26ec56e6e45e846489b3c4022100fff223c5d0765447e8447a3f9d31fd0696e89d244422022ff61a110b2a8c2f04\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n        {\r\n          \"tcId\" : 365,\r\n          \"comment\" : \"y-coordinate of the public key is small\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"30460221009182cebd3bb8ab572e167174397209ef4b1d439af3b200cdf003620089e43225022100abb88367d15fe62d1efffb6803da03109ee22e90bc9c78e8b4ed23630b82ea9d\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_y_coordinate_small.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography\r\nlibrary.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/65", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/65/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/65/events", "html_url": "https://github.com/ofek/coincurve/issues/65", "id": 624359711, "node_id": "MDU6SXNzdWU2MjQzNTk3MTE=", "number": 65, "title": "ECDSA signature verification fails when the y coordinate contains too many trailing 1s", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:15:26Z", "updated_at": "2020-05-25T19:27:16Z", "closed_at": "2020-05-25T19:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when the y coordinate contain too many trailing 0s. You can check this\r\nwith the following teste vectors from Google Wycheproof:\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"04d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb93f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff\",\r\n        \"wx\" : \"00d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb9\",\r\n        \"wy\" : \"3f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a03420004d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb93f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE0S5sZrZ3NMPITSYBz1013Al+J2N/CspK\\nT9t0tqrdO7k/W9/4i9VzbfiY5pkAbtdQ8RzwfFhmzXrXDHEh/////w==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 375,\r\n          \"comment\" : \"y-coordinate of the public key has many trailing 1's\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"30450220592c41e16517f12fcabd98267674f974b588e9f35d35406c1a7bb2ed1d19b7b8022100c19a5f942607c3551484ff0dc97281f0cdc82bc48e2205a0645c0cf3d7f59da0\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n        {\r\n          \"tcId\" : 376,\r\n          \"comment\" : \"y-coordinate of the public key has many trailing 1's\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3046022100be0d70887d5e40821a61b68047de4ea03debfdf51cdf4d4b195558b959a032b20221008266b4d270e24414ecacb14c091a233134b918d37320c6557d60ad0a63544ac4\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n        {\r\n          \"tcId\" : 377,\r\n          \"comment\" : \"y-coordinate of the public key has many trailing 1's\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3046022100fae92dfcb2ee392d270af3a5739faa26d4f97bfd39ed3cbee4d29e26af3b206a02210093645c80605595e02c09a0dc4b17ac2a51846a728b3e8d60442ed6449fd3342b\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_y_coordinate_trail_1.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography\r\nlibrary.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/64", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/64/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/64/events", "html_url": "https://github.com/ofek/coincurve/issues/64", "id": 624358749, "node_id": "MDU6SXNzdWU2MjQzNTg3NDk=", "number": 64, "title": "ECDSA signature verification fails when the x coordinate contains too many trailing 1s", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:13:30Z", "updated_at": "2020-05-25T19:27:24Z", "closed_at": "2020-05-25T19:27:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when the x coordinate contain too many trailing 0s. You can check this\r\nwith the following teste vectors from Google Wycheproof:\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"0425afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dfffffffffa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35\",\r\n        \"wx\" : \"25afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dffffffff\",\r\n        \"wy\" : \"00fa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a0342000425afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dfffffffffa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEJa/WiayrrtZ8Hylt5ZQG+MVQ9XFGoLTs\\nLJeHbf/////6RqduUgMi37xJHsTwzBl0IPxOpYg9j23VPDVLxPZ8NQ==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 372,\r\n          \"comment\" : \"x-coordinate of the public key has many trailing 1's\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3045022062f48ef71ace27bf5a01834de1f7e3f948b9dce1ca1e911d5e13d3b104471d82022100a1570cc0f388768d3ba7df7f212564caa256ff825df997f21f72f5280d53011f\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n        {\r\n          \"tcId\" : 373,\r\n          \"comment\" : \"x-coordinate of the public key has many trailing 1's\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3046022100f6b0e2f6fe020cf7c0c20137434344ed7add6c4be51861e2d14cbda472a6ffb40221009be93722c1a3ad7d4cf91723700cb5486de5479d8c1b38ae4e8e5ba1638e9732\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_x_coordinate_trail_1.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography\r\nlibrary.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/63", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/63/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/63/events", "html_url": "https://github.com/ofek/coincurve/issues/63", "id": 624357754, "node_id": "MDU6SXNzdWU2MjQzNTc3NTQ=", "number": 63, "title": "ECDSA signature verification fails when the x contains too many trailing 0s", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:11:34Z", "updated_at": "2020-05-25T19:27:41Z", "closed_at": "2020-05-25T19:27:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when the x coordinate contain too many trailing 0s. You can check this\r\nwith the following teste vectors from Google Wycheproof:\r\n\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"046d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb\",\r\n        \"wx\" : \"6d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000\",\r\n        \"wy\" : \"00e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a034200046d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEbUp/YNR3Sk8KqLve25U8fup5CUB+MWR1\\nVmS8KAAAAADmWdNOTfONnoyeqt+6NmEsdpGVvobHeqw/NueLU4aA+w==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 378,\r\n          \"comment\" : \"x-coordinate of the public key has many trailing 0's\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"30450220176a2557566ffa518b11226694eb9802ed2098bfe278e5570fe1d5d7af18a943022100ed6e2095f12a03f2eaf6718f430ec5fe2829fd1646ab648701656fd31221b97d\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n        {\r\n          \"tcId\" : 379,\r\n          \"comment\" : \"x-coordinate of the public key has many trailing 0's\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3045022060be20c3dbc162dd34d26780621c104bbe5dace630171b2daef0d826409ee5c2022100bd8081b27762ab6e8f425956bf604e332fa066a99b59f87e27dc1198b26f5caa\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n        {\r\n          \"tcId\" : 380,\r\n          \"comment\" : \"x-coordinate of the public key has many trailing 0's\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3046022100edf03cf63f658883289a1a593d1007895b9f236d27c9c1f1313089aaed6b16ae022100e5b22903f7eb23adc2e01057e39b0408d495f694c83f306f1216c9bf87506074\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_x_coordinate_trail_0.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography\r\nlibrary.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/62", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/62/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/62/events", "html_url": "https://github.com/ofek/coincurve/issues/62", "id": 624356776, "node_id": "MDU6SXNzdWU2MjQzNTY3NzY=", "number": 62, "title": "ECDSA signature verification fails when the x coordinate is small", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:09:46Z", "updated_at": "2020-05-25T19:27:53Z", "closed_at": "2020-05-25T19:27:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when the x coordinate is small. You can check this\r\nwith the following teste vectors from Google Wycheproof:\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"04000000013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d\",\r\n        \"wx\" : \"013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0\",\r\n        \"wy\" : \"00f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a03420004000000013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEAAAAAT/SIkjWTZX3PCm0irSGMYUL5QP9\\nAPhGi18PcOD27nqkO8LG/SWx2CaSQcvdnbsNrJbcliMfQwcF+DhxfQ==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 369,\r\n          \"comment\" : \"x-coordinate of the public key is small\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3045022041efa7d3f05a0010675fcb918a45c693da4b348df21a59d6f9cd73e0d831d67a022100bbab52596c1a1d9484296cdc92cbf07e665259a13791a8fe8845e2c07cf3fc67\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n        {\r\n          \"tcId\" : 370,\r\n          \"comment\" : \"x-coordinate of the public key is small\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"3046022100b615698c358b35920dd883eca625a6c5f7563970cdfc378f8fe0cee17092144c022100da0b84cd94a41e049ef477aeac157b2a9bfa6b7ac8de06ed3858c5eede6ddd6d\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        },\r\n        {\r\n          \"tcId\" : 371,\r\n          \"comment\" : \"x-coordinate of the public key is small\",\r\n          \"msg\" : \"4d657373616765\",\r\n          \"sig\" : \"304602210087cf8c0eb82d44f69c60a2ff5457d3aaa322e7ec61ae5aecfd678ae1c1932b0e022100c522c4eea7eafb82914cbf5c1ff76760109f55ddddcf58274d41c9bc4311e06e\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_x_coordinate_small.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography\r\nlibrary.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/61", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/61/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/61/events", "html_url": "https://github.com/ofek/coincurve/issues/61", "id": 624355318, "node_id": "MDU6SXNzdWU2MjQzNTUzMTg=", "number": 61, "title": "ECDSA signature verification fails with large values of r and s", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:07:07Z", "updated_at": "2020-05-25T19:28:21Z", "closed_at": "2020-05-25T19:28:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when verifying a signature with large values of r\r\nand s. You can check this with the following test\r\nvectors from Google Wycheproof:\r\n\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"04bc97e7585eecad48e16683bc4091708e1a930c683fc47001d4b383594f2c4e22705989cf69daeadd4e4e4b8151ed888dfec20fb01728d89d56b3f38f2ae9c8c5\",\r\n        \"wx\" : \"00bc97e7585eecad48e16683bc4091708e1a930c683fc47001d4b383594f2c4e22\",\r\n        \"wy\" : \"705989cf69daeadd4e4e4b8151ed888dfec20fb01728d89d56b3f38f2ae9c8c5\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a03420004bc97e7585eecad48e16683bc4091708e1a930c683fc47001d4b383594f2c4e22705989cf69daeadd4e4e4b8151ed888dfec20fb01728d89d56b3f38f2ae9c8c5\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEvJfnWF7srUjhZoO8QJFwjhqTDGg/xHAB\\n1LODWU8sTiJwWYnPadrq3U5OS4FR7YiN/sIPsBco2J1Ws/OPKunIxQ==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 287,\r\n          \"comment\" : \"r,s are large\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"3046022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_large_r_s.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography library (ecdsa_secp256k1_sha256_test_large_r_s.json contains the test vectors described above).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/60", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/60/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/60/events", "html_url": "https://github.com/ofek/coincurve/issues/60", "id": 624353879, "node_id": "MDU6SXNzdWU2MjQzNTM4Nzk=", "number": 60, "title": "ECDSA signature verification fails for extreme k and s^{-1} values", "user": {"login": "adelapie", "id": 5389419, "node_id": "MDQ6VXNlcjUzODk0MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5389419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adelapie", "html_url": "https://github.com/adelapie", "followers_url": "https://api.github.com/users/adelapie/followers", "following_url": "https://api.github.com/users/adelapie/following{/other_user}", "gists_url": "https://api.github.com/users/adelapie/gists{/gist_id}", "starred_url": "https://api.github.com/users/adelapie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adelapie/subscriptions", "organizations_url": "https://api.github.com/users/adelapie/orgs", "repos_url": "https://api.github.com/users/adelapie/repos", "events_url": "https://api.github.com/users/adelapie/events{/privacy}", "received_events_url": "https://api.github.com/users/adelapie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T15:04:28Z", "updated_at": "2020-05-25T19:28:03Z", "closed_at": "2020-05-25T19:28:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "coincurve 13.0.0 fails when verifying a signature where k and s^{-1}\r\ncontain extreme values. You can check this with the following test\r\nvectors from Google Wycheproof:\r\n\r\n```\r\n{\r\n  \"algorithm\" : \"ECDSA\",\r\n  \"generatorVersion\" : \"0.8r12\",\r\n  \"numberOfTests\" : 380,\r\n  \"header\" : [\r\n\r\n    \"Test vectors of type EcdsaVerify are meant for the verification\",\r\n    \"of ASN encoded ECDSA signatures.\"\r\n  ],\r\n  \"notes\" : {\r\n    \"BER\" : \"This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.\",\r\n    \"EdgeCase\" : \"Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.\",\r\n    \"MissingZero\" : \"Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.\",\r\n    \"PointDuplication\" : \"Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.\"\r\n  },\r\n  \"schema\" : \"ecdsa_verify_schema.json\",\r\n  \"testGroups\" : [\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"04e762b8a219b4f180219cc7a9059245e4961bd191c03899789c7a34b89e8c138ec1533ef0419bb7376e0bfde9319d10a06968791d9ea0eed9c1ce6345aed9759e\",\r\n        \"wx\" : \"00e762b8a219b4f180219cc7a9059245e4961bd191c03899789c7a34b89e8c138e\",\r\n        \"wy\" : \"00c1533ef0419bb7376e0bfde9319d10a06968791d9ea0eed9c1ce6345aed9759e\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a03420004e762b8a219b4f180219cc7a9059245e4961bd191c03899789c7a34b89e8c138ec1533ef0419bb7376e0bfde9319d10a06968791d9ea0eed9c1ce6345aed9759e\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE52K4ohm08YAhnMepBZJF5JYb0ZHAOJl4\\nnHo0uJ6ME47BUz7wQZu3N24L/ekxnRCgaWh5HZ6g7tnBzmNFrtl1ng==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 344,\r\n          \"comment\" : \"extreme value for k and s^-1\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"3046022100c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5022100b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"049aedb0d281db164e130000c5697fae0f305ef848be6fffb43ac593fbb950e952fa6f633359bdcd82b56b0b9f965b037789d46b9a8141b791b2aefa713f96c175\",\r\n        \"wx\" : \"009aedb0d281db164e130000c5697fae0f305ef848be6fffb43ac593fbb950e952\",\r\n        \"wy\" : \"00fa6f633359bdcd82b56b0b9f965b037789d46b9a8141b791b2aefa713f96c175\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a034200049aedb0d281db164e130000c5697fae0f305ef848be6fffb43ac593fbb950e952fa6f633359bdcd82b56b0b9f965b037789d46b9a8141b791b2aefa713f96c175\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEmu2w0oHbFk4TAADFaX+uDzBe+Ei+b/+0\\nOsWT+7lQ6VL6b2MzWb3NgrVrC5+WWwN3idRrmoFBt5GyrvpxP5bBdQ==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 345,\r\n          \"comment\" : \"extreme value for k and s^-1\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"3046022100c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee502210099999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"04cdfb8c0f422e144e137c2412c86c171f5fe3fa3f5bbb544e9076288f3ced786e054fd0721b77c11c79beacb3c94211b0a19bda08652efeaf92513a3b0a163698\",\r\n        \"wx\" : \"00cdfb8c0f422e144e137c2412c86c171f5fe3fa3f5bbb544e9076288f3ced786e\",\r\n        \"wy\" : \"054fd0721b77c11c79beacb3c94211b0a19bda08652efeaf92513a3b0a163698\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a03420004cdfb8c0f422e144e137c2412c86c171f5fe3fa3f5bbb544e9076288f3ced786e054fd0721b77c11c79beacb3c94211b0a19bda08652efeaf92513a3b0a163698\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEzfuMD0IuFE4TfCQSyGwXH1/j+j9bu1RO\\nkHYojzzteG4FT9ByG3fBHHm+rLPJQhGwoZvaCGUu/q+SUTo7ChY2mA==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 350,\r\n          \"comment\" : \"extreme value for k and s^-1\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"3045022079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798022100b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"key\" : {\r\n        \"curve\" : \"secp256k1\",\r\n        \"keySize\" : 256,\r\n        \"type\" : \"EcPublicKey\",\r\n        \"uncompressed\" : \"0473598a6a1c68278fa6bfd0ce4064e68235bc1c0f6b20a928108be336730f87e3cbae612519b5032ecc85aed811271a95fe7939d5d3460140ba318f4d14aba31d\",\r\n        \"wx\" : \"73598a6a1c68278fa6bfd0ce4064e68235bc1c0f6b20a928108be336730f87e3\",\r\n        \"wy\" : \"00cbae612519b5032ecc85aed811271a95fe7939d5d3460140ba318f4d14aba31d\"\r\n      },\r\n      \"keyDer\" : \"3056301006072a8648ce3d020106052b8104000a0342000473598a6a1c68278fa6bfd0ce4064e68235bc1c0f6b20a928108be336730f87e3cbae612519b5032ecc85aed811271a95fe7939d5d3460140ba318f4d14aba31d\",\r\n      \"keyPem\" : \"-----BEGIN PUBLIC KEY-----\\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEc1mKahxoJ4+mv9DOQGTmgjW8HA9rIKko\\nEIvjNnMPh+PLrmElGbUDLsyFrtgRJxqV/nk51dNGAUC6MY9NFKujHQ==\\n-----END PUBLIC KEY-----\",\r\n      \"sha\" : \"SHA-256\",\r\n      \"type\" : \"EcdsaVerify\",\r\n      \"tests\" : [\r\n        {\r\n          \"tcId\" : 351,\r\n          \"comment\" : \"extreme value for k and s^-1\",\r\n          \"msg\" : \"313233343030\",\r\n          \"sig\" : \"3045022079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179802210099999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a\",\r\n          \"result\" : \"valid\",\r\n          \"flags\" : []\r\n        }\r\n      ]      \r\n    }  \r\n  ]\r\n}\r\n```\r\n\r\nand proof of concept:\r\n\r\n```\r\nfrom coincurve.keys import PrivateKey, PublicKey\r\nfrom coincurve.utils import bytes_to_int, int_to_bytes_padded, verify_signature\r\n\r\nfrom cryptography import exceptions\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\nfrom cryptography.hazmat.primitives.asymmetric import ec\r\nfrom cryptography.hazmat.primitives.asymmetric import utils\r\n\r\nfrom hashlib import sha256\r\n\r\nimport json\r\n\r\n\r\ndef main():\r\n\r\n    with open(\"ecdsa_secp256k1_sha256_test_extreme_k_s_minus_1.json\", \"r\") as read_file:\r\n        secp256k1_sha256_test = json.load(read_file)\r\n\r\n    for test_group in secp256k1_sha256_test[\"testGroups\"]:\r\n        comp_str = test_group[\"key\"][\"uncompressed\"]\r\n        co_x = test_group[\"key\"][\"wx\"]\r\n        co_y = test_group[\"key\"][\"wy\"]\r\n\r\n        public_key = PublicKey(bytes.fromhex(comp_str))\r\n\r\n    \r\n        for test in test_group[\"tests\"]:\r\n            print(\"Loading test\", test[\"tcId\"], \"with result:\", test[\"result\"], \"\\n\")\r\n\r\n            ### using python coincurve\r\n\r\n            signature = bytes.fromhex(test[\"sig\"])\r\n            message = bytes.fromhex(test[\"msg\"])\r\n            print(\"\\tcoincurve: \", public_key.verify(signature, message))\r\n\r\n            ### using python cryptography \r\n\r\n            curve = ec.SECP256K1()\r\n            algo = ec.ECDSA(hashes.SHA256())\r\n\r\n            pubnum = ec.EllipticCurvePublicNumbers(int(co_x, 16), int(co_y, 16), curve)\r\n            \r\n            data = bytes(bytearray.fromhex(test[\"msg\"]))\r\n            public_key_2 = pubnum.public_key(default_backend())\r\n            signature = bytes(bytearray.fromhex(test[\"sig\"]))\r\n            \r\n            try:\r\n                public_key_2.verify(signature, data, ec.ECDSA(hashes.SHA256()))\r\n\r\n            except exceptions.InvalidSignature:\r\n                print(\"\\tcryptography.io: False\")\r\n            else:\r\n                print(\"\\tcryptography.io: True\")\r\n  \r\nif __name__ == \"__main__\":\r\n    main()\r\n```    \r\n    \r\n\r\nwhere I compare the output of coincurve with the python cryptography library (using ecdsa_secp256k1_sha256_test_extreme_k_s_minus_1.json with the test vectors described above).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/59", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/59/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/59/events", "html_url": "https://github.com/ofek/coincurve/issues/59", "id": 617000493, "node_id": "MDU6SXNzdWU2MTcwMDA0OTM=", "number": 59, "title": "urandom is not best for cryptography", "user": {"login": "mrx23dot", "id": 4163396, "node_id": "MDQ6VXNlcjQxNjMzOTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4163396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrx23dot", "html_url": "https://github.com/mrx23dot", "followers_url": "https://api.github.com/users/mrx23dot/followers", "following_url": "https://api.github.com/users/mrx23dot/following{/other_user}", "gists_url": "https://api.github.com/users/mrx23dot/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrx23dot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrx23dot/subscriptions", "organizations_url": "https://api.github.com/users/mrx23dot/orgs", "repos_url": "https://api.github.com/users/mrx23dot/repos", "events_url": "https://api.github.com/users/mrx23dot/events{/privacy}", "received_events_url": "https://api.github.com/users/mrx23dot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T22:21:44Z", "updated_at": "2020-05-12T23:06:11Z", "closed_at": "2020-05-12T23:06:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "utils.py / urandom is less secure than import secret\r\n\r\n\"In particularly, secrets should be used in preference to the default\r\npseudo-random number generator in the random module, which is designed\r\nfor modelling and simulation, not security or cryptography.\"\r\nhttps://docs.python.org/3/library/secrets.html\r\n \r\nusage:\r\nsecrets.token_bytes(16) -> b'\\xebr\\x17D*t\\xae\\xd4\\xe3S\\xb6\\xe2\\xebP1\\x8b'\r\nsecrets.token_hex(16)  ->'f9bf78b9a18ce6d46a0cd2b0b86df9da'\r\ninstead of for i in range(16): secrets.token_bytes(1)\r\n \r\nI wouldn't compromise security for speed. Or you could have a parameter unsecure=False).\r\nPeople already building on top of this lib.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/57", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/57/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/57/events", "html_url": "https://github.com/ofek/coincurve/issues/57", "id": 538870009, "node_id": "MDU6SXNzdWU1Mzg4NzAwMDk=", "number": 57, "title": "The setup_support.py function _find_lib can return false positives", "user": {"login": "sysrabbit", "id": 38366556, "node_id": "MDQ6VXNlcjM4MzY2NTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/38366556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sysrabbit", "html_url": "https://github.com/sysrabbit", "followers_url": "https://api.github.com/users/sysrabbit/followers", "following_url": "https://api.github.com/users/sysrabbit/following{/other_user}", "gists_url": "https://api.github.com/users/sysrabbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/sysrabbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sysrabbit/subscriptions", "organizations_url": "https://api.github.com/users/sysrabbit/orgs", "repos_url": "https://api.github.com/users/sysrabbit/repos", "events_url": "https://api.github.com/users/sysrabbit/events{/privacy}", "received_events_url": "https://api.github.com/users/sysrabbit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-17T06:42:25Z", "updated_at": "2019-12-18T00:58:28Z", "closed_at": "2019-12-18T00:58:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As the title states, setup_support.py has a function _find_lib which can return false positives, this results in build errors.\r\n\r\nI run Arch Linux, a package called [libsecp256k1](https://www.archlinux.org/packages/community/x86_64/libsecp256k1/) exists, however it does not include the ecdh features as they are still experimental. However, the setup.py script will still use the system library to build this because it only checks if secp256k1 is installed, not if it has ecdh enabled.\r\n\r\nThis will result in a build error like such\r\n\r\n```\r\n$ python setup.py build\r\nWarning: 'keywords' should be a list, got type 'tuple'\r\nrunning build\r\nrunning build_py\r\nrunning build_ext\r\ngenerating cffi module 'build/temp.linux-x86_64-3.8/_libsecp256k1.c'\r\nalready up-to-date\r\nbuilding '_libsecp256k1' extension\r\ngcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -march=x86-64 -mtune=generic -O3 -pipe -fno-plt -march=x86-64 -mtune=generic -O3 -pipe -fno-plt -march=x86-64 -mtune=generic -O3 -pipe -fno-plt -fPIC -I/usr/include/python3.8 -c build/temp.linux-x86_64-3.8/_libsecp256k1.c -o build/temp.linux-x86_64-3.8/build/temp.linux-x86_64-3.8/_libsecp256k1.o\r\nbuild/temp.linux-x86_64-3.8/_libsecp256k1.c:493:10: fatal error: secp256k1_ecdh.h: No such file or directory\r\n  493 | #include <secp256k1_ecdh.h>\r\n      |          ^~~~~~~~~~~~~~~~~~\r\ncompilation terminated.\r\nerror: command 'gcc' failed with exit status 1\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/53", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/53/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/53/events", "html_url": "https://github.com/ofek/coincurve/issues/53", "id": 506568077, "node_id": "MDU6SXNzdWU1MDY1NjgwNzc=", "number": 53, "title": "Throwing Error in reading openssl generated private key", "user": {"login": "sagarkaurav", "id": 8871080, "node_id": "MDQ6VXNlcjg4NzEwODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8871080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagarkaurav", "html_url": "https://github.com/sagarkaurav", "followers_url": "https://api.github.com/users/sagarkaurav/followers", "following_url": "https://api.github.com/users/sagarkaurav/following{/other_user}", "gists_url": "https://api.github.com/users/sagarkaurav/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagarkaurav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagarkaurav/subscriptions", "organizations_url": "https://api.github.com/users/sagarkaurav/orgs", "repos_url": "https://api.github.com/users/sagarkaurav/repos", "events_url": "https://api.github.com/users/sagarkaurav/events{/privacy}", "received_events_url": "https://api.github.com/users/sagarkaurav/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-10-14T10:27:30Z", "updated_at": "2019-10-22T05:59:10Z", "closed_at": "2019-10-22T05:46:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "**package version**\r\n**coincurve==12.0.0**\r\n\r\n** openssl version **\r\n** OpenSSL 1.1.1  11 Sep 2018 **\r\n\r\nOpenssl command to generate private key\r\n```bash\r\n10107  openssl ecparam -name secp256k1 -genkey -noout -out p_key.pem\r\n```\r\npython script to read the private key\r\n```python3\r\nfrom coincurve import PrivateKey\r\n\r\nwith open(\"p_key.pem\", \"r\") as pk:\r\n    PrivateKey.from_pem(pk.read().encode())\r\n```\r\nError while running the script\r\n```\r\nTraceback (most recent call last):\r\n  File \"r.py\", line 4, in <module>\r\n    PrivateKey.from_pem(pk.read().encode())\r\n  File \"/home/sagar/experiments/ecdh/ecdh_py/.venv/lib/python3.6/site-packages/coincurve/keys.py\", line 145, in from_pem\r\n    int_to_bytes_padded(PrivateKeyInfo.load(pem_to_der(pem)).native['private_key']['private_key']), context\r\n  File \"/home/sagar/experiments/ecdh/ecdh_py/.venv/lib/python3.6/site-packages/asn1crypto/core.py\", line 4022, in native\r\n    self._parse_children(recurse=True)\r\n  File \"/home/sagar/experiments/ecdh/ecdh_py/.venv/lib/python3.6/site-packages/asn1crypto/core.py\", line 3966, in _parse_children\r\n    raise e\r\n  File \"/home/sagar/experiments/ecdh/ecdh_py/.venv/lib/python3.6/site-packages/asn1crypto/core.py\", line 3938, in _parse_children\r\n    child = _build(*child)\r\n  File \"/home/sagar/experiments/ecdh/ecdh_py/.venv/lib/python3.6/site-packages/asn1crypto/core.py\", line 5535, in _build\r\n    METHOD_NUM_TO_NAME_MAP.get(method, method)\r\nValueError: Error parsing asn1crypto.keys.PrivateKeyAlgorithm - method should have been constructed, but primitive was found\r\n    while parsing asn1crypto.keys.PrivateKeyInfo\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/50", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/50/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/50/events", "html_url": "https://github.com/ofek/coincurve/issues/50", "id": 501075953, "node_id": "MDU6SXNzdWU1MDEwNzU5NTM=", "number": 50, "title": "specification for ECDH function on https://pypi.org/project/coincurve/", "user": {"login": "olehnikolaiev", "id": 42572817, "node_id": "MDQ6VXNlcjQyNTcyODE3", "avatar_url": "https://avatars0.githubusercontent.com/u/42572817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olehnikolaiev", "html_url": "https://github.com/olehnikolaiev", "followers_url": "https://api.github.com/users/olehnikolaiev/followers", "following_url": "https://api.github.com/users/olehnikolaiev/following{/other_user}", "gists_url": "https://api.github.com/users/olehnikolaiev/gists{/gist_id}", "starred_url": "https://api.github.com/users/olehnikolaiev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olehnikolaiev/subscriptions", "organizations_url": "https://api.github.com/users/olehnikolaiev/orgs", "repos_url": "https://api.github.com/users/olehnikolaiev/repos", "events_url": "https://api.github.com/users/olehnikolaiev/events{/privacy}", "received_events_url": "https://api.github.com/users/olehnikolaiev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-01T18:41:40Z", "updated_at": "2019-10-06T02:20:34Z", "closed_at": "2019-10-06T02:20:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've just read the specification on your website https://pypi.org/project/coincurve/ and mentioned that the result of this function is `sha256(x)`, where `x` is the first coordinate of elliptic curve's point which corresponds to `my_private_key * other's_party_public_key`. After that I went through the source code of https://github.com/bitcoin-core/secp256k1 which is used in your implementation. But they use completely different algorithm - in particular they do `sha256(x,y)` in some way. Can you please fix me if I wrong anywhere?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/46", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/46/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/46/events", "html_url": "https://github.com/ofek/coincurve/issues/46", "id": 443437082, "node_id": "MDU6SXNzdWU0NDM0MzcwODI=", "number": 46, "title": "MacOS build issue with Coincurve 9.0.0", "user": {"login": "AdamISZ", "id": 4278257, "node_id": "MDQ6VXNlcjQyNzgyNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4278257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdamISZ", "html_url": "https://github.com/AdamISZ", "followers_url": "https://api.github.com/users/AdamISZ/followers", "following_url": "https://api.github.com/users/AdamISZ/following{/other_user}", "gists_url": "https://api.github.com/users/AdamISZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdamISZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions", "organizations_url": "https://api.github.com/users/AdamISZ/orgs", "repos_url": "https://api.github.com/users/AdamISZ/repos", "events_url": "https://api.github.com/users/AdamISZ/events{/privacy}", "received_events_url": "https://api.github.com/users/AdamISZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-13T14:39:44Z", "updated_at": "2019-05-13T20:20:39Z", "closed_at": "2019-05-13T20:14:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seems there is a problem with finding `asn1crypto`, see travis log: https://travis-ci.org/JoinMarket-Org/joinmarket-clientserver/jobs/531818414#L708-L718", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/29", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/29/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/29/events", "html_url": "https://github.com/ofek/coincurve/issues/29", "id": 372215016, "node_id": "MDU6SXNzdWUzNzIyMTUwMTY=", "number": 29, "title": "Regenerating PublicKey from signature and message fails", "user": {"login": "randomshinichi", "id": 9956122, "node_id": "MDQ6VXNlcjk5NTYxMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/9956122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomshinichi", "html_url": "https://github.com/randomshinichi", "followers_url": "https://api.github.com/users/randomshinichi/followers", "following_url": "https://api.github.com/users/randomshinichi/following{/other_user}", "gists_url": "https://api.github.com/users/randomshinichi/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomshinichi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomshinichi/subscriptions", "organizations_url": "https://api.github.com/users/randomshinichi/orgs", "repos_url": "https://api.github.com/users/randomshinichi/repos", "events_url": "https://api.github.com/users/randomshinichi/events{/privacy}", "received_events_url": "https://api.github.com/users/randomshinichi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-20T14:04:29Z", "updated_at": "2018-10-21T01:41:05Z", "closed_at": "2018-10-21T01:41:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nprivate_key = PrivateKey()\r\npublic_key = private_key.public_key\r\n\r\nsignature = private_key.sign(message, hasher=keccak)\r\nprint(signature.hex())\r\n\r\npublic_key_2 = PublicKey.from_signature_and_message(signature, message, hasher=keccak)\r\n```\r\nThe last line fails with \r\n```\r\n    raise ValueError(\"Serialized signature must be 65 bytes long.\")\r\nValueError: Serialized signature must be 65 bytes long.\r\n```\r\nWhich makes no sense, because according to the docs, PrivateKey.signature() returns anything between 68-71 bytes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/26", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/26/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/26/events", "html_url": "https://github.com/ofek/coincurve/issues/26", "id": 362904699, "node_id": "MDU6SXNzdWUzNjI5MDQ2OTk=", "number": 26, "title": "Name one!", "user": {"login": "adlai", "id": 94171, "node_id": "MDQ6VXNlcjk0MTcx", "avatar_url": "https://avatars3.githubusercontent.com/u/94171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adlai", "html_url": "https://github.com/adlai", "followers_url": "https://api.github.com/users/adlai/followers", "following_url": "https://api.github.com/users/adlai/following{/other_user}", "gists_url": "https://api.github.com/users/adlai/gists{/gist_id}", "starred_url": "https://api.github.com/users/adlai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adlai/subscriptions", "organizations_url": "https://api.github.com/users/adlai/orgs", "repos_url": "https://api.github.com/users/adlai/repos", "events_url": "https://api.github.com/users/adlai/events{/privacy}", "received_events_url": "https://api.github.com/users/adlai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-23T01:31:22Z", "updated_at": "2018-11-24T16:00:14Z", "closed_at": "2018-11-24T16:00:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please elaborate what \"possible future timing attacks\" are mitigated by [the separation of Context seed randomization into its own method](https://github.com/ofek/coincurve/blob/91a1c07347028d4ac4b00cbee6d94951fbfca3ff/coincurve/context.py#L22).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/22", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/22/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/22/events", "html_url": "https://github.com/ofek/coincurve/issues/22", "id": 341348072, "node_id": "MDU6SXNzdWUzNDEzNDgwNzI=", "number": 22, "title": "Installation results in \"tests\" as a top-level package ", "user": {"login": "KPrasch", "id": 679404, "node_id": "MDQ6VXNlcjY3OTQwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/679404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KPrasch", "html_url": "https://github.com/KPrasch", "followers_url": "https://api.github.com/users/KPrasch/followers", "following_url": "https://api.github.com/users/KPrasch/following{/other_user}", "gists_url": "https://api.github.com/users/KPrasch/gists{/gist_id}", "starred_url": "https://api.github.com/users/KPrasch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KPrasch/subscriptions", "organizations_url": "https://api.github.com/users/KPrasch/orgs", "repos_url": "https://api.github.com/users/KPrasch/repos", "events_url": "https://api.github.com/users/KPrasch/events{/privacy}", "received_events_url": "https://api.github.com/users/KPrasch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-15T20:04:42Z", "updated_at": "2018-07-29T17:23:10Z", "closed_at": "2018-07-29T17:23:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Installation of coincurve with pip (a sub-dependency of nucypher) can install it's own top-level test directory causing `import tests` to import the coincurve tests as a package.\r\n\r\nsee our Issue here:  https://github.com/nucypher/nucypher/issues/364\r\n\r\n##### Isolated Coincurve Installation\r\n```\r\nkieran@pegasus:~/Git/brokenCoinCurve$ pipenv install coincurve \r\nCreating a virtualenv for this project...\r\n...\r\n\r\nkieran@pegasus:~/Git/brokenCoinCurve$ pipenv run python\r\nPython 3.6.5 (default, Apr  1 2018, 05:46:30) \r\n[GCC 7.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import tests\r\n>>> tests.__file__\r\n'/home/kieran/.local/share/virtualenvs/brokenCoinCurve-mYIv09Xr/lib/python3.6/site-packages/tests/__init__.py'\r\n>>> quit()\r\n\r\nkieran@pegasus:~/Git/brokenCoinCurve$ ls -la /home/kieran/.local/share/virtualenvs/brokenCoinCurve-mYIv09Xr/lib/python3.6/site-packages/tests\r\ntotal 32\r\ndrwxr-xr-x  3 kieran kieran 4096 Jul 15 12:38 .\r\ndrwxr-xr-x 20 kieran kieran 4096 Jul 15 12:38 ..\r\n-rw-r--r--  1 kieran kieran    0 Jul 15 12:38 __init__.py\r\ndrwxr-xr-x  2 kieran kieran 4096 Jul 15 12:38 __pycache__\r\n-rw-r--r--  1 kieran kieran 3002 Jul 15 12:38 samples.py\r\n-rw-r--r--  1 kieran kieran  166 Jul 15 12:38 test_ecdsa.py\r\n-rw-r--r--  1 kieran kieran 4792 Jul 15 12:38 test_keys.py\r\n-rw-r--r--  1 kieran kieran 2464 Jul 15 12:38 test_utils.py\r\n\r\n```\r\n\r\nThank you! :snake:  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/19", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/19/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/19/events", "html_url": "https://github.com/ofek/coincurve/issues/19", "id": 338105407, "node_id": "MDU6SXNzdWUzMzgxMDU0MDc=", "number": 19, "title": "build wheels for Python 3.7", "user": {"login": "combstraight", "id": 29720258, "node_id": "MDQ6VXNlcjI5NzIwMjU4", "avatar_url": "https://avatars2.githubusercontent.com/u/29720258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/combstraight", "html_url": "https://github.com/combstraight", "followers_url": "https://api.github.com/users/combstraight/followers", "following_url": "https://api.github.com/users/combstraight/following{/other_user}", "gists_url": "https://api.github.com/users/combstraight/gists{/gist_id}", "starred_url": "https://api.github.com/users/combstraight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/combstraight/subscriptions", "organizations_url": "https://api.github.com/users/combstraight/orgs", "repos_url": "https://api.github.com/users/combstraight/repos", "events_url": "https://api.github.com/users/combstraight/events{/privacy}", "received_events_url": "https://api.github.com/users/combstraight/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-04T01:56:06Z", "updated_at": "2018-08-22T22:28:57Z", "closed_at": "2018-08-22T22:28:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhen I use the command:  \r\n\r\npython3 -m pip install coincurve,\r\n\r\nI get the error:\r\n\r\nCommand \"/Library/Frameworks/Python.framework/Versions/3.7/bin/python3 -u -c \"import setuptools, tokenize;__file__='/private/var/folders/jt/_qtff9ts79gg38pn1qf7cjfh0000gn/T/pip-install-0bxfz20t/coincurve/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /private/var/folders/jt/_qtff9ts79gg38pn1qf7cjfh0000gn/T/pip-record-ylcgs23y/install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in /private/var/folders/jt/_qtff9ts79gg38pn1qf7cjfh0000gn/T/pip-install-0bxfz20t/coincurve/\r\n\r\n\r\nIt installs fine onto python 2.x but I need it to install to my python 3.x.  Please advice.  Thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/16", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/16/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/16/events", "html_url": "https://github.com/ofek/coincurve/issues/16", "id": 315498935, "node_id": "MDU6SXNzdWUzMTU0OTg5MzU=", "number": 16, "title": "Can't install: cffi issue", "user": {"login": "wschwab", "id": 31592931, "node_id": "MDQ6VXNlcjMxNTkyOTMx", "avatar_url": "https://avatars3.githubusercontent.com/u/31592931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschwab", "html_url": "https://github.com/wschwab", "followers_url": "https://api.github.com/users/wschwab/followers", "following_url": "https://api.github.com/users/wschwab/following{/other_user}", "gists_url": "https://api.github.com/users/wschwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschwab/subscriptions", "organizations_url": "https://api.github.com/users/wschwab/orgs", "repos_url": "https://api.github.com/users/wschwab/repos", "events_url": "https://api.github.com/users/wschwab/events{/privacy}", "received_events_url": "https://api.github.com/users/wschwab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-18T14:15:21Z", "updated_at": "2018-07-21T14:43:09Z", "closed_at": "2018-05-15T13:51:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Error Message:** \r\n`pkg_resources.DistributionNotFound: The 'cffi>=1.3.0' distribution was not found and is required by the application`\r\n**Problem:**\r\nI have `cffi 1.10.0-1`\r\n**Suggestion:**\r\nline 253 in setup.py requires `'cffi>=1.3.0'`. Maybe it thinks 1 < 3 instead of seeing that it's 10 (Or that 1.3>1.10, which it really sort of is.) I wouldn't be sure how to write it to make sure that it's over 1.3, but still includes 1.10 and up.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/15", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/15/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/15/events", "html_url": "https://github.com/ofek/coincurve/issues/15", "id": 296538417, "node_id": "MDU6SXNzdWUyOTY1Mzg0MTc=", "number": 15, "title": "basic usage help", "user": {"login": "hevnsnt", "id": 4072860, "node_id": "MDQ6VXNlcjQwNzI4NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4072860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hevnsnt", "html_url": "https://github.com/hevnsnt", "followers_url": "https://api.github.com/users/hevnsnt/followers", "following_url": "https://api.github.com/users/hevnsnt/following{/other_user}", "gists_url": "https://api.github.com/users/hevnsnt/gists{/gist_id}", "starred_url": "https://api.github.com/users/hevnsnt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hevnsnt/subscriptions", "organizations_url": "https://api.github.com/users/hevnsnt/orgs", "repos_url": "https://api.github.com/users/hevnsnt/repos", "events_url": "https://api.github.com/users/hevnsnt/events{/privacy}", "received_events_url": "https://api.github.com/users/hevnsnt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-12T21:55:54Z", "updated_at": "2018-02-12T22:35:17Z", "closed_at": "2018-02-12T22:35:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "awesome lib, thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/14", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/14/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/14/events", "html_url": "https://github.com/ofek/coincurve/issues/14", "id": 293598506, "node_id": "MDU6SXNzdWUyOTM1OTg1MDY=", "number": 14, "title": "Pin upstream version used", "user": {"login": "ulope", "id": 55078, "node_id": "MDQ6VXNlcjU1MDc4", "avatar_url": "https://avatars0.githubusercontent.com/u/55078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ulope", "html_url": "https://github.com/ulope", "followers_url": "https://api.github.com/users/ulope/followers", "following_url": "https://api.github.com/users/ulope/following{/other_user}", "gists_url": "https://api.github.com/users/ulope/gists{/gist_id}", "starred_url": "https://api.github.com/users/ulope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ulope/subscriptions", "organizations_url": "https://api.github.com/users/ulope/orgs", "repos_url": "https://api.github.com/users/ulope/repos", "events_url": "https://api.github.com/users/ulope/events{/privacy}", "received_events_url": "https://api.github.com/users/ulope/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-01T16:36:14Z", "updated_at": "2018-02-03T10:09:06Z", "closed_at": "2018-02-03T04:47:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently setup.py points to the master tarball of libsecp256k1. This is ok in most cases because the wheels will only be built once for a specific version, but there are still some cases where wheels either don't work or aren't allowed by policy. \r\n\r\nIt would be good to make sure these cases also have repeatable builds by pointing to a concrete commit / tag of the upstream library.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/13", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/13/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/13/events", "html_url": "https://github.com/ofek/coincurve/issues/13", "id": 293350457, "node_id": "MDU6SXNzdWUyOTMzNTA0NTc=", "number": 13, "title": "Signatures are not compatible with other libraries", "user": {"login": "keyvank", "id": 4275654, "node_id": "MDQ6VXNlcjQyNzU2NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4275654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keyvank", "html_url": "https://github.com/keyvank", "followers_url": "https://api.github.com/users/keyvank/followers", "following_url": "https://api.github.com/users/keyvank/following{/other_user}", "gists_url": "https://api.github.com/users/keyvank/gists{/gist_id}", "starred_url": "https://api.github.com/users/keyvank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keyvank/subscriptions", "organizations_url": "https://api.github.com/users/keyvank/orgs", "repos_url": "https://api.github.com/users/keyvank/repos", "events_url": "https://api.github.com/users/keyvank/events{/privacy}", "received_events_url": "https://api.github.com/users/keyvank/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-31T23:31:00Z", "updated_at": "2018-02-01T01:16:11Z", "closed_at": "2018-02-01T01:16:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for this great project!\r\n\r\nThe verify function sometimes returns False when I pass signatures of other libraries such as [python-ecdsa](https://github.com/warner/python-ecdsa) or [elliptic](https://github.com/indutny/elliptic) in JavaScript.\r\nAnother thing is that the sign function doesn't return signatures with more than 71 bytes. (As specified in your documentations and [Bitcoin Wiki](https://en.bitcoin.it/wiki/Elliptic_Curve_Digital_Signature_Algorithm) it is possible to have signatures with 72 bytes in size)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/12", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/12/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/12/events", "html_url": "https://github.com/ofek/coincurve/issues/12", "id": 291261900, "node_id": "MDU6SXNzdWUyOTEyNjE5MDA=", "number": 12, "title": "Support for different encodings?", "user": {"login": "aneeshvaidya", "id": 4635099, "node_id": "MDQ6VXNlcjQ2MzUwOTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4635099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aneeshvaidya", "html_url": "https://github.com/aneeshvaidya", "followers_url": "https://api.github.com/users/aneeshvaidya/followers", "following_url": "https://api.github.com/users/aneeshvaidya/following{/other_user}", "gists_url": "https://api.github.com/users/aneeshvaidya/gists{/gist_id}", "starred_url": "https://api.github.com/users/aneeshvaidya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aneeshvaidya/subscriptions", "organizations_url": "https://api.github.com/users/aneeshvaidya/orgs", "repos_url": "https://api.github.com/users/aneeshvaidya/repos", "events_url": "https://api.github.com/users/aneeshvaidya/events{/privacy}", "received_events_url": "https://api.github.com/users/aneeshvaidya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-24T15:59:40Z", "updated_at": "2018-08-20T11:26:17Z", "closed_at": "2018-01-24T16:55:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know if this is in scope for this project, but would it make sense to support different encodings of keys as `pybitcointools` does? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/11", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/11/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/11/events", "html_url": "https://github.com/ofek/coincurve/issues/11", "id": 286265135, "node_id": "MDU6SXNzdWUyODYyNjUxMzU=", "number": 11, "title": "can I remove constant time?", "user": {"login": "josephernest", "id": 6168083, "node_id": "MDQ6VXNlcjYxNjgwODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6168083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephernest", "html_url": "https://github.com/josephernest", "followers_url": "https://api.github.com/users/josephernest/followers", "following_url": "https://api.github.com/users/josephernest/following{/other_user}", "gists_url": "https://api.github.com/users/josephernest/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephernest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephernest/subscriptions", "organizations_url": "https://api.github.com/users/josephernest/orgs", "repos_url": "https://api.github.com/users/josephernest/repos", "events_url": "https://api.github.com/users/josephernest/events{/privacy}", "received_events_url": "https://api.github.com/users/josephernest/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-05T11:37:12Z", "updated_at": "2018-01-23T04:17:21Z", "closed_at": "2018-01-05T14:40:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way @ofek  to remove the \"constant time\" slowing code from libsecp256k1 and/or coincurve? I'd like to speed up vanity addresses generation.\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/9", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/9/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/9/events", "html_url": "https://github.com/ofek/coincurve/issues/9", "id": 257357159, "node_id": "MDU6SXNzdWUyNTczNTcxNTk=", "number": 9, "title": "Generated ECDH key does not match what's generated by pyelliptic", "user": {"login": "gsalgado", "id": 412274, "node_id": "MDQ6VXNlcjQxMjI3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/412274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsalgado", "html_url": "https://github.com/gsalgado", "followers_url": "https://api.github.com/users/gsalgado/followers", "following_url": "https://api.github.com/users/gsalgado/following{/other_user}", "gists_url": "https://api.github.com/users/gsalgado/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsalgado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsalgado/subscriptions", "organizations_url": "https://api.github.com/users/gsalgado/orgs", "repos_url": "https://api.github.com/users/gsalgado/repos", "events_url": "https://api.github.com/users/gsalgado/events{/privacy}", "received_events_url": "https://api.github.com/users/gsalgado/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-09-13T12:09:42Z", "updated_at": "2017-09-14T18:02:48Z", "closed_at": "2017-09-13T17:12:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use coincurve on a P2P client for Ethereum. I'm starting from the pydevp2p code, which uses pyelliptic, and I just found out the ECDH keys generated by coincurve are different from those generated by pyelliptic. I was assuming I could change [this pydevp2p test that ensures the generated ECDH keys match certain static values ](https://github.com/ethereum/pydevp2p/blob/develop/devp2p/tests/test_ecies.py#L60-L67) to use coincurve directly and it'd just work, but [the modified version](http://sprunge.us/HCGI) of that test [does not generate the expected ECDH key](http://sprunge.us/ZHEO)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/6", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/6/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/6/events", "html_url": "https://github.com/ofek/coincurve/issues/6", "id": 249186382, "node_id": "MDU6SXNzdWUyNDkxODYzODI=", "number": 6, "title": "\"Endomorphism optimization is enabled\"", "user": {"login": "gmaxwell", "id": 858454, "node_id": "MDQ6VXNlcjg1ODQ1NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/858454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmaxwell", "html_url": "https://github.com/gmaxwell", "followers_url": "https://api.github.com/users/gmaxwell/followers", "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}", "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions", "organizations_url": "https://api.github.com/users/gmaxwell/orgs", "repos_url": "https://api.github.com/users/gmaxwell/repos", "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}", "received_events_url": "https://api.github.com/users/gmaxwell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-09T23:00:19Z", "updated_at": "2017-08-10T02:42:49Z", "closed_at": "2017-08-10T02:42:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please don't. This optimization is potentially restricted by patents.  It's experimental for a reason.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/5", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/5/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/5/events", "html_url": "https://github.com/ofek/coincurve/issues/5", "id": 244247423, "node_id": "MDU6SXNzdWUyNDQyNDc0MjM=", "number": 5, "title": "Limited keyspace", "user": {"login": "ofek", "id": 9677399, "node_id": "MDQ6VXNlcjk2NzczOTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/9677399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ofek", "html_url": "https://github.com/ofek", "followers_url": "https://api.github.com/users/ofek/followers", "following_url": "https://api.github.com/users/ofek/following{/other_user}", "gists_url": "https://api.github.com/users/ofek/gists{/gist_id}", "starred_url": "https://api.github.com/users/ofek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ofek/subscriptions", "organizations_url": "https://api.github.com/users/ofek/orgs", "repos_url": "https://api.github.com/users/ofek/repos", "events_url": "https://api.github.com/users/ofek/events{/privacy}", "received_events_url": "https://api.github.com/users/ofek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-07-20T05:14:17Z", "updated_at": "2017-08-10T01:50:37Z", "closed_at": "2017-07-20T05:14:35Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Validation of user-provided secrets should compare by integer representation. Otherwise, byte strings of length greater than or less than 32 could cause unexpected results.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/4", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/4/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/4/events", "html_url": "https://github.com/ofek/coincurve/issues/4", "id": 232915623, "node_id": "MDU6SXNzdWUyMzI5MTU2MjM=", "number": 4, "title": "Credit previous contributors ", "user": {"login": "ulope", "id": 55078, "node_id": "MDQ6VXNlcjU1MDc4", "avatar_url": "https://avatars0.githubusercontent.com/u/55078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ulope", "html_url": "https://github.com/ulope", "followers_url": "https://api.github.com/users/ulope/followers", "following_url": "https://api.github.com/users/ulope/following{/other_user}", "gists_url": "https://api.github.com/users/ulope/gists{/gist_id}", "starred_url": "https://api.github.com/users/ulope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ulope/subscriptions", "organizations_url": "https://api.github.com/users/ulope/orgs", "repos_url": "https://api.github.com/users/ulope/repos", "events_url": "https://api.github.com/users/ulope/events{/privacy}", "received_events_url": "https://api.github.com/users/ulope/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-01T15:19:54Z", "updated_at": "2017-06-01T15:52:51Z", "closed_at": "2017-06-01T15:52:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for taking charge of this library and esp. getting windows support to work!\r\n\r\nIt would be awesome if you could credit the [original secp256k1-py contributors](https://github.com/ludbb/secp256k1-py/graphs/contributors) (in the readme for example).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/3", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/3/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/3/events", "html_url": "https://github.com/ofek/coincurve/issues/3", "id": 224252951, "node_id": "MDU6SXNzdWUyMjQyNTI5NTE=", "number": 3, "title": "FreeBSD Support?", "user": {"login": "teran-mckinney", "id": 4624114, "node_id": "MDQ6VXNlcjQ2MjQxMTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4624114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teran-mckinney", "html_url": "https://github.com/teran-mckinney", "followers_url": "https://api.github.com/users/teran-mckinney/followers", "following_url": "https://api.github.com/users/teran-mckinney/following{/other_user}", "gists_url": "https://api.github.com/users/teran-mckinney/gists{/gist_id}", "starred_url": "https://api.github.com/users/teran-mckinney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teran-mckinney/subscriptions", "organizations_url": "https://api.github.com/users/teran-mckinney/orgs", "repos_url": "https://api.github.com/users/teran-mckinney/repos", "events_url": "https://api.github.com/users/teran-mckinney/events{/privacy}", "received_events_url": "https://api.github.com/users/teran-mckinney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-04-25T19:52:48Z", "updated_at": "2017-04-28T17:45:21Z", "closed_at": "2017-04-28T17:45:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi ofek,\r\n\r\nI am not too sure of why this is but pip won't even attempt to fetch coincurve for me.\r\n\r\n```\r\n# pip3 --version\r\npip 9.0.1 from /usr/local/lib/python3.5/site-packages (python 3.5)\r\n# pip3 install coincurve\r\nCollecting coincurve\r\n  Could not find a version that satisfies the requirement coincurve (from versions: )\r\nNo matching distribution found for coincurve\r\n```\r\n\r\nAnything else with pip has been fine for me. I'm not too sure if you have an OS restriction set in place that it's seeing.\r\n\r\nWhere should I go to look into this?\r\n\r\nThank you,\r\nTeran", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/2", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/2/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/2/events", "html_url": "https://github.com/ofek/coincurve/issues/2", "id": 222107321, "node_id": "MDU6SXNzdWUyMjIxMDczMjE=", "number": 2, "title": " Secret scalar must be greater than 0 and less than..", "user": {"login": "hrishikeshio", "id": 1659870, "node_id": "MDQ6VXNlcjE2NTk4NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1659870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrishikeshio", "html_url": "https://github.com/hrishikeshio", "followers_url": "https://api.github.com/users/hrishikeshio/followers", "following_url": "https://api.github.com/users/hrishikeshio/following{/other_user}", "gists_url": "https://api.github.com/users/hrishikeshio/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrishikeshio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrishikeshio/subscriptions", "organizations_url": "https://api.github.com/users/hrishikeshio/orgs", "repos_url": "https://api.github.com/users/hrishikeshio/repos", "events_url": "https://api.github.com/users/hrishikeshio/events{/privacy}", "received_events_url": "https://api.github.com/users/hrishikeshio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-17T10:30:54Z", "updated_at": "2017-04-17T20:39:03Z", "closed_at": "2017-04-17T20:39:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nIn [94]: pk\r\nOut[94]: <coincurve.keys.PrivateKey instance at 0x109cc2998>\r\n\r\nIn [95]: privatekey_to_address(pk)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-95-a6cecae842d3> in <module>()\r\n----> 1 privatekey_to_address(pk)\r\n\r\n<ipython-input-91-3fca11b6c95d> in privatekey_to_address(private_key_bin)\r\n    120 \r\n    121 def privatekey_to_address(private_key_bin):\r\n--> 122     private_key = PrivateKey(private_key_bin)\r\n    123     pubkey = private_key.public_key.format(compressed=False)\r\n    124     return publickey_to_address(pubkey)\r\n\r\n/Users/hhuilgolkar/raid/lib/python2.7/site-packages/coincurve/keys.pyc in __init__(self, secret, context)\r\n     20 class PrivateKey:\r\n     21     def __init__(self, secret=None, context=GLOBAL_CONTEXT):\r\n---> 22         self.secret = (validate_secret(secret) if secret is not None\r\n     23                        else get_valid_secret())\r\n     24         self.context = context\r\n\r\n/Users/hhuilgolkar/raid/lib/python2.7/site-packages/coincurve/utils.pyc in validate_secret(secret)\r\n    105     if not ZERO < secret < GROUP_ORDER:\r\n    106         raise ValueError('Secret scalar must be greater than 0 and less than '\r\n--> 107                          '{}.'.format(GROUP_ORDER_INT))\r\n    108     return pad_scalar(secret)\r\n    109 \r\n\r\nValueError: Secret scalar must be greater than 0 and less than 115792089237316195423570985008687907852837564279074904382605163141518161494337.\r\n\r\nIn [100]: pk.to_int()\r\nOut[100]: 72314643180786136016222690850571465731842288350546105134113403345693409491713L\r\n\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ofek/coincurve/issues/1", "repository_url": "https://api.github.com/repos/ofek/coincurve", "labels_url": "https://api.github.com/repos/ofek/coincurve/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/ofek/coincurve/issues/1/comments", "events_url": "https://api.github.com/repos/ofek/coincurve/issues/1/events", "html_url": "https://github.com/ofek/coincurve/issues/1", "id": 221999595, "node_id": "MDU6SXNzdWUyMjE5OTk1OTU=", "number": 1, "title": "TypeError: initializer for ctype 'secp256k1_ecdsa_recoverable_signature *' must be a cdata pointer, not str", "user": {"login": "hrishikeshio", "id": 1659870, "node_id": "MDQ6VXNlcjE2NTk4NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1659870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrishikeshio", "html_url": "https://github.com/hrishikeshio", "followers_url": "https://api.github.com/users/hrishikeshio/followers", "following_url": "https://api.github.com/users/hrishikeshio/following{/other_user}", "gists_url": "https://api.github.com/users/hrishikeshio/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrishikeshio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrishikeshio/subscriptions", "organizations_url": "https://api.github.com/users/hrishikeshio/orgs", "repos_url": "https://api.github.com/users/hrishikeshio/repos", "events_url": "https://api.github.com/users/hrishikeshio/events{/privacy}", "received_events_url": "https://api.github.com/users/hrishikeshio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-16T09:04:23Z", "updated_at": "2017-04-17T20:09:25Z", "closed_at": "2017-04-17T20:09:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using latest mac os x, coincurve installed using pip in virtualenv. python 2.7.3\r\n```\r\n\r\nIn [415]: publickey = recover(msghash, sig)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-415-7cc1324ef55d> in <module>()\r\n----> 1 publickey = recover(msghash, sig)\r\n\r\n/Users/hhuilgolkar/raid/lib/python2.7/site-packages/coincurve/ecdsa.pyc in recover(msg, recover_sig, context)\r\n     82 \r\n     83     recovered = lib.secp256k1_ecdsa_recover(\r\n---> 84         context.ctx, pubkey, recover_sig, msg\r\n     85     )\r\n     86     if recovered:\r\n\r\nTypeError: initializer for ctype 'secp256k1_ecdsa_recoverable_signature *' must be a cdata pointer, not str\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}]}