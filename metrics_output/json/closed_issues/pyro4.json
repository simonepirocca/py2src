{"total_count": 185, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/irmen/Pyro4/issues/230", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/230/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/230/events", "html_url": "https://github.com/irmen/Pyro4/issues/230", "id": 577071774, "node_id": "MDU6SXNzdWU1NzcwNzE3NzQ=", "number": 230, "title": "Pyro4 instance_mode=\"single\" but creating multiple instances of the object", "user": {"login": "Arun4rangan", "id": 9358768, "node_id": "MDQ6VXNlcjkzNTg3Njg=", "avatar_url": "https://avatars1.githubusercontent.com/u/9358768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arun4rangan", "html_url": "https://github.com/Arun4rangan", "followers_url": "https://api.github.com/users/Arun4rangan/followers", "following_url": "https://api.github.com/users/Arun4rangan/following{/other_user}", "gists_url": "https://api.github.com/users/Arun4rangan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arun4rangan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arun4rangan/subscriptions", "organizations_url": "https://api.github.com/users/Arun4rangan/orgs", "repos_url": "https://api.github.com/users/Arun4rangan/repos", "events_url": "https://api.github.com/users/Arun4rangan/events{/privacy}", "received_events_url": "https://api.github.com/users/Arun4rangan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-06T17:23:20Z", "updated_at": "2020-03-09T20:47:49Z", "closed_at": "2020-03-09T20:47:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I registered an object with :\r\n\r\n```\r\n@Pyro4.expose\r\n@Pyro4.behavior(instance_mode=\"single\")\r\nclass Animals(object):\r\n    def __init__(self):\r\n        print(\"Called\")\r\n```\r\n\r\nCalled it with serveSimple:\r\n```\r\nPyro4.Daemon.serveSimple(\r\n        {Animals: PYRO_ANIMAL_APP_NAME},\r\n        ns=True,\r\n        verbose=False,\r\n        host=\"localhost\",\r\n    )\r\n```\r\n\r\nThis results in :\r\n```\r\ncalled\r\ncalled\r\n```\r\n\r\nDoes pyro4 expects animal object to be a singleton? or is it taken care of when we specify `instance_mode=\"single\"`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/229", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/229/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/229/events", "html_url": "https://github.com/irmen/Pyro4/issues/229", "id": 566004946, "node_id": "MDU6SXNzdWU1NjYwMDQ5NDY=", "number": 229, "title": "Proxy object can be used to invoke methods even after a daemon is shut down", "user": {"login": "msakai", "id": 157688, "node_id": "MDQ6VXNlcjE1NzY4OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/157688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msakai", "html_url": "https://github.com/msakai", "followers_url": "https://api.github.com/users/msakai/followers", "following_url": "https://api.github.com/users/msakai/following{/other_user}", "gists_url": "https://api.github.com/users/msakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/msakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msakai/subscriptions", "organizations_url": "https://api.github.com/users/msakai/orgs", "repos_url": "https://api.github.com/users/msakai/repos", "events_url": "https://api.github.com/users/msakai/events{/privacy}", "received_events_url": "https://api.github.com/users/msakai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-17T01:07:44Z", "updated_at": "2020-02-25T19:52:40Z", "closed_at": "2020-02-25T19:52:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I and my colleague @keisuke-nakata noticed that once a proxy object is connected it can be used to invoke methods even after a daemon is shut down.\r\n\r\n```python\r\nimport Pyro4\r\nimport threading\r\nimport time\r\n\r\n@Pyro4.expose\r\nclass GreetingMaker(object):\r\n    def get_fortune(self, name):\r\n        return \"Hello, {0}. Here is your fortune message:\\n\" \\\r\n               \"Tomorrow's lucky number is 12345678.\".format(name)\r\n\r\n\r\nport = 7766\r\nstop_event = threading.Event()\r\ndaemon = Pyro4.Daemon(port=port)\r\n\r\ndef run_daemon():\r\n    daemon.register(GreetingMaker(), \"greeting\")\r\n    print(\"Ready.\")\r\n    daemon.requestLoop(loopCondition=lambda: not stop_event.is_set())\r\n    daemon.shutdown()\r\n    print(\"Shutdown.\")\r\n\r\nth = threading.Thread(target=run_daemon)\r\nth.start()\r\ntime.sleep(1)\r\n\r\nobj = Pyro4.Proxy(f'PYRO:greeting@localhost:{port}')\r\nprint(obj)\r\n# =>\r\n# <Pyro4.core.Proxy at 0x1097f9278; not connected; for PYRO:greeting@localhost:7766>\r\n\r\nprint(obj.get_fortune('OK'))\r\n# =>\r\n# Hello, OK. Here is your fortune message:\r\n# Tomorrow's lucky number is 12345678.\r\n\r\nprint(obj)\r\n# =>\r\n# <Pyro4.core.Proxy at 0x1097f9278; connected IPv4; for PYRO:greeting@localhost:7766>\r\n\r\nstop_event.set()\r\nth.join()\r\ntime.sleep(1)\r\n\r\nprint(obj)\r\n# =>\r\n# <Pyro4.core.Proxy at 0x1097f9278; connected IPv4; for PYRO:greeting@localhost:7766>\r\n\r\nprint(obj.get_fortune('NG'))\r\n# =>\r\n# Hello, NG. Here is your fortune message:\r\n# Tomorrow's lucky number is 12345678.\r\n```\r\n\r\nIs this intended behavior?\r\nIf so, is there a way to shut down all connections and worker threads?\r\nIf not, I guess that once a daemon is shut down `Daemon.handleRequest` should reject further requests and `ClientConnectionJob` should terminate itself.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/226", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/226/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/226/events", "html_url": "https://github.com/irmen/Pyro4/issues/226", "id": 555872225, "node_id": "MDU6SXNzdWU1NTU4NzIyMjU=", "number": 226, "title": "serializer 'serpent' is unknown or not available", "user": {"login": "nabiladoui", "id": 3792738, "node_id": "MDQ6VXNlcjM3OTI3Mzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3792738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nabiladoui", "html_url": "https://github.com/nabiladoui", "followers_url": "https://api.github.com/users/nabiladoui/followers", "following_url": "https://api.github.com/users/nabiladoui/following{/other_user}", "gists_url": "https://api.github.com/users/nabiladoui/gists{/gist_id}", "starred_url": "https://api.github.com/users/nabiladoui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nabiladoui/subscriptions", "organizations_url": "https://api.github.com/users/nabiladoui/orgs", "repos_url": "https://api.github.com/users/nabiladoui/repos", "events_url": "https://api.github.com/users/nabiladoui/events{/privacy}", "received_events_url": "https://api.github.com/users/nabiladoui/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-27T22:28:43Z", "updated_at": "2020-01-27T23:18:46Z", "closed_at": "2020-01-27T22:53:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "After installing Pyro4 using pip install Pyro4, trying to run the name server (or a Pyro daemon) throws this exception : \r\n\r\npython -m Pyro4.naming\r\nTraceback (most recent call last):\r\n  File \"/usr/lib64/python2.7/runpy.py\", line 162, in _run_module_as_main\r\n    \"__main__\", fname, loader, pkg_name)\r\n  File \"/usr/lib64/python2.7/runpy.py\", line 72, in _run_code\r\n    exec code in run_globals\r\n  File \"/usr/lib/python2.7/site-packages/Pyro4/naming.py\", line 568, in <module>\r\n    main()\r\n  File \"/usr/lib/python2.7/site-packages/Pyro4/naming.py\", line 564, in main\r\n    hmac=options.key)\r\n  File \"/usr/lib/python2.7/site-packages/Pyro4/naming.py\", line 465, in startNSloop\r\n    daemon = NameServerDaemon(host, port, unixsocket, nathost=nathost, natport=natport, storage=storage)\r\n  File \"/usr/lib/python2.7/site-packages/Pyro4/naming.py\", line 269, in __init__\r\n    super(NameServerDaemon, self).__init__(host, port, unixsocket, nathost=nathost, natport=natport)\r\n  File \"/usr/lib/python2.7/site-packages/Pyro4/core.py\", line 1158, in __init__\r\n    self.__serializer_ids = {util.get_serializer(ser_name).serializer_id for ser_name in config.SERIALIZERS_ACCEPTED}\r\n  File \"/usr/lib/python2.7/site-packages/Pyro4/core.py\", line 1158, in <setcomp>\r\n    self.__serializer_ids = {util.get_serializer(ser_name).serializer_id for ser_name in config.SERIALIZERS_ACCEPTED}\r\n  File \"/usr/lib/python2.7/site-packages/Pyro4/util.py\", line 773, in get_serializer\r\n    raise errors.SerializeError(\"serializer '%s' is unknown or not available\" % name)\r\nPyro4.errors.SerializeError: serializer 'serpent' is unknown or not available\r\n\r\nserpent is installed, version 1.30, with Pyro :\r\npip show serpent\r\nName: serpent\r\nVersion: 1.30\r\nSummary: Serialization based on ast.literal_eval\r\nHome-page: https://github.com/irmen/Serpent\r\n\r\nUninstalling this version and installing 1.28 fixed the issue", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/224", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/224/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/224/events", "html_url": "https://github.com/irmen/Pyro4/issues/224", "id": 543272522, "node_id": "MDU6SXNzdWU1NDMyNzI1MjI=", "number": 224, "title": "Daemon + SSL : Connection refused", "user": {"login": "morrolinux", "id": 20294254, "node_id": "MDQ6VXNlcjIwMjk0MjU0", "avatar_url": "https://avatars1.githubusercontent.com/u/20294254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/morrolinux", "html_url": "https://github.com/morrolinux", "followers_url": "https://api.github.com/users/morrolinux/followers", "following_url": "https://api.github.com/users/morrolinux/following{/other_user}", "gists_url": "https://api.github.com/users/morrolinux/gists{/gist_id}", "starred_url": "https://api.github.com/users/morrolinux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/morrolinux/subscriptions", "organizations_url": "https://api.github.com/users/morrolinux/orgs", "repos_url": "https://api.github.com/users/morrolinux/repos", "events_url": "https://api.github.com/users/morrolinux/events{/privacy}", "received_events_url": "https://api.github.com/users/morrolinux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-28T19:38:22Z", "updated_at": "2019-12-29T11:07:21Z", "closed_at": "2019-12-29T11:07:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm using 2-way SSL for connecting a client and a server using a Daemon. \r\nEverything works fine if I run both client and server on the same host, but if I run the very same client code on a different host (on the same network) I get:\r\n`cannot connect to ('t480s', 9090): [Errno 111] Connection refused`\r\nAs far as I understood it is sufficient to bind the daemon on a valid network interface other than default for it to be exposed publicly, and a name server should be optional so I'm not using one.\r\nIs it a bug or am I doing something wrong?\r\n\r\nHere's my server code:\r\n```\r\n        d = CertValidatingDaemon(host=socket.gethostname(), port=9090)\r\n        test_uri = d.register(self, \"JobDispatcher\")\r\n        d.requestLoop()\r\n```\r\n\r\nAnd client code:\r\n```\r\n        self.job_dispatcher = CertCheckingProxy('PYRO:JobDispatcher@t480s:9090')\r\n        self.job_dispatcher.test()    **<--- HERE it crashes**\r\n```\r\n\r\nStack trace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/Pyro4/core.py\", line 511, in connect_and_handshake\r\n    sock = socketutil.createSocket(connect=connect_location,\r\n  File \"/usr/lib/python3.8/site-packages/Pyro4/socketutil.py\", line 307, in createSocket\r\n    sock.connect(connect)\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1342, in connect\r\n    self._real_connect(addr, False)\r\n  File \"/usr/lib/python3.8/ssl.py\", line 1329, in _real_connect\r\n    super().connect(addr)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"./run_render_node.py\", line 8, in <module>\r\n    node.run()\r\n  File \"/home/morro/olive-distributed-rendering/worker_node.py\", line 56, in run\r\n    print(self.job_dispatcher.test())\r\n  File \"/usr/lib/python3.8/site-packages/Pyro4/core.py\", line 275, in __getattr__\r\n    self._pyroGetMetadata()\r\n  File \"/usr/lib/python3.8/site-packages/Pyro4/core.py\", line 615, in _pyroGetMetadata\r\n    self.__pyroCreateConnection()\r\n  File \"/usr/lib/python3.8/site-packages/Pyro4/core.py\", line 596, in __pyroCreateConnection\r\n    connect_and_handshake(conn)\r\n  File \"/usr/lib/python3.8/site-packages/Pyro4/core.py\", line 549, in connect_and_handshake\r\n    raise ce\r\nPyro4.errors.CommunicationError: cannot connect to ('t480s', 9090): [Errno 111] Connection refused\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/223", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/223/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/223/events", "html_url": "https://github.com/irmen/Pyro4/issues/223", "id": 527640395, "node_id": "MDU6SXNzdWU1Mjc2NDAzOTU=", "number": 223, "title": "distributed-computing2", "user": {"login": "ThailanHigor", "id": 32150270, "node_id": "MDQ6VXNlcjMyMTUwMjcw", "avatar_url": "https://avatars1.githubusercontent.com/u/32150270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThailanHigor", "html_url": "https://github.com/ThailanHigor", "followers_url": "https://api.github.com/users/ThailanHigor/followers", "following_url": "https://api.github.com/users/ThailanHigor/following{/other_user}", "gists_url": "https://api.github.com/users/ThailanHigor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThailanHigor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThailanHigor/subscriptions", "organizations_url": "https://api.github.com/users/ThailanHigor/orgs", "repos_url": "https://api.github.com/users/ThailanHigor/repos", "events_url": "https://api.github.com/users/ThailanHigor/events{/privacy}", "received_events_url": "https://api.github.com/users/ThailanHigor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-24T02:43:57Z", "updated_at": "2019-12-01T21:21:34Z", "closed_at": "2019-12-01T21:21:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running the example \"distributed-computing\" and the time of single counter is less of multiple parallel counters. I can't understanding why.\r\nI imagine that multiple counters is more fast than only one.\r\nAnybody can help me and explain me this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/222", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/222/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/222/events", "html_url": "https://github.com/irmen/Pyro4/issues/222", "id": 498825720, "node_id": "MDU6SXNzdWU0OTg4MjU3MjA=", "number": 222, "title": "PyroError \"invalid uri\" when using a unix socket with spaces in the file path", "user": {"login": "SamSchott", "id": 20974290, "node_id": "MDQ6VXNlcjIwOTc0Mjkw", "avatar_url": "https://avatars3.githubusercontent.com/u/20974290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamSchott", "html_url": "https://github.com/SamSchott", "followers_url": "https://api.github.com/users/SamSchott/followers", "following_url": "https://api.github.com/users/SamSchott/following{/other_user}", "gists_url": "https://api.github.com/users/SamSchott/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamSchott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamSchott/subscriptions", "organizations_url": "https://api.github.com/users/SamSchott/orgs", "repos_url": "https://api.github.com/users/SamSchott/repos", "events_url": "https://api.github.com/users/SamSchott/events{/privacy}", "received_events_url": "https://api.github.com/users/SamSchott/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563093, "node_id": "MDU6TGFiZWw0NTU2MzA5Mw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-26T11:24:16Z", "updated_at": "2019-10-01T20:11:02Z", "closed_at": "2019-10-01T20:09:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "When creating a daemon with a unix socket that has spaces in its file path, such as \"/Users/samschott/Library/Application Support/myapp/myapp.sock\" on macOS, registering a Pyro4 object fails with an \"invalid uri\" error.\r\n\r\nThis seems to happen because the regex which parses the uri does not allow whitespace in the location string. Is this behaviour intended or a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/221", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/221/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/221/events", "html_url": "https://github.com/irmen/Pyro4/issues/221", "id": 478399625, "node_id": "MDU6SXNzdWU0NzgzOTk2MjU=", "number": 221, "title": "isinstance and issubclass via a pyro proxy", "user": {"login": "carandraug", "id": 916140, "node_id": "MDQ6VXNlcjkxNjE0MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/916140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carandraug", "html_url": "https://github.com/carandraug", "followers_url": "https://api.github.com/users/carandraug/followers", "following_url": "https://api.github.com/users/carandraug/following{/other_user}", "gists_url": "https://api.github.com/users/carandraug/gists{/gist_id}", "starred_url": "https://api.github.com/users/carandraug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carandraug/subscriptions", "organizations_url": "https://api.github.com/users/carandraug/orgs", "repos_url": "https://api.github.com/users/carandraug/repos", "events_url": "https://api.github.com/users/carandraug/events{/privacy}", "received_events_url": "https://api.github.com/users/carandraug/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563095, "node_id": "MDU6TGFiZWw0NTU2MzA5NQ==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-08-08T11:01:27Z", "updated_at": "2019-08-21T21:05:50Z", "closed_at": "2019-08-21T21:05:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "We make heavy use of python's abstract base classes to test whether a class provides a particular interface. This is performed via the builtin `isinstance` and `issubclass` functions. Obviously, this does not work if called on the proxy object.\r\n\r\nCould there be a `_pyroX` method that would return the class of the remote object? To enable something like:\r\n\r\n    isinstance(proxy._pyroRemoteClass, MyABC)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/220", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/220/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/220/events", "html_url": "https://github.com/irmen/Pyro4/issues/220", "id": 462896757, "node_id": "MDU6SXNzdWU0NjI4OTY3NTc=", "number": 220, "title": "Auto Proxy doesn't maintain async mode", "user": {"login": "MadcowD", "id": 719535, "node_id": "MDQ6VXNlcjcxOTUzNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/719535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MadcowD", "html_url": "https://github.com/MadcowD", "followers_url": "https://api.github.com/users/MadcowD/followers", "following_url": "https://api.github.com/users/MadcowD/following{/other_user}", "gists_url": "https://api.github.com/users/MadcowD/gists{/gist_id}", "starred_url": "https://api.github.com/users/MadcowD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MadcowD/subscriptions", "organizations_url": "https://api.github.com/users/MadcowD/orgs", "repos_url": "https://api.github.com/users/MadcowD/repos", "events_url": "https://api.github.com/users/MadcowD/events{/privacy}", "received_events_url": "https://api.github.com/users/MadcowD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-01T20:28:49Z", "updated_at": "2019-07-02T13:43:37Z", "closed_at": "2019-07-02T13:43:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you are using auto proxy and set a proxy for a class to be async and that class has methods which return instances of other classes those instance proxies are not async.\r\n\r\nIs this a bug, or a feature? If it is a feature there should be some documentation :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/219", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/219/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/219/events", "html_url": "https://github.com/irmen/Pyro4/issues/219", "id": 453329875, "node_id": "MDU6SXNzdWU0NTMzMjk4NzU=", "number": 219, "title": "Server shutdown timeout", "user": {"login": "Evidlo", "id": 5455841, "node_id": "MDQ6VXNlcjU0NTU4NDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5455841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Evidlo", "html_url": "https://github.com/Evidlo", "followers_url": "https://api.github.com/users/Evidlo/followers", "following_url": "https://api.github.com/users/Evidlo/following{/other_user}", "gists_url": "https://api.github.com/users/Evidlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Evidlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Evidlo/subscriptions", "organizations_url": "https://api.github.com/users/Evidlo/orgs", "repos_url": "https://api.github.com/users/Evidlo/repos", "events_url": "https://api.github.com/users/Evidlo/events{/privacy}", "received_events_url": "https://api.github.com/users/Evidlo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-07T04:09:40Z", "updated_at": "2019-06-18T07:58:25Z", "closed_at": "2019-06-18T07:57:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like my server to shut down after N seconds of no client activity.  Is there a way to do this?\r\n\r\nI'm currently using `serveSimple`, but I can switch to to the `Daemon` class if necessary.\r\n\r\nMy application is a CLI program for accessing an encrypted database.  Database decryption is slow, so I fork a server process to keep the database open and communicate with it through a unix socket.  The server should shut down 5 minutes after no contact from the client.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/218", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/218/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/218/events", "html_url": "https://github.com/irmen/Pyro4/issues/218", "id": 452566037, "node_id": "MDU6SXNzdWU0NTI1NjYwMzc=", "number": 218, "title": "PYRO_LOGFILE doesn't work if cwd not writable", "user": {"login": "mjk4", "id": 28105574, "node_id": "MDQ6VXNlcjI4MTA1NTc0", "avatar_url": "https://avatars3.githubusercontent.com/u/28105574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjk4", "html_url": "https://github.com/mjk4", "followers_url": "https://api.github.com/users/mjk4/followers", "following_url": "https://api.github.com/users/mjk4/following{/other_user}", "gists_url": "https://api.github.com/users/mjk4/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjk4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjk4/subscriptions", "organizations_url": "https://api.github.com/users/mjk4/orgs", "repos_url": "https://api.github.com/users/mjk4/repos", "events_url": "https://api.github.com/users/mjk4/events{/privacy}", "received_events_url": "https://api.github.com/users/mjk4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-05T15:25:23Z", "updated_at": "2019-06-05T21:26:47Z", "closed_at": "2019-06-05T21:10:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "When the PYRO_LOGFILE points to a file in a writable dir then it should still work even if the cwd isn't writable.\r\n\r\nThe issue is here in `Pyro4/__init__.py` in func `_configLogging` where it raises if cwd not writable:\r\n```\r\n            try:\r\n                import tempfile\r\n                tempfile = tempfile.TemporaryFile(dir=\".\")\r\n                tempfile.close()\r\n            except OSError:\r\n                # cannot write in current directory, use the default console logger\r\n                logging.basicConfig(level=levelvalue)\r\n            else:\r\n                # set up a basic logfile in current directory\r\n                logging.basicConfig(\r\n                    level=levelvalue,\r\n                    filename=logfilename,\r\n                    datefmt=\"%Y-%m-%d %H:%M:%S\",\r\n                    format=\"[%(asctime)s.%(msecs)03d,%(name)s,%(levelname)s] %(message)s\"\r\n                )\r\n```\r\nI would suggest changing this so that it checks the dir where the `logfilename` is instead of cwd.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/216", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/216/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/216/events", "html_url": "https://github.com/irmen/Pyro4/issues/216", "id": 417713666, "node_id": "MDU6SXNzdWU0MTc3MTM2NjY=", "number": 216, "title": "testContextAndSock fails on sdist archive", "user": {"login": "scarabeusiv", "id": 1055830, "node_id": "MDQ6VXNlcjEwNTU4MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1055830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scarabeusiv", "html_url": "https://github.com/scarabeusiv", "followers_url": "https://api.github.com/users/scarabeusiv/followers", "following_url": "https://api.github.com/users/scarabeusiv/following{/other_user}", "gists_url": "https://api.github.com/users/scarabeusiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/scarabeusiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scarabeusiv/subscriptions", "organizations_url": "https://api.github.com/users/scarabeusiv/orgs", "repos_url": "https://api.github.com/users/scarabeusiv/repos", "events_url": "https://api.github.com/users/scarabeusiv/events{/privacy}", "received_events_url": "https://api.github.com/users/scarabeusiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-06T09:51:58Z", "updated_at": "2019-03-08T22:36:39Z", "closed_at": "2019-03-08T22:36:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "The test fails because certs folder is not in the tarball MANIFEST.in needs to be tweaked.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/215", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/215/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/215/events", "html_url": "https://github.com/irmen/Pyro4/issues/215", "id": 411620763, "node_id": "MDU6SXNzdWU0MTE2MjA3NjM=", "number": 215, "title": "get traceback on server side", "user": {"login": "gst", "id": 38055, "node_id": "MDQ6VXNlcjM4MDU1", "avatar_url": "https://avatars1.githubusercontent.com/u/38055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gst", "html_url": "https://github.com/gst", "followers_url": "https://api.github.com/users/gst/followers", "following_url": "https://api.github.com/users/gst/following{/other_user}", "gists_url": "https://api.github.com/users/gst/gists{/gist_id}", "starred_url": "https://api.github.com/users/gst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gst/subscriptions", "organizations_url": "https://api.github.com/users/gst/orgs", "repos_url": "https://api.github.com/users/gst/repos", "events_url": "https://api.github.com/users/gst/events{/privacy}", "received_events_url": "https://api.github.com/users/gst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-18T19:44:46Z", "updated_at": "2019-02-25T19:14:17Z", "closed_at": "2019-02-25T19:14:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to have the possibility to have remote tracebacks be logged by default - **on server side** - or with an option eventually.\r\n\r\nbasically all would be good if in function core.py:Daemon.handle_request() on line 1458:\r\n\r\n`log.debug(\"Exception occurred while handling request: %r\", xv)`\r\n\r\nwas changed to \r\n\r\n`log.exception(\"Exception occurred while handling request: %r\", xv)`\r\n\r\nwould you consider this change, eventually keeping the current behavior but changing it with a new config item (say `config.SERVER_LOG_TRACEBACK` (if you have a better name ?) )?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/212", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/212/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/212/events", "html_url": "https://github.com/irmen/Pyro4/issues/212", "id": 410471857, "node_id": "MDU6SXNzdWU0MTA0NzE4NTc=", "number": 212, "title": "Expose parent(s) class(es) methods and descriptors", "user": {"login": "gst", "id": 38055, "node_id": "MDQ6VXNlcjM4MDU1", "avatar_url": "https://avatars1.githubusercontent.com/u/38055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gst", "html_url": "https://github.com/gst", "followers_url": "https://api.github.com/users/gst/followers", "following_url": "https://api.github.com/users/gst/following{/other_user}", "gists_url": "https://api.github.com/users/gst/gists{/gist_id}", "starred_url": "https://api.github.com/users/gst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gst/subscriptions", "organizations_url": "https://api.github.com/users/gst/orgs", "repos_url": "https://api.github.com/users/gst/repos", "events_url": "https://api.github.com/users/gst/events{/privacy}", "received_events_url": "https://api.github.com/users/gst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-14T20:11:31Z", "updated_at": "2019-02-16T10:39:50Z", "closed_at": "2019-02-15T13:28:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI realize that Pyro only exposes the class own methods & descriptors, not taking into account the parent(s) class(es) : \r\n\r\npython : 3.6\r\n\r\n```\r\nclass Parent:\r\n    def meth1(self):\r\n        \"not exposed\"\r\n    @property\r\n    def prop1(self):\r\n        \"not exposed\"\r\n\r\n@Pyro4.expose\r\nclass Child(Parent):\r\n    def meth2(self):\r\n        \"exposed\"\r\n    # etc..\r\n```\r\n\r\nwould you consider a PR making the parent(s) class methods & descriptors also exposed ? (it's a one liner change) ; that would make Pyro usable in my use case.. otherwise I'm afraid it won't make my job.\r\n\r\nThank your for Pyro !\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/211", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/211/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/211/events", "html_url": "https://github.com/irmen/Pyro4/issues/211", "id": 407850444, "node_id": "MDU6SXNzdWU0MDc4NTA0NDQ=", "number": 211, "title": "pyro_port_range", "user": {"login": "adamf663", "id": 8492923, "node_id": "MDQ6VXNlcjg0OTI5MjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/8492923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamf663", "html_url": "https://github.com/adamf663", "followers_url": "https://api.github.com/users/adamf663/followers", "following_url": "https://api.github.com/users/adamf663/following{/other_user}", "gists_url": "https://api.github.com/users/adamf663/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamf663/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamf663/subscriptions", "organizations_url": "https://api.github.com/users/adamf663/orgs", "repos_url": "https://api.github.com/users/adamf663/repos", "events_url": "https://api.github.com/users/adamf663/events{/privacy}", "received_events_url": "https://api.github.com/users/adamf663/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563097, "node_id": "MDU6TGFiZWw0NTU2MzA5Nw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-07T19:04:24Z", "updated_at": "2019-02-07T23:24:08Z", "closed_at": "2019-02-07T23:24:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a daemon is created without specifying a port number, a high numbered port is assigned.\r\nHowever, I'm planning on running it behind a firewall and have to open up any ports used.\r\nI intend to add some iptable rules to open up the nameserver port and a range of ports to use for daemons.\r\nIs there a way to control the port range as was available in Pyro3's PYRO_PORT_RANGE?\r\nI can hard code it when starting a daemon, but I'd rather it came from a pool.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/210", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/210/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/210/events", "html_url": "https://github.com/irmen/Pyro4/issues/210", "id": 407662439, "node_id": "MDU6SXNzdWU0MDc2NjI0Mzk=", "number": 210, "title": "Trailing space in thread name", "user": {"login": "felyxjet", "id": 541007, "node_id": "MDQ6VXNlcjU0MTAwNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/541007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felyxjet", "html_url": "https://github.com/felyxjet", "followers_url": "https://api.github.com/users/felyxjet/followers", "following_url": "https://api.github.com/users/felyxjet/following{/other_user}", "gists_url": "https://api.github.com/users/felyxjet/gists{/gist_id}", "starred_url": "https://api.github.com/users/felyxjet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felyxjet/subscriptions", "organizations_url": "https://api.github.com/users/felyxjet/orgs", "repos_url": "https://api.github.com/users/felyxjet/repos", "events_url": "https://api.github.com/users/felyxjet/events{/privacy}", "received_events_url": "https://api.github.com/users/felyxjet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-07T11:51:44Z", "updated_at": "2019-02-07T21:31:09Z", "closed_at": "2019-02-07T21:31:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't think there is any reason for it to contain trailing space  https://github.com/irmen/Pyro4/blob/96a75dcd131765c3ad53a3609579c92b7f972e15/src/Pyro4/socketserver/threadpool.py#L28", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/209", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/209/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/209/events", "html_url": "https://github.com/irmen/Pyro4/issues/209", "id": 403252259, "node_id": "MDU6SXNzdWU0MDMyNTIyNTk=", "number": 209, "title": "Pyro4 with asyncio and pulsar - examples and questions", "user": {"login": "TTimo", "id": 6637, "node_id": "MDQ6VXNlcjY2Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TTimo", "html_url": "https://github.com/TTimo", "followers_url": "https://api.github.com/users/TTimo/followers", "following_url": "https://api.github.com/users/TTimo/following{/other_user}", "gists_url": "https://api.github.com/users/TTimo/gists{/gist_id}", "starred_url": "https://api.github.com/users/TTimo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TTimo/subscriptions", "organizations_url": "https://api.github.com/users/TTimo/orgs", "repos_url": "https://api.github.com/users/TTimo/repos", "events_url": "https://api.github.com/users/TTimo/events{/privacy}", "received_events_url": "https://api.github.com/users/TTimo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563097, "node_id": "MDU6TGFiZWw0NTU2MzA5Nw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-25T17:27:04Z", "updated_at": "2019-02-07T21:33:54Z", "closed_at": "2019-02-07T21:33:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nI haven't found a mailing list/forum/slack to discuss Pyro4, so I thought I'd ask here..\r\n\r\nI am working on a new project built around the pulsar framework (https://quantmind.github.io/pulsar/) - a relatively new asynchronous actor model framework. Which means Python3, asyncio etc.\r\n\r\nPulsar doesn't do distribution however, so I'm looking at using Pyro for remote method invocation between the different nodes, which means integrating with asyncio loops.\r\n\r\nI've done a bit of research and I have some POC code that works to my satisfaction, which I thought I'd share:\r\n\r\nThis just runs a Pyro4 daemon in an asyncio loop, directly based on the `eventloop` example:\r\nhttps://gist.github.com/TTimo/f5c69d1d3011eb2f6422af1ef9dca8cb\r\n\r\nThis runs a Pyro4 daemon as Pulsar actor (which also means an asyncio loop):\r\nhttps://gist.github.com/TTimo/735cc33f815a7e26c05e6b4ed3ede712\r\n\r\nSo my question is - would this be drastically different (or better) with Pyro5? Since I'm just starting a building from scratch, should I build out of Pyro5 right away?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/207", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/207/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/207/events", "html_url": "https://github.com/irmen/Pyro4/issues/207", "id": 374922344, "node_id": "MDU6SXNzdWUzNzQ5MjIzNDQ=", "number": 207, "title": "Daemon active connections not updated", "user": {"login": "nedo99", "id": 1510807, "node_id": "MDQ6VXNlcjE1MTA4MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1510807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nedo99", "html_url": "https://github.com/nedo99", "followers_url": "https://api.github.com/users/nedo99/followers", "following_url": "https://api.github.com/users/nedo99/following{/other_user}", "gists_url": "https://api.github.com/users/nedo99/gists{/gist_id}", "starred_url": "https://api.github.com/users/nedo99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nedo99/subscriptions", "organizations_url": "https://api.github.com/users/nedo99/orgs", "repos_url": "https://api.github.com/users/nedo99/repos", "events_url": "https://api.github.com/users/nedo99/events{/privacy}", "received_events_url": "https://api.github.com/users/nedo99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-29T09:20:33Z", "updated_at": "2018-11-02T19:59:15Z", "closed_at": "2018-10-29T20:18:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to get information about connected client/proxy objects to a daemon. The scenario that I would like to have  is daemon information about when it received last remote call to an exposed objects. Right now I cannot find that information. I tried using objectsById https://pythonhosted.org/Pyro4/api/core.html#Pyro4.core.Daemon.objectsById which has information about connected object proxies, but after client/proxy object process gets killed, the object is still in the list so I do not have information if I can terminate the daemon.\r\n\r\nIs there another way to get this data?\r\n\r\nKind regards,\r\nNedim", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/206", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/206/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/206/events", "html_url": "https://github.com/irmen/Pyro4/issues/206", "id": 366696209, "node_id": "MDU6SXNzdWUzNjY2OTYyMDk=", "number": 206, "title": "Register new objects at an already running daemon", "user": {"login": "pevogam", "id": 1969979, "node_id": "MDQ6VXNlcjE5Njk5Nzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1969979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pevogam", "html_url": "https://github.com/pevogam", "followers_url": "https://api.github.com/users/pevogam/followers", "following_url": "https://api.github.com/users/pevogam/following{/other_user}", "gists_url": "https://api.github.com/users/pevogam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pevogam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pevogam/subscriptions", "organizations_url": "https://api.github.com/users/pevogam/orgs", "repos_url": "https://api.github.com/users/pevogam/repos", "events_url": "https://api.github.com/users/pevogam/events{/privacy}", "received_events_url": "https://api.github.com/users/pevogam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563097, "node_id": "MDU6TGFiZWw0NTU2MzA5Nw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-04T09:20:56Z", "updated_at": "2018-10-09T08:24:14Z", "closed_at": "2018-10-08T17:23:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, what is the best way to register objects for remote access at an already running Pyro daemon and name server? I have the following code with the object of registering new remote modules and starting the two daemon loops if not already started:\r\n\r\n```python\r\nimport Pyro4\r\n\r\nclass DaemonLoop(threading.Thread):\r\n    \"\"\"Loop thread for sharing remote objects.\"\"\"\r\n\r\n    def __init__(self, pyro_daemon, ns_daemon=None):\r\n        \"\"\"\r\n        Contruct the Pyro daemon thread.\r\n\r\n        :param pyro_daemon: daemon for the remote python objects\r\n        :type pyro_daemon: Pyro4.Daemon object\r\n        :param ns_daemon: daemon for the name server\r\n        :type ns_daemon: Pyro4.Daemon object\r\n        \"\"\"\r\n        threading.Thread.__init__(self)\r\n        self.pyro_daemon = pyro_daemon\r\n        self.ns_daemon = ns_daemon\r\n        self.daemon = True     # make this a Daemon Thread\r\n\r\n    def run(self):\r\n        \"\"\"Run the Pyro4 daemon thread.\"\"\"\r\n        if self.ns_daemon is not None:\r\n            self.pyro_daemon.combine(self.ns_daemon)\r\n        self.pyro_daemon.requestLoop()\r\n\r\nPyro4.config.AUTOPROXY = False\r\nPyro4.config.REQUIRE_EXPOSE = False\r\n\r\n# pyro daemon\r\ntry:\r\n    pyro_daemon = Pyro4.Daemon(host=host, port=port)\r\n    logging.debug(\"Pyro4 daemon started successfully\")\r\n    pyrod_running = False\r\n# address already in use OS error\r\nexcept OSError:\r\n    pyro_daemon = Pyro4.Proxy(\"PYRO:\" + Pyro4.constants.DAEMON_NAME + \"@\" + host + \":\" + port)\r\n    pyro_daemon.ping()\r\n    logging.debug(\"Pyro4 daemon already started, available objects: %s\", pyro_daemon.registered())\r\n    pyrod_running = True\r\n\r\n# namer server\r\ntry:\r\n    ns_server = Pyro4.locateNS()\r\n    logging.debug(\"Pyro4 name server already started\")\r\n    nsd_running = True\r\n# failed to locate the nameserver error\r\nexcept (OSError, Pyro4.errors.NamingError):\r\n    from Pyro4 import naming\r\n    ns_uri, ns_daemon, _bc_server = naming.startNS(host=host)\r\n    ns_server = Pyro4.Proxy(ns_uri)\r\n    logging.debug(\"Pyro4 name server started successfully with URI %s\", ns_uri)\r\n    nsd_running = False\r\n\r\n# main retrieval of the local object\r\nobject_name = \"os.path\"\r\nimport importlib\r\nlocal_object = importlib.import_module(object_name)\r\n\r\nuri = pyro_daemon.register(local_object)\r\nns_server.register(object_name, uri)\r\n\r\nloop = None\r\nif not pyrod_running:\r\n    loop = DaemonLoop(pyro_daemon, None if nsd_running else ns_daemon)\r\nelif not nsd_running:\r\n    loop = DaemonLoop(ns_daemon)\r\n\r\nif loop is not None:\r\n    loop.start()\r\n````\r\n\r\nHowever, calling `ns_server.register` via the proxy results in indefinite hanging during connection establishing. Am I missing something obvious? Is there a better and simpler way to achieve this?\r\n\r\nThis is the precise stack trace I am getting:\r\n\r\n```\r\n^CTraceback (most recent call last):\r\n  File \"<stdin>\", line 368, in <module>\r\n    ns_server.register(object_name, uri)\r\n  File \"/usr/lib/python3.6/site-packages/Pyro4/core.py\", line 273, in __getattr__\r\n    self._pyroGetMetadata()\r\n  File \"/usr/lib/python3.6/site-packages/Pyro4/core.py\", line 600, in _pyroGetMetadata\r\n    self.__pyroCreateConnection()\r\n  File \"/usr/lib/python3.6/site-packages/Pyro4/core.py\", line 538, in __pyroCreateConnection\r\n    msg = message.Message.recv(conn, [message.MSG_CONNECTOK, message.MSG_CONNECTFAIL], hmac_key=self._pyroHmacKey)\r\n  File \"/usr/lib/python3.6/site-packages/Pyro4/message.py\", line 168, in recv\r\n    msg = cls.from_header(connection.recv(cls.header_size))\r\n  File \"/usr/lib/python3.6/site-packages/Pyro4/socketutil.py\", line 462, in recv\r\n    return receiveData(self.sock, size)\r\n  File \"/usr/lib/python3.6/site-packages/Pyro4/socketutil.py\", line 151, in receiveData\r\n    data = sock.recv(size, socket.MSG_WAITALL)\r\nKeyboardInterrupt\r\n```\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/204", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/204/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/204/events", "html_url": "https://github.com/irmen/Pyro4/issues/204", "id": 347667747, "node_id": "MDU6SXNzdWUzNDc2Njc3NDc=", "number": 204, "title": "RPM specs for Pyro (including serpent)", "user": {"login": "pevogam", "id": 1969979, "node_id": "MDQ6VXNlcjE5Njk5Nzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1969979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pevogam", "html_url": "https://github.com/pevogam", "followers_url": "https://api.github.com/users/pevogam/followers", "following_url": "https://api.github.com/users/pevogam/following{/other_user}", "gists_url": "https://api.github.com/users/pevogam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pevogam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pevogam/subscriptions", "organizations_url": "https://api.github.com/users/pevogam/orgs", "repos_url": "https://api.github.com/users/pevogam/repos", "events_url": "https://api.github.com/users/pevogam/events{/privacy}", "received_events_url": "https://api.github.com/users/pevogam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-05T04:15:30Z", "updated_at": "2018-08-06T08:01:59Z", "closed_at": "2018-08-06T08:01:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Irmen,\r\n\r\nWe have some Python 2 and 3 compatible RPM spec files for both serpent and Pyro4 (should be easy enough to adapt for 5). Do you have a packaging folder where you accept such files that might be helpful for to people packaging Pyro? If you want them we can contribute them so that there are official RPMs for RHEL-based systems rather than everybody rewriting them on their own.\r\n\r\nPlamen", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/203", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/203/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/203/events", "html_url": "https://github.com/irmen/Pyro4/issues/203", "id": 344932140, "node_id": "MDU6SXNzdWUzNDQ5MzIxNDA=", "number": 203, "title": "pyro daemon command line", "user": {"login": "carandraug", "id": 916140, "node_id": "MDQ6VXNlcjkxNjE0MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/916140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carandraug", "html_url": "https://github.com/carandraug", "followers_url": "https://api.github.com/users/carandraug/followers", "following_url": "https://api.github.com/users/carandraug/following{/other_user}", "gists_url": "https://api.github.com/users/carandraug/gists{/gist_id}", "starred_url": "https://api.github.com/users/carandraug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carandraug/subscriptions", "organizations_url": "https://api.github.com/users/carandraug/orgs", "repos_url": "https://api.github.com/users/carandraug/repos", "events_url": "https://api.github.com/users/carandraug/events{/privacy}", "received_events_url": "https://api.github.com/users/carandraug/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563095, "node_id": "MDU6TGFiZWw0NTU2MzA5NQ==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-26T17:17:03Z", "updated_at": "2020-04-29T13:04:10Z", "closed_at": "2020-04-29T13:04:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is continuation of discussion of irmen/Pyro5#2 which suggests a pyro daemon that can be started from command line to serve a series of objects from a specific python script. It is suggested there that such thing could even be added to pyro4.\r\n\r\nI am presenting here a proof of concept (python3 only for now) of such an enhancement. Please check the `command-line-daemon` branch at git@github.com:carandraug/Pyro4.git\r\n\r\nIn a very simple case, works like this:\r\n\r\n```\r\n$ cat foo.py \r\nimport Pyro4\r\n\r\n@Pyro4.expose\r\nclass Foo():\r\n    def __init__(self, x):\r\n        self._x = x\r\n\r\n    @property\r\n    def x(self):\r\n        return self._x\r\n\r\na1 = Foo(42)\r\na2 = Foo(3)\r\n$ python3 src/Pyro4/core.py '^a(1|2)$' foo.py \r\nPYRO:obj_fbb77bb0911b48c39e2f498a30f226f9@localhost:41959\r\nPYRO:obj_1f26c4ab8eaf4c1b8be319104c89d03f@localhost:41959\r\n```\r\n\r\nand remotely:\r\n\r\n```\r\n$ python3\r\nPython 3.6.6 (default, Jun 27 2018, 14:44:17) \r\n[GCC 8.1.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import Pyro4\r\n>>> a1 = Pyro4.Proxy('PYRO:obj_fbb77bb0911b48c39e2f498a30f226f9@localhost:41959')\r\n>>> a2 = Pyro4.Proxy('PYRO:obj_1f26c4ab8eaf4c1b8be319104c89d03f@localhost:41959')\r\n>>> print(a1.x)\r\n42\r\n>>> print(a2.x)\r\n3\r\n>>> \r\n```\r\n\r\nObviously, I still need to add more options and make it work for python2. But it shows the idea of what I'm after. Feedback would be nice to know if it's worth continuing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/202", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/202/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/202/events", "html_url": "https://github.com/irmen/Pyro4/issues/202", "id": 343560193, "node_id": "MDU6SXNzdWUzNDM1NjAxOTM=", "number": 202, "title": "Cannot serialize enumeration?", "user": {"login": "EricSalemi", "id": 22315605, "node_id": "MDQ6VXNlcjIyMzE1NjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/22315605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EricSalemi", "html_url": "https://github.com/EricSalemi", "followers_url": "https://api.github.com/users/EricSalemi/followers", "following_url": "https://api.github.com/users/EricSalemi/following{/other_user}", "gists_url": "https://api.github.com/users/EricSalemi/gists{/gist_id}", "starred_url": "https://api.github.com/users/EricSalemi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EricSalemi/subscriptions", "organizations_url": "https://api.github.com/users/EricSalemi/orgs", "repos_url": "https://api.github.com/users/EricSalemi/repos", "events_url": "https://api.github.com/users/EricSalemi/events{/privacy}", "received_events_url": "https://api.github.com/users/EricSalemi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-23T09:41:43Z", "updated_at": "2018-07-27T18:52:20Z", "closed_at": "2018-07-27T18:52:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI recently bumped into an issue where pyro cannot serialize an enum instance.\r\n\r\nThe enum class is dead simple:\r\n\r\n```python\r\nfrom enum import Enum\r\n\r\nclass FlowControl(Enum):\r\n    NONE = 0\r\n    XON_XOFF = 1\r\n    RTS_CTS = 2\r\n    DSR_DTR = 3\r\n```\r\n\r\nI can reproduce the problem directly with serpent:\r\n\r\n```python\r\n>>> import serpent\r\n>>> from septentrio.connection import FlowControl\r\n>>> serpent.dumps(FlowControl.RTS_CTS)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 91, in dumps\r\n    return Serializer(indent, set_literals, module_in_classname).serialize(obj)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 320, in serialize\r\n    self._serialize(obj, out, 0)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 361, in _serialize\r\n    func(self, obj, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 627, in ser_default_class\r\n    self._serialize(value, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 342, in _serialize\r\n    return self.dispatch[t](self, obj, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 499, in ser_builtins_dict\r\n    serialize(value, out, level + 1)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 361, in _serialize\r\n    func(self, obj, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 627, in ser_default_class\r\n    self._serialize(value, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 342, in _serialize\r\n    return self.dispatch[t](self, obj, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 499, in ser_builtins_dict\r\n    serialize(value, out, level + 1)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 361, in _serialize\r\n    func(self, obj, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 627, in ser_default_class\r\n    self._serialize(value, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 342, in _serialize\r\n    return self.dispatch[t](self, obj, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 499, in ser_builtins_dict\r\n    serialize(value, out, level + 1)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 361, in _serialize\r\n    func(self, obj, out, level)\r\n  File \"C:\\Python27\\lib\\site-packages\\serpent.py\", line 599, in ser_default_class\r\n    raise ValueError(\"Circular reference detected (class)\")\r\nValueError: Circular reference detected (class)\r\n```\r\n\r\nI've tried this on Python 2.7.15 both x86 and amd64 platform.\r\n\r\nIs that expected?\r\n\r\nThe documentation mentions that enumerations for Python 3.4 are supported and I assumed that the enum34 backported package would be supported too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/201", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/201/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/201/events", "html_url": "https://github.com/irmen/Pyro4/issues/201", "id": 343393596, "node_id": "MDU6SXNzdWUzNDMzOTM1OTY=", "number": 201, "title": "Cannot obtain remote traceback with seriliazed custom exceptions", "user": {"login": "nedo99", "id": 1510807, "node_id": "MDQ6VXNlcjE1MTA4MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1510807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nedo99", "html_url": "https://github.com/nedo99", "followers_url": "https://api.github.com/users/nedo99/followers", "following_url": "https://api.github.com/users/nedo99/following{/other_user}", "gists_url": "https://api.github.com/users/nedo99/gists{/gist_id}", "starred_url": "https://api.github.com/users/nedo99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nedo99/subscriptions", "organizations_url": "https://api.github.com/users/nedo99/orgs", "repos_url": "https://api.github.com/users/nedo99/repos", "events_url": "https://api.github.com/users/nedo99/events{/privacy}", "received_events_url": "https://api.github.com/users/nedo99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-22T10:05:08Z", "updated_at": "2018-07-25T07:50:42Z", "closed_at": "2018-07-25T07:50:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nStarted using Pyro4 recently and run in the following issue.\r\nIn my code I need to raise a custom exception in remote object method. Of course I get an error saying that it is unknown unserializable object, even thought I inherit it from `Exception` class, which is serializable. Then I use `SerializerBase` to serialize my custom exception to be able to raise my custom exception. That works, but in that case `Pyro4.util.getPyroTraceback()` returns empty list. So basically remote traceback, the most important part, is missing.\r\n\r\nCould you point me to solution for this use case? I see this as a major issue. How can I obtain remote traceback for custom exceptions?\r\n\r\nRegards,\r\nNedim", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/200", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/200/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/200/events", "html_url": "https://github.com/irmen/Pyro4/issues/200", "id": 333458764, "node_id": "MDU6SXNzdWUzMzM0NTg3NjQ=", "number": 200, "title": "Pyro4 feature complete,   go try out Pyro5", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563095, "node_id": "MDU6TGFiZWw0NTU2MzA5NQ==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-18T22:36:48Z", "updated_at": "2020-04-29T13:04:46Z", "closed_at": "2020-04-29T13:04:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I consider Pyro4 feature complete now and it will probably only receive bugfixes from now on.\r\nSo I've started working on **Pyro5** again for a bit.\r\n\r\nPyro5 is going to be the next major version of Pyro and can be found here https://github.com/irmen/Pyro5\r\n\r\nRecently it got a Pyro4 compatibility layer.\r\nIt offers API aliases to the most common parts of the Pyro4 API. It may be required to change your code a bit to import stuff from the Pyro4 module itself rather than from a submodule such as Pyro4.naming    but then you can often run your Pyro4 code without further modifications by just just inserting one line at the top:\r\n\r\n``from Pyro5.compatibility import Pyro4``\r\n\r\nPlease try it out :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/199", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/199/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/199/events", "html_url": "https://github.com/irmen/Pyro4/issues/199", "id": 308248617, "node_id": "MDU6SXNzdWUzMDgyNDg2MTc=", "number": 199, "title": "-k is a local security hole", "user": {"login": "tkorvola", "id": 6231127, "node_id": "MDQ6VXNlcjYyMzExMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6231127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tkorvola", "html_url": "https://github.com/tkorvola", "followers_url": "https://api.github.com/users/tkorvola/followers", "following_url": "https://api.github.com/users/tkorvola/following{/other_user}", "gists_url": "https://api.github.com/users/tkorvola/gists{/gist_id}", "starred_url": "https://api.github.com/users/tkorvola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tkorvola/subscriptions", "organizations_url": "https://api.github.com/users/tkorvola/orgs", "repos_url": "https://api.github.com/users/tkorvola/repos", "events_url": "https://api.github.com/users/tkorvola/events{/privacy}", "received_events_url": "https://api.github.com/users/tkorvola/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-24T10:32:48Z", "updated_at": "2018-04-03T00:46:11Z", "closed_at": "2018-04-03T00:46:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "`argv` is public information on Unix systems: if `pyro4-ns` is started with the `-k` option, any local user can see the key with `ps`. Reading the key from a file would be more secure. For extra security, check that the key file is accessible only by the current user.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/198", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/198/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/198/events", "html_url": "https://github.com/irmen/Pyro4/issues/198", "id": 301248922, "node_id": "MDU6SXNzdWUzMDEyNDg5MjI=", "number": 198, "title": "deprecation warning on python 3.7b2", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-01T01:44:42Z", "updated_at": "2018-03-01T21:39:55Z", "closed_at": "2018-03-01T21:39:55Z", "author_association": "OWNER", "active_lock_reason": null, "body": "naming_storage.py:11: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import MutableMapping\r\n\r\ncore.py:1764: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/196", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/196/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/196/events", "html_url": "https://github.com/irmen/Pyro4/issues/196", "id": 297415036, "node_id": "MDU6SXNzdWUyOTc0MTUwMzY=", "number": 196, "title": " init.d/pyro4-nsd restart failure", "user": {"login": "dave-kitchen", "id": 33513282, "node_id": "MDQ6VXNlcjMzNTEzMjgy", "avatar_url": "https://avatars1.githubusercontent.com/u/33513282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dave-kitchen", "html_url": "https://github.com/dave-kitchen", "followers_url": "https://api.github.com/users/dave-kitchen/followers", "following_url": "https://api.github.com/users/dave-kitchen/following{/other_user}", "gists_url": "https://api.github.com/users/dave-kitchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dave-kitchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dave-kitchen/subscriptions", "organizations_url": "https://api.github.com/users/dave-kitchen/orgs", "repos_url": "https://api.github.com/users/dave-kitchen/repos", "events_url": "https://api.github.com/users/dave-kitchen/events{/privacy}", "received_events_url": "https://api.github.com/users/dave-kitchen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-15T11:37:01Z", "updated_at": "2018-02-15T22:51:33Z", "closed_at": "2018-02-15T22:51:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think the lines 83,84 in  Pyro4/contrib/init.d/pyro4-nsd are in revese order - should stop, then start.\r\nthe 'force' clause is also wrong", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/195", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/195/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/195/events", "html_url": "https://github.com/irmen/Pyro4/issues/195", "id": 295687868, "node_id": "MDU6SXNzdWUyOTU2ODc4Njg=", "number": 195, "title": "fix msgpack api deprecation warning", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-08T22:26:19Z", "updated_at": "2018-02-13T22:37:43Z", "closed_at": "2018-02-13T22:37:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "check tox test output; there's some msgpack api deprecation warning.\r\n\r\nverify msgpack version that the fix for this may require.\r\n\r\nalso port to Pyro5", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/194", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/194/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/194/events", "html_url": "https://github.com/irmen/Pyro4/issues/194", "id": 291658465, "node_id": "MDU6SXNzdWUyOTE2NTg0NjU=", "number": 194, "title": "Django 1.6.11", "user": {"login": "eduardolujan", "id": 3002605, "node_id": "MDQ6VXNlcjMwMDI2MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3002605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardolujan", "html_url": "https://github.com/eduardolujan", "followers_url": "https://api.github.com/users/eduardolujan/followers", "following_url": "https://api.github.com/users/eduardolujan/following{/other_user}", "gists_url": "https://api.github.com/users/eduardolujan/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardolujan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardolujan/subscriptions", "organizations_url": "https://api.github.com/users/eduardolujan/orgs", "repos_url": "https://api.github.com/users/eduardolujan/repos", "events_url": "https://api.github.com/users/eduardolujan/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardolujan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-25T17:49:08Z", "updated_at": "2018-01-25T22:26:18Z", "closed_at": "2018-01-25T22:25:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi , \r\n\r\n\r\nSome of you are using pyro with some version of django with version later than 1.6.11 ?\r\n\r\nRegards,\r\nEd", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/193", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/193/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/193/events", "html_url": "https://github.com/irmen/Pyro4/issues/193", "id": 288715000, "node_id": "MDU6SXNzdWUyODg3MTUwMDA=", "number": 193, "title": "wait for Python 3.7 beta 1 at least to release next Pyro version 4.64", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-15T21:00:23Z", "updated_at": "2018-02-01T20:05:24Z", "closed_at": "2018-02-01T20:05:23Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Pyro 4.64 introduces a backwards INcompatible API change to become compatible with Python 3.7 (because ``async`` has now become a keyword)\r\n\r\nWait until the official beta release of Python 3.7 is out before shipping this new Pyro version\r\n\r\nPython's release schedule says: 3.7.0 beta 1: 2018-01-29 (No new features beyond this point.)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/192", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/192/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/192/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/192/events", "html_url": "https://github.com/irmen/Pyro4/issues/192", "id": 288699684, "node_id": "MDU6SXNzdWUyODg2OTk2ODQ=", "number": 192, "title": "Refcounting autoproxy unique UID's for automatic GC/unregistration requests", "user": {"login": "mccullerlp", "id": 413939, "node_id": "MDQ6VXNlcjQxMzkzOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/413939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mccullerlp", "html_url": "https://github.com/mccullerlp", "followers_url": "https://api.github.com/users/mccullerlp/followers", "following_url": "https://api.github.com/users/mccullerlp/following{/other_user}", "gists_url": "https://api.github.com/users/mccullerlp/gists{/gist_id}", "starred_url": "https://api.github.com/users/mccullerlp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mccullerlp/subscriptions", "organizations_url": "https://api.github.com/users/mccullerlp/orgs", "repos_url": "https://api.github.com/users/mccullerlp/repos", "events_url": "https://api.github.com/users/mccullerlp/events{/privacy}", "received_events_url": "https://api.github.com/users/mccullerlp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-15T19:49:56Z", "updated_at": "2018-01-21T15:00:47Z", "closed_at": "2018-01-21T15:00:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Pyro4 to develop some bindings into python from Matlab and the AUTOPROXY is quite nice for keeping python computations and objects server-side and returning basic data like arrays. \r\n\r\nWhat would be quite useful is to use the Daemon proxy to allow requests for server-side unregistration as the client uses and then forgets about proxies. \r\n\r\nEssentially some way for the proxy to know when its URI was generated uniquely from a uuid, and then a __del__ method on the proxy that checks how many proxies remain with the same URI. If no others remain, then it can make a request to the server to free the object associated with the URI.\r\n\r\nThis would allow long-running servers while using AUTOPROXY and keeping objects entirely server-side. This is of course not possible with multiple clients sharing proxy's.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/190", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/190/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/190/events", "html_url": "https://github.com/irmen/Pyro4/issues/190", "id": 280424739, "node_id": "MDU6SXNzdWUyODA0MjQ3Mzk=", "number": 190, "title": "Network compatibility between two different Pyro versions", "user": {"login": "pevogam", "id": 1969979, "node_id": "MDQ6VXNlcjE5Njk5Nzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1969979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pevogam", "html_url": "https://github.com/pevogam", "followers_url": "https://api.github.com/users/pevogam/followers", "following_url": "https://api.github.com/users/pevogam/following{/other_user}", "gists_url": "https://api.github.com/users/pevogam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pevogam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pevogam/subscriptions", "organizations_url": "https://api.github.com/users/pevogam/orgs", "repos_url": "https://api.github.com/users/pevogam/repos", "events_url": "https://api.github.com/users/pevogam/events{/privacy}", "received_events_url": "https://api.github.com/users/pevogam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-08T09:23:13Z", "updated_at": "2017-12-09T07:49:59Z", "closed_at": "2017-12-08T19:33:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Irmen,\r\n\r\nIs there a good place to read about backward compatibility among Pyro versions? I encountered an error when using Pyro 4.25 on one side and 4.63 on another (interchangeable client-server roles) where the client hangs indefinitely while trying to connect. The same networking setup works fine when the Pyro versions correspond in both the older and the newer version. I don't mind using using the same version as this is clearly a preferred situation but my worries are about backward compatibility when testing older tags of our git tree. Switching to older commits will require us to reinstall Pyro on one side each time.\r\n\r\nThanks in advance for any hints,\r\nPlamen", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/189", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/189/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/189/events", "html_url": "https://github.com/irmen/Pyro4/issues/189", "id": 279517131, "node_id": "MDU6SXNzdWUyNzk1MTcxMzE=", "number": 189, "title": "be able to run Pyro4 daemon and proxy on existing sockets", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-05T20:22:54Z", "updated_at": "2018-01-20T22:16:12Z", "closed_at": "2018-01-20T22:16:12Z", "author_association": "OWNER", "active_lock_reason": null, "body": "be able to supply an existing socket (or even fd? nah, can make a socket from this yourself) to the daemon and proxy.\r\n\r\n(that makes it possible to run pyro over a socketpair() for instance)\r\n\r\nport this to Pyro5 as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/188", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/188/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/188/events", "html_url": "https://github.com/irmen/Pyro4/issues/188", "id": 271396396, "node_id": "MDU6SXNzdWUyNzEzOTYzOTY=", "number": 188, "title": "Remote module attributes are inaccessible using Flame", "user": {"login": "LevyCory", "id": 18327191, "node_id": "MDQ6VXNlcjE4MzI3MTkx", "avatar_url": "https://avatars2.githubusercontent.com/u/18327191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LevyCory", "html_url": "https://github.com/LevyCory", "followers_url": "https://api.github.com/users/LevyCory/followers", "following_url": "https://api.github.com/users/LevyCory/following{/other_user}", "gists_url": "https://api.github.com/users/LevyCory/gists{/gist_id}", "starred_url": "https://api.github.com/users/LevyCory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LevyCory/subscriptions", "organizations_url": "https://api.github.com/users/LevyCory/orgs", "repos_url": "https://api.github.com/users/LevyCory/repos", "events_url": "https://api.github.com/users/LevyCory/events{/privacy}", "received_events_url": "https://api.github.com/users/LevyCory/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-06T08:42:11Z", "updated_at": "2017-11-06T20:52:42Z", "closed_at": "2017-11-06T20:52:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/187", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/187/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/187/events", "html_url": "https://github.com/irmen/Pyro4/issues/187", "id": 271234065, "node_id": "MDU6SXNzdWUyNzEyMzQwNjU=", "number": 187, "title": "async and await will be keyword in python 3.7 -> syntaxerror", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-04T23:15:05Z", "updated_at": "2017-11-09T22:26:40Z", "closed_at": "2017-11-09T22:26:40Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See https://www.python.org/dev/peps/pep-0492/#deprecation-plans\r\n\r\nwill have to rename Pyro4.core.async to something else (and the keyword argument async as well)\r\n\r\nUnfortunately, due to it being a syntaxerror, we cannot keep the old name around for older code\r\n\u2757\ufe0f  todo:  update docs and examples to reference the change in name to asyncproxy/asynchronous\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/186", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/186/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/186/events", "html_url": "https://github.com/irmen/Pyro4/issues/186", "id": 260015706, "node_id": "MDU6SXNzdWUyNjAwMTU3MDY=", "number": 186, "title": "be able to free resources properly when client disconnects", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-09-23T15:34:22Z", "updated_at": "2017-10-18T16:57:43Z", "closed_at": "2017-10-18T16:57:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See https://stackoverflow.com/questions/45882693/releasing-resources-when-pyro4-client-disconnects-unexpectedly\r\n\r\nWe should perhaps have a better method to properly free the  resources a client allocated.\r\nThe Daemon's clientDisconnect method is designed for this, but it only gets a connection as an argument.  It's not possible anyway to correlate that to a single Pyro server object because a sigle connection can have accessed multiple objects.  \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/185", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/185/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/185/events", "html_url": "https://github.com/irmen/Pyro4/issues/185", "id": 259323603, "node_id": "MDU6SXNzdWUyNTkzMjM2MDM=", "number": 185, "title": "How to expose a staticmethod?", "user": {"login": "jcea", "id": 1447160, "node_id": "MDQ6VXNlcjE0NDcxNjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1447160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcea", "html_url": "https://github.com/jcea", "followers_url": "https://api.github.com/users/jcea/followers", "following_url": "https://api.github.com/users/jcea/following{/other_user}", "gists_url": "https://api.github.com/users/jcea/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcea/subscriptions", "organizations_url": "https://api.github.com/users/jcea/orgs", "repos_url": "https://api.github.com/users/jcea/repos", "events_url": "https://api.github.com/users/jcea/events{/privacy}", "received_events_url": "https://api.github.com/users/jcea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-20T22:40:55Z", "updated_at": "2017-09-23T11:31:03Z", "closed_at": "2017-09-23T11:31:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I miss the mailing list! :-).\r\n\r\nWhen I do this:\r\n\r\n```\r\nclass dummy:\r\n    @Pyro4.expose\r\n    @staticmethod\r\n    def add(a, b):\r\n        return a+b\r\n```\r\nI get this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<stdin>\", line 3, in dummy\r\n  File \"/usr/local/lib/python3.6/site-packages/Pyro4/core.py\", line 946, in expose\r\n    if util.is_private_attribute(method_or_class.__name__):\r\nAttributeError: 'staticmethod' object has no attribute '__name__'\r\n```\r\n\r\nHow should I expose an static method?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/183", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/183/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/183/events", "html_url": "https://github.com/irmen/Pyro4/issues/183", "id": 256085238, "node_id": "MDU6SXNzdWUyNTYwODUyMzg=", "number": 183, "title": "Add an option to run flame in firejail", "user": {"login": "traverseda", "id": 2125828, "node_id": "MDQ6VXNlcjIxMjU4Mjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2125828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/traverseda", "html_url": "https://github.com/traverseda", "followers_url": "https://api.github.com/users/traverseda/followers", "following_url": "https://api.github.com/users/traverseda/following{/other_user}", "gists_url": "https://api.github.com/users/traverseda/gists{/gist_id}", "starred_url": "https://api.github.com/users/traverseda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/traverseda/subscriptions", "organizations_url": "https://api.github.com/users/traverseda/orgs", "repos_url": "https://api.github.com/users/traverseda/repos", "events_url": "https://api.github.com/users/traverseda/events{/privacy}", "received_events_url": "https://api.github.com/users/traverseda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-07T22:09:20Z", "updated_at": "2017-09-13T19:39:11Z", "closed_at": "2017-09-13T19:39:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://firejail.wordpress.com/\r\n\r\nThis looks like it would allow you to use flame safely. Also puns.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/182", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/182/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/182/events", "html_url": "https://github.com/irmen/Pyro4/issues/182", "id": 254619587, "node_id": "MDU6SXNzdWUyNTQ2MTk1ODc=", "number": 182, "title": "Projects using Pyro4", "user": {"login": "Peque", "id": 526577, "node_id": "MDQ6VXNlcjUyNjU3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peque", "html_url": "https://github.com/Peque", "followers_url": "https://api.github.com/users/Peque/followers", "following_url": "https://api.github.com/users/Peque/following{/other_user}", "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peque/subscriptions", "organizations_url": "https://api.github.com/users/Peque/orgs", "repos_url": "https://api.github.com/users/Peque/repos", "events_url": "https://api.github.com/users/Peque/events{/privacy}", "received_events_url": "https://api.github.com/users/Peque/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563098, "node_id": "MDU6TGFiZWw0NTU2MzA5OA==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-01T11:58:54Z", "updated_at": "2018-01-15T22:21:10Z", "closed_at": "2018-01-15T20:51:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Would you be willing to add a section in the documentation (i.e.: in \"Intro and Example\") for \"Projects using Pyro4\"? If so, I would like to add [osBrain](https://osbrain.readthedocs.io/en/stable/) (have a look at it if you have some time and feel interested).\r\n\r\nI guess you wouldn't like to have a single project there, but maybe you know about other use cases which you can display? Among those 350+ stars I bet there are a couple of interesting projects! Hopefully some are free software too.\r\n\r\nI think it could be beneficial for both:\r\n\r\n- You get to \"show off\" (if others use your project it usually means your project is cool).\r\n- The other projects get some visibility.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/181", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/181/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/181/events", "html_url": "https://github.com/irmen/Pyro4/issues/181", "id": 249520651, "node_id": "MDU6SXNzdWUyNDk1MjA2NTE=", "number": 181, "title": "strange error on new travis build with pypy3", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-11T01:47:39Z", "updated_at": "2017-08-11T13:31:29Z", "closed_at": "2017-08-11T13:31:29Z", "author_association": "OWNER", "active_lock_reason": null, "body": "occurring on Travis pypy3 build on trusty ubuntu image (not sure which pypy3 version this is, I think 5.8.0)  \r\n\r\nreproducible with pypy3 5.8.0 on OSX\r\n\r\n```\r\n\r\n======================================================================\r\n\r\nFAIL: testExposedNotRequired (PyroTests.test_server.ServerTestsOnce)\r\n\r\n----------------------------------------------------------------------\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/travis/build/irmen/Pyro4/tests/PyroTests/test_server.py\", line 411, in testExposedNotRequired\r\n\r\n    self.assertEqual({\"unexposed\", \"getName\"}, p._pyroMethods)\r\n\r\nAssertionError: Items in the second set but not the first:\r\n\r\n'__ge__'\r\n\r\n'__gt__'\r\n\r\n'__le__'\r\n\r\n'__lt__'\r\n\r\n======================================================================\r\n\r\nFAIL: testNotOnlyExposed (PyroTests.test_util.TestMeta)\r\n\r\n----------------------------------------------------------------------\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/travis/build/irmen/Pyro4/tests/PyroTests/test_util.py\", line 322, in testNotOnlyExposed\r\n\r\n    self.assertEqual({\"classmethod\", \"staticmethod\", \"method\", \"__dunder__\", \"oneway\", \"exposed\"}, m[\"methods\"])\r\n\r\nAssertionError: Items in the second set but not the first:\r\n\r\n'__ge__'\r\n\r\n'__gt__'\r\n\r\n'__le__'\r\n\r\n'__lt__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/180", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/180/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/180/events", "html_url": "https://github.com/irmen/Pyro4/issues/180", "id": 243793860, "node_id": "MDU6SXNzdWUyNDM3OTM4NjA=", "number": 180, "title": "Pyro4 test suite fails with Travis", "user": {"login": "Peque", "id": 526577, "node_id": "MDQ6VXNlcjUyNjU3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peque", "html_url": "https://github.com/Peque", "followers_url": "https://api.github.com/users/Peque/followers", "following_url": "https://api.github.com/users/Peque/following{/other_user}", "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peque/subscriptions", "organizations_url": "https://api.github.com/users/Peque/orgs", "repos_url": "https://api.github.com/users/Peque/repos", "events_url": "https://api.github.com/users/Peque/events{/privacy}", "received_events_url": "https://api.github.com/users/Peque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-18T17:35:31Z", "updated_at": "2017-08-09T21:01:31Z", "closed_at": "2017-08-09T21:01:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From time to time it seems to fail.\r\n\r\nSeems to be the same problem always, but with different results:\r\n\r\n- [All tests pass, but the build is terminated by Travis as it gets stuck](https://travis-ci.org/irmen/Pyro4/jobs/254797980).\r\n- [All tests pass, the build success but there is still an error in the Travis log](https://travis-ci.org/irmen/Pyro4/jobs/254797983).\r\n- [`testInvalidMessageCrash` fails and the usual log appears](https://travis-ci.org/Peque/Pyro4/jobs/254950452).\r\n- [`testInvalidMessageCrash` fails but this time with no other log](https://travis-ci.org/irmen/Pyro4/jobs/254950478)\r\n- [`testInvalidMessageCrash` fails and this time with extra log](https://travis-ci.org/irmen/Pyro4/jobs/254955673)\r\n\r\nThey seem to occur randomly, independently from the Python interpreter version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/178", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/178/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/178/events", "html_url": "https://github.com/irmen/Pyro4/issues/178", "id": 240960751, "node_id": "MDU6SXNzdWUyNDA5NjA3NTE=", "number": 178, "title": "Accessing exposed method throws unexposed attribute error.", "user": {"login": "mickp", "id": 5138863, "node_id": "MDQ6VXNlcjUxMzg4NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5138863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mickp", "html_url": "https://github.com/mickp", "followers_url": "https://api.github.com/users/mickp/followers", "following_url": "https://api.github.com/users/mickp/following{/other_user}", "gists_url": "https://api.github.com/users/mickp/gists{/gist_id}", "starred_url": "https://api.github.com/users/mickp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mickp/subscriptions", "organizations_url": "https://api.github.com/users/mickp/orgs", "repos_url": "https://api.github.com/users/mickp/repos", "events_url": "https://api.github.com/users/mickp/events{/privacy}", "received_events_url": "https://api.github.com/users/mickp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-06T13:42:16Z", "updated_at": "2017-07-06T17:29:37Z", "closed_at": "2017-07-06T15:28:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running Pyro 4.60.\r\nI have a class with methods\r\n  setPower(self, arg)\r\n  setPower_mW(self, arg)\r\n\r\nIf I try to access setPower_mW, it results in\r\n  AttributeError: attempt to access unexposed attribute 'setPower_mW'\r\nIf I rename the method to setPowermW, behaviour is as expected - the remote method is called correctly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/177", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/177/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/177/events", "html_url": "https://github.com/irmen/Pyro4/issues/177", "id": 238545719, "node_id": "MDU6SXNzdWUyMzg1NDU3MTk=", "number": 177, "title": "Better error messages?", "user": {"login": "krey", "id": 223908, "node_id": "MDQ6VXNlcjIyMzkwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/223908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krey", "html_url": "https://github.com/krey", "followers_url": "https://api.github.com/users/krey/followers", "following_url": "https://api.github.com/users/krey/following{/other_user}", "gists_url": "https://api.github.com/users/krey/gists{/gist_id}", "starred_url": "https://api.github.com/users/krey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krey/subscriptions", "organizations_url": "https://api.github.com/users/krey/orgs", "repos_url": "https://api.github.com/users/krey/repos", "events_url": "https://api.github.com/users/krey/events{/privacy}", "received_events_url": "https://api.github.com/users/krey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-26T13:37:45Z", "updated_at": "2017-07-06T17:31:38Z", "closed_at": "2017-07-06T17:31:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "If my client uses a serializer that the nameserver doesn't accept (eg. pickle by default), all I get is an error that nameserver not found. This was very difficult to debug.\r\nPlease consider more helpful error messages.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/176", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/176/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/176/events", "html_url": "https://github.com/irmen/Pyro4/issues/176", "id": 238334820, "node_id": "MDU6SXNzdWUyMzgzMzQ4MjA=", "number": 176, "title": "How to connect to a secure flamserver?", "user": {"login": "krey", "id": 223908, "node_id": "MDQ6VXNlcjIyMzkwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/223908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krey", "html_url": "https://github.com/krey", "followers_url": "https://api.github.com/users/krey/followers", "following_url": "https://api.github.com/users/krey/following{/other_user}", "gists_url": "https://api.github.com/users/krey/gists{/gist_id}", "starred_url": "https://api.github.com/users/krey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krey/subscriptions", "organizations_url": "https://api.github.com/users/krey/orgs", "repos_url": "https://api.github.com/users/krey/repos", "events_url": "https://api.github.com/users/krey/events{/privacy}", "received_events_url": "https://api.github.com/users/krey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563095, "node_id": "MDU6TGFiZWw0NTU2MzA5NQ==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-24T18:37:03Z", "updated_at": "2017-06-26T18:09:50Z", "closed_at": "2017-06-26T18:09:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nHow to connect to a secure flameserver?\r\n\r\nServer side: python -m Pyro4.utils.flameserver -H 192.168.1.102 -p 64444 -k 123456\r\n\r\nClient side: flame=Pyro4.utils.flame.connect(\"192.168.1.102:64444, key=123456\") ?\r\n\r\nI want explanation for connecting on a server with HMAC_Key\r\n\r\nI found this reference, but it no longer works: http://pyro-core.narkive.com/GxndCV2C/hmac-key\r\n\r\nThanks,\r\n\r\nkrey\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/174", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/174/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/174/events", "html_url": "https://github.com/irmen/Pyro4/issues/174", "id": 232699519, "node_id": "MDU6SXNzdWUyMzI2OTk1MTk=", "number": 174, "title": "Importing Pyro4 into IronPython crashes Unity3D process", "user": {"login": "marccrobbins", "id": 17500124, "node_id": "MDQ6VXNlcjE3NTAwMTI0", "avatar_url": "https://avatars3.githubusercontent.com/u/17500124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marccrobbins", "html_url": "https://github.com/marccrobbins", "followers_url": "https://api.github.com/users/marccrobbins/followers", "following_url": "https://api.github.com/users/marccrobbins/following{/other_user}", "gists_url": "https://api.github.com/users/marccrobbins/gists{/gist_id}", "starred_url": "https://api.github.com/users/marccrobbins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marccrobbins/subscriptions", "organizations_url": "https://api.github.com/users/marccrobbins/orgs", "repos_url": "https://api.github.com/users/marccrobbins/repos", "events_url": "https://api.github.com/users/marccrobbins/events{/privacy}", "received_events_url": "https://api.github.com/users/marccrobbins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-31T21:19:09Z", "updated_at": "2017-06-01T17:32:11Z", "closed_at": "2017-06-01T17:32:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been using Pyro4 as means to interpret IronPython to Python to be able to communicate between Unity3D and Python.  \r\n\r\nEverything worked fine until recently, I even downgraded Pyro4 to see if it was version specific. It is not. \r\n\r\nThe crash only happens when I try to import Pyro4 into a .py file. With it excluded, I can run my processes(without Pyro connection) and Unity continues working as expected. \r\n\r\nI found something about Pyro possibly not liking more than 15 threads for some reason. Is this true? Is there a way to get around this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/173", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/173/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/173/events", "html_url": "https://github.com/irmen/Pyro4/issues/173", "id": 229020480, "node_id": "MDU6SXNzdWUyMjkwMjA0ODA=", "number": 173, "title": "Local installation hangs on resolving serpent dependency", "user": {"login": "wonderg", "id": 5734786, "node_id": "MDQ6VXNlcjU3MzQ3ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/5734786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wonderg", "html_url": "https://github.com/wonderg", "followers_url": "https://api.github.com/users/wonderg/followers", "following_url": "https://api.github.com/users/wonderg/following{/other_user}", "gists_url": "https://api.github.com/users/wonderg/gists{/gist_id}", "starred_url": "https://api.github.com/users/wonderg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wonderg/subscriptions", "organizations_url": "https://api.github.com/users/wonderg/orgs", "repos_url": "https://api.github.com/users/wonderg/repos", "events_url": "https://api.github.com/users/wonderg/events{/privacy}", "received_events_url": "https://api.github.com/users/wonderg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-16T12:49:02Z", "updated_at": "2017-05-16T19:53:40Z", "closed_at": "2017-05-16T19:53:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "If serpent is already installed\r\n```\r\n[root@host]# pip3.4 list | grep serpent\r\nserpent (1.8)\r\n```\r\nAnd you try to install Pyro3.4 from source \r\n\r\n`setup3.4 setup.py install `\r\n\r\nHowever, Pyro4 installation try to download serpent from pypi.python.org\r\n```\r\n\r\nInstalled /usr/lib/python3.4/site-packages/Pyro4-4.59-py3.4.egg\r\nProcessing dependencies for Pyro4==4.59\r\nSearching for serpent>=1.19\r\nReading https://pypi.python.org/simple/serpent/\r\n```\r\n\r\nAnd fails if host is not connected to public Internet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/172", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/172/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/172/events", "html_url": "https://github.com/irmen/Pyro4/issues/172", "id": 226433131, "node_id": "MDU6SXNzdWUyMjY0MzMxMzE=", "number": 172, "title": "ProxyObject._pyroTimeout behavior", "user": {"login": "emruiz81", "id": 16395807, "node_id": "MDQ6VXNlcjE2Mzk1ODA3", "avatar_url": "https://avatars3.githubusercontent.com/u/16395807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emruiz81", "html_url": "https://github.com/emruiz81", "followers_url": "https://api.github.com/users/emruiz81/followers", "following_url": "https://api.github.com/users/emruiz81/following{/other_user}", "gists_url": "https://api.github.com/users/emruiz81/gists{/gist_id}", "starred_url": "https://api.github.com/users/emruiz81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emruiz81/subscriptions", "organizations_url": "https://api.github.com/users/emruiz81/orgs", "repos_url": "https://api.github.com/users/emruiz81/repos", "events_url": "https://api.github.com/users/emruiz81/events{/privacy}", "received_events_url": "https://api.github.com/users/emruiz81/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-04T23:08:25Z", "updated_at": "2017-05-15T17:42:55Z", "closed_at": "2017-05-15T17:42:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to use the ._pyroTimeout attribute in my client/server implementation. The problem I'm experiencing is that when a timeout occurs in the server (for calling a blocking method), an exception is thrown in the client (which is OK), but then the server ends its requestLoop().\r\nMy question is: What happens if other objects were working from separate client threads? Is this the expected behavior?, what I think should be more useful is to report the timeout exception in the client thread that called that blocking method (as it is happening right now), but at least give some time to the other threads to end their jobs (in case they were working on something else). \r\nThe thing is, I whish I could catch timeouts per session, without affecting other sessions.\r\n\r\nThanks in advance for your help! \r\nThis API is one of the most fantastic Python libs I've ever seen! (and trust me, I've been working with Python for years :) ).\r\n\r\nRegards,\r\n\r\nEzequiel", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/165", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/165/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/165/events", "html_url": "https://github.com/irmen/Pyro4/issues/165", "id": 214174332, "node_id": "MDU6SXNzdWUyMTQxNzQzMzI=", "number": 165, "title": "handling synchronization and race condition", "user": {"login": "hsgodhia", "id": 1400978, "node_id": "MDQ6VXNlcjE0MDA5Nzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1400978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hsgodhia", "html_url": "https://github.com/hsgodhia", "followers_url": "https://api.github.com/users/hsgodhia/followers", "following_url": "https://api.github.com/users/hsgodhia/following{/other_user}", "gists_url": "https://api.github.com/users/hsgodhia/gists{/gist_id}", "starred_url": "https://api.github.com/users/hsgodhia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hsgodhia/subscriptions", "organizations_url": "https://api.github.com/users/hsgodhia/orgs", "repos_url": "https://api.github.com/users/hsgodhia/repos", "events_url": "https://api.github.com/users/hsgodhia/events{/privacy}", "received_events_url": "https://api.github.com/users/hsgodhia/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563097, "node_id": "MDU6TGFiZWw0NTU2MzA5Nw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-14T19:01:22Z", "updated_at": "2017-03-16T19:22:22Z", "closed_at": "2017-03-16T19:22:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "In one of the example codes for the bank scenario `Pyro4/examples/banks/banks.py` \r\nI noticed that in the `withdraw` function for `RestrictedAccount` which is ideally supposed to prevent over withdraws and negative balance, would run into race conditions when the client is multithreaded and concurrently access the bank object for withdrawals (using different proxies, no proxysharing). How can this be prevented, does pyro4 support locks? if not how does one use python lock, rlock primitives on remote objects defined in pyro of `@Pyro4.behavior(instance_mode=\"single\")` behavior", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/164", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/164/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/164/events", "html_url": "https://github.com/irmen/Pyro4/issues/164", "id": 213844679, "node_id": "MDU6SXNzdWUyMTM4NDQ2Nzk=", "number": 164, "title": "Thread vs. multiplex NameServer behavior", "user": {"login": "Peque", "id": 526577, "node_id": "MDQ6VXNlcjUyNjU3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peque", "html_url": "https://github.com/Peque", "followers_url": "https://api.github.com/users/Peque/followers", "following_url": "https://api.github.com/users/Peque/following{/other_user}", "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peque/subscriptions", "organizations_url": "https://api.github.com/users/Peque/orgs", "repos_url": "https://api.github.com/users/Peque/repos", "events_url": "https://api.github.com/users/Peque/events{/privacy}", "received_events_url": "https://api.github.com/users/Peque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-13T17:43:13Z", "updated_at": "2017-03-14T17:44:04Z", "closed_at": "2017-03-14T17:44:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have some code that works fine when using `Pyro4.config.SERVERTYPE = 'multiplex'` but fails when using `Pyro4.config.SERVERTYPE = 'thread'`. So I though I would ask here.\r\n\r\nNotes:\r\n\r\n- I have my own `NameServer` class, which is the same `Pyro4.naming.NameServer` only adding a new method `.shutdown()` that changes an attribute `shutdown_daemon` from `False` to `True` when executed.\r\n- I have a `NameServerProcess` class, which is a `multiprocessing.Process` that, when started, runs a `NameServerDaemon`'s `.requestLoop()`. Note that the parameter to the `.requestLoop` is \"monitoring\" changes in the attribute `shutdown_daemon` previously mentioned.\r\n- I then have a `NSProxy` class that acts as a `Pyro4.core.Proxy` to the `NameServer` object, so that I can execute the method `.shutdown()`.\r\n- I have a function which starts a `NameServerProcess` binding the daemon to a random (available) port.\r\n\r\nThen, what I do is:\r\n\r\n1. Start a `NameServerProcess` binding to a random address\r\n1. Create a `NSProxy` to the `NameServer` object.\r\n1. Call the remote `.shutdown()` method from the proxy.\r\n\r\nThis is working as expected when `Pyro4.config.SERVERTYPE` is set to `multiplex`. However, when I change it to `thread`, it blocks (never gets out of the `.requestLoop()` call, it seems.\r\n\r\nDo you have any idea about why could this be happening? Thanks in advance for any help or advice you could give me. :blush:\r\n\r\nHere is the code I am using, reduced as much as I could to represent this case:\r\n\r\n```python\r\nimport os\r\nimport time\r\nimport random\r\nimport multiprocessing\r\n\r\nimport Pyro4\r\nPyro4.config.SERVERTYPE = 'multiplex'\r\n\r\nfrom Pyro4.naming import BroadcastServer\r\nfrom Pyro4.errors import NamingError\r\n\r\n\r\n@Pyro4.expose\r\nclass NameServer(Pyro4.naming.NameServer):\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        self.shutdown_daemon = False\r\n\r\n    def shutdown(self):\r\n        \"\"\"\r\n        Shutdown the name server. All agents will be shutdown as well.\r\n        \"\"\"\r\n        self.shutdown_daemon = True\r\n\r\n\r\nPyro4.naming.NameServer = NameServer\r\n\r\n\r\nclass NameServerProcess(multiprocessing.Process):\r\n    \"\"\"\r\n    Name server class. Instances of a name server are system processes which\r\n    can be run independently.\r\n    \"\"\"\r\n    def __init__(self, addr=None):\r\n        super().__init__()\r\n        if isinstance(addr, int):\r\n            addr = '127.0.0.1:%s' % addr\r\n        self.addr = addr\r\n        self.host = addr.split(':')[0]\r\n        self.port = int(addr.split(':')[1])\r\n        self.uri = None\r\n        self.queue = multiprocessing.Queue()\r\n\r\n    def run(self):\r\n        try:\r\n            self.daemon = Pyro4.naming.NameServerDaemon(self.host, self.port)\r\n        except Exception:\r\n            self.queue.put('ERROR')\r\n            return\r\n        self.queue.put('STARTED')\r\n        self.uri = self.daemon.uriFor(self.daemon.nameserver)\r\n        self.host = self.uri.host\r\n        self.port = self.uri.port\r\n        internal_uri = self.daemon.uriFor(self.daemon.nameserver, nat=False)\r\n        bcserver = None\r\n        hostip = self.daemon.sock.getsockname()[0]\r\n        # Start broadcast responder\r\n        bcserver = BroadcastServer(internal_uri)\r\n        print(\"Broadcast server running on %s\" % bcserver.locationStr)\r\n        bcserver.runInThread()\r\n        print(\"NS running on %s (%s)\" % (self.daemon.locationStr, hostip))\r\n        print(\"URI = %s\" % self.uri)\r\n        try:\r\n            self.daemon.requestLoop(\r\n                lambda: (not self.daemon.nameserver.shutdown_daemon)\r\n            )\r\n        finally:\r\n            self.daemon.close()\r\n            if bcserver is not None:\r\n                bcserver.close()\r\n        print(\"NS shut down.\")\r\n\r\n    def start(self):\r\n        os.environ['OSBRAIN_NAMESERVER_ADDRESS'] = str(self.addr)\r\n        super().start()\r\n        status = self.queue.get()\r\n        if status == 'STARTED':\r\n            return\r\n        raise RuntimeError('An error occured while creating the daemon!' +\r\n                           '\\n===============\\n'.join(['', status, '']))\r\n\r\n\r\nclass NSProxy(Pyro4.core.Proxy):\r\n    \"\"\"\r\n    A proxy to access a name server.\r\n\r\n    Parameters\r\n    ----------\r\n    nsaddr : SocketAddress, str\r\n        Name server address.\r\n    timeout : float\r\n        Timeout, in seconds, to wait until the name server is discovered.\r\n    \"\"\"\r\n    def __init__(self, nsaddr=None, timeout=3):\r\n        if not nsaddr:\r\n            nsaddr = os.environ.get('OSBRAIN_NAMESERVER_ADDRESS')\r\n        nshost = nsaddr.split(':')[0]\r\n        nsport = int(nsaddr.split(':')[1])\r\n        # Make sure name server exists\r\n        Pyro4.locateNS(nshost, nsport)\r\n        ns_name = Pyro4.constants.NAMESERVER_NAME\r\n        super().__init__('PYRONAME:%s@%s:%d' % (ns_name, nshost, nsport))\r\n\r\n\r\ndef random_nameserver_process(host='127.0.0.1', timeout=3.):\r\n    \"\"\"\r\n    Start a random NameServerProcess.\r\n\r\n    Parameters\r\n    ----------\r\n    host : str, default is '127.0.0.1'\r\n        Host address where the name server will bind to.\r\n\r\n    Returns\r\n    -------\r\n    NameServerProcess\r\n        The name server process started.\r\n    \"\"\"\r\n    t0 = time.time()\r\n    exception = TimeoutError('Name server starting timed out!')\r\n    while True:\r\n        try:\r\n            # Bind to random port\r\n            port = random.randrange(10000, 20000 + 1)\r\n            nameserver = NameServerProcess('%s:%s' % (host, port))\r\n            nameserver.start()\r\n            return nameserver\r\n        except RuntimeError as error:\r\n            exception = error\r\n        if time.time() - t0 > timeout:\r\n            raise exception\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    ns = random_nameserver_process()\r\n    nsproxy = NSProxy(ns.addr)\r\n    nsproxy.shutdown()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/163", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/163/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/163/events", "html_url": "https://github.com/irmen/Pyro4/issues/163", "id": 213449604, "node_id": "MDU6SXNzdWUyMTM0NDk2MDQ=", "number": 163, "title": "find a way to limit number of concurrent open async proxy calls", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563095, "node_id": "MDU6TGFiZWw0NTU2MzA5NQ==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-03-10T20:54:41Z", "updated_at": "2017-03-11T16:50:37Z", "closed_at": "2017-03-11T16:50:37Z", "author_association": "OWNER", "active_lock_reason": null, "body": "pyro's threadpool server no longer blocks new connections when it is full, but instead returns an error message.\r\nthis is problematic for async proxies because spawning a lot of async calls will eventually result in a lot of returned errors (once you reach the threadpool limit), instead of calls waiting until they get through.\r\n\r\nIt would be nice if we have a way to cleanly limit the number of open async calls without throwing errors. The nicest solution would be if we get the old behavior back, so the client doesn't have to worry about anything\r\n\r\naffected example: distributed-computing2 (in the server)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/162", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/162/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/162/events", "html_url": "https://github.com/irmen/Pyro4/issues/162", "id": 212986966, "node_id": "MDU6SXNzdWUyMTI5ODY5NjY=", "number": 162, "title": "sample/distributed-computing have a problem", "user": {"login": "zheng-zy", "id": 13825054, "node_id": "MDQ6VXNlcjEzODI1MDU0", "avatar_url": "https://avatars3.githubusercontent.com/u/13825054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zheng-zy", "html_url": "https://github.com/zheng-zy", "followers_url": "https://api.github.com/users/zheng-zy/followers", "following_url": "https://api.github.com/users/zheng-zy/following{/other_user}", "gists_url": "https://api.github.com/users/zheng-zy/gists{/gist_id}", "starred_url": "https://api.github.com/users/zheng-zy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zheng-zy/subscriptions", "organizations_url": "https://api.github.com/users/zheng-zy/orgs", "repos_url": "https://api.github.com/users/zheng-zy/repos", "events_url": "https://api.github.com/users/zheng-zy/events{/privacy}", "received_events_url": "https://api.github.com/users/zheng-zy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-09T09:56:46Z", "updated_at": "2017-03-09T23:34:34Z", "closed_at": "2017-03-09T23:34:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "when i run this demo, find a problem.\r\nclient put data, worker can't get data, the queue data miss.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/161", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/161/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/161/events", "html_url": "https://github.com/irmen/Pyro4/issues/161", "id": 212551097, "node_id": "MDU6SXNzdWUyMTI1NTEwOTc=", "number": 161, "title": "arguments for constructor of a class", "user": {"login": "eendebakpt", "id": 883786, "node_id": "MDQ6VXNlcjg4Mzc4Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/883786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eendebakpt", "html_url": "https://github.com/eendebakpt", "followers_url": "https://api.github.com/users/eendebakpt/followers", "following_url": "https://api.github.com/users/eendebakpt/following{/other_user}", "gists_url": "https://api.github.com/users/eendebakpt/gists{/gist_id}", "starred_url": "https://api.github.com/users/eendebakpt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eendebakpt/subscriptions", "organizations_url": "https://api.github.com/users/eendebakpt/orgs", "repos_url": "https://api.github.com/users/eendebakpt/repos", "events_url": "https://api.github.com/users/eendebakpt/events{/privacy}", "received_events_url": "https://api.github.com/users/eendebakpt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-07T20:36:29Z", "updated_at": "2017-03-08T18:13:06Z", "closed_at": "2017-03-07T22:43:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I create a remote object, how can I pass arguments to the constructor? I would like to do something like:\r\n\r\n```\r\n...\r\ndaemon = Pyro4.Daemon()  \r\nuri = daemon.register(myclass\r\nns = Pyro4.locateNS() \r\nns.register('myclass', uri)) \r\n...\r\nhm = Pyro4.Proxy(\"PYRONAME:myclass\", argument1=10, argument2='test') \r\n```\r\nThe last line does not work. \r\n\r\nIn the docs I found the term `instance_creator`, but I don't know whether this solves my issue (and if so, how).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/160", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/160/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/160/events", "html_url": "https://github.com/irmen/Pyro4/issues/160", "id": 211974625, "node_id": "MDU6SXNzdWUyMTE5NzQ2MjU=", "number": 160, "title": "find a way to improve the close stream call when closing remote iterator", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563095, "node_id": "MDU6TGFiZWw0NTU2MzA5NQ==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-03-05T19:09:25Z", "updated_at": "2017-03-11T19:22:35Z", "closed_at": "2017-03-11T19:22:35Z", "author_association": "OWNER", "active_lock_reason": null, "body": "currently the close() method in remote iterator requires a second proxy to call close_stream on the server (to avoid sequence numbering issues)\r\n\r\nthis is very inefficient.\r\n\r\ntry to find a better way or to even avoid needless close_stream calls (f.ex. when stream is exhausted, perhaps it will already be deleted on the server automatically, thus no close_stream is required in this case)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/159", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/159/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/159/events", "html_url": "https://github.com/irmen/Pyro4/issues/159", "id": 211950691, "node_id": "MDU6SXNzdWUyMTE5NTA2OTE=", "number": 159, "title": "race condition in remote iterators", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563093, "node_id": "MDU6TGFiZWw0NTU2MzA5Mw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-03-05T12:51:55Z", "updated_at": "2017-03-05T18:12:10Z", "closed_at": "2017-03-05T18:12:10Z", "author_association": "OWNER", "active_lock_reason": null, "body": "There's a race condition somewhere when using remote iterators.\r\nThis has been the case ever since the feature got introduced in 4.49\r\n\r\nSometimes Pyro crashes with a reply sequence out of sync error\r\n\r\n```\r\n  File \"d:\\projects\\pyro4\\src\\Pyro4\\core.py\", line 426, in _pyroInvoke\r\n    self.__pyroCheckSequence(msg.seq)\r\n  File \"d:\\projects\\pyro4\\src\\Pyro4\\core.py\", line 461, in __pyroCheckSequence\r\n    raise errors.ProtocolError(err)\r\nPyro4.errors.ProtocolError: invoke: reply sequence out of sync, got 4533 expected 4577\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/158", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/158/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/158/events", "html_url": "https://github.com/irmen/Pyro4/issues/158", "id": 211900182, "node_id": "MDU6SXNzdWUyMTE5MDAxODI=", "number": 158, "title": "improved annotations access", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-04T19:10:39Z", "updated_at": "2017-03-05T19:02:17Z", "closed_at": "2017-03-05T19:02:17Z", "author_association": "OWNER", "active_lock_reason": null, "body": "client code should be able to access annotations via the current_context and not having to subclass proxy.\r\n\r\nserver code should be able to modify the annotations on the current_context in a call, thereby returning per-call annotation customizations. Rather than having to subclass Daemon.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/157", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/157/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/157/events", "html_url": "https://github.com/irmen/Pyro4/issues/157", "id": 211892758, "node_id": "MDU6SXNzdWUyMTE4OTI3NTg=", "number": 157, "title": "ipv6/ipv4 should be more visibile in logs and connection reprs", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-04T17:16:27Z", "updated_at": "2017-03-05T20:54:28Z", "closed_at": "2017-03-05T20:54:28Z", "author_association": "OWNER", "active_lock_reason": null, "body": "when dealing with a connection (proxy or daemon bind address) the protocol version should be more visible. IPV6/IPV4 \r\nin proxy and daemon and connection repr()'s\r\nin logs\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/156", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/156/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/156/events", "html_url": "https://github.com/irmen/Pyro4/issues/156", "id": 211878579, "node_id": "MDU6SXNzdWUyMTE4Nzg1Nzk=", "number": 156, "title": "when IPV6, daemon still binds on localhost ipv4", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-03-04T13:05:27Z", "updated_at": "2017-03-04T14:59:00Z", "closed_at": "2017-03-04T14:58:34Z", "author_association": "OWNER", "active_lock_reason": null, "body": "it seems that socketutils still translate 'localhost' to an ipv4 socket address even when PREFER_IP_VERSION=6\r\n\r\n*edit*: not the case, seems to work ok", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/155", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/155/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/155/events", "html_url": "https://github.com/irmen/Pyro4/issues/155", "id": 211548089, "node_id": "MDU6SXNzdWUyMTE1NDgwODk=", "number": 155, "title": "serializers should be able to deal with memoryview", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-03-02T23:16:01Z", "updated_at": "2017-03-04T00:42:24Z", "closed_at": "2017-03-04T00:42:24Z", "author_association": "OWNER", "active_lock_reason": null, "body": "passing a memoryview (and buffer, in python 2) and bytearray to serializer load should work.  Serpent as well (has its own issue to fix it in serpent itself)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/154", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/154/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/154/events", "html_url": "https://github.com/irmen/Pyro4/issues/154", "id": 210343253, "node_id": "MDU6SXNzdWUyMTAzNDMyNTM=", "number": 154, "title": "Calling a method of Pyro4 remote object stuck for ever.", "user": {"login": "ahdkhalid", "id": 1673602, "node_id": "MDQ6VXNlcjE2NzM2MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1673602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahdkhalid", "html_url": "https://github.com/ahdkhalid", "followers_url": "https://api.github.com/users/ahdkhalid/followers", "following_url": "https://api.github.com/users/ahdkhalid/following{/other_user}", "gists_url": "https://api.github.com/users/ahdkhalid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahdkhalid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahdkhalid/subscriptions", "organizations_url": "https://api.github.com/users/ahdkhalid/orgs", "repos_url": "https://api.github.com/users/ahdkhalid/repos", "events_url": "https://api.github.com/users/ahdkhalid/events{/privacy}", "received_events_url": "https://api.github.com/users/ahdkhalid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563097, "node_id": "MDU6TGFiZWw0NTU2MzA5Nw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-26T19:58:54Z", "updated_at": "2017-02-26T20:11:48Z", "closed_at": "2017-02-26T20:11:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just an arbitrary question,\r\nBelow is the example code to test this problem that I have. The execution just stuck forever when calling testmaster.test() which is a method of the server remote object (actually not sure here it is server or client).\r\n\r\nEven @Pyro4.callback doesn't help either (not sure if it is logical to be here) I am using Python 2.7.12 and Pyro4 How can I solve this problem, any help will be appreciated \r\n\r\n```\r\n`#Run python -m Pyro4.naming in another terminal first:\r\nimport Pyro4\r\n\r\n@Pyro4.expose\r\n@Pyro4.callback\r\nclass Master:\r\n    @Pyro4.expose\r\n    @Pyro4.callback\r\n    def test(self):\r\n        print \"this is test\"\r\n\r\nnameserver = Pyro4.locateNS('localhost', 9090)\r\ndeamon = Pyro4.Daemon()\r\nuri = deamon.register(Master())\r\nnameserver.register(\"Master\", uri, safe=True)\r\ntestmaster=Pyro4.Proxy(uri)#Object of master to call some functions from it\r\nprint \"before calling test\" #this will be executed\r\ntestmaster.test()\r\nprint \"after calling test\" #but not this, it just stuck forever- how can I make it to be executed\r\ndeamon.requestLoop()`\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/153", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/153/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/153/events", "html_url": "https://github.com/irmen/Pyro4/issues/153", "id": 210161208, "node_id": "MDU6SXNzdWUyMTAxNjEyMDg=", "number": 153, "title": "add msgpack serializer?", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-24T21:21:59Z", "updated_at": "2017-02-25T14:40:08Z", "closed_at": "2017-02-25T14:40:08Z", "author_association": "OWNER", "active_lock_reason": null, "body": "https://pypi.python.org/pypi/msgpack-python\r\n\r\nhttps://github.com/vsergeev/u-msgpack-python", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/152", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/152/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/152/events", "html_url": "https://github.com/irmen/Pyro4/issues/152", "id": 207346827, "node_id": "MDU6SXNzdWUyMDczNDY4Mjc=", "number": 152, "title": "source code string cannot contain null bytes? ", "user": {"login": "zxpatric", "id": 2736473, "node_id": "MDQ6VXNlcjI3MzY0NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2736473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zxpatric", "html_url": "https://github.com/zxpatric", "followers_url": "https://api.github.com/users/zxpatric/followers", "following_url": "https://api.github.com/users/zxpatric/following{/other_user}", "gists_url": "https://api.github.com/users/zxpatric/gists{/gist_id}", "starred_url": "https://api.github.com/users/zxpatric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zxpatric/subscriptions", "organizations_url": "https://api.github.com/users/zxpatric/orgs", "repos_url": "https://api.github.com/users/zxpatric/repos", "events_url": "https://api.github.com/users/zxpatric/events{/privacy}", "received_events_url": "https://api.github.com/users/zxpatric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-02-13T21:38:25Z", "updated_at": "2017-02-20T20:39:11Z", "closed_at": "2017-02-14T21:42:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "**To reproduce:**\r\n\r\nRun main.py in  https://drive.google.com/open?id=0B185R70hbZHkUndrenNVZFhmdkk \r\n\r\n**Observation:**\r\nif change \r\n        lf = open('./data/bad_left.pgm', 'rb')\r\n        rf = open('./data/bad_right.pgm', 'rb')\r\nto \r\n        lf = open('./data/good_left.pgm', 'rb')\r\n        rf = open('./data/good_right.pgm', 'rb')\r\n\r\nthen it ran through fine. So the exception has something to do with picture content?\r\n\r\n**Call stack:**\r\n    pyroP.call(\"saveLeftRight\", ldata, rdata)\r\n\tat net.razorvine.pyro.serializer.PyroExceptionSerpent.FromSerpentDict(PyroExceptionSerpent.java:32)\r\n\tat net.razorvine.pyro.serializer.SerpentSerializer$DictConverter.convert(SerpentSerializer.java:58)\r\n\tat net.razorvine.serpent.ObjectifyVisitor.visit(ObjectifyVisitor.java:69)\r\n\tat net.razorvine.serpent.ast.DictNode.accept(DictNode.java:8)\r\n\tat net.razorvine.serpent.ast.Ast.accept(Ast.java:51)\r\n\tat net.razorvine.serpent.ast.Ast.getData(Ast.java:45)\r\n\tat net.razorvine.pyro.serializer.SerpentSerializer.deserializeData(SerpentSerializer.java:47)\r\n\tat net.razorvine.pyro.PyroProxy.internal_call(PyroProxy.java:272)\r\n\tat net.razorvine.pyro.PyroProxy.call(PyroProxy.java:178)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\r\nnet.razorvine.pyro.PyroException: net.razorvine.pyro.PyroException: [builtins.ValueError] source code string cannot contain null bytes", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/151", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/151/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/151/events", "html_url": "https://github.com/irmen/Pyro4/issues/151", "id": 207051112, "node_id": "MDU6SXNzdWUyMDcwNTExMTI=", "number": 151, "title": "make nameserver smarter when detecting localhost", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-12T13:49:23Z", "updated_at": "2017-02-17T23:31:22Z", "closed_at": "2017-02-17T23:31:22Z", "author_association": "OWNER", "active_lock_reason": null, "body": "also store the actual client address where the registration came from (in metadata)?\r\n\r\nintroduce placeholder hostname in URI that gets replaced by the actual client ip address in the nameserver???\r\n\r\nRaise exception when uri is localhost and client addres is something else? Probably not a good idea. Let people register what they want, even if it is invalid.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/150", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/150/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/150/events", "html_url": "https://github.com/irmen/Pyro4/issues/150", "id": 207050605, "node_id": "MDU6SXNzdWUyMDcwNTA2MDU=", "number": 150, "title": "get rid of sys.exc_info() calls", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-12T13:39:06Z", "updated_at": "2017-02-12T19:39:56Z", "closed_at": "2017-02-12T19:39:56Z", "author_association": "OWNER", "active_lock_reason": null, "body": "replace them with a normal exception handler where possible", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/149", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/149/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/149/events", "html_url": "https://github.com/irmen/Pyro4/issues/149", "id": 206885943, "node_id": "MDU6SXNzdWUyMDY4ODU5NDM=", "number": 149, "title": "maximum recursion depth exceeded", "user": {"login": "zxpatric", "id": 2736473, "node_id": "MDQ6VXNlcjI3MzY0NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2736473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zxpatric", "html_url": "https://github.com/zxpatric", "followers_url": "https://api.github.com/users/zxpatric/followers", "following_url": "https://api.github.com/users/zxpatric/following{/other_user}", "gists_url": "https://api.github.com/users/zxpatric/gists{/gist_id}", "starred_url": "https://api.github.com/users/zxpatric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zxpatric/subscriptions", "organizations_url": "https://api.github.com/users/zxpatric/orgs", "repos_url": "https://api.github.com/users/zxpatric/repos", "events_url": "https://api.github.com/users/zxpatric/events{/privacy}", "received_events_url": "https://api.github.com/users/zxpatric/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2017-02-10T19:31:29Z", "updated_at": "2017-02-14T21:14:42Z", "closed_at": "2017-02-14T21:14:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "**what to achieve:**\r\n\r\nExpect to use pyro to share 2M data acquired in Jython (client) to Python. Tried file but it was too slow.  Open to suggestion of other ways.\r\n\r\n**Client using pyrolite-4.15.jar:**\r\n\r\nself._pyroP.call(\"saveLeft\", bytearray('123'))\r\n\r\n**Server Pyro 4.53 :**\r\n\r\n    @Pyro4.expose\r\n    def saveLeft(self, data):\r\n        dataLen = len(data)\r\n        self._leftData = bytearray(dataLen)\r\n        self._leftData[0:dataLen] = data\r\n\r\n**Error Message:**\r\n\r\nException in thread Thread-1:Traceback (most recent call last):\r\n  File , line 222, in _Thread__bootstrap\r\n    self.run()\r\n  File , line 149, in run\r\n    self._pyroP.call(\"saveLeft\", bytearray('123'))\r\nRuntimeError: maximum recursion depth exceeded (Java StackOverflowError)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/148", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/148/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/148/events", "html_url": "https://github.com/irmen/Pyro4/issues/148", "id": 206332145, "node_id": "MDU6SXNzdWUyMDYzMzIxNDU=", "number": 148, "title": "improve package structure and imports", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-08T21:36:54Z", "updated_at": "2017-02-12T17:52:38Z", "closed_at": "2017-02-12T17:52:38Z", "author_association": "OWNER", "active_lock_reason": null, "body": "- get rid of circular import core <> naming .  \u2714\ufe0f done\r\n- get rid of circular import core <> util\r\n- get rid of circular import util <> futures\r\n\r\n- ?move to relative imports inside Pyro4 package (not entirely sure if we win something with this ?)\r\n- introduce Pyro4.api module rather than directly importing stuff in the toplevel package Pyro4? .... this will break a lot of code....   \u274c not doing this for now; too large impact on the api\r\n\r\n![output](https://cloud.githubusercontent.com/assets/1771820/22847694/f4a44712-efee-11e6-8d9c-2fd8368a998f.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/147", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/147/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/147/events", "html_url": "https://github.com/irmen/Pyro4/issues/147", "id": 206035612, "node_id": "MDU6SXNzdWUyMDYwMzU2MTI=", "number": 147, "title": "runtimewarning about module structure when starting name server", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-07T22:25:28Z", "updated_at": "2017-02-11T18:13:46Z", "closed_at": "2017-02-11T18:13:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "C:\\Python36\\lib\\runpy.py:125: RuntimeWarning: 'Pyro4.naming' found in sys.modules after import of package 'Pyro4', but prior to execution of 'Pyro4.naming'; this may result in unpredictable behaviour", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/146", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/146/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/146/events", "html_url": "https://github.com/irmen/Pyro4/issues/146", "id": 205126911, "node_id": "MDU6SXNzdWUyMDUxMjY5MTE=", "number": 146, "title": "Too many open files Pyro4.53", "user": {"login": "pudding222", "id": 19164912, "node_id": "MDQ6VXNlcjE5MTY0OTEy", "avatar_url": "https://avatars2.githubusercontent.com/u/19164912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pudding222", "html_url": "https://github.com/pudding222", "followers_url": "https://api.github.com/users/pudding222/followers", "following_url": "https://api.github.com/users/pudding222/following{/other_user}", "gists_url": "https://api.github.com/users/pudding222/gists{/gist_id}", "starred_url": "https://api.github.com/users/pudding222/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pudding222/subscriptions", "organizations_url": "https://api.github.com/users/pudding222/orgs", "repos_url": "https://api.github.com/users/pudding222/repos", "events_url": "https://api.github.com/users/pudding222/events{/privacy}", "received_events_url": "https://api.github.com/users/pudding222/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-02-03T10:53:52Z", "updated_at": "2017-02-09T19:57:21Z", "closed_at": "2017-02-08T16:28:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "When processing a large number of requests using the Pyro version 4.53 or 4.50 I get the error \"Too many open files\" on a Ubuntu 14 machine, this is the same if using Python 2.7 or Python3.\r\n\r\nIf I downgrade to Pyro 4.47 then the problem does not appear to be there. \r\nIf I change the parameter \"numberOfThreads\" to 1 to run it single threaded the problem doesnt appear.\r\n\r\nIf you run the program below it will end normally using Pyro4.47 printing the \"ENDING\". Running on the two newer versions a crash happens stating:\r\n\r\n\r\nOSError: [Errno 24] Too many open files\r\n\r\nHere is the code:\r\n\r\n```python\r\nimport sys\r\nimport Pyro4\r\nimport time\r\nimport threading\r\nimport subprocess\r\nimport os\r\n\r\nname = \"TESTING\" ## Part of the Pyro URI\r\nhost=\"127.0.0.1\" ## ip to bind the sPyro server to\r\nport=9991 ## Port to bind the Pyro server to\r\npid=os.getpid() ## PID of the python program running so that we can get a list of the \r\nstop_event= threading.Event() ## Since were starting a number of daemon threads, this is used to tell those threads to stop.\r\n\r\n\r\ndef lsof(pidOfServer):\r\n    stdin=subprocess.PIPE\r\n    stdout=subprocess.PIPE\r\n    stderr=subprocess.PIPE\r\n    while not stop_event.is_set():\r\n        cmd=\"lsof -p %s | wc -l\"%pidOfServer\r\n        p = subprocess.Popen([cmd], stdin=stdin, stdout=stdout, stderr=stderr,shell=True)\r\n        response=\"%s\"%p.communicate()[0].strip()\r\n        print(\"Number of open files for server: %s\"%response)\r\n\r\n@Pyro4.expose\r\nclass GreetingMaker(object):\r\n    def get_fortune(self, name):        \r\n        return \"Hello, {0}. Here is your fortune message:\\n\" \\\r\n               \"Behold the warranty -- the bold print giveth and the fine print taketh away.\".format(name)\r\n\r\ndef server(host,port):\r\n    daemon = Pyro4.Daemon(host=host, port=port)\r\n    uri = daemon.register(GreetingMaker,objectId=\"TESTING\")\r\n    print(\"Ready\")\r\n    try:\r\n        daemon.requestLoop()\r\n    except Exception  as e:\r\n        print(\"Error in server: %s\"%e)\r\n        stop_event.set()\r\n        raise\r\n\r\ndef myfunc(host,port,name):\r\n    with Pyro4.Proxy(\"PYRO:%s@%s:%s\"%(name,host,port)) as greeting_maker:\r\n        greeting_maker.get_fortune(name)   # call method normally\r\n    \r\ndef client():\r\n    requestsProcessed=0 ## Count of the number of attempts we have to the server\r\n    numberOfTimes=1000 ## Number of times to loop\r\n    numberOfThreads=15 ## Number of threads to start per loop\r\n    for i in range(numberOfTimes):\r\n        threads=[]\r\n        for i in range(numberOfThreads):\r\n            thread = threading.Thread(target=myfunc, args=(host,port,name))\r\n            thread.start()\r\n            threads.append(thread)\r\n        for thread in threads:\r\n            thread.join()\r\n        requestsProcessed+=numberOfThreads*numberOfTimes\r\n        #print(\"Processed %s requests\"%requestsProcessed)\r\n\r\nif __name__==\"__main__\":\r\n    \r\n    lsofThread = threading.Thread(target=lsof, args=(pid,))\r\n    lsofThread.daemon = True\r\n    lsofThread.start() ## Background daemon to monitoring the number of open files for this pid\r\n\r\n    serverThread = threading.Thread(target=server, args=(host,port))\r\n    serverThread.daemon = True\r\n    serverThread.start() ## Background daemon to start the Pyro server up\r\n\r\n    client()\r\n    print(\"SLEEPING\")\r\n    time.sleep(2)\r\n    if not stop_event.is_set(): ## attempt to terminate the background threads\r\n        stop_event.set()\r\n    print(\"ENDING\")\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/142", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/142/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/142/events", "html_url": "https://github.com/irmen/Pyro4/issues/142", "id": 194355089, "node_id": "MDU6SXNzdWUxOTQzNTUwODk=", "number": 142, "title": "Resources not freed properly?", "user": {"login": "ChristopheBernard", "id": 14012015, "node_id": "MDQ6VXNlcjE0MDEyMDE1", "avatar_url": "https://avatars2.githubusercontent.com/u/14012015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChristopheBernard", "html_url": "https://github.com/ChristopheBernard", "followers_url": "https://api.github.com/users/ChristopheBernard/followers", "following_url": "https://api.github.com/users/ChristopheBernard/following{/other_user}", "gists_url": "https://api.github.com/users/ChristopheBernard/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChristopheBernard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChristopheBernard/subscriptions", "organizations_url": "https://api.github.com/users/ChristopheBernard/orgs", "repos_url": "https://api.github.com/users/ChristopheBernard/repos", "events_url": "https://api.github.com/users/ChristopheBernard/events{/privacy}", "received_events_url": "https://api.github.com/users/ChristopheBernard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-08T14:51:10Z", "updated_at": "2016-12-09T18:18:41Z", "closed_at": "2016-12-09T09:52:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running a simplistic Pyro4 object server following the doc guidelines, with python 2.7 Windows x64.\r\n\r\nThe memory footprint is steadily increasing at every request, as if some resources were not released after a connection is closed.\r\n\r\nserver.py\r\n```\r\nimport Pyro4\r\nimport socket\r\nimport os\r\n\r\n@Pyro4.expose\r\nclass status_server(object):\r\n    def __init__(self):\r\n        super(status_server, self).__init__()\r\n        self.hostname=socket.gethostname()\r\n        \r\n    def query(self):\r\n        return self.hostname\r\n        \r\nif __name__ == '__main__':\r\n    daemon=Pyro4.Daemon()\r\n    uri=daemon.register(status_server)\r\n    print 'Ready, URI = {}'.format(uri)\r\n    print 'PID = {}'.format(os.getpid())\r\n    \r\n    daemon.requestLoop()\r\n```\r\n\r\npyrorequest.py:\r\n\r\n```\r\nimport Pyro4\r\nimport sys\r\nimport time\r\n\r\nuri = sys.argv[1]\r\n\r\ncount=0\r\nwhile True:\r\n    count+=1\r\n    with Pyro4.Proxy(uri=uri) as px:\r\n        result=px.query()\r\n    print '\\rAt step {}'.format(count)\r\n    time.sleep(1)\r\n```\r\n\r\nTo replicate:\r\n\r\n> python server.py\r\n\r\nthen copy the URI printer at startup\r\n\r\n> python pyrorequest.py [URI]\r\n\r\nand watch the memory footprint of the server. It increases steadily. The footprint of some servers I had running went up to 3GB after 1-2 days.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/141", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/141/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/141/events", "html_url": "https://github.com/irmen/Pyro4/issues/141", "id": 193206484, "node_id": "MDU6SXNzdWUxOTMyMDY0ODQ=", "number": 141, "title": "Cannot connect to NameServer", "user": {"login": "got3nks", "id": 907566, "node_id": "MDQ6VXNlcjkwNzU2Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/907566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/got3nks", "html_url": "https://github.com/got3nks", "followers_url": "https://api.github.com/users/got3nks/followers", "following_url": "https://api.github.com/users/got3nks/following{/other_user}", "gists_url": "https://api.github.com/users/got3nks/gists{/gist_id}", "starred_url": "https://api.github.com/users/got3nks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/got3nks/subscriptions", "organizations_url": "https://api.github.com/users/got3nks/orgs", "repos_url": "https://api.github.com/users/got3nks/repos", "events_url": "https://api.github.com/users/got3nks/events{/privacy}", "received_events_url": "https://api.github.com/users/got3nks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-02T20:08:06Z", "updated_at": "2016-12-03T01:32:28Z", "closed_at": "2016-12-02T20:10:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nDEBUG:Pyro4.naming:locating the NS: PYRO:Pyro.NameServer@xxx:9999\r\nDEBUG:Pyro4.core:connecting to PYRO:Pyro.NameServer@xxx:9999\r\nERROR:Pyro4.core:cannot connect: receiving: not enough data\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/site-packages/Pyro4/naming.py\", line 600, in locateNS\r\n    proxy._pyroBind()\r\n  File \"/usr/local/lib/python3.5/site-packages/Pyro4/core.py\", line 390, in _pyroBind\r\n    return self.__pyroCreateConnection(True)\r\n  File \"/usr/local/lib/python3.5/site-packages/Pyro4/core.py\", line 506, in __pyroCreateConnection\r\n    msg = message.Message.recv(conn, [message.MSG_CONNECTOK, message.MSG_CONNECTFAIL], hmac_key=self._pyroHmacKey)\r\n  File \"/usr/local/lib/python3.5/site-packages/Pyro4/message.py\", line 167, in recv\r\n    msg = cls.from_header(connection.recv(cls.header_size))\r\n  File \"/usr/local/lib/python3.5/site-packages/Pyro4/socketutil.py\", line 451, in recv\r\n    return receiveData(self.sock, size)\r\n  File \"/usr/local/lib/python3.5/site-packages/Pyro4/socketutil.py\", line 175, in receiveData\r\n    raise err\r\nPyro4.errors.ConnectionClosedError: receiving: not enough data\r\nPyro4.errors.NamingError: Failed to locate the nameserver\r\n```\r\n\r\nI am able to connect after server reboot. What could be the issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/139", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/139/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/139/events", "html_url": "https://github.com/irmen/Pyro4/issues/139", "id": 192129504, "node_id": "MDU6SXNzdWUxOTIxMjk1MDQ=", "number": 139, "title": "Caching behavior for metadata prevents dynamic changes to exposed server methods", "user": {"login": "marvingreenberg", "id": 216707, "node_id": "MDQ6VXNlcjIxNjcwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/216707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marvingreenberg", "html_url": "https://github.com/marvingreenberg", "followers_url": "https://api.github.com/users/marvingreenberg/followers", "following_url": "https://api.github.com/users/marvingreenberg/following{/other_user}", "gists_url": "https://api.github.com/users/marvingreenberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/marvingreenberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marvingreenberg/subscriptions", "organizations_url": "https://api.github.com/users/marvingreenberg/orgs", "repos_url": "https://api.github.com/users/marvingreenberg/repos", "events_url": "https://api.github.com/users/marvingreenberg/events{/privacy}", "received_events_url": "https://api.github.com/users/marvingreenberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-28T22:03:31Z", "updated_at": "2016-11-29T16:33:37Z", "closed_at": "2016-11-29T16:33:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Previous to Pyro4.46 a server could dynamically expose new methods with code like\r\n\r\nsetattr(self.__class__, \"methodname\", Pyro4.expose(method))\r\n\r\nAs long as a client created a new proxy, the new method would be available as an exposed method.  Apparently the caching behavior in Pyro 4.46 changes that.   Only the methods exposed when the server is initially registered are available.\r\n\r\nI see the code in util.py on get_exposed_members() which provides for an option use_cache=True.  But this is an internal method and there seems no way to change the caching behavior or pass this argument anywhere.  Ideally, I could explicitly flush the cache (which is just a global in util.py) when I add methods.  or just change the behavior to allow disabling the cache.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/138", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/138/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/138/events", "html_url": "https://github.com/irmen/Pyro4/issues/138", "id": 191891787, "node_id": "MDU6SXNzdWUxOTE4OTE3ODc=", "number": 138, "title": "sqlite errors in python 3.6", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563093, "node_id": "MDU6TGFiZWw0NTU2MzA5Mw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-27T22:54:55Z", "updated_at": "2016-11-28T20:44:09Z", "closed_at": "2016-11-28T20:44:09Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Python 3.6 beta4 on windows, fails the name server unittests:\r\n\r\nTraceback (most recent call last):\r\n  File \"D:\\PROJECTS\\Pyro4\\src\\Pyro4\\naming_storage.py\", line 157, in clear\r\n    db.execute(\"VACUUM\")\r\nsqlite3.OperationalError: cannot VACUUM from within a transaction", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/137", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/137/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/137/events", "html_url": "https://github.com/irmen/Pyro4/issues/137", "id": 191383266, "node_id": "MDU6SXNzdWUxOTEzODMyNjY=", "number": 137, "title": "Request-processing thread throws RuntimeError attempting Daemon.shutdown() or Daemon.close()", "user": {"login": "evandeaubl", "id": 13005, "node_id": "MDQ6VXNlcjEzMDA1", "avatar_url": "https://avatars2.githubusercontent.com/u/13005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evandeaubl", "html_url": "https://github.com/evandeaubl", "followers_url": "https://api.github.com/users/evandeaubl/followers", "following_url": "https://api.github.com/users/evandeaubl/following{/other_user}", "gists_url": "https://api.github.com/users/evandeaubl/gists{/gist_id}", "starred_url": "https://api.github.com/users/evandeaubl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evandeaubl/subscriptions", "organizations_url": "https://api.github.com/users/evandeaubl/orgs", "repos_url": "https://api.github.com/users/evandeaubl/repos", "events_url": "https://api.github.com/users/evandeaubl/events{/privacy}", "received_events_url": "https://api.github.com/users/evandeaubl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-11-23T21:26:28Z", "updated_at": "2016-11-29T21:44:16Z", "closed_at": "2016-11-29T21:14:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have an application where a Pyro Daemon object receives a remote Pyro request to shutdown (we are using the threadpool socketserver). As part of processing that request, the receiver calls shutdown() on the Daemon to stop any further requests. This worked previous to 4.49, but with the change in 4.49 to process the shutdown() in-thread, the thread attempts to join() itself, causing a RuntimeError.\r\n\r\nFrom a read of the code, calling Daemon.close() from a request-processing thread would have the same issue. It also appears this would only happen with the threadpool socketserver, because the multiplex version doesn't have any join() calls.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/136", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/136/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/136/events", "html_url": "https://github.com/irmen/Pyro4/issues/136", "id": 190570410, "node_id": "MDU6SXNzdWUxOTA1NzA0MTA=", "number": 136, "title": "ipv6 doesn't work very well", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-20T17:16:55Z", "updated_at": "2016-11-21T10:52:14Z", "closed_at": "2016-11-21T10:52:14Z", "author_association": "OWNER", "active_lock_reason": null, "body": "getting 'unable to determine ipv6 address' when starting name server when PREFER_IP_VERSION=6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/135", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/135/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/135/events", "html_url": "https://github.com/irmen/Pyro4/issues/135", "id": 189849353, "node_id": "MDU6SXNzdWUxODk4NDkzNTM=", "number": 135, "title": "improve 'yellow pages' object discovery", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-16T21:22:20Z", "updated_at": "2016-11-17T23:10:17Z", "closed_at": "2016-11-17T23:10:17Z", "author_association": "OWNER", "active_lock_reason": null, "body": "- add some more simple docs to the client chapter object discovery paragraph on how to discover objects via yellow pages (metadata lookup) rather than one particular instance;\r\n- perhaps add a simplified metadata lookup syntax to Uris? Something like: PYRONAME:[meta1,meta2] or perhaps even PYROMETA:meta1,meta2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/134", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/134/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/134/events", "html_url": "https://github.com/irmen/Pyro4/issues/134", "id": 188614141, "node_id": "MDU6SXNzdWUxODg2MTQxNDE=", "number": 134, "title": "Uncaught exception if client disconnects from multiplex server", "user": {"login": "gitj", "id": 1123269, "node_id": "MDQ6VXNlcjExMjMyNjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1123269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gitj", "html_url": "https://github.com/gitj", "followers_url": "https://api.github.com/users/gitj/followers", "following_url": "https://api.github.com/users/gitj/following{/other_user}", "gists_url": "https://api.github.com/users/gitj/gists{/gist_id}", "starred_url": "https://api.github.com/users/gitj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gitj/subscriptions", "organizations_url": "https://api.github.com/users/gitj/orgs", "repos_url": "https://api.github.com/users/gitj/repos", "events_url": "https://api.github.com/users/gitj/events{/privacy}", "received_events_url": "https://api.github.com/users/gitj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-10T20:46:19Z", "updated_at": "2016-11-11T21:00:41Z", "closed_at": "2016-11-11T21:00:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry I don't have a short piece of code to demonstrate this error, but I think it should be clear from looking at the code.\r\nThis line:\r\nhttps://github.com/irmen/Pyro4/blob/master/src/Pyro4/socketserver/multiplexserver.py#L162\r\nraised `error: [Errno 107] Transport endpoint is not connected`\r\nwhen the client was disconnected.\r\nSo I think this possibility needs to be caught when trying to getpeername.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/133", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/133/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/133/events", "html_url": "https://github.com/irmen/Pyro4/issues/133", "id": 186131303, "node_id": "MDU6SXNzdWUxODYxMzEzMDM=", "number": 133, "title": "make remote generators fault tolerant", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-30T11:36:41Z", "updated_at": "2016-11-04T22:02:50Z", "closed_at": "2016-11-04T22:02:50Z", "author_association": "OWNER", "active_lock_reason": null, "body": "restartable at connection loss\nconfigurable\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/132", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/132/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/132/events", "html_url": "https://github.com/irmen/Pyro4/issues/132", "id": 184904148, "node_id": "MDU6SXNzdWUxODQ5MDQxNDg=", "number": 132, "title": "Migrate documentation to readthedocs.org", "user": {"login": "Peque", "id": 526577, "node_id": "MDQ6VXNlcjUyNjU3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peque", "html_url": "https://github.com/Peque", "followers_url": "https://api.github.com/users/Peque/followers", "following_url": "https://api.github.com/users/Peque/following{/other_user}", "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peque/subscriptions", "organizations_url": "https://api.github.com/users/Peque/orgs", "repos_url": "https://api.github.com/users/Peque/repos", "events_url": "https://api.github.com/users/Peque/events{/privacy}", "received_events_url": "https://api.github.com/users/Peque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-24T17:27:59Z", "updated_at": "2017-03-10T12:33:14Z", "closed_at": "2017-03-10T00:26:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is not really an issue, rather a suggestion.\n\nI was recently looking for ways to publish the documentation of a [Python project I am developing](https://github.com/opensistemas-hub/osbrain), which uses Pyro, by the way. I found [Read the Docs](https://readthedocs.org/) and I think it is the best alternative.\n\nPros:\n- Automatically build documentation whenever a new commit is pushed or a new release tagged (simple setup with GitHub). No need to manually build and upload to `pythonhosted.org`.\n- Versions of the documentation are easily browsable. See for example [the lower-left corner, where you can find a green `v: stable` text](https://osbrain.readthedocs.io/en/stable/). You can change the version displayed from there.\n- You can, of course, set a default version for the documentation, which usually is the \"stable\" version (last tagged version).\n- [Read the Docs is a free software project](https://github.com/rtfd/readthedocs.org), so you can even deploy it your own server (if you needed/wanted to at some point).\n\nCons:\n- Requires some time (a couple of minutes to create and account and setup a new project). I could help with that if you want to (although that requires some permissions to edit the integrations/services in the project settings).\n- Could require, at some point, deprecating the documentation at `pythonhosted.org`. This is not mandatory, though, documentation could be found in both sites, although in that case, you would still need to manually update the docs to `pythonhosted` on each release... In case you wanted to deprecate the current documentation URLs at some point, I can share with you a simple HTML template page which has an HTML redirection to Read the Docs and a JavaScript redirection as well, so 99.9% of browsers should redirect to the new documentation automatically.\n\nWhether or not this could be interesting for you, I don't know. Just wanted to let you know. In my opinion, pros win cons in this case.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/131", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/131/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/131/events", "html_url": "https://github.com/irmen/Pyro4/issues/131", "id": 182214750, "node_id": "MDU6SXNzdWUxODIyMTQ3NTA=", "number": 131, "title": "Pyro4 version 4.38 not compatible with Python 2.6 anymore since serpent 1.14 released", "user": {"login": "laurentbristiel", "id": 4035242, "node_id": "MDQ6VXNlcjQwMzUyNDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4035242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laurentbristiel", "html_url": "https://github.com/laurentbristiel", "followers_url": "https://api.github.com/users/laurentbristiel/followers", "following_url": "https://api.github.com/users/laurentbristiel/following{/other_user}", "gists_url": "https://api.github.com/users/laurentbristiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/laurentbristiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laurentbristiel/subscriptions", "organizations_url": "https://api.github.com/users/laurentbristiel/orgs", "repos_url": "https://api.github.com/users/laurentbristiel/repos", "events_url": "https://api.github.com/users/laurentbristiel/events{/privacy}", "received_events_url": "https://api.github.com/users/laurentbristiel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-11T09:20:02Z", "updated_at": "2016-10-11T22:03:25Z", "closed_at": "2016-10-11T18:37:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using Pyro4 4.38 with Python 2.6.\nAccording to the [changelogs](https://pythonhosted.org/Pyro4/changelog.html)  it should be Python 2.6 compatible, and it was until last night.\nPyro4 is using serpent with this [requirement line](https://github.com/irmen/Pyro4/blob/4.38/requirements.txt):\n\n```\nserpent>=1.11\n```\n\nbut serpent 1.14 just got released and is [not supporting Python 2.6 anymore](https://github.com/irmen/Serpent/commit/ad04a1cc510697ed158f6e12c5e3030f527ef33e).\nThis breaks the Python 2.6 compatibility of Pyro4 version 4.38.\n\nShould we set max version of serpent to 1.13 on the Pyro4 for the 4.38 tag?\n\n```\nserpent>= 1.11,<=1.13\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/130", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/130/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/130/events", "html_url": "https://github.com/irmen/Pyro4/issues/130", "id": 181436697, "node_id": "MDU6SXNzdWUxODE0MzY2OTc=", "number": 130, "title": "Does pickle serialization work in 4.47?", "user": {"login": "miiza", "id": 630777, "node_id": "MDQ6VXNlcjYzMDc3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/630777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miiza", "html_url": "https://github.com/miiza", "followers_url": "https://api.github.com/users/miiza/followers", "following_url": "https://api.github.com/users/miiza/following{/other_user}", "gists_url": "https://api.github.com/users/miiza/gists{/gist_id}", "starred_url": "https://api.github.com/users/miiza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miiza/subscriptions", "organizations_url": "https://api.github.com/users/miiza/orgs", "repos_url": "https://api.github.com/users/miiza/repos", "events_url": "https://api.github.com/users/miiza/events{/privacy}", "received_events_url": "https://api.github.com/users/miiza/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563097, "node_id": "MDU6TGFiZWw0NTU2MzA5Nw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-10-06T14:49:47Z", "updated_at": "2016-10-06T23:54:56Z", "closed_at": "2016-10-06T22:34:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Excerpt from config documentation:\n\n| config item | type | default | meaning |\n| --- | --- | --- | --- |\n| SERIALIZERS_ACCEPTED | set | json,marshal, serpent | The wire protocol serializers accepted in the server/daemon. Use comma separated string for initial config, will be a set after initialization. |\n\nSo, I add this row to my source code:\n\n`Pyro4.config.SERIALIZERS_ACCEPTED = \"json, marshal, serpent, pickle\"`\n\nBut get this error:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.4/dist-packages/Pyro4/util.py\", line 588, in get_serializer\n    return _serializers[name]\nKeyError: 'j'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"g_term_server.py\", line 941, in <module>\n    daemon = Pyro4.Daemon(port=3000)\n  File \"/usr/local/lib/python3.4/dist-packages/Pyro4/core.py\", line 919, in **init**\n    self.__serializer_ids = {util.get_serializer(ser_name).serializer_id for ser_name in Pyro4.config.SERIALIZERS_ACCEPTED}\n  File \"/usr/local/lib/python3.4/dist-packages/Pyro4/core.py\", line 919, in <setcomp>\n    self.__serializer_ids = {util.get_serializer(ser_name).serializer_id for ser_name in Pyro4.config.SERIALIZERS_ACCEPTED}\n  File \"/usr/local/lib/python3.4/dist-packages/Pyro4/util.py\", line 590, in get_serializer\n    raise Pyro4.errors.SerializeError(\"serializer '%s' is unknown or not available\" % name)\nPyro4.errors.SerializeError: serializer 'j' is unknown or not available\n\nIf I changed the row to a list, it works fine:\n\nPyro4.config.SERIALIZERS_ACCEPTED = [\"json\", \"marshal\", \"serpent\", \"pickle\"]\n\nSo, is it a mistake in documentation? Should I enter it as a list?\n\nAnother problem is that NameServer doesn't work with pickle serialization. I have exported and restarted but it still doesn't work:\n\n```\nexport PYRO_SERIALIZERS_ACCEPTED=serpent,json,marshal,pickle\npyro4-ns\n```\n\nI got rid of Name Server and it works directly fine.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/129", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/129/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/129/events", "html_url": "https://github.com/irmen/Pyro4/issues/129", "id": 178037021, "node_id": "MDU6SXNzdWUxNzgwMzcwMjE=", "number": 129, "title": "Latest Pyro4 hanging when running tests", "user": {"login": "Peque", "id": 526577, "node_id": "MDQ6VXNlcjUyNjU3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peque", "html_url": "https://github.com/Peque", "followers_url": "https://api.github.com/users/Peque/followers", "following_url": "https://api.github.com/users/Peque/following{/other_user}", "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peque/subscriptions", "organizations_url": "https://api.github.com/users/Peque/orgs", "repos_url": "https://api.github.com/users/Peque/repos", "events_url": "https://api.github.com/users/Peque/events{/privacy}", "received_events_url": "https://api.github.com/users/Peque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2016-09-20T11:43:37Z", "updated_at": "2016-09-27T17:40:15Z", "closed_at": "2016-09-27T17:40:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi Irmen,\n\nThis is more a question, rather than an issue (I am not sure if it is a Pyro4 issue yet).\n\nI have a project, [osBrain](https://github.com/opensistemas-hub/osbrain), which uses Pyro4. It worked well with version 4.45. After doing some little changes, `master` works now with 4.46. However, it seems it does not work with 4.47.\n\nThe problem is that some tests are now timing out (as if something was blocking). Apparently the tests pass, so the blocking might occur on tear-down (as I am using some `pytest` fixtures that take care of shutting down everything after each test).\n\nSome bisecting tells me the change that introduced this timeouts is in 88f88bf1ccdfaff8c2bbbda8fc032a145d07d44b . In particular, this change in `src/Pyro4/naming.py`:\n\n``` diff\n@@ -519,7 +523,7 @@ def locateNS(host=None, port=None, broadcast=True, hmac_key=None):\n     proxy = core.Proxy(uri)\n     proxy._pyroHmacKey = hmac_key\n     try:\n-        proxy.ping()\n+        proxy._pyroBind()\n         log.debug(\"located NS\")\n         return proxy\n     except PyroError as x:\n```\n\nAny hints on why could this be happening? or how to avoid it?\n\nThanks for your help. :blush:\n\nPS: I am tracking this issue [here as well, in my project](https://github.com/opensistemas-hub/osbrain/issues/9). So feel free to close this if you consider it is not a Pyro4-related issue.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/128", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/128/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/128/events", "html_url": "https://github.com/irmen/Pyro4/issues/128", "id": 177916125, "node_id": "MDU6SXNzdWUxNzc5MTYxMjU=", "number": 128, "title": "name server lookup hangs on osx when no ns is running", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563093, "node_id": "MDU6TGFiZWw0NTU2MzA5Mw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-19T22:34:52Z", "updated_at": "2016-09-23T21:27:39Z", "closed_at": "2016-09-23T21:27:39Z", "author_association": "OWNER", "active_lock_reason": null, "body": "seems to hang on 127.0.1.1 (or well, has a very long timeout)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/127", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/127/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/127/events", "html_url": "https://github.com/irmen/Pyro4/issues/127", "id": 177904378, "node_id": "MDU6SXNzdWUxNzc5MDQzNzg=", "number": 127, "title": "config to skip name server lookup on 127.0.0.1 and use broadcast immediately", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563095, "node_id": "MDU6TGFiZWw0NTU2MzA5NQ==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-19T21:34:41Z", "updated_at": "2016-09-26T17:37:10Z", "closed_at": "2016-09-26T17:37:10Z", "author_association": "OWNER", "active_lock_reason": null, "body": "make a config item to disable the attempt to locate name server on 127.0.0.1\nif you want to use the broadcast lookup mechanism because you know it won't be found on localhost.\n\nThis can be useful because the attempts to contact localhost first introduce a delay of a few seconds.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/126", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/126/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/126/events", "html_url": "https://github.com/irmen/Pyro4/issues/126", "id": 176749470, "node_id": "MDU6SXNzdWUxNzY3NDk0NzA=", "number": 126, "title": "integrate zeroconf?  (avahi/bonjour)", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-09-13T21:05:18Z", "updated_at": "2018-02-04T00:11:24Z", "closed_at": "2017-08-09T18:54:03Z", "author_association": "OWNER", "active_lock_reason": null, "body": "https://github.com/jstasiak/python-zeroconf\n\ncan we register pyro services with zeroconf instead of a pyro name server?\n\nand resolve them as well ofcourse.\n\nPerhaps by introducing a new magic protocol name PYROZCONF:blah  ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/125", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/125/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/125/events", "html_url": "https://github.com/irmen/Pyro4/issues/125", "id": 171053758, "node_id": "MDU6SXNzdWUxNzEwNTM3NTg=", "number": 125, "title": "Multithreaded calls of pyroInvoke and pyroConnLock, and releasing proxies in-between", "user": {"login": "onnokort", "id": 91150, "node_id": "MDQ6VXNlcjkxMTUw", "avatar_url": "https://avatars0.githubusercontent.com/u/91150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/onnokort", "html_url": "https://github.com/onnokort", "followers_url": "https://api.github.com/users/onnokort/followers", "following_url": "https://api.github.com/users/onnokort/following{/other_user}", "gists_url": "https://api.github.com/users/onnokort/gists{/gist_id}", "starred_url": "https://api.github.com/users/onnokort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/onnokort/subscriptions", "organizations_url": "https://api.github.com/users/onnokort/orgs", "repos_url": "https://api.github.com/users/onnokort/repos", "events_url": "https://api.github.com/users/onnokort/events{/privacy}", "received_events_url": "https://api.github.com/users/onnokort/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-14T11:08:02Z", "updated_at": "2016-08-14T16:07:51Z", "closed_at": "2016-08-14T15:24:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI think I found a threading bug in Pyro. In my code (unfortunately, I have no test case yet to reproduce), the following, occasional error from Pyro bubbles up:\n\n```\n  File \"/home/user/.local/lib/python2.7/site-packages/Pyro4/core.py\", line 171, in __call__\n    return self.__send(self.__name, args, kwargs)\n  File \"/home/user/.local/lib/python2.7/site-packages/Pyro4/core.py\", line 405, in _pyroInvoke\n    self._pyroConnection.send(msg.to_bytes())\nAttributeError: 'NoneType' object has no attribute 'send' \n```\n\nPyro version: 4.40\n\nHere is my suspicion on what happens: I have several threads working on the same pyro objects, and some of them might release the object after using it, to avoid clogging up connection slots on the server side.\nIn Pyro's core.py, the _pyroInvoke() method checks whether _pyroConnection is None  and if so, reconnects.\n\nHowever, the pyroConnLock is not acquired, which means that until the offending line above is reached, some other thread might release the connection again without knowledge of the pyroInvoke method.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/123", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/123/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/123/events", "html_url": "https://github.com/irmen/Pyro4/issues/123", "id": 169738083, "node_id": "MDU6SXNzdWUxNjk3MzgwODM=", "number": 123, "title": "Default instance mode is not 'session'", "user": {"login": "VincentVanlaer", "id": 13833860, "node_id": "MDQ6VXNlcjEzODMzODYw", "avatar_url": "https://avatars2.githubusercontent.com/u/13833860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VincentVanlaer", "html_url": "https://github.com/VincentVanlaer", "followers_url": "https://api.github.com/users/VincentVanlaer/followers", "following_url": "https://api.github.com/users/VincentVanlaer/following{/other_user}", "gists_url": "https://api.github.com/users/VincentVanlaer/gists{/gist_id}", "starred_url": "https://api.github.com/users/VincentVanlaer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VincentVanlaer/subscriptions", "organizations_url": "https://api.github.com/users/VincentVanlaer/orgs", "repos_url": "https://api.github.com/users/VincentVanlaer/repos", "events_url": "https://api.github.com/users/VincentVanlaer/events{/privacy}", "received_events_url": "https://api.github.com/users/VincentVanlaer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-06T09:13:57Z", "updated_at": "2016-08-13T12:17:54Z", "closed_at": "2016-08-13T12:17:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am exposing a class with the Pyro4.expose decorator, with no arguments. According to the docs this should expose the class using the 'session' instance mode. However, only one instance of the class is created and used, even with multiple sessions. This is also shown in the log: \n\n`[2016-08-06 10:56:38.408,Pyro4.core,DEBUG] exposing all members of <class '__main__.TestClass'>, instancemode single, instancecreator None.`\n\nI have attached the log and a script that reproduces the issue.\n\n[test_server.zip](https://github.com/irmen/Pyro4/files/404942/test_server.zip)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/122", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/122/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/122/events", "html_url": "https://github.com/irmen/Pyro4/issues/122", "id": 168468151, "node_id": "MDU6SXNzdWUxNjg0NjgxNTE=", "number": 122, "title": "also try 127.0.1.1 as an alternative to 127.0.0.1 to locate NS", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-30T13:49:02Z", "updated_at": "2016-07-30T15:18:43Z", "closed_at": "2016-07-30T15:18:42Z", "author_association": "OWNER", "active_lock_reason": null, "body": "After reading this: https://www.debian.org/doc/manuals/debian-reference/ch05.en.html#_the_hostname_resolution  and because of the question here: http://stackoverflow.com/questions/38173834/why-does-pyro4-fail-to-locate-nameserver-under-127-0-1-1-but-succeed-with-127-0  I think it is convenient to also let Pyro try to use 127.0.1.1 as well as just 127.0.0.1. This avoids the common lookup problem on debian linuxes at least.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/121", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/121/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/121/events", "html_url": "https://github.com/irmen/Pyro4/issues/121", "id": 162405806, "node_id": "MDU6SXNzdWUxNjI0MDU4MDY=", "number": 121, "title": "problem in daemon.shutdown()", "user": {"login": "brubbel", "id": 5667690, "node_id": "MDQ6VXNlcjU2Njc2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5667690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brubbel", "html_url": "https://github.com/brubbel", "followers_url": "https://api.github.com/users/brubbel/followers", "following_url": "https://api.github.com/users/brubbel/following{/other_user}", "gists_url": "https://api.github.com/users/brubbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/brubbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brubbel/subscriptions", "organizations_url": "https://api.github.com/users/brubbel/orgs", "repos_url": "https://api.github.com/users/brubbel/repos", "events_url": "https://api.github.com/users/brubbel/events{/privacy}", "received_events_url": "https://api.github.com/users/brubbel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-06-27T09:09:39Z", "updated_at": "2016-10-13T14:10:41Z", "closed_at": "2016-10-13T14:10:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A thread seems to wait indefinitely when calling daemon.shutdown(), which worked previously correct on older versions of Pyro4 (installed with apt-get).\nWhen shutdown_thread() at line 1009 in core.py is changed so that it is not called from a separate thread, shutdown() works as expected and the pyro server performs a clean exit.\n\nPlease note that I am running the daemon.requestLoop in a separate (non-daemon) thread**, while gui code runs in de main thread. The main thread calls daemon.shutdown at exit, which results in the following exception (after which one of the threads refuses to stop):\n\nException in thread Thread-19:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\n    self.run()\n  File \"/usr/lib/python2.7/threading.py\", line 763, in run\n    self.__target(_self.__args, *_self.__kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/Pyro4/core.py\", line 1012, in shutdown_thread\n    self.transportServer.wakeup()\nAttributeError: 'NoneType' object has no attribute 'wakeup'\n---- program waits here ----\n\n(**Daemon threads are abruptly stopped at shutdown.)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/120", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/120/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/120/events", "html_url": "https://github.com/irmen/Pyro4/issues/120", "id": 162384720, "node_id": "MDU6SXNzdWUxNjIzODQ3MjA=", "number": 120, "title": "Expose class/method without changing the original code", "user": {"login": "weyou", "id": 5524708, "node_id": "MDQ6VXNlcjU1MjQ3MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5524708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weyou", "html_url": "https://github.com/weyou", "followers_url": "https://api.github.com/users/weyou/followers", "following_url": "https://api.github.com/users/weyou/following{/other_user}", "gists_url": "https://api.github.com/users/weyou/gists{/gist_id}", "starred_url": "https://api.github.com/users/weyou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weyou/subscriptions", "organizations_url": "https://api.github.com/users/weyou/orgs", "repos_url": "https://api.github.com/users/weyou/repos", "events_url": "https://api.github.com/users/weyou/events{/privacy}", "received_events_url": "https://api.github.com/users/weyou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-27T06:51:41Z", "updated_at": "2016-07-06T23:00:41Z", "closed_at": "2016-06-27T17:37:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "The @expose is great and elegant solution to keep the Pyro object safe.  Except:\n\nPreviously, I can easily enable an exist object to be accessible from remote by register it with Pyro. This can be done without changing anything to the object code.  It's very convenient. In most case, the class definition module is from a standalone module(or I want it to be a standalone module).  It can be re-used without the Pyro installed. \n\nNow I must change the original code of the class definition to add the @expose decorator. The modified new module cannot be used if not install Pyro.\n\nSo it would be great if there is any other way to specify the exposed class/property/method list.  For example:\n\n```\ndef register(self, obj_or_class, objectId=None, force=False, exposeMethods=None, exposeProperties=None):\n     ....\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/119", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/119/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/119/events", "html_url": "https://github.com/irmen/Pyro4/issues/119", "id": 162330513, "node_id": "MDU6SXNzdWUxNjIzMzA1MTM=", "number": 119, "title": "cache get_metadata?", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563095, "node_id": "MDU6TGFiZWw0NTU2MzA5NQ==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-26T14:37:36Z", "updated_at": "2016-06-27T17:39:57Z", "closed_at": "2016-06-27T17:39:57Z", "author_association": "OWNER", "active_lock_reason": null, "body": "it may be worthwhile to cache the results from get_metadata.\nOr rather, from `util.get_exposed_members`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/117", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/117/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/117/events", "html_url": "https://github.com/irmen/Pyro4/issues/117", "id": 160808941, "node_id": "MDU6SXNzdWUxNjA4MDg5NDE=", "number": 117, "title": " 'NoneType' object has no attribute 'error'", "user": {"login": "weyou", "id": 5524708, "node_id": "MDQ6VXNlcjU1MjQ3MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5524708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weyou", "html_url": "https://github.com/weyou", "followers_url": "https://api.github.com/users/weyou/followers", "following_url": "https://api.github.com/users/weyou/following{/other_user}", "gists_url": "https://api.github.com/users/weyou/gists{/gist_id}", "starred_url": "https://api.github.com/users/weyou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weyou/subscriptions", "organizations_url": "https://api.github.com/users/weyou/orgs", "repos_url": "https://api.github.com/users/weyou/repos", "events_url": "https://api.github.com/users/weyou/events{/privacy}", "received_events_url": "https://api.github.com/users/weyou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-17T04:14:38Z", "updated_at": "2016-06-17T21:18:29Z", "closed_at": "2016-06-17T21:18:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes,  my code will get the exception:\n\n```\nException ignored in: <bound method SocketConnection.__del__ of <Pyro4.socketuti\nl.SocketConnection object at 0x03A120A8>>\nTraceback (most recent call last):\n  File \"C:\\Python34\\lib\\site-packages\\pyro4-4.44.dev0-py3.4.egg\\Pyro4\\socketutil\n.py\", line 437, in __del__\n  File \"C:\\Python34\\lib\\site-packages\\pyro4-4.44.dev0-py3.4.egg\\Pyro4\\socketutil\n.py\", line 448, in close\nAttributeError: 'NoneType' object has no attribute 'error'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/116", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/116/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/116/events", "html_url": "https://github.com/irmen/Pyro4/issues/116", "id": 159776400, "node_id": "MDU6SXNzdWUxNTk3NzY0MDA=", "number": 116, "title": "decouple instance mode params from @expose", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-11T14:36:36Z", "updated_at": "2016-06-26T18:20:41Z", "closed_at": "2016-06-26T18:20:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "there's a problem with `@expose` if you use it to set the instance_mode and instance\ncreation arguments. Because this has to  be done on the class level, it automatically\nmeans that the whole class is exposed. That is not what I intended. I'm planning on\nfixing this as well but that will likely result in an API change that is not backwards\ncompatible.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/115", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/115/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/115/events", "html_url": "https://github.com/irmen/Pyro4/issues/115", "id": 158244495, "node_id": "MDU6SXNzdWUxNTgyNDQ0OTU=", "number": 115, "title": "create a new serializer", "user": {"login": "zappfinger", "id": 5838951, "node_id": "MDQ6VXNlcjU4Mzg5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5838951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zappfinger", "html_url": "https://github.com/zappfinger", "followers_url": "https://api.github.com/users/zappfinger/followers", "following_url": "https://api.github.com/users/zappfinger/following{/other_user}", "gists_url": "https://api.github.com/users/zappfinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/zappfinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zappfinger/subscriptions", "organizations_url": "https://api.github.com/users/zappfinger/orgs", "repos_url": "https://api.github.com/users/zappfinger/repos", "events_url": "https://api.github.com/users/zappfinger/events{/privacy}", "received_events_url": "https://api.github.com/users/zappfinger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563097, "node_id": "MDU6TGFiZWw0NTU2MzA5Nw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-02T21:31:11Z", "updated_at": "2016-06-06T17:52:13Z", "closed_at": "2016-06-06T17:52:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry to ask you here, but I found Freelist not clear on how to ask a question there. \nI am trying to make a remote connection to a SQLite database, but I get: 'TypeError: don't know how to serialize class <type 'sqlite3.Row'>. Give it vars() or an appropriate **getstate**'\nSo I wondered could I create my own serializer for this? \n\nRichard (zappfinger@gmail.com)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/114", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/114/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/114/events", "html_url": "https://github.com/irmen/Pyro4/issues/114", "id": 156590520, "node_id": "MDU6SXNzdWUxNTY1OTA1MjA=", "number": 114, "title": "Pyro4 depends on selectors34 module ", "user": {"login": "jmccormac01", "id": 1912007, "node_id": "MDQ6VXNlcjE5MTIwMDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1912007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmccormac01", "html_url": "https://github.com/jmccormac01", "followers_url": "https://api.github.com/users/jmccormac01/followers", "following_url": "https://api.github.com/users/jmccormac01/following{/other_user}", "gists_url": "https://api.github.com/users/jmccormac01/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmccormac01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmccormac01/subscriptions", "organizations_url": "https://api.github.com/users/jmccormac01/orgs", "repos_url": "https://api.github.com/users/jmccormac01/repos", "events_url": "https://api.github.com/users/jmccormac01/events{/privacy}", "received_events_url": "https://api.github.com/users/jmccormac01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-24T19:32:58Z", "updated_at": "2016-05-24T22:04:05Z", "closed_at": "2016-05-24T22:00:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just tried installing Pyro4 on Windows 10 with pip and got the following when I tried importing it:\n\n``` python\nImportError: No module named selectors34\n```\n\nI installed selectors34 manually via pip and it then imported fine. There seems to be a missing dependency (under W10 at least). \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/113", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/113/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/113/events", "html_url": "https://github.com/irmen/Pyro4/issues/113", "id": 150031583, "node_id": "MDU6SXNzdWUxNTAwMzE1ODM=", "number": 113, "title": "A bug in Pyro4/socketutil.py ", "user": {"login": "kejiewei", "id": 9148366, "node_id": "MDQ6VXNlcjkxNDgzNjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9148366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kejiewei", "html_url": "https://github.com/kejiewei", "followers_url": "https://api.github.com/users/kejiewei/followers", "following_url": "https://api.github.com/users/kejiewei/following{/other_user}", "gists_url": "https://api.github.com/users/kejiewei/gists{/gist_id}", "starred_url": "https://api.github.com/users/kejiewei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kejiewei/subscriptions", "organizations_url": "https://api.github.com/users/kejiewei/orgs", "repos_url": "https://api.github.com/users/kejiewei/repos", "events_url": "https://api.github.com/users/kejiewei/events{/privacy}", "received_events_url": "https://api.github.com/users/kejiewei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-21T10:25:36Z", "updated_at": "2016-04-21T17:38:26Z", "closed_at": "2016-04-21T17:38:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi irmen,\n\nWhen I run `python Pyro4/nsc.py list`, I got an error \n\n`Error: CommunicationError - cannot connect: unorderable types: NoneType() > float()`\n\nWith pdb debug, I find in Pyro4/socketutil.py:309, timeout may be None Type, and it causes error.\n\nPlease have a look, thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/112", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/112/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/112/events", "html_url": "https://github.com/irmen/Pyro4/issues/112", "id": 148961906, "node_id": "MDU6SXNzdWUxNDg5NjE5MDY=", "number": 112, "title": "improve docs on instance_mode etc", "user": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563095, "node_id": "MDU6TGFiZWw0NTU2MzA5NQ==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-04-17T15:05:36Z", "updated_at": "2016-04-17T16:21:55Z", "closed_at": "2016-04-17T16:21:55Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Docs are not very clear about  instance_mode and instance_creator.\nRestructure them into a new paragraph, add them to the index.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/111", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/111/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/111/events", "html_url": "https://github.com/irmen/Pyro4/issues/111", "id": 148904252, "node_id": "MDU6SXNzdWUxNDg5MDQyNTI=", "number": 111, "title": "Unable to free server memory for large objects", "user": {"login": "rockg", "id": 3195015, "node_id": "MDQ6VXNlcjMxOTUwMTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3195015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rockg", "html_url": "https://github.com/rockg", "followers_url": "https://api.github.com/users/rockg/followers", "following_url": "https://api.github.com/users/rockg/following{/other_user}", "gists_url": "https://api.github.com/users/rockg/gists{/gist_id}", "starred_url": "https://api.github.com/users/rockg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rockg/subscriptions", "organizations_url": "https://api.github.com/users/rockg/orgs", "repos_url": "https://api.github.com/users/rockg/repos", "events_url": "https://api.github.com/users/rockg/events{/privacy}", "received_events_url": "https://api.github.com/users/rockg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-04-17T00:10:35Z", "updated_at": "2016-04-19T00:05:09Z", "closed_at": "2016-04-18T20:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running into a memory issue on my server.  Essentially I have an object factory on the server that creates large objects (500MB or so) also on the server to be accessed by the client.  However, after the client disconnects the large proxy objects persist in the server's memory and I have not found a way to free it without terminating the server process.  The below gist contains the server code and the client code is below.  Running the client code results in a server process that becomes several GB and needs to be terminated.  Is there a way to free memory on the server objects when it's clear that they will not be needed so the server remains a reasonable size?  I tried `_pyroRelease` and that did not seem to do anything and I cannot use the context manager as the object is passed around by the client.\n\nhttps://gist.github.com/rockg/3e3e18ccbe5b257c08c594a6555cf032\n\nClient code:\n\n```\nfrom __future__ import print_function\nimport sys\nimport Pyro4\n\nsys.excepthook=Pyro4.util.excepthook\n\ndef main():\n    server = \"localhost:60313\"\n    uri=\"PYRO:server@\" + server\n    creator = Pyro4.Proxy(uri)\n    obj = creator.create()\n\nif __name__==\"__main__\":\n    main()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/110", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/110/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/110/events", "html_url": "https://github.com/irmen/Pyro4/issues/110", "id": 144752218, "node_id": "MDU6SXNzdWUxNDQ3NTIyMTg=", "number": 110, "title": "async issue", "user": {"login": "dukecyto", "id": 4166968, "node_id": "MDQ6VXNlcjQxNjY5Njg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4166968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dukecyto", "html_url": "https://github.com/dukecyto", "followers_url": "https://api.github.com/users/dukecyto/followers", "following_url": "https://api.github.com/users/dukecyto/following{/other_user}", "gists_url": "https://api.github.com/users/dukecyto/gists{/gist_id}", "starred_url": "https://api.github.com/users/dukecyto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dukecyto/subscriptions", "organizations_url": "https://api.github.com/users/dukecyto/orgs", "repos_url": "https://api.github.com/users/dukecyto/repos", "events_url": "https://api.github.com/users/dukecyto/events{/privacy}", "received_events_url": "https://api.github.com/users/dukecyto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 45563093, "node_id": "MDU6TGFiZWw0NTU2MzA5Mw==", "url": "https://api.github.com/repos/irmen/Pyro4/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/irmen/Pyro4/milestones/9", "html_url": "https://github.com/irmen/Pyro4/milestone/9", "labels_url": "https://api.github.com/repos/irmen/Pyro4/milestones/9/labels", "id": 1676620, "node_id": "MDk6TWlsZXN0b25lMTY3NjYyMA==", "number": 9, "title": "release 4.42", "description": "", "creator": {"login": "irmen", "id": 1771820, "node_id": "MDQ6VXNlcjE3NzE4MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1771820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irmen", "html_url": "https://github.com/irmen", "followers_url": "https://api.github.com/users/irmen/followers", "following_url": "https://api.github.com/users/irmen/following{/other_user}", "gists_url": "https://api.github.com/users/irmen/gists{/gist_id}", "starred_url": "https://api.github.com/users/irmen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irmen/subscriptions", "organizations_url": "https://api.github.com/users/irmen/orgs", "repos_url": "https://api.github.com/users/irmen/repos", "events_url": "https://api.github.com/users/irmen/events{/privacy}", "received_events_url": "https://api.github.com/users/irmen/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2016-03-31T17:27:11Z", "updated_at": "2017-08-11T01:49:13Z", "due_on": "2016-04-29T07:00:00Z", "closed_at": "2017-08-11T01:49:13Z"}, "comments": 2, "created_at": "2016-03-30T23:58:14Z", "updated_at": "2016-04-15T22:25:11Z", "closed_at": "2016-04-15T22:25:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run examples/async/client.py I get the following error:\n\n> enter async server object uri: PYRO:example.async@localhost:XXXXX\n> - normal call: (notice the delay)\n>   result= 20\n> - async call:\n>   Traceback (most recent call last):\n>   File \"client.py\", line 19, in <module>\n>     print(\"result value available?\", asyncresult.ready)  # prints False because the server is still 'busy'\n>   AttributeError: 'int' object has no attribute 'ready'\n\nIt seems that async object is just acting like a regular proxy -- it just blocks, and returns the result directly (in this case int, not FutureResult object).\nI used latest Pyro4 (4.41).\nI confirmed this problem happens on Windows 7 x64 (Python 2.7.11), OSX (Python 2.7.11), and Ubuntu 15.10 (Python 2.7.10).\n\nIt is funny how the code works as expected when I paste it to IPython. I confirmed this on Ubuntu and OSX.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/109", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/109/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/109/events", "html_url": "https://github.com/irmen/Pyro4/issues/109", "id": 142336074, "node_id": "MDU6SXNzdWUxNDIzMzYwNzQ=", "number": 109, "title": "Revert `66fb6a1`: \"Avoid compatibility problems with PyPy + dill\"", "user": {"login": "Peque", "id": 526577, "node_id": "MDQ6VXNlcjUyNjU3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peque", "html_url": "https://github.com/Peque", "followers_url": "https://api.github.com/users/Peque/followers", "following_url": "https://api.github.com/users/Peque/following{/other_user}", "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peque/subscriptions", "organizations_url": "https://api.github.com/users/Peque/orgs", "repos_url": "https://api.github.com/users/Peque/repos", "events_url": "https://api.github.com/users/Peque/events{/privacy}", "received_events_url": "https://api.github.com/users/Peque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 30, "created_at": "2016-03-21T12:41:26Z", "updated_at": "2017-02-05T13:59:15Z", "closed_at": "2017-02-05T13:59:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Dill was recently added as a [new serialization method in Pyro](https://github.com/irmen/Pyro4/pull/107/). However, [some ugly fixes where made](https://github.com/irmen/Pyro4/pull/107/commits/66fb6a10d81b794525d4f40510d29aa64e66ca10) to workaround PyPy+dill compatibility issues.\n\nThese fixes should be reverted as soon as Dill fixes its [PyPy compatibility issues](https://github.com/uqfoundation/dill/issues/73). It seems [there is a patch](https://github.com/uqfoundation/dill/pull/131) already that may fix those issues, but it has not being integrated in Dill yet.\n\nI am subscribed to both threads in Dill, so I will update this issue with any relevant information.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/108", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/108/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/108/events", "html_url": "https://github.com/irmen/Pyro4/issues/108", "id": 141459357, "node_id": "MDU6SXNzdWUxNDE0NTkzNTc=", "number": 108, "title": "Keeping track of the number of connections to Pyro and killing them on the Pyro Server", "user": {"login": "mkmoisen", "id": 2534631, "node_id": "MDQ6VXNlcjI1MzQ2MzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2534631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkmoisen", "html_url": "https://github.com/mkmoisen", "followers_url": "https://api.github.com/users/mkmoisen/followers", "following_url": "https://api.github.com/users/mkmoisen/following{/other_user}", "gists_url": "https://api.github.com/users/mkmoisen/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkmoisen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkmoisen/subscriptions", "organizations_url": "https://api.github.com/users/mkmoisen/orgs", "repos_url": "https://api.github.com/users/mkmoisen/repos", "events_url": "https://api.github.com/users/mkmoisen/events{/privacy}", "received_events_url": "https://api.github.com/users/mkmoisen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-03-17T02:22:47Z", "updated_at": "2016-04-24T14:36:12Z", "closed_at": "2016-04-24T14:36:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Irmen,\n\nIn the [Best Practices section of the manual](https://pythonhosted.org/Pyro4/tipstricks.html#after-x-simultaneous-proxy-connections-pyro-seems-to-freeze-so-release-your-proxies-when-you-can), you mention the following:\n\n> \u2018After X simultaneous proxy connections, Pyro seems to freeze!\u2019 So: Release your proxies when you can. A connected proxy that is unused takes up resources on the server. In the case of the threadpool server type, it locks up a single thread. If you have too many connected proxies at the same time, the server may run out of threads and stops responding... Still, it is a good thing to think about when you can release a proxy in your code...You can use explicit _pyroRelease calls or use the proxy from within a context manager.\n\nI had a bug in my code, where I was opening up a connection in a loop and failing to close it, and this was causing Pyro to freeze. In this particular case, I couldn't open up a single connection outside of the loop to be used within, for reasons that I will not go into here. At any rate, I was able to track down the bug and fix it.\n\nWhat I would like to do within the Pyro Server is to keep track of the number of opened connections and to kill them in round robin fashion (or even kill them all) if they exceed a certain number, and also log that this is happening so that my team becomes aware of a bug in their code. Would you be able to point me to a way to accomplish this?\n\nI have the \"client\" code which our team uses as an interface to connect to the Pyro server, so all of our code interacts with the client when it wants to talk to Pyro server. All of the methods in the client code have decorators that will reconnect the session to the Pyro Server in the event that either the server or the NameServer restarts or closes in anyway, so this won't hurt anyone aside for the cost of reconnecting.\n\nBest regards,\n\nMatthew\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/106", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/106/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/106/events", "html_url": "https://github.com/irmen/Pyro4/issues/106", "id": 136067103, "node_id": "MDU6SXNzdWUxMzYwNjcxMDM=", "number": 106, "title": "Traceback lost?", "user": {"login": "Peque", "id": 526577, "node_id": "MDQ6VXNlcjUyNjU3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peque", "html_url": "https://github.com/Peque", "followers_url": "https://api.github.com/users/Peque/followers", "following_url": "https://api.github.com/users/Peque/following{/other_user}", "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peque/subscriptions", "organizations_url": "https://api.github.com/users/Peque/orgs", "repos_url": "https://api.github.com/users/Peque/repos", "events_url": "https://api.github.com/users/Peque/events{/privacy}", "received_events_url": "https://api.github.com/users/Peque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-02-24T13:51:20Z", "updated_at": "2019-03-02T21:44:38Z", "closed_at": "2016-02-24T18:51:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running a name server:\n\n```\npython -m Pyro4.naming\n```\n\nHaving the following `server.py`:\n\n``` python\nimport Pyro4\n\n\nclass Test(object):\n    def test(self):\n        return int('a')\n\n\nif __name__ == '__main__':\n\n    daemon = Pyro4.Daemon()\n    ns = Pyro4.locateNS()\n    uri = daemon.register(Test)\n    ns.register(\"test\", uri)\n\n    print(\"Ready.\")\n    daemon.requestLoop()\n```\n\nAnd having the following `client.py`:\n\n``` python\nimport Pyro4\n\n\nif __name__ == '__main__':\n\n    proxy = Pyro4.Proxy(\"PYRONAME:test\")\n    proxy.test()\n```\n\nThis code basically ends up executing `int('a')`, which in Python should raise:\n\n```\nValueError: invalid literal for int() with base 10: 'a'\n```\n\nThe `ValueError` is raised when running `client.py`, however, the traceback looks like this:\n\n```\nTraceback (most recent call last):\n  File \"client.py\", line 7, in <module>\n    proxy.test()\n  File \"/home/peque/.miniconda3/envs/pyro4/lib/python3.5/site-packages/Pyro4/core.py\", line 172, in __call__\n    return self.__send(self.__name, args, kwargs)\n  File \"/home/peque/.miniconda3/envs/pyro4/lib/python3.5/site-packages/Pyro4/core.py\", line 427, in _pyroInvoke\n    raise data\nValueError: invalid literal for int() with base 10: 'a'\n```\n\nNote that `client.py:7; proxy.test()` is represented, but there is no reference to `server.py:6; return int('a')`, which is the line in which the exception actually occurred.\n\nAm I missing something or is this actually not supposed to happen?\n\nThanks for your help. :blush:\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/irmen/Pyro4/issues/105", "repository_url": "https://api.github.com/repos/irmen/Pyro4", "labels_url": "https://api.github.com/repos/irmen/Pyro4/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/irmen/Pyro4/issues/105/comments", "events_url": "https://api.github.com/repos/irmen/Pyro4/issues/105/events", "html_url": "https://github.com/irmen/Pyro4/issues/105", "id": 133498041, "node_id": "MDU6SXNzdWUxMzM0OTgwNDE=", "number": 105, "title": "attribute example", "user": {"login": "tonyyherb", "id": 2448520, "node_id": "MDQ6VXNlcjI0NDg1MjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2448520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonyyherb", "html_url": "https://github.com/tonyyherb", "followers_url": "https://api.github.com/users/tonyyherb/followers", "following_url": "https://api.github.com/users/tonyyherb/following{/other_user}", "gists_url": "https://api.github.com/users/tonyyherb/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonyyherb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonyyherb/subscriptions", "organizations_url": "https://api.github.com/users/tonyyherb/orgs", "repos_url": "https://api.github.com/users/tonyyherb/repos", "events_url": "https://api.github.com/users/tonyyherb/events{/privacy}", "received_events_url": "https://api.github.com/users/tonyyherb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-14T02:52:24Z", "updated_at": "2016-02-14T23:52:48Z", "closed_at": "2016-02-14T12:11:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I am following the attribute example [https://github.com/irmen/Pyro4/blob/master/examples/attributes/](url)\n\nI am wondering what's the meaning for this please? \n@Pyro4.expose\n@property\n    def prop_sub(self):\n        return self.sub\n\nI don't see the client code calling it and if i try to call `p.prop_value` in client code, it will cause an error:\n\n> Pyro4.errors.SecurityError: refused to deserialize types with double underscores in their name: **main**.SubThingy\n\nIs it possible to directly access nested object attribute in Pyro4? I saw some old docs here [https://pythonhosted.org/Pyro/7-features.html#nestedattrs](url) but couldn't find anything for Pyro4\n", "performed_via_github_app": null, "score": 1.0}]}