{"total_count": 15, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/62", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/62/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/62/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/62", "id": 130431895, "node_id": "MDU6SXNzdWUxMzA0MzE4OTU=", "number": 62, "title": "SubfieldBase has been deprecated", "user": {"login": "dduong42", "id": 6153296, "node_id": "MDQ6VXNlcjYxNTMyOTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6153296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dduong42", "html_url": "https://github.com/dduong42", "followers_url": "https://api.github.com/users/dduong42/followers", "following_url": "https://api.github.com/users/dduong42/following{/other_user}", "gists_url": "https://api.github.com/users/dduong42/gists{/gist_id}", "starred_url": "https://api.github.com/users/dduong42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dduong42/subscriptions", "organizations_url": "https://api.github.com/users/dduong42/orgs", "repos_url": "https://api.github.com/users/dduong42/repos", "events_url": "https://api.github.com/users/dduong42/events{/privacy}", "received_events_url": "https://api.github.com/users/dduong42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-01T17:46:59Z", "updated_at": "2016-02-01T17:57:57Z", "closed_at": "2016-02-01T17:57:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "`SubfieldBase` is used in `fields.py`. It's been deprecated and will be removed in Django 1.10.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/47", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/47/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/47/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/47", "id": 49730419, "node_id": "MDU6SXNzdWU0OTczMDQxOQ==", "number": 47, "title": "Not JSON serializable", "user": {"login": "brunofin", "id": 8077237, "node_id": "MDQ6VXNlcjgwNzcyMzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8077237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunofin", "html_url": "https://github.com/brunofin", "followers_url": "https://api.github.com/users/brunofin/followers", "following_url": "https://api.github.com/users/brunofin/following{/other_user}", "gists_url": "https://api.github.com/users/brunofin/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunofin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunofin/subscriptions", "organizations_url": "https://api.github.com/users/brunofin/orgs", "repos_url": "https://api.github.com/users/brunofin/repos", "events_url": "https://api.github.com/users/brunofin/events{/privacy}", "received_events_url": "https://api.github.com/users/brunofin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-11-21T18:20:47Z", "updated_at": "2017-06-09T09:22:02Z", "closed_at": "2017-06-09T09:22:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using django-uuidfield together with django-rest-framework to develop a RESTful API.\nWhenever I try to use the UUIDField, Django throws me this error:\n\n```\nTypeError at (...)\nUUID('a00fef915e284f6d9d9af8b0500234b7') is not JSON serializable\n```\n\nI believe the UUIDField lacks a method which can serialize it to JSON using python's JSON encoder and decoder.\n\nHere's the stack trace:\n\n```\nTraceback:\nFile \"/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py\" in get_response\n  137.                 response = response.render()\nFile \"/usr/local/lib/python2.7/dist-packages/django/template/response.py\" in render\n  103.             self.content = self.rendered_content\nFile \"/usr/local/lib/python2.7/dist-packages/rest_framework/response.py\" in rendered_content\n  63.         ret = renderer.render(self.data, media_type, context)\nFile \"/usr/local/lib/python2.7/dist-packages/rest_framework/renderers.py\" in render\n  606.         context = self.get_context(data, accepted_media_type, renderer_context)\nFile \"/usr/local/lib/python2.7/dist-packages/rest_framework/renderers.py\" in get_context\n  556.         raw_data_post_form = self.get_raw_data_form(view, 'POST', request)\nFile \"/usr/local/lib/python2.7/dist-packages/rest_framework/renderers.py\" in get_raw_data_form\n  506.                 content = renderer.render(serializer.data, accepted, context)\nFile \"/usr/local/lib/python2.7/dist-packages/rest_framework/renderers.py\" in render\n  87.             indent=indent, ensure_ascii=self.ensure_ascii\nFile \"/usr/lib/python2.7/json/__init__.py\" in dumps\n  250.         sort_keys=sort_keys, **kw).encode(obj)\nFile \"/usr/lib/python2.7/json/encoder.py\" in encode\n  209.             chunks = list(chunks)\nFile \"/usr/lib/python2.7/json/encoder.py\" in _iterencode\n  434.             for chunk in _iterencode_dict(o, _current_indent_level):\nFile \"/usr/lib/python2.7/json/encoder.py\" in _iterencode_dict\n  408.                 for chunk in chunks:\nFile \"/usr/lib/python2.7/json/encoder.py\" in _iterencode\n  442.             o = _default(o)\nFile \"/usr/local/lib/python2.7/dist-packages/rest_framework/utils/encoders.py\" in default\n  58.         return super(JSONEncoder, self).default(o)\nFile \"/usr/lib/python2.7/json/encoder.py\" in default\n  184.         raise TypeError(repr(o) + \" is not JSON serializable\")\n\nException Type: TypeError at /api/Participants/\nException Value: UUID('a00fef915e284f6d9d9af8b0500234b7') is not JSON serializable\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/46", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/46/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/46/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/46", "id": 48673615, "node_id": "MDU6SXNzdWU0ODY3MzYxNQ==", "number": 46, "title": "PostgreSQL throws DataError when trying to retrieve objects with invalid UUID", "user": {"login": "lingxiaoyang", "id": 8630726, "node_id": "MDQ6VXNlcjg2MzA3MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8630726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lingxiaoyang", "html_url": "https://github.com/lingxiaoyang", "followers_url": "https://api.github.com/users/lingxiaoyang/followers", "following_url": "https://api.github.com/users/lingxiaoyang/following{/other_user}", "gists_url": "https://api.github.com/users/lingxiaoyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/lingxiaoyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lingxiaoyang/subscriptions", "organizations_url": "https://api.github.com/users/lingxiaoyang/orgs", "repos_url": "https://api.github.com/users/lingxiaoyang/repos", "events_url": "https://api.github.com/users/lingxiaoyang/events{/privacy}", "received_events_url": "https://api.github.com/users/lingxiaoyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-11-13T18:34:39Z", "updated_at": "2015-01-19T19:45:15Z", "closed_at": "2015-01-19T19:45:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code will trigger the problem with PostgreSQL backend:\n\n``` python\nSomeModel.objects.get(uuid=\"invalid_uuid\")\n```\n\nAn example traceback:\n\n``` python\n/.../lib/python2.7/site-packages/django/db/backends/utils.pyc in execute(self, sql, params)\n     63                 return self.cursor.execute(sql)\n     64             else:\n---> 65                 return self.cursor.execute(sql, params)\n     66 \n     67     def executemany(self, sql, param_list):\n\nDataError: invalid input syntax for uuid: \"invalid_uuid\"\nLINE 1: ... \"some_model\" WHERE \"some_model\".\"uuid\" = 'invalid_u...\n                                                     ^\n```\n\nPostgreSQL has a UUID type and throws an error with badly formatted UUID. However, it is not the expected behavior of an API. When user provides an invalid UUID, the API in most cases is expected to return 404, instead of 500 caused by this uncaught exception.\n\nThe problem lies in method [`get_db_prep_value`](https://github.com/dcramer/django-uuidfield/blob/57f6e43bf6f45a43cc15e4807f07c6bf92a3a69a/uuidfield/fields.py#L113-L122). If the provided UUID is not valid, the method should return an arbitrary valid UUID that matches nothing in the database.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/40", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/40/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/40/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/40", "id": 40146518, "node_id": "MDU6SXNzdWU0MDE0NjUxOA==", "number": 40, "title": "Hyphenate problems", "user": {"login": "SteveAyre", "id": 1141663, "node_id": "MDQ6VXNlcjExNDE2NjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1141663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteveAyre", "html_url": "https://github.com/SteveAyre", "followers_url": "https://api.github.com/users/SteveAyre/followers", "following_url": "https://api.github.com/users/SteveAyre/following{/other_user}", "gists_url": "https://api.github.com/users/SteveAyre/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteveAyre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteveAyre/subscriptions", "organizations_url": "https://api.github.com/users/SteveAyre/orgs", "repos_url": "https://api.github.com/users/SteveAyre/repos", "events_url": "https://api.github.com/users/SteveAyre/events{/privacy}", "received_events_url": "https://api.github.com/users/SteveAyre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-08-13T11:45:08Z", "updated_at": "2014-11-04T23:52:04Z", "closed_at": "2014-11-04T23:52:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Created two models with a UUIDField(primary_key=True,hyphenate=True,auto=True) fields. One model has a foreign key to the other model.\n\nFixture fields contain UUIDs with hyphens.\n\nProblem 1:\nloaddata loads the UUIDs into the database with hyphens removed\n\nProblem 2:\ngeneric.edit.CreateView fails due to a foreign key problem - the form is submitted with a hyphenated UUID, this appears to fail since it is stored without hyphens in the database\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/37", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/37/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/37/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/37", "id": 38688765, "node_id": "MDU6SXNzdWUzODY4ODc2NQ==", "number": 37, "title": "Support for BinaryField in Django 1.6+", "user": {"login": "kevinlondon", "id": 1216869, "node_id": "MDQ6VXNlcjEyMTY4Njk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1216869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinlondon", "html_url": "https://github.com/kevinlondon", "followers_url": "https://api.github.com/users/kevinlondon/followers", "following_url": "https://api.github.com/users/kevinlondon/following{/other_user}", "gists_url": "https://api.github.com/users/kevinlondon/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinlondon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinlondon/subscriptions", "organizations_url": "https://api.github.com/users/kevinlondon/orgs", "repos_url": "https://api.github.com/users/kevinlondon/repos", "events_url": "https://api.github.com/users/kevinlondon/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinlondon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-25T00:50:40Z", "updated_at": "2014-07-25T18:50:43Z", "closed_at": "2014-07-25T18:50:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "As of 1.6, BinaryField has been added to Django, which enables the kind of storage you [mentioned originally wanting](http://cramer.io/2009/02/28/improved-uuidfield-in-django/) for UUIDs. \n\nAlthough, based on a look at the Django source code, it looks like BinaryField is actually stored as a \"longblob\" in my MySQL, which has a different size requirement than 16 bytes. In this case, it would be up to 20 bytes total for the field, according to the documentation on [MySQL Storage Requirements](http://dev.mysql.com/doc/refman/5.0/en/storage-requirements.html).\n\nOne more potential downside is that, according to the docs, you cannot filter on a BinaryField. So, overall, this might not be that useful or we might have to do more work to add filter support.\n\nWould it be a good idea to add this?\n\nOther links:\n- [MySQL Benchmarks](http://iops.io/blog/storing-billions-uuid-fields-mysql-innodb/) (admittedly uses char 36 instead of char 32)\n- [Django documentation](https://docs.djangoproject.com/en/dev/ref/models/fields/#binaryfield) \n- [Django source on the BinaryField](https://github.com/django/django/blob/7fd55c3481a004afb049e15ae3b8c93ce8bf0603/django/db/models/fields/__init__.py) \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/36", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/36/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/36/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/36", "id": 38232002, "node_id": "MDU6SXNzdWUzODIzMjAwMg==", "number": 36, "title": "ValueError: badly formed hexadecimal UUID string", "user": {"login": "pazooki", "id": 306745, "node_id": "MDQ6VXNlcjMwNjc0NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/306745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pazooki", "html_url": "https://github.com/pazooki", "followers_url": "https://api.github.com/users/pazooki/followers", "following_url": "https://api.github.com/users/pazooki/following{/other_user}", "gists_url": "https://api.github.com/users/pazooki/gists{/gist_id}", "starred_url": "https://api.github.com/users/pazooki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pazooki/subscriptions", "organizations_url": "https://api.github.com/users/pazooki/orgs", "repos_url": "https://api.github.com/users/pazooki/repos", "events_url": "https://api.github.com/users/pazooki/events{/privacy}", "received_events_url": "https://api.github.com/users/pazooki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-07-19T11:51:36Z", "updated_at": "2014-11-05T08:39:20Z", "closed_at": "2014-11-05T08:39:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know why it's failing with this error. the way I am using it looks legit to me.\nhttps://gist.github.com/pazooki/b3ee2937c72bd0fa679f#file-traceback\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/33", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/33/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/33/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/33", "id": 37152601, "node_id": "MDU6SXNzdWUzNzE1MjYwMQ==", "number": 33, "title": "Serialization failure on Python3 due to unicode calls", "user": {"login": "emyller", "id": 22429, "node_id": "MDQ6VXNlcjIyNDI5", "avatar_url": "https://avatars0.githubusercontent.com/u/22429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emyller", "html_url": "https://github.com/emyller", "followers_url": "https://api.github.com/users/emyller/followers", "following_url": "https://api.github.com/users/emyller/following{/other_user}", "gists_url": "https://api.github.com/users/emyller/gists{/gist_id}", "starred_url": "https://api.github.com/users/emyller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emyller/subscriptions", "organizations_url": "https://api.github.com/users/emyller/orgs", "repos_url": "https://api.github.com/users/emyller/repos", "events_url": "https://api.github.com/users/emyller/events{/privacy}", "received_events_url": "https://api.github.com/users/emyller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-04T09:08:51Z", "updated_at": "2014-11-04T23:40:25Z", "closed_at": "2014-11-04T23:40:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `uuidfield` module has some `unicode` calls that are blocking data serialization on Python 3.\n\nIMHO, these calls as well as any `__unicode__` methods should be dropped in favor of `__str__` since there is no non-ASCII char in UUIDs anyway.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/24", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/24/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/24/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/24", "id": 24135925, "node_id": "MDU6SXNzdWUyNDEzNTkyNQ==", "number": 24, "title": "Encounting syntax error when running Django 1.6 on Python 3.3", "user": {"login": "jeffself", "id": 100426, "node_id": "MDQ6VXNlcjEwMDQyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/100426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffself", "html_url": "https://github.com/jeffself", "followers_url": "https://api.github.com/users/jeffself/followers", "following_url": "https://api.github.com/users/jeffself/following{/other_user}", "gists_url": "https://api.github.com/users/jeffself/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffself/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffself/subscriptions", "organizations_url": "https://api.github.com/users/jeffself/orgs", "repos_url": "https://api.github.com/users/jeffself/repos", "events_url": "https://api.github.com/users/jeffself/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffself/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-12-11T20:39:14Z", "updated_at": "2014-11-05T08:39:43Z", "closed_at": "2014-11-05T08:39:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I set up a test app running Django 1.6. I created a class in models.py containing an attribute having UUIDField. Works fine. But when I run this with Python 3.3, I get the following error:\n\nValidating models...\n\nUnhandled exception in thread started by <function check_errors.<locals>.wrapper at 0x10f9063b0>\n...\n\n   from uuidfield import UUIDField\n  File \"/Users/jeff/Env/django16/lib/python3.3/site-packages/uuidfield/**init**.py\", line 4\n    except Exception, e:\n                    ^\nSyntaxError: invalid syntax\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/20", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/20/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/20/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/20", "id": 15639656, "node_id": "MDU6SXNzdWUxNTYzOTY1Ng==", "number": 20, "title": "String value with hyphens", "user": {"login": "bfirsh", "id": 40906, "node_id": "MDQ6VXNlcjQwOTA2", "avatar_url": "https://avatars1.githubusercontent.com/u/40906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bfirsh", "html_url": "https://github.com/bfirsh", "followers_url": "https://api.github.com/users/bfirsh/followers", "following_url": "https://api.github.com/users/bfirsh/following{/other_user}", "gists_url": "https://api.github.com/users/bfirsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/bfirsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bfirsh/subscriptions", "organizations_url": "https://api.github.com/users/bfirsh/orgs", "repos_url": "https://api.github.com/users/bfirsh/repos", "events_url": "https://api.github.com/users/bfirsh/events{/privacy}", "received_events_url": "https://api.github.com/users/bfirsh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-06-17T15:48:46Z", "updated_at": "2013-10-08T09:38:45Z", "closed_at": "2013-10-08T09:38:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to modify UUIDField to return a UUID with hyphens in it. I don't mind how it is stored (in fact, using the Postgres type, it is stored with hyphens in the database). How about an option `groups=True` that sets `max_length` to 36 and uses `uuid.UUID` instead of `StringUUID`?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/11", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/11/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/11/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/11", "id": 7904003, "node_id": "MDU6SXNzdWU3OTA0MDAz", "number": 11, "title": "Not JSON encodable", "user": {"login": "andymckay", "id": 74699, "node_id": "MDQ6VXNlcjc0Njk5", "avatar_url": "https://avatars2.githubusercontent.com/u/74699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andymckay", "html_url": "https://github.com/andymckay", "followers_url": "https://api.github.com/users/andymckay/followers", "following_url": "https://api.github.com/users/andymckay/following{/other_user}", "gists_url": "https://api.github.com/users/andymckay/gists{/gist_id}", "starred_url": "https://api.github.com/users/andymckay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andymckay/subscriptions", "organizations_url": "https://api.github.com/users/andymckay/orgs", "repos_url": "https://api.github.com/users/andymckay/repos", "events_url": "https://api.github.com/users/andymckay/events{/privacy}", "received_events_url": "https://api.github.com/users/andymckay/received_events", "type": "User", "site_admin": true}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2012-10-26T21:23:57Z", "updated_at": "2014-10-24T19:42:09Z", "closed_at": "2014-10-24T19:42:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "UUIDField now returns a StringUUID object. The json encoder has no idea what to do with that, it's not in any of the JSON encoding rules, so it just throws an error.\n\nNot returning a StringUUID from to_python works, but ideally we'd make StringUUID work in JSON. I could define a custom JSON encoder, but ideally I'd rather make StringUUID just work with JSON so I don't have to.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/8", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/8/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/8/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/8", "id": 3790622, "node_id": "MDU6SXNzdWUzNzkwNjIy", "number": 8, "title": "README says django-bitfield", "user": {"login": "dyve", "id": 82315, "node_id": "MDQ6VXNlcjgyMzE1", "avatar_url": "https://avatars3.githubusercontent.com/u/82315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dyve", "html_url": "https://github.com/dyve", "followers_url": "https://api.github.com/users/dyve/followers", "following_url": "https://api.github.com/users/dyve/following{/other_user}", "gists_url": "https://api.github.com/users/dyve/gists{/gist_id}", "starred_url": "https://api.github.com/users/dyve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dyve/subscriptions", "organizations_url": "https://api.github.com/users/dyve/orgs", "repos_url": "https://api.github.com/users/dyve/repos", "events_url": "https://api.github.com/users/dyve/events{/privacy}", "received_events_url": "https://api.github.com/users/dyve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-03-24T05:49:32Z", "updated_at": "2012-05-12T19:06:41Z", "closed_at": "2012-05-12T19:06:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Should probably be django-uuidfield\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/7", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/7/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/7/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/7", "id": 3631260, "node_id": "MDU6SXNzdWUzNjMxMjYw", "number": 7, "title": "Incorrect max_length", "user": {"login": "chrisspen", "id": 116631, "node_id": "MDQ6VXNlcjExNjYzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/116631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisspen", "html_url": "https://github.com/chrisspen", "followers_url": "https://api.github.com/users/chrisspen/followers", "following_url": "https://api.github.com/users/chrisspen/following{/other_user}", "gists_url": "https://api.github.com/users/chrisspen/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisspen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisspen/subscriptions", "organizations_url": "https://api.github.com/users/chrisspen/orgs", "repos_url": "https://api.github.com/users/chrisspen/repos", "events_url": "https://api.github.com/users/chrisspen/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisspen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-03-13T15:29:23Z", "updated_at": "2012-03-19T16:09:50Z", "closed_at": "2012-03-19T16:09:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "The default uuid version is uuid4(), which generates a UUID of length 36. However, the default max_length used is 32, and no easy option is provided to customize this length.\n\nYou should increase the default length to 36 or higher, and provide max_length as a customizable option.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/4", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/4/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/4/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/4", "id": 1468496, "node_id": "MDU6SXNzdWUxNDY4NDk2", "number": 4, "title": "Check out the source for ...?", "user": {"login": "davidszotten", "id": 412005, "node_id": "MDQ6VXNlcjQxMjAwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/412005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidszotten", "html_url": "https://github.com/davidszotten", "followers_url": "https://api.github.com/users/davidszotten/followers", "following_url": "https://api.github.com/users/davidszotten/following{/other_user}", "gists_url": "https://api.github.com/users/davidszotten/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidszotten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidszotten/subscriptions", "organizations_url": "https://api.github.com/users/davidszotten/orgs", "repos_url": "https://api.github.com/users/davidszotten/repos", "events_url": "https://api.github.com/users/davidszotten/events{/privacy}", "received_events_url": "https://api.github.com/users/davidszotten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-08-23T18:08:24Z", "updated_at": "2012-07-30T22:42:40Z", "closed_at": "2012-07-30T22:42:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "readme.rst\n\nis there something missing there?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/3", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/3/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/3/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/3", "id": 659777, "node_id": "MDU6SXNzdWU2NTk3Nzc=", "number": 3, "title": "UUIDField in Admin?", "user": {"login": "sivy", "id": 70188, "node_id": "MDQ6VXNlcjcwMTg4", "avatar_url": "https://avatars3.githubusercontent.com/u/70188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sivy", "html_url": "https://github.com/sivy", "followers_url": "https://api.github.com/users/sivy/followers", "following_url": "https://api.github.com/users/sivy/following{/other_user}", "gists_url": "https://api.github.com/users/sivy/gists{/gist_id}", "starred_url": "https://api.github.com/users/sivy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sivy/subscriptions", "organizations_url": "https://api.github.com/users/sivy/orgs", "repos_url": "https://api.github.com/users/sivy/repos", "events_url": "https://api.github.com/users/sivy/events{/privacy}", "received_events_url": "https://api.github.com/users/sivy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-03-09T18:09:40Z", "updated_at": "2012-05-12T19:07:00Z", "closed_at": "2012-05-12T19:07:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a trick to getting a UUID field to show up in the modeladmin? I have several models with UUIDFields, and while i can see the uuid field value in the shell, the field is not listed with the others in the (mostly-default) admin views.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/2", "repository_url": "https://api.github.com/repos/dcramer/django-uuidfield", "labels_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/2/comments", "events_url": "https://api.github.com/repos/dcramer/django-uuidfield/issues/2/events", "html_url": "https://github.com/dcramer/django-uuidfield/issues/2", "id": 635841, "node_id": "MDU6SXNzdWU2MzU4NDE=", "number": 2, "title": "just an fyi - misspelled \"regster\" in the psycopg2 statement.", "user": {"login": "cloax", "id": 18915, "node_id": "MDQ6VXNlcjE4OTE1", "avatar_url": "https://avatars2.githubusercontent.com/u/18915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cloax", "html_url": "https://github.com/cloax", "followers_url": "https://api.github.com/users/cloax/followers", "following_url": "https://api.github.com/users/cloax/following{/other_user}", "gists_url": "https://api.github.com/users/cloax/gists{/gist_id}", "starred_url": "https://api.github.com/users/cloax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cloax/subscriptions", "organizations_url": "https://api.github.com/users/cloax/orgs", "repos_url": "https://api.github.com/users/cloax/repos", "events_url": "https://api.github.com/users/cloax/events{/privacy}", "received_events_url": "https://api.github.com/users/cloax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-02-28T22:28:52Z", "updated_at": "2011-02-28T22:30:04Z", "closed_at": "2011-02-28T22:30:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pretty sure psycopg2.extras.regster_uuid() should be     psycopg2.extras.register_uuid()\n\nThanks for the nifty widget and for rolling in the south support!\n", "performed_via_github_app": null, "score": 1.0}]}