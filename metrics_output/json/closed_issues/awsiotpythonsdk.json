{"total_count": 216, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/260", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/260/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/260/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/260", "id": 655454532, "node_id": "MDU6SXNzdWU2NTU0NTQ1MzI=", "number": 260, "title": "Support for named shadow", "user": {"login": "abhisheksafui", "id": 17683298, "node_id": "MDQ6VXNlcjE3NjgzMjk4", "avatar_url": "https://avatars0.githubusercontent.com/u/17683298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhisheksafui", "html_url": "https://github.com/abhisheksafui", "followers_url": "https://api.github.com/users/abhisheksafui/followers", "following_url": "https://api.github.com/users/abhisheksafui/following{/other_user}", "gists_url": "https://api.github.com/users/abhisheksafui/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhisheksafui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhisheksafui/subscriptions", "organizations_url": "https://api.github.com/users/abhisheksafui/orgs", "repos_url": "https://api.github.com/users/abhisheksafui/repos", "events_url": "https://api.github.com/users/abhisheksafui/events{/privacy}", "received_events_url": "https://api.github.com/users/abhisheksafui/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-12T18:44:34Z", "updated_at": "2020-07-13T01:40:33Z", "closed_at": "2020-07-13T01:40:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I could not find API's for accessing the named shadows. classic shadow api is available. Are you planning to provide an update?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/259", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/259/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/259/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/259", "id": 654990999, "node_id": "MDU6SXNzdWU2NTQ5OTA5OTk=", "number": 259, "title": "Support planned for QoS 2?", "user": {"login": "cnrmck", "id": 22061955, "node_id": "MDQ6VXNlcjIyMDYxOTU1", "avatar_url": "https://avatars2.githubusercontent.com/u/22061955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cnrmck", "html_url": "https://github.com/cnrmck", "followers_url": "https://api.github.com/users/cnrmck/followers", "following_url": "https://api.github.com/users/cnrmck/following{/other_user}", "gists_url": "https://api.github.com/users/cnrmck/gists{/gist_id}", "starred_url": "https://api.github.com/users/cnrmck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cnrmck/subscriptions", "organizations_url": "https://api.github.com/users/cnrmck/orgs", "repos_url": "https://api.github.com/users/cnrmck/repos", "events_url": "https://api.github.com/users/cnrmck/events{/privacy}", "received_events_url": "https://api.github.com/users/cnrmck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-10T19:28:15Z", "updated_at": "2020-07-11T18:01:33Z", "closed_at": "2020-07-11T18:01:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Access to QoS 2 would be really useful. \r\n\r\nMy server receives several repeat posts from my devices which can be problematic to filter. \r\n\r\nPaho already supports QoS 2. Does aws plan to support QoS 2? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/258", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/258/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/258/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/258", "id": 648550994, "node_id": "MDU6SXNzdWU2NDg1NTA5OTQ=", "number": 258, "title": "Greengrass sample can't connect to Greengrass running on another machine", "user": {"login": "mstfldmr", "id": 2570317, "node_id": "MDQ6VXNlcjI1NzAzMTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2570317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstfldmr", "html_url": "https://github.com/mstfldmr", "followers_url": "https://api.github.com/users/mstfldmr/followers", "following_url": "https://api.github.com/users/mstfldmr/following{/other_user}", "gists_url": "https://api.github.com/users/mstfldmr/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstfldmr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstfldmr/subscriptions", "organizations_url": "https://api.github.com/users/mstfldmr/orgs", "repos_url": "https://api.github.com/users/mstfldmr/repos", "events_url": "https://api.github.com/users/mstfldmr/events{/privacy}", "received_events_url": "https://api.github.com/users/mstfldmr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-30T23:05:33Z", "updated_at": "2020-08-14T00:10:18Z", "closed_at": "2020-08-14T00:10:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "If Greengrass is running on another machine, sample code at samples/greengrass/basicDiscovery.py tries to connect to localhost (instead of the machine running GG) and fails.\r\n\r\n\r\n```\r\npython3 basicDiscovery.py -e ENDPOINT -r root.ca.pem -c 7e7b649e5e.cert.pem -k 7e7b649e5e.private.key -n MyDevice -t test -M abc123\r\n\r\n2020-07-01 01:01:17,451 - AWSIoTPythonSDK.core.greengrass.discovery.providers - INFO - Starting discover request...\r\n2020-07-01 01:01:17,451 - AWSIoTPythonSDK.core.greengrass.discovery.providers - INFO - Endpoint: ENDPOINT:8443\r\n2020-07-01 01:01:17,451 - AWSIoTPythonSDK.core.greengrass.discovery.providers - INFO - Target thing: MyDevice\r\n2020-07-01 01:01:17,451 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Creating tcp connection...\r\n2020-07-01 01:01:17,494 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Creating ssl connection...\r\n2020-07-01 01:01:17,562 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Matching host name...\r\n2020-07-01 01:01:17,562 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Sending discover request: GET /greengrass/discover/thing/MyDevice HTTP/1.1\r\nHost: ENDPOINT:8443\r\n\r\n\r\n2020-07-01 01:01:17,562 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Receiving discover response header...\r\n2020-07-01 01:01:18,009 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Receiving discover response body...\r\nDiscovered GGC: arn:aws:iot:eu-west-1:591128969213:thing/PredictiveMaintenance_Core from Group: f6c18be1-296c-44a1-9569-349e30c9dc7c\r\nNow we persist the connectivity/identity information...\r\nNow proceed to the connecting flow...\r\n2020-07-01 01:01:18,015 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Initializing MQTT layer...\r\n2020-07-01 01:01:18,016 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Registering internal event callbacks to MQTT layer...\r\n2020-07-01 01:01:18,016 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2020-07-01 01:01:18,016 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: MyDevice\r\n2020-07-01 01:01:18,016 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2020-07-01 01:01:18,016 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2020-07-01 01:01:18,016 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\nTrying to connect to core at 127.0.0.1:8883\r\n2020-07-01 01:01:18,017 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2020-07-01 01:01:18,017 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2020-07-01 01:01:18,017 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2020-07-01 01:01:18,017 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2020-07-01 01:01:18,017 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\n2020-07-01 01:01:18,017 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\n2020-07-01 01:01:18,017 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n2020-07-01 01:01:18,018 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Cleaning up before stopping event consuming\r\n2020-07-01 01:01:18,018 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event queue cleared\r\n2020-07-01 01:01:18,018 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Stopping network I/O thread...\r\n2020-07-01 01:01:18,018 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Network thread stopped\r\n2020-07-01 01:01:18,018 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event callbacks cleared\r\n2020-07-01 01:01:18,018 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread stopped\r\n2020-07-01 01:01:18,018 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Waiting for event consumer to completely stop\r\n2020-07-01 01:01:18,028 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Exiting dispatching loop...\r\n2020-07-01 01:01:18,028 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Event consumer stopped\r\nError in connect!\r\nType: <class 'ConnectionRefusedError'>\r\nTraceback (most recent call last):\r\n  File \"basicDiscovery.py\", line 157, in <module>\r\n    myAWSIoTMQTTClient.connect()\r\n  File \"/Users/aldemim/opt/miniconda3/lib/python3.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 513, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/Users/aldemim/opt/miniconda3/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 196, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/Users/aldemim/opt/miniconda3/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 223, in connect_async\r\n    raise e\r\n  File \"/Users/aldemim/opt/miniconda3/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 211, in connect_async\r\n    rc = self._internal_async_client.connect(keep_alive_sec, ack_callback)\r\n  File \"/Users/aldemim/opt/miniconda3/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/internal/clients.py\", line 122, in connect\r\n    rc = self._paho_client.connect(host, port, keep_alive_sec)\r\n  File \"/Users/aldemim/opt/miniconda3/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 665, in connect\r\n    return self.reconnect()\r\n  File \"/Users/aldemim/opt/miniconda3/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 789, in reconnect\r\n    sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))\r\n  File \"/Users/aldemim/opt/miniconda3/lib/python3.7/socket.py\", line 727, in create_connection\r\n    raise err\r\n  File \"/Users/aldemim/opt/miniconda3/lib/python3.7/socket.py\", line 716, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 61] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"basicDiscovery.py\", line 163, in <module>\r\n    print(\"Error message: %s\" % e.message)\r\nAttributeError: 'ConnectionRefusedError' object has no attribute 'message'\r\n```\r\n\r\nIf localhost is skipped, it works:\r\n\r\n```\r\nif currentHost == '127.0.0.1':\r\n        continue\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/257", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/257/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/257/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/257", "id": 644144384, "node_id": "MDU6SXNzdWU2NDQxNDQzODQ=", "number": 257, "title": "_tokenPool KeyError in deviceShadow", "user": {"login": "780Farva", "id": 16979385, "node_id": "MDQ6VXNlcjE2OTc5Mzg1", "avatar_url": "https://avatars0.githubusercontent.com/u/16979385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/780Farva", "html_url": "https://github.com/780Farva", "followers_url": "https://api.github.com/users/780Farva/followers", "following_url": "https://api.github.com/users/780Farva/following{/other_user}", "gists_url": "https://api.github.com/users/780Farva/gists{/gist_id}", "starred_url": "https://api.github.com/users/780Farva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/780Farva/subscriptions", "organizations_url": "https://api.github.com/users/780Farva/orgs", "repos_url": "https://api.github.com/users/780Farva/repos", "events_url": "https://api.github.com/users/780Farva/events{/privacy}", "received_events_url": "https://api.github.com/users/780Farva/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-06-23T21:02:14Z", "updated_at": "2020-07-27T15:51:17Z", "closed_at": "2020-07-27T13:43:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `AWSIoTPythonSDK==1.4.3`, I've caught a `KeyError` exception inside `core.shadow.deviceShadow`\r\n\r\n```\r\n 2020-06-10 16:27:50,104 [INFO] AWSIoTPythonSDK.core.protocol.mqtt_core: Performing sync publish...\r\n Exception in thread Thread-3:\r\n Traceback (most recent call last):\r\n   File \"/usr/local/lib/python3.7/threading.py\", line 926, in _bootstrap_inner\r\n     self.run()\r\n   File \"/usr/local/lib/python3.7/threading.py\", line 870, in run\r\n     self._target(*self._args, **self._kwargs)\r\n   File \"/usr/local/lib/python3.7/site-packages/paho/mqtt/client.py\", line 2913, in _thread_main\r\n     self.loop_forever(retry_first_connection=True)\r\n   File \"/usr/local/lib/python3.7/site-packages/paho/mqtt/client.py\", line 1578, in loop_forever\r\n     rc = self.loop(timeout, max_packets)\r\n   File \"/usr/local/lib/python3.7/site-packages/paho/mqtt/client.py\", line 1072, in loop\r\n     rc = self.loop_read(max_packets)\r\n   File \"/usr/local/lib/python3.7/site-packages/paho/mqtt/client.py\", line 1374, in loop_read\r\n     rc = self._packet_read()\r\n   File \"/usr/local/lib/python3.7/site-packages/paho/mqtt/client.py\", line 2071, in _packet_read\r\n     rc = self._packet_handle()\r\n   File \"/usr/local/lib/python3.7/site-packages/paho/mqtt/client.py\", line 2560, in _packet_handle\r\n     return self._handle_publish()\r\n   File \"/usr/local/lib/python3.7/site-packages/paho/mqtt/client.py\", line 2759, in _handle_publish\r\n     self._handle_on_message(message)\r\n   File \"/usr/local/lib/python3.7/site-packages/paho/mqtt/client.py\", line 2902, in _handle_on_message\r\n     callback(self, self._userdata, message)\r\n   File \"/opt/awsiot-bridge/src/awsiot-bridge.py\", line 492, in on_modbus_complete\r\n     device_shadow_handler.shadowUpdate(connected=True)\r\n   File \"/opt/awsiot-bridge/src/shadowmanger.py\", line 76, in shadowUpdate\r\n     self.client.shadowUpdate(payload_template, self._update, timeout)\r\n   File \"/usr/local/lib/python3.7/site-packages/AWSIoTPythonSDK/core/shadow/deviceShadow.py\", line 362, in shadowUpdate\r\n     self._tokenPool[currentToken].start()\r\n KeyError: '71c853b3-4ee3-49ac-a936-cd62e3e5406e'\r\n```\r\n\r\nAfter reviewing `AWSIoTPythonSDK/core/shadow/deviceShadow.py` I'm pretty confused as to how the `currentToken` that was just added to that dictionary could be missing. Seems like there might be a race-condition or some side-effect internal to the library causing this one. \r\n\r\nA second set of eyes would be greatly appreciaed!\r\n\r\n**UPDATE**: This issue was just observed again on 2020-06-23", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/255", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/255/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/255/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/255", "id": 624099554, "node_id": "MDU6SXNzdWU2MjQwOTk1NTQ=", "number": 255, "title": "Unable to connect on Windows 10", "user": {"login": "templetree", "id": 28429729, "node_id": "MDQ6VXNlcjI4NDI5NzI5", "avatar_url": "https://avatars1.githubusercontent.com/u/28429729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/templetree", "html_url": "https://github.com/templetree", "followers_url": "https://api.github.com/users/templetree/followers", "following_url": "https://api.github.com/users/templetree/following{/other_user}", "gists_url": "https://api.github.com/users/templetree/gists{/gist_id}", "starred_url": "https://api.github.com/users/templetree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/templetree/subscriptions", "organizations_url": "https://api.github.com/users/templetree/orgs", "repos_url": "https://api.github.com/users/templetree/repos", "events_url": "https://api.github.com/users/templetree/events{/privacy}", "received_events_url": "https://api.github.com/users/templetree/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321351, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUx", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/response-requested", "name": "response-requested", "color": "666666", "default": false, "description": "Waiting on additional info and feedback. Will move to \"closing-soon\" in 7 days."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T07:19:50Z", "updated_at": "2020-06-02T00:07:18Z", "closed_at": "2020-06-02T00:07:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I am using python SDK to connect thing using MQTT.\r\nThe policy is set to accept all connections.\r\n`{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": \"iot:*\",\r\n      \"Resource\": \"*\"\r\n    }\r\n  ]\r\n}`\r\nHowever each time I try to connect I get the following error:\r\n\r\n>  File \".\\awsmqttclient.py\", line 22, in <module>\r\n    myMQTTClient.connect()\r\n  File \"C:\\Users\\Sachin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\AWSIoTPythonSDK\\MQTTLib.py\", line 513, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"C:\\Users\\Sachin\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python38\\site-packages\\AWSIoTPythonSDK\\core\\protocol\\mqtt_core.py\", line 199, in connect\r\n    raise connectTimeoutException()\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.connectTimeoutException\r\n\r\nHere is the dump:\r\n\"No.\",\"Time\",\"Source\",\"Destination\",\"Protocol\",\"Length\",\"Info\"\r\n\"11\",\"2.573896\",\"192.168.1.7\",\"13.232.234.97\",\"TCP\",\"66\",\"53493  >  8883 [SYN] Seq=0 Win=64240 Len=0 MSS=1460 WS=256 SACK_PERM=1\"\r\n\"12\",\"2.603847\",\"13.232.234.97\",\"192.168.1.7\",\"TCP\",\"66\",\"8883  >  53493 [SYN, ACK] Seq=0 Ack=1 Win=26883 Len=0 MSS=1412 SACK_PERM=1 WS=256\"\r\n\"13\",\"2.604067\",\"192.168.1.7\",\"13.232.234.97\",\"TCP\",\"54\",\"53493  >  8883 [ACK] Seq=1 Ack=1 Win=131072 Len=0\"\r\n\"14\",\"2.614661\",\"192.168.1.7\",\"13.232.234.97\",\"TLSv1.2\",\"571\",\"Client Hello\"\r\n\"15\",\"2.645853\",\"13.232.234.97\",\"192.168.1.7\",\"TCP\",\"54\",\"8883  >  53493 [ACK] Seq=1 Ack=518 Win=28160 Len=0\"\r\n\"16\",\"2.646741\",\"13.232.234.97\",\"192.168.1.7\",\"TCP\",\"1466\",\"8883  >  53493 [ACK] Seq=1 Ack=518 Win=28160 Len=1412 [TCP segment of a reassembled PDU]\"\r\n\"17\",\"2.646742\",\"13.232.234.97\",\"192.168.1.7\",\"TCP\",\"1466\",\"8883  >  53493 [ACK] Seq=1413 Ack=518 Win=28160 Len=1412 [TCP segment of a reassembled PDU]\"\r\n\"18\",\"2.647014\",\"192.168.1.7\",\"13.232.234.97\",\"TCP\",\"54\",\"53493  >  8883 [ACK] Seq=518 Ack=2825 Win=131072 Len=0\"\r\n\"19\",\"2.659134\",\"13.232.234.97\",\"192.168.1.7\",\"TCP\",\"1466\",\"8883  >  53493 [ACK] Seq=2825 Ack=518 Win=28160 Len=1412 [TCP segment of a reassembled PDU]\"\r\n\"20\",\"2.659141\",\"13.232.234.97\",\"192.168.1.7\",\"TLSv1.2\",\"1170\",\"Server Hello, Certificate, Server Key Exchange, Certificate Request, Server Hello Done\"\r\n\"21\",\"2.659725\",\"192.168.1.7\",\"13.232.234.97\",\"TCP\",\"54\",\"53493  >  8883 [ACK] Seq=518 Ack=5353 Win=131072 Len=0\"\r\n\"22\",\"2.670075\",\"192.168.1.7\",\"13.232.234.97\",\"TLSv1.2\",\"1326\",\"Certificate, Client Key Exchange, Certificate Verify, Change Cipher Spec, Encrypted Handshake Message\"\r\n\"23\",\"2.718922\",\"13.232.234.97\",\"192.168.1.7\",\"TLSv1.2\",\"105\",\"Change Cipher Spec, Encrypted Handshake Message\"\r\n\"24\",\"2.720898\",\"192.168.1.7\",\"13.232.234.97\",\"TLSv1.2\",\"134\",\"Application Data\"\r\n\"25\",\"2.760424\",\"13.232.234.97\",\"192.168.1.7\",\"TCP\",\"54\",\"[TCP Previous segment not captured] 8883  >  53493 [FIN, ACK] Seq=5435 Ack=1870 Win=30720 Len=0\"\r\n\"26\",\"2.760595\",\"192.168.1.7\",\"13.232.234.97\",\"TCP\",\"54\",\"[TCP Dup ACK 24#1] 53493  >  8883 [ACK] Seq=1870 Ack=5404 Win=131072 Len=0\"\r\n\"27\",\"2.778850\",\"13.232.234.97\",\"192.168.1.7\",\"TCP\",\"85\",\"[TCP Out-Of-Order] 8883  >  53493 [PSH, ACK] Seq=5404 Ack=1870 Win=30720 Len=31\"\r\n\"28\",\"2.779049\",\"192.168.1.7\",\"13.232.234.97\",\"TCP\",\"54\",\"53493  >  8883 [ACK] Seq=1870 Ack=5436 Win=131072 Len=0\"\r\n\"29\",\"2.779403\",\"192.168.1.7\",\"13.232.234.97\",\"TCP\",\"54\",\"53493  >  8883 [FIN, ACK] Seq=1870 Ack=5436 Win=131072 Len=0\"\r\n\"30\",\"2.807988\",\"13.232.234.97\",\"192.168.1.7\",\"TCP\",\"54\",\"8883  >  53493 [ACK] Seq=5436 Ack=1871 Win=30720 Len=0\" \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/252", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/252/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/252/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/252", "id": 616224581, "node_id": "MDU6SXNzdWU2MTYyMjQ1ODE=", "number": 252, "title": "[help request] How to wrap publishAsync in a Future", "user": {"login": "aefn", "id": 28761393, "node_id": "MDQ6VXNlcjI4NzYxMzkz", "avatar_url": "https://avatars2.githubusercontent.com/u/28761393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aefn", "html_url": "https://github.com/aefn", "followers_url": "https://api.github.com/users/aefn/followers", "following_url": "https://api.github.com/users/aefn/following{/other_user}", "gists_url": "https://api.github.com/users/aefn/gists{/gist_id}", "starred_url": "https://api.github.com/users/aefn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aefn/subscriptions", "organizations_url": "https://api.github.com/users/aefn/orgs", "repos_url": "https://api.github.com/users/aefn/repos", "events_url": "https://api.github.com/users/aefn/events{/privacy}", "received_events_url": "https://api.github.com/users/aefn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": {"login": "bretambrose", "id": 341314, "node_id": "MDQ6VXNlcjM0MTMxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/341314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bretambrose", "html_url": "https://github.com/bretambrose", "followers_url": "https://api.github.com/users/bretambrose/followers", "following_url": "https://api.github.com/users/bretambrose/following{/other_user}", "gists_url": "https://api.github.com/users/bretambrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/bretambrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bretambrose/subscriptions", "organizations_url": "https://api.github.com/users/bretambrose/orgs", "repos_url": "https://api.github.com/users/bretambrose/repos", "events_url": "https://api.github.com/users/bretambrose/events{/privacy}", "received_events_url": "https://api.github.com/users/bretambrose/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bretambrose", "id": 341314, "node_id": "MDQ6VXNlcjM0MTMxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/341314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bretambrose", "html_url": "https://github.com/bretambrose", "followers_url": "https://api.github.com/users/bretambrose/followers", "following_url": "https://api.github.com/users/bretambrose/following{/other_user}", "gists_url": "https://api.github.com/users/bretambrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/bretambrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bretambrose/subscriptions", "organizations_url": "https://api.github.com/users/bretambrose/orgs", "repos_url": "https://api.github.com/users/bretambrose/repos", "events_url": "https://api.github.com/users/bretambrose/events{/privacy}", "received_events_url": "https://api.github.com/users/bretambrose/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2020-05-11T22:18:06Z", "updated_at": "2020-05-15T19:05:16Z", "closed_at": "2020-05-15T19:05:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear Experts,\r\nI have a scenario like this:\r\n1 . connect\r\n2 . publish 10 packet asynchronously\r\n3. disconnect\r\n\r\nthe signature of publishAsync is publishAsync(topic, payload, QoS, ackCallback=None) [link](https://s3.amazonaws.com/aws-iot-device-sdk-python-docs/html/index.html?highlight=async#AWSIoTPythonSDK.MQTTLib.AWSIoTMQTTClient.publishAsync)\r\n\r\nhow can I wrap this function to a async function?\r\nI want to have something like this:\r\n\r\n```\r\nasync def publish:\r\n    publishAsync(arg,cb)  # I don't know how should I wait for this, using await does not work\r\npass\r\n\r\n\r\ntasks = [publish for i in range(10)]\r\nconnect()\r\nloop.run(tasks) # run all in parallel and wait until get their pubAck\r\ndisconnect()\r\n```\r\n\r\nI appreciate in advance\r\nps : I know that maybe it can be implemented in SDK2 but I need to use SDK1\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/251", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/251/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/251/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/251", "id": 605647487, "node_id": "MDU6SXNzdWU2MDU2NDc0ODc=", "number": 251, "title": "Import Failed (python 2.7)", "user": {"login": "atyshka", "id": 19317207, "node_id": "MDQ6VXNlcjE5MzE3MjA3", "avatar_url": "https://avatars2.githubusercontent.com/u/19317207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atyshka", "html_url": "https://github.com/atyshka", "followers_url": "https://api.github.com/users/atyshka/followers", "following_url": "https://api.github.com/users/atyshka/following{/other_user}", "gists_url": "https://api.github.com/users/atyshka/gists{/gist_id}", "starred_url": "https://api.github.com/users/atyshka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atyshka/subscriptions", "organizations_url": "https://api.github.com/users/atyshka/orgs", "repos_url": "https://api.github.com/users/atyshka/repos", "events_url": "https://api.github.com/users/atyshka/events{/privacy}", "received_events_url": "https://api.github.com/users/atyshka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": {"login": "KaibaLopez", "id": 10042156, "node_id": "MDQ6VXNlcjEwMDQyMTU2", "avatar_url": "https://avatars1.githubusercontent.com/u/10042156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KaibaLopez", "html_url": "https://github.com/KaibaLopez", "followers_url": "https://api.github.com/users/KaibaLopez/followers", "following_url": "https://api.github.com/users/KaibaLopez/following{/other_user}", "gists_url": "https://api.github.com/users/KaibaLopez/gists{/gist_id}", "starred_url": "https://api.github.com/users/KaibaLopez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KaibaLopez/subscriptions", "organizations_url": "https://api.github.com/users/KaibaLopez/orgs", "repos_url": "https://api.github.com/users/KaibaLopez/repos", "events_url": "https://api.github.com/users/KaibaLopez/events{/privacy}", "received_events_url": "https://api.github.com/users/KaibaLopez/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "KaibaLopez", "id": 10042156, "node_id": "MDQ6VXNlcjEwMDQyMTU2", "avatar_url": "https://avatars1.githubusercontent.com/u/10042156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KaibaLopez", "html_url": "https://github.com/KaibaLopez", "followers_url": "https://api.github.com/users/KaibaLopez/followers", "following_url": "https://api.github.com/users/KaibaLopez/following{/other_user}", "gists_url": "https://api.github.com/users/KaibaLopez/gists{/gist_id}", "starred_url": "https://api.github.com/users/KaibaLopez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KaibaLopez/subscriptions", "organizations_url": "https://api.github.com/users/KaibaLopez/orgs", "repos_url": "https://api.github.com/users/KaibaLopez/repos", "events_url": "https://api.github.com/users/KaibaLopez/events{/privacy}", "received_events_url": "https://api.github.com/users/KaibaLopez/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-04-23T15:48:15Z", "updated_at": "2020-04-23T20:18:08Z", "closed_at": "2020-04-23T20:18:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just installed the sdk via pip, but I can only successfully import it in python3. Attempting to import in Python 2.7, however, yields the following error:\r\n\r\n`ImportError: No module named AWSIoTPythonSDK`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/250", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/250/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/250/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/250", "id": 605545187, "node_id": "MDU6SXNzdWU2MDU1NDUxODc=", "number": 250, "title": "How to use EC2 IAM credentials?", "user": {"login": "atyshka", "id": 19317207, "node_id": "MDQ6VXNlcjE5MzE3MjA3", "avatar_url": "https://avatars2.githubusercontent.com/u/19317207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atyshka", "html_url": "https://github.com/atyshka", "followers_url": "https://api.github.com/users/atyshka/followers", "following_url": "https://api.github.com/users/atyshka/following{/other_user}", "gists_url": "https://api.github.com/users/atyshka/gists{/gist_id}", "starred_url": "https://api.github.com/users/atyshka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atyshka/subscriptions", "organizations_url": "https://api.github.com/users/atyshka/orgs", "repos_url": "https://api.github.com/users/atyshka/repos", "events_url": "https://api.github.com/users/atyshka/events{/privacy}", "received_events_url": "https://api.github.com/users/atyshka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T13:42:53Z", "updated_at": "2020-04-23T13:54:41Z", "closed_at": "2020-04-23T13:53:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to use this SDK in an EC2 instance, but currently I have to upload a certificate or hard-code AWS secret keys for an IAM user. I know that I can attach temporary IAM permissions to an EC2 instance. If I do that, is there any way to tell this SDK to use the temporary credentials assigned to he instance?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/246", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/246/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/246/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/246", "id": 588736513, "node_id": "MDU6SXNzdWU1ODg3MzY1MTM=", "number": 246, "title": "Help understanding failed shadowUpdate and shadowGet requests", "user": {"login": "istranic", "id": 22874583, "node_id": "MDQ6VXNlcjIyODc0NTgz", "avatar_url": "https://avatars3.githubusercontent.com/u/22874583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/istranic", "html_url": "https://github.com/istranic", "followers_url": "https://api.github.com/users/istranic/followers", "following_url": "https://api.github.com/users/istranic/following{/other_user}", "gists_url": "https://api.github.com/users/istranic/gists{/gist_id}", "starred_url": "https://api.github.com/users/istranic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/istranic/subscriptions", "organizations_url": "https://api.github.com/users/istranic/orgs", "repos_url": "https://api.github.com/users/istranic/repos", "events_url": "https://api.github.com/users/istranic/events{/privacy}", "received_events_url": "https://api.github.com/users/istranic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}, {"id": 1306321351, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUx", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/response-requested", "name": "response-requested", "color": "666666", "default": false, "description": "Waiting on additional info and feedback. Will move to \"closing-soon\" in 7 days."}], "state": "closed", "locked": false, "assignee": {"login": "KaibaLopez", "id": 10042156, "node_id": "MDQ6VXNlcjEwMDQyMTU2", "avatar_url": "https://avatars1.githubusercontent.com/u/10042156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KaibaLopez", "html_url": "https://github.com/KaibaLopez", "followers_url": "https://api.github.com/users/KaibaLopez/followers", "following_url": "https://api.github.com/users/KaibaLopez/following{/other_user}", "gists_url": "https://api.github.com/users/KaibaLopez/gists{/gist_id}", "starred_url": "https://api.github.com/users/KaibaLopez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KaibaLopez/subscriptions", "organizations_url": "https://api.github.com/users/KaibaLopez/orgs", "repos_url": "https://api.github.com/users/KaibaLopez/repos", "events_url": "https://api.github.com/users/KaibaLopez/events{/privacy}", "received_events_url": "https://api.github.com/users/KaibaLopez/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "KaibaLopez", "id": 10042156, "node_id": "MDQ6VXNlcjEwMDQyMTU2", "avatar_url": "https://avatars1.githubusercontent.com/u/10042156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KaibaLopez", "html_url": "https://github.com/KaibaLopez", "followers_url": "https://api.github.com/users/KaibaLopez/followers", "following_url": "https://api.github.com/users/KaibaLopez/following{/other_user}", "gists_url": "https://api.github.com/users/KaibaLopez/gists{/gist_id}", "starred_url": "https://api.github.com/users/KaibaLopez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KaibaLopez/subscriptions", "organizations_url": "https://api.github.com/users/KaibaLopez/orgs", "repos_url": "https://api.github.com/users/KaibaLopez/repos", "events_url": "https://api.github.com/users/KaibaLopez/events{/privacy}", "received_events_url": "https://api.github.com/users/KaibaLopez/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-03-26T21:20:00Z", "updated_at": "2020-04-01T00:21:24Z", "closed_at": "2020-04-01T00:21:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running code where I make a variety of shadowUpdate and shadowGet requests from a python scrips on a raspberry Pi, and I don't want to have OfflinePublishQueueing. Therefore, I use try/except logic around each request such that if a request fails, I pause for a few seconds and try again until it works. \r\n\r\nApproximately 30-50% of the time, the requests fail and I get a \"Offline request queue has been disabled\" exception. It's very intermittent and random, and there appears to be no issue with my internet connection. Is this normal?\r\n\r\nI'm wondering if there's anything about my pipeline that makes it prone to these errors. I'm not sure where to look to diagnose this problem, so any & all guidance is highly appreciated. \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/245", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/245/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/245/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/245", "id": 578087703, "node_id": "MDU6SXNzdWU1NzgwODc3MDM=", "number": 245, "title": "Cannot see message in the AWS IoT test client", "user": {"login": "weiboVictor", "id": 13256105, "node_id": "MDQ6VXNlcjEzMjU2MTA1", "avatar_url": "https://avatars3.githubusercontent.com/u/13256105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiboVictor", "html_url": "https://github.com/weiboVictor", "followers_url": "https://api.github.com/users/weiboVictor/followers", "following_url": "https://api.github.com/users/weiboVictor/following{/other_user}", "gists_url": "https://api.github.com/users/weiboVictor/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiboVictor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiboVictor/subscriptions", "organizations_url": "https://api.github.com/users/weiboVictor/orgs", "repos_url": "https://api.github.com/users/weiboVictor/repos", "events_url": "https://api.github.com/users/weiboVictor/events{/privacy}", "received_events_url": "https://api.github.com/users/weiboVictor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-09T17:57:07Z", "updated_at": "2020-03-09T18:16:56Z", "closed_at": "2020-03-09T18:16:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\nI find a really strange behavior that my lambda code is working well, however I could not see any mqtt message published to the iot cloud via console (Test). \r\n\r\nI checked the local log for my lambda function, as you can see below, the IoTDataPlane confirms the payload. But when I go to Test console, nothing is shown up. \r\n\r\nWhat is more interesting, if I change in the lambda code to publish to the topic \"car1/sensors/ultrasonic\" then it works! But no other topics work, for example, I tested to publish to topics like \"car1/sensors\", \"car2/sensors\", \"car1/sensors/test\", etc.  I suppose at some point GG freeze the topic changes? as the topic \"car1/sensors/ultrasonic\" was the first topic I used to publish message, which worked at the right beginning.\r\n\r\n[2020-03-09T18:09:26.682+01:00][INFO]-ipc_client.py:167,Posting work for function [arn:aws:lambda:::function:GGRouter] to http://localhost:8000/2016-11-01/functions/arn:aws:lambda:::function:GGRouter\r\n[2020-03-09T18:09:26.69+01:00][INFO]-ipc_client.py:177,Work posted with invocation id [3bc343db-7dc9-4a88-6cde-f9f568b52c35]\r\n[2020-03-09T18:09:31.698+01:00][DEBUG]-IoTDataPlane.py:126,Publishing message on topic \"car1/sensors\" with Payload \"{\"ultrasonic_M\": 26, \"infrared_LMR\": 2, \"local_time\": \"2020/03/09 T17:00\"}\"\r\n[2020-03-09T18:09:31.698+01:00][DEBUG]-Lambda.py:96,Invoking Lambda function \"arn:aws:lambda:::function:GGRouter\" with Greengrass Message \"{\"ultrasonic_M\": 26, \"infrared_LMR\": 2, \"local_time\": \"2020/03/09 T17:00\"}\"\r\n[2020-03-09T18:09:31.698+01:00][INFO]-ipc_client.py:167,Posting work for function [arn:aws:lambda:::function:GGRouter] to http://localhost:8000/2016-11-01/functions/arn:aws:lambda:::function:GGRouter\r\n[2020-03-09T18:09:31.706+01:00][INFO]-ipc_client.py:177,Work posted with invocation id [0837678a-e72e-43f9-5aab-c3c2c655f038]\r\n[2020-03-09T18:09:36.716+01:00][INFO]-ipc_client.py:167,Posting work for function [arn:aws:lambda:::function:GGRouter] to http://localhost:8000/2016-11-01/functions/arn:aws:lambda:::function:GGRouter\r\n[2020-03-09T18:09:36.717+01:00][DEBUG]-IoTDataPlane.py:126,Publishing message on topic \"car1/sensors\" with Payload \"{\"ultrasonic_M\": 26, \"infrared_LMR\": 2, \"local_time\": \"2020/03/09 T17:00\"}\"\r\n[2020-03-09T18:09:36.717+01:00][DEBUG]-Lambda.py:96,Invoking Lambda function \"arn:aws:lambda:::function:GGRouter\" with Greengrass Message \"{\"ultrasonic_M\": 26, \"infrared_LMR\": 2, \"local_time\": \"2020/03/09 T17:00\"}\"\r\n[2020-03-09T18:09:36.721+01:00][INFO]-ipc_client.py:177,Work posted with invocation id [205ed2fa-6cb3-4dac-4e28-8200359d79c1]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/243", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/243/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/243/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/243", "id": 573997732, "node_id": "MDU6SXNzdWU1NzM5OTc3MzI=", "number": 243, "title": "Update IOT shadow from EC2 Instance", "user": {"login": "istranic", "id": 22874583, "node_id": "MDQ6VXNlcjIyODc0NTgz", "avatar_url": "https://avatars3.githubusercontent.com/u/22874583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/istranic", "html_url": "https://github.com/istranic", "followers_url": "https://api.github.com/users/istranic/followers", "following_url": "https://api.github.com/users/istranic/following{/other_user}", "gists_url": "https://api.github.com/users/istranic/gists{/gist_id}", "starred_url": "https://api.github.com/users/istranic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/istranic/subscriptions", "organizations_url": "https://api.github.com/users/istranic/orgs", "repos_url": "https://api.github.com/users/istranic/repos", "events_url": "https://api.github.com/users/istranic/events{/privacy}", "received_events_url": "https://api.github.com/users/istranic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321376, "node_id": "MDU6TGFiZWwxMzA2MzIxMzc2", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/feature-request", "name": "feature-request", "color": "008672", "default": false, "description": "A feature should be added or improved."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-02T14:06:01Z", "updated_at": "2020-03-19T21:04:28Z", "closed_at": "2020-03-19T21:04:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to update a device's IOT shadow state from an EC2 instance. My understanding is that I should be able to use IAM Roles attached to the EC2 instance for authentication with AWS IOT. However, I can't seem to figure out the function call for configuring credentials.\r\n\r\nI've tried using AWSIoTMQTTShadowClient.configureCredentials() or AWSIoTMQTTShadowClient.configureIAMCredentials() with no inputs, but that errors out. I've also tried to omit the .configureCredentials() function altogether, but I can't connect. \r\n\r\nI also tried supplying access keys locally on my machine via AWSIoTMQTTShadowClient.configureIAMCredentials('ACCESS_KEY_ID', 'SECRET_ACCESS_KEY'), but I get a connection timeout error. I'm using port 443 and useWebsocket is set to True.\r\n\r\nThe video below suggest that the EC2 instance should pull credentials based on it's attached IAM role automatically, but I'm not sure how to adapt my code to work in that way. \r\n\r\nI feel like I'm fundamentally missing something, so any advice is highly appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/242", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/242/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/242/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/242", "id": 559607876, "node_id": "MDU6SXNzdWU1NTk2MDc4NzY=", "number": 242, "title": "AWS IoT Greengrass Serial Read/Write Failed on Windows 10", "user": {"login": "asadali5", "id": 59956425, "node_id": "MDQ6VXNlcjU5OTU2NDI1", "avatar_url": "https://avatars3.githubusercontent.com/u/59956425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asadali5", "html_url": "https://github.com/asadali5", "followers_url": "https://api.github.com/users/asadali5/followers", "following_url": "https://api.github.com/users/asadali5/following{/other_user}", "gists_url": "https://api.github.com/users/asadali5/gists{/gist_id}", "starred_url": "https://api.github.com/users/asadali5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asadali5/subscriptions", "organizations_url": "https://api.github.com/users/asadali5/orgs", "repos_url": "https://api.github.com/users/asadali5/repos", "events_url": "https://api.github.com/users/asadali5/events{/privacy}", "received_events_url": "https://api.github.com/users/asadali5/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}, {"id": 1306321348, "node_id": "MDU6TGFiZWwxMzA2MzIxMzQ4", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/third-party", "name": "third-party", "color": "40C8B6", "default": false, "description": "This issue is related to third-party libraries or applications."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-04T09:59:10Z", "updated_at": "2020-02-24T22:24:56Z", "closed_at": "2020-02-24T22:24:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n[rsrclog(Windows10).txt](https://github.com/aws/aws-iot-device-sdk-python/files/4152596/rsrclog.Windows10.txt)\r\nI'm using aws iot greengrass on windows10 and trying to access local resources and trying to read/write data from serial. i'm following the official documentation of Aws on \"ACCESS LOCAL RESOURCES\". but i think the lraTest.py code was for ubunutu core not for windows because it include paths.I implemented the functional code instead of using aws management console and deployed the function successfully but after subscription publish to topic doesn't publish anything.\r\n\r\nKindly help me in accessing local resources and to read & write data on serial port on windows 10.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/240", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/240/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/240/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/240", "id": 552266881, "node_id": "MDU6SXNzdWU1NTIyNjY4ODE=", "number": 240, "title": "MQTT client occasionally does not recover from offline mode", "user": {"login": "tim-seoss", "id": 5011760, "node_id": "MDQ6VXNlcjUwMTE3NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5011760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tim-seoss", "html_url": "https://github.com/tim-seoss", "followers_url": "https://api.github.com/users/tim-seoss/followers", "following_url": "https://api.github.com/users/tim-seoss/following{/other_user}", "gists_url": "https://api.github.com/users/tim-seoss/gists{/gist_id}", "starred_url": "https://api.github.com/users/tim-seoss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tim-seoss/subscriptions", "organizations_url": "https://api.github.com/users/tim-seoss/orgs", "repos_url": "https://api.github.com/users/tim-seoss/repos", "events_url": "https://api.github.com/users/tim-seoss/events{/privacy}", "received_events_url": "https://api.github.com/users/tim-seoss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-20T12:20:55Z", "updated_at": "2020-02-24T22:21:50Z", "closed_at": "2020-02-24T22:21:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a machine running AWSIoTPythonSDK 1.4.7 which has an unreliable 4G mobile network connection (due to suspected accidental RF interference by a third party - we have not attempted to get this fixed by the third party because it provides a good real-world test case for us).  The machine principally publishes data.\r\n\r\nThe machine typically loses network connectivity for between 2 seconds and several minutes, approximately once every 15 minutes.  Approximately once every two weeks the AWSIoTPythonSDK mqtt publisher gets stuck in offline mode.  We have enabled debug logging, but the result does not seem very enlightening.\r\n\r\nPossibly more useful is that although `tcpdump` shows no DNS or MQTT traffic, `netstat` or `lsof` shows an `ESTABLISHED` tcp connection still present (9 days later):\r\n\r\n```\r\nCOMMAND     PID          USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME\r\npython3    1164           scs    6u  IPv4  1445272      0t0  TCP 10.144.231.124:38913->54.202.199.136:8883 (ESTABLISHED)\r\n```\r\n... however that IP address shown `10.144.231.124` is no longer present on the local machine - when the network connection came back, a different local IP address was configured.  This actually happens on nearly every reconnect, but I assume that in this case there's a race condition, whereby the loss and/or recovery happens at a time in the normal traffic flow such that a new state occurs during which condition no traffic can be sent/received, but nevertheless the underlying TCP connection remains `ESTABLISHED`.\r\n\r\nThe machine is running Debian 9.0 on armhf with the 4.19.72 kernel.  Python 3.5.3.  Please let me know if you'd like any more information etc.\r\n\r\nI've included a log excerpt below.  Note the occurrence of the `10.144.231.124` in the logs during the time that AWSIoTPythonSDK fails to detect the re-established connectivity.\r\n\r\n```\r\nJan 11 13:38:02,505 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:02,512 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:02,888 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:38:02,893 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:38:02,897 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:38:02,901 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:38:05,348 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:05,355 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:05,608 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:38:05,614 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:38:05,621 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:38:05,629 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:38:12,071 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:12,078 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:12,448 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:38:12,456 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:38:12,460 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:38:12,465 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:38:14,896 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:14,903 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:15,209 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:38:15,215 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:38:15,223 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:38:15,227 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:38:19,678 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:19,686 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:19,968 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:38:19,974 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:38:19,978 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:38:19,982 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:38:22,415 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:22,422 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:22,728 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:38:22,734 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:38:22,738 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:38:22,742 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:38:25,187 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:25,194 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:25,490 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:38:25,495 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:38:25,499 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:38:25,504 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:38:25,952 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:25,961 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:26,409 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:38:26,415 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:38:26,419 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:38:26,423 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:38:31 arm ModemManager[377]: <info>  bearer call end reason (1): 'generic-unspecified'\r\nJan 11 13:38:32 arm ModemManager[377]: <info>      Address: 10.146.48.122/30\r\nJan 11 13:38:32,935 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:32,948 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:37,950 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:38:37,954 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:38:38,391 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:38,397 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:43,402 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:38:43,407 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:38:43,834 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:43,840 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:48 arm ModemManager[377]: <info>  bearer call end reason (1): 'generic-unspecified'\r\nJan 11 13:38:48,846 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:38:48,848 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:38:49,298 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:49,329 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:49 arm ModemManager[377]: <info>      Address: 10.146.165.28/29\r\nJan 11 13:38:54,331 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:38:54,335 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:38:54,768 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:38:54,775 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:38:59,779 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:38:59,785 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:39:00,211 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:00,218 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:05,222 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:39:05,228 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:39:05,672 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:05,679 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:10,683 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:39:10,689 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:39:11,120 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:11,126 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:14 arm ModemManager[377]: <info>  bearer call end reason (1): 'generic-unspecified'\r\nJan 11 13:39:15 arm ModemManager[377]: <info>      Address: 10.147.56.35/29\r\nJan 11 13:39:16,133 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:39:16,145 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:39:16,579 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:16,586 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:21,590 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:39:21,595 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:39:22,022 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:22,029 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:27,033 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:39:27,038 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:39:27,041 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\nJan 11 13:39:27,051 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\nJan 11 13:39:27,055 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [disconnect] event\r\nJan 11 13:39:27,061 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:39:27,065 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [disconnect] event\r\nJan 11 13:39:27,057 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 1 sec.\r\nJan 11 13:39:27,070 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:39:27,475 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:27,479 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:39:27,483 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6544f10>\r\nJan 11 13:39:27,913 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:27,917 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:39:27,922 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6417f10>\r\nJan 11 13:39:28,352 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:28,356 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:39:28,360 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb64177d0>\r\nJan 11 13:39:28,790 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:28,795 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:39:28,799 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6417070>\r\nJan 11 13:39:29,152 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [connack] event\r\nJan 11 13:39:29,156 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [connack] event\r\nJan 11 13:39:29,162 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Has recovery job\r\nJan 11 13:39:29,177 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Start resubscribing\r\nJan 11 13:39:29,183 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Start draining\r\nJan 11 13:39:29,181 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:39:29,194 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Processed offline publish request\r\nJan 11 13:39:29,392 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,396 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,402 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,407 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,413 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,418 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,424 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,428 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,437 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,439 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,447 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,449 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,457 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,459 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,468 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,469 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,478 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,479 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,488 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,489 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,498 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [suback] event\r\nJan 11 13:39:29,499 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [suback] event\r\nJan 11 13:39:29,529 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,530 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:29,702 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Processed offline publish request\r\nJan 11 13:39:29,952 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:29,961 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:30,209 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Processed offline publish request\r\nJan 11 13:39:30,432 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:30,437 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:30,716 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Processed offline publish request\r\nJan 11 13:39:30,952 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:30,957 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:33,247 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:33,261 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:33,512 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:33,517 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:33,525 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:39:33,532 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:39:33,965 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:33,972 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:34,192 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:34,197 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:34,201 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:39:34,206 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:39:42,677 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:42,689 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:43,015 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:43,020 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:43,024 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:39:43,029 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:39:45,461 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:45,475 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:45,775 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:45,780 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:45,784 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:39:45,789 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:39:49,173 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - stableConnection: Resetting the backoff time to: 1 sec.\r\nJan 11 13:39:52,229 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:52,247 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:52,455 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:52,460 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:52,464 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:39:52,469 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:39:54,904 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:39:54,911 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:39:55,135 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:39:55,140 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:39:55,144 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:39:55,149 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:01,590 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:01,597 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:01,814 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:01,819 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:01,823 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:01,828 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:04,275 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:04,282 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:04,535 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:04,541 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:04,545 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:04,550 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:12,995 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:13,002 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:13,233 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:13,245 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:13,249 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:13,255 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:13,685 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:13,691 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:13,903 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:13,909 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:13,913 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:13,917 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:18,352 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:18,359 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:18,584 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:18,589 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:18,593 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:18,598 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:23,035 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:23,042 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:23,273 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:23,279 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:23,283 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:23,287 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:23,717 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:23,724 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:23,954 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:23,958 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:23,963 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:23,968 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:26,400 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:26,407 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:26,611 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:26,616 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:26,623 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:26,628 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:33,076 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:33,083 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:33,661 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:33,666 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:33,670 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:33,674 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:34,104 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:34,111 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:34,340 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\nJan 11 13:40:34,345 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\nJan 11 13:40:34,350 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:40:34,354 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\nJan 11 13:40:39 arm ModemManager[377]: <info>  bearer call end reason (1): 'generic-unspecified'\r\nJan 11 13:40:40 arm ModemManager[377]: <info>      Address: 10.144.231.124/29\r\nJan 11 13:40:42,794 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:42,801 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:47,805 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:40:47,813 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:40:48,259 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:48,269 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:53,274 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:40:53,278 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:40:53,704 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:53,710 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:40:58,715 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:40:58,720 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:40:59,149 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:40:59,156 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:41:04,161 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:41:04,166 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:41:04,599 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:04,607 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:41:09,611 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:41:09,616 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:41:10,046 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:10,053 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:41:15,058 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:41:15,064 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:41:15,492 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:15,507 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:41:20,517 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:41:20,521 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:41:20,952 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:20,959 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:41:25,963 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:41:25,968 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:41:26,399 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:26,406 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:41:31,411 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:41:31,415 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:41:31,843 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:31,850 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\nJan 11 13:41:34,855 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\nJan 11 13:41:34,862 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\nJan 11 13:41:34,864 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [disconnect] event\r\nJan 11 13:41:34,872 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:41:34,877 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [disconnect] event\r\nJan 11 13:41:34,868 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 1 sec.\r\nJan 11 13:41:34,881 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nJan 11 13:41:36,855 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Removing custom event callback...\r\nJan 11 13:41:36,860 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Publish timed out\r\nJan 11 13:41:37,294 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:37,299 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:41:37,303 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6417b50>\r\nJan 11 13:41:37,733 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:37,737 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:41:37,742 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6417e30>\r\nJan 11 13:41:38,171 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:38,176 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:41:38,180 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6417030>\r\nJan 11 13:41:38,609 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:38,614 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:41:38,618 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb64179f0>\r\nJan 11 13:41:38 arm ModemManager[377]: <info>  bearer call end reason (1): 'generic-unspecified'\r\nJan 11 13:41:39 arm ModemManager[377]: <info>      Address: 10.146.75.117/30\r\nJan 11 13:41:43,061 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:43,066 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:41:43,070 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6417b90>\r\nJan 11 13:41:45,510 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:45,514 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:41:45,525 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6417bb0>\r\nJan 11 13:41:51,981 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:51,988 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:41:51,993 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6417970>\r\nJan 11 13:41:54,431 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\nJan 11 13:41:54,435 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\nJan 11 13:41:54,439 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb6417cb0>\r\nJan 11 13:41:55 arm ModemManager[377]: <info>  bearer call end reason (1): 'generic-unspecified'\r\nJan 11 13:41:56 arm ModemManager[377]: <info>      Address: 10.146.171.84/29\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/237", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/237/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/237/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/237", "id": 551038389, "node_id": "MDU6SXNzdWU1NTEwMzgzODk=", "number": 237, "title": "On Shadow Update callback, identifying the thing that got updated", "user": {"login": "erikkanderson", "id": 37513024, "node_id": "MDQ6VXNlcjM3NTEzMDI0", "avatar_url": "https://avatars0.githubusercontent.com/u/37513024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkanderson", "html_url": "https://github.com/erikkanderson", "followers_url": "https://api.github.com/users/erikkanderson/followers", "following_url": "https://api.github.com/users/erikkanderson/following{/other_user}", "gists_url": "https://api.github.com/users/erikkanderson/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkanderson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkanderson/subscriptions", "organizations_url": "https://api.github.com/users/erikkanderson/orgs", "repos_url": "https://api.github.com/users/erikkanderson/repos", "events_url": "https://api.github.com/users/erikkanderson/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkanderson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}, {"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-16T20:32:23Z", "updated_at": "2020-02-24T22:19:12Z", "closed_at": "2020-02-24T22:19:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a question in regards to having multiple device shadow handlers, each listening to a different thing's shadow. After the device shadow hander is created, I'd like to register the same function for the delta callback (calling .shadowRegisterDeltaCallback). However, when the function that is handling the callback gets called, there is seemingly no way to identify which thing got updated. \r\n\r\nMy current method of addressing this problem is to subscribe to the \"$aws/things/thing-name/shadow/update/accepted\" topic. In the callback function I can use client.topic to learn the thing-name that got updated. However, this method seems a bit ineloquent, and would rather use the device shadow handler. \r\n\r\nThus my question, Is there a recommended way to use device shadow handlers, and in the callback functions, learn the thing that got updated?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/235", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/235/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/235/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/235", "id": 543260038, "node_id": "MDU6SXNzdWU1NDMyNjAwMzg=", "number": 235, "title": "Keep alive error", "user": {"login": "kilabyte", "id": 487948, "node_id": "MDQ6VXNlcjQ4Nzk0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/487948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kilabyte", "html_url": "https://github.com/kilabyte", "followers_url": "https://api.github.com/users/kilabyte/followers", "following_url": "https://api.github.com/users/kilabyte/following{/other_user}", "gists_url": "https://api.github.com/users/kilabyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/kilabyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kilabyte/subscriptions", "organizations_url": "https://api.github.com/users/kilabyte/orgs", "repos_url": "https://api.github.com/users/kilabyte/repos", "events_url": "https://api.github.com/users/kilabyte/events{/privacy}", "received_events_url": "https://api.github.com/users/kilabyte/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-28T17:44:03Z", "updated_at": "2020-01-01T01:33:48Z", "closed_at": "2020-01-01T01:33:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Im getting the error \"mqtt: SERVER: The connection was closed because MQTT keep-alive check failed.\" Now looking at the mqtt docs and paho i should be able to pass a keep alive arg to the connect function but doing that causes a crash to say it is not a valid argument. Ive also found that this error could be from the payload size being too big? The Node sdk has an property to change the max payload size as well as the keep alive time, does the python have this as well? Any ideas on this error. Using just the default example file but with my filled in server and project settings.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/234", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/234/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/234/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/234", "id": 542035892, "node_id": "MDU6SXNzdWU1NDIwMzU4OTI=", "number": 234, "title": "basicdiscovery.py sample is not working", "user": {"login": "jay11ca39", "id": 11001202, "node_id": "MDQ6VXNlcjExMDAxMjAy", "avatar_url": "https://avatars0.githubusercontent.com/u/11001202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jay11ca39", "html_url": "https://github.com/jay11ca39", "followers_url": "https://api.github.com/users/jay11ca39/followers", "following_url": "https://api.github.com/users/jay11ca39/following{/other_user}", "gists_url": "https://api.github.com/users/jay11ca39/gists{/gist_id}", "starred_url": "https://api.github.com/users/jay11ca39/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jay11ca39/subscriptions", "organizations_url": "https://api.github.com/users/jay11ca39/orgs", "repos_url": "https://api.github.com/users/jay11ca39/repos", "events_url": "https://api.github.com/users/jay11ca39/events{/privacy}", "received_events_url": "https://api.github.com/users/jay11ca39/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-24T08:02:43Z", "updated_at": "2020-06-02T13:06:06Z", "closed_at": "2020-01-07T18:31:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am following docs given at: \r\n*https://docs.aws.amazon.com/greengrass/latest/developerguide/module4.html*\r\n\r\nFollowing I have tried: \r\n1. Created a group \r\n2. Created a core \r\n3. Created 2 devices as per the above docs\r\n4. Created subscription\r\n5. Run the greengrass core on my linux machine. Just modified the config.json to use 443 port for MQTT and HTTP\r\n6. Deployed the group to core device. till now it is successful. \r\n\r\n7.  On another linux machine downloaded all certificates and trying to run the basicdiscovery.py as per the guide. \r\n\r\n*But getting following error while doing discovery:* \r\n\r\n2019-12-24 13:22:35,232 - AWSIoTPythonSDK.core.greengrass.discovery.providers - INFO - Starting discover request...\r\n2019-12-24 13:22:35,232 - AWSIoTPythonSDK.core.greengrass.discovery.providers - INFO - Endpoint: xyz-ats.iot.us-east-1.amazonaws.com:443\r\n2019-12-24 13:22:35,232 - AWSIoTPythonSDK.core.greengrass.discovery.providers - INFO - Target thing: pub\r\n2019-12-24 13:22:35,232 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Creating tcp connection...\r\n2019-12-24 13:22:35,275 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Creating ssl connection...\r\n2019-12-24 13:22:36,090 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Matching host name...\r\n2019-12-24 13:22:36,090 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Sending discover request: GET /greengrass/discover/thing/pub HTTP/1.1\r\nHost: xyz-ats.iot.us-east-1.amazonaws.com:443\r\n2019-12-24 13:22:36,091 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Receiving discover response header...\r\n2019-12-24 13:22:36,540 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Receiving discover response body...\r\n\r\nError in discovery!\r\n\r\nType: <class 'AWSIoTPythonSDK.exception.AWSIoTExceptions.DiscoveryDataNotFoundException'>\r\n\r\nError message: No discovery data found\r\n\r\n\r\n9/10 retries left\r\nBacking off...\r\n2019-12-24 13:22:36,541 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 1 sec.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/233", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/233/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/233/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/233", "id": 541124178, "node_id": "MDU6SXNzdWU1NDExMjQxNzg=", "number": 233, "title": "Unable to subscribe/publish to multiple topics in basicPubSub.py", "user": {"login": "josh-oakes", "id": 16396315, "node_id": "MDQ6VXNlcjE2Mzk2MzE1", "avatar_url": "https://avatars3.githubusercontent.com/u/16396315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh-oakes", "html_url": "https://github.com/josh-oakes", "followers_url": "https://api.github.com/users/josh-oakes/followers", "following_url": "https://api.github.com/users/josh-oakes/following{/other_user}", "gists_url": "https://api.github.com/users/josh-oakes/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh-oakes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh-oakes/subscriptions", "organizations_url": "https://api.github.com/users/josh-oakes/orgs", "repos_url": "https://api.github.com/users/josh-oakes/repos", "events_url": "https://api.github.com/users/josh-oakes/events{/privacy}", "received_events_url": "https://api.github.com/users/josh-oakes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-20T17:58:05Z", "updated_at": "2019-12-20T19:29:53Z", "closed_at": "2019-12-20T19:29:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI started playing around with the basicPubSub sample and out of the box everything works as designed. I can see the publish message in AWS IoT and the subscribe callback is printing its messages.\r\n\r\nIf I try to do a second publish right after the first, according to the logs, this produces a disconnected event and the app stops working altogether\r\n\r\n> 2019-12-20 12:42:31,788 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\n> 2019-12-20 12:42:31,788 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\n> 2019-12-20 12:42:31,862 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\n> 2019-12-20 12:42:31,862 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\n> 2019-12-20 12:42:31,862 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n> 2019-12-20 12:42:31,862 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\n> 2019-12-20 12:42:31,880 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [message] event\r\n> 2019-12-20 12:42:31,880 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [message] event\r\n> 2019-12-20 12:42:31,880 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n> 2019-12-20 12:42:33,863 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\n> 2019-12-20 12:42:33,863 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\n> 2019-12-20 12:42:33,915 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\n> 2019-12-20 12:42:33,915 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 1 sec.\r\n> 2019-12-20 12:42:33,915 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [disconnect] event\r\n> 2019-12-20 12:42:33,915 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n> 2019-12-20 12:42:35,129 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [connack] event\r\n> 2019-12-20 12:42:35,129 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [connack] event\r\n> 2019-12-20 12:42:35,130 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Has recovery job\r\n> 2019-12-20 12:42:35,130 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Start resubscribing\r\n> 2019-12-20 12:42:35,131 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom suback event callback...\r\n> 2019-12-20 12:42:35,131 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n> 2019-12-20 12:42:35,170 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\n\r\nSimply adding the following line right after the first publish message is enough to replicate the issue\r\n\r\n`myAWSIoTMQTTClient.publish('sdk/test/myTest', messageJson, 1)`\r\n\r\nI'm seeing a similar error if trying to subscribe to a second topic, and i get an error that the subscription times out.\r\n\r\nIs there any kind of extra configuration needed to pub/sub to multiple topics?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/232", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/232/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/232/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/232", "id": 539364756, "node_id": "MDU6SXNzdWU1MzkzNjQ3NTY=", "number": 232, "title": "No topic specified, or incorrect topic type", "user": {"login": "nitrogear", "id": 7040918, "node_id": "MDQ6VXNlcjcwNDA5MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7040918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nitrogear", "html_url": "https://github.com/nitrogear", "followers_url": "https://api.github.com/users/nitrogear/followers", "following_url": "https://api.github.com/users/nitrogear/following{/other_user}", "gists_url": "https://api.github.com/users/nitrogear/gists{/gist_id}", "starred_url": "https://api.github.com/users/nitrogear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nitrogear/subscriptions", "organizations_url": "https://api.github.com/users/nitrogear/orgs", "repos_url": "https://api.github.com/users/nitrogear/repos", "events_url": "https://api.github.com/users/nitrogear/events{/privacy}", "received_events_url": "https://api.github.com/users/nitrogear/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-17T23:24:22Z", "updated_at": "2019-12-18T12:26:56Z", "closed_at": "2019-12-18T12:26:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying test jobsSample.py to register a thing in IoT. When I execute:\r\n\r\n`python aws-iot-device-sdk-python/samples/jobs/jobsSample.py -e xxx.iot.us-east-1.amazonaws.com -r root-CA.crt -c python-jobs-client-01.cert.pem -k python-jobs-client-01.private.key -id python`\r\n\r\nI get an error:\r\n\r\n```\r\nConnecting to MQTT server and setting up callbacks...\r\n2019-12-17 23:19:54,915 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2019-12-17 23:19:54,916 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2019-12-17 23:19:54,916 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2019-12-17 23:19:54,917 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\n2019-12-17 23:19:54,917 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\n2019-12-17 23:19:54,917 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n2019-12-17 23:19:55,360 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Starting network I/O thread...\r\n2019-12-17 23:19:55,542 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [connack] event\r\n2019-12-17 23:19:55,544 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [connack] event\r\n2019-12-17 23:19:55,544 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - No need for recovery\r\n2019-12-17 23:19:55,544 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2019-12-17 23:19:55,578 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync subscribe...\r\n2019-12-17 23:19:55,579 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Adding a new subscription record: None qos: 1\r\nTraceback (most recent call last):\r\n  File \"aws-iot-device-sdk-python/samples/jobs/jobsSample.py\", line 169, in <module>\r\n    jobsMsgProc = JobsMessageProcessor(jobsClient, clientId)\r\n  File \"aws-iot-device-sdk-python/samples/jobs/jobsSample.py\", line 40, in __init__\r\n    self._setupCallbacks(self.awsIoTMQTTThingJobsClient)\r\n  File \"aws-iot-device-sdk-python/samples/jobs/jobsSample.py\", line 43, in _setupCallbacks\r\n    self.awsIoTMQTTThingJobsClient.createJobSubscription(self.newJobReceived, jobExecutionTopicType.JOB_NOTIFY_NEXT_TOPIC)\r\n  File \"/usr/local/lib/python2.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 1589, in createJobSubscription\r\n    return self._AWSIoTMQTTClient.subscribe(topic, self._QoS, callback)\r\n  File \"/usr/local/lib/python2.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 696, in subscribe\r\n    return self._mqtt_core.subscribe(topic, QoS, callback)\r\n  File \"/usr/local/lib/python2.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 302, in subscribe\r\n    rc, mid = self._subscribe_async(topic, qos, self._create_blocking_ack_callback(event), message_callback)\r\n  File \"/usr/local/lib/python2.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 321, in _subscribe_async\r\n    rc, mid = self._internal_async_client.subscribe(topic, qos, ack_callback)\r\n  File \"/usr/local/lib/python2.7/site-packages/AWSIoTPythonSDK/core/protocol/internal/clients.py\", line 186, in subscribe\r\n    rc, mid = self._paho_client.subscribe(topic, qos)\r\n  File \"/usr/local/lib/python2.7/site-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 1107, in subscribe\r\n    raise ValueError(\"No topic specified, or incorrect topic type.\")\r\nValueError: No topic specified, or incorrect topic type.\r\n```\r\n\r\nIs it because of missing policies or why?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/231", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/231/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/231/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/231", "id": 528985235, "node_id": "MDU6SXNzdWU1Mjg5ODUyMzU=", "number": 231, "title": "Unable to connect, socket.gaierror: [Errno -2] Name or service not known", "user": {"login": "j-cripps", "id": 20326864, "node_id": "MDQ6VXNlcjIwMzI2ODY0", "avatar_url": "https://avatars3.githubusercontent.com/u/20326864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j-cripps", "html_url": "https://github.com/j-cripps", "followers_url": "https://api.github.com/users/j-cripps/followers", "following_url": "https://api.github.com/users/j-cripps/following{/other_user}", "gists_url": "https://api.github.com/users/j-cripps/gists{/gist_id}", "starred_url": "https://api.github.com/users/j-cripps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j-cripps/subscriptions", "organizations_url": "https://api.github.com/users/j-cripps/orgs", "repos_url": "https://api.github.com/users/j-cripps/repos", "events_url": "https://api.github.com/users/j-cripps/events{/privacy}", "received_events_url": "https://api.github.com/users/j-cripps/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-26T21:36:38Z", "updated_at": "2020-01-08T00:59:31Z", "closed_at": "2020-01-08T00:59:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nTrying to run the pubSub example code but I cannot connect, debug log plus exception listed below. Running on fresh install Debian on raspberry pi.\r\n\r\n```\r\n2019-11-26 21:27:30,926 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Initializing MQTT layer...\r\n2019-11-26 21:27:30,930 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Registering internal event callbacks to MQTT layer...\r\n2019-11-26 21:27:30,931 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2019-11-26 21:27:30,931 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: RasPiTempMonitor\r\n2019-11-26 21:27:30,932 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2019-11-26 21:27:30,932 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2019-11-26 21:27:30,933 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2019-11-26 21:27:30,933 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\n2019-11-26 21:27:30,934 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring reconnect back off timing...\r\n2019-11-26 21:27:30,935 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Base quiet time: 1.000000 sec\r\n2019-11-26 21:27:30,936 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Max quiet time: 32.000000 sec\r\n2019-11-26 21:27:30,936 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Stable connection time: 20.000000 sec\r\n2019-11-26 21:27:30,937 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queueing: max queue size: -1\r\n2019-11-26 21:27:30,938 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queue draining interval: 0.500000 sec\r\n2019-11-26 21:27:30,938 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\n2019-11-26 21:27:30,939 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 5.000000 sec\r\n2019-11-26 21:27:30,939 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2019-11-26 21:27:30,940 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2019-11-26 21:27:30,940 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2019-11-26 21:27:30,942 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\n2019-11-26 21:27:30,943 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\n2019-11-26 21:27:30,944 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n2019-11-26 21:27:30,948 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Cleaning up before stopping event consuming\r\n2019-11-26 21:27:30,949 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event queue cleared\r\n2019-11-26 21:27:30,949 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Stopping network I/O thread...\r\n2019-11-26 21:27:30,950 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Network thread stopped\r\n2019-11-26 21:27:30,950 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event callbacks cleared\r\n2019-11-26 21:27:30,951 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread stopped\r\n2019-11-26 21:27:30,951 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Waiting for event consumer to completely stop\r\n2019-11-26 21:27:30,952 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Exiting dispatching loop...\r\n2019-11-26 21:27:30,953 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Event consumer stopped\r\nTraceback (most recent call last):\r\n  File \"awsTemp.py\", line 64, in <module>\r\n    myAWSIoTMQTTClient.connect()\r\n  File \"/home/pi/AWSIoTPythonSDK/MQTTLib.py\", line 513, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/home/pi/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 196, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/home/pi/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 223, in connect_async\r\n    raise e\r\nsocket.gaierror: [Errno -2] Name or service not known\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/230", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/230/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/230/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/230", "id": 527908411, "node_id": "MDU6SXNzdWU1Mjc5MDg0MTE=", "number": 230, "title": "Unable to update json parameters in device shadow", "user": {"login": "MridulAhluwalia", "id": 31508968, "node_id": "MDQ6VXNlcjMxNTA4OTY4", "avatar_url": "https://avatars2.githubusercontent.com/u/31508968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MridulAhluwalia", "html_url": "https://github.com/MridulAhluwalia", "followers_url": "https://api.github.com/users/MridulAhluwalia/followers", "following_url": "https://api.github.com/users/MridulAhluwalia/following{/other_user}", "gists_url": "https://api.github.com/users/MridulAhluwalia/gists{/gist_id}", "starred_url": "https://api.github.com/users/MridulAhluwalia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MridulAhluwalia/subscriptions", "organizations_url": "https://api.github.com/users/MridulAhluwalia/orgs", "repos_url": "https://api.github.com/users/MridulAhluwalia/repos", "events_url": "https://api.github.com/users/MridulAhluwalia/events{/privacy}", "received_events_url": "https://api.github.com/users/MridulAhluwalia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-25T07:44:27Z", "updated_at": "2019-12-03T19:03:23Z", "closed_at": "2019-12-03T06:59:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have tried updating the refillSkus parameter in below shadow json. I am able to add additional SKUs like SKU3 adn SKU4 but I am not able to remove the ones which already exist. I have tried to remove them manually from the shadow and I am still not able to.\r\n\r\nPlease let me know if you need further details to debug or better understand the issue at hand.\r\n\r\n{\r\n  \"desired\": {\r\n    \"refillSkus\": {\r\n      \"SKU1\": {\r\n        \"skuId\": \"1\",\r\n        \"status\": \"A\"\r\n      },\r\n      \"SKU2\": {\r\n        \"skuId\": \"2\",\r\n        \"status\": \"A\"\r\n      }\r\n    }\r\n}\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/228", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/228/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/228/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/228", "id": 514861868, "node_id": "MDU6SXNzdWU1MTQ4NjE4Njg=", "number": 228, "title": "ShadowClient onOnline event fires before shadow updates can be processed", "user": {"login": "stcleezy", "id": 2244094, "node_id": "MDQ6VXNlcjIyNDQwOTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2244094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stcleezy", "html_url": "https://github.com/stcleezy", "followers_url": "https://api.github.com/users/stcleezy/followers", "following_url": "https://api.github.com/users/stcleezy/following{/other_user}", "gists_url": "https://api.github.com/users/stcleezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/stcleezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stcleezy/subscriptions", "organizations_url": "https://api.github.com/users/stcleezy/orgs", "repos_url": "https://api.github.com/users/stcleezy/repos", "events_url": "https://api.github.com/users/stcleezy/events{/privacy}", "received_events_url": "https://api.github.com/users/stcleezy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-30T17:44:09Z", "updated_at": "2020-05-18T00:06:02Z", "closed_at": "2020-05-18T00:06:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running a simple test program where my shadow client's onOnline callback simply sets the reported online state to true:\r\n```\r\ndef onOnline(self):\r\n        self.logger.info('Online')        \r\n        self.shadowUpdate(json.dumps({\"state\": {\"reported\": {\"online\": true}, \"desired\": {}}}))\r\n```\r\n\r\nThis works about 90% of the time, but I sporadically receive \"**Offline request detected!**\"\r\n\r\n```\r\n2019-10-30 10:36:32,059 - machine.test - INFO - Offline\r\n2019-10-30 10:37:35,466 - machine.test - INFO - Online\r\n2019-10-30 10:37:35,466 - machine.test - INFO - Shadow update request: {\"state\": {\"reported\": {\"online\": true}, \"desired\": {}}}\r\n2019-10-30 10:37:35,467 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\r\n2019-10-30 10:37:35,467 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\n```\r\n\r\nI can hack around this w/ delays, but I would assume the onOnline event to be 100% indicative that the shadow client is ready.\r\n\r\nCurrently using v1.4.7 of AWSIoTPythonSDK, reproducible on multiple devices & environments.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/227", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/227/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/227/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/227", "id": 510789827, "node_id": "MDU6SXNzdWU1MTA3ODk4Mjc=", "number": 227, "title": "Unstable subscription receive rate in compare to MQTTFx", "user": {"login": "nolex90", "id": 4943988, "node_id": "MDQ6VXNlcjQ5NDM5ODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/4943988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nolex90", "html_url": "https://github.com/nolex90", "followers_url": "https://api.github.com/users/nolex90/followers", "following_url": "https://api.github.com/users/nolex90/following{/other_user}", "gists_url": "https://api.github.com/users/nolex90/gists{/gist_id}", "starred_url": "https://api.github.com/users/nolex90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nolex90/subscriptions", "organizations_url": "https://api.github.com/users/nolex90/orgs", "repos_url": "https://api.github.com/users/nolex90/repos", "events_url": "https://api.github.com/users/nolex90/events{/privacy}", "received_events_url": "https://api.github.com/users/nolex90/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-22T17:07:06Z", "updated_at": "2020-05-18T00:06:01Z", "closed_at": "2020-05-18T00:06:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi developers.\r\n\r\nI am investigating a such interesting problem:\r\nI'd like to make functional tests for my existing service. My test script subscribes a topic and listens incoming packages from the service (Service also use this library).\r\nI experience that the test subscription receive rate about 20%, however, MqttFx client receives all kind of messages from the service. This GUI subscribes the same topic with same QoS 1. \r\nWhy?\r\nBoth the service and test run on my machine. My network connection is good (as I experience in MqttFx-> it receives almost all packets)\r\n\r\nAttached policy for cert (I use this cert for the testing only):\r\n```\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\r\n        \"iot:Publish\",\r\n        \"iot:Subscribe\",\r\n        \"iot:Connect\",\r\n        \"iot:Receive\"\r\n      ],\r\n      \"Resource\": [\r\n        \"*\"\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/226", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/226/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/226/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/226", "id": 507723536, "node_id": "MDU6SXNzdWU1MDc3MjM1MzY=", "number": 226, "title": "Callback in publishAsync not triggered for messages drained after a disconnection", "user": {"login": "Ettore-P", "id": 56628887, "node_id": "MDQ6VXNlcjU2NjI4ODg3", "avatar_url": "https://avatars1.githubusercontent.com/u/56628887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ettore-P", "html_url": "https://github.com/Ettore-P", "followers_url": "https://api.github.com/users/Ettore-P/followers", "following_url": "https://api.github.com/users/Ettore-P/following{/other_user}", "gists_url": "https://api.github.com/users/Ettore-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ettore-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ettore-P/subscriptions", "organizations_url": "https://api.github.com/users/Ettore-P/orgs", "repos_url": "https://api.github.com/users/Ettore-P/repos", "events_url": "https://api.github.com/users/Ettore-P/events{/privacy}", "received_events_url": "https://api.github.com/users/Ettore-P/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321376, "node_id": "MDU6TGFiZWwxMzA2MzIxMzc2", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/feature-request", "name": "feature-request", "color": "008672", "default": false, "description": "A feature should be added or improved."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-16T09:18:22Z", "updated_at": "2020-08-12T21:44:25Z", "closed_at": "2020-08-12T21:44:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that when the connection is lost, if i perform a publishAsync the messages are correctly queued, and when the connection is re-established the messages are drained, but during the draining process the callback is not called. It looks like the draining process is performed with sync publish. It doesn't look like a bug in the code, is this the expected behaviour or it's an oversight?\r\nIf it's the expected behaviour i think would be better to point it out in the documentation because can lead to unexpected errors in an implementation that expects that the callback would be called after every message is correctly sent (even after a disconnection/reconnection). Also, if it's the expected behaviour, why? Is there a reason why the callback can't be queued?\r\n\r\n...\r\n2019-10-15 17:25:19,193 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async publish...\r\n2019-10-15 17:25:19,195 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\n2019-10-15 17:25:19,231 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\n2019-10-15 17:25:19,234 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\n2019-10-15 17:25:19,236 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2019-10-15 17:25:19,239 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\n**-->completed the last online asyncPublish with his callback**\r\n2019-10-15 17:26:19,278 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async publish...\r\n2019-10-15 17:26:19,281 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\n**-->async publish stopped by disconnection**\r\n2019-10-15 17:26:19,284 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\n2019-10-15 17:26:19,285 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [disconnect] event\r\n2019-10-15 17:26:19,287 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2019-10-15 17:26:19,288 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\n2019-10-15 17:26:19,289 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [disconnect] event\r\n2019-10-15 17:26:19,290 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 15 sec.\r\n2019-10-15 17:26:19,291 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2019-10-15 17:26:54,312 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 30 sec.\r\n2019-10-15 17:27:19,340 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async publish...\r\n2019-10-15 17:27:19,341 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\n2019-10-15 17:27:19,342 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0x760c9750>\r\n**-->starts queuing messages**\r\n2019-10-15 17:27:44,354 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 60 sec.\r\n2019-10-15 17:28:19,425 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async publish...\r\n2019-10-15 17:28:19,426 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\n2019-10-15 17:28:19,427 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0x7688c9b0>\r\n2019-10-15 17:29:04,382 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 120 sec.\r\n2019-10-15 17:29:19,512 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async publish...\r\n2019-10-15 17:29:19,513 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\n2019-10-15 17:29:19,514 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0x7600a950>\r\n2019-10-15 17:30:19,598 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async publish...\r\n2019-10-15 17:30:19,599 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\n2019-10-15 17:30:19,600 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0x7600a670>\r\n2019-10-15 17:31:04,764 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [connack] event\r\n2019-10-15 17:31:04,764 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [connack] event\r\n2019-10-15 17:31:04,766 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Has recovery job\r\n2019-10-15 17:31:04,768 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Start draining\r\n2019-10-15 17:31:04,768 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2019-10-15 17:31:04,770 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Processed offline publish request\r\n2019-10-15 17:31:05,004 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\n2019-10-15 17:31:05,005 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\n2019-10-15 17:31:05,006 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2019-10-15 17:31:05,007 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\n**-->the callback of the last async publish interrupted by the disconnection i guess?**\r\n2019-10-15 17:31:05,008 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\n2019-10-15 17:31:05,008 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\n2019-10-15 17:31:05,773 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Processed offline publish request\r\n**-->not calling the custom callback anymore for the draining messages**\r\n2019-10-15 17:31:05,899 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\n2019-10-15 17:31:05,900 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\n2019-10-15 17:31:06,776 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Processed offline publish request\r\n2019-10-15 17:31:06,851 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\n2019-10-15 17:31:06,852 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\n2019-10-15 17:31:07,781 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Processed offline publish request\r\n2019-10-15 17:31:07,849 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\n2019-10-15 17:31:07,851 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\n2019-10-15 17:31:19,659 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async publish...\r\n**-->restarting the online publishing without queue, all ok**\r\n2019-10-15 17:31:19,661 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom puback (QoS>0) event callback...\r\n2019-10-15 17:31:19,896 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [puback] event\r\n2019-10-15 17:31:19,897 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [puback] event\r\n2019-10-15 17:31:19,897 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2019-10-15 17:31:19,899 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\n...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/225", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/225/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/225/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/225", "id": 506934100, "node_id": "MDU6SXNzdWU1MDY5MzQxMDA=", "number": 225, "title": "Multiple shadow delta callbacks on a single change", "user": {"login": "stcleezy", "id": 2244094, "node_id": "MDQ6VXNlcjIyNDQwOTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2244094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stcleezy", "html_url": "https://github.com/stcleezy", "followers_url": "https://api.github.com/users/stcleezy/followers", "following_url": "https://api.github.com/users/stcleezy/following{/other_user}", "gists_url": "https://api.github.com/users/stcleezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/stcleezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stcleezy/subscriptions", "organizations_url": "https://api.github.com/users/stcleezy/orgs", "repos_url": "https://api.github.com/users/stcleezy/repos", "events_url": "https://api.github.com/users/stcleezy/events{/privacy}", "received_events_url": "https://api.github.com/users/stcleezy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-15T00:18:44Z", "updated_at": "2019-10-15T19:33:06Z", "closed_at": "2019-10-15T17:12:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am changing two shadow parameters concurrently, enabled and expiration:\r\n\r\n`Shadow update accepted: {'state': {'desired': {'license': {'device': {'enabled': True, 'expiration': '2019-10-08T07:00:00.000Z'}}}}, 'metadata': {'desired': {'license': {'device': {'enabled': {'timestamp': 1571096953}, 'expiration': {'timestamp': 1571096953}}}}}, 'version': 278, 'timestamp': 1571096953}`\r\n\r\nI would expect a single shadow delta callback via shadowRegisterDeltaCallback. However, I am seeing the delta callback fire twice, one for each change:\r\n\r\n`Shadow delta on delta/debug:{\"license\": {\"device\": {\"enabled\": true}}}`\r\n`Shadow delta on delta/debug:{\"license\": {\"device\": {\"expiration\": \"2019-10-08T07:00:00.000Z\"}}}`\r\n\r\nSometimes, however, this does come across as a single message:\r\n\r\n`Shadow delta on delta/debug:{\"license\": {\"device\": {\"enabled\": true, \"expiration\": \"2019-10-08T07:00:00.000Z\"}}}`\r\n\r\nIs this expected? Accounting for this inconsistency adds a fair amount of complexity, as I need to act on the full object, not just the individual params.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/224", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/224/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/224/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/224", "id": 501321074, "node_id": "MDU6SXNzdWU1MDEzMjEwNzQ=", "number": 224, "title": "How to catch exception Websocket Handshake Error while using Cognito Identity", "user": {"login": "chung06", "id": 9440035, "node_id": "MDQ6VXNlcjk0NDAwMzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/9440035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chung06", "html_url": "https://github.com/chung06", "followers_url": "https://api.github.com/users/chung06/followers", "following_url": "https://api.github.com/users/chung06/following{/other_user}", "gists_url": "https://api.github.com/users/chung06/gists{/gist_id}", "starred_url": "https://api.github.com/users/chung06/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chung06/subscriptions", "organizations_url": "https://api.github.com/users/chung06/orgs", "repos_url": "https://api.github.com/users/chung06/repos", "events_url": "https://api.github.com/users/chung06/events{/privacy}", "received_events_url": "https://api.github.com/users/chung06/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}, {"id": 1306321351, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUx", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/response-requested", "name": "response-requested", "color": "666666", "default": false, "description": "Waiting on additional info and feedback. Will move to \"closing-soon\" in 7 days."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-02T07:22:21Z", "updated_at": "2019-10-04T17:38:53Z", "closed_at": "2019-10-04T17:38:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to connect to AWS IoT by using Cognito Identity (Authenticated Identity), claim temporary IAM credentials then connect, all operation work as normal until network down.\r\nFor example, network down for 4 hour and then has internet connection as normal. The problem is temporary credentials cannot refresh while network down (i'm refreshing it inside disconnect callback) and while SDK trying to reconnect when internet connection back, at that time, the IAM credentials has been out dated and it will cause `Websocket Handshake Error`  exception and stuck forever.\r\nSo I need help to caught exception when above problem happens in order to refresh IAM and reconnect again.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/223", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/223/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/223/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/223", "id": 493264061, "node_id": "MDU6SXNzdWU0OTMyNjQwNjE=", "number": 223, "title": "connect timeout exception ", "user": {"login": "PreethamRU", "id": 16146838, "node_id": "MDQ6VXNlcjE2MTQ2ODM4", "avatar_url": "https://avatars1.githubusercontent.com/u/16146838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PreethamRU", "html_url": "https://github.com/PreethamRU", "followers_url": "https://api.github.com/users/PreethamRU/followers", "following_url": "https://api.github.com/users/PreethamRU/following{/other_user}", "gists_url": "https://api.github.com/users/PreethamRU/gists{/gist_id}", "starred_url": "https://api.github.com/users/PreethamRU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PreethamRU/subscriptions", "organizations_url": "https://api.github.com/users/PreethamRU/orgs", "repos_url": "https://api.github.com/users/PreethamRU/repos", "events_url": "https://api.github.com/users/PreethamRU/events{/privacy}", "received_events_url": "https://api.github.com/users/PreethamRU/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}, {"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}, {"id": 1306321351, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUx", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/response-requested", "name": "response-requested", "color": "666666", "default": false, "description": "Waiting on additional info and feedback. Will move to \"closing-soon\" in 7 days."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-13T11:00:05Z", "updated_at": "2019-10-24T23:44:53Z", "closed_at": "2019-10-24T23:44:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "using this code to connect to thing, however, failed to connect. Can you help me with this. Code is below\r\n\r\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\r\n\r\nmyMQTTClient = AWSIoTMQTTClient(\"random\")\r\n\r\n\r\nmyMQTTClient.configureEndpoint(\"somenumber.ap-south-1.amazonaws.com\", 8883)\r\n\r\n\r\nmyMQTTClient.configureCredentials(\"C:\\\\Users\\\\preetham\\\\Desktop\\\\awsiot\\\\root-CA.crt\", \"C:\\\\Users\\\\preetham\\\\Desktop\\\\awsiot\\\\SWM-Preetham.private.key\", \"C:\\\\Users\\\\preetham\\\\Desktop\\\\awsiot\\\\SWM-Preetham.cert.pem\")\r\n\r\n\r\nmyMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing\r\nmyMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz\r\nmyMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec\r\nmyMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec\r\n\r\nmyMQTTClient.connect()\r\n\r\nwhile 1:\r\n    myMQTTClient.publish(\"topic\", \"myPayload\", 1)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/222", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/222/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/222/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/222", "id": 490578309, "node_id": "MDU6SXNzdWU0OTA1NzgzMDk=", "number": 222, "title": "Publish Error 4- dropped connections", "user": {"login": "kilabyte", "id": 487948, "node_id": "MDQ6VXNlcjQ4Nzk0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/487948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kilabyte", "html_url": "https://github.com/kilabyte", "followers_url": "https://api.github.com/users/kilabyte/followers", "following_url": "https://api.github.com/users/kilabyte/following{/other_user}", "gists_url": "https://api.github.com/users/kilabyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/kilabyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kilabyte/subscriptions", "organizations_url": "https://api.github.com/users/kilabyte/orgs", "repos_url": "https://api.github.com/users/kilabyte/repos", "events_url": "https://api.github.com/users/kilabyte/events{/privacy}", "received_events_url": "https://api.github.com/users/kilabyte/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-07T01:54:52Z", "updated_at": "2019-12-13T02:35:24Z", "closed_at": "2019-09-09T22:01:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nAfter around 15k submissions (i publish once every 30 seconds) when the loop goes to publish i get:\r\n\r\n`INFO:AWSIoTPythonSDK.core.protocol.mqtt_core:Performing async publish...\r\nERROR:AWSIoTPythonSDK.core.protocol.mqtt_core:Publish error: 4`\r\n\r\nNow looking through the documentation; there is nothing on this. Looking through the code; i can't find anywhere that shows error 4 and what it means.\r\n\r\nIm running on a Raspberry Pi 3 with python 3.7.3.\r\n\r\nAny help would be appreciated.\r\nThanks! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/220", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/220/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/220/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/220", "id": 488916721, "node_id": "MDU6SXNzdWU0ODg5MTY3MjE=", "number": 220, "title": "basicPubSub does not catch message with other certification and private key than very first ones", "user": {"login": "setosato", "id": 54875922, "node_id": "MDQ6VXNlcjU0ODc1OTIy", "avatar_url": "https://avatars3.githubusercontent.com/u/54875922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/setosato", "html_url": "https://github.com/setosato", "followers_url": "https://api.github.com/users/setosato/followers", "following_url": "https://api.github.com/users/setosato/following{/other_user}", "gists_url": "https://api.github.com/users/setosato/gists{/gist_id}", "starred_url": "https://api.github.com/users/setosato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/setosato/subscriptions", "organizations_url": "https://api.github.com/users/setosato/orgs", "repos_url": "https://api.github.com/users/setosato/repos", "events_url": "https://api.github.com/users/setosato/events{/privacy}", "received_events_url": "https://api.github.com/users/setosato/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321351, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUx", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/response-requested", "name": "response-requested", "color": "666666", "default": false, "description": "Waiting on additional info and feedback. Will move to \"closing-soon\" in 7 days."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-04T03:14:38Z", "updated_at": "2019-09-09T07:36:04Z", "closed_at": "2019-09-09T07:36:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried first AWS IoT. Using first-created certification and private key, basicPubSub.py on Raspberry pi3B+ worked well.\r\nPrroblem is that \"It does not work well with the other certifications I made on AWS IoT console later\"\r\nConnection and publishing to any topic is successful (confirmed on AWS IoT console) , and subscribing does not raise any error. But it catch no message.\r\nDo I need change coding depending on certifications?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/219", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/219/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/219/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/219", "id": 488824783, "node_id": "MDU6SXNzdWU0ODg4MjQ3ODM=", "number": 219, "title": "How to get all thing shadows?", "user": {"login": "atyshka", "id": 19317207, "node_id": "MDQ6VXNlcjE5MzE3MjA3", "avatar_url": "https://avatars2.githubusercontent.com/u/19317207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atyshka", "html_url": "https://github.com/atyshka", "followers_url": "https://api.github.com/users/atyshka/followers", "following_url": "https://api.github.com/users/atyshka/following{/other_user}", "gists_url": "https://api.github.com/users/atyshka/gists{/gist_id}", "starred_url": "https://api.github.com/users/atyshka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atyshka/subscriptions", "organizations_url": "https://api.github.com/users/atyshka/orgs", "repos_url": "https://api.github.com/users/atyshka/repos", "events_url": "https://api.github.com/users/atyshka/events{/privacy}", "received_events_url": "https://api.github.com/users/atyshka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-03T21:05:30Z", "updated_at": "2019-09-05T23:10:15Z", "closed_at": "2019-09-03T22:06:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to query all thing shadows to display on a front end and I can't seem to find anything about this in the API reference. There are functions to interact with a single thing by name, but if the name of a thing is not known, there must be some way to query all available things. Is this possible with the Python SDK?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/218", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/218/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/218/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/218", "id": 488298737, "node_id": "MDU6SXNzdWU0ODgyOTg3Mzc=", "number": 218, "title": "Method subscribeAsync is treated as synchronous subscribe if the client is offline.", "user": {"login": "alexis-hernandez", "id": 53542600, "node_id": "MDQ6VXNlcjUzNTQyNjAw", "avatar_url": "https://avatars2.githubusercontent.com/u/53542600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexis-hernandez", "html_url": "https://github.com/alexis-hernandez", "followers_url": "https://api.github.com/users/alexis-hernandez/followers", "following_url": "https://api.github.com/users/alexis-hernandez/following{/other_user}", "gists_url": "https://api.github.com/users/alexis-hernandez/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexis-hernandez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexis-hernandez/subscriptions", "organizations_url": "https://api.github.com/users/alexis-hernandez/orgs", "repos_url": "https://api.github.com/users/alexis-hernandez/repos", "events_url": "https://api.github.com/users/alexis-hernandez/events{/privacy}", "received_events_url": "https://api.github.com/users/alexis-hernandez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 389767039, "node_id": "MDU6TGFiZWwzODk3NjcwMzk=", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "This issue is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-02T19:22:54Z", "updated_at": "2019-09-05T20:27:27Z", "closed_at": "2019-09-05T20:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Issue:**\r\n    When the AWSIoTSDK client receives an offline subscribeAsync request doesn't trigger ackCalback when it's reconnected and resubscribed, even though it is indeed being subscribed to the topic: \r\n```\r\ndef _handle_resubscribe(self):\r\n        subscriptions = self._subscription_manager.list_records()\r\n        if subscriptions and not self._has_user_disconnect_request():\r\n            self._logger.debug(\"Start resubscribing\")\r\n            self._client_status.set_status(ClientStatus.RESUBSCRIBE)\r\n            for topic, (qos, message_callback) in subscriptions:\r\n                if self._has_user_disconnect_request():\r\n                    self._logger.debug(\"User disconnect detected\")\r\n                    break\r\n                self._internal_async_client.subscribe(topic, qos)\r\n```\r\nThe last line executes the subscribe without calling the original declared ackCalback.\r\n\r\n**Steps to reproduce:**\r\n1. Create an AWSIoTSDK Client and connect it.\r\n2. Disconnect the network.\r\n3. Execute a subscribeAsync with an ackCallback parameter.\r\n4. Wait for the onOffline callback or disconnect event (this can be done before step 3, is the same behavior, just the return is QUEUED instead of an MID if this is done before).\r\n5. Reconnect the network\r\n6. Verify that the ackCallback was never called, here is the output for the resubscribe process:\r\n```\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Produced [connack] event\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Dispatching [connack] event\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Has recovery job\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Start resubscribing\r\nAWSIoTPythonSDK.core.protocol.internal.clients: Invoking custom event callback...\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Start draining\r\nmqtt.client_manager: MQTT onOnline event received \r\nAWSIoTPythonSDK.core.protocol.internal.workers: Produced [suback] event\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Dispatching [suback] event\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Adding a new subscription record: topic/to/subscribe/0001 qos: 1\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Processed offline subscribe request\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Produced [suback] event\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Dispatching [suback] event\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Produced [suback] event\r\nAWSIoTPythonSDK.core.protocol.internal.workers: Dispatching [suback] event\r\n```\r\n\r\n**Expected behavior:**\r\n    The ackCallback should be triggered no matter if the subscribeAsync is called when the system is offline. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/217", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/217/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/217/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/217", "id": 484509130, "node_id": "MDU6SXNzdWU0ODQ1MDkxMzA=", "number": 217, "title": "Trouble using examples", "user": {"login": "jdfha9218", "id": 54440914, "node_id": "MDQ6VXNlcjU0NDQwOTE0", "avatar_url": "https://avatars2.githubusercontent.com/u/54440914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdfha9218", "html_url": "https://github.com/jdfha9218", "followers_url": "https://api.github.com/users/jdfha9218/followers", "following_url": "https://api.github.com/users/jdfha9218/following{/other_user}", "gists_url": "https://api.github.com/users/jdfha9218/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdfha9218/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdfha9218/subscriptions", "organizations_url": "https://api.github.com/users/jdfha9218/orgs", "repos_url": "https://api.github.com/users/jdfha9218/repos", "events_url": "https://api.github.com/users/jdfha9218/events{/privacy}", "received_events_url": "https://api.github.com/users/jdfha9218/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-23T12:39:39Z", "updated_at": "2019-08-23T12:40:36Z", "closed_at": "2019-08-23T12:40:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm leaving this here for the next poor soul that runs into what I did. \r\n- python sdk\r\n- raspberry pi\r\n- jessie\r\n- Python 2.7\r\n\r\nI was able to run start.sh and it worked without issue. I could see it passing messages to AWS in my browser. However, when I tried to write my own example, following the aws-iot-device-sdk-python/README.rst, it wasn't working. \r\n\r\nFirst, I was getting SSL errors. \r\n```\r\nERROR:root:\r\nTraceback (most recent call last):\r\n  File \"~/aws_iot/aws-iot-device-sdk-python/samples/basicPubSub/basicPubSub.py\", line 107, in <module>\r\n    myAWSIoTMQTTClient.connect()\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 513, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 196, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 223, in connect_async\r\n    raise e\r\nssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:581)\r\n```\r\nAfter some digging, I found start.sh was running basicPubSub.py, so I read through what it was doing, and compared to what I was doing. \r\nMy endpoint was wrong. I was missing a handful of characters at the end of the string. I don't know how that happened, but here's two ways to get the right endpoint:\r\n1)  start.sh has inline arguments for basicPubSub, and it should pass it your custom endpoint\r\n2) use the AWS CLI:\r\n- set yourself up with an AWS IAM account\r\n- get an Access Key ID and an Access Key Secret (Hold Onto The Secret)\r\n- `pip install awscli `\r\n- `export AWS_CA_BUNDLE=~/root-CA.crt`\r\n     (path to the root CA certificate that came with the connect-device-package.zip)\r\n- `aws iot describe-endpoint`\r\n\r\nUsing the proper endpoint fixed the ssl error issue, but then I started getting timeouts.\r\n```\r\nERROR:root:\r\nTraceback (most recent call last):\r\n  File \"~/aws_iot/test_iot.py\", line 78, in <module>\r\n    myMQTTClient.connect()\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 513, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 199, in connect\r\n    raise connectTimeoutException()\r\nconnectTimeoutException\r\n('connection err', connectTimeoutException())\r\n```\r\nIt was completely unable to connect. So I did some more digging. Turns out, the certificate you supply it (the device specific one, not the root), has policies attached. Following the tutorial, I had set it to have access to the end points \"iot/*\", but what I did not know, is the policy also contains information about what clientId the thing is allowed to use. \"basicPubSub\" was approved in the policy, but any of the clientIds I used did not (despite everything I saw saying I ought to be able to set it myself to whatever I want). Using a different clientID in the policy that had a wild character in it, I was finally able to connect and send a message. \r\n\r\nI hope this helps. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/215", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/215/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/215/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/215", "id": 467096458, "node_id": "MDU6SXNzdWU0NjcwOTY0NTg=", "number": 215, "title": "disconnect followed by Websocket Handshake Error", "user": {"login": "kolbe", "id": 1221210, "node_id": "MDQ6VXNlcjEyMjEyMTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1221210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kolbe", "html_url": "https://github.com/kolbe", "followers_url": "https://api.github.com/users/kolbe/followers", "following_url": "https://api.github.com/users/kolbe/following{/other_user}", "gists_url": "https://api.github.com/users/kolbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/kolbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kolbe/subscriptions", "organizations_url": "https://api.github.com/users/kolbe/orgs", "repos_url": "https://api.github.com/users/kolbe/repos", "events_url": "https://api.github.com/users/kolbe/events{/privacy}", "received_events_url": "https://api.github.com/users/kolbe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-11T20:41:38Z", "updated_at": "2019-07-23T21:01:08Z", "closed_at": "2019-07-23T21:01:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm connecting using AWSIoTMQTTClient and subscribing to messages, and it works for a day or two before inevitably disconnecting and failing to reconnect with \"Websocket Handshake Error\".\r\n\r\nWhat's the correct way to either catch this exception and retry, or to poll the status of the mqtt thread from my main thread so i can re-connect on my own if it exits?\r\n\r\n```\r\nfrom botocore.credentials import InstanceMetadataProvider, InstanceMetadataFetcher\r\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\r\n...\r\nprovider = InstanceMetadataProvider(iam_role_fetcher=InstanceMetadataFetcher(timeout=1000, num_attempts=2))\r\ncreds = provider.load()\r\n...\r\nawsiot = AWSIoTMQTTClient(\"BaskGreenhouseListener\", useWebsocket=True)\r\nawsiot.configureEndpoint(os.environ['AWSIOT_ENDPOINT'], 443)\r\nawsiot.configureCredentials(\"/usr/share/ca-certificates/extra/AmazonRootCA1.pem\")\r\nawsiot.configureIAMCredentials(creds.access_key, creds.secret_key, creds.token)\r\n...\r\nawsiot.connect()\r\nawsiot.subscribe(\"Greenhouse/Stats\", 1, newMessage)\r\n\r\nwhile True:\r\n    time.sleep(1)                                                                                                                                                                                         \r\n```\r\n\r\n```\r\n[Errno 103] 0\r\nAWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\nAWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 1 sec.\r\nAWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [disconnect] event\r\nAWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\nAWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - IAM credentials from custom config.\r\nAWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - createWebsocketEndpoint: Websocket URL: wss://a2yxri182dok32-ats.iot.us-east-1.amazonaws.com:443/mqtt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIA6LB4BHEZ3DF6IWEP%2F20190711%2Fus-east-1%2Fiotdata%2Faws4_request&X-Amz-Date=20190711T183100Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&X-Amz-Signature=9e14cde97b7b2f0ddf443634a652a4e8228443eef4618ddb4653957bc7658b6e&X-Amz-Security-Token=AgoJb3JpZ2luX2VjEDsaCXVzLWVhc3QtMSJIMEYCIQCelHYDXwkamaMDo6VohWdBwEtaC5ZrdCYjPfT0tSuf5wIhAKeOr2TDGoP2m0qw30xwrS2D7ep/5MZlQrlIf9cAnVNkKuMDCJT//////////wEQABoMOTg1ODIwOTAzNzMxIgybhV/8gRMOsfQSz8oqtwMkdyEgOt8o/elrSQXvnMyKg1MySqVDdsd/vGxgJBb5xS00V8Z%2BJaFA8tCBgxGvf6Em09vx0g0SYTgIqix26t%2Bjat7cbTgojDfihwVoYLgyF6217s1pHabn8vre/mZ5v%2B7LxreyTW8jG9/r5juVtaOG2IIw3BG/nZtdWMmc4ADtxuctIKK2bcnqamlL4cN%2B%2By6GrXQx4EtvJfYSrr3fLauUg/W36PIA/p9IyoLkUv0tmL92tyx5QlijG5XrXHQaJ2dar48TSaETOJjIF8YChP9Xj/2x8CP/0HGIJ2zRbbsX%2BKqAc7y59gfMG/kGnP%2B6f4w0PwKowZjjP%2BsJZmcD9CeYPfkzlED6zQ4EsmyUWq205JKXCsTEHuDFW3vzx8MrYpxNUzLAtwPvfJFAHfN7YvN6UblR1Kl4wf7ELDvMS9QMiL22OhtKxAk9n5gYc28SzrOH1rGjoeddKo9vKIJBqHbiFGGZ/j%2BXfVrD0SFeiovrt96RplQKP0oyVzphkLPEixzUkDkaB0Ca9pkkSnzAQzCTlk1YmJdJIMddwV9U04tqAfCKp/yhWJQMWs5VtSHTBcOIwQdIxQJPMO3ZmOkFOrMBBhzCsay0snNmrVdoEEMOrxvI%2BPsDxeeKN0jWBx5iCbi/TEegNNM4UIFk/j2uyIX2q65%2BWTs3yGNMzSKhrBH0qghqTg2EeQsurSmyL1asHZhvy0rlBTge0w0HkfAy2tTA/SuQlUsE2D%2B5K4YTwRjjED2KP1fyp3geg6ZBigHdZV8t00NoafBTANo7%2BJA3UtXXK3FvVv2m8w3ZO4fusHMOqS5txiq9BCRyb4XuZUAwiGem4Sg%3D\r\nException in thread Thread-2:\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/AWSIoTPythonSDK/core/protocol/connection/cores.py\", line 428, in __init__\r\n    self._handShake(hostAddress, portNumber)\r\n  File \"/usr/local/lib/python3.6/dist-packages/AWSIoTPythonSDK/core/protocol/connection/cores.py\", line 523, in _handShake\r\n    raise wssHandShakeError()\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.wssHandShakeError\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/threading.py\", line 916, in _bootstrap_inner\r\n    self.run()\r\n  File \"/usr/lib/python3.6/threading.py\", line 864, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 2389, in _thread_main\r\n    self.loop_forever()\r\n  File \"/usr/local/lib/python3.6/dist-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 1391, in loop_forever\r\n    self.reconnect()\r\n  File \"/usr/local/lib/python3.6/dist-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 802, in reconnect\r\n    self._ssl = SecuredWebSocketCore(rawSSL, self._host, self._port, self._AWSAccessKeyIDCustomConfig, self._AWSSecretAccessKeyCustomConfig, self._AWSSessionTokenCustomConfig)  # Override the _ssl socket\r\n  File \"/usr/local/lib/python3.6/dist-packages/AWSIoTPythonSDK/core/protocol/connection/cores.py\", line 432, in __init__\r\n    raise ValueError(\"Websocket Handshake Error\")\r\nValueError: Websocket Handshake Error\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/214", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/214/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/214/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/214", "id": 464033056, "node_id": "MDU6SXNzdWU0NjQwMzMwNTY=", "number": 214, "title": "Event consumer stopped", "user": {"login": "freetime312", "id": 15023849, "node_id": "MDQ6VXNlcjE1MDIzODQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/15023849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freetime312", "html_url": "https://github.com/freetime312", "followers_url": "https://api.github.com/users/freetime312/followers", "following_url": "https://api.github.com/users/freetime312/following{/other_user}", "gists_url": "https://api.github.com/users/freetime312/gists{/gist_id}", "starred_url": "https://api.github.com/users/freetime312/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freetime312/subscriptions", "organizations_url": "https://api.github.com/users/freetime312/orgs", "repos_url": "https://api.github.com/users/freetime312/repos", "events_url": "https://api.github.com/users/freetime312/events{/privacy}", "received_events_url": "https://api.github.com/users/freetime312/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-04T02:44:02Z", "updated_at": "2019-09-16T21:34:33Z", "closed_at": "2019-09-16T21:34:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "> bash start.sh \r\n\r\nRunning pub/sub sample application...\r\n2019-07-04 10:42:07,641 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Initializing MQTT layer...\r\n2019-07-04 10:42:07,644 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Registering internal event callbacks to MQTT layer...\r\n2019-07-04 10:42:07,645 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2019-07-04 10:42:07,646 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: basicPubSub\r\n2019-07-04 10:42:07,647 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2019-07-04 10:42:07,648 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2019-07-04 10:42:07,650 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2019-07-04 10:42:07,651 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\n2019-07-04 10:42:07,652 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring reconnect back off timing...\r\n2019-07-04 10:42:07,653 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Base quiet time: 1.000000 sec\r\n2019-07-04 10:42:07,655 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Max quiet time: 32.000000 sec\r\n2019-07-04 10:42:07,656 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Stable connection time: 20.000000 sec\r\n2019-07-04 10:42:07,657 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queueing: max queue size: -1\r\n2019-07-04 10:42:07,658 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queue draining interval: 0.500000 sec\r\n2019-07-04 10:42:07,660 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\n2019-07-04 10:42:07,661 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 5.000000 sec\r\n2019-07-04 10:42:07,662 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2019-07-04 10:42:07,663 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2019-07-04 10:42:07,664 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2019-07-04 10:42:07,667 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\n2019-07-04 10:42:07,668 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\n2019-07-04 10:42:07,670 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n2019-07-04 10:42:08,583 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Cleaning up before stopping event consuming\r\n2019-07-04 10:42:08,585 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event queue cleared\r\n2019-07-04 10:42:08,586 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Stopping network I/O thread...\r\n2019-07-04 10:42:08,588 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Network thread stopped\r\n2019-07-04 10:42:08,591 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event callbacks cleared\r\n2019-07-04 10:42:08,593 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread stopped\r\n2019-07-04 10:42:08,589 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Exiting dispatching loop...\r\n2019-07-04 10:42:08,595 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Waiting for event consumer to completely stop\r\n2019-07-04 10:42:08,596 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Event consumer stopped\r\nTraceback (most recent call last):\r\n  File \"aws-iot-device-sdk-python/samples/basicPubSub/basicPubSub.py\", line 107, in <module>\r\n    myAWSIoTMQTTClient.connect()\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 513, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 196, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 223, in connect_async\r\n    raise e\r\nsocket.error: [Errno 104] Connection reset by peer\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/213", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/213/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/213/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/213", "id": 461404266, "node_id": "MDU6SXNzdWU0NjE0MDQyNjY=", "number": 213, "title": "Register callback on Connect to get \"session-present\" flag status", "user": {"login": "pratapakishore", "id": 46473859, "node_id": "MDQ6VXNlcjQ2NDczODU5", "avatar_url": "https://avatars1.githubusercontent.com/u/46473859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pratapakishore", "html_url": "https://github.com/pratapakishore", "followers_url": "https://api.github.com/users/pratapakishore/followers", "following_url": "https://api.github.com/users/pratapakishore/following{/other_user}", "gists_url": "https://api.github.com/users/pratapakishore/gists{/gist_id}", "starred_url": "https://api.github.com/users/pratapakishore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pratapakishore/subscriptions", "organizations_url": "https://api.github.com/users/pratapakishore/orgs", "repos_url": "https://api.github.com/users/pratapakishore/repos", "events_url": "https://api.github.com/users/pratapakishore/events{/privacy}", "received_events_url": "https://api.github.com/users/pratapakishore/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}, {"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-27T08:57:13Z", "updated_at": "2019-10-24T23:45:08Z", "closed_at": "2019-10-24T23:45:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "@liuszeng - I tried your method of creating custom call back method but it is not working out. Could you please send us any sample code snippet of what changes do we need exactly on each file so that it will be helpful. We actually need this persistent message option to be enable in AWSIoTPython library. #35  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/212", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/212/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/212/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/212", "id": 453969394, "node_id": "MDU6SXNzdWU0NTM5NjkzOTQ=", "number": 212, "title": "edge case where first try of connect() fails, cannot reconnect", "user": {"login": "PablOsma", "id": 48283826, "node_id": "MDQ6VXNlcjQ4MjgzODI2", "avatar_url": "https://avatars0.githubusercontent.com/u/48283826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PablOsma", "html_url": "https://github.com/PablOsma", "followers_url": "https://api.github.com/users/PablOsma/followers", "following_url": "https://api.github.com/users/PablOsma/following{/other_user}", "gists_url": "https://api.github.com/users/PablOsma/gists{/gist_id}", "starred_url": "https://api.github.com/users/PablOsma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PablOsma/subscriptions", "organizations_url": "https://api.github.com/users/PablOsma/orgs", "repos_url": "https://api.github.com/users/PablOsma/repos", "events_url": "https://api.github.com/users/PablOsma/events{/privacy}", "received_events_url": "https://api.github.com/users/PablOsma/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-10T02:10:18Z", "updated_at": "2020-05-18T00:05:57Z", "closed_at": "2020-05-18T00:05:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nThe hardware scenario is using a 3g modem to connect to internet, so the connection is far from stable.\r\n\r\nVersion is 1.4.0.\r\n\r\nDescription of bug:\r\nSometimes if first connect() fails,  all the next connect() retries fails and new threads are spawned until max thread count is reached. \r\n\r\nTo reproduce the bug, i simulate an unstable internet connection disconnecting from wifi but only after the connection socket have been connected and tls stuff has completed.\r\n\r\nPut a breakpoint in the last line of the reconnect() function in core/protocol/paho/client.py\r\n` return self._send_connect(self._keepalive, self._clean_session)`\r\nDisconnect from wifi and resume execution.\r\n\r\nAfter connect() return  and some exception is raised, wifi is enabled again, and all the following connect() fails, and thread keep accumulating.\r\n\r\nlog:\r\n--------------------------------\r\nCRITICAL - can't start new thread\r\nTraceback (most recent call last):\r\n File \"omitted\", line 145, in conectToAws\r\n    result=self.myMQTTClient.connect(30)\r\n\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 201, in connect_async\r\n    self._start_workers()\r\n\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 113, in _start_workers\r\n    self._event_consumer.start()\r\n\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/internal/workers.py\", line 114, in start\r\n    dispatch_events.start()\r\n\r\n  File \"/usr/lib/python2.7/threading.py\", line 736, in start\r\n    _start_new_thread(self.__bootstrap, ())\r\n\r\n------------------------------------\r\n\r\nThe fix i found is comment the line self._thread.join() in the file core/protocol/paho/client.py function loop_stop(). \r\n\r\nThis way the first thread (EventConsumer) terminates and release the lock acquired in the function _dispatch() at \r\n`with self.cv: `\r\n\r\n And the other thread can dispatch the events queued.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/210", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/210/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/210/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/210", "id": 452972957, "node_id": "MDU6SXNzdWU0NTI5NzI5NTc=", "number": 210, "title": "Problem myAWSIoTMQTTShadowClient.connect() . it doesnt connect", "user": {"login": "elefps", "id": 49808707, "node_id": "MDQ6VXNlcjQ5ODA4NzA3", "avatar_url": "https://avatars1.githubusercontent.com/u/49808707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elefps", "html_url": "https://github.com/elefps", "followers_url": "https://api.github.com/users/elefps/followers", "following_url": "https://api.github.com/users/elefps/following{/other_user}", "gists_url": "https://api.github.com/users/elefps/gists{/gist_id}", "starred_url": "https://api.github.com/users/elefps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elefps/subscriptions", "organizations_url": "https://api.github.com/users/elefps/orgs", "repos_url": "https://api.github.com/users/elefps/repos", "events_url": "https://api.github.com/users/elefps/events{/privacy}", "received_events_url": "https://api.github.com/users/elefps/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}, {"id": 1306321351, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUx", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/response-requested", "name": "response-requested", "color": "666666", "default": false, "description": "Waiting on additional info and feedback. Will move to \"closing-soon\" in 7 days."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-06T11:15:50Z", "updated_at": "2020-08-14T00:10:17Z", "closed_at": "2020-08-14T00:10:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n2019-06-04 03:44:55,131 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2019-06-04 03:44:55,131 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2019-06-04 03:44:55,132 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2019-06-04 03:44:55,135 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\n2019-06-04 03:44:55,136 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\n2019-06-04 03:44:55,137 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n\r\n\r\nafter the last line it gets stuck and doesnt connect.\r\nthe rest_api and other certificates are used properly.\r\nwhy this happens? and why it doent connect?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/207", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/207/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/207/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/207", "id": 439135272, "node_id": "MDU6SXNzdWU0MzkxMzUyNzI=", "number": 207, "title": "SigV4Core incorrectly handling failed credential reads from ConfigParser", "user": {"login": "daniel-woods", "id": 6737251, "node_id": "MDQ6VXNlcjY3MzcyNTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6737251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-woods", "html_url": "https://github.com/daniel-woods", "followers_url": "https://api.github.com/users/daniel-woods/followers", "following_url": "https://api.github.com/users/daniel-woods/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-woods/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-woods/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-woods/subscriptions", "organizations_url": "https://api.github.com/users/daniel-woods/orgs", "repos_url": "https://api.github.com/users/daniel-woods/repos", "events_url": "https://api.github.com/users/daniel-woods/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-woods/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-01T11:22:06Z", "updated_at": "2020-05-18T00:05:56Z", "closed_at": "2020-05-18T00:05:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "In cores.py, SigV4Core._checkKeyInFiles attempts to read credentials from the custom config.\r\nhttps://github.com/aws/aws-iot-device-sdk-python/blob/master/AWSIoTPythonSDK/core/protocol/connection/cores.py#L214\r\n\r\nThe method accounts for an IOError in the event that (\"No IAM credential configuration file in \" + credentialFilePath).\r\n\r\nIn configparser.RawConfigParser, the read() method doesn't throw an IOError on failed reads, but instead returns the filenames of successfully read files.\r\nhttps://github.com/python/cpython/blob/3.7/Lib/configparser.py#L678\r\n\r\nWhich would possibly suggest that SigV4Core._checkKeyInFiles should be checking the response from configparser to assess the status of the read.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/206", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/206/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/206/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/206", "id": 439134427, "node_id": "MDU6SXNzdWU0MzkxMzQ0Mjc=", "number": 206, "title": "Search container-role for IAM credentials", "user": {"login": "daniel-woods", "id": 6737251, "node_id": "MDQ6VXNlcjY3MzcyNTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6737251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-woods", "html_url": "https://github.com/daniel-woods", "followers_url": "https://api.github.com/users/daniel-woods/followers", "following_url": "https://api.github.com/users/daniel-woods/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-woods/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-woods/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-woods/subscriptions", "organizations_url": "https://api.github.com/users/daniel-woods/orgs", "repos_url": "https://api.github.com/users/daniel-woods/repos", "events_url": "https://api.github.com/users/daniel-woods/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-woods/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321376, "node_id": "MDU6TGFiZWwxMzA2MzIxMzc2", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/feature-request", "name": "feature-request", "color": "008672", "default": false, "description": "A feature should be added or improved."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-01T11:18:12Z", "updated_at": "2020-05-18T00:05:55Z", "closed_at": "2020-05-18T00:05:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "In core.py [SigV4Core. _checkIAMCredentials](https://github.com/aws/aws-iot-device-sdk-python/blob/master/AWSIoTPythonSDK/core/protocol/connection/cores.py#L161-L171), the SDK does not search for ECS container roles. \r\n\r\nAs per the precedence set out via botocore/[CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html#config-settings-and-precedence), this device SDK should follow a similar protocol.\r\n\r\n\r\nSee botocore.utils [ContainerMetadataFetcher](https://github.com/boto/botocore/blob/develop/botocore/utils.py#L1229)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/204", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/204/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/204/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/204", "id": 437120661, "node_id": "MDU6SXNzdWU0MzcxMjA2NjE=", "number": 204, "title": "Connection problem - Name resolution, stuck in this state.", "user": {"login": "csib", "id": 24816101, "node_id": "MDQ6VXNlcjI0ODE2MTAx", "avatar_url": "https://avatars1.githubusercontent.com/u/24816101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csib", "html_url": "https://github.com/csib", "followers_url": "https://api.github.com/users/csib/followers", "following_url": "https://api.github.com/users/csib/following{/other_user}", "gists_url": "https://api.github.com/users/csib/gists{/gist_id}", "starred_url": "https://api.github.com/users/csib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csib/subscriptions", "organizations_url": "https://api.github.com/users/csib/orgs", "repos_url": "https://api.github.com/users/csib/repos", "events_url": "https://api.github.com/users/csib/events{/privacy}", "received_events_url": "https://api.github.com/users/csib/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-25T10:19:14Z", "updated_at": "2020-05-18T00:05:53Z", "closed_at": "2020-05-18T00:05:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nEnvironment:  BusyBox Linux (arm)\r\n\r\nEverything working fine, until I plug out the Ethernet cable from my device, then plug it back, after that the backoff is called, and counting I see name resolution error in logs, after that it can't connect back to iot, and stuck in this state. I have to restart the program to connect again.\r\nThe name resolution is working on the device, but the Paho client/socket not working, and wont work again. I have attached a debug log from my device (sdk log).\r\n\r\n[iotlog.txt](https://github.com/aws/aws-iot-device-sdk-python/files/3116421/iotlog.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/203", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/203/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/203/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/203", "id": 436438948, "node_id": "MDU6SXNzdWU0MzY0Mzg5NDg=", "number": 203, "title": "sendJobsUpdate must be wrapped with a thread?", "user": {"login": "xyk2", "id": 1792116, "node_id": "MDQ6VXNlcjE3OTIxMTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1792116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xyk2", "html_url": "https://github.com/xyk2", "followers_url": "https://api.github.com/users/xyk2/followers", "following_url": "https://api.github.com/users/xyk2/following{/other_user}", "gists_url": "https://api.github.com/users/xyk2/gists{/gist_id}", "starred_url": "https://api.github.com/users/xyk2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xyk2/subscriptions", "organizations_url": "https://api.github.com/users/xyk2/orgs", "repos_url": "https://api.github.com/users/xyk2/repos", "events_url": "https://api.github.com/users/xyk2/events{/privacy}", "received_events_url": "https://api.github.com/users/xyk2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}, {"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-23T23:59:50Z", "updated_at": "2019-07-23T21:01:18Z", "closed_at": "2019-07-23T21:01:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looking at the [jobsSample script](https://github.com/aws/aws-iot-device-sdk-python/blob/master/samples/jobs/jobsSample.py) at line 59, the update request is wrapped in a thread:\r\n\r\n```python\r\nthreading.Thread(target = self.awsIoTMQTTThingJobsClient.sendJobsUpdate, kwargs = {'jobId': execution['jobId'], 'status': jobExecutionStatus.JOB_EXECUTION_SUCCEEDED, 'statusDetails': statusDetails, 'expectedVersion': execution['versionNumber'], 'executionNumber': execution['executionNumber']}).start()\r\n```\r\n\r\nIs there a specific reason for this? I tried just directly calling \r\n\r\n```python\r\nself.awsIoTMQTTThingJobsClient.sendJobsUpdate(myJobId, jobExecutionStatus.JOB_EXECUTION_SUCCEEDED)\r\n```\r\n and it always times out with a `AWSIoTPythonSDK.exception.AWSIoTExceptions.publishTimeoutException` but in the IoT console it still registers as a successful execution.  \r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/201", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/201/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/201/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/201", "id": 434600224, "node_id": "MDU6SXNzdWU0MzQ2MDAyMjQ=", "number": 201, "title": "Error when setting endpoint to port 443 when doing a Greengrass Discovery ", "user": {"login": "Jgansaown", "id": 11676314, "node_id": "MDQ6VXNlcjExNjc2MzE0", "avatar_url": "https://avatars2.githubusercontent.com/u/11676314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jgansaown", "html_url": "https://github.com/Jgansaown", "followers_url": "https://api.github.com/users/Jgansaown/followers", "following_url": "https://api.github.com/users/Jgansaown/following{/other_user}", "gists_url": "https://api.github.com/users/Jgansaown/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jgansaown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jgansaown/subscriptions", "organizations_url": "https://api.github.com/users/Jgansaown/orgs", "repos_url": "https://api.github.com/users/Jgansaown/repos", "events_url": "https://api.github.com/users/Jgansaown/events{/privacy}", "received_events_url": "https://api.github.com/users/Jgansaown/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-18T05:47:40Z", "updated_at": "2019-04-19T23:19:03Z", "closed_at": "2019-04-19T23:19:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue: When running Greengrass discovery info provider with port set to 443, attribution error is raised: `'module' object has no attribute 'set_alpn_protocols'`\r\n\r\n\r\nOnly change made to `basicDiscovery.py` is setting the endpoint port to 443.\r\n![image](https://user-images.githubusercontent.com/11676314/56336038-6873f600-61d1-11e9-9316-59b2eea98b7e.png)\r\nRunning `basicDiscovery.py` give the following error\r\n![image](https://user-images.githubusercontent.com/11676314/56335939-fd2a2400-61d0-11e9-8b7c-7826bbf48ede.png)\r\n\r\nAfter searching for the error I found that the SSL configuration for enabling APLN is wrong for `DiscoveryInfoProvider` class under the `_create_ssl_connection` function in the file `AWSIoTPythonSDK/core/greengrass/discovery/providers.py`\r\n![image](https://user-images.githubusercontent.com/11676314/56338551-0a4d1000-61dd-11e9-9ecb-2ce1b9fa9a00.png)\r\n\r\nTo enable APLN you need to use SSLContext, so referencing `AWSIoTPythonSDK/core/protocol/paho/client.py` I made the changes below to `AWSIoTPythonSDK/core/greengrass/discovery/providers.py` \r\n![image](https://user-images.githubusercontent.com/11676314/56338575-294ba200-61dd-11e9-81f2-666448e343d8.png)\r\n\r\n![image](https://user-images.githubusercontent.com/11676314/56338613-47190700-61dd-11e9-9135-932c48a29a82.png)\r\n\r\nWhich fixes the issue and now I can perform a Greengrass discovery with port 443\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/200", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/200/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/200/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/200", "id": 433560550, "node_id": "MDU6SXNzdWU0MzM1NjA1NTA=", "number": 200, "title": "ShadowUpdate not updating shadow document from ThreadPool", "user": {"login": "Kryptic-Ken", "id": 29109726, "node_id": "MDQ6VXNlcjI5MTA5NzI2", "avatar_url": "https://avatars2.githubusercontent.com/u/29109726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kryptic-Ken", "html_url": "https://github.com/Kryptic-Ken", "followers_url": "https://api.github.com/users/Kryptic-Ken/followers", "following_url": "https://api.github.com/users/Kryptic-Ken/following{/other_user}", "gists_url": "https://api.github.com/users/Kryptic-Ken/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kryptic-Ken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kryptic-Ken/subscriptions", "organizations_url": "https://api.github.com/users/Kryptic-Ken/orgs", "repos_url": "https://api.github.com/users/Kryptic-Ken/repos", "events_url": "https://api.github.com/users/Kryptic-Ken/events{/privacy}", "received_events_url": "https://api.github.com/users/Kryptic-Ken/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-16T02:54:55Z", "updated_at": "2019-04-18T01:34:37Z", "closed_at": "2019-04-18T01:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "After calling shadowGet, inside of the callback method. I check a value from the payload, then update it, and pass it to a function that executes from my custom thread pool. However, it doesn't seem to be working; the shadow document is not changing when shadowUpdate is called. I am using SDK version 1.4.4.\r\n\r\n\r\n\r\n```\r\nexecutors = ThreadPoolExecutor(max_workers = 2)\r\n\r\ndef update(payload = None):\r\n    payload[\"state\"][\"desired\"][\"video\"] \r\n    myDeviceShadow.shadowUpdate(json.dumps(payload),None,5)\r\n\r\ndef customShadowCallback_Update(payload, responseStatus, token):\r\n    global s3\r\n    global bucket_name\r\n    payloadDict = json.loads(payload)\r\n    command = payloadDict[\"state\"][\"desired\"][\"video\"]\r\n    print(command)\r\n    if command == False:\r\n        s3.upload_file('Hello.png',bucket_name,'Hello.png')\r\n        payloadDict[\"state\"][\"desired\"][\"video\"] = True\r\n        payloadDict[\"state\"][\"desired\"][\"property\"] = 3\r\n        executors.submit(update, kwargs={'payload':payloadDict})\r\n\r\ns3 = boto3.client(CREDENTIALS)\r\nbucket_name = BUCKET_NAME\r\nmyShadowClient = AWSIoTMQTTShadowClient(\"myClientID\")\r\nmyShadowClient.configureEndpoint(ENDPOINT, PORT NUMBER)\r\nmyShadowClient.configureCredentials(CREDENTIALS)\r\nmyDeviceShadow = myShadowClient.createShadowHandlerWithName(THING NAME, True)\r\nmyShadowClient.configureConnectDisconnectTimeout(10)  # 10 sec\r\nmyShadowClient.configureMQTTOperationTimeout(5)  # 5 sec\r\nprint(myShadowClient.connect(1200)) #Print this out on\r\n\r\nwhile True:\r\n    myDeviceShadow.shadowGet(customShadowCallback_Update, 5)\r\n    time.sleep(5)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/198", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/198/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/198/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/198", "id": 432760835, "node_id": "MDU6SXNzdWU0MzI3NjA4MzU=", "number": 198, "title": "Unknown error when connecting to myShadowClient ", "user": {"login": "SatishModugu", "id": 32131478, "node_id": "MDQ6VXNlcjMyMTMxNDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/32131478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SatishModugu", "html_url": "https://github.com/SatishModugu", "followers_url": "https://api.github.com/users/SatishModugu/followers", "following_url": "https://api.github.com/users/SatishModugu/following{/other_user}", "gists_url": "https://api.github.com/users/SatishModugu/gists{/gist_id}", "starred_url": "https://api.github.com/users/SatishModugu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SatishModugu/subscriptions", "organizations_url": "https://api.github.com/users/SatishModugu/orgs", "repos_url": "https://api.github.com/users/SatishModugu/repos", "events_url": "https://api.github.com/users/SatishModugu/events{/privacy}", "received_events_url": "https://api.github.com/users/SatishModugu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}, {"id": 1306321351, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUx", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/response-requested", "name": "response-requested", "color": "666666", "default": false, "description": "Waiting on additional info and feedback. Will move to \"closing-soon\" in 7 days."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-04-12T21:59:50Z", "updated_at": "2019-07-23T21:01:28Z", "closed_at": "2019-07-23T21:01:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI am following the tutorial on https://docs.aws.amazon.com/iot/latest/developerguide/iot-plant-step5.html\r\n\r\nI am using Python 2.7, When I modify the given code with the keys I have, I am getting the below error:\r\n\r\n  File \"moisture.py\", line 44, in <module>\r\n    myShadowClient.connect()\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 1217, in connect\r\n    return self._AWSIoTMQTTClient.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 486, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\nssl.SSLError: unknown error (_ssl.c:2947)\r\n\r\nPlease let me know what might be the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/197", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/197/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/197/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/197", "id": 431348657, "node_id": "MDU6SXNzdWU0MzEzNDg2NTc=", "number": 197, "title": "Occasional hang on AWSIoTMQTTClient.connect()", "user": {"login": "samvrlewis", "id": 3880246, "node_id": "MDQ6VXNlcjM4ODAyNDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3880246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samvrlewis", "html_url": "https://github.com/samvrlewis", "followers_url": "https://api.github.com/users/samvrlewis/followers", "following_url": "https://api.github.com/users/samvrlewis/following{/other_user}", "gists_url": "https://api.github.com/users/samvrlewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/samvrlewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samvrlewis/subscriptions", "organizations_url": "https://api.github.com/users/samvrlewis/orgs", "repos_url": "https://api.github.com/users/samvrlewis/repos", "events_url": "https://api.github.com/users/samvrlewis/events{/privacy}", "received_events_url": "https://api.github.com/users/samvrlewis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-10T07:35:29Z", "updated_at": "2020-05-18T00:05:52Z", "closed_at": "2020-05-18T00:05:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm occasionally seeing `AWSIoTMQTTClient.connect()` indefinitely hang. Seems to be the same issue as reported in #40, but there wasn't a proper resolution found there.\r\n\r\nLogs when this happen:\r\n\r\n```\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,819 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Initializing MQTT layer...\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,824 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Registering internal event callbacks to MQTT layer...\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,825 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,825 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: 020000035\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,826 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,827 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,828 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,828 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,830 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queueing: max queue size: 0\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,834 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queue draining interval: 0.500000 sec\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,836 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,837 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 30.000000 sec\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,838 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,839 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,839 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,846 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,847 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\nMar 28 19:29:35 my_application.py[1937]: 2019-03-28 19:29:35,848 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n```\r\nComparing this to the logs when everything works, it looks as though it's hanging before the `Starting network I/O thread...` log message is printed from `clients.py`: \r\n\r\nhttps://github.com/aws/aws-iot-device-sdk-python/blob/832f074ac7693aca23f9252c0e0040d89b175735/AWSIoTPythonSDK/core/protocol/internal/clients.py#L126\r\n\r\nWhich leads me to believe it's probably hanging on one of the `Lock.acquire` calls in either `reconnect`: https://github.com/aws/aws-iot-device-sdk-python/blob/832f074ac7693aca23f9252c0e0040d89b175735/AWSIoTPythonSDK/core/protocol/paho/client.py#L736 or `connect_async`: https://github.com/aws/aws-iot-device-sdk-python/blob/832f074ac7693aca23f9252c0e0040d89b175735/AWSIoTPythonSDK/core/protocol/paho/client.py#L704\r\n\r\nIt's a frustrating issue as it's difficult to detect when it has occurred. If there are contention issues for the Locks, I'd much rather the SDK throw an exception than hang forever so that my application can still recover.\r\n\r\nFrustratingly, I haven't found a way to try to replicate this yet.\r\n\r\nAppreciate any help or insight!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/196", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/196/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/196/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/196", "id": 431030853, "node_id": "MDU6SXNzdWU0MzEwMzA4NTM=", "number": 196, "title": "Can't use message id from publishAsync when client uses the offline queue", "user": {"login": "Cheroukee", "id": 7319702, "node_id": "MDQ6VXNlcjczMTk3MDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7319702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cheroukee", "html_url": "https://github.com/Cheroukee", "followers_url": "https://api.github.com/users/Cheroukee/followers", "following_url": "https://api.github.com/users/Cheroukee/following{/other_user}", "gists_url": "https://api.github.com/users/Cheroukee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cheroukee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cheroukee/subscriptions", "organizations_url": "https://api.github.com/users/Cheroukee/orgs", "repos_url": "https://api.github.com/users/Cheroukee/repos", "events_url": "https://api.github.com/users/Cheroukee/events{/privacy}", "received_events_url": "https://api.github.com/users/Cheroukee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321376, "node_id": "MDU6TGFiZWwxMzA2MzIxMzc2", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/feature-request", "name": "feature-request", "color": "008672", "default": false, "description": "A feature should be added or improved."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-09T15:25:51Z", "updated_at": "2020-08-12T22:05:48Z", "closed_at": "2020-08-12T22:05:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the project I'm working on, we manage messages (persist, follow sent/received status) to ensure that in the event of other failures, no message is lost. \r\n\r\nTo do this, our messages are set as \"sent, but unconfirmed\" upon publishing to a topic. We then use the `ackCallback` from `publishAsync` to match a specific message ID with the messages. \r\n\r\nUpon testing the internet going out, I've noticed two things : \r\n\r\n1. If the offline queue is full or disabled (configured with a 0 size), the publishAsync doesn't return an `int` message Id but rather a fixed message ID with a value of `\"QUEUED\"` which is not what is expected if the documentation is to be a point of reference. \r\n\r\n1. If the offline queue is enabled, there is no way to know that a specific message from that queue has been sent, as the worker will use the internal client to republish the message. This makes it impossible to retrieve the message ID, rendering the `ackCallback` unuseful.\r\n\r\nI'm curious to know what should be my flow here? My current one is to disable the offline queue since it creates a state where my messages are sent but I won't know if they got to destination. Then I just wait until a publishAsync doesn't give me back a `\"QUEUED\"` to actually set the message status to \"sent, but unconfirmed\". \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/195", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/195/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/195/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/195", "id": 430939478, "node_id": "MDU6SXNzdWU0MzA5Mzk0Nzg=", "number": 195, "title": "SSL Error: SSL PEM lib", "user": {"login": "Thaiph1308", "id": 23703816, "node_id": "MDQ6VXNlcjIzNzAzODE2", "avatar_url": "https://avatars2.githubusercontent.com/u/23703816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thaiph1308", "html_url": "https://github.com/Thaiph1308", "followers_url": "https://api.github.com/users/Thaiph1308/followers", "following_url": "https://api.github.com/users/Thaiph1308/following{/other_user}", "gists_url": "https://api.github.com/users/Thaiph1308/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thaiph1308/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thaiph1308/subscriptions", "organizations_url": "https://api.github.com/users/Thaiph1308/orgs", "repos_url": "https://api.github.com/users/Thaiph1308/repos", "events_url": "https://api.github.com/users/Thaiph1308/events{/privacy}", "received_events_url": "https://api.github.com/users/Thaiph1308/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-09T12:28:34Z", "updated_at": "2019-04-15T16:48:24Z", "closed_at": "2019-04-15T16:48:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm following this instruction:\r\n**JobsSample**\r\n`> python jobsSample.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath> -n <thingName>`\r\nWith rootCA i take from:\r\n`https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem`\r\nHere is the output when I run the script with rootCA above and Certfile + Private take from AWS:\r\n`python jobsSample.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath> -n <thingName>`\r\n```\r\n2019-04-09 19:05:29,922 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Initializing MQTT layer...\r\n2019-04-09 19:05:29,923 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Registering internal event callbacks to MQTT layer...\r\n2019-04-09 19:05:29,924 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2019-04-09 19:05:29,924 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: basicJobsSampleClient\r\n2019-04-09 19:05:29,924 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2019-04-09 19:05:29,925 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2019-04-09 19:05:29,925 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2019-04-09 19:05:29,925 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\n2019-04-09 19:05:29,926 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring reconnect back off timing...\r\n2019-04-09 19:05:29,926 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Base quiet time: 1.000000 sec\r\n2019-04-09 19:05:29,926 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Max quiet time: 32.000000 sec\r\n2019-04-09 19:05:29,927 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Stable connection time: 20.000000 sec\r\n2019-04-09 19:05:29,927 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\n2019-04-09 19:05:29,927 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 10.000000 sec\r\nConnecting to MQTT server and setting up callbacks...\r\n2019-04-09 19:05:29,928 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2019-04-09 19:05:29,928 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2019-04-09 19:05:29,928 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2019-04-09 19:05:29,929 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\n2019-04-09 19:05:29,929 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\n2019-04-09 19:05:29,930 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n2019-04-09 19:05:29,971 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Cleaning up before stopping event consuming\r\n2019-04-09 19:05:29,972 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event queue cleared\r\n2019-04-09 19:05:29,972 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Stopping network I/O thread...\r\n2019-04-09 19:05:29,972 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Network thread stopped\r\n2019-04-09 19:05:29,973 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event callbacks cleared\r\n2019-04-09 19:05:29,973 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread stopped\r\n2019-04-09 19:05:29,973 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Waiting for event consumer to completely stop\r\n2019-04-09 19:05:29,980 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Exiting dispatching loop...\r\n2019-04-09 19:05:29,981 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Event consumer stopped\r\nTraceback (most recent call last):\r\n  File \"jobsSample.py\", line 168, in <module>\r\n    jobsClient.connect()\r\n  File \"/home/pi/.local/lib/python2.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 1216, in connect\r\n    return self._AWSIoTMQTTClient.connect(keepAliveIntervalSecond)\r\n  File \"/home/pi/.local/lib/python2.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/home/pi/.local/lib/python2.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/home/pi/.local/lib/python2.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\nssl.SSLError: [SSL] PEM lib (_ssl.c:2699)\r\n```\r\nI'm using **Python 2.7** and SSL Version **'OpenSSL 1.1.0j  20 Nov 2018'**\r\nCan anyone help me to resolve this issue? Many thanks in advance!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/194", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/194/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/194/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/194", "id": 430429576, "node_id": "MDU6SXNzdWU0MzA0Mjk1NzY=", "number": 194, "title": "2 second sleep in basicShadowSubscribe?", "user": {"login": "boddob", "id": 1720788, "node_id": "MDQ6VXNlcjE3MjA3ODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1720788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boddob", "html_url": "https://github.com/boddob", "followers_url": "https://api.github.com/users/boddob/followers", "following_url": "https://api.github.com/users/boddob/following{/other_user}", "gists_url": "https://api.github.com/users/boddob/gists{/gist_id}", "starred_url": "https://api.github.com/users/boddob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boddob/subscriptions", "organizations_url": "https://api.github.com/users/boddob/orgs", "repos_url": "https://api.github.com/users/boddob/repos", "events_url": "https://api.github.com/users/boddob/events{/privacy}", "received_events_url": "https://api.github.com/users/boddob/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-08T12:43:08Z", "updated_at": "2020-05-18T00:05:50Z", "closed_at": "2020-05-18T00:05:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nA time.sleep(2) call at the end of the func basicShadowSubscribe() in \"AWSIoTPythonSDK/core/shadow/shadowManager.py\" was slowing down our service's initializaiton.\r\n\r\nIs this safe to get rid of?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/193", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/193/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/193/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/193", "id": 430149523, "node_id": "MDU6SXNzdWU0MzAxNDk1MjM=", "number": 193, "title": "Spurious references to clearLastWill in API Docs", "user": {"login": "tim-seoss", "id": 5011760, "node_id": "MDQ6VXNlcjUwMTE3NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5011760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tim-seoss", "html_url": "https://github.com/tim-seoss", "followers_url": "https://api.github.com/users/tim-seoss/followers", "following_url": "https://api.github.com/users/tim-seoss/following{/other_user}", "gists_url": "https://api.github.com/users/tim-seoss/gists{/gist_id}", "starred_url": "https://api.github.com/users/tim-seoss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tim-seoss/subscriptions", "organizations_url": "https://api.github.com/users/tim-seoss/orgs", "repos_url": "https://api.github.com/users/tim-seoss/repos", "events_url": "https://api.github.com/users/tim-seoss/events{/privacy}", "received_events_url": "https://api.github.com/users/tim-seoss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-07T14:05:21Z", "updated_at": "2020-05-18T00:05:49Z", "closed_at": "2020-05-18T00:05:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seem to be numerous references in the API docs to `clearLastWill(` in the Sytax sections of other calls e.g.\r\n\r\n```\r\n configureEndpoint(hostName, portNumber)\r\n\r\n    Description\r\n\r\n    Used to configure the host name and port number the underneath AWS IoT MQTT Client tries to connect to. Should be called before connect. This is a public facing API inherited by application level public clients.\r\n\r\n    Syntax\r\n\r\n    myShadowClient.clearLastWill(\"random.iot.region.amazonaws.com\", 8883)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/191", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/191/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/191/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/191", "id": 417145304, "node_id": "MDU6SXNzdWU0MTcxNDUzMDQ=", "number": 191, "title": "Help wanted! Connect IOT Core Socket.error.", "user": {"login": "brilliantwf", "id": 15178811, "node_id": "MDQ6VXNlcjE1MTc4ODEx", "avatar_url": "https://avatars1.githubusercontent.com/u/15178811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brilliantwf", "html_url": "https://github.com/brilliantwf", "followers_url": "https://api.github.com/users/brilliantwf/followers", "following_url": "https://api.github.com/users/brilliantwf/following{/other_user}", "gists_url": "https://api.github.com/users/brilliantwf/gists{/gist_id}", "starred_url": "https://api.github.com/users/brilliantwf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brilliantwf/subscriptions", "organizations_url": "https://api.github.com/users/brilliantwf/orgs", "repos_url": "https://api.github.com/users/brilliantwf/repos", "events_url": "https://api.github.com/users/brilliantwf/events{/privacy}", "received_events_url": "https://api.github.com/users/brilliantwf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-05T06:54:06Z", "updated_at": "2020-05-18T00:05:47Z", "closed_at": "2020-05-18T00:05:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have problems making my raspberry pi subscribe to greengrass core using the discovery example. I have defined a greengrass group in IoT console.\r\nI run the basicDiscovery.py, configured GG Group and things on the iot core. And I hope it can connect with my iot core first,  then connect to the GG core if it can't connect IOT core. But as the following log prompts, I can't connect to the IOT core endpoint and prompt \"Socket error\",But it can still connect to local GG.\r\n\r\n2019-03-05 06:35:39,473 - AWSIoTPythonSDK.core.greengrass.discovery.providers - INFO - Starting discover request...\r\n2019-03-05 06:35:39,474 - AWSIoTPythonSDK.core.greengrass.discovery.providers - INFO - Endpoint: a18pXXX.iot.us-east-1.amazonaws.com:8443\r\n2019-03-05 06:35:39,475 - AWSIoTPythonSDK.core.greengrass.discovery.providers - INFO - Target thing: RasPi3\r\n2019-03-05 06:35:39,475 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Creating tcp connection...\r\n2019-03-05 06:35:39,852 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Creating ssl connection...\r\n2019-03-05 06:35:40,463 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Matching host name...\r\n2019-03-05 06:35:40,464 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Sending discover request: GET /greengrass/discover/thing/RasPi3 HTTP/1.1\r\nHost: a18pXXX-ats.iot.us-east-1.amazonaws.com:8443\r\n\r\n\r\n2019-03-05 06:35:40,465 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Receiving discover response header...\r\n2019-03-05 06:35:41,095 - AWSIoTPythonSDK.core.greengrass.discovery.providers - DEBUG - Receiving discover response body...\r\nDiscovered GGC: arn:aws:iot:us-east-1:54XXX66775:thing/HomepiRGB_Core from Group: e466123e-d570-40ee-9127-ef20bd5471bb\r\nNow we persist the connectivity/identity information...\r\nNow proceed to the connecting flow...\r\n2019-03-05 06:35:41,171 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Initializing MQTT layer...\r\n2019-03-05 06:35:41,173 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Registering internal event callbacks to MQTT layer...\r\n2019-03-05 06:35:41,174 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2019-03-05 06:35:41,175 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: RasPi3\r\n2019-03-05 06:35:41,175 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2019-03-05 06:35:41,176 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2019-03-05 06:35:41,177 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\nTrying to connect to core at fe80::5566:fe17:26a3:6811:8883\r\n2019-03-05 06:35:41,179 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n...\r\n2019-03-05 06:35:41,198 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Waiting for event consumer to completely stop\r\n2019-03-05 06:35:41,199 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Event consumer stopped\r\nError in connect!\r\nType: <class 'socket.error'>\r\nError message: \r\nTrying to connect to core at 127.0.0.1:8883", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/190", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/190/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/190/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/190", "id": 415044615, "node_id": "MDU6SXNzdWU0MTUwNDQ2MTU=", "number": 190, "title": "AWSIoTPythonSDK.exception.AWSIoTExceptions.DiscoveryDataNotFoundException", "user": {"login": "jovelcjose", "id": 27007440, "node_id": "MDQ6VXNlcjI3MDA3NDQw", "avatar_url": "https://avatars0.githubusercontent.com/u/27007440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jovelcjose", "html_url": "https://github.com/jovelcjose", "followers_url": "https://api.github.com/users/jovelcjose/followers", "following_url": "https://api.github.com/users/jovelcjose/following{/other_user}", "gists_url": "https://api.github.com/users/jovelcjose/gists{/gist_id}", "starred_url": "https://api.github.com/users/jovelcjose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jovelcjose/subscriptions", "organizations_url": "https://api.github.com/users/jovelcjose/orgs", "repos_url": "https://api.github.com/users/jovelcjose/repos", "events_url": "https://api.github.com/users/jovelcjose/events{/privacy}", "received_events_url": "https://api.github.com/users/jovelcjose/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-27T10:12:47Z", "updated_at": "2020-05-18T00:05:45Z", "closed_at": "2020-05-18T00:05:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to run basicdiscovery.py from my windows machine, my green grass core is installed within Raspberry, and i have attached 2 devices to the green grass group.\r\n\r\nwhen i run the  basicdiscovery.py with thingName HelloWorld_publisher, I get the following error.\r\n\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.DiscoveryDataNotFoundException\r\n\r\nPython version in windows is 3.7.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/189", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/189/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/189/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/189", "id": 414619640, "node_id": "MDU6SXNzdWU0MTQ2MTk2NDA=", "number": 189, "title": "Question regarding MQTT backoff logic", "user": {"login": "alexkohler", "id": 5650126, "node_id": "MDQ6VXNlcjU2NTAxMjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/5650126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexkohler", "html_url": "https://github.com/alexkohler", "followers_url": "https://api.github.com/users/alexkohler/followers", "following_url": "https://api.github.com/users/alexkohler/following{/other_user}", "gists_url": "https://api.github.com/users/alexkohler/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexkohler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexkohler/subscriptions", "organizations_url": "https://api.github.com/users/alexkohler/orgs", "repos_url": "https://api.github.com/users/alexkohler/repos", "events_url": "https://api.github.com/users/alexkohler/events{/privacy}", "received_events_url": "https://api.github.com/users/alexkohler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321351, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUx", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/response-requested", "name": "response-requested", "color": "666666", "default": false, "description": "Waiting on additional info and feedback. Will move to \"closing-soon\" in 7 days."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-26T13:47:38Z", "updated_at": "2020-03-09T21:28:58Z", "closed_at": "2020-03-09T21:28:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "While initializing [ProgressiveBackOffCore](https://github.com/aws/aws-iot-device-sdk-python/blob/master/AWSIoTPythonSDK/core/protocol/connection/cores.py#L66), `_currentBackoffTimeSecond` is initialized to 1, despite the comment saying it should be initialized to 0:\r\n\r\n```Python\r\n# Current backOff time in seconds, init to equal to 0\r\nself._currentBackoffTimeSecond = 1\r\n```\r\n\r\nMoreover, it looks like there's logic inside of `backOff` that relies on `_currentBackoffTimeSecond` being 0.\r\n```Python\r\nif self._currentBackoffTimeSecond == 0:\r\n    # This is the first attempt to connect, set it to base\r\n    self._currentBackoffTimeSecond = self._baseReconnectTimeSecond\r\n```\r\n\r\nBecause of this, it appears there is no way of configuring `_currentBackoffTimeSecond` until `_connectionStableThenResetBackoffTime` is called. Is this a bug, or am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/188", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/188/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/188/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/188", "id": 414112480, "node_id": "MDU6SXNzdWU0MTQxMTI0ODA=", "number": 188, "title": "AWS IOT Python Job agent freeze in connect method", "user": {"login": "Anbarasu2507", "id": 33948986, "node_id": "MDQ6VXNlcjMzOTQ4OTg2", "avatar_url": "https://avatars0.githubusercontent.com/u/33948986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anbarasu2507", "html_url": "https://github.com/Anbarasu2507", "followers_url": "https://api.github.com/users/Anbarasu2507/followers", "following_url": "https://api.github.com/users/Anbarasu2507/following{/other_user}", "gists_url": "https://api.github.com/users/Anbarasu2507/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anbarasu2507/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anbarasu2507/subscriptions", "organizations_url": "https://api.github.com/users/Anbarasu2507/orgs", "repos_url": "https://api.github.com/users/Anbarasu2507/repos", "events_url": "https://api.github.com/users/Anbarasu2507/events{/privacy}", "received_events_url": "https://api.github.com/users/Anbarasu2507/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-25T13:46:41Z", "updated_at": "2020-05-18T00:05:44Z", "closed_at": "2020-05-18T00:05:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm Using below AWS Job agent code to connect device with AWS for jobagent functionality.\r\n\r\n[https://github.com/aws/aws-iot-device-sdk-python](url)\r\n\r\nWhich is working as expected most of the time. But suddenly it struck in **connect()** method some times. So after this i cannot invoke job agent from AWS. I need to restart the jobagent program in device to get connection again (i'm using this jobagent as service in rasperypi)\r\n\r\nOnly reason i suspect is, Most of the time internet connection getting interrupted while getting connection (AWSIoTMQTTThingJobsClient).**program getting freeze in jobsClient.connect()** line.\r\n\r\nWhat i need to update in my code to avoid this problem. I'm using AWSIoTPythonSDK latest **version(1.4.3)**\r\n\r\n```\r\nwhile True:\r\n   try:\r\n    # to check internet availability before connect\r\n    if is_connected():\r\n        # Init AWSIoTMQTTClient\r\n        myAWSIoTMQTTClient = None\r\n        if useWebsocket:\r\n            myAWSIoTMQTTClient = AWSIoTMQTTClient(clientId, useWebsocket=True)\r\n            myAWSIoTMQTTClient.configureEndpoint(host, port)\r\n            myAWSIoTMQTTClient.configureCredentials(rootCAPath)\r\n        else:\r\n            myAWSIoTMQTTClient = AWSIoTMQTTClient(clientId)\r\n            myAWSIoTMQTTClient.configureEndpoint(host, port)\r\n            myAWSIoTMQTTClient.configureCredentials(rootCAPath, privateKeyPath, certificatePath)\r\n\r\n        # AWSIoTMQTTClient connection configuration\r\n        myAWSIoTMQTTClient.configureAutoReconnectBackoffTime(1, 32, 20)\r\n        myAWSIoTMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec\r\n        myAWSIoTMQTTClient.configureMQTTOperationTimeout(10)  # 5 sec\r\n\r\n        jobsClient = AWSIoTMQTTThingJobsClient(clientId, thingName, QoS=1, awsIoTMQTTClient=myAWSIoTMQTTClient)\r\n\r\n        jobsClient.connect()\r\n        jobsMsgProc = JobsMessageProcessor(jobsClient, clientId)\r\n        jobsMsgProc.processJobs()\r\n        while not jobsMsgProc.isDone():\r\n            time.sleep(2)\r\n    else:\r\n        print(\"Internet connection NA\")\r\n        time.sleep(60)\r\n  except (connectTimeoutException,publishTimeoutException,subscribeTimeoutException):\r\n    time.sleep(60)\r\n    try:\r\n        jobsClient.disconnect()\r\n    except:\r\n        pass\r\n  except Exception as e:\r\n    time.sleep(60)\r\n    try:\r\n        jobsClient.disconnect()\r\n    except:\r\n        pass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/187", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/187/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/187/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/187", "id": 413146085, "node_id": "MDU6SXNzdWU0MTMxNDYwODU=", "number": 187, "title": "Shadow callbacks not firing at all?", "user": {"login": "atyshka", "id": 19317207, "node_id": "MDQ6VXNlcjE5MzE3MjA3", "avatar_url": "https://avatars2.githubusercontent.com/u/19317207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atyshka", "html_url": "https://github.com/atyshka", "followers_url": "https://api.github.com/users/atyshka/followers", "following_url": "https://api.github.com/users/atyshka/following{/other_user}", "gists_url": "https://api.github.com/users/atyshka/gists{/gist_id}", "starred_url": "https://api.github.com/users/atyshka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atyshka/subscriptions", "organizations_url": "https://api.github.com/users/atyshka/orgs", "repos_url": "https://api.github.com/users/atyshka/repos", "events_url": "https://api.github.com/users/atyshka/events{/privacy}", "received_events_url": "https://api.github.com/users/atyshka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-21T22:07:35Z", "updated_at": "2019-04-06T00:39:32Z", "closed_at": "2019-02-26T14:13:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the example program that prints out updates to a shadow. Everything is configured correctly and I get no errors, but the callbacks never fire when the delta changes. I have confirmed in the AWS console that the delta topic is being published to. Any ideas why my callbacks won't work? Here's my output:\r\n```\r\n\r\n2019-02-21 16:59:39,526 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Initializing MQTT layer...\r\n2019-02-21 16:59:39,526 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Registering internal event callbacks to MQTT layer...\r\n2019-02-21 16:59:39,526 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2019-02-21 16:59:39,526 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: MobilityBase\r\n2019-02-21 16:59:39,526 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2019-02-21 16:59:39,526 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queueing: max queue size: 0\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queue draining interval: 0.100000 sec\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring reconnect back off timing...\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Base quiet time: 1.000000 sec\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Max quiet time: 32.000000 sec\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Stable connection time: 20.000000 sec\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 5.000000 sec\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2019-02-21 16:59:39,527 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2019-02-21 16:59:39,528 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\n2019-02-21 16:59:39,528 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\n2019-02-21 16:59:39,528 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n2019-02-21 16:59:39,700 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Starting network I/O thread...\r\n2019-02-21 16:59:39,771 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [connack] event\r\n2019-02-21 16:59:39,772 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [connack] event\r\n2019-02-21 16:59:39,772 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - No need for recovery\r\n2019-02-21 16:59:39,772 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2019-02-21 16:59:39,814 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync subscribe...\r\n2019-02-21 16:59:39,815 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Adding a new subscription record: $aws/things/MobilityBase/shadow/update/delta qos: 0\r\n2019-02-21 16:59:39,815 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in custom suback event callback...\r\n2019-02-21 16:59:39,858 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [suback] event\r\n2019-02-21 16:59:39,861 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [suback] event\r\n2019-02-21 16:59:39,861 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2019-02-21 16:59:39,862 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - This custom event callback is for pub/sub/unsub, removing it after invocation...\r\n2019-02-21 16:59:41,881 - AWSIoTPythonSDK.core.shadow.deviceShadow - INFO - Subscribed to delta topic for deviceShadow: MobilityBase\r\n2019-02-21 16:59:59,772 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - stableConnection: Resetting the backoff time to: 1 sec.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/186", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/186/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/186/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/186", "id": 399078911, "node_id": "MDU6SXNzdWUzOTkwNzg5MTE=", "number": 186, "title": "AWS MQTT client takes several hours to recover from network outage", "user": {"login": "bruno-beloff", "id": 22253699, "node_id": "MDQ6VXNlcjIyMjUzNjk5", "avatar_url": "https://avatars0.githubusercontent.com/u/22253699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-beloff", "html_url": "https://github.com/bruno-beloff", "followers_url": "https://api.github.com/users/bruno-beloff/followers", "following_url": "https://api.github.com/users/bruno-beloff/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-beloff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-beloff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-beloff/subscriptions", "organizations_url": "https://api.github.com/users/bruno-beloff/orgs", "repos_url": "https://api.github.com/users/bruno-beloff/repos", "events_url": "https://api.github.com/users/bruno-beloff/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-beloff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}], "state": "closed", "locked": false, "assignee": {"login": "justinboswell", "id": 3382222, "node_id": "MDQ6VXNlcjMzODIyMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3382222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justinboswell", "html_url": "https://github.com/justinboswell", "followers_url": "https://api.github.com/users/justinboswell/followers", "following_url": "https://api.github.com/users/justinboswell/following{/other_user}", "gists_url": "https://api.github.com/users/justinboswell/gists{/gist_id}", "starred_url": "https://api.github.com/users/justinboswell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justinboswell/subscriptions", "organizations_url": "https://api.github.com/users/justinboswell/orgs", "repos_url": "https://api.github.com/users/justinboswell/repos", "events_url": "https://api.github.com/users/justinboswell/events{/privacy}", "received_events_url": "https://api.github.com/users/justinboswell/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "justinboswell", "id": 3382222, "node_id": "MDQ6VXNlcjMzODIyMjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3382222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justinboswell", "html_url": "https://github.com/justinboswell", "followers_url": "https://api.github.com/users/justinboswell/followers", "following_url": "https://api.github.com/users/justinboswell/following{/other_user}", "gists_url": "https://api.github.com/users/justinboswell/gists{/gist_id}", "starred_url": "https://api.github.com/users/justinboswell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justinboswell/subscriptions", "organizations_url": "https://api.github.com/users/justinboswell/orgs", "repos_url": "https://api.github.com/users/justinboswell/repos", "events_url": "https://api.github.com/users/justinboswell/events{/privacy}", "received_events_url": "https://api.github.com/users/justinboswell/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-01-14T21:22:42Z", "updated_at": "2019-01-30T00:56:46Z", "closed_at": "2019-01-30T00:56:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an application that incorporates an AWS MQTT client, using the AWSIoTPythonSDK. For the most part, it performs well. \r\n\r\nThere is one problem: if the network is unavailable for a long period of time, then the client takes several hours to regain connectivity. For example, if a router is switched off at 5pm and only restored at 9am the next day, then the client will continue to fail to reconnect for around six hours. \r\n\r\nThis is easy to test: let's say the router goes back on at 9am. I can ssh to my device at 9am, and watch its syslog (the devices are typically BeagleBones running Debian). The client process will continue to fail to publish for many hours, then eventually succeed. At this point, our data backlog is progressively published.\r\n\r\nSettings are:\r\n```\r\n    __KEEP_ALIVE_INTERVAL =         600                     # recommended: 30 default: 600 (sec)\r\n\r\n    __PORT =                        8883\r\n\r\n    __QUEUE_SIZE =                  -1                      # recommended: infinite\r\n    __QUEUE_DROP_BEHAVIOUR =        MQTTLib.DROP_OLDEST     # not required for infinite queue\r\n    __QUEUE_DRAINING_FREQUENCY =    2                       # recommended: 2 (Hz)\r\n\r\n    __RECONN_BASE =                 1                       # recommended: 1 (sec)\r\n    __RECONN_MAX =                  128                     # recommended: 32 or 128 (sec)\r\n    __RECONN_STABLE =               20                      # recommended: 20 (sec)\r\n\r\n    __DISCONNECT_TIMEOUT =          10                      # recommended: 10 (sec)\r\n    __OPERATION_TIMEOUT =           10                      # recommended: 5 (sec)\r\n\r\n    __PUB_QOS =                     1\r\n    __SUB_QOS =                     1\r\n```\r\n\r\nSource code is at: \r\nhttps://github.com/south-coast-science/scs_core/blob/develop/src/scs_core/aws/client/mqtt_client.py\r\n\r\nIf the network outage is short (a few minutes) the client recovers quickly. If the outage is long (hours) the recovery is extremely slow.\r\n\r\nHas anyone else experienced this?\r\n\r\nAWSIoTPythonSDK version is 1.4.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/185", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/185/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/185/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/185", "id": 398667860, "node_id": "MDU6SXNzdWUzOTg2Njc4NjA=", "number": 185, "title": "Using MQTT Client in a Lambda", "user": {"login": "claytantor", "id": 407854, "node_id": "MDQ6VXNlcjQwNzg1NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/407854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claytantor", "html_url": "https://github.com/claytantor", "followers_url": "https://api.github.com/users/claytantor/followers", "following_url": "https://api.github.com/users/claytantor/following{/other_user}", "gists_url": "https://api.github.com/users/claytantor/gists{/gist_id}", "starred_url": "https://api.github.com/users/claytantor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claytantor/subscriptions", "organizations_url": "https://api.github.com/users/claytantor/orgs", "repos_url": "https://api.github.com/users/claytantor/repos", "events_url": "https://api.github.com/users/claytantor/events{/privacy}", "received_events_url": "https://api.github.com/users/claytantor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-13T15:22:33Z", "updated_at": "2019-05-23T17:32:05Z", "closed_at": "2019-05-23T17:32:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey All,\r\nThis could be a \"help wanted\" issue, or it may be a bug so if someone has done this before and knows its not a bug tell me and  I will reissue.\r\n\r\nI have written a simple publish client intended to be run in a lambda, happy to share:\r\n\r\nhttps://gist.github.com/claytantor/d76c893e97b5c7031523e0f380454c90 \r\n\r\n```\r\ndef initIOT(config):\r\n    myMQTTClient = AWSIoTMQTTClient(config['iot']['iot_id'])\r\n    myMQTTClient.configureEndpoint(config['iot']['mqqt_endpoint'], 8883)\r\n    myMQTTClient.configureCredentials(\r\n        make_fullpath(config['iot']['credentials']['root_ca_path']),\r\n        make_fullpath(config['iot']['credentials']['private_key_path']),\r\n        make_fullpath(config['iot']['credentials']['cert_path']))\r\n\r\n    #myMQTTClient connection configuration\r\n    myMQTTClient.configureAutoReconnectBackoffTime(1, 32, 20)\r\n    myMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing\r\n    myMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz\r\n    myMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec\r\n    myMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec\r\n    # Connect and subscribe to AWS IoT\r\n    myMQTTClient.connect()\r\n    return myMQTTClient\r\n```\r\nand a publish method\r\n\r\n```\r\ndef publish(myMQTTClient, config, messageModel):\r\n    print(\"publishing message to topic:{0}\".format(config['iot']['mqqt_led_message_topic']))\r\n    messageJson = json.dumps(messageModel)\r\n    myMQTTClient.publish(config['iot']['mqqt_led_message_topic'], messageJson, 1)\r\n    print('Published topic %s: %s\\n' % (config['iot']['mqqt_led_message_topic'], messageJson))\r\n\r\n```\r\nmy configs:\r\n\r\n```\r\n  iot:\r\n      iot_id: claytantor-flashlexpi32-1\r\n      mqqt_endpoint: unique-ats.iot.us-east-1.amazonaws.com\r\n      mqqt_port: 8883\r\n      mqqt_led_message_topic: ledticker-iot-message-dev\r\n      credentials:\r\n          root_ca_path: keys/AmazonRootCA1.pem\r\n          private_key_path: keys/unique-private.pem.key\r\n          cert_path: keys/unique-certificate.pem.crt\r\n```\r\nThe intention is to allow the Lambda to send messages to the IOT device which is subscribed to the same MQTT queue.\r\n\r\nThe issue is that both the Lambda and the PI work for the first period of initialization, and then when the period ends they stop interacting. My backoff settings seem to be realistic and I would expect that both attempt to reconnect, but they seem to just stop working. I am guessing that either there is something about the Lambda and the way it works internally that causes this or that I have the backoff misconfigured on the PI, or both. \r\n\r\nAny insight is appreciated.\r\n\r\nClay", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/184", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/184/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/184/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/184", "id": 395200457, "node_id": "MDU6SXNzdWUzOTUyMDA0NTc=", "number": 184, "title": "certificate verify failed: unable to get local issuer certificate (_ssl.c:1045)", "user": {"login": "jackygao2018", "id": 43338537, "node_id": "MDQ6VXNlcjQzMzM4NTM3", "avatar_url": "https://avatars0.githubusercontent.com/u/43338537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackygao2018", "html_url": "https://github.com/jackygao2018", "followers_url": "https://api.github.com/users/jackygao2018/followers", "following_url": "https://api.github.com/users/jackygao2018/following{/other_user}", "gists_url": "https://api.github.com/users/jackygao2018/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackygao2018/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackygao2018/subscriptions", "organizations_url": "https://api.github.com/users/jackygao2018/orgs", "repos_url": "https://api.github.com/users/jackygao2018/repos", "events_url": "https://api.github.com/users/jackygao2018/events{/privacy}", "received_events_url": "https://api.github.com/users/jackygao2018/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-02T10:12:52Z", "updated_at": "2019-01-07T20:40:18Z", "closed_at": "2019-01-07T20:40:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello All,\r\n\r\nI've got the following error log that worked fine at last few days of 2018 when I tried to connect to AWSIOT today.\r\nI'm running on MAC and I'm using Python 3.7 (OpenSSL 1.0.2q  20 Nov 2018).\r\nAnd i am using IAM credentials.\r\nAnd I am using the CA in this link: https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem\r\nCan anyone help me to resolve this issue? Many thanks in advance!\r\n\r\n**The error logs are as following:**\r\nTraceback (most recent call last):\r\n\r\n    self.myAWSIoTMQTTClient.connect()\r\n  File \"/Users/jgao/Library/Python/3.7/lib/python/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/Users/jgao/Library/Python/3.7/lib/python/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/Users/jgao/Library/Python/3.7/lib/python/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\n  File \"/Users/jgao/Library/Python/3.7/lib/python/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 207, in connect_async\r\n    rc = self._internal_async_client.connect(keep_alive_sec, ack_callback)\r\n  File \"/Users/jgao/Library/Python/3.7/lib/python/site-packages/AWSIoTPythonSDK/core/protocol/internal/clients.py\", line 119, in connect\r\n    rc = self._paho_client.connect(host, port, keep_alive_sec)\r\n  File \"/Users/jgao/Library/Python/3.7/lib/python/site-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 664, in connect\r\n    return self.reconnect()\r\n  File \"/Users/jgao/Library/Python/3.7/lib/python/site-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 797, in reconnect\r\n    rawSSL = ssl.wrap_socket(sock, ca_certs=self._tls_ca_certs, cert_reqs=ssl.CERT_REQUIRED)  # Add server certificate verification\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\", line 1213, in wrap_socket\r\n    suppress_ragged_eofs=suppress_ragged_eofs\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\", line 412, in wrap_socket\r\n    session=session\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\", line 850, in _create\r\n    self.do_handshake()\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py\", line 1108, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1045)\r\n\r\nProcess finished with exit code 1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/183", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/183/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/183/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/183", "id": 394743502, "node_id": "MDU6SXNzdWUzOTQ3NDM1MDI=", "number": 183, "title": "Can I return customCallback() to a global variable?", "user": {"login": "Juanpsd1224", "id": 46231665, "node_id": "MDQ6VXNlcjQ2MjMxNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/46231665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Juanpsd1224", "html_url": "https://github.com/Juanpsd1224", "followers_url": "https://api.github.com/users/Juanpsd1224/followers", "following_url": "https://api.github.com/users/Juanpsd1224/following{/other_user}", "gists_url": "https://api.github.com/users/Juanpsd1224/gists{/gist_id}", "starred_url": "https://api.github.com/users/Juanpsd1224/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Juanpsd1224/subscriptions", "organizations_url": "https://api.github.com/users/Juanpsd1224/orgs", "repos_url": "https://api.github.com/users/Juanpsd1224/repos", "events_url": "https://api.github.com/users/Juanpsd1224/events{/privacy}", "received_events_url": "https://api.github.com/users/Juanpsd1224/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-29T00:31:23Z", "updated_at": "2018-12-31T18:04:43Z", "closed_at": "2018-12-31T18:04:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to return a message payload from customCallback(client, userdata, message) function into a global variable to be used in IF statement inside a While loop, but I haven't success. Is it posible?\r\n\r\nI use json.loads(message.payload) function to convert JSON format from AWS IoT.\r\n\r\n![screenshot_41](https://user-images.githubusercontent.com/46231665/50531399-0c2c7f80-0ad7-11e9-90db-11fd82705f90.png)\r\n\r\nRegards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/182", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/182/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/182/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/182", "id": 394535219, "node_id": "MDU6SXNzdWUzOTQ1MzUyMTk=", "number": 182, "title": "a problem of RPI accessing greengrass core,please help", "user": {"login": "northeusunshine", "id": 40818211, "node_id": "MDQ6VXNlcjQwODE4MjEx", "avatar_url": "https://avatars1.githubusercontent.com/u/40818211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/northeusunshine", "html_url": "https://github.com/northeusunshine", "followers_url": "https://api.github.com/users/northeusunshine/followers", "following_url": "https://api.github.com/users/northeusunshine/following{/other_user}", "gists_url": "https://api.github.com/users/northeusunshine/gists{/gist_id}", "starred_url": "https://api.github.com/users/northeusunshine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/northeusunshine/subscriptions", "organizations_url": "https://api.github.com/users/northeusunshine/orgs", "repos_url": "https://api.github.com/users/northeusunshine/repos", "events_url": "https://api.github.com/users/northeusunshine/events{/privacy}", "received_events_url": "https://api.github.com/users/northeusunshine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-28T03:09:16Z", "updated_at": "2020-05-18T00:05:42Z", "closed_at": "2020-05-18T00:05:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I follow the aws greengrass developer guide to build edge system.\r\nI finished correctly settintg up RPI access AWS IOT cloud as greengrass core.\r\nthen i want to use another RPI to connect with RPI greengress core.\r\nI do as the instruction in official guide. but i encounted the following error info with I run helloworld publisher python command:\r\nAWSIoTPythonSDK.core.protocal.internal.workers - DEBUG -Processed offline publish request\r\nAWSIoTPythonSDK.core.protocal.mqttcore - INFO-Performing sync publish...\r\nAWSIoTPythonSDK.core.protocal.mqttcore - INFO-offline request detected\r\nAWSIoTPythonSDK.core.protocal.internal.queunes- DEBUG -append: Add new element: <xxxx>\r\nPublished topic hello/world/pubsub: {\"message\": \"hello, world! sent form HelloWorld_Publisher\", \"sequence\":3}\r\nAfter a while the process will terminated itself.\r\n\r\nPlease help provide some suggestions how to reslove it.\r\n\r\nMany thanks\r\nJACK\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/181", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/181/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/181/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/181", "id": 390845066, "node_id": "MDU6SXNzdWUzOTA4NDUwNjY=", "number": 181, "title": "LWT", "user": {"login": "kossumov", "id": 8853887, "node_id": "MDQ6VXNlcjg4NTM4ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8853887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kossumov", "html_url": "https://github.com/kossumov", "followers_url": "https://api.github.com/users/kossumov/followers", "following_url": "https://api.github.com/users/kossumov/following{/other_user}", "gists_url": "https://api.github.com/users/kossumov/gists{/gist_id}", "starred_url": "https://api.github.com/users/kossumov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kossumov/subscriptions", "organizations_url": "https://api.github.com/users/kossumov/orgs", "repos_url": "https://api.github.com/users/kossumov/repos", "events_url": "https://api.github.com/users/kossumov/events{/privacy}", "received_events_url": "https://api.github.com/users/kossumov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-13T20:23:23Z", "updated_at": "2018-12-13T22:01:46Z", "closed_at": "2018-12-13T21:19:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to send LWT?\r\nIs there an example?\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/180", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/180/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/180/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/180", "id": 390662679, "node_id": "MDU6SXNzdWUzOTA2NjI2Nzk=", "number": 180, "title": "provisioning_device_client_sample.py : Msg: Invalid certificate", "user": {"login": "dineshTheCoder", "id": 32160605, "node_id": "MDQ6VXNlcjMyMTYwNjA1", "avatar_url": "https://avatars3.githubusercontent.com/u/32160605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dineshTheCoder", "html_url": "https://github.com/dineshTheCoder", "followers_url": "https://api.github.com/users/dineshTheCoder/followers", "following_url": "https://api.github.com/users/dineshTheCoder/following{/other_user}", "gists_url": "https://api.github.com/users/dineshTheCoder/gists{/gist_id}", "starred_url": "https://api.github.com/users/dineshTheCoder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dineshTheCoder/subscriptions", "organizations_url": "https://api.github.com/users/dineshTheCoder/orgs", "repos_url": "https://api.github.com/users/dineshTheCoder/repos", "events_url": "https://api.github.com/users/dineshTheCoder/events{/privacy}", "received_events_url": "https://api.github.com/users/dineshTheCoder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-13T12:44:44Z", "updated_at": "2020-05-18T00:05:41Z", "closed_at": "2020-05-18T00:05:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Objective : \r\n==========================================================**\r\ntrying to provision device using iot dps service \r\n\r\n**platform:\r\n==========================================================**\r\npython version: 2.7x\r\nOS : raspbian\r\nboard: raspberry pi \r\nsdk : azure iot python sdk , azure iot C sdk\r\n\r\n\r\n\r\n**process followed:\r\n===============================================================================**\r\n\r\nI've generated root and intermediate as per below link\r\nhttps://github.com/Azure/azure-iot-sdk-c/blob/master/tools/CACertificates/CACertificateOverview.md\r\n\r\n\r\n1)\r\nsudo bash certGen.sh create_root_and_intermediate\r\n\r\n(uploaded generated root CA in certificates section of  my IoT Hub DPS instance)\r\n\r\n\r\n\r\n2)sudo bash certGen.sh create_verification_certificate DE8D1B460D1D254D9326B1C69B8B5DC18D2BD7DBD459406C\r\n\r\n(uploaded verification certificate to verify the above root ca and successfully got verified)\r\n\r\n3)sudo bash certGen.sh create_device_certificate riot-device-cert\r\n\r\ngenerated leaf certificate with CN=riot-device-cert , and added this cert in my individual enrolment of  my IoT Hub DPS instance\r\n\r\n\r\n\r\n4) copied Scopeid and global url into the appropriate sections of this below file\r\nazure-iot-sdk-python/provisioning_device_client/samples/provisioning_device_client_sample.py\r\n\r\n5)run provisioning_device_client_sample.py\r\n\r\n\r\n\r\n\r\n\r\n**Error: \"Invalid certificate\"\r\n===========================================================**\r\nError: Time:Thu Dec 13 17:50:34 2018 File:/usr/sdk/src/c/provisioning_client/src/prov_device_ll_client.c Func:prov_transport_process_json_reply Line:459 Provisioning Failure: OperationId: 4.87f7851aaaa18ed1.553f733e-83de-4460-9759-9c9f5a690233 - Date: 2018-12-13T12:20:31.734432Z - Msg: Invalid certificate\r\nError: Time:Thu Dec 13 17:50:34 2018 File:/usr/sdk/src/c/provisioning_client/src/prov_transport_http_client.c Func:prov_transport_http_dowork Line:922 _Unable to process registration reply_.\r\nError: Time:Thu Dec 13 17:50:34 2018 File:/usr/sdk/src/c/provisioning_client/src/prov_device_ll_client.c Func:on_transport_registration_data Line:552 Failure retrieving data from the provisioning service\r\n\r\nRegister device callback: \r\n   register_result = DEV_AUTH_ERROR\r\n   iothub_uri = None\r\n   user_context = None\r\n\r\nDevice registration failed!\r\n\r\n\r\n**My queries\r\n===============================================================**\r\n- How does this program cross verify certificate details against individual enrolment of my iotHub dps instnace  as this program does not seem to take any cert as input, I guess this is the reason why I'm getting error as \"Invalid certificate\"\r\n\r\n- I see the same program in java sdk accepts x509 cert details, but python sdk does not . Why ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/179", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/179/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/179/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/179", "id": 390622307, "node_id": "MDU6SXNzdWUzOTA2MjIzMDc=", "number": 179, "title": "ValueError: Websocket Handshake Error", "user": {"login": "ravipipaliya", "id": 17349714, "node_id": "MDQ6VXNlcjE3MzQ5NzE0", "avatar_url": "https://avatars3.githubusercontent.com/u/17349714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ravipipaliya", "html_url": "https://github.com/ravipipaliya", "followers_url": "https://api.github.com/users/ravipipaliya/followers", "following_url": "https://api.github.com/users/ravipipaliya/following{/other_user}", "gists_url": "https://api.github.com/users/ravipipaliya/gists{/gist_id}", "starred_url": "https://api.github.com/users/ravipipaliya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ravipipaliya/subscriptions", "organizations_url": "https://api.github.com/users/ravipipaliya/orgs", "repos_url": "https://api.github.com/users/ravipipaliya/repos", "events_url": "https://api.github.com/users/ravipipaliya/events{/privacy}", "received_events_url": "https://api.github.com/users/ravipipaliya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-13T10:51:15Z", "updated_at": "2020-05-18T00:05:39Z", "closed_at": "2020-05-18T00:05:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI am trying to make connection to AWS IoT with Websocket using below code from raspberry pi.\r\n\r\n```\r\n# Import SDK packages\r\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\r\n\r\n# For certificate based connection\r\n# For Websocket connection\r\nmyMQTTClient = AWSIoTMQTTClient(\"basicPubSub\", useWebsocket=True)\r\n# Configurations\r\n# For Websocket\r\nmyMQTTClient.configureEndpoint(\"xxx-southeast-1.amazonaws.com\", 443)\r\n# For Websocket, we only need to configure the root CA\r\nmyMQTTClient.configureCredentials(\"./certs/root-CA.crt\")\r\nmyMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing\r\nmyMQTTClient.configureDrainingFrequency(20)  # Draining: 2 Hz\r\nmyMQTTClient.configureConnectDisconnectTimeout(1)  # 10 sec\r\nmyMQTTClient.configureMQTTOperationTimeout(50)  # 5 sec\r\n\r\nprint(\"Initiating connection\")\r\nmyMQTTClient.connect(60)\r\nprint(\"Connected\")\r\nmyMQTTClient.publish(\"myTopic\", \"myPayload\", 0)\r\nprint(\"Published\")\r\nmyMQTTClient.subscribe(\"myTopic\", 1, customCallback)\r\nprint(\"Subscribing\")\r\nmyMQTTClient.unsubscribe(\"myTopic\")\r\nprint(\"unsubscribing\")\r\nmyMQTTClient.disconnect()\r\nprint(\"Disconnecting\")\r\n```\r\n\r\nI am getting below error when i try to run the code over Wifi. However when i connect LAN cable without disconnecting WiFi the code works. Now even if i remove LAN cable the code work on Wifi unless i restart the pi.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"mainFileTest.py\", line 22, in <module>\r\n    myMQTTClient.connect(60)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\nValueError: Websocket Handshake Error\r\n```\r\nThings i have checked:\r\n1. The Wifi strength is good\r\n2. SSL works fine on Wifi\r\n3. Used a different pi\r\n\r\nSpecs\r\n1. Python version 2.7.9\r\n2. AWSIoTPythonSDK==1.4.2\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/178", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/178/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/178/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/178", "id": 389168318, "node_id": "MDU6SXNzdWUzODkxNjgzMTg=", "number": 178, "title": "Help wanted! something about mqtt configuration ", "user": {"login": "acdart", "id": 17796156, "node_id": "MDQ6VXNlcjE3Nzk2MTU2", "avatar_url": "https://avatars2.githubusercontent.com/u/17796156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acdart", "html_url": "https://github.com/acdart", "followers_url": "https://api.github.com/users/acdart/followers", "following_url": "https://api.github.com/users/acdart/following{/other_user}", "gists_url": "https://api.github.com/users/acdart/gists{/gist_id}", "starred_url": "https://api.github.com/users/acdart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acdart/subscriptions", "organizations_url": "https://api.github.com/users/acdart/orgs", "repos_url": "https://api.github.com/users/acdart/repos", "events_url": "https://api.github.com/users/acdart/events{/privacy}", "received_events_url": "https://api.github.com/users/acdart/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-10T07:13:15Z", "updated_at": "2020-05-18T00:05:38Z", "closed_at": "2020-05-18T00:05:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, how can i create a device use just mqtt to interact with greengrass. \r\nis the thingarn a must?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/177", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/177/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/177/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/177", "id": 388024045, "node_id": "MDU6SXNzdWUzODgwMjQwNDU=", "number": 177, "title": "Published data not visible in AWS MQTT Client Subscribe Interface", "user": {"login": "kani04", "id": 9985777, "node_id": "MDQ6VXNlcjk5ODU3Nzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/9985777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kani04", "html_url": "https://github.com/kani04", "followers_url": "https://api.github.com/users/kani04/followers", "following_url": "https://api.github.com/users/kani04/following{/other_user}", "gists_url": "https://api.github.com/users/kani04/gists{/gist_id}", "starred_url": "https://api.github.com/users/kani04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kani04/subscriptions", "organizations_url": "https://api.github.com/users/kani04/orgs", "repos_url": "https://api.github.com/users/kani04/repos", "events_url": "https://api.github.com/users/kani04/events{/privacy}", "received_events_url": "https://api.github.com/users/kani04/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-06T02:00:18Z", "updated_at": "2020-05-13T00:31:50Z", "closed_at": "2020-05-13T00:31:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/176", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/176/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/176/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/176", "id": 384061061, "node_id": "MDU6SXNzdWUzODQwNjEwNjE=", "number": 176, "title": "Help with cretificate", "user": {"login": "NSLog0", "id": 1640817, "node_id": "MDQ6VXNlcjE2NDA4MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1640817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NSLog0", "html_url": "https://github.com/NSLog0", "followers_url": "https://api.github.com/users/NSLog0/followers", "following_url": "https://api.github.com/users/NSLog0/following{/other_user}", "gists_url": "https://api.github.com/users/NSLog0/gists{/gist_id}", "starred_url": "https://api.github.com/users/NSLog0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NSLog0/subscriptions", "organizations_url": "https://api.github.com/users/NSLog0/orgs", "repos_url": "https://api.github.com/users/NSLog0/repos", "events_url": "https://api.github.com/users/NSLog0/events{/privacy}", "received_events_url": "https://api.github.com/users/NSLog0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-25T09:02:14Z", "updated_at": "2018-11-26T03:24:26Z", "closed_at": "2018-11-26T03:24:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can anybody tell me which certificate should I use in this following code \r\n\r\n`myMQTTClient.configureCredentials(\"YOUR/ROOT/CA/PATH\", \"PRIVATE/KEY/PATH\", \"CERTIFICATE/PATH\")`\r\n\r\nI've generated the certificate follow by [aws docs](https://docs.aws.amazon.com/iot/latest/developerguide/device-certs-your-own.html) and I got these files \r\n\r\n<img width=\"721\" alt=\"screen shot 2561-11-25 at 15 55 58\" src=\"https://user-images.githubusercontent.com/1640817/48977322-a6f60080-f0ca-11e8-941d-cb3aed6fe7bd.png\">\r\n\r\n\r\nI'm so confused about X.509 certificate method; Please give me some advice", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/175", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/175/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/175/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/175", "id": 383556732, "node_id": "MDU6SXNzdWUzODM1NTY3MzI=", "number": 175, "title": "basicPubSub.py  - ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)", "user": {"login": "brendonshaw", "id": 6980333, "node_id": "MDQ6VXNlcjY5ODAzMzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6980333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendonshaw", "html_url": "https://github.com/brendonshaw", "followers_url": "https://api.github.com/users/brendonshaw/followers", "following_url": "https://api.github.com/users/brendonshaw/following{/other_user}", "gists_url": "https://api.github.com/users/brendonshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendonshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendonshaw/subscriptions", "organizations_url": "https://api.github.com/users/brendonshaw/orgs", "repos_url": "https://api.github.com/users/brendonshaw/repos", "events_url": "https://api.github.com/users/brendonshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/brendonshaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-22T14:23:13Z", "updated_at": "2020-08-13T22:48:49Z", "closed_at": "2020-08-13T22:48:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been trying to get the basicPubSub.py script to work using Python 2.7 and Python 3.6 but keep getting the following error condition:\r\n\r\n2018-11-22 14:00:58,477 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Initializing MQTT layer...\r\n2018-11-22 14:00:58,484 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Registering internal event callbacks to MQTT layer...\r\n2018-11-22 14:00:58,487 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2018-11-22 14:00:58,489 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: basicPubSub\r\n2018-11-22 14:00:58,491 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2018-11-22 14:00:58,493 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: SigV4 WebSocket\r\n2018-11-22 14:00:58,496 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2018-11-22 14:00:58,498 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\n2018-11-22 14:00:58,500 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring reconnect back off timing...\r\n2018-11-22 14:00:58,502 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Base quiet time: 1.000000 sec\r\n2018-11-22 14:00:58,505 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Max quiet time: 32.000000 sec\r\n2018-11-22 14:00:58,507 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Stable connection time: 20.000000 sec\r\n2018-11-22 14:00:58,509 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queueing: max queue size: -1\r\n2018-11-22 14:00:58,512 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queue draining interval: 0.500000 sec\r\n2018-11-22 14:00:58,515 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\n2018-11-22 14:00:58,517 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 5.000000 sec\r\n2018-11-22 14:00:58,520 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2018-11-22 14:00:58,522 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2018-11-22 14:00:58,524 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2018-11-22 14:00:58,529 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\n2018-11-22 14:00:58,531 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\n2018-11-22 14:00:58,533 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n2018-11-22 14:00:58,845 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Cleaning up before stopping event consuming\r\n2018-11-22 14:00:58,848 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event queue cleared\r\n2018-11-22 14:00:58,851 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Stopping network I/O thread...\r\n2018-11-22 14:00:58,854 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Exiting dispatching loop...\r\n2018-11-22 14:00:58,854 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Network thread stopped\r\n2018-11-22 14:00:58,859 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event callbacks cleared\r\n2018-11-22 14:00:58,861 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread stopped\r\n2018-11-22 14:00:58,863 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Waiting for event consumer to completely stop\r\n2018-11-22 14:00:58,865 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Event consumer stopped\r\nTraceback (most recent call last):\r\n  File \"basicPubSub.py\", line 113, in <module>\r\n    myAWSIoTMQTTClient.connect()\r\n  File \"/home/pi/Documents/brendon/awsiot/aws-iot-device-sdk-python/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/home/pi/Documents/brendon/awsiot/aws-iot-device-sdk-python/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/home/pi/Documents/brendon/awsiot/aws-iot-device-sdk-python/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\nssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)\r\n\r\nI am using the Amazon Root CA 1 for the CA certificate and generated the device and private certification.  \r\n\r\nWhen I save the certificates does the file need to be saved in a certain format, as I have repeated several times and cannot fix this issue. I tried this open ssl check, but returned the following error\r\n\r\nopenssl s_client -connect custom_endpoint.iot.us-east-1.amazonaws.com:8443 -CAfile ca.pem -cert cert.pem -key perm.pem\r\n\r\n3070070784:error:20087002:BIO routines:BIO_lookup:system lib:../crypto/bio/b_addr.c:693:Name or service not known\r\nconnect:errno=2\r\n\r\n \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/174", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/174/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/174/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/174", "id": 382951427, "node_id": "MDU6SXNzdWUzODI5NTE0Mjc=", "number": 174, "title": "v1.4.2 isn't available on pypi", "user": {"login": "zpetterd", "id": 1893622, "node_id": "MDQ6VXNlcjE4OTM2MjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1893622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zpetterd", "html_url": "https://github.com/zpetterd", "followers_url": "https://api.github.com/users/zpetterd/followers", "following_url": "https://api.github.com/users/zpetterd/following{/other_user}", "gists_url": "https://api.github.com/users/zpetterd/gists{/gist_id}", "starred_url": "https://api.github.com/users/zpetterd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zpetterd/subscriptions", "organizations_url": "https://api.github.com/users/zpetterd/orgs", "repos_url": "https://api.github.com/users/zpetterd/repos", "events_url": "https://api.github.com/users/zpetterd/events{/privacy}", "received_events_url": "https://api.github.com/users/zpetterd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-21T04:31:36Z", "updated_at": "2019-01-07T20:48:36Z", "closed_at": "2019-01-07T20:48:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The latest release hasn't been published to pypi see https://pypi.org/project/AWSIoTPythonSDK/#history\r\n\r\nIt would be good to get it updated as the last release addresses some bugs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/173", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/173/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/173/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/173", "id": 376090571, "node_id": "MDU6SXNzdWUzNzYwOTA1NzE=", "number": 173, "title": "AWS IoT - RPi connectivity error - No handlers could be found for logger \"AWSIoTPythonSDK.core.protocol.mqtt_core", "user": {"login": "gowribkomanduri", "id": 44650187, "node_id": "MDQ6VXNlcjQ0NjUwMTg3", "avatar_url": "https://avatars0.githubusercontent.com/u/44650187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gowribkomanduri", "html_url": "https://github.com/gowribkomanduri", "followers_url": "https://api.github.com/users/gowribkomanduri/followers", "following_url": "https://api.github.com/users/gowribkomanduri/following{/other_user}", "gists_url": "https://api.github.com/users/gowribkomanduri/gists{/gist_id}", "starred_url": "https://api.github.com/users/gowribkomanduri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gowribkomanduri/subscriptions", "organizations_url": "https://api.github.com/users/gowribkomanduri/orgs", "repos_url": "https://api.github.com/users/gowribkomanduri/repos", "events_url": "https://api.github.com/users/gowribkomanduri/events{/privacy}", "received_events_url": "https://api.github.com/users/gowribkomanduri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-31T17:58:08Z", "updated_at": "2020-05-18T00:05:36Z", "closed_at": "2020-05-18T00:05:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have written a python code to ingest Ultrasonic sensor data into AWS IoT through RPi controller. The code runs fine for initial 10 to 15 values on AWS IoT and then i get a error in python interprettor as:\r\nNo handlers could be found for logger \"AWSIoTPythonSDK.core.protocol.mqtt_core\"\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/pi/KesteIoTDemo20181027/RPi_Ultrasonic_AWSIoT\", line 68, in <module>\r\n    mqttConfiguration()\r\n  File \"/home/pi/KesteIoTDemo20181027/RPi_Ultrasonic_AWSIoT\", line 57, in mqttConfiguration\r\n    myMQTTClient.connect()\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 195, in connect\r\n    raise connectTimeoutException()\r\nconnectTimeoutException\r\n\r\nThe python code is as below:\r\n\r\n#!/usr/bin/python\r\n#Libraries\r\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient #Import from AWS-IoT Library\r\nimport RPi.GPIO as GPIO\r\nimport time\r\nfrom datetime import date, datetime #To get date and time\r\n\r\nmyMQTTClient = AWSIoTMQTTClient(\"new_Client\")\r\n\r\n#GPIO Mode (BOARD / BCM)\r\nGPIO.setmode(GPIO.BOARD)\r\nGPIO.setwarnings(False)\r\nGPIO.cleanup()\r\n\r\n#set GPIO Pins\r\nPIN_TRIGGER = 7\r\nPIN_ECHO = 11\r\n#set GPIO direction (IN / OUT)\r\nGPIO.setup(PIN_TRIGGER, GPIO.OUT)\r\nGPIO.setup(PIN_ECHO, GPIO.IN)\r\n\r\n# Waiting for sensor to settle\r\nGPIO.output(PIN_TRIGGER, GPIO.LOW)\r\ntime.sleep(5)\r\n\r\ndef distance():\r\n    # set Trigger to HIGH\r\n    GPIO.output(PIN_TRIGGER, GPIO.HIGH)\r\n    # set Trigger after 0.01ms to LOW\r\n    time.sleep(0.00001)\r\n    GPIO.output(PIN_TRIGGER, GPIO.LOW)\r\n    # save StartTime\r\n    while GPIO.input(PIN_ECHO)==0:\r\n        pulse_start_time = time.time()\r\n    # save time of arrival\r\n    while GPIO.input(PIN_ECHO)==1:\r\n        pulse_end_time = time.time()\r\n    # time difference between start and arrival\r\n    pulse_duration = pulse_end_time - pulse_start_time\r\n    distance = round(pulse_duration * 17150, 2)\r\n    #print distance\r\n    return distance\r\n    GPIO.cleanup()\r\n\r\n# function definition for MQTT connection\r\ndef mqttConfiguration():\r\n    # MQTT Communication Module: Ingest data into AWS IoT\r\n            \r\n            myMQTTClient.configureEndpoint(\"a39io8xlqtnhq2-ats.iot.us-east-1.amazonaws.com\", 8883)\r\n            myMQTTClient.configureCredentials(\"/home/pi/KesteIoTDemo20181027/X509CARoot.crt\", \"/home/pi/KesteIoTDemo20181027/61fc39dec3-private.pem.key\", \"/home/pi/KesteIoTDemo20181027/61fc39dec3-certificate.pem.crt\")\r\n            myMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing\r\n            myMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz\r\n            myMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec\r\n            myMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec\r\n            connecting_time = time.time() + 10\r\n            if time.time() < connecting_time:  #try connecting to AWS for 10 seconds\r\n                myMQTTClient.connect()\r\n                myMQTTClient.publish(\"UltrasonicSensor1/data\", \"connected\", 0)\r\n                print \"MQTT Client connection success!\"\r\n            else:\r\n                print \"Error: Check your AWS details in the program\"\r\n    \r\nif __name__ == '__main__':\r\n    try:\r\n        while True:\r\n            dist = 0\r\n            dist = distance()\r\n            mqttConfiguration()\r\n            # Publishing the topic \"TrashCan/Status\"\r\n            now = datetime.utcnow() #get date and time \r\n            current_time = now.strftime('%Y-%m-%dT%H:%M:%SZ') #get current time in string format\r\n            #prepare the payload in string format\r\n            payload = '{ \"timestamp\": \"' + current_time + '\",\"Distance \"' + str(dist)  + ' }'\r\n            #print payload on python intrepettor for local reference\r\n            print payload\r\n            #publish the actual payload on AWS IoT\r\n            myMQTTClient.publish(\"UltrasonicSensor/data\", payload, 0) #publish the payload\r\n            time.sleep(2) #Wait for 2 sec then update the next value\r\n\r\n            \r\n        # Reset by pressing CTRL + C\r\n    except KeyboardInterrupt:\r\n        print(\"Measurement stopped by User\")\r\n        GPIO.cleanup()\r\n#######################################################################\r\n\r\nCan any body please advise on how to fix this?\r\n\r\nI have already checked the AWS policy attached to my certificate which has been given full IoT access", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/172", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/172/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/172/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/172", "id": 375634513, "node_id": "MDU6SXNzdWUzNzU2MzQ1MTM=", "number": 172, "title": "Ability to pass arguments to customCallback functions", "user": {"login": "cnrmck", "id": 22061955, "node_id": "MDQ6VXNlcjIyMDYxOTU1", "avatar_url": "https://avatars2.githubusercontent.com/u/22061955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cnrmck", "html_url": "https://github.com/cnrmck", "followers_url": "https://api.github.com/users/cnrmck/followers", "following_url": "https://api.github.com/users/cnrmck/following{/other_user}", "gists_url": "https://api.github.com/users/cnrmck/gists{/gist_id}", "starred_url": "https://api.github.com/users/cnrmck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cnrmck/subscriptions", "organizations_url": "https://api.github.com/users/cnrmck/orgs", "repos_url": "https://api.github.com/users/cnrmck/repos", "events_url": "https://api.github.com/users/cnrmck/events{/privacy}", "received_events_url": "https://api.github.com/users/cnrmck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-30T18:32:13Z", "updated_at": "2020-05-20T17:52:58Z", "closed_at": "2020-05-20T17:52:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a usecase where I need to be able to pass a client to my callback fn. That client is then used to handle the shadow delta event, however it turns out to be impossible to pass any arguments to the srcCallback. \r\n\r\nThis is a very challenging problem to get around, my current solution is to import the variable from another module inside my srcCallback function. This violates good design principles by requiring the software to be highly state-dependent. \r\n\r\nHow srcCallbacks are handled now:\r\n` def shadowRegisterDeltaCallback(self, srcCallback):`\r\n\r\nwith an interface that looks like:\r\n`device_shadow_handler.shadowRegisterDeltaCallback(callback)`\r\n\r\nI propose a solution similar to Threading: \r\n`t = threading.Thread(target=customCallbackFn, kwargs={'x': 1,'y': 2})`\r\n\r\nAllowing something like:\r\n`device_shadow_handler.shadowRegisterDeltaCallback(callback, args=[the_client_I_need], kwargs={})`\r\n\r\nSo that I can define a callback like:\r\n```\r\ndef callback(payload, responseStatus, token, the_client_I_need):\r\n    # do stuff\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/171", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/171/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/171/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/171", "id": 372411201, "node_id": "MDU6SXNzdWUzNzI0MTEyMDE=", "number": 171, "title": "greengras model 5 socket error", "user": {"login": "JesseJ12345", "id": 31585302, "node_id": "MDQ6VXNlcjMxNTg1MzAy", "avatar_url": "https://avatars1.githubusercontent.com/u/31585302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JesseJ12345", "html_url": "https://github.com/JesseJ12345", "followers_url": "https://api.github.com/users/JesseJ12345/followers", "following_url": "https://api.github.com/users/JesseJ12345/following{/other_user}", "gists_url": "https://api.github.com/users/JesseJ12345/gists{/gist_id}", "starred_url": "https://api.github.com/users/JesseJ12345/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JesseJ12345/subscriptions", "organizations_url": "https://api.github.com/users/JesseJ12345/orgs", "repos_url": "https://api.github.com/users/JesseJ12345/repos", "events_url": "https://api.github.com/users/JesseJ12345/events{/privacy}", "received_events_url": "https://api.github.com/users/JesseJ12345/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-22T06:51:10Z", "updated_at": "2018-12-13T06:36:32Z", "closed_at": "2018-12-13T06:36:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Help, please! Here is a socket.error from greengrasss documents Model 5:\r\nI am sure do as the doc step by step, but still got this error:\r\n\r\npython trafficLight.py --endpoint xxxxxxxxxxxx-ats.iot.us-west-2.amazonaws.com --rootCA root-ca-cert.pem --ce\r\nrt .\\464eb365b6.cert.pem --key .\\464eb365b6.private.key --thingName GG_TrafficLight --clientId GG_TrafficLight\r\nGreengrass core has already been discovered.\r\nGGC Host Address: 127.0.0.1\r\nGGC Group CA Path: ./groupCA/root-ca.crt\r\nPrivate Key of trafficLight thing Path: .\\464eb365b6.private.key\r\nCertificate of trafficLight thing Path: .\\464eb365b6.cert.pem\r\nClient ID(thing name for trafficLight): GG_TrafficLight\r\nTarget shadow thing ID(thing name for trafficLight): GG_TrafficLight\r\n2018-10-22 14:35:48,588 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2018-10-22 14:35:48,589 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: GG_TrafficLight\r\n2018-10-22 14:35:48,589 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2018-10-22 14:35:48,589 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2018-10-22 14:35:48,589 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queueing: max queue size: 0\r\n2018-10-22 14:35:48,591 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queue draining interval: 0.100000 sec\r\n2018-10-22 14:35:48,591 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2018-10-22 14:35:48,591 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\n2018-10-22 14:35:48,591 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring reconnect back off timing...\r\n2018-10-22 14:35:48,592 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Base quiet time: 1.000000 sec\r\n2018-10-22 14:35:48,592 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Max quiet time: 32.000000 sec\r\n2018-10-22 14:35:48,592 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Stable connection time: 20.000000 sec\r\n2018-10-22 14:35:48,592 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\n2018-10-22 14:35:48,592 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 5.000000 sec\r\n2018-10-22 14:35:48,592 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2018-10-22 14:35:48,592 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2018-10-22 14:35:48,592 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\nTraceback (most recent call last):\r\nFile \"trafficLight.py\", line 226, in \r\nmyAWSIoTMQTTShadowClient.connect()\r\nFile \"C:\\Python27\\lib\\site-packages\\AWSIoTPythonSDK\\MQTTLib.py\", line 1216, in connect\r\nreturn self._AWSIoTMQTTClient.connect(keepAliveIntervalSecond)\r\nFile \"C:\\Python27\\lib\\site-packages\\AWSIoTPythonSDK\\MQTTLib.py\", line 485, in connect\r\nreturn self._mqtt_core.connect(keepAliveIntervalSecond)\r\nFile \"C:\\Python27\\lib\\site-packages\\AWSIoTPythonSDK\\core\\protocol\\mqtt_core.py\", line 192, in connect\r\nself.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\nFile \"C:\\Python27\\lib\\site-packages\\AWSIoTPythonSDK\\core\\protocol\\mqtt_core.py\", line 219, in connect_async\r\nraise e\r\nsocket.error: [Errno 10061] @", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/170", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/170/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/170/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/170", "id": 371784691, "node_id": "MDU6SXNzdWUzNzE3ODQ2OTE=", "number": 170, "title": "Device status", "user": {"login": "vince015", "id": 2938118, "node_id": "MDQ6VXNlcjI5MzgxMTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2938118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vince015", "html_url": "https://github.com/vince015", "followers_url": "https://api.github.com/users/vince015/followers", "following_url": "https://api.github.com/users/vince015/following{/other_user}", "gists_url": "https://api.github.com/users/vince015/gists{/gist_id}", "starred_url": "https://api.github.com/users/vince015/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vince015/subscriptions", "organizations_url": "https://api.github.com/users/vince015/orgs", "repos_url": "https://api.github.com/users/vince015/repos", "events_url": "https://api.github.com/users/vince015/events{/privacy}", "received_events_url": "https://api.github.com/users/vince015/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-19T02:38:52Z", "updated_at": "2020-05-18T00:05:35Z", "closed_at": "2020-05-18T00:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way, using this API to know the status of a device (if connected or not)?\r\n\r\nI am also trying to use the last will functionality but I have no idea how to test it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/169", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/169/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/169/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/169", "id": 370067246, "node_id": "MDU6SXNzdWUzNzAwNjcyNDY=", "number": 169, "title": "Make it work with debmake", "user": {"login": "boddob", "id": 1720788, "node_id": "MDQ6VXNlcjE3MjA3ODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1720788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boddob", "html_url": "https://github.com/boddob", "followers_url": "https://api.github.com/users/boddob/followers", "following_url": "https://api.github.com/users/boddob/following{/other_user}", "gists_url": "https://api.github.com/users/boddob/gists{/gist_id}", "starred_url": "https://api.github.com/users/boddob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boddob/subscriptions", "organizations_url": "https://api.github.com/users/boddob/orgs", "repos_url": "https://api.github.com/users/boddob/repos", "events_url": "https://api.github.com/users/boddob/events{/privacy}", "received_events_url": "https://api.github.com/users/boddob/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-15T09:09:22Z", "updated_at": "2020-05-18T00:05:33Z", "closed_at": "2020-05-18T00:05:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, trying to create a debian package out of this using debmake doesn't work. Calling \"debmake -b':py'\" results in an error; debmake isn't able to identify that this is a python project.\r\n\r\ndebmake's analyze.py looks at the project's setup.py and searches for a shebang sequence.\r\nAdding \"#!/usr/bin/env python\" in the beginning of setup.py fixes this.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/168", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/168/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/168/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/168", "id": 369841131, "node_id": "MDU6SXNzdWUzNjk4NDExMzE=", "number": 168, "title": "userdata", "user": {"login": "andreimircescu", "id": 2667859, "node_id": "MDQ6VXNlcjI2Njc4NTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2667859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreimircescu", "html_url": "https://github.com/andreimircescu", "followers_url": "https://api.github.com/users/andreimircescu/followers", "following_url": "https://api.github.com/users/andreimircescu/following{/other_user}", "gists_url": "https://api.github.com/users/andreimircescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreimircescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreimircescu/subscriptions", "organizations_url": "https://api.github.com/users/andreimircescu/orgs", "repos_url": "https://api.github.com/users/andreimircescu/repos", "events_url": "https://api.github.com/users/andreimircescu/events{/privacy}", "received_events_url": "https://api.github.com/users/andreimircescu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-13T21:03:47Z", "updated_at": "2020-05-18T00:05:32Z", "closed_at": "2020-05-18T00:05:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "did you removed set_user_data. I looked at the code and it seems it was:\r\n\r\n(from internal/client.py)\r\n\r\n\r\n    def __init__(self, client_id, clean_session, protocol, use_wss):\r\n        self._paho_client = self._create_paho_client(client_id, clean_session, None, protocol, use_wss)\r\n        self._use_wss = use_wss\r\n        self._event_callback_map_lock = Lock()\r\n        self._event_callback_map = dict()\r\n\r\n    def _create_paho_client(self, client_id, clean_session, user_data, protocol, use_wss):\r\n        self._logger.debug(\"Initializing MQTT layer...\")\r\n        return mqtt.Client(client_id, clean_session, user_data, protocol, use_wss)\r\n\r\nany reason why ? I actually used that feature.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/167", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/167/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/167/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/167/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/167", "id": 369672485, "node_id": "MDU6SXNzdWUzNjk2NzI0ODU=", "number": 167, "title": "Connecting over websockets without root CA?", "user": {"login": "raerae7", "id": 11600256, "node_id": "MDQ6VXNlcjExNjAwMjU2", "avatar_url": "https://avatars2.githubusercontent.com/u/11600256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raerae7", "html_url": "https://github.com/raerae7", "followers_url": "https://api.github.com/users/raerae7/followers", "following_url": "https://api.github.com/users/raerae7/following{/other_user}", "gists_url": "https://api.github.com/users/raerae7/gists{/gist_id}", "starred_url": "https://api.github.com/users/raerae7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raerae7/subscriptions", "organizations_url": "https://api.github.com/users/raerae7/orgs", "repos_url": "https://api.github.com/users/raerae7/repos", "events_url": "https://api.github.com/users/raerae7/events{/privacy}", "received_events_url": "https://api.github.com/users/raerae7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-10-12T18:59:39Z", "updated_at": "2020-06-08T21:55:19Z", "closed_at": "2020-05-18T00:05:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to connect without a root CA, using only an access key id and secret access key?\r\n\r\n````\r\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\r\n\r\nclientId = \"my-client-id\"\r\nclientEndpoint = \"my-client-endpoint\"\r\naccessKeyId = \"my-access-key-id\"\r\nsecretAccessKey = \"my-secret-access-key\"\r\n\r\nmyAWSIoTMQTTClient = AWSIoTMQTTClient(clientId, useWebsocket=True)\r\nmyAWSIoTMQTTClient.configureEndpoint(clientEndpoint, 443)\r\nmyAWSIoTMQTTClient.configureIAMCredentials(accessKeyId, secretAccessKey)\r\nmyAWSIoTMQTTClient.connect()\r\n````\r\n\r\nShould the above code work? It throws \"AWSIoTPythonSDK.exception.AWSIoTExceptions.connectTimeoutException\" with no other errors.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/166", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/166/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/166/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/166", "id": 369500868, "node_id": "MDU6SXNzdWUzNjk1MDA4Njg=", "number": 166, "title": "AWSIot with Raspberry : Problem ssl.SSLError: unknown error (_ssl.c:2947)", "user": {"login": "coidien", "id": 23338409, "node_id": "MDQ6VXNlcjIzMzM4NDA5", "avatar_url": "https://avatars3.githubusercontent.com/u/23338409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coidien", "html_url": "https://github.com/coidien", "followers_url": "https://api.github.com/users/coidien/followers", "following_url": "https://api.github.com/users/coidien/following{/other_user}", "gists_url": "https://api.github.com/users/coidien/gists{/gist_id}", "starred_url": "https://api.github.com/users/coidien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coidien/subscriptions", "organizations_url": "https://api.github.com/users/coidien/orgs", "repos_url": "https://api.github.com/users/coidien/repos", "events_url": "https://api.github.com/users/coidien/events{/privacy}", "received_events_url": "https://api.github.com/users/coidien/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-12T10:53:09Z", "updated_at": "2018-10-22T14:45:53Z", "closed_at": "2018-10-22T14:45:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI connect my Raspberry to AWSIoT to send data from Temperatur sensor, but i have Always this Problem:  \r\n\r\n_Traceback (most recent call last):\r\n  File \"temp_LCD_AWS1.py\", line 23, in <module>\r\n    myMQTTClient.connect()\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\nssl.SSLError: unknown error (_ssl.c:2947)_\r\n\r\n\r\ni am using Python 2.7, openssl 1.1.0.\r\n\r\ndo anyone know how to fix this ???\r\n\r\nat first i think there ist Problem with certificate, that i use my Laptop with mqttfx to connect and it is okie.\r\nI read another Thread, that may be Problem with Python 2.7 not support TLS Version 1.2, but i do not know how to fix that. Update and Upgrade Rasbian, Python, Openssl...I do all.  *___*", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/165", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/165/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/165/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/165", "id": 368434154, "node_id": "MDU6SXNzdWUzNjg0MzQxNTQ=", "number": 165, "title": "SSLError: [SSL: CERTIFICATE_VERIFY_FAILED]", "user": {"login": "cshurt64", "id": 32345275, "node_id": "MDQ6VXNlcjMyMzQ1Mjc1", "avatar_url": "https://avatars3.githubusercontent.com/u/32345275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cshurt64", "html_url": "https://github.com/cshurt64", "followers_url": "https://api.github.com/users/cshurt64/followers", "following_url": "https://api.github.com/users/cshurt64/following{/other_user}", "gists_url": "https://api.github.com/users/cshurt64/gists{/gist_id}", "starred_url": "https://api.github.com/users/cshurt64/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cshurt64/subscriptions", "organizations_url": "https://api.github.com/users/cshurt64/orgs", "repos_url": "https://api.github.com/users/cshurt64/repos", "events_url": "https://api.github.com/users/cshurt64/events{/privacy}", "received_events_url": "https://api.github.com/users/cshurt64/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-09T23:13:48Z", "updated_at": "2020-05-18T00:05:29Z", "closed_at": "2020-05-18T00:05:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello all,\r\nfirst off I'm new to AWS and a fairly novice Python programmer.  I've been trying to run basicPubSub but without success as of yet.  I'm running on Windows 7 and I'm using Python 2.7.11 (SSL version 1.0.2d Jul 2015).  I have gone through the basic steps of creating a Thing in AWS console.  I have also create a Certificate and attached a Policy to it. I am using the Amazon Root CA 3. When I run basicPubSub I get the following output.  \r\n\r\nC:\\Users\\churt\\AWS-Samples\\aws-iot-device-sdk-python-master\\samples\\basicPubSub>python basicPubSub.py -e a7wk8pv5b3fxc-ats.iot.us-east-1.amazonaws.com -r AmazonRootCA3.pem -c 9b58ab52f9-certificate.pem.crt -k 9b58ab52f9-private.pem.key > error.txt\r\n2018-10-09 19:03:03,092 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Initializing MQTT layer...\r\n2018-10-09 19:03:03,102 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Registering internal event callbacks to MQTT layer...\r\n2018-10-09 19:03:03,102 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2018-10-09 19:03:03,105 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: basicPubSub\r\n2018-10-09 19:03:03,111 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2018-10-09 19:03:03,118 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2018-10-09 19:03:03,131 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2018-10-09 19:03:03,138 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\n2018-10-09 19:03:03,154 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring reconnect back off timing...\r\n2018-10-09 19:03:03,163 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Base quiet time: 1.000000 sec\r\n2018-10-09 19:03:03,168 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Max quiet time: 32.000000 sec\r\n2018-10-09 19:03:03,181 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Stable connection time: 20.000000 sec\r\n2018-10-09 19:03:03,187 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queueing: max queue size: -1\r\n2018-10-09 19:03:03,201 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queue draining interval: 0.500000 sec\r\n2018-10-09 19:03:03,220 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\n2018-10-09 19:03:03,223 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 5.000000 sec\r\n2018-10-09 19:03:03,236 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2018-10-09 19:03:03,255 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2018-10-09 19:03:03,256 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2018-10-09 19:03:03,285 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread started\r\n2018-10-09 19:03:03,290 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Passing in general notification callbacks to internal client...\r\n2018-10-09 19:03:03,298 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Filling in fixed event callbacks: CONNACK, DISCONNECT, MESSAGE\r\n2018-10-09 19:03:03,871 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Cleaning up before stopping event consuming\r\n2018-10-09 19:03:03,872 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event queue cleared\r\n2018-10-09 19:03:03,875 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Stopping network I/O thread...\r\n2018-10-09 19:03:03,880 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Exiting dispatching loop...\r\n2018-10-09 19:03:03,885 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Network thread stopped\r\n2018-10-09 19:03:03,897 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event callbacks cleared\r\n2018-10-09 19:03:03,903 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread stopped\r\n2018-10-09 19:03:03,915 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Waiting for event consumer to completely stop\r\n2018-10-09 19:03:03,921 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Event consumer stopped\r\nTraceback (most recent call last):\r\n  File \"basicPubSub.py\", line 107, in <module>\r\n    myAWSIoTMQTTClient.connect()\r\n  File \"C:\\Python27\\lib\\site-packages\\AWSIoTPythonSDK\\MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"C:\\Python27\\lib\\site-packages\\AWSIoTPythonSDK\\core\\protocol\\mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"C:\\Python27\\lib\\site-packages\\AWSIoTPythonSDK\\core\\protocol\\mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\nssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590)\r\n\r\nAny help would be appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/164", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/164/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/164/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/164", "id": 367595752, "node_id": "MDU6SXNzdWUzNjc1OTU3NTI=", "number": 164, "title": "Can't subscribe to any topic other than sdk/test/Python from the basicPubSub.py sample", "user": {"login": "plat2eau", "id": 32238133, "node_id": "MDQ6VXNlcjMyMjM4MTMz", "avatar_url": "https://avatars2.githubusercontent.com/u/32238133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plat2eau", "html_url": "https://github.com/plat2eau", "followers_url": "https://api.github.com/users/plat2eau/followers", "following_url": "https://api.github.com/users/plat2eau/following{/other_user}", "gists_url": "https://api.github.com/users/plat2eau/gists{/gist_id}", "starred_url": "https://api.github.com/users/plat2eau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plat2eau/subscriptions", "organizations_url": "https://api.github.com/users/plat2eau/orgs", "repos_url": "https://api.github.com/users/plat2eau/repos", "events_url": "https://api.github.com/users/plat2eau/events{/privacy}", "received_events_url": "https://api.github.com/users/plat2eau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-07T21:30:12Z", "updated_at": "2018-10-12T17:32:58Z", "closed_at": "2018-10-12T17:28:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear all experts,\r\nI recently installed aws-iot-device-sdk-Python on my RaspberryPi. From one of the samples, \"basicPubSub.py\", I was trying to subscribe to the topic \"RaspberryPi/t1\" but I'm getting a timed-out error\r\n\r\n[Error Log ](https://pastebin.com/zZfpq74w)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/162", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/162/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/162/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/162", "id": 364306490, "node_id": "MDU6SXNzdWUzNjQzMDY0OTA=", "number": 162, "title": "Using Shadow Client with MQTT Client", "user": {"login": "cnrmck", "id": 22061955, "node_id": "MDQ6VXNlcjIyMDYxOTU1", "avatar_url": "https://avatars2.githubusercontent.com/u/22061955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cnrmck", "html_url": "https://github.com/cnrmck", "followers_url": "https://api.github.com/users/cnrmck/followers", "following_url": "https://api.github.com/users/cnrmck/following{/other_user}", "gists_url": "https://api.github.com/users/cnrmck/gists{/gist_id}", "starred_url": "https://api.github.com/users/cnrmck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cnrmck/subscriptions", "organizations_url": "https://api.github.com/users/cnrmck/orgs", "repos_url": "https://api.github.com/users/cnrmck/repos", "events_url": "https://api.github.com/users/cnrmck/events{/privacy}", "received_events_url": "https://api.github.com/users/cnrmck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-27T05:05:58Z", "updated_at": "2020-05-18T00:05:27Z", "closed_at": "2020-05-18T00:05:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having trouble using the Shadow Client in conjunction with the MQTT client. \r\n\r\nIs there a best practice for this sdk on using the AWSIoTMQTTShadowClient and AWSIoTMQTTClient together? I have seen [this](https://github.com/aws/aws-iot-device-sdk-embedded-C/issues/136) but I do not know if it holds for this SDK, or if the concerns about using only one instance hold here as well. \r\n\r\nIf there is an example document like was provided [here](https://github.com/aws/aws-iot-device-sdk-embedded-C/blob/master/samples/linux/subscribe_publish_sample/subscribe_publish_sample.c) that would probably help immensely. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/161", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/161/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/161/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/161", "id": 361330980, "node_id": "MDU6SXNzdWUzNjEzMzA5ODA=", "number": 161, "title": "Get ssl.SSLError from AWSIoTMQTTClient", "user": {"login": "why702", "id": 21079425, "node_id": "MDQ6VXNlcjIxMDc5NDI1", "avatar_url": "https://avatars1.githubusercontent.com/u/21079425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/why702", "html_url": "https://github.com/why702", "followers_url": "https://api.github.com/users/why702/followers", "following_url": "https://api.github.com/users/why702/following{/other_user}", "gists_url": "https://api.github.com/users/why702/gists{/gist_id}", "starred_url": "https://api.github.com/users/why702/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/why702/subscriptions", "organizations_url": "https://api.github.com/users/why702/orgs", "repos_url": "https://api.github.com/users/why702/repos", "events_url": "https://api.github.com/users/why702/events{/privacy}", "received_events_url": "https://api.github.com/users/why702/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-18T14:24:54Z", "updated_at": "2020-05-18T00:05:26Z", "closed_at": "2020-05-18T00:05:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi \r\n\r\nI use the following code, but get the ssl.SSLError: unknown error (_ssl.c:3622). \r\nDo you know how to find my myClientID? or just use whatever i want?\r\nThx\r\n\r\n```\r\n# AWS IoT certificate based connection\r\nmyMQTTClient = AWSIoTMQTTClient(\"myClientID\")\r\nmyMQTTClient.configureEndpoint(\"a24iwim3hyqcyi.iot.us-east-2.amazonaws.com\", 8883)\r\nmyMQTTClient.configureCredentials(\"E:/svn/trunk/modules/awsiot/VeriSign-Class3-Public-Primary-Certification-Authority-G5.pem\", \"E:/svn/trunk/modules/awsiot/1963993965-private.pem.key\", \"E:/svn/trunk/modules/awsiot/1963993965-certificate.pem.crt\")\r\nmyMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing\r\nmyMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz\r\nmyMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec\r\nmyMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec\r\n \r\n#connect and publish\r\nmyMQTTClient.connect() --> ssl.SSLError: unknown error (_ssl.c:3622)\r\n```\r\n\r\nEnvironment:\r\npython 3.6\r\nwin10\r\nssl.OPENSSL_VERSION = 'OpenSSL 1.0.2k  26 Jan 2017'\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/159", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/159/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/159/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/159", "id": 360512926, "node_id": "MDU6SXNzdWUzNjA1MTI5MjY=", "number": 159, "title": "wss request  to ats endpoint not working!!", "user": {"login": "cm-iwata", "id": 38879253, "node_id": "MDQ6VXNlcjM4ODc5MjUz", "avatar_url": "https://avatars1.githubusercontent.com/u/38879253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cm-iwata", "html_url": "https://github.com/cm-iwata", "followers_url": "https://api.github.com/users/cm-iwata/followers", "following_url": "https://api.github.com/users/cm-iwata/following{/other_user}", "gists_url": "https://api.github.com/users/cm-iwata/gists{/gist_id}", "starred_url": "https://api.github.com/users/cm-iwata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cm-iwata/subscriptions", "organizations_url": "https://api.github.com/users/cm-iwata/orgs", "repos_url": "https://api.github.com/users/cm-iwata/repos", "events_url": "https://api.github.com/users/cm-iwata/events{/privacy}", "received_events_url": "https://api.github.com/users/cm-iwata/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-15T06:29:23Z", "updated_at": "2020-05-18T00:05:24Z", "closed_at": "2020-05-18T00:05:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nAccording this blog, AWS IoT Core provide new endpoints for  Amazon Trust Services.\r\nBut wss request  to ats endpoint not working.\r\nhttps://aws.amazon.com/jp/blogs/iot/aws-iot-core-ats-endpoints/\r\n\r\nI have been running the below code.\r\n```\r\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\r\nimport uuid\r\nimport os\r\n\r\n\r\ndef main():\r\n\r\n  AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\r\n  AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\r\n\r\n  client = AWSIoTMQTTClient(clientID=uuid.uuid4().hex, useWebsocket=True)\r\n  client.configureIAMCredentials(AWSAccessKeyID=AWS_ACCESS_KEY_ID, AWSSecretAccessKey=AWS_SECRET_ACCESS_KEY)\r\n  client.configureCredentials(CAFilePath='./rootCA.pem')\r\n  client.configureEndpoint(hostName='myawsiotendpoint-ats.iot.us-east-1.amazonaws.com', portNumber=443)\r\n  client.configureOfflinePublishQueueing(-1)\r\n  client.configureDrainingFrequency(2)\r\n  client.configureConnectDisconnectTimeout(30)\r\n  client.configureMQTTOperationTimeout(60)\r\n  client.connect()\r\n\r\nif __name__ == '__main__':\r\n  main()\r\n```\r\n\r\nthen ,i got this error.\r\n```\r\nValueError: Invalid endpoint pattern for wss:myawsiotendpoint-ats.iot.us-east-1.amazonaws.com\r\n```\r\n\r\nI think  sdk must support endpointType for ats", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/158", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/158/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/158/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/158", "id": 358234447, "node_id": "MDU6SXNzdWUzNTgyMzQ0NDc=", "number": 158, "title": "CPU Usage shouldn't be around 10% with very simple sample code", "user": {"login": "LeeChienHan", "id": 39692123, "node_id": "MDQ6VXNlcjM5NjkyMTIz", "avatar_url": "https://avatars3.githubusercontent.com/u/39692123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeeChienHan", "html_url": "https://github.com/LeeChienHan", "followers_url": "https://api.github.com/users/LeeChienHan/followers", "following_url": "https://api.github.com/users/LeeChienHan/following{/other_user}", "gists_url": "https://api.github.com/users/LeeChienHan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeeChienHan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeeChienHan/subscriptions", "organizations_url": "https://api.github.com/users/LeeChienHan/orgs", "repos_url": "https://api.github.com/users/LeeChienHan/repos", "events_url": "https://api.github.com/users/LeeChienHan/events{/privacy}", "received_events_url": "https://api.github.com/users/LeeChienHan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-07T22:50:24Z", "updated_at": "2020-08-14T00:10:15Z", "closed_at": "2020-08-14T00:10:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been running the below code and saw the CPU usage is about 10%, which this basic connection code shouldn't take up to 10% of CPU usage.\r\n\r\n```\r\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\r\nfrom bpm.config import get_conf\r\nimport time\r\n\r\n# For certificate based connection\r\nmyMQTTClient = AWSIoTMQTTClient(\"myClientID\")\r\nmyMQTTClient.configureEndpoint(\"*****.iot.us-west-2.amazonaws.com\",\r\n                               8883)\r\n# For Websocket\r\nROOT_CA_CERT = get_conf(\"ROOT_CA_CERT\")\r\nDEVICE_CERT = get_conf(\"DEVICE_CERT\")\r\nPRIVATE_KEY = get_conf(\"PRIVATE_KEY\")\r\nmyMQTTClient.configureCredentials(ROOT_CA_CERT, PRIVATE_KEY, DEVICE_CERT)\r\n\r\nmyMQTTClient.configureOfflinePublishQueueing(-1)\r\nmyMQTTClient.configureDrainingFrequency(2)\r\nmyMQTTClient.configureConnectDisconnectTimeout(10)\r\nmyMQTTClient.configureMQTTOperationTimeout(5)\r\n\r\nmyMQTTClient.connect()\r\n\r\nwhile True:\r\n  time.sleep(1)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/156", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/156/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/156/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/156", "id": 356370058, "node_id": "MDU6SXNzdWUzNTYzNzAwNTg=", "number": 156, "title": "Shadow's delta not being registered by device after shadowUpdate call", "user": {"login": "garygsw", "id": 1503410, "node_id": "MDQ6VXNlcjE1MDM0MTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1503410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garygsw", "html_url": "https://github.com/garygsw", "followers_url": "https://api.github.com/users/garygsw/followers", "following_url": "https://api.github.com/users/garygsw/following{/other_user}", "gists_url": "https://api.github.com/users/garygsw/gists{/gist_id}", "starred_url": "https://api.github.com/users/garygsw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garygsw/subscriptions", "organizations_url": "https://api.github.com/users/garygsw/orgs", "repos_url": "https://api.github.com/users/garygsw/repos", "events_url": "https://api.github.com/users/garygsw/events{/privacy}", "received_events_url": "https://api.github.com/users/garygsw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321357, "node_id": "MDU6TGFiZWwxMzA2MzIxMzU3", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/investigating", "name": "investigating", "color": "0000ff", "default": false, "description": "This issue is being investigated and/or work is in progress to resolve the issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-09-03T06:13:54Z", "updated_at": "2019-05-24T01:30:31Z", "closed_at": "2019-05-24T00:33:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "# #\r\nHi, followed the sample in [ThingsShadowEcho.py](\r\nhttps://github.com/aws/aws-iot-device-sdk-python/blob/master/samples/ThingShadowEcho/ThingShadowEcho.py) to register a device to listen for delta messages.\r\n\r\nWhen I try to edit the shadow manually via the AWS IoT Core console  accessing the Thing's shadow tab, and upon clicking \"save\", the device manages to receive the \"delta\" message  and updates the shadow \"reported\" state.\r\n\r\nHowever, when I tried to call shadowUpdate using the example in [basicShadowUpdater.py](\r\nhttps://github.com/aws/aws-iot-device-sdk-python/blob/master/samples/basicShadow/basicShadowUpdater.py), in the AWS IoT Core console, the shadow \"desired\" state was updated but no \"delta\" state  registered, even though the \"desired\" state was different from the \"reported\" state.  The device also did not receive any \"delta\" message. However, when I manually \"edit\" the shadow on the console but without making any edits, and upon clicking \"save\", that the \"delta\" state was generated, and the \"delta\" message was finally being received by the device.\r\n\r\nIs there a way to automatically generate the \"delta\" state in the shadow document after shadowUpdate call (without a need to manually \"edit & save\" on the AWS IoT Core console\")?\r\n\r\nPlease help! Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/155", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/155/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/155/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/155", "id": 356281051, "node_id": "MDU6SXNzdWUzNTYyODEwNTE=", "number": 155, "title": "No connection with mqttclient and aws iot", "user": {"login": "arik-le", "id": 26044344, "node_id": "MDQ6VXNlcjI2MDQ0MzQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/26044344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arik-le", "html_url": "https://github.com/arik-le", "followers_url": "https://api.github.com/users/arik-le/followers", "following_url": "https://api.github.com/users/arik-le/following{/other_user}", "gists_url": "https://api.github.com/users/arik-le/gists{/gist_id}", "starred_url": "https://api.github.com/users/arik-le/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arik-le/subscriptions", "organizations_url": "https://api.github.com/users/arik-le/orgs", "repos_url": "https://api.github.com/users/arik-le/repos", "events_url": "https://api.github.com/users/arik-le/events{/privacy}", "received_events_url": "https://api.github.com/users/arik-le/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-02T13:05:54Z", "updated_at": "2019-08-25T12:21:22Z", "closed_at": "2019-08-25T12:21:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi ,\r\n\r\ni am trying to connect my rpi3 to aws iot via your sdk , downloaded all certificates and even register CA in the AWS IOT console .\r\nwhen running the aws \"configure a device\"  api it connect and work like a charm but when i am running my script in shows : \r\n\r\n> Traceback (most recent call last):\r\n> File \"r.py\", line 30, in <module>\r\n>     myMQTTClient.connect()\r\n>   File \"/home/pi/.local/lib/python2.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n>     return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n>   File \"/home/pi/.local/lib/python2.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n>     self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n>   File \"/home/pi/.local/lib/python2.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n>     raise e\r\n> ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)\r\n\r\nmy script for now is very simple , only connect and publish : \r\n\r\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\r\nimport logging\r\n\r\n\r\n> myMQTTClient = AWSIoTMQTTClient(\"123afhlss456\")\r\n> myMQTTClient.configureEndpoint(\"XXXXXXXXXXXXXX.iot.us-east-2.amazonaws.com\", 8883)\r\n> myMQTTClient.configureCredentials(\"/home/pi/rfid/MFRC522-python/aws/rootCA.pem\", \"/home/pi/rfid/MFRC522-python/aws/RasPi.private.key\", \"/home/pi/rfid/MFRC522-python/aws/RasPi.cert.pem\")\r\n> myMQTTClient.configureOfflinePublishQueueing(-1)# Infinite offline Publish queueing\r\n> myMQTTClient.configureDrainingFrequency(2)# Draining: 2 Hz\r\n> myMQTTClient.configureConnectDisconnectTimeout(10)# 10 sec\r\n> myMQTTClient.configureMQTTOperationTimeout(5)# 5 sec\r\n>  \r\n> #connect and publish\r\n> myMQTTClient.connect()\r\n> myMQTTClient.publish(\"myTopic\", \"myPayload\", 0)\r\n> myMQTTClient.subscribe(\"myTopic\", 1, customCallback)\r\n> myMQTTClient.unsubscribe(\"myTopic\")\r\n> myMQTTClient.disconnect()\r\n> \r\n\r\nplease help me \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/154", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/154/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/154/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/154", "id": 355923633, "node_id": "MDU6SXNzdWUzNTU5MjM2MzM=", "number": 154, "title": "hey i am getting this error while connecting my pi3 to aws iot ", "user": {"login": "aries20", "id": 35268001, "node_id": "MDQ6VXNlcjM1MjY4MDAx", "avatar_url": "https://avatars0.githubusercontent.com/u/35268001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aries20", "html_url": "https://github.com/aries20", "followers_url": "https://api.github.com/users/aries20/followers", "following_url": "https://api.github.com/users/aries20/following{/other_user}", "gists_url": "https://api.github.com/users/aries20/gists{/gist_id}", "starred_url": "https://api.github.com/users/aries20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aries20/subscriptions", "organizations_url": "https://api.github.com/users/aries20/orgs", "repos_url": "https://api.github.com/users/aries20/repos", "events_url": "https://api.github.com/users/aries20/events{/privacy}", "received_events_url": "https://api.github.com/users/aries20/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-08-31T10:18:46Z", "updated_at": "2020-08-06T05:38:05Z", "closed_at": "2020-05-18T00:05:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "No handlers could be found for logger \"AWSIoTPythonSDK.core.protocol.mqtt_core\"\r\nTraceback (most recent call last):\r\n  File \"awsdht.py\", line 22, in <module>\r\n    myMQTTClient.connect()\r\n  File \"/home/pi/.local/lib/python2.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/home/pi/.local/lib/python2.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 195, in connect\r\n    raise connectTimeoutException()\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.connectTimeoutException\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/153", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/153/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/153/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/153", "id": 354907861, "node_id": "MDU6SXNzdWUzNTQ5MDc4NjE=", "number": 153, "title": "topic subscribing is not working from today", "user": {"login": "warlock-jay", "id": 26434600, "node_id": "MDQ6VXNlcjI2NDM0NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/26434600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/warlock-jay", "html_url": "https://github.com/warlock-jay", "followers_url": "https://api.github.com/users/warlock-jay/followers", "following_url": "https://api.github.com/users/warlock-jay/following{/other_user}", "gists_url": "https://api.github.com/users/warlock-jay/gists{/gist_id}", "starred_url": "https://api.github.com/users/warlock-jay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/warlock-jay/subscriptions", "organizations_url": "https://api.github.com/users/warlock-jay/orgs", "repos_url": "https://api.github.com/users/warlock-jay/repos", "events_url": "https://api.github.com/users/warlock-jay/events{/privacy}", "received_events_url": "https://api.github.com/users/warlock-jay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-08-28T21:18:13Z", "updated_at": "2020-05-18T00:05:20Z", "closed_at": "2020-05-18T00:05:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am using awsiotpython sdk in raspberrypi from several months.\r\ni have three systems setted up .\r\nAll are working fine till yesterday.\r\nToday they all got same error when they tried to subscribe to iot topics.\r\n\r\nTraceback (most recent call last):\r\n  File \"Iot_subscribe.py\", line 107, in <module>\r\n    iot = createIoT()\r\n  File \"Iot_subscribe.py\", line 95, in createIoT\r\n    iot.connect(3)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 1216, in connect\r\n    return self._AWSIoTMQTTClient.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\nsocket.gaierror: [Errno -3] Temporary failure in name resolution\r\n\r\nwas amazon (aws) changed anything in iot-core servers ?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/152", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/152/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/152/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/152", "id": 354317028, "node_id": "MDU6SXNzdWUzNTQzMTcwMjg=", "number": 152, "title": "Make the connection to AWS work behind proxy", "user": {"login": "nbwns", "id": 7395390, "node_id": "MDQ6VXNlcjczOTUzOTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7395390?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbwns", "html_url": "https://github.com/nbwns", "followers_url": "https://api.github.com/users/nbwns/followers", "following_url": "https://api.github.com/users/nbwns/following{/other_user}", "gists_url": "https://api.github.com/users/nbwns/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbwns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbwns/subscriptions", "organizations_url": "https://api.github.com/users/nbwns/orgs", "repos_url": "https://api.github.com/users/nbwns/repos", "events_url": "https://api.github.com/users/nbwns/events{/privacy}", "received_events_url": "https://api.github.com/users/nbwns/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-27T13:23:14Z", "updated_at": "2020-05-18T00:05:19Z", "closed_at": "2020-05-18T00:05:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi ! \r\n\r\nI'm trying to push data from my Pi to AWS but it never passes the .connect() line and I don't get any errors\r\n\r\n`print('Trying to connect to AWS')\r\nmyMQTTClient.connect()\r\nprint('Connected to AWS')`\r\n\r\nI'm behind a corporate proxy and I'm pretty sure that's the problem. \r\n\r\nIs there a solution to pass proxy address and credentials ? \r\n\r\nThanks,\r\nNicolas", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/151", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/151/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/151/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/151", "id": 353996133, "node_id": "MDU6SXNzdWUzNTM5OTYxMzM=", "number": 151, "title": "AWSIoTPythonSDK.exception.AWSIoTExceptions.disconnectTimeoutException", "user": {"login": "a-astakhov", "id": 17564858, "node_id": "MDQ6VXNlcjE3NTY0ODU4", "avatar_url": "https://avatars1.githubusercontent.com/u/17564858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-astakhov", "html_url": "https://github.com/a-astakhov", "followers_url": "https://api.github.com/users/a-astakhov/followers", "following_url": "https://api.github.com/users/a-astakhov/following{/other_user}", "gists_url": "https://api.github.com/users/a-astakhov/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-astakhov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-astakhov/subscriptions", "organizations_url": "https://api.github.com/users/a-astakhov/orgs", "repos_url": "https://api.github.com/users/a-astakhov/repos", "events_url": "https://api.github.com/users/a-astakhov/events{/privacy}", "received_events_url": "https://api.github.com/users/a-astakhov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-25T08:47:15Z", "updated_at": "2020-05-18T00:05:17Z", "closed_at": "2020-05-18T00:05:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Guys,\r\n\r\nI have a lot of data which I need to upload through the publishing messages.\r\n\r\nMy mqttClient configuration looks like this:\r\n\r\n```python\r\nmqttClient = AWSIoTMQTTClient(THING_NAME)\r\nmqttClient.configureEndpoint(ENDPOINT, PORT)\r\nmqttClient.configureCredentials(IOT_ROOT_CA, DEVICE_CERT_KEY, DEVICE_CERT_PEM)\r\nmqttClient.configureAutoReconnectBackoffTime(1, 250, 20)\r\nmqttClient.configureOfflinePublishQueueing(-1)\r\nmqttClient.configureDrainingFrequency(2)\r\nmqttClient.configureConnectDisconnectTimeout(250)\r\nmqttClient.configureMQTTOperationTimeout(5)\r\n```\r\n\r\nAfter 15 successfully published messages I'm getting next error\r\n\r\n```\r\nERROR:AWSIoTPythonSDK.core.protocol.mqtt_core:Disconnect timed out\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/node_modules/serverless/lib/plugins/aws/invokeLocal/invoke.py\", line 67, in <module>\r\n\r\n    result = handler(input['event'], context)\r\n  File \"./handler.py\", line 70, in main\r\n\r\n    postPayload(payload)\r\n  File \"./handler.py\", line 107, in publish\r\n\r\n    mqttClient.disconnect()\r\n  File \"./venv/lib/python3.6/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 545, in disconnect\r\n\r\n    return self._mqtt_core.disconnect()\r\n  File \"./venv/lib/python3.6/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 242, in disconnect\r\n\r\n    raise disconnectTimeoutException()\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.disconnectTimeoutException\r\n```\r\n\r\nHas anyone faced with similar issue?\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/150", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/150/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/150/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/150", "id": 352312678, "node_id": "MDU6SXNzdWUzNTIzMTI2Nzg=", "number": 150, "title": "AttributeError: can't set attribute, using ALPN, after upgrade to Python 3.7.0", "user": {"login": "johnp789", "id": 243768, "node_id": "MDQ6VXNlcjI0Mzc2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/243768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnp789", "html_url": "https://github.com/johnp789", "followers_url": "https://api.github.com/users/johnp789/followers", "following_url": "https://api.github.com/users/johnp789/following{/other_user}", "gists_url": "https://api.github.com/users/johnp789/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnp789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnp789/subscriptions", "organizations_url": "https://api.github.com/users/johnp789/orgs", "repos_url": "https://api.github.com/users/johnp789/repos", "events_url": "https://api.github.com/users/johnp789/events{/privacy}", "received_events_url": "https://api.github.com/users/johnp789/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 389767039, "node_id": "MDU6TGFiZWwzODk3NjcwMzk=", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "This issue is a bug."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-20T22:03:01Z", "updated_at": "2019-01-15T23:23:23Z", "closed_at": "2019-01-15T23:23:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "A small application which worked with previous Python versions failed after an upgrade to Python 3.7.0.  The application uses ALPN to connect to the AWS IoT endpoint.  The error is as follows: \r\n```\r\n$ ./aws-test.py\r\nTraceback (most recent call last):\r\n  File \"./aws-test.py\", line 32, in <module>\r\n    myShadowClient.connect(10)\r\n  File \"/usr/lib/python3.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 1216, in connect\r\n    return self._AWSIoTMQTTClient.connect(keepAliveIntervalSecond)\r\n  File \"/usr/lib/python3.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/usr/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\n  File \"/usr/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 207, in connect_async\r\n    rc = self._internal_async_client.connect(keep_alive_sec, ack_callback)\r\n  File \"/usr/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/internal/clients.py\", line 119, in connect\r\n    rc = self._paho_client.connect(host, port, keep_alive_sec)\r\n  File \"/usr/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 664, in connect\r\n    return self.reconnect()\r\n  File \"/usr/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 805, in reconnect\r\n    .with_protocol(self._tls_version)\\\r\n  File \"/usr/lib/python3.7/site-packages/AWSIoTPythonSDK/core/protocol/connection/alpn.py\", line 38, in with_protocol\r\n    self._ssl_context.protocol = protocol\r\nAttributeError: can't set attribute\r\n```\r\nI found that commenting out the line `self._ssl_context.protocol = protocol` in `SSLContextBuilder.with_protocol` got my application to work again.  Perhaps the change in Python 3.7 to `SSLContext.wrap_socket` is the reason.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/149", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/149/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/149/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/149", "id": 351628679, "node_id": "MDU6SXNzdWUzNTE2Mjg2Nzk=", "number": 149, "title": "gaierror: Dangling threads on unsuccessful connect", "user": {"login": "livioso", "id": 1672198, "node_id": "MDQ6VXNlcjE2NzIxOTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1672198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/livioso", "html_url": "https://github.com/livioso", "followers_url": "https://api.github.com/users/livioso/followers", "following_url": "https://api.github.com/users/livioso/following{/other_user}", "gists_url": "https://api.github.com/users/livioso/gists{/gist_id}", "starred_url": "https://api.github.com/users/livioso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/livioso/subscriptions", "organizations_url": "https://api.github.com/users/livioso/orgs", "repos_url": "https://api.github.com/users/livioso/repos", "events_url": "https://api.github.com/users/livioso/events{/privacy}", "received_events_url": "https://api.github.com/users/livioso/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-17T15:00:18Z", "updated_at": "2018-08-23T08:44:09Z", "closed_at": "2018-08-23T08:44:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Subsequent unsuccessful calls of `.connect()` due to `gaierror` seem to cause zombie threads for me:\r\n\r\nExample:\r\n```\r\n# keep calling till the connection has been established:\r\n# ...\r\nif not self._mqtt_connected:\r\n  try:\r\n    self._mqtt_connected = self.mqtt.connect()\r\n  except Exception as e:\r\n    logger.exception('Unable to connect to mqtt host')\r\n```\r\n\r\n`.connect()` fails with:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/root/cariot-smartsensor/src/mqtt/interface.py\", line 65, in publish\r\n    self._mqtt_connected = self.mqtt.connect()\r\n  File \"/usr/lib/python3.5/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 481, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/lib/python3.5/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 183, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/usr/lib/python3.5/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 196, in connect_async\r\n    rc = self._internal_async_client.connect(keep_alive_sec, ack_callback)\r\n  File \"/usr/lib/python3.5/site-packages/AWSIoTPythonSDK/core/protocol/internal/clients.py\", line 116, in connect\r\n    rc = self._paho_client.connect(host, port, keep_alive_sec)\r\n  File \"/usr/lib/python3.5/site-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 654, in connect\r\n    return self.reconnect()\r\n  File \"/usr/lib/python3.5/site-packages/AWSIoTPythonSDK/core/protocol/paho/client.py\", line 776, in reconnect\r\n    sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))\r\n  File \"/usr/lib/python3.5/socket.py\", line 694, in create_connection\r\n    for res in getaddrinfo(host, port, 0, SOCK_STREAM):\r\n  File \"/usr/lib/python3.5/socket.py\", line 733, in getaddrinfo\r\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\r\nsocket.gaierror: [Errno -3] Temporary failure in name resolution\r\n```\r\n\r\nWith each unsuccessful call I get a new thread that doesn't seem to be clean up:\r\n\r\n```\r\nfaulthandler.dump_traceback(file=sys.stderr, all_threads=True)\r\n```\r\n\r\n```\r\nThread 0x6e18f460 (most recent call first):\r\n  File \"/usr/lib/python3.5/threading.py\", line 297 in wait\r\n  File \"/usr/lib/python3.5/site-packages/AWSIoTPythonSDK/core/protocol/internal/workers.py\", line 144 in _dispatch\r\n  File \"/usr/lib/python3.5/threading.py\", line 862 in run\r\n  File \"/usr/lib/python3.5/threading.py\", line 914 in _bootstrap_inner\r\n  File \"/usr/lib/python3.5/threading.py\", line 882 in _bootstrap\r\n\r\nThread 0x6e990460 (most recent call first):\r\n  File \"/usr/lib/python3.5/threading.py\", line 297 in wait\r\n  File \"/usr/lib/python3.5/site-packages/AWSIoTPythonSDK/core/protocol/internal/workers.py\", line 144 in _dispatch\r\n  File \"/usr/lib/python3.5/threading.py\", line 862 in run\r\n  File \"/usr/lib/python3.5/threading.py\", line 914 in _bootstrap_inner\r\n  File \"/usr/lib/python3.5/threading.py\", line 882 in _bootstrap\r\n\r\n....\r\n\r\nThread 0x73259460 (most recent call first):\r\n  File \"/usr/lib/python3.5/threading.py\", line 297 in wait\r\n  File \"/usr/lib/python3.5/site-packages/AWSIoTPythonSDK/core/protocol/internal/workers.py\", line 144 in _dispatch\r\n  File \"/usr/lib/python3.5/threading.py\", line 862 in run\r\n  File \"/usr/lib/python3.5/threading.py\", line 914 in _bootstrap_inner\r\n  File \"/usr/lib/python3.5/threading.py\", line 882 in _bootstrap\r\n```\r\n\r\n*Q: Is this an expected behaviour? If so what's the proper way to handle this?*", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/148", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/148/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/148/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/148", "id": 350732505, "node_id": "MDU6SXNzdWUzNTA3MzI1MDU=", "number": 148, "title": "Running basicPubSub sample got \"connectTimeoutException\"", "user": {"login": "15921050052", "id": 9170333, "node_id": "MDQ6VXNlcjkxNzAzMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/9170333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/15921050052", "html_url": "https://github.com/15921050052", "followers_url": "https://api.github.com/users/15921050052/followers", "following_url": "https://api.github.com/users/15921050052/following{/other_user}", "gists_url": "https://api.github.com/users/15921050052/gists{/gist_id}", "starred_url": "https://api.github.com/users/15921050052/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/15921050052/subscriptions", "organizations_url": "https://api.github.com/users/15921050052/orgs", "repos_url": "https://api.github.com/users/15921050052/repos", "events_url": "https://api.github.com/users/15921050052/events{/privacy}", "received_events_url": "https://api.github.com/users/15921050052/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-15T08:47:26Z", "updated_at": "2018-08-15T09:00:52Z", "closed_at": "2018-08-15T09:00:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running basicPubSub sample got \"connectTimeoutException\"\r\nlogs here:\r\n```\r\n2018-08-15 16:42:26,665 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event queue cleared\r\n2018-08-15 16:42:26,665 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Stopping network I/O thread...\r\n2018-08-15 16:42:27,665 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Network thread stopped\r\n2018-08-15 16:42:27,666 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event callbacks cleared\r\n2018-08-15 16:42:27,666 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread stopped\r\n2018-08-15 16:42:27,666 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Exiting dispatching loop...\r\n2018-08-15 16:42:36,618 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Connect timed out\r\nTraceback (most recent call last):\r\n  File \"aws-iot-device-sdk-python/samples/basicPubSub/basicPubSub.py\", line 107, in <module>\r\n    myAWSIoTMQTTClient.connect()\r\n  File \"/home/mars/.local/lib/python3.6/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/home/mars/.local/lib/python3.6/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 195, in connect\r\n    raise connectTimeoutException()\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.connectTimeoutException\r\n```\r\nendpoint : *****.iot.cn-north-1.amazonaws.com.cn", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/147", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/147/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/147/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/147", "id": 349855599, "node_id": "MDU6SXNzdWUzNDk4NTU1OTk=", "number": 147, "title": "Unable to connect a mac to IoT", "user": {"login": "aspcompiler", "id": 1964389, "node_id": "MDQ6VXNlcjE5NjQzODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1964389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aspcompiler", "html_url": "https://github.com/aspcompiler", "followers_url": "https://api.github.com/users/aspcompiler/followers", "following_url": "https://api.github.com/users/aspcompiler/following{/other_user}", "gists_url": "https://api.github.com/users/aspcompiler/gists{/gist_id}", "starred_url": "https://api.github.com/users/aspcompiler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aspcompiler/subscriptions", "organizations_url": "https://api.github.com/users/aspcompiler/orgs", "repos_url": "https://api.github.com/users/aspcompiler/repos", "events_url": "https://api.github.com/users/aspcompiler/events{/privacy}", "received_events_url": "https://api.github.com/users/aspcompiler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1205509572, "node_id": "MDU6TGFiZWwxMjA1NTA5NTcy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closing-soon", "name": "closing-soon", "color": "000000", "default": false, "description": "This issue will automatically close in 4 days unless further comments are made."}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-13T00:09:43Z", "updated_at": "2020-05-13T01:10:42Z", "closed_at": "2020-05-13T01:10:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I started by following \"connecting device to IOT\" wizard in AWS console. I downloaded connect_device_package.zip. However, when I run ./start.sh, I got:\r\n\r\n2018-08-12 17:02:29,255 - AWSIoTPythonSDK.core.protocol.mqtt_core - DEBUG - Event consumer stopped\r\nTraceback (most recent call last):\r\n  File \"aws-iot-device-sdk-python/samples/basicPubSub/basicPubSub.py\", line 107, in <module>\r\n    myAWSIoTMQTTClient.connect()\r\n  File \"/Library/Python/2.7/site-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/Library/Python/2.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/Library/Python/2.7/site-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\nssl.SSLError: [SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:590)\r\n\r\nNot sure what it means and how to fix it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/145", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/145/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/145/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/145", "id": 348709550, "node_id": "MDU6SXNzdWUzNDg3MDk1NTA=", "number": 145, "title": "shadowRegisterDeltaCallback callback function description wrong in documentation and examples", "user": {"login": "didiern", "id": 24278399, "node_id": "MDQ6VXNlcjI0Mjc4Mzk5", "avatar_url": "https://avatars0.githubusercontent.com/u/24278399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/didiern", "html_url": "https://github.com/didiern", "followers_url": "https://api.github.com/users/didiern/followers", "following_url": "https://api.github.com/users/didiern/following{/other_user}", "gists_url": "https://api.github.com/users/didiern/gists{/gist_id}", "starred_url": "https://api.github.com/users/didiern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/didiern/subscriptions", "organizations_url": "https://api.github.com/users/didiern/orgs", "repos_url": "https://api.github.com/users/didiern/repos", "events_url": "https://api.github.com/users/didiern/events{/privacy}", "received_events_url": "https://api.github.com/users/didiern/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-08T12:44:42Z", "updated_at": "2020-05-18T00:05:14Z", "closed_at": "2020-05-18T00:05:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like the API documentation and the examples in the SDK are wrong for the callback function of the shadowRegisterDeltaCallback method.\r\n\r\nin documentation and examples:    customCallback(payload, responseStatus, token)\r\nin the code:  something like customCallback(payload, delta/shadow_name, None)\r\n\r\nAm I correct?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/144", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/144/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/144/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/144", "id": 348708206, "node_id": "MDU6SXNzdWUzNDg3MDgyMDY=", "number": 144, "title": "offline publish queue size ignored", "user": {"login": "pocket5s", "id": 15286, "node_id": "MDQ6VXNlcjE1Mjg2", "avatar_url": "https://avatars1.githubusercontent.com/u/15286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pocket5s", "html_url": "https://github.com/pocket5s", "followers_url": "https://api.github.com/users/pocket5s/followers", "following_url": "https://api.github.com/users/pocket5s/following{/other_user}", "gists_url": "https://api.github.com/users/pocket5s/gists{/gist_id}", "starred_url": "https://api.github.com/users/pocket5s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pocket5s/subscriptions", "organizations_url": "https://api.github.com/users/pocket5s/orgs", "repos_url": "https://api.github.com/users/pocket5s/repos", "events_url": "https://api.github.com/users/pocket5s/events{/privacy}", "received_events_url": "https://api.github.com/users/pocket5s/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321376, "node_id": "MDU6TGFiZWwxMzA2MzIxMzc2", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/feature-request", "name": "feature-request", "color": "008672", "default": false, "description": "A feature should be added or improved."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-08T12:40:52Z", "updated_at": "2020-05-18T00:05:13Z", "closed_at": "2020-05-18T00:05:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I set up a test client using the basicPubSub example as a base. when I set the offline queue size via:\r\n\r\nmyAWSIoTMQTTClient.configureOfflinePublishQueueing(0)\r\n\r\nto any number zero or greater, the value is ignored and all messages get sent. For my test I'll get the client running with it publishing a message every 60 seconds. I'll turn off my internet connection (laptop wifi), let a few cycles pass, turn the wifi back on and all messages that couldn't get sent are queued up and sent upon the reconnect.\r\n\r\nIf I understand the docs correctly, it should only queue up a number equal to the value I set in that function call and no more.  In the debug logging, I do see where the code says \"Configuring offline requests queueing: max queue size: X\". ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/143", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/143/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/143/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/143", "id": 348336406, "node_id": "MDU6SXNzdWUzNDgzMzY0MDY=", "number": 143, "title": "Cancel/Unsubscribe from createJobSubscription", "user": {"login": "Dylan-Sharp", "id": 17012492, "node_id": "MDQ6VXNlcjE3MDEyNDky", "avatar_url": "https://avatars1.githubusercontent.com/u/17012492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-Sharp", "html_url": "https://github.com/Dylan-Sharp", "followers_url": "https://api.github.com/users/Dylan-Sharp/followers", "following_url": "https://api.github.com/users/Dylan-Sharp/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-Sharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-Sharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-Sharp/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-Sharp/orgs", "repos_url": "https://api.github.com/users/Dylan-Sharp/repos", "events_url": "https://api.github.com/users/Dylan-Sharp/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-Sharp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321376, "node_id": "MDU6TGFiZWwxMzA2MzIxMzc2", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/feature-request", "name": "feature-request", "color": "008672", "default": false, "description": "A feature should be added or improved."}, {"id": 1306321352, "node_id": "MDU6TGFiZWwxMzA2MzIxMzUy", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/guidance", "name": "guidance", "color": "8a19e7", "default": false, "description": "Question that needs advice or information."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-07T14:04:45Z", "updated_at": "2020-05-18T00:05:11Z", "closed_at": "2020-05-18T00:05:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to cancel a subscription / unsubscribe from a Job Topic when using the createJobSubscription() method from an AWSIoTMQTTThingJobsClient easily?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/142", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/142/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/142/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/142", "id": 345437040, "node_id": "MDU6SXNzdWUzNDU0MzcwNDA=", "number": 142, "title": "Failure to reconnect when network restored", "user": {"login": "codesqueak", "id": 19918385, "node_id": "MDQ6VXNlcjE5OTE4Mzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/19918385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codesqueak", "html_url": "https://github.com/codesqueak", "followers_url": "https://api.github.com/users/codesqueak/followers", "following_url": "https://api.github.com/users/codesqueak/following{/other_user}", "gists_url": "https://api.github.com/users/codesqueak/gists{/gist_id}", "starred_url": "https://api.github.com/users/codesqueak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codesqueak/subscriptions", "organizations_url": "https://api.github.com/users/codesqueak/orgs", "repos_url": "https://api.github.com/users/codesqueak/repos", "events_url": "https://api.github.com/users/codesqueak/events{/privacy}", "received_events_url": "https://api.github.com/users/codesqueak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-28T10:06:10Z", "updated_at": "2020-06-17T00:07:36Z", "closed_at": "2020-06-17T00:07:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Release 1.4.0\r\n\r\nPlatform Raspberry Pi Zero\r\n\r\nI have an application based on the async example.  The program connects and sends data without issue.  \r\n\r\nHowever, if I the network is lost and then restored, the application appears to fail to detect the network availability and remains in offline mode.\r\n\r\n2018-07-28 09:54:29,541 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async publish...\r\n2018-07-28 09:54:29,550 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\n2018-07-28 09:54:29,558 - AWSIoTPythonSDK.core.protocol.internal.queues - DEBUG - append: Add new element: <AWSIoTPythonSDK.core.protocol.internal.requests.QueueableRequest object at 0xb65641f0>\r\n\r\nAny hints on what may be wrong ? how to fix this issue ?\r\n\r\nAny help appreciated !\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/141", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/141/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/141/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/141", "id": 341902480, "node_id": "MDU6SXNzdWUzNDE5MDI0ODA=", "number": 141, "title": "Interacting with device shadows sample throws subscribeQueueDisabledException ", "user": {"login": "ChittepuVenkat", "id": 41155935, "node_id": "MDQ6VXNlcjQxMTU1OTM1", "avatar_url": "https://avatars3.githubusercontent.com/u/41155935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChittepuVenkat", "html_url": "https://github.com/ChittepuVenkat", "followers_url": "https://api.github.com/users/ChittepuVenkat/followers", "following_url": "https://api.github.com/users/ChittepuVenkat/following{/other_user}", "gists_url": "https://api.github.com/users/ChittepuVenkat/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChittepuVenkat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChittepuVenkat/subscriptions", "organizations_url": "https://api.github.com/users/ChittepuVenkat/orgs", "repos_url": "https://api.github.com/users/ChittepuVenkat/repos", "events_url": "https://api.github.com/users/ChittepuVenkat/events{/privacy}", "received_events_url": "https://api.github.com/users/ChittepuVenkat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-17T12:42:21Z", "updated_at": "2019-08-29T18:01:59Z", "closed_at": "2019-08-29T18:01:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are trying out the samples documented as part of module 5(https://docs.aws.amazon.com/greengrass/latest/developerguide/config-dev-subs.html)\r\n\r\nWe are getting the following exceptions\r\n\r\n**Switch:**\r\nGreengrass core has already been discovered.\r\nGGC Host Address: 192.168.1.62\r\nGGC Group CA Path: ./groupCA/root-ca.crt\r\nPrivate Key of lightController thing Path: 31f6b955b9-private.pem.key\r\nCertificate of lightController thing Path: 31f6b955b9-certificate.pem.crt\r\nClient ID(thing name for lightController): GG_Switch\r\nTarget shadow thing ID(thing name for trafficLight): GG_TrafficLight\r\n2018-07-17 17:41:35,238 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2018-07-17 17:41:35,239 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: GG_Switch\r\n2018-07-17 17:41:35,239 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2018-07-17 17:41:35,239 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2018-07-17 17:41:35,239 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queueing: max queue size: 0\r\n2018-07-17 17:41:35,239 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queue draining interval: 0.100000 sec\r\n2018-07-17 17:41:35,239 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2018-07-17 17:41:35,240 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\n2018-07-17 17:41:35,240 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring reconnect back off timing...\r\n2018-07-17 17:41:35,240 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Base quiet time: 1.000000 sec\r\n2018-07-17 17:41:35,240 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Max quiet time: 32.000000 sec\r\n2018-07-17 17:41:35,240 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Stable connection time: 20.000000 sec\r\n2018-07-17 17:41:35,240 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\n2018-07-17 17:41:35,240 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 5.000000 sec\r\n2018-07-17 17:41:35,240 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2018-07-17 17:41:35,241 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2018-07-17 17:41:35,241 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n{\"state\":{\"desired\":{\"property\":\"G\"}}}\r\n2018-07-17 17:41:35,262 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync subscribe...\r\n2018-07-17 17:41:35,262 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Offline request detected!\r\n2018-07-17 17:41:35,262 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Offline request queue has been disabled\r\nTraceback (most recent call last):\r\n  File \"lightController.py\", line 218, in <module>\r\n    deviceShadowHandler.shadowUpdate(JSONPayload, customShadowCallback_Update, 5)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/shadow/deviceShadow.py\", line 356, in shadowUpdate\r\n    self._shadowManagerHandler.basicShadowSubscribe(self._shadowName, \"update\", self.generalCallback)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/shadow/shadowManager.py\", line 70, in basicShadowSubscribe\r\n    self._mqttCoreHandler.subscribe(currentShadowAction.getTopicAccept(), 0, srcCallback)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 274, in subscribe\r\n    self._handle_offline_request(RequestTypes.SUBSCRIBE, (topic, qos, message_callback))\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 345, in _handle_offline_request\r\n    raise self._offline_request_queue_disabled_exceptions[type]\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.subscribeQueueDisabledException\r\n\r\n-----------------------\r\n**Light**\r\nGreengrass core has already been discovered.\r\nGGC Host Address: 192.168.1.62\r\nGGC Group CA Path: ./groupCA/root-ca.crt\r\nPrivate Key of trafficLight thing Path: c8c292e124-private.pem.key\r\nCertificate of trafficLight thing Path: c8c292e124-certificate.pem.crt\r\nClient ID(thing name for trafficLight): GG_TrafficLight\r\nTarget shadow thing ID(thing name for trafficLight): GG_TrafficLight\r\n2018-07-17 17:40:56,019 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - MqttCore initialized\r\n2018-07-17 17:40:56,019 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Client id: GG_TrafficLight\r\n2018-07-17 17:40:56,020 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Protocol version: MQTTv3.1.1\r\n2018-07-17 17:40:56,020 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Authentication type: TLSv1.2 certificate based Mutual Auth.\r\n2018-07-17 17:40:56,020 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queueing: max queue size: 0\r\n2018-07-17 17:40:56,020 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring offline requests queue draining interval: 0.100000 sec\r\n2018-07-17 17:40:56,020 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring endpoint...\r\n2018-07-17 17:40:56,020 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring certificates...\r\n2018-07-17 17:40:56,021 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring reconnect back off timing...\r\n2018-07-17 17:40:56,021 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Base quiet time: 1.000000 sec\r\n2018-07-17 17:40:56,021 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Max quiet time: 32.000000 sec\r\n2018-07-17 17:40:56,021 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Stable connection time: 20.000000 sec\r\n2018-07-17 17:40:56,021 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring connect/disconnect time out: 10.000000 sec\r\n2018-07-17 17:40:56,021 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Configuring MQTT operation time out: 5.000000 sec\r\n2018-07-17 17:40:56,021 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync connect...\r\n2018-07-17 17:40:56,021 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing async connect...\r\n2018-07-17 17:40:56,021 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Keep-alive: 600.000000 sec\r\n2018-07-17 17:40:56,041 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync subscribe...\r\n2018-07-17 17:41:01,042 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Subscribe timed out\r\nTraceback (most recent call last):\r\n  File \"trafficLight.py\", line 233, in <module>\r\n    deviceShadowHandler.shadowRegisterDeltaCallback(customShadowCallback_Delta)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/shadow/deviceShadow.py\", line 398, in shadowRegisterDeltaCallback\r\n    self._shadowManagerHandler.basicShadowSubscribe(self._shadowName, \"delta\", self.generalCallback)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/shadow/shadowManager.py\", line 68, in basicShadowSubscribe\r\n    self._mqttCoreHandler.subscribe(currentShadowAction.getTopicDelta(), 0, srcCallback)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 281, in subscribe\r\n    raise subscribeTimeoutException()\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.subscribeTimeoutException\r\n\r\nHow to overcome this issue.\r\n\r\nThanks and Regards,\r\nVenkat", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/140", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/140/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/140/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/140", "id": 340602391, "node_id": "MDU6SXNzdWUzNDA2MDIzOTE=", "number": 140, "title": "Certificate subject does match remote host name, AWS IOT greengrass and AWS IOT core", "user": {"login": "raz08", "id": 20836472, "node_id": "MDQ6VXNlcjIwODM2NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/20836472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raz08", "html_url": "https://github.com/raz08", "followers_url": "https://api.github.com/users/raz08/followers", "following_url": "https://api.github.com/users/raz08/following{/other_user}", "gists_url": "https://api.github.com/users/raz08/gists{/gist_id}", "starred_url": "https://api.github.com/users/raz08/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raz08/subscriptions", "organizations_url": "https://api.github.com/users/raz08/orgs", "repos_url": "https://api.github.com/users/raz08/repos", "events_url": "https://api.github.com/users/raz08/events{/privacy}", "received_events_url": "https://api.github.com/users/raz08/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2068413824, "node_id": "MDU6TGFiZWwyMDY4NDEzODI0", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/closed-for-staleness", "name": "closed-for-staleness", "color": "ededed", "default": false, "description": null}, {"id": 1306321363, "node_id": "MDU6TGFiZWwxMzA2MzIxMzYz", "url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/labels/help%20wanted", "name": "help wanted", "color": "ffe79b", "default": true, "description": "We are asking the community to submit a PR to resolve this issue."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-12T11:43:06Z", "updated_at": "2020-05-18T00:05:10Z", "closed_at": "2020-05-18T00:05:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "It clearly says certificate does not match. But why? I'm not sure. I have created greengrass and device in that, It was working fine end to end (device to greengrass to cloud AWS iot) . But when I changed my network i.e. switched wifi. Then server rejected my my certificate with mentioned error. \r\n\r\nTrying from last two days. Please help me in fixing this. I'm new to certificate based security.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/139", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/139/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/139/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/139", "id": 337092494, "node_id": "MDU6SXNzdWUzMzcwOTI0OTQ=", "number": 139, "title": "SDK is no longer working after v1.4.0 release", "user": {"login": "igorescodro", "id": 2267495, "node_id": "MDQ6VXNlcjIyNjc0OTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2267495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/igorescodro", "html_url": "https://github.com/igorescodro", "followers_url": "https://api.github.com/users/igorescodro/followers", "following_url": "https://api.github.com/users/igorescodro/following{/other_user}", "gists_url": "https://api.github.com/users/igorescodro/gists{/gist_id}", "starred_url": "https://api.github.com/users/igorescodro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/igorescodro/subscriptions", "organizations_url": "https://api.github.com/users/igorescodro/orgs", "repos_url": "https://api.github.com/users/igorescodro/repos", "events_url": "https://api.github.com/users/igorescodro/events{/privacy}", "received_events_url": "https://api.github.com/users/igorescodro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-29T18:20:03Z", "updated_at": "2018-07-10T18:05:18Z", "closed_at": "2018-07-10T18:05:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a client that connects to AWS IoT and since the v1.4.0 update is no longer working. I tried to run with v1.3.1 and v1.4.0 but neither are working.\r\n\r\nTwo different errors occurs randomly:\r\n\r\n## SSL Error\r\n```\r\n    myMQTTClient.connect()\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 192, in connect\r\n    self.connect_async(keep_alive_sec, self._create_blocking_ack_callback(event))\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 219, in connect_async\r\n    raise e\r\nssl.SSLError: [SSL: TLSV1_ALERT_INTERNAL_ERROR] tlsv1 alert internal error (_ssl.c:726)\r\n```\r\n\r\n## connectTimeoutException\r\n```    myMQTTClient.connect()\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 195, in connect\r\n    raise connectTimeoutException()\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.connectTimeoutException\r\n```\r\n\r\nI tried to use the [sample provided](https://github.com/aws/aws-iot-device-sdk-python/blob/master/samples/jobs/jobsSample.py) with my endpoint and certificates and the same errors occurs:\r\n\r\n```\r\n...\r\n2018-06-29 15:19:19,456 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Starting network I/O thread...\r\n2018-06-29 15:19:25,883 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [disconnect] event\r\n2018-06-29 15:19:25,883 - AWSIoTPythonSDK.core.protocol.connection.cores - DEBUG - backOff: current backoff time is: 1 sec.\r\n2018-06-29 15:19:25,886 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [disconnect] event\r\n2018-06-29 15:19:25,886 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\r\n2018-06-29 15:19:25,887 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Cleaning up before stopping event consuming\r\n2018-06-29 15:19:25,887 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event queue cleared\r\n2018-06-29 15:19:25,887 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Stopping network I/O thread...\r\n2018-06-29 15:19:26,885 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Network thread stopped\r\n2018-06-29 15:19:26,885 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event callbacks cleared\r\n2018-06-29 15:19:26,885 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Event consuming thread stopped\r\n2018-06-29 15:19:26,886 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Exiting dispatching loop...\r\n2018-06-29 15:19:29,457 - AWSIoTPythonSDK.core.protocol.mqtt_core - ERROR - Connect timed out\r\nTraceback (most recent call last):\r\n  File \"jobsSample.py\", line 168, in <module>\r\n    jobsClient.connect()\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 1216, in connect\r\n    return self._AWSIoTMQTTClient.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/MQTTLib.py\", line 485, in connect\r\n    return self._mqtt_core.connect(keepAliveIntervalSecond)\r\n  File \"/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK/core/protocol/mqtt_core.py\", line 195, in connect\r\n    raise connectTimeoutException()\r\nAWSIoTPythonSDK.exception.AWSIoTExceptions.connectTimeoutException\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/138", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/138/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/138/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/138", "id": 335995887, "node_id": "MDU6SXNzdWUzMzU5OTU4ODc=", "number": 138, "title": "MQTT client timing out in subscribe()", "user": {"login": "shadetree01010100", "id": 8739615, "node_id": "MDQ6VXNlcjg3Mzk2MTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/8739615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shadetree01010100", "html_url": "https://github.com/shadetree01010100", "followers_url": "https://api.github.com/users/shadetree01010100/followers", "following_url": "https://api.github.com/users/shadetree01010100/following{/other_user}", "gists_url": "https://api.github.com/users/shadetree01010100/gists{/gist_id}", "starred_url": "https://api.github.com/users/shadetree01010100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shadetree01010100/subscriptions", "organizations_url": "https://api.github.com/users/shadetree01010100/orgs", "repos_url": "https://api.github.com/users/shadetree01010100/repos", "events_url": "https://api.github.com/users/shadetree01010100/events{/privacy}", "received_events_url": "https://api.github.com/users/shadetree01010100/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-26T21:23:16Z", "updated_at": "2018-06-27T14:56:57Z", "closed_at": "2018-06-27T14:56:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "An instance of AWSIoTMQTTClient is not able to subscribe to topics, raising `AWSIoTPythonSDK.exception.AWSIoTExceptions.subscribeTimeoutException` after the configured timeout. The topic can be replaced with any arbitrary string and the same exception is raised. I'm following this repo's README [verbatim](https://github.com/aws/aws-iot-device-sdk-python/blob/master/README.rst#awsiotmqttclient) so I won't bother to paste my code here, all calls to subscribe() timeout. What am I missing? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/135", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/135/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/135/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/135", "id": 333266317, "node_id": "MDU6SXNzdWUzMzMyNjYzMTc=", "number": 135, "title": "How to set ALPN protocol for MQTT with cert over 443", "user": {"login": "nseymoursmith", "id": 4093903, "node_id": "MDQ6VXNlcjQwOTM5MDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4093903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nseymoursmith", "html_url": "https://github.com/nseymoursmith", "followers_url": "https://api.github.com/users/nseymoursmith/followers", "following_url": "https://api.github.com/users/nseymoursmith/following{/other_user}", "gists_url": "https://api.github.com/users/nseymoursmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/nseymoursmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nseymoursmith/subscriptions", "organizations_url": "https://api.github.com/users/nseymoursmith/orgs", "repos_url": "https://api.github.com/users/nseymoursmith/repos", "events_url": "https://api.github.com/users/nseymoursmith/events{/privacy}", "received_events_url": "https://api.github.com/users/nseymoursmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-18T13:19:22Z", "updated_at": "2018-06-18T17:48:50Z", "closed_at": "2018-06-18T17:48:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't find any methods in this repo for enabling MQTT with certification over port 443 (not using websockets). Is there one?\r\n\r\nI have searched online for a way to set the alpn protocol using ssl contexts, but the implementation of paho mqtt client in 'mqtt_core.py uses' \r\n\r\n> tls_set() \r\n\r\ninstead of \r\n\r\n> tls_set_context() \r\n\r\nso it would be hard to implement this without rewriting and potentially breaking that implementation, so I was hoping I'd just missed the idiomatic way of doing it in the codebase.\r\n\r\nThis is a link to the answer that implements it using tls_set_context()\r\nhttps://stackoverflow.com/questions/48998420/aws-iot-use-mqtt-on-port-443\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/134", "repository_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python", "labels_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/134/comments", "events_url": "https://api.github.com/repos/aws/aws-iot-device-sdk-python/issues/134/events", "html_url": "https://github.com/aws/aws-iot-device-sdk-python/issues/134", "id": 331108449, "node_id": "MDU6SXNzdWUzMzExMDg0NDk=", "number": 134, "title": "Creating different iot-devices for different cognito users and downloading certificates to publish,subsribe topics", "user": {"login": "warlock-jay", "id": 26434600, "node_id": "MDQ6VXNlcjI2NDM0NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/26434600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/warlock-jay", "html_url": "https://github.com/warlock-jay", "followers_url": "https://api.github.com/users/warlock-jay/followers", "following_url": "https://api.github.com/users/warlock-jay/following{/other_user}", "gists_url": "https://api.github.com/users/warlock-jay/gists{/gist_id}", "starred_url": "https://api.github.com/users/warlock-jay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/warlock-jay/subscriptions", "organizations_url": "https://api.github.com/users/warlock-jay/orgs", "repos_url": "https://api.github.com/users/warlock-jay/repos", "events_url": "https://api.github.com/users/warlock-jay/events{/privacy}", "received_events_url": "https://api.github.com/users/warlock-jay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-11T09:20:48Z", "updated_at": "2018-06-12T00:17:05Z", "closed_at": "2018-06-12T00:17:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have implemented cognito userpool,federated pool to give iot access to users.Now i'm able to create session in device when user signin.I am using boto3 library for that.\r\n\r\nI want to create each user seperate iot-group,and able to publish and subscribe topics in group.How to \r\ncreate group and how to download rootCA,private key key for iot group using boto3?\r\n", "performed_via_github_app": null, "score": 1.0}]}