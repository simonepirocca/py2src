{"total_count": 4, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/RazerM/ratelimiter/issues/6", "repository_url": "https://api.github.com/repos/RazerM/ratelimiter", "labels_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/6/comments", "events_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/6/events", "html_url": "https://github.com/RazerM/ratelimiter/issues/6", "id": 280948464, "node_id": "MDU6SXNzdWUyODA5NDg0NjQ=", "number": 6, "title": "Files missing on PyPI", "user": {"login": "chrysn", "id": 442326, "node_id": "MDQ6VXNlcjQ0MjMyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/442326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrysn", "html_url": "https://github.com/chrysn", "followers_url": "https://api.github.com/users/chrysn/followers", "following_url": "https://api.github.com/users/chrysn/following{/other_user}", "gists_url": "https://api.github.com/users/chrysn/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrysn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrysn/subscriptions", "organizations_url": "https://api.github.com/users/chrysn/orgs", "repos_url": "https://api.github.com/users/chrysn/repos", "events_url": "https://api.github.com/users/chrysn/events{/privacy}", "received_events_url": "https://api.github.com/users/chrysn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-11T09:32:37Z", "updated_at": "2017-12-12T00:34:06Z", "closed_at": "2017-12-12T00:30:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "While creating a Debian package for ratelimiter (as described on <https://bugs.debian.org/880661>), I found that the non-empty files in `tests/ ` are missing, and that only one of the two README files (which appear to have diverged) are provided.\r\n\r\nPlease consider adding the tests via MANIFEST.in (eg. as described [on stackoverflow](https://stackoverflow.com/questions/24727709/do-python-projects-need-a-manifest-in-and-what-should-be-in-it#24727824)), and having one up-to-date README that is shipped the same way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/RazerM/ratelimiter/issues/5", "repository_url": "https://api.github.com/repos/RazerM/ratelimiter", "labels_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/5/comments", "events_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/5/events", "html_url": "https://github.com/RazerM/ratelimiter/issues/5", "id": 280940472, "node_id": "MDU6SXNzdWUyODA5NDA0NzI=", "number": 5, "title": "Remove exec for async support", "user": {"login": "pmav99", "id": 411196, "node_id": "MDQ6VXNlcjQxMTE5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/411196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmav99", "html_url": "https://github.com/pmav99", "followers_url": "https://api.github.com/users/pmav99/followers", "following_url": "https://api.github.com/users/pmav99/following{/other_user}", "gists_url": "https://api.github.com/users/pmav99/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmav99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmav99/subscriptions", "organizations_url": "https://api.github.com/users/pmav99/orgs", "repos_url": "https://api.github.com/users/pmav99/repos", "events_url": "https://api.github.com/users/pmav99/events{/privacy}", "received_events_url": "https://api.github.com/users/pmav99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-11T09:03:19Z", "updated_at": "2018-01-10T23:40:53Z", "closed_at": "2018-01-10T23:40:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not that `exec()` is a huge problem in this context, but perhaps a more elegant way to support Python < 3.5 would be to move `__aenter__` into a different module and import the module on runtime. E.g.\r\n\r\n``` python\r\nimport sys\r\n\r\nif sys.version_info < (3, 5):\r\n    raise ImportError(\"Only support python versions >= 3.5\")\r\n\r\nimport time\r\nimport asyncio\r\n\r\nasync def __aenter__(self):\r\n    if self._alock is None:\r\n        self._init_async_lock()\r\n\r\n    with await self._alock:\r\n        # We want to ensure that no more than max_calls were run in the allowed\r\n        # period. For this, we store the last timestamps of each call and run\r\n        # the rate verification upon each __enter__ call.\r\n        if len(self.calls) >= self.max_calls:\r\n            until = time.time() + self.period - self._timespan\r\n            if self.callback:\r\n                asyncio.ensure_future(self.callback(until))\r\n            sleeptime = until - time.time()\r\n            if sleeptime > 0:\r\n                await asyncio.sleep(sleeptime)\r\n        return self\r\n```\r\nand \r\n``` python\r\nclass RateLimiter(object):\r\n    \"\"\"Provides rate limiting for an operation with a configurable number of\r\n    requests for a time period.\r\n    \"\"\"\r\n    # snip\r\n\r\n    if PY35:\r\n        import _async\r\n        __aenter__ = _async.__aenter__\r\n        __aexit__ = asyncio.coroutine(__exit__)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/RazerM/ratelimiter/issues/4", "repository_url": "https://api.github.com/repos/RazerM/ratelimiter", "labels_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/4/comments", "events_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/4/events", "html_url": "https://github.com/RazerM/ratelimiter/issues/4", "id": 261077259, "node_id": "MDU6SXNzdWUyNjEwNzcyNTk=", "number": 4, "title": "bug in callback triggering possibly related to threading", "user": {"login": "niloch", "id": 6801168, "node_id": "MDQ6VXNlcjY4MDExNjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6801168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niloch", "html_url": "https://github.com/niloch", "followers_url": "https://api.github.com/users/niloch/followers", "following_url": "https://api.github.com/users/niloch/following{/other_user}", "gists_url": "https://api.github.com/users/niloch/gists{/gist_id}", "starred_url": "https://api.github.com/users/niloch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niloch/subscriptions", "organizations_url": "https://api.github.com/users/niloch/orgs", "repos_url": "https://api.github.com/users/niloch/repos", "events_url": "https://api.github.com/users/niloch/events{/privacy}", "received_events_url": "https://api.github.com/users/niloch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-27T18:40:55Z", "updated_at": "2017-12-19T21:01:03Z", "closed_at": "2017-12-19T21:01:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a function that uses the `requests` library that I am decorating with a callback.  The callback seems to be triggered more frequently than one would expect.  The behavior works as expected when the decorated function returns a string. \r\n\r\n```python\r\nimport requests\r\nfrom ratelimiter import RateLimiter\r\n\r\n\r\ndef callback_message(until):\r\n    print('Rate limit reached, sleeping')\r\n\r\n\r\n@RateLimiter(max_calls=30, period=15, callback=callback_message)\r\ndef thing1():\r\n    return requests.get(\"https://www.google.com\")\r\n\r\n\r\n@RateLimiter(max_calls=30, period=15, callback=callback_message)\r\ndef thing2():\r\n    return \"thing2\"\r\n\r\n\r\nprint(\"Testing with requests\")\r\nfor i in range(100):\r\n    if i % 10 == 0:\r\n        print(i)\r\n    thing1()\r\n\r\nprint(\"Testing with simple function\")\r\nfor i in range(100):\r\n    if i % 10 == 0:\r\n        print(i)\r\n    thing2()\r\n\r\n\r\n```\r\n\r\nThis is the output:\r\n```\r\nTesting with requests\r\n0\r\n10\r\n20\r\n30\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\n40\r\nRate limit reached, sleeping\r\n50\r\n60\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\n70\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\n80\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\n90\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\nRate limit reached, sleeping\r\n\r\nTesting with simple functions\r\n0\r\n10\r\n20\r\n30\r\nRate limit reached, sleeping\r\n40\r\n50\r\n60\r\nRate limit reached, sleeping\r\n70\r\n80\r\n90\r\nRate limit reached, sleeping\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/RazerM/ratelimiter/issues/2", "repository_url": "https://api.github.com/repos/RazerM/ratelimiter", "labels_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/2/comments", "events_url": "https://api.github.com/repos/RazerM/ratelimiter/issues/2/events", "html_url": "https://github.com/RazerM/ratelimiter/issues/2", "id": 236674207, "node_id": "MDU6SXNzdWUyMzY2NzQyMDc=", "number": 2, "title": "Eager creation of asyncio.Lock requires an event loop.", "user": {"login": "RazerM", "id": 1337586, "node_id": "MDQ6VXNlcjEzMzc1ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1337586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RazerM", "html_url": "https://github.com/RazerM", "followers_url": "https://api.github.com/users/RazerM/followers", "following_url": "https://api.github.com/users/RazerM/following{/other_user}", "gists_url": "https://api.github.com/users/RazerM/gists{/gist_id}", "starred_url": "https://api.github.com/users/RazerM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RazerM/subscriptions", "organizations_url": "https://api.github.com/users/RazerM/orgs", "repos_url": "https://api.github.com/users/RazerM/repos", "events_url": "https://api.github.com/users/RazerM/events{/privacy}", "received_events_url": "https://api.github.com/users/RazerM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-17T17:41:41Z", "updated_at": "2017-06-17T20:06:21Z", "closed_at": "2017-06-17T20:06:21Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See python-astrodynamics/spacetrack#38\r\n\r\nThe lock should be not be created there's not an event loop.", "performed_via_github_app": null, "score": 1.0}]}